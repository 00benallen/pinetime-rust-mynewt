
/Users/Luppy/mynewt/stm32bluepill-mynewt-sensor/bin/targets/bluepill_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf:     file format elf32-littlearm
/Users/Luppy/mynewt/stm32bluepill-mynewt-sensor/bin/targets/bluepill_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0800112d

Program Header:
0x70000001 off    0x0000e3c4 vaddr 0x0800e3c4 paddr 0x0800e3c4 align 2**2
         filesz 0x00000018 memsz 0x00000018 flags r--
    LOAD off    0x00000000 vaddr 0x08000000 paddr 0x08000000 align 2**16
         filesz 0x0000e3dc memsz 0x0000e3dc flags rwx
    LOAD off    0x00010110 vaddr 0x20000110 paddr 0x0800e3dc align 2**16
         filesz 0x000000f4 memsz 0x000000f4 flags rw-
    LOAD off    0x00010208 vaddr 0x20000208 paddr 0x0800e4d0 align 2**16
         filesz 0x00000000 memsz 0x00003338 flags rw-
    LOAD off    0x00020000 vaddr 0x20000000 paddr 0x20000000 align 2**16
         filesz 0x00000000 memsz 0x0000010c flags rw-
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx
private flags = 5000200: [Version5 EABI] [soft-float ABI]

Sections:
Idx Name               Size      VMA       LMA       File off  Algn  Flags
  0 .imghdr            00000020  08001000  08001000  00001000  2**0  ALLOC
  1 .text              0000d3a4  08001020  08001020  00001020  2**4  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.exidx         00000018  0800e3c4  0800e3c4  0000e3c4  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .vector_relocation 0000010c  20000000  20000000  00020000  2**0  ALLOC
  4 .coredata          00000000  2000010c  2000010c  00010204  2**0  CONTENTS
  5 .data              000000f4  20000110  0800e3dc  00010110  2**3  CONTENTS, ALLOC, LOAD, DATA
  6 .corebss           00000000  20000204  20000204  00010204  2**0  CONTENTS
  7 .bss               00003338  20000208  0800e4d0  00010208  2**3  ALLOC
  8 .ARM.attributes    00000033  00000000  00000000  00010204  2**0  CONTENTS, READONLY
  9 .comment           0000007f  00000000  00000000  00010237  2**0  CONTENTS, READONLY
 10 .svc_table         00000004  00000000  00000000  000102b6  2**0  CONTENTS, READONLY
 11 .debug_line        00043179  00000000  00000000  000102ba  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_info        0007aef3  00000000  00000000  00053433  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev      0001077b  00000000  00000000  000ce326  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges     00002908  00000000  00000000  000deaa8  2**3  CONTENTS, READONLY, DEBUGGING
 15 .debug_str         0001ad00  00000000  00000000  000e13b0  2**0  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges      00015298  00000000  00000000  000fc0b0  2**3  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc         00022180  00000000  00000000  00111348  2**0  CONTENTS, READONLY, DEBUGGING
 18 .debug_frame       0000b2b4  00000000  00000000  001334c8  2**2  CONTENTS, READONLY, DEBUGGING
 19 .debug_macinfo     00000003  00000000  00000000  0013e77c  2**0  CONTENTS, READONLY, DEBUGGING
 20 .debug_pubnames    00000dc5  00000000  00000000  0013e77f  2**0  CONTENTS, READONLY, DEBUGGING
 21 .debug_pubtypes    000059f4  00000000  00000000  0013f544  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
08001000 l    d  .imghdr	00000000 .imghdr
08001020 l    d  .text	00000000 .text
0800e3c4 l    d  .ARM.exidx	00000000 .ARM.exidx
20000000 l    d  .vector_relocation	00000000 .vector_relocation
2000010c l    d  .coredata	00000000 .coredata
20000110 l    d  .data	00000000 .data
20000204 l    d  .corebss	00000000 .corebss
20000208 l    d  .bss	00000000 .bss
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .svc_table	00000000 .svc_table
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_macinfo	00000000 .debug_macinfo
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_pubtypes	00000000 .debug_pubtypes
00000000 l    df *ABS*	00000000 startup_stm32f103xb.o
f108f85f l       *ABS*	00000000 BootRAM
08001138 l       .text	00000000 LoopCopyDataInit
08001130 l       .text	00000000 CopyDataInit
0800114c l       .text	00000000 LoopFillZerobss
08001146 l       .text	00000000 FillZerobss
0800115c l       .text	00000000 LoopFillZeroCoreBss
08001156 l       .text	00000000 FillZeroCoreBss
08001188 l       .text	00000000 Infinite_Loop
00000000 l    df *ABS*	00000000 system_stm32f1xx.c
00000000 l    df *ABS*	00000000 cmsis_nvic.c
00000000 l    df *ABS*	00000000 start.c
00000000 l    df *ABS*	00000000 app.o6vxcoia-cgu.0
000023de l       .debug_str	00000000 
00002c7c l       .debug_str	00000000 
00002c86 l       .debug_str	00000000 
00002c96 l       .debug_str	00000000 
00002cab l       .debug_str	00000000 
00002cb3 l       .debug_str	00000000 
00002d17 l       .debug_str	00000000 
00002d83 l       .debug_str	00000000 
00002d8a l       .debug_str	00000000 
00002d92 l       .debug_str	00000000 
00002dd3 l       .debug_str	00000000 
00002db0 l       .debug_str	00000000 
00002de3 l       .debug_str	00000000 
00002df8 l       .debug_str	00000000 
00002e0b l       .debug_str	00000000 
00002e20 l       .debug_str	00000000 
00002e27 l       .debug_str	00000000 
00002e3c l       .debug_str	00000000 
00014086 l       .debug_str	00000000 
00002e66 l       .debug_str	00000000 
00002ed6 l       .debug_str	00000000 
00002f29 l       .debug_str	00000000 
00002f78 l       .debug_str	00000000 
00002fb8 l       .debug_str	00000000 
00002fdf l       .debug_str	00000000 
00000aae l       .debug_str	00000000 
00018d08 l       .debug_str	00000000 
00002fe3 l       .debug_str	00000000 
00002fed l       .debug_str	00000000 
00002ff6 l       .debug_str	00000000 
00000394 l       .debug_str	00000000 
000005d0 l       .debug_str	00000000 
00002fff l       .debug_str	00000000 
00003026 l       .debug_str	00000000 
00003057 l       .debug_str	00000000 
0000303e l       .debug_str	00000000 
00003061 l       .debug_str	00000000 
000030a9 l       .debug_str	00000000 
000030e9 l       .debug_str	00000000 
00003130 l       .debug_str	00000000 
00003139 l       .debug_str	00000000 
0000313d l       .debug_str	00000000 
00003167 l       .debug_str	00000000 
0000316c l       .debug_str	00000000 
000031b4 l       .debug_str	00000000 
000031bc l       .debug_str	00000000 
00003204 l       .debug_str	00000000 
000086b0 l       .debug_str	00000000 
0000320d l       .debug_str	00000000 
00003257 l       .debug_str	00000000 
00003260 l       .debug_str	00000000 
00003293 l       .debug_str	00000000 
000032be l       .debug_str	00000000 
000032c0 l       .debug_str	00000000 
000032fc l       .debug_str	00000000 
0001363e l       .debug_str	00000000 
0000330f l       .debug_str	00000000 
00003321 l       .debug_str	00000000 
00003327 l       .debug_str	00000000 
000186c2 l       .debug_str	00000000 
00014d40 l       .debug_str	00000000 
0000332d l       .debug_str	00000000 
00014973 l       .debug_str	00000000 
000140a6 l       .debug_str	00000000 
00010ae9 l       .debug_str	00000000 
0000333a l       .debug_str	00000000 
00007c57 l       .debug_str	00000000 
0000f0bc l       .debug_str	00000000 
00007c6b l       .debug_str	00000000 
00000310 l       .debug_str	00000000 
000116ec l       .debug_str	00000000 
0000dde5 l       .debug_str	00000000 
0000333e l       .debug_str	00000000 
00003368 l       .debug_str	00000000 
00003350 l       .debug_str	00000000 
00003342 l       .debug_str	00000000 
0000335a l       .debug_str	00000000 
0000061b l       .debug_str	00000000 
0000065c l       .debug_str	00000000 
0000003e l       .debug_str	00000000 
00014c87 l       .debug_str	00000000 
00000670 l       .debug_str	00000000 
0000067b l       .debug_str	00000000 
00000689 l       .debug_str	00000000 
0000ff86 l       .debug_str	00000000 
000006ac l       .debug_str	00000000 
00000690 l       .debug_str	00000000 
00000698 l       .debug_str	00000000 
0000069c l       .debug_str	00000000 
000006a5 l       .debug_str	00000000 
00015241 l       .debug_str	00000000 
000052d7 l       .debug_str	00000000 
00005548 l       .debug_str	00000000 
0000713b l       .debug_str	00000000 
000006af l       .debug_str	00000000 
00000d51 l       .debug_str	00000000 
000006b7 l       .debug_str	00000000 
0000712a l       .debug_str	00000000 
0000684d l       .debug_str	00000000 
000006ee l       .debug_str	00000000 
000006f1 l       .debug_str	00000000 
000006f5 l       .debug_str	00000000 
0000cf6b l       .debug_str	00000000 
00017ff2 l       .debug_str	00000000 
00000b7e l       .debug_str	00000000 
000006fc l       .debug_str	00000000 
00000701 l       .debug_str	00000000 
00000707 l       .debug_str	00000000 
0000070e l       .debug_str	00000000 
000175f1 l       .debug_str	00000000 
000010aa l       .debug_str	00000000 
00000716 l       .debug_str	00000000 
0000071e l       .debug_str	00000000 
00000729 l       .debug_str	00000000 
00000734 l       .debug_str	00000000 
00000741 l       .debug_str	00000000 
0000074c l       .debug_str	00000000 
00000754 l       .debug_str	00000000 
0000075f l       .debug_str	00000000 
0000076a l       .debug_str	00000000 
00000774 l       .debug_str	00000000 
0000077f l       .debug_str	00000000 
0000078a l       .debug_str	00000000 
00000797 l       .debug_str	00000000 
000007a3 l       .debug_str	00000000 
000007b0 l       .debug_str	00000000 
000007be l       .debug_str	00000000 
000007c8 l       .debug_str	00000000 
000070d8 l       .debug_str	00000000 
000007d5 l       .debug_str	00000000 
000007d9 l       .debug_str	00000000 
000007e4 l       .debug_str	00000000 
00000bf7 l       .debug_str	00000000 
0000e886 l       .debug_str	00000000 
000007ef l       .debug_str	00000000 
000007f8 l       .debug_str	00000000 
00000854 l       .debug_str	00000000 
0000704c l       .debug_str	00000000 
000163ca l       .debug_str	00000000 
0000128c l       .debug_str	00000000 
00007184 l       .debug_str	00000000 
00000859 l       .debug_str	00000000 
000000d7 l       .debug_str	00000000 
00019e3d l       .debug_str	00000000 
000092e4 l       .debug_str	00000000 
0000e727 l       .debug_str	00000000 
0000085e l       .debug_str	00000000 
0001a3b4 l       .debug_str	00000000 
00000863 l       .debug_str	00000000 
00000868 l       .debug_str	00000000 
00000876 l       .debug_str	00000000 
000115bf l       .debug_str	00000000 
00000880 l       .debug_str	00000000 
00004320 l       .debug_str	00000000 
00000888 l       .debug_str	00000000 
0000088f l       .debug_str	00000000 
000008a3 l       .debug_str	00000000 
000008af l       .debug_str	00000000 
000008ba l       .debug_str	00000000 
000008c1 l       .debug_str	00000000 
000006a1 l       .debug_str	00000000 
00011500 l       .debug_str	00000000 
0001538f l       .debug_str	00000000 
0000860e l       .debug_str	00000000 
000008c7 l       .debug_str	00000000 
0000099f l       .debug_str	00000000 
000008d6 l       .debug_str	00000000 
000008da l       .debug_str	00000000 
000008e3 l       .debug_str	00000000 
000008ef l       .debug_str	00000000 
00000914 l       .debug_str	00000000 
00000908 l       .debug_str	00000000 
00000919 l       .debug_str	00000000 
00000923 l       .debug_str	00000000 
00000993 l       .debug_str	00000000 
00000981 l       .debug_str	00000000 
00019f23 l       .debug_str	00000000 
0000099e l       .debug_str	00000000 
000009a6 l       .debug_str	00000000 
000009bd l       .debug_str	00000000 
000009e1 l       .debug_str	00000000 
000116fa l       .debug_str	00000000 
000009fd l       .debug_str	00000000 
00000a26 l       .debug_str	00000000 
00000a16 l       .debug_str	00000000 
00000a30 l       .debug_str	00000000 
00000c81 l       .debug_str	00000000 
00000a8d l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
00000a94 l       .debug_str	00000000 
00000aa0 l       .debug_str	00000000 
00016bed l       .debug_str	00000000 
00000aa8 l       .debug_str	00000000 
00000aad l       .debug_str	00000000 
00000ab0 l       .debug_str	00000000 
000146a6 l       .debug_str	00000000 
00000ab9 l       .debug_str	00000000 
00000ac0 l       .debug_str	00000000 
00000abc l       .debug_str	00000000 
00000ac6 l       .debug_str	00000000 
00000ace l       .debug_str	00000000 
00000ad4 l       .debug_str	00000000 
00000af9 l       .debug_str	00000000 
00000adf l       .debug_str	00000000 
00000b02 l       .debug_str	00000000 
00000b21 l       .debug_str	00000000 
00007f78 l       .debug_str	00000000 
00000b48 l       .debug_str	00000000 
00000b7a l       .debug_str	00000000 
00000b81 l       .debug_str	00000000 
00000bbe l       .debug_str	00000000 
0001463b l       .debug_str	00000000 
00000067 l       .debug_str	00000000 
00010f1c l       .debug_str	00000000 
00015bf3 l       .debug_str	00000000 
00000bd2 l       .debug_str	00000000 
0001121f l       .debug_str	00000000 
000086b4 l       .debug_str	00000000 
00000bd7 l       .debug_str	00000000 
00000d25 l       .debug_str	00000000 
00000cdc l       .debug_str	00000000 
00000be7 l       .debug_str	00000000 
00002b28 l       .debug_str	00000000 
0000462a l       .debug_str	00000000 
00000bfe l       .debug_str	00000000 
00000c22 l       .debug_str	00000000 
00000c2e l       .debug_str	00000000 
00000c3c l       .debug_str	00000000 
00000c53 l       .debug_str	00000000 
00017673 l       .debug_str	00000000 
00000c68 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00000c7b l       .debug_str	00000000 
00000c80 l       .debug_str	00000000 
00000c86 l       .debug_str	00000000 
00000c8b l       .debug_str	00000000 
00007f6c l       .debug_str	00000000 
0000704b l       .debug_str	00000000 
00000c90 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000cd7 l       .debug_str	00000000 
00006c85 l       .debug_str	00000000 
00000ce8 l       .debug_str	00000000 
00000d10 l       .debug_str	00000000 
000129aa l       .debug_str	00000000 
00000488 l       .debug_str	00000000 
000046ef l       .debug_str	00000000 
00000d31 l       .debug_str	00000000 
00000d3f l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
00000d56 l       .debug_str	00000000 
00000d61 l       .debug_str	00000000 
00000d73 l       .debug_str	00000000 
00004670 l       .debug_str	00000000 
00010ae8 l       .debug_str	00000000 
00000d87 l       .debug_str	00000000 
00000df7 l       .debug_str	00000000 
00000e2d l       .debug_str	00000000 
00000e5f l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000efd l       .debug_str	00000000 
00000f27 l       .debug_str	00000000 
00000f66 l       .debug_str	00000000 
00000f7c l       .debug_str	00000000 
000012d1 l       .debug_str	00000000 
00000f85 l       .debug_str	00000000 
00019295 l       .debug_str	00000000 
00000f8c l       .debug_str	00000000 
00000f98 l       .debug_str	00000000 
00000fa0 l       .debug_str	00000000 
00000ffa l       .debug_str	00000000 
0000105c l       .debug_str	00000000 
00001067 l       .debug_str	00000000 
000010ae l       .debug_str	00000000 
000010fd l       .debug_str	00000000 
00001107 l       .debug_str	00000000 
00001144 l       .debug_str	00000000 
00001189 l       .debug_str	00000000 
00001192 l       .debug_str	00000000 
000011a2 l       .debug_str	00000000 
000011aa l       .debug_str	00000000 
000011ff l       .debug_str	00000000 
0000125c l       .debug_str	00000000 
00001268 l       .debug_str	00000000 
00001271 l       .debug_str	00000000 
0000127d l       .debug_str	00000000 
00001289 l       .debug_str	00000000 
00001292 l       .debug_str	00000000 
0000129a l       .debug_str	00000000 
000004e3 l       .debug_str	00000000 
000012a2 l       .debug_str	00000000 
000012d0 l       .debug_str	00000000 
000012b7 l       .debug_str	00000000 
000012d7 l       .debug_str	00000000 
000012de l       .debug_str	00000000 
000012e6 l       .debug_str	00000000 
000005c5 l       .debug_str	00000000 
000012f0 l       .debug_str	00000000 
000004f4 l       .debug_str	00000000 
000003b9 l       .debug_str	00000000 
00007ac6 l       .debug_str	00000000 
0000039f l       .debug_str	00000000 
000004ed l       .debug_str	00000000 
00000423 l       .debug_str	00000000 
0000ead6 l       .debug_str	00000000 
000004b4 l       .debug_str	00000000 
000003b3 l       .debug_str	00000000 
00014d11 l       .debug_str	00000000 
0000df8f l       .debug_str	00000000 
000012f9 l       .debug_str	00000000 
00001326 l       .debug_str	00000000 
00001262 l       .debug_str	00000000 
00010375 l       .debug_str	00000000 
000003f6 l       .debug_str	00000000 
00000545 l       .debug_str	00000000 
00000492 l       .debug_str	00000000 
000003c5 l       .debug_str	00000000 
0000135b l       .debug_str	00000000 
00001384 l       .debug_str	00000000 
000013e2 l       .debug_str	00000000 
0000047e l       .debug_str	00000000 
000005af l       .debug_str	00000000 
00000573 l       .debug_str	00000000 
00001448 l       .debug_str	00000000 
00001374 l       .debug_str	00000000 
000005b7 l       .debug_str	00000000 
000005a4 l       .debug_str	00000000 
00000538 l       .debug_str	00000000 
0000036b l       .debug_str	00000000 
00001466 l       .debug_str	00000000 
0000051d l       .debug_str	00000000 
000004e4 l       .debug_str	00000000 
000003de l       .debug_str	00000000 
0000147c l       .debug_str	00000000 
000014a2 l       .debug_str	00000000 
00000389 l       .debug_str	00000000 
000014b8 l       .debug_str	00000000 
00007166 l       .debug_str	00000000 
00001481 l       .debug_str	00000000 
000014ce l       .debug_str	00000000 
00015215 l       .debug_str	00000000 
000014e5 l       .debug_str	00000000 
000014ed l       .debug_str	00000000 
000014f6 l       .debug_str	00000000 
00002a0b l       .debug_str	00000000 
000014ff l       .debug_str	00000000 
00014a4c l       .debug_str	00000000 
00001507 l       .debug_str	00000000 
00001513 l       .debug_str	00000000 
0000151e l       .debug_str	00000000 
00001526 l       .debug_str	00000000 
0000152e l       .debug_str	00000000 
000015aa l       .debug_str	00000000 
0000162e l       .debug_str	00000000 
0000172a l       .debug_str	00000000 
0000182e l       .debug_str	00000000 
0000183c l       .debug_str	00000000 
00001847 l       .debug_str	00000000 
00001874 l       .debug_str	00000000 
00001851 l       .debug_str	00000000 
0000187f l       .debug_str	00000000 
000018fa l       .debug_str	00000000 
0000197d l       .debug_str	00000000 
0000198b l       .debug_str	00000000 
000019ea l       .debug_str	00000000 
00001a51 l       .debug_str	00000000 
00001a67 l       .debug_str	00000000 
00001a77 l       .debug_str	00000000 
00011712 l       .debug_str	00000000 
00001a86 l       .debug_str	00000000 
00001a8c l       .debug_str	00000000 
00001a92 l       .debug_str	00000000 
00001a98 l       .debug_str	00000000 
00001aa4 l       .debug_str	00000000 
00001aac l       .debug_str	00000000 
000182bc l       .debug_str	00000000 
00001ab4 l       .debug_str	00000000 
00001afa l       .debug_str	00000000 
00001ad7 l       .debug_str	00000000 
00001b0a l       .debug_str	00000000 
00001b4a l       .debug_str	00000000 
00011ecd l       .debug_str	00000000 
00001b92 l       .debug_str	00000000 
00001b98 l       .debug_str	00000000 
00001b9e l       .debug_str	00000000 
00001bc7 l       .debug_str	00000000 
00001ba4 l       .debug_str	00000000 
00001bd9 l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
0001218a l       .debug_str	00000000 
00001c65 l       .debug_str	00000000 
00001c6b l       .debug_str	00000000 
00001c71 l       .debug_str	00000000 
00001c9a l       .debug_str	00000000 
00001c77 l       .debug_str	00000000 
00001cac l       .debug_str	00000000 
00001cee l       .debug_str	00000000 
000129da l       .debug_str	00000000 
00001d38 l       .debug_str	00000000 
00001d3e l       .debug_str	00000000 
00001d44 l       .debug_str	00000000 
00001d4a l       .debug_str	00000000 
00001d73 l       .debug_str	00000000 
00001d50 l       .debug_str	00000000 
00001d84 l       .debug_str	00000000 
00001dc5 l       .debug_str	00000000 
00001e0e l       .debug_str	00000000 
00001e13 l       .debug_str	00000000 
00012295 l       .debug_str	00000000 
00001e18 l       .debug_str	00000000 
00001e1e l       .debug_str	00000000 
00001e24 l       .debug_str	00000000 
00001e4d l       .debug_str	00000000 
00001e2a l       .debug_str	00000000 
00001e5e l       .debug_str	00000000 
00001e9f l       .debug_str	00000000 
0001165b l       .debug_str	00000000 
00001ee8 l       .debug_str	00000000 
00001f14 l       .debug_str	00000000 
00001ef1 l       .debug_str	00000000 
00001f25 l       .debug_str	00000000 
00001f66 l       .debug_str	00000000 
00001faf l       .debug_str	00000000 
0001160d l       .debug_str	00000000 
00001fb4 l       .debug_str	00000000 
00001fbd l       .debug_str	00000000 
00001fc4 l       .debug_str	00000000 
00001fef l       .debug_str	00000000 
00001fcc l       .debug_str	00000000 
00002001 l       .debug_str	00000000 
00002043 l       .debug_str	00000000 
0001203a l       .debug_str	00000000 
0000208d l       .debug_str	00000000 
00002093 l       .debug_str	00000000 
00002099 l       .debug_str	00000000 
0000209f l       .debug_str	00000000 
000020a5 l       .debug_str	00000000 
000020ad l       .debug_str	00000000 
000020bb l       .debug_str	00000000 
000020ca l       .debug_str	00000000 
000020db l       .debug_str	00000000 
000020e6 l       .debug_str	00000000 
000020f1 l       .debug_str	00000000 
000020fc l       .debug_str	00000000 
00002103 l       .debug_str	00000000 
00002149 l       .debug_str	00000000 
00002126 l       .debug_str	00000000 
0000215b l       .debug_str	00000000 
0000219d l       .debug_str	00000000 
0001292f l       .debug_str	00000000 
000021e7 l       .debug_str	00000000 
00002214 l       .debug_str	00000000 
000021f1 l       .debug_str	00000000 
00002226 l       .debug_str	00000000 
00002268 l       .debug_str	00000000 
000022b2 l       .debug_str	00000000 
000022b7 l       .debug_str	00000000 
000022e4 l       .debug_str	00000000 
000022c1 l       .debug_str	00000000 
000022f6 l       .debug_str	00000000 
00002338 l       .debug_str	00000000 
00002382 l       .debug_str	00000000 
00002401 l       .debug_str	00000000 
00002396 l       .debug_str	00000000 
000023a6 l       .debug_str	00000000 
000023af l       .debug_str	00000000 
000023ba l       .debug_str	00000000 
000023c9 l       .debug_str	00000000 
0000240f l       .debug_str	00000000 
000024ac l       .debug_str	00000000 
00002551 l       .debug_str	00000000 
0000255c l       .debug_str	00000000 
00002565 l       .debug_str	00000000 
000025a9 l       .debug_str	00000000 
00002586 l       .debug_str	00000000 
000025bc l       .debug_str	00000000 
0000263f l       .debug_str	00000000 
000026ca l       .debug_str	00000000 
000026e6 l       .debug_str	00000000 
00002732 l       .debug_str	00000000 
00002786 l       .debug_str	00000000 
000027a3 l       .debug_str	00000000 
000027b7 l       .debug_str	00000000 
00002803 l       .debug_str	00000000 
00002857 l       .debug_str	00000000 
0000286d l       .debug_str	00000000 
00002881 l       .debug_str	00000000 
000028c8 l       .debug_str	00000000 
00002917 l       .debug_str	00000000 
00002943 l       .debug_str	00000000 
00002920 l       .debug_str	00000000 
00002951 l       .debug_str	00000000 
00002957 l       .debug_str	00000000 
0000295f l       .debug_str	00000000 
00002966 l       .debug_str	00000000 
0000296e l       .debug_str	00000000 
00002979 l       .debug_str	00000000 
00002981 l       .debug_str	00000000 
00007a78 l       .debug_str	00000000 
00002990 l       .debug_str	00000000 
0000299b l       .debug_str	00000000 
000029a7 l       .debug_str	00000000 
000029b2 l       .debug_str	00000000 
000029c3 l       .debug_str	00000000 
000029c9 l       .debug_str	00000000 
000029d1 l       .debug_str	00000000 
000029d8 l       .debug_str	00000000 
000029e2 l       .debug_str	00000000 
000029ea l       .debug_str	00000000 
000029f2 l       .debug_str	00000000 
00002a14 l       .debug_str	00000000 
00002a1f l       .debug_str	00000000 
00002a2b l       .debug_str	00000000 
00002a33 l       .debug_str	00000000 
00002a3c l       .debug_str	00000000 
00000477 l       .debug_str	00000000 
00002a47 l       .debug_str	00000000 
00002a52 l       .debug_str	00000000 
00002a5d l       .debug_str	00000000 
00002a6d l       .debug_str	00000000 
00011605 l       .debug_str	00000000 
00003004 l       .debug_str	00000000 
00002a77 l       .debug_str	00000000 
00002aaf l       .debug_str	00000000 
00002aef l       .debug_str	00000000 
00002af6 l       .debug_str	00000000 
00002afe l       .debug_str	00000000 
0000301d l       .debug_str	00000000 
00002b15 l       .debug_str	00000000 
00002b25 l       .debug_str	00000000 
00002b34 l       .debug_str	00000000 
00002b3c l       .debug_str	00000000 
00002b43 l       .debug_str	00000000 
00002b4b l       .debug_str	00000000 
00002b8c l       .debug_str	00000000 
00002b69 l       .debug_str	00000000 
00002b9c l       .debug_str	00000000 
00002bb1 l       .debug_str	00000000 
00002bba l       .debug_str	00000000 
00002c17 l       .debug_str	00000000 
0800bf50 l     O .text	0000000c _ZN3app10app_sensor13SENSOR_DEVICE17h2a469235bdce3198E
080012da l     F .text	00000364 _ZN3app10app_sensor18handle_sensor_data17hce4161ccff29c081E
0800120a l     F .text	0000003a _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h5e4cd90c2150b615E
08001244 l     F .text	0000003a _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h61ad4c3b3d847e36E
0800127e l     F .text	0000000c _ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h422d517eccc73a15E
0800128a l     F .text	00000050 _ZN4core6result13unwrap_failed17h4b64b7a78ab076d1E
00000000 l    df *ABS*	00000000 cortex-m.o
00000000 l    df *ABS*	00000000 mynewt.6nuiha1u-cgu.0
0000472a l       .debug_str	00000000 
00004db1 l       .debug_str	00000000 
00004ddc l       .debug_str	00000000 
00004e05 l       .debug_str	00000000 
00004de6 l       .debug_str	00000000 
00011238 l       .debug_str	00000000 
00004e11 l       .debug_str	00000000 
00004e18 l       .debug_str	00000000 
00004e41 l       .debug_str	00000000 
00004e69 l       .debug_str	00000000 
00004eb2 l       .debug_str	00000000 
00004eda l       .debug_str	00000000 
00004f07 l       .debug_str	00000000 
00004f2f l       .debug_str	00000000 
00004f69 l       .debug_str	00000000 
00004f91 l       .debug_str	00000000 
00004fbd l       .debug_str	00000000 
00005008 l       .debug_str	00000000 
00005018 l       .debug_str	00000000 
00005026 l       .debug_str	00000000 
0000506d l       .debug_str	00000000 
00005079 l       .debug_str	00000000 
000050c0 l       .debug_str	00000000 
000050c9 l       .debug_str	00000000 
000129aa l       .debug_str	00000000 
000050d2 l       .debug_str	00000000 
000050dc l       .debug_str	00000000 
0000512c l       .debug_str	00000000 
00005138 l       .debug_str	00000000 
00014283 l       .debug_str	00000000 
00005169 l       .debug_str	00000000 
000051cc l       .debug_str	00000000 
000051d4 l       .debug_str	00000000 
000051da l       .debug_str	00000000 
000051e4 l       .debug_str	00000000 
000051ea l       .debug_str	00000000 
000051f5 l       .debug_str	00000000 
000051ff l       .debug_str	00000000 
0000520a l       .debug_str	00000000 
00005248 l       .debug_str	00000000 
00005260 l       .debug_str	00000000 
00012942 l       .debug_str	00000000 
00005264 l       .debug_str	00000000 
000052b7 l       .debug_str	00000000 
000052cb l       .debug_str	00000000 
00000c68 l       .debug_str	00000000 
000052d6 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00000c7b l       .debug_str	00000000 
000052d5 l       .debug_str	00000000 
00000c86 l       .debug_str	00000000 
00000c8b l       .debug_str	00000000 
00007f6c l       .debug_str	00000000 
000052dd l       .debug_str	00000000 
0000532f l       .debug_str	00000000 
0000533d l       .debug_str	00000000 
0000538b l       .debug_str	00000000 
0000539a l       .debug_str	00000000 
000053cb l       .debug_str	00000000 
00002fdf l       .debug_str	00000000 
000053d1 l       .debug_str	00000000 
00005435 l       .debug_str	00000000 
000086aa l       .debug_str	00000000 
00015bdb l       .debug_str	00000000 
0000543f l       .debug_str	00000000 
000054b8 l       .debug_str	00000000 
000128e7 l       .debug_str	00000000 
000054c2 l       .debug_str	00000000 
000054c8 l       .debug_str	00000000 
00005539 l       .debug_str	00000000 
00005547 l       .debug_str	00000000 
000025b5 l       .debug_str	00000000 
0000554e l       .debug_str	00000000 
0000787c l       .debug_str	00000000 
000086b0 l       .debug_str	00000000 
000055b1 l       .debug_str	00000000 
00005622 l       .debug_str	00000000 
00003327 l       .debug_str	00000000 
0000a645 l       .debug_str	00000000 
0000562e l       .debug_str	00000000 
0000569b l       .debug_str	00000000 
000056aa l       .debug_str	00000000 
000056a9 l       .debug_str	00000000 
000056b7 l       .debug_str	00000000 
0000dea9 l       .debug_str	00000000 
000056e8 l       .debug_str	00000000 
00005715 l       .debug_str	00000000 
0000571e l       .debug_str	00000000 
000070f2 l       .debug_str	00000000 
0000573a l       .debug_str	00000000 
0000573f l       .debug_str	00000000 
0000574e l       .debug_str	00000000 
00005796 l       .debug_str	00000000 
0000579f l       .debug_str	00000000 
000057e7 l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
0000585e l       .debug_str	00000000 
00005867 l       .debug_str	00000000 
000058af l       .debug_str	00000000 
000058ce l       .debug_str	00000000 
00005916 l       .debug_str	00000000 
0000594b l       .debug_str	00000000 
00005964 l       .debug_str	00000000 
0000c023 l       .debug_str	00000000 
000059cd l       .debug_str	00000000 
00005a38 l       .debug_str	00000000 
00005aa2 l       .debug_str	00000000 
00005b09 l       .debug_str	00000000 
00005b71 l       .debug_str	00000000 
00005bdc l       .debug_str	00000000 
00005c4c l       .debug_str	00000000 
00005cb4 l       .debug_str	00000000 
00005d1b l       .debug_str	00000000 
00005d93 l       .debug_str	00000000 
00005e0d l       .debug_str	00000000 
00005e8a l       .debug_str	00000000 
00005eff l       .debug_str	00000000 
00005f70 l       .debug_str	00000000 
00005ff7 l       .debug_str	00000000 
0000606f l       .debug_str	00000000 
000060a4 l       .debug_str	00000000 
000060af l       .debug_str	00000000 
0001291b l       .debug_str	00000000 
00006c85 l       .debug_str	00000000 
00000ce8 l       .debug_str	00000000 
000060eb l       .debug_str	00000000 
0000612b l       .debug_str	00000000 
00006141 l       .debug_str	00000000 
00006178 l       .debug_str	00000000 
00006183 l       .debug_str	00000000 
0000deff l       .debug_str	00000000 
000061b7 l       .debug_str	00000000 
00006243 l       .debug_str	00000000 
000062c0 l       .debug_str	00000000 
0000632f l       .debug_str	00000000 
000063a0 l       .debug_str	00000000 
00006410 l       .debug_str	00000000 
0000649e l       .debug_str	00000000 
0000650f l       .debug_str	00000000 
0000658d l       .debug_str	00000000 
000065fd l       .debug_str	00000000 
00006656 l       .debug_str	00000000 
0000666b l       .debug_str	00000000 
000066b7 l       .debug_str	00000000 
000066c0 l       .debug_str	00000000 
00006713 l       .debug_str	00000000 
00006722 l       .debug_str	00000000 
0000674f l       .debug_str	00000000 
0000679f l       .debug_str	00000000 
000067ab l       .debug_str	00000000 
0000f08a l       .debug_str	00000000 
000067f6 l       .debug_str	00000000 
00006847 l       .debug_str	00000000 
00006854 l       .debug_str	00000000 
0000cff1 l       .debug_str	00000000 
0000689c l       .debug_str	00000000 
000068ec l       .debug_str	00000000 
000068f8 l       .debug_str	00000000 
0000697d l       .debug_str	00000000 
00006993 l       .debug_str	00000000 
00006a0f l       .debug_str	00000000 
00006a8f l       .debug_str	00000000 
00006b17 l       .debug_str	00000000 
00014c90 l       .debug_str	00000000 
00006b3e l       .debug_str	00000000 
00013a29 l       .debug_str	00000000 
00006bc3 l       .debug_str	00000000 
0000a033 l       .debug_str	00000000 
00006beb l       .debug_str	00000000 
00006c19 l       .debug_str	00000000 
00006c23 l       .debug_str	00000000 
00006c4f l       .debug_str	00000000 
00006c57 l       .debug_str	00000000 
00006c87 l       .debug_str	00000000 
00006c92 l       .debug_str	00000000 
00006cc8 l       .debug_str	00000000 
00006cd9 l       .debug_str	00000000 
000136f8 l       .debug_str	00000000 
00006d0e l       .debug_str	00000000 
00010c36 l       .debug_str	00000000 
00003061 l       .debug_str	00000000 
00006d48 l       .debug_str	00000000 
0000f7f8 l       .debug_str	00000000 
00006d7b l       .debug_str	00000000 
00011d02 l       .debug_str	00000000 
00002f29 l       .debug_str	00000000 
00006dc6 l       .debug_str	00000000 
00012486 l       .debug_str	00000000 
00006e0a l       .debug_str	00000000 
00006e56 l       .debug_str	00000000 
00006e6d l       .debug_str	00000000 
00006eb3 l       .debug_str	00000000 
00000efd l       .debug_str	00000000 
00006ec4 l       .debug_str	00000000 
0000f5bc l       .debug_str	00000000 
00006f06 l       .debug_str	00000000 
00006f4a l       .debug_str	00000000 
00006f59 l       .debug_str	00000000 
00006f9c l       .debug_str	00000000 
00000e2d l       .debug_str	00000000 
00006faa l       .debug_str	00000000 
00007008 l       .debug_str	00000000 
0000700e l       .debug_str	00000000 
0000703a l       .debug_str	00000000 
00007040 l       .debug_str	00000000 
00007046 l       .debug_str	00000000 
000060a9 l       .debug_str	00000000 
00007050 l       .debug_str	00000000 
00014086 l       .debug_str	00000000 
00011ba2 l       .debug_str	00000000 
00014d40 l       .debug_str	00000000 
00000cdb l       .debug_str	00000000 
00002b27 l       .debug_str	00000000 
00018a6c l       .debug_str	00000000 
00010f1c l       .debug_str	00000000 
000070e4 l       .debug_str	00000000 
000070ed l       .debug_str	00000000 
000070f8 l       .debug_str	00000000 
000092d3 l       .debug_str	00000000 
00014973 l       .debug_str	00000000 
00007125 l       .debug_str	00000000 
0000a9be l       .debug_str	00000000 
0000712f l       .debug_str	00000000 
00010c1b l       .debug_str	00000000 
00007140 l       .debug_str	00000000 
0000714d l       .debug_str	00000000 
0000716e l       .debug_str	00000000 
00007173 l       .debug_str	00000000 
00007178 l       .debug_str	00000000 
0000717d l       .debug_str	00000000 
00007188 l       .debug_str	00000000 
00007193 l       .debug_str	00000000 
00007198 l       .debug_str	00000000 
0000719d l       .debug_str	00000000 
0001252b l       .debug_str	00000000 
000071a2 l       .debug_str	00000000 
00011bb8 l       .debug_str	00000000 
0000f905 l       .debug_str	00000000 
000071ae l       .debug_str	00000000 
0000061b l       .debug_str	00000000 
00003371 l       .debug_str	00000000 
0000003e l       .debug_str	00000000 
00000888 l       .debug_str	00000000 
000006ac l       .debug_str	00000000 
0000704c l       .debug_str	00000000 
0000704b l       .debug_str	00000000 
00000689 l       .debug_str	00000000 
0001463b l       .debug_str	00000000 
00000067 l       .debug_str	00000000 
00003388 l       .debug_str	00000000 
00000f7c l       .debug_str	00000000 
00002b25 l       .debug_str	00000000 
0000462a l       .debug_str	00000000 
00002b34 l       .debug_str	00000000 
0000712a l       .debug_str	00000000 
0000e727 l       .debug_str	00000000 
00007184 l       .debug_str	00000000 
0000085e l       .debug_str	00000000 
000010aa l       .debug_str	00000000 
000012d1 l       .debug_str	00000000 
00000f85 l       .debug_str	00000000 
00019295 l       .debug_str	00000000 
00000f8c l       .debug_str	00000000 
00000f98 l       .debug_str	00000000 
000007d5 l       .debug_str	00000000 
000007d9 l       .debug_str	00000000 
000007e4 l       .debug_str	00000000 
00000bf7 l       .debug_str	00000000 
00000be7 l       .debug_str	00000000 
00000fa0 l       .debug_str	00000000 
0001a3b4 l       .debug_str	00000000 
00000863 l       .debug_str	00000000 
00000698 l       .debug_str	00000000 
00000ffa l       .debug_str	00000000 
0000105c l       .debug_str	00000000 
00001067 l       .debug_str	00000000 
000010ae l       .debug_str	00000000 
000010fd l       .debug_str	00000000 
00001107 l       .debug_str	00000000 
00001144 l       .debug_str	00000000 
00001189 l       .debug_str	00000000 
00001192 l       .debug_str	00000000 
000011a2 l       .debug_str	00000000 
000011aa l       .debug_str	00000000 
000011ff l       .debug_str	00000000 
0000125c l       .debug_str	00000000 
00001268 l       .debug_str	00000000 
00001271 l       .debug_str	00000000 
0000127d l       .debug_str	00000000 
00001289 l       .debug_str	00000000 
00001292 l       .debug_str	00000000 
000006a5 l       .debug_str	00000000 
0000129a l       .debug_str	00000000 
000004e3 l       .debug_str	00000000 
000012a2 l       .debug_str	00000000 
000012d0 l       .debug_str	00000000 
000012b7 l       .debug_str	00000000 
000012d7 l       .debug_str	00000000 
000012de l       .debug_str	00000000 
000012e6 l       .debug_str	00000000 
000005c5 l       .debug_str	00000000 
000012f0 l       .debug_str	00000000 
000004f4 l       .debug_str	00000000 
000003b9 l       .debug_str	00000000 
00007ac6 l       .debug_str	00000000 
0000039f l       .debug_str	00000000 
000004ed l       .debug_str	00000000 
00000423 l       .debug_str	00000000 
0000ead6 l       .debug_str	00000000 
000004b4 l       .debug_str	00000000 
000003b3 l       .debug_str	00000000 
00014d11 l       .debug_str	00000000 
0000df8f l       .debug_str	00000000 
000012f9 l       .debug_str	00000000 
00001326 l       .debug_str	00000000 
00001262 l       .debug_str	00000000 
00010375 l       .debug_str	00000000 
000003f6 l       .debug_str	00000000 
00000545 l       .debug_str	00000000 
00000492 l       .debug_str	00000000 
000003c5 l       .debug_str	00000000 
0000135b l       .debug_str	00000000 
00001384 l       .debug_str	00000000 
000013e2 l       .debug_str	00000000 
0000047e l       .debug_str	00000000 
000005af l       .debug_str	00000000 
00000573 l       .debug_str	00000000 
00001448 l       .debug_str	00000000 
00001374 l       .debug_str	00000000 
000005b7 l       .debug_str	00000000 
000005a4 l       .debug_str	00000000 
00000538 l       .debug_str	00000000 
0000036b l       .debug_str	00000000 
00001466 l       .debug_str	00000000 
0000051d l       .debug_str	00000000 
000004e4 l       .debug_str	00000000 
000003de l       .debug_str	00000000 
0000147c l       .debug_str	00000000 
000014a2 l       .debug_str	00000000 
00000389 l       .debug_str	00000000 
000014b8 l       .debug_str	00000000 
00007166 l       .debug_str	00000000 
00001481 l       .debug_str	00000000 
000014ce l       .debug_str	00000000 
00015215 l       .debug_str	00000000 
000014e5 l       .debug_str	00000000 
000014ed l       .debug_str	00000000 
000014f6 l       .debug_str	00000000 
00002a0b l       .debug_str	00000000 
000014ff l       .debug_str	00000000 
00014a4c l       .debug_str	00000000 
00001507 l       .debug_str	00000000 
00001513 l       .debug_str	00000000 
0000151e l       .debug_str	00000000 
00001526 l       .debug_str	00000000 
0000162e l       .debug_str	00000000 
0000172a l       .debug_str	00000000 
0000182e l       .debug_str	00000000 
0000183c l       .debug_str	00000000 
00001847 l       .debug_str	00000000 
0000088f l       .debug_str	00000000 
00001874 l       .debug_str	00000000 
00001851 l       .debug_str	00000000 
0000187f l       .debug_str	00000000 
000018fa l       .debug_str	00000000 
0000197d l       .debug_str	00000000 
0000198b l       .debug_str	00000000 
000019ea l       .debug_str	00000000 
00001a51 l       .debug_str	00000000 
00001a67 l       .debug_str	00000000 
00001a77 l       .debug_str	00000000 
00011712 l       .debug_str	00000000 
0000099f l       .debug_str	00000000 
00001a86 l       .debug_str	00000000 
000086b4 l       .debug_str	00000000 
00001a8c l       .debug_str	00000000 
00001a92 l       .debug_str	00000000 
00001a98 l       .debug_str	00000000 
00001aa4 l       .debug_str	00000000 
00019e3d l       .debug_str	00000000 
00001aac l       .debug_str	00000000 
000182bc l       .debug_str	00000000 
00001ab4 l       .debug_str	00000000 
00001afa l       .debug_str	00000000 
00001ad7 l       .debug_str	00000000 
00001b0a l       .debug_str	00000000 
00001b4a l       .debug_str	00000000 
00011ecd l       .debug_str	00000000 
00001b92 l       .debug_str	00000000 
00001b98 l       .debug_str	00000000 
00001b9e l       .debug_str	00000000 
00001bc7 l       .debug_str	00000000 
00001ba4 l       .debug_str	00000000 
00001bd9 l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
0001218a l       .debug_str	00000000 
00001c65 l       .debug_str	00000000 
00001c6b l       .debug_str	00000000 
00001c71 l       .debug_str	00000000 
00001c9a l       .debug_str	00000000 
00001c77 l       .debug_str	00000000 
00001cac l       .debug_str	00000000 
00001cee l       .debug_str	00000000 
000129da l       .debug_str	00000000 
00001d38 l       .debug_str	00000000 
00001d3e l       .debug_str	00000000 
00001d44 l       .debug_str	00000000 
00001d4a l       .debug_str	00000000 
00001d73 l       .debug_str	00000000 
00001d50 l       .debug_str	00000000 
00001d84 l       .debug_str	00000000 
00001dc5 l       .debug_str	00000000 
00001e0e l       .debug_str	00000000 
00001e13 l       .debug_str	00000000 
00012295 l       .debug_str	00000000 
00001e18 l       .debug_str	00000000 
00001e1e l       .debug_str	00000000 
00001e24 l       .debug_str	00000000 
00001e4d l       .debug_str	00000000 
00001e2a l       .debug_str	00000000 
00001e5e l       .debug_str	00000000 
00001e9f l       .debug_str	00000000 
0001165b l       .debug_str	00000000 
00001ee8 l       .debug_str	00000000 
00001f14 l       .debug_str	00000000 
00001ef1 l       .debug_str	00000000 
00001f25 l       .debug_str	00000000 
00001f66 l       .debug_str	00000000 
00001faf l       .debug_str	00000000 
0001160d l       .debug_str	00000000 
00001fb4 l       .debug_str	00000000 
00001fbd l       .debug_str	00000000 
00001fc4 l       .debug_str	00000000 
00001fef l       .debug_str	00000000 
00001fcc l       .debug_str	00000000 
00002001 l       .debug_str	00000000 
00002043 l       .debug_str	00000000 
0001203a l       .debug_str	00000000 
0000208d l       .debug_str	00000000 
00002093 l       .debug_str	00000000 
00002099 l       .debug_str	00000000 
0000209f l       .debug_str	00000000 
000020a5 l       .debug_str	00000000 
000020ad l       .debug_str	00000000 
000020bb l       .debug_str	00000000 
000020ca l       .debug_str	00000000 
000020db l       .debug_str	00000000 
000020e6 l       .debug_str	00000000 
000020f1 l       .debug_str	00000000 
000020fc l       .debug_str	00000000 
00002103 l       .debug_str	00000000 
00002149 l       .debug_str	00000000 
00002126 l       .debug_str	00000000 
0000215b l       .debug_str	00000000 
0000219d l       .debug_str	00000000 
0001292f l       .debug_str	00000000 
000021e7 l       .debug_str	00000000 
00002214 l       .debug_str	00000000 
000021f1 l       .debug_str	00000000 
00002226 l       .debug_str	00000000 
00002268 l       .debug_str	00000000 
000022b2 l       .debug_str	00000000 
000022b7 l       .debug_str	00000000 
000022e4 l       .debug_str	00000000 
000022c1 l       .debug_str	00000000 
000022f6 l       .debug_str	00000000 
00002338 l       .debug_str	00000000 
00002382 l       .debug_str	00000000 
00004670 l       .debug_str	00000000 
00002401 l       .debug_str	00000000 
00002396 l       .debug_str	00000000 
000023a6 l       .debug_str	00000000 
000023af l       .debug_str	00000000 
000023ba l       .debug_str	00000000 
000023c9 l       .debug_str	00000000 
000023de l       .debug_str	00000000 
0000240f l       .debug_str	00000000 
000024ac l       .debug_str	00000000 
00002551 l       .debug_str	00000000 
0000255c l       .debug_str	00000000 
00002565 l       .debug_str	00000000 
000025a9 l       .debug_str	00000000 
00002586 l       .debug_str	00000000 
000025bc l       .debug_str	00000000 
0000263f l       .debug_str	00000000 
000026ca l       .debug_str	00000000 
000026e6 l       .debug_str	00000000 
00002732 l       .debug_str	00000000 
00002786 l       .debug_str	00000000 
000027a3 l       .debug_str	00000000 
000027b7 l       .debug_str	00000000 
00002803 l       .debug_str	00000000 
00002857 l       .debug_str	00000000 
0000286d l       .debug_str	00000000 
00002881 l       .debug_str	00000000 
000028c8 l       .debug_str	00000000 
00002917 l       .debug_str	00000000 
00002943 l       .debug_str	00000000 
00002920 l       .debug_str	00000000 
00002951 l       .debug_str	00000000 
00002957 l       .debug_str	00000000 
0000295f l       .debug_str	00000000 
00002966 l       .debug_str	00000000 
0000296e l       .debug_str	00000000 
00002979 l       .debug_str	00000000 
00002981 l       .debug_str	00000000 
00007a78 l       .debug_str	00000000 
00002990 l       .debug_str	00000000 
0000299b l       .debug_str	00000000 
000029a7 l       .debug_str	00000000 
000029b2 l       .debug_str	00000000 
000029c3 l       .debug_str	00000000 
000029c9 l       .debug_str	00000000 
000029d1 l       .debug_str	00000000 
000029d8 l       .debug_str	00000000 
000029e2 l       .debug_str	00000000 
000029ea l       .debug_str	00000000 
000029f2 l       .debug_str	00000000 
00002a14 l       .debug_str	00000000 
00002a1f l       .debug_str	00000000 
00002a2b l       .debug_str	00000000 
00002a33 l       .debug_str	00000000 
00002a3c l       .debug_str	00000000 
00000477 l       .debug_str	00000000 
00002a47 l       .debug_str	00000000 
00002a52 l       .debug_str	00000000 
00002a5d l       .debug_str	00000000 
00002a6d l       .debug_str	00000000 
00011605 l       .debug_str	00000000 
00003004 l       .debug_str	00000000 
00002a77 l       .debug_str	00000000 
00002aaf l       .debug_str	00000000 
00002aef l       .debug_str	00000000 
00002af6 l       .debug_str	00000000 
00002afe l       .debug_str	00000000 
0000301d l       .debug_str	00000000 
00002b15 l       .debug_str	00000000 
00002b69 l       .debug_str	00000000 
00002b9c l       .debug_str	00000000 
00002bb1 l       .debug_str	00000000 
00002bba l       .debug_str	00000000 
00002c17 l       .debug_str	00000000 
00002c7c l       .debug_str	00000000 
00002c86 l       .debug_str	00000000 
00002c96 l       .debug_str	00000000 
00002cab l       .debug_str	00000000 
00002cb3 l       .debug_str	00000000 
00002d17 l       .debug_str	00000000 
00002d83 l       .debug_str	00000000 
00002d8a l       .debug_str	00000000 
00002d92 l       .debug_str	00000000 
00002dd3 l       .debug_str	00000000 
00002db0 l       .debug_str	00000000 
00002de3 l       .debug_str	00000000 
00002df8 l       .debug_str	00000000 
00002e0b l       .debug_str	00000000 
00002e20 l       .debug_str	00000000 
00002e27 l       .debug_str	00000000 
00002e3c l       .debug_str	00000000 
0000152e l       .debug_str	00000000 
000015aa l       .debug_str	00000000 
00002b3c l       .debug_str	00000000 
00002b43 l       .debug_str	00000000 
00002b4b l       .debug_str	00000000 
00002b8c l       .debug_str	00000000 
0000339a l       .debug_str	00000000 
0000f918 l       .debug_str	00000000 
000033d6 l       .debug_str	00000000 
000033e3 l       .debug_str	00000000 
000033f0 l       .debug_str	00000000 
000033fb l       .debug_str	00000000 
0000515d l       .debug_str	00000000 
00003408 l       .debug_str	00000000 
0000344c l       .debug_str	00000000 
0000345a l       .debug_str	00000000 
0000fe86 l       .debug_str	00000000 
00019f98 l       .debug_str	00000000 
00003463 l       .debug_str	00000000 
000034c5 l       .debug_str	00000000 
0000352f l       .debug_str	00000000 
0000355e l       .debug_str	00000000 
0000353d l       .debug_str	00000000 
00003572 l       .debug_str	00000000 
0000357d l       .debug_str	00000000 
000052d7 l       .debug_str	00000000 
0000128c l       .debug_str	00000000 
00006743 l       .debug_str	00000000 
00003583 l       .debug_str	00000000 
000035c8 l       .debug_str	00000000 
000035d6 l       .debug_str	00000000 
0000684d l       .debug_str	00000000 
000006ee l       .debug_str	00000000 
000006f1 l       .debug_str	00000000 
000006f5 l       .debug_str	00000000 
0000cf6b l       .debug_str	00000000 
00017ff2 l       .debug_str	00000000 
00000b7e l       .debug_str	00000000 
000006fc l       .debug_str	00000000 
00000701 l       .debug_str	00000000 
00000707 l       .debug_str	00000000 
0000070e l       .debug_str	00000000 
000175f1 l       .debug_str	00000000 
0000071b l       .debug_str	00000000 
0000361b l       .debug_str	00000000 
00007030 l       .debug_str	00000000 
00000716 l       .debug_str	00000000 
0000071e l       .debug_str	00000000 
00000729 l       .debug_str	00000000 
00000734 l       .debug_str	00000000 
00000741 l       .debug_str	00000000 
0000074c l       .debug_str	00000000 
00000754 l       .debug_str	00000000 
0000075f l       .debug_str	00000000 
0000076a l       .debug_str	00000000 
00000774 l       .debug_str	00000000 
0000077f l       .debug_str	00000000 
0000078a l       .debug_str	00000000 
00000797 l       .debug_str	00000000 
000007a3 l       .debug_str	00000000 
000007b0 l       .debug_str	00000000 
000007be l       .debug_str	00000000 
000007c8 l       .debug_str	00000000 
000070d8 l       .debug_str	00000000 
0000e886 l       .debug_str	00000000 
000007ef l       .debug_str	00000000 
0000362a l       .debug_str	00000000 
00000854 l       .debug_str	00000000 
00007009 l       .debug_str	00000000 
000163ca l       .debug_str	00000000 
00000859 l       .debug_str	00000000 
000000d7 l       .debug_str	00000000 
000092e4 l       .debug_str	00000000 
00000868 l       .debug_str	00000000 
00000876 l       .debug_str	00000000 
000115bf l       .debug_str	00000000 
00000880 l       .debug_str	00000000 
00004320 l       .debug_str	00000000 
000008a3 l       .debug_str	00000000 
000008af l       .debug_str	00000000 
000008ba l       .debug_str	00000000 
000008c1 l       .debug_str	00000000 
000006a1 l       .debug_str	00000000 
00011500 l       .debug_str	00000000 
0001538f l       .debug_str	00000000 
0000860e l       .debug_str	00000000 
000008c7 l       .debug_str	00000000 
000008d6 l       .debug_str	00000000 
000008da l       .debug_str	00000000 
000008e3 l       .debug_str	00000000 
000008ef l       .debug_str	00000000 
00000914 l       .debug_str	00000000 
00000908 l       .debug_str	00000000 
00000919 l       .debug_str	00000000 
00000923 l       .debug_str	00000000 
00000993 l       .debug_str	00000000 
00000981 l       .debug_str	00000000 
00019f23 l       .debug_str	00000000 
0000099e l       .debug_str	00000000 
000009a6 l       .debug_str	00000000 
000009bd l       .debug_str	00000000 
000009e1 l       .debug_str	00000000 
000116fa l       .debug_str	00000000 
0000069c l       .debug_str	00000000 
00015241 l       .debug_str	00000000 
000009fd l       .debug_str	00000000 
00000a26 l       .debug_str	00000000 
00000a16 l       .debug_str	00000000 
00003687 l       .debug_str	00000000 
0000700f l       .debug_str	00000000 
000036f3 l       .debug_str	00000000 
00003707 l       .debug_str	00000000 
00003710 l       .debug_str	00000000 
00003717 l       .debug_str	00000000 
000046ef l       .debug_str	00000000 
00003722 l       .debug_str	00000000 
0000372d l       .debug_str	00000000 
0000703b l       .debug_str	00000000 
0000378a l       .debug_str	00000000 
000037ea l       .debug_str	00000000 
0000572e l       .debug_str	00000000 
0000571f l       .debug_str	00000000 
000037f3 l       .debug_str	00000000 
000007f8 l       .debug_str	00000000 
000037fc l       .debug_str	00000000 
000031b4 l       .debug_str	00000000 
0001444e l       .debug_str	00000000 
00003844 l       .debug_str	00000000 
0000386c l       .debug_str	00000000 
00003891 l       .debug_str	00000000 
00010c19 l       .debug_str	00000000 
00002fe3 l       .debug_str	00000000 
00002fed l       .debug_str	00000000 
00002ff6 l       .debug_str	00000000 
00000394 l       .debug_str	00000000 
000005d0 l       .debug_str	00000000 
00002fff l       .debug_str	00000000 
00003026 l       .debug_str	00000000 
00003057 l       .debug_str	00000000 
0000303e l       .debug_str	00000000 
00003896 l       .debug_str	00000000 
000005b0 l       .debug_str	00000000 
000038a3 l       .debug_str	00000000 
0000389e l       .debug_str	00000000 
000038c7 l       .debug_str	00000000 
000038bc l       .debug_str	00000000 
000038e0 l       .debug_str	00000000 
00003908 l       .debug_str	00000000 
0000392f l       .debug_str	00000000 
00003939 l       .debug_str	00000000 
00015a73 l       .debug_str	00000000 
00003941 l       .debug_str	00000000 
00003948 l       .debug_str	00000000 
00003952 l       .debug_str	00000000 
0000394d l       .debug_str	00000000 
00003975 l       .debug_str	00000000 
0000396b l       .debug_str	00000000 
0000398d l       .debug_str	00000000 
000039b5 l       .debug_str	00000000 
000039db l       .debug_str	00000000 
00003a03 l       .debug_str	00000000 
00003a26 l       .debug_str	00000000 
00003a2e l       .debug_str	00000000 
00003a37 l       .debug_str	00000000 
00015202 l       .debug_str	00000000 
00003a45 l       .debug_str	00000000 
00003a4c l       .debug_str	00000000 
00003a5c l       .debug_str	00000000 
00003a65 l       .debug_str	00000000 
00003a73 l       .debug_str	00000000 
00003a81 l       .debug_str	00000000 
00003a8d l       .debug_str	00000000 
0000e73d l       .debug_str	00000000 
00003a99 l       .debug_str	00000000 
00003aa8 l       .debug_str	00000000 
00003ab0 l       .debug_str	00000000 
00003ac9 l       .debug_str	00000000 
00003ada l       .debug_str	00000000 
00003ae2 l       .debug_str	00000000 
00003b15 l       .debug_str	00000000 
00003afc l       .debug_str	00000000 
00003b21 l       .debug_str	00000000 
00001295 l       .debug_str	00000000 
00003b53 l       .debug_str	00000000 
00003b3a l       .debug_str	00000000 
00003b5e l       .debug_str	00000000 
00003b67 l       .debug_str	00000000 
00003b9b l       .debug_str	00000000 
00003b82 l       .debug_str	00000000 
00003ba8 l       .debug_str	00000000 
00003bb0 l       .debug_str	00000000 
00003bd1 l       .debug_str	00000000 
00003be7 l       .debug_str	00000000 
00003bf2 l       .debug_str	00000000 
00003c02 l       .debug_str	00000000 
00003c06 l       .debug_str	00000000 
00003bc9 l       .debug_str	00000000 
00003c21 l       .debug_str	00000000 
00003c49 l       .debug_str	00000000 
00003c6d l       .debug_str	00000000 
00003c95 l       .debug_str	00000000 
00003cbc l       .debug_str	00000000 
00003ce4 l       .debug_str	00000000 
00003d10 l       .debug_str	00000000 
00003d38 l       .debug_str	00000000 
00003d5c l       .debug_str	00000000 
00003d65 l       .debug_str	00000000 
00003d7a l       .debug_str	00000000 
00003d85 l       .debug_str	00000000 
00003d8c l       .debug_str	00000000 
00003db4 l       .debug_str	00000000 
00003dd7 l       .debug_str	00000000 
00003dff l       .debug_str	00000000 
00003e33 l       .debug_str	00000000 
00003e5b l       .debug_str	00000000 
00003e91 l       .debug_str	00000000 
00003eb9 l       .debug_str	00000000 
00003ef2 l       .debug_str	00000000 
00003f1a l       .debug_str	00000000 
00003f4b l       .debug_str	00000000 
00003f73 l       .debug_str	00000000 
000120de l       .debug_str	00000000 
00003fa0 l       .debug_str	00000000 
00003fb3 l       .debug_str	00000000 
00003fbe l       .debug_str	00000000 
00004385 l       .debug_str	00000000 
00004393 l       .debug_str	00000000 
00003fce l       .debug_str	00000000 
00003ff6 l       .debug_str	00000000 
00000a8d l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
00000a94 l       .debug_str	00000000 
00000aa0 l       .debug_str	00000000 
00016bed l       .debug_str	00000000 
00000aa8 l       .debug_str	00000000 
00000aad l       .debug_str	00000000 
00000ab0 l       .debug_str	00000000 
000146a6 l       .debug_str	00000000 
00000ab9 l       .debug_str	00000000 
00000ac0 l       .debug_str	00000000 
00000abc l       .debug_str	00000000 
00000ac6 l       .debug_str	00000000 
00000ace l       .debug_str	00000000 
00000ad4 l       .debug_str	00000000 
00000af9 l       .debug_str	00000000 
00000adf l       .debug_str	00000000 
00000b02 l       .debug_str	00000000 
00000b21 l       .debug_str	00000000 
00007f78 l       .debug_str	00000000 
00000b48 l       .debug_str	00000000 
00000b7a l       .debug_str	00000000 
0000402a l       .debug_str	00000000 
0000ddcf l       .debug_str	00000000 
0000ff86 l       .debug_str	00000000 
00000690 l       .debug_str	00000000 
00005548 l       .debug_str	00000000 
0000713b l       .debug_str	00000000 
000006af l       .debug_str	00000000 
00000d51 l       .debug_str	00000000 
0000402e l       .debug_str	00000000 
00004059 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0000df1e l       .debug_str	00000000 
000070f3 l       .debug_str	00000000 
00004060 l       .debug_str	00000000 
0001086c l       .debug_str	00000000 
00007543 l       .debug_str	00000000 
0001a349 l       .debug_str	00000000 
000156e4 l       .debug_str	00000000 
00004088 l       .debug_str	00000000 
00004155 l       .debug_str	00000000 
0000408c l       .debug_str	00000000 
00015bf3 l       .debug_str	00000000 
0001a85c l       .debug_str	00000000 
00004093 l       .debug_str	00000000 
00004128 l       .debug_str	00000000 
00004132 l       .debug_str	00000000 
0000413e l       .debug_str	00000000 
00018ca8 l       .debug_str	00000000 
00004160 l       .debug_str	00000000 
000041a9 l       .debug_str	00000000 
000041b9 l       .debug_str	00000000 
000041c5 l       .debug_str	00000000 
0001469a l       .debug_str	00000000 
0000209d l       .debug_str	00000000 
000041c9 l       .debug_str	00000000 
0000420e l       .debug_str	00000000 
0000421a l       .debug_str	00000000 
0000426d l       .debug_str	00000000 
00004277 l       .debug_str	00000000 
0000427e l       .debug_str	00000000 
00013d21 l       .debug_str	00000000 
00004283 l       .debug_str	00000000 
00004294 l       .debug_str	00000000 
000042ad l       .debug_str	00000000 
000042b0 l       .debug_str	00000000 
000042c1 l       .debug_str	00000000 
00000a9c l       .debug_str	00000000 
000042da l       .debug_str	00000000 
000042ef l       .debug_str	00000000 
0000430c l       .debug_str	00000000 
00004316 l       .debug_str	00000000 
0000431b l       .debug_str	00000000 
00004328 l       .debug_str	00000000 
0000432f l       .debug_str	00000000 
00004337 l       .debug_str	00000000 
0000433f l       .debug_str	00000000 
00004346 l       .debug_str	00000000 
0000436f l       .debug_str	00000000 
00004352 l       .debug_str	00000000 
0000434d l       .debug_str	00000000 
0000437a l       .debug_str	00000000 
000043a1 l       .debug_str	00000000 
000043ed l       .debug_str	00000000 
00004441 l       .debug_str	00000000 
0000445a l       .debug_str	00000000 
00004482 l       .debug_str	00000000 
000044bb l       .debug_str	00000000 
000044e3 l       .debug_str	00000000 
0000450e l       .debug_str	00000000 
00004517 l       .debug_str	00000000 
00004559 l       .debug_str	00000000 
000045a3 l       .debug_str	00000000 
000045aa l       .debug_str	00000000 
0000f386 l       .debug_str	00000000 
000045b8 l       .debug_str	00000000 
000045e0 l       .debug_str	00000000 
0000460d l       .debug_str	00000000 
00004615 l       .debug_str	00000000 
0000461f l       .debug_str	00000000 
000185b1 l       .debug_str	00000000 
0000fe07 l       .debug_str	00000000 
00004625 l       .debug_str	00000000 
0000462e l       .debug_str	00000000 
00004644 l       .debug_str	00000000 
00004662 l       .debug_str	00000000 
0000466b l       .debug_str	00000000 
00004674 l       .debug_str	00000000 
0000468a l       .debug_str	00000000 
000046a8 l       .debug_str	00000000 
000046b2 l       .debug_str	00000000 
000046ad l       .debug_str	00000000 
000046b6 l       .debug_str	00000000 
000046cc l       .debug_str	00000000 
0000fb84 l       .debug_str	00000000 
0001028d l       .debug_str	00000000 
000046ea l       .debug_str	00000000 
000046f4 l       .debug_str	00000000 
0000470b l       .debug_str	00000000 
0000fd3e l       .debug_str	00000000 
00004734 l       .debug_str	00000000 
0000ffc0 l       .debug_str	00000000 
0001029c l       .debug_str	00000000 
00004741 l       .debug_str	00000000 
0000478f l       .debug_str	00000000 
00010d90 l       .debug_str	00000000 
000047e5 l       .debug_str	00000000 
000047ea l       .debug_str	00000000 
000047f0 l       .debug_str	00000000 
000047f9 l       .debug_str	00000000 
00004822 l       .debug_str	00000000 
00004870 l       .debug_str	00000000 
00004994 l       .debug_str	00000000 
000048c6 l       .debug_str	00000000 
000048ef l       .debug_str	00000000 
0000493d l       .debug_str	00000000 
00004993 l       .debug_str	00000000 
0000499d l       .debug_str	00000000 
000049c6 l       .debug_str	00000000 
00004a14 l       .debug_str	00000000 
00004a6a l       .debug_str	00000000 
00004a70 l       .debug_str	00000000 
00004a99 l       .debug_str	00000000 
00004ae7 l       .debug_str	00000000 
00004b3d l       .debug_str	00000000 
00004b46 l       .debug_str	00000000 
00004b6f l       .debug_str	00000000 
00004bbd l       .debug_str	00000000 
00004c13 l       .debug_str	00000000 
00012214 l       .debug_str	00000000 
00004c2e l       .debug_str	00000000 
00004c37 l       .debug_str	00000000 
00004c3e l       .debug_str	00000000 
00004c4b l       .debug_str	00000000 
00004c7d l       .debug_str	00000000 
0000ed21 l       .debug_str	00000000 
00004cb7 l       .debug_str	00000000 
00004cca l       .debug_str	00000000 
00004ce5 l       .debug_str	00000000 
00000412 l       .debug_str	00000000 
00004cff l       .debug_str	00000000 
00004d10 l       .debug_str	00000000 
00004d29 l       .debug_str	00000000 
00004d3a l       .debug_str	00000000 
00004d53 l       .debug_str	00000000 
00004d65 l       .debug_str	00000000 
00004d7f l       .debug_str	00000000 
0000cf5f l       .debug_str	00000000 
00004d97 l       .debug_str	00000000 
000110ce l       .debug_str	00000000 
00004dd0 l       .debug_str	00000000 
08001798 l     F .text	0000003a _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h599ec635b8d2cbe5E
080017d2 l     F .text	00000052 _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h926198afa8396cd4E
08001824 l     F .text	0000003c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17he77dbea7c29ad7a9E
08001860 l     F .text	00000002 _ZN4core3ptr18real_drop_in_place17h5dfe1da5d5e0f4a8E
20000118 l     O .data	00000018 _ZN6mynewt2hw6sensor17LISTENER_INTERNAL17heac3f46594964dacE
08001904 l     F .text	00000004 _ZN6mynewt2hw6sensor21null_sensor_data_func17he446d2dc3f85c749E
00000000 l    df *ABS*	00000000 core.4aq1nyye-cgu.0
0000061b l       .debug_str	00000000 
000071cb l       .debug_str	00000000 
000071de l       .debug_str	00000000 
0000712a l       .debug_str	00000000 
0000e886 l       .debug_str	00000000 
0000720f l       .debug_str	00000000 
00007217 l       .debug_str	00000000 
00007220 l       .debug_str	00000000 
00007269 l       .debug_str	00000000 
00007184 l       .debug_str	00000000 
0000088f l       .debug_str	00000000 
00007227 l       .debug_str	00000000 
00007266 l       .debug_str	00000000 
0000726f l       .debug_str	00000000 
000072b1 l       .debug_str	00000000 
000072bb l       .debug_str	00000000 
000072fe l       .debug_str	00000000 
00007308 l       .debug_str	00000000 
0000734b l       .debug_str	00000000 
00007355 l       .debug_str	00000000 
00007398 l       .debug_str	00000000 
000073a3 l       .debug_str	00000000 
000073e8 l       .debug_str	00000000 
000073f3 l       .debug_str	00000000 
00007438 l       .debug_str	00000000 
0000743e l       .debug_str	00000000 
00000698 l       .debug_str	00000000 
00004670 l       .debug_str	00000000 
00003c02 l       .debug_str	00000000 
00007a78 l       .debug_str	00000000 
0000744b l       .debug_str	00000000 
0000744f l       .debug_str	00000000 
0000745f l       .debug_str	00000000 
00000888 l       .debug_str	00000000 
00003321 l       .debug_str	00000000 
000007ef l       .debug_str	00000000 
000074a5 l       .debug_str	00000000 
000074ba l       .debug_str	00000000 
00007543 l       .debug_str	00000000 
000074c4 l       .debug_str	00000000 
000074cd l       .debug_str	00000000 
00000a9c l       .debug_str	00000000 
000008c1 l       .debug_str	00000000 
000006a1 l       .debug_str	00000000 
000006ac l       .debug_str	00000000 
000006a5 l       .debug_str	00000000 
00019f23 l       .debug_str	00000000 
0000099e l       .debug_str	00000000 
0000099f l       .debug_str	00000000 
0000704c l       .debug_str	00000000 
0001a3b4 l       .debug_str	00000000 
000074d5 l       .debug_str	00000000 
00007f49 l       .debug_str	00000000 
0000811d l       .debug_str	00000000 
000163ca l       .debug_str	00000000 
000074e6 l       .debug_str	00000000 
0000f661 l       .debug_str	00000000 
0000e2f3 l       .debug_str	00000000 
00007e25 l       .debug_str	00000000 
000074fe l       .debug_str	00000000 
0000e727 l       .debug_str	00000000 
0000085e l       .debug_str	00000000 
000000d7 l       .debug_str	00000000 
0001216e l       .debug_str	00000000 
00007508 l       .debug_str	00000000 
0000750d l       .debug_str	00000000 
00007512 l       .debug_str	00000000 
00007c08 l       .debug_str	00000000 
00018409 l       .debug_str	00000000 
0000751c l       .debug_str	00000000 
00011116 l       .debug_str	00000000 
00007527 l       .debug_str	00000000 
00000303 l       .debug_str	00000000 
00007bc2 l       .debug_str	00000000 
00007531 l       .debug_str	00000000 
000052d7 l       .debug_str	00000000 
00007c02 l       .debug_str	00000000 
00007be2 l       .debug_str	00000000 
00007c1d l       .debug_str	00000000 
00007f5f l       .debug_str	00000000 
00000863 l       .debug_str	00000000 
00007e6e l       .debug_str	00000000 
0000753f l       .debug_str	00000000 
00007548 l       .debug_str	00000000 
0000754a l       .debug_str	00000000 
000075c2 l       .debug_str	00000000 
00007da9 l       .debug_str	00000000 
00007dec l       .debug_str	00000000 
000075d4 l       .debug_str	00000000 
00007648 l       .debug_str	00000000 
00007ea5 l       .debug_str	00000000 
00007ee8 l       .debug_str	00000000 
0000765a l       .debug_str	00000000 
0000a9be l       .debug_str	00000000 
0001098e l       .debug_str	00000000 
0001a85c l       .debug_str	00000000 
00007f91 l       .debug_str	00000000 
00007f19 l       .debug_str	00000000 
000076ce l       .debug_str	00000000 
000156e4 l       .debug_str	00000000 
00007726 l       .debug_str	00000000 
0000772e l       .debug_str	00000000 
00007736 l       .debug_str	00000000 
0000069c l       .debug_str	00000000 
00015241 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
0000773f l       .debug_str	00000000 
00007746 l       .debug_str	00000000 
00007752 l       .debug_str	00000000 
00007759 l       .debug_str	00000000 
00007763 l       .debug_str	00000000 
00007770 l       .debug_str	00000000 
0000777d l       .debug_str	00000000 
000046ef l       .debug_str	00000000 
00007792 l       .debug_str	00000000 
00011b35 l       .debug_str	00000000 
0000779b l       .debug_str	00000000 
000077af l       .debug_str	00000000 
00018a6c l       .debug_str	00000000 
00005548 l       .debug_str	00000000 
000077c5 l       .debug_str	00000000 
000077ca l       .debug_str	00000000 
000077dc l       .debug_str	00000000 
00007804 l       .debug_str	00000000 
0000780e l       .debug_str	00000000 
0000781e l       .debug_str	00000000 
00007877 l       .debug_str	00000000 
0000787f l       .debug_str	00000000 
0000788c l       .debug_str	00000000 
00007899 l       .debug_str	00000000 
00007ff7 l       .debug_str	00000000 
0000ecee l       .debug_str	00000000 
000078a6 l       .debug_str	00000000 
000078d3 l       .debug_str	00000000 
00007902 l       .debug_str	00000000 
00007929 l       .debug_str	00000000 
00007948 l       .debug_str	00000000 
00007958 l       .debug_str	00000000 
0000cf6b l       .debug_str	00000000 
0000798a l       .debug_str	00000000 
00007999 l       .debug_str	00000000 
000079a4 l       .debug_str	00000000 
00003707 l       .debug_str	00000000 
000115bf l       .debug_str	00000000 
00000880 l       .debug_str	00000000 
00004320 l       .debug_str	00000000 
000008a3 l       .debug_str	00000000 
000008af l       .debug_str	00000000 
000079d9 l       .debug_str	00000000 
00007a04 l       .debug_str	00000000 
000079e4 l       .debug_str	00000000 
000079ea l       .debug_str	00000000 
00012c41 l       .debug_str	00000000 
00007a0f l       .debug_str	00000000 
00007a14 l       .debug_str	00000000 
00013c01 l       .debug_str	00000000 
0000860e l       .debug_str	00000000 
00008607 l       .debug_str	00000000 
00007a1a l       .debug_str	00000000 
00008635 l       .debug_str	00000000 
00008669 l       .debug_str	00000000 
00007a20 l       .debug_str	00000000 
00007a2c l       .debug_str	00000000 
00007a63 l       .debug_str	00000000 
00008612 l       .debug_str	00000000 
0000865f l       .debug_str	00000000 
00007a44 l       .debug_str	00000000 
00007a31 l       .debug_str	00000000 
00007a4a l       .debug_str	00000000 
00007a72 l       .debug_str	00000000 
00007a77 l       .debug_str	00000000 
00007a7c l       .debug_str	00000000 
00007a82 l       .debug_str	00000000 
00007a8a l       .debug_str	00000000 
00007a8f l       .debug_str	00000000 
00009f34 l       .debug_str	00000000 
0000cf1c l       .debug_str	00000000 
00007a95 l       .debug_str	00000000 
00007abd l       .debug_str	00000000 
00007a9f l       .debug_str	00000000 
00005547 l       .debug_str	00000000 
00007ac6 l       .debug_str	00000000 
00007ac5 l       .debug_str	00000000 
000052d6 l       .debug_str	00000000 
0000462a l       .debug_str	00000000 
00007009 l       .debug_str	00000000 
00007aca l       .debug_str	00000000 
00007ad2 l       .debug_str	00000000 
0000d227 l       .debug_str	00000000 
00007ad8 l       .debug_str	00000000 
00007aff l       .debug_str	00000000 
00007ae3 l       .debug_str	00000000 
00007818 l       .debug_str	00000000 
00007b07 l       .debug_str	00000000 
00007b24 l       .debug_str	00000000 
00007b0f l       .debug_str	00000000 
00007b33 l       .debug_str	00000000 
00007b37 l       .debug_str	00000000 
00007b44 l       .debug_str	00000000 
00007b4d l       .debug_str	00000000 
0000de05 l       .debug_str	00000000 
00007b63 l       .debug_str	00000000 
00007b57 l       .debug_str	00000000 
00007b70 l       .debug_str	00000000 
00007b78 l       .debug_str	00000000 
00007b84 l       .debug_str	00000000 
00007ba7 l       .debug_str	00000000 
00007b91 l       .debug_str	00000000 
00007bb5 l       .debug_str	00000000 
00007bd5 l       .debug_str	00000000 
00007bf5 l       .debug_str	00000000 
00007c10 l       .debug_str	00000000 
00007c2b l       .debug_str	00000000 
00007c31 l       .debug_str	00000000 
00007c35 l       .debug_str	00000000 
00007c46 l       .debug_str	00000000 
00007c39 l       .debug_str	00000000 
0000333a l       .debug_str	00000000 
00007c57 l       .debug_str	00000000 
00007c56 l       .debug_str	00000000 
00000a8d l       .debug_str	00000000 
00000a94 l       .debug_str	00000000 
00000aa0 l       .debug_str	00000000 
00017ff2 l       .debug_str	00000000 
00000b7e l       .debug_str	00000000 
00016bed l       .debug_str	00000000 
00000aa8 l       .debug_str	00000000 
00000aad l       .debug_str	00000000 
00000ab0 l       .debug_str	00000000 
000146a6 l       .debug_str	00000000 
00000859 l       .debug_str	00000000 
00019e3d l       .debug_str	00000000 
000006fc l       .debug_str	00000000 
00000701 l       .debug_str	00000000 
00000707 l       .debug_str	00000000 
0000070e l       .debug_str	00000000 
000175f1 l       .debug_str	00000000 
0000128c l       .debug_str	00000000 
00000876 l       .debug_str	00000000 
00000ab9 l       .debug_str	00000000 
00000ac0 l       .debug_str	00000000 
00000abc l       .debug_str	00000000 
00000ac6 l       .debug_str	00000000 
00000ace l       .debug_str	00000000 
000092e4 l       .debug_str	00000000 
00000ad4 l       .debug_str	00000000 
00000af9 l       .debug_str	00000000 
00000adf l       .debug_str	00000000 
00000b02 l       .debug_str	00000000 
00000b21 l       .debug_str	00000000 
000116fa l       .debug_str	00000000 
00011500 l       .debug_str	00000000 
0001538f l       .debug_str	00000000 
000008c7 l       .debug_str	00000000 
000008d6 l       .debug_str	00000000 
000008da l       .debug_str	00000000 
000008e3 l       .debug_str	00000000 
000008ef l       .debug_str	00000000 
00000914 l       .debug_str	00000000 
00000908 l       .debug_str	00000000 
00000919 l       .debug_str	00000000 
0000684d l       .debug_str	00000000 
000006ee l       .debug_str	00000000 
000006f1 l       .debug_str	00000000 
000006f5 l       .debug_str	00000000 
00000868 l       .debug_str	00000000 
000008ba l       .debug_str	00000000 
000009a6 l       .debug_str	00000000 
000009bd l       .debug_str	00000000 
000009e1 l       .debug_str	00000000 
00000a26 l       .debug_str	00000000 
00000a16 l       .debug_str	00000000 
00000923 l       .debug_str	00000000 
00000993 l       .debug_str	00000000 
00000981 l       .debug_str	00000000 
000009fd l       .debug_str	00000000 
00007f78 l       .debug_str	00000000 
00007f6c l       .debug_str	00000000 
00007c6b l       .debug_str	00000000 
00007c5c l       .debug_str	00000000 
000116ec l       .debug_str	00000000 
0000dde5 l       .debug_str	00000000 
0000333e l       .debug_str	00000000 
00003368 l       .debug_str	00000000 
0000335a l       .debug_str	00000000 
00003327 l       .debug_str	00000000 
0000703b l       .debug_str	00000000 
00007ca9 l       .debug_str	00000000 
00007c89 l       .debug_str	00000000 
00007d02 l       .debug_str	00000000 
00007ce2 l       .debug_str	00000000 
0000ddf7 l       .debug_str	00000000 
00007d59 l       .debug_str	00000000 
00007d5e l       .debug_str	00000000 
00007d64 l       .debug_str	00000000 
00007d87 l       .debug_str	00000000 
00007d69 l       .debug_str	00000000 
00007d92 l       .debug_str	00000000 
00007ddd l       .debug_str	00000000 
00007e0e l       .debug_str	00000000 
00007e5f l       .debug_str	00000000 
00007e8e l       .debug_str	00000000 
00007ed9 l       .debug_str	00000000 
00007f0a l       .debug_str	00000000 
00007f3b l       .debug_str	00000000 
00007f52 l       .debug_str	00000000 
00007f6b l       .debug_str	00000000 
00007f82 l       .debug_str	00000000 
00007fc2 l       .debug_str	00000000 
00007fb0 l       .debug_str	00000000 
00007faf l       .debug_str	00000000 
00007fcd l       .debug_str	00000000 
00007fd6 l       .debug_str	00000000 
00007fe3 l       .debug_str	00000000 
00007fe2 l       .debug_str	00000000 
00007feb l       .debug_str	00000000 
00008018 l       .debug_str	00000000 
00008003 l       .debug_str	00000000 
00008035 l       .debug_str	00000000 
00008041 l       .debug_str	00000000 
000080eb l       .debug_str	00000000 
0000804d l       .debug_str	00000000 
00008054 l       .debug_str	00000000 
0000805d l       .debug_str	00000000 
0000806b l       .debug_str	00000000 
00008072 l       .debug_str	00000000 
0000807a l       .debug_str	00000000 
00008081 l       .debug_str	00000000 
000080c7 l       .debug_str	00000000 
000080a2 l       .debug_str	00000000 
0000808d l       .debug_str	00000000 
000080b2 l       .debug_str	00000000 
000080d6 l       .debug_str	00000000 
00008106 l       .debug_str	00000000 
000080f7 l       .debug_str	00000000 
00008111 l       .debug_str	00000000 
0001108a l       .debug_str	00000000 
0000813a l       .debug_str	00000000 
00008123 l       .debug_str	00000000 
00008158 l       .debug_str	00000000 
0000817b l       .debug_str	00000000 
00008164 l       .debug_str	00000000 
000081c5 l       .debug_str	00000000 
000081b9 l       .debug_str	00000000 
00007813 l       .debug_str	00000000 
000081e2 l       .debug_str	00000000 
000081cb l       .debug_str	00000000 
0000822b l       .debug_str	00000000 
00008253 l       .debug_str	00000000 
0000823c l       .debug_str	00000000 
0001469a l       .debug_str	00000000 
0000209d l       .debug_str	00000000 
00015bdb l       .debug_str	00000000 
00008302 l       .debug_str	00000000 
000082e4 l       .debug_str	00000000 
000083f8 l       .debug_str	00000000 
000083d8 l       .debug_str	00000000 
0000846b l       .debug_str	00000000 
0000844b l       .debug_str	00000000 
0001a274 l       .debug_str	00000000 
000084be l       .debug_str	00000000 
000084c2 l       .debug_str	00000000 
00010ace l       .debug_str	00000000 
00014e7f l       .debug_str	00000000 
000084c5 l       .debug_str	00000000 
000084c8 l       .debug_str	00000000 
0000858e l       .debug_str	00000000 
000084cc l       .debug_str	00000000 
000084cb l       .debug_str	00000000 
000084d1 l       .debug_str	00000000 
000085dc l       .debug_str	00000000 
0000f674 l       .debug_str	00000000 
000084ef l       .debug_str	00000000 
000084dd l       .debug_str	00000000 
00008514 l       .debug_str	00000000 
000085a3 l       .debug_str	00000000 
00008532 l       .debug_str	00000000 
00008520 l       .debug_str	00000000 
00008557 l       .debug_str	00000000 
00008570 l       .debug_str	00000000 
0000855e l       .debug_str	00000000 
0000857c l       .debug_str	00000000 
00008594 l       .debug_str	00000000 
000085cd l       .debug_str	00000000 
00008606 l       .debug_str	00000000 
00008611 l       .debug_str	00000000 
00008634 l       .debug_str	00000000 
00008668 l       .debug_str	00000000 
0000868a l       .debug_str	00000000 
0000867e l       .debug_str	00000000 
000086a2 l       .debug_str	00000000 
00008696 l       .debug_str	00000000 
000086b0 l       .debug_str	00000000 
000086af l       .debug_str	00000000 
000010aa l       .debug_str	00000000 
00000c81 l       .debug_str	00000000 
000086b4 l       .debug_str	00000000 
000086b3 l       .debug_str	00000000 
000046b2 l       .debug_str	00000000 
000086b8 l       .debug_str	00000000 
000086bd l       .debug_str	00000000 
000086cb l       .debug_str	00000000 
000086d5 l       .debug_str	00000000 
000086e4 l       .debug_str	00000000 
00004128 l       .debug_str	00000000 
00008714 l       .debug_str	00000000 
00008724 l       .debug_str	00000000 
00008732 l       .debug_str	00000000 
00008741 l       .debug_str	00000000 
0000874a l       .debug_str	00000000 
00008756 l       .debug_str	00000000 
000041a9 l       .debug_str	00000000 
0000420e l       .debug_str	00000000 
00005008 l       .debug_str	00000000 
0000506d l       .debug_str	00000000 
0000876a l       .debug_str	00000000 
00008773 l       .debug_str	00000000 
0000877e l       .debug_str	00000000 
00004216 l       .debug_str	00000000 
00008796 l       .debug_str	00000000 
000087a1 l       .debug_str	00000000 
000087d8 l       .debug_str	00000000 
000087e1 l       .debug_str	00000000 
000087f4 l       .debug_str	00000000 
000128e7 l       .debug_str	00000000 
000087fd l       .debug_str	00000000 
00008808 l       .debug_str	00000000 
00008834 l       .debug_str	00000000 
000088d9 l       .debug_str	00000000 
000088e8 l       .debug_str	00000000 
0000890e l       .debug_str	00000000 
00008949 l       .debug_str	00000000 
0000895a l       .debug_str	00000000 
00008970 l       .debug_str	00000000 
0000897c l       .debug_str	00000000 
000089a8 l       .debug_str	00000000 
000089b4 l       .debug_str	00000000 
000089f0 l       .debug_str	00000000 
00005075 l       .debug_str	00000000 
00008a00 l       .debug_str	00000000 
00008a0b l       .debug_str	00000000 
00008a19 l       .debug_str	00000000 
00008a39 l       .debug_str	00000000 
0000d2f9 l       .debug_str	00000000 
00008a46 l       .debug_str	00000000 
00008a4e l       .debug_str	00000000 
00008737 l       .debug_str	00000000 
00008a5a l       .debug_str	00000000 
00008a91 l       .debug_str	00000000 
00008adc l       .debug_str	00000000 
00008b00 l       .debug_str	00000000 
00008b0d l       .debug_str	00000000 
00008b19 l       .debug_str	00000000 
00008b45 l       .debug_str	00000000 
00008b8f l       .debug_str	00000000 
00008b9d l       .debug_str	00000000 
00008bca l       .debug_str	00000000 
000091e3 l       .debug_str	00000000 
00008bd3 l       .debug_str	00000000 
00008bdb l       .debug_str	00000000 
00008bf1 l       .debug_str	00000000 
00008c04 l       .debug_str	00000000 
00008c0e l       .debug_str	00000000 
00008c1b l       .debug_str	00000000 
00009075 l       .debug_str	00000000 
00008c28 l       .debug_str	00000000 
00008c3f l       .debug_str	00000000 
00008c4e l       .debug_str	00000000 
00008c7d l       .debug_str	00000000 
00008c8c l       .debug_str	00000000 
00008c96 l       .debug_str	00000000 
00008cc1 l       .debug_str	00000000 
00008d00 l       .debug_str	00000000 
00008d16 l       .debug_str	00000000 
00008d2e l       .debug_str	00000000 
00007acf l       .debug_str	00000000 
0000426d l       .debug_str	00000000 
0001086c l       .debug_str	00000000 
00005248 l       .debug_str	00000000 
000052b7 l       .debug_str	00000000 
00008d47 l       .debug_str	00000000 
00008d55 l       .debug_str	00000000 
00008d74 l       .debug_str	00000000 
00008d81 l       .debug_str	00000000 
00008d91 l       .debug_str	00000000 
00008db0 l       .debug_str	00000000 
00008dd1 l       .debug_str	00000000 
00008dfa l       .debug_str	00000000 
00008e2b l       .debug_str	00000000 
00008e3d l       .debug_str	00000000 
00008e6a l       .debug_str	00000000 
00008e8a l       .debug_str	00000000 
00008ecb l       .debug_str	00000000 
00008ed6 l       .debug_str	00000000 
00008ee3 l       .debug_str	00000000 
00008ede l       .debug_str	00000000 
00008eec l       .debug_str	00000000 
00008f0f l       .debug_str	00000000 
00008f19 l       .debug_str	00000000 
00008f4b l       .debug_str	00000000 
00008f5c l       .debug_str	00000000 
00008f81 l       .debug_str	00000000 
00008f89 l       .debug_str	00000000 
00008f98 l       .debug_str	00000000 
00008fa7 l       .debug_str	00000000 
00008fb0 l       .debug_str	00000000 
00008fc6 l       .debug_str	00000000 
000051cc l       .debug_str	00000000 
0000787c l       .debug_str	00000000 
000054b8 l       .debug_str	00000000 
00008fd1 l       .debug_str	00000000 
00008fd9 l       .debug_str	00000000 
00008fe7 l       .debug_str	00000000 
00008ff1 l       .debug_str	00000000 
0000900b l       .debug_str	00000000 
00009019 l       .debug_str	00000000 
000092ef l       .debug_str	00000000 
0001a727 l       .debug_str	00000000 
0000902a l       .debug_str	00000000 
00000b7a l       .debug_str	00000000 
00009054 l       .debug_str	00000000 
0000905d l       .debug_str	00000000 
0000906d l       .debug_str	00000000 
00009079 l       .debug_str	00000000 
00009083 l       .debug_str	00000000 
0000908a l       .debug_str	00000000 
000090a0 l       .debug_str	00000000 
000090ad l       .debug_str	00000000 
000090cc l       .debug_str	00000000 
000090d8 l       .debug_str	00000000 
000090e6 l       .debug_str	00000000 
000090f7 l       .debug_str	00000000 
000160e6 l       .debug_str	00000000 
00009107 l       .debug_str	00000000 
00009111 l       .debug_str	00000000 
00009122 l       .debug_str	00000000 
0000912f l       .debug_str	00000000 
0000408e l       .debug_str	00000000 
0000913a l       .debug_str	00000000 
00009145 l       .debug_str	00000000 
00009165 l       .debug_str	00000000 
000005d5 l       .debug_str	00000000 
00009184 l       .debug_str	00000000 
0000918e l       .debug_str	00000000 
00009197 l       .debug_str	00000000 
0000e4ac l       .debug_str	00000000 
000091aa l       .debug_str	00000000 
000091d3 l       .debug_str	00000000 
000091dd l       .debug_str	00000000 
000091ee l       .debug_str	00000000 
000091fa l       .debug_str	00000000 
0000920d l       .debug_str	00000000 
00008d01 l       .debug_str	00000000 
0000924b l       .debug_str	00000000 
00009267 l       .debug_str	00000000 
000092cb l       .debug_str	00000000 
0000a033 l       .debug_str	00000000 
00009276 l       .debug_str	00000000 
00005435 l       .debug_str	00000000 
00005539 l       .debug_str	00000000 
0000929f l       .debug_str	00000000 
000092b4 l       .debug_str	00000000 
000092c3 l       .debug_str	00000000 
000092da l       .debug_str	00000000 
000092ea l       .debug_str	00000000 
000092f3 l       .debug_str	00000000 
00009302 l       .debug_str	00000000 
00009329 l       .debug_str	00000000 
00009335 l       .debug_str	00000000 
00009348 l       .debug_str	00000000 
00009359 l       .debug_str	00000000 
00009366 l       .debug_str	00000000 
00009376 l       .debug_str	00000000 
0000938b l       .debug_str	00000000 
00009398 l       .debug_str	00000000 
000093be l       .debug_str	00000000 
000093cc l       .debug_str	00000000 
000093d5 l       .debug_str	00000000 
000093f2 l       .debug_str	00000000 
00009417 l       .debug_str	00000000 
0000943d l       .debug_str	00000000 
00009467 l       .debug_str	00000000 
0000948f l       .debug_str	00000000 
000094a9 l       .debug_str	00000000 
0000e1d3 l       .debug_str	00000000 
000094b6 l       .debug_str	00000000 
000094cd l       .debug_str	00000000 
000094e3 l       .debug_str	00000000 
000094f1 l       .debug_str	00000000 
0000952f l       .debug_str	00000000 
00009544 l       .debug_str	00000000 
00009698 l       .debug_str	00000000 
00010c2c l       .debug_str	00000000 
0000d2b1 l       .debug_str	00000000 
00009552 l       .debug_str	00000000 
00009562 l       .debug_str	00000000 
00009591 l       .debug_str	00000000 
0000959b l       .debug_str	00000000 
000095ae l       .debug_str	00000000 
000095f1 l       .debug_str	00000000 
0000960b l       .debug_str	00000000 
0000961d l       .debug_str	00000000 
0000963d l       .debug_str	00000000 
00009645 l       .debug_str	00000000 
00009673 l       .debug_str	00000000 
0000968f l       .debug_str	00000000 
000096a9 l       .debug_str	00000000 
000096be l       .debug_str	00000000 
000096d1 l       .debug_str	00000000 
000096e4 l       .debug_str	00000000 
000096f9 l       .debug_str	00000000 
0000970c l       .debug_str	00000000 
0000971f l       .debug_str	00000000 
00009749 l       .debug_str	00000000 
00009755 l       .debug_str	00000000 
000097b7 l       .debug_str	00000000 
000097c0 l       .debug_str	00000000 
000097cf l       .debug_str	00000000 
000097e4 l       .debug_str	00000000 
000097f1 l       .debug_str	00000000 
0000987d l       .debug_str	00000000 
0000988f l       .debug_str	00000000 
0000989b l       .debug_str	00000000 
000098fd l       .debug_str	00000000 
00009957 l       .debug_str	00000000 
00009967 l       .debug_str	00000000 
000099e9 l       .debug_str	00000000 
00009a43 l       .debug_str	00000000 
00009aa3 l       .debug_str	00000000 
00009b03 l       .debug_str	00000000 
00009b61 l       .debug_str	00000000 
00009bbf l       .debug_str	00000000 
00009bcd l       .debug_str	00000000 
00009bd8 l       .debug_str	00000000 
00009be3 l       .debug_str	00000000 
00009c0a l       .debug_str	00000000 
00009c32 l       .debug_str	00000000 
00009c44 l       .debug_str	00000000 
00009c49 l       .debug_str	00000000 
00009c66 l       .debug_str	00000000 
00009c72 l       .debug_str	00000000 
00009c9d l       .debug_str	00000000 
00009ca4 l       .debug_str	00000000 
00009caf l       .debug_str	00000000 
00009ccd l       .debug_str	00000000 
00009ce8 l       .debug_str	00000000 
00009d04 l       .debug_str	00000000 
00009d50 l       .debug_str	00000000 
00009d9c l       .debug_str	00000000 
0001a3fb l       .debug_str	00000000 
00009de9 l       .debug_str	00000000 
00009df2 l       .debug_str	00000000 
00009e0e l       .debug_str	00000000 
00009e34 l       .debug_str	00000000 
00009e3d l       .debug_str	00000000 
00009e83 l       .debug_str	00000000 
00009ec9 l       .debug_str	00000000 
00009f10 l       .debug_str	00000000 
00009f2f l       .debug_str	00000000 
00012214 l       .debug_str	00000000 
00009f39 l       .debug_str	00000000 
00009f43 l       .debug_str	00000000 
00019f98 l       .debug_str	00000000 
00009f4b l       .debug_str	00000000 
00009f5a l       .debug_str	00000000 
00009f77 l       .debug_str	00000000 
00009f93 l       .debug_str	00000000 
00009fb9 l       .debug_str	00000000 
00009fc9 l       .debug_str	00000000 
00009fd5 l       .debug_str	00000000 
00009ff7 l       .debug_str	00000000 
0000a008 l       .debug_str	00000000 
0000a003 l       .debug_str	00000000 
0000a027 l       .debug_str	00000000 
00019eae l       .debug_str	00000000 
0000a037 l       .debug_str	00000000 
0000a046 l       .debug_str	00000000 
0000a054 l       .debug_str	00000000 
0000a062 l       .debug_str	00000000 
0000a07f l       .debug_str	00000000 
0000a085 l       .debug_str	00000000 
00009134 l       .debug_str	00000000 
0000a1f8 l       .debug_str	00000000 
0000a0ad l       .debug_str	00000000 
0000a0b7 l       .debug_str	00000000 
0000a0d9 l       .debug_str	00000000 
0000a11e l       .debug_str	00000000 
0000a148 l       .debug_str	00000000 
0000a16b l       .debug_str	00000000 
0000a18b l       .debug_str	00000000 
0000a193 l       .debug_str	00000000 
0000a1b9 l       .debug_str	00000000 
0000a1d6 l       .debug_str	00000000 
0000a1f0 l       .debug_str	00000000 
0000a1fc l       .debug_str	00000000 
0000a20d l       .debug_str	00000000 
0000a21c l       .debug_str	00000000 
0000a22d l       .debug_str	00000000 
0000a246 l       .debug_str	00000000 
0000a265 l       .debug_str	00000000 
0000a275 l       .debug_str	00000000 
0000a289 l       .debug_str	00000000 
0000a294 l       .debug_str	00000000 
0000a29f l       .debug_str	00000000 
0000a2cb l       .debug_str	00000000 
0000a2de l       .debug_str	00000000 
0000a2f1 l       .debug_str	00000000 
0000a305 l       .debug_str	00000000 
0000a33b l       .debug_str	00000000 
0000a34f l       .debug_str	00000000 
0000a385 l       .debug_str	00000000 
0000a399 l       .debug_str	00000000 
0000a3cf l       .debug_str	00000000 
0000a3e4 l       .debug_str	00000000 
0000a41b l       .debug_str	00000000 
0000a42e l       .debug_str	00000000 
0000a463 l       .debug_str	00000000 
0000a477 l       .debug_str	00000000 
0000a4ad l       .debug_str	00000000 
0000a4c1 l       .debug_str	00000000 
0000a4f7 l       .debug_str	00000000 
0000a532 l       .debug_str	00000000 
0000a546 l       .debug_str	00000000 
0000a57c l       .debug_str	00000000 
0000a5b7 l       .debug_str	00000000 
0000a5cc l       .debug_str	00000000 
0000a603 l       .debug_str	00000000 
0000a63f l       .debug_str	00000000 
0000a64b l       .debug_str	00000000 
0000a6a5 l       .debug_str	00000000 
0000a711 l       .debug_str	00000000 
0000a782 l       .debug_str	00000000 
0000a7f2 l       .debug_str	00000000 
0000a855 l       .debug_str	00000000 
0000a866 l       .debug_str	00000000 
0000a8da l       .debug_str	00000000 
0000a943 l       .debug_str	00000000 
0000a9ba l       .debug_str	00000000 
0000a9c4 l       .debug_str	00000000 
0000a9d0 l       .debug_str	00000000 
0000a9ed l       .debug_str	00000000 
0000aa11 l       .debug_str	00000000 
0000aa31 l       .debug_str	00000000 
0000aa3e l       .debug_str	00000000 
0000aa49 l       .debug_str	00000000 
0000aa55 l       .debug_str	00000000 
0000aa8b l       .debug_str	00000000 
0000aad5 l       .debug_str	00000000 
0000aaf8 l       .debug_str	00000000 
0000ab23 l       .debug_str	00000000 
0000ab6c l       .debug_str	00000000 
0000abc5 l       .debug_str	00000000 
0000ac30 l       .debug_str	00000000 
0000aca0 l       .debug_str	00000000 
0000ad0f l       .debug_str	00000000 
0000ad71 l       .debug_str	00000000 
0000ade4 l       .debug_str	00000000 
0000ae4c l       .debug_str	00000000 
0000aec2 l       .debug_str	00000000 
0000538b l       .debug_str	00000000 
0000aef7 l       .debug_str	00000000 
0000af02 l       .debug_str	00000000 
0000af1e l       .debug_str	00000000 
0000af41 l       .debug_str	00000000 
0000af5f l       .debug_str	00000000 
0000afa5 l       .debug_str	00000000 
0000afc9 l       .debug_str	00000000 
0000b003 l       .debug_str	00000000 
0000b0a6 l       .debug_str	00000000 
0000b0c6 l       .debug_str	00000000 
0000b0d6 l       .debug_str	00000000 
00008a42 l       .debug_str	00000000 
0000b0e6 l       .debug_str	00000000 
0000b10b l       .debug_str	00000000 
0000b130 l       .debug_str	00000000 
0000b141 l       .debug_str	00000000 
0000b167 l       .debug_str	00000000 
0000b18d l       .debug_str	00000000 
0000b19e l       .debug_str	00000000 
0000b1af l       .debug_str	00000000 
0000b1d5 l       .debug_str	00000000 
0000b1fb l       .debug_str	00000000 
0000b20c l       .debug_str	00000000 
0000b21f l       .debug_str	00000000 
0000b247 l       .debug_str	00000000 
0000b25a l       .debug_str	00000000 
0000b279 l       .debug_str	00000000 
0000b2c8 l       .debug_str	00000000 
0000b39d l       .debug_str	00000000 
0000b3a7 l       .debug_str	00000000 
0000b3e2 l       .debug_str	00000000 
0000b451 l       .debug_str	00000000 
0000b4a4 l       .debug_str	00000000 
0000b531 l       .debug_str	00000000 
0000b63f l       .debug_str	00000000 
0000b67f l       .debug_str	00000000 
0000b6d7 l       .debug_str	00000000 
0000b739 l       .debug_str	00000000 
0000b790 l       .debug_str	00000000 
0000b7ad l       .debug_str	00000000 
0000b7cf l       .debug_str	00000000 
0000b83f l       .debug_str	00000000 
0000b8cf l       .debug_str	00000000 
0000b97c l       .debug_str	00000000 
0000ba0d l       .debug_str	00000000 
0000ba5e l       .debug_str	00000000 
0000baea l       .debug_str	00000000 
0000baef l       .debug_str	00000000 
0000baf8 l       .debug_str	00000000 
0000bb87 l       .debug_str	00000000 
0000bb96 l       .debug_str	00000000 
0000bc46 l       .debug_str	00000000 
0000bc7b l       .debug_str	00000000 
0000bce6 l       .debug_str	00000000 
0000bd35 l       .debug_str	00000000 
0000bd56 l       .debug_str	00000000 
0000bdfa l       .debug_str	00000000 
0000be82 l       .debug_str	00000000 
0000bedc l       .debug_str	00000000 
0000bf3b l       .debug_str	00000000 
0000bf94 l       .debug_str	00000000 
0000c01c l       .debug_str	00000000 
0000c02b l       .debug_str	00000000 
0000c0b6 l       .debug_str	00000000 
0000c15d l       .debug_str	00000000 
0000c192 l       .debug_str	00000000 
0000c1fd l       .debug_str	00000000 
0000c24c l       .debug_str	00000000 
0000c26d l       .debug_str	00000000 
0000c311 l       .debug_str	00000000 
0000c399 l       .debug_str	00000000 
0000c3f3 l       .debug_str	00000000 
0000c452 l       .debug_str	00000000 
0000c4ab l       .debug_str	00000000 
0000c533 l       .debug_str	00000000 
0000c5be l       .debug_str	00000000 
0000c665 l       .debug_str	00000000 
0000c682 l       .debug_str	00000000 
0000c6a3 l       .debug_str	00000000 
0000c6c0 l       .debug_str	00000000 
0000c6e1 l       .debug_str	00000000 
0000c704 l       .debug_str	00000000 
0000c726 l       .debug_str	00000000 
0000c74a l       .debug_str	00000000 
0000c76d l       .debug_str	00000000 
0000c791 l       .debug_str	00000000 
0000c7b4 l       .debug_str	00000000 
0000c7d9 l       .debug_str	00000000 
0000c7fd l       .debug_str	00000000 
0000c823 l       .debug_str	00000000 
0000c85a l       .debug_str	00000000 
0000c87d l       .debug_str	00000000 
0000c8a3 l       .debug_str	00000000 
0000c8c9 l       .debug_str	00000000 
0000c8ee l       .debug_str	00000000 
0000c912 l       .debug_str	00000000 
0000c939 l       .debug_str	00000000 
0000c960 l       .debug_str	00000000 
0000c967 l       .debug_str	00000000 
0000c96f l       .debug_str	00000000 
0000c9ac l       .debug_str	00000000 
0000c9ce l       .debug_str	00000000 
0000ca1b l       .debug_str	00000000 
0000caee l       .debug_str	00000000 
0000cb21 l       .debug_str	00000000 
0000cb3c l       .debug_str	00000000 
0000cb59 l       .debug_str	00000000 
0000cb73 l       .debug_str	00000000 
0000cb7c l       .debug_str	00000000 
0000cb9b l       .debug_str	00000000 
000031b4 l       .debug_str	00000000 
0000cba6 l       .debug_str	00000000 
00010f33 l       .debug_str	00000000 
0000cbb0 l       .debug_str	00000000 
0000cbd3 l       .debug_str	00000000 
0000cc18 l       .debug_str	00000000 
0000cc33 l       .debug_str	00000000 
0000cc45 l       .debug_str	00000000 
0000ccd5 l       .debug_str	00000000 
0000ccf7 l       .debug_str	00000000 
0000cd16 l       .debug_str	00000000 
0000cd67 l       .debug_str	00000000 
00003257 l       .debug_str	00000000 
0000cdb4 l       .debug_str	00000000 
0000cdbe l       .debug_str	00000000 
0000cdca l       .debug_str	00000000 
0000cdd5 l       .debug_str	00000000 
0000cdfc l       .debug_str	00000000 
0000ce09 l       .debug_str	00000000 
0000ce1e l       .debug_str	00000000 
0000ce2d l       .debug_str	00000000 
0000ce3a l       .debug_str	00000000 
0000ce47 l       .debug_str	00000000 
0000ce94 l       .debug_str	00000000 
0000ce9e l       .debug_str	00000000 
0000ceb2 l       .debug_str	00000000 
0000cec3 l       .debug_str	00000000 
0000cecc l       .debug_str	00000000 
0000cede l       .debug_str	00000000 
0000cee9 l       .debug_str	00000000 
0000cef7 l       .debug_str	00000000 
0000cefe l       .debug_str	00000000 
0000cf08 l       .debug_str	00000000 
0000cf16 l       .debug_str	00000000 
0000cf20 l       .debug_str	00000000 
0000cf2d l       .debug_str	00000000 
0000cf43 l       .debug_str	00000000 
0000cf4e l       .debug_str	00000000 
0000cf52 l       .debug_str	00000000 
0000cf65 l       .debug_str	00000000 
0000cf6f l       .debug_str	00000000 
0000cfc4 l       .debug_str	00000000 
0000cfd2 l       .debug_str	00000000 
0000cfd9 l       .debug_str	00000000 
0000cfe1 l       .debug_str	00000000 
0000cff6 l       .debug_str	00000000 
0000d00d l       .debug_str	00000000 
0000d032 l       .debug_str	00000000 
0000d041 l       .debug_str	00000000 
0000d05e l       .debug_str	00000000 
0000d068 l       .debug_str	00000000 
0000d076 l       .debug_str	00000000 
0000d087 l       .debug_str	00000000 
0000d094 l       .debug_str	00000000 
0000d099 l       .debug_str	00000000 
0000d0a4 l       .debug_str	00000000 
0000d0ad l       .debug_str	00000000 
0000d0d0 l       .debug_str	00000000 
0000d0f3 l       .debug_str	00000000 
0000d119 l       .debug_str	00000000 
0000d13f l       .debug_str	00000000 
0000d166 l       .debug_str	00000000 
0000d18d l       .debug_str	00000000 
0000d1b7 l       .debug_str	00000000 
00002390 l       .debug_str	00000000 
0000d1e1 l       .debug_str	00000000 
0000d20d l       .debug_str	00000000 
0000d218 l       .debug_str	00000000 
0000d223 l       .debug_str	00000000 
00015216 l       .debug_str	00000000 
0000d230 l       .debug_str	00000000 
0000d244 l       .debug_str	00000000 
0000d25a l       .debug_str	00000000 
0000d264 l       .debug_str	00000000 
0000d26e l       .debug_str	00000000 
0000d279 l       .debug_str	00000000 
0000d284 l       .debug_str	00000000 
0000d28f l       .debug_str	00000000 
0000d29a l       .debug_str	00000000 
0000cf5f l       .debug_str	00000000 
0000d2a6 l       .debug_str	00000000 
0000d2a9 l       .debug_str	00000000 
0000d2bd l       .debug_str	00000000 
0000d2c6 l       .debug_str	00000000 
0000d2cf l       .debug_str	00000000 
0000d2d8 l       .debug_str	00000000 
0000d2e3 l       .debug_str	00000000 
0000d2ec l       .debug_str	00000000 
0000d2f5 l       .debug_str	00000000 
00008a3e l       .debug_str	00000000 
0000d300 l       .debug_str	00000000 
0000d31b l       .debug_str	00000000 
0000d384 l       .debug_str	00000000 
0000d3f1 l       .debug_str	00000000 
0000d45a l       .debug_str	00000000 
0000d462 l       .debug_str	00000000 
0000d46a l       .debug_str	00000000 
0000d473 l       .debug_str	00000000 
0000d4cc l       .debug_str	00000000 
0000d509 l       .debug_str	00000000 
0000d566 l       .debug_str	00000000 
0000d65e l       .debug_str	00000000 
0000d6ad l       .debug_str	00000000 
0000d6e6 l       .debug_str	00000000 
0000d71b l       .debug_str	00000000 
0000d724 l       .debug_str	00000000 
0000585e l       .debug_str	00000000 
0000d751 l       .debug_str	00000000 
0000d759 l       .debug_str	00000000 
0000d776 l       .debug_str	00000000 
0000d79e l       .debug_str	00000000 
0000d7bb l       .debug_str	00000000 
0000d7c5 l       .debug_str	00000000 
0000d7fa l       .debug_str	00000000 
0000d807 l       .debug_str	00000000 
0000d83a l       .debug_str	00000000 
00005796 l       .debug_str	00000000 
0000d89e l       .debug_str	00000000 
0000d8a7 l       .debug_str	00000000 
0000d8d8 l       .debug_str	00000000 
0000d8f2 l       .debug_str	00000000 
0000d910 l       .debug_str	00000000 
0000d9bc l       .debug_str	00000000 
0000d9f7 l       .debug_str	00000000 
0000da00 l       .debug_str	00000000 
00003204 l       .debug_str	00000000 
0000da35 l       .debug_str	00000000 
0000dab0 l       .debug_str	00000000 
0000db27 l       .debug_str	00000000 
0000db3d l       .debug_str	00000000 
0000db78 l       .debug_str	00000000 
0000db82 l       .debug_str	00000000 
0000db91 l       .debug_str	00000000 
0000dbc2 l       .debug_str	00000000 
0000dbcb l       .debug_str	00000000 
0000dbed l       .debug_str	00000000 
0000dc14 l       .debug_str	00000000 
0000dc1e l       .debug_str	00000000 
0000dc40 l       .debug_str	00000000 
0000dc76 l       .debug_str	00000000 
0000dc7f l       .debug_str	00000000 
0000dca7 l       .debug_str	00000000 
0000dcb2 l       .debug_str	00000000 
08001f32 l     F .text	00000012 _ZN36_$LT$T$u20$as$u20$core..any..Any$GT$7type_id17h589f04726b9846deE
08003bea l     F .text	0000000c _ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h133134731e47c3ddE
08002914 l     F .text	0000000a _ZN4core3fmt10ArgumentV110show_usize17h3c2fac3bad94a947E
0800397e l     F .text	00000102 _ZN4core3fmt3num3imp7fmt_u3217h4a6591ec3ef714beE
08003aac l     F .text	00000118 _ZN4core3fmt3num3imp7fmt_u6417h9ff4e337182d98bfE
080034d6 l     F .text	00000170 _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h4ad837c30b835d03E
08002828 l     F .text	00000096 _ZN4core3fmt5Write10write_char17hcea4dac6dc1cee59E
080028be l     F .text	00000024 _ZN4core3fmt5Write9write_fmt17hd5d67e64151488d3E
08002d88 l     F .text	00000032 _ZN4core3fmt9Formatter12pad_integral12write_prefix17h6c53284d01543c5dE
08001ede l     F .text	00000002 _ZN4core3ptr18real_drop_in_place17h034ec8dd70295f85E
08001ee0 l     F .text	00000002 _ZN4core3ptr18real_drop_in_place17h0ef71ded6c57bedcE
08001ee2 l     F .text	00000002 _ZN4core3ptr18real_drop_in_place17h921869e295dffcdcE
080032f0 l     F .text	000000fe _ZN4core7unicode9bool_trie8BoolTrie6lookup17h35a609aac8cea223E
080033ee l     F .text	000000e8 _ZN4core7unicode9printable5check17ha9e204e73497ee46E
080028e8 l     F .text	00000006 _ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17h44c662229c53045aE
080028ee l     F .text	00000026 _ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_fmt17h44a86feaf2f21d35E
080028e2 l     F .text	00000006 _ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_str17hc9f594331d92d7bbE
08001ee4 l     F .text	0000004e _ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h7bd32f961ec2bdfaE
0800c940 l     O .text	00000016 str.h
0800c980 l     O .text	00000020 str.j
00000000 l    df *ABS*	00000000 semihosting_console.c
20000248 l     O .bss	00000004 semihost_mbuf
20000130 l     O .data	00000001 log_enabled
00000000 l    df *ABS*	00000000 console.c
2000024c l     O .bss	00000010 avail_queue
2000025c l     O .bss	0000000c console_write_lock
00000000 l    df *ABS*	00000000 console_fmt.c
00000000 l    df *ABS*	00000000 ticks.c
20000268 l     O .bss	00000001 do_ticks
00000000 l    df *ABS*	00000000 sensor_coap.c
08003df8 l     F .text	0000000a cbor_cnt_writer
08003e04 l     F .text	0000000c handle_coap_response
08003e10 l     F .text	0000000e json_write_mbuf.part.0
08003e10 l     F .text	0000000e json_rep_finalize.part.2
08003e10 l     F .text	0000000e json_rep_new.part.1
2000026c l     O .bss	00000008 cnt_writer
20000274 l     O .bss	00000004 coap_json_mbuf
20000278 l     O .bss	00000004 oc_c_message
2000027c l     O .bss	0000006c oc_c_request
200002e8 l     O .bss	00000004 oc_c_rsp
200002f0 l     O .bss	00000008 oc_sem
200002f8 l     O .bss	00000001 oc_sensor_coap_ready
00000000 l    df *ABS*	00000000 sensor_network.c
08004134 l     F .text	0000000e sensor_network_start_transport.part.0
08004134 l     F .text	0000000e get_hardware_id.part.2
08004134 l     F .text	0000000e sensor_network_do_post.part.1
08004234 l     F .text	00000040 network_task_func
200002fc l     O .bss	00000004 current_uri
20000300 l     O .bss	00000010 device_id
20000310 l     O .bss	00000021 device_id_text
20000331 l     O .bss	0000000c hw_id
20000340 l     O .bss	00000004 hw_id_len
20000344 l     O .bss	00000050 network_task
20000394 l     O .bss	00000400 network_task_stack
20000794 l     O .bss	00000020 sensor_network_endpoints
200007b4 l     O .bss	00000028 sensor_network_interfaces
200007e0 l     O .bss	00000008 sensor_node_address
200007e8 l     O .bss	00000037 sensor_node_names_buf
20000131 l     O .data	00000001 current_iface_type
20000134 l     O .data	00000014 sensor_node_names
0800db31 l     O .text	0000000f COAP_HOST
0800db40 l     O .text	00000036 COAP_URI
0800db76 l     O .text	0000000c COLLECTOR_NODE_HW_ID
0800db82 l     O .text	0000003c SENSOR_NODE_HW_IDS
0800dc00 l     O .text	00000008 sensor_network_encoding
0800dc6c l     O .text	00000008 sensor_network_shortname
0800dc80 l     O .text	00000028 sensor_node_addresses
00000000 l    df *ABS*	00000000 oc_buffer.c
080045bc l     F .text	0000002c oc_buffer_tx
080045e8 l     F .text	00000028 oc_buffer_rx
20000820 l     O .bss	00000018 oc_inq
20000838 l     O .bss	00000018 oc_outq
00000000 l    df *ABS*	00000000 oc_rep.c
20000850 l     O .bss	00000004 g_outm
20000854 l     O .bss	0000001c oc_rep_objects
20000870 l     O .bss	00000030 oc_rep_objects_area
00000000 l    df *ABS*	00000000 oc_ri.c
08004730 l     F .text	00000040 free_client_cb
08004770 l     F .text	00000006 oc_ri_remove_cb
200008a0 l     O .bss	000000c8 oc_client_cb_area
20000968 l     O .bss	0000001c oc_client_cb_pool
20000984 l     O .bss	00000004 oc_client_cbs
00000000 l    df *ABS*	00000000 coap.c
08004860 l     F .text	00000092 coap_append_opt_hdr
080048f2 l     F .text	00000098 coap_append_int_opt
20000988 l     O .bss	00000002 current_mid
00000000 l    df *ABS*	00000000 adaptor.c
2000098c l     O .bss	00000004 oc_evq
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 random.c
00000000 l    df *ABS*	00000000 oc_helpers.c
00000000 l    df *ABS*	00000000 sysinit.c
08004eba l     F .text	00000006 sysinit_dflt_panic_cb
00000000 l    df *ABS*	00000000 support.c
00000000 l    df *ABS*	00000000 json_encode.c
08004fe4 l     F .text	000001ac json_encode_value
00000000 l    df *ABS*	00000000 cbor_mbuf_writer.c
00000000 l    df *ABS*	00000000 cborencoder.c
00000000 l    df *ABS*	00000000 stm32_hw_id.c
00000000 l    df *ABS*	00000000 sensor.c
0800524c l     F .text	0000004c sensor_mgr_insert
080052c4 l     F .text	00000060 sensor_read_data_func
08005324 l     F .text	00000012 sensor_mgr_match_bydevname
08005338 l     F .text	00000050 sensor_base_ts_update_event
0800568c l     F .text	000000e8 sensor_mgr_wakeup_event
080054a8 l     F .text	00000050 sensor_update_nextrun
20000990 l     O .bss	00000078 sensor_notify_evt_area
20000a08 l     O .bss	0000001c sensor_notify_evt_pool
00000000 l    df *ABS*	00000000 os_arch_arm.c
00000000 l    df *ABS*	00000000 os_fault.c
00000000 l    df *ABS*	00000000 os.c
08005a7c l     F .text	00000016 os_main
20000b28 l     O .bss	00001000 os_main_stack
20000a28 l     O .bss	00000100 g_idle_task_stack
20001b28 l     O .bss	00000050 os_main_task
00000000 l    df *ABS*	00000000 os_callout.c
00000000 l    df *ABS*	00000000 os_cputime.c
00000000 l    df *ABS*	00000000 os_dev.c
08005d32 l     F .text	00000020 os_dev_initialize
20001b78 l     O .bss	00000008 g_os_dev_list
00000000 l    df *ABS*	00000000 os_eventq.c
20001b80 l     O .bss	00000010 os_eventq_main
00000000 l    df *ABS*	00000000 os_mbuf.c
08005fe8 l     F .text	00000016 _os_mbuf_trailingspace
08005ffe l     F .text	00000032 _os_mbuf_copypkthdr
00000000 l    df *ABS*	00000000 os_mempool.c
080063b0 l     F .text	0000006c os_mempool_init_internal
00000000 l    df *ABS*	00000000 os_msys.c
080064bc l     F .text	00000024 os_msys_find_pool
20001b90 l     O .bss	00000db0 os_msys_1_data
20002940 l     O .bss	0000000c os_msys_1_mbuf_pool
2000294c l     O .bss	0000001c os_msys_1_mempool
2000014c l     O .data	00000008 g_msys_pool_list
00000000 l    df *ABS*	00000000 os_mutex.c
00000000 l    df *ABS*	00000000 os_sanity.c
0800674c l     F .text	0000001c os_sanity_check_list_lock
08006768 l     F .text	00000018 os_sanity_check_list_unlock
00000000 l    df *ABS*	00000000 os_sched.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
08006c44 l     F .text	0000004c os_deltatime
20002970 l     O .bss	00000030 basetod
00000000 l    df *ABS*	00000000 HAL_CM3.o
08006dbc l       .text	00000000 SVC_User
08006dda l       .text	00000000 SVC_Done
00000000 l    df *ABS*	00000000 lrand48.c
00000000 l    df *ABS*	00000000 malloc.c
08006e58 l     F .text	00000004 malloc_lock_nop
08006e5c l     F .text	00000002 malloc_unlock_nop
08006e60 l     F .text	00000074 __free_block
20000164 l     O .data	00000018 __malloc_head
2000017c l     O .data	00000004 malloc_lock
20000180 l     O .data	00000004 malloc_unlock
00000000 l    df *ABS*	00000000 memcmp.c
08007000 l       .text	00000000 test1
08006ff4 l       .text	00000000 loop1
08007006 l       .text	00000000 res1
08007022 l       .text	00000000 test2
0800702a l       .text	00000000 done
08007016 l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memcpy.c
08007036 l       .text	00000000 test1
08007032 l       .text	00000000 loop1
08007044 l       .text	00000000 test2
08007040 l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 tinyprintf.c
080070ac l     F .text	000000b2 ui2a
0800715e l     F .text	00000022 putf
08007180 l     F .text	0000011c putchw
00000000 l    df *ABS*	00000000 vprintf.c
00000000 l    df *ABS*	00000000 jrand48.c
00000000 l    df *ABS*	00000000 memfile.c
00000000 l    df *ABS*	00000000 mynewt.c
0800760c l     F .text	00000004 stdin_read
08007610 l     F .text	00000010 stdout_write
20000184 l     O .data	00000004 _stdin
20000188 l     O .data	00000008 _stdin_methods
00000000 l    df *ABS*	00000000 hmac_prng.c
200029a0 l     O .bss	0000000c hw_id
200029ac l     O .bss	00000004 hw_id_len
200029b0 l     O .bss	00000138 prng
20002ae8 l     O .bss	00000020 seed
00000000 l    df *ABS*	00000000 json_helper.c
00000000 l    df *ABS*	00000000 mynewt_rust.c
00000000 l    df *ABS*	00000000 sensor_helper.c
00000000 l    df *ABS*	00000000 temp_stm32.c
0800781a l     F .text	0000001c temp_stm32_sensor_get_config
08007836 l     F .text	00000018 temp_stm32_close
08007850 l     F .text	00000068 temp_stm32_open
080079dc l     F .text	00000080 temp_stm32_sensor_read
20000190 l     O .data	0000000c temp_channel_config
0800def0 l     O .text	00000028 g_temp_stm32_sensor_driver
00000000 l    df *ABS*	00000000 mem.c
00000000 l    df *ABS*	00000000 bluepill_my_sensor-sysinit-app.c
00000000 l    df *ABS*	00000000 hmac_prng.c
08007b06 l     F .text	000000ca update
00000000 l    df *ABS*	00000000 utils.c
00000000 l    df *ABS*	00000000 hmac.c
08007ce8 l     F .text	0000003a rekey
00000000 l    df *ABS*	00000000 sha256.c
08007e14 l     F .text	000001c8 compress
0800df48 l     O .text	00000100 k256
00000000 l    df *ABS*	00000000 hal_bsp.c
08008158 l     F .text	00000010 LL_GPIO_AF_DisableRemap_USART2
20002b08 l     O .bss	0000003c hal_uart0
0800e050 l     O .text	00000018 uart_cfg
00000000 l    df *ABS*	00000000 adc.c
00000000 l    df *ABS*	00000000 uart_hal.c
0800823e l     F .text	0000002c uart_hal_resume
0800826a l     F .text	00000014 uart_hal_close
0800827e l     F .text	00000072 uart_hal_open
080082f0 l     F .text	0000000e uart_hal_blocking_tx.part.2
080082f0 l     F .text	0000000e uart_hal_start_tx.part.4
080082f0 l     F .text	0000000e uart_hal_start_rx.part.3
080082fe l     F .text	00000014 uart_hal_blocking_tx
08008312 l     F .text	00000014 uart_hal_start_rx
08008326 l     F .text	00000014 uart_hal_start_tx
0800833a l     F .text	00000028 uart_hal_suspend
00000000 l    df *ABS*	00000000 hal_flash.c
080083cc l     F .text	00000012 stm32_flash_sector_info
080083de l     F .text	0000000a stm32_flash_init
080083e8 l     F .text	00000004 stm32_flash_erase_sector
080083ec l     F .text	0000000e stm32_flash_read
080083fc l     F .text	000000a4 stm32_flash_write
00000000 l    df *ABS*	00000000 hal_os_tick.c
00000000 l    df *ABS*	00000000 hal_system.c
00000000 l    df *ABS*	00000000 hal_timer.c
08008524 l     F .text	0000002a hal_timer_cnt
08008550 l     F .text	00000080 stm32_tmr0_irq
0800e09c l     O .text	0000000c stm32_tmr_devs
00000000 l    df *ABS*	00000000 hal_uart.c
080087c4 l     F .text	0000008c uart_irq_handler
08008850 l     F .text	00000006 uart_irq1
08008856 l     F .text	00000006 uart_irq2
0800885c l     F .text	00000006 uart_irq3
20002b44 l     O .bss	00000018 uart_irqs
20002b5c l     O .bss	0000001c uarts
00000000 l    df *ABS*	00000000 hal_watchdog.c
00000000 l    df *ABS*	00000000 sbrk.c
2000019c l     O .data	00000004 brk.4103
00000000 l    df *ABS*	00000000 hal_gpio.c
08008c8c l     F .text	0000007c hal_gpio_clk_enable
0800e0a8 l     O .text	00000014 portmap
00000000 l    df *ABS*	00000000 stm32f1xx_hal_flash.c
08008d6c l     F .text	00000050 FLASH_SetErrorCode
00000000 l    df *ABS*	00000000 stm32f1xx_hal_flash_ex.c
08008ed4 l     F .text	00000024 FLASH_MassErase.isra.0
00000000 l    df *ABS*	00000000 stm32f1xx_hal_gpio.c
00000000 l    df *ABS*	00000000 stm32f1xx_hal_iwdg.c
00000000 l    df *ABS*	00000000 stm32f1xx_hal_rcc.c
00000000 l    df *ABS*	00000000 stm32f1xx_hal_tim.c
00000000 l    df *ABS*	00000000 hal_flash.c
00000000 l    df *ABS*	00000000 hal_timer_freq.c
00000000 l    df *ABS*	00000000 stm32f1xx_hal_dma.c
00000000 l    df *ABS*	00000000 sensor_creator.c
00000000 l    df *ABS*	00000000 creator.c
20002b78 l     O .bss	0000006c __compound_literal.0
20002be4 l     O .bss	00000048 stm32f1_adc1_dev
200001a0 l     O .data	00000018 adc1_config
200001b8 l     O .data	00000030 adc1_handle
00000000 l    df *ABS*	00000000 adc_stm32f1.c
080099c0 l     F .text	00000008 stm32f1_adc_size_buffer
080099c8 l     F .text	0000000e stm32f1_adc_release_buffer
080099d6 l     F .text	0000000e stm32f1_adc_set_buffer
080099e4 l     F .text	00000050 stm32f1_resolve_adc_gpio.part.0
08009a34 l     F .text	0000007c stm32f1_adc_configure_channel
08009ab0 l     F .text	0000000e stm32f1_adc_read_buffer.part.1
08009ab0 l     F .text	0000000e stm32f1_adc_open.part.4
08009ab0 l     F .text	0000000e stm32f1_adc_sample.part.3
08009ab0 l     F .text	0000000e stm32f1_adc_read_channel.part.2
08009abe l     F .text	00000016 stm32f1_adc_read_buffer
08009ad4 l     F .text	0000004e stm32f1_adc_read_channel
08009b24 l     F .text	00000028 stm32f1_adc_sample
08009b4c l     F .text	000000bc stm32f1_adc_open
08009c08 l     F .text	00000088 stm32f1_adc_close
20002c2c l     O .bss	00000010 stm32f1_adc_stats
0800e0e0 l     O .text	0000001c stm32f1_adc_funcs
00000000 l    df *ABS*	00000000 creator.cpp
20002c3c l     O .bss	00000038 _ZL5bc95g
200001e8 l     O .data	00000014 _ZL16uart_0_itf_bc95g
00000000 l    df *ABS*	00000000 driver.cpp
08009d80 l     F .text	00000002 _ZL11bc95g_eventPv
08009d82 l     F .text	0000000e _ZL11get_commandP5bc95g9CommandId.isra.0.part.1
08009d82 l     F .text	0000000e _ZL10bc95g_openP6os_devmPv.part.13
08009d82 l     F .text	0000000e _ZL11bc95g_closeP6os_dev.part.3
08009d82 l     F .text	0000000e _ZL18register_transportPKcPvS0_th.part.2
08009d90 l     F .text	00000016 _ZL18register_transportPKcPvS0_th
08009da8 l     F .text	0000001c _ZL11bc95g_closeP6os_dev
08009dc4 l     F .text	00000010 _ZL9expect_okP5bc95g.isra.4
08009dd4 l     F .text	00000020 _ZL8send_atpP5bc95g.isra.6
08009df4 l     F .text	0000007c _ZL10send_queryP5bc95g9CommandIdPiS2_.constprop.15
08009e70 l     F .text	000000ac _ZL10bc95g_openP6os_devmPv
08009f1c l     F .text	00000060 _ZL8send_hexP5bc95gPKht.isra.8
08009f7c l     F .text	000000f4 _ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf.isra.11
0800a070 l     F .text	00000034 _ZL16send_command_intP5bc95g9CommandIdi
0800a0a4 l     F .text	00000038 _ZL12send_commandP5bc95g9CommandId
20002c74 l     O .bss	00000100 _ZL15bc95g_rx_buffer
20002d74 l     O .bss	00000190 _ZL15bc95g_tx_buffer
20002f04 l     O .bss	00000100 _ZL19bc95g_parser_buffer
20003004 l     O .bss	0000003c _ZL6parser
20003040 l     O .bss	0000004c _ZL6serial
2000308c l     O .bss	00000004 _ZL7packets
200001fc l     O .data	00000001 _ZL10first_open
0800e138 l     O .text	00000014 _ZL13network_iface
0800e18d l     O .text	00000004 _ZL3ATP
0800e194 l     O .text	00000044 _ZL8COMMANDS
00000000 l    df *ABS*	00000000 transport.cpp
0800a306 l     F .text	00000004 _ZL10oc_ep_sizePK11oc_endpoint
0800a30a l     F .text	00000004 _ZL14oc_ep_has_connPK11oc_endpoint
0800a30e l     F .text	00000004 _ZL7oc_initv
0800a312 l     F .text	00000002 _ZL11oc_shutdownv
0800a314 l     F .text	00000020 _ZL9oc_ep_strPciPK11oc_endpoint
0800a334 l     F .text	000000b4 _ZL11oc_tx_ucastP7os_mbuf
20003090 l     O .bss	00000004 _ZL14network_device
20003094 l     O .bss	00000004 _ZL6server
20003098 l     O .bss	00000004 _ZL6socket
2000309c l     O .bss	00000001 _ZZL11oc_tx_ucastP7os_mbufE8sequence
200001fd l     O .data	00000001 _ZL12transport_id
0800e2b4 l     O .text	00000024 _ZL9transport
00000000 l    df *ABS*	00000000 util.c
00000000 l    df *ABS*	00000000 ATParser.cpp
00000000 l    df *ABS*	00000000 BufferedSerial.cpp
0800a7fa l     F .text	00000002 _ZL12uart_tx_donePv
0800a7fc l     F .text	0000000e _ZN14BufferedSerial5primeEv.part.0
0800a7fc l     F .text	0000000e _ZL12uart_rx_charPvh.part.4
0800a7fc l     F .text	0000000e _ZN14BufferedSerial5rxIrqEh.part.3
0800a7fc l     F .text	0000000e _ZL12uart_tx_charPv.part.2
0800a8c4 l     F .text	00000010 _ZL12uart_tx_charPv
0800a9bc l     F .text	0000002c _ZL12uart_rx_charPvh
00000000 l    df *ABS*	00000000 MyBuffer.cpp
00000000 l    df *ABS*	00000000 creator.c
200031a8 l     O .bss	00000014 adc_1_itf_temp_stm32
200031c0 l     O .bss	000000d0 temp_stm32_dev
00000000 l    df *ABS*	00000000 ble_adaptor.c
00000000 l    df *ABS*	00000000 ip4_adaptor.c
00000000 l    df *ABS*	00000000 ip_adaptor.c
00000000 l    df *ABS*	00000000 lora_adaptor.c
00000000 l    df *ABS*	00000000 serial_adaptor.c
00000000 l    df *ABS*	00000000 flash_map.c
20003290 l     O .bss	00000078 mfg_areas.6497
00000000 l    df *ABS*	00000000 modlog.c
00000000 l    df *ABS*	00000000 mfg.c
0800ab98 l     F .text	000000a4 mfg_read_next_mmr
0800ac3c l     F .text	00000064 mfg_read_tlv_body
20003308 l     O .bss	00000001 mfg_initialized
2000330c l     O .bss	00000018 mfg_mmrs
20003324 l     O .bss	00000004 mfg_num_mmrs
00000000 l    df *ABS*	00000000 vsscanf.c
0800adb0 l     F .text	00000020 skipspace
0800add0 l     F .text	00000018 set_bit
00000000 l    df *ABS*	00000000 hal_flash.c
0800b1b8 l     F .text	0000001c hal_flash_check_addr
00000000 l    df *ABS*	00000000 stm32f1xx_hal_adc.c
00000000 l    df *ABS*	00000000 stm32f1xx_hal_adc_ex.c
00000000 l    df *ABS*	00000000 stm32f1xx_hal_rcc_ex.c
00000000 l    df *ABS*	00000000 sscanf.c
00000000 l    df *ABS*	00000000 strntoumax.c
00000000 l    df *ABS*	00000000 vsprintf.c
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 aeabi_memcpy.c
00000000 l    df *ABS*	00000000 bluepill_my_sensor-sysflash.c
00000000 l    df *ABS*	00000000 SVC_Table.S
00000000 l       .svc_table	00000000 SVC_End
00000000 l    df *ABS*	00000000 srand48.c
08004e6c g     F .text	0000000a oc_random_rand
08001188  w    F .text	00000002 RTC_Alarm_IRQHandler
08003c54 g     F .text	00000044 console_buffer
08001188  w    F .text	00000002 EXTI2_IRQHandler
0800b23c  w    F .text	00000002 HAL_ADC_MspInit
0800befc g     O .text	00000008 APBPrescTable
08005210 g     F .text	00000010 cbor_mbuf_writer_init
0800588c g     F .text	00000034 os_arch_start
20003540 g       .bss	00000000 __HeapBase
200034e4 g     O .bss	00000008 g_os_task_list
080059f8 g     F .text	00000084 os_idle_task
08001b60 g     F .text	000000b6 _ZN6mynewt2hw6sensor8bindings23mgr_find_next_bydevname17h5578d6fbfa9c8a90E
0800708c g     F .text	00000010 strcpy
0800b3d4 g     F .text	0000000a ADC_DMAHalfConvCplt
08001a98 g     F .text	000000ae _ZN6mynewt4Strn3new17h7a223ee4df5e1f9bE
08009174 g     F .text	000000e0 HAL_GPIO_DeInit
200034f4 g     O .bss	00000006 __rand48_seed
00000000 g       .svc_table	00000000 SVC_Count
080075f8 g     F .text	00000014 fmemopen_w
08001188  w    F .text	00000002 DebugMon_Handler
200034c8 g     O .bss	00000008 g_os_mempool_list
08005bd4 g     F .text	0000001a os_callout_init
08005bf0 g     F .text	0000003c os_callout_stop
08006ed4 g     F .text	00000050 add_malloc_block
0800a124 g     F .text	00000148 bc95g_connect
08001a8a g     F .text	0000000e _ZN6mynewt7sysinit17hc2bae3266fb1ff2aE
08005ebc g     F .text	00000056 os_eventq_put
08004da0 g     F .text	00000034 oc_transport_register
08007fdc g     F .text	00000058 tc_sha256_init
20000110 g       .data	00000000 __data_start__
08007724 g     F .text	0000001c json_helper_close_array
08007504 g     F .text	00000024 printf
080055e4 g     F .text	000000a8 sensor_read
0800dea4 g     O .text	00000004 stdout
0800bbd8 g     F .text	0000000c vsprintf
08009778 g     F .text	00000020 HAL_RCC_GetPCLK1Freq
20003390 g     O .bss	00000010 links_array
08001188  w    F .text	00000002 TIM1_CC_IRQHandler
08009798 g     F .text	00000020 HAL_RCC_GetPCLK2Freq
0800e080 g     O .text	0000001c stm32_flash_funcs
08003e20 g     F .text	00000038 json_write_mbuf
080057f8 g     F .text	00000090 os_arch_os_init
08001188  w    F .text	00000002 HardFault_Handler
200033a0 g     O .bss	00000004 g_err
080085d0 g     F .text	00000154 hal_timer_init
0800ad20 g     F .text	00000016 mfg_seek_next_with_type
0800226e g     F .text	0000031e _ZN4core3str16slice_error_fail17heb8f3fc076617590E
080058c0 g     F .text	00000050 os_arch_os_start
0800a26c g     F .text	00000078 bc95g_socket_open
08003702 g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hb2119167a92723afE
08004e76 g     F .text	00000034 oc_new_string
08004ed8 g     F .text	00000014 __wrap_coap_receive
08001dc4 g     F .text	0000011a _ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17hffcd2d6e43a98b23E
08006e0a g     F .text	0000000c SysTick_Handler
2000010c g       .coredata	00000000 __coredata_end__
08004e40 g     F .text	00000028 oc_init
08001d9e g     F .text	00000010 _ZN6mynewt4libs14sensor_network14do_server_post17h63b4208c05d74765E
080053e8 g     F .text	00000010 sensor_mgr_find_next_bydevname
08001188  w    F .text	00000002 PVD_IRQHandler
08001864 g     F .text	000000a0 _ZN6mynewt2hw6sensor17register_listener17he319e84e05fa897bE
080051f0 g     F .text	0000001e cbor_mbuf_writer
0800647e g     F .text	0000002c os_memblock_put
08006528 g     F .text	0000001c os_msys_get_pkthdr
20003538 g     O .bss	00000004 flash_map
0800e3dc g       *ABS*	00000000 _sidata
08006de0 g     F .text	0000002a PendSV_Handler
08001188  w    F .text	00000002 NMI_Handler
0800e3dc g       .ARM.exidx	00000000 __exidx_end
08001020 g       .text	00000000 __isr_vector_start
08009d04 g     F .text	0000007c bc95g_create
08001188  w    F .text	00000002 EXTI3_IRQHandler
080075cc g     F .text	0000002a memfile_write
0800577c g     F .text	00000014 os_arch_ctx_sw
080095bc g     F .text	00000078 HAL_RCC_GetSysClockFreq
0800a85a g     F .text	00000034 _ZN14BufferedSerial5fgetcEi
08008364 g     F .text	00000068 uart_hal_init
080084f4 g     F .text	00000024 hal_system_reset
08005aa0 g     F .text	00000058 os_init_idle_task
0800a536 g     F .text	0000002e _ZN8ATParser7vprintfEPKcSt9__va_list
20000164 g       .data	00000000 __aeabi_unwind_cpp_pr0
08006894 g     F .text	0000000c os_sched_set_current_task
080037d8 g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$isize$GT$3fmt17hb07848a2f9c4477cE
0800e3dc g       .ARM.exidx	00000000 __etext
08009254 g     F .text	00000042 HAL_IWDG_Init
080030ae g     F .text	00000026 _ZN4core3fmt9Formatter11debug_tuple17h793087e8ecab9022E
20000204 g       .corebss	00000000 __corebss_start__
080038ae g     F .text	00000068 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u64$GT$3fmt17hd9c17bd8ef0ff383E
080065d0 g     F .text	000000a0 os_mutex_release
08006790 g     F .text	00000020 os_sanity_check_register
08006d14 g     F .text	00000028 os_time_delay
0800987c g     F .text	00000036 stm32_mcu_flash_erase_sector
20003330 g     O .bss	0000004c coap_json_encoder
20000208 g       .bss	00000000 _sbss
0800ad36 g     F .text	00000006 mfg_read_tlv_flash_area
08003dec g     F .text	0000000c console_get_ticks
080062f2 g     F .text	00000084 os_mbuf_prepend
0800ade8 g     F .text	000003ce vsscanf
0800997a g     F .text	00000002 sensor_dev_create
08009900 g     F .text	0000007a HAL_DMA_Start_IT
080064ac g     F .text	00000010 os_mempool_module_init
080057a2 g     F .text	0000000a os_arch_in_critical
08001d8c g     F .text	00000012 _ZN6mynewt4libs14sensor_network12prepare_post17h850eb70da8c09a26E
08004388 g     F .text	00000060 get_hardware_id
08001f48 g     F .text	00000008 _ZN4core5panic8Location4file17h94cc6af18de736c4E
08008fb4 g     F .text	000001c0 HAL_GPIO_Init
08009296 g     F .text	0000000c HAL_IWDG_Refresh
0800a962  w    F .text	0000001e _ZN8MyBufferIcE3putEc
08005774 g     F .text	00000006 timer_handler
080026e4 g     F .text	000000ec _ZN4core3fmt8builders10DebugTuple5field17h7da5ac79cde13c49E
08005e04 g     F .text	00000024 os_dev_lookup
080068c4 g     F .text	00000074 os_sched_sleep
08004118 g     F .text	0000001c json_rep_end_root_object
08003d40 g     F .text	00000004 semihosting_console_init
08003f14 g     F .text	00000108 prepare_sensor_post
08007030 g     F .text	0000001a memcpy
0800b240 g     F .text	0000013c HAL_ADC_PollForConversion
08008c04 g     F .text	00000030 hal_watchdog_init
08007620 g     F .text	000000c4 hmac_prng_init
08001f50 g     F .text	00000004 _ZN4core5panic8Location4line17h3ffc63f14d0a6636E
20003380 g     O .bss	00000010 coap_json_value
080030e0 g     F .text	00000210 _ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE
08005d24 g     F .text	00000008 os_cputime_init
08001188  w    F .text	00000002 EXTI0_IRQHandler
080051d4 g     F .text	0000001c json_encode_array_finish
08001188  w    F .text	00000002 I2C2_EV_IRQHandler
0800bbe4 g     F .text	00000000 .hidden __aeabi_uldivmod
00000020 g       *ABS*	00000000 _imghdr_size
0800685c g     F .text	0000002c os_sched_ctx_sw_hook
20003328 g     O .bss	00000004 console_is_midline
08006116 g     F .text	00000010 os_mbuf_free
20000110 g     O .data	00000004 SystemCoreClock
08003646 g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17heed14ddcd875f85bE
200033f8 g     O .bss	00000034 sensor_mgr
0800aa80 g     F .text	00000002 oc_register_ip6
080057ac g     F .text	00000036 os_arch_task_stack_init
08006f24 g     F .text	00000098 malloc
08004e68 g     F .text	00000004 oc_clock_time
08004d64 g     F .text	00000022 coap_set_header_uri_path
08003a8a g     F .text	00000018 _ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17h33b3bbdbc74b88baE
0800aac4 g     F .text	00000024 flash_area_read
08001794 g     F .text	00000000 __bkpt
08004d86 g     F .text	0000000e coap_set_header_observe
08005914 g     F .text	0000004c __assert_func
0800b628 g     F .text	0000011c HAL_ADC_Start_DMA
080069dc g     F .text	00000034 os_sched_wakeup_ticks
08003d64 g     F .text	00000048 console_pkg_init
08001188  w    F .text	00000002 UsageFault_Handler
08007528 g     F .text	0000003a vsnprintf
0800775c g     F .text	0000001c json_helper_object_array_end_item
08004404 g     F .text	00000018 is_standalone_node
200034c0 g     O .bss	00000008 g_callout_list
08004650 g     F .text	00000028 oc_send_message
0800bee8 g     F .text	00000004 __aeabi_memcpy
08001188  w    F .text	00000002 ADC1_2_IRQHandler
08004d56 g     F .text	0000000e coap_set_header_accept
0800a95e g     F .text	00000004 _ZN14BufferedSerial4baudEm
0800729c g     F .text	00000264 tfp_format
0800499c g     F .text	0000001a coap_init_message
20005000 g       .bss	00000000 __HeapLimit
08001972 g     F .text	00000006 _ZN6mynewt3sys7console8printhex17h075b8327916646d1E
20000208 g       .bss	00000000 __bss_start__
08008518 g     F .text	00000004 hal_debugger_connected
0800a9f6  w    F .text	0000000c _ZN8MyBufferIcE4initEPcm
080098b4 g     F .text	0000004c stm32_hal_timer_get_freq
20000110 g       .data	00000000 _sdata
08001188  w    F .text	00000002 SPI1_IRQHandler
08008f1c g     F .text	00000098 HAL_FLASHEx_Erase
080027d0 g     F .text	00000058 _ZN4core3fmt8builders10DebugTuple6finish17h24d91625b3672e6dE
0800bc14 g     F .text	000002ce .hidden __udivmoddi4
080042e4 g     F .text	00000008 init_server_post
0800b3f8 g     F .text	000000fc HAL_ADC_ConfigChannel
20000200 g     O .data	00000004 _nbt
08001188  w    F .text	00000002 TAMPER_IRQHandler
0800447c g     F .text	000000bc sensor_network_init
0800401c g     F .text	00000048 json_rep_finalize
200034dc g     O .bss	00000004 g_current_task
080067b0 g     F .text	00000050 os_sanity_run
08004d94 g     F .text	0000000c oc_evq_get
08005790 g     F .text	0000000c os_arch_save_sr
08008bdc g     F .text	00000028 hal_uart_close
0800641c g     F .text	00000012 os_mempool_init
08006d3c g     F .text	0000003c os_gettimeofday
08004144 g     F .text	00000060 sensor_network_start_transport
200034ec g     O .bss	00000001 g_task_id
0800222a g     F .text	00000044 _ZN4core5slice22slice_index_order_fail17h604ca25004a88762E
080076e4 g     F .text	0000001c hmac_prng_generate
08001cda g     F .text	000000b2 _ZN6mynewt4libs14sensor_network16init_server_post17hed16ed94721012abE
2000332c g     O .bss	00000001 g_console_input_ignore
0800e068 g     O .text	00000018 stm32_flash_dev
20003518 g     O .bss	00000020 pFlash
0800b788 g     F .text	00000100 HAL_ADC_Init
08008900 g     F .text	00000028 hal_uart_blocking_tx
0800e3c4 g       .text	00000000 __exidx_start
0800ba90 g     F .text	00000148 strntoumax
0800bee8 g     F .text	00000004 __aeabi_memcpy4
08004274 g     F .text	00000070 sensor_network_init_post
08006800 g     F .text	00000010 os_sanity_init
08006152 g     F .text	00000098 os_mbuf_append
0800ad3c g     F .text	00000006 mfg_read_tlv_mmr_ref
08006d80 g     F .text	00000014 os_set_env
08008168 g     F .text	00000010 hal_bsp_flash_dev
08004538 g     F .text	00000084 sensor_network_register_interface
0800de9c g     O .text	00000008 MemFile_methods
200034d0 g     O .bss	0000000c g_os_sanity_check_mu
08003916 g     F .text	00000068 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i64$GT$3fmt17h93ab4183a6d5feaaE
200033a4 g     O .bss	0000000c g_buf_writer
08001188  w    F .text	00000002 DMA1_Channel4_IRQHandler
080054f8 g     F .text	00000088 sensor_set_poll_rate_ms
080055c4 g     F .text	0000001e sensor_register_listener
08008c58 g     F .text	00000034 _sbrk
080078b8 g     F .text	0000002c temp_stm32_default_cfg
08003c50 g     F .text	00000004 disable_buffer
080084a0 g     F .text	0000001a os_tick_idle
0800b8bc g     F .text	000000d0 HAL_ADCEx_Calibration_Start
08003dac g     F .text	00000040 console_printf
08003cdc g     F .text	00000028 console_dump
08001a18 g     F .text	00000036 _ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17h0f82664be59056e7E
080043e8 g     F .text	0000001c is_collector_node
08003d60 g     F .text	00000004 console_blocking_mode
08003a8a g     F .text	00000018 _ZN4core3fmt3num3imp54_$LT$impl$u20$core..fmt..Display$u20$for$u20$isize$GT$3fmt17hb41e1f6693cd74c4E
08001ccc g     F .text	0000000e _ZN6mynewt4libs14sensor_network22start_server_transport17he5c189d769aa6683E
08009cc8 g     F .text	0000003c stm32f1_adc_dev_init
20000204 g       .corebss	00000000 __corebss_end__
08001208 g     F .text	00000002 _init
080046e8 g     F .text	00000024 oc_rep_finalize
0800a2e4 g     F .text	00000022 bc95g_socket_tx_mbuf
08001188  w    F .text	00000002 USART3_IRQHandler
080084bc g     F .text	00000038 os_tick_init
08005388 g     F .text	0000001c sensor_mgr_lock
08001188  w    F .text	00000002 RTC_IRQHandler
0800a510 g     F .text	00000026 _ZN8ATParser5writeEPKci
20003540 g       .bss	00000000 _ebss
08004eaa g     F .text	00000010 oc_free_string
08005af8 g     F .text	00000090 os_init
08001188  w    F .text	00000002 DMA1_Channel7_IRQHandler
0800112c  w    F .text	0000003e Reset_Handler
080040fc g     F .text	0000001c json_rep_start_root_object
080097f4 g     F .text	00000070 TIM_Base_SetConfig
0800a88e g     F .text	00000036 _ZN14BufferedSerial5txIrqEv
08001188  w    F .text	00000002 CAN1_RX1_IRQHandler
08007cca g     F .text	0000001a _copy
0800a0dc g     F .text	00000034 bc95g_init
200033f0 g     O .bss	00000001 sysinit_active
080060b4 g     F .text	0000000a os_mbuf_pool_init
0800808c g     F .text	000000cc tc_sha256_final
08006e16 g     F .text	0000001e os_default_irq_asm
08001978 g     F .text	00000004 _ZN6mynewt3sys7console5flush17ha743c57e8b1e2e3cE
08006a10 g     F .text	0000000c os_sched_next_task
08006810 g     F .text	0000004c os_sched_insert
080077fa g     F .text	00000020 get_temp_raw_data
08005c2c g     F .text	00000074 os_callout_reset
0800ad44 g     F .text	0000005c mfg_init
080047a4 g     F .text	00000018 oc_ri_remove_client_cb_by_mid
08005e9c g     F .text	00000010 os_dev_reset
0800522a g     F .text	00000004 hal_bsp_hw_id_len
08001188  w    F .text	00000002 TIM4_IRQHandler
08004d48 g     F .text	0000000e coap_set_header_content_format
0800bee8 g     F .text	00000004 __aeabi_memcpy8
080065bc g     F .text	00000014 os_mutex_init
080021e6 g     F .text	00000044 _ZN4core5slice20slice_index_len_fail17hedb5bb240677a6b7E
0800aae8 g     F .text	000000ac flash_map_init
08007564 g     F .text	00000010 vprintf
08005a94 g     F .text	0000000c os_started
20000000 g       .bss	00000000 _ram_start
080069a0 g     F .text	0000003c os_sched_os_timer_exp
20000000 g       .vector_relocation	00000000 __vector_tbl_reloc__
08008e34 g     F .text	000000a0 HAL_FLASH_Program
08001188  w    F .text	00000002 I2C1_EV_IRQHandler
08001b46 g     F .text	0000000a _ZN6mynewt6kernel2os10eventq_run17h49917a2d6a4028eaE
0800a4f8 g     F .text	00000018 _ZN8ATParser5flushEv
08004374 g     F .text	00000014 is_sensor_node
20000204 g       .data	00000000 __data_end__
0800498c g     F .text	00000010 coap_get_mid
08003702 g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$isize$GT$3fmt17h318eab348e5a5d7eE
08007d9e g     F .text	0000001a tc_hmac_init
08001188  w    F .text	00000002 DMA1_Channel6_IRQHandler
0800a7ac g     F .text	0000001a _ZN8ATParser6printfEPKcz
200034f0 g     O .bss	00000004 g_os_time
08008864 g     F .text	0000002c hal_uart_init_cbs
08008c4c g     F .text	0000000c hal_watchdog_tickle
20003540 g       .bss	00000000 __bss_end__
08004678 g     F .text	0000002c oc_buffer_init
080060be g     F .text	0000002a os_mbuf_get
08001188  w    F .text	00000002 TIM3_IRQHandler
08001188  w    F .text	00000002 RCC_IRQHandler
08001dae g     F .text	00000014 _ZN6mynewt4libs14sensor_network13get_device_id17hd4a8ff26286a906dE
080030d4 g     F .text	0000000c _ZN42_$LT$str$u20$as$u20$core..fmt..Display$GT$3fmt17h3a34938e29ce59dcE
08007778 g     F .text	00000030 json_helper_set_int
08001188  w    F .text	00000002 TIM1_TRG_COM_IRQHandler
08004d18 g     F .text	0000001a coap_send_message
080077a8 g     F .text	00000040 json_helper_set_text_string
08003916 g     F .text	00000068 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u64$GT$3fmt17h054eedd71fc90a11E
08001188  w    F .text	00000002 DMA1_Channel1_IRQHandler
0800171c g     F .text	00000078 rust_begin_unwind
08006518 g     F .text	00000010 os_msys_reset
08001188 g       .text	00000002 Default_Handler
08001a86 g     F .text	00000002 _ZN6mynewt8encoding12coap_context11CoapContext11to_void_ptr17hb3808f319694c4fdE
08008ef8 g     F .text	00000024 FLASH_PageErase
080011f4 g     F .text	00000014 _start
08007c4e g     F .text	0000007c tc_hmac_prng_generate
0800beec g     O .text	00000010 AHBPrescTable
0800a8d4 g     F .text	00000080 _ZN14BufferedSerial5primeEv
08003c98 g     F .text	00000042 console_printhex
0800b888 g     F .text	00000034 HAL_ADC_Stop
08008de0 g     F .text	00000054 FLASH_WaitForLastOperation
0800a7e0 g     F .text	0000001a _ZN8ATParser4recvEPKcz
08006d94 g     F .text	00000006 os_arch_init_task_stack
080061ea g     F .text	00000072 os_mbuf_dup
08005f88 g     F .text	0000001a os_eventq_run
08007700 g     F .text	00000024 json_helper_set_array
08001188  w    F .text	00000002 EXTI15_10_IRQHandler
0800b564 g     F .text	000000c4 HAL_ADC_Start
08002940 g     F .text	00000200 _ZN4core3fmt5write17h51826aee11d21b9bE
080047bc g     F .text	000000a4 oc_ri_alloc_client_cb
08007c18 g     F .text	00000036 tc_hmac_prng_reseed
080046a4 g     F .text	00000034 oc_rep_new
20003468 g     O .bss	00000050 g_idle_task
20000148 g     O .data	00000004 sysinit_panic_cb
08001f8e g     F .text	00000040 _ZN4core9panicking18panic_bounds_check17h946762cd0671aec9E
08008d3c g     F .text	00000030 hal_gpio_deinit_stm
08009634 g     F .text	00000144 HAL_RCC_ClockConfig
20002968 g     O .bss	00000004 g_os_sanity_check_list
080053f8 g     F .text	00000098 sensor_pkg_init
080088cc g     F .text	00000034 hal_uart_start_tx
0800642e g     F .text	00000032 os_memblock_get
08006938 g     F .text	00000068 os_sched_wakeup
200031a4 g     O .bss	00000004 rx_ptr
0800291e g     F .text	00000022 _ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..fmt..Display$GT$3fmt17h3e269ca172b8335aE
08006050 g     F .text	00000026 os_mqueue_get
08006a40 g     F .text	00000010 os_sem_init
08001a4e g     F .text	00000038 _ZN6mynewt8encoding12coap_context11CoapContext13value_to_cstr17h4eb8afb9652b8128E
08007bd0 g     F .text	00000048 tc_hmac_prng_init
08007a82 g     F .text	00000032 mem_init_mbuf_pool
08005960 g     F .text	00000098 os_default_irq
0800997c g     F .text	00000044 stm32f1_adc_create
08003aa2 g     F .text	0000000a _ZN4core3fmt3num3imp54_$LT$impl$u20$core..fmt..Display$u20$for$u20$usize$GT$3fmt17h7160b6abac7a3a12E
200034e0 g     O .bss	00000004 g_os_last_ctx_sw_time
08006a50 g     F .text	00000064 os_sem_release
08006fe8 g     F .text	00000048 memcmp
080057e4 g     F .text	00000014 os_arch_init
2000010c g       .coredata	00000000 __coredata_start__
20000204 g       .corebss	00000000 __ecorebss
0800ba74 g     F .text	0000001a sscanf
0800bee4  w    F .text	00000002 .hidden __aeabi_ldiv0
08001188  w    F .text	00000002 EXTI9_5_IRQHandler
08004ec0 g     F .text	0000000c sysinit_start
08008724 g     F .text	00000084 hal_timer_config
08005e28 g     F .text	00000042 os_dev_open
080030a6 g     F .text	00000008 _ZN4core3fmt9Formatter15debug_upper_hex17hd6d96e6aa5cb78d8E
080042ec g     F .text	00000050 sensor_network_prepare_post
08003aa2 g     F .text	0000000a _ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17ha7805aa8d849f46cE
08006ab4 g     F .text	000000ac os_sem_pend
08008c34 g     F .text	00000018 hal_watchdog_enable
0800851c g     F .text	00000004 HAL_GetTick
08004d32 g     F .text	00000016 coap_set_token
0800441c g     F .text	00000060 get_device_id
08009c90 g     F .text	00000038 HAL_ADC_ErrorCallback
08004610 g     F .text	00000040 oc_allocate_mbuf
0800258c g     F .text	00000158 _ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hdc7682df28e73d00E
08006076 g     F .text	0000003e os_mqueue_put
08003e58 g     F .text	00000028 init_sensor_coap
080064e0 g     F .text	00000038 os_msys_register
200034b8 g     O .bss	00000004 g_os_idle_ctr
0800190c g     F .text	00000066 _ZN6mynewt3sys7console10print_strn17h642e26ec24b7f07fE
0800aa88 g     F .text	0000003c flash_area_open
08001188  w    F .text	00000002 SPI2_IRQHandler
08003eb4 g     F .text	00000028 json_rep_reset
200030a4 g     O .bss	00000100 rx_buf
200033b0 g     O .bss	00000010 root_map
08001f54 g     F .text	0000003a _ZN4core9panicking5panic17h53ca63c6ac6312f8E
0800704a g     F .text	00000010 memset
08003702 g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$usize$GT$3fmt17h562f60f4fbcc2e1dE
08001188  w    F .text	00000002 MemManage_Handler
08001020 g       .text	00000000 __isr_vector
080037d8 g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u32$GT$3fmt17hc1bd8b99f165c287E
0800163e g     F .text	000000de main
08001fce g     F .text	00000030 _ZN4core9panicking9panic_fmt17h6b4d8e87b0965449E
08003d04 g     F .text	0000003c console_out_nolock
0800a110 g     F .text	0000000e bc95g_default_cfg
0800aa04 g     F .text	00000078 temp_stm32_create
080051b4 g     F .text	00000020 json_encode_array_start
08003a80 g     F .text	0000000a _ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17heb4d046d241d78d0E
08001b50 g     F .text	00000010 _ZN6mynewt6kernel2os15eventq_dflt_get17hb17cddfc29115d4fE
08001908 g     F .text	00000004 _ZN6mynewt3sys7console5print17h578959f818f159a0E
080077e8 g     F .text	00000012 rust_sysinit
08004dd4 g     F .text	0000001c oc_send_buffer
08004ecc g     F .text	0000000c sysinit_end
0800ab94 g     F .text	00000002 modlog_init
08006d9a g     F .text	00000046 SVC_Handler
0800a80a g     F .text	00000040 _ZN14BufferedSerial4initEPcmS0_mPKc
200033d0 g     O .bss	00000020 oc_transports
080097b8 g     F .text	0000003c HAL_RCC_GetClockConfig
0800b1f8 g     F .text	00000044 hal_flash_read
080041a4 g     F .text	00000018 start_server_transport
0800b98c g     F .text	000000e8 HAL_RCCEx_GetPeriphCLKFreq
08005fe0 g     F .text	00000008 os_eventq_dflt_get
080087a8 g     F .text	0000001c hal_timer_read
0800aa7c g     F .text	00000002 oc_register_gatt
08005f12 g     F .text	00000076 os_eventq_get
08007a5c g     F .text	00000026 temp_stm32_config
0800a84e g     F .text	0000000c _ZN14BufferedSerial8readableEv
08006140 g     F .text	00000012 os_mbuf_len
08001ffe g     F .text	000001e8 _ZN4core5slice6memchr6memchr17h94d07a4704a27026E
08006d78 g     F .text	00000006 os_time_ms_to_ticks
2000332d g     O .bss	00000001 g_silence_console
08001188  w    F .text	00000002 DMA1_Channel5_IRQHandler
08005cf4 g     F .text	00000030 os_callout_wakeup_ticks
08001188  w    F .text	00000002 EXTI4_IRQHandler
08005490 g     F .text	00000016 sensor_lock
0800a494 g     F .text	00000030 _log
08001188  w    F .text	00000002 USB_LP_CAN1_RX0_IRQHandler
2000353c g     O .bss	00000004 flash_map_entries
0800625c g     F .text	00000096 os_mbuf_adj
080038ae g     F .text	00000068 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17h1aa219e6cfd94b25E
08001020 g       .imghdr	00000000 __text
0800309e g     F .text	00000008 _ZN4core3fmt9Formatter15debug_lower_hex17h6ead2f28bb05b574E
0800aca0 g     F .text	00000080 mfg_seek_next
08007078 g     F .text	00000014 strcmp
080053b0 g     F .text	00000038 sensor_mgr_find_next
08006888 g     F .text	0000000c os_sched_get_current_task
08003d44 g     F .text	0000001c console_write
08006e48 g     F .text	00000010 lrand48
08005230 g     F .text	0000001c hal_bsp_hw_id
0800a954 g     F .text	0000000a _ZN14BufferedSerial6attachEPFvPvES0_i
0800118c g     F .text	00000040 SystemInit
08005d2c g     F .text	00000006 os_cputime_get32
0800a564 g     F .text	00000050 _ZN8ATParser5vsendEPKcSt9__va_list
08005fa2 g     F .text	0000003e os_eventq_remove
080051b0 g     F .text	00000004 json_encode_array_name
08004eec g     F .text	00000002 _fini
0800433c g     F .text	0000001e sensor_network_do_post
08006544 g     F .text	00000018 os_msys_num_free
08001188  w    F .text	00000002 USB_HP_CAN1_TX_IRQHandler
0800705a g     F .text	0000001e sprintf
0800a980 g     F .text	00000016 _ZN14BufferedSerial4putcEi
080068a0 g     F .text	00000024 os_sched
08004df0 g     F .text	00000050 oc_send_multicast_message
08008890 g     F .text	0000003c hal_uart_start_rx
08006670 g     F .text	000000dc os_mutex_pend
00000000 g       .svc_table	00000000 SVC_Table
08001188  w    F .text	00000002 DMA1_Channel3_IRQHandler
200034fc g     O .bss	00000010 stm32_tmr0
08004ef0 g     F .text	0000003c json_encode_object_start
08008520 g     F .text	00000004 HAL_InitTick
080049b8 g     F .text	0000035e coap_serialize_message
20005000 g       .bss	00000000 __StackTop
08002dba g     F .text	000002e4 _ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE
08006030 g     F .text	00000020 os_mqueue_init
08001188  w    F .text	00000002 TIM1_UP_IRQHandler
080036a4 g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u8$GT$3fmt17h1d24bfddebe6efa8E
08003bf8 g     F .text	00000058 console_flush
200002ec g     O .bss	00000004 oc_content_format
0800a9e8  w    F .text	0000000e _ZN8MyBufferIcE5clearEv
080037d8 g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hc44988ae29d24532E
08001188  w    F .text	00000002 WWDG_IRQHandler
08007d22 g     F .text	0000007c tc_hmac_set_key
0800a996 g     F .text	00000024 _ZN14BufferedSerial5rxIrqEh
0800a3e8 g     F .text	00000024 init_bc95g_server
2000342c g     O .bss	00000020 st_up_osco
08008034 g     F .text	00000058 tc_sha256_update
08005ca0 g     F .text	00000054 os_callout_tick
0800a40c g     F .text	00000088 bc95g_register_transport
0800e36c g     O .text	00000048 sysflash_map_dflt
080036a4 g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h33ff4d4021f61f61E
0800435a g     F .text	00000018 do_server_post
08001188  w    F .text	00000002 TIM2_IRQHandler
0800112c g       .text	00000000 __isr_vector_end
08005b88 g     F .text	0000001a os_start
0800a7c6 g     F .text	0000001a _ZN8ATParser4sendEPKcz
08007ce4 g     F .text	00000004 _set
08008928 g     F .text	00000298 hal_uart_config
08003646 g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u8$GT$3fmt17he275dc913fe9b8e5E
08005580 g     F .text	0000002a sensor_mgr_register
08004064 g     F .text	00000098 do_sensor_post
0800b4f4 g     F .text	00000070 ADC_Enable
08001188  w    F .text	00000002 TIM1_BRK_IRQHandler
0800a4ea g     F .text	00000006 _ZN8ATParser4putcEc
20005000 g       .imghdr	00000000 _estack
08007740 g     F .text	0000001c json_helper_object_array_start_item
08006376 g     F .text	00000038 os_mbuf_concat
08001188  w    F .text	00000002 EXTI1_IRQHandler
0800ada0 g     F .text	00000010 mfg_open
20000154 g     O .data	00000008 g_os_run_list
20000204 g       .data	00000000 _edata
080011cc g     F .text	00000028 NVIC_Relocate
0800aa7e g     F .text	00000002 oc_register_ip4
08005220 g     F .text	0000000a cbor_encoder_init
08007ab4 g     F .text	00000052 sysinit_app
080053a4 g     F .text	0000000c sensor_mgr_unlock
20000a24 g     O .bss	00000004 os_flags
08004f2c g     F .text	00000054 json_encode_object_key
08004778 g     F .text	0000002c oc_ri_mem_init
08008dbc g     F .text	00000024 HAL_FLASH_Unlock
0800579c g     F .text	00000006 os_arch_restore_sr
08004f80 g     F .text	00000064 json_encode_object_entry
080078e4 g     F .text	0000006c temp_stm32_init
20005000 g       *ABS*	00000000 __StackLimit
200034bc g     O .bss	00000004 g_os_started
08005e6a g     F .text	00000030 os_dev_close
200030a0 g     O .bss	00000004 debug_bc95g
08001188  w    F .text	00000002 USART2_IRQHandler
08001a88 g     F .text	00000002 _ZN75_$LT$str$u20$as$u20$mynewt..encoding..coap_context..ToBytesOptionalNull$GT$21to_bytes_optional_nul17h04bf219ed69c9cdbE
080037d8 g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$usize$GT$3fmt17h27565ff90d14f5eeE
080041bc g     F .text	00000078 sensor_network_register_transport
080092a4 g     F .text	00000318 HAL_RCC_OscConfig
0800470c g     F .text	00000024 oc_rep_init
08001f44 g     F .text	00000004 _ZN4core5panic9PanicInfo8location17h5226165d8771f8a2E
0800197c g     F .text	0000009c _ZN6mynewt8encoding12coap_context11CoapContext20json_set_text_string17hb1ac2c758b431170E
08001020 g     O .text	00000000 g_pfnVectors
08002b40 g     F .text	00000248 _ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E
0800b384 g     F .text	0000004e ADC_DMAConvCplt
08005190 g     F .text	00000020 json_encode_object_finish
08006126 g     F .text	0000001a os_mbuf_free_chain
200033c0 g     O .bss	00000010 g_encoder
0800655c g     F .text	00000060 os_msys_init
08001188  w    F .text	00000002 I2C2_ER_IRQHandler
08001188  w    F .text	00000002 DMA1_Channel2_IRQHandler
08006c90 g     F .text	0000000c os_time_get
20003450 g     O .bss	00000018 sensor_base_ts
08005298 g     F .text	0000002c sensor_mgr_match_bytype
08003edc g     F .text	00000038 json_rep_new
080060e8 g     F .text	0000002e os_mbuf_get_pkthdr
0800bee4  w    F .text	00000002 .hidden __aeabi_idiv0
08009864 g     F .text	00000018 TIM_CCxChannelCmd
08001188  w    F .text	00000002 CAN1_SCE_IRQHandler
0800b3d2  w    F .text	00000002 HAL_ADC_ConvHalfCpltCallback
08001188  w    F .text	00000002 FLASH_IRQHandler
08003e80 g     F .text	00000034 init_sensor_post
08006b60 g     F .text	000000e4 os_task_init
08003702 g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u32$GT$3fmt17hc8816b6e2fbd78aaE
08001188  w    F .text	00000002 BusFault_Handler
08001188  w    F .text	00000002 USART1_IRQHandler
08001c16 g     F .text	000000b6 _ZN6mynewt2hw6sensor8bindings16set_poll_rate_ms17hcde389472a355443E
0800709c g     F .text	00000010 strlen
08005d54 g     F .text	00000088 os_dev_create
08006460 g     F .text	0000001e os_memblock_put_from_cb
08005eac g     F .text	00000010 os_eventq_init
08006c9c g     F .text	00000078 os_time_advance
080046d8 g     F .text	00000010 oc_rep_reset
08006a1c g     F .text	00000024 os_sched_resort
08007db8 g     F .text	0000000c tc_hmac_update
0800b1d4 g     F .text	00000024 hal_flash_init
08001188  w    F .text	00000002 I2C1_ER_IRQHandler
0800b3de g     F .text	0000001a ADC_DMAError
080055aa g     F .text	0000001a sensor_init
0800a4c4 g     F .text	00000026 _ZN8ATParser4initER14BufferedSerialPciPKcib
0800821c g     F .text	00000022 adc_chan_config
2000350c g     O .bss	0000000c g_wdt_cfg
08005ddc g     F .text	00000028 os_dev_initialize_all
08001908 g     F .text	00000004 _ZN6mynewt3sys7console6buffer17h2c2282a002afa912E
08007950 g     F .text	0000008c temp_stm32_get_raw_temperature
08003bc4 g     F .text	00000026 _ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i64$GT$3fmt17h97d3cc39ae689800E
0800a5b4 g     F .text	000001f8 _ZN8ATParser5vrecvEPKcSt9__va_list
2000015c g     O .data	00000008 g_os_sleep_list
08007574 g     F .text	00000058 jrand48
08008178 g     F .text	000000a4 hal_bsp_init
08005ba4 g     F .text	00000030 os_pkg_init
0800a11e g     F .text	00000004 bc95g_config
08008d08 g     F .text	00000034 hal_gpio_init_stm
08007dc4 g     F .text	00000050 tc_hmac_final
08006780 g     F .text	0000000e os_sanity_check_init
0800e3dc g       *ABS*	00000000 __ecoredata
08001862 g     F .text	00000002 _ZN6mynewt2hw6sensor10as_untyped17hc683efc51e7df2deE
08008bc0 g     F .text	0000001c hal_uart_init
20000208 g     O .bss	00000040 _ZN6mynewt8encoding12coap_context12COAP_CONTEXT17h5e91d8ef2e33c9a1E
08001188  w    F .text	00000002 USBWakeUp_IRQHandler
08007500 g     F .text	00000004 vfprintf
0800b744 g     F .text	00000044 ADC_ConversionStop_Disable
0800aa84 g     F .text	00000002 oc_register_serial
0800a4f0 g     F .text	00000008 _ZN8ATParser5fgetcEv
0800a84a g     F .text	00000004 _ZN14BufferedSerial9configureEi
08006fbc g     F .text	0000002c free
0800b382  w    F .text	00000002 HAL_ADC_ConvCpltCallback
0800b37c g     F .text	00000006 HAL_ADC_GetValue
0800aa82 g     F .text	00000002 oc_register_lora



Disassembly of section .text:

08001020 <__isr_vector>:
 8001020:	20005000 	.word	0x20005000
 8001024:	0800112d 	.word	0x0800112d
 8001028:	08001189 	.word	0x08001189
 800102c:	08001189 	.word	0x08001189
 8001030:	08001189 	.word	0x08001189
 8001034:	08001189 	.word	0x08001189
 8001038:	08001189 	.word	0x08001189
	...
 800104c:	08006d9b 	.word	0x08006d9b
 8001050:	08001189 	.word	0x08001189
 8001054:	00000000 	.word	0x00000000
 8001058:	08006de1 	.word	0x08006de1
 800105c:	08006e0b 	.word	0x08006e0b
 8001060:	08001189 	.word	0x08001189
 8001064:	08001189 	.word	0x08001189
 8001068:	08001189 	.word	0x08001189
 800106c:	08001189 	.word	0x08001189
 8001070:	08001189 	.word	0x08001189
 8001074:	08001189 	.word	0x08001189
 8001078:	08001189 	.word	0x08001189
 800107c:	08001189 	.word	0x08001189
 8001080:	08001189 	.word	0x08001189
 8001084:	08001189 	.word	0x08001189
 8001088:	08001189 	.word	0x08001189
 800108c:	08001189 	.word	0x08001189
 8001090:	08001189 	.word	0x08001189
 8001094:	08001189 	.word	0x08001189
 8001098:	08001189 	.word	0x08001189
 800109c:	08001189 	.word	0x08001189
 80010a0:	08001189 	.word	0x08001189
 80010a4:	08001189 	.word	0x08001189
 80010a8:	08001189 	.word	0x08001189
 80010ac:	08001189 	.word	0x08001189
 80010b0:	08001189 	.word	0x08001189
 80010b4:	08001189 	.word	0x08001189
 80010b8:	08001189 	.word	0x08001189
 80010bc:	08001189 	.word	0x08001189
 80010c0:	08001189 	.word	0x08001189
 80010c4:	08001189 	.word	0x08001189
 80010c8:	08001189 	.word	0x08001189
 80010cc:	08001189 	.word	0x08001189
 80010d0:	08001189 	.word	0x08001189
 80010d4:	08001189 	.word	0x08001189
 80010d8:	08001189 	.word	0x08001189
 80010dc:	08001189 	.word	0x08001189
 80010e0:	08001189 	.word	0x08001189
 80010e4:	08001189 	.word	0x08001189
 80010e8:	08001189 	.word	0x08001189
 80010ec:	08001189 	.word	0x08001189
 80010f0:	08001189 	.word	0x08001189
 80010f4:	08001189 	.word	0x08001189
 80010f8:	08001189 	.word	0x08001189
 80010fc:	08001189 	.word	0x08001189
 8001100:	08001189 	.word	0x08001189
 8001104:	08001189 	.word	0x08001189
 8001108:	08001189 	.word	0x08001189
	...
 8001128:	f108f85f 	.word	0xf108f85f

0800112c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800112c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800112e:	e003      	b.n	8001138 <LoopCopyDataInit>

08001130 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001130:	4b0e      	ldr	r3, [pc, #56]	; (800116c <LoopFillZeroCoreBss+0x10>)
  ldr r3, [r3, r1]
 8001132:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001134:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001136:	3104      	adds	r1, #4

08001138 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001138:	480d      	ldr	r0, [pc, #52]	; (8001170 <LoopFillZeroCoreBss+0x14>)
  ldr r3, =_edata
 800113a:	4b0e      	ldr	r3, [pc, #56]	; (8001174 <LoopFillZeroCoreBss+0x18>)
  adds r2, r0, r1
 800113c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800113e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001140:	d3f6      	bcc.n	8001130 <CopyDataInit>

  ldr r2, =_sbss
 8001142:	4a0d      	ldr	r2, [pc, #52]	; (8001178 <LoopFillZeroCoreBss+0x1c>)
  b LoopFillZerobss
 8001144:	e002      	b.n	800114c <LoopFillZerobss>

08001146 <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001146:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001148:	f842 3b04 	str.w	r3, [r2], #4

0800114c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800114c:	4b0b      	ldr	r3, [pc, #44]	; (800117c <LoopFillZeroCoreBss+0x20>)
  cmp r2, r3
 800114e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001150:	d3f9      	bcc.n	8001146 <FillZerobss>

/* Mynewt specific corebss clearing. */
  ldr   r2, =__corebss_start__
 8001152:	4a0b      	ldr	r2, [pc, #44]	; (8001180 <LoopFillZeroCoreBss+0x24>)
  b     LoopFillZeroCoreBss
 8001154:	e002      	b.n	800115c <LoopFillZeroCoreBss>

08001156 <FillZeroCoreBss>:

/* Zero fill the bss segment. */
FillZeroCoreBss:
  movs  r3, #0
 8001156:	2300      	movs	r3, #0
  str   r3, [r2], #4
 8001158:	f842 3b04 	str.w	r3, [r2], #4

0800115c <LoopFillZeroCoreBss>:

LoopFillZeroCoreBss:
  ldr   r3, =__corebss_end__
 800115c:	4b09      	ldr	r3, [pc, #36]	; (8001184 <LoopFillZeroCoreBss+0x28>)
  cmp   r2, r3
 800115e:	429a      	cmp	r2, r3
  bcc   FillZeroCoreBss
 8001160:	d3f9      	bcc.n	8001156 <FillZeroCoreBss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001162:	f000 f813 	bl	800118c <SystemInit>
/* Call libc's entry point.*/
  bl  _start
 8001166:	f000 f845 	bl	80011f4 <_start>
 800116a:	0000      	.short	0x0000
  ldr r3, =_sidata
 800116c:	0800e3dc 	.word	0x0800e3dc
  ldr r0, =_sdata
 8001170:	20000110 	.word	0x20000110
  ldr r3, =_edata
 8001174:	20000204 	.word	0x20000204
  ldr r2, =_sbss
 8001178:	20000208 	.word	0x20000208
  ldr r3, = _ebss
 800117c:	20003540 	.word	0x20003540
  ldr   r2, =__corebss_start__
 8001180:	20000204 	.word	0x20000204
  ldr   r3, =__corebss_end__
 8001184:	20000204 	.word	0x20000204

08001188 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001188:	e7fe      	b.n	8001188 <ADC1_2_IRQHandler>
	...

0800118c <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800118c:	4b0d      	ldr	r3, [pc, #52]	; (80011c4 <SystemInit+0x38>)
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	f042 0201 	orr.w	r2, r2, #1
 8001194:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001196:	6859      	ldr	r1, [r3, #4]
 8001198:	4a0b      	ldr	r2, [pc, #44]	; (80011c8 <SystemInit+0x3c>)
 800119a:	400a      	ands	r2, r1
 800119c:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80011a4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80011a8:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80011b0:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80011b2:	685a      	ldr	r2, [r3, #4]
 80011b4:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80011b8:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80011ba:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80011be:	609a      	str	r2, [r3, #8]
    SystemInit_ExtMemCtl(); 
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Relocate the vector table */
  NVIC_Relocate();
 80011c0:	f000 b804 	b.w	80011cc <NVIC_Relocate>
 80011c4:	40021000 	.word	0x40021000
 80011c8:	f8ff0000 	.word	0xf8ff0000

080011cc <NVIC_Relocate>:
     * designated in the linker script.
     */
    current_location = (uint32_t *)&__isr_vector;
    new_location = (uint32_t *)&__vector_tbl_reloc__;

    if (new_location != current_location) {
 80011cc:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <NVIC_Relocate+0x1c>)
 80011ce:	4907      	ldr	r1, [pc, #28]	; (80011ec <NVIC_Relocate+0x20>)
 80011d0:	428b      	cmp	r3, r1
 80011d2:	d005      	beq.n	80011e0 <NVIC_Relocate+0x14>
 80011d4:	2200      	movs	r2, #0
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
            new_location[i] = current_location[i];
 80011d6:	5888      	ldr	r0, [r1, r2]
 80011d8:	5098      	str	r0, [r3, r2]
 80011da:	3204      	adds	r2, #4
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
 80011dc:	2aec      	cmp	r2, #236	; 0xec
 80011de:	d1fa      	bne.n	80011d6 <NVIC_Relocate+0xa>
    }

    /* Set VTOR except for M0 */
#if ((__CORTEX_M == 0) && (__VTOR_PRESENT == 0))
#else
    SCB->VTOR = (uint32_t)&__vector_tbl_reloc__;
 80011e0:	4a03      	ldr	r2, [pc, #12]	; (80011f0 <NVIC_Relocate+0x24>)
 80011e2:	6093      	str	r3, [r2, #8]
#endif
}
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	20000000 	.word	0x20000000
 80011ec:	08001020 	.word	0x08001020
 80011f0:	e000ed00 	.word	0xe000ed00

080011f4 <_start>:

/*
 * Rudimentary startup function.
 */
void _start(void)
{
 80011f4:	b508      	push	{r3, lr}
    int rc;

    rc = main(0, NULL);
    exit(rc);
#else
    os_init(main);
 80011f6:	4803      	ldr	r0, [pc, #12]	; (8001204 <_start+0x10>)
 80011f8:	f004 fc7e 	bl	8005af8 <os_init>
    os_start();
#endif
}
 80011fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    os_start();
 8001200:	f004 bcc2 	b.w	8005b88 <os_start>
 8001204:	0800163f 	.word	0x0800163f

08001208 <_init>:

void
_init(void)
{
}
 8001208:	4770      	bx	lr

0800120a <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h5e4cd90c2150b615E>:
 800120a:	b5b0      	push	{r4, r5, r7, lr}
 800120c:	6805      	ldr	r5, [r0, #0]
 800120e:	4608      	mov	r0, r1
 8001210:	460c      	mov	r4, r1
 8001212:	f001 ff44 	bl	800309e <_ZN4core3fmt9Formatter15debug_lower_hex17h6ead2f28bb05b574E>
 8001216:	b128      	cbz	r0, 8001224 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h5e4cd90c2150b615E+0x1a>
 8001218:	4628      	mov	r0, r5
 800121a:	4621      	mov	r1, r4
 800121c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001220:	f002 ba11 	b.w	8003646 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17heed14ddcd875f85bE>
 8001224:	4620      	mov	r0, r4
 8001226:	f001 ff3e 	bl	80030a6 <_ZN4core3fmt9Formatter15debug_upper_hex17hd6d96e6aa5cb78d8E>
 800122a:	b128      	cbz	r0, 8001238 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h5e4cd90c2150b615E+0x2e>
 800122c:	4628      	mov	r0, r5
 800122e:	4621      	mov	r1, r4
 8001230:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001234:	f002 ba36 	b.w	80036a4 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h33ff4d4021f61f61E>
 8001238:	4628      	mov	r0, r5
 800123a:	4621      	mov	r1, r4
 800123c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001240:	f002 bc1e 	b.w	8003a80 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17heb4d046d241d78d0E>

08001244 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h61ad4c3b3d847e36E>:
 8001244:	b5b0      	push	{r4, r5, r7, lr}
 8001246:	6805      	ldr	r5, [r0, #0]
 8001248:	4608      	mov	r0, r1
 800124a:	460c      	mov	r4, r1
 800124c:	f001 ff27 	bl	800309e <_ZN4core3fmt9Formatter15debug_lower_hex17h6ead2f28bb05b574E>
 8001250:	b128      	cbz	r0, 800125e <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h61ad4c3b3d847e36E+0x1a>
 8001252:	4628      	mov	r0, r5
 8001254:	4621      	mov	r1, r4
 8001256:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800125a:	f002 ba52 	b.w	8003702 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hb2119167a92723afE>
 800125e:	4620      	mov	r0, r4
 8001260:	f001 ff21 	bl	80030a6 <_ZN4core3fmt9Formatter15debug_upper_hex17hd6d96e6aa5cb78d8E>
 8001264:	b128      	cbz	r0, 8001272 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h61ad4c3b3d847e36E+0x2e>
 8001266:	4628      	mov	r0, r5
 8001268:	4621      	mov	r1, r4
 800126a:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800126e:	f002 bab3 	b.w	80037d8 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hc44988ae29d24532E>
 8001272:	4628      	mov	r0, r5
 8001274:	4621      	mov	r1, r4
 8001276:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800127a:	f002 bc06 	b.w	8003a8a <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17h33b3bbdbc74b88baE>

0800127e <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h422d517eccc73a15E>:
 800127e:	460a      	mov	r2, r1
 8001280:	e9d0 3100 	ldrd	r3, r1, [r0]
 8001284:	4618      	mov	r0, r3
 8001286:	f001 bf25 	b.w	80030d4 <_ZN42_$LT$str$u20$as$u20$core..fmt..Display$GT$3fmt17h3a34938e29ce59dcE>

0800128a <_ZN4core6result13unwrap_failed17h4b64b7a78ab076d1E>:
 800128a:	b08e      	sub	sp, #56	; 0x38
 800128c:	2208      	movs	r2, #8
 800128e:	e9cd 0201 	strd	r0, r2, [sp, #4]
 8001292:	f641 50c5 	movw	r0, #7621	; 0x1dc5
 8001296:	f6c0 0000 	movt	r0, #2048	; 0x800
 800129a:	9103      	str	r1, [sp, #12]
 800129c:	900d      	str	r0, [sp, #52]	; 0x34
 800129e:	a803      	add	r0, sp, #12
 80012a0:	900c      	str	r0, [sp, #48]	; 0x30
 80012a2:	f241 207f 	movw	r0, #4735	; 0x127f
 80012a6:	f6c0 0000 	movt	r0, #2048	; 0x800
 80012aa:	a90a      	add	r1, sp, #40	; 0x28
 80012ac:	900b      	str	r0, [sp, #44]	; 0x2c
 80012ae:	a801      	add	r0, sp, #4
 80012b0:	900a      	str	r0, [sp, #40]	; 0x28
 80012b2:	2002      	movs	r0, #2
 80012b4:	9009      	str	r0, [sp, #36]	; 0x24
 80012b6:	9108      	str	r1, [sp, #32]
 80012b8:	2100      	movs	r1, #0
 80012ba:	9107      	str	r1, [sp, #28]
 80012bc:	e9cd 0105 	strd	r0, r1, [sp, #20]
 80012c0:	f64b 7008 	movw	r0, #48904	; 0xbf08
 80012c4:	f6c0 0000 	movt	r0, #2048	; 0x800
 80012c8:	f64b 7130 	movw	r1, #48944	; 0xbf30
 80012cc:	9004      	str	r0, [sp, #16]
 80012ce:	a804      	add	r0, sp, #16
 80012d0:	f6c0 0100 	movt	r1, #2048	; 0x800
 80012d4:	f000 fe7b 	bl	8001fce <_ZN4core9panicking9panic_fmt17h6b4d8e87b0965449E>
 80012d8:	defe      	udf	#254	; 0xfe

080012da <_ZN3app10app_sensor18handle_sensor_data17hce4161ccff29c081E>:
    Ok(())
}

///  This listener function is called every 10 seconds by Mynewt to handle the polled sensor data.
///  Return 0 if we have handled the sensor data successfully.
extern fn handle_sensor_data(sensor: sensor_ptr, _arg: sensor_arg, 
 80012da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012de:	b099      	sub	sp, #100	; 0x64
 80012e0:	4605      	mov	r5, r0
    sensor_data: sensor_data_ptr, sensor_type: sensor_type_t) -> MynewtError {
    console::print("Rust handle_sensor_data\n");
 80012e2:	f64b 70a8 	movw	r0, #49064	; 0xbfa8
 80012e6:	f6c0 0000 	movt	r0, #2048	; 0x800
 80012ea:	2118      	movs	r1, #24
 80012ec:	4614      	mov	r4, r2
 80012ee:	f000 fb0b 	bl	8001908 <_ZN6mynewt3sys7console5print17h578959f818f159a0E>

    //  Check that the temperature data is valid.
    if sensor_data.is_null() { return MynewtError::SYS_EINVAL; }  //  Exit if data is missing
 80012f2:	2c00      	cmp	r4, #0
 80012f4:	d04d      	beq.n	8001392 <_ZN3app10app_sensor18handle_sensor_data17hce4161ccff29c081E+0xb8>
    assert!(!sensor.is_null(), "null sensor");
 80012f6:	2d00      	cmp	r5, #0
 80012f8:	f000 8123 	beq.w	8001542 <_ZN3app10app_sensor18handle_sensor_data17hce4161ccff29c081E+0x268>

///  Convert the raw temperature value received from Mynewt into a `SensorValue` for transmission, which includes the sensor data key `t`. 
///  `sensor_type` indicates the type of data in `sensor_data`.
#[allow(non_snake_case, unused_variables)]
fn convert_sensor_data(sensor_data: sensor_data_ptr, sensor_type: sensor_type_t) -> SensorValue {
    console::print("TMP listener got rawtmp\n");
 80012fc:	f64b 70fa 	movw	r0, #49146	; 0xbffa
 8001300:	2118      	movs	r1, #24
 8001302:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001306:	f000 faff 	bl	8001908 <_ZN6mynewt3sys7console5print17h578959f818f159a0E>
 800130a:	ad01      	add	r5, sp, #4
 800130c:	2600      	movs	r6, #0
        key: TEMP_SENSOR_KEY,  //  Sensor data key is `t`
        val: match sensor_type {
            SENSOR_TYPE_AMBIENT_TEMPERATURE_RAW => {  //  If this is raw temperature...
                //  Interpret the sensor data as a `sensor_temp_raw_data` struct that contains raw temp.
                let mut rawtempdata = fill_zero!(sensor_temp_raw_data);
                let rc = unsafe { sensor::get_temp_raw_data(sensor_data, &mut rawtempdata) };
 800130e:	4620      	mov	r0, r4
                let mut rawtempdata = fill_zero!(sensor_temp_raw_data);
 8001310:	f88d 6008 	strb.w	r6, [sp, #8]
                let rc = unsafe { sensor::get_temp_raw_data(sensor_data, &mut rawtempdata) };
 8001314:	4629      	mov	r1, r5
                let mut rawtempdata = fill_zero!(sensor_temp_raw_data);
 8001316:	9601      	str	r6, [sp, #4]
                let rc = unsafe { sensor::get_temp_raw_data(sensor_data, &mut rawtempdata) };
 8001318:	f006 fa6f 	bl	80077fa <get_temp_raw_data>
                assert_eq!(rc, 0, "rawtmp fail");
 800131c:	2800      	cmp	r0, #0
                let rc = unsafe { sensor::get_temp_raw_data(sensor_data, &mut rawtempdata) };
 800131e:	9003      	str	r0, [sp, #12]
                assert_eq!(rc, 0, "rawtmp fail");
 8001320:	f040 8116 	bne.w	8001550 <_ZN3app10app_sensor18handle_sensor_data17hce4161ccff29c081E+0x276>
                //  Check that the raw temperature data is valid.
                assert_ne!(rawtempdata.strd_temp_raw_is_valid, 0, "bad rawtmp");                
 8001324:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8001328:	2800      	cmp	r0, #0
 800132a:	f000 814c 	beq.w	80015c6 <_ZN3app10app_sensor18handle_sensor_data17hce4161ccff29c081E+0x2ec>
///   {"key":"device", "value":"0102030405060708090a0b0c0d0e0f10"},
///   {"key":"t",      "value":1715}
/// ]}
/// ```
pub fn send_sensor_data(val: &SensorValue) -> MynewtResult<()>  {  //  Returns an error code upon error.
    console::print("Rust send_sensor_data\n");
 800132e:	f24c 1001 	movw	r0, #49409	; 0xc101
 8001332:	2116      	movs	r1, #22
 8001334:	f6c0 0000 	movt	r0, #2048	; 0x800
                //  Raw temperature data is valid.  Return it.
                SensorValueType::Uint(rawtempdata.strd_temp_raw)  //  Raw Temperature in integer (0 to 4095)
 8001338:	9c01      	ldr	r4, [sp, #4]
 800133a:	f000 fae5 	bl	8001908 <_ZN6mynewt3sys7console5print17h578959f818f159a0E>
 800133e:	a812      	add	r0, sp, #72	; 0x48
    //  Get a randomly-generated device ID that changes each time we restart the device.
    let device_id = sensor_network::get_device_id() ? ;
 8001340:	f000 fd35 	bl	8001dae <_ZN6mynewt4libs14sensor_network13get_device_id17hd4a8ff26286a906dE>
 8001344:	e9dd 1012 	ldrd	r1, r0, [sp, #72]	; 0x48
 8001348:	2901      	cmp	r1, #1
 800134a:	d015      	beq.n	8001378 <_ZN3app10app_sensor18handle_sensor_data17hce4161ccff29c081E+0x9e>
 800134c:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
 8001350:	ab04      	add	r3, sp, #16
 8001352:	ad12      	add	r5, sp, #72	; 0x48
 8001354:	c307      	stmia	r3!, {r0, r1, r2}

    //  Start composing the CoAP Server message with the sensor data in the payload.  This will 
    //  block other tasks from composing and posting CoAP messages (through a semaphore).
    //  We only have 1 memory buffer for composing CoAP messages so it needs to be locked.
    let rc = sensor_network::init_server_post( strn!(()) ) ? ;  //  `strn!(())` means use default CoAP URI in `syscfg.yml`
 8001356:	f24c 0194 	movw	r1, #49300	; 0xc094
 800135a:	f6c0 0100 	movt	r1, #2048	; 0x800
 800135e:	4628      	mov	r0, r5
 8001360:	2201      	movs	r2, #1
 8001362:	f000 fb99 	bl	8001a98 <_ZN6mynewt4Strn3new17h7a223ee4df5e1f9bE>
 8001366:	a80a      	add	r0, sp, #40	; 0x28
 8001368:	4629      	mov	r1, r5
 800136a:	f000 fcb6 	bl	8001cda <_ZN6mynewt4libs14sensor_network16init_server_post17hed16ed94721012abE>
 800136e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8001370:	b2c1      	uxtb	r1, r0
 8001372:	2901      	cmp	r1, #1
 8001374:	d112      	bne.n	800139c <_ZN3app10app_sensor18handle_sensor_data17hce4161ccff29c081E+0xc2>
 8001376:	980b      	ldr	r0, [sp, #44]	; 0x2c
    if let Err(err) = res {  //  `if let` will assign `err` to the error code inside `res`
 8001378:	3006      	adds	r0, #6
 800137a:	d106      	bne.n	800138a <_ZN3app10app_sensor18handle_sensor_data17hce4161ccff29c081E+0xb0>
            console::print("TMP network not ready\n");
 800137c:	f64b 70e4 	movw	r0, #49124	; 0xbfe4
 8001380:	2116      	movs	r1, #22
 8001382:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001386:	f000 fabf 	bl	8001908 <_ZN6mynewt3sys7console5print17h578959f818f159a0E>
 800138a:	2000      	movs	r0, #0
}
 800138c:	b019      	add	sp, #100	; 0x64
 800138e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001392:	f06f 0001 	mvn.w	r0, #1
 8001396:	b019      	add	sp, #100	; 0x64
 8001398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

    //  If network transport not ready, tell caller (Sensor Listener) to try again later.
    if !rc { return Err(MynewtError::SYS_EAGAIN); }
 800139c:	f410 4f7f 	tst.w	r0, #65280	; 0xff00
 80013a0:	d0ec      	beq.n	800137c <_ZN3app10app_sensor18handle_sensor_data17hce4161ccff29c081E+0xa2>
 80013a2:	a812      	add	r0, sp, #72	; 0x48

    //  Compose the CoAP Payload using the coap!() macro.
    //  Select @json or @cbor To encode CoAP Payload in JSON or CBOR format.
    let _payload = coap!( @json {        
 80013a4:	2132      	movs	r1, #50	; 0x32
 80013a6:	f000 fcf1 	bl	8001d8c <_ZN6mynewt4libs14sensor_network12prepare_post17h850eb70da8c09a26E>
 80013aa:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 80013ae:	2801      	cmp	r0, #1
 80013b0:	f000 80b2 	beq.w	8001518 <_ZN3app10app_sensor18handle_sensor_data17hce4161ccff29c081E+0x23e>
 80013b4:	f002 fea2 	bl	80040fc <json_rep_start_root_object>
 80013b8:	f240 2a08 	movw	sl, #520	; 0x208
 80013bc:	f2c2 0a00 	movt	sl, #8192	; 0x2000
 80013c0:	4650      	mov	r0, sl
 80013c2:	f000 fb60 	bl	8001a86 <_ZN6mynewt8encoding12coap_context11CoapContext11to_void_ptr17hb3808f319694c4fdE>
 80013c6:	f24c 1117 	movw	r1, #49431	; 0xc117
 80013ca:	4607      	mov	r7, r0
 80013cc:	f6c0 0100 	movt	r1, #2048	; 0x800
 80013d0:	4650      	mov	r0, sl
 80013d2:	2207      	movs	r2, #7
 80013d4:	f000 fb20 	bl	8001a18 <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17h0f82664be59056e7E>
 80013d8:	4601      	mov	r1, r0
 80013da:	4638      	mov	r0, r7
 80013dc:	f006 f990 	bl	8007700 <json_helper_set_array>
 80013e0:	f24c 191e 	movw	r9, #49438	; 0xc11e
 80013e4:	4650      	mov	r0, sl
 80013e6:	f6c0 0900 	movt	r9, #2048	; 0x800
 80013ea:	220d      	movs	r2, #13
 80013ec:	4649      	mov	r1, r9
 80013ee:	f000 fb13 	bl	8001a18 <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17h0f82664be59056e7E>
 80013f2:	f006 f9a5 	bl	8007740 <json_helper_object_array_start_item>
 80013f6:	ae0a      	add	r6, sp, #40	; 0x28
 80013f8:	f24c 0118 	movw	r1, #49176	; 0xc018
 80013fc:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001400:	2204      	movs	r2, #4
 8001402:	4630      	mov	r0, r6
 8001404:	f000 fb48 	bl	8001a98 <_ZN6mynewt4Strn3new17h7a223ee4df5e1f9bE>
 8001408:	af12      	add	r7, sp, #72	; 0x48
 800140a:	f24c 112b 	movw	r1, #49451	; 0xc12b
 800140e:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001412:	2207      	movs	r2, #7
 8001414:	4638      	mov	r0, r7
 8001416:	f000 fb3f 	bl	8001a98 <_ZN6mynewt4Strn3new17h7a223ee4df5e1f9bE>
 800141a:	4650      	mov	r0, sl
 800141c:	4631      	mov	r1, r6
 800141e:	463a      	mov	r2, r7
 8001420:	f000 faac 	bl	800197c <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_text_string17hb1ac2c758b431170E>
 8001424:	ae12      	add	r6, sp, #72	; 0x48
 8001426:	f24c 1132 	movw	r1, #49458	; 0xc132
 800142a:	f6c0 0100 	movt	r1, #2048	; 0x800
 800142e:	2206      	movs	r2, #6
 8001430:	4630      	mov	r0, r6
 8001432:	f000 fb31 	bl	8001a98 <_ZN6mynewt4Strn3new17h7a223ee4df5e1f9bE>
 8001436:	aa04      	add	r2, sp, #16
 8001438:	4650      	mov	r0, sl
 800143a:	4631      	mov	r1, r6
 800143c:	f000 fa9e 	bl	800197c <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_text_string17hb1ac2c758b431170E>
 8001440:	4650      	mov	r0, sl
 8001442:	4649      	mov	r1, r9
 8001444:	220d      	movs	r2, #13
 8001446:	f000 fae7 	bl	8001a18 <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17h0f82664be59056e7E>
 800144a:	f006 f987 	bl	800775c <json_helper_object_array_end_item>
 800144e:	4650      	mov	r0, sl
 8001450:	4649      	mov	r1, r9
 8001452:	220d      	movs	r2, #13
 8001454:	f000 fae0 	bl	8001a18 <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17h0f82664be59056e7E>
 8001458:	f006 f972 	bl	8007740 <json_helper_object_array_start_item>
 800145c:	f24c 1038 	movw	r0, #49464	; 0xc138
 8001460:	2103      	movs	r1, #3
 8001462:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001466:	f000 fb0f 	bl	8001a88 <_ZN75_$LT$str$u20$as$u20$mynewt..encoding..coap_context..ToBytesOptionalNull$GT$21to_bytes_optional_nul17h04bf219ed69c9cdbE>
 800146a:	4683      	mov	fp, r0
 800146c:	f24c 1000 	movw	r0, #49408	; 0xc100
 8001470:	460f      	mov	r7, r1
 8001472:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001476:	2101      	movs	r1, #1
 8001478:	f000 fb06 	bl	8001a88 <_ZN75_$LT$str$u20$as$u20$mynewt..encoding..coap_context..ToBytesOptionalNull$GT$21to_bytes_optional_nul17h04bf219ed69c9cdbE>
 800147c:	4605      	mov	r5, r0
 800147e:	4650      	mov	r0, sl
 8001480:	460e      	mov	r6, r1
 8001482:	f000 fb00 	bl	8001a86 <_ZN6mynewt8encoding12coap_context11CoapContext11to_void_ptr17hb3808f319694c4fdE>
 8001486:	4680      	mov	r8, r0
 8001488:	4650      	mov	r0, sl
 800148a:	4659      	mov	r1, fp
 800148c:	463a      	mov	r2, r7
 800148e:	f000 fac3 	bl	8001a18 <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17h0f82664be59056e7E>
 8001492:	4607      	mov	r7, r0
 8001494:	4650      	mov	r0, sl
 8001496:	4629      	mov	r1, r5
 8001498:	4632      	mov	r2, r6
 800149a:	f000 fad8 	bl	8001a4e <_ZN6mynewt8encoding12coap_context11CoapContext13value_to_cstr17h4eb8afb9652b8128E>
 800149e:	4602      	mov	r2, r0
 80014a0:	4640      	mov	r0, r8
 80014a2:	4639      	mov	r1, r7
 80014a4:	f006 f980 	bl	80077a8 <json_helper_set_text_string>
 80014a8:	f24c 103b 	movw	r0, #49467	; 0xc13b
 80014ac:	2105      	movs	r1, #5
 80014ae:	f6c0 0000 	movt	r0, #2048	; 0x800
 80014b2:	f000 fae9 	bl	8001a88 <_ZN75_$LT$str$u20$as$u20$mynewt..encoding..coap_context..ToBytesOptionalNull$GT$21to_bytes_optional_nul17h04bf219ed69c9cdbE>
 80014b6:	4605      	mov	r5, r0
 80014b8:	4650      	mov	r0, sl
 80014ba:	460e      	mov	r6, r1
 80014bc:	f000 fae3 	bl	8001a86 <_ZN6mynewt8encoding12coap_context11CoapContext11to_void_ptr17hb3808f319694c4fdE>
 80014c0:	4607      	mov	r7, r0
 80014c2:	4650      	mov	r0, sl
 80014c4:	4629      	mov	r1, r5
 80014c6:	4632      	mov	r2, r6
 80014c8:	f000 faa6 	bl	8001a18 <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17h0f82664be59056e7E>
 80014cc:	4601      	mov	r1, r0
 80014ce:	4638      	mov	r0, r7
 80014d0:	4622      	mov	r2, r4
 80014d2:	2300      	movs	r3, #0
 80014d4:	f006 f950 	bl	8007778 <json_helper_set_int>
 80014d8:	4650      	mov	r0, sl
 80014da:	4649      	mov	r1, r9
 80014dc:	220d      	movs	r2, #13
 80014de:	f000 fa9b 	bl	8001a18 <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17h0f82664be59056e7E>
 80014e2:	f006 f93b 	bl	800775c <json_helper_object_array_end_item>
 80014e6:	4650      	mov	r0, sl
 80014e8:	f000 facd 	bl	8001a86 <_ZN6mynewt8encoding12coap_context11CoapContext11to_void_ptr17hb3808f319694c4fdE>
 80014ec:	f24c 1117 	movw	r1, #49431	; 0xc117
 80014f0:	4604      	mov	r4, r0
 80014f2:	4650      	mov	r0, sl
 80014f4:	f6c0 0100 	movt	r1, #2048	; 0x800
 80014f8:	2207      	movs	r2, #7
 80014fa:	f000 fa8d 	bl	8001a18 <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17h0f82664be59056e7E>
 80014fe:	4601      	mov	r1, r0
 8001500:	4620      	mov	r0, r4
 8001502:	f006 f90f 	bl	8007724 <json_helper_close_array>
 8001506:	f002 fe07 	bl	8004118 <json_rep_end_root_object>
 800150a:	a812      	add	r0, sp, #72	; 0x48
    });

    //  Post the CoAP Server message to the CoAP Background Task for transmission.  After posting the
    //  message to the background task, we release a semaphore that unblocks other requests
    //  to compose and post CoAP messages.
    sensor_network::do_server_post() ? ;
 800150c:	f000 fc47 	bl	8001d9e <_ZN6mynewt4libs14sensor_network14do_server_post17h63b4208c05d74765E>
 8001510:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8001514:	2801      	cmp	r0, #1
 8001516:	d104      	bne.n	8001522 <_ZN3app10app_sensor18handle_sensor_data17hce4161ccff29c081E+0x248>
 8001518:	9813      	ldr	r0, [sp, #76]	; 0x4c
    if let Err(err) = res {  //  `if let` will assign `err` to the error code inside `res`
 800151a:	3006      	adds	r0, #6
 800151c:	f43f af2e 	beq.w	800137c <_ZN3app10app_sensor18handle_sensor_data17hce4161ccff29c081E+0xa2>
 8001520:	e733      	b.n	800138a <_ZN3app10app_sensor18handle_sensor_data17hce4161ccff29c081E+0xb0>

    //  Display the URL with the random device ID for viewing the sensor data.
    console::print("NET view your sensor at \nhttps://blue-pill-geolocate.appspot.com?device=");
 8001522:	f24c 1040 	movw	r0, #49472	; 0xc140
 8001526:	2148      	movs	r1, #72	; 0x48
 8001528:	f6c0 0000 	movt	r0, #2048	; 0x800
 800152c:	f000 f9ec 	bl	8001908 <_ZN6mynewt3sys7console5print17h578959f818f159a0E>
 8001530:	a804      	add	r0, sp, #16
    console::print_strn(&device_id); console::print("\n");
 8001532:	f000 f9eb 	bl	800190c <_ZN6mynewt3sys7console10print_strn17h642e26ec24b7f07fE>
 8001536:	f24c 1088 	movw	r0, #49544	; 0xc188
 800153a:	2101      	movs	r1, #1
 800153c:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001540:	e721      	b.n	8001386 <_ZN3app10app_sensor18handle_sensor_data17hce4161ccff29c081E+0xac>
    assert!(!sensor.is_null(), "null sensor");
 8001542:	f64b 70cc 	movw	r0, #49100	; 0xbfcc
 8001546:	f6c0 0000 	movt	r0, #2048	; 0x800
 800154a:	f000 fd03 	bl	8001f54 <_ZN4core9panicking5panic17h53ca63c6ac6312f8E>
 800154e:	defe      	udf	#254	; 0xfe
 8001550:	a803      	add	r0, sp, #12
                assert_eq!(rc, 0, "rawtmp fail");
 8001552:	9010      	str	r0, [sp, #64]	; 0x40
 8001554:	f24c 0014 	movw	r0, #49172	; 0xc014
 8001558:	9617      	str	r6, [sp, #92]	; 0x5c
 800155a:	f6c0 0000 	movt	r0, #2048	; 0x800
 800155e:	a911      	add	r1, sp, #68	; 0x44
 8001560:	9011      	str	r0, [sp, #68]	; 0x44
 8001562:	f64b 7004 	movw	r0, #48900	; 0xbf04
 8001566:	f6c0 0000 	movt	r0, #2048	; 0x800
 800156a:	9016      	str	r0, [sp, #88]	; 0x58
 800156c:	2001      	movs	r0, #1
 800156e:	e9cd 6614 	strd	r6, r6, [sp, #80]	; 0x50
 8001572:	9013      	str	r0, [sp, #76]	; 0x4c
 8001574:	f24c 007c 	movw	r0, #49276	; 0xc07c
 8001578:	f6c0 0000 	movt	r0, #2048	; 0x800
 800157c:	9012      	str	r0, [sp, #72]	; 0x48
 800157e:	f642 101f 	movw	r0, #10527	; 0x291f
 8001582:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001586:	900f      	str	r0, [sp, #60]	; 0x3c
 8001588:	a812      	add	r0, sp, #72	; 0x48
 800158a:	900e      	str	r0, [sp, #56]	; 0x38
 800158c:	f241 2045 	movw	r0, #4677	; 0x1245
 8001590:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001594:	900d      	str	r0, [sp, #52]	; 0x34
 8001596:	e9cd 010b 	strd	r0, r1, [sp, #44]	; 0x2c
 800159a:	a810      	add	r0, sp, #64	; 0x40
 800159c:	a90a      	add	r1, sp, #40	; 0x28
 800159e:	900a      	str	r0, [sp, #40]	; 0x28
 80015a0:	2003      	movs	r0, #3
 80015a2:	9009      	str	r0, [sp, #36]	; 0x24
 80015a4:	e9cd 6107 	strd	r6, r1, [sp, #28]
 80015a8:	f24c 0184 	movw	r1, #49284	; 0xc084
 80015ac:	e9cd 0605 	strd	r0, r6, [sp, #20]
 80015b0:	f24c 0058 	movw	r0, #49240	; 0xc058
 80015b4:	f6c0 0000 	movt	r0, #2048	; 0x800
 80015b8:	f6c0 0100 	movt	r1, #2048	; 0x800
 80015bc:	9004      	str	r0, [sp, #16]
 80015be:	a804      	add	r0, sp, #16
 80015c0:	f000 fd05 	bl	8001fce <_ZN4core9panicking9panic_fmt17h6b4d8e87b0965449E>
 80015c4:	defe      	udf	#254	; 0xfe
 80015c6:	1d28      	adds	r0, r5, #4
                assert_ne!(rawtempdata.strd_temp_raw_is_valid, 0, "bad rawtmp");                
 80015c8:	9010      	str	r0, [sp, #64]	; 0x40
 80015ca:	f24c 0094 	movw	r0, #49300	; 0xc094
 80015ce:	f64b 7104 	movw	r1, #48900	; 0xbf04
 80015d2:	f6c0 0000 	movt	r0, #2048	; 0x800
 80015d6:	f6c0 0100 	movt	r1, #2048	; 0x800
 80015da:	9011      	str	r0, [sp, #68]	; 0x44
 80015dc:	2000      	movs	r0, #0
 80015de:	9017      	str	r0, [sp, #92]	; 0x5c
 80015e0:	aa11      	add	r2, sp, #68	; 0x44
 80015e2:	9116      	str	r1, [sp, #88]	; 0x58
 80015e4:	2101      	movs	r1, #1
 80015e6:	e9cd 0014 	strd	r0, r0, [sp, #80]	; 0x50
 80015ea:	9113      	str	r1, [sp, #76]	; 0x4c
 80015ec:	f24c 01e8 	movw	r1, #49384	; 0xc0e8
 80015f0:	f6c0 0100 	movt	r1, #2048	; 0x800
 80015f4:	9112      	str	r1, [sp, #72]	; 0x48
 80015f6:	f642 111f 	movw	r1, #10527	; 0x291f
 80015fa:	f6c0 0100 	movt	r1, #2048	; 0x800
 80015fe:	910f      	str	r1, [sp, #60]	; 0x3c
 8001600:	a912      	add	r1, sp, #72	; 0x48
 8001602:	910e      	str	r1, [sp, #56]	; 0x38
 8001604:	f241 210b 	movw	r1, #4619	; 0x120b
 8001608:	f6c0 0100 	movt	r1, #2048	; 0x800
 800160c:	910d      	str	r1, [sp, #52]	; 0x34
 800160e:	e9cd 120b 	strd	r1, r2, [sp, #44]	; 0x2c
 8001612:	a910      	add	r1, sp, #64	; 0x40
 8001614:	aa0a      	add	r2, sp, #40	; 0x28
 8001616:	910a      	str	r1, [sp, #40]	; 0x28
 8001618:	2103      	movs	r1, #3
 800161a:	9109      	str	r1, [sp, #36]	; 0x24
 800161c:	e9cd 0207 	strd	r0, r2, [sp, #28]
 8001620:	e9cd 1005 	strd	r1, r0, [sp, #20]
 8001624:	f24c 00c4 	movw	r0, #49348	; 0xc0c4
 8001628:	f6c0 0000 	movt	r0, #2048	; 0x800
 800162c:	f24c 01f0 	movw	r1, #49392	; 0xc0f0
 8001630:	9004      	str	r0, [sp, #16]
 8001632:	a804      	add	r0, sp, #16
 8001634:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001638:	f000 fcc9 	bl	8001fce <_ZN4core9panicking9panic_fmt17h6b4d8e87b0965449E>
 800163c:	defe      	udf	#254	; 0xfe

0800163e <main>:
};

///  Main program that initialises the sensor, network driver and starts reading and sending sensor data in the background.
///  main() will be called at Mynewt startup. It replaces the C version of the main() function.
#[no_mangle]                 //  Don't mangle the name "main"
extern "C" fn main() -> ! {  //  Declare extern "C" because it will be called by Mynewt
 800163e:	b086      	sub	sp, #24
    //  Initialise the Mynewt packages and Blue Pill internal temperature sensor driver.
    //  Start the CoAP / OIC Background Task to transmit CoAP messages.  Any startup
    //  functions defined in pkg.yml of our custom drivers and libraries will be called by 
    //  sysinit().  Here are the startup functions consolidated by Mynewt:
    //  bin/targets/bluepill_my_sensor/generated/src/bluepill_my_sensor-sysinit-app.c
    mynewt::sysinit();
 8001640:	f000 fa23 	bl	8001a8a <_ZN6mynewt7sysinit17hc2bae3266fb1ff2aE>
    console::print("Rust TMP poll\n");
 8001644:	f64b 705c 	movw	r0, #48988	; 0xbf5c
 8001648:	210e      	movs	r1, #14
 800164a:	f6c0 0000 	movt	r0, #2048	; 0x800
 800164e:	f000 f95b 	bl	8001908 <_ZN6mynewt3sys7console5print17h578959f818f159a0E>
    sensor::set_poll_rate_ms(&SENSOR_DEVICE, SENSOR_POLL_TIME) ? ;
 8001652:	f64b 7050 	movw	r0, #48976	; 0xbf50
 8001656:	f242 7110 	movw	r1, #10000	; 0x2710
 800165a:	f6c0 0000 	movt	r0, #2048	; 0x800
 800165e:	f000 fada 	bl	8001c16 <_ZN6mynewt2hw6sensor8bindings16set_poll_rate_ms17hcde389472a355443E>
 8001662:	2801      	cmp	r0, #1
 8001664:	d142      	bne.n	80016ec <main+0xae>
    let sensor = sensor::mgr_find_next_bydevname(&SENSOR_DEVICE, core::ptr::null_mut()) ? ;
 8001666:	f64b 7150 	movw	r1, #48976	; 0xbf50
 800166a:	4668      	mov	r0, sp
 800166c:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001670:	2200      	movs	r2, #0
 8001672:	f000 fa75 	bl	8001b60 <_ZN6mynewt2hw6sensor8bindings23mgr_find_next_bydevname17h5578d6fbfa9c8a90E>
 8001676:	e9dd 0400 	ldrd	r0, r4, [sp]
 800167a:	2801      	cmp	r0, #1
 800167c:	d014      	beq.n	80016a8 <main+0x6a>
    assert!(!sensor.is_null(), "no sensor");
 800167e:	2c00      	cmp	r4, #0
 8001680:	d045      	beq.n	800170e <main+0xd0>
        sl_func       : sensor::as_untyped(handle_sensor_data),  //  Listener function
 8001682:	f241 20db 	movw	r0, #4827	; 0x12db
 8001686:	f6c0 0000 	movt	r0, #2048	; 0x800
 800168a:	f000 f8ea 	bl	8001862 <_ZN6mynewt2hw6sensor10as_untyped17hc683efc51e7df2deE>
 800168e:	2100      	movs	r1, #0
 8001690:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    sensor::register_listener(sensor, listener) ? ;  //  `?` means in case of error, return error now.
 8001694:	9101      	str	r1, [sp, #4]
 8001696:	9200      	str	r2, [sp, #0]
 8001698:	9104      	str	r1, [sp, #16]
 800169a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800169e:	4669      	mov	r1, sp
 80016a0:	4620      	mov	r0, r4
 80016a2:	f000 f8df 	bl	8001864 <_ZN6mynewt2hw6sensor17register_listener17he319e84e05fa897bE>
 80016a6:	4604      	mov	r4, r0
 80016a8:	2c01      	cmp	r4, #1
 80016aa:	d120      	bne.n	80016ee <main+0xb0>
    //  Start polling the temperature sensor every 10 seconds in the background.
    app_sensor::start_sensor_listener()
        .expect("TMP fail");

    //  Start the Server Transport for sending sensor data to CoAP Server over NB-IoT.
    sensor_network::start_server_transport()
 80016ac:	f000 fb0e 	bl	8001ccc <_ZN6mynewt4libs14sensor_network22start_server_transport17he5c189d769aa6683E>
 80016b0:	2801      	cmp	r0, #1
 80016b2:	d124      	bne.n	80016fe <main+0xc0>
 80016b4:	466c      	mov	r4, sp
        .expect("NET fail");

    //  Main event loop
    loop {                            //  Loop forever...
        os::eventq_run(               //  Processing events...
            os::eventq_dflt_get()     //  From default event queue.
 80016b6:	4620      	mov	r0, r4
 80016b8:	f000 fa4a 	bl	8001b50 <_ZN6mynewt6kernel2os15eventq_dflt_get17hb17cddfc29115d4fE>
 80016bc:	9800      	ldr	r0, [sp, #0]
 80016be:	2801      	cmp	r0, #1
 80016c0:	d00c      	beq.n	80016dc <main+0x9e>
 80016c2:	9801      	ldr	r0, [sp, #4]
        os::eventq_run(               //  Processing events...
 80016c4:	f000 fa3f 	bl	8001b46 <_ZN6mynewt6kernel2os10eventq_run17h49917a2d6a4028eaE>
 80016c8:	2801      	cmp	r0, #1
 80016ca:	d0f4      	beq.n	80016b6 <main+0x78>
 80016cc:	4601      	mov	r1, r0
 80016ce:	f24c 10a1 	movw	r0, #49569	; 0xc1a1
 80016d2:	f6c0 0000 	movt	r0, #2048	; 0x800
 80016d6:	f7ff fdd8 	bl	800128a <_ZN4core6result13unwrap_failed17h4b64b7a78ab076d1E>
 80016da:	defe      	udf	#254	; 0xfe
 80016dc:	9901      	ldr	r1, [sp, #4]
 80016de:	f24c 1099 	movw	r0, #49561	; 0xc199
 80016e2:	f6c0 0000 	movt	r0, #2048	; 0x800
 80016e6:	f7ff fdd0 	bl	800128a <_ZN4core6result13unwrap_failed17h4b64b7a78ab076d1E>
 80016ea:	defe      	udf	#254	; 0xfe
 80016ec:	4604      	mov	r4, r0
 80016ee:	f24c 1089 	movw	r0, #49545	; 0xc189
 80016f2:	4621      	mov	r1, r4
 80016f4:	f6c0 0000 	movt	r0, #2048	; 0x800
 80016f8:	f7ff fdc7 	bl	800128a <_ZN4core6result13unwrap_failed17h4b64b7a78ab076d1E>
 80016fc:	defe      	udf	#254	; 0xfe
 80016fe:	4601      	mov	r1, r0
 8001700:	f24c 1091 	movw	r0, #49553	; 0xc191
 8001704:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001708:	f7ff fdbf 	bl	800128a <_ZN4core6result13unwrap_failed17h4b64b7a78ab076d1E>
 800170c:	defe      	udf	#254	; 0xfe
    assert!(!sensor.is_null(), "no sensor");
 800170e:	f64b 7090 	movw	r0, #49040	; 0xbf90
 8001712:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001716:	f000 fc1d 	bl	8001f54 <_ZN4core9panicking5panic17h53ca63c6ac6312f8E>
 800171a:	defe      	udf	#254	; 0xfe

0800171c <rust_begin_unwind>:
    //  Never comes here
}

///  This function is called on panic, like an assertion failure. We display the filename and line number and pause in the debugger. From https://os.phil-opp.com/freestanding-rust-binary/
#[panic_handler]
fn panic(info: &PanicInfo) -> ! {
 800171c:	4604      	mov	r4, r0
    //  Display the filename and line number to the Semihosting Console.
    console::print("panic ");
 800171e:	f24c 10b1 	movw	r0, #49585	; 0xc1b1
 8001722:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001726:	2106      	movs	r1, #6
 8001728:	f000 f8ee 	bl	8001908 <_ZN6mynewt3sys7console5print17h578959f818f159a0E>
    if let Some(location) = info.location() {
 800172c:	4620      	mov	r0, r4
 800172e:	f000 fc09 	bl	8001f44 <_ZN4core5panic9PanicInfo8location17h5226165d8771f8a2E>
 8001732:	b318      	cbz	r0, 800177c <rust_begin_unwind+0x60>
 8001734:	4604      	mov	r4, r0
        let file = location.file();
 8001736:	f000 fc07 	bl	8001f48 <_ZN4core5panic8Location4file17h94cc6af18de736c4E>
 800173a:	4605      	mov	r5, r0
        let line = location.line();
 800173c:	4620      	mov	r0, r4
        let file = location.file();
 800173e:	460e      	mov	r6, r1
        let line = location.line();
 8001740:	f000 fc06 	bl	8001f50 <_ZN4core5panic8Location4line17h3ffc63f14d0a6636E>
 8001744:	4604      	mov	r4, r0
        console::print("at ");        console::buffer(&file);
 8001746:	f24c 10be 	movw	r0, #49598	; 0xc1be
 800174a:	f6c0 0000 	movt	r0, #2048	; 0x800
 800174e:	2103      	movs	r1, #3
 8001750:	f000 f8da 	bl	8001908 <_ZN6mynewt3sys7console5print17h578959f818f159a0E>
 8001754:	4628      	mov	r0, r5
 8001756:	4631      	mov	r1, r6
 8001758:	f000 f8d6 	bl	8001908 <_ZN6mynewt3sys7console5print17h578959f818f159a0E>
        console::print(" line 0x");   console::printhex(line as u8);  //  TODO: Print in decimal not hex. Allow more than 255 lines.
 800175c:	f24c 10a9 	movw	r0, #49577	; 0xc1a9
 8001760:	2108      	movs	r1, #8
 8001762:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001766:	f000 f8cf 	bl	8001908 <_ZN6mynewt3sys7console5print17h578959f818f159a0E>
 800176a:	4620      	mov	r0, r4
 800176c:	f000 f901 	bl	8001972 <_ZN6mynewt3sys7console8printhex17h075b8327916646d1E>
        console::print("\n");         console::flush();
 8001770:	f24c 1088 	movw	r0, #49544	; 0xc188
 8001774:	2101      	movs	r1, #1
 8001776:	f6c0 0000 	movt	r0, #2048	; 0x800
 800177a:	e004      	b.n	8001786 <rust_begin_unwind+0x6a>
    } else {
        console::print("no loc\n");   console::flush();
 800177c:	f24c 10b7 	movw	r0, #49591	; 0xc1b7
 8001780:	2107      	movs	r1, #7
 8001782:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001786:	f000 f8bf 	bl	8001908 <_ZN6mynewt3sys7console5print17h578959f818f159a0E>
 800178a:	f000 f8f5 	bl	8001978 <_ZN6mynewt3sys7console5flush17ha743c57e8b1e2e3cE>
        () => unsafe {
            extern "C" {
                fn __bkpt();
            }

            __bkpt();
 800178e:	f000 f801 	bl	8001794 <__bkpt>
    }
    //  Pause in the debugger.
    bkpt();
    //  Loop forever so that device won't restart.
    loop {}
 8001792:	e7fe      	b.n	8001792 <rust_begin_unwind+0x76>

08001794 <__bkpt>:
 8001794:	be00      	bkpt	0x0000
 8001796:	4770      	bx	lr

08001798 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h599ec635b8d2cbe5E>:
 8001798:	b5b0      	push	{r4, r5, r7, lr}
 800179a:	6805      	ldr	r5, [r0, #0]
 800179c:	4608      	mov	r0, r1
 800179e:	460c      	mov	r4, r1
 80017a0:	f001 fc7d 	bl	800309e <_ZN4core3fmt9Formatter15debug_lower_hex17h6ead2f28bb05b574E>
 80017a4:	b128      	cbz	r0, 80017b2 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h599ec635b8d2cbe5E+0x1a>
 80017a6:	4628      	mov	r0, r5
 80017a8:	4621      	mov	r1, r4
 80017aa:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80017ae:	f002 b87e 	b.w	80038ae <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17h1aa219e6cfd94b25E>
 80017b2:	4620      	mov	r0, r4
 80017b4:	f001 fc77 	bl	80030a6 <_ZN4core3fmt9Formatter15debug_upper_hex17hd6d96e6aa5cb78d8E>
 80017b8:	b128      	cbz	r0, 80017c6 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h599ec635b8d2cbe5E+0x2e>
 80017ba:	4628      	mov	r0, r5
 80017bc:	4621      	mov	r1, r4
 80017be:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80017c2:	f002 b8a8 	b.w	8003916 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i64$GT$3fmt17h93ab4183a6d5feaaE>
 80017c6:	4628      	mov	r0, r5
 80017c8:	4621      	mov	r1, r4
 80017ca:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80017ce:	f002 b9f9 	b.w	8003bc4 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i64$GT$3fmt17h97d3cc39ae689800E>

080017d2 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h926198afa8396cd4E>:
 80017d2:	b5b0      	push	{r4, r5, r7, lr}
 80017d4:	b084      	sub	sp, #16
 80017d6:	6805      	ldr	r5, [r0, #0]
 80017d8:	466c      	mov	r4, sp
 80017da:	6828      	ldr	r0, [r5, #0]
 80017dc:	b1a8      	cbz	r0, 800180a <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h926198afa8396cd4E+0x38>
 80017de:	f24c 2218 	movw	r2, #49688	; 0xc218
 80017e2:	4620      	mov	r0, r4
 80017e4:	f6c0 0200 	movt	r2, #2048	; 0x800
 80017e8:	2304      	movs	r3, #4
 80017ea:	f001 fc60 	bl	80030ae <_ZN4core3fmt9Formatter11debug_tuple17h793087e8ecab9022E>
 80017ee:	f24c 2228 	movw	r2, #49704	; 0xc228
 80017f2:	a903      	add	r1, sp, #12
 80017f4:	f6c0 0200 	movt	r2, #2048	; 0x800
 80017f8:	4620      	mov	r0, r4
 80017fa:	9503      	str	r5, [sp, #12]
 80017fc:	f000 ff72 	bl	80026e4 <_ZN4core3fmt8builders10DebugTuple5field17h7da5ac79cde13c49E>
 8001800:	4620      	mov	r0, r4
 8001802:	f000 ffe5 	bl	80027d0 <_ZN4core3fmt8builders10DebugTuple6finish17h24d91625b3672e6dE>
 8001806:	b004      	add	sp, #16
 8001808:	bdb0      	pop	{r4, r5, r7, pc}
 800180a:	f24c 221c 	movw	r2, #49692	; 0xc21c
 800180e:	4620      	mov	r0, r4
 8001810:	f6c0 0200 	movt	r2, #2048	; 0x800
 8001814:	2304      	movs	r3, #4
 8001816:	f001 fc4a 	bl	80030ae <_ZN4core3fmt9Formatter11debug_tuple17h793087e8ecab9022E>
 800181a:	4620      	mov	r0, r4
 800181c:	f000 ffd8 	bl	80027d0 <_ZN4core3fmt8builders10DebugTuple6finish17h24d91625b3672e6dE>
 8001820:	b004      	add	sp, #16
 8001822:	bdb0      	pop	{r4, r5, r7, pc}

08001824 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17he77dbea7c29ad7a9E>:
 8001824:	b5b0      	push	{r4, r5, r7, lr}
 8001826:	6800      	ldr	r0, [r0, #0]
 8001828:	460c      	mov	r4, r1
 800182a:	6805      	ldr	r5, [r0, #0]
 800182c:	4608      	mov	r0, r1
 800182e:	f001 fc36 	bl	800309e <_ZN4core3fmt9Formatter15debug_lower_hex17h6ead2f28bb05b574E>
 8001832:	b128      	cbz	r0, 8001840 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17he77dbea7c29ad7a9E+0x1c>
 8001834:	4628      	mov	r0, r5
 8001836:	4621      	mov	r1, r4
 8001838:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800183c:	f001 bf03 	b.w	8003646 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17heed14ddcd875f85bE>
 8001840:	4620      	mov	r0, r4
 8001842:	f001 fc30 	bl	80030a6 <_ZN4core3fmt9Formatter15debug_upper_hex17hd6d96e6aa5cb78d8E>
 8001846:	b128      	cbz	r0, 8001854 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17he77dbea7c29ad7a9E+0x30>
 8001848:	4628      	mov	r0, r5
 800184a:	4621      	mov	r1, r4
 800184c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001850:	f001 bf28 	b.w	80036a4 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h33ff4d4021f61f61E>
 8001854:	4628      	mov	r0, r5
 8001856:	4621      	mov	r1, r4
 8001858:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800185c:	f002 b910 	b.w	8003a80 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17heb4d046d241d78d0E>

08001860 <_ZN4core3ptr18real_drop_in_place17h5dfe1da5d5e0f4a8E>:
 8001860:	4770      	bx	lr

08001862 <_ZN6mynewt2hw6sensor10as_untyped17hc683efc51e7df2deE>:
        ::core::mem::transmute::
            <sensor_data_func, sensor_data_func_untyped>
            (typed)
    };
    Some(untyped)
}
 8001862:	4770      	bx	lr

08001864 <_ZN6mynewt2hw6sensor17register_listener17he319e84e05fa897bE>:
///  For more information on the type of callbacks available, see the documentation
///  for the sensor listener structure.
///  `sensor`: The sensor to register a listener on.
///  `listener`: The listener to register onto the sensor.
///  Returns `Ok()` on success, `Err()` containing `MynewtError` error code on failure.
pub fn register_listener(sensor: *mut sensor, listener: sensor_listener) -> MynewtResult<()> {  //  Returns an error code upon error. 
 8001864:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001866:	b095      	sub	sp, #84	; 0x54
 8001868:	468c      	mov	ip, r1
    unsafe { assert_eq!(LISTENER_INTERNAL.sl_sensor_type, 0, "reg lis") };  //  Make sure it's not used.
 800186a:	f240 1118 	movw	r1, #280	; 0x118
 800186e:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8001872:	e9d1 3200 	ldrd	r3, r2, [r1]
 8001876:	431a      	orrs	r2, r3
 8001878:	d109      	bne.n	800188e <_ZN6mynewt2hw6sensor17register_listener17he319e84e05fa897bE+0x2a>
    //  Copy the caller's listener to the internal listener.
    unsafe { LISTENER_INTERNAL = listener };
 800187a:	e89c 40f8 	ldmia.w	ip, {r3, r4, r5, r6, r7, lr}
 800187e:	460a      	mov	r2, r1
 8001880:	e882 40f8 	stmia.w	r2, {r3, r4, r5, r6, r7, lr}
    //  Pass the internal listener to the unsafe Mynewt API.
    unsafe { sensor_register_listener(sensor, &mut LISTENER_INTERNAL) };
 8001884:	f003 fe9e 	bl	80055c4 <sensor_register_listener>
    Ok(())
}
 8001888:	2001      	movs	r0, #1
 800188a:	b015      	add	sp, #84	; 0x54
 800188c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    unsafe { assert_eq!(LISTENER_INTERNAL.sl_sensor_type, 0, "reg lis") };  //  Make sure it's not used.
 800188e:	f24c 2038 	movw	r0, #49720	; 0xc238
 8001892:	910d      	str	r1, [sp, #52]	; 0x34
 8001894:	f24c 2118 	movw	r1, #49688	; 0xc218
 8001898:	f6c0 0000 	movt	r0, #2048	; 0x800
 800189c:	900e      	str	r0, [sp, #56]	; 0x38
 800189e:	2000      	movs	r0, #0
 80018a0:	f6c0 0100 	movt	r1, #2048	; 0x800
 80018a4:	9014      	str	r0, [sp, #80]	; 0x50
 80018a6:	9113      	str	r1, [sp, #76]	; 0x4c
 80018a8:	2101      	movs	r1, #1
 80018aa:	e9cd 0011 	strd	r0, r0, [sp, #68]	; 0x44
 80018ae:	aa0e      	add	r2, sp, #56	; 0x38
 80018b0:	9110      	str	r1, [sp, #64]	; 0x40
 80018b2:	f24c 2158 	movw	r1, #49752	; 0xc258
 80018b6:	f6c0 0100 	movt	r1, #2048	; 0x800
 80018ba:	910f      	str	r1, [sp, #60]	; 0x3c
 80018bc:	f642 111f 	movw	r1, #10527	; 0x291f
 80018c0:	f6c0 0100 	movt	r1, #2048	; 0x800
 80018c4:	910c      	str	r1, [sp, #48]	; 0x30
 80018c6:	a90f      	add	r1, sp, #60	; 0x3c
 80018c8:	910b      	str	r1, [sp, #44]	; 0x2c
 80018ca:	f241 7199 	movw	r1, #6041	; 0x1799
 80018ce:	f6c0 0100 	movt	r1, #2048	; 0x800
 80018d2:	910a      	str	r1, [sp, #40]	; 0x28
 80018d4:	e9cd 1208 	strd	r1, r2, [sp, #32]
 80018d8:	a90d      	add	r1, sp, #52	; 0x34
 80018da:	aa07      	add	r2, sp, #28
 80018dc:	9107      	str	r1, [sp, #28]
 80018de:	2103      	movs	r1, #3
 80018e0:	9106      	str	r1, [sp, #24]
 80018e2:	e9cd 0204 	strd	r0, r2, [sp, #16]
 80018e6:	e9cd 1002 	strd	r1, r0, [sp, #8]
 80018ea:	f24c 2000 	movw	r0, #49664	; 0xc200
 80018ee:	f6c0 0000 	movt	r0, #2048	; 0x800
 80018f2:	f24c 217c 	movw	r1, #49788	; 0xc27c
 80018f6:	9001      	str	r0, [sp, #4]
 80018f8:	a801      	add	r0, sp, #4
 80018fa:	f6c0 0100 	movt	r1, #2048	; 0x800
 80018fe:	f000 fb66 	bl	8001fce <_ZN4core9panicking9panic_fmt17h6b4d8e87b0965449E>
 8001902:	defe      	udf	#254	; 0xfe

08001904 <_ZN6mynewt2hw6sensor21null_sensor_data_func17he446d2dc3f85c749E>:
extern fn null_sensor_data_func(
    _sensor: sensor_ptr, 
    _arg: sensor_arg, 
    _sensor_data: sensor_data_ptr, 
    _sensor_type: sensor_type_t) -> i32
    { 0 }
 8001904:	2000      	movs	r0, #0
 8001906:	4770      	bx	lr

08001908 <_ZN6mynewt3sys7console5print17h578959f818f159a0E>:
//! Display messages on Arm Semihosting Console (via OpenOCD)

///  Display message `msg` on the Arm Semihosting console (via OpenOCD).
pub fn print(msg: &str) {
    //  Call the Semihosting Console API, which is unsafe.
    unsafe { console_buffer(msg.as_ptr(), msg.len() as u32); }
 8001908:	f002 b9a4 	b.w	8003c54 <console_buffer>

0800190c <_ZN6mynewt3sys7console10print_strn17h642e26ec24b7f07fE>:
}

///  Display message `msg` on the Arm Semihosting console (via OpenOCD).
pub fn print_strn(msg: &crate::Strn) {
 800190c:	4601      	mov	r1, r0
    }

    /// Return a pointer to the string
    pub fn as_ptr(&self) -> *const u8 {
        match self.rep {
            StrnRep::ByteStr(bs) => { bs.as_ptr() }
 800190e:	6840      	ldr	r0, [r0, #4]
    }

    /// Return the length of the string. TODO: For safety, we limit to 128.
    pub fn len(&self) -> usize {
        match self.rep {
            StrnRep::ByteStr(bs) => { bs.len() }
 8001910:	780a      	ldrb	r2, [r1, #0]
 8001912:	2a01      	cmp	r2, #1
 8001914:	bf1c      	itt	ne
 8001916:	6889      	ldrne	r1, [r1, #8]
    //  Call the Semihosting Console API, which is unsafe.
    unsafe { console_buffer(msg.as_ptr(), msg.len() as u32); }
 8001918:	f002 b99c 	bne.w	8003c54 <console_buffer>
            StrnRep::CStr(cstr)  => { 
                //  Look for the null termination.
                if cstr.is_null() { return 0; }
 800191c:	2800      	cmp	r0, #0
 800191e:	bf04      	itt	eq
 8001920:	2100      	moveq	r1, #0
 8001922:	f002 b997 	beq.w	8003c54 <console_buffer>
 8001926:	2200      	movs	r2, #0
 8001928:	4611      	mov	r1, r2
                for len in 0..127 {
                    let ptr: *const u8 =  ((cstr as u32) + len) as *const u8;
                    if unsafe { *ptr } == 0 { return len as usize; }                    
 800192a:	5c82      	ldrb	r2, [r0, r2]
 800192c:	2a00      	cmp	r2, #0
 800192e:	bf08      	it	eq
 8001930:	f002 b990 	beq.w	8003c54 <console_buffer>
                    let ptr: *const u8 =  ((cstr as u32) + len) as *const u8;
 8001934:	1842      	adds	r2, r0, r1
                    if unsafe { *ptr } == 0 { return len as usize; }                    
 8001936:	7853      	ldrb	r3, [r2, #1]
 8001938:	b163      	cbz	r3, 8001954 <_ZN6mynewt3sys7console10print_strn17h642e26ec24b7f07fE+0x48>
 800193a:	7893      	ldrb	r3, [r2, #2]
 800193c:	b173      	cbz	r3, 800195c <_ZN6mynewt3sys7console10print_strn17h642e26ec24b7f07fE+0x50>
 800193e:	1ccb      	adds	r3, r1, #3
 8001940:	2b7e      	cmp	r3, #126	; 0x7e
 8001942:	d80f      	bhi.n	8001964 <_ZN6mynewt3sys7console10print_strn17h642e26ec24b7f07fE+0x58>
 8001944:	78d3      	ldrb	r3, [r2, #3]
 8001946:	1d0a      	adds	r2, r1, #4
 8001948:	2b00      	cmp	r3, #0
 800194a:	d1ed      	bne.n	8001928 <_ZN6mynewt3sys7console10print_strn17h642e26ec24b7f07fE+0x1c>
 800194c:	f041 0103 	orr.w	r1, r1, #3
 8001950:	f002 b980 	b.w	8003c54 <console_buffer>
 8001954:	f041 0101 	orr.w	r1, r1, #1
 8001958:	f002 b97c 	b.w	8003c54 <console_buffer>
 800195c:	f041 0102 	orr.w	r1, r1, #2
 8001960:	f002 b978 	b.w	8003c54 <console_buffer>
                }
                assert!(false, "big strn");  //  String too long
 8001964:	f24c 3038 	movw	r0, #49976	; 0xc338
 8001968:	f6c0 0000 	movt	r0, #2048	; 0x800
 800196c:	f000 faf2 	bl	8001f54 <_ZN4core9panicking5panic17h53ca63c6ac6312f8E>
 8001970:	defe      	udf	#254	; 0xfe

08001972 <_ZN6mynewt3sys7console8printhex17h075b8327916646d1E>:
}

///  Write a byte in hexadecimal to the output buffer.
///  C API: `void console_printhex(uint8_t v)`
pub fn printhex(v: u8) {
    unsafe { console_printhex(v); }
 8001972:	b2c0      	uxtb	r0, r0
 8001974:	f002 b990 	b.w	8003c98 <console_printhex>

08001978 <_ZN6mynewt3sys7console5flush17ha743c57e8b1e2e3cE>:
}

///  Flush the output buffer to the console.
pub fn flush() {
    unsafe { console_flush(); }
 8001978:	f002 b93e 	b.w	8003bf8 <console_flush>

0800197c <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_text_string17hb1ac2c758b431170E>:
static mut cbor_encoder0: CborEncoder = fill_zero!(CborEncoder);
static mut cbor_encoder1: CborEncoder = fill_zero!(CborEncoder);

impl CoapContext {

    pub fn json_set_text_string(&mut self, key: &Strn, value: &Strn) {
 800197c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800197e:	b081      	sub	sp, #4
 8001980:	4604      	mov	r4, r0
        let key_cstr: *const u8 =
            match key.rep {
                StrnRep::ByteStr(bs) => { self.key_to_cstr(bs) }
 8001982:	7808      	ldrb	r0, [r1, #0]
 8001984:	4616      	mov	r6, r2
 8001986:	2801      	cmp	r0, #1
 8001988:	d104      	bne.n	8001994 <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_text_string17hb1ac2c758b431170E+0x18>
                StrnRep::CStr(cstr)  => { cstr }
 800198a:	684d      	ldr	r5, [r1, #4]
            };
        let value_cstr: *const u8 =
            match value.rep {
                StrnRep::ByteStr(bs) => { self.value_to_cstr(bs) }
 800198c:	7830      	ldrb	r0, [r6, #0]
 800198e:	2801      	cmp	r0, #1
 8001990:	d016      	beq.n	80019c0 <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_text_string17hb1ac2c758b431170E+0x44>
 8001992:	e017      	b.n	80019c4 <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_text_string17hb1ac2c758b431170E+0x48>
                StrnRep::ByteStr(bs) => { self.key_to_cstr(bs) }
 8001994:	e9d1 5701 	ldrd	r5, r7, [r1, #4]
 8001998:	2f01      	cmp	r7, #1
 800199a:	d304      	bcc.n	80019a6 <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_text_string17hb1ac2c758b431170E+0x2a>
 800199c:	1e78      	subs	r0, r7, #1
 800199e:	42b8      	cmp	r0, r7
 80019a0:	d201      	bcs.n	80019a6 <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_text_string17hb1ac2c758b431170E+0x2a>
 80019a2:	5c28      	ldrb	r0, [r5, r0]
    /// Given a key `s`, return a `*char` pointer that is null-terminated. Used for encoding COAP keys.
    /// If `s` is null-terminated, return it as a pointer. Else copy `s` to the static buffer,
    /// append null and return the buffer as a pointer.
    pub fn key_to_cstr(&mut self, s: &[u8]) -> *const u8 {                
        //  If null-terminated, return as pointer.
        if s.last() == Some(&0) { return s.as_ptr() as *const u8; }
 80019a4:	b148      	cbz	r0, 80019ba <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_text_string17hb1ac2c758b431170E+0x3e>
        //  Else copy into static key buffer and return pointer to buffer.
        assert!(s.len() < COAP_KEY_SIZE, "big key");  //  Key too long
 80019a6:	2f20      	cmp	r7, #32
 80019a8:	d228      	bcs.n	80019fc <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_text_string17hb1ac2c758b431170E+0x80>
 80019aa:	4620      	mov	r0, r4
 80019ac:	4629      	mov	r1, r5
 80019ae:	463a      	mov	r2, r7
 80019b0:	f00a fa9a 	bl	800bee8 <__aeabi_memcpy>
 80019b4:	2000      	movs	r0, #0
 80019b6:	4625      	mov	r5, r4
        self.key_buffer[..s.len()].copy_from_slice(s);
        self.key_buffer[s.len()] = 0;
 80019b8:	55e0      	strb	r0, [r4, r7]
                StrnRep::ByteStr(bs) => { self.value_to_cstr(bs) }
 80019ba:	7830      	ldrb	r0, [r6, #0]
 80019bc:	2801      	cmp	r0, #1
 80019be:	d101      	bne.n	80019c4 <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_text_string17hb1ac2c758b431170E+0x48>
                StrnRep::CStr(cstr)  => { cstr }
 80019c0:	6872      	ldr	r2, [r6, #4]
 80019c2:	e014      	b.n	80019ee <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_text_string17hb1ac2c758b431170E+0x72>
                StrnRep::ByteStr(bs) => { self.value_to_cstr(bs) }
 80019c4:	e9d6 2601 	ldrd	r2, r6, [r6, #4]
 80019c8:	2e01      	cmp	r6, #1
 80019ca:	d304      	bcc.n	80019d6 <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_text_string17hb1ac2c758b431170E+0x5a>
 80019cc:	1e70      	subs	r0, r6, #1
 80019ce:	42b0      	cmp	r0, r6
 80019d0:	d201      	bcs.n	80019d6 <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_text_string17hb1ac2c758b431170E+0x5a>
 80019d2:	5c10      	ldrb	r0, [r2, r0]
    /// Given a value `s`, return a `*char` pointer that is null-terminated. Used for encoding COAP values.
    /// If `s` is null-terminated, return it as a pointer. Else copy `s` to the static buffer,
    /// append null and return the buffer as a pointer.
    pub fn value_to_cstr(&mut self, s: &[u8]) -> *const u8 {
        //  If null-terminated, return as pointer.
        if s.last() == Some(&0) { return s.as_ptr() as *const u8; }
 80019d4:	b158      	cbz	r0, 80019ee <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_text_string17hb1ac2c758b431170E+0x72>
        //  Else copy into static value buffer and return pointer to buffer.
        assert!(s.len() < COAP_VALUE_SIZE, "big value");  //  Value too long
 80019d6:	2e20      	cmp	r6, #32
 80019d8:	d217      	bcs.n	8001a0a <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_text_string17hb1ac2c758b431170E+0x8e>
 80019da:	f104 0720 	add.w	r7, r4, #32
 80019de:	4611      	mov	r1, r2
 80019e0:	4632      	mov	r2, r6
 80019e2:	4638      	mov	r0, r7
 80019e4:	f00a fa80 	bl	800bee8 <__aeabi_memcpy>
 80019e8:	2000      	movs	r0, #0
 80019ea:	463a      	mov	r2, r7
        self.value_buffer[..s.len()].copy_from_slice(s);
        self.value_buffer[s.len()] = 0;
 80019ec:	55b8      	strb	r0, [r7, r6]
            crate::libs::mynewt_rust::json_helper_set_text_string(
 80019ee:	4620      	mov	r0, r4
 80019f0:	4629      	mov	r1, r5
 80019f2:	b001      	add	sp, #4
 80019f4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80019f8:	f005 bed6 	b.w	80077a8 <json_helper_set_text_string>
        assert!(s.len() < COAP_KEY_SIZE, "big key");  //  Key too long
 80019fc:	f24c 20c4 	movw	r0, #49860	; 0xc2c4
 8001a00:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001a04:	f000 faa6 	bl	8001f54 <_ZN4core9panicking5panic17h53ca63c6ac6312f8E>
 8001a08:	defe      	udf	#254	; 0xfe
        assert!(s.len() < COAP_VALUE_SIZE, "big value");  //  Value too long
 8001a0a:	f24c 20e8 	movw	r0, #49896	; 0xc2e8
 8001a0e:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001a12:	f000 fa9f 	bl	8001f54 <_ZN4core9panicking5panic17h53ca63c6ac6312f8E>
 8001a16:	defe      	udf	#254	; 0xfe

08001a18 <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17h0f82664be59056e7E>:
    pub fn key_to_cstr(&mut self, s: &[u8]) -> *const u8 {                
 8001a18:	b5b0      	push	{r4, r5, r7, lr}
 8001a1a:	4604      	mov	r4, r0
 8001a1c:	1e50      	subs	r0, r2, #1
 8001a1e:	4615      	mov	r5, r2
 8001a20:	d303      	bcc.n	8001a2a <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17h0f82664be59056e7E+0x12>
 8001a22:	42a8      	cmp	r0, r5
 8001a24:	d201      	bcs.n	8001a2a <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17h0f82664be59056e7E+0x12>
 8001a26:	5c08      	ldrb	r0, [r1, r0]
        if s.last() == Some(&0) { return s.as_ptr() as *const u8; }
 8001a28:	b140      	cbz	r0, 8001a3c <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17h0f82664be59056e7E+0x24>
        assert!(s.len() < COAP_KEY_SIZE, "big key");  //  Key too long
 8001a2a:	2d20      	cmp	r5, #32
 8001a2c:	d208      	bcs.n	8001a40 <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17h0f82664be59056e7E+0x28>
 8001a2e:	4620      	mov	r0, r4
 8001a30:	462a      	mov	r2, r5
 8001a32:	f00a fa59 	bl	800bee8 <__aeabi_memcpy>
 8001a36:	2000      	movs	r0, #0
 8001a38:	4621      	mov	r1, r4
        self.key_buffer[s.len()] = 0;
 8001a3a:	5560      	strb	r0, [r4, r5]
    }
 8001a3c:	4608      	mov	r0, r1
 8001a3e:	bdb0      	pop	{r4, r5, r7, pc}
        assert!(s.len() < COAP_KEY_SIZE, "big key");  //  Key too long
 8001a40:	f24c 20c4 	movw	r0, #49860	; 0xc2c4
 8001a44:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001a48:	f000 fa84 	bl	8001f54 <_ZN4core9panicking5panic17h53ca63c6ac6312f8E>
 8001a4c:	defe      	udf	#254	; 0xfe

08001a4e <_ZN6mynewt8encoding12coap_context11CoapContext13value_to_cstr17h4eb8afb9652b8128E>:
    pub fn value_to_cstr(&mut self, s: &[u8]) -> *const u8 {
 8001a4e:	b5b0      	push	{r4, r5, r7, lr}
 8001a50:	4614      	mov	r4, r2
 8001a52:	3a01      	subs	r2, #1
 8001a54:	d303      	bcc.n	8001a5e <_ZN6mynewt8encoding12coap_context11CoapContext13value_to_cstr17h4eb8afb9652b8128E+0x10>
 8001a56:	42a2      	cmp	r2, r4
 8001a58:	d201      	bcs.n	8001a5e <_ZN6mynewt8encoding12coap_context11CoapContext13value_to_cstr17h4eb8afb9652b8128E+0x10>
 8001a5a:	5c8a      	ldrb	r2, [r1, r2]
        if s.last() == Some(&0) { return s.as_ptr() as *const u8; }
 8001a5c:	b152      	cbz	r2, 8001a74 <_ZN6mynewt8encoding12coap_context11CoapContext13value_to_cstr17h4eb8afb9652b8128E+0x26>
        assert!(s.len() < COAP_VALUE_SIZE, "big value");  //  Value too long
 8001a5e:	2c20      	cmp	r4, #32
 8001a60:	d20a      	bcs.n	8001a78 <_ZN6mynewt8encoding12coap_context11CoapContext13value_to_cstr17h4eb8afb9652b8128E+0x2a>
 8001a62:	f100 0520 	add.w	r5, r0, #32
 8001a66:	4622      	mov	r2, r4
 8001a68:	4628      	mov	r0, r5
 8001a6a:	f00a fa3d 	bl	800bee8 <__aeabi_memcpy>
 8001a6e:	2000      	movs	r0, #0
 8001a70:	4629      	mov	r1, r5
        self.value_buffer[s.len()] = 0;
 8001a72:	5528      	strb	r0, [r5, r4]
        self.value_buffer.as_ptr() as *const u8
    }
 8001a74:	4608      	mov	r0, r1
 8001a76:	bdb0      	pop	{r4, r5, r7, pc}
        assert!(s.len() < COAP_VALUE_SIZE, "big value");  //  Value too long
 8001a78:	f24c 20e8 	movw	r0, #49896	; 0xc2e8
 8001a7c:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001a80:	f000 fa68 	bl	8001f54 <_ZN4core9panicking5panic17h53ca63c6ac6312f8E>
 8001a84:	defe      	udf	#254	; 0xfe

08001a86 <_ZN6mynewt8encoding12coap_context11CoapContext11to_void_ptr17hb3808f319694c4fdE>:

    /// Cast itself as a `*mut c_void`
    pub fn to_void_ptr(&mut self) -> *mut c_void {
        let ptr: *mut CoapContext = self;
        ptr as *mut c_void
    }
 8001a86:	4770      	bx	lr

08001a88 <_ZN75_$LT$str$u20$as$u20$mynewt..encoding..coap_context..ToBytesOptionalNull$GT$21to_bytes_optional_nul17h04bf219ed69c9cdbE>:
/// Convert the type to array of bytes that may or may not end with null
impl ToBytesOptionalNull for str {
    /// Convert the type to array of bytes that may or may not end with null
    fn to_bytes_optional_nul(&self) -> &[u8] {
        self.as_bytes()
    }
 8001a88:	4770      	bx	lr

08001a8a <_ZN6mynewt7sysinit17hc2bae3266fb1ff2aE>:
pub fn sysinit() {
 8001a8a:	b580      	push	{r7, lr}
    unsafe { rust_sysinit(); }
 8001a8c:	f005 feac 	bl	80077e8 <rust_sysinit>
 8001a90:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001a94:	f002 b8b0 	b.w	8003bf8 <console_flush>

08001a98 <_ZN6mynewt4Strn3new17h7a223ee4df5e1f9bE>:
    pub fn new(bs: &'static [u8]) -> Strn {
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b096      	sub	sp, #88	; 0x58
 8001a9c:	f1b2 0e01 	subs.w	lr, r2, #1
 8001aa0:	f04f 0300 	mov.w	r3, #0
 8001aa4:	bf28      	it	cs
 8001aa6:	eb01 030e 	addcs.w	r3, r1, lr
 8001aaa:	4596      	cmp	lr, r2
 8001aac:	f04f 0c00 	mov.w	ip, #0
 8001ab0:	bf28      	it	cs
 8001ab2:	4663      	movcs	r3, ip
 8001ab4:	2b00      	cmp	r3, #0
        assert_eq!(bs.last(), Some(&0u8), "no null");  //  Last byte must be 0.
 8001ab6:	9301      	str	r3, [sp, #4]
 8001ab8:	d009      	beq.n	8001ace <_ZN6mynewt4Strn3new17h7a223ee4df5e1f9bE+0x36>
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	2b00      	cmp	r3, #0
        Strn { 
 8001abe:	bf01      	itttt	eq
 8001ac0:	e9c0 1201 	strdeq	r1, r2, [r0, #4]
 8001ac4:	2100      	moveq	r1, #0
 8001ac6:	7001      	strbeq	r1, [r0, #0]
    }
 8001ac8:	b016      	addeq	sp, #88	; 0x58
 8001aca:	bf08      	it	eq
 8001acc:	bd80      	popeq	{r7, pc}
 8001ace:	a801      	add	r0, sp, #4
        assert_eq!(bs.last(), Some(&0u8), "no null");  //  Last byte must be 0.
 8001ad0:	900e      	str	r0, [sp, #56]	; 0x38
 8001ad2:	f24c 2090 	movw	r0, #49808	; 0xc290
 8001ad6:	f8cd c054 	str.w	ip, [sp, #84]	; 0x54
 8001ada:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001ade:	a90f      	add	r1, sp, #60	; 0x3c
 8001ae0:	900f      	str	r0, [sp, #60]	; 0x3c
 8001ae2:	f24c 2018 	movw	r0, #49688	; 0xc218
 8001ae6:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001aea:	9014      	str	r0, [sp, #80]	; 0x50
 8001aec:	2001      	movs	r0, #1
 8001aee:	e9cd cc12 	strd	ip, ip, [sp, #72]	; 0x48
 8001af2:	9011      	str	r0, [sp, #68]	; 0x44
 8001af4:	f24c 3008 	movw	r0, #49928	; 0xc308
 8001af8:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001afc:	9010      	str	r0, [sp, #64]	; 0x40
 8001afe:	f642 101f 	movw	r0, #10527	; 0x291f
 8001b02:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001b06:	900d      	str	r0, [sp, #52]	; 0x34
 8001b08:	a810      	add	r0, sp, #64	; 0x40
 8001b0a:	900c      	str	r0, [sp, #48]	; 0x30
 8001b0c:	f241 70d3 	movw	r0, #6099	; 0x17d3
 8001b10:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001b14:	900b      	str	r0, [sp, #44]	; 0x2c
 8001b16:	e9cd 0109 	strd	r0, r1, [sp, #36]	; 0x24
 8001b1a:	a80e      	add	r0, sp, #56	; 0x38
 8001b1c:	a908      	add	r1, sp, #32
 8001b1e:	9008      	str	r0, [sp, #32]
 8001b20:	2003      	movs	r0, #3
 8001b22:	9007      	str	r0, [sp, #28]
 8001b24:	e9cd c105 	strd	ip, r1, [sp, #20]
 8001b28:	f24c 3128 	movw	r1, #49960	; 0xc328
 8001b2c:	e9cd 0c03 	strd	r0, ip, [sp, #12]
 8001b30:	f24c 2000 	movw	r0, #49664	; 0xc200
 8001b34:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001b38:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001b3c:	9002      	str	r0, [sp, #8]
 8001b3e:	a802      	add	r0, sp, #8
 8001b40:	f000 fa45 	bl	8001fce <_ZN4core9panicking9panic_fmt17h6b4d8e87b0965449E>
 8001b44:	defe      	udf	#254	; 0xfe

08001b46 <_ZN6mynewt6kernel2os10eventq_run17h49917a2d6a4028eaE>:
    #[doc = " - __`evq`__: The event queue to pull an event from"]
    #[doc = ""]
    #[doc = " Return: The event from the queue"]
    pub fn os_eventq_get(arg1: *mut os_eventq) -> *mut os_event;
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
 8001b46:	b580      	push	{r7, lr}
 8001b48:	f004 fa1e 	bl	8005f88 <os_eventq_run>
 8001b4c:	2001      	movs	r0, #1
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <_ZN6mynewt6kernel2os15eventq_dflt_get17hb17cddfc29115d4fE>:
    #[doc = ""]
    #[doc = " - __`evq`__: The event queue to remove the event from"]
    #[doc = " - __`ev`__:  The event to remove from the queue"]
    pub fn os_eventq_remove(arg1: *mut os_eventq, arg2: *mut os_event);
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
 8001b50:	b510      	push	{r4, lr}
 8001b52:	4604      	mov	r4, r0
 8001b54:	f004 fa44 	bl	8005fe0 <os_eventq_dflt_get>
 8001b58:	2100      	movs	r1, #0
 8001b5a:	e9c4 1000 	strd	r1, r0, [r4]
 8001b5e:	bd10      	pop	{r4, pc}

08001b60 <_ZN6mynewt2hw6sensor8bindings23mgr_find_next_bydevname17h5578d6fbfa9c8a90E>:
    #[doc = ""]
    #[doc = " Return: A pointer to the sensor object matching that sensor type, or NULL if"]
    #[doc = "         none found."]
    pub fn sensor_mgr_find_next_bytype(type_: sensor_type_t, sensor: *mut sensor) -> *mut sensor;
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
 8001b60:	b510      	push	{r4, lr}
 8001b62:	b096      	sub	sp, #88	; 0x58
 8001b64:	4604      	mov	r4, r0
    }

    /// Fail if the last byte is not zero.
    pub fn validate(&self) {
        match self.rep {
            StrnRep::ByteStr(bs) => {         
 8001b66:	780b      	ldrb	r3, [r1, #0]
 8001b68:	6848      	ldr	r0, [r1, #4]
 8001b6a:	4696      	mov	lr, r2
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d00e      	beq.n	8001b8e <_ZN6mynewt2hw6sensor8bindings23mgr_find_next_bydevname17h5578d6fbfa9c8a90E+0x2e>
 8001b70:	6889      	ldr	r1, [r1, #8]
 8001b72:	2300      	movs	r3, #0
 8001b74:	f04f 0c00 	mov.w	ip, #0
 8001b78:	1e4a      	subs	r2, r1, #1
 8001b7a:	bf28      	it	cs
 8001b7c:	1883      	addcs	r3, r0, r2
 8001b7e:	428a      	cmp	r2, r1
 8001b80:	bf28      	it	cs
 8001b82:	4663      	movcs	r3, ip
 8001b84:	2b00      	cmp	r3, #0
                assert_eq!(bs.last(), Some(&0u8), "no null");  //  Last byte must be 0.
 8001b86:	9301      	str	r3, [sp, #4]
 8001b88:	d009      	beq.n	8001b9e <_ZN6mynewt2hw6sensor8bindings23mgr_find_next_bydevname17h5578d6fbfa9c8a90E+0x3e>
 8001b8a:	7819      	ldrb	r1, [r3, #0]
 8001b8c:	b939      	cbnz	r1, 8001b9e <_ZN6mynewt2hw6sensor8bindings23mgr_find_next_bydevname17h5578d6fbfa9c8a90E+0x3e>
 8001b8e:	4671      	mov	r1, lr
 8001b90:	f003 fc2a 	bl	80053e8 <sensor_mgr_find_next_bydevname>
 8001b94:	2100      	movs	r1, #0
 8001b96:	e9c4 1000 	strd	r1, r0, [r4]
 8001b9a:	b016      	add	sp, #88	; 0x58
 8001b9c:	bd10      	pop	{r4, pc}
 8001b9e:	a801      	add	r0, sp, #4
 8001ba0:	900e      	str	r0, [sp, #56]	; 0x38
 8001ba2:	f24c 2090 	movw	r0, #49808	; 0xc290
 8001ba6:	f8cd c054 	str.w	ip, [sp, #84]	; 0x54
 8001baa:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001bae:	a90f      	add	r1, sp, #60	; 0x3c
 8001bb0:	900f      	str	r0, [sp, #60]	; 0x3c
 8001bb2:	f24c 2018 	movw	r0, #49688	; 0xc218
 8001bb6:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001bba:	9014      	str	r0, [sp, #80]	; 0x50
 8001bbc:	2001      	movs	r0, #1
 8001bbe:	e9cd cc12 	strd	ip, ip, [sp, #72]	; 0x48
 8001bc2:	9011      	str	r0, [sp, #68]	; 0x44
 8001bc4:	f24c 3008 	movw	r0, #49928	; 0xc308
 8001bc8:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001bcc:	9010      	str	r0, [sp, #64]	; 0x40
 8001bce:	f642 101f 	movw	r0, #10527	; 0x291f
 8001bd2:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001bd6:	900d      	str	r0, [sp, #52]	; 0x34
 8001bd8:	a810      	add	r0, sp, #64	; 0x40
 8001bda:	900c      	str	r0, [sp, #48]	; 0x30
 8001bdc:	f241 70d3 	movw	r0, #6099	; 0x17d3
 8001be0:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001be4:	900b      	str	r0, [sp, #44]	; 0x2c
 8001be6:	e9cd 0109 	strd	r0, r1, [sp, #36]	; 0x24
 8001bea:	a80e      	add	r0, sp, #56	; 0x38
 8001bec:	a908      	add	r1, sp, #32
 8001bee:	9008      	str	r0, [sp, #32]
 8001bf0:	2003      	movs	r0, #3
 8001bf2:	9007      	str	r0, [sp, #28]
 8001bf4:	e9cd c105 	strd	ip, r1, [sp, #20]
 8001bf8:	f24c 3150 	movw	r1, #50000	; 0xc350
 8001bfc:	e9cd 0c03 	strd	r0, ip, [sp, #12]
 8001c00:	f24c 2000 	movw	r0, #49664	; 0xc200
 8001c04:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001c08:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001c0c:	9002      	str	r0, [sp, #8]
 8001c0e:	a802      	add	r0, sp, #8
 8001c10:	f000 f9dd 	bl	8001fce <_ZN4core9panicking9panic_fmt17h6b4d8e87b0965449E>
 8001c14:	defe      	udf	#254	; 0xfe

08001c16 <_ZN6mynewt2hw6sensor8bindings16set_poll_rate_ms17hcde389472a355443E>:
    #[doc = " - __`arg`__: type to check"]
    #[doc = ""]
    #[doc = " Return: 1 if matches, 0 if it doesn't match."]
    pub fn sensor_mgr_match_bytype(sensor: *mut sensor, arg1: *mut ::cty::c_void) -> ::cty::c_int;
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b096      	sub	sp, #88	; 0x58
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	6840      	ldr	r0, [r0, #4]
            StrnRep::ByteStr(bs) => {         
 8001c1e:	7813      	ldrb	r3, [r2, #0]
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d010      	beq.n	8001c46 <_ZN6mynewt2hw6sensor8bindings16set_poll_rate_ms17hcde389472a355443E+0x30>
 8001c24:	f8d2 e008 	ldr.w	lr, [r2, #8]
 8001c28:	2300      	movs	r3, #0
 8001c2a:	f04f 0c00 	mov.w	ip, #0
 8001c2e:	f1be 0201 	subs.w	r2, lr, #1
 8001c32:	bf28      	it	cs
 8001c34:	1883      	addcs	r3, r0, r2
 8001c36:	4572      	cmp	r2, lr
 8001c38:	bf28      	it	cs
 8001c3a:	4663      	movcs	r3, ip
 8001c3c:	2b00      	cmp	r3, #0
                assert_eq!(bs.last(), Some(&0u8), "no null");  //  Last byte must be 0.
 8001c3e:	9301      	str	r3, [sp, #4]
 8001c40:	d008      	beq.n	8001c54 <_ZN6mynewt2hw6sensor8bindings16set_poll_rate_ms17hcde389472a355443E+0x3e>
 8001c42:	781a      	ldrb	r2, [r3, #0]
 8001c44:	b932      	cbnz	r2, 8001c54 <_ZN6mynewt2hw6sensor8bindings16set_poll_rate_ms17hcde389472a355443E+0x3e>
 8001c46:	f003 fc57 	bl	80054f8 <sensor_set_poll_rate_ms>
 8001c4a:	2800      	cmp	r0, #0
 8001c4c:	bf08      	it	eq
 8001c4e:	2001      	moveq	r0, #1
 8001c50:	b016      	add	sp, #88	; 0x58
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	a801      	add	r0, sp, #4
 8001c56:	900e      	str	r0, [sp, #56]	; 0x38
 8001c58:	f24c 2090 	movw	r0, #49808	; 0xc290
 8001c5c:	f8cd c054 	str.w	ip, [sp, #84]	; 0x54
 8001c60:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001c64:	a90f      	add	r1, sp, #60	; 0x3c
 8001c66:	900f      	str	r0, [sp, #60]	; 0x3c
 8001c68:	f24c 2018 	movw	r0, #49688	; 0xc218
 8001c6c:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001c70:	9014      	str	r0, [sp, #80]	; 0x50
 8001c72:	2001      	movs	r0, #1
 8001c74:	e9cd cc12 	strd	ip, ip, [sp, #72]	; 0x48
 8001c78:	9011      	str	r0, [sp, #68]	; 0x44
 8001c7a:	f24c 3008 	movw	r0, #49928	; 0xc308
 8001c7e:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001c82:	9010      	str	r0, [sp, #64]	; 0x40
 8001c84:	f642 101f 	movw	r0, #10527	; 0x291f
 8001c88:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001c8c:	900d      	str	r0, [sp, #52]	; 0x34
 8001c8e:	a810      	add	r0, sp, #64	; 0x40
 8001c90:	900c      	str	r0, [sp, #48]	; 0x30
 8001c92:	f241 70d3 	movw	r0, #6099	; 0x17d3
 8001c96:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001c9a:	900b      	str	r0, [sp, #44]	; 0x2c
 8001c9c:	e9cd 0109 	strd	r0, r1, [sp, #36]	; 0x24
 8001ca0:	a80e      	add	r0, sp, #56	; 0x38
 8001ca2:	a908      	add	r1, sp, #32
 8001ca4:	9008      	str	r0, [sp, #32]
 8001ca6:	2003      	movs	r0, #3
 8001ca8:	9007      	str	r0, [sp, #28]
 8001caa:	e9cd c105 	strd	ip, r1, [sp, #20]
 8001cae:	f24c 3150 	movw	r1, #50000	; 0xc350
 8001cb2:	e9cd 0c03 	strd	r0, ip, [sp, #12]
 8001cb6:	f24c 2000 	movw	r0, #49664	; 0xc200
 8001cba:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001cbe:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001cc2:	9002      	str	r0, [sp, #8]
 8001cc4:	a802      	add	r0, sp, #8
 8001cc6:	f000 f982 	bl	8001fce <_ZN4core9panicking9panic_fmt17h6b4d8e87b0965449E>
 8001cca:	defe      	udf	#254	; 0xfe

08001ccc <_ZN6mynewt4libs14sensor_network22start_server_transport17he5c189d769aa6683E>:
impl Default for sensor_network_interface {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	f002 fa69 	bl	80041a4 <start_server_transport>
 8001cd2:	2800      	cmp	r0, #0
 8001cd4:	bf08      	it	eq
 8001cd6:	2001      	moveq	r0, #1
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <_ZN6mynewt4libs14sensor_network16init_server_post17hed16ed94721012abE>:
    pub fn register_collector_transport() -> ::cty::c_int;
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
    pub fn sensor_network_register_transport(iface_type: u8) -> ::cty::c_int;
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
 8001cda:	b510      	push	{r4, lr}
 8001cdc:	b096      	sub	sp, #88	; 0x58
 8001cde:	4604      	mov	r4, r0
            StrnRep::ByteStr(bs) => {         
 8001ce0:	780a      	ldrb	r2, [r1, #0]
 8001ce2:	6848      	ldr	r0, [r1, #4]
 8001ce4:	2a01      	cmp	r2, #1
 8001ce6:	d00e      	beq.n	8001d06 <_ZN6mynewt4libs14sensor_network16init_server_post17hed16ed94721012abE+0x2c>
 8001ce8:	688b      	ldr	r3, [r1, #8]
 8001cea:	2200      	movs	r2, #0
 8001cec:	f04f 0c00 	mov.w	ip, #0
 8001cf0:	1e59      	subs	r1, r3, #1
 8001cf2:	bf28      	it	cs
 8001cf4:	1842      	addcs	r2, r0, r1
 8001cf6:	4299      	cmp	r1, r3
 8001cf8:	bf28      	it	cs
 8001cfa:	4662      	movcs	r2, ip
 8001cfc:	2a00      	cmp	r2, #0
                assert_eq!(bs.last(), Some(&0u8), "no null");  //  Last byte must be 0.
 8001cfe:	9201      	str	r2, [sp, #4]
 8001d00:	d008      	beq.n	8001d14 <_ZN6mynewt4libs14sensor_network16init_server_post17hed16ed94721012abE+0x3a>
 8001d02:	7811      	ldrb	r1, [r2, #0]
 8001d04:	b931      	cbnz	r1, 8001d14 <_ZN6mynewt4libs14sensor_network16init_server_post17hed16ed94721012abE+0x3a>
 8001d06:	f002 faed 	bl	80042e4 <init_server_post>
 8001d0a:	7060      	strb	r0, [r4, #1]
 8001d0c:	2000      	movs	r0, #0
 8001d0e:	7020      	strb	r0, [r4, #0]
 8001d10:	b016      	add	sp, #88	; 0x58
 8001d12:	bd10      	pop	{r4, pc}
 8001d14:	a801      	add	r0, sp, #4
 8001d16:	900e      	str	r0, [sp, #56]	; 0x38
 8001d18:	f24c 2090 	movw	r0, #49808	; 0xc290
 8001d1c:	f8cd c054 	str.w	ip, [sp, #84]	; 0x54
 8001d20:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001d24:	a90f      	add	r1, sp, #60	; 0x3c
 8001d26:	900f      	str	r0, [sp, #60]	; 0x3c
 8001d28:	f24c 2018 	movw	r0, #49688	; 0xc218
 8001d2c:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001d30:	9014      	str	r0, [sp, #80]	; 0x50
 8001d32:	2001      	movs	r0, #1
 8001d34:	e9cd cc12 	strd	ip, ip, [sp, #72]	; 0x48
 8001d38:	9011      	str	r0, [sp, #68]	; 0x44
 8001d3a:	f24c 3008 	movw	r0, #49928	; 0xc308
 8001d3e:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001d42:	9010      	str	r0, [sp, #64]	; 0x40
 8001d44:	f642 101f 	movw	r0, #10527	; 0x291f
 8001d48:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001d4c:	900d      	str	r0, [sp, #52]	; 0x34
 8001d4e:	a810      	add	r0, sp, #64	; 0x40
 8001d50:	900c      	str	r0, [sp, #48]	; 0x30
 8001d52:	f241 70d3 	movw	r0, #6099	; 0x17d3
 8001d56:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001d5a:	900b      	str	r0, [sp, #44]	; 0x2c
 8001d5c:	e9cd 0109 	strd	r0, r1, [sp, #36]	; 0x24
 8001d60:	a80e      	add	r0, sp, #56	; 0x38
 8001d62:	a908      	add	r1, sp, #32
 8001d64:	9008      	str	r0, [sp, #32]
 8001d66:	2003      	movs	r0, #3
 8001d68:	9007      	str	r0, [sp, #28]
 8001d6a:	e9cd c105 	strd	ip, r1, [sp, #20]
 8001d6e:	f24c 3150 	movw	r1, #50000	; 0xc350
 8001d72:	e9cd 0c03 	strd	r0, ip, [sp, #12]
 8001d76:	f24c 2000 	movw	r0, #49664	; 0xc200
 8001d7a:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001d7e:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001d82:	9002      	str	r0, [sp, #8]
 8001d84:	a802      	add	r0, sp, #8
 8001d86:	f000 f922 	bl	8001fce <_ZN4core9panicking9panic_fmt17h6b4d8e87b0965449E>
 8001d8a:	defe      	udf	#254	; 0xfe

08001d8c <_ZN6mynewt4libs14sensor_network12prepare_post17h850eb70da8c09a26E>:
    pub fn init_collector_post() -> bool;
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
    pub fn sensor_network_init_post(iface_type: u8, uri: *const ::cty::c_char) -> bool;
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
 8001d8c:	b510      	push	{r4, lr}
 8001d8e:	4604      	mov	r4, r0
 8001d90:	4608      	mov	r0, r1
 8001d92:	f002 faab 	bl	80042ec <sensor_network_prepare_post>
 8001d96:	7060      	strb	r0, [r4, #1]
 8001d98:	2000      	movs	r0, #0
 8001d9a:	7020      	strb	r0, [r4, #0]
 8001d9c:	bd10      	pop	{r4, pc}

08001d9e <_ZN6mynewt4libs14sensor_network14do_server_post17h63b4208c05d74765E>:
    pub fn sensor_network_prepare_post(encoding: ::cty::c_int) -> bool;
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
 8001d9e:	b510      	push	{r4, lr}
 8001da0:	4604      	mov	r4, r0
 8001da2:	f002 fada 	bl	800435a <do_server_post>
 8001da6:	7060      	strb	r0, [r4, #1]
 8001da8:	2000      	movs	r0, #0
 8001daa:	7020      	strb	r0, [r4, #0]
 8001dac:	bd10      	pop	{r4, pc}

08001dae <_ZN6mynewt4libs14sensor_network13get_device_id17hd4a8ff26286a906dE>:
    pub fn should_send_to_collector(
        val: *mut sensor_value,
        device_name: *const ::cty::c_char,
    ) -> bool;
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
 8001dae:	b510      	push	{r4, lr}
 8001db0:	4604      	mov	r4, r0
 8001db2:	f002 fb33 	bl	800441c <get_device_id>
 8001db6:	60a0      	str	r0, [r4, #8]
 8001db8:	2001      	movs	r0, #1
 8001dba:	7120      	strb	r0, [r4, #4]
 8001dbc:	2000      	movs	r0, #0
 8001dbe:	6020      	str	r0, [r4, #0]
 8001dc0:	bd10      	pop	{r4, pc}
	...

08001dc4 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17hffcd2d6e43a98b23E>:
    #[derive(Debug, PartialEq)]
 8001dc4:	b510      	push	{r4, lr}
 8001dc6:	b084      	sub	sp, #16
 8001dc8:	6802      	ldr	r2, [r0, #0]
 8001dca:	f102 000f 	add.w	r0, r2, #15
 8001dce:	280e      	cmp	r0, #14
 8001dd0:	d80f      	bhi.n	8001df2 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17hffcd2d6e43a98b23E+0x2e>
 8001dd2:	e8df f000 	tbb	[pc, r0]
 8001dd6:	1908      	.short	0x1908
 8001dd8:	352f2721 	.word	0x352f2721
 8001ddc:	4f49413b 	.word	0x4f49413b
 8001de0:	69615b55 	.word	0x69615b55
 8001de4:	006f      	.short	0x006f
 8001de6:	f24c 326c 	movw	r2, #50028	; 0xc36c
 8001dea:	ac01      	add	r4, sp, #4
 8001dec:	f6c0 0200 	movt	r2, #2048	; 0x800
 8001df0:	e037      	b.n	8001e62 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17hffcd2d6e43a98b23E+0x9e>
 8001df2:	2001      	movs	r0, #1
 8001df4:	ac01      	add	r4, sp, #4
 8001df6:	f6cf 70ff 	movt	r0, #65535	; 0xffff
 8001dfa:	4282      	cmp	r2, r0
 8001dfc:	d162      	bne.n	8001ec4 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17hffcd2d6e43a98b23E+0x100>
 8001dfe:	f24c 3260 	movw	r2, #50016	; 0xc360
 8001e02:	f6c0 0200 	movt	r2, #2048	; 0x800
 8001e06:	e04c      	b.n	8001ea2 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17hffcd2d6e43a98b23E+0xde>
 8001e08:	ac01      	add	r4, sp, #4
 8001e0a:	f24c 3275 	movw	r2, #50037	; 0xc375
 8001e0e:	f6c0 0200 	movt	r2, #2048	; 0x800
 8001e12:	230d      	movs	r3, #13
 8001e14:	4620      	mov	r0, r4
 8001e16:	e05b      	b.n	8001ed0 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17hffcd2d6e43a98b23E+0x10c>
 8001e18:	f24c 3282 	movw	r2, #50050	; 0xc382
 8001e1c:	ac01      	add	r4, sp, #4
 8001e1e:	f6c0 0200 	movt	r2, #2048	; 0x800
 8001e22:	e03e      	b.n	8001ea2 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17hffcd2d6e43a98b23E+0xde>
 8001e24:	ac01      	add	r4, sp, #4
 8001e26:	f24c 328e 	movw	r2, #50062	; 0xc38e
 8001e2a:	f6c0 0200 	movt	r2, #2048	; 0x800
 8001e2e:	230b      	movs	r3, #11
 8001e30:	4620      	mov	r0, r4
 8001e32:	e04d      	b.n	8001ed0 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17hffcd2d6e43a98b23E+0x10c>
 8001e34:	f24c 3299 	movw	r2, #50073	; 0xc399
 8001e38:	ac01      	add	r4, sp, #4
 8001e3a:	f6c0 0200 	movt	r2, #2048	; 0x800
 8001e3e:	e030      	b.n	8001ea2 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17hffcd2d6e43a98b23E+0xde>
 8001e40:	f24c 32a5 	movw	r2, #50085	; 0xc3a5
 8001e44:	ac01      	add	r4, sp, #4
 8001e46:	f6c0 0200 	movt	r2, #2048	; 0x800
 8001e4a:	e038      	b.n	8001ebe <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17hffcd2d6e43a98b23E+0xfa>
 8001e4c:	f24c 32af 	movw	r2, #50095	; 0xc3af
 8001e50:	ac01      	add	r4, sp, #4
 8001e52:	f6c0 0200 	movt	r2, #2048	; 0x800
 8001e56:	e032      	b.n	8001ebe <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17hffcd2d6e43a98b23E+0xfa>
 8001e58:	f24c 32b9 	movw	r2, #50105	; 0xc3b9
 8001e5c:	ac01      	add	r4, sp, #4
 8001e5e:	f6c0 0200 	movt	r2, #2048	; 0x800
 8001e62:	4620      	mov	r0, r4
 8001e64:	2309      	movs	r3, #9
 8001e66:	e033      	b.n	8001ed0 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17hffcd2d6e43a98b23E+0x10c>
 8001e68:	f24c 32c2 	movw	r2, #50114	; 0xc3c2
 8001e6c:	ac01      	add	r4, sp, #4
 8001e6e:	f6c0 0200 	movt	r2, #2048	; 0x800
 8001e72:	e024      	b.n	8001ebe <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17hffcd2d6e43a98b23E+0xfa>
 8001e74:	f24c 32cc 	movw	r2, #50124	; 0xc3cc
 8001e78:	ac01      	add	r4, sp, #4
 8001e7a:	f6c0 0200 	movt	r2, #2048	; 0x800
 8001e7e:	e01e      	b.n	8001ebe <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17hffcd2d6e43a98b23E+0xfa>
 8001e80:	f24c 32d6 	movw	r2, #50134	; 0xc3d6
 8001e84:	ac01      	add	r4, sp, #4
 8001e86:	f6c0 0200 	movt	r2, #2048	; 0x800
 8001e8a:	e01f      	b.n	8001ecc <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17hffcd2d6e43a98b23E+0x108>
 8001e8c:	f24c 32dd 	movw	r2, #50141	; 0xc3dd
 8001e90:	ac01      	add	r4, sp, #4
 8001e92:	f6c0 0200 	movt	r2, #2048	; 0x800
 8001e96:	e012      	b.n	8001ebe <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17hffcd2d6e43a98b23E+0xfa>
 8001e98:	f24c 32e7 	movw	r2, #50151	; 0xc3e7
 8001e9c:	ac01      	add	r4, sp, #4
 8001e9e:	f6c0 0200 	movt	r2, #2048	; 0x800
 8001ea2:	4620      	mov	r0, r4
 8001ea4:	230c      	movs	r3, #12
 8001ea6:	e013      	b.n	8001ed0 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17hffcd2d6e43a98b23E+0x10c>
 8001ea8:	f24c 32f3 	movw	r2, #50163	; 0xc3f3
 8001eac:	ac01      	add	r4, sp, #4
 8001eae:	f6c0 0200 	movt	r2, #2048	; 0x800
 8001eb2:	e004      	b.n	8001ebe <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17hffcd2d6e43a98b23E+0xfa>
 8001eb4:	f24c 32fd 	movw	r2, #50173	; 0xc3fd
 8001eb8:	ac01      	add	r4, sp, #4
 8001eba:	f6c0 0200 	movt	r2, #2048	; 0x800
 8001ebe:	4620      	mov	r0, r4
 8001ec0:	230a      	movs	r3, #10
 8001ec2:	e005      	b.n	8001ed0 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17hffcd2d6e43a98b23E+0x10c>
 8001ec4:	f24c 4207 	movw	r2, #50183	; 0xc407
 8001ec8:	f6c0 0200 	movt	r2, #2048	; 0x800
 8001ecc:	4620      	mov	r0, r4
 8001ece:	2307      	movs	r3, #7
 8001ed0:	f001 f8ed 	bl	80030ae <_ZN4core3fmt9Formatter11debug_tuple17h793087e8ecab9022E>
 8001ed4:	4620      	mov	r0, r4
 8001ed6:	f000 fc7b 	bl	80027d0 <_ZN4core3fmt8builders10DebugTuple6finish17h24d91625b3672e6dE>
 8001eda:	b004      	add	sp, #16
 8001edc:	bd10      	pop	{r4, pc}

08001ede <_ZN4core3ptr18real_drop_in_place17h034ec8dd70295f85E>:
 8001ede:	4770      	bx	lr

08001ee0 <_ZN4core3ptr18real_drop_in_place17h0ef71ded6c57bedcE>:
 8001ee0:	4770      	bx	lr

08001ee2 <_ZN4core3ptr18real_drop_in_place17h921869e295dffcdcE>:
 8001ee2:	4770      	bx	lr

08001ee4 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h7bd32f961ec2bdfaE>:
 8001ee4:	b5b0      	push	{r4, r5, r7, lr}
 8001ee6:	b086      	sub	sp, #24
 8001ee8:	460c      	mov	r4, r1
 8001eea:	4605      	mov	r5, r0
 8001eec:	f001 faf3 	bl	80034d6 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h4ad837c30b835d03E>
 8001ef0:	b9a8      	cbnz	r0, 8001f1e <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h7bd32f961ec2bdfaE+0x3a>
 8001ef2:	f24c 4310 	movw	r3, #50192	; 0xc410
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001efc:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
 8001f00:	9205      	str	r2, [sp, #20]
 8001f02:	9304      	str	r3, [sp, #16]
 8001f04:	e9cd 2202 	strd	r2, r2, [sp, #8]
 8001f08:	2201      	movs	r2, #1
 8001f0a:	9201      	str	r2, [sp, #4]
 8001f0c:	f24c 4274 	movw	r2, #50292	; 0xc474
 8001f10:	f6c0 0200 	movt	r2, #2048	; 0x800
 8001f14:	9200      	str	r2, [sp, #0]
 8001f16:	466a      	mov	r2, sp
 8001f18:	f000 fd12 	bl	8002940 <_ZN4core3fmt5write17h51826aee11d21b9bE>
 8001f1c:	b110      	cbz	r0, 8001f24 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h7bd32f961ec2bdfaE+0x40>
 8001f1e:	2001      	movs	r0, #1
 8001f20:	b006      	add	sp, #24
 8001f22:	bdb0      	pop	{r4, r5, r7, pc}
 8001f24:	1d28      	adds	r0, r5, #4
 8001f26:	4621      	mov	r1, r4
 8001f28:	b006      	add	sp, #24
 8001f2a:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001f2e:	f001 bad2 	b.w	80034d6 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h4ad837c30b835d03E>

08001f32 <_ZN36_$LT$T$u20$as$u20$core..any..Any$GT$7type_id17h589f04726b9846deE>:
 8001f32:	f640 704d 	movw	r0, #3917	; 0xf4d
 8001f36:	f240 713c 	movw	r1, #1852	; 0x73c
 8001f3a:	f2cf 3047 	movt	r0, #62279	; 0xf347
 8001f3e:	f2cb 21aa 	movt	r1, #45738	; 0xb2aa
 8001f42:	4770      	bx	lr

08001f44 <_ZN4core5panic9PanicInfo8location17h5226165d8771f8a2E>:
 8001f44:	300c      	adds	r0, #12
 8001f46:	4770      	bx	lr

08001f48 <_ZN4core5panic8Location4file17h94cc6af18de736c4E>:
 8001f48:	e9d0 2100 	ldrd	r2, r1, [r0]
 8001f4c:	4610      	mov	r0, r2
 8001f4e:	4770      	bx	lr

08001f50 <_ZN4core5panic8Location4line17h3ffc63f14d0a6636E>:
 8001f50:	6880      	ldr	r0, [r0, #8]
 8001f52:	4770      	bx	lr

08001f54 <_ZN4core9panicking5panic17h53ca63c6ac6312f8E>:
 8001f54:	b08c      	sub	sp, #48	; 0x30
 8001f56:	e890 5006 	ldmia.w	r0, {r1, r2, ip, lr}
 8001f5a:	e9d0 3004 	ldrd	r3, r0, [r0, #16]
 8001f5e:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8001f62:	f24c 4210 	movw	r2, #50192	; 0xc410
 8001f66:	2100      	movs	r1, #0
 8001f68:	f6c0 0200 	movt	r2, #2048	; 0x800
 8001f6c:	9105      	str	r1, [sp, #20]
 8001f6e:	9204      	str	r2, [sp, #16]
 8001f70:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8001f74:	2101      	movs	r1, #1
 8001f76:	9101      	str	r1, [sp, #4]
 8001f78:	a906      	add	r1, sp, #24
 8001f7a:	9100      	str	r1, [sp, #0]
 8001f7c:	a908      	add	r1, sp, #32
 8001f7e:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 8001f82:	4668      	mov	r0, sp
 8001f84:	e9cd ce08 	strd	ip, lr, [sp, #32]
 8001f88:	f000 f821 	bl	8001fce <_ZN4core9panicking9panic_fmt17h6b4d8e87b0965449E>
 8001f8c:	defe      	udf	#254	; 0xfe

08001f8e <_ZN4core9panicking18panic_bounds_check17h946762cd0671aec9E>:
 8001f8e:	b08c      	sub	sp, #48	; 0x30
 8001f90:	4603      	mov	r3, r0
 8001f92:	f643 20a3 	movw	r0, #15011	; 0x3aa3
 8001f96:	e9cd 1200 	strd	r1, r2, [sp]
 8001f9a:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001f9e:	4669      	mov	r1, sp
 8001fa0:	900b      	str	r0, [sp, #44]	; 0x2c
 8001fa2:	e9cd 0109 	strd	r0, r1, [sp, #36]	; 0x24
 8001fa6:	a801      	add	r0, sp, #4
 8001fa8:	9008      	str	r0, [sp, #32]
 8001faa:	2002      	movs	r0, #2
 8001fac:	a908      	add	r1, sp, #32
 8001fae:	9007      	str	r0, [sp, #28]
 8001fb0:	9106      	str	r1, [sp, #24]
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	9105      	str	r1, [sp, #20]
 8001fb6:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8001fba:	f24c 40f4 	movw	r0, #50420	; 0xc4f4
 8001fbe:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	9002      	str	r0, [sp, #8]
 8001fc6:	a802      	add	r0, sp, #8
 8001fc8:	f000 f801 	bl	8001fce <_ZN4core9panicking9panic_fmt17h6b4d8e87b0965449E>
 8001fcc:	defe      	udf	#254	; 0xfe

08001fce <_ZN4core9panicking9panic_fmt17h6b4d8e87b0965449E>:
 8001fce:	b088      	sub	sp, #32
 8001fd0:	e9d1 c300 	ldrd	ip, r3, [r1]
 8001fd4:	e9d1 2102 	ldrd	r2, r1, [r1, #8]
 8001fd8:	9107      	str	r1, [sp, #28]
 8001fda:	e9cd 3205 	strd	r3, r2, [sp, #20]
 8001fde:	e9cd 0c03 	strd	r0, ip, [sp, #12]
 8001fe2:	f24c 40d0 	movw	r0, #50384	; 0xc4d0
 8001fe6:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001fea:	9002      	str	r0, [sp, #8]
 8001fec:	f24c 4010 	movw	r0, #50192	; 0xc410
 8001ff0:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001ff4:	9001      	str	r0, [sp, #4]
 8001ff6:	a801      	add	r0, sp, #4
 8001ff8:	f7ff fb90 	bl	800171c <rust_begin_unwind>
 8001ffc:	defe      	udf	#254	; 0xfe

08001ffe <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E>:
 8001ffe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002002:	b081      	sub	sp, #4
 8002004:	f011 0303 	ands.w	r3, r1, #3
 8002008:	4684      	mov	ip, r0
 800200a:	f04f 0000 	mov.w	r0, #0
 800200e:	bf18      	it	ne
 8002010:	f1d3 0e04 	rsbsne	lr, r3, #4
 8002014:	d150      	bne.n	80020b8 <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E+0xba>
 8002016:	fa5f f38c 	uxtb.w	r3, ip
 800201a:	2a08      	cmp	r2, #8
 800201c:	d31d      	bcc.n	800205a <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E+0x5c>
 800201e:	f1a2 0c08 	sub.w	ip, r2, #8
 8002022:	4560      	cmp	r0, ip
 8002024:	d819      	bhi.n	800205a <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E+0x5c>
 8002026:	f04f 3701 	mov.w	r7, #16843009	; 0x1010101
 800202a:	fb03 f507 	mul.w	r5, r3, r7
 800202e:	580f      	ldr	r7, [r1, r0]
 8002030:	406f      	eors	r7, r5
 8002032:	f1a7 3401 	sub.w	r4, r7, #16843009	; 0x1010101
 8002036:	ea24 0707 	bic.w	r7, r4, r7
 800203a:	180c      	adds	r4, r1, r0
 800203c:	6864      	ldr	r4, [r4, #4]
 800203e:	406c      	eors	r4, r5
 8002040:	f1a4 3601 	sub.w	r6, r4, #16843009	; 0x1010101
 8002044:	43a6      	bics	r6, r4
 8002046:	4337      	orrs	r7, r6
 8002048:	f017 3f80 	tst.w	r7, #2155905152	; 0x80808080
 800204c:	d102      	bne.n	8002054 <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E+0x56>
 800204e:	3008      	adds	r0, #8
 8002050:	4560      	cmp	r0, ip
 8002052:	d9ec      	bls.n	800202e <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E+0x30>
 8002054:	4290      	cmp	r0, r2
 8002056:	f200 80c2 	bhi.w	80021de <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E+0x1e0>
 800205a:	180c      	adds	r4, r1, r0
 800205c:	eb01 0e02 	add.w	lr, r1, r2
 8002060:	eba2 0c00 	sub.w	ip, r2, r0
 8002064:	2100      	movs	r1, #0
 8002066:	4626      	mov	r6, r4
 8002068:	2200      	movs	r2, #0
 800206a:	ebae 0606 	sub.w	r6, lr, r6
 800206e:	1865      	adds	r5, r4, r1
 8002070:	2e03      	cmp	r6, #3
 8002072:	f240 8081 	bls.w	8002178 <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E+0x17a>
 8002076:	782e      	ldrb	r6, [r5, #0]
 8002078:	1af7      	subs	r7, r6, r3
 800207a:	bf18      	it	ne
 800207c:	2701      	movne	r7, #1
 800207e:	443a      	add	r2, r7
 8002080:	429e      	cmp	r6, r3
 8002082:	d016      	beq.n	80020b2 <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E+0xb4>
 8002084:	786e      	ldrb	r6, [r5, #1]
 8002086:	1af7      	subs	r7, r6, r3
 8002088:	bf18      	it	ne
 800208a:	2701      	movne	r7, #1
 800208c:	443a      	add	r2, r7
 800208e:	429e      	cmp	r6, r3
 8002090:	d00f      	beq.n	80020b2 <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E+0xb4>
 8002092:	78ae      	ldrb	r6, [r5, #2]
 8002094:	1af7      	subs	r7, r6, r3
 8002096:	bf18      	it	ne
 8002098:	2701      	movne	r7, #1
 800209a:	443a      	add	r2, r7
 800209c:	429e      	cmp	r6, r3
 800209e:	d008      	beq.n	80020b2 <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E+0xb4>
 80020a0:	78ef      	ldrb	r7, [r5, #3]
 80020a2:	3104      	adds	r1, #4
 80020a4:	1afe      	subs	r6, r7, r3
 80020a6:	bf18      	it	ne
 80020a8:	2601      	movne	r6, #1
 80020aa:	4432      	add	r2, r6
 80020ac:	1d2e      	adds	r6, r5, #4
 80020ae:	429f      	cmp	r7, r3
 80020b0:	d1db      	bne.n	800206a <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E+0x6c>
 80020b2:	2101      	movs	r1, #1
 80020b4:	1813      	adds	r3, r2, r0
 80020b6:	e02c      	b.n	8002112 <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E+0x114>
 80020b8:	4596      	cmp	lr, r2
 80020ba:	bf88      	it	hi
 80020bc:	4696      	movhi	lr, r2
 80020be:	eb01 080e 	add.w	r8, r1, lr
 80020c2:	2300      	movs	r3, #0
 80020c4:	4674      	mov	r4, lr
 80020c6:	460d      	mov	r5, r1
 80020c8:	eba8 0605 	sub.w	r6, r8, r5
 80020cc:	2e03      	cmp	r6, #3
 80020ce:	d925      	bls.n	800211c <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E+0x11e>
 80020d0:	782f      	ldrb	r7, [r5, #0]
 80020d2:	fa5f f68c 	uxtb.w	r6, ip
 80020d6:	1bb8      	subs	r0, r7, r6
 80020d8:	bf18      	it	ne
 80020da:	2001      	movne	r0, #1
 80020dc:	4403      	add	r3, r0
 80020de:	42b7      	cmp	r7, r6
 80020e0:	d016      	beq.n	8002110 <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E+0x112>
 80020e2:	7868      	ldrb	r0, [r5, #1]
 80020e4:	1b87      	subs	r7, r0, r6
 80020e6:	bf18      	it	ne
 80020e8:	2701      	movne	r7, #1
 80020ea:	443b      	add	r3, r7
 80020ec:	42b0      	cmp	r0, r6
 80020ee:	d00f      	beq.n	8002110 <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E+0x112>
 80020f0:	78a8      	ldrb	r0, [r5, #2]
 80020f2:	1b87      	subs	r7, r0, r6
 80020f4:	bf18      	it	ne
 80020f6:	2701      	movne	r7, #1
 80020f8:	443b      	add	r3, r7
 80020fa:	42b0      	cmp	r0, r6
 80020fc:	d008      	beq.n	8002110 <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E+0x112>
 80020fe:	78e8      	ldrb	r0, [r5, #3]
 8002100:	3c04      	subs	r4, #4
 8002102:	3504      	adds	r5, #4
 8002104:	1b87      	subs	r7, r0, r6
 8002106:	bf18      	it	ne
 8002108:	2701      	movne	r7, #1
 800210a:	443b      	add	r3, r7
 800210c:	42b0      	cmp	r0, r6
 800210e:	d1db      	bne.n	80020c8 <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E+0xca>
 8002110:	2101      	movs	r1, #1
 8002112:	4608      	mov	r0, r1
 8002114:	4619      	mov	r1, r3
 8002116:	b001      	add	sp, #4
 8002118:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800211c:	2c00      	cmp	r4, #0
 800211e:	d05c      	beq.n	80021da <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E+0x1dc>
 8002120:	462f      	mov	r7, r5
 8002122:	fa5f f68c 	uxtb.w	r6, ip
 8002126:	f817 9b01 	ldrb.w	r9, [r7], #1
 800212a:	ebb9 0006 	subs.w	r0, r9, r6
 800212e:	bf18      	it	ne
 8002130:	2001      	movne	r0, #1
 8002132:	4403      	add	r3, r0
 8002134:	45b1      	cmp	r9, r6
 8002136:	d0eb      	beq.n	8002110 <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E+0x112>
 8002138:	4547      	cmp	r7, r8
 800213a:	d04e      	beq.n	80021da <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E+0x1dc>
 800213c:	7868      	ldrb	r0, [r5, #1]
 800213e:	1b87      	subs	r7, r0, r6
 8002140:	bf18      	it	ne
 8002142:	2701      	movne	r7, #1
 8002144:	443b      	add	r3, r7
 8002146:	42b0      	cmp	r0, r6
 8002148:	d0e2      	beq.n	8002110 <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E+0x112>
 800214a:	1ca8      	adds	r0, r5, #2
 800214c:	4540      	cmp	r0, r8
 800214e:	d044      	beq.n	80021da <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E+0x1dc>
 8002150:	78a8      	ldrb	r0, [r5, #2]
 8002152:	1b87      	subs	r7, r0, r6
 8002154:	bf18      	it	ne
 8002156:	2701      	movne	r7, #1
 8002158:	443b      	add	r3, r7
 800215a:	42b0      	cmp	r0, r6
 800215c:	d0d8      	beq.n	8002110 <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E+0x112>
 800215e:	1ce8      	adds	r0, r5, #3
 8002160:	4540      	cmp	r0, r8
 8002162:	d03a      	beq.n	80021da <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E+0x1dc>
 8002164:	78e8      	ldrb	r0, [r5, #3]
 8002166:	3c04      	subs	r4, #4
 8002168:	3504      	adds	r5, #4
 800216a:	1b87      	subs	r7, r0, r6
 800216c:	bf18      	it	ne
 800216e:	2701      	movne	r7, #1
 8002170:	443b      	add	r3, r7
 8002172:	42b0      	cmp	r0, r6
 8002174:	d1d2      	bne.n	800211c <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E+0x11e>
 8002176:	e7cb      	b.n	8002110 <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E+0x112>
 8002178:	ebac 0401 	sub.w	r4, ip, r1
 800217c:	b35c      	cbz	r4, 80021d6 <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E+0x1d8>
 800217e:	4629      	mov	r1, r5
 8002180:	f811 7b01 	ldrb.w	r7, [r1], #1
 8002184:	1afe      	subs	r6, r7, r3
 8002186:	bf18      	it	ne
 8002188:	2601      	movne	r6, #1
 800218a:	4432      	add	r2, r6
 800218c:	429f      	cmp	r7, r3
 800218e:	f43f af90 	beq.w	80020b2 <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E+0xb4>
 8002192:	4571      	cmp	r1, lr
 8002194:	d01f      	beq.n	80021d6 <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E+0x1d8>
 8002196:	7869      	ldrb	r1, [r5, #1]
 8002198:	1acf      	subs	r7, r1, r3
 800219a:	bf18      	it	ne
 800219c:	2701      	movne	r7, #1
 800219e:	443a      	add	r2, r7
 80021a0:	4299      	cmp	r1, r3
 80021a2:	f43f af86 	beq.w	80020b2 <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E+0xb4>
 80021a6:	1ca9      	adds	r1, r5, #2
 80021a8:	4571      	cmp	r1, lr
 80021aa:	d014      	beq.n	80021d6 <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E+0x1d8>
 80021ac:	78a9      	ldrb	r1, [r5, #2]
 80021ae:	1acf      	subs	r7, r1, r3
 80021b0:	bf18      	it	ne
 80021b2:	2701      	movne	r7, #1
 80021b4:	443a      	add	r2, r7
 80021b6:	4299      	cmp	r1, r3
 80021b8:	f43f af7b 	beq.w	80020b2 <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E+0xb4>
 80021bc:	1ce9      	adds	r1, r5, #3
 80021be:	4571      	cmp	r1, lr
 80021c0:	d009      	beq.n	80021d6 <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E+0x1d8>
 80021c2:	78e9      	ldrb	r1, [r5, #3]
 80021c4:	3c04      	subs	r4, #4
 80021c6:	3504      	adds	r5, #4
 80021c8:	1acf      	subs	r7, r1, r3
 80021ca:	bf18      	it	ne
 80021cc:	2701      	movne	r7, #1
 80021ce:	443a      	add	r2, r7
 80021d0:	4299      	cmp	r1, r3
 80021d2:	d1d3      	bne.n	800217c <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E+0x17e>
 80021d4:	e76d      	b.n	80020b2 <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E+0xb4>
 80021d6:	2100      	movs	r1, #0
 80021d8:	e76c      	b.n	80020b4 <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E+0xb6>
 80021da:	4670      	mov	r0, lr
 80021dc:	e71b      	b.n	8002016 <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E+0x18>
 80021de:	4611      	mov	r1, r2
 80021e0:	f000 f823 	bl	800222a <_ZN4core5slice22slice_index_order_fail17h604ca25004a88762E>
 80021e4:	defe      	udf	#254	; 0xfe

080021e6 <_ZN4core5slice20slice_index_len_fail17hedb5bb240677a6b7E>:
 80021e6:	b08c      	sub	sp, #48	; 0x30
 80021e8:	e9cd 0100 	strd	r0, r1, [sp]
 80021ec:	f643 20a3 	movw	r0, #15011	; 0x3aa3
 80021f0:	a901      	add	r1, sp, #4
 80021f2:	f6c0 0000 	movt	r0, #2048	; 0x800
 80021f6:	900b      	str	r0, [sp, #44]	; 0x2c
 80021f8:	e9cd 0109 	strd	r0, r1, [sp, #36]	; 0x24
 80021fc:	4668      	mov	r0, sp
 80021fe:	9008      	str	r0, [sp, #32]
 8002200:	2002      	movs	r0, #2
 8002202:	a908      	add	r1, sp, #32
 8002204:	9007      	str	r0, [sp, #28]
 8002206:	9106      	str	r1, [sp, #24]
 8002208:	2100      	movs	r1, #0
 800220a:	9105      	str	r1, [sp, #20]
 800220c:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8002210:	f24c 6020 	movw	r0, #50720	; 0xc620
 8002214:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002218:	f24c 6130 	movw	r1, #50736	; 0xc630
 800221c:	9002      	str	r0, [sp, #8]
 800221e:	a802      	add	r0, sp, #8
 8002220:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002224:	f7ff fed3 	bl	8001fce <_ZN4core9panicking9panic_fmt17h6b4d8e87b0965449E>
 8002228:	defe      	udf	#254	; 0xfe

0800222a <_ZN4core5slice22slice_index_order_fail17h604ca25004a88762E>:
 800222a:	b08c      	sub	sp, #48	; 0x30
 800222c:	e9cd 0100 	strd	r0, r1, [sp]
 8002230:	f643 20a3 	movw	r0, #15011	; 0x3aa3
 8002234:	a901      	add	r1, sp, #4
 8002236:	f6c0 0000 	movt	r0, #2048	; 0x800
 800223a:	900b      	str	r0, [sp, #44]	; 0x2c
 800223c:	e9cd 0109 	strd	r0, r1, [sp, #36]	; 0x24
 8002240:	4668      	mov	r0, sp
 8002242:	9008      	str	r0, [sp, #32]
 8002244:	2002      	movs	r0, #2
 8002246:	a908      	add	r1, sp, #32
 8002248:	9007      	str	r0, [sp, #28]
 800224a:	9106      	str	r1, [sp, #24]
 800224c:	2100      	movs	r1, #0
 800224e:	9105      	str	r1, [sp, #20]
 8002250:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8002254:	f24c 6064 	movw	r0, #50788	; 0xc664
 8002258:	f6c0 0000 	movt	r0, #2048	; 0x800
 800225c:	f24c 6174 	movw	r1, #50804	; 0xc674
 8002260:	9002      	str	r0, [sp, #8]
 8002262:	a802      	add	r0, sp, #8
 8002264:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002268:	f7ff feb1 	bl	8001fce <_ZN4core9panicking9panic_fmt17h6b4d8e87b0965449E>
 800226c:	defe      	udf	#254	; 0xfe

0800226e <_ZN4core3str16slice_error_fail17heb8f3fc076617590E>:
 800226e:	b09a      	sub	sp, #104	; 0x68
 8002270:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8002274:	e9cd 2300 	strd	r2, r3, [sp]
 8002278:	d802      	bhi.n	8002280 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x12>
 800227a:	2501      	movs	r5, #1
 800227c:	468c      	mov	ip, r1
 800227e:	e03e      	b.n	80022fe <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x90>
 8002280:	f1c1 0e00 	rsb	lr, r1, #0
 8002284:	f44f 7c80 	mov.w	ip, #256	; 0x100
 8002288:	458c      	cmp	ip, r1
 800228a:	d205      	bcs.n	8002298 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x2a>
 800228c:	f910 400c 	ldrsb.w	r4, [r0, ip]
 8002290:	f114 0f41 	cmn.w	r4, #65	; 0x41
 8002294:	f300 80ee 	bgt.w	8002474 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x206>
 8002298:	eb0e 040c 	add.w	r4, lr, ip
 800229c:	f1ac 0601 	sub.w	r6, ip, #1
 80022a0:	2c01      	cmp	r4, #1
 80022a2:	d02a      	beq.n	80022fa <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x8c>
 80022a4:	428e      	cmp	r6, r1
 80022a6:	d206      	bcs.n	80022b6 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x48>
 80022a8:	eb00 050c 	add.w	r5, r0, ip
 80022ac:	f915 5c01 	ldrsb.w	r5, [r5, #-1]
 80022b0:	f115 0f41 	cmn.w	r5, #65	; 0x41
 80022b4:	dc21      	bgt.n	80022fa <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x8c>
 80022b6:	f1ac 0602 	sub.w	r6, ip, #2
 80022ba:	2c02      	cmp	r4, #2
 80022bc:	d01d      	beq.n	80022fa <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x8c>
 80022be:	428e      	cmp	r6, r1
 80022c0:	d206      	bcs.n	80022d0 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x62>
 80022c2:	eb00 050c 	add.w	r5, r0, ip
 80022c6:	f915 5c02 	ldrsb.w	r5, [r5, #-2]
 80022ca:	f115 0f41 	cmn.w	r5, #65	; 0x41
 80022ce:	dc14      	bgt.n	80022fa <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x8c>
 80022d0:	f1ac 0603 	sub.w	r6, ip, #3
 80022d4:	2c03      	cmp	r4, #3
 80022d6:	d010      	beq.n	80022fa <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x8c>
 80022d8:	428e      	cmp	r6, r1
 80022da:	d206      	bcs.n	80022ea <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x7c>
 80022dc:	eb00 050c 	add.w	r5, r0, ip
 80022e0:	f915 5c03 	ldrsb.w	r5, [r5, #-3]
 80022e4:	f115 0f41 	cmn.w	r5, #65	; 0x41
 80022e8:	dc07      	bgt.n	80022fa <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x8c>
 80022ea:	f1bc 0c04 	subs.w	ip, ip, #4
 80022ee:	f04f 0500 	mov.w	r5, #0
 80022f2:	d004      	beq.n	80022fe <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x90>
 80022f4:	2c04      	cmp	r4, #4
 80022f6:	d1c7      	bne.n	8002288 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x1a>
 80022f8:	e001      	b.n	80022fe <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x90>
 80022fa:	2500      	movs	r5, #0
 80022fc:	46b4      	mov	ip, r6
 80022fe:	2605      	movs	r6, #5
 8002300:	2d00      	cmp	r5, #0
 8002302:	f24c 753a 	movw	r5, #51002	; 0xc73a
 8002306:	e9cd 0c02 	strd	r0, ip, [sp, #8]
 800230a:	bf18      	it	ne
 800230c:	2600      	movne	r6, #0
 800230e:	9605      	str	r6, [sp, #20]
 8002310:	f24c 4610 	movw	r6, #50192	; 0xc410
 8002314:	f6c0 0500 	movt	r5, #2048	; 0x800
 8002318:	f6c0 0600 	movt	r6, #2048	; 0x800
 800231c:	bf18      	it	ne
 800231e:	4635      	movne	r5, r6
 8002320:	428a      	cmp	r2, r1
 8002322:	9504      	str	r5, [sp, #16]
 8002324:	bf98      	it	ls
 8002326:	428b      	cmpls	r3, r1
 8002328:	d929      	bls.n	800237e <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x110>
 800232a:	428a      	cmp	r2, r1
 800232c:	f643 30eb 	movw	r0, #15339	; 0x3beb
 8002330:	a904      	add	r1, sp, #16
 8002332:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002336:	bf88      	it	hi
 8002338:	4613      	movhi	r3, r2
 800233a:	9308      	str	r3, [sp, #32]
 800233c:	9015      	str	r0, [sp, #84]	; 0x54
 800233e:	e9cd 0113 	strd	r0, r1, [sp, #76]	; 0x4c
 8002342:	a802      	add	r0, sp, #8
 8002344:	9012      	str	r0, [sp, #72]	; 0x48
 8002346:	f643 20a3 	movw	r0, #15011	; 0x3aa3
 800234a:	f6c0 0000 	movt	r0, #2048	; 0x800
 800234e:	a910      	add	r1, sp, #64	; 0x40
 8002350:	9011      	str	r0, [sp, #68]	; 0x44
 8002352:	a808      	add	r0, sp, #32
 8002354:	9010      	str	r0, [sp, #64]	; 0x40
 8002356:	2003      	movs	r0, #3
 8002358:	900f      	str	r0, [sp, #60]	; 0x3c
 800235a:	910e      	str	r1, [sp, #56]	; 0x38
 800235c:	2100      	movs	r1, #0
 800235e:	910d      	str	r1, [sp, #52]	; 0x34
 8002360:	e9cd 010b 	strd	r0, r1, [sp, #44]	; 0x2c
 8002364:	f24c 7060 	movw	r0, #51040	; 0xc760
 8002368:	f6c0 0000 	movt	r0, #2048	; 0x800
 800236c:	f24c 7178 	movw	r1, #51064	; 0xc778
 8002370:	900a      	str	r0, [sp, #40]	; 0x28
 8002372:	a80a      	add	r0, sp, #40	; 0x28
 8002374:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002378:	f7ff fe29 	bl	8001fce <_ZN4core9panicking9panic_fmt17h6b4d8e87b0965449E>
 800237c:	defe      	udf	#254	; 0xfe
 800237e:	429a      	cmp	r2, r3
 8002380:	f200 80db 	bhi.w	800253a <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x2cc>
 8002384:	2a00      	cmp	r2, #0
 8002386:	bf18      	it	ne
 8002388:	4291      	cmpne	r1, r2
 800238a:	d156      	bne.n	800243a <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x1cc>
 800238c:	461a      	mov	r2, r3
 800238e:	2a00      	cmp	r2, #0
 8002390:	9206      	str	r2, [sp, #24]
 8002392:	bf18      	it	ne
 8002394:	428a      	cmpne	r2, r1
 8002396:	d103      	bne.n	80023a0 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x132>
 8002398:	4613      	mov	r3, r2
 800239a:	428b      	cmp	r3, r1
 800239c:	d03c      	beq.n	8002418 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x1aa>
 800239e:	e042      	b.n	8002426 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x1b8>
 80023a0:	f1a0 0c01 	sub.w	ip, r0, #1
 80023a4:	f101 0e02 	add.w	lr, r1, #2
 80023a8:	1ccc      	adds	r4, r1, #3
 80023aa:	1c4d      	adds	r5, r1, #1
 80023ac:	1d0e      	adds	r6, r1, #4
 80023ae:	428a      	cmp	r2, r1
 80023b0:	d206      	bcs.n	80023c0 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x152>
 80023b2:	eb0c 0302 	add.w	r3, ip, r2
 80023b6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80023ba:	f113 0f40 	cmn.w	r3, #64	; 0x40
 80023be:	daeb      	bge.n	8002398 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x12a>
 80023c0:	1e53      	subs	r3, r2, #1
 80023c2:	bf18      	it	ne
 80023c4:	4295      	cmpne	r5, r2
 80023c6:	d025      	beq.n	8002414 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x1a6>
 80023c8:	428b      	cmp	r3, r1
 80023ca:	d204      	bcs.n	80023d6 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x168>
 80023cc:	f91c 7002 	ldrsb.w	r7, [ip, r2]
 80023d0:	f117 0f41 	cmn.w	r7, #65	; 0x41
 80023d4:	dc1e      	bgt.n	8002414 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x1a6>
 80023d6:	1e93      	subs	r3, r2, #2
 80023d8:	bf18      	it	ne
 80023da:	4596      	cmpne	lr, r2
 80023dc:	d01a      	beq.n	8002414 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x1a6>
 80023de:	428b      	cmp	r3, r1
 80023e0:	d206      	bcs.n	80023f0 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x182>
 80023e2:	eb0c 0702 	add.w	r7, ip, r2
 80023e6:	f917 7c01 	ldrsb.w	r7, [r7, #-1]
 80023ea:	f117 0f41 	cmn.w	r7, #65	; 0x41
 80023ee:	dc11      	bgt.n	8002414 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x1a6>
 80023f0:	1ed3      	subs	r3, r2, #3
 80023f2:	bf18      	it	ne
 80023f4:	4294      	cmpne	r4, r2
 80023f6:	d00d      	beq.n	8002414 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x1a6>
 80023f8:	428b      	cmp	r3, r1
 80023fa:	d206      	bcs.n	800240a <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x19c>
 80023fc:	eb0c 0702 	add.w	r7, ip, r2
 8002400:	f917 7c02 	ldrsb.w	r7, [r7, #-2]
 8002404:	f117 0f41 	cmn.w	r7, #65	; 0x41
 8002408:	dc04      	bgt.n	8002414 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x1a6>
 800240a:	1f13      	subs	r3, r2, #4
 800240c:	d002      	beq.n	8002414 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x1a6>
 800240e:	4296      	cmp	r6, r2
 8002410:	461a      	mov	r2, r3
 8002412:	d1cc      	bne.n	80023ae <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x140>
 8002414:	428b      	cmp	r3, r1
 8002416:	d106      	bne.n	8002426 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x1b8>
 8002418:	f24c 50c8 	movw	r0, #50632	; 0xc5c8
 800241c:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002420:	f7ff fd98 	bl	8001f54 <_ZN4core9panicking5panic17h53ca63c6ac6312f8E>
 8002424:	defe      	udf	#254	; 0xfe
 8002426:	18c4      	adds	r4, r0, r3
 8002428:	4625      	mov	r5, r4
 800242a:	f915 6b01 	ldrsb.w	r6, [r5], #1
 800242e:	2e00      	cmp	r6, #0
 8002430:	b2f2      	uxtb	r2, r6
 8002432:	db09      	blt.n	8002448 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x1da>
 8002434:	9207      	str	r2, [sp, #28]
 8002436:	2101      	movs	r1, #1
 8002438:	e048      	b.n	80024cc <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x25e>
 800243a:	d9a8      	bls.n	800238e <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x120>
 800243c:	5686      	ldrsb	r6, [r0, r2]
 800243e:	f116 0f40 	cmn.w	r6, #64	; 0x40
 8002442:	bfa8      	it	ge
 8002444:	461a      	movge	r2, r3
 8002446:	e7a2      	b.n	800238e <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x120>
 8002448:	4408      	add	r0, r1
 800244a:	4285      	cmp	r5, r0
 800244c:	d102      	bne.n	8002454 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x1e6>
 800244e:	2500      	movs	r5, #0
 8002450:	4606      	mov	r6, r0
 8002452:	e003      	b.n	800245c <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x1ee>
 8002454:	7861      	ldrb	r1, [r4, #1]
 8002456:	1ca6      	adds	r6, r4, #2
 8002458:	f001 053f 	and.w	r5, r1, #63	; 0x3f
 800245c:	f002 011f 	and.w	r1, r2, #31
 8002460:	2ae0      	cmp	r2, #224	; 0xe0
 8002462:	d304      	bcc.n	800246e <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x200>
 8002464:	4286      	cmp	r6, r0
 8002466:	d107      	bne.n	8002478 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x20a>
 8002468:	2400      	movs	r4, #0
 800246a:	4606      	mov	r6, r0
 800246c:	e008      	b.n	8002480 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x212>
 800246e:	ea45 1081 	orr.w	r0, r5, r1, lsl #6
 8002472:	e01c      	b.n	80024ae <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x240>
 8002474:	2500      	movs	r5, #0
 8002476:	e742      	b.n	80022fe <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x90>
 8002478:	f816 4b01 	ldrb.w	r4, [r6], #1
 800247c:	f004 043f 	and.w	r4, r4, #63	; 0x3f
 8002480:	ea44 1585 	orr.w	r5, r4, r5, lsl #6
 8002484:	2af0      	cmp	r2, #240	; 0xf0
 8002486:	d310      	bcc.n	80024aa <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x23c>
 8002488:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
 800248c:	ea02 4181 	and.w	r1, r2, r1, lsl #18
 8002490:	4286      	cmp	r6, r0
 8002492:	bf1a      	itte	ne
 8002494:	7830      	ldrbne	r0, [r6, #0]
 8002496:	f000 003f 	andne.w	r0, r0, #63	; 0x3f
 800249a:	2000      	moveq	r0, #0
 800249c:	ea41 1185 	orr.w	r1, r1, r5, lsl #6
 80024a0:	4408      	add	r0, r1
 80024a2:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
 80024a6:	d0b7      	beq.n	8002418 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x1aa>
 80024a8:	e001      	b.n	80024ae <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x240>
 80024aa:	ea45 3001 	orr.w	r0, r5, r1, lsl #12
 80024ae:	2880      	cmp	r0, #128	; 0x80
 80024b0:	9007      	str	r0, [sp, #28]
 80024b2:	d201      	bcs.n	80024b8 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x24a>
 80024b4:	2101      	movs	r1, #1
 80024b6:	e009      	b.n	80024cc <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x25e>
 80024b8:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 80024bc:	d201      	bcs.n	80024c2 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x254>
 80024be:	2102      	movs	r1, #2
 80024c0:	e004      	b.n	80024cc <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x25e>
 80024c2:	2104      	movs	r1, #4
 80024c4:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80024c8:	bf38      	it	cc
 80024ca:	2103      	movcc	r1, #3
 80024cc:	4419      	add	r1, r3
 80024ce:	9308      	str	r3, [sp, #32]
 80024d0:	9109      	str	r1, [sp, #36]	; 0x24
 80024d2:	f643 31eb 	movw	r1, #15339	; 0x3beb
 80024d6:	aa04      	add	r2, sp, #16
 80024d8:	f6c0 0100 	movt	r1, #2048	; 0x800
 80024dc:	9119      	str	r1, [sp, #100]	; 0x64
 80024de:	a808      	add	r0, sp, #32
 80024e0:	e9cd 1217 	strd	r1, r2, [sp, #92]	; 0x5c
 80024e4:	a902      	add	r1, sp, #8
 80024e6:	9116      	str	r1, [sp, #88]	; 0x58
 80024e8:	f641 61e5 	movw	r1, #7909	; 0x1ee5
 80024ec:	f6c0 0100 	movt	r1, #2048	; 0x800
 80024f0:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
 80024f4:	f243 00e1 	movw	r0, #12513	; 0x30e1
 80024f8:	f6c0 0000 	movt	r0, #2048	; 0x800
 80024fc:	a910      	add	r1, sp, #64	; 0x40
 80024fe:	9013      	str	r0, [sp, #76]	; 0x4c
 8002500:	a807      	add	r0, sp, #28
 8002502:	9012      	str	r0, [sp, #72]	; 0x48
 8002504:	f643 20a3 	movw	r0, #15011	; 0x3aa3
 8002508:	f6c0 0000 	movt	r0, #2048	; 0x800
 800250c:	9011      	str	r0, [sp, #68]	; 0x44
 800250e:	a806      	add	r0, sp, #24
 8002510:	9010      	str	r0, [sp, #64]	; 0x40
 8002512:	2005      	movs	r0, #5
 8002514:	900f      	str	r0, [sp, #60]	; 0x3c
 8002516:	910e      	str	r1, [sp, #56]	; 0x38
 8002518:	2100      	movs	r1, #0
 800251a:	910d      	str	r1, [sp, #52]	; 0x34
 800251c:	e9cd 010b 	strd	r0, r1, [sp, #44]	; 0x2c
 8002520:	f24c 70f4 	movw	r0, #51188	; 0xc7f4
 8002524:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002528:	f64c 011c 	movw	r1, #51228	; 0xc81c
 800252c:	900a      	str	r0, [sp, #40]	; 0x28
 800252e:	a80a      	add	r0, sp, #40	; 0x28
 8002530:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002534:	f7ff fd4b 	bl	8001fce <_ZN4core9panicking9panic_fmt17h6b4d8e87b0965449E>
 8002538:	defe      	udf	#254	; 0xfe
 800253a:	f643 30eb 	movw	r0, #15339	; 0x3beb
 800253e:	a904      	add	r1, sp, #16
 8002540:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002544:	9017      	str	r0, [sp, #92]	; 0x5c
 8002546:	e9cd 0115 	strd	r0, r1, [sp, #84]	; 0x54
 800254a:	a802      	add	r0, sp, #8
 800254c:	9014      	str	r0, [sp, #80]	; 0x50
 800254e:	f643 20a3 	movw	r0, #15011	; 0x3aa3
 8002552:	a901      	add	r1, sp, #4
 8002554:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002558:	9013      	str	r0, [sp, #76]	; 0x4c
 800255a:	e9cd 0111 	strd	r0, r1, [sp, #68]	; 0x44
 800255e:	4668      	mov	r0, sp
 8002560:	9010      	str	r0, [sp, #64]	; 0x40
 8002562:	2004      	movs	r0, #4
 8002564:	a910      	add	r1, sp, #64	; 0x40
 8002566:	900f      	str	r0, [sp, #60]	; 0x3c
 8002568:	910e      	str	r1, [sp, #56]	; 0x38
 800256a:	2100      	movs	r1, #0
 800256c:	910d      	str	r1, [sp, #52]	; 0x34
 800256e:	e9cd 010b 	strd	r0, r1, [sp, #44]	; 0x2c
 8002572:	f24c 7098 	movw	r0, #51096	; 0xc798
 8002576:	f6c0 0000 	movt	r0, #2048	; 0x800
 800257a:	f24c 71b8 	movw	r1, #51128	; 0xc7b8
 800257e:	900a      	str	r0, [sp, #40]	; 0x28
 8002580:	a80a      	add	r0, sp, #40	; 0x28
 8002582:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002586:	f7ff fd22 	bl	8001fce <_ZN4core9panicking9panic_fmt17h6b4d8e87b0965449E>
 800258a:	defe      	udf	#254	; 0xfe

0800258c <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hdc7682df28e73d00E>:
 800258c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002590:	b089      	sub	sp, #36	; 0x24
 8002592:	f04f 0900 	mov.w	r9, #0
 8002596:	2a00      	cmp	r2, #0
 8002598:	f000 808d 	beq.w	80026b6 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hdc7682df28e73d00E+0x12a>
 800259c:	f10d 0b08 	add.w	fp, sp, #8
 80025a0:	4682      	mov	sl, r0
 80025a2:	4690      	mov	r8, r2
 80025a4:	460d      	mov	r5, r1
 80025a6:	f10b 0018 	add.w	r0, fp, #24
 80025aa:	9001      	str	r0, [sp, #4]
 80025ac:	f89a 0008 	ldrb.w	r0, [sl, #8]
 80025b0:	b150      	cbz	r0, 80025c8 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hdc7682df28e73d00E+0x3c>
 80025b2:	e9da 0100 	ldrd	r0, r1, [sl]
 80025b6:	2204      	movs	r2, #4
 80025b8:	68cb      	ldr	r3, [r1, #12]
 80025ba:	f24c 5110 	movw	r1, #50448	; 0xc510
 80025be:	f6c0 0100 	movt	r1, #2048	; 0x800
 80025c2:	4798      	blx	r3
 80025c4:	2800      	cmp	r0, #0
 80025c6:	d171      	bne.n	80026ac <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hdc7682df28e73d00E+0x120>
 80025c8:	200a      	movs	r0, #10
 80025ca:	2101      	movs	r1, #1
 80025cc:	9008      	str	r0, [sp, #32]
 80025ce:	4642      	mov	r2, r8
 80025d0:	9107      	str	r1, [sp, #28]
 80025d2:	4629      	mov	r1, r5
 80025d4:	e9cd 8005 	strd	r8, r0, [sp, #20]
 80025d8:	a802      	add	r0, sp, #8
 80025da:	e880 0320 	stmia.w	r0, {r5, r8, r9}
 80025de:	200a      	movs	r0, #10
 80025e0:	e006      	b.n	80025f0 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hdc7682df28e73d00E+0x64>
 80025e2:	9902      	ldr	r1, [sp, #8]
 80025e4:	eba0 0209 	sub.w	r2, r0, r9
 80025e8:	eb0b 0004 	add.w	r0, fp, r4
 80025ec:	4449      	add	r1, r9
 80025ee:	7dc0      	ldrb	r0, [r0, #23]
 80025f0:	f7ff fd05 	bl	8001ffe <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E>
 80025f4:	2801      	cmp	r0, #1
 80025f6:	d14f      	bne.n	8002698 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hdc7682df28e73d00E+0x10c>
 80025f8:	9804      	ldr	r0, [sp, #16]
 80025fa:	9c07      	ldr	r4, [sp, #28]
 80025fc:	4408      	add	r0, r1
 80025fe:	f100 0901 	add.w	r9, r0, #1
 8002602:	f8cd 9010 	str.w	r9, [sp, #16]
 8002606:	45a1      	cmp	r9, r4
 8002608:	d201      	bcs.n	800260e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hdc7682df28e73d00E+0x82>
 800260a:	9e03      	ldr	r6, [sp, #12]
 800260c:	e015      	b.n	800263a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hdc7682df28e73d00E+0xae>
 800260e:	9e03      	ldr	r6, [sp, #12]
 8002610:	4620      	mov	r0, r4
 8002612:	454e      	cmp	r6, r9
 8002614:	bf38      	it	cc
 8002616:	2000      	movcc	r0, #0
 8002618:	d30f      	bcc.n	800263a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hdc7682df28e73d00E+0xae>
 800261a:	2c05      	cmp	r4, #5
 800261c:	d24f      	bcs.n	80026be <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hdc7682df28e73d00E+0x132>
 800261e:	42a0      	cmp	r0, r4
 8002620:	d10b      	bne.n	800263a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hdc7682df28e73d00E+0xae>
 8002622:	9802      	ldr	r0, [sp, #8]
 8002624:	eba9 0704 	sub.w	r7, r9, r4
 8002628:	9901      	ldr	r1, [sp, #4]
 800262a:	4438      	add	r0, r7
 800262c:	4288      	cmp	r0, r1
 800262e:	d036      	beq.n	800269e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hdc7682df28e73d00E+0x112>
 8002630:	9901      	ldr	r1, [sp, #4]
 8002632:	4622      	mov	r2, r4
 8002634:	f004 fcd8 	bl	8006fe8 <memcmp>
 8002638:	b388      	cbz	r0, 800269e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hdc7682df28e73d00E+0x112>
 800263a:	9805      	ldr	r0, [sp, #20]
 800263c:	4548      	cmp	r0, r9
 800263e:	bf28      	it	cs
 8002640:	4286      	cmpcs	r6, r0
 8002642:	d2ce      	bcs.n	80025e2 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hdc7682df28e73d00E+0x56>
 8002644:	f04f 0900 	mov.w	r9, #0
 8002648:	4644      	mov	r4, r8
 800264a:	f88a 9008 	strb.w	r9, [sl, #8]
 800264e:	eba8 0604 	sub.w	r6, r8, r4
 8002652:	fab4 f184 	clz	r1, r4
 8002656:	fab6 f086 	clz	r0, r6
 800265a:	0949      	lsrs	r1, r1, #5
 800265c:	0940      	lsrs	r0, r0, #5
 800265e:	ea51 0700 	orrs.w	r7, r1, r0
 8002662:	e9da 0100 	ldrd	r0, r1, [sl]
 8002666:	d105      	bne.n	8002674 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hdc7682df28e73d00E+0xe8>
 8002668:	45a0      	cmp	r8, r4
 800266a:	d92d      	bls.n	80026c8 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hdc7682df28e73d00E+0x13c>
 800266c:	572a      	ldrsb	r2, [r5, r4]
 800266e:	f112 0f41 	cmn.w	r2, #65	; 0x41
 8002672:	dd29      	ble.n	80026c8 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hdc7682df28e73d00E+0x13c>
 8002674:	68cb      	ldr	r3, [r1, #12]
 8002676:	4629      	mov	r1, r5
 8002678:	4622      	mov	r2, r4
 800267a:	4798      	blx	r3
 800267c:	b9b0      	cbnz	r0, 80026ac <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hdc7682df28e73d00E+0x120>
 800267e:	b92f      	cbnz	r7, 800268c <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hdc7682df28e73d00E+0x100>
 8002680:	45a0      	cmp	r8, r4
 8002682:	d928      	bls.n	80026d6 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hdc7682df28e73d00E+0x14a>
 8002684:	5728      	ldrsb	r0, [r5, r4]
 8002686:	f110 0f41 	cmn.w	r0, #65	; 0x41
 800268a:	dd24      	ble.n	80026d6 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hdc7682df28e73d00E+0x14a>
 800268c:	4425      	add	r5, r4
 800268e:	2e00      	cmp	r6, #0
 8002690:	46b0      	mov	r8, r6
 8002692:	f47f af8b 	bne.w	80025ac <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hdc7682df28e73d00E+0x20>
 8002696:	e00c      	b.n	80026b2 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hdc7682df28e73d00E+0x126>
 8002698:	9805      	ldr	r0, [sp, #20]
 800269a:	9004      	str	r0, [sp, #16]
 800269c:	e7d2      	b.n	8002644 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hdc7682df28e73d00E+0xb8>
 800269e:	2001      	movs	r0, #1
 80026a0:	1c7c      	adds	r4, r7, #1
 80026a2:	f88a 0008 	strb.w	r0, [sl, #8]
 80026a6:	f04f 0900 	mov.w	r9, #0
 80026aa:	e7d0      	b.n	800264e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hdc7682df28e73d00E+0xc2>
 80026ac:	f04f 0901 	mov.w	r9, #1
 80026b0:	e001      	b.n	80026b6 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hdc7682df28e73d00E+0x12a>
 80026b2:	f04f 0900 	mov.w	r9, #0
 80026b6:	4648      	mov	r0, r9
 80026b8:	b009      	add	sp, #36	; 0x24
 80026ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80026be:	4620      	mov	r0, r4
 80026c0:	2104      	movs	r1, #4
 80026c2:	f7ff fd90 	bl	80021e6 <_ZN4core5slice20slice_index_len_fail17hedb5bb240677a6b7E>
 80026c6:	defe      	udf	#254	; 0xfe
 80026c8:	4628      	mov	r0, r5
 80026ca:	4641      	mov	r1, r8
 80026cc:	2200      	movs	r2, #0
 80026ce:	4623      	mov	r3, r4
 80026d0:	f7ff fdcd 	bl	800226e <_ZN4core3str16slice_error_fail17heb8f3fc076617590E>
 80026d4:	defe      	udf	#254	; 0xfe
 80026d6:	4628      	mov	r0, r5
 80026d8:	4641      	mov	r1, r8
 80026da:	4622      	mov	r2, r4
 80026dc:	4643      	mov	r3, r8
 80026de:	f7ff fdc6 	bl	800226e <_ZN4core3str16slice_error_fail17heb8f3fc076617590E>
 80026e2:	defe      	udf	#254	; 0xfe

080026e4 <_ZN4core3fmt8builders10DebugTuple5field17h7da5ac79cde13c49E>:
 80026e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026e8:	b091      	sub	sp, #68	; 0x44
 80026ea:	4604      	mov	r4, r0
 80026ec:	7a00      	ldrb	r0, [r0, #8]
 80026ee:	b140      	cbz	r0, 8002702 <_ZN4core3fmt8builders10DebugTuple5field17h7da5ac79cde13c49E+0x1e>
 80026f0:	2001      	movs	r0, #1
 80026f2:	7220      	strb	r0, [r4, #8]
 80026f4:	6860      	ldr	r0, [r4, #4]
 80026f6:	3001      	adds	r0, #1
 80026f8:	6060      	str	r0, [r4, #4]
 80026fa:	4620      	mov	r0, r4
 80026fc:	b011      	add	sp, #68	; 0x44
 80026fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002702:	e9d4 3000 	ldrd	r3, r0, [r4]
 8002706:	460d      	mov	r5, r1
 8002708:	4616      	mov	r6, r2
 800270a:	7819      	ldrb	r1, [r3, #0]
 800270c:	0749      	lsls	r1, r1, #29
 800270e:	d419      	bmi.n	8002744 <_ZN4core3fmt8builders10DebugTuple5field17h7da5ac79cde13c49E+0x60>
 8002710:	f64c 1216 	movw	r2, #51478	; 0xc916
 8002714:	f64c 1112 	movw	r1, #51474	; 0xc912
 8002718:	f6c0 0200 	movt	r2, #2048	; 0x800
 800271c:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002720:	2800      	cmp	r0, #0
 8002722:	bf08      	it	eq
 8002724:	4611      	moveq	r1, r2
 8002726:	f04f 0202 	mov.w	r2, #2
 800272a:	bf08      	it	eq
 800272c:	2201      	moveq	r2, #1
 800272e:	e9d3 0306 	ldrd	r0, r3, [r3, #24]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	4798      	blx	r3
 8002736:	2800      	cmp	r0, #0
 8002738:	d1da      	bne.n	80026f0 <_ZN4core3fmt8builders10DebugTuple5field17h7da5ac79cde13c49E+0xc>
 800273a:	68f2      	ldr	r2, [r6, #12]
 800273c:	4628      	mov	r0, r5
 800273e:	6821      	ldr	r1, [r4, #0]
 8002740:	4790      	blx	r2
 8002742:	e7d6      	b.n	80026f2 <_ZN4core3fmt8builders10DebugTuple5field17h7da5ac79cde13c49E+0xe>
 8002744:	b958      	cbnz	r0, 800275e <_ZN4core3fmt8builders10DebugTuple5field17h7da5ac79cde13c49E+0x7a>
 8002746:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800274a:	2202      	movs	r2, #2
 800274c:	68cb      	ldr	r3, [r1, #12]
 800274e:	f64c 1114 	movw	r1, #51476	; 0xc914
 8002752:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002756:	4798      	blx	r3
 8002758:	2800      	cmp	r0, #0
 800275a:	d1c9      	bne.n	80026f0 <_ZN4core3fmt8builders10DebugTuple5field17h7da5ac79cde13c49E+0xc>
 800275c:	6823      	ldr	r3, [r4, #0]
 800275e:	2000      	movs	r0, #0
 8002760:	2201      	movs	r2, #1
 8002762:	9003      	str	r0, [sp, #12]
 8002764:	f103 0e08 	add.w	lr, r3, #8
 8002768:	e9cd 0001 	strd	r0, r0, [sp, #4]
 800276c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002770:	f88d 200c 	strb.w	r2, [sp, #12]
 8002774:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8002778:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 800277c:	e9d3 170a 	ldrd	r1, r7, [r3, #40]	; 0x28
 8002780:	e9d3 2000 	ldrd	r2, r0, [r3]
 8002784:	e89e 5c00 	ldmia.w	lr, {sl, fp, ip, lr}
 8002788:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800278c:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 8002790:	e9cd 2004 	strd	r2, r0, [sp, #16]
 8002794:	f64c 00f8 	movw	r0, #51448	; 0xc8f8
 8002798:	f6c0 0000 	movt	r0, #2048	; 0x800
 800279c:	e9cd 170e 	strd	r1, r7, [sp, #56]	; 0x38
 80027a0:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 80027a4:	a904      	add	r1, sp, #16
 80027a6:	900b      	str	r0, [sp, #44]	; 0x2c
 80027a8:	a801      	add	r0, sp, #4
 80027aa:	900a      	str	r0, [sp, #40]	; 0x28
 80027ac:	a806      	add	r0, sp, #24
 80027ae:	e880 5c00 	stmia.w	r0, {sl, fp, ip, lr}
 80027b2:	4628      	mov	r0, r5
 80027b4:	68f2      	ldr	r2, [r6, #12]
 80027b6:	4790      	blx	r2
 80027b8:	2800      	cmp	r0, #0
 80027ba:	d199      	bne.n	80026f0 <_ZN4core3fmt8builders10DebugTuple5field17h7da5ac79cde13c49E+0xc>
 80027bc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80027c0:	2202      	movs	r2, #2
 80027c2:	68cb      	ldr	r3, [r1, #12]
 80027c4:	f64c 1110 	movw	r1, #51472	; 0xc910
 80027c8:	f6c0 0100 	movt	r1, #2048	; 0x800
 80027cc:	4798      	blx	r3
 80027ce:	e790      	b.n	80026f2 <_ZN4core3fmt8builders10DebugTuple5field17h7da5ac79cde13c49E+0xe>

080027d0 <_ZN4core3fmt8builders10DebugTuple6finish17h24d91625b3672e6dE>:
 80027d0:	b5b0      	push	{r4, r5, r7, lr}
 80027d2:	4604      	mov	r4, r0
 80027d4:	7a05      	ldrb	r5, [r0, #8]
 80027d6:	6840      	ldr	r0, [r0, #4]
 80027d8:	b308      	cbz	r0, 800281e <_ZN4core3fmt8builders10DebugTuple6finish17h24d91625b3672e6dE+0x4e>
 80027da:	b10d      	cbz	r5, 80027e0 <_ZN4core3fmt8builders10DebugTuple6finish17h24d91625b3672e6dE+0x10>
 80027dc:	2501      	movs	r5, #1
 80027de:	e01d      	b.n	800281c <_ZN4core3fmt8builders10DebugTuple6finish17h24d91625b3672e6dE+0x4c>
 80027e0:	2801      	cmp	r0, #1
 80027e2:	d110      	bne.n	8002806 <_ZN4core3fmt8builders10DebugTuple6finish17h24d91625b3672e6dE+0x36>
 80027e4:	7a60      	ldrb	r0, [r4, #9]
 80027e6:	b170      	cbz	r0, 8002806 <_ZN4core3fmt8builders10DebugTuple6finish17h24d91625b3672e6dE+0x36>
 80027e8:	6821      	ldr	r1, [r4, #0]
 80027ea:	7808      	ldrb	r0, [r1, #0]
 80027ec:	0740      	lsls	r0, r0, #29
 80027ee:	d40a      	bmi.n	8002806 <_ZN4core3fmt8builders10DebugTuple6finish17h24d91625b3672e6dE+0x36>
 80027f0:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
 80027f4:	2201      	movs	r2, #1
 80027f6:	68cb      	ldr	r3, [r1, #12]
 80027f8:	f64c 1117 	movw	r1, #51479	; 0xc917
 80027fc:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002800:	2501      	movs	r5, #1
 8002802:	4798      	blx	r3
 8002804:	b950      	cbnz	r0, 800281c <_ZN4core3fmt8builders10DebugTuple6finish17h24d91625b3672e6dE+0x4c>
 8002806:	6821      	ldr	r1, [r4, #0]
 8002808:	2201      	movs	r2, #1
 800280a:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
 800280e:	68cb      	ldr	r3, [r1, #12]
 8002810:	f64c 1118 	movw	r1, #51480	; 0xc918
 8002814:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002818:	4798      	blx	r3
 800281a:	4605      	mov	r5, r0
 800281c:	7225      	strb	r5, [r4, #8]
 800281e:	2d00      	cmp	r5, #0
 8002820:	bf18      	it	ne
 8002822:	2501      	movne	r5, #1
 8002824:	4628      	mov	r0, r5
 8002826:	bdb0      	pop	{r4, r5, r7, pc}

08002828 <_ZN4core3fmt5Write10write_char17hcea4dac6dc1cee59E>:
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	2200      	movs	r2, #0
 800282e:	297f      	cmp	r1, #127	; 0x7f
 8002830:	9201      	str	r2, [sp, #4]
 8002832:	d803      	bhi.n	800283c <_ZN4core3fmt5Write10write_char17hcea4dac6dc1cee59E+0x14>
 8002834:	f88d 1004 	strb.w	r1, [sp, #4]
 8002838:	2201      	movs	r2, #1
 800283a:	e03b      	b.n	80028b4 <_ZN4core3fmt5Write10write_char17hcea4dac6dc1cee59E+0x8c>
 800283c:	ebb2 2fd1 	cmp.w	r2, r1, lsr #11
 8002840:	d10b      	bne.n	800285a <_ZN4core3fmt5Write10write_char17hcea4dac6dc1cee59E+0x32>
 8002842:	2202      	movs	r2, #2
 8002844:	098b      	lsrs	r3, r1, #6
 8002846:	f362 119f 	bfi	r1, r2, #6, #26
 800284a:	f88d 1005 	strb.w	r1, [sp, #5]
 800284e:	2106      	movs	r1, #6
 8002850:	f361 135f 	bfi	r3, r1, #5, #27
 8002854:	f88d 3004 	strb.w	r3, [sp, #4]
 8002858:	e02c      	b.n	80028b4 <_ZN4core3fmt5Write10write_char17hcea4dac6dc1cee59E+0x8c>
 800285a:	2200      	movs	r2, #0
 800285c:	ebb2 4f11 	cmp.w	r2, r1, lsr #16
 8002860:	d112      	bne.n	8002888 <_ZN4core3fmt5Write10write_char17hcea4dac6dc1cee59E+0x60>
 8002862:	2202      	movs	r2, #2
 8002864:	460b      	mov	r3, r1
 8002866:	f362 139f 	bfi	r3, r2, #6, #26
 800286a:	f88d 3006 	strb.w	r3, [sp, #6]
 800286e:	098b      	lsrs	r3, r1, #6
 8002870:	0b09      	lsrs	r1, r1, #12
 8002872:	f362 139f 	bfi	r3, r2, #6, #26
 8002876:	220e      	movs	r2, #14
 8002878:	f362 111f 	bfi	r1, r2, #4, #28
 800287c:	f88d 3005 	strb.w	r3, [sp, #5]
 8002880:	f88d 1004 	strb.w	r1, [sp, #4]
 8002884:	2203      	movs	r2, #3
 8002886:	e015      	b.n	80028b4 <_ZN4core3fmt5Write10write_char17hcea4dac6dc1cee59E+0x8c>
 8002888:	2202      	movs	r2, #2
 800288a:	460b      	mov	r3, r1
 800288c:	f362 139f 	bfi	r3, r2, #6, #26
 8002890:	f88d 3007 	strb.w	r3, [sp, #7]
 8002894:	23f0      	movs	r3, #240	; 0xf0
 8002896:	ea43 4391 	orr.w	r3, r3, r1, lsr #18
 800289a:	f88d 3004 	strb.w	r3, [sp, #4]
 800289e:	098b      	lsrs	r3, r1, #6
 80028a0:	0b09      	lsrs	r1, r1, #12
 80028a2:	f362 139f 	bfi	r3, r2, #6, #26
 80028a6:	f362 119f 	bfi	r1, r2, #6, #26
 80028aa:	2204      	movs	r2, #4
 80028ac:	f88d 3006 	strb.w	r3, [sp, #6]
 80028b0:	f88d 1005 	strb.w	r1, [sp, #5]
 80028b4:	a901      	add	r1, sp, #4
 80028b6:	f7ff fe69 	bl	800258c <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hdc7682df28e73d00E>
 80028ba:	b002      	add	sp, #8
 80028bc:	bd80      	pop	{r7, pc}

080028be <_ZN4core3fmt5Write9write_fmt17hd5d67e64151488d3E>:
 80028be:	b570      	push	{r4, r5, r6, lr}
 80028c0:	b088      	sub	sp, #32
 80028c2:	9001      	str	r0, [sp, #4]
 80028c4:	aa02      	add	r2, sp, #8
 80028c6:	e891 5078 	ldmia.w	r1, {r3, r4, r5, r6, ip, lr}
 80028ca:	f64c 111c 	movw	r1, #51484	; 0xc91c
 80028ce:	4610      	mov	r0, r2
 80028d0:	f6c0 0100 	movt	r1, #2048	; 0x800
 80028d4:	e880 5078 	stmia.w	r0, {r3, r4, r5, r6, ip, lr}
 80028d8:	a801      	add	r0, sp, #4
 80028da:	f000 f831 	bl	8002940 <_ZN4core3fmt5write17h51826aee11d21b9bE>
 80028de:	b008      	add	sp, #32
 80028e0:	bd70      	pop	{r4, r5, r6, pc}

080028e2 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_str17hc9f594331d92d7bbE>:
 80028e2:	6800      	ldr	r0, [r0, #0]
 80028e4:	f7ff be52 	b.w	800258c <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hdc7682df28e73d00E>

080028e8 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17h44c662229c53045aE>:
 80028e8:	6800      	ldr	r0, [r0, #0]
 80028ea:	f7ff bf9d 	b.w	8002828 <_ZN4core3fmt5Write10write_char17hcea4dac6dc1cee59E>

080028ee <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_fmt17h44a86feaf2f21d35E>:
 80028ee:	b570      	push	{r4, r5, r6, lr}
 80028f0:	b088      	sub	sp, #32
 80028f2:	6800      	ldr	r0, [r0, #0]
 80028f4:	aa02      	add	r2, sp, #8
 80028f6:	9001      	str	r0, [sp, #4]
 80028f8:	e891 5078 	ldmia.w	r1, {r3, r4, r5, r6, ip, lr}
 80028fc:	4610      	mov	r0, r2
 80028fe:	f64c 111c 	movw	r1, #51484	; 0xc91c
 8002902:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002906:	e880 5078 	stmia.w	r0, {r3, r4, r5, r6, ip, lr}
 800290a:	a801      	add	r0, sp, #4
 800290c:	f000 f818 	bl	8002940 <_ZN4core3fmt5write17h51826aee11d21b9bE>
 8002910:	b008      	add	sp, #32
 8002912:	bd70      	pop	{r4, r5, r6, pc}

08002914 <_ZN4core3fmt10ArgumentV110show_usize17h3c2fac3bad94a947E>:
 8002914:	6800      	ldr	r0, [r0, #0]
 8002916:	460a      	mov	r2, r1
 8002918:	2101      	movs	r1, #1
 800291a:	f001 b830 	b.w	800397e <_ZN4core3fmt3num3imp7fmt_u3217h4a6591ec3ef714beE>

0800291e <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..fmt..Display$GT$3fmt17h3e269ca172b8335aE>:
 800291e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002922:	b086      	sub	sp, #24
 8002924:	e9d1 c106 	ldrd	ip, r1, [r1, #24]
 8002928:	466a      	mov	r2, sp
 800292a:	e890 41f0 	ldmia.w	r0, {r4, r5, r6, r7, r8, lr}
 800292e:	4613      	mov	r3, r2
 8002930:	4660      	mov	r0, ip
 8002932:	e883 41f0 	stmia.w	r3, {r4, r5, r6, r7, r8, lr}
 8002936:	f000 f803 	bl	8002940 <_ZN4core3fmt5write17h51826aee11d21b9bE>
 800293a:	b006      	add	sp, #24
 800293c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002940 <_ZN4core3fmt5write17h51826aee11d21b9bE>:
 8002940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002944:	b08d      	sub	sp, #52	; 0x34
 8002946:	2303      	movs	r3, #3
 8002948:	e9d2 5404 	ldrd	r5, r4, [r2, #16]
 800294c:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
 8002950:	2320      	movs	r3, #32
 8002952:	9301      	str	r3, [sp, #4]
 8002954:	2300      	movs	r3, #0
 8002956:	f10d 0c18 	add.w	ip, sp, #24
 800295a:	9300      	str	r3, [sp, #0]
 800295c:	e9cd 540a 	strd	r5, r4, [sp, #40]	; 0x28
 8002960:	e88c 0023 	stmia.w	ip, {r0, r1, r5}
 8002964:	6897      	ldr	r7, [r2, #8]
 8002966:	9304      	str	r3, [sp, #16]
 8002968:	2f00      	cmp	r7, #0
 800296a:	9302      	str	r3, [sp, #8]
 800296c:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8002970:	9309      	str	r3, [sp, #36]	; 0x24
 8002972:	f000 8097 	beq.w	8002aa4 <_ZN4core3fmt5write17h51826aee11d21b9bE+0x164>
 8002976:	e9d2 ba00 	ldrd	fp, sl, [r2]
 800297a:	68d4      	ldr	r4, [r2, #12]
 800297c:	4554      	cmp	r4, sl
 800297e:	bf88      	it	hi
 8002980:	4654      	movhi	r4, sl
 8002982:	2c00      	cmp	r4, #0
 8002984:	f000 80b2 	beq.w	8002aec <_ZN4core3fmt5write17h51826aee11d21b9bE+0x1ac>
 8002988:	68cb      	ldr	r3, [r1, #12]
 800298a:	e9db 1200 	ldrd	r1, r2, [fp]
 800298e:	4798      	blx	r3
 8002990:	2800      	cmp	r0, #0
 8002992:	f040 80b8 	bne.w	8002b06 <_ZN4core3fmt5write17h51826aee11d21b9bE+0x1c6>
 8002996:	f642 1915 	movw	r9, #10517	; 0x2915
 800299a:	2500      	movs	r5, #0
 800299c:	f6c0 0900 	movt	r9, #2048	; 0x800
 80029a0:	46e8      	mov	r8, sp
 80029a2:	68b8      	ldr	r0, [r7, #8]
 80029a4:	9001      	str	r0, [sp, #4]
 80029a6:	f897 0020 	ldrb.w	r0, [r7, #32]
 80029aa:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
 80029ae:	68f8      	ldr	r0, [r7, #12]
 80029b0:	9000      	str	r0, [sp, #0]
 80029b2:	69b8      	ldr	r0, [r7, #24]
 80029b4:	2801      	cmp	r0, #1
 80029b6:	d011      	beq.n	80029dc <_ZN4core3fmt5write17h51826aee11d21b9bE+0x9c>
 80029b8:	2802      	cmp	r0, #2
 80029ba:	d003      	beq.n	80029c4 <_ZN4core3fmt5write17h51826aee11d21b9bE+0x84>
 80029bc:	2803      	cmp	r0, #3
 80029be:	d01d      	beq.n	80029fc <_ZN4core3fmt5write17h51826aee11d21b9bE+0xbc>
 80029c0:	69f9      	ldr	r1, [r7, #28]
 80029c2:	e019      	b.n	80029f8 <_ZN4core3fmt5write17h51826aee11d21b9bE+0xb8>
 80029c4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80029c8:	4288      	cmp	r0, r1
 80029ca:	d017      	beq.n	80029fc <_ZN4core3fmt5write17h51826aee11d21b9bE+0xbc>
 80029cc:	f100 0108 	add.w	r1, r0, #8
 80029d0:	9108      	str	r1, [sp, #32]
 80029d2:	6841      	ldr	r1, [r0, #4]
 80029d4:	4549      	cmp	r1, r9
 80029d6:	d111      	bne.n	80029fc <_ZN4core3fmt5write17h51826aee11d21b9bE+0xbc>
 80029d8:	6800      	ldr	r0, [r0, #0]
 80029da:	e00c      	b.n	80029f6 <_ZN4core3fmt5write17h51826aee11d21b9bE+0xb6>
 80029dc:	69f9      	ldr	r1, [r7, #28]
 80029de:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80029e0:	4291      	cmp	r1, r2
 80029e2:	f080 8098 	bcs.w	8002b16 <_ZN4core3fmt5write17h51826aee11d21b9bE+0x1d6>
 80029e6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80029e8:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 80029ec:	6852      	ldr	r2, [r2, #4]
 80029ee:	454a      	cmp	r2, r9
 80029f0:	d104      	bne.n	80029fc <_ZN4core3fmt5write17h51826aee11d21b9bE+0xbc>
 80029f2:	f850 0031 	ldr.w	r0, [r0, r1, lsl #3]
 80029f6:	6801      	ldr	r1, [r0, #0]
 80029f8:	2001      	movs	r0, #1
 80029fa:	e000      	b.n	80029fe <_ZN4core3fmt5write17h51826aee11d21b9bE+0xbe>
 80029fc:	2000      	movs	r0, #0
 80029fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002a02:	6938      	ldr	r0, [r7, #16]
 8002a04:	2801      	cmp	r0, #1
 8002a06:	d011      	beq.n	8002a2c <_ZN4core3fmt5write17h51826aee11d21b9bE+0xec>
 8002a08:	2802      	cmp	r0, #2
 8002a0a:	d003      	beq.n	8002a14 <_ZN4core3fmt5write17h51826aee11d21b9bE+0xd4>
 8002a0c:	2803      	cmp	r0, #3
 8002a0e:	d01c      	beq.n	8002a4a <_ZN4core3fmt5write17h51826aee11d21b9bE+0x10a>
 8002a10:	6979      	ldr	r1, [r7, #20]
 8002a12:	e018      	b.n	8002a46 <_ZN4core3fmt5write17h51826aee11d21b9bE+0x106>
 8002a14:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8002a18:	4288      	cmp	r0, r1
 8002a1a:	d016      	beq.n	8002a4a <_ZN4core3fmt5write17h51826aee11d21b9bE+0x10a>
 8002a1c:	f100 0108 	add.w	r1, r0, #8
 8002a20:	9108      	str	r1, [sp, #32]
 8002a22:	6841      	ldr	r1, [r0, #4]
 8002a24:	4549      	cmp	r1, r9
 8002a26:	d110      	bne.n	8002a4a <_ZN4core3fmt5write17h51826aee11d21b9bE+0x10a>
 8002a28:	6800      	ldr	r0, [r0, #0]
 8002a2a:	e00b      	b.n	8002a44 <_ZN4core3fmt5write17h51826aee11d21b9bE+0x104>
 8002a2c:	6979      	ldr	r1, [r7, #20]
 8002a2e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002a30:	4291      	cmp	r1, r2
 8002a32:	d270      	bcs.n	8002b16 <_ZN4core3fmt5write17h51826aee11d21b9bE+0x1d6>
 8002a34:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002a36:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 8002a3a:	6852      	ldr	r2, [r2, #4]
 8002a3c:	454a      	cmp	r2, r9
 8002a3e:	d104      	bne.n	8002a4a <_ZN4core3fmt5write17h51826aee11d21b9bE+0x10a>
 8002a40:	f850 0031 	ldr.w	r0, [r0, r1, lsl #3]
 8002a44:	6801      	ldr	r1, [r0, #0]
 8002a46:	2001      	movs	r0, #1
 8002a48:	e000      	b.n	8002a4c <_ZN4core3fmt5write17h51826aee11d21b9bE+0x10c>
 8002a4a:	2000      	movs	r0, #0
 8002a4c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002a50:	6838      	ldr	r0, [r7, #0]
 8002a52:	2801      	cmp	r0, #1
 8002a54:	d107      	bne.n	8002a66 <_ZN4core3fmt5write17h51826aee11d21b9bE+0x126>
 8002a56:	6879      	ldr	r1, [r7, #4]
 8002a58:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002a5a:	4291      	cmp	r1, r2
 8002a5c:	d262      	bcs.n	8002b24 <_ZN4core3fmt5write17h51826aee11d21b9bE+0x1e4>
 8002a5e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002a60:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8002a64:	e006      	b.n	8002a74 <_ZN4core3fmt5write17h51826aee11d21b9bE+0x134>
 8002a66:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8002a6a:	4288      	cmp	r0, r1
 8002a6c:	d061      	beq.n	8002b32 <_ZN4core3fmt5write17h51826aee11d21b9bE+0x1f2>
 8002a6e:	f100 0108 	add.w	r1, r0, #8
 8002a72:	9108      	str	r1, [sp, #32]
 8002a74:	1d01      	adds	r1, r0, #4
 8002a76:	6800      	ldr	r0, [r0, #0]
 8002a78:	680a      	ldr	r2, [r1, #0]
 8002a7a:	4641      	mov	r1, r8
 8002a7c:	4790      	blx	r2
 8002a7e:	2800      	cmp	r0, #0
 8002a80:	d141      	bne.n	8002b06 <_ZN4core3fmt5write17h51826aee11d21b9bE+0x1c6>
 8002a82:	1c6e      	adds	r6, r5, #1
 8002a84:	42a6      	cmp	r6, r4
 8002a86:	d232      	bcs.n	8002aee <_ZN4core3fmt5write17h51826aee11d21b9bE+0x1ae>
 8002a88:	eb0b 00c5 	add.w	r0, fp, r5, lsl #3
 8002a8c:	e9d0 1202 	ldrd	r1, r2, [r0, #8]
 8002a90:	e9dd 0306 	ldrd	r0, r3, [sp, #24]
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	4798      	blx	r3
 8002a98:	3724      	adds	r7, #36	; 0x24
 8002a9a:	2800      	cmp	r0, #0
 8002a9c:	4635      	mov	r5, r6
 8002a9e:	f43f af80 	beq.w	80029a2 <_ZN4core3fmt5write17h51826aee11d21b9bE+0x62>
 8002aa2:	e030      	b.n	8002b06 <_ZN4core3fmt5write17h51826aee11d21b9bE+0x1c6>
 8002aa4:	e9d2 ba00 	ldrd	fp, sl, [r2]
 8002aa8:	4554      	cmp	r4, sl
 8002aaa:	bf88      	it	hi
 8002aac:	4654      	movhi	r4, sl
 8002aae:	b1ec      	cbz	r4, 8002aec <_ZN4core3fmt5write17h51826aee11d21b9bE+0x1ac>
 8002ab0:	68cb      	ldr	r3, [r1, #12]
 8002ab2:	e9db 1200 	ldrd	r1, r2, [fp]
 8002ab6:	4798      	blx	r3
 8002ab8:	bb28      	cbnz	r0, 8002b06 <_ZN4core3fmt5write17h51826aee11d21b9bE+0x1c6>
 8002aba:	2700      	movs	r7, #0
 8002abc:	46e8      	mov	r8, sp
 8002abe:	eb05 01c7 	add.w	r1, r5, r7, lsl #3
 8002ac2:	f855 0037 	ldr.w	r0, [r5, r7, lsl #3]
 8002ac6:	684a      	ldr	r2, [r1, #4]
 8002ac8:	4641      	mov	r1, r8
 8002aca:	4790      	blx	r2
 8002acc:	b9d8      	cbnz	r0, 8002b06 <_ZN4core3fmt5write17h51826aee11d21b9bE+0x1c6>
 8002ace:	1c7e      	adds	r6, r7, #1
 8002ad0:	42a6      	cmp	r6, r4
 8002ad2:	d20c      	bcs.n	8002aee <_ZN4core3fmt5write17h51826aee11d21b9bE+0x1ae>
 8002ad4:	eb0b 00c7 	add.w	r0, fp, r7, lsl #3
 8002ad8:	e9d0 1202 	ldrd	r1, r2, [r0, #8]
 8002adc:	e9dd 0306 	ldrd	r0, r3, [sp, #24]
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	4798      	blx	r3
 8002ae4:	2800      	cmp	r0, #0
 8002ae6:	4637      	mov	r7, r6
 8002ae8:	d0e9      	beq.n	8002abe <_ZN4core3fmt5write17h51826aee11d21b9bE+0x17e>
 8002aea:	e00c      	b.n	8002b06 <_ZN4core3fmt5write17h51826aee11d21b9bE+0x1c6>
 8002aec:	2600      	movs	r6, #0
 8002aee:	45b2      	cmp	sl, r6
 8002af0:	d90d      	bls.n	8002b0e <_ZN4core3fmt5write17h51826aee11d21b9bE+0x1ce>
 8002af2:	eb0b 00c6 	add.w	r0, fp, r6, lsl #3
 8002af6:	f85b 1036 	ldr.w	r1, [fp, r6, lsl #3]
 8002afa:	6842      	ldr	r2, [r0, #4]
 8002afc:	e9dd 0306 	ldrd	r0, r3, [sp, #24]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	4798      	blx	r3
 8002b04:	b118      	cbz	r0, 8002b0e <_ZN4core3fmt5write17h51826aee11d21b9bE+0x1ce>
 8002b06:	2001      	movs	r0, #1
 8002b08:	b00d      	add	sp, #52	; 0x34
 8002b0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b0e:	2000      	movs	r0, #0
 8002b10:	b00d      	add	sp, #52	; 0x34
 8002b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b16:	f64c 1068 	movw	r0, #51560	; 0xc968
 8002b1a:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002b1e:	f7ff fa36 	bl	8001f8e <_ZN4core9panicking18panic_bounds_check17h946762cd0671aec9E>
 8002b22:	defe      	udf	#254	; 0xfe
 8002b24:	f64c 1058 	movw	r0, #51544	; 0xc958
 8002b28:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002b2c:	f7ff fa2f 	bl	8001f8e <_ZN4core9panicking18panic_bounds_check17h946762cd0671aec9E>
 8002b30:	defe      	udf	#254	; 0xfe
 8002b32:	f24c 50c8 	movw	r0, #50632	; 0xc5c8
 8002b36:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002b3a:	f7ff fa0b 	bl	8001f54 <_ZN4core9panicking5panic17h53ca63c6ac6312f8E>
 8002b3e:	defe      	udf	#254	; 0xfe

08002b40 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E>:
 8002b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b44:	b083      	sub	sp, #12
 8002b46:	e9dd 690c 	ldrd	r6, r9, [sp, #48]	; 0x30
 8002b4a:	461f      	mov	r7, r3
 8002b4c:	4692      	mov	sl, r2
 8002b4e:	4604      	mov	r4, r0
 8002b50:	b1c9      	cbz	r1, 8002b86 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x46>
 8002b52:	f8d4 e000 	ldr.w	lr, [r4]
 8002b56:	f04f 082b 	mov.w	r8, #43	; 0x2b
 8002b5a:	f01e 0101 	ands.w	r1, lr, #1
 8002b5e:	bf08      	it	eq
 8002b60:	f44f 1888 	moveq.w	r8, #1114112	; 0x110000
 8002b64:	eb01 0b09 	add.w	fp, r1, r9
 8002b68:	ea5f 714e 	movs.w	r1, lr, lsl #29
 8002b6c:	d514      	bpl.n	8002b98 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x58>
 8002b6e:	b1bf      	cbz	r7, 8002ba0 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x60>
 8002b70:	1e79      	subs	r1, r7, #1
 8002b72:	f007 0c03 	and.w	ip, r7, #3
 8002b76:	2903      	cmp	r1, #3
 8002b78:	d214      	bcs.n	8002ba4 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x64>
 8002b7a:	2100      	movs	r1, #0
 8002b7c:	4653      	mov	r3, sl
 8002b7e:	f1bc 0f00 	cmp.w	ip, #0
 8002b82:	d136      	bne.n	8002bf2 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0xb2>
 8002b84:	e04d      	b.n	8002c22 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0xe2>
 8002b86:	f8d4 e000 	ldr.w	lr, [r4]
 8002b8a:	f109 0b01 	add.w	fp, r9, #1
 8002b8e:	f04f 082d 	mov.w	r8, #45	; 0x2d
 8002b92:	ea5f 714e 	movs.w	r1, lr, lsl #29
 8002b96:	d4ea      	bmi.n	8002b6e <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x2e>
 8002b98:	2700      	movs	r7, #0
 8002b9a:	f04f 0a00 	mov.w	sl, #0
 8002b9e:	e044      	b.n	8002c2a <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0xea>
 8002ba0:	2100      	movs	r1, #0
 8002ba2:	e03e      	b.n	8002c22 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0xe2>
 8002ba4:	e9cd 9601 	strd	r9, r6, [sp, #4]
 8002ba8:	ebac 0607 	sub.w	r6, ip, r7
 8002bac:	2100      	movs	r1, #0
 8002bae:	4653      	mov	r3, sl
 8002bb0:	781d      	ldrb	r5, [r3, #0]
 8002bb2:	785a      	ldrb	r2, [r3, #1]
 8002bb4:	7898      	ldrb	r0, [r3, #2]
 8002bb6:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
 8002bba:	f893 9003 	ldrb.w	r9, [r3, #3]
 8002bbe:	2d80      	cmp	r5, #128	; 0x80
 8002bc0:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8002bc4:	bf08      	it	eq
 8002bc6:	3101      	addeq	r1, #1
 8002bc8:	2a80      	cmp	r2, #128	; 0x80
 8002bca:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
 8002bce:	bf08      	it	eq
 8002bd0:	3101      	addeq	r1, #1
 8002bd2:	2880      	cmp	r0, #128	; 0x80
 8002bd4:	f009 00c0 	and.w	r0, r9, #192	; 0xc0
 8002bd8:	bf08      	it	eq
 8002bda:	3101      	addeq	r1, #1
 8002bdc:	2880      	cmp	r0, #128	; 0x80
 8002bde:	bf08      	it	eq
 8002be0:	3101      	addeq	r1, #1
 8002be2:	3304      	adds	r3, #4
 8002be4:	3604      	adds	r6, #4
 8002be6:	d1e3      	bne.n	8002bb0 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x70>
 8002be8:	e9dd 9601 	ldrd	r9, r6, [sp, #4]
 8002bec:	f1bc 0f00 	cmp.w	ip, #0
 8002bf0:	d017      	beq.n	8002c22 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0xe2>
 8002bf2:	7818      	ldrb	r0, [r3, #0]
 8002bf4:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
 8002bf8:	2880      	cmp	r0, #128	; 0x80
 8002bfa:	bf08      	it	eq
 8002bfc:	3101      	addeq	r1, #1
 8002bfe:	f1bc 0f01 	cmp.w	ip, #1
 8002c02:	d00e      	beq.n	8002c22 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0xe2>
 8002c04:	7858      	ldrb	r0, [r3, #1]
 8002c06:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
 8002c0a:	2880      	cmp	r0, #128	; 0x80
 8002c0c:	bf08      	it	eq
 8002c0e:	3101      	addeq	r1, #1
 8002c10:	f1bc 0f02 	cmp.w	ip, #2
 8002c14:	d005      	beq.n	8002c22 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0xe2>
 8002c16:	7898      	ldrb	r0, [r3, #2]
 8002c18:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
 8002c1c:	2880      	cmp	r0, #128	; 0x80
 8002c1e:	bf08      	it	eq
 8002c20:	3101      	addeq	r1, #1
 8002c22:	eb0b 0007 	add.w	r0, fp, r7
 8002c26:	eba0 0b01 	sub.w	fp, r0, r1
 8002c2a:	68a0      	ldr	r0, [r4, #8]
 8002c2c:	2801      	cmp	r0, #1
 8002c2e:	d115      	bne.n	8002c5c <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x11c>
 8002c30:	68e5      	ldr	r5, [r4, #12]
 8002c32:	455d      	cmp	r5, fp
 8002c34:	d912      	bls.n	8002c5c <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x11c>
 8002c36:	ea5f 700e 	movs.w	r0, lr, lsl #28
 8002c3a:	9602      	str	r6, [sp, #8]
 8002c3c:	d423      	bmi.n	8002c86 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x146>
 8002c3e:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 8002c42:	eba5 000b 	sub.w	r0, r5, fp
 8002c46:	2903      	cmp	r1, #3
 8002c48:	bf08      	it	eq
 8002c4a:	2101      	moveq	r1, #1
 8002c4c:	078a      	lsls	r2, r1, #30
 8002c4e:	d036      	beq.n	8002cbe <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x17e>
 8002c50:	2902      	cmp	r1, #2
 8002c52:	d036      	beq.n	8002cc2 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x182>
 8002c54:	2100      	movs	r1, #0
 8002c56:	4605      	mov	r5, r0
 8002c58:	9101      	str	r1, [sp, #4]
 8002c5a:	e036      	b.n	8002cca <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x18a>
 8002c5c:	4620      	mov	r0, r4
 8002c5e:	4641      	mov	r1, r8
 8002c60:	4652      	mov	r2, sl
 8002c62:	463b      	mov	r3, r7
 8002c64:	f000 f890 	bl	8002d88 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h6c53284d01543c5dE>
 8002c68:	b120      	cbz	r0, 8002c74 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x134>
 8002c6a:	2601      	movs	r6, #1
 8002c6c:	4630      	mov	r0, r6
 8002c6e:	b003      	add	sp, #12
 8002c70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c74:	69e1      	ldr	r1, [r4, #28]
 8002c76:	464a      	mov	r2, r9
 8002c78:	69a0      	ldr	r0, [r4, #24]
 8002c7a:	68cb      	ldr	r3, [r1, #12]
 8002c7c:	4631      	mov	r1, r6
 8002c7e:	b003      	add	sp, #12
 8002c80:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c84:	4718      	bx	r3
 8002c86:	2601      	movs	r6, #1
 8002c88:	2030      	movs	r0, #48	; 0x30
 8002c8a:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
 8002c8e:	4641      	mov	r1, r8
 8002c90:	6060      	str	r0, [r4, #4]
 8002c92:	4620      	mov	r0, r4
 8002c94:	4652      	mov	r2, sl
 8002c96:	463b      	mov	r3, r7
 8002c98:	f000 f876 	bl	8002d88 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h6c53284d01543c5dE>
 8002c9c:	2800      	cmp	r0, #0
 8002c9e:	d1e5      	bne.n	8002c6c <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x12c>
 8002ca0:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 8002ca4:	eba5 000b 	sub.w	r0, r5, fp
 8002ca8:	2903      	cmp	r1, #3
 8002caa:	bf08      	it	eq
 8002cac:	2101      	moveq	r1, #1
 8002cae:	078a      	lsls	r2, r1, #30
 8002cb0:	d03a      	beq.n	8002d28 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x1e8>
 8002cb2:	2902      	cmp	r1, #2
 8002cb4:	d03b      	beq.n	8002d2e <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x1ee>
 8002cb6:	f04f 0800 	mov.w	r8, #0
 8002cba:	4605      	mov	r5, r0
 8002cbc:	e03b      	b.n	8002d36 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x1f6>
 8002cbe:	2500      	movs	r5, #0
 8002cc0:	e002      	b.n	8002cc8 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x188>
 8002cc2:	0845      	lsrs	r5, r0, #1
 8002cc4:	3001      	adds	r0, #1
 8002cc6:	0840      	lsrs	r0, r0, #1
 8002cc8:	9001      	str	r0, [sp, #4]
 8002cca:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8002cce:	3601      	adds	r6, #1
 8002cd0:	42ae      	cmp	r6, r5
 8002cd2:	d207      	bcs.n	8002ce4 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x1a4>
 8002cd4:	6861      	ldr	r1, [r4, #4]
 8002cd6:	e9d4 0206 	ldrd	r0, r2, [r4, #24]
 8002cda:	6912      	ldr	r2, [r2, #16]
 8002cdc:	4790      	blx	r2
 8002cde:	2800      	cmp	r0, #0
 8002ce0:	d0f5      	beq.n	8002cce <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x18e>
 8002ce2:	e7c2      	b.n	8002c6a <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x12a>
 8002ce4:	4620      	mov	r0, r4
 8002ce6:	4641      	mov	r1, r8
 8002ce8:	4652      	mov	r2, sl
 8002cea:	463b      	mov	r3, r7
 8002cec:	f8d4 b004 	ldr.w	fp, [r4, #4]
 8002cf0:	f000 f84a 	bl	8002d88 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h6c53284d01543c5dE>
 8002cf4:	2800      	cmp	r0, #0
 8002cf6:	d1b8      	bne.n	8002c6a <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x12a>
 8002cf8:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
 8002cfc:	464a      	mov	r2, r9
 8002cfe:	68cb      	ldr	r3, [r1, #12]
 8002d00:	9902      	ldr	r1, [sp, #8]
 8002d02:	4798      	blx	r3
 8002d04:	2800      	cmp	r0, #0
 8002d06:	d1b0      	bne.n	8002c6a <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x12a>
 8002d08:	e9d4 8406 	ldrd	r8, r4, [r4, #24]
 8002d0c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8002d10:	9d01      	ldr	r5, [sp, #4]
 8002d12:	2601      	movs	r6, #1
 8002d14:	3701      	adds	r7, #1
 8002d16:	42af      	cmp	r7, r5
 8002d18:	d234      	bcs.n	8002d84 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x244>
 8002d1a:	6922      	ldr	r2, [r4, #16]
 8002d1c:	4640      	mov	r0, r8
 8002d1e:	4659      	mov	r1, fp
 8002d20:	4790      	blx	r2
 8002d22:	2800      	cmp	r0, #0
 8002d24:	d0f6      	beq.n	8002d14 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x1d4>
 8002d26:	e7a1      	b.n	8002c6c <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x12c>
 8002d28:	2500      	movs	r5, #0
 8002d2a:	4680      	mov	r8, r0
 8002d2c:	e003      	b.n	8002d36 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x1f6>
 8002d2e:	0845      	lsrs	r5, r0, #1
 8002d30:	3001      	adds	r0, #1
 8002d32:	ea4f 0850 	mov.w	r8, r0, lsr #1
 8002d36:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8002d3a:	3601      	adds	r6, #1
 8002d3c:	42ae      	cmp	r6, r5
 8002d3e:	d207      	bcs.n	8002d50 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x210>
 8002d40:	6861      	ldr	r1, [r4, #4]
 8002d42:	e9d4 0206 	ldrd	r0, r2, [r4, #24]
 8002d46:	6912      	ldr	r2, [r2, #16]
 8002d48:	4790      	blx	r2
 8002d4a:	2800      	cmp	r0, #0
 8002d4c:	d0f5      	beq.n	8002d3a <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x1fa>
 8002d4e:	e78c      	b.n	8002c6a <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x12a>
 8002d50:	f8d4 a004 	ldr.w	sl, [r4, #4]
 8002d54:	464a      	mov	r2, r9
 8002d56:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
 8002d5a:	68cb      	ldr	r3, [r1, #12]
 8002d5c:	9902      	ldr	r1, [sp, #8]
 8002d5e:	4798      	blx	r3
 8002d60:	2800      	cmp	r0, #0
 8002d62:	f47f af82 	bne.w	8002c6a <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x12a>
 8002d66:	e9d4 7406 	ldrd	r7, r4, [r4, #24]
 8002d6a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8002d6e:	2601      	movs	r6, #1
 8002d70:	3501      	adds	r5, #1
 8002d72:	4545      	cmp	r5, r8
 8002d74:	d206      	bcs.n	8002d84 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x244>
 8002d76:	6922      	ldr	r2, [r4, #16]
 8002d78:	4638      	mov	r0, r7
 8002d7a:	4651      	mov	r1, sl
 8002d7c:	4790      	blx	r2
 8002d7e:	2800      	cmp	r0, #0
 8002d80:	d0f6      	beq.n	8002d70 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x230>
 8002d82:	e773      	b.n	8002c6c <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x12c>
 8002d84:	2600      	movs	r6, #0
 8002d86:	e771      	b.n	8002c6c <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x12c>

08002d88 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h6c53284d01543c5dE>:
 8002d88:	b570      	push	{r4, r5, r6, lr}
 8002d8a:	461c      	mov	r4, r3
 8002d8c:	4615      	mov	r5, r2
 8002d8e:	4606      	mov	r6, r0
 8002d90:	f5b1 1f88 	cmp.w	r1, #1114112	; 0x110000
 8002d94:	d006      	beq.n	8002da4 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h6c53284d01543c5dE+0x1c>
 8002d96:	e9d6 0206 	ldrd	r0, r2, [r6, #24]
 8002d9a:	6912      	ldr	r2, [r2, #16]
 8002d9c:	4790      	blx	r2
 8002d9e:	b108      	cbz	r0, 8002da4 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h6c53284d01543c5dE+0x1c>
 8002da0:	2001      	movs	r0, #1
 8002da2:	bd70      	pop	{r4, r5, r6, pc}
 8002da4:	b13d      	cbz	r5, 8002db6 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h6c53284d01543c5dE+0x2e>
 8002da6:	e9d6 0106 	ldrd	r0, r1, [r6, #24]
 8002daa:	4622      	mov	r2, r4
 8002dac:	68cb      	ldr	r3, [r1, #12]
 8002dae:	4629      	mov	r1, r5
 8002db0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002db4:	4718      	bx	r3
 8002db6:	2000      	movs	r0, #0
 8002db8:	bd70      	pop	{r4, r5, r6, pc}

08002dba <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE>:
 8002dba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002dbe:	b081      	sub	sp, #4
 8002dc0:	f8d0 e008 	ldr.w	lr, [r0, #8]
 8002dc4:	4682      	mov	sl, r0
 8002dc6:	6900      	ldr	r0, [r0, #16]
 8002dc8:	4691      	mov	r9, r2
 8002dca:	4688      	mov	r8, r1
 8002dcc:	f1be 0f01 	cmp.w	lr, #1
 8002dd0:	d10f      	bne.n	8002df2 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x38>
 8002dd2:	b988      	cbnz	r0, 8002df8 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x3e>
 8002dd4:	f1b9 0f00 	cmp.w	r9, #0
 8002dd8:	f000 80a9 	beq.w	8002f2e <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x174>
 8002ddc:	f1a9 0001 	sub.w	r0, r9, #1
 8002de0:	f009 0103 	and.w	r1, r9, #3
 8002de4:	2803      	cmp	r0, #3
 8002de6:	d25f      	bcs.n	8002ea8 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0xee>
 8002de8:	2000      	movs	r0, #0
 8002dea:	4642      	mov	r2, r8
 8002dec:	2900      	cmp	r1, #0
 8002dee:	d17b      	bne.n	8002ee8 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x12e>
 8002df0:	e09e      	b.n	8002f30 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x176>
 8002df2:	2800      	cmp	r0, #0
 8002df4:	f000 80b1 	beq.w	8002f5a <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x1a0>
 8002df8:	f1b9 0f00 	cmp.w	r9, #0
 8002dfc:	d04d      	beq.n	8002e9a <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0xe0>
 8002dfe:	f8da 0014 	ldr.w	r0, [sl, #20]
 8002e02:	eb08 0109 	add.w	r1, r8, r9
 8002e06:	2200      	movs	r2, #0
 8002e08:	4644      	mov	r4, r8
 8002e0a:	4647      	mov	r7, r8
 8002e0c:	43c3      	mvns	r3, r0
 8002e0e:	4626      	mov	r6, r4
 8002e10:	f916 5b01 	ldrsb.w	r5, [r6], #1
 8002e14:	2d00      	cmp	r5, #0
 8002e16:	b2e8      	uxtb	r0, r5
 8002e18:	da28      	bge.n	8002e6c <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0xb2>
 8002e1a:	428e      	cmp	r6, r1
 8002e1c:	d005      	beq.n	8002e2a <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x70>
 8002e1e:	7865      	ldrb	r5, [r4, #1]
 8002e20:	1ca6      	adds	r6, r4, #2
 8002e22:	f005 053f 	and.w	r5, r5, #63	; 0x3f
 8002e26:	4634      	mov	r4, r6
 8002e28:	e001      	b.n	8002e2e <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x74>
 8002e2a:	2500      	movs	r5, #0
 8002e2c:	460c      	mov	r4, r1
 8002e2e:	f000 0b1f 	and.w	fp, r0, #31
 8002e32:	28e0      	cmp	r0, #224	; 0xe0
 8002e34:	d307      	bcc.n	8002e46 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x8c>
 8002e36:	428c      	cmp	r4, r1
 8002e38:	d008      	beq.n	8002e4c <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x92>
 8002e3a:	f814 6b01 	ldrb.w	r6, [r4], #1
 8002e3e:	f006 0c3f 	and.w	ip, r6, #63	; 0x3f
 8002e42:	4626      	mov	r6, r4
 8002e44:	e005      	b.n	8002e52 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x98>
 8002e46:	ea45 108b 	orr.w	r0, r5, fp, lsl #6
 8002e4a:	e00f      	b.n	8002e6c <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0xb2>
 8002e4c:	f04f 0c00 	mov.w	ip, #0
 8002e50:	460c      	mov	r4, r1
 8002e52:	ea4c 1585 	orr.w	r5, ip, r5, lsl #6
 8002e56:	28f0      	cmp	r0, #240	; 0xf0
 8002e58:	d306      	bcc.n	8002e68 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0xae>
 8002e5a:	428c      	cmp	r4, r1
 8002e5c:	d010      	beq.n	8002e80 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0xc6>
 8002e5e:	f814 0b01 	ldrb.w	r0, [r4], #1
 8002e62:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8002e66:	e00d      	b.n	8002e84 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0xca>
 8002e68:	ea45 300b 	orr.w	r0, r5, fp, lsl #12
 8002e6c:	4634      	mov	r4, r6
 8002e6e:	3301      	adds	r3, #1
 8002e70:	d051      	beq.n	8002f16 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x15c>
 8002e72:	1bd0      	subs	r0, r2, r7
 8002e74:	42a1      	cmp	r1, r4
 8002e76:	eb00 0204 	add.w	r2, r0, r4
 8002e7a:	4627      	mov	r7, r4
 8002e7c:	d1c7      	bne.n	8002e0e <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x54>
 8002e7e:	e04d      	b.n	8002f1c <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x162>
 8002e80:	2000      	movs	r0, #0
 8002e82:	4634      	mov	r4, r6
 8002e84:	f44f 16e0 	mov.w	r6, #1835008	; 0x1c0000
 8002e88:	ea06 468b 	and.w	r6, r6, fp, lsl #18
 8002e8c:	ea46 1685 	orr.w	r6, r6, r5, lsl #6
 8002e90:	4430      	add	r0, r6
 8002e92:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
 8002e96:	d1ea      	bne.n	8002e6e <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0xb4>
 8002e98:	e040      	b.n	8002f1c <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x162>
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f1be 0f00 	cmp.w	lr, #0
 8002ea0:	d140      	bne.n	8002f24 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x16a>
 8002ea2:	e9da 0106 	ldrd	r0, r1, [sl, #24]
 8002ea6:	e05d      	b.n	8002f64 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x1aa>
 8002ea8:	eba1 0309 	sub.w	r3, r1, r9
 8002eac:	2000      	movs	r0, #0
 8002eae:	4642      	mov	r2, r8
 8002eb0:	7817      	ldrb	r7, [r2, #0]
 8002eb2:	7856      	ldrb	r6, [r2, #1]
 8002eb4:	f007 07c0 	and.w	r7, r7, #192	; 0xc0
 8002eb8:	7895      	ldrb	r5, [r2, #2]
 8002eba:	78d4      	ldrb	r4, [r2, #3]
 8002ebc:	2f80      	cmp	r7, #128	; 0x80
 8002ebe:	f006 07c0 	and.w	r7, r6, #192	; 0xc0
 8002ec2:	bf08      	it	eq
 8002ec4:	3001      	addeq	r0, #1
 8002ec6:	2f80      	cmp	r7, #128	; 0x80
 8002ec8:	f005 07c0 	and.w	r7, r5, #192	; 0xc0
 8002ecc:	bf08      	it	eq
 8002ece:	3001      	addeq	r0, #1
 8002ed0:	2f80      	cmp	r7, #128	; 0x80
 8002ed2:	f004 07c0 	and.w	r7, r4, #192	; 0xc0
 8002ed6:	bf08      	it	eq
 8002ed8:	3001      	addeq	r0, #1
 8002eda:	2f80      	cmp	r7, #128	; 0x80
 8002edc:	bf08      	it	eq
 8002ede:	3001      	addeq	r0, #1
 8002ee0:	3204      	adds	r2, #4
 8002ee2:	3304      	adds	r3, #4
 8002ee4:	d1e4      	bne.n	8002eb0 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0xf6>
 8002ee6:	b319      	cbz	r1, 8002f30 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x176>
 8002ee8:	7813      	ldrb	r3, [r2, #0]
 8002eea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002eee:	2b80      	cmp	r3, #128	; 0x80
 8002ef0:	bf08      	it	eq
 8002ef2:	3001      	addeq	r0, #1
 8002ef4:	2901      	cmp	r1, #1
 8002ef6:	d01b      	beq.n	8002f30 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x176>
 8002ef8:	7853      	ldrb	r3, [r2, #1]
 8002efa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002efe:	2b80      	cmp	r3, #128	; 0x80
 8002f00:	bf08      	it	eq
 8002f02:	3001      	addeq	r0, #1
 8002f04:	2902      	cmp	r1, #2
 8002f06:	d013      	beq.n	8002f30 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x176>
 8002f08:	7891      	ldrb	r1, [r2, #2]
 8002f0a:	f001 01c0 	and.w	r1, r1, #192	; 0xc0
 8002f0e:	2980      	cmp	r1, #128	; 0x80
 8002f10:	bf08      	it	eq
 8002f12:	3001      	addeq	r0, #1
 8002f14:	e00c      	b.n	8002f30 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x176>
 8002f16:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
 8002f1a:	d175      	bne.n	8003008 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x24e>
 8002f1c:	464a      	mov	r2, r9
 8002f1e:	f1be 0f00 	cmp.w	lr, #0
 8002f22:	d0be      	beq.n	8002ea2 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0xe8>
 8002f24:	4691      	mov	r9, r2
 8002f26:	f1b9 0f00 	cmp.w	r9, #0
 8002f2a:	f47f af57 	bne.w	8002ddc <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x22>
 8002f2e:	2000      	movs	r0, #0
 8002f30:	eba9 0100 	sub.w	r1, r9, r0
 8002f34:	f8da 000c 	ldr.w	r0, [sl, #12]
 8002f38:	4281      	cmp	r1, r0
 8002f3a:	d20e      	bcs.n	8002f5a <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x1a0>
 8002f3c:	f1b9 0f00 	cmp.w	r9, #0
 8002f40:	d016      	beq.n	8002f70 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x1b6>
 8002f42:	f1a9 0101 	sub.w	r1, r9, #1
 8002f46:	f009 0c03 	and.w	ip, r9, #3
 8002f4a:	2903      	cmp	r1, #3
 8002f4c:	d212      	bcs.n	8002f74 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x1ba>
 8002f4e:	2100      	movs	r1, #0
 8002f50:	4643      	mov	r3, r8
 8002f52:	f1bc 0f00 	cmp.w	ip, #0
 8002f56:	d12f      	bne.n	8002fb8 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x1fe>
 8002f58:	e046      	b.n	8002fe8 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x22e>
 8002f5a:	f8da 101c 	ldr.w	r1, [sl, #28]
 8002f5e:	464a      	mov	r2, r9
 8002f60:	f8da 0018 	ldr.w	r0, [sl, #24]
 8002f64:	68cb      	ldr	r3, [r1, #12]
 8002f66:	4641      	mov	r1, r8
 8002f68:	b001      	add	sp, #4
 8002f6a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f6e:	4718      	bx	r3
 8002f70:	2100      	movs	r1, #0
 8002f72:	e039      	b.n	8002fe8 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x22e>
 8002f74:	ebac 0709 	sub.w	r7, ip, r9
 8002f78:	2100      	movs	r1, #0
 8002f7a:	4643      	mov	r3, r8
 8002f7c:	781e      	ldrb	r6, [r3, #0]
 8002f7e:	785d      	ldrb	r5, [r3, #1]
 8002f80:	f006 06c0 	and.w	r6, r6, #192	; 0xc0
 8002f84:	789c      	ldrb	r4, [r3, #2]
 8002f86:	78da      	ldrb	r2, [r3, #3]
 8002f88:	2e80      	cmp	r6, #128	; 0x80
 8002f8a:	f005 06c0 	and.w	r6, r5, #192	; 0xc0
 8002f8e:	bf08      	it	eq
 8002f90:	3101      	addeq	r1, #1
 8002f92:	2e80      	cmp	r6, #128	; 0x80
 8002f94:	f004 06c0 	and.w	r6, r4, #192	; 0xc0
 8002f98:	bf08      	it	eq
 8002f9a:	3101      	addeq	r1, #1
 8002f9c:	2e80      	cmp	r6, #128	; 0x80
 8002f9e:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8002fa2:	bf08      	it	eq
 8002fa4:	3101      	addeq	r1, #1
 8002fa6:	2a80      	cmp	r2, #128	; 0x80
 8002fa8:	bf08      	it	eq
 8002faa:	3101      	addeq	r1, #1
 8002fac:	3304      	adds	r3, #4
 8002fae:	3704      	adds	r7, #4
 8002fb0:	d1e4      	bne.n	8002f7c <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x1c2>
 8002fb2:	f1bc 0f00 	cmp.w	ip, #0
 8002fb6:	d017      	beq.n	8002fe8 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x22e>
 8002fb8:	781a      	ldrb	r2, [r3, #0]
 8002fba:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8002fbe:	2a80      	cmp	r2, #128	; 0x80
 8002fc0:	bf08      	it	eq
 8002fc2:	3101      	addeq	r1, #1
 8002fc4:	f1bc 0f01 	cmp.w	ip, #1
 8002fc8:	d00e      	beq.n	8002fe8 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x22e>
 8002fca:	785a      	ldrb	r2, [r3, #1]
 8002fcc:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8002fd0:	2a80      	cmp	r2, #128	; 0x80
 8002fd2:	bf08      	it	eq
 8002fd4:	3101      	addeq	r1, #1
 8002fd6:	f1bc 0f02 	cmp.w	ip, #2
 8002fda:	d005      	beq.n	8002fe8 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x22e>
 8002fdc:	789a      	ldrb	r2, [r3, #2]
 8002fde:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8002fe2:	2a80      	cmp	r2, #128	; 0x80
 8002fe4:	bf08      	it	eq
 8002fe6:	3101      	addeq	r1, #1
 8002fe8:	f89a 3030 	ldrb.w	r3, [sl, #48]	; 0x30
 8002fec:	eba1 0109 	sub.w	r1, r1, r9
 8002ff0:	4408      	add	r0, r1
 8002ff2:	1eda      	subs	r2, r3, #3
 8002ff4:	bf18      	it	ne
 8002ff6:	461a      	movne	r2, r3
 8002ff8:	0793      	lsls	r3, r2, #30
 8002ffa:	d00b      	beq.n	8003014 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x25a>
 8002ffc:	2a02      	cmp	r2, #2
 8002ffe:	d00c      	beq.n	800301a <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x260>
 8003000:	f04f 0b00 	mov.w	fp, #0
 8003004:	4604      	mov	r4, r0
 8003006:	e00c      	b.n	8003022 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x268>
 8003008:	2a00      	cmp	r2, #0
 800300a:	bf18      	it	ne
 800300c:	454a      	cmpne	r2, r9
 800300e:	d134      	bne.n	800307a <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x2c0>
 8003010:	4640      	mov	r0, r8
 8003012:	e03b      	b.n	800308c <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x2d2>
 8003014:	2400      	movs	r4, #0
 8003016:	4683      	mov	fp, r0
 8003018:	e003      	b.n	8003022 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x268>
 800301a:	0844      	lsrs	r4, r0, #1
 800301c:	3001      	adds	r0, #1
 800301e:	ea4f 0b50 	mov.w	fp, r0, lsr #1
 8003022:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003026:	3501      	adds	r5, #1
 8003028:	42a5      	cmp	r5, r4
 800302a:	d208      	bcs.n	800303e <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x284>
 800302c:	f8da 1004 	ldr.w	r1, [sl, #4]
 8003030:	e9da 0206 	ldrd	r0, r2, [sl, #24]
 8003034:	6912      	ldr	r2, [r2, #16]
 8003036:	4790      	blx	r2
 8003038:	2800      	cmp	r0, #0
 800303a:	d0f4      	beq.n	8003026 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x26c>
 800303c:	e015      	b.n	800306a <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x2b0>
 800303e:	f8da 7004 	ldr.w	r7, [sl, #4]
 8003042:	464a      	mov	r2, r9
 8003044:	e9da 0106 	ldrd	r0, r1, [sl, #24]
 8003048:	68cb      	ldr	r3, [r1, #12]
 800304a:	4641      	mov	r1, r8
 800304c:	4798      	blx	r3
 800304e:	b960      	cbnz	r0, 800306a <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x2b0>
 8003050:	e9da 4506 	ldrd	r4, r5, [sl, #24]
 8003054:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8003058:	3601      	adds	r6, #1
 800305a:	455e      	cmp	r6, fp
 800305c:	d209      	bcs.n	8003072 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x2b8>
 800305e:	692a      	ldr	r2, [r5, #16]
 8003060:	4620      	mov	r0, r4
 8003062:	4639      	mov	r1, r7
 8003064:	4790      	blx	r2
 8003066:	2800      	cmp	r0, #0
 8003068:	d0f6      	beq.n	8003058 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x29e>
 800306a:	2001      	movs	r0, #1
 800306c:	b001      	add	sp, #4
 800306e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003072:	2000      	movs	r0, #0
 8003074:	b001      	add	sp, #4
 8003076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800307a:	454a      	cmp	r2, r9
 800307c:	d204      	bcs.n	8003088 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x2ce>
 800307e:	f918 0002 	ldrsb.w	r0, [r8, r2]
 8003082:	f110 0f40 	cmn.w	r0, #64	; 0x40
 8003086:	dac3      	bge.n	8003010 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x256>
 8003088:	2200      	movs	r2, #0
 800308a:	2000      	movs	r0, #0
 800308c:	2800      	cmp	r0, #0
 800308e:	bf0c      	ite	eq
 8003090:	464a      	moveq	r2, r9
 8003092:	4680      	movne	r8, r0
 8003094:	f1be 0f00 	cmp.w	lr, #0
 8003098:	f47f af44 	bne.w	8002f24 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x16a>
 800309c:	e701      	b.n	8002ea2 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0xe8>

0800309e <_ZN4core3fmt9Formatter15debug_lower_hex17h6ead2f28bb05b574E>:
 800309e:	7800      	ldrb	r0, [r0, #0]
 80030a0:	f3c0 1000 	ubfx	r0, r0, #4, #1
 80030a4:	4770      	bx	lr

080030a6 <_ZN4core3fmt9Formatter15debug_upper_hex17hd6d96e6aa5cb78d8E>:
 80030a6:	7800      	ldrb	r0, [r0, #0]
 80030a8:	f3c0 1040 	ubfx	r0, r0, #5, #1
 80030ac:	4770      	bx	lr

080030ae <_ZN4core3fmt9Formatter11debug_tuple17h793087e8ecab9022E>:
 80030ae:	b570      	push	{r4, r5, r6, lr}
 80030b0:	460d      	mov	r5, r1
 80030b2:	4606      	mov	r6, r0
 80030b4:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
 80030b8:	461c      	mov	r4, r3
 80030ba:	68cb      	ldr	r3, [r1, #12]
 80030bc:	4611      	mov	r1, r2
 80030be:	4622      	mov	r2, r4
 80030c0:	4798      	blx	r3
 80030c2:	7230      	strb	r0, [r6, #8]
 80030c4:	fab4 f084 	clz	r0, r4
 80030c8:	0940      	lsrs	r0, r0, #5
 80030ca:	7270      	strb	r0, [r6, #9]
 80030cc:	2000      	movs	r0, #0
 80030ce:	e9c6 5000 	strd	r5, r0, [r6]
 80030d2:	bd70      	pop	{r4, r5, r6, pc}

080030d4 <_ZN42_$LT$str$u20$as$u20$core..fmt..Display$GT$3fmt17h3a34938e29ce59dcE>:
 80030d4:	460b      	mov	r3, r1
 80030d6:	4601      	mov	r1, r0
 80030d8:	4610      	mov	r0, r2
 80030da:	461a      	mov	r2, r3
 80030dc:	f7ff be6d 	b.w	8002dba <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE>

080030e0 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE>:
 80030e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030e4:	b085      	sub	sp, #20
 80030e6:	460c      	mov	r4, r1
 80030e8:	4605      	mov	r5, r0
 80030ea:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
 80030ee:	690a      	ldr	r2, [r1, #16]
 80030f0:	2127      	movs	r1, #39	; 0x27
 80030f2:	4790      	blx	r2
 80030f4:	b118      	cbz	r0, 80030fe <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0x1e>
 80030f6:	2001      	movs	r0, #1
 80030f8:	b005      	add	sp, #20
 80030fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030fe:	682d      	ldr	r5, [r5, #0]
 8003100:	f1a5 0009 	sub.w	r0, r5, #9
 8003104:	281e      	cmp	r0, #30
 8003106:	d816      	bhi.n	8003136 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0x56>
 8003108:	2702      	movs	r7, #2
 800310a:	2674      	movs	r6, #116	; 0x74
 800310c:	e8df f000 	tbb	[pc, r0]
 8003110:	17171086 	.word	0x17171086
 8003114:	1717173a 	.word	0x1717173a
 8003118:	17171717 	.word	0x17171717
 800311c:	17171717 	.word	0x17171717
 8003120:	17171717 	.word	0x17171717
 8003124:	17171717 	.word	0x17171717
 8003128:	17171517 	.word	0x17171517
 800312c:	00151717 	.word	0x00151717
 8003130:	2702      	movs	r7, #2
 8003132:	266e      	movs	r6, #110	; 0x6e
 8003134:	e028      	b.n	8003188 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0xa8>
 8003136:	2d5c      	cmp	r5, #92	; 0x5c
 8003138:	d101      	bne.n	800313e <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0x5e>
 800313a:	2702      	movs	r7, #2
 800313c:	e06d      	b.n	800321a <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0x13a>
 800313e:	f24d 5010 	movw	r0, #54544	; 0xd510
 8003142:	4629      	mov	r1, r5
 8003144:	f6c0 0000 	movt	r0, #2048	; 0x800
 8003148:	f000 f8d2 	bl	80032f0 <_ZN4core7unicode9bool_trie8BoolTrie6lookup17h35a609aac8cea223E>
 800314c:	2800      	cmp	r0, #0
 800314e:	d159      	bne.n	8003204 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0x124>
 8003150:	2000      	movs	r0, #0
 8003152:	ebb0 4f15 	cmp.w	r0, r5, lsr #16
 8003156:	d118      	bne.n	800318a <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0xaa>
 8003158:	f64c 316f 	movw	r1, #52079	; 0xcb6f
 800315c:	f240 122f 	movw	r2, #303	; 0x12f
 8003160:	f6c0 0100 	movt	r1, #2048	; 0x800
 8003164:	f64c 2340 	movw	r3, #51776	; 0xca40
 8003168:	e9cd 2100 	strd	r2, r1, [sp]
 800316c:	f64c 11f0 	movw	r1, #51696	; 0xc9f0
 8003170:	f44f 709e 	mov.w	r0, #316	; 0x13c
 8003174:	f6c0 0100 	movt	r1, #2048	; 0x800
 8003178:	9002      	str	r0, [sp, #8]
 800317a:	f6c0 0300 	movt	r3, #2048	; 0x800
 800317e:	4628      	mov	r0, r5
 8003180:	2228      	movs	r2, #40	; 0x28
 8003182:	e019      	b.n	80031b8 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0xd8>
 8003184:	2702      	movs	r7, #2
 8003186:	2672      	movs	r6, #114	; 0x72
 8003188:	e048      	b.n	800321c <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0x13c>
 800318a:	ebb0 4f55 	cmp.w	r0, r5, lsr #17
 800318e:	d118      	bne.n	80031c2 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0xe2>
 8003190:	f64c 518b 	movw	r1, #52619	; 0xcd8b
 8003194:	229e      	movs	r2, #158	; 0x9e
 8003196:	f6c0 0100 	movt	r1, #2048	; 0x800
 800319a:	f64c 43ed 	movw	r3, #52461	; 0xcced
 800319e:	e9cd 2100 	strd	r2, r1, [sp]
 80031a2:	f64c 41ab 	movw	r1, #52395	; 0xccab
 80031a6:	f240 107d 	movw	r0, #381	; 0x17d
 80031aa:	f6c0 0100 	movt	r1, #2048	; 0x800
 80031ae:	9002      	str	r0, [sp, #8]
 80031b0:	f6c0 0300 	movt	r3, #2048	; 0x800
 80031b4:	4628      	mov	r0, r5
 80031b6:	2221      	movs	r2, #33	; 0x21
 80031b8:	f000 f919 	bl	80033ee <_ZN4core7unicode9printable5check17ha9e204e73497ee46E>
 80031bc:	b310      	cbz	r0, 8003204 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0x124>
 80031be:	2701      	movs	r7, #1
 80031c0:	e7bc      	b.n	800313c <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0x5c>
 80031c2:	f240 10ef 	movw	r0, #495	; 0x1ef
 80031c6:	f2c0 000e 	movt	r0, #14
 80031ca:	4285      	cmp	r5, r0
 80031cc:	d81a      	bhi.n	8003204 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0x124>
 80031ce:	f240 50e2 	movw	r0, #1506	; 0x5e2
 80031d2:	f240 61e2 	movw	r1, #1762	; 0x6e2
 80031d6:	f6cf 70fd 	movt	r0, #65533	; 0xfffd
 80031da:	f2c0 010b 	movt	r1, #11
 80031de:	4428      	add	r0, r5
 80031e0:	4288      	cmp	r0, r1
 80031e2:	d30f      	bcc.n	8003204 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0x124>
 80031e4:	f241 401f 	movw	r0, #5151	; 0x141f
 80031e8:	f640 411f 	movw	r1, #3103	; 0xc1f
 80031ec:	f6cf 70fd 	movt	r0, #65533	; 0xfffd
 80031f0:	4428      	add	r0, r5
 80031f2:	4288      	cmp	r0, r1
 80031f4:	bf21      	itttt	cs
 80031f6:	f243 105e 	movwcs	r0, #12638	; 0x315e
 80031fa:	f6cf 70fd 	movtcs	r0, #65533	; 0xfffd
 80031fe:	4428      	addcs	r0, r5
 8003200:	280e      	cmpcs	r0, #14
 8003202:	d25c      	bcs.n	80032be <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0x1de>
 8003204:	f045 0001 	orr.w	r0, r5, #1
 8003208:	f04f 0905 	mov.w	r9, #5
 800320c:	fab0 f080 	clz	r0, r0
 8003210:	2703      	movs	r7, #3
 8003212:	2107      	movs	r1, #7
 8003214:	ea81 0090 	eor.w	r0, r1, r0, lsr #2
 8003218:	9004      	str	r0, [sp, #16]
 800321a:	462e      	mov	r6, r5
 800321c:	f04f 0b1c 	mov.w	fp, #28
 8003220:	f04f 0a01 	mov.w	sl, #1
 8003224:	2502      	movs	r5, #2
 8003226:	f04f 0804 	mov.w	r8, #4
 800322a:	2f01      	cmp	r7, #1
 800322c:	d011      	beq.n	8003252 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0x172>
 800322e:	2f02      	cmp	r7, #2
 8003230:	d012      	beq.n	8003258 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0x178>
 8003232:	2f03      	cmp	r7, #3
 8003234:	d13b      	bne.n	80032ae <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0x1ce>
 8003236:	fa5f f089 	uxtb.w	r0, r9
 800323a:	3801      	subs	r0, #1
 800323c:	2804      	cmp	r0, #4
 800323e:	d836      	bhi.n	80032ae <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0x1ce>
 8003240:	e8df f000 	tbb	[pc, r0]
 8003244:	221e0d03 	.word	0x221e0d03
 8003248:	0027      	.short	0x0027
 800324a:	f029 09ff 	bic.w	r9, r9, #255	; 0xff
 800324e:	217d      	movs	r1, #125	; 0x7d
 8003250:	e025      	b.n	800329e <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0x1be>
 8003252:	2700      	movs	r7, #0
 8003254:	4631      	mov	r1, r6
 8003256:	e023      	b.n	80032a0 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0x1c0>
 8003258:	215c      	movs	r1, #92	; 0x5c
 800325a:	2701      	movs	r7, #1
 800325c:	e020      	b.n	80032a0 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0x1c0>
 800325e:	9a04      	ldr	r2, [sp, #16]
 8003260:	ea0b 0082 	and.w	r0, fp, r2, lsl #2
 8003264:	fa26 f000 	lsr.w	r0, r6, r0
 8003268:	f000 000f 	and.w	r0, r0, #15
 800326c:	f100 0157 	add.w	r1, r0, #87	; 0x57
 8003270:	280a      	cmp	r0, #10
 8003272:	bf38      	it	cc
 8003274:	f100 0130 	addcc.w	r1, r0, #48	; 0x30
 8003278:	b17a      	cbz	r2, 800329a <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0x1ba>
 800327a:	3a01      	subs	r2, #1
 800327c:	9204      	str	r2, [sp, #16]
 800327e:	e00e      	b.n	800329e <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0x1be>
 8003280:	f365 0907 	bfi	r9, r5, #0, #8
 8003284:	217b      	movs	r1, #123	; 0x7b
 8003286:	e00a      	b.n	800329e <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0x1be>
 8003288:	2703      	movs	r7, #3
 800328a:	2175      	movs	r1, #117	; 0x75
 800328c:	f367 0907 	bfi	r9, r7, #0, #8
 8003290:	e006      	b.n	80032a0 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0x1c0>
 8003292:	f368 0907 	bfi	r9, r8, #0, #8
 8003296:	215c      	movs	r1, #92	; 0x5c
 8003298:	e001      	b.n	800329e <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0x1be>
 800329a:	f36a 0907 	bfi	r9, sl, #0, #8
 800329e:	2703      	movs	r7, #3
 80032a0:	e9d4 0206 	ldrd	r0, r2, [r4, #24]
 80032a4:	6912      	ldr	r2, [r2, #16]
 80032a6:	4790      	blx	r2
 80032a8:	2800      	cmp	r0, #0
 80032aa:	d0be      	beq.n	800322a <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0x14a>
 80032ac:	e723      	b.n	80030f6 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0x16>
 80032ae:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
 80032b2:	690a      	ldr	r2, [r1, #16]
 80032b4:	2127      	movs	r1, #39	; 0x27
 80032b6:	b005      	add	sp, #20
 80032b8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032bc:	4710      	bx	r2
 80032be:	f64b 011e 	movw	r1, #47134	; 0xb81e
 80032c2:	f025 0001 	bic.w	r0, r5, #1
 80032c6:	f2c0 0102 	movt	r1, #2
 80032ca:	4288      	cmp	r0, r1
 80032cc:	f43f af9a 	beq.w	8003204 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0x124>
 80032d0:	f645 1029 	movw	r0, #22825	; 0x5929
 80032d4:	f6cf 70fd 	movt	r0, #65533	; 0xfffd
 80032d8:	4428      	add	r0, r5
 80032da:	2829      	cmp	r0, #41	; 0x29
 80032dc:	bf21      	itttt	cs
 80032de:	f644 00cb 	movwcs	r0, #18635	; 0x48cb
 80032e2:	f6cf 70fd 	movtcs	r0, #65533	; 0xfffd
 80032e6:	4428      	addcs	r0, r5
 80032e8:	280a      	cmpcs	r0, #10
 80032ea:	f63f af68 	bhi.w	80031be <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0xde>
 80032ee:	e789      	b.n	8003204 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0x124>

080032f0 <_ZN4core7unicode9bool_trie8BoolTrie6lookup17h35a609aac8cea223E>:
 80032f0:	b580      	push	{r7, lr}
 80032f2:	2200      	movs	r2, #0
 80032f4:	ebb2 2fd1 	cmp.w	r2, r1, lsr #11
 80032f8:	d106      	bne.n	8003308 <_ZN4core7unicode9bool_trie8BoolTrie6lookup17h35a609aac8cea223E+0x18>
 80032fa:	f06f 0207 	mvn.w	r2, #7
 80032fe:	ea02 02d1 	and.w	r2, r2, r1, lsr #3
 8003302:	eb00 0c02 	add.w	ip, r0, r2
 8003306:	e030      	b.n	800336a <_ZN4core7unicode9bool_trie8BoolTrie6lookup17h35a609aac8cea223E+0x7a>
 8003308:	ebb2 4f11 	cmp.w	r2, r1, lsr #16
 800330c:	d110      	bne.n	8003330 <_ZN4core7unicode9bool_trie8BoolTrie6lookup17h35a609aac8cea223E+0x40>
 800330e:	f06f 021f 	mvn.w	r2, #31
 8003312:	eb02 1291 	add.w	r2, r2, r1, lsr #6
 8003316:	0953      	lsrs	r3, r2, #5
 8003318:	2b1e      	cmp	r3, #30
 800331a:	d842      	bhi.n	80033a2 <_ZN4core7unicode9bool_trie8BoolTrie6lookup17h35a609aac8cea223E+0xb2>
 800331c:	4402      	add	r2, r0
 800331e:	f892 3118 	ldrb.w	r3, [r2, #280]	; 0x118
 8003322:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
 8003326:	429a      	cmp	r2, r3
 8003328:	d945      	bls.n	80033b6 <_ZN4core7unicode9bool_trie8BoolTrie6lookup17h35a609aac8cea223E+0xc6>
 800332a:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
 800332e:	e01a      	b.n	8003366 <_ZN4core7unicode9bool_trie8BoolTrie6lookup17h35a609aac8cea223E+0x76>
 8003330:	f06f 020f 	mvn.w	r2, #15
 8003334:	eb02 3211 	add.w	r2, r2, r1, lsr #12
 8003338:	2aff      	cmp	r2, #255	; 0xff
 800333a:	d841      	bhi.n	80033c0 <_ZN4core7unicode9bool_trie8BoolTrie6lookup17h35a609aac8cea223E+0xd0>
 800333c:	4402      	add	r2, r0
 800333e:	f892 24f8 	ldrb.w	r2, [r2, #1272]	; 0x4f8
 8003342:	f3c1 1385 	ubfx	r3, r1, #6, #6
 8003346:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800334a:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 800334e:	4293      	cmp	r3, r2
 8003350:	d240      	bcs.n	80033d4 <_ZN4core7unicode9bool_trie8BoolTrie6lookup17h35a609aac8cea223E+0xe4>
 8003352:	f8d0 c108 	ldr.w	ip, [r0, #264]	; 0x108
 8003356:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
 800335a:	f81c 3003 	ldrb.w	r3, [ip, r3]
 800335e:	429a      	cmp	r2, r3
 8003360:	d93d      	bls.n	80033de <_ZN4core7unicode9bool_trie8BoolTrie6lookup17h35a609aac8cea223E+0xee>
 8003362:	f8d0 0110 	ldr.w	r0, [r0, #272]	; 0x110
 8003366:	eb00 0cc3 	add.w	ip, r0, r3, lsl #3
 800336a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800336e:	f04f 0e01 	mov.w	lr, #1
 8003372:	f1c1 0020 	rsb	r0, r1, #32
 8003376:	f1a1 0220 	sub.w	r2, r1, #32
 800337a:	2a00      	cmp	r2, #0
 800337c:	fa0e f101 	lsl.w	r1, lr, r1
 8003380:	fa2e f000 	lsr.w	r0, lr, r0
 8003384:	bfa8      	it	ge
 8003386:	fa0e f002 	lslge.w	r0, lr, r2
 800338a:	e9dc c300 	ldrd	ip, r3, [ip]
 800338e:	2a00      	cmp	r2, #0
 8003390:	bfa8      	it	ge
 8003392:	2100      	movge	r1, #0
 8003394:	4018      	ands	r0, r3
 8003396:	ea01 010c 	and.w	r1, r1, ip
 800339a:	4308      	orrs	r0, r1
 800339c:	bf18      	it	ne
 800339e:	2001      	movne	r0, #1
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	f64c 10a0 	movw	r0, #51616	; 0xc9a0
 80033a6:	4611      	mov	r1, r2
 80033a8:	f6c0 0000 	movt	r0, #2048	; 0x800
 80033ac:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 80033b0:	f7fe fded 	bl	8001f8e <_ZN4core9panicking18panic_bounds_check17h946762cd0671aec9E>
 80033b4:	defe      	udf	#254	; 0xfe
 80033b6:	f64c 10b0 	movw	r0, #51632	; 0xc9b0
 80033ba:	f6c0 0000 	movt	r0, #2048	; 0x800
 80033be:	e012      	b.n	80033e6 <_ZN4core7unicode9bool_trie8BoolTrie6lookup17h35a609aac8cea223E+0xf6>
 80033c0:	f64c 10c0 	movw	r0, #51648	; 0xc9c0
 80033c4:	4611      	mov	r1, r2
 80033c6:	f6c0 0000 	movt	r0, #2048	; 0x800
 80033ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80033ce:	f7fe fdde 	bl	8001f8e <_ZN4core9panicking18panic_bounds_check17h946762cd0671aec9E>
 80033d2:	defe      	udf	#254	; 0xfe
 80033d4:	f64c 10d0 	movw	r0, #51664	; 0xc9d0
 80033d8:	f6c0 0000 	movt	r0, #2048	; 0x800
 80033dc:	e003      	b.n	80033e6 <_ZN4core7unicode9bool_trie8BoolTrie6lookup17h35a609aac8cea223E+0xf6>
 80033de:	f64c 10e0 	movw	r0, #51680	; 0xc9e0
 80033e2:	f6c0 0000 	movt	r0, #2048	; 0x800
 80033e6:	4619      	mov	r1, r3
 80033e8:	f7fe fdd1 	bl	8001f8e <_ZN4core9panicking18panic_bounds_check17h946762cd0671aec9E>
 80033ec:	defe      	udf	#254	; 0xfe

080033ee <_ZN4core7unicode9printable5check17ha9e204e73497ee46E>:
 80033ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033f2:	b081      	sub	sp, #4
 80033f4:	fa1f fa80 	uxth.w	sl, r0
 80033f8:	b3a2      	cbz	r2, 8003464 <_ZN4core7unicode9printable5check17ha9e204e73497ee46E+0x76>
 80033fa:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 80033fe:	eb01 0842 	add.w	r8, r1, r2, lsl #1
 8003402:	ea4f 291a 	mov.w	r9, sl, lsr #8
 8003406:	f04f 0e00 	mov.w	lr, #0
 800340a:	784f      	ldrb	r7, [r1, #1]
 800340c:	4672      	mov	r2, lr
 800340e:	780c      	ldrb	r4, [r1, #0]
 8003410:	3102      	adds	r1, #2
 8003412:	44be      	add	lr, r7
 8003414:	454c      	cmp	r4, r9
 8003416:	d122      	bne.n	800345e <_ZN4core7unicode9printable5check17ha9e204e73497ee46E+0x70>
 8003418:	4596      	cmp	lr, r2
 800341a:	d352      	bcc.n	80034c2 <_ZN4core7unicode9printable5check17ha9e204e73497ee46E+0xd4>
 800341c:	45e6      	cmp	lr, ip
 800341e:	d855      	bhi.n	80034cc <_ZN4core7unicode9printable5check17ha9e204e73497ee46E+0xde>
 8003420:	189c      	adds	r4, r3, r2
 8003422:	eb04 0b07 	add.w	fp, r4, r7
 8003426:	b1df      	cbz	r7, 8003460 <_ZN4core7unicode9printable5check17ha9e204e73497ee46E+0x72>
 8003428:	4625      	mov	r5, r4
 800342a:	b2c6      	uxtb	r6, r0
 800342c:	f815 2b01 	ldrb.w	r2, [r5], #1
 8003430:	42b2      	cmp	r2, r6
 8003432:	d037      	beq.n	80034a4 <_ZN4core7unicode9printable5check17ha9e204e73497ee46E+0xb6>
 8003434:	455d      	cmp	r5, fp
 8003436:	d013      	beq.n	8003460 <_ZN4core7unicode9printable5check17ha9e204e73497ee46E+0x72>
 8003438:	7862      	ldrb	r2, [r4, #1]
 800343a:	42b2      	cmp	r2, r6
 800343c:	d032      	beq.n	80034a4 <_ZN4core7unicode9printable5check17ha9e204e73497ee46E+0xb6>
 800343e:	1ca2      	adds	r2, r4, #2
 8003440:	455a      	cmp	r2, fp
 8003442:	d00d      	beq.n	8003460 <_ZN4core7unicode9printable5check17ha9e204e73497ee46E+0x72>
 8003444:	78a2      	ldrb	r2, [r4, #2]
 8003446:	42b2      	cmp	r2, r6
 8003448:	d02c      	beq.n	80034a4 <_ZN4core7unicode9printable5check17ha9e204e73497ee46E+0xb6>
 800344a:	1ce2      	adds	r2, r4, #3
 800344c:	455a      	cmp	r2, fp
 800344e:	d007      	beq.n	8003460 <_ZN4core7unicode9printable5check17ha9e204e73497ee46E+0x72>
 8003450:	1d22      	adds	r2, r4, #4
 8003452:	78e4      	ldrb	r4, [r4, #3]
 8003454:	3f04      	subs	r7, #4
 8003456:	42b4      	cmp	r4, r6
 8003458:	4614      	mov	r4, r2
 800345a:	d1e4      	bne.n	8003426 <_ZN4core7unicode9printable5check17ha9e204e73497ee46E+0x38>
 800345c:	e022      	b.n	80034a4 <_ZN4core7unicode9printable5check17ha9e204e73497ee46E+0xb6>
 800345e:	d801      	bhi.n	8003464 <_ZN4core7unicode9printable5check17ha9e204e73497ee46E+0x76>
 8003460:	4541      	cmp	r1, r8
 8003462:	d1d2      	bne.n	800340a <_ZN4core7unicode9printable5check17ha9e204e73497ee46E+0x1c>
 8003464:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003466:	b1f8      	cbz	r0, 80034a8 <_ZN4core7unicode9printable5check17ha9e204e73497ee46E+0xba>
 8003468:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800346a:	1831      	adds	r1, r6, r0
 800346c:	2001      	movs	r0, #1
 800346e:	4632      	mov	r2, r6
 8003470:	f812 3b01 	ldrb.w	r3, [r2], #1
 8003474:	b25f      	sxtb	r7, r3
 8003476:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 800347a:	dd01      	ble.n	8003480 <_ZN4core7unicode9printable5check17ha9e204e73497ee46E+0x92>
 800347c:	4616      	mov	r6, r2
 800347e:	e007      	b.n	8003490 <_ZN4core7unicode9printable5check17ha9e204e73497ee46E+0xa2>
 8003480:	428a      	cmp	r2, r1
 8003482:	d017      	beq.n	80034b4 <_ZN4core7unicode9printable5check17ha9e204e73497ee46E+0xc6>
 8003484:	7873      	ldrb	r3, [r6, #1]
 8003486:	f007 027f 	and.w	r2, r7, #127	; 0x7f
 800348a:	3602      	adds	r6, #2
 800348c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003490:	ebaa 0a03 	sub.w	sl, sl, r3
 8003494:	f1ba 0f00 	cmp.w	sl, #0
 8003498:	db07      	blt.n	80034aa <_ZN4core7unicode9printable5check17ha9e204e73497ee46E+0xbc>
 800349a:	f080 0001 	eor.w	r0, r0, #1
 800349e:	428e      	cmp	r6, r1
 80034a0:	d1e5      	bne.n	800346e <_ZN4core7unicode9printable5check17ha9e204e73497ee46E+0x80>
 80034a2:	e002      	b.n	80034aa <_ZN4core7unicode9printable5check17ha9e204e73497ee46E+0xbc>
 80034a4:	2000      	movs	r0, #0
 80034a6:	e000      	b.n	80034aa <_ZN4core7unicode9printable5check17ha9e204e73497ee46E+0xbc>
 80034a8:	2001      	movs	r0, #1
 80034aa:	f000 0001 	and.w	r0, r0, #1
 80034ae:	b001      	add	sp, #4
 80034b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034b4:	f24c 50c8 	movw	r0, #50632	; 0xc5c8
 80034b8:	f6c0 0000 	movt	r0, #2048	; 0x800
 80034bc:	f7fe fd4a 	bl	8001f54 <_ZN4core9panicking5panic17h53ca63c6ac6312f8E>
 80034c0:	defe      	udf	#254	; 0xfe
 80034c2:	4610      	mov	r0, r2
 80034c4:	4671      	mov	r1, lr
 80034c6:	f7fe feb0 	bl	800222a <_ZN4core5slice22slice_index_order_fail17h604ca25004a88762E>
 80034ca:	defe      	udf	#254	; 0xfe
 80034cc:	4670      	mov	r0, lr
 80034ce:	4661      	mov	r1, ip
 80034d0:	f7fe fe89 	bl	80021e6 <_ZN4core5slice20slice_index_len_fail17hedb5bb240677a6b7E>
 80034d4:	defe      	udf	#254	; 0xfe

080034d6 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h4ad837c30b835d03E>:
 80034d6:	b5b0      	push	{r4, r5, r7, lr}
 80034d8:	b0a2      	sub	sp, #136	; 0x88
 80034da:	468c      	mov	ip, r1
 80034dc:	6809      	ldr	r1, [r1, #0]
 80034de:	06ca      	lsls	r2, r1, #27
 80034e0:	d409      	bmi.n	80034f6 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h4ad837c30b835d03E+0x20>
 80034e2:	6800      	ldr	r0, [r0, #0]
 80034e4:	0689      	lsls	r1, r1, #26
 80034e6:	d448      	bmi.n	800357a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h4ad837c30b835d03E+0xa4>
 80034e8:	2101      	movs	r1, #1
 80034ea:	4662      	mov	r2, ip
 80034ec:	b022      	add	sp, #136	; 0x88
 80034ee:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80034f2:	f000 ba44 	b.w	800397e <_ZN4core3fmt3num3imp7fmt_u3217h4a6591ec3ef714beE>
 80034f6:	6800      	ldr	r0, [r0, #0]
 80034f8:	f10d 0e08 	add.w	lr, sp, #8
 80034fc:	2281      	movs	r2, #129	; 0x81
 80034fe:	2300      	movs	r3, #0
 8003500:	f000 010f 	and.w	r1, r0, #15
 8003504:	f101 0457 	add.w	r4, r1, #87	; 0x57
 8003508:	290a      	cmp	r1, #10
 800350a:	bf38      	it	cc
 800350c:	f101 0430 	addcc.w	r4, r1, #48	; 0x30
 8003510:	eb0e 0102 	add.w	r1, lr, r2
 8003514:	ebb3 1f10 	cmp.w	r3, r0, lsr #4
 8003518:	f801 4c02 	strb.w	r4, [r1, #-2]
 800351c:	d071      	beq.n	8003602 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h4ad837c30b835d03E+0x12c>
 800351e:	0904      	lsrs	r4, r0, #4
 8003520:	f004 040f 	and.w	r4, r4, #15
 8003524:	f104 0557 	add.w	r5, r4, #87	; 0x57
 8003528:	2c0a      	cmp	r4, #10
 800352a:	bf38      	it	cc
 800352c:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
 8003530:	ebb3 2f10 	cmp.w	r3, r0, lsr #8
 8003534:	f801 5c03 	strb.w	r5, [r1, #-3]
 8003538:	d078      	beq.n	800362c <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h4ad837c30b835d03E+0x156>
 800353a:	0a04      	lsrs	r4, r0, #8
 800353c:	f004 040f 	and.w	r4, r4, #15
 8003540:	f104 0557 	add.w	r5, r4, #87	; 0x57
 8003544:	2c0a      	cmp	r4, #10
 8003546:	bf38      	it	cc
 8003548:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
 800354c:	ebb3 3f10 	cmp.w	r3, r0, lsr #12
 8003550:	f801 5c04 	strb.w	r5, [r1, #-4]
 8003554:	d072      	beq.n	800363c <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h4ad837c30b835d03E+0x166>
 8003556:	0b04      	lsrs	r4, r0, #12
 8003558:	3a04      	subs	r2, #4
 800355a:	f004 040f 	and.w	r4, r4, #15
 800355e:	f104 0557 	add.w	r5, r4, #87	; 0x57
 8003562:	2c0a      	cmp	r4, #10
 8003564:	bf38      	it	cc
 8003566:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
 800356a:	f801 5c05 	strb.w	r5, [r1, #-5]
 800356e:	0c01      	lsrs	r1, r0, #16
 8003570:	ebb3 4f10 	cmp.w	r3, r0, lsr #16
 8003574:	4608      	mov	r0, r1
 8003576:	d1c3      	bne.n	8003500 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h4ad837c30b835d03E+0x2a>
 8003578:	e03f      	b.n	80035fa <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h4ad837c30b835d03E+0x124>
 800357a:	f10d 0e08 	add.w	lr, sp, #8
 800357e:	2281      	movs	r2, #129	; 0x81
 8003580:	2300      	movs	r3, #0
 8003582:	f000 010f 	and.w	r1, r0, #15
 8003586:	f101 0437 	add.w	r4, r1, #55	; 0x37
 800358a:	290a      	cmp	r1, #10
 800358c:	bf38      	it	cc
 800358e:	f101 0430 	addcc.w	r4, r1, #48	; 0x30
 8003592:	eb0e 0102 	add.w	r1, lr, r2
 8003596:	ebb3 1f10 	cmp.w	r3, r0, lsr #4
 800359a:	f801 4c02 	strb.w	r4, [r1, #-2]
 800359e:	d030      	beq.n	8003602 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h4ad837c30b835d03E+0x12c>
 80035a0:	0904      	lsrs	r4, r0, #4
 80035a2:	f004 040f 	and.w	r4, r4, #15
 80035a6:	f104 0537 	add.w	r5, r4, #55	; 0x37
 80035aa:	2c0a      	cmp	r4, #10
 80035ac:	bf38      	it	cc
 80035ae:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
 80035b2:	ebb3 2f10 	cmp.w	r3, r0, lsr #8
 80035b6:	f801 5c03 	strb.w	r5, [r1, #-3]
 80035ba:	d037      	beq.n	800362c <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h4ad837c30b835d03E+0x156>
 80035bc:	0a04      	lsrs	r4, r0, #8
 80035be:	f004 040f 	and.w	r4, r4, #15
 80035c2:	f104 0537 	add.w	r5, r4, #55	; 0x37
 80035c6:	2c0a      	cmp	r4, #10
 80035c8:	bf38      	it	cc
 80035ca:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
 80035ce:	ebb3 3f10 	cmp.w	r3, r0, lsr #12
 80035d2:	f801 5c04 	strb.w	r5, [r1, #-4]
 80035d6:	d031      	beq.n	800363c <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h4ad837c30b835d03E+0x166>
 80035d8:	0b04      	lsrs	r4, r0, #12
 80035da:	3a04      	subs	r2, #4
 80035dc:	f004 040f 	and.w	r4, r4, #15
 80035e0:	f104 0537 	add.w	r5, r4, #55	; 0x37
 80035e4:	2c0a      	cmp	r4, #10
 80035e6:	bf38      	it	cc
 80035e8:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
 80035ec:	f801 5c05 	strb.w	r5, [r1, #-5]
 80035f0:	0c01      	lsrs	r1, r0, #16
 80035f2:	ebb3 4f10 	cmp.w	r3, r0, lsr #16
 80035f6:	4608      	mov	r0, r1
 80035f8:	d1c3      	bne.n	8003582 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h4ad837c30b835d03E+0xac>
 80035fa:	1e50      	subs	r0, r2, #1
 80035fc:	2881      	cmp	r0, #129	; 0x81
 80035fe:	d305      	bcc.n	800360c <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h4ad837c30b835d03E+0x136>
 8003600:	e018      	b.n	8003634 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h4ad837c30b835d03E+0x15e>
 8003602:	1e51      	subs	r1, r2, #1
 8003604:	1e90      	subs	r0, r2, #2
 8003606:	460a      	mov	r2, r1
 8003608:	2881      	cmp	r0, #129	; 0x81
 800360a:	d213      	bcs.n	8003634 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h4ad837c30b835d03E+0x15e>
 800360c:	f1c2 0181 	rsb	r1, r2, #129	; 0x81
 8003610:	f64c 022c 	movw	r2, #51244	; 0xc82c
 8003614:	4470      	add	r0, lr
 8003616:	f6c0 0200 	movt	r2, #2048	; 0x800
 800361a:	e9cd 0100 	strd	r0, r1, [sp]
 800361e:	4660      	mov	r0, ip
 8003620:	2101      	movs	r1, #1
 8003622:	2302      	movs	r3, #2
 8003624:	f7ff fa8c 	bl	8002b40 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E>
 8003628:	b022      	add	sp, #136	; 0x88
 800362a:	bdb0      	pop	{r4, r5, r7, pc}
 800362c:	1ed0      	subs	r0, r2, #3
 800362e:	3a02      	subs	r2, #2
 8003630:	2881      	cmp	r0, #129	; 0x81
 8003632:	d3eb      	bcc.n	800360c <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h4ad837c30b835d03E+0x136>
 8003634:	2180      	movs	r1, #128	; 0x80
 8003636:	f7fe fdf8 	bl	800222a <_ZN4core5slice22slice_index_order_fail17h604ca25004a88762E>
 800363a:	defe      	udf	#254	; 0xfe
 800363c:	1f10      	subs	r0, r2, #4
 800363e:	3a03      	subs	r2, #3
 8003640:	2881      	cmp	r0, #129	; 0x81
 8003642:	d3e3      	bcc.n	800360c <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h4ad837c30b835d03E+0x136>
 8003644:	e7f6      	b.n	8003634 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h4ad837c30b835d03E+0x15e>

08003646 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17heed14ddcd875f85bE>:
 8003646:	b580      	push	{r7, lr}
 8003648:	b0a2      	sub	sp, #136	; 0x88
 800364a:	7802      	ldrb	r2, [r0, #0]
 800364c:	468c      	mov	ip, r1
 800364e:	f002 030f 	and.w	r3, r2, #15
 8003652:	f103 0057 	add.w	r0, r3, #87	; 0x57
 8003656:	2b0a      	cmp	r3, #10
 8003658:	bf38      	it	cc
 800365a:	f103 0030 	addcc.w	r0, r3, #48	; 0x30
 800365e:	2300      	movs	r3, #0
 8003660:	ebb3 1f12 	cmp.w	r3, r2, lsr #4
 8003664:	d00b      	beq.n	800367e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17heed14ddcd875f85bE+0x38>
 8003666:	0913      	lsrs	r3, r2, #4
 8003668:	f103 0157 	add.w	r1, r3, #87	; 0x57
 800366c:	2aa0      	cmp	r2, #160	; 0xa0
 800366e:	bf38      	it	cc
 8003670:	f103 0130 	addcc.w	r1, r3, #48	; 0x30
 8003674:	f88d 1086 	strb.w	r1, [sp, #134]	; 0x86
 8003678:	227e      	movs	r2, #126	; 0x7e
 800367a:	2302      	movs	r3, #2
 800367c:	e001      	b.n	8003682 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17heed14ddcd875f85bE+0x3c>
 800367e:	227f      	movs	r2, #127	; 0x7f
 8003680:	2301      	movs	r3, #1
 8003682:	f88d 0087 	strb.w	r0, [sp, #135]	; 0x87
 8003686:	a802      	add	r0, sp, #8
 8003688:	4410      	add	r0, r2
 800368a:	f64c 022c 	movw	r2, #51244	; 0xc82c
 800368e:	e9cd 0300 	strd	r0, r3, [sp]
 8003692:	f6c0 0200 	movt	r2, #2048	; 0x800
 8003696:	4660      	mov	r0, ip
 8003698:	2101      	movs	r1, #1
 800369a:	2302      	movs	r3, #2
 800369c:	f7ff fa50 	bl	8002b40 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E>
 80036a0:	b022      	add	sp, #136	; 0x88
 80036a2:	bd80      	pop	{r7, pc}

080036a4 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h33ff4d4021f61f61E>:
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b0a2      	sub	sp, #136	; 0x88
 80036a8:	7802      	ldrb	r2, [r0, #0]
 80036aa:	468c      	mov	ip, r1
 80036ac:	f002 030f 	and.w	r3, r2, #15
 80036b0:	f103 0037 	add.w	r0, r3, #55	; 0x37
 80036b4:	2b0a      	cmp	r3, #10
 80036b6:	bf38      	it	cc
 80036b8:	f103 0030 	addcc.w	r0, r3, #48	; 0x30
 80036bc:	2300      	movs	r3, #0
 80036be:	ebb3 1f12 	cmp.w	r3, r2, lsr #4
 80036c2:	d00b      	beq.n	80036dc <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h33ff4d4021f61f61E+0x38>
 80036c4:	0913      	lsrs	r3, r2, #4
 80036c6:	f103 0137 	add.w	r1, r3, #55	; 0x37
 80036ca:	2aa0      	cmp	r2, #160	; 0xa0
 80036cc:	bf38      	it	cc
 80036ce:	f103 0130 	addcc.w	r1, r3, #48	; 0x30
 80036d2:	f88d 1086 	strb.w	r1, [sp, #134]	; 0x86
 80036d6:	227e      	movs	r2, #126	; 0x7e
 80036d8:	2302      	movs	r3, #2
 80036da:	e001      	b.n	80036e0 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h33ff4d4021f61f61E+0x3c>
 80036dc:	227f      	movs	r2, #127	; 0x7f
 80036de:	2301      	movs	r3, #1
 80036e0:	f88d 0087 	strb.w	r0, [sp, #135]	; 0x87
 80036e4:	a802      	add	r0, sp, #8
 80036e6:	4410      	add	r0, r2
 80036e8:	f64c 022c 	movw	r2, #51244	; 0xc82c
 80036ec:	e9cd 0300 	strd	r0, r3, [sp]
 80036f0:	f6c0 0200 	movt	r2, #2048	; 0x800
 80036f4:	4660      	mov	r0, ip
 80036f6:	2101      	movs	r1, #1
 80036f8:	2302      	movs	r3, #2
 80036fa:	f7ff fa21 	bl	8002b40 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E>
 80036fe:	b022      	add	sp, #136	; 0x88
 8003700:	bd80      	pop	{r7, pc}

08003702 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hb2119167a92723afE>:
 8003702:	b5b0      	push	{r4, r5, r7, lr}
 8003704:	b0a2      	sub	sp, #136	; 0x88
 8003706:	6800      	ldr	r0, [r0, #0]
 8003708:	f10d 0e08 	add.w	lr, sp, #8
 800370c:	468c      	mov	ip, r1
 800370e:	2381      	movs	r3, #129	; 0x81
 8003710:	2100      	movs	r1, #0
 8003712:	f000 020f 	and.w	r2, r0, #15
 8003716:	f102 0457 	add.w	r4, r2, #87	; 0x57
 800371a:	2a0a      	cmp	r2, #10
 800371c:	bf38      	it	cc
 800371e:	f102 0430 	addcc.w	r4, r2, #48	; 0x30
 8003722:	eb0e 0203 	add.w	r2, lr, r3
 8003726:	ebb1 1f10 	cmp.w	r1, r0, lsr #4
 800372a:	f802 4c02 	strb.w	r4, [r2, #-2]
 800372e:	d030      	beq.n	8003792 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hb2119167a92723afE+0x90>
 8003730:	0904      	lsrs	r4, r0, #4
 8003732:	f004 040f 	and.w	r4, r4, #15
 8003736:	f104 0557 	add.w	r5, r4, #87	; 0x57
 800373a:	2c0a      	cmp	r4, #10
 800373c:	bf38      	it	cc
 800373e:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
 8003742:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
 8003746:	f802 5c03 	strb.w	r5, [r2, #-3]
 800374a:	d028      	beq.n	800379e <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hb2119167a92723afE+0x9c>
 800374c:	0a04      	lsrs	r4, r0, #8
 800374e:	f004 040f 	and.w	r4, r4, #15
 8003752:	f104 0557 	add.w	r5, r4, #87	; 0x57
 8003756:	2c0a      	cmp	r4, #10
 8003758:	bf38      	it	cc
 800375a:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
 800375e:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
 8003762:	f802 5c04 	strb.w	r5, [r2, #-4]
 8003766:	d01f      	beq.n	80037a8 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hb2119167a92723afE+0xa6>
 8003768:	0b04      	lsrs	r4, r0, #12
 800376a:	3b04      	subs	r3, #4
 800376c:	f004 040f 	and.w	r4, r4, #15
 8003770:	f104 0557 	add.w	r5, r4, #87	; 0x57
 8003774:	2c0a      	cmp	r4, #10
 8003776:	bf38      	it	cc
 8003778:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
 800377c:	f802 5c05 	strb.w	r5, [r2, #-5]
 8003780:	0c02      	lsrs	r2, r0, #16
 8003782:	ebb1 4f10 	cmp.w	r1, r0, lsr #16
 8003786:	4610      	mov	r0, r2
 8003788:	d1c3      	bne.n	8003712 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hb2119167a92723afE+0x10>
 800378a:	1e58      	subs	r0, r3, #1
 800378c:	2881      	cmp	r0, #129	; 0x81
 800378e:	d30f      	bcc.n	80037b0 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hb2119167a92723afE+0xae>
 8003790:	e01e      	b.n	80037d0 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hb2119167a92723afE+0xce>
 8003792:	1e59      	subs	r1, r3, #1
 8003794:	1e98      	subs	r0, r3, #2
 8003796:	460b      	mov	r3, r1
 8003798:	2881      	cmp	r0, #129	; 0x81
 800379a:	d309      	bcc.n	80037b0 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hb2119167a92723afE+0xae>
 800379c:	e018      	b.n	80037d0 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hb2119167a92723afE+0xce>
 800379e:	1ed8      	subs	r0, r3, #3
 80037a0:	3b02      	subs	r3, #2
 80037a2:	2881      	cmp	r0, #129	; 0x81
 80037a4:	d304      	bcc.n	80037b0 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hb2119167a92723afE+0xae>
 80037a6:	e013      	b.n	80037d0 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hb2119167a92723afE+0xce>
 80037a8:	1f18      	subs	r0, r3, #4
 80037aa:	3b03      	subs	r3, #3
 80037ac:	2881      	cmp	r0, #129	; 0x81
 80037ae:	d20f      	bcs.n	80037d0 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hb2119167a92723afE+0xce>
 80037b0:	f1c3 0181 	rsb	r1, r3, #129	; 0x81
 80037b4:	f64c 022c 	movw	r2, #51244	; 0xc82c
 80037b8:	4470      	add	r0, lr
 80037ba:	f6c0 0200 	movt	r2, #2048	; 0x800
 80037be:	e9cd 0100 	strd	r0, r1, [sp]
 80037c2:	4660      	mov	r0, ip
 80037c4:	2101      	movs	r1, #1
 80037c6:	2302      	movs	r3, #2
 80037c8:	f7ff f9ba 	bl	8002b40 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E>
 80037cc:	b022      	add	sp, #136	; 0x88
 80037ce:	bdb0      	pop	{r4, r5, r7, pc}
 80037d0:	2180      	movs	r1, #128	; 0x80
 80037d2:	f7fe fd2a 	bl	800222a <_ZN4core5slice22slice_index_order_fail17h604ca25004a88762E>
 80037d6:	defe      	udf	#254	; 0xfe

080037d8 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hc44988ae29d24532E>:
 80037d8:	b5b0      	push	{r4, r5, r7, lr}
 80037da:	b0a2      	sub	sp, #136	; 0x88
 80037dc:	6800      	ldr	r0, [r0, #0]
 80037de:	f10d 0e08 	add.w	lr, sp, #8
 80037e2:	468c      	mov	ip, r1
 80037e4:	2381      	movs	r3, #129	; 0x81
 80037e6:	2100      	movs	r1, #0
 80037e8:	f000 020f 	and.w	r2, r0, #15
 80037ec:	f102 0437 	add.w	r4, r2, #55	; 0x37
 80037f0:	2a0a      	cmp	r2, #10
 80037f2:	bf38      	it	cc
 80037f4:	f102 0430 	addcc.w	r4, r2, #48	; 0x30
 80037f8:	eb0e 0203 	add.w	r2, lr, r3
 80037fc:	ebb1 1f10 	cmp.w	r1, r0, lsr #4
 8003800:	f802 4c02 	strb.w	r4, [r2, #-2]
 8003804:	d030      	beq.n	8003868 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hc44988ae29d24532E+0x90>
 8003806:	0904      	lsrs	r4, r0, #4
 8003808:	f004 040f 	and.w	r4, r4, #15
 800380c:	f104 0537 	add.w	r5, r4, #55	; 0x37
 8003810:	2c0a      	cmp	r4, #10
 8003812:	bf38      	it	cc
 8003814:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
 8003818:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
 800381c:	f802 5c03 	strb.w	r5, [r2, #-3]
 8003820:	d028      	beq.n	8003874 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hc44988ae29d24532E+0x9c>
 8003822:	0a04      	lsrs	r4, r0, #8
 8003824:	f004 040f 	and.w	r4, r4, #15
 8003828:	f104 0537 	add.w	r5, r4, #55	; 0x37
 800382c:	2c0a      	cmp	r4, #10
 800382e:	bf38      	it	cc
 8003830:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
 8003834:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
 8003838:	f802 5c04 	strb.w	r5, [r2, #-4]
 800383c:	d01f      	beq.n	800387e <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hc44988ae29d24532E+0xa6>
 800383e:	0b04      	lsrs	r4, r0, #12
 8003840:	3b04      	subs	r3, #4
 8003842:	f004 040f 	and.w	r4, r4, #15
 8003846:	f104 0537 	add.w	r5, r4, #55	; 0x37
 800384a:	2c0a      	cmp	r4, #10
 800384c:	bf38      	it	cc
 800384e:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
 8003852:	f802 5c05 	strb.w	r5, [r2, #-5]
 8003856:	0c02      	lsrs	r2, r0, #16
 8003858:	ebb1 4f10 	cmp.w	r1, r0, lsr #16
 800385c:	4610      	mov	r0, r2
 800385e:	d1c3      	bne.n	80037e8 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hc44988ae29d24532E+0x10>
 8003860:	1e58      	subs	r0, r3, #1
 8003862:	2881      	cmp	r0, #129	; 0x81
 8003864:	d30f      	bcc.n	8003886 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hc44988ae29d24532E+0xae>
 8003866:	e01e      	b.n	80038a6 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hc44988ae29d24532E+0xce>
 8003868:	1e59      	subs	r1, r3, #1
 800386a:	1e98      	subs	r0, r3, #2
 800386c:	460b      	mov	r3, r1
 800386e:	2881      	cmp	r0, #129	; 0x81
 8003870:	d309      	bcc.n	8003886 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hc44988ae29d24532E+0xae>
 8003872:	e018      	b.n	80038a6 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hc44988ae29d24532E+0xce>
 8003874:	1ed8      	subs	r0, r3, #3
 8003876:	3b02      	subs	r3, #2
 8003878:	2881      	cmp	r0, #129	; 0x81
 800387a:	d304      	bcc.n	8003886 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hc44988ae29d24532E+0xae>
 800387c:	e013      	b.n	80038a6 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hc44988ae29d24532E+0xce>
 800387e:	1f18      	subs	r0, r3, #4
 8003880:	3b03      	subs	r3, #3
 8003882:	2881      	cmp	r0, #129	; 0x81
 8003884:	d20f      	bcs.n	80038a6 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hc44988ae29d24532E+0xce>
 8003886:	f1c3 0181 	rsb	r1, r3, #129	; 0x81
 800388a:	f64c 022c 	movw	r2, #51244	; 0xc82c
 800388e:	4470      	add	r0, lr
 8003890:	f6c0 0200 	movt	r2, #2048	; 0x800
 8003894:	e9cd 0100 	strd	r0, r1, [sp]
 8003898:	4660      	mov	r0, ip
 800389a:	2101      	movs	r1, #1
 800389c:	2302      	movs	r3, #2
 800389e:	f7ff f94f 	bl	8002b40 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E>
 80038a2:	b022      	add	sp, #136	; 0x88
 80038a4:	bdb0      	pop	{r4, r5, r7, pc}
 80038a6:	2180      	movs	r1, #128	; 0x80
 80038a8:	f7fe fcbf 	bl	800222a <_ZN4core5slice22slice_index_order_fail17h604ca25004a88762E>
 80038ac:	defe      	udf	#254	; 0xfe

080038ae <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17h1aa219e6cfd94b25E>:
 80038ae:	b510      	push	{r4, lr}
 80038b0:	b0a2      	sub	sp, #136	; 0x88
 80038b2:	468c      	mov	ip, r1
 80038b4:	e9d0 2100 	ldrd	r2, r1, [r0]
 80038b8:	f10d 0e08 	add.w	lr, sp, #8
 80038bc:	237f      	movs	r3, #127	; 0x7f
 80038be:	1c58      	adds	r0, r3, #1
 80038c0:	d013      	beq.n	80038ea <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17h1aa219e6cfd94b25E+0x3c>
 80038c2:	f002 000f 	and.w	r0, r2, #15
 80038c6:	f100 0457 	add.w	r4, r0, #87	; 0x57
 80038ca:	280a      	cmp	r0, #10
 80038cc:	bf38      	it	cc
 80038ce:	f100 0430 	addcc.w	r4, r0, #48	; 0x30
 80038d2:	0910      	lsrs	r0, r2, #4
 80038d4:	ea40 7201 	orr.w	r2, r0, r1, lsl #28
 80038d8:	f80e 4003 	strb.w	r4, [lr, r3]
 80038dc:	ea42 1011 	orr.w	r0, r2, r1, lsr #4
 80038e0:	3b01      	subs	r3, #1
 80038e2:	0909      	lsrs	r1, r1, #4
 80038e4:	2800      	cmp	r0, #0
 80038e6:	d1ea      	bne.n	80038be <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17h1aa219e6cfd94b25E+0x10>
 80038e8:	1c58      	adds	r0, r3, #1
 80038ea:	2881      	cmp	r0, #129	; 0x81
 80038ec:	d20f      	bcs.n	800390e <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17h1aa219e6cfd94b25E+0x60>
 80038ee:	f1c0 0180 	rsb	r1, r0, #128	; 0x80
 80038f2:	f64c 022c 	movw	r2, #51244	; 0xc82c
 80038f6:	4470      	add	r0, lr
 80038f8:	f6c0 0200 	movt	r2, #2048	; 0x800
 80038fc:	e9cd 0100 	strd	r0, r1, [sp]
 8003900:	4660      	mov	r0, ip
 8003902:	2101      	movs	r1, #1
 8003904:	2302      	movs	r3, #2
 8003906:	f7ff f91b 	bl	8002b40 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E>
 800390a:	b022      	add	sp, #136	; 0x88
 800390c:	bd10      	pop	{r4, pc}
 800390e:	2180      	movs	r1, #128	; 0x80
 8003910:	f7fe fc8b 	bl	800222a <_ZN4core5slice22slice_index_order_fail17h604ca25004a88762E>
 8003914:	defe      	udf	#254	; 0xfe

08003916 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i64$GT$3fmt17h93ab4183a6d5feaaE>:
 8003916:	b510      	push	{r4, lr}
 8003918:	b0a2      	sub	sp, #136	; 0x88
 800391a:	468c      	mov	ip, r1
 800391c:	e9d0 2100 	ldrd	r2, r1, [r0]
 8003920:	f10d 0e08 	add.w	lr, sp, #8
 8003924:	237f      	movs	r3, #127	; 0x7f
 8003926:	1c58      	adds	r0, r3, #1
 8003928:	d013      	beq.n	8003952 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i64$GT$3fmt17h93ab4183a6d5feaaE+0x3c>
 800392a:	f002 000f 	and.w	r0, r2, #15
 800392e:	f100 0437 	add.w	r4, r0, #55	; 0x37
 8003932:	280a      	cmp	r0, #10
 8003934:	bf38      	it	cc
 8003936:	f100 0430 	addcc.w	r4, r0, #48	; 0x30
 800393a:	0910      	lsrs	r0, r2, #4
 800393c:	ea40 7201 	orr.w	r2, r0, r1, lsl #28
 8003940:	f80e 4003 	strb.w	r4, [lr, r3]
 8003944:	ea42 1011 	orr.w	r0, r2, r1, lsr #4
 8003948:	3b01      	subs	r3, #1
 800394a:	0909      	lsrs	r1, r1, #4
 800394c:	2800      	cmp	r0, #0
 800394e:	d1ea      	bne.n	8003926 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i64$GT$3fmt17h93ab4183a6d5feaaE+0x10>
 8003950:	1c58      	adds	r0, r3, #1
 8003952:	2881      	cmp	r0, #129	; 0x81
 8003954:	d20f      	bcs.n	8003976 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i64$GT$3fmt17h93ab4183a6d5feaaE+0x60>
 8003956:	f1c0 0180 	rsb	r1, r0, #128	; 0x80
 800395a:	f64c 022c 	movw	r2, #51244	; 0xc82c
 800395e:	4470      	add	r0, lr
 8003960:	f6c0 0200 	movt	r2, #2048	; 0x800
 8003964:	e9cd 0100 	strd	r0, r1, [sp]
 8003968:	4660      	mov	r0, ip
 800396a:	2101      	movs	r1, #1
 800396c:	2302      	movs	r3, #2
 800396e:	f7ff f8e7 	bl	8002b40 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E>
 8003972:	b022      	add	sp, #136	; 0x88
 8003974:	bd10      	pop	{r4, pc}
 8003976:	2180      	movs	r1, #128	; 0x80
 8003978:	f7fe fc57 	bl	800222a <_ZN4core5slice22slice_index_order_fail17h604ca25004a88762E>
 800397c:	defe      	udf	#254	; 0xfe

0800397e <_ZN4core3fmt3num3imp7fmt_u3217h4a6591ec3ef714beE>:
 800397e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003982:	b08f      	sub	sp, #60	; 0x3c
 8003984:	4617      	mov	r7, r2
 8003986:	f242 7210 	movw	r2, #10000	; 0x2710
 800398a:	4290      	cmp	r0, r2
 800398c:	d346      	bcc.n	8003a1c <_ZN4core3fmt3num3imp7fmt_u3217h4a6591ec3ef714beE+0x9e>
 800398e:	f241 7959 	movw	r9, #5977	; 0x1759
 8003992:	f248 5a1f 	movw	sl, #34079	; 0x851f
 8003996:	f64c 062e 	movw	r6, #51246	; 0xc82e
 800399a:	f24e 08ff 	movw	r8, #57599	; 0xe0ff
 800399e:	2300      	movs	r3, #0
 80039a0:	f2cd 19b7 	movt	r9, #53687	; 0xd1b7
 80039a4:	f2c5 1aeb 	movt	sl, #20971	; 0x51eb
 80039a8:	f6c0 0600 	movt	r6, #2048	; 0x800
 80039ac:	f04f 0b64 	mov.w	fp, #100	; 0x64
 80039b0:	f2c0 58f5 	movt	r8, #1525	; 0x5f5
 80039b4:	e9cd 1703 	strd	r1, r7, [sp, #12]
 80039b8:	fba0 4709 	umull	r4, r7, r0, r9
 80039bc:	f10d 0115 	add.w	r1, sp, #21
 80039c0:	18cd      	adds	r5, r1, r3
 80039c2:	3b04      	subs	r3, #4
 80039c4:	4540      	cmp	r0, r8
 80039c6:	ea4f 3457 	mov.w	r4, r7, lsr #13
 80039ca:	fb04 0712 	mls	r7, r4, r2, r0
 80039ce:	4620      	mov	r0, r4
 80039d0:	fba7 ce0a 	umull	ip, lr, r7, sl
 80039d4:	ea4f 115e 	mov.w	r1, lr, lsr #5
 80039d8:	f836 2011 	ldrh.w	r2, [r6, r1, lsl #1]
 80039dc:	fb01 711b 	mls	r1, r1, fp, r7
 80039e0:	f8a5 2023 	strh.w	r2, [r5, #35]	; 0x23
 80039e4:	f242 7210 	movw	r2, #10000	; 0x2710
 80039e8:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 80039ec:	f8a5 1025 	strh.w	r1, [r5, #37]	; 0x25
 80039f0:	d8e2      	bhi.n	80039b8 <_ZN4core3fmt3num3imp7fmt_u3217h4a6591ec3ef714beE+0x3a>
 80039f2:	e9dd 1703 	ldrd	r1, r7, [sp, #12]
 80039f6:	f103 0227 	add.w	r2, r3, #39	; 0x27
 80039fa:	4620      	mov	r0, r4
 80039fc:	2863      	cmp	r0, #99	; 0x63
 80039fe:	dc10      	bgt.n	8003a22 <_ZN4core3fmt3num3imp7fmt_u3217h4a6591ec3ef714beE+0xa4>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b09      	cmp	r3, #9
 8003a04:	dd25      	ble.n	8003a52 <_ZN4core3fmt3num3imp7fmt_u3217h4a6591ec3ef714beE+0xd4>
 8003a06:	f64c 002e 	movw	r0, #51246	; 0xc82e
 8003a0a:	f6c0 0000 	movt	r0, #2048	; 0x800
 8003a0e:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8003a12:	1e90      	subs	r0, r2, #2
 8003a14:	f10d 0215 	add.w	r2, sp, #21
 8003a18:	5213      	strh	r3, [r2, r0]
 8003a1a:	e01f      	b.n	8003a5c <_ZN4core3fmt3num3imp7fmt_u3217h4a6591ec3ef714beE+0xde>
 8003a1c:	2227      	movs	r2, #39	; 0x27
 8003a1e:	2863      	cmp	r0, #99	; 0x63
 8003a20:	ddee      	ble.n	8003a00 <_ZN4core3fmt3num3imp7fmt_u3217h4a6591ec3ef714beE+0x82>
 8003a22:	f248 531f 	movw	r3, #34079	; 0x851f
 8003a26:	b286      	uxth	r6, r0
 8003a28:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 8003a2c:	3a02      	subs	r2, #2
 8003a2e:	fba6 6303 	umull	r6, r3, r6, r3
 8003a32:	2664      	movs	r6, #100	; 0x64
 8003a34:	095b      	lsrs	r3, r3, #5
 8003a36:	fb03 0016 	mls	r0, r3, r6, r0
 8003a3a:	f64c 062e 	movw	r6, #51246	; 0xc82e
 8003a3e:	f6c0 0600 	movt	r6, #2048	; 0x800
 8003a42:	b280      	uxth	r0, r0
 8003a44:	f836 0010 	ldrh.w	r0, [r6, r0, lsl #1]
 8003a48:	f10d 0615 	add.w	r6, sp, #21
 8003a4c:	52b0      	strh	r0, [r6, r2]
 8003a4e:	2b09      	cmp	r3, #9
 8003a50:	dcd9      	bgt.n	8003a06 <_ZN4core3fmt3num3imp7fmt_u3217h4a6591ec3ef714beE+0x88>
 8003a52:	1e50      	subs	r0, r2, #1
 8003a54:	f10d 0215 	add.w	r2, sp, #21
 8003a58:	3330      	adds	r3, #48	; 0x30
 8003a5a:	5413      	strb	r3, [r2, r0]
 8003a5c:	f1c0 0327 	rsb	r3, r0, #39	; 0x27
 8003a60:	f10d 0215 	add.w	r2, sp, #21
 8003a64:	4410      	add	r0, r2
 8003a66:	f24c 4210 	movw	r2, #50192	; 0xc410
 8003a6a:	e9cd 0300 	strd	r0, r3, [sp]
 8003a6e:	f6c0 0200 	movt	r2, #2048	; 0x800
 8003a72:	4638      	mov	r0, r7
 8003a74:	2300      	movs	r3, #0
 8003a76:	f7ff f863 	bl	8002b40 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E>
 8003a7a:	b00f      	add	sp, #60	; 0x3c
 8003a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003a80 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17heb4d046d241d78d0E>:
 8003a80:	7800      	ldrb	r0, [r0, #0]
 8003a82:	460a      	mov	r2, r1
 8003a84:	2101      	movs	r1, #1
 8003a86:	f7ff bf7a 	b.w	800397e <_ZN4core3fmt3num3imp7fmt_u3217h4a6591ec3ef714beE>

08003a8a <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17h33b3bbdbc74b88baE>:
 8003a8a:	6800      	ldr	r0, [r0, #0]
 8003a8c:	460a      	mov	r2, r1
 8003a8e:	2100      	movs	r1, #0
 8003a90:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8003a94:	bfc8      	it	gt
 8003a96:	2101      	movgt	r1, #1
 8003a98:	2800      	cmp	r0, #0
 8003a9a:	bf48      	it	mi
 8003a9c:	4240      	negmi	r0, r0
 8003a9e:	f7ff bf6e 	b.w	800397e <_ZN4core3fmt3num3imp7fmt_u3217h4a6591ec3ef714beE>

08003aa2 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17ha7805aa8d849f46cE>:
 8003aa2:	6800      	ldr	r0, [r0, #0]
 8003aa4:	460a      	mov	r2, r1
 8003aa6:	2101      	movs	r1, #1
 8003aa8:	f7ff bf69 	b.w	800397e <_ZN4core3fmt3num3imp7fmt_u3217h4a6591ec3ef714beE>

08003aac <_ZN4core3fmt3num3imp7fmt_u6417h9ff4e337182d98bfE>:
 8003aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ab0:	b08f      	sub	sp, #60	; 0x3c
 8003ab2:	4606      	mov	r6, r0
 8003ab4:	f242 7010 	movw	r0, #10000	; 0x2710
 8003ab8:	1a30      	subs	r0, r6, r0
 8003aba:	461d      	mov	r5, r3
 8003abc:	4614      	mov	r4, r2
 8003abe:	f171 0000 	sbcs.w	r0, r1, #0
 8003ac2:	d34c      	bcc.n	8003b5e <_ZN4core3fmt3num3imp7fmt_u6417h9ff4e337182d98bfE+0xb2>
 8003ac4:	f64c 082e 	movw	r8, #51246	; 0xc82e
 8003ac8:	f24e 0bff 	movw	fp, #57599	; 0xe0ff
 8003acc:	460f      	mov	r7, r1
 8003ace:	f6c0 0800 	movt	r8, #2048	; 0x800
 8003ad2:	f04f 0964 	mov.w	r9, #100	; 0x64
 8003ad6:	f2c0 5bf5 	movt	fp, #1525	; 0x5f5
 8003ada:	f04f 0a00 	mov.w	sl, #0
 8003ade:	e9cd 4503 	strd	r4, r5, [sp, #12]
 8003ae2:	4630      	mov	r0, r6
 8003ae4:	4639      	mov	r1, r7
 8003ae6:	f242 7210 	movw	r2, #10000	; 0x2710
 8003aea:	2300      	movs	r3, #0
 8003aec:	f008 f87a 	bl	800bbe4 <__aeabi_uldivmod>
 8003af0:	f242 7210 	movw	r2, #10000	; 0x2710
 8003af4:	f248 531f 	movw	r3, #34079	; 0x851f
 8003af8:	fb00 6212 	mls	r2, r0, r2, r6
 8003afc:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 8003b00:	f10d 0515 	add.w	r5, sp, #21
 8003b04:	4455      	add	r5, sl
 8003b06:	f1aa 0a04 	sub.w	sl, sl, #4
 8003b0a:	fba2 3403 	umull	r3, r4, r2, r3
 8003b0e:	0963      	lsrs	r3, r4, #5
 8003b10:	fb03 2219 	mls	r2, r3, r9, r2
 8003b14:	f838 4013 	ldrh.w	r4, [r8, r3, lsl #1]
 8003b18:	f8a5 4023 	strh.w	r4, [r5, #35]	; 0x23
 8003b1c:	f838 2012 	ldrh.w	r2, [r8, r2, lsl #1]
 8003b20:	f8a5 2025 	strh.w	r2, [r5, #37]	; 0x25
 8003b24:	ebbb 0206 	subs.w	r2, fp, r6
 8003b28:	f04f 0200 	mov.w	r2, #0
 8003b2c:	4606      	mov	r6, r0
 8003b2e:	41ba      	sbcs	r2, r7
 8003b30:	460f      	mov	r7, r1
 8003b32:	d3d6      	bcc.n	8003ae2 <_ZN4core3fmt3num3imp7fmt_u6417h9ff4e337182d98bfE+0x36>
 8003b34:	e9dd 4503 	ldrd	r4, r5, [sp, #12]
 8003b38:	f10a 0127 	add.w	r1, sl, #39	; 0x27
 8003b3c:	4606      	mov	r6, r0
 8003b3e:	2e63      	cmp	r6, #99	; 0x63
 8003b40:	dc10      	bgt.n	8003b64 <_ZN4core3fmt3num3imp7fmt_u6417h9ff4e337182d98bfE+0xb8>
 8003b42:	4630      	mov	r0, r6
 8003b44:	2809      	cmp	r0, #9
 8003b46:	dd25      	ble.n	8003b94 <_ZN4core3fmt3num3imp7fmt_u6417h9ff4e337182d98bfE+0xe8>
 8003b48:	f64c 022e 	movw	r2, #51246	; 0xc82e
 8003b4c:	3902      	subs	r1, #2
 8003b4e:	f6c0 0200 	movt	r2, #2048	; 0x800
 8003b52:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
 8003b56:	f10d 0215 	add.w	r2, sp, #21
 8003b5a:	5250      	strh	r0, [r2, r1]
 8003b5c:	e01f      	b.n	8003b9e <_ZN4core3fmt3num3imp7fmt_u6417h9ff4e337182d98bfE+0xf2>
 8003b5e:	2127      	movs	r1, #39	; 0x27
 8003b60:	2e63      	cmp	r6, #99	; 0x63
 8003b62:	ddee      	ble.n	8003b42 <_ZN4core3fmt3num3imp7fmt_u6417h9ff4e337182d98bfE+0x96>
 8003b64:	f248 521f 	movw	r2, #34079	; 0x851f
 8003b68:	b2b0      	uxth	r0, r6
 8003b6a:	f2c5 12eb 	movt	r2, #20971	; 0x51eb
 8003b6e:	f64c 032e 	movw	r3, #51246	; 0xc82e
 8003b72:	fba0 0202 	umull	r0, r2, r0, r2
 8003b76:	f6c0 0300 	movt	r3, #2048	; 0x800
 8003b7a:	3902      	subs	r1, #2
 8003b7c:	0950      	lsrs	r0, r2, #5
 8003b7e:	2264      	movs	r2, #100	; 0x64
 8003b80:	fb00 6212 	mls	r2, r0, r2, r6
 8003b84:	b292      	uxth	r2, r2
 8003b86:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8003b8a:	f10d 0315 	add.w	r3, sp, #21
 8003b8e:	525a      	strh	r2, [r3, r1]
 8003b90:	2809      	cmp	r0, #9
 8003b92:	dcd9      	bgt.n	8003b48 <_ZN4core3fmt3num3imp7fmt_u6417h9ff4e337182d98bfE+0x9c>
 8003b94:	3901      	subs	r1, #1
 8003b96:	f10d 0215 	add.w	r2, sp, #21
 8003b9a:	3030      	adds	r0, #48	; 0x30
 8003b9c:	5450      	strb	r0, [r2, r1]
 8003b9e:	f1c1 0027 	rsb	r0, r1, #39	; 0x27
 8003ba2:	f10d 0215 	add.w	r2, sp, #21
 8003ba6:	4411      	add	r1, r2
 8003ba8:	f24c 4210 	movw	r2, #50192	; 0xc410
 8003bac:	e9cd 1000 	strd	r1, r0, [sp]
 8003bb0:	f6c0 0200 	movt	r2, #2048	; 0x800
 8003bb4:	4628      	mov	r0, r5
 8003bb6:	4621      	mov	r1, r4
 8003bb8:	2300      	movs	r3, #0
 8003bba:	f7fe ffc1 	bl	8002b40 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E>
 8003bbe:	b00f      	add	sp, #60	; 0x3c
 8003bc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003bc4 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i64$GT$3fmt17h97d3cc39ae689800E>:
 8003bc4:	468c      	mov	ip, r1
 8003bc6:	e9d0 0100 	ldrd	r0, r1, [r0]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 8003bd0:	bfc8      	it	gt
 8003bd2:	2201      	movgt	r2, #1
 8003bd4:	eb10 70e1 	adds.w	r0, r0, r1, asr #31
 8003bd8:	eb41 73e1 	adc.w	r3, r1, r1, asr #31
 8003bdc:	ea80 70e1 	eor.w	r0, r0, r1, asr #31
 8003be0:	ea83 71e1 	eor.w	r1, r3, r1, asr #31
 8003be4:	4663      	mov	r3, ip
 8003be6:	f7ff bf61 	b.w	8003aac <_ZN4core3fmt3num3imp7fmt_u6417h9ff4e337182d98bfE>

08003bea <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h133134731e47c3ddE>:
 8003bea:	460b      	mov	r3, r1
 8003bec:	e9d0 1200 	ldrd	r1, r2, [r0]
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f7ff b8e2 	b.w	8002dba <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE>
	...

08003bf8 <console_flush>:
    return __semihost(SYS_WRITE, args);
}

static struct os_mbuf *semihost_mbuf = NULL;

void console_flush(void) {
 8003bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
    //  Flush output buffer to the console log.  This will be slow.
    if (!log_enabled) { return; }  //  Skip if log not enabled.
 8003bfa:	4c12      	ldr	r4, [pc, #72]	; (8003c44 <console_flush+0x4c>)
void console_flush(void) {
 8003bfc:	b085      	sub	sp, #20
    if (!log_enabled) { return; }  //  Skip if log not enabled.
 8003bfe:	7822      	ldrb	r2, [r4, #0]
 8003c00:	b1ea      	cbz	r2, 8003c3e <console_flush+0x46>
    if (!semihost_mbuf) { return; }  //  Buffer is empty, nothing to write.
 8003c02:	4911      	ldr	r1, [pc, #68]	; (8003c48 <console_flush+0x50>)
 8003c04:	680a      	ldr	r2, [r1, #0]
 8003c06:	b1d2      	cbz	r2, 8003c3e <console_flush+0x46>
#endif

static inline int
os_arch_in_isr(void)
{
    return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
 8003c08:	4b10      	ldr	r3, [pc, #64]	; (8003c4c <console_flush+0x54>)
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (os_arch_in_isr()) { return; }  //  Don't flush if we are called during an interrupt.
 8003c10:	b9ab      	cbnz	r3, 8003c3e <console_flush+0x46>

    //  Swap mbufs first to prevent concurrency problems.
    struct os_mbuf *old = semihost_mbuf;
    semihost_mbuf = NULL;
 8003c12:	600b      	str	r3, [r1, #0]
    args[0] = (uint32_t)fh;
 8003c14:	2502      	movs	r5, #2
    semihost_mbuf = NULL;
 8003c16:	4613      	mov	r3, r2
    __asm( 
 8003c18:	2605      	movs	r6, #5
 8003c1a:	af01      	add	r7, sp, #4

    struct os_mbuf *m = old;
    while (m) {  //  For each mbuf in the chain...
        const unsigned char *data = OS_MBUF_DATA(m, const unsigned char *);  //  Fetch the data.
        int size = m->om_len;                         //  Fetch the size.
        semihost_write(SEMIHOST_HANDLE, data, size);  //  Write the data to Semihosting output.
 8003c1c:	88d9      	ldrh	r1, [r3, #6]
    if (length == 0) { return 0; }
 8003c1e:	b141      	cbz	r1, 8003c32 <console_flush+0x3a>
        const unsigned char *data = OS_MBUF_DATA(m, const unsigned char *);  //  Fetch the data.
 8003c20:	6818      	ldr	r0, [r3, #0]
    args[2] = (uint32_t)length;
 8003c22:	9103      	str	r1, [sp, #12]
    if (!log_enabled) return -1;
 8003c24:	7821      	ldrb	r1, [r4, #0]
    args[1] = (uint32_t)buffer;
 8003c26:	e9cd 5001 	strd	r5, r0, [sp, #4]
    if (!log_enabled) return -1;
 8003c2a:	b111      	cbz	r1, 8003c32 <console_flush+0x3a>
    __asm( 
 8003c2c:	4630      	mov	r0, r6
 8003c2e:	4639      	mov	r1, r7
 8003c30:	beab      	bkpt	0x00ab
        m = m->om_next.sle_next;                      //  Fetch next mbuf in the chain.
 8003c32:	68db      	ldr	r3, [r3, #12]
    while (m) {  //  For each mbuf in the chain...
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d1f1      	bne.n	8003c1c <console_flush+0x24>
    }
    os_mbuf_free_chain(old);  //  Deallocate the old chain.
 8003c38:	4610      	mov	r0, r2
 8003c3a:	f002 fa74 	bl	8006126 <os_mbuf_free_chain>
}
 8003c3e:	b005      	add	sp, #20
 8003c40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c42:	bf00      	nop
 8003c44:	20000130 	.word	0x20000130
 8003c48:	20000248 	.word	0x20000248
 8003c4c:	e000ed00 	.word	0xe000ed00

08003c50 <disable_buffer>:
void disable_buffer(void) { buffer_enabled = false; console_flush(); }  //  Disable buffering.
 8003c50:	f7ff bfd2 	b.w	8003bf8 <console_flush>

08003c54 <console_buffer>:

void console_buffer(const char *buffer, unsigned int length) {
    //  Append "length" number of bytes from "buffer" to the output buffer.
    int rc;
    if (!log_enabled) { return; }  //  Skip if log not enabled.
 8003c54:	4b0e      	ldr	r3, [pc, #56]	; (8003c90 <console_buffer+0x3c>)
void console_buffer(const char *buffer, unsigned int length) {
 8003c56:	b570      	push	{r4, r5, r6, lr}
    if (!log_enabled) { return; }  //  Skip if log not enabled.
 8003c58:	781b      	ldrb	r3, [r3, #0]
void console_buffer(const char *buffer, unsigned int length) {
 8003c5a:	4606      	mov	r6, r0
 8003c5c:	460d      	mov	r5, r1
    if (!log_enabled) { return; }  //  Skip if log not enabled.
 8003c5e:	b1b3      	cbz	r3, 8003c8e <console_buffer+0x3a>
    if (!semihost_mbuf) {  //  Allocate mbuf if not already allocated.
 8003c60:	4c0c      	ldr	r4, [pc, #48]	; (8003c94 <console_buffer+0x40>)
 8003c62:	6821      	ldr	r1, [r4, #0]
 8003c64:	b169      	cbz	r1, 8003c82 <console_buffer+0x2e>
        semihost_mbuf = os_msys_get_pkthdr(length, 0);
        if (!semihost_mbuf) { return; }  //  If out of memory, quit.
    }
    //  Limit the buffer size.  Quit if too big.
    if (os_mbuf_len(semihost_mbuf) + length >= OUTPUT_BUFFER_SIZE) { return; }
 8003c66:	6820      	ldr	r0, [r4, #0]
 8003c68:	f002 fa6a 	bl	8006140 <os_mbuf_len>
 8003c6c:	4428      	add	r0, r5
 8003c6e:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8003c72:	d20c      	bcs.n	8003c8e <console_buffer+0x3a>
    //  Append the data to the mbuf chain.  This may increase the numbere of mbufs in the chain.
    rc = os_mbuf_append(semihost_mbuf, buffer, length);
 8003c74:	b2aa      	uxth	r2, r5
 8003c76:	4631      	mov	r1, r6
 8003c78:	6820      	ldr	r0, [r4, #0]
    if (rc) { return; }  //  If out of memory, quit.
}
 8003c7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    rc = os_mbuf_append(semihost_mbuf, buffer, length);
 8003c7e:	f002 ba68 	b.w	8006152 <os_mbuf_append>
        semihost_mbuf = os_msys_get_pkthdr(length, 0);
 8003c82:	b2a8      	uxth	r0, r5
 8003c84:	f002 fc50 	bl	8006528 <os_msys_get_pkthdr>
 8003c88:	6020      	str	r0, [r4, #0]
        if (!semihost_mbuf) { return; }  //  If out of memory, quit.
 8003c8a:	2800      	cmp	r0, #0
 8003c8c:	d1eb      	bne.n	8003c66 <console_buffer+0x12>
}
 8003c8e:	bd70      	pop	{r4, r5, r6, pc}
 8003c90:	20000130 	.word	0x20000130
 8003c94:	20000248 	.word	0x20000248

08003c98 <console_printhex>:

void console_printhex(uint8_t v) {
 8003c98:	b507      	push	{r0, r1, r2, lr}
    char buffer[MAX_BYTE_LENGTH + 1];
    int size = MAX_BYTE_LENGTH + 1;
    bool prefixByZero = true;
    int length = 0;
    for(uint8_t divisor = 16; divisor >= 1; divisor = divisor / 16) {
        char digit = '0' + (char)(v / divisor);
 8003c9a:	0902      	lsrs	r2, r0, #4
 8003c9c:	f102 0330 	add.w	r3, r2, #48	; 0x30
        if (digit > '9') { digit = digit - 10 - '0' + 'a'; }
 8003ca0:	2b39      	cmp	r3, #57	; 0x39
 8003ca2:	bf88      	it	hi
 8003ca4:	f102 0357 	addhi.w	r3, r2, #87	; 0x57
        if (digit > '0' || length > 0 || prefixByZero) {
            if (length < size) {
                buffer[length++] = digit;
            }
        }
        v = v % divisor;
 8003ca8:	f000 000f 	and.w	r0, r0, #15
                buffer[length++] = digit;
 8003cac:	f88d 3004 	strb.w	r3, [sp, #4]
        char digit = '0' + (char)(v / divisor);
 8003cb0:	f100 0330 	add.w	r3, r0, #48	; 0x30
        if (digit > '9') { digit = digit - 10 - '0' + 'a'; }
 8003cb4:	2b39      	cmp	r3, #57	; 0x39
 8003cb6:	bf88      	it	hi
 8003cb8:	f100 0357 	addhi.w	r3, r0, #87	; 0x57
                buffer[length++] = digit;
 8003cbc:	f88d 3005 	strb.w	r3, [sp, #5]
    }
    if (length == 0) { buffer[length++] = '0'; };
    if (length < size) buffer[length] = 0;
    buffer[size - 1] = 0;  //  Terminate in case of overflow.
 8003cc0:	2300      	movs	r3, #0
    console_buffer(buffer, strlen(buffer));
 8003cc2:	a801      	add	r0, sp, #4
    buffer[size - 1] = 0;  //  Terminate in case of overflow.
 8003cc4:	f88d 3006 	strb.w	r3, [sp, #6]
    console_buffer(buffer, strlen(buffer));
 8003cc8:	f003 f9e8 	bl	800709c <strlen>
 8003ccc:	4601      	mov	r1, r0
 8003cce:	a801      	add	r0, sp, #4
 8003cd0:	f7ff ffc0 	bl	8003c54 <console_buffer>
}
 8003cd4:	b003      	add	sp, #12
 8003cd6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08003cdc <console_dump>:
    bool neg; int i, d;
    split_float(f, &neg, &i, &d);      //  Split the float into neg, integer and decimal parts to 2 decimal places
    console_printf("%s%d.%02d", neg ? "-" : "", i, d);   //  Combine the sign, integer and decimal parts
}

void console_dump(const uint8_t *buffer, unsigned int len) {
 8003cdc:	b570      	push	{r4, r5, r6, lr}
	//  Append "length" number of bytes from "buffer" to the output buffer in hex format.
    if (buffer == NULL || len == 0) { return; }
 8003cde:	b128      	cbz	r0, 8003cec <console_dump+0x10>
 8003ce0:	b121      	cbz	r1, 8003cec <console_dump+0x10>
 8003ce2:	4604      	mov	r4, r0
	for (int i = 0; i < len; i++) { console_printhex(buffer[i]); console_buffer(" ", 1); } 
 8003ce4:	4e06      	ldr	r6, [pc, #24]	; (8003d00 <console_dump+0x24>)
 8003ce6:	1845      	adds	r5, r0, r1
 8003ce8:	42ac      	cmp	r4, r5
 8003cea:	d100      	bne.n	8003cee <console_dump+0x12>
}
 8003cec:	bd70      	pop	{r4, r5, r6, pc}
	for (int i = 0; i < len; i++) { console_printhex(buffer[i]); console_buffer(" ", 1); } 
 8003cee:	f814 0b01 	ldrb.w	r0, [r4], #1
 8003cf2:	f7ff ffd1 	bl	8003c98 <console_printhex>
 8003cf6:	2101      	movs	r1, #1
 8003cf8:	4630      	mov	r0, r6
 8003cfa:	f7ff ffab 	bl	8003c54 <console_buffer>
 8003cfe:	e7f3      	b.n	8003ce8 <console_dump+0xc>
 8003d00:	0800dce7 	.word	0x0800dce7

08003d04 <console_out_nolock>:
    //  if (c == '\n') { console_flush(); }  //  If we see a newline, flush the buffer.
}

int console_out_nolock(int character) {
    char c = (char)character;
    if (g_silence_console) { return c; }
 8003d04:	4b0c      	ldr	r3, [pc, #48]	; (8003d38 <console_out_nolock+0x34>)
int console_out_nolock(int character) {
 8003d06:	b513      	push	{r0, r1, r4, lr}
    if (g_silence_console) { return c; }
 8003d08:	7819      	ldrb	r1, [r3, #0]
int console_out_nolock(int character) {
 8003d0a:	4604      	mov	r4, r0
 8003d0c:	b2c3      	uxtb	r3, r0
    if (g_silence_console) { return c; }
 8003d0e:	b119      	cbz	r1, 8003d18 <console_out_nolock+0x14>
 8003d10:	461c      	mov	r4, r3
    } else {
        console_is_midline = 1;
    }
    semihosting_console_write_ch(c);
    return character;
}
 8003d12:	4620      	mov	r0, r4
 8003d14:	b002      	add	sp, #8
 8003d16:	bd10      	pop	{r4, pc}
    if ('\n' == c) {
 8003d18:	2b0a      	cmp	r3, #10
        console_is_midline = 1;
 8003d1a:	bf18      	it	ne
 8003d1c:	2101      	movne	r1, #1
 8003d1e:	4a07      	ldr	r2, [pc, #28]	; (8003d3c <console_out_nolock+0x38>)
    if (c == '\r') { return; }  //  Don't display \r.
 8003d20:	2b0d      	cmp	r3, #13
        console_is_midline = 1;
 8003d22:	6011      	str	r1, [r2, #0]
 8003d24:	f88d 3007 	strb.w	r3, [sp, #7]
    if (c == '\r') { return; }  //  Don't display \r.
 8003d28:	d0f3      	beq.n	8003d12 <console_out_nolock+0xe>
    console_buffer(&c, 1);  //  Append the char to the output buffer.
 8003d2a:	2101      	movs	r1, #1
 8003d2c:	f10d 0007 	add.w	r0, sp, #7
 8003d30:	f7ff ff90 	bl	8003c54 <console_buffer>
 8003d34:	e7ed      	b.n	8003d12 <console_out_nolock+0xe>
 8003d36:	bf00      	nop
 8003d38:	2000332d 	.word	0x2000332d
 8003d3c:	20003328 	.word	0x20003328

08003d40 <semihosting_console_init>:

void console_rx_restart(void) {}

int semihosting_console_is_init(void) { return 1; }

int semihosting_console_init(void) { return 0; }
 8003d40:	2000      	movs	r0, #0
 8003d42:	4770      	bx	lr

08003d44 <console_write>:

int console_unlock(void) { return OS_OK; }

int console_out(int c) { return console_out_nolock(c); }

void console_write(const char *str, int cnt) {
 8003d44:	b570      	push	{r4, r5, r6, lr}
 8003d46:	4605      	mov	r5, r0
 8003d48:	460e      	mov	r6, r1
    int i;
    for (i = 0; i < cnt; i++) {
 8003d4a:	4604      	mov	r4, r0
 8003d4c:	1b63      	subs	r3, r4, r5
 8003d4e:	429e      	cmp	r6, r3
 8003d50:	dd05      	ble.n	8003d5e <console_write+0x1a>
        if (console_out_nolock((int)str[i]) == EOF) { break; }
 8003d52:	f814 0b01 	ldrb.w	r0, [r4], #1
 8003d56:	f7ff ffd5 	bl	8003d04 <console_out_nolock>
 8003d5a:	3001      	adds	r0, #1
 8003d5c:	d1f6      	bne.n	8003d4c <console_write+0x8>
    }
}
 8003d5e:	bd70      	pop	{r4, r5, r6, pc}

08003d60 <console_blocking_mode>:

void console_blocking_mode(void) {
    disable_buffer();
 8003d60:	f7ff bf76 	b.w	8003c50 <disable_buffer>

08003d64 <console_pkg_init>:

void console_deinit(void) {}

void console_reinit(void) {}

void console_pkg_init(void) {
 8003d64:	b513      	push	{r0, r1, r4, lr}
    int rc = 0;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
 8003d66:	4b0d      	ldr	r3, [pc, #52]	; (8003d9c <console_pkg_init+0x38>)
 8003d68:	781b      	ldrb	r3, [r3, #0]
 8003d6a:	b923      	cbnz	r3, 8003d76 <console_pkg_init+0x12>
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	4619      	mov	r1, r3
 8003d70:	4618      	mov	r0, r3
 8003d72:	f001 fdcf 	bl	8005914 <__assert_func>

    os_eventq_init(&avail_queue);
 8003d76:	480a      	ldr	r0, [pc, #40]	; (8003da0 <console_pkg_init+0x3c>)
 8003d78:	f002 f898 	bl	8005eac <os_eventq_init>
    os_mutex_init(&console_write_lock);
 8003d7c:	4809      	ldr	r0, [pc, #36]	; (8003da4 <console_pkg_init+0x40>)
 8003d7e:	f002 fc1d 	bl	80065bc <os_mutex_init>

#if MYNEWT_VAL(CONSOLE_SEMIHOSTING)
    rc = semihosting_console_init();
 8003d82:	f7ff ffdd 	bl	8003d40 <semihosting_console_init>
#endif
    SYSINIT_PANIC_ASSERT(rc == 0);
 8003d86:	b138      	cbz	r0, 8003d98 <console_pkg_init+0x34>
 8003d88:	2300      	movs	r3, #0
 8003d8a:	4a07      	ldr	r2, [pc, #28]	; (8003da8 <console_pkg_init+0x44>)
 8003d8c:	9300      	str	r3, [sp, #0]
 8003d8e:	6814      	ldr	r4, [r2, #0]
 8003d90:	4619      	mov	r1, r3
 8003d92:	461a      	mov	r2, r3
 8003d94:	4618      	mov	r0, r3
 8003d96:	47a0      	blx	r4
}
 8003d98:	b002      	add	sp, #8
 8003d9a:	bd10      	pop	{r4, pc}
 8003d9c:	200033f0 	.word	0x200033f0
 8003da0:	2000024c 	.word	0x2000024c
 8003da4:	2000025c 	.word	0x2000025c
 8003da8:	20000148 	.word	0x20000148

08003dac <console_printf>:
 *                                  unlimited.  This return value is analogous
 *                                  to that of snprintf.
 */
int
console_printf(const char *fmt, ...)
{
 8003dac:	b40f      	push	{r0, r1, r2, r3}
 8003dae:	b513      	push	{r0, r1, r4, lr}
    va_list args;
    int num_chars;

    num_chars = 0;

    if (console_get_ticks()) {
 8003db0:	f000 f81c 	bl	8003dec <console_get_ticks>
 8003db4:	b140      	cbz	r0, 8003dc8 <console_printf+0x1c>
        /* Prefix each line with a timestamp. */
        if (!console_is_midline) {
 8003db6:	4b0b      	ldr	r3, [pc, #44]	; (8003de4 <console_printf+0x38>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	b98b      	cbnz	r3, 8003de0 <console_printf+0x34>
            num_chars += printf("%06lu ", (unsigned long)os_time_get());
 8003dbc:	f002 ff68 	bl	8006c90 <os_time_get>
 8003dc0:	4601      	mov	r1, r0
 8003dc2:	4809      	ldr	r0, [pc, #36]	; (8003de8 <console_printf+0x3c>)
 8003dc4:	f003 fb9e 	bl	8007504 <printf>
    num_chars = 0;
 8003dc8:	4604      	mov	r4, r0
        }
    }

    va_start(args, fmt);
 8003dca:	a905      	add	r1, sp, #20
    num_chars += vprintf(fmt, args);
 8003dcc:	9804      	ldr	r0, [sp, #16]
    va_start(args, fmt);
 8003dce:	9101      	str	r1, [sp, #4]
    num_chars += vprintf(fmt, args);
 8003dd0:	f003 fbc8 	bl	8007564 <vprintf>
    va_end(args);

    return num_chars;
}
 8003dd4:	4420      	add	r0, r4
 8003dd6:	b002      	add	sp, #8
 8003dd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ddc:	b004      	add	sp, #16
 8003dde:	4770      	bx	lr
    num_chars = 0;
 8003de0:	2400      	movs	r4, #0
 8003de2:	e7f2      	b.n	8003dca <console_printf+0x1e>
 8003de4:	20003328 	.word	0x20003328
 8003de8:	0800db08 	.word	0x0800db08

08003dec <console_get_ticks>:

/* return value of CONSOLE_TICKS */
char console_get_ticks(void)
{
    return do_ticks;
}
 8003dec:	4b01      	ldr	r3, [pc, #4]	; (8003df4 <console_get_ticks+0x8>)
 8003dee:	7818      	ldrb	r0, [r3, #0]
 8003df0:	4770      	bx	lr
 8003df2:	bf00      	nop
 8003df4:	20000268 	.word	0x20000268

08003df8 <cbor_cnt_writer>:
};

static inline int
cbor_cnt_writer(struct cbor_encoder_writer *arg, const char *data, int len) {
    struct CborCntWriter *cb = (struct CborCntWriter *) arg;
    cb->enc.bytes_written += len;
 8003df8:	6843      	ldr	r3, [r0, #4]
 8003dfa:	441a      	add	r2, r3
 8003dfc:	6042      	str	r2, [r0, #4]
    return CborNoError;
}
 8003dfe:	2000      	movs	r0, #0
 8003e00:	4770      	bx	lr
	...

08003e04 <handle_coap_response>:
    return oc_sensor_coap_ready;
}

///  Handle CoAP response.
static void handle_coap_response(oc_client_response_t *data) {
    console_printf("handle_coap\n");
 8003e04:	4801      	ldr	r0, [pc, #4]	; (8003e0c <handle_coap_response+0x8>)
 8003e06:	f7ff bfd1 	b.w	8003dac <console_printf>
 8003e0a:	bf00      	nop
 8003e0c:	0800db0f 	.word	0x0800db0f

08003e10 <json_rep_finalize.part.2>:
struct json_value coap_json_value;
///  The mbuf that contains the outgoing CoAP payload.
static struct os_mbuf *coap_json_mbuf;  

///  Write the JSON to the mbuf for the outgoing CoAP message.
int json_write_mbuf(void *buf, char *data, int len) {
 8003e10:	b508      	push	{r3, lr}
    if (oc_content_format != APPLICATION_JSON) { return 0; }  //  Exit if we are encoding CBOR, not JSON.
    assert(coap_json_mbuf);
 8003e12:	2300      	movs	r3, #0
 8003e14:	461a      	mov	r2, r3
 8003e16:	4619      	mov	r1, r3
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f001 fd7b 	bl	8005914 <__assert_func>
	...

08003e20 <json_write_mbuf>:
    if (oc_content_format != APPLICATION_JSON) { return 0; }  //  Exit if we are encoding CBOR, not JSON.
 8003e20:	480b      	ldr	r0, [pc, #44]	; (8003e50 <json_write_mbuf+0x30>)
int json_write_mbuf(void *buf, char *data, int len) {
 8003e22:	b508      	push	{r3, lr}
    if (oc_content_format != APPLICATION_JSON) { return 0; }  //  Exit if we are encoding CBOR, not JSON.
 8003e24:	6800      	ldr	r0, [r0, #0]
 8003e26:	2832      	cmp	r0, #50	; 0x32
 8003e28:	d110      	bne.n	8003e4c <json_write_mbuf+0x2c>
    assert(coap_json_mbuf);
 8003e2a:	480a      	ldr	r0, [pc, #40]	; (8003e54 <json_write_mbuf+0x34>)
 8003e2c:	6800      	ldr	r0, [r0, #0]
 8003e2e:	b908      	cbnz	r0, 8003e34 <json_write_mbuf+0x14>
 8003e30:	f7ff ffee 	bl	8003e10 <json_rep_finalize.part.2>
    assert(data);
 8003e34:	b929      	cbnz	r1, 8003e42 <json_write_mbuf+0x22>
 8003e36:	2300      	movs	r3, #0
 8003e38:	461a      	mov	r2, r3
 8003e3a:	4619      	mov	r1, r3
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f001 fd69 	bl	8005914 <__assert_func>
    //  console_printf("json "); console_buffer(data, len); console_printf("\n");  ////
    int rc = os_mbuf_append(coap_json_mbuf, data, len);  assert(rc == 0);
 8003e42:	b292      	uxth	r2, r2
 8003e44:	f002 f985 	bl	8006152 <os_mbuf_append>
 8003e48:	2800      	cmp	r0, #0
 8003e4a:	d1f4      	bne.n	8003e36 <json_write_mbuf+0x16>
    if (rc) { return -1; }
    return 0;
}
 8003e4c:	2000      	movs	r0, #0
 8003e4e:	bd08      	pop	{r3, pc}
 8003e50:	200002ec 	.word	0x200002ec
 8003e54:	20000274 	.word	0x20000274

08003e58 <init_sensor_coap>:
void init_sensor_coap(void) {
 8003e58:	b508      	push	{r3, lr}
    os_error_t rc = os_sem_init(&oc_sem, 1);  //  Init to 1 token, so only 1 caller will be allowed.
 8003e5a:	2101      	movs	r1, #1
 8003e5c:	4806      	ldr	r0, [pc, #24]	; (8003e78 <init_sensor_coap+0x20>)
 8003e5e:	f002 fdef 	bl	8006a40 <os_sem_init>
    assert(rc == OS_OK);
 8003e62:	b128      	cbz	r0, 8003e70 <init_sensor_coap+0x18>
 8003e64:	2300      	movs	r3, #0
 8003e66:	461a      	mov	r2, r3
 8003e68:	4619      	mov	r1, r3
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f001 fd52 	bl	8005914 <__assert_func>
    oc_sensor_coap_ready = true;
 8003e70:	2201      	movs	r2, #1
 8003e72:	4b02      	ldr	r3, [pc, #8]	; (8003e7c <init_sensor_coap+0x24>)
 8003e74:	701a      	strb	r2, [r3, #0]
}
 8003e76:	bd08      	pop	{r3, pc}
 8003e78:	200002f0 	.word	0x200002f0
 8003e7c:	200002f8 	.word	0x200002f8

08003e80 <init_sensor_post>:
{
 8003e80:	b508      	push	{r3, lr}
    assert(oc_sensor_coap_ready);  assert(server);
 8003e82:	4b0a      	ldr	r3, [pc, #40]	; (8003eac <init_sensor_post+0x2c>)
 8003e84:	781b      	ldrb	r3, [r3, #0]
 8003e86:	b92b      	cbnz	r3, 8003e94 <init_sensor_post+0x14>
 8003e88:	2300      	movs	r3, #0
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f001 fd40 	bl	8005914 <__assert_func>
 8003e94:	2800      	cmp	r0, #0
 8003e96:	d0f7      	beq.n	8003e88 <init_sensor_post+0x8>
    os_error_t rc = os_sem_pend(&oc_sem, OS_TIMEOUT_NEVER);  //  Allow only 1 task to be creating a sensor request at any time.
 8003e98:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003e9c:	4804      	ldr	r0, [pc, #16]	; (8003eb0 <init_sensor_post+0x30>)
 8003e9e:	f002 fe09 	bl	8006ab4 <os_sem_pend>
    assert(rc == OS_OK);
 8003ea2:	2800      	cmp	r0, #0
 8003ea4:	d1f0      	bne.n	8003e88 <init_sensor_post+0x8>
}
 8003ea6:	2001      	movs	r0, #1
 8003ea8:	bd08      	pop	{r3, pc}
 8003eaa:	bf00      	nop
 8003eac:	200002f8 	.word	0x200002f8
 8003eb0:	200002f0 	.word	0x200002f0

08003eb4 <json_rep_reset>:
#endif  //  MYNEWT_VAL(COAP_CBOR_ENCODING) && MYNEWT_VAL(COAP_JSON_ENCODING)
}

///  Close the current JSON CoAP payload.  Erase the JSON encoder.
void json_rep_reset(void) {
    coap_json_mbuf = NULL;
 8003eb4:	2100      	movs	r1, #0
void json_rep_reset(void) {
 8003eb6:	b508      	push	{r3, lr}
    coap_json_mbuf = NULL;
 8003eb8:	4b05      	ldr	r3, [pc, #20]	; (8003ed0 <json_rep_reset+0x1c>)
    memset(&coap_json_encoder, 0, sizeof(coap_json_encoder));  //  Erase the encoder.
 8003eba:	2248      	movs	r2, #72	; 0x48
    coap_json_mbuf = NULL;
 8003ebc:	6019      	str	r1, [r3, #0]
    memset(&coap_json_encoder, 0, sizeof(coap_json_encoder));  //  Erase the encoder.
 8003ebe:	4b05      	ldr	r3, [pc, #20]	; (8003ed4 <json_rep_reset+0x20>)
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f003 f8c2 	bl	800704a <memset>
    coap_json_encoder.je_write = json_write_mbuf;
 8003ec6:	4a04      	ldr	r2, [pc, #16]	; (8003ed8 <json_rep_reset+0x24>)
 8003ec8:	f840 2c04 	str.w	r2, [r0, #-4]
}
 8003ecc:	bd08      	pop	{r3, pc}
 8003ece:	bf00      	nop
 8003ed0:	20000274 	.word	0x20000274
 8003ed4:	20003334 	.word	0x20003334
 8003ed8:	08003e21 	.word	0x08003e21

08003edc <json_rep_new>:
void json_rep_new(struct os_mbuf *m) {
 8003edc:	b510      	push	{r4, lr}
    assert(m);
 8003ede:	4604      	mov	r4, r0
 8003ee0:	b908      	cbnz	r0, 8003ee6 <json_rep_new+0xa>
 8003ee2:	f7ff ff95 	bl	8003e10 <json_rep_finalize.part.2>
    json_rep_reset();  //  Erase the JSON encoder.
 8003ee6:	f7ff ffe5 	bl	8003eb4 <json_rep_reset>

static inline void
cbor_cnt_writer_init(struct CborCntWriter *cb) {
    cb->enc.bytes_written = 0;
 8003eea:	2200      	movs	r2, #0
    coap_json_mbuf = m;
 8003eec:	4b05      	ldr	r3, [pc, #20]	; (8003f04 <json_rep_new+0x28>)
 8003eee:	4906      	ldr	r1, [pc, #24]	; (8003f08 <json_rep_new+0x2c>)
 8003ef0:	601c      	str	r4, [r3, #0]
    cb->enc.write = &cbor_cnt_writer;
 8003ef2:	4b06      	ldr	r3, [pc, #24]	; (8003f0c <json_rep_new+0x30>)
    cbor_encoder_init(&g_encoder, &cnt_writer.enc, 0);
 8003ef4:	4806      	ldr	r0, [pc, #24]	; (8003f10 <json_rep_new+0x34>)
}
 8003ef6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    cb->enc.bytes_written = 0;
 8003efa:	604a      	str	r2, [r1, #4]
    cb->enc.write = &cbor_cnt_writer;
 8003efc:	600b      	str	r3, [r1, #0]
    cbor_encoder_init(&g_encoder, &cnt_writer.enc, 0);
 8003efe:	f001 b98f 	b.w	8005220 <cbor_encoder_init>
 8003f02:	bf00      	nop
 8003f04:	20000274 	.word	0x20000274
 8003f08:	2000026c 	.word	0x2000026c
 8003f0c:	08003df9 	.word	0x08003df9
 8003f10:	200033c0 	.word	0x200033c0

08003f14 <prepare_sensor_post>:
    assert(oc_sensor_coap_ready);  assert(server);  assert(uri);
 8003f14:	4b3a      	ldr	r3, [pc, #232]	; (8004000 <prepare_sensor_post+0xec>)
{
 8003f16:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    assert(oc_sensor_coap_ready);  assert(server);  assert(uri);
 8003f1a:	781f      	ldrb	r7, [r3, #0]
{
 8003f1c:	4604      	mov	r4, r0
 8003f1e:	4608      	mov	r0, r1
    assert(oc_sensor_coap_ready);  assert(server);  assert(uri);
 8003f20:	b92f      	cbnz	r7, 8003f2e <prepare_sensor_post+0x1a>
 8003f22:	2300      	movs	r3, #0
 8003f24:	461a      	mov	r2, r3
 8003f26:	4619      	mov	r1, r3
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f001 fcf3 	bl	8005914 <__assert_func>
 8003f2e:	2c00      	cmp	r4, #0
 8003f30:	d0f7      	beq.n	8003f22 <prepare_sensor_post+0xe>
 8003f32:	2900      	cmp	r1, #0
 8003f34:	d0f5      	beq.n	8003f22 <prepare_sensor_post+0xe>
    assert(coap_content_format != 0);  //  CoAP Content Format must be specified
 8003f36:	2a00      	cmp	r2, #0
 8003f38:	d0f3      	beq.n	8003f22 <prepare_sensor_post+0xe>
    cb = oc_ri_alloc_client_cb(uri, server, OC_POST, handler, qos);
 8003f3a:	2301      	movs	r3, #1
    oc_content_format = coap_content_format;
 8003f3c:	4e31      	ldr	r6, [pc, #196]	; (8004004 <prepare_sensor_post+0xf0>)
    cb = oc_ri_alloc_client_cb(uri, server, OC_POST, handler, qos);
 8003f3e:	9300      	str	r3, [sp, #0]
    oc_content_format = coap_content_format;
 8003f40:	6032      	str	r2, [r6, #0]
    cb = oc_ri_alloc_client_cb(uri, server, OC_POST, handler, qos);
 8003f42:	4621      	mov	r1, r4
 8003f44:	4b30      	ldr	r3, [pc, #192]	; (8004008 <prepare_sensor_post+0xf4>)
 8003f46:	2202      	movs	r2, #2
 8003f48:	f000 fc38 	bl	80047bc <oc_ri_alloc_client_cb>
    if (!cb) {
 8003f4c:	4604      	mov	r4, r0
 8003f4e:	b948      	cbnz	r0, 8003f64 <prepare_sensor_post+0x50>
        os_error_t rc = os_sem_release(&oc_sem);  //  Failed.  Release the semaphore.
 8003f50:	482e      	ldr	r0, [pc, #184]	; (800400c <prepare_sensor_post+0xf8>)
 8003f52:	f002 fd7d 	bl	8006a50 <os_sem_release>
        assert(rc == OS_OK);
 8003f56:	2800      	cmp	r0, #0
 8003f58:	d1e3      	bne.n	8003f22 <prepare_sensor_post+0xe>
        return false;
 8003f5a:	2700      	movs	r7, #0
}
 8003f5c:	4638      	mov	r0, r7
 8003f5e:	b002      	add	sp, #8
 8003f60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    oc_c_rsp = os_msys_get_pkthdr(0, 0);
 8003f64:	2100      	movs	r1, #0
 8003f66:	4608      	mov	r0, r1
 8003f68:	f002 fade 	bl	8006528 <os_msys_get_pkthdr>
 8003f6c:	4d28      	ldr	r5, [pc, #160]	; (8004010 <prepare_sensor_post+0xfc>)
 8003f6e:	6028      	str	r0, [r5, #0]
    if (!oc_c_rsp) {
 8003f70:	2800      	cmp	r0, #0
 8003f72:	d0f2      	beq.n	8003f5a <prepare_sensor_post+0x46>
    oc_c_message = oc_allocate_mbuf(&cb->server.endpoint);
 8003f74:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8003f78:	f000 fb4a 	bl	8004610 <oc_allocate_mbuf>
 8003f7c:	4b25      	ldr	r3, [pc, #148]	; (8004014 <prepare_sensor_post+0x100>)
 8003f7e:	4680      	mov	r8, r0
 8003f80:	6018      	str	r0, [r3, #0]
    if (!oc_c_message) {
 8003f82:	2800      	cmp	r0, #0
 8003f84:	d034      	beq.n	8003ff0 <prepare_sensor_post+0xdc>
    if (oc_content_format == APPLICATION_JSON) { 
 8003f86:	6833      	ldr	r3, [r6, #0]
 8003f88:	2b32      	cmp	r3, #50	; 0x32
 8003f8a:	d12b      	bne.n	8003fe4 <prepare_sensor_post+0xd0>
        json_rep_new(oc_c_rsp); 
 8003f8c:	6828      	ldr	r0, [r5, #0]
 8003f8e:	f7ff ffa5 	bl	8003edc <json_rep_new>
    coap_init_message(oc_c_request, type, cb->method, cb->mid);
 8003f92:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003f94:	f894 2061 	ldrb.w	r2, [r4, #97]	; 0x61
 8003f98:	2101      	movs	r1, #1
 8003f9a:	481f      	ldr	r0, [pc, #124]	; (8004018 <prepare_sensor_post+0x104>)
 8003f9c:	f000 fcfe 	bl	800499c <coap_init_message>
    coap_set_header_accept(oc_c_request, oc_content_format);  //  Either JSON or CBOR.
 8003fa0:	6831      	ldr	r1, [r6, #0]
 8003fa2:	481d      	ldr	r0, [pc, #116]	; (8004018 <prepare_sensor_post+0x104>)
 8003fa4:	f000 fed7 	bl	8004d56 <coap_set_header_accept>
    coap_set_token(oc_c_request, cb->token, cb->token_len);
 8003fa8:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8003fac:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 8003fb0:	4819      	ldr	r0, [pc, #100]	; (8004018 <prepare_sensor_post+0x104>)
 8003fb2:	f000 febe 	bl	8004d32 <coap_set_token>
    coap_set_header_uri_path(oc_c_request, oc_string(cb->uri));
 8003fb6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003fb8:	4817      	ldr	r0, [pc, #92]	; (8004018 <prepare_sensor_post+0x104>)
 8003fba:	f000 fed3 	bl	8004d64 <coap_set_header_uri_path>
    if (cb->observe_seq != -1) {
 8003fbe:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003fc0:	1c4b      	adds	r3, r1, #1
 8003fc2:	d002      	beq.n	8003fca <prepare_sensor_post+0xb6>
        coap_set_header_observe(oc_c_request, cb->observe_seq);
 8003fc4:	4814      	ldr	r0, [pc, #80]	; (8004018 <prepare_sensor_post+0x104>)
 8003fc6:	f000 fede 	bl	8004d86 <coap_set_header_observe>
    if (cb->observe_seq == -1 && cb->qos == LOW_QOS) {
 8003fca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003fcc:	3301      	adds	r3, #1
 8003fce:	d1c5      	bne.n	8003f5c <prepare_sensor_post+0x48>
 8003fd0:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d1c1      	bne.n	8003f5c <prepare_sensor_post+0x48>
        os_callout_reset(&cb->callout,
 8003fd8:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8003fdc:	1d20      	adds	r0, r4, #4
 8003fde:	f001 fe25 	bl	8005c2c <os_callout_reset>
 8003fe2:	e7bb      	b.n	8003f5c <prepare_sensor_post+0x48>
    else if (oc_content_format == APPLICATION_CBOR) { 
 8003fe4:	2b3c      	cmp	r3, #60	; 0x3c
 8003fe6:	d19c      	bne.n	8003f22 <prepare_sensor_post+0xe>
        oc_rep_new(oc_c_rsp); 
 8003fe8:	6828      	ldr	r0, [r5, #0]
 8003fea:	f000 fb5b 	bl	80046a4 <oc_rep_new>
 8003fee:	e7d0      	b.n	8003f92 <prepare_sensor_post+0x7e>
    os_mbuf_free_chain(oc_c_rsp);
 8003ff0:	6828      	ldr	r0, [r5, #0]
 8003ff2:	f002 f898 	bl	8006126 <os_mbuf_free_chain>
    return false;
 8003ff6:	4647      	mov	r7, r8
    oc_c_rsp = NULL;
 8003ff8:	f8c5 8000 	str.w	r8, [r5]
 8003ffc:	e7ae      	b.n	8003f5c <prepare_sensor_post+0x48>
 8003ffe:	bf00      	nop
 8004000:	200002f8 	.word	0x200002f8
 8004004:	200002ec 	.word	0x200002ec
 8004008:	08003e05 	.word	0x08003e05
 800400c:	200002f0 	.word	0x200002f0
 8004010:	200002e8 	.word	0x200002e8
 8004014:	20000278 	.word	0x20000278
 8004018:	2000027c 	.word	0x2000027c

0800401c <json_rep_finalize>:

///  Finalise the payload and return the payload size.
int json_rep_finalize(void) {
 800401c:	b538      	push	{r3, r4, r5, lr}
    assert(coap_json_mbuf);
 800401e:	4c0e      	ldr	r4, [pc, #56]	; (8004058 <json_rep_finalize+0x3c>)
 8004020:	6823      	ldr	r3, [r4, #0]
 8004022:	b90b      	cbnz	r3, 8004028 <json_rep_finalize+0xc>
 8004024:	f7ff fef4 	bl	8003e10 <json_rep_finalize.part.2>
    int size = OS_MBUF_PKTLEN(coap_json_mbuf);
 8004028:	8a1d      	ldrh	r5, [r3, #16]
#define DUMP_COAP
#ifdef DUMP_COAP
    console_printf("NET payload size %d\n", size); struct os_mbuf *m = coap_json_mbuf;
 800402a:	480c      	ldr	r0, [pc, #48]	; (800405c <json_rep_finalize+0x40>)
 800402c:	4629      	mov	r1, r5
 800402e:	f7ff febd 	bl	8003dac <console_printf>
 8004032:	6824      	ldr	r4, [r4, #0]
    while (m) {
 8004034:	b934      	cbnz	r4, 8004044 <json_rep_finalize+0x28>
        console_buffer((const char *) (m->om_databuf + m->om_pkthdr_len), m->om_len);
        m = m->om_next.sle_next;
    } console_printf("\n");
 8004036:	480a      	ldr	r0, [pc, #40]	; (8004060 <json_rep_finalize+0x44>)
 8004038:	f7ff feb8 	bl	8003dac <console_printf>
#endif  //  DUMP_COAP

    json_rep_reset();
 800403c:	f7ff ff3a 	bl	8003eb4 <json_rep_reset>
    return size;
}
 8004040:	4628      	mov	r0, r5
 8004042:	bd38      	pop	{r3, r4, r5, pc}
        console_buffer((const char *) (m->om_databuf + m->om_pkthdr_len), m->om_len);
 8004044:	7963      	ldrb	r3, [r4, #5]
 8004046:	f104 0010 	add.w	r0, r4, #16
 800404a:	88e1      	ldrh	r1, [r4, #6]
 800404c:	4418      	add	r0, r3
 800404e:	f7ff fe01 	bl	8003c54 <console_buffer>
        m = m->om_next.sle_next;
 8004052:	68e4      	ldr	r4, [r4, #12]
 8004054:	e7ee      	b.n	8004034 <json_rep_finalize+0x18>
 8004056:	bf00      	nop
 8004058:	20000274 	.word	0x20000274
 800405c:	0800db1c 	.word	0x0800db1c
 8004060:	0800e32c 	.word	0x0800e32c

08004064 <do_sensor_post>:
{
 8004064:	b538      	push	{r3, r4, r5, lr}
    assert(oc_content_format);
 8004066:	4c20      	ldr	r4, [pc, #128]	; (80040e8 <do_sensor_post+0x84>)
 8004068:	6822      	ldr	r2, [r4, #0]
 800406a:	b92a      	cbnz	r2, 8004078 <do_sensor_post+0x14>
 800406c:	2300      	movs	r3, #0
 800406e:	461a      	mov	r2, r3
 8004070:	4619      	mov	r1, r3
 8004072:	4618      	mov	r0, r3
 8004074:	f001 fc4e 	bl	8005914 <__assert_func>
        (oc_content_format == APPLICATION_JSON) ? json_rep_finalize() :
 8004078:	2a32      	cmp	r2, #50	; 0x32
 800407a:	4d1c      	ldr	r5, [pc, #112]	; (80040ec <do_sensor_post+0x88>)
 800407c:	d126      	bne.n	80040cc <do_sensor_post+0x68>
 800407e:	f7ff ffcd 	bl	800401c <json_rep_finalize>
    if (response_length) {
 8004082:	b340      	cbz	r0, 80040d6 <do_sensor_post+0x72>
        oc_c_request->payload_m = oc_c_rsp;
 8004084:	4b1a      	ldr	r3, [pc, #104]	; (80040f0 <do_sensor_post+0x8c>)
 8004086:	682a      	ldr	r2, [r5, #0]
        oc_c_request->payload_len = response_length;
 8004088:	f8a3 0062 	strh.w	r0, [r3, #98]	; 0x62
        oc_c_request->payload_m = oc_c_rsp;
 800408c:	669a      	str	r2, [r3, #104]	; 0x68
        coap_set_header_content_format(oc_c_request, oc_content_format);  //  Either JSON or CBOR.
 800408e:	6821      	ldr	r1, [r4, #0]
 8004090:	4618      	mov	r0, r3
 8004092:	f000 fe59 	bl	8004d48 <coap_set_header_content_format>
    oc_c_rsp = NULL;
 8004096:	2300      	movs	r3, #0
    if (oc_c_message) {
 8004098:	4c16      	ldr	r4, [pc, #88]	; (80040f4 <do_sensor_post+0x90>)
    oc_c_rsp = NULL;
 800409a:	602b      	str	r3, [r5, #0]
    if (oc_c_message) {
 800409c:	6821      	ldr	r1, [r4, #0]
 800409e:	b309      	cbz	r1, 80040e4 <do_sensor_post+0x80>
        if (!coap_serialize_message(oc_c_request, oc_c_message)) {
 80040a0:	4813      	ldr	r0, [pc, #76]	; (80040f0 <do_sensor_post+0x8c>)
 80040a2:	f000 fc89 	bl	80049b8 <coap_serialize_message>
 80040a6:	4601      	mov	r1, r0
            coap_send_message(oc_c_message, 0);
 80040a8:	6820      	ldr	r0, [r4, #0]
        if (!coap_serialize_message(oc_c_request, oc_c_message)) {
 80040aa:	b9c1      	cbnz	r1, 80040de <do_sensor_post+0x7a>
            coap_send_message(oc_c_message, 0);
 80040ac:	f000 fe34 	bl	8004d18 <coap_send_message>
        oc_ri_remove_client_cb_by_mid(oc_c_request->mid);
 80040b0:	4b0f      	ldr	r3, [pc, #60]	; (80040f0 <do_sensor_post+0x8c>)
 80040b2:	8898      	ldrh	r0, [r3, #4]
 80040b4:	f000 fb76 	bl	80047a4 <oc_ri_remove_client_cb_by_mid>
        oc_c_message = NULL;
 80040b8:	2300      	movs	r3, #0
 80040ba:	6023      	str	r3, [r4, #0]
        ret = true;
 80040bc:	2401      	movs	r4, #1
    os_error_t rc = os_sem_release(&oc_sem);  //  Request completed.  Release the semaphore for another request.
 80040be:	480e      	ldr	r0, [pc, #56]	; (80040f8 <do_sensor_post+0x94>)
 80040c0:	f002 fcc6 	bl	8006a50 <os_sem_release>
    assert(rc == OS_OK);
 80040c4:	2800      	cmp	r0, #0
 80040c6:	d1d1      	bne.n	800406c <do_sensor_post+0x8>
}
 80040c8:	4620      	mov	r0, r4
 80040ca:	bd38      	pop	{r3, r4, r5, pc}
        (oc_content_format == APPLICATION_CBOR) ? oc_rep_finalize() :
 80040cc:	2a3c      	cmp	r2, #60	; 0x3c
 80040ce:	d102      	bne.n	80040d6 <do_sensor_post+0x72>
 80040d0:	f000 fb0a 	bl	80046e8 <oc_rep_finalize>
 80040d4:	e7d5      	b.n	8004082 <do_sensor_post+0x1e>
        os_mbuf_free_chain(oc_c_rsp);
 80040d6:	6828      	ldr	r0, [r5, #0]
 80040d8:	f002 f825 	bl	8006126 <os_mbuf_free_chain>
 80040dc:	e7db      	b.n	8004096 <do_sensor_post+0x32>
            os_mbuf_free_chain(oc_c_message);
 80040de:	f002 f822 	bl	8006126 <os_mbuf_free_chain>
 80040e2:	e7e5      	b.n	80040b0 <do_sensor_post+0x4c>
    bool ret = false;
 80040e4:	460c      	mov	r4, r1
 80040e6:	e7ea      	b.n	80040be <do_sensor_post+0x5a>
 80040e8:	200002ec 	.word	0x200002ec
 80040ec:	200002e8 	.word	0x200002e8
 80040f0:	2000027c 	.word	0x2000027c
 80040f4:	20000278 	.word	0x20000278
 80040f8:	200002f0 	.word	0x200002f0

080040fc <json_rep_start_root_object>:

/// Start the JSON representation.  Assume top level is object.
/// ```
/// --> {
/// ```
void json_rep_start_root_object(void) {
 80040fc:	b508      	push	{r3, lr}
    int rc = json_encode_object_start(&coap_json_encoder);  assert(rc == 0);
 80040fe:	4805      	ldr	r0, [pc, #20]	; (8004114 <json_rep_start_root_object+0x18>)
 8004100:	f000 fef6 	bl	8004ef0 <json_encode_object_start>
 8004104:	b128      	cbz	r0, 8004112 <json_rep_start_root_object+0x16>
 8004106:	2300      	movs	r3, #0
 8004108:	461a      	mov	r2, r3
 800410a:	4619      	mov	r1, r3
 800410c:	4618      	mov	r0, r3
 800410e:	f001 fc01 	bl	8005914 <__assert_func>
}
 8004112:	bd08      	pop	{r3, pc}
 8004114:	20003330 	.word	0x20003330

08004118 <json_rep_end_root_object>:

///  End the JSON representation.  Assume top level is object.
///  ```
///  {... --> {...}
///  ```
void json_rep_end_root_object(void) {
 8004118:	b508      	push	{r3, lr}
    int rc = json_encode_object_finish(&coap_json_encoder);  assert(rc == 0);
 800411a:	4805      	ldr	r0, [pc, #20]	; (8004130 <json_rep_end_root_object+0x18>)
 800411c:	f001 f838 	bl	8005190 <json_encode_object_finish>
 8004120:	b128      	cbz	r0, 800412e <json_rep_end_root_object+0x16>
 8004122:	2300      	movs	r3, #0
 8004124:	461a      	mov	r2, r3
 8004126:	4619      	mov	r1, r3
 8004128:	4618      	mov	r0, r3
 800412a:	f001 fbf3 	bl	8005914 <__assert_func>
}
 800412e:	bd08      	pop	{r3, pc}
 8004130:	20003330 	.word	0x20003330

08004134 <get_hardware_id.part.2>:
    int rc = sensor_network_start_transport(i);
    assert(rc == 0);
    return rc;
}

int sensor_network_start_transport(uint8_t iface_type) {
 8004134:	b508      	push	{r3, lr}
        (void *)(uint32_t)iface_type, //  Pass network interface type to above function.
        10,  //  Task priority: highest is 0, lowest is 255.  Main task is 127.
        OS_WAIT_FOREVER,    //  Don't do sanity / watchdog checking.
        (os_stack_t *) network_task_stack,  //  Stack space for the task.
        NETWORK_TASK_STACK_SIZE);           //  Size of the stack (in 4-byte units).
    assert(rc == 0);
 8004136:	2300      	movs	r3, #0
 8004138:	461a      	mov	r2, r3
 800413a:	4619      	mov	r1, r3
 800413c:	4618      	mov	r0, r3
 800413e:	f001 fbe9 	bl	8005914 <__assert_func>
	...

08004144 <sensor_network_start_transport>:
    assert(iface_type >= 0 && iface_type < MAX_INTERFACE_TYPES);
 8004144:	2801      	cmp	r0, #1
int sensor_network_start_transport(uint8_t iface_type) {
 8004146:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004148:	4603      	mov	r3, r0
    assert(iface_type >= 0 && iface_type < MAX_INTERFACE_TYPES);
 800414a:	d905      	bls.n	8004158 <sensor_network_start_transport+0x14>
 800414c:	2300      	movs	r3, #0
 800414e:	461a      	mov	r2, r3
 8004150:	4619      	mov	r1, r3
 8004152:	4618      	mov	r0, r3
 8004154:	f001 fbde 	bl	8005914 <__assert_func>
    if (iface->transport_registered) { return 0; }  //  Quit if transport already registered and endpoint has been created.
 8004158:	2214      	movs	r2, #20
 800415a:	490d      	ldr	r1, [pc, #52]	; (8004190 <sensor_network_start_transport+0x4c>)
 800415c:	fb02 1200 	mla	r2, r2, r0, r1
 8004160:	7c12      	ldrb	r2, [r2, #16]
 8004162:	b98a      	cbnz	r2, 8004188 <sensor_network_start_transport+0x44>
    int rc = os_task_init(  //  Create a new task and start it...
 8004164:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004168:	9203      	str	r2, [sp, #12]
 800416a:	4a0a      	ldr	r2, [pc, #40]	; (8004194 <sensor_network_start_transport+0x50>)
 800416c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004170:	9202      	str	r2, [sp, #8]
 8004172:	220a      	movs	r2, #10
 8004174:	4808      	ldr	r0, [pc, #32]	; (8004198 <sensor_network_start_transport+0x54>)
 8004176:	e9cd 2100 	strd	r2, r1, [sp]
 800417a:	4a08      	ldr	r2, [pc, #32]	; (800419c <sensor_network_start_transport+0x58>)
 800417c:	4908      	ldr	r1, [pc, #32]	; (80041a0 <sensor_network_start_transport+0x5c>)
 800417e:	f002 fcef 	bl	8006b60 <os_task_init>
    assert(rc == 0);
 8004182:	b108      	cbz	r0, 8004188 <sensor_network_start_transport+0x44>
 8004184:	f7ff ffd6 	bl	8004134 <get_hardware_id.part.2>
    return rc;
}
 8004188:	2000      	movs	r0, #0
 800418a:	b005      	add	sp, #20
 800418c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004190:	200007b4 	.word	0x200007b4
 8004194:	20000394 	.word	0x20000394
 8004198:	20000344 	.word	0x20000344
 800419c:	08004235 	.word	0x08004235
 80041a0:	0800dc74 	.word	0x0800dc74

080041a4 <start_server_transport>:
int start_server_transport(void) {
 80041a4:	b508      	push	{r3, lr}
    int rc = sensor_network_start_transport(i);
 80041a6:	2000      	movs	r0, #0
 80041a8:	f7ff ffcc 	bl	8004144 <sensor_network_start_transport>
    assert(rc == 0);
 80041ac:	b128      	cbz	r0, 80041ba <start_server_transport+0x16>
 80041ae:	2300      	movs	r3, #0
 80041b0:	461a      	mov	r2, r3
 80041b2:	4619      	mov	r1, r3
 80041b4:	4618      	mov	r0, r3
 80041b6:	f001 fbad 	bl	8005914 <__assert_func>
}
 80041ba:	bd08      	pop	{r3, pc}

080041bc <sensor_network_register_transport>:
}

int sensor_network_register_transport(uint8_t iface_type) {
    //  Register the Network Interface as the network transport for CoAP Server or CoAP Collector.
    //  Return 0 if successful.
    assert(iface_type >= 0 && iface_type < MAX_INTERFACE_TYPES);
 80041bc:	2801      	cmp	r0, #1
int sensor_network_register_transport(uint8_t iface_type) {
 80041be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    assert(iface_type >= 0 && iface_type < MAX_INTERFACE_TYPES);
 80041c0:	d905      	bls.n	80041ce <sensor_network_register_transport+0x12>
 80041c2:	2300      	movs	r3, #0
 80041c4:	461a      	mov	r2, r3
 80041c6:	4619      	mov	r1, r3
 80041c8:	4618      	mov	r0, r3
 80041ca:	f001 fba3 	bl	8005914 <__assert_func>
    struct sensor_network_interface *iface = &sensor_network_interfaces[iface_type];
    if (iface->transport_registered) { return 0; }  //  Quit if transport already registered and endpoint has been created.
 80041ce:	2414      	movs	r4, #20
 80041d0:	4b12      	ldr	r3, [pc, #72]	; (800421c <sensor_network_register_transport+0x60>)
 80041d2:	fb04 3400 	mla	r4, r4, r0, r3
 80041d6:	7c23      	ldrb	r3, [r4, #16]
 80041d8:	b9eb      	cbnz	r3, 8004216 <sensor_network_register_transport+0x5a>

    void *endpoint = &sensor_network_endpoints[iface_type];
 80041da:	4e11      	ldr	r6, [pc, #68]	; (8004220 <sensor_network_register_transport+0x64>)
    //  If endpoint has not been created, register the transport for the interface and create the endpoint.
    assert(iface->network_device);  assert(iface->register_transport_func);
 80041dc:	6865      	ldr	r5, [r4, #4]
    void *endpoint = &sensor_network_endpoints[iface_type];
 80041de:	eb06 1600 	add.w	r6, r6, r0, lsl #4
    assert(iface->network_device);  assert(iface->register_transport_func);
 80041e2:	2d00      	cmp	r5, #0
 80041e4:	d0ed      	beq.n	80041c2 <sensor_network_register_transport+0x6>
 80041e6:	68e3      	ldr	r3, [r4, #12]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d0ea      	beq.n	80041c2 <sensor_network_register_transport+0x6>
    const char *network_device = iface->network_device;
    console_printf("%s%s %s\n", _net, sensor_network_shortname[iface_type], network_device);
 80041ec:	4a0d      	ldr	r2, [pc, #52]	; (8004224 <sensor_network_register_transport+0x68>)
 80041ee:	462b      	mov	r3, r5
 80041f0:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 80041f4:	490c      	ldr	r1, [pc, #48]	; (8004228 <sensor_network_register_transport+0x6c>)
 80041f6:	480d      	ldr	r0, [pc, #52]	; (800422c <sensor_network_register_transport+0x70>)
 80041f8:	f7ff fdd8 	bl	8003dac <console_printf>

    //  TODO: Host and port are not needed for Collector.
    int rc = iface->register_transport_func(network_device, endpoint, COAP_HOST, MYNEWT_VAL(COAP_PORT), MAX_ENDPOINT_SIZE);
 80041fc:	2310      	movs	r3, #16
 80041fe:	9300      	str	r3, [sp, #0]
 8004200:	68e7      	ldr	r7, [r4, #12]
 8004202:	f241 6333 	movw	r3, #5683	; 0x1633
 8004206:	4a0a      	ldr	r2, [pc, #40]	; (8004230 <sensor_network_register_transport+0x74>)
 8004208:	4631      	mov	r1, r6
 800420a:	4628      	mov	r0, r5
 800420c:	47b8      	blx	r7
    assert(rc == 0);
 800420e:	2800      	cmp	r0, #0
 8004210:	d1d7      	bne.n	80041c2 <sensor_network_register_transport+0x6>
    iface->transport_registered = 1;
 8004212:	2301      	movs	r3, #1
 8004214:	7423      	strb	r3, [r4, #16]
    return rc;
}
 8004216:	2000      	movs	r0, #0
 8004218:	b003      	add	sp, #12
 800421a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800421c:	200007b4 	.word	0x200007b4
 8004220:	20000794 	.word	0x20000794
 8004224:	0800dc6c 	.word	0x0800dc6c
 8004228:	0800dc5c 	.word	0x0800dc5c
 800422c:	0800dc61 	.word	0x0800dc61
 8004230:	0800db31 	.word	0x0800db31

08004234 <network_task_func>:
static void network_task_func(void *arg) {
 8004234:	b510      	push	{r4, lr}
 8004236:	4604      	mov	r4, r0
    console_printf("NET start\n");
 8004238:	480c      	ldr	r0, [pc, #48]	; (800426c <network_task_func+0x38>)
 800423a:	f7ff fdb7 	bl	8003dac <console_printf>
    rc = sensor_network_register_transport(iface_type);  assert(rc == 0);
 800423e:	b2e0      	uxtb	r0, r4
 8004240:	f7ff ffbc 	bl	80041bc <sensor_network_register_transport>
 8004244:	b958      	cbnz	r0, 800425e <network_task_func+0x2a>
        console_printf("NET free mbuf %d\n", os_msys_num_free());  //  Display number of free mbufs, to catch CoAP memory leaks.
 8004246:	4c0a      	ldr	r4, [pc, #40]	; (8004270 <network_task_func+0x3c>)
 8004248:	f002 f97c 	bl	8006544 <os_msys_num_free>
 800424c:	4601      	mov	r1, r0
 800424e:	4620      	mov	r0, r4
 8004250:	f7ff fdac 	bl	8003dac <console_printf>
        os_time_delay(10 * OS_TICKS_PER_SEC);                      //  Wait 10 seconds before repeating.
 8004254:	f242 7010 	movw	r0, #10000	; 0x2710
 8004258:	f002 fd5c 	bl	8006d14 <os_time_delay>
 800425c:	e7f4      	b.n	8004248 <network_task_func+0x14>
    rc = sensor_network_register_transport(iface_type);  assert(rc == 0);
 800425e:	2300      	movs	r3, #0
 8004260:	461a      	mov	r2, r3
 8004262:	4619      	mov	r1, r3
 8004264:	4618      	mov	r0, r3
 8004266:	f001 fb55 	bl	8005914 <__assert_func>
 800426a:	bf00      	nop
 800426c:	0800dbe2 	.word	0x0800dbe2
 8004270:	0800dbed 	.word	0x0800dbed

08004274 <sensor_network_init_post>:

//  Interface type and URI of the CoAP message being composed.
static uint8_t current_iface_type = 0xff;
static const char *current_uri = NULL;

bool sensor_network_init_post(uint8_t iface_type, const char *uri) {
 8004274:	b510      	push	{r4, lr}
    //  Start composing the CoAP Server or Collector message with the sensor data in the payload.  This will 
    //  block other tasks from composing and posting CoAP messages (through a semaphore).
    //  We only have 1 memory buffer for composing CoAP messages so it needs to be locked.
    //  Return true if successful, false if network has not been registered.
    if (uri == NULL || uri[0] == 0) { uri = COAP_URI; }
 8004276:	b331      	cbz	r1, 80042c6 <sensor_network_init_post+0x52>
 8004278:	780a      	ldrb	r2, [r1, #0]
 800427a:	4b14      	ldr	r3, [pc, #80]	; (80042cc <sensor_network_init_post+0x58>)
 800427c:	2a00      	cmp	r2, #0
 800427e:	bf08      	it	eq
 8004280:	4619      	moveq	r1, r3
    assert(uri);  assert(iface_type >= 0 && iface_type < MAX_INTERFACE_TYPES);
 8004282:	2801      	cmp	r0, #1
 8004284:	d819      	bhi.n	80042ba <sensor_network_init_post+0x46>
    struct sensor_network_interface *iface = &sensor_network_interfaces[iface_type];
    void *endpoint = &sensor_network_endpoints[iface_type];
    assert(iface->network_device);  assert(iface->register_transport_func);  assert(endpoint);
 8004286:	2314      	movs	r3, #20
 8004288:	4a11      	ldr	r2, [pc, #68]	; (80042d0 <sensor_network_init_post+0x5c>)
 800428a:	fb03 2300 	mla	r3, r3, r0, r2
 800428e:	685a      	ldr	r2, [r3, #4]
 8004290:	b19a      	cbz	r2, 80042ba <sensor_network_init_post+0x46>
 8004292:	68da      	ldr	r2, [r3, #12]
 8004294:	b18a      	cbz	r2, 80042ba <sensor_network_init_post+0x46>
    if (!iface->transport_registered) {
 8004296:	7c1c      	ldrb	r4, [r3, #16]
 8004298:	b924      	cbnz	r4, 80042a4 <sensor_network_init_post+0x30>
        //  If transport has not been registered, wait for the transport to be registered.
        console_printf("NET network not ready\n");
 800429a:	480e      	ldr	r0, [pc, #56]	; (80042d4 <sensor_network_init_post+0x60>)
 800429c:	f7ff fd86 	bl	8003dac <console_printf>
        return false;
 80042a0:	4620      	mov	r0, r4
    current_iface_type = iface_type;
    current_uri = uri;
    bool status = init_sensor_post(endpoint);
    assert(status);
    return status;
}
 80042a2:	bd10      	pop	{r4, pc}
    current_iface_type = iface_type;
 80042a4:	4b0c      	ldr	r3, [pc, #48]	; (80042d8 <sensor_network_init_post+0x64>)
 80042a6:	7018      	strb	r0, [r3, #0]
    current_uri = uri;
 80042a8:	4b0c      	ldr	r3, [pc, #48]	; (80042dc <sensor_network_init_post+0x68>)
 80042aa:	6019      	str	r1, [r3, #0]
    bool status = init_sensor_post(endpoint);
 80042ac:	4b0c      	ldr	r3, [pc, #48]	; (80042e0 <sensor_network_init_post+0x6c>)
 80042ae:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 80042b2:	f7ff fde5 	bl	8003e80 <init_sensor_post>
    assert(status);
 80042b6:	2800      	cmp	r0, #0
 80042b8:	d1f3      	bne.n	80042a2 <sensor_network_init_post+0x2e>
    assert(uri);  assert(iface_type >= 0 && iface_type < MAX_INTERFACE_TYPES);
 80042ba:	2300      	movs	r3, #0
 80042bc:	461a      	mov	r2, r3
 80042be:	4619      	mov	r1, r3
 80042c0:	4618      	mov	r0, r3
 80042c2:	f001 fb27 	bl	8005914 <__assert_func>
    if (uri == NULL || uri[0] == 0) { uri = COAP_URI; }
 80042c6:	4901      	ldr	r1, [pc, #4]	; (80042cc <sensor_network_init_post+0x58>)
 80042c8:	e7db      	b.n	8004282 <sensor_network_init_post+0xe>
 80042ca:	bf00      	nop
 80042cc:	0800db40 	.word	0x0800db40
 80042d0:	200007b4 	.word	0x200007b4
 80042d4:	0800dc45 	.word	0x0800dc45
 80042d8:	20000131 	.word	0x20000131
 80042dc:	200002fc 	.word	0x200002fc
 80042e0:	20000794 	.word	0x20000794

080042e4 <init_server_post>:
    bool status = sensor_network_init_post(i, uri);
 80042e4:	4601      	mov	r1, r0
 80042e6:	2000      	movs	r0, #0
 80042e8:	f7ff bfc4 	b.w	8004274 <sensor_network_init_post>

080042ec <sensor_network_prepare_post>:

bool sensor_network_prepare_post(int encoding) {
 80042ec:	b508      	push	{r3, lr}
    //  Set the encoding format for the CoAP message: APPLICATION_JSON or APPLICATION_CBOR.  If set to 0, use the default encoding format.
    //  Return true if successful.
    uint8_t iface_type = current_iface_type;
 80042ee:	4b0f      	ldr	r3, [pc, #60]	; (800432c <sensor_network_prepare_post+0x40>)
bool sensor_network_prepare_post(int encoding) {
 80042f0:	4602      	mov	r2, r0
    uint8_t iface_type = current_iface_type;
 80042f2:	7818      	ldrb	r0, [r3, #0]
    const char *uri = current_uri;
 80042f4:	4b0e      	ldr	r3, [pc, #56]	; (8004330 <sensor_network_prepare_post+0x44>)
 80042f6:	6819      	ldr	r1, [r3, #0]
    assert(uri);  assert(iface_type >= 0 && iface_type < MAX_INTERFACE_TYPES);
 80042f8:	b929      	cbnz	r1, 8004306 <sensor_network_prepare_post+0x1a>
 80042fa:	2300      	movs	r3, #0
 80042fc:	461a      	mov	r2, r3
 80042fe:	4619      	mov	r1, r3
 8004300:	4618      	mov	r0, r3
 8004302:	f001 fb07 	bl	8005914 <__assert_func>
 8004306:	2801      	cmp	r0, #1
 8004308:	d8f7      	bhi.n	80042fa <sensor_network_prepare_post+0xe>
    void *endpoint = &sensor_network_endpoints[iface_type];
    assert(endpoint);

    //  Use the specified encoding. If not specified, select the default encoding for the interface type.
    int enc = (encoding > 0) ? encoding : sensor_network_encoding[iface_type];
 800430a:	2a00      	cmp	r2, #0
    void *endpoint = &sensor_network_endpoints[iface_type];
 800430c:	4b09      	ldr	r3, [pc, #36]	; (8004334 <sensor_network_prepare_post+0x48>)
    int enc = (encoding > 0) ? encoding : sensor_network_encoding[iface_type];
 800430e:	bfd8      	it	le
 8004310:	4a09      	ldrle	r2, [pc, #36]	; (8004338 <sensor_network_prepare_post+0x4c>)
    void *endpoint = &sensor_network_endpoints[iface_type];
 8004312:	eb03 1300 	add.w	r3, r3, r0, lsl #4
    int enc = (encoding > 0) ? encoding : sensor_network_encoding[iface_type];
 8004316:	bfd8      	it	le
 8004318:	f852 2020 	ldrle.w	r2, [r2, r0, lsl #2]
    bool status = prepare_sensor_post(endpoint, uri, enc);
 800431c:	4618      	mov	r0, r3
 800431e:	f7ff fdf9 	bl	8003f14 <prepare_sensor_post>
    assert(status);
 8004322:	2800      	cmp	r0, #0
 8004324:	d0e9      	beq.n	80042fa <sensor_network_prepare_post+0xe>
    return status;
}
 8004326:	2001      	movs	r0, #1
 8004328:	bd08      	pop	{r3, pc}
 800432a:	bf00      	nop
 800432c:	20000131 	.word	0x20000131
 8004330:	200002fc 	.word	0x200002fc
 8004334:	20000794 	.word	0x20000794
 8004338:	0800dc00 	.word	0x0800dc00

0800433c <sensor_network_do_post>:

bool sensor_network_do_post(uint8_t iface_type) {
    //  Post the CoAP Server or Collector message to the CoAP Background Task for transmission.  After posting the
    //  message to the background task, we release a semaphore that unblocks other requests
    //  to compose and post CoAP messages.
    assert(iface_type >= 0 && iface_type < MAX_INTERFACE_TYPES);
 800433c:	2801      	cmp	r0, #1
bool sensor_network_do_post(uint8_t iface_type) {
 800433e:	b508      	push	{r3, lr}
    assert(iface_type >= 0 && iface_type < MAX_INTERFACE_TYPES);
 8004340:	d901      	bls.n	8004346 <sensor_network_do_post+0xa>
 8004342:	f7ff fef7 	bl	8004134 <get_hardware_id.part.2>
    bool status = do_sensor_post();
 8004346:	f7ff fe8d 	bl	8004064 <do_sensor_post>
    assert(status);
 800434a:	4603      	mov	r3, r0
 800434c:	b918      	cbnz	r0, 8004356 <sensor_network_do_post+0x1a>
 800434e:	4602      	mov	r2, r0
 8004350:	4601      	mov	r1, r0
 8004352:	f001 fadf 	bl	8005914 <__assert_func>
    return status;
}
 8004356:	2001      	movs	r0, #1
 8004358:	bd08      	pop	{r3, pc}

0800435a <do_server_post>:
bool do_server_post(void) {    
 800435a:	b508      	push	{r3, lr}
    bool status = sensor_network_do_post(i);
 800435c:	2000      	movs	r0, #0
 800435e:	f7ff ffed 	bl	800433c <sensor_network_do_post>
    assert(status);
 8004362:	4603      	mov	r3, r0
 8004364:	b918      	cbnz	r0, 800436e <do_server_post+0x14>
 8004366:	4602      	mov	r2, r0
 8004368:	4601      	mov	r1, r0
 800436a:	f001 fad3 	bl	8005914 <__assert_func>
}
 800436e:	2001      	movs	r0, #1
 8004370:	bd08      	pop	{r3, pc}
	...

08004374 <is_sensor_node>:
}

bool is_sensor_node(void) {
    //  Return true if this is a Sensor Node.
    //  This is a Sensor Node if the Hardware ID matches one of the Sensor Node Hardware IDs.
    if (sensor_node_address) { return true; }  //  sensor_node_address is set in sensor_network_init().
 8004374:	4b03      	ldr	r3, [pc, #12]	; (8004384 <is_sensor_node+0x10>)
 8004376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800437a:	4313      	orrs	r3, r2
    return false;
}
 800437c:	bf14      	ite	ne
 800437e:	2001      	movne	r0, #1
 8004380:	2000      	moveq	r0, #0
 8004382:	4770      	bx	lr
 8004384:	200007e0 	.word	0x200007e0

08004388 <get_hardware_id>:
}

/////////////////////////////////////////////////////////
//  Sensor Network Addresses

const uint8_t *get_hardware_id(void) {
 8004388:	b538      	push	{r3, r4, r5, lr}
    //  Return the Hardware ID, which is unique across all microcontrollers.
    if (hw_id_len == 0) {
 800438a:	4c12      	ldr	r4, [pc, #72]	; (80043d4 <get_hardware_id+0x4c>)
 800438c:	6825      	ldr	r5, [r4, #0]
 800438e:	b9f5      	cbnz	r5, 80043ce <get_hardware_id+0x46>
        hw_id_len = hal_bsp_hw_id_len();     //  Fetch the length, i.e. 12
 8004390:	f000 ff4b 	bl	800522a <hal_bsp_hw_id_len>
        assert((unsigned) hw_id_len >= sizeof(hw_id));  //  Hardware ID too short.
 8004394:	280b      	cmp	r0, #11
        hw_id_len = hal_bsp_hw_id_len();     //  Fetch the length, i.e. 12
 8004396:	6020      	str	r0, [r4, #0]
        assert((unsigned) hw_id_len >= sizeof(hw_id));  //  Hardware ID too short.
 8004398:	d801      	bhi.n	800439e <get_hardware_id+0x16>
 800439a:	f7ff fecb 	bl	8004134 <get_hardware_id.part.2>
        hw_id_len = hal_bsp_hw_id(hw_id, sizeof(hw_id));  assert(hw_id_len > 0);  //  Get the hardware ID.
 800439e:	210c      	movs	r1, #12
 80043a0:	480d      	ldr	r0, [pc, #52]	; (80043d8 <get_hardware_id+0x50>)
 80043a2:	f000 ff45 	bl	8005230 <hal_bsp_hw_id>
 80043a6:	2800      	cmp	r0, #0
 80043a8:	6020      	str	r0, [r4, #0]
 80043aa:	dc05      	bgt.n	80043b8 <get_hardware_id+0x30>
 80043ac:	462b      	mov	r3, r5
 80043ae:	462a      	mov	r2, r5
 80043b0:	4629      	mov	r1, r5
 80043b2:	4628      	mov	r0, r5
 80043b4:	f001 faae 	bl	8005914 <__assert_func>
        console_printf("%shwid ", _net);  console_dump(hw_id, hw_id_len);  console_printf("\n");
 80043b8:	4908      	ldr	r1, [pc, #32]	; (80043dc <get_hardware_id+0x54>)
 80043ba:	4809      	ldr	r0, [pc, #36]	; (80043e0 <get_hardware_id+0x58>)
 80043bc:	f7ff fcf6 	bl	8003dac <console_printf>
 80043c0:	4805      	ldr	r0, [pc, #20]	; (80043d8 <get_hardware_id+0x50>)
 80043c2:	6821      	ldr	r1, [r4, #0]
 80043c4:	f7ff fc8a 	bl	8003cdc <console_dump>
 80043c8:	4806      	ldr	r0, [pc, #24]	; (80043e4 <get_hardware_id+0x5c>)
 80043ca:	f7ff fcef 	bl	8003dac <console_printf>
    }
    return hw_id;
}
 80043ce:	4802      	ldr	r0, [pc, #8]	; (80043d8 <get_hardware_id+0x50>)
 80043d0:	bd38      	pop	{r3, r4, r5, pc}
 80043d2:	bf00      	nop
 80043d4:	20000340 	.word	0x20000340
 80043d8:	20000331 	.word	0x20000331
 80043dc:	0800dc5c 	.word	0x0800dc5c
 80043e0:	0800dbda 	.word	0x0800dbda
 80043e4:	0800e32c 	.word	0x0800e32c

080043e8 <is_collector_node>:
bool is_collector_node(void) {
 80043e8:	b508      	push	{r3, lr}
    const uint8_t *hardware_id = get_hardware_id();
 80043ea:	f7ff ffcd 	bl	8004388 <get_hardware_id>
    if (memcmp(hardware_id, COLLECTOR_NODE_HW_ID, HARDWARE_ID_LENGTH) == 0) { return true; }
 80043ee:	220c      	movs	r2, #12
 80043f0:	4903      	ldr	r1, [pc, #12]	; (8004400 <is_collector_node+0x18>)
 80043f2:	f002 fdf9 	bl	8006fe8 <memcmp>
}
 80043f6:	fab0 f080 	clz	r0, r0
 80043fa:	0940      	lsrs	r0, r0, #5
 80043fc:	bd08      	pop	{r3, pc}
 80043fe:	bf00      	nop
 8004400:	0800db76 	.word	0x0800db76

08004404 <is_standalone_node>:
bool is_standalone_node(void) {
 8004404:	b508      	push	{r3, lr}
    if (!is_collector_node() && !is_sensor_node()) { return true; }
 8004406:	f7ff ffef 	bl	80043e8 <is_collector_node>
 800440a:	b928      	cbnz	r0, 8004418 <is_standalone_node+0x14>
 800440c:	f7ff ffb2 	bl	8004374 <is_sensor_node>
 8004410:	f080 0001 	eor.w	r0, r0, #1
 8004414:	b2c0      	uxtb	r0, r0
}
 8004416:	bd08      	pop	{r3, pc}
    return false;
 8004418:	2000      	movs	r0, #0
 800441a:	e7fc      	b.n	8004416 <is_standalone_node+0x12>

0800441c <get_device_id>:

const char *get_device_id(void) {
 800441c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    //  Get the randomly-generated Device ID that will be sent in every CoAP Server message.  Changes upon restart.
    if (device_id_text[0]) { return device_id_text; }
 800441e:	4d12      	ldr	r5, [pc, #72]	; (8004468 <get_device_id+0x4c>)
 8004420:	782e      	ldrb	r6, [r5, #0]
 8004422:	b9c6      	cbnz	r6, 8004456 <get_device_id+0x3a>
#if MYNEWT_VAL(HMAC_PRNG)
    //  Create a random device ID based on HMAC pseudorandom number generator e.g. 0xab 0xcd 0xef ...
    int rc = hmac_prng_generate(device_id, DEVICE_ID_LENGTH);  assert(rc == 0);
 8004424:	2110      	movs	r1, #16
 8004426:	4811      	ldr	r0, [pc, #68]	; (800446c <get_device_id+0x50>)
 8004428:	f003 f95c 	bl	80076e4 <hmac_prng_generate>
 800442c:	4604      	mov	r4, r0
 800442e:	b9a0      	cbnz	r0, 800445a <get_device_id+0x3e>
#endif  //  MYNEWT_VAL(HMAC_PRNG)
    char *s = device_id_text; int i;
    //  Convert to text e.g. abcdef...
    for (i = 0; i < DEVICE_ID_LENGTH; i++) {
        sprintf(s, "%02x", device_id[i]);
 8004430:	4f0e      	ldr	r7, [pc, #56]	; (800446c <get_device_id+0x50>)
 8004432:	4e0f      	ldr	r6, [pc, #60]	; (8004470 <get_device_id+0x54>)
 8004434:	5d3a      	ldrb	r2, [r7, r4]
 8004436:	eb05 0044 	add.w	r0, r5, r4, lsl #1
 800443a:	4631      	mov	r1, r6
    for (i = 0; i < DEVICE_ID_LENGTH; i++) {
 800443c:	3401      	adds	r4, #1
        sprintf(s, "%02x", device_id[i]);
 800443e:	f002 fe0c 	bl	800705a <sprintf>
    for (i = 0; i < DEVICE_ID_LENGTH; i++) {
 8004442:	2c10      	cmp	r4, #16
 8004444:	d1f6      	bne.n	8004434 <get_device_id+0x18>
        s += 2;
    }
    device_id_text[DEVICE_ID_TEXT_LENGTH - 1] = 0;
 8004446:	2300      	movs	r3, #0
    console_printf("%srandom device id %s\n", _net, device_id_text);
 8004448:	4a07      	ldr	r2, [pc, #28]	; (8004468 <get_device_id+0x4c>)
 800444a:	490a      	ldr	r1, [pc, #40]	; (8004474 <get_device_id+0x58>)
 800444c:	480a      	ldr	r0, [pc, #40]	; (8004478 <get_device_id+0x5c>)
    device_id_text[DEVICE_ID_TEXT_LENGTH - 1] = 0;
 800444e:	f885 3020 	strb.w	r3, [r5, #32]
    console_printf("%srandom device id %s\n", _net, device_id_text);
 8004452:	f7ff fcab 	bl	8003dac <console_printf>
    return device_id_text;
}
 8004456:	4804      	ldr	r0, [pc, #16]	; (8004468 <get_device_id+0x4c>)
 8004458:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    int rc = hmac_prng_generate(device_id, DEVICE_ID_LENGTH);  assert(rc == 0);
 800445a:	4633      	mov	r3, r6
 800445c:	4632      	mov	r2, r6
 800445e:	4631      	mov	r1, r6
 8004460:	4630      	mov	r0, r6
 8004462:	f001 fa57 	bl	8005914 <__assert_func>
 8004466:	bf00      	nop
 8004468:	20000310 	.word	0x20000310
 800446c:	20000300 	.word	0x20000300
 8004470:	0800dbbe 	.word	0x0800dbbe
 8004474:	0800dc5c 	.word	0x0800dc5c
 8004478:	0800dbc3 	.word	0x0800dbc3

0800447c <sensor_network_init>:
const char **get_sensor_node_names(void) { return sensor_node_names; }

/////////////////////////////////////////////////////////
//  Sensor Network Configuration

void sensor_network_init(void) {
 800447c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    //  Allocate Sensor Node address for this node.

    //  Set the Sensor Node names for remote_sensor_create().
    for (int i = 0; i < SENSOR_NETWORK_SIZE; i++) {
 800447e:	2400      	movs	r4, #0
 8004480:	4d22      	ldr	r5, [pc, #136]	; (800450c <sensor_network_init+0x90>)
        int len = sprintf((char *) sensor_node_names[i], "%010llx", sensor_node_addresses[i]);
 8004482:	4e23      	ldr	r6, [pc, #140]	; (8004510 <sensor_network_init+0x94>)
 8004484:	4f23      	ldr	r7, [pc, #140]	; (8004514 <sensor_network_init+0x98>)
 8004486:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 800448a:	4639      	mov	r1, r7
 800448c:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8004490:	f002 fde3 	bl	800705a <sprintf>
        assert(len + 1 <= NODE_NAME_LENGTH);
 8004494:	280a      	cmp	r0, #10
 8004496:	d005      	beq.n	80044a4 <sensor_network_init+0x28>
 8004498:	2300      	movs	r3, #0
 800449a:	461a      	mov	r2, r3
 800449c:	4619      	mov	r1, r3
 800449e:	4618      	mov	r0, r3
 80044a0:	f001 fa38 	bl	8005914 <__assert_func>
    for (int i = 0; i < SENSOR_NETWORK_SIZE; i++) {
 80044a4:	3401      	adds	r4, #1
 80044a6:	2c05      	cmp	r4, #5
 80044a8:	d1ed      	bne.n	8004486 <sensor_network_init+0xa>
    }
    //  Get Sensor Node address if applicable.
    const uint8_t *hardware_id = get_hardware_id();
 80044aa:	f7ff ff6d 	bl	8004388 <get_hardware_id>
    int i;
    for (i = 0; i < SENSOR_NETWORK_SIZE; i++) {
 80044ae:	2400      	movs	r4, #0
    const uint8_t *hardware_id = get_hardware_id();
 80044b0:	4605      	mov	r5, r0
        if (memcmp(hardware_id, SENSOR_NODE_HW_IDS[i], HARDWARE_ID_LENGTH) == 0) {
 80044b2:	260c      	movs	r6, #12
 80044b4:	4f18      	ldr	r7, [pc, #96]	; (8004518 <sensor_network_init+0x9c>)
 80044b6:	220c      	movs	r2, #12
 80044b8:	fb06 7104 	mla	r1, r6, r4, r7
 80044bc:	4628      	mov	r0, r5
 80044be:	f002 fd93 	bl	8006fe8 <memcmp>
 80044c2:	1c63      	adds	r3, r4, #1
 80044c4:	b9b0      	cbnz	r0, 80044f4 <sensor_network_init+0x78>
            sensor_node_address = sensor_node_addresses[i];
 80044c6:	4a15      	ldr	r2, [pc, #84]	; (800451c <sensor_network_init+0xa0>)
 80044c8:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
 80044cc:	4a14      	ldr	r2, [pc, #80]	; (8004520 <sensor_network_init+0xa4>)
 80044ce:	e9d4 0100 	ldrd	r0, r1, [r4]
 80044d2:	e9c2 0100 	strd	r0, r1, [r2]
            console_printf("%ssensor%s#%d\n", _net, _node, i + 1);
 80044d6:	4a13      	ldr	r2, [pc, #76]	; (8004524 <sensor_network_init+0xa8>)
 80044d8:	4913      	ldr	r1, [pc, #76]	; (8004528 <sensor_network_init+0xac>)
 80044da:	4814      	ldr	r0, [pc, #80]	; (800452c <sensor_network_init+0xb0>)
 80044dc:	f7ff fc66 	bl	8003dac <console_printf>
            break;
        }
    }
    //  Display the type of node.
    if (is_collector_node()) { console_printf("%scollector%s\n", _net, _node); }
 80044e0:	f7ff ff82 	bl	80043e8 <is_collector_node>
 80044e4:	b150      	cbz	r0, 80044fc <sensor_network_init+0x80>
 80044e6:	4a0f      	ldr	r2, [pc, #60]	; (8004524 <sensor_network_init+0xa8>)
 80044e8:	490f      	ldr	r1, [pc, #60]	; (8004528 <sensor_network_init+0xac>)
 80044ea:	4811      	ldr	r0, [pc, #68]	; (8004530 <sensor_network_init+0xb4>)
    else if (is_standalone_node()) { console_printf("%sstandalone%s\n", _net, _node); }
}
 80044ec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    else if (is_standalone_node()) { console_printf("%sstandalone%s\n", _net, _node); }
 80044f0:	f7ff bc5c 	b.w	8003dac <console_printf>
    for (i = 0; i < SENSOR_NETWORK_SIZE; i++) {
 80044f4:	2b05      	cmp	r3, #5
 80044f6:	461c      	mov	r4, r3
 80044f8:	d1dd      	bne.n	80044b6 <sensor_network_init+0x3a>
 80044fa:	e7f1      	b.n	80044e0 <sensor_network_init+0x64>
    else if (is_standalone_node()) { console_printf("%sstandalone%s\n", _net, _node); }
 80044fc:	f7ff ff82 	bl	8004404 <is_standalone_node>
 8004500:	b118      	cbz	r0, 800450a <sensor_network_init+0x8e>
 8004502:	4a08      	ldr	r2, [pc, #32]	; (8004524 <sensor_network_init+0xa8>)
 8004504:	4908      	ldr	r1, [pc, #32]	; (8004528 <sensor_network_init+0xac>)
 8004506:	480b      	ldr	r0, [pc, #44]	; (8004534 <sensor_network_init+0xb8>)
 8004508:	e7f0      	b.n	80044ec <sensor_network_init+0x70>
}
 800450a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800450c:	0800dc78 	.word	0x0800dc78
 8004510:	20000134 	.word	0x20000134
 8004514:	0800dc08 	.word	0x0800dc08
 8004518:	0800db82 	.word	0x0800db82
 800451c:	0800dc80 	.word	0x0800dc80
 8004520:	200007e0 	.word	0x200007e0
 8004524:	0800dc10 	.word	0x0800dc10
 8004528:	0800dc5c 	.word	0x0800dc5c
 800452c:	0800dc17 	.word	0x0800dc17
 8004530:	0800dc26 	.word	0x0800dc26
 8004534:	0800dc35 	.word	0x0800dc35

08004538 <sensor_network_register_interface>:

int sensor_network_register_interface(const struct sensor_network_interface *iface) {
 8004538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    //  Register the Network Interface (e.g. BC95-G, ESP8266, nRF24L01) for the Sensor Network.
    assert(iface);
 800453a:	b928      	cbnz	r0, 8004548 <sensor_network_register_interface+0x10>
 800453c:	2300      	movs	r3, #0
 800453e:	461a      	mov	r2, r3
 8004540:	4619      	mov	r1, r3
 8004542:	4618      	mov	r0, r3
 8004544:	f001 f9e6 	bl	8005914 <__assert_func>
    uint8_t i = iface->iface_type;  assert(i >= 0 && i < MAX_INTERFACE_TYPES);
 8004548:	7804      	ldrb	r4, [r0, #0]
 800454a:	2c01      	cmp	r4, #1
 800454c:	d8f6      	bhi.n	800453c <sensor_network_register_interface+0x4>
    assert(iface->network_device);  assert(iface->server_endpoint_size);  assert(iface->register_transport_func);
 800454e:	6843      	ldr	r3, [r0, #4]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d0f3      	beq.n	800453c <sensor_network_register_interface+0x4>
 8004554:	7a03      	ldrb	r3, [r0, #8]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d0f0      	beq.n	800453c <sensor_network_register_interface+0x4>
 800455a:	68c2      	ldr	r2, [r0, #12]
 800455c:	2a00      	cmp	r2, #0
 800455e:	d0ed      	beq.n	800453c <sensor_network_register_interface+0x4>
    assert(iface->server_endpoint_size <= MAX_ENDPOINT_SIZE);     //  Need to increase MAX_ENDPOINT_SIZE.
 8004560:	2b10      	cmp	r3, #16
 8004562:	d8eb      	bhi.n	800453c <sensor_network_register_interface+0x4>
    assert(sensor_network_interfaces[i].network_device == NULL);  //  Interface already registered.
 8004564:	2214      	movs	r2, #20
 8004566:	4d11      	ldr	r5, [pc, #68]	; (80045ac <sensor_network_register_interface+0x74>)
 8004568:	fb02 5204 	mla	r2, r2, r4, r5
 800456c:	6851      	ldr	r1, [r2, #4]
 800456e:	2900      	cmp	r1, #0
 8004570:	d1e4      	bne.n	800453c <sensor_network_register_interface+0x4>
    memcpy(&sensor_network_interfaces[i], iface, sizeof(struct sensor_network_interface));  //  Copy the interface.
 8004572:	4603      	mov	r3, r0
 8004574:	f100 0710 	add.w	r7, r0, #16
 8004578:	4616      	mov	r6, r2
 800457a:	6818      	ldr	r0, [r3, #0]
 800457c:	6859      	ldr	r1, [r3, #4]
 800457e:	3308      	adds	r3, #8
 8004580:	c603      	stmia	r6!, {r0, r1}
 8004582:	42bb      	cmp	r3, r7
 8004584:	4632      	mov	r2, r6
 8004586:	d1f7      	bne.n	8004578 <sensor_network_register_interface+0x40>
 8004588:	6818      	ldr	r0, [r3, #0]
    sensor_network_interfaces[i].transport_registered = 0;        //  We defer the registration of the transport till first use.
 800458a:	2314      	movs	r3, #20
 800458c:	fb03 5304 	mla	r3, r3, r4, r5
 8004590:	2500      	movs	r5, #0
    console_printf("%s%s %s\n", _net, sensor_network_shortname[i], sensor_network_interfaces[i].network_device);
 8004592:	4a07      	ldr	r2, [pc, #28]	; (80045b0 <sensor_network_register_interface+0x78>)
    memcpy(&sensor_network_interfaces[i], iface, sizeof(struct sensor_network_interface));  //  Copy the interface.
 8004594:	6030      	str	r0, [r6, #0]
    console_printf("%s%s %s\n", _net, sensor_network_shortname[i], sensor_network_interfaces[i].network_device);
 8004596:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
    sensor_network_interfaces[i].transport_registered = 0;        //  We defer the registration of the transport till first use.
 800459a:	741d      	strb	r5, [r3, #16]
    console_printf("%s%s %s\n", _net, sensor_network_shortname[i], sensor_network_interfaces[i].network_device);
 800459c:	4905      	ldr	r1, [pc, #20]	; (80045b4 <sensor_network_register_interface+0x7c>)
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	4805      	ldr	r0, [pc, #20]	; (80045b8 <sensor_network_register_interface+0x80>)
 80045a2:	f7ff fc03 	bl	8003dac <console_printf>
    return 0;
}
 80045a6:	4628      	mov	r0, r5
 80045a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045aa:	bf00      	nop
 80045ac:	200007b4 	.word	0x200007b4
 80045b0:	0800dc6c 	.word	0x0800dc6c
 80045b4:	0800dc5c 	.word	0x0800dc5c
 80045b8:	0800dc61 	.word	0x0800dc61

080045bc <oc_buffer_tx>:
    assert(rc == 0);
}

static void
oc_buffer_tx(struct os_event *ev)
{
 80045bc:	b538      	push	{r3, r4, r5, lr}
    struct os_mbuf *m;

    while ((m = os_mqueue_get(&oc_outq)) != NULL) {
        STAILQ_NEXT(OS_MBUF_PKTHDR(m), omp_next) = NULL;
 80045be:	2500      	movs	r5, #0
    while ((m = os_mqueue_get(&oc_outq)) != NULL) {
 80045c0:	4c08      	ldr	r4, [pc, #32]	; (80045e4 <oc_buffer_tx+0x28>)
 80045c2:	4620      	mov	r0, r4
 80045c4:	f001 fd44 	bl	8006050 <os_mqueue_get>
 80045c8:	4603      	mov	r3, r0
 80045ca:	b900      	cbnz	r0, 80045ce <oc_buffer_tx+0x12>
            }
#ifdef OC_CLIENT
        }
#endif
    }
}
 80045cc:	bd38      	pop	{r3, r4, r5, pc}
        STAILQ_NEXT(OS_MBUF_PKTHDR(m), omp_next) = NULL;
 80045ce:	615d      	str	r5, [r3, #20]
        if (OC_MBUF_ENDPOINT(m)->ep.oe_flags & OC_ENDPOINT_MULTICAST) {
 80045d0:	7e1b      	ldrb	r3, [r3, #24]
 80045d2:	071b      	lsls	r3, r3, #28
 80045d4:	d502      	bpl.n	80045dc <oc_buffer_tx+0x20>
            oc_send_multicast_message(m);
 80045d6:	f000 fc0b 	bl	8004df0 <oc_send_multicast_message>
 80045da:	e7f2      	b.n	80045c2 <oc_buffer_tx+0x6>
                oc_send_buffer(m);
 80045dc:	f000 fbfa 	bl	8004dd4 <oc_send_buffer>
 80045e0:	e7ef      	b.n	80045c2 <oc_buffer_tx+0x6>
 80045e2:	bf00      	nop
 80045e4:	20000838 	.word	0x20000838

080045e8 <oc_buffer_rx>:

static void
oc_buffer_rx(struct os_event *ev)
{
 80045e8:	b513      	push	{r0, r1, r4, lr}
    struct os_mbuf *m;
#if defined(OC_SECURITY)
    uint8_t b;
#endif

    while ((m = os_mqueue_get(&oc_inq)) != NULL) {
 80045ea:	4c08      	ldr	r4, [pc, #32]	; (800460c <oc_buffer_rx+0x24>)
 80045ec:	4620      	mov	r0, r4
 80045ee:	f001 fd2f 	bl	8006050 <os_mqueue_get>
 80045f2:	9001      	str	r0, [sp, #4]
 80045f4:	b908      	cbnz	r0, 80045fa <oc_buffer_rx+0x12>
#endif
        if (m) {
            os_mbuf_free_chain(m);
        }
    }
}
 80045f6:	b002      	add	sp, #8
 80045f8:	bd10      	pop	{r4, pc}
        coap_receive(&m);
 80045fa:	a801      	add	r0, sp, #4
 80045fc:	f000 fc6c 	bl	8004ed8 <__wrap_coap_receive>
        if (m) {
 8004600:	9801      	ldr	r0, [sp, #4]
 8004602:	2800      	cmp	r0, #0
 8004604:	d0f2      	beq.n	80045ec <oc_buffer_rx+0x4>
            os_mbuf_free_chain(m);
 8004606:	f001 fd8e 	bl	8006126 <os_mbuf_free_chain>
 800460a:	e7ef      	b.n	80045ec <oc_buffer_rx+0x4>
 800460c:	20000820 	.word	0x20000820

08004610 <oc_allocate_mbuf>:
};

static inline int
oc_endpoint_size(struct oc_endpoint *oe)
{
    assert(oc_transports[oe->ep.oe_type]);
 8004610:	7803      	ldrb	r3, [r0, #0]
 8004612:	4a0e      	ldr	r2, [pc, #56]	; (800464c <oc_allocate_mbuf+0x3c>)
 8004614:	f003 0307 	and.w	r3, r3, #7
 8004618:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
{
 800461c:	b570      	push	{r4, r5, r6, lr}
 800461e:	4605      	mov	r5, r0
 8004620:	b923      	cbnz	r3, 800462c <oc_allocate_mbuf+0x1c>
 8004622:	461a      	mov	r2, r3
 8004624:	4619      	mov	r1, r3
 8004626:	4618      	mov	r0, r3
 8004628:	f001 f974 	bl	8005914 <__assert_func>
    return oc_transports[oe->ep.oe_type]->ot_ep_size(oe);
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	4798      	blx	r3
    m = os_msys_get_pkthdr(0, ep_size);
 8004630:	b281      	uxth	r1, r0
 8004632:	4606      	mov	r6, r0
 8004634:	2000      	movs	r0, #0
 8004636:	f001 ff77 	bl	8006528 <os_msys_get_pkthdr>
    if (!m) {
 800463a:	4604      	mov	r4, r0
 800463c:	b120      	cbz	r0, 8004648 <oc_allocate_mbuf+0x38>
    memcpy(OC_MBUF_ENDPOINT(m), oe, ep_size);
 800463e:	4632      	mov	r2, r6
 8004640:	4629      	mov	r1, r5
 8004642:	3018      	adds	r0, #24
 8004644:	f002 fcf4 	bl	8007030 <memcpy>
}
 8004648:	4620      	mov	r0, r4
 800464a:	bd70      	pop	{r4, r5, r6, pc}
 800464c:	200033d0 	.word	0x200033d0

08004650 <oc_send_message>:
{
 8004650:	b510      	push	{r4, lr}
 8004652:	4604      	mov	r4, r0
    rc = os_mqueue_put(&oc_outq, oc_evq_get(), m);
 8004654:	f000 fb9e 	bl	8004d94 <oc_evq_get>
 8004658:	4622      	mov	r2, r4
 800465a:	4601      	mov	r1, r0
 800465c:	4805      	ldr	r0, [pc, #20]	; (8004674 <oc_send_message+0x24>)
 800465e:	f001 fd0a 	bl	8006076 <os_mqueue_put>
    assert(rc == 0);
 8004662:	b128      	cbz	r0, 8004670 <oc_send_message+0x20>
 8004664:	2300      	movs	r3, #0
 8004666:	461a      	mov	r2, r3
 8004668:	4619      	mov	r1, r3
 800466a:	4618      	mov	r0, r3
 800466c:	f001 f952 	bl	8005914 <__assert_func>
}
 8004670:	bd10      	pop	{r4, pc}
 8004672:	bf00      	nop
 8004674:	20000838 	.word	0x20000838

08004678 <oc_buffer_init>:

void
oc_buffer_init(void)
{
 8004678:	b508      	push	{r3, lr}
    os_mqueue_init(&oc_inq, oc_buffer_rx, NULL);
 800467a:	2200      	movs	r2, #0
 800467c:	4905      	ldr	r1, [pc, #20]	; (8004694 <oc_buffer_init+0x1c>)
 800467e:	4806      	ldr	r0, [pc, #24]	; (8004698 <oc_buffer_init+0x20>)
 8004680:	f001 fcd6 	bl	8006030 <os_mqueue_init>
    os_mqueue_init(&oc_outq, oc_buffer_tx, NULL);
}
 8004684:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    os_mqueue_init(&oc_outq, oc_buffer_tx, NULL);
 8004688:	2200      	movs	r2, #0
 800468a:	4904      	ldr	r1, [pc, #16]	; (800469c <oc_buffer_init+0x24>)
 800468c:	4804      	ldr	r0, [pc, #16]	; (80046a0 <oc_buffer_init+0x28>)
 800468e:	f001 bccf 	b.w	8006030 <os_mqueue_init>
 8004692:	bf00      	nop
 8004694:	080045e9 	.word	0x080045e9
 8004698:	20000820 	.word	0x20000820
 800469c:	080045bd 	.word	0x080045bd
 80046a0:	20000838 	.word	0x20000838

080046a4 <oc_rep_new>:
CborError g_err;
struct cbor_mbuf_writer g_buf_writer;

void
oc_rep_new(struct os_mbuf *m)
{
 80046a4:	b538      	push	{r3, r4, r5, lr}
    g_err = CborNoError;
 80046a6:	2500      	movs	r5, #0
 80046a8:	4b07      	ldr	r3, [pc, #28]	; (80046c8 <oc_rep_new+0x24>)
    g_outm = m;
    cbor_mbuf_writer_init(&g_buf_writer, m);
 80046aa:	4c08      	ldr	r4, [pc, #32]	; (80046cc <oc_rep_new+0x28>)
    g_err = CborNoError;
 80046ac:	601d      	str	r5, [r3, #0]
    g_outm = m;
 80046ae:	4b08      	ldr	r3, [pc, #32]	; (80046d0 <oc_rep_new+0x2c>)
{
 80046b0:	4601      	mov	r1, r0
    g_outm = m;
 80046b2:	6018      	str	r0, [r3, #0]
    cbor_mbuf_writer_init(&g_buf_writer, m);
 80046b4:	4620      	mov	r0, r4
 80046b6:	f000 fdab 	bl	8005210 <cbor_mbuf_writer_init>
    cbor_encoder_init(&g_encoder, &g_buf_writer.enc, 0);
 80046ba:	462a      	mov	r2, r5
 80046bc:	4621      	mov	r1, r4
}
 80046be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    cbor_encoder_init(&g_encoder, &g_buf_writer.enc, 0);
 80046c2:	4804      	ldr	r0, [pc, #16]	; (80046d4 <oc_rep_new+0x30>)
 80046c4:	f000 bdac 	b.w	8005220 <cbor_encoder_init>
 80046c8:	200033a0 	.word	0x200033a0
 80046cc:	200033a4 	.word	0x200033a4
 80046d0:	20000850 	.word	0x20000850
 80046d4:	200033c0 	.word	0x200033c0

080046d8 <oc_rep_reset>:
}

void
oc_rep_reset(void)
{
    memset(&g_encoder, 0, sizeof(g_encoder));
 80046d8:	2210      	movs	r2, #16
 80046da:	2100      	movs	r1, #0
 80046dc:	4801      	ldr	r0, [pc, #4]	; (80046e4 <oc_rep_reset+0xc>)
 80046de:	f002 bcb4 	b.w	800704a <memset>
 80046e2:	bf00      	nop
 80046e4:	200033c0 	.word	0x200033c0

080046e8 <oc_rep_finalize>:
    int size = OS_MBUF_PKTLEN(g_outm);
 80046e8:	4b06      	ldr	r3, [pc, #24]	; (8004704 <oc_rep_finalize+0x1c>)
{
 80046ea:	b510      	push	{r4, lr}
    int size = OS_MBUF_PKTLEN(g_outm);
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	8a1c      	ldrh	r4, [r3, #16]
    oc_rep_reset();
 80046f0:	f7ff fff2 	bl	80046d8 <oc_rep_reset>
    if (g_err != CborNoError) {
 80046f4:	4b04      	ldr	r3, [pc, #16]	; (8004708 <oc_rep_finalize+0x20>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	2b00      	cmp	r3, #0
}
 80046fa:	bf0c      	ite	eq
 80046fc:	4620      	moveq	r0, r4
 80046fe:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8004702:	bd10      	pop	{r4, pc}
 8004704:	20000850 	.word	0x20000850
 8004708:	200033a0 	.word	0x200033a0

0800470c <oc_rep_init>:
  return (uint16_t)err;
}

void
oc_rep_init(void)
{
 800470c:	b507      	push	{r0, r1, r2, lr}
    os_mempool_init(&oc_rep_objects, EST_NUM_REP_OBJECTS,
 800470e:	4b05      	ldr	r3, [pc, #20]	; (8004724 <oc_rep_init+0x18>)
 8004710:	2218      	movs	r2, #24
 8004712:	9300      	str	r3, [sp, #0]
 8004714:	2102      	movs	r1, #2
 8004716:	4b04      	ldr	r3, [pc, #16]	; (8004728 <oc_rep_init+0x1c>)
 8004718:	4804      	ldr	r0, [pc, #16]	; (800472c <oc_rep_init+0x20>)
 800471a:	f001 fe7f 	bl	800641c <os_mempool_init>
                    sizeof(oc_rep_t), oc_rep_objects_area, "oc_rep_o");
}
 800471e:	b003      	add	sp, #12
 8004720:	f85d fb04 	ldr.w	pc, [sp], #4
 8004724:	0800dcb0 	.word	0x0800dcb0
 8004728:	20000870 	.word	0x20000870
 800472c:	20000854 	.word	0x20000854

08004730 <free_client_cb>:
}

#ifdef OC_CLIENT
static void
free_client_cb(oc_client_cb_t *cb)
{
 8004730:	b510      	push	{r4, lr}
 8004732:	4604      	mov	r4, r0
    os_callout_stop(&cb->callout);
 8004734:	3004      	adds	r0, #4
 8004736:	f001 fa5b 	bl	8005bf0 <os_callout_stop>
    oc_free_string(&cb->uri);
 800473a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800473e:	f000 fbb4 	bl	8004eaa <oc_free_string>
    SLIST_REMOVE(&oc_client_cbs, cb, oc_client_cb, next);
 8004742:	4a09      	ldr	r2, [pc, #36]	; (8004768 <free_client_cb+0x38>)
 8004744:	6813      	ldr	r3, [r2, #0]
 8004746:	42a3      	cmp	r3, r4
 8004748:	d108      	bne.n	800475c <free_client_cb+0x2c>
 800474a:	6823      	ldr	r3, [r4, #0]
 800474c:	6013      	str	r3, [r2, #0]
    os_memblock_put(&oc_client_cb_pool, cb);
 800474e:	4621      	mov	r1, r4
}
 8004750:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    os_memblock_put(&oc_client_cb_pool, cb);
 8004754:	4805      	ldr	r0, [pc, #20]	; (800476c <free_client_cb+0x3c>)
 8004756:	f001 be92 	b.w	800647e <os_memblock_put>
 800475a:	4613      	mov	r3, r2
    SLIST_REMOVE(&oc_client_cbs, cb, oc_client_cb, next);
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	42a2      	cmp	r2, r4
 8004760:	d1fb      	bne.n	800475a <free_client_cb+0x2a>
 8004762:	6822      	ldr	r2, [r4, #0]
 8004764:	601a      	str	r2, [r3, #0]
 8004766:	e7f2      	b.n	800474e <free_client_cb+0x1e>
 8004768:	20000984 	.word	0x20000984
 800476c:	20000968 	.word	0x20000968

08004770 <oc_ri_remove_cb>:
{
    struct oc_client_cb *cb;

    cb = ev->ev_arg;

    free_client_cb(cb);
 8004770:	6880      	ldr	r0, [r0, #8]
 8004772:	f7ff bfdd 	b.w	8004730 <free_client_cb>
	...

08004778 <oc_ri_mem_init>:
{
 8004778:	b507      	push	{r0, r1, r2, lr}
    os_mempool_init(&oc_client_cb_pool, MAX_NUM_CONCURRENT_REQUESTS,
 800477a:	4b07      	ldr	r3, [pc, #28]	; (8004798 <oc_ri_mem_init+0x20>)
 800477c:	2264      	movs	r2, #100	; 0x64
 800477e:	9300      	str	r3, [sp, #0]
 8004780:	2102      	movs	r1, #2
 8004782:	4b06      	ldr	r3, [pc, #24]	; (800479c <oc_ri_mem_init+0x24>)
 8004784:	4806      	ldr	r0, [pc, #24]	; (80047a0 <oc_ri_mem_init+0x28>)
 8004786:	f001 fe49 	bl	800641c <os_mempool_init>
    oc_rep_init();
 800478a:	f7ff ffbf 	bl	800470c <oc_rep_init>
}
 800478e:	b003      	add	sp, #12
 8004790:	f85d eb04 	ldr.w	lr, [sp], #4
    oc_buffer_init();
 8004794:	f7ff bf70 	b.w	8004678 <oc_buffer_init>
 8004798:	0800dcb9 	.word	0x0800dcb9
 800479c:	200008a0 	.word	0x200008a0
 80047a0:	20000968 	.word	0x20000968

080047a4 <oc_ri_remove_client_cb_by_mid>:
    SLIST_FOREACH(cb, &oc_client_cbs, next) {
 80047a4:	4b04      	ldr	r3, [pc, #16]	; (80047b8 <oc_ri_remove_client_cb_by_mid+0x14>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	b903      	cbnz	r3, 80047ac <oc_ri_remove_client_cb_by_mid+0x8>
 80047aa:	4770      	bx	lr
        if (cb->mid == mid) {
 80047ac:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 80047ae:	4282      	cmp	r2, r0
 80047b0:	d1f9      	bne.n	80047a6 <oc_ri_remove_client_cb_by_mid+0x2>
        free_client_cb(cb);
 80047b2:	4618      	mov	r0, r3
 80047b4:	f7ff bfbc 	b.w	8004730 <free_client_cb>
 80047b8:	20000984 	.word	0x20000984

080047bc <oc_ri_alloc_client_cb>:
}

oc_client_cb_t *
oc_ri_alloc_client_cb(const char *uri, oc_server_handle_t *server,
                      oc_method_t method, void *handler, oc_qos_t qos)
{
 80047bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047c0:	4680      	mov	r8, r0
    oc_client_cb_t *cb;

    cb = os_memblock_get(&oc_client_cb_pool);
 80047c2:	4824      	ldr	r0, [pc, #144]	; (8004854 <oc_ri_alloc_client_cb+0x98>)
{
 80047c4:	460d      	mov	r5, r1
 80047c6:	4617      	mov	r7, r2
 80047c8:	461e      	mov	r6, r3
    cb = os_memblock_get(&oc_client_cb_pool);
 80047ca:	f001 fe30 	bl	800642e <os_memblock_get>
    if (!cb) {
 80047ce:	4604      	mov	r4, r0
 80047d0:	b3b0      	cbz	r0, 8004840 <oc_ri_alloc_client_cb+0x84>
        return NULL;
    }
    cb->mid = coap_get_mid();
 80047d2:	f000 f8db 	bl	800498c <coap_get_mid>
    oc_new_string(&cb->uri, uri);
 80047d6:	4641      	mov	r1, r8
    cb->mid = coap_get_mid();
 80047d8:	86e0      	strh	r0, [r4, #54]	; 0x36
    oc_new_string(&cb->uri, uri);
 80047da:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80047de:	f000 fb4a 	bl	8004e76 <oc_new_string>
    cb->method = method;
    cb->qos = qos;
 80047e2:	f89d 3018 	ldrb.w	r3, [sp, #24]
    cb->handler = handler;
 80047e6:	6526      	str	r6, [r4, #80]	; 0x50
    cb->qos = qos;
 80047e8:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    cb->token_len = 8;
 80047ec:	2308      	movs	r3, #8
    int i = 0;
 80047ee:	2600      	movs	r6, #0
    cb->method = method;
 80047f0:	f884 7061 	strb.w	r7, [r4, #97]	; 0x61
    cb->token_len = 8;
 80047f4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    uint16_t r;
    while (i < cb->token_len) {
 80047f8:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 80047fc:	42b3      	cmp	r3, r6
 80047fe:	dc22      	bgt.n	8004846 <oc_ri_alloc_client_cb+0x8a>
        r = oc_random_rand();
        memcpy(cb->token + i, &r, sizeof(r));
        i += sizeof(r);
    }
    cb->discovery = false;
 8004800:	2300      	movs	r3, #0
 8004802:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
    cb->timestamp = oc_clock_time();
 8004806:	f000 fb2f 	bl	8004e68 <oc_clock_time>
    cb->observe_seq = -1;
 800480a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    memcpy(&cb->server, server, sizeof(oc_server_handle_t));
 800480e:	4629      	mov	r1, r5
    cb->observe_seq = -1;
 8004810:	65a3      	str	r3, [r4, #88]	; 0x58
    cb->timestamp = oc_clock_time();
 8004812:	65e0      	str	r0, [r4, #92]	; 0x5c
    memcpy(&cb->server, server, sizeof(oc_server_handle_t));
 8004814:	f104 0338 	add.w	r3, r4, #56	; 0x38
 8004818:	f105 0218 	add.w	r2, r5, #24
 800481c:	f851 0b04 	ldr.w	r0, [r1], #4
 8004820:	4291      	cmp	r1, r2
 8004822:	f843 0b04 	str.w	r0, [r3], #4
 8004826:	d1f9      	bne.n	800481c <oc_ri_alloc_client_cb+0x60>

    os_callout_init(&cb->callout, oc_evq_get(), oc_ri_remove_cb, cb);
 8004828:	f000 fab4 	bl	8004d94 <oc_evq_get>
 800482c:	4623      	mov	r3, r4
 800482e:	4a0a      	ldr	r2, [pc, #40]	; (8004858 <oc_ri_alloc_client_cb+0x9c>)
 8004830:	4601      	mov	r1, r0
 8004832:	1d20      	adds	r0, r4, #4
 8004834:	f001 f9ce 	bl	8005bd4 <os_callout_init>

    SLIST_INSERT_HEAD(&oc_client_cbs, cb, next);
 8004838:	4b08      	ldr	r3, [pc, #32]	; (800485c <oc_ri_alloc_client_cb+0xa0>)
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	601c      	str	r4, [r3, #0]
 800483e:	6022      	str	r2, [r4, #0]
    return cb;
}
 8004840:	4620      	mov	r0, r4
 8004842:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        r = oc_random_rand();
 8004846:	f000 fb11 	bl	8004e6c <oc_random_rand>
        memcpy(cb->token + i, &r, sizeof(r));
 800484a:	19a3      	adds	r3, r4, r6
 800484c:	8598      	strh	r0, [r3, #44]	; 0x2c
        i += sizeof(r);
 800484e:	3602      	adds	r6, #2
 8004850:	e7d2      	b.n	80047f8 <oc_ri_alloc_client_cb+0x3c>
 8004852:	bf00      	nop
 8004854:	20000968 	.word	0x20000968
 8004858:	08004771 	.word	0x08004771
 800485c:	20000984 	.word	0x20000984

08004860 <coap_append_opt_hdr>:
}
/*---------------------------------------------------------------------------*/
static uint8_t
coap_option_nibble(unsigned int value)
{
    if (value < 13) {
 8004860:	290c      	cmp	r1, #12
}
/*---------------------------------------------------------------------------*/

static int
coap_append_opt_hdr(struct os_mbuf *m, unsigned int delta, size_t length)
{
 8004862:	b513      	push	{r0, r1, r4, lr}
    if (value < 13) {
 8004864:	d82d      	bhi.n	80048c2 <coap_append_opt_hdr+0x62>
        return value;
 8004866:	b2cb      	uxtb	r3, r1
    uint8_t buffer[4];
    size_t written = 0;

    buffer[0] = coap_option_nibble(delta) << 4 | coap_option_nibble(length);
 8004868:	011b      	lsls	r3, r3, #4
    if (value < 13) {
 800486a:	2a0c      	cmp	r2, #12
    buffer[0] = coap_option_nibble(delta) << 4 | coap_option_nibble(length);
 800486c:	b25b      	sxtb	r3, r3
    if (value < 13) {
 800486e:	d82e      	bhi.n	80048ce <coap_append_opt_hdr+0x6e>
        return value;
 8004870:	b2d4      	uxtb	r4, r2
    buffer[0] = coap_option_nibble(delta) << 4 | coap_option_nibble(length);
 8004872:	4323      	orrs	r3, r4

    if (delta > 268) {
 8004874:	f5b1 7f86 	cmp.w	r1, #268	; 0x10c
    buffer[0] = coap_option_nibble(delta) << 4 | coap_option_nibble(length);
 8004878:	f88d 3004 	strb.w	r3, [sp, #4]
    if (delta > 268) {
 800487c:	d92d      	bls.n	80048da <coap_append_opt_hdr+0x7a>
        buffer[++written] = ((delta - 269) >> 8) & 0xff;
 800487e:	f46f 7486 	mvn.w	r4, #268	; 0x10c
 8004882:	190b      	adds	r3, r1, r4
 8004884:	0a1b      	lsrs	r3, r3, #8
 8004886:	f88d 3005 	strb.w	r3, [sp, #5]
        buffer[++written] = (delta - 269) & 0xff;
 800488a:	2302      	movs	r3, #2
 800488c:	390d      	subs	r1, #13
 800488e:	f88d 1006 	strb.w	r1, [sp, #6]
    } else if (delta > 12) {
        buffer[++written] = (delta - 13);
    }

    if (length > 268) {
 8004892:	f5b2 7f86 	cmp.w	r2, #268	; 0x10c
 8004896:	d928      	bls.n	80048ea <coap_append_opt_hdr+0x8a>
        buffer[++written] = ((length - 269) >> 8) & 0xff;
 8004898:	a902      	add	r1, sp, #8
 800489a:	18cc      	adds	r4, r1, r3
 800489c:	f46f 7186 	mvn.w	r1, #268	; 0x10c
 80048a0:	1851      	adds	r1, r2, r1
 80048a2:	0a09      	lsrs	r1, r1, #8
 80048a4:	f804 1c03 	strb.w	r1, [r4, #-3]
        buffer[++written] = (length - 269) & 0xff;
 80048a8:	3302      	adds	r3, #2
    } else if (length > 12) {
        buffer[++written] = (length - 13);
 80048aa:	a902      	add	r1, sp, #8
 80048ac:	4419      	add	r1, r3
 80048ae:	3a0d      	subs	r2, #13
 80048b0:	f801 2c04 	strb.w	r2, [r1, #-4]
    }

    return os_mbuf_append(m, buffer, written + 1);
 80048b4:	1c5a      	adds	r2, r3, #1
 80048b6:	b292      	uxth	r2, r2
 80048b8:	a901      	add	r1, sp, #4
 80048ba:	f001 fc4a 	bl	8006152 <os_mbuf_append>
}
 80048be:	b002      	add	sp, #8
 80048c0:	bd10      	pop	{r4, pc}
    } else if (value <= 0xFF + 13) {
 80048c2:	f5b1 7f86 	cmp.w	r1, #268	; 0x10c
        return 14;
 80048c6:	bf94      	ite	ls
 80048c8:	230d      	movls	r3, #13
 80048ca:	230e      	movhi	r3, #14
 80048cc:	e7cc      	b.n	8004868 <coap_append_opt_hdr+0x8>
    } else if (value <= 0xFF + 13) {
 80048ce:	f5b2 7f86 	cmp.w	r2, #268	; 0x10c
        return 14;
 80048d2:	bf94      	ite	ls
 80048d4:	240d      	movls	r4, #13
 80048d6:	240e      	movhi	r4, #14
 80048d8:	e7cb      	b.n	8004872 <coap_append_opt_hdr+0x12>
    } else if (delta > 12) {
 80048da:	290c      	cmp	r1, #12
        buffer[++written] = (delta - 13);
 80048dc:	bf83      	ittte	hi
 80048de:	390d      	subhi	r1, #13
 80048e0:	f88d 1005 	strbhi.w	r1, [sp, #5]
 80048e4:	2301      	movhi	r3, #1
    size_t written = 0;
 80048e6:	2300      	movls	r3, #0
 80048e8:	e7d3      	b.n	8004892 <coap_append_opt_hdr+0x32>
    } else if (length > 12) {
 80048ea:	2a0c      	cmp	r2, #12
 80048ec:	d9e2      	bls.n	80048b4 <coap_append_opt_hdr+0x54>
        buffer[++written] = (length - 13);
 80048ee:	3301      	adds	r3, #1
 80048f0:	e7db      	b.n	80048aa <coap_append_opt_hdr+0x4a>

080048f2 <coap_append_int_opt>:

/*---------------------------------------------------------------------------*/
static int
coap_append_int_opt(struct os_mbuf *m, unsigned int number,
                    unsigned int current_number, uint32_t value)
{
 80048f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048f6:	461c      	mov	r4, r3
    int rc;

    if (0xFF000000 & value) {
        ++i;
    }
    if (0xFFFF0000 & value) {
 80048f8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
    if (0xFF000000 & value) {
 80048fc:	f013 437f 	ands.w	r3, r3, #4278190080	; 0xff000000
    if (0xFFFF0000 & value) {
 8004900:	ea4f 4a0a 	mov.w	sl, sl, lsl #16
{
 8004904:	4680      	mov	r8, r0
 8004906:	b085      	sub	sp, #20
 8004908:	4610      	mov	r0, r2
    if (0xFF000000 & value) {
 800490a:	bf14      	ite	ne
 800490c:	2701      	movne	r7, #1
 800490e:	2700      	moveq	r7, #0
    if (0xFFFF0000 & value) {
 8004910:	f1ba 0f00 	cmp.w	sl, #0
 8004914:	d027      	beq.n	8004966 <coap_append_int_opt+0x74>
        ++i;
 8004916:	1c7d      	adds	r5, r7, #1
    }
    if (0xFFFFFF00 & value) {
 8004918:	f034 0bff 	bics.w	fp, r4, #255	; 0xff
 800491c:	d025      	beq.n	800496a <coap_append_int_opt+0x78>
        ++i;
 800491e:	1c6e      	adds	r6, r5, #1
    }
    if (0xFFFFFFFF & value) {
        ++i;
 8004920:	f106 0901 	add.w	r9, r6, #1
    }
    OC_LOG(DEBUG, "OPTION %u (delta %u, len %zu)\n",
                 number, number - current_number, i);

    rc = coap_append_opt_hdr(m, number - current_number, i);
 8004924:	1a09      	subs	r1, r1, r0
 8004926:	464a      	mov	r2, r9
 8004928:	4640      	mov	r0, r8
 800492a:	9301      	str	r3, [sp, #4]
 800492c:	f7ff ff98 	bl	8004860 <coap_append_opt_hdr>
    if (rc) {
 8004930:	bb40      	cbnz	r0, 8004984 <coap_append_int_opt+0x92>
        return rc;
    }

    i = 0;
    if (0xFF000000 & value) {
 8004932:	9b01      	ldr	r3, [sp, #4]
 8004934:	b113      	cbz	r3, 800493c <coap_append_int_opt+0x4a>
        buffer[i++] = (uint8_t)(value >> 24);
 8004936:	0e23      	lsrs	r3, r4, #24
 8004938:	f88d 300c 	strb.w	r3, [sp, #12]
    }
    if (0xFFFF0000 & value) {
 800493c:	f1ba 0f00 	cmp.w	sl, #0
 8004940:	d004      	beq.n	800494c <coap_append_int_opt+0x5a>
        buffer[i++] = (uint8_t)(value >> 16);
 8004942:	ab04      	add	r3, sp, #16
 8004944:	441f      	add	r7, r3
 8004946:	0c23      	lsrs	r3, r4, #16
 8004948:	f807 3c04 	strb.w	r3, [r7, #-4]
    }
    if (0xFFFFFF00 & value) {
 800494c:	f1bb 0f00 	cmp.w	fp, #0
 8004950:	d010      	beq.n	8004974 <coap_append_int_opt+0x82>
        buffer[i++] = (uint8_t)(value >> 8);
 8004952:	ab04      	add	r3, sp, #16
 8004954:	441d      	add	r5, r3
 8004956:	0a23      	lsrs	r3, r4, #8
 8004958:	f805 3c04 	strb.w	r3, [r5, #-4]
    }
    if (0xFFFFFFFF & value) {
        buffer[i++] = (uint8_t)(value);
 800495c:	ab04      	add	r3, sp, #16
 800495e:	441e      	add	r6, r3
 8004960:	f806 4c04 	strb.w	r4, [r6, #-4]
 8004964:	e008      	b.n	8004978 <coap_append_int_opt+0x86>
    size_t i = 0;
 8004966:	463d      	mov	r5, r7
 8004968:	e7d6      	b.n	8004918 <coap_append_int_opt+0x26>
 800496a:	462e      	mov	r6, r5
    if (0xFFFFFFFF & value) {
 800496c:	2c00      	cmp	r4, #0
 800496e:	d1d7      	bne.n	8004920 <coap_append_int_opt+0x2e>
 8004970:	46a9      	mov	r9, r5
 8004972:	e7d7      	b.n	8004924 <coap_append_int_opt+0x32>
    if (0xFFFFFFFF & value) {
 8004974:	2c00      	cmp	r4, #0
 8004976:	d1f1      	bne.n	800495c <coap_append_int_opt+0x6a>
    }
    return os_mbuf_append(m, buffer, i);
 8004978:	fa1f f289 	uxth.w	r2, r9
 800497c:	a903      	add	r1, sp, #12
 800497e:	4640      	mov	r0, r8
 8004980:	f001 fbe7 	bl	8006152 <os_mbuf_append>
}
 8004984:	b005      	add	sp, #20
 8004986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800498c <coap_get_mid>:
}
/*---------------------------------------------------------------------------*/
uint16_t
coap_get_mid(void)
{
    return ++current_mid;
 800498c:	4b02      	ldr	r3, [pc, #8]	; (8004998 <coap_get_mid+0xc>)
 800498e:	8818      	ldrh	r0, [r3, #0]
 8004990:	3001      	adds	r0, #1
 8004992:	b280      	uxth	r0, r0
 8004994:	8018      	strh	r0, [r3, #0]
}
 8004996:	4770      	bx	lr
 8004998:	20000988 	.word	0x20000988

0800499c <coap_init_message>:
/*---------------------------------------------------------------------------*/
void
coap_init_message(coap_packet_t *pkt, coap_message_type_t type,
                  uint8_t code, uint16_t mid)
{
 800499c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800499e:	4604      	mov	r4, r0
 80049a0:	460f      	mov	r7, r1
 80049a2:	4616      	mov	r6, r2
 80049a4:	461d      	mov	r5, r3
    /* Important thing */
    memset(pkt, 0, sizeof(coap_packet_t));
 80049a6:	226c      	movs	r2, #108	; 0x6c
 80049a8:	2100      	movs	r1, #0
 80049aa:	f002 fb4e 	bl	800704a <memset>

    pkt->type = type;
 80049ae:	7067      	strb	r7, [r4, #1]
    pkt->code = code;
 80049b0:	70a6      	strb	r6, [r4, #2]
    pkt->mid = mid;
 80049b2:	80a5      	strh	r5, [r4, #4]
}
 80049b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080049b8 <coap_serialize_message>:
    uint32_t u32;
    int tcp_hdr;
    int len, data_len;

    /* Initialize */
    pkt->version = 1;
 80049b8:	2301      	movs	r3, #1
{
 80049ba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    pkt->version = 1;
 80049be:	7003      	strb	r3, [r0, #0]
 * Whether transport uses TCP-style headers or not.
 */
static inline int
oc_endpoint_use_tcp(struct oc_endpoint *oe)
{
    return oc_transports[oe->ep.oe_type]->ot_flags & OC_TRANSPORT_USE_TCP;
 80049c0:	7e0b      	ldrb	r3, [r1, #24]
 80049c2:	4abb      	ldr	r2, [pc, #748]	; (8004cb0 <coap_serialize_message+0x2f8>)
 80049c4:	f003 0307 	and.w	r3, r3, #7
 80049c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
{
 80049cc:	460d      	mov	r5, r1
 80049ce:	f893 9000 	ldrb.w	r9, [r3]

    /*
     * Move data pointer, leave enough space to insert coap header and
     * token before options.
     */
    m->om_data += (sizeof(struct coap_tcp_hdr32) + pkt->token_len);
 80049d2:	7983      	ldrb	r3, [r0, #6]
{
 80049d4:	4604      	mov	r4, r0
    m->om_data += (sizeof(struct coap_tcp_hdr32) + pkt->token_len);
 80049d6:	1d9a      	adds	r2, r3, #6
 80049d8:	680b      	ldr	r3, [r1, #0]
 80049da:	4413      	add	r3, r2
 80049dc:	600b      	str	r3, [r1, #0]
    COAP_SERIALIZE_BYTE_OPT(pkt, m, COAP_OPTION_ETAG, etag, "ETag");
    COAP_SERIALIZE_INT_OPT(pkt, m, COAP_OPTION_IF_NONE_MATCH,
        content_format - pkt-> content_format /* hack to get a zero field */,
                           "If-None-Match");
#endif
    COAP_SERIALIZE_INT_OPT(pkt, m, COAP_OPTION_OBSERVE, observe, "Observe");
 80049de:	7bc1      	ldrb	r1, [r0, #15]
 80049e0:	f011 0140 	ands.w	r1, r1, #64	; 0x40
 80049e4:	d009      	beq.n	80049fa <coap_serialize_message+0x42>
 80049e6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80049e8:	2200      	movs	r2, #0
 80049ea:	2106      	movs	r1, #6
 80049ec:	4628      	mov	r0, r5
 80049ee:	f7ff ff80 	bl	80048f2 <coap_append_int_opt>
 80049f2:	2800      	cmp	r0, #0
 80049f4:	f040 80f4 	bne.w	8004be0 <coap_serialize_message+0x228>
 80049f8:	2106      	movs	r1, #6
    COAP_SERIALIZE_INT_OPT(pkt, m, COAP_OPTION_URI_PORT, uri_port,
                              "Uri-Port");
    COAP_SERIALIZE_STRING_OPT(pkt, m, COAP_OPTION_LOCATION_PATH,
                              location_path, '/', "Location-Path");
#endif
    COAP_SERIALIZE_STRING_OPT(pkt, m, COAP_OPTION_URI_PATH, uri_path, '/',
 80049fa:	7c23      	ldrb	r3, [r4, #16]
 80049fc:	0718      	lsls	r0, r3, #28
 80049fe:	d50a      	bpl.n	8004a16 <coap_serialize_message+0x5e>
 8004a00:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
        for (j = 0; j <= length + 1; ++j) {
 8004a02:	2600      	movs	r6, #0
    uint8_t *part_start = array;
 8004a04:	463b      	mov	r3, r7
    COAP_SERIALIZE_STRING_OPT(pkt, m, COAP_OPTION_URI_PATH, uri_path, '/',
 8004a06:	f8b4 a02a 	ldrh.w	sl, [r4, #42]	; 0x2a
        for (j = 0; j <= length + 1; ++j) {
 8004a0a:	f10a 0b01 	add.w	fp, sl, #1
 8004a0e:	455e      	cmp	r6, fp
 8004a10:	f240 80a2 	bls.w	8004b58 <coap_serialize_message+0x1a0>
    COAP_SERIALIZE_STRING_OPT(pkt, m, COAP_OPTION_URI_PATH, uri_path, '/',
 8004a14:	210b      	movs	r1, #11
                              "Uri-Path");

    COAP_SERIALIZE_INT_OPT(pkt, m, COAP_OPTION_CONTENT_FORMAT, content_format,
 8004a16:	7c23      	ldrb	r3, [r4, #16]
 8004a18:	06da      	lsls	r2, r3, #27
 8004a1a:	d509      	bpl.n	8004a30 <coap_serialize_message+0x78>
 8004a1c:	460a      	mov	r2, r1
 8004a1e:	8b23      	ldrh	r3, [r4, #24]
 8004a20:	210c      	movs	r1, #12
 8004a22:	4628      	mov	r0, r5
 8004a24:	f7ff ff65 	bl	80048f2 <coap_append_int_opt>
 8004a28:	2800      	cmp	r0, #0
 8004a2a:	f040 80d9 	bne.w	8004be0 <coap_serialize_message+0x228>
 8004a2e:	210c      	movs	r1, #12
                           "Content-Format");
#if 0
    COAP_SERIALIZE_INT_OPT(pkt, m, COAP_OPTION_MAX_AGE, max_age, "Max-Age");
#endif
    COAP_SERIALIZE_STRING_OPT(pkt, m, COAP_OPTION_URI_QUERY, uri_query, '&',
 8004a30:	f994 3010 	ldrsb.w	r3, [r4, #16]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	da0a      	bge.n	8004a4e <coap_serialize_message+0x96>
 8004a38:	6de7      	ldr	r7, [r4, #92]	; 0x5c
        for (j = 0; j <= length + 1; ++j) {
 8004a3a:	2600      	movs	r6, #0
    uint8_t *part_start = array;
 8004a3c:	463b      	mov	r3, r7
    COAP_SERIALIZE_STRING_OPT(pkt, m, COAP_OPTION_URI_QUERY, uri_query, '&',
 8004a3e:	f8b4 a058 	ldrh.w	sl, [r4, #88]	; 0x58
        for (j = 0; j <= length + 1; ++j) {
 8004a42:	f10a 0b01 	add.w	fp, sl, #1
 8004a46:	455e      	cmp	r6, fp
 8004a48:	f240 80a4 	bls.w	8004b94 <coap_serialize_message+0x1dc>
    COAP_SERIALIZE_STRING_OPT(pkt, m, COAP_OPTION_URI_QUERY, uri_query, '&',
 8004a4c:	210f      	movs	r1, #15
                              "Uri-Query");
    COAP_SERIALIZE_INT_OPT(pkt, m, COAP_OPTION_ACCEPT, accept, "Accept");
 8004a4e:	7c63      	ldrb	r3, [r4, #17]
 8004a50:	079b      	lsls	r3, r3, #30
 8004a52:	d509      	bpl.n	8004a68 <coap_serialize_message+0xb0>
 8004a54:	460a      	mov	r2, r1
 8004a56:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8004a58:	2111      	movs	r1, #17
 8004a5a:	4628      	mov	r0, r5
 8004a5c:	f7ff ff49 	bl	80048f2 <coap_append_int_opt>
 8004a60:	2800      	cmp	r0, #0
 8004a62:	f040 80bd 	bne.w	8004be0 <coap_serialize_message+0x228>
 8004a66:	2111      	movs	r1, #17
#if 0
    COAP_SERIALIZE_STRING_OPT(pkt, m, COAP_OPTION_LOCATION_QUERY,
                              location_query, '&', "Location-Query");
#endif
    COAP_SERIALIZE_BLOCK_OPT(pkt, m, COAP_OPTION_BLOCK2, block2, "Block2");
 8004a68:	f994 3011 	ldrsb.w	r3, [r4, #17]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	da1a      	bge.n	8004aa6 <coap_serialize_message+0xee>
 8004a70:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004a72:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8004a76:	0112      	lsls	r2, r2, #4
 8004a78:	b10b      	cbz	r3, 8004a7e <coap_serialize_message+0xc6>
 8004a7a:	f042 0208 	orr.w	r2, r2, #8
 8004a7e:	2600      	movs	r6, #0
 8004a80:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
 8004a82:	0900      	lsrs	r0, r0, #4
    } while (value);
 8004a84:	0840      	lsrs	r0, r0, #1
 8004a86:	b2b3      	uxth	r3, r6
 8004a88:	f106 0601 	add.w	r6, r6, #1
 8004a8c:	d1fa      	bne.n	8004a84 <coap_serialize_message+0xcc>
    COAP_SERIALIZE_BLOCK_OPT(pkt, m, COAP_OPTION_BLOCK2, block2, "Block2");
 8004a8e:	f003 030f 	and.w	r3, r3, #15
 8004a92:	4313      	orrs	r3, r2
 8004a94:	4628      	mov	r0, r5
 8004a96:	460a      	mov	r2, r1
 8004a98:	2117      	movs	r1, #23
 8004a9a:	f7ff ff2a 	bl	80048f2 <coap_append_int_opt>
 8004a9e:	2800      	cmp	r0, #0
 8004aa0:	f040 809e 	bne.w	8004be0 <coap_serialize_message+0x228>
 8004aa4:	2117      	movs	r1, #23
    COAP_SERIALIZE_BLOCK_OPT(pkt, m, COAP_OPTION_BLOCK1, block1, "Block1");
 8004aa6:	7ca3      	ldrb	r3, [r4, #18]
 8004aa8:	071f      	lsls	r7, r3, #28
 8004aaa:	d51a      	bpl.n	8004ae2 <coap_serialize_message+0x12a>
 8004aac:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004aae:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8004ab2:	0112      	lsls	r2, r2, #4
 8004ab4:	b10b      	cbz	r3, 8004aba <coap_serialize_message+0x102>
 8004ab6:	f042 0208 	orr.w	r2, r2, #8
 8004aba:	2600      	movs	r6, #0
 8004abc:	f8b4 004a 	ldrh.w	r0, [r4, #74]	; 0x4a
 8004ac0:	0900      	lsrs	r0, r0, #4
    } while (value);
 8004ac2:	0840      	lsrs	r0, r0, #1
 8004ac4:	b2b3      	uxth	r3, r6
 8004ac6:	f106 0601 	add.w	r6, r6, #1
 8004aca:	d1fa      	bne.n	8004ac2 <coap_serialize_message+0x10a>
    COAP_SERIALIZE_BLOCK_OPT(pkt, m, COAP_OPTION_BLOCK1, block1, "Block1");
 8004acc:	f003 030f 	and.w	r3, r3, #15
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	4628      	mov	r0, r5
 8004ad4:	460a      	mov	r2, r1
 8004ad6:	211b      	movs	r1, #27
 8004ad8:	f7ff ff0b 	bl	80048f2 <coap_append_int_opt>
 8004adc:	2800      	cmp	r0, #0
 8004ade:	d17f      	bne.n	8004be0 <coap_serialize_message+0x228>
 8004ae0:	211b      	movs	r1, #27
    COAP_SERIALIZE_INT_OPT(pkt, m, COAP_OPTION_SIZE2, size2, "Size2");
 8004ae2:	7ca3      	ldrb	r3, [r4, #18]
 8004ae4:	06de      	lsls	r6, r3, #27
 8004ae6:	d508      	bpl.n	8004afa <coap_serialize_message+0x142>
 8004ae8:	460a      	mov	r2, r1
 8004aea:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004aec:	211c      	movs	r1, #28
 8004aee:	4628      	mov	r0, r5
 8004af0:	f7ff feff 	bl	80048f2 <coap_append_int_opt>
 8004af4:	2800      	cmp	r0, #0
 8004af6:	d173      	bne.n	8004be0 <coap_serialize_message+0x228>
 8004af8:	211c      	movs	r1, #28
    COAP_SERIALIZE_STRING_OPT(pkt, m, COAP_OPTION_PROXY_URI, proxy_uri, '\0',
                              "Proxy-Uri");
    COAP_SERIALIZE_STRING_OPT(pkt, m, COAP_OPTION_PROXY_SCHEME, proxy_scheme,
                              '\0', "Proxy-Scheme");
#endif
    COAP_SERIALIZE_INT_OPT(pkt, m, COAP_OPTION_SIZE1, size1, "Size1");
 8004afa:	7da3      	ldrb	r3, [r4, #22]
 8004afc:	06d8      	lsls	r0, r3, #27
 8004afe:	d467      	bmi.n	8004bd0 <coap_serialize_message+0x218>

    /* Payload marker */
    if (pkt->payload_len) {
 8004b00:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8004b04:	b133      	cbz	r3, 8004b14 <coap_serialize_message+0x15c>
        if (os_mbuf_append(m, "\xff", 1)) {
 8004b06:	2201      	movs	r2, #1
 8004b08:	496a      	ldr	r1, [pc, #424]	; (8004cb4 <coap_serialize_message+0x2fc>)
 8004b0a:	4628      	mov	r0, r5
 8004b0c:	f001 fb21 	bl	8006152 <os_mbuf_append>
 8004b10:	2800      	cmp	r0, #0
 8004b12:	d165      	bne.n	8004be0 <coap_serialize_message+0x228>
    data_len = OS_MBUF_PKTLEN(m) + pkt->payload_len;

    /*
     * Set header fields, aka CoAP header alignment nightmare.
     */
    if (!tcp_hdr) {
 8004b14:	f019 0f01 	tst.w	r9, #1
 8004b18:	79a1      	ldrb	r1, [r4, #6]
 8004b1a:	f104 0707 	add.w	r7, r4, #7
 8004b1e:	d166      	bne.n	8004bee <coap_serialize_message+0x236>
        len = sizeof(struct coap_udp_hdr) + pkt->token_len;
        os_mbuf_prepend(m, len);
 8004b20:	3104      	adds	r1, #4
 8004b22:	4628      	mov	r0, r5
 8004b24:	f001 fbe5 	bl	80062f2 <os_mbuf_prepend>
        cuh = (struct coap_udp_hdr *)m->om_data;
 8004b28:	6828      	ldr	r0, [r5, #0]
        cuh->version = pkt->version;
 8004b2a:	7822      	ldrb	r2, [r4, #0]
 8004b2c:	7803      	ldrb	r3, [r0, #0]
 8004b2e:	f362 1387 	bfi	r3, r2, #6, #2
        cuh->type = pkt->type;
 8004b32:	7862      	ldrb	r2, [r4, #1]
 8004b34:	f362 1305 	bfi	r3, r2, #4, #2
 8004b38:	7003      	strb	r3, [r0, #0]
        cuh->token_len = pkt->token_len;
 8004b3a:	79a2      	ldrb	r2, [r4, #6]
 8004b3c:	f362 0303 	bfi	r3, r2, #0, #4
 8004b40:	7003      	strb	r3, [r0, #0]
        cuh->code = pkt->code;
 8004b42:	78a3      	ldrb	r3, [r4, #2]
 8004b44:	7043      	strb	r3, [r0, #1]
        u16 = htons(pkt->mid);
 8004b46:	88a2      	ldrh	r2, [r4, #4]
 8004b48:	0213      	lsls	r3, r2, #8
 8004b4a:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
        memcpy(&cuh->id, &u16, sizeof(u16));
 8004b4e:	8043      	strh	r3, [r0, #2]
            cth16->type = COAP_TCP_TYPE16;
            cth16->token_len = pkt->token_len;
            u16 = htons(data_len - COAP_TCP_LENGTH16_OFF);
            memcpy(&cth16->data_len, &u16, sizeof(u16));
            cth16->code = pkt->code;
            memcpy(cth16 + 1, pkt->token, pkt->token_len);
 8004b50:	79a2      	ldrb	r2, [r4, #6]
 8004b52:	4639      	mov	r1, r7
 8004b54:	3004      	adds	r0, #4
 8004b56:	e065      	b.n	8004c24 <coap_serialize_message+0x26c>
            if (array[j] == split_char || j == length) {
 8004b58:	5dba      	ldrb	r2, [r7, r6]
 8004b5a:	eb07 0806 	add.w	r8, r7, r6
 8004b5e:	2a2f      	cmp	r2, #47	; 0x2f
 8004b60:	d001      	beq.n	8004b66 <coap_serialize_message+0x1ae>
 8004b62:	45b2      	cmp	sl, r6
 8004b64:	d114      	bne.n	8004b90 <coap_serialize_message+0x1d8>
                blk = part_end - part_start;
 8004b66:	eba8 0803 	sub.w	r8, r8, r3
                rc = coap_append_opt_hdr(m, number - current_number, blk);
 8004b6a:	4642      	mov	r2, r8
 8004b6c:	f1c1 010b 	rsb	r1, r1, #11
 8004b70:	4628      	mov	r0, r5
                blk = part_end - part_start;
 8004b72:	9301      	str	r3, [sp, #4]
                rc = coap_append_opt_hdr(m, number - current_number, blk);
 8004b74:	f7ff fe74 	bl	8004860 <coap_append_opt_hdr>
                if (rc) {
 8004b78:	bb90      	cbnz	r0, 8004be0 <coap_serialize_message+0x228>
                rc = os_mbuf_append(m, part_start, blk);
 8004b7a:	9b01      	ldr	r3, [sp, #4]
 8004b7c:	fa1f f288 	uxth.w	r2, r8
 8004b80:	4619      	mov	r1, r3
 8004b82:	4628      	mov	r0, r5
 8004b84:	f001 fae5 	bl	8006152 <os_mbuf_append>
                if (rc) {
 8004b88:	bb50      	cbnz	r0, 8004be0 <coap_serialize_message+0x228>
                current_number = number;
 8004b8a:	210b      	movs	r1, #11
                ++j; /* skip the splitter */
 8004b8c:	3601      	adds	r6, #1
                part_start = array + j;
 8004b8e:	19bb      	adds	r3, r7, r6
        for (j = 0; j <= length + 1; ++j) {
 8004b90:	3601      	adds	r6, #1
 8004b92:	e73c      	b.n	8004a0e <coap_serialize_message+0x56>
            if (array[j] == split_char || j == length) {
 8004b94:	5dba      	ldrb	r2, [r7, r6]
 8004b96:	eb07 0806 	add.w	r8, r7, r6
 8004b9a:	2a26      	cmp	r2, #38	; 0x26
 8004b9c:	d001      	beq.n	8004ba2 <coap_serialize_message+0x1ea>
 8004b9e:	45b2      	cmp	sl, r6
 8004ba0:	d114      	bne.n	8004bcc <coap_serialize_message+0x214>
                blk = part_end - part_start;
 8004ba2:	eba8 0803 	sub.w	r8, r8, r3
                rc = coap_append_opt_hdr(m, number - current_number, blk);
 8004ba6:	4642      	mov	r2, r8
 8004ba8:	f1c1 010f 	rsb	r1, r1, #15
 8004bac:	4628      	mov	r0, r5
                blk = part_end - part_start;
 8004bae:	9301      	str	r3, [sp, #4]
                rc = coap_append_opt_hdr(m, number - current_number, blk);
 8004bb0:	f7ff fe56 	bl	8004860 <coap_append_opt_hdr>
                if (rc) {
 8004bb4:	b9a0      	cbnz	r0, 8004be0 <coap_serialize_message+0x228>
                rc = os_mbuf_append(m, part_start, blk);
 8004bb6:	9b01      	ldr	r3, [sp, #4]
 8004bb8:	fa1f f288 	uxth.w	r2, r8
 8004bbc:	4619      	mov	r1, r3
 8004bbe:	4628      	mov	r0, r5
 8004bc0:	f001 fac7 	bl	8006152 <os_mbuf_append>
                if (rc) {
 8004bc4:	b960      	cbnz	r0, 8004be0 <coap_serialize_message+0x228>
                current_number = number;
 8004bc6:	210f      	movs	r1, #15
                ++j; /* skip the splitter */
 8004bc8:	3601      	adds	r6, #1
                part_start = array + j;
 8004bca:	19bb      	adds	r3, r7, r6
        for (j = 0; j <= length + 1; ++j) {
 8004bcc:	3601      	adds	r6, #1
 8004bce:	e73a      	b.n	8004a46 <coap_serialize_message+0x8e>
    COAP_SERIALIZE_INT_OPT(pkt, m, COAP_OPTION_SIZE1, size1, "Size1");
 8004bd0:	460a      	mov	r2, r1
 8004bd2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004bd4:	213c      	movs	r1, #60	; 0x3c
 8004bd6:	4628      	mov	r0, r5
 8004bd8:	f7ff fe8b 	bl	80048f2 <coap_append_int_opt>
 8004bdc:	2800      	cmp	r0, #0
 8004bde:	d08f      	beq.n	8004b00 <coap_serialize_message+0x148>
        OS_MBUF_PKTLEN(m), OS_MBUF_PKTLEN(m) - pkt->payload_len,
        pkt->payload_len);

    return 0;
err_mem:
    if (pkt->payload_m) {
 8004be0:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8004be2:	b108      	cbz	r0, 8004be8 <coap_serialize_message+0x230>
        os_mbuf_free_chain(pkt->payload_m);
 8004be4:	f001 fa9f 	bl	8006126 <os_mbuf_free_chain>
    }
    STATS_INC(coap_stats, oerr);
    return -1;
 8004be8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004bec:	e090      	b.n	8004d10 <coap_serialize_message+0x358>
    data_len = OS_MBUF_PKTLEN(m) + pkt->payload_len;
 8004bee:	8a2e      	ldrh	r6, [r5, #16]
 8004bf0:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8004bf4:	441e      	add	r6, r3
        if (data_len < 13) {
 8004bf6:	2e0c      	cmp	r6, #12
 8004bf8:	dc24      	bgt.n	8004c44 <coap_serialize_message+0x28c>
            os_mbuf_prepend(m, len);
 8004bfa:	3102      	adds	r1, #2
 8004bfc:	4628      	mov	r0, r5
 8004bfe:	f001 fb78 	bl	80062f2 <os_mbuf_prepend>
            memcpy(cth0 + 1, pkt->token, pkt->token_len);
 8004c02:	4639      	mov	r1, r7
            cth0 = (struct coap_tcp_hdr0 *)m->om_data;
 8004c04:	6828      	ldr	r0, [r5, #0]
            cth0->data_len = data_len;
 8004c06:	7803      	ldrb	r3, [r0, #0]
            memcpy(cth0 + 1, pkt->token, pkt->token_len);
 8004c08:	3002      	adds	r0, #2
            cth0->data_len = data_len;
 8004c0a:	f366 1307 	bfi	r3, r6, #4, #4
 8004c0e:	f800 3c02 	strb.w	r3, [r0, #-2]
            cth0->token_len = pkt->token_len;
 8004c12:	79a2      	ldrb	r2, [r4, #6]
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	f362 0303 	bfi	r3, r2, #0, #4
 8004c1a:	f800 3c02 	strb.w	r3, [r0, #-2]
            cth0->code = pkt->code;
 8004c1e:	78a3      	ldrb	r3, [r4, #2]
 8004c20:	f800 3c01 	strb.w	r3, [r0, #-1]
            memcpy(cth32 + 1, pkt->token, pkt->token_len);
 8004c24:	f002 fa04 	bl	8007030 <memcpy>
    if (pkt->payload_m) {
 8004c28:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8004c2a:	2800      	cmp	r0, #0
 8004c2c:	d070      	beq.n	8004d10 <coap_serialize_message+0x358>
        assert(pkt->payload_len <= OS_MBUF_PKTLEN(pkt->payload_m));
 8004c2e:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8004c32:	8a01      	ldrh	r1, [r0, #16]
 8004c34:	428b      	cmp	r3, r1
 8004c36:	d962      	bls.n	8004cfe <coap_serialize_message+0x346>
 8004c38:	2300      	movs	r3, #0
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	4619      	mov	r1, r3
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f000 fe68 	bl	8005914 <__assert_func>
        } else if (data_len < 269) {
 8004c44:	f5b6 7f86 	cmp.w	r6, #268	; 0x10c
 8004c48:	dc16      	bgt.n	8004c78 <coap_serialize_message+0x2c0>
            os_mbuf_prepend(m, len);
 8004c4a:	3103      	adds	r1, #3
 8004c4c:	4628      	mov	r0, r5
 8004c4e:	f001 fb50 	bl	80062f2 <os_mbuf_prepend>
            cth8->type = COAP_TCP_TYPE8;
 8004c52:	220d      	movs	r2, #13
            cth8 = (struct coap_tcp_hdr8 *)m->om_data;
 8004c54:	6828      	ldr	r0, [r5, #0]
            cth8->data_len = data_len - COAP_TCP_LENGTH8_OFF;
 8004c56:	3e0d      	subs	r6, #13
            cth8->type = COAP_TCP_TYPE8;
 8004c58:	7803      	ldrb	r3, [r0, #0]
            memcpy(cth8 + 1, pkt->token, pkt->token_len);
 8004c5a:	4639      	mov	r1, r7
            cth8->type = COAP_TCP_TYPE8;
 8004c5c:	f362 1307 	bfi	r3, r2, #4, #4
 8004c60:	7003      	strb	r3, [r0, #0]
            cth8->token_len = pkt->token_len;
 8004c62:	79a2      	ldrb	r2, [r4, #6]
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	f362 0303 	bfi	r3, r2, #0, #4
 8004c6a:	7003      	strb	r3, [r0, #0]
            cth8->data_len = data_len - COAP_TCP_LENGTH8_OFF;
 8004c6c:	7046      	strb	r6, [r0, #1]
            cth8->code = pkt->code;
 8004c6e:	78a3      	ldrb	r3, [r4, #2]
            memcpy(cth8 + 1, pkt->token, pkt->token_len);
 8004c70:	3003      	adds	r0, #3
            cth8->code = pkt->code;
 8004c72:	f800 3c01 	strb.w	r3, [r0, #-1]
 8004c76:	e7d5      	b.n	8004c24 <coap_serialize_message+0x26c>
        } else if (data_len < 65805) {
 8004c78:	4b0f      	ldr	r3, [pc, #60]	; (8004cb8 <coap_serialize_message+0x300>)
 8004c7a:	429e      	cmp	r6, r3
 8004c7c:	dc1e      	bgt.n	8004cbc <coap_serialize_message+0x304>
            os_mbuf_prepend(m, len);
 8004c7e:	3104      	adds	r1, #4
 8004c80:	4628      	mov	r0, r5
 8004c82:	f001 fb36 	bl	80062f2 <os_mbuf_prepend>
            cth16->type = COAP_TCP_TYPE16;
 8004c86:	220e      	movs	r2, #14
            cth16 = (struct coap_tcp_hdr16 *)m->om_data;
 8004c88:	6828      	ldr	r0, [r5, #0]
            cth16->type = COAP_TCP_TYPE16;
 8004c8a:	7803      	ldrb	r3, [r0, #0]
 8004c8c:	f362 1307 	bfi	r3, r2, #4, #4
 8004c90:	7003      	strb	r3, [r0, #0]
            cth16->token_len = pkt->token_len;
 8004c92:	79a2      	ldrb	r2, [r4, #6]
 8004c94:	f362 0303 	bfi	r3, r2, #0, #4
            u16 = htons(data_len - COAP_TCP_LENGTH16_OFF);
 8004c98:	f46f 7286 	mvn.w	r2, #268	; 0x10c
 8004c9c:	4416      	add	r6, r2
            cth16->token_len = pkt->token_len;
 8004c9e:	7003      	strb	r3, [r0, #0]
            u16 = htons(data_len - COAP_TCP_LENGTH16_OFF);
 8004ca0:	0233      	lsls	r3, r6, #8
 8004ca2:	ea43 2626 	orr.w	r6, r3, r6, asr #8
            memcpy(&cth16->data_len, &u16, sizeof(u16));
 8004ca6:	f8a0 6001 	strh.w	r6, [r0, #1]
            cth16->code = pkt->code;
 8004caa:	78a3      	ldrb	r3, [r4, #2]
 8004cac:	70c3      	strb	r3, [r0, #3]
 8004cae:	e74f      	b.n	8004b50 <coap_serialize_message+0x198>
 8004cb0:	200033d0 	.word	0x200033d0
 8004cb4:	0800dcc3 	.word	0x0800dcc3
 8004cb8:	0001010c 	.word	0x0001010c
            os_mbuf_prepend(m, len);
 8004cbc:	3106      	adds	r1, #6
 8004cbe:	4628      	mov	r0, r5
 8004cc0:	f001 fb17 	bl	80062f2 <os_mbuf_prepend>
            cth32 = (struct coap_tcp_hdr32 *)m->om_data;
 8004cc4:	6828      	ldr	r0, [r5, #0]
            u32 = htonl(data_len - COAP_TCP_LENGTH32_OFF);
 8004cc6:	f5a6 3680 	sub.w	r6, r6, #65536	; 0x10000
            cth32->type = COAP_TCP_TYPE32;
 8004cca:	7803      	ldrb	r3, [r0, #0]
            memcpy(cth32 + 1, pkt->token, pkt->token_len);
 8004ccc:	4639      	mov	r1, r7
            cth32->type = COAP_TCP_TYPE32;
 8004cce:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8004cd2:	7003      	strb	r3, [r0, #0]
            cth32->token_len = pkt->token_len;
 8004cd4:	79a2      	ldrb	r2, [r4, #6]
            memcpy(cth32 + 1, pkt->token, pkt->token_len);
 8004cd6:	3006      	adds	r0, #6
            cth32->token_len = pkt->token_len;
 8004cd8:	f362 0303 	bfi	r3, r2, #0, #4
 8004cdc:	f800 3c06 	strb.w	r3, [r0, #-6]
            u32 = htonl(data_len - COAP_TCP_LENGTH32_OFF);
 8004ce0:	f46f 7386 	mvn.w	r3, #268	; 0x10c
 8004ce4:	441e      	add	r6, r3
 8004ce6:	0233      	lsls	r3, r6, #8
 8004ce8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004cec:	ea43 6606 	orr.w	r6, r3, r6, lsl #24
            memcpy(&cth32->data_len, &u32, sizeof(u32));
 8004cf0:	f840 6c05 	str.w	r6, [r0, #-5]
            cth32->code = pkt->code;
 8004cf4:	78a3      	ldrb	r3, [r4, #2]
 8004cf6:	f800 3c01 	strb.w	r3, [r0, #-1]
            memcpy(cth32 + 1, pkt->token, pkt->token_len);
 8004cfa:	79a2      	ldrb	r2, [r4, #6]
 8004cfc:	e792      	b.n	8004c24 <coap_serialize_message+0x26c>
        if (pkt->payload_len < OS_MBUF_PKTLEN(pkt->payload_m)) {
 8004cfe:	d202      	bcs.n	8004d06 <coap_serialize_message+0x34e>
            os_mbuf_adj(pkt->payload_m,
 8004d00:	1ac9      	subs	r1, r1, r3
 8004d02:	f001 faab 	bl	800625c <os_mbuf_adj>
        os_mbuf_concat(m, pkt->payload_m);
 8004d06:	4628      	mov	r0, r5
 8004d08:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8004d0a:	f001 fb34 	bl	8006376 <os_mbuf_concat>
    return 0;
 8004d0e:	2000      	movs	r0, #0
}
 8004d10:	b003      	add	sp, #12
 8004d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d16:	bf00      	nop

08004d18 <coap_send_message>:
/*---------------------------------------------------------------------------*/
void
coap_send_message(struct os_mbuf *m, int dup)
{
 8004d18:	b508      	push	{r3, lr}
 8004d1a:	4603      	mov	r3, r0
    OC_LOG(INFO, "coap_send_message(): (%u) %s\n", OS_MBUF_PKTLEN(m),
      dup ? "dup" : "");

    STATS_INC(coap_stats, oframe);

    if (dup) {
 8004d1c:	b119      	cbz	r1, 8004d26 <coap_send_message+0xe>
        m = os_mbuf_dup(m);
 8004d1e:	f001 fa64 	bl	80061ea <os_mbuf_dup>
        if (!m) {
 8004d22:	4603      	mov	r3, r0
 8004d24:	b120      	cbz	r0, 8004d30 <coap_send_message+0x18>
            STATS_INC(coap_stats, oerr);
            return;
        }
    }
    oc_send_message(m);
 8004d26:	4618      	mov	r0, r3
}
 8004d28:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    oc_send_message(m);
 8004d2c:	f7ff bc90 	b.w	8004650 <oc_send_message>
}
 8004d30:	bd08      	pop	{r3, pc}

08004d32 <coap_set_token>:
}
/*---------------------------------------------------------------------------*/
int
coap_set_token(coap_packet_t *pkt, const uint8_t *token, size_t token_len)
{
    pkt->token_len = MIN(COAP_TOKEN_LEN, token_len);
 8004d32:	2a08      	cmp	r2, #8
 8004d34:	bf28      	it	cs
 8004d36:	2208      	movcs	r2, #8
{
 8004d38:	b510      	push	{r4, lr}
    pkt->token_len = MIN(COAP_TOKEN_LEN, token_len);
 8004d3a:	4614      	mov	r4, r2
 8004d3c:	7182      	strb	r2, [r0, #6]
    memcpy(pkt->token, token, pkt->token_len);
 8004d3e:	3007      	adds	r0, #7
 8004d40:	f002 f976 	bl	8007030 <memcpy>

    return pkt->token_len;
}
 8004d44:	4620      	mov	r0, r4
 8004d46:	bd10      	pop	{r4, pc}

08004d48 <coap_set_header_content_format>:
#endif
int
coap_set_header_content_format(coap_packet_t *pkt, unsigned int format)
{
    pkt->content_format = format;
    SET_OPTION(pkt, COAP_OPTION_CONTENT_FORMAT);
 8004d48:	7c03      	ldrb	r3, [r0, #16]
    pkt->content_format = format;
 8004d4a:	8301      	strh	r1, [r0, #24]
    SET_OPTION(pkt, COAP_OPTION_CONTENT_FORMAT);
 8004d4c:	f043 0310 	orr.w	r3, r3, #16
 8004d50:	7403      	strb	r3, [r0, #16]
    return 1;
}
 8004d52:	2001      	movs	r0, #1
 8004d54:	4770      	bx	lr

08004d56 <coap_set_header_accept>:
#ifdef OC_CLIENT
int
coap_set_header_accept(coap_packet_t *pkt, unsigned int accept)
{
    pkt->accept = accept;
    SET_OPTION(pkt, COAP_OPTION_ACCEPT);
 8004d56:	7c43      	ldrb	r3, [r0, #17]
    pkt->accept = accept;
 8004d58:	8681      	strh	r1, [r0, #52]	; 0x34
    SET_OPTION(pkt, COAP_OPTION_ACCEPT);
 8004d5a:	f043 0302 	orr.w	r3, r3, #2
 8004d5e:	7443      	strb	r3, [r0, #17]
    return 1;
}
 8004d60:	2001      	movs	r0, #1
 8004d62:	4770      	bx	lr

08004d64 <coap_set_header_uri_path>:
    return maxlen;
}
#ifdef OC_CLIENT
int
coap_set_header_uri_path(coap_packet_t *pkt, const char *path)
{
 8004d64:	b510      	push	{r4, lr}
 8004d66:	4604      	mov	r4, r0
 8004d68:	4608      	mov	r0, r1
    while (path[0] == '/') {
 8004d6a:	7803      	ldrb	r3, [r0, #0]
 8004d6c:	3101      	adds	r1, #1
 8004d6e:	2b2f      	cmp	r3, #47	; 0x2f
 8004d70:	d0fa      	beq.n	8004d68 <coap_set_header_uri_path+0x4>
        ++path;
    }
    pkt->uri_path = (char *)path;
 8004d72:	62e0      	str	r0, [r4, #44]	; 0x2c
    pkt->uri_path_len = strlen(path);
 8004d74:	f002 f992 	bl	800709c <strlen>

    SET_OPTION(pkt, COAP_OPTION_URI_PATH);
 8004d78:	7c23      	ldrb	r3, [r4, #16]
    pkt->uri_path_len = strlen(path);
 8004d7a:	8560      	strh	r0, [r4, #42]	; 0x2a
    SET_OPTION(pkt, COAP_OPTION_URI_PATH);
 8004d7c:	f043 0308 	orr.w	r3, r3, #8
 8004d80:	7423      	strb	r3, [r4, #16]
    return pkt->uri_path_len;
}
 8004d82:	b280      	uxth	r0, r0
 8004d84:	bd10      	pop	{r4, pc}

08004d86 <coap_set_header_observe>:

int
coap_set_header_observe(coap_packet_t *pkt, uint32_t observe)
{
    pkt->observe = observe;
    SET_OPTION(pkt, COAP_OPTION_OBSERVE);
 8004d86:	7bc3      	ldrb	r3, [r0, #15]
    pkt->observe = observe;
 8004d88:	6301      	str	r1, [r0, #48]	; 0x30
    SET_OPTION(pkt, COAP_OPTION_OBSERVE);
 8004d8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d8e:	73c3      	strb	r3, [r0, #15]
    return 1;
}
 8004d90:	2001      	movs	r0, #1
 8004d92:	4770      	bx	lr

08004d94 <oc_evq_get>:

struct os_eventq *
oc_evq_get(void)
{
    return oc_evq;
}
 8004d94:	4b01      	ldr	r3, [pc, #4]	; (8004d9c <oc_evq_get+0x8>)
 8004d96:	6818      	ldr	r0, [r3, #0]
 8004d98:	4770      	bx	lr
 8004d9a:	bf00      	nop
 8004d9c:	2000098c 	.word	0x2000098c

08004da0 <oc_transport_register>:

int8_t
oc_transport_register(const struct oc_transport *ot)
{
    int i;
    int first = -1;
 8004da0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff

    for (i = 0; i < OC_TRANSPORT_MAX; i++) {
 8004da4:	2200      	movs	r2, #0
{
 8004da6:	b530      	push	{r4, r5, lr}
        if (oc_transports[i] == ot) {
 8004da8:	4909      	ldr	r1, [pc, #36]	; (8004dd0 <oc_transport_register+0x30>)
 8004daa:	f851 4022 	ldr.w	r4, [r1, r2, lsl #2]
 8004dae:	0095      	lsls	r5, r2, #2
 8004db0:	4284      	cmp	r4, r0
 8004db2:	d009      	beq.n	8004dc8 <oc_transport_register+0x28>
            return -1;
        }
        if (oc_transports[i] == NULL && first < 0) {
 8004db4:	b91c      	cbnz	r4, 8004dbe <oc_transport_register+0x1e>
 8004db6:	1c5c      	adds	r4, r3, #1
            oc_transports[i] = ot;
 8004db8:	bf04      	itt	eq
 8004dba:	4613      	moveq	r3, r2
 8004dbc:	5068      	streq	r0, [r5, r1]
    for (i = 0; i < OC_TRANSPORT_MAX; i++) {
 8004dbe:	3201      	adds	r2, #1
 8004dc0:	2a08      	cmp	r2, #8
 8004dc2:	d1f2      	bne.n	8004daa <oc_transport_register+0xa>
            first = i;
        }
    }
    return first;
 8004dc4:	b258      	sxtb	r0, r3
}
 8004dc6:	bd30      	pop	{r4, r5, pc}
            return -1;
 8004dc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004dcc:	e7fb      	b.n	8004dc6 <oc_transport_register+0x26>
 8004dce:	bf00      	nop
 8004dd0:	200033d0 	.word	0x200033d0

08004dd4 <oc_send_buffer>:
    struct oc_endpoint *oe;
    const struct oc_transport *ot;

    oe = OC_MBUF_ENDPOINT(m);

    ot = oc_transports[oe->ep.oe_type];
 8004dd4:	7e03      	ldrb	r3, [r0, #24]
 8004dd6:	4a05      	ldr	r2, [pc, #20]	; (8004dec <oc_send_buffer+0x18>)
 8004dd8:	f003 0307 	and.w	r3, r3, #7
 8004ddc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    if (ot) {
 8004de0:	b10b      	cbz	r3, 8004de6 <oc_send_buffer+0x12>
        ot->ot_tx_ucast(m);
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	4718      	bx	r3
    } else {
        OC_LOG(ERROR, "Unknown transport option %u\n", oe->ep.oe_type);
        os_mbuf_free_chain(m);
 8004de6:	f001 b99e 	b.w	8006126 <os_mbuf_free_chain>
 8004dea:	bf00      	nop
 8004dec:	200033d0 	.word	0x200033d0

08004df0 <oc_send_multicast_message>:
/*
 * Send on all the transports.
 */
void
oc_send_multicast_message(struct os_mbuf *m)
{
 8004df0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    const struct oc_transport *ot;
    const struct oc_transport *prev = NULL;
    struct os_mbuf *n;
    int i;

    for (i = 0; i < OC_TRANSPORT_MAX; i++) {
 8004df4:	2500      	movs	r5, #0
{
 8004df6:	4606      	mov	r6, r0
    const struct oc_transport *prev = NULL;
 8004df8:	462c      	mov	r4, r5
        if (!oc_transports[i]) {
 8004dfa:	f8df 9040 	ldr.w	r9, [pc, #64]	; 8004e3c <oc_send_multicast_message+0x4c>
 8004dfe:	f859 7025 	ldr.w	r7, [r9, r5, lsl #2]
 8004e02:	b16f      	cbz	r7, 8004e20 <oc_send_multicast_message+0x30>
            continue;
        }

        ot = oc_transports[i];
        if (prev) {
 8004e04:	b15c      	cbz	r4, 8004e1e <oc_send_multicast_message+0x2e>
            n = os_mbuf_dup(m);
 8004e06:	4630      	mov	r0, r6
 8004e08:	f001 f9ef 	bl	80061ea <os_mbuf_dup>
 8004e0c:	4680      	mov	r8, r0
            prev->ot_tx_mcast(m);
 8004e0e:	6923      	ldr	r3, [r4, #16]
 8004e10:	4630      	mov	r0, r6
 8004e12:	4798      	blx	r3
            if (!n) {
 8004e14:	f1b8 0f00 	cmp.w	r8, #0
 8004e18:	d10c      	bne.n	8004e34 <oc_send_multicast_message+0x44>
        prev = ot;
    }
    if (prev) {
        prev->ot_tx_mcast(m);
    }
}
 8004e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e1e:	463c      	mov	r4, r7
    for (i = 0; i < OC_TRANSPORT_MAX; i++) {
 8004e20:	3501      	adds	r5, #1
 8004e22:	2d08      	cmp	r5, #8
 8004e24:	d1eb      	bne.n	8004dfe <oc_send_multicast_message+0xe>
    if (prev) {
 8004e26:	2c00      	cmp	r4, #0
 8004e28:	d0f7      	beq.n	8004e1a <oc_send_multicast_message+0x2a>
        prev->ot_tx_mcast(m);
 8004e2a:	6923      	ldr	r3, [r4, #16]
 8004e2c:	4630      	mov	r0, r6
}
 8004e2e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        prev->ot_tx_mcast(m);
 8004e32:	4718      	bx	r3
 8004e34:	463c      	mov	r4, r7
 8004e36:	4646      	mov	r6, r8
 8004e38:	e7f2      	b.n	8004e20 <oc_send_multicast_message+0x30>
 8004e3a:	bf00      	nop
 8004e3c:	200033d0 	.word	0x200033d0

08004e40 <oc_init>:
    return rc;
}

void
oc_init(void)
{
 8004e40:	b508      	push	{r3, lr}
    SYSINIT_ASSERT_ACTIVE();
 8004e42:	4b07      	ldr	r3, [pc, #28]	; (8004e60 <oc_init+0x20>)
 8004e44:	781b      	ldrb	r3, [r3, #0]
 8004e46:	b923      	cbnz	r3, 8004e52 <oc_init+0x12>
 8004e48:	461a      	mov	r2, r3
 8004e4a:	4619      	mov	r1, r3
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f000 fd61 	bl	8005914 <__assert_func>
    oc_ri_mem_init();
 8004e52:	f7ff fc91 	bl	8004778 <oc_ri_mem_init>
    oc_evq_set(os_eventq_dflt_get());
 8004e56:	f001 f8c3 	bl	8005fe0 <os_eventq_dflt_get>
    oc_evq = evq;
 8004e5a:	4b02      	ldr	r3, [pc, #8]	; (8004e64 <oc_init+0x24>)
 8004e5c:	6018      	str	r0, [r3, #0]
}
 8004e5e:	bd08      	pop	{r3, pc}
 8004e60:	200033f0 	.word	0x200033f0
 8004e64:	2000098c 	.word	0x2000098c

08004e68 <oc_clock_time>:
{
    /* in mynewt clock is initialized elsewhere */
}
oc_clock_time_t oc_clock_time(void)
{
    return os_time_get();
 8004e68:	f001 bf12 	b.w	8006c90 <os_time_get>

08004e6c <oc_random_rand>:
{
    srand(seed);
}

unsigned short oc_random_rand(void)
{
 8004e6c:	b508      	push	{r3, lr}
}

#define RAND_MAX 0x7fffffff
__extern_inline int rand(void)
{
	return (int)lrand48();
 8004e6e:	f001 ffeb 	bl	8006e48 <lrand48>
    return rand();
}
 8004e72:	b280      	uxth	r0, r0
 8004e74:	bd08      	pop	{r3, pc}

08004e76 <oc_new_string>:
#include "oic/port/mynewt/config.h"
#include "oic/oc_helpers.h"

void
oc_new_string(oc_string_t *os, const char str[])
{
 8004e76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e7a:	4607      	mov	r7, r0
    int len = strlen(str);
 8004e7c:	4608      	mov	r0, r1
{
 8004e7e:	460e      	mov	r6, r1
    int len = strlen(str);
 8004e80:	f002 f90c 	bl	800709c <strlen>

    os->os_str = malloc(len + 1);
 8004e84:	f100 0801 	add.w	r8, r0, #1
    int len = strlen(str);
 8004e88:	4604      	mov	r4, r0
    os->os_str = malloc(len + 1);
 8004e8a:	4640      	mov	r0, r8
 8004e8c:	f002 f84a 	bl	8006f24 <malloc>
 8004e90:	4605      	mov	r5, r0
 8004e92:	6078      	str	r0, [r7, #4]
    if (os->os_str) {
 8004e94:	b138      	cbz	r0, 8004ea6 <oc_new_string+0x30>
        os->os_sz = len + 1;
 8004e96:	f8a7 8000 	strh.w	r8, [r7]
        memcpy(os->os_str, str, len);
 8004e9a:	4622      	mov	r2, r4
 8004e9c:	4631      	mov	r1, r6
 8004e9e:	f002 f8c7 	bl	8007030 <memcpy>
        os->os_str[len] = '\0';
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	552b      	strb	r3, [r5, r4]
    }
}
 8004ea6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004eaa <oc_free_string>:
    }
}

void
oc_free_string(oc_string_t *os)
{
 8004eaa:	b510      	push	{r4, lr}
 8004eac:	4604      	mov	r4, r0
    free(os->os_str);
 8004eae:	6840      	ldr	r0, [r0, #4]
 8004eb0:	f002 f884 	bl	8006fbc <free>
    os->os_sz = 0;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	8023      	strh	r3, [r4, #0]
}
 8004eb8:	bd10      	pop	{r4, pc}

08004eba <sysinit_dflt_panic_cb>:
#include "os/mynewt.h"

static void
sysinit_dflt_panic_cb(const char *file, int line, const char *func,
                      const char *expr, const char *msg)
{
 8004eba:	b508      	push	{r3, lr}
    if (msg != NULL) {
        fprintf(stderr, "sysinit failure: %s\n", msg);
    }
#endif

    __assert_func(file, line, func, expr);
 8004ebc:	f000 fd2a 	bl	8005914 <__assert_func>

08004ec0 <sysinit_start>:
}

void
sysinit_start(void)
{
    sysinit_active = 1;
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	4b01      	ldr	r3, [pc, #4]	; (8004ec8 <sysinit_start+0x8>)
 8004ec4:	701a      	strb	r2, [r3, #0]
}
 8004ec6:	4770      	bx	lr
 8004ec8:	200033f0 	.word	0x200033f0

08004ecc <sysinit_end>:

void
sysinit_end(void)
{
    sysinit_active = 0;
 8004ecc:	2200      	movs	r2, #0
 8004ece:	4b01      	ldr	r3, [pc, #4]	; (8004ed4 <sysinit_end+0x8>)
 8004ed0:	701a      	strb	r2, [r3, #0]
}
 8004ed2:	4770      	bx	lr
 8004ed4:	200033f0 	.word	0x200033f0

08004ed8 <__wrap_coap_receive>:
}

///////////////////////////////////////////////////////////////////////////////
//  Other Functions

int __wrap_coap_receive(/* struct os_mbuf **mp */) {
 8004ed8:	b508      	push	{r3, lr}
    //  We override the default coap_receive() with an empty function so that we will 
    //  NOT link in any modules for receiving and parsing CoAP requests, to save ROM space.
    //  We only need to transmit CoAP requests.  The overriding is done via the Linker Flag
    //  "-Wl,-wrap,coap_receive" in apps/my_sensor_app/pkg.yml
    console_printf("coap_receive NOT IMPLEMENTED\n");
 8004eda:	4803      	ldr	r0, [pc, #12]	; (8004ee8 <__wrap_coap_receive+0x10>)
 8004edc:	f7fe ff66 	bl	8003dac <console_printf>
    return -1;
}
 8004ee0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ee4:	bd08      	pop	{r3, pc}
 8004ee6:	bf00      	nop
 8004ee8:	0800dcc5 	.word	0x0800dcc5

08004eec <_fini>:
//  Other Functions

//  Dummy destructor for global C++ objects, since our program never terminates.  
//  From https://arobenko.gitbooks.io/bare_metal_cpp/content/compiler_output/static.html.
void* __dso_handle = NULL;
void _fini(void) { }
 8004eec:	4770      	bx	lr
	...

08004ef0 <json_encode_object_start>:
    (__e)->je_write((__e)->je_arg, "]", sizeof("]")-1);


int
json_encode_object_start(struct json_encoder *encoder)
{
 8004ef0:	b510      	push	{r4, lr}
 8004ef2:	4604      	mov	r4, r0
 8004ef4:	e9d0 3000 	ldrd	r3, r0, [r0]
    if (encoder->je_wr_commas) {
 8004ef8:	7a22      	ldrb	r2, [r4, #8]
 8004efa:	07d2      	lsls	r2, r2, #31
 8004efc:	d506      	bpl.n	8004f0c <json_encode_object_start+0x1c>
        encoder->je_write(encoder->je_arg, ",", sizeof(",")-1);
 8004efe:	2201      	movs	r2, #1
 8004f00:	4908      	ldr	r1, [pc, #32]	; (8004f24 <json_encode_object_start+0x34>)
 8004f02:	4798      	blx	r3
        encoder->je_wr_commas = 0;
 8004f04:	7a23      	ldrb	r3, [r4, #8]
 8004f06:	f36f 0300 	bfc	r3, #0, #1
 8004f0a:	7223      	strb	r3, [r4, #8]
    }
    JSON_ENCODE_OBJECT_START(encoder);
 8004f0c:	6823      	ldr	r3, [r4, #0]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	4905      	ldr	r1, [pc, #20]	; (8004f28 <json_encode_object_start+0x38>)
 8004f12:	6860      	ldr	r0, [r4, #4]
 8004f14:	4798      	blx	r3
    encoder->je_wr_commas = 0;
 8004f16:	7a23      	ldrb	r3, [r4, #8]

    return (0);
}
 8004f18:	2000      	movs	r0, #0
    encoder->je_wr_commas = 0;
 8004f1a:	f36f 0300 	bfc	r3, #0, #1
 8004f1e:	7223      	strb	r3, [r4, #8]
}
 8004f20:	bd10      	pop	{r4, pc}
 8004f22:	bf00      	nop
 8004f24:	0800e175 	.word	0x0800e175
 8004f28:	0800dce9 	.word	0x0800dce9

08004f2c <json_encode_object_key>:
    return (rc);
}

int
json_encode_object_key(struct json_encoder *encoder, char *key)
{
 8004f2c:	b538      	push	{r3, r4, r5, lr}
 8004f2e:	4604      	mov	r4, r0
 8004f30:	e9d0 3000 	ldrd	r3, r0, [r0]
    if (encoder->je_wr_commas) {
 8004f34:	7a22      	ldrb	r2, [r4, #8]
{
 8004f36:	460d      	mov	r5, r1
    if (encoder->je_wr_commas) {
 8004f38:	07d2      	lsls	r2, r2, #31
 8004f3a:	d506      	bpl.n	8004f4a <json_encode_object_key+0x1e>
        encoder->je_write(encoder->je_arg, ",", sizeof(",")-1);
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	490d      	ldr	r1, [pc, #52]	; (8004f74 <json_encode_object_key+0x48>)
 8004f40:	4798      	blx	r3
        encoder->je_wr_commas = 0;
 8004f42:	7a23      	ldrb	r3, [r4, #8]
 8004f44:	f36f 0300 	bfc	r3, #0, #1
 8004f48:	7223      	strb	r3, [r4, #8]
    }

    /* Write the key entry */
    encoder->je_write(encoder->je_arg, "\"", sizeof("\"")-1);
 8004f4a:	6823      	ldr	r3, [r4, #0]
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	490a      	ldr	r1, [pc, #40]	; (8004f78 <json_encode_object_key+0x4c>)
 8004f50:	6860      	ldr	r0, [r4, #4]
 8004f52:	4798      	blx	r3
    encoder->je_write(encoder->je_arg, key, strlen(key));
 8004f54:	4628      	mov	r0, r5
 8004f56:	f002 f8a1 	bl	800709c <strlen>
 8004f5a:	6823      	ldr	r3, [r4, #0]
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	4629      	mov	r1, r5
 8004f60:	6860      	ldr	r0, [r4, #4]
 8004f62:	4798      	blx	r3
    encoder->je_write(encoder->je_arg, "\": ", sizeof("\": ")-1);
 8004f64:	6823      	ldr	r3, [r4, #0]
 8004f66:	2203      	movs	r2, #3
 8004f68:	4904      	ldr	r1, [pc, #16]	; (8004f7c <json_encode_object_key+0x50>)
 8004f6a:	6860      	ldr	r0, [r4, #4]
 8004f6c:	4798      	blx	r3

    return (0);
}
 8004f6e:	2000      	movs	r0, #0
 8004f70:	bd38      	pop	{r3, r4, r5, pc}
 8004f72:	bf00      	nop
 8004f74:	0800e175 	.word	0x0800e175
 8004f78:	0800dce3 	.word	0x0800dce3
 8004f7c:	0800dce5 	.word	0x0800dce5

08004f80 <json_encode_object_entry>:

int
json_encode_object_entry(struct json_encoder *encoder, char *key,
        struct json_value *val)
{
 8004f80:	b570      	push	{r4, r5, r6, lr}
 8004f82:	4604      	mov	r4, r0
 8004f84:	e9d0 3000 	ldrd	r3, r0, [r0]
 8004f88:	4616      	mov	r6, r2
    int rc;

    if (encoder->je_wr_commas) {
 8004f8a:	7a22      	ldrb	r2, [r4, #8]
{
 8004f8c:	460d      	mov	r5, r1
    if (encoder->je_wr_commas) {
 8004f8e:	07d2      	lsls	r2, r2, #31
 8004f90:	d506      	bpl.n	8004fa0 <json_encode_object_entry+0x20>
        encoder->je_write(encoder->je_arg, ",", sizeof(",")-1);
 8004f92:	2201      	movs	r2, #1
 8004f94:	4910      	ldr	r1, [pc, #64]	; (8004fd8 <json_encode_object_entry+0x58>)
 8004f96:	4798      	blx	r3
        encoder->je_wr_commas = 0;
 8004f98:	7a23      	ldrb	r3, [r4, #8]
 8004f9a:	f36f 0300 	bfc	r3, #0, #1
 8004f9e:	7223      	strb	r3, [r4, #8]
    }
    /* Write the key entry */
    encoder->je_write(encoder->je_arg, "\"", sizeof("\"")-1);
 8004fa0:	6823      	ldr	r3, [r4, #0]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	490d      	ldr	r1, [pc, #52]	; (8004fdc <json_encode_object_entry+0x5c>)
 8004fa6:	6860      	ldr	r0, [r4, #4]
 8004fa8:	4798      	blx	r3
    encoder->je_write(encoder->je_arg, key, strlen(key));
 8004faa:	4628      	mov	r0, r5
 8004fac:	f002 f876 	bl	800709c <strlen>
 8004fb0:	6823      	ldr	r3, [r4, #0]
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	4629      	mov	r1, r5
 8004fb6:	6860      	ldr	r0, [r4, #4]
 8004fb8:	4798      	blx	r3
    encoder->je_write(encoder->je_arg, "\": ", sizeof("\": ")-1);
 8004fba:	4909      	ldr	r1, [pc, #36]	; (8004fe0 <json_encode_object_entry+0x60>)
 8004fbc:	6823      	ldr	r3, [r4, #0]
 8004fbe:	2203      	movs	r2, #3
 8004fc0:	6860      	ldr	r0, [r4, #4]
 8004fc2:	4798      	blx	r3

    rc = json_encode_value(encoder, val);
 8004fc4:	4631      	mov	r1, r6
 8004fc6:	4620      	mov	r0, r4
 8004fc8:	f000 f80c 	bl	8004fe4 <json_encode_value>
    if (rc != 0) {
 8004fcc:	b918      	cbnz	r0, 8004fd6 <json_encode_object_entry+0x56>
        goto err;
    }
    encoder->je_wr_commas = 1;
 8004fce:	7a23      	ldrb	r3, [r4, #8]
 8004fd0:	f043 0301 	orr.w	r3, r3, #1
 8004fd4:	7223      	strb	r3, [r4, #8]

    return (0);
err:
    return (rc);
}
 8004fd6:	bd70      	pop	{r4, r5, r6, pc}
 8004fd8:	0800e175 	.word	0x0800e175
 8004fdc:	0800dce3 	.word	0x0800dce3
 8004fe0:	0800dce5 	.word	0x0800dce5

08004fe4 <json_encode_value>:
{
 8004fe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    switch (jv->jv_type) {
 8004fe8:	784b      	ldrb	r3, [r1, #1]
{
 8004fea:	4604      	mov	r4, r0
 8004fec:	460d      	mov	r5, r1
    switch (jv->jv_type) {
 8004fee:	2b05      	cmp	r3, #5
 8004ff0:	f200 80a8 	bhi.w	8005144 <json_encode_value+0x160>
 8004ff4:	e8df f003 	tbb	[pc, r3]
 8004ff8:	241e1503 	.word	0x241e1503
 8004ffc:	8c6b      	.short	0x8c6b
            len = sprintf(encoder->je_encode_buf, "%s",
 8004ffe:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8005002:	4313      	orrs	r3, r2
 8005004:	4b51      	ldr	r3, [pc, #324]	; (800514c <json_encode_value+0x168>)
 8005006:	f100 0609 	add.w	r6, r0, #9
 800500a:	4a51      	ldr	r2, [pc, #324]	; (8005150 <json_encode_value+0x16c>)
 800500c:	4951      	ldr	r1, [pc, #324]	; (8005154 <json_encode_value+0x170>)
 800500e:	bf18      	it	ne
 8005010:	461a      	movne	r2, r3
 8005012:	4630      	mov	r0, r6
 8005014:	f002 f821 	bl	800705a <sprintf>
            encoder->je_write(encoder->je_arg, encoder->je_encode_buf, len);
 8005018:	4602      	mov	r2, r0
 800501a:	4631      	mov	r1, r6
 800501c:	6823      	ldr	r3, [r4, #0]
            JSON_ENCODE_OBJECT_END(encoder);
 800501e:	6860      	ldr	r0, [r4, #4]
 8005020:	e020      	b.n	8005064 <json_encode_value+0x80>
            len = sprintf(encoder->je_encode_buf, "%llu",
 8005022:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8005026:	494c      	ldr	r1, [pc, #304]	; (8005158 <json_encode_value+0x174>)
 8005028:	f100 0609 	add.w	r6, r0, #9
 800502c:	4630      	mov	r0, r6
 800502e:	f002 f814 	bl	800705a <sprintf>
 8005032:	e7f1      	b.n	8005018 <json_encode_value+0x34>
            len = sprintf(encoder->je_encode_buf, "%lld",
 8005034:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8005038:	f100 0609 	add.w	r6, r0, #9
 800503c:	4947      	ldr	r1, [pc, #284]	; (800515c <json_encode_value+0x178>)
 800503e:	e7f5      	b.n	800502c <json_encode_value+0x48>
            encoder->je_write(encoder->je_arg, "\"", sizeof("\"")-1);
 8005040:	6803      	ldr	r3, [r0, #0]
 8005042:	2201      	movs	r2, #1
 8005044:	4946      	ldr	r1, [pc, #280]	; (8005160 <json_encode_value+0x17c>)
 8005046:	6840      	ldr	r0, [r0, #4]
 8005048:	4798      	blx	r3
            for (i = 0; i < jv->jv_len; i++) {
 800504a:	2600      	movs	r6, #0
                        encoder->je_write(encoder->je_arg, "\\f",
 800504c:	4f45      	ldr	r7, [pc, #276]	; (8005164 <json_encode_value+0x180>)
                        encoder->je_write(encoder->je_arg, "\\",
 800504e:	f8df 8138 	ldr.w	r8, [pc, #312]	; 8005188 <json_encode_value+0x1a4>
                        encoder->je_write(encoder->je_arg, "\\r",
 8005052:	f8df 9138 	ldr.w	r9, [pc, #312]	; 800518c <json_encode_value+0x1a8>
            for (i = 0; i < jv->jv_len; i++) {
 8005056:	886a      	ldrh	r2, [r5, #2]
 8005058:	e9d4 3000 	ldrd	r3, r0, [r4]
 800505c:	42b2      	cmp	r2, r6
 800505e:	dc05      	bgt.n	800506c <json_encode_value+0x88>
            encoder->je_write(encoder->je_arg, "\"", sizeof("\"")-1);
 8005060:	2201      	movs	r2, #1
 8005062:	493f      	ldr	r1, [pc, #252]	; (8005160 <json_encode_value+0x17c>)
            JSON_ENCODE_OBJECT_END(encoder);
 8005064:	4798      	blx	r3
    return (0);
 8005066:	2000      	movs	r0, #0
}
 8005068:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                switch (jv->jv_val.str[i]) {
 800506c:	68aa      	ldr	r2, [r5, #8]
 800506e:	1991      	adds	r1, r2, r6
 8005070:	5d92      	ldrb	r2, [r2, r6]
 8005072:	2a0c      	cmp	r2, #12
 8005074:	d028      	beq.n	80050c8 <json_encode_value+0xe4>
 8005076:	d808      	bhi.n	800508a <json_encode_value+0xa6>
 8005078:	2a09      	cmp	r2, #9
 800507a:	d01c      	beq.n	80050b6 <json_encode_value+0xd2>
 800507c:	2a0a      	cmp	r2, #10
 800507e:	d020      	beq.n	80050c2 <json_encode_value+0xde>
 8005080:	2a08      	cmp	r2, #8
 8005082:	d107      	bne.n	8005094 <json_encode_value+0xb0>
                        encoder->je_write(encoder->je_arg, "\\b",
 8005084:	2202      	movs	r2, #2
 8005086:	4938      	ldr	r1, [pc, #224]	; (8005168 <json_encode_value+0x184>)
 8005088:	e012      	b.n	80050b0 <json_encode_value+0xcc>
                switch (jv->jv_val.str[i]) {
 800508a:	2a22      	cmp	r2, #34	; 0x22
 800508c:	d008      	beq.n	80050a0 <json_encode_value+0xbc>
 800508e:	d803      	bhi.n	8005098 <json_encode_value+0xb4>
 8005090:	2a0d      	cmp	r2, #13
 8005092:	d013      	beq.n	80050bc <json_encode_value+0xd8>
                        encoder->je_write(encoder->je_arg,
 8005094:	2201      	movs	r2, #1
 8005096:	e00b      	b.n	80050b0 <json_encode_value+0xcc>
                switch (jv->jv_val.str[i]) {
 8005098:	2a2f      	cmp	r2, #47	; 0x2f
 800509a:	d001      	beq.n	80050a0 <json_encode_value+0xbc>
 800509c:	2a5c      	cmp	r2, #92	; 0x5c
 800509e:	d1f9      	bne.n	8005094 <json_encode_value+0xb0>
                        encoder->je_write(encoder->je_arg, "\\",
 80050a0:	2201      	movs	r2, #1
 80050a2:	4641      	mov	r1, r8
 80050a4:	4798      	blx	r3
                        encoder->je_write(encoder->je_arg,
 80050a6:	2201      	movs	r2, #1
 80050a8:	68a9      	ldr	r1, [r5, #8]
 80050aa:	6823      	ldr	r3, [r4, #0]
 80050ac:	6860      	ldr	r0, [r4, #4]
 80050ae:	4431      	add	r1, r6
                        encoder->je_write(encoder->je_arg,
 80050b0:	4798      	blx	r3
            for (i = 0; i < jv->jv_len; i++) {
 80050b2:	3601      	adds	r6, #1
 80050b4:	e7cf      	b.n	8005056 <json_encode_value+0x72>
                        encoder->je_write(encoder->je_arg, "\\t",
 80050b6:	2202      	movs	r2, #2
 80050b8:	492c      	ldr	r1, [pc, #176]	; (800516c <json_encode_value+0x188>)
 80050ba:	e7f9      	b.n	80050b0 <json_encode_value+0xcc>
                        encoder->je_write(encoder->je_arg, "\\r",
 80050bc:	2202      	movs	r2, #2
 80050be:	4649      	mov	r1, r9
 80050c0:	e7f6      	b.n	80050b0 <json_encode_value+0xcc>
                        encoder->je_write(encoder->je_arg, "\\n",
 80050c2:	2202      	movs	r2, #2
 80050c4:	492a      	ldr	r1, [pc, #168]	; (8005170 <json_encode_value+0x18c>)
 80050c6:	e7f3      	b.n	80050b0 <json_encode_value+0xcc>
                        encoder->je_write(encoder->je_arg, "\\f",
 80050c8:	2202      	movs	r2, #2
 80050ca:	4639      	mov	r1, r7
 80050cc:	e7f0      	b.n	80050b0 <json_encode_value+0xcc>
            JSON_ENCODE_ARRAY_START(encoder);
 80050ce:	6803      	ldr	r3, [r0, #0]
 80050d0:	2201      	movs	r2, #1
 80050d2:	4928      	ldr	r1, [pc, #160]	; (8005174 <json_encode_value+0x190>)
 80050d4:	6840      	ldr	r0, [r0, #4]
 80050d6:	4798      	blx	r3
            for (i = 0; i < jv->jv_len; i++) {
 80050d8:	2600      	movs	r6, #0
                    encoder->je_write(encoder->je_arg, ",", sizeof(",")-1);
 80050da:	4f27      	ldr	r7, [pc, #156]	; (8005178 <json_encode_value+0x194>)
            for (i = 0; i < jv->jv_len; i++) {
 80050dc:	886b      	ldrh	r3, [r5, #2]
 80050de:	42b3      	cmp	r3, r6
 80050e0:	dc03      	bgt.n	80050ea <json_encode_value+0x106>
            JSON_ENCODE_ARRAY_END(encoder);
 80050e2:	6823      	ldr	r3, [r4, #0]
 80050e4:	2201      	movs	r2, #1
 80050e6:	4925      	ldr	r1, [pc, #148]	; (800517c <json_encode_value+0x198>)
 80050e8:	e799      	b.n	800501e <json_encode_value+0x3a>
                rc = json_encode_value(encoder, jv->jv_val.composite.values[i]);
 80050ea:	68eb      	ldr	r3, [r5, #12]
 80050ec:	4620      	mov	r0, r4
 80050ee:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 80050f2:	f7ff ff77 	bl	8004fe4 <json_encode_value>
                if (rc != 0) {
 80050f6:	2800      	cmp	r0, #0
 80050f8:	d1b6      	bne.n	8005068 <json_encode_value+0x84>
                if (i != jv->jv_len - 1) {
 80050fa:	886b      	ldrh	r3, [r5, #2]
 80050fc:	3b01      	subs	r3, #1
 80050fe:	42b3      	cmp	r3, r6
 8005100:	d004      	beq.n	800510c <json_encode_value+0x128>
                    encoder->je_write(encoder->je_arg, ",", sizeof(",")-1);
 8005102:	6823      	ldr	r3, [r4, #0]
 8005104:	2201      	movs	r2, #1
 8005106:	4639      	mov	r1, r7
 8005108:	6860      	ldr	r0, [r4, #4]
 800510a:	4798      	blx	r3
            for (i = 0; i < jv->jv_len; i++) {
 800510c:	3601      	adds	r6, #1
 800510e:	e7e5      	b.n	80050dc <json_encode_value+0xf8>
            JSON_ENCODE_OBJECT_START(encoder);
 8005110:	6803      	ldr	r3, [r0, #0]
 8005112:	2201      	movs	r2, #1
 8005114:	491a      	ldr	r1, [pc, #104]	; (8005180 <json_encode_value+0x19c>)
 8005116:	6840      	ldr	r0, [r0, #4]
 8005118:	4798      	blx	r3
            for (i = 0; i < jv->jv_len; i++) {
 800511a:	2600      	movs	r6, #0
 800511c:	886b      	ldrh	r3, [r5, #2]
 800511e:	42b3      	cmp	r3, r6
 8005120:	dc03      	bgt.n	800512a <json_encode_value+0x146>
            JSON_ENCODE_OBJECT_END(encoder);
 8005122:	6823      	ldr	r3, [r4, #0]
 8005124:	2201      	movs	r2, #1
 8005126:	4917      	ldr	r1, [pc, #92]	; (8005184 <json_encode_value+0x1a0>)
 8005128:	e779      	b.n	800501e <json_encode_value+0x3a>
                rc = json_encode_object_entry(encoder,
 800512a:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 800512e:	4620      	mov	r0, r4
 8005130:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 8005134:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 8005138:	f7ff ff22 	bl	8004f80 <json_encode_object_entry>
                if (rc != 0) {
 800513c:	2800      	cmp	r0, #0
 800513e:	d193      	bne.n	8005068 <json_encode_value+0x84>
            for (i = 0; i < jv->jv_len; i++) {
 8005140:	3601      	adds	r6, #1
 8005142:	e7eb      	b.n	800511c <json_encode_value+0x138>
            rc = -1;
 8005144:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005148:	e78e      	b.n	8005068 <json_encode_value+0x84>
 800514a:	bf00      	nop
 800514c:	0800dceb 	.word	0x0800dceb
 8005150:	0800dcf0 	.word	0x0800dcf0
 8005154:	0800e337 	.word	0x0800e337
 8005158:	0800dcf6 	.word	0x0800dcf6
 800515c:	0800dcfb 	.word	0x0800dcfb
 8005160:	0800dce3 	.word	0x0800dce3
 8005164:	0800dd0b 	.word	0x0800dd0b
 8005168:	0800dd0e 	.word	0x0800dd0e
 800516c:	0800dd02 	.word	0x0800dd02
 8005170:	0800dd08 	.word	0x0800dd08
 8005174:	0800dd11 	.word	0x0800dd11
 8005178:	0800e175 	.word	0x0800e175
 800517c:	0800dd13 	.word	0x0800dd13
 8005180:	0800dce9 	.word	0x0800dce9
 8005184:	0800dd15 	.word	0x0800dd15
 8005188:	0800dd00 	.word	0x0800dd00
 800518c:	0800dd05 	.word	0x0800dd05

08005190 <json_encode_object_finish>:

int
json_encode_object_finish(struct json_encoder *encoder)
{
 8005190:	b510      	push	{r4, lr}
 8005192:	4604      	mov	r4, r0
    JSON_ENCODE_OBJECT_END(encoder);
 8005194:	6803      	ldr	r3, [r0, #0]
 8005196:	2201      	movs	r2, #1
 8005198:	4904      	ldr	r1, [pc, #16]	; (80051ac <json_encode_object_finish+0x1c>)
 800519a:	6840      	ldr	r0, [r0, #4]
 800519c:	4798      	blx	r3
    /* Useful in case of nested objects. */
    encoder->je_wr_commas = 1;
 800519e:	7a23      	ldrb	r3, [r4, #8]

    return (0);
}
 80051a0:	2000      	movs	r0, #0
    encoder->je_wr_commas = 1;
 80051a2:	f043 0301 	orr.w	r3, r3, #1
 80051a6:	7223      	strb	r3, [r4, #8]
}
 80051a8:	bd10      	pop	{r4, pc}
 80051aa:	bf00      	nop
 80051ac:	0800dd15 	.word	0x0800dd15

080051b0 <json_encode_array_name>:

int
json_encode_array_name(struct json_encoder *encoder, char *name)
{
    return json_encode_object_key(encoder, name);
 80051b0:	f7ff bebc 	b.w	8004f2c <json_encode_object_key>

080051b4 <json_encode_array_start>:
}

int
json_encode_array_start(struct json_encoder *encoder)
{
 80051b4:	b510      	push	{r4, lr}
 80051b6:	4604      	mov	r4, r0
    JSON_ENCODE_ARRAY_START(encoder);
 80051b8:	6803      	ldr	r3, [r0, #0]
 80051ba:	2201      	movs	r2, #1
 80051bc:	4904      	ldr	r1, [pc, #16]	; (80051d0 <json_encode_array_start+0x1c>)
 80051be:	6840      	ldr	r0, [r0, #4]
 80051c0:	4798      	blx	r3
    encoder->je_wr_commas = 0;
 80051c2:	7a23      	ldrb	r3, [r4, #8]

    return (0);
}
 80051c4:	2000      	movs	r0, #0
    encoder->je_wr_commas = 0;
 80051c6:	f36f 0300 	bfc	r3, #0, #1
 80051ca:	7223      	strb	r3, [r4, #8]
}
 80051cc:	bd10      	pop	{r4, pc}
 80051ce:	bf00      	nop
 80051d0:	0800dd11 	.word	0x0800dd11

080051d4 <json_encode_array_finish>:
}


int
json_encode_array_finish(struct json_encoder *encoder)
{
 80051d4:	b508      	push	{r3, lr}
    encoder->je_wr_commas = 1;
 80051d6:	7a03      	ldrb	r3, [r0, #8]
    JSON_ENCODE_ARRAY_END(encoder);
 80051d8:	2201      	movs	r2, #1
    encoder->je_wr_commas = 1;
 80051da:	f043 0301 	orr.w	r3, r3, #1
 80051de:	7203      	strb	r3, [r0, #8]
    JSON_ENCODE_ARRAY_END(encoder);
 80051e0:	4902      	ldr	r1, [pc, #8]	; (80051ec <json_encode_array_finish+0x18>)
 80051e2:	6803      	ldr	r3, [r0, #0]
 80051e4:	6840      	ldr	r0, [r0, #4]
 80051e6:	4798      	blx	r3

    return (0);
}
 80051e8:	2000      	movs	r0, #0
 80051ea:	bd08      	pop	{r3, pc}
 80051ec:	0800dd13 	.word	0x0800dd13

080051f0 <cbor_mbuf_writer>:
#include <tinycbor/cbor.h>
#include <tinycbor/cbor_mbuf_writer.h>

int
cbor_mbuf_writer(struct cbor_encoder_writer *arg, const char *data, int len)
{
 80051f0:	b538      	push	{r3, r4, r5, lr}
 80051f2:	4604      	mov	r4, r0
 80051f4:	4615      	mov	r5, r2
    int rc;
    struct cbor_mbuf_writer *cb = (struct cbor_mbuf_writer *) arg;

    rc = os_mbuf_append(cb->m, data, len);
 80051f6:	6880      	ldr	r0, [r0, #8]
 80051f8:	b292      	uxth	r2, r2
 80051fa:	f000 ffaa 	bl	8006152 <os_mbuf_append>
    if (rc) {
 80051fe:	b918      	cbnz	r0, 8005208 <cbor_mbuf_writer+0x18>
        return CborErrorOutOfMemory;
    }
    cb->enc.bytes_written += len;
 8005200:	6862      	ldr	r2, [r4, #4]
 8005202:	442a      	add	r2, r5
 8005204:	6062      	str	r2, [r4, #4]
    return CborNoError;
}
 8005206:	bd38      	pop	{r3, r4, r5, pc}
        return CborErrorOutOfMemory;
 8005208:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800520c:	e7fb      	b.n	8005206 <cbor_mbuf_writer+0x16>
	...

08005210 <cbor_mbuf_writer_init>:

void
cbor_mbuf_writer_init(struct cbor_mbuf_writer *cb, struct os_mbuf *m)
{
    cb->m = m;
    cb->enc.bytes_written = 0;
 8005210:	2300      	movs	r3, #0
 8005212:	6043      	str	r3, [r0, #4]
    cb->enc.write = &cbor_mbuf_writer;
 8005214:	4b01      	ldr	r3, [pc, #4]	; (800521c <cbor_mbuf_writer_init+0xc>)
    cb->m = m;
 8005216:	6081      	str	r1, [r0, #8]
    cb->enc.write = &cbor_mbuf_writer;
 8005218:	6003      	str	r3, [r0, #0]
}
 800521a:	4770      	bx	lr
 800521c:	080051f1 	.word	0x080051f1

08005220 <cbor_encoder_init>:
 * zero.
 */
void cbor_encoder_init(CborEncoder *encoder, cbor_encoder_writer *writer, int flags)
{
    encoder->writer = writer;
    encoder->added = 0;
 8005220:	2300      	movs	r3, #0
    encoder->writer = writer;
 8005222:	6001      	str	r1, [r0, #0]
    encoder->flags = flags;
 8005224:	e9c0 3202 	strd	r3, r2, [r0, #8]
}
 8005228:	4770      	bx	lr

0800522a <hal_bsp_hw_id_len>:

int
hal_bsp_hw_id_len(void)
{
    return STM32_HW_ID_LEN;
}
 800522a:	200c      	movs	r0, #12
 800522c:	4770      	bx	lr
	...

08005230 <hal_bsp_hw_id>:
int
hal_bsp_hw_id(uint8_t *id, int max_len)
{
    int cnt;

    cnt = min(STM32_HW_ID_LEN, max_len);
 8005230:	290c      	cmp	r1, #12
 8005232:	bfa8      	it	ge
 8005234:	210c      	movge	r1, #12
{
 8005236:	b510      	push	{r4, lr}
    cnt = min(STM32_HW_ID_LEN, max_len);
 8005238:	460c      	mov	r4, r1
    memcpy(id, (void *)UID_BASE, cnt);
 800523a:	460a      	mov	r2, r1
 800523c:	4902      	ldr	r1, [pc, #8]	; (8005248 <hal_bsp_hw_id+0x18>)
 800523e:	f001 fef7 	bl	8007030 <memcpy>

    return cnt;
}
 8005242:	4620      	mov	r0, r4
 8005244:	bd10      	pop	{r4, pc}
 8005246:	bf00      	nop
 8005248:	1ffff7e8 	.word	0x1ffff7e8

0800524c <sensor_mgr_insert>:
    SLIST_REMOVE(&sensor_mgr.mgr_sensor_list, sensor, sensor, s_next);
}

static void
sensor_mgr_insert(struct sensor *sensor)
{
 800524c:	4911      	ldr	r1, [pc, #68]	; (8005294 <sensor_mgr_insert+0x48>)
 800524e:	b570      	push	{r4, r5, r6, lr}
    struct sensor *cursor, *prev;

    prev = cursor = NULL;
    if (!sensor->s_poll_rate) {
 8005250:	6a03      	ldr	r3, [r0, #32]
 8005252:	6b0c      	ldr	r4, [r1, #48]	; 0x30
        SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
 8005254:	4622      	mov	r2, r4
    if (!sensor->s_poll_rate) {
 8005256:	b17b      	cbz	r3, 8005278 <sensor_mgr_insert+0x2c>
            prev = cursor;
        }
        goto insert;
    }

    prev = cursor = NULL;
 8005258:	2300      	movs	r3, #0
    SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
 800525a:	b17a      	cbz	r2, 800527c <sensor_mgr_insert+0x30>
        if (!cursor->s_poll_rate) {
 800525c:	6a15      	ldr	r5, [r2, #32]
 800525e:	b16d      	cbz	r5, 800527c <sensor_mgr_insert+0x30>
            break;
        }

        if (OS_TIME_TICK_LT(sensor->s_next_run, cursor->s_next_run)) {
 8005260:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005262:	6a56      	ldr	r6, [r2, #36]	; 0x24
 8005264:	1bad      	subs	r5, r5, r6
 8005266:	2d00      	cmp	r5, #0
 8005268:	db08      	blt.n	800527c <sensor_mgr_insert+0x30>
    SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
 800526a:	4613      	mov	r3, r2
 800526c:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8005270:	e7f3      	b.n	800525a <sensor_mgr_insert+0xe>
        SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
 8005272:	4613      	mov	r3, r2
 8005274:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8005278:	2a00      	cmp	r2, #0
 800527a:	d1fa      	bne.n	8005272 <sensor_mgr_insert+0x26>

        prev = cursor;
    }

insert:
    if (prev == NULL) {
 800527c:	b91b      	cbnz	r3, 8005286 <sensor_mgr_insert+0x3a>
        SLIST_INSERT_HEAD(&sensor_mgr.mgr_sensor_list, sensor, s_next);
 800527e:	f8c0 4080 	str.w	r4, [r0, #128]	; 0x80
 8005282:	6308      	str	r0, [r1, #48]	; 0x30
    } else {
        SLIST_INSERT_AFTER(prev, sensor, s_next);
    }
}
 8005284:	bd70      	pop	{r4, r5, r6, pc}
        SLIST_INSERT_AFTER(prev, sensor, s_next);
 8005286:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800528a:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
 800528e:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
}
 8005292:	e7f7      	b.n	8005284 <sensor_mgr_insert+0x38>
 8005294:	200033f8 	.word	0x200033f8

08005298 <sensor_mgr_match_bytype>:
 *
 * @return 1 if matches, 0 if it doesn't match.
 */
int
sensor_mgr_match_bytype(struct sensor *sensor, void *arg)
{
 8005298:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
     * sensor, and type is the bitmask we're searching for. We also look at
     * the mask as the driver might be configured to work in a mode where only
     * some of the sensors are supported but not all. Compare the three,
     * and if there is a match, return 1. If it is not supported, return 0.
     */
    return (*type & sensor->s_types & sensor->s_mask) ? 1 : 0;
 800529c:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
 80052a0:	e9d0 4506 	ldrd	r4, r5, [r0, #24]
 80052a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80052a8:	ea02 0b04 	and.w	fp, r2, r4
 80052ac:	ea03 0c05 	and.w	ip, r3, r5
 80052b0:	ea0b 0200 	and.w	r2, fp, r0
 80052b4:	ea0c 0301 	and.w	r3, ip, r1
 80052b8:	4313      	orrs	r3, r2
}
 80052ba:	bf14      	ite	ne
 80052bc:	2001      	movne	r0, #1
 80052be:	2000      	moveq	r0, #0
 80052c0:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}

080052c4 <sensor_read_data_func>:
    struct sensor_listener *listener;
    struct sensor_read_ctx *ctx;

    ctx = (struct sensor_read_ctx *) arg;

    if ((uint8_t)(uintptr_t)(ctx->user_arg) != SENSOR_IGN_LISTENER) {
 80052c4:	790b      	ldrb	r3, [r1, #4]
{
 80052c6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80052ca:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
    if ((uint8_t)(uintptr_t)(ctx->user_arg) != SENSOR_IGN_LISTENER) {
 80052ce:	2b01      	cmp	r3, #1
{
 80052d0:	4605      	mov	r5, r0
 80052d2:	4688      	mov	r8, r1
 80052d4:	4691      	mov	r9, r2
    if ((uint8_t)(uintptr_t)(ctx->user_arg) != SENSOR_IGN_LISTENER) {
 80052d6:	d106      	bne.n	80052e6 <sensor_read_data_func+0x22>
            }
        }
    }

    /* Call data function */
    if (ctx->user_func != NULL) {
 80052d8:	f8d8 3000 	ldr.w	r3, [r8]
 80052dc:	b9c3      	cbnz	r3, 8005310 <sensor_read_data_func+0x4c>
        return (ctx->user_func(sensor, ctx->user_arg, data, type));
    }

    return (0);
}
 80052de:	4618      	mov	r0, r3
 80052e0:	b003      	add	sp, #12
 80052e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        SLIST_FOREACH(listener, &sensor->s_listener_list, sl_next) {
 80052e6:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
 80052e8:	2c00      	cmp	r4, #0
 80052ea:	d0f5      	beq.n	80052d8 <sensor_read_data_func+0x14>
            if (listener->sl_sensor_type & type) {
 80052ec:	e9d4 2300 	ldrd	r2, r3, [r4]
 80052f0:	ea02 0006 	and.w	r0, r2, r6
 80052f4:	ea03 0107 	and.w	r1, r3, r7
 80052f8:	ea50 0301 	orrs.w	r3, r0, r1
 80052fc:	d006      	beq.n	800530c <sensor_read_data_func+0x48>
                listener->sl_func(sensor, listener->sl_arg, data, type);
 80052fe:	e9cd 6700 	strd	r6, r7, [sp]
 8005302:	464a      	mov	r2, r9
 8005304:	68a3      	ldr	r3, [r4, #8]
 8005306:	68e1      	ldr	r1, [r4, #12]
 8005308:	4628      	mov	r0, r5
 800530a:	4798      	blx	r3
        SLIST_FOREACH(listener, &sensor->s_listener_list, sl_next) {
 800530c:	6924      	ldr	r4, [r4, #16]
 800530e:	e7eb      	b.n	80052e8 <sensor_read_data_func+0x24>
        return (ctx->user_func(sensor, ctx->user_arg, data, type));
 8005310:	464a      	mov	r2, r9
 8005312:	4628      	mov	r0, r5
 8005314:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005318:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
}
 800531c:	b003      	add	sp, #12
 800531e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return (ctx->user_func(sensor, ctx->user_arg, data, type));
 8005322:	4718      	bx	r3

08005324 <sensor_mgr_match_bydevname>:
{
 8005324:	b508      	push	{r3, lr}
    if (!strcmp(sensor->s_dev->od_name, devname)) {
 8005326:	6803      	ldr	r3, [r0, #0]
 8005328:	69d8      	ldr	r0, [r3, #28]
 800532a:	f001 fea5 	bl	8007078 <strcmp>
}
 800532e:	fab0 f080 	clz	r0, r0
 8005332:	0940      	lsrs	r0, r0, #5
 8005334:	bd08      	pop	{r3, pc}
	...

08005338 <sensor_base_ts_update_event>:
{
 8005338:	b570      	push	{r4, r5, r6, lr}
 800533a:	b086      	sub	sp, #24
    ticks = os_time_get();
 800533c:	f001 fca8 	bl	8006c90 <os_time_get>
    rc = os_gettimeofday(&ostv, &ostz);
 8005340:	ae02      	add	r6, sp, #8
    ticks = os_time_get();
 8005342:	4604      	mov	r4, r0
    rc = os_gettimeofday(&ostv, &ostz);
 8005344:	a901      	add	r1, sp, #4
 8005346:	4630      	mov	r0, r6
 8005348:	f001 fcf8 	bl	8006d3c <os_gettimeofday>
    if (rc) {
 800534c:	b148      	cbz	r0, 8005362 <sensor_base_ts_update_event+0x2a>
        ticks += OS_TICKS_PER_SEC * 600;
 800534e:	f504 2412 	add.w	r4, r4, #598016	; 0x92000
 8005352:	f504 64f8 	add.w	r4, r4, #1984	; 0x7c0
    os_callout_reset(&st_up_osco, ticks);
 8005356:	4621      	mov	r1, r4
 8005358:	4809      	ldr	r0, [pc, #36]	; (8005380 <sensor_base_ts_update_event+0x48>)
 800535a:	f000 fc67 	bl	8005c2c <os_callout_reset>
}
 800535e:	b006      	add	sp, #24
 8005360:	bd70      	pop	{r4, r5, r6, pc}
    sensor_base_ts.st_ostv = ostv;
 8005362:	4d08      	ldr	r5, [pc, #32]	; (8005384 <sensor_base_ts_update_event+0x4c>)
 8005364:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8005368:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    sensor_base_ts.st_ostz = ostz;
 800536c:	9b01      	ldr	r3, [sp, #4]
    ticks += OS_TICKS_PER_SEC * 2000;
 800536e:	f504 14f4 	add.w	r4, r4, #1998848	; 0x1e8000
    sensor_base_ts.st_ostz = ostz;
 8005372:	612b      	str	r3, [r5, #16]
    sensor_base_ts.st_cputime = os_cputime_get32();
 8005374:	f000 fcda 	bl	8005d2c <os_cputime_get32>
    ticks += OS_TICKS_PER_SEC * 2000;
 8005378:	f504 6490 	add.w	r4, r4, #1152	; 0x480
    sensor_base_ts.st_cputime = os_cputime_get32();
 800537c:	6168      	str	r0, [r5, #20]
 800537e:	e7ea      	b.n	8005356 <sensor_base_ts_update_event+0x1e>
 8005380:	2000342c 	.word	0x2000342c
 8005384:	20003450 	.word	0x20003450

08005388 <sensor_mgr_lock>:
{
 8005388:	b508      	push	{r3, lr}
    rc = os_mutex_pend(&sensor_mgr.mgr_lock, OS_TIMEOUT_NEVER);
 800538a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800538e:	4804      	ldr	r0, [pc, #16]	; (80053a0 <sensor_mgr_lock+0x18>)
 8005390:	f001 f96e 	bl	8006670 <os_mutex_pend>
    if (rc == 0 || rc == OS_NOT_STARTED) {
 8005394:	b110      	cbz	r0, 800539c <sensor_mgr_lock+0x14>
        return (0);
 8005396:	2809      	cmp	r0, #9
 8005398:	bf08      	it	eq
 800539a:	2000      	moveq	r0, #0
}
 800539c:	bd08      	pop	{r3, pc}
 800539e:	bf00      	nop
 80053a0:	200033f8 	.word	0x200033f8

080053a4 <sensor_mgr_unlock>:
    (void) os_mutex_release(&sensor_mgr.mgr_lock);
 80053a4:	4801      	ldr	r0, [pc, #4]	; (80053ac <sensor_mgr_unlock+0x8>)
 80053a6:	f001 b913 	b.w	80065d0 <os_mutex_release>
 80053aa:	bf00      	nop
 80053ac:	200033f8 	.word	0x200033f8

080053b0 <sensor_mgr_find_next>:
{
 80053b0:	b570      	push	{r4, r5, r6, lr}
 80053b2:	4605      	mov	r5, r0
 80053b4:	460e      	mov	r6, r1
 80053b6:	4614      	mov	r4, r2
    rc = sensor_mgr_lock();
 80053b8:	f7ff ffe6 	bl	8005388 <sensor_mgr_lock>
    if (rc != 0) {
 80053bc:	b978      	cbnz	r0, 80053de <sensor_mgr_find_next+0x2e>
    if (cursor == NULL) {
 80053be:	b95c      	cbnz	r4, 80053d8 <sensor_mgr_find_next+0x28>
        cursor = SLIST_FIRST(&sensor_mgr.mgr_sensor_list);
 80053c0:	4b08      	ldr	r3, [pc, #32]	; (80053e4 <sensor_mgr_find_next+0x34>)
 80053c2:	6b1c      	ldr	r4, [r3, #48]	; 0x30
    while (cursor != NULL) {
 80053c4:	b91c      	cbnz	r4, 80053ce <sensor_mgr_find_next+0x1e>
    sensor_mgr_unlock();
 80053c6:	f7ff ffed 	bl	80053a4 <sensor_mgr_unlock>
}
 80053ca:	4620      	mov	r0, r4
 80053cc:	bd70      	pop	{r4, r5, r6, pc}
        if (compare_func(cursor, arg)) {
 80053ce:	4631      	mov	r1, r6
 80053d0:	4620      	mov	r0, r4
 80053d2:	47a8      	blx	r5
 80053d4:	2800      	cmp	r0, #0
 80053d6:	d1f6      	bne.n	80053c6 <sensor_mgr_find_next+0x16>
        cursor = SLIST_NEXT(cursor, s_next);
 80053d8:	f8d4 4080 	ldr.w	r4, [r4, #128]	; 0x80
 80053dc:	e7f2      	b.n	80053c4 <sensor_mgr_find_next+0x14>
    cursor = NULL;
 80053de:	2400      	movs	r4, #0
    return (cursor);
 80053e0:	e7f3      	b.n	80053ca <sensor_mgr_find_next+0x1a>
 80053e2:	bf00      	nop
 80053e4:	200033f8 	.word	0x200033f8

080053e8 <sensor_mgr_find_next_bydevname>:
    return (sensor_mgr_find_next(sensor_mgr_match_bydevname, (char *)devname,
 80053e8:	460a      	mov	r2, r1
 80053ea:	4601      	mov	r1, r0
 80053ec:	4801      	ldr	r0, [pc, #4]	; (80053f4 <sensor_mgr_find_next_bydevname+0xc>)
 80053ee:	f7ff bfdf 	b.w	80053b0 <sensor_mgr_find_next>
 80053f2:	bf00      	nop
 80053f4:	08005325 	.word	0x08005325

080053f8 <sensor_pkg_init>:
{
 80053f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053fa:	b089      	sub	sp, #36	; 0x24
    sensor_mgr_evq_set(os_eventq_dflt_get());
 80053fc:	f000 fdf0 	bl	8005fe0 <os_eventq_dflt_get>
    sensor_mgr.mgr_eventq = evq;
 8005400:	4d1b      	ldr	r5, [pc, #108]	; (8005470 <sensor_pkg_init+0x78>)
    rc = os_mempool_init(&sensor_notify_evt_pool,
 8005402:	4b1c      	ldr	r3, [pc, #112]	; (8005474 <sensor_pkg_init+0x7c>)
    sensor_mgr.mgr_eventq = evq;
 8005404:	62e8      	str	r0, [r5, #44]	; 0x2c
    rc = os_mempool_init(&sensor_notify_evt_pool,
 8005406:	9300      	str	r3, [sp, #0]
 8005408:	2218      	movs	r2, #24
 800540a:	4b1b      	ldr	r3, [pc, #108]	; (8005478 <sensor_pkg_init+0x80>)
 800540c:	2105      	movs	r1, #5
 800540e:	481b      	ldr	r0, [pc, #108]	; (800547c <sensor_pkg_init+0x84>)
 8005410:	f001 f804 	bl	800641c <os_mempool_init>
    assert(rc == OS_OK);
 8005414:	4607      	mov	r7, r0
 8005416:	b128      	cbz	r0, 8005424 <sensor_pkg_init+0x2c>
 8005418:	2300      	movs	r3, #0
 800541a:	461a      	mov	r2, r3
 800541c:	4619      	mov	r1, r3
 800541e:	4618      	mov	r0, r3
 8005420:	f000 fa78 	bl	8005914 <__assert_func>
    os_callout_init(&sensor_mgr.mgr_wakeup_callout, sensor_mgr_evq_get(),
 8005424:	4603      	mov	r3, r0
    sensor_base_ts.st_ostv = ostv;
 8005426:	4c16      	ldr	r4, [pc, #88]	; (8005480 <sensor_pkg_init+0x88>)
    os_callout_init(&sensor_mgr.mgr_wakeup_callout, sensor_mgr_evq_get(),
 8005428:	4a16      	ldr	r2, [pc, #88]	; (8005484 <sensor_pkg_init+0x8c>)
 800542a:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 800542c:	f105 000c 	add.w	r0, r5, #12
    os_gettimeofday(&ostv, &ostz);
 8005430:	ae04      	add	r6, sp, #16
    os_callout_init(&sensor_mgr.mgr_wakeup_callout, sensor_mgr_evq_get(),
 8005432:	f000 fbcf 	bl	8005bd4 <os_callout_init>
    os_gettimeofday(&ostv, &ostz);
 8005436:	a903      	add	r1, sp, #12
 8005438:	4630      	mov	r0, r6
 800543a:	f001 fc7f 	bl	8006d3c <os_gettimeofday>
    sensor_base_ts.st_ostv = ostv;
 800543e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8005442:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    sensor_base_ts.st_ostz = ostz;
 8005446:	9b03      	ldr	r3, [sp, #12]
 8005448:	6123      	str	r3, [r4, #16]
    sensor_base_ts.st_cputime = os_cputime_get32();
 800544a:	f000 fc6f 	bl	8005d2c <os_cputime_get32>
    os_callout_init(&st_up_osco, sensor_mgr_evq_get(),
 800544e:	463b      	mov	r3, r7
 8005450:	4a0d      	ldr	r2, [pc, #52]	; (8005488 <sensor_pkg_init+0x90>)
    sensor_base_ts.st_cputime = os_cputime_get32();
 8005452:	6160      	str	r0, [r4, #20]
    os_callout_init(&st_up_osco, sensor_mgr_evq_get(),
 8005454:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8005456:	480d      	ldr	r0, [pc, #52]	; (800548c <sensor_pkg_init+0x94>)
 8005458:	f000 fbbc 	bl	8005bd4 <os_callout_init>
    os_callout_reset(&st_up_osco, OS_TICKS_PER_SEC);
 800545c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005460:	480a      	ldr	r0, [pc, #40]	; (800548c <sensor_pkg_init+0x94>)
 8005462:	f000 fbe3 	bl	8005c2c <os_callout_reset>
    os_mutex_init(&sensor_mgr.mgr_lock);
 8005466:	4628      	mov	r0, r5
 8005468:	f001 f8a8 	bl	80065bc <os_mutex_init>
}
 800546c:	b009      	add	sp, #36	; 0x24
 800546e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005470:	200033f8 	.word	0x200033f8
 8005474:	0800dd17 	.word	0x0800dd17
 8005478:	20000990 	.word	0x20000990
 800547c:	20000a08 	.word	0x20000a08
 8005480:	20003450 	.word	0x20003450
 8005484:	0800568d 	.word	0x0800568d
 8005488:	08005339 	.word	0x08005339
 800548c:	2000342c 	.word	0x2000342c

08005490 <sensor_lock>:
{
 8005490:	b508      	push	{r3, lr}
    rc = os_mutex_pend(&sensor->s_lock, OS_TIMEOUT_NEVER);
 8005492:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005496:	3004      	adds	r0, #4
 8005498:	f001 f8ea 	bl	8006670 <os_mutex_pend>
    if (rc == 0 || rc == OS_NOT_STARTED) {
 800549c:	b110      	cbz	r0, 80054a4 <sensor_lock+0x14>
        return (0);
 800549e:	2809      	cmp	r0, #9
 80054a0:	bf08      	it	eq
 80054a2:	2000      	moveq	r0, #0
}
 80054a4:	bd08      	pop	{r3, pc}
	...

080054a8 <sensor_update_nextrun>:
{
 80054a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80054aa:	4604      	mov	r4, r0
 80054ac:	460d      	mov	r5, r1
    os_time_ms_to_ticks(sensor->s_poll_rate, &sensor_ticks);
 80054ae:	6a00      	ldr	r0, [r0, #32]
 80054b0:	a901      	add	r1, sp, #4
 80054b2:	f001 fc61 	bl	8006d78 <os_time_ms_to_ticks>
    sensor_lock(sensor);
 80054b6:	4620      	mov	r0, r4
 80054b8:	f7ff ffea 	bl	8005490 <sensor_lock>
    SLIST_REMOVE(&sensor_mgr.mgr_sensor_list, sensor, sensor, s_next);
 80054bc:	4a0d      	ldr	r2, [pc, #52]	; (80054f4 <sensor_update_nextrun+0x4c>)
 80054be:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80054c0:	429c      	cmp	r4, r3
 80054c2:	d10e      	bne.n	80054e2 <sensor_update_nextrun+0x3a>
 80054c4:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 80054c8:	6313      	str	r3, [r2, #48]	; 0x30
    sensor->s_next_run = sensor_ticks + now;
 80054ca:	9901      	ldr	r1, [sp, #4]
    sensor_mgr_insert(sensor);
 80054cc:	4620      	mov	r0, r4
    sensor->s_next_run = sensor_ticks + now;
 80054ce:	4429      	add	r1, r5
 80054d0:	6261      	str	r1, [r4, #36]	; 0x24
    sensor_mgr_insert(sensor);
 80054d2:	f7ff febb 	bl	800524c <sensor_mgr_insert>
    os_mutex_release(&sensor->s_lock);
 80054d6:	1d20      	adds	r0, r4, #4
 80054d8:	f001 f87a 	bl	80065d0 <os_mutex_release>
}
 80054dc:	b003      	add	sp, #12
 80054de:	bd30      	pop	{r4, r5, pc}
    SLIST_REMOVE(&sensor_mgr.mgr_sensor_list, sensor, sensor, s_next);
 80054e0:	4613      	mov	r3, r2
 80054e2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80054e6:	4294      	cmp	r4, r2
 80054e8:	d1fa      	bne.n	80054e0 <sensor_update_nextrun+0x38>
 80054ea:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 80054ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80054f2:	e7ea      	b.n	80054ca <sensor_update_nextrun+0x22>
 80054f4:	200033f8 	.word	0x200033f8

080054f8 <sensor_set_poll_rate_ms>:
{
 80054f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80054fa:	4605      	mov	r5, r0
    os_callout_stop(&sensor_mgr.mgr_wakeup_callout);
 80054fc:	481e      	ldr	r0, [pc, #120]	; (8005578 <sensor_set_poll_rate_ms+0x80>)
{
 80054fe:	460c      	mov	r4, r1
    os_callout_stop(&sensor_mgr.mgr_wakeup_callout);
 8005500:	f000 fb76 	bl	8005bf0 <os_callout_stop>
    sensor = sensor_mgr_find_next_bydevname(devname, NULL);
 8005504:	4628      	mov	r0, r5
 8005506:	2100      	movs	r1, #0
 8005508:	f7ff ff6e 	bl	80053e8 <sensor_mgr_find_next_bydevname>
    if (!sensor) {
 800550c:	4605      	mov	r5, r0
 800550e:	b380      	cbz	r0, 8005572 <sensor_set_poll_rate_ms+0x7a>
    sensor_lock(sensor);
 8005510:	f7ff ffbe 	bl	8005490 <sensor_lock>
    now = os_time_get();
 8005514:	f001 fbbc 	bl	8006c90 <os_time_get>
 8005518:	4607      	mov	r7, r0
    os_time_ms_to_ticks(poll_rate, &next_wakeup);
 800551a:	a901      	add	r1, sp, #4
 800551c:	4620      	mov	r0, r4
 800551e:	f001 fc2b 	bl	8006d78 <os_time_ms_to_ticks>
    sensor_lock(sensor);
 8005522:	4628      	mov	r0, r5
 8005524:	f7ff ffb4 	bl	8005490 <sensor_lock>
    sensor->s_poll_rate = poll_rate;
 8005528:	622c      	str	r4, [r5, #32]
    os_mutex_release(&sensor->s_lock);
 800552a:	1d2c      	adds	r4, r5, #4
 800552c:	4620      	mov	r0, r4
 800552e:	f001 f84f 	bl	80065d0 <os_mutex_release>
    head = SLIST_FIRST(&sensor_mgr.mgr_sensor_list);
 8005532:	4e12      	ldr	r6, [pc, #72]	; (800557c <sensor_set_poll_rate_ms+0x84>)
    sensor_update_nextrun(sensor, now);
 8005534:	4639      	mov	r1, r7
 8005536:	4628      	mov	r0, r5
 8005538:	f7ff ffb6 	bl	80054a8 <sensor_update_nextrun>
    os_mutex_release(&sensor->s_lock);
 800553c:	4620      	mov	r0, r4
 800553e:	f001 f847 	bl	80065d0 <os_mutex_release>
    sensor_mgr_lock();
 8005542:	f7ff ff21 	bl	8005388 <sensor_mgr_lock>
    head = SLIST_FIRST(&sensor_mgr.mgr_sensor_list);
 8005546:	6b35      	ldr	r5, [r6, #48]	; 0x30
    sensor_lock(sensor);
 8005548:	4628      	mov	r0, r5
 800554a:	f7ff ffa1 	bl	8005490 <sensor_lock>
    delta = (int32_t)(sensor->s_next_run - now);
 800554e:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    os_mutex_release(&sensor->s_lock);
 8005550:	1d28      	adds	r0, r5, #4
    delta = (int32_t)(sensor->s_next_run - now);
 8005552:	1be4      	subs	r4, r4, r7
        sensor_ticks = 0;
 8005554:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
    os_mutex_release(&sensor->s_lock);
 8005558:	f001 f83a 	bl	80065d0 <os_mutex_release>
    *min_nextrun = sensor_calc_nextrun_delta(head, now);
 800555c:	9401      	str	r4, [sp, #4]
    sensor_mgr_unlock();
 800555e:	f7ff ff21 	bl	80053a4 <sensor_mgr_unlock>
    os_callout_reset(&sensor_mgr.mgr_wakeup_callout, next_wakeup);
 8005562:	9901      	ldr	r1, [sp, #4]
 8005564:	f106 000c 	add.w	r0, r6, #12
 8005568:	f000 fb60 	bl	8005c2c <os_callout_reset>
    return 0;
 800556c:	2000      	movs	r0, #0
}
 800556e:	b003      	add	sp, #12
 8005570:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return rc;
 8005572:	f06f 0001 	mvn.w	r0, #1
 8005576:	e7fa      	b.n	800556e <sensor_set_poll_rate_ms+0x76>
 8005578:	20003404 	.word	0x20003404
 800557c:	200033f8 	.word	0x200033f8

08005580 <sensor_mgr_register>:
{
 8005580:	b538      	push	{r3, r4, r5, lr}
 8005582:	4605      	mov	r5, r0
    rc = sensor_mgr_lock();
 8005584:	f7ff ff00 	bl	8005388 <sensor_mgr_lock>
    if (rc != 0) {
 8005588:	4604      	mov	r4, r0
 800558a:	b960      	cbnz	r0, 80055a6 <sensor_mgr_register+0x26>
    rc = sensor_lock(sensor);
 800558c:	4628      	mov	r0, r5
 800558e:	f7ff ff7f 	bl	8005490 <sensor_lock>
    if (rc != 0) {
 8005592:	4604      	mov	r4, r0
 8005594:	b938      	cbnz	r0, 80055a6 <sensor_mgr_register+0x26>
    sensor_mgr_insert(sensor);
 8005596:	4628      	mov	r0, r5
 8005598:	f7ff fe58 	bl	800524c <sensor_mgr_insert>
    os_mutex_release(&sensor->s_lock);
 800559c:	1d28      	adds	r0, r5, #4
 800559e:	f001 f817 	bl	80065d0 <os_mutex_release>
    sensor_mgr_unlock();
 80055a2:	f7ff feff 	bl	80053a4 <sensor_mgr_unlock>
}
 80055a6:	4620      	mov	r0, r4
 80055a8:	bd38      	pop	{r3, r4, r5, pc}

080055aa <sensor_init>:
{
 80055aa:	b538      	push	{r3, r4, r5, lr}
 80055ac:	4604      	mov	r4, r0
 80055ae:	460d      	mov	r5, r1
    memset(sensor, 0, sizeof(*sensor));
 80055b0:	2288      	movs	r2, #136	; 0x88
 80055b2:	2100      	movs	r1, #0
 80055b4:	f001 fd49 	bl	800704a <memset>
    rc = os_mutex_init(&sensor->s_lock);
 80055b8:	1d20      	adds	r0, r4, #4
 80055ba:	f000 ffff 	bl	80065bc <os_mutex_init>
    if (rc != 0) {
 80055be:	b900      	cbnz	r0, 80055c2 <sensor_init+0x18>
    sensor->s_dev = dev;
 80055c0:	6025      	str	r5, [r4, #0]
}
 80055c2:	bd38      	pop	{r3, r4, r5, pc}

080055c4 <sensor_register_listener>:
{
 80055c4:	b570      	push	{r4, r5, r6, lr}
 80055c6:	4604      	mov	r4, r0
 80055c8:	460e      	mov	r6, r1
    rc = sensor_lock(sensor);
 80055ca:	f7ff ff61 	bl	8005490 <sensor_lock>
    if (rc != 0) {
 80055ce:	4605      	mov	r5, r0
 80055d0:	b928      	cbnz	r0, 80055de <sensor_register_listener+0x1a>
    SLIST_INSERT_HEAD(&sensor->s_listener_list, listener, sl_next);
 80055d2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    os_mutex_release(&sensor->s_lock);
 80055d4:	1d20      	adds	r0, r4, #4
    SLIST_INSERT_HEAD(&sensor->s_listener_list, listener, sl_next);
 80055d6:	6133      	str	r3, [r6, #16]
 80055d8:	66e6      	str	r6, [r4, #108]	; 0x6c
    os_mutex_release(&sensor->s_lock);
 80055da:	f000 fff9 	bl	80065d0 <os_mutex_release>
}
 80055de:	4628      	mov	r0, r5
 80055e0:	bd70      	pop	{r4, r5, r6, pc}
	...

080055e4 <sensor_read>:
 * @return 0 on success, non-zero on failure.
 */
int
sensor_read(struct sensor *sensor, sensor_type_t type,
        sensor_data_func_t data_func, void *arg, uint32_t timeout)
{
 80055e4:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 80055e8:	b088      	sub	sp, #32
 80055ea:	4604      	mov	r4, r0
 80055ec:	e9cd 2304 	strd	r2, r3, [sp, #16]
    struct sensor_read_ctx src;
    int rc;

    rc = sensor_lock(sensor);
 80055f0:	f7ff ff4e 	bl	8005490 <sensor_lock>
    if (rc) {
 80055f4:	4605      	mov	r5, r0
 80055f6:	2800      	cmp	r0, #0
 80055f8:	d137      	bne.n	800566a <sensor_read+0x86>
        goto err;
    }

    src.user_func = data_func;
 80055fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    src.user_arg = arg;

    if (!sensor_mgr_match_bytype(sensor, (void *)&type)) {
 80055fc:	a904      	add	r1, sp, #16
    src.user_func = data_func;
 80055fe:	9306      	str	r3, [sp, #24]
    src.user_arg = arg;
 8005600:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    if (!sensor_mgr_match_bytype(sensor, (void *)&type)) {
 8005602:	4620      	mov	r0, r4
    src.user_arg = arg;
 8005604:	9307      	str	r3, [sp, #28]
    if (!sensor_mgr_match_bytype(sensor, (void *)&type)) {
 8005606:	f7ff fe47 	bl	8005298 <sensor_mgr_match_bytype>
 800560a:	2800      	cmp	r0, #0
 800560c:	d034      	beq.n	8005678 <sensor_read+0x94>
    curr_ts_ticks = os_cputime_get32();
 800560e:	f000 fb8d 	bl	8005d2c <os_cputime_get32>
    ts = os_cputime_ticks_to_usecs(curr_ts_ticks -
 8005612:	4b1b      	ldr	r3, [pc, #108]	; (8005680 <sensor_read+0x9c>)
    sensor_base_ts.st_cputime = sensor->s_sts.st_cputime = curr_ts_ticks;
 8005614:	6460      	str	r0, [r4, #68]	; 0x44
    ts = os_cputime_ticks_to_usecs(curr_ts_ticks -
 8005616:	6959      	ldr	r1, [r3, #20]
    sensor_base_ts.st_ostv.tv_sec  = sensor_base_ts.st_ostv.tv_sec + (ts +
 8005618:	689a      	ldr	r2, [r3, #8]
    sensor_base_ts.st_cputime = sensor->s_sts.st_cputime = curr_ts_ticks;
 800561a:	6158      	str	r0, [r3, #20]
    sensor_base_ts.st_ostv.tv_sec  = sensor_base_ts.st_ostv.tv_sec + (ts +
 800561c:	1a52      	subs	r2, r2, r1
        sensor_base_ts.st_ostv.tv_usec)/1000000;
 800561e:	4919      	ldr	r1, [pc, #100]	; (8005684 <sensor_read+0xa0>)
    sensor_base_ts.st_ostv.tv_sec  = sensor_base_ts.st_ostv.tv_sec + (ts +
 8005620:	4410      	add	r0, r2
        sensor_base_ts.st_ostv.tv_usec)/1000000;
 8005622:	fbb0 f2f1 	udiv	r2, r0, r1
    sensor_base_ts.st_ostv.tv_sec  = sensor_base_ts.st_ostv.tv_sec + (ts +
 8005626:	e9d3 6700 	ldrd	r6, r7, [r3]
        (sensor_base_ts.st_ostv.tv_usec + ts)%1000000;
 800562a:	fb01 0012 	mls	r0, r1, r2, r0
    sensor_base_ts.st_ostv.tv_sec  = sensor_base_ts.st_ostv.tv_sec + (ts +
 800562e:	eb16 0b02 	adds.w	fp, r6, r2
        goto err;
    }

    sensor_up_timestamp(sensor);

    rc = sensor->s_funcs->sd_read(sensor, type, sensor_read_data_func, &src,
 8005632:	9a10      	ldr	r2, [sp, #64]	; 0x40
    sensor_base_ts.st_ostv.tv_sec  = sensor_base_ts.st_ostv.tv_sec + (ts +
 8005634:	f147 0c00 	adc.w	ip, r7, #0
 8005638:	e9c3 bc00 	strd	fp, ip, [r3]
    sensor_base_ts.st_ostv.tv_usec  =
 800563c:	6098      	str	r0, [r3, #8]
    rc = sensor->s_funcs->sd_read(sensor, type, sensor_read_data_func, &src,
 800563e:	9202      	str	r2, [sp, #8]
 8005640:	aa06      	add	r2, sp, #24
 8005642:	9201      	str	r2, [sp, #4]
 8005644:	4a10      	ldr	r2, [pc, #64]	; (8005688 <sensor_read+0xa4>)
 8005646:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005648:	9200      	str	r2, [sp, #0]
    sensor->s_sts.st_ostv.tv_usec = sensor_base_ts.st_ostv.tv_usec;
 800564a:	63a0      	str	r0, [r4, #56]	; 0x38
    rc = sensor->s_funcs->sd_read(sensor, type, sensor_read_data_func, &src,
 800564c:	6819      	ldr	r1, [r3, #0]
    sensor->s_sts.st_ostv.tv_sec = sensor_base_ts.st_ostv.tv_sec;
 800564e:	e9c4 bc0c 	strd	fp, ip, [r4, #48]	; 0x30
    rc = sensor->s_funcs->sd_read(sensor, type, sensor_read_data_func, &src,
 8005652:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005656:	4620      	mov	r0, r4
 8005658:	4788      	blx	r1
                                  timeout);
    if (rc) {
 800565a:	4605      	mov	r5, r0
 800565c:	b128      	cbz	r0, 800566a <sensor_read+0x86>
        if (sensor->s_err_fn != NULL) {
 800565e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8005660:	b11b      	cbz	r3, 800566a <sensor_read+0x86>
            sensor->s_err_fn(sensor, sensor->s_err_arg, rc);
 8005662:	4602      	mov	r2, r0
 8005664:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8005666:	4620      	mov	r0, r4
 8005668:	4798      	blx	r3
    os_mutex_release(&sensor->s_lock);
 800566a:	1d20      	adds	r0, r4, #4
 800566c:	f000 ffb0 	bl	80065d0 <os_mutex_release>
    }

err:
    sensor_unlock(sensor);
    return (rc);
}
 8005670:	4628      	mov	r0, r5
 8005672:	b008      	add	sp, #32
 8005674:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
        rc = SYS_ENOENT;
 8005678:	f06f 0503 	mvn.w	r5, #3
 800567c:	e7f5      	b.n	800566a <sensor_read+0x86>
 800567e:	bf00      	nop
 8005680:	20003450 	.word	0x20003450
 8005684:	000f4240 	.word	0x000f4240
 8005688:	080052c5 	.word	0x080052c5

0800568c <sensor_mgr_wakeup_event>:
{
 800568c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005690:	b085      	sub	sp, #20
    now = os_time_get();
 8005692:	f001 fafd 	bl	8006c90 <os_time_get>
        sensor_read(sensor, type, NULL, NULL, OS_TIMEOUT_NEVER);
 8005696:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    now = os_time_get();
 800569a:	4607      	mov	r7, r0
    sensor_mgr_lock();
 800569c:	f7ff fe74 	bl	8005388 <sensor_mgr_lock>
    head = SLIST_FIRST(&sensor_mgr.mgr_sensor_list);
 80056a0:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 8005770 <sensor_mgr_wakeup_event+0xe4>
    sensor_mgr_lock();
 80056a4:	f7ff fe70 	bl	8005388 <sensor_mgr_lock>
    head = SLIST_FIRST(&sensor_mgr.mgr_sensor_list);
 80056a8:	f8d9 4030 	ldr.w	r4, [r9, #48]	; 0x30
    sensor_lock(sensor);
 80056ac:	4620      	mov	r0, r4
    os_mutex_release(&sensor->s_lock);
 80056ae:	1d26      	adds	r6, r4, #4
    sensor_lock(sensor);
 80056b0:	f7ff feee 	bl	8005490 <sensor_lock>
    os_mutex_release(&sensor->s_lock);
 80056b4:	4630      	mov	r0, r6
    delta = (int32_t)(sensor->s_next_run - now);
 80056b6:	6a65      	ldr	r5, [r4, #36]	; 0x24
    os_mutex_release(&sensor->s_lock);
 80056b8:	f000 ff8a 	bl	80065d0 <os_mutex_release>
    sensor_mgr_unlock();
 80056bc:	f7ff fe72 	bl	80053a4 <sensor_mgr_unlock>
        sensor_lock(cursor);
 80056c0:	4620      	mov	r0, r4
 80056c2:	f7ff fee5 	bl	8005490 <sensor_lock>
        if (!cursor->s_poll_rate) {
 80056c6:	6a23      	ldr	r3, [r4, #32]
    delta = (int32_t)(sensor->s_next_run - now);
 80056c8:	1bed      	subs	r5, r5, r7
        sensor_ticks = 0;
 80056ca:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
        if (!cursor->s_poll_rate) {
 80056ce:	b93b      	cbnz	r3, 80056e0 <sensor_mgr_wakeup_event+0x54>
    os_mutex_release(&sensor->s_lock);
 80056d0:	4630      	mov	r0, r6
 80056d2:	f000 ff7d 	bl	80065d0 <os_mutex_release>
}
 80056d6:	b005      	add	sp, #20
 80056d8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
            sensor_mgr_unlock();
 80056dc:	f7ff be62 	b.w	80053a4 <sensor_mgr_unlock>
        if (next_wakeup > 0) {
 80056e0:	2d00      	cmp	r5, #0
 80056e2:	d13a      	bne.n	800575a <sensor_mgr_wakeup_event+0xce>
        if (sensor_type_traits_empty(cursor)) {
 80056e4:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80056e6:	b9bb      	cbnz	r3, 8005718 <sensor_mgr_wakeup_event+0x8c>
        sensor_read(sensor, type, NULL, NULL, OS_TIMEOUT_NEVER);
 80056e8:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
 80056ec:	e9cd 3801 	strd	r3, r8, [sp, #4]
 80056f0:	9300      	str	r3, [sp, #0]
 80056f2:	4602      	mov	r2, r0
 80056f4:	460b      	mov	r3, r1
 80056f6:	4620      	mov	r0, r4
 80056f8:	f7ff ff74 	bl	80055e4 <sensor_read>
        sensor_lock(sensor);
 80056fc:	4620      	mov	r0, r4
 80056fe:	f7ff fec7 	bl	8005490 <sensor_lock>
    os_mutex_release(&sensor->s_lock);
 8005702:	4630      	mov	r0, r6
 8005704:	f000 ff64 	bl	80065d0 <os_mutex_release>
        sensor_update_nextrun(cursor, now);
 8005708:	4620      	mov	r0, r4
 800570a:	4639      	mov	r1, r7
 800570c:	f7ff fecc 	bl	80054a8 <sensor_update_nextrun>
    os_mutex_release(&sensor->s_lock);
 8005710:	4630      	mov	r0, r6
 8005712:	f000 ff5d 	bl	80065d0 <os_mutex_release>
 8005716:	e7c5      	b.n	80056a4 <sensor_mgr_wakeup_event+0x18>
    sensor_lock(sensor);
 8005718:	4620      	mov	r0, r4
 800571a:	f7ff feb9 	bl	8005490 <sensor_lock>
    SLIST_FOREACH(stt, &sensor->s_type_traits_list, stt_next) {
 800571e:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 8005720:	2d00      	cmp	r5, #0
 8005722:	d0ee      	beq.n	8005702 <sensor_mgr_wakeup_event+0x76>
    if (!stt || !stt->stt_polls_left) {
 8005724:	8aab      	ldrh	r3, [r5, #20]
 8005726:	b9ab      	cbnz	r3, 8005754 <sensor_mgr_wakeup_event+0xc8>
        sensor_read(sensor, type, NULL, NULL, OS_TIMEOUT_NEVER);
 8005728:	e9cd 3801 	strd	r3, r8, [sp, #4]
 800572c:	9300      	str	r3, [sp, #0]
 800572e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005732:	4620      	mov	r0, r4
 8005734:	f7ff ff56 	bl	80055e4 <sensor_read>
        sensor_lock(sensor);
 8005738:	4620      	mov	r0, r4
 800573a:	f7ff fea9 	bl	8005490 <sensor_lock>
            if (!stt->stt_polls_left && stt->stt_poll_n) {
 800573e:	8aab      	ldrh	r3, [r5, #20]
 8005740:	b91b      	cbnz	r3, 800574a <sensor_mgr_wakeup_event+0xbe>
 8005742:	8a6b      	ldrh	r3, [r5, #18]
 8005744:	b10b      	cbz	r3, 800574a <sensor_mgr_wakeup_event+0xbe>
                stt->stt_polls_left--;
 8005746:	3b01      	subs	r3, #1
 8005748:	82ab      	strh	r3, [r5, #20]
    os_mutex_release(&sensor->s_lock);
 800574a:	4630      	mov	r0, r6
 800574c:	f000 ff40 	bl	80065d0 <os_mutex_release>
    SLIST_FOREACH(stt, &sensor->s_type_traits_list, stt_next) {
 8005750:	6a2d      	ldr	r5, [r5, #32]
 8005752:	e7e5      	b.n	8005720 <sensor_mgr_wakeup_event+0x94>
        stt->stt_polls_left--;
 8005754:	3b01      	subs	r3, #1
 8005756:	82ab      	strh	r3, [r5, #20]
 8005758:	e7fa      	b.n	8005750 <sensor_mgr_wakeup_event+0xc4>
    sensor_mgr_unlock();
 800575a:	f7ff fe23 	bl	80053a4 <sensor_mgr_unlock>
    os_callout_reset(&sensor_mgr.mgr_wakeup_callout, next_wakeup);
 800575e:	4629      	mov	r1, r5
 8005760:	4802      	ldr	r0, [pc, #8]	; (800576c <sensor_mgr_wakeup_event+0xe0>)
}
 8005762:	b005      	add	sp, #20
 8005764:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    os_callout_reset(&sensor_mgr.mgr_wakeup_callout, next_wakeup);
 8005768:	f000 ba60 	b.w	8005c2c <os_callout_reset>
 800576c:	20003404 	.word	0x20003404
 8005770:	200033f8 	.word	0x200033f8

08005774 <timer_handler>:
uint32_t os_flags = OS_RUN_PRIV;

void
timer_handler(void)
{
    os_time_advance(1);
 8005774:	2001      	movs	r0, #1
 8005776:	f001 ba91 	b.w	8006c9c <os_time_advance>
	...

0800577c <os_arch_ctx_sw>:
}

void
os_arch_ctx_sw(struct os_task *t)
{
 800577c:	b508      	push	{r3, lr}
    os_sched_ctx_sw_hook(t);
 800577e:	f001 f86d 	bl	800685c <os_sched_ctx_sw_hook>

    /* Set PendSV interrupt pending bit to force context switch */
    SCB->ICSR = SCB_ICSR_PENDSVSET_Msk;
 8005782:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005786:	4b01      	ldr	r3, [pc, #4]	; (800578c <os_arch_ctx_sw+0x10>)
 8005788:	605a      	str	r2, [r3, #4]
}
 800578a:	bd08      	pop	{r3, pc}
 800578c:	e000ed00 	.word	0xe000ed00

08005790 <os_arch_save_sr>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005790:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8005794:	b672      	cpsid	i
    uint32_t isr_ctx;

    isr_ctx = __get_PRIMASK();
    __disable_irq();
    return (isr_ctx & 1);
}
 8005796:	f000 0001 	and.w	r0, r0, #1
 800579a:	4770      	bx	lr

0800579c <os_arch_restore_sr>:

void
os_arch_restore_sr(os_sr_t isr_ctx)
{
    if (!isr_ctx) {
 800579c:	b900      	cbnz	r0, 80057a0 <os_arch_restore_sr+0x4>
  __ASM volatile ("cpsie i" : : : "memory");
 800579e:	b662      	cpsie	i
        __enable_irq();
    }
}
 80057a0:	4770      	bx	lr

080057a2 <os_arch_in_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057a2:	f3ef 8010 	mrs	r0, PRIMASK
{
    uint32_t isr_ctx;

    isr_ctx = __get_PRIMASK();
    return (isr_ctx & 1);
}
 80057a6:	f000 0001 	and.w	r0, r0, #1
 80057aa:	4770      	bx	lr

080057ac <os_arch_task_stack_init>:
    /* Get stack frame pointer */
    s = (os_stack_t *) ((uint8_t *) stack_top - sizeof(*sf));

    /* Zero out R1-R3, R12, LR */
    for (i = 9; i < 14; ++i) {
        s[i] = 0;
 80057ac:	2300      	movs	r3, #0
{
 80057ae:	b570      	push	{r4, r5, r6, lr}
    s = (os_stack_t *) ((uint8_t *) stack_top - sizeof(*sf));
 80057b0:	f1a1 0540 	sub.w	r5, r1, #64	; 0x40
{
 80057b4:	4606      	mov	r6, r0
        s[i] = 0;
 80057b6:	e941 3307 	strd	r3, r3, [r1, #-28]
 80057ba:	e941 3305 	strd	r3, r3, [r1, #-20]
 80057be:	f841 3c0c 	str.w	r3, [r1, #-12]
    }

    /* Set registers R4 - R11 on stack. */
    os_arch_init_task_stack(s);
 80057c2:	4628      	mov	r0, r5
{
 80057c4:	460c      	mov	r4, r1
    os_arch_init_task_stack(s);
 80057c6:	f001 fae5 	bl	8006d94 <os_arch_init_task_stack>

    /* Set remaining portions of stack frame */
    sf = (struct stack_frame *) s;
    sf->xpsr = INITIAL_xPSR;
 80057ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80057ce:	f844 3c04 	str.w	r3, [r4, #-4]
    sf->pc = (uint32_t)t->t_func;
 80057d2:	6973      	ldr	r3, [r6, #20]
    sf->r0 = (uint32_t)t->t_arg;

    return (s);
}
 80057d4:	4628      	mov	r0, r5
    sf->pc = (uint32_t)t->t_func;
 80057d6:	f844 3c08 	str.w	r3, [r4, #-8]
    sf->r0 = (uint32_t)t->t_arg;
 80057da:	69b3      	ldr	r3, [r6, #24]
 80057dc:	f844 3c20 	str.w	r3, [r4, #-32]
}
 80057e0:	bd70      	pop	{r4, r5, r6, pc}
	...

080057e4 <os_arch_init>:
os_arch_init(void)
{
    /*
     * Trap on divide-by-zero.
     */
    SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
 80057e4:	4a03      	ldr	r2, [pc, #12]	; (80057f4 <os_arch_init+0x10>)
 80057e6:	6953      	ldr	r3, [r2, #20]
 80057e8:	f043 0310 	orr.w	r3, r3, #16
 80057ec:	6153      	str	r3, [r2, #20]
    os_init_idle_task();
 80057ee:	f000 b957 	b.w	8005aa0 <os_init_idle_task>
 80057f2:	bf00      	nop
 80057f4:	e000ed00 	.word	0xe000ed00

080057f8 <os_arch_os_init>:
    SVC_Call(os_arch_init);
}

os_error_t
os_arch_os_init(void)
{
 80057f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80057fa:	f3ef 8405 	mrs	r4, IPSR
    os_error_t err;
    int i;

    /* Cannot be called within an ISR */
    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
 80057fe:	2c00      	cmp	r4, #0
 8005800:	d134      	bne.n	800586c <os_arch_os_init+0x74>
        err = OS_OK;

        /* Drop priority for all interrupts */
        for (i = 0; i < sizeof(NVIC->IP); i++) {
            NVIC->IP[i] = -1;
 8005802:	26ff      	movs	r6, #255	; 0xff
 8005804:	4f1a      	ldr	r7, [pc, #104]	; (8005870 <os_arch_os_init+0x78>)
 8005806:	193d      	adds	r5, r7, r4
        for (i = 0; i < sizeof(NVIC->IP); i++) {
 8005808:	3401      	adds	r4, #1
 800580a:	2cf0      	cmp	r4, #240	; 0xf0
            NVIC->IP[i] = -1;
 800580c:	f885 6300 	strb.w	r6, [r5, #768]	; 0x300
        for (i = 0; i < sizeof(NVIC->IP); i++) {
 8005810:	d1f9      	bne.n	8005806 <os_arch_os_init+0xe>
  \param [in]   IRQn      Interrupt number
  \param [in]   vector    Address of interrupt handler function
 */
__STATIC_INLINE void __NVIC_SetVector(IRQn_Type IRQn, uint32_t vector)
{
  uint32_t vectors = (uint32_t )SCB->VTOR;
 8005812:	4c18      	ldr	r4, [pc, #96]	; (8005874 <os_arch_os_init+0x7c>)
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 8005814:	4e18      	ldr	r6, [pc, #96]	; (8005878 <os_arch_os_init+0x80>)
  uint32_t vectors = (uint32_t )SCB->VTOR;
 8005816:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 8005818:	62ee      	str	r6, [r5, #44]	; 0x2c
  uint32_t vectors = (uint32_t )SCB->VTOR;
 800581a:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 800581c:	4e17      	ldr	r6, [pc, #92]	; (800587c <os_arch_os_init+0x84>)
 800581e:	63ae      	str	r6, [r5, #56]	; 0x38
  uint32_t vectors = (uint32_t )SCB->VTOR;
 8005820:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 8005822:	4e17      	ldr	r6, [pc, #92]	; (8005880 <os_arch_os_init+0x88>)
 8005824:	63ee      	str	r6, [r5, #60]	; 0x3c
  uint32_t vectors = (uint32_t )SCB->VTOR;
 8005826:	68a6      	ldr	r6, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 8005828:	4d16      	ldr	r5, [pc, #88]	; (8005884 <os_arch_os_init+0x8c>)
 800582a:	60b5      	str	r5, [r6, #8]
  uint32_t vectors = (uint32_t )SCB->VTOR;
 800582c:	68a6      	ldr	r6, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 800582e:	60f5      	str	r5, [r6, #12]
  uint32_t vectors = (uint32_t )SCB->VTOR;
 8005830:	68a6      	ldr	r6, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 8005832:	6135      	str	r5, [r6, #16]
  uint32_t vectors = (uint32_t )SCB->VTOR;
 8005834:	68a6      	ldr	r6, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 8005836:	6175      	str	r5, [r6, #20]
  uint32_t vectors = (uint32_t )SCB->VTOR;
 8005838:	68a6      	ldr	r6, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 800583a:	61b5      	str	r5, [r6, #24]
 800583c:	2640      	movs	r6, #64	; 0x40
  uint32_t vectors = (uint32_t )SCB->VTOR;
 800583e:	68a7      	ldr	r7, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 8005840:	51bd      	str	r5, [r7, r6]
 8005842:	3604      	adds	r6, #4
        NVIC_SetVector(NonMaskableInt_IRQn, (uint32_t)os_default_irq_asm);
        NVIC_SetVector(-13, (uint32_t)os_default_irq_asm);
        NVIC_SetVector(MemoryManagement_IRQn, (uint32_t)os_default_irq_asm);
        NVIC_SetVector(BusFault_IRQn, (uint32_t)os_default_irq_asm);
        NVIC_SetVector(UsageFault_IRQn, (uint32_t)os_default_irq_asm);
        for (i = 0; i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
 8005844:	2eec      	cmp	r6, #236	; 0xec
 8005846:	d1fa      	bne.n	800583e <os_arch_os_init+0x46>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005848:	25f0      	movs	r5, #240	; 0xf0
 800584a:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
 800584e:	2510      	movs	r5, #16
 8005850:	77e5      	strb	r5, [r4, #31]
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8005852:	f3ef 8414 	mrs	r4, CONTROL

        /* Set the SVC interrupt to priority 0 (highest configurable) */
        NVIC_SetPriority(SVC_IRQ_NUMBER, SVC_PRIO);

        /* Check if privileged or not */
        if ((__get_CONTROL() & 1) == 0) {
 8005856:	f014 0401 	ands.w	r4, r4, #1
 800585a:	d103      	bne.n	8005864 <os_arch_os_init+0x6c>
            os_arch_init();
 800585c:	f7ff ffc2 	bl	80057e4 <os_arch_init>
        err = OS_OK;
 8005860:	2000      	movs	r0, #0
            svc_os_arch_init();
        }
    }

    return err;
}
 8005862:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SVC_Call(os_arch_init);
 8005864:	f8df c020 	ldr.w	ip, [pc, #32]	; 8005888 <os_arch_os_init+0x90>
 8005868:	df00      	svc	0
 800586a:	e7f9      	b.n	8005860 <os_arch_os_init+0x68>
    err = OS_ERR_IN_ISR;
 800586c:	2007      	movs	r0, #7
 800586e:	e7f8      	b.n	8005862 <os_arch_os_init+0x6a>
 8005870:	e000e100 	.word	0xe000e100
 8005874:	e000ed00 	.word	0xe000ed00
 8005878:	08006d9b 	.word	0x08006d9b
 800587c:	08006de1 	.word	0x08006de1
 8005880:	08006e0b 	.word	0x08006e0b
 8005884:	08006e17 	.word	0x08006e17
 8005888:	080057e5 	.word	0x080057e5

0800588c <os_arch_start>:

uint32_t
os_arch_start(void)
{
 800588c:	b510      	push	{r4, lr}
    struct os_task *t;

    /* Get the highest priority ready to run to set the current task */
    t = os_sched_next_task();
 800588e:	f001 f8bf 	bl	8006a10 <os_sched_next_task>
 8005892:	4604      	mov	r4, r0
    os_sched_set_current_task(t);
 8005894:	f000 fffe 	bl	8006894 <os_sched_set_current_task>

    /* Adjust PSP so it looks like this task just took an exception */
    __set_PSP((uint32_t)t->t_stackptr + offsetof(struct stack_frame, r0));
 8005898:	6823      	ldr	r3, [r4, #0]
 800589a:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 800589c:	f383 8809 	msr	PSP, r3

    /* Intitialize and start system clock timer */
    os_tick_init(OS_TICKS_PER_SEC, OS_TICK_PRIO);
 80058a0:	210e      	movs	r1, #14
 80058a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80058a6:	f002 fe09 	bl	80084bc <os_tick_init>

    /* Mark the OS as started, right before we run our first task */
    g_os_started = 1;
 80058aa:	2201      	movs	r2, #1
 80058ac:	4b03      	ldr	r3, [pc, #12]	; (80058bc <os_arch_start+0x30>)

    /* Perform context switch */
    os_arch_ctx_sw(t);
 80058ae:	4620      	mov	r0, r4
    g_os_started = 1;
 80058b0:	601a      	str	r2, [r3, #0]
    os_arch_ctx_sw(t);
 80058b2:	f7ff ff63 	bl	800577c <os_arch_ctx_sw>

    return (uint32_t)(t->t_arg);
}
 80058b6:	69a0      	ldr	r0, [r4, #24]
 80058b8:	bd10      	pop	{r4, pc}
 80058ba:	bf00      	nop
 80058bc:	200034bc 	.word	0x200034bc

080058c0 <os_arch_os_start>:
     * privileged or un-privileged mode.
     *
     * We switch to using "empty" part of idle task's stack until
     * the svc_os_arch_start() executes SVC, and we will never return.
     */
    os_set_env(g_idle_task.t_stackptr - 1);
 80058c0:	4811      	ldr	r0, [pc, #68]	; (8005908 <os_arch_os_start+0x48>)
{
 80058c2:	b510      	push	{r4, lr}
    os_set_env(g_idle_task.t_stackptr - 1);
 80058c4:	6800      	ldr	r0, [r0, #0]
 80058c6:	3804      	subs	r0, #4
 80058c8:	f001 fa5a 	bl	8006d80 <os_set_env>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058cc:	f3ef 8405 	mrs	r4, IPSR

    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
 80058d0:	b9bc      	cbnz	r4, 8005902 <os_arch_os_start+0x42>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 80058d2:	f3ef 8414 	mrs	r4, CONTROL
         * The following switch statement is really just a sanity check to
         * insure that the os initialization routine was called prior to the
         * os start routine.
         */
        err = OS_OK;
        switch (__get_CONTROL() & 0x03) {
 80058d6:	f004 0403 	and.w	r4, r4, #3
 80058da:	2c02      	cmp	r4, #2
 80058dc:	d003      	beq.n	80058e6 <os_arch_os_start+0x26>
 80058de:	2c03      	cmp	r4, #3
 80058e0:	d00a      	beq.n	80058f8 <os_arch_os_start+0x38>
            /*
             * We are running in Privileged Thread mode w/SP = PSP but we
             * are supposed to be un-privileged.
             */
            if ((os_flags & 1) == OS_RUN_UNPRIV) {
                err = OS_ERR_PRIV;
 80058e2:	2008      	movs	r0, #8
 80058e4:	e007      	b.n	80058f6 <os_arch_os_start+0x36>
            if ((os_flags & 1) == OS_RUN_UNPRIV) {
 80058e6:	4c09      	ldr	r4, [pc, #36]	; (800590c <os_arch_os_start+0x4c>)
 80058e8:	6824      	ldr	r4, [r4, #0]
 80058ea:	07e4      	lsls	r4, r4, #31
 80058ec:	d4f9      	bmi.n	80058e2 <os_arch_os_start+0x22>
    SVC_Call(os_arch_start);
 80058ee:	f8df c020 	ldr.w	ip, [pc, #32]	; 8005910 <os_arch_os_start+0x50>
 80058f2:	df00      	svc	0
 80058f4:	2000      	movs	r0, #0
            svc_os_arch_start();
        }
    }

    return err;
}
 80058f6:	bd10      	pop	{r4, pc}
            if  ((os_flags & 1) == OS_RUN_PRIV) {
 80058f8:	4c04      	ldr	r4, [pc, #16]	; (800590c <os_arch_os_start+0x4c>)
 80058fa:	6824      	ldr	r4, [r4, #0]
 80058fc:	07e4      	lsls	r4, r4, #31
 80058fe:	d5f0      	bpl.n	80058e2 <os_arch_os_start+0x22>
 8005900:	e7f5      	b.n	80058ee <os_arch_os_start+0x2e>
    err = OS_ERR_IN_ISR;
 8005902:	2007      	movs	r0, #7
 8005904:	e7f7      	b.n	80058f6 <os_arch_os_start+0x36>
 8005906:	bf00      	nop
 8005908:	20003468 	.word	0x20003468
 800590c:	20000a24 	.word	0x20000a24
 8005910:	0800588d 	.word	0x0800588d

08005914 <__assert_func>:
}
#endif

void
__assert_func(const char *file, int line, const char *func, const char *e)
{
 8005914:	4605      	mov	r5, r0
 8005916:	b508      	push	{r3, lr}
 8005918:	4674      	mov	r4, lr
 800591a:	460e      	mov	r6, r1
    int sr;

    OS_ENTER_CRITICAL(sr);
 800591c:	f7ff ff38 	bl	8005790 <os_arch_save_sr>
    (void)sr;
    console_blocking_mode();
 8005920:	f7fe fa1e 	bl	8003d60 <console_blocking_mode>
    OS_PRINT_ASSERT(file, line, func, e);
 8005924:	b97d      	cbnz	r5, 8005946 <__assert_func+0x32>
 8005926:	4621      	mov	r1, r4
 8005928:	480a      	ldr	r0, [pc, #40]	; (8005954 <__assert_func+0x40>)
 800592a:	f7fe fa3f 	bl	8003dac <console_printf>

    if (hal_debugger_connected()) {
 800592e:	f002 fdf3 	bl	8008518 <hal_debugger_connected>
 8005932:	b100      	cbz	r0, 8005936 <__assert_func+0x22>
       /*
        * If debugger is attached, breakpoint before the trap.
        */
       asm("bkpt");
 8005934:	be00      	bkpt	0x0000
    }
    SCB->ICSR = SCB_ICSR_NMIPENDSET_Msk;
 8005936:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800593a:	4b07      	ldr	r3, [pc, #28]	; (8005958 <__assert_func+0x44>)
 800593c:	605a      	str	r2, [r3, #4]
    asm("isb");
 800593e:	f3bf 8f6f 	isb	sy
    hal_system_reset();
 8005942:	f002 fdd7 	bl	80084f4 <hal_system_reset>
    OS_PRINT_ASSERT(file, line, func, e);
 8005946:	4633      	mov	r3, r6
 8005948:	462a      	mov	r2, r5
 800594a:	4621      	mov	r1, r4
 800594c:	4803      	ldr	r0, [pc, #12]	; (800595c <__assert_func+0x48>)
 800594e:	f7fe fa2d 	bl	8003dac <console_printf>
 8005952:	e7ec      	b.n	800592e <__assert_func+0x1a>
 8005954:	0800dd29 	.word	0x0800dd29
 8005958:	e000ed00 	.word	0xe000ed00
 800595c:	0800dd38 	.word	0x0800dd38

08005960 <os_default_irq>:
}

void
os_default_irq(struct trap_frame *tf)
{
 8005960:	4604      	mov	r4, r0
    uint32_t *orig_sp;
#endif

    console_blocking_mode();
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
      SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk, (uint32_t)tf->ef);
 8005962:	4d1d      	ldr	r5, [pc, #116]	; (80059d8 <os_default_irq+0x78>)
{
 8005964:	b507      	push	{r0, r1, r2, lr}
    console_blocking_mode();
 8005966:	f7fe f9fb 	bl	8003d60 <console_blocking_mode>
      SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk, (uint32_t)tf->ef);
 800596a:	6869      	ldr	r1, [r5, #4]
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
 800596c:	6822      	ldr	r2, [r4, #0]
 800596e:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8005972:	481a      	ldr	r0, [pc, #104]	; (80059dc <os_default_irq+0x7c>)
 8005974:	f7fe fa1a 	bl	8003dac <console_printf>
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
      tf->ef->r0, tf->ef->r1, tf->ef->r2, tf->ef->r3);
 8005978:	6821      	ldr	r1, [r4, #0]
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
 800597a:	4819      	ldr	r0, [pc, #100]	; (80059e0 <os_default_irq+0x80>)
 800597c:	68cb      	ldr	r3, [r1, #12]
 800597e:	9300      	str	r3, [sp, #0]
 8005980:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
 8005984:	6809      	ldr	r1, [r1, #0]
 8005986:	f7fe fa11 	bl	8003dac <console_printf>
    console_printf(" r4:0x%08lx  r5:0x%08lx  r6:0x%08lx  r7:0x%08lx\n",
 800598a:	6923      	ldr	r3, [r4, #16]
 800598c:	6861      	ldr	r1, [r4, #4]
 800598e:	9300      	str	r3, [sp, #0]
 8005990:	4814      	ldr	r0, [pc, #80]	; (80059e4 <os_default_irq+0x84>)
 8005992:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8005996:	f7fe fa09 	bl	8003dac <console_printf>
      tf->r4, tf->r5, tf->r6, tf->r7);
    console_printf(" r8:0x%08lx  r9:0x%08lx r10:0x%08lx r11:0x%08lx\n",
 800599a:	6a23      	ldr	r3, [r4, #32]
 800599c:	6961      	ldr	r1, [r4, #20]
 800599e:	9300      	str	r3, [sp, #0]
 80059a0:	4811      	ldr	r0, [pc, #68]	; (80059e8 <os_default_irq+0x88>)
 80059a2:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 80059a6:	f7fe fa01 	bl	8003dac <console_printf>
      tf->r8, tf->r9, tf->r10, tf->r11);
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
      tf->ef->r12, tf->ef->lr, tf->ef->pc, tf->ef->psr);
 80059aa:	6821      	ldr	r1, [r4, #0]
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
 80059ac:	480f      	ldr	r0, [pc, #60]	; (80059ec <os_default_irq+0x8c>)
 80059ae:	69cb      	ldr	r3, [r1, #28]
 80059b0:	9300      	str	r3, [sp, #0]
 80059b2:	e9d1 2305 	ldrd	r2, r3, [r1, #20]
 80059b6:	6909      	ldr	r1, [r1, #16]
 80059b8:	f7fe f9f8 	bl	8003dac <console_printf>
    console_printf("ICSR:0x%08lx HFSR:0x%08lx CFSR:0x%08lx\n",
 80059bc:	6869      	ldr	r1, [r5, #4]
 80059be:	480c      	ldr	r0, [pc, #48]	; (80059f0 <os_default_irq+0x90>)
 80059c0:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80059c2:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80059c4:	f7fe f9f2 	bl	8003dac <console_printf>
      SCB->ICSR, SCB->HFSR, SCB->CFSR);
    console_printf("BFAR:0x%08lx MMFAR:0x%08lx\n", SCB->BFAR, SCB->MMFAR);
 80059c8:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 80059ca:	480a      	ldr	r0, [pc, #40]	; (80059f4 <os_default_irq+0x94>)
 80059cc:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80059ce:	f7fe f9ed 	bl	8003dac <console_printf>
            : "r0"
        );
    }
#endif

    hal_system_reset();
 80059d2:	f002 fd8f 	bl	80084f4 <hal_system_reset>
 80059d6:	bf00      	nop
 80059d8:	e000ed00 	.word	0xe000ed00
 80059dc:	0800dd4f 	.word	0x0800dd4f
 80059e0:	0800dd80 	.word	0x0800dd80
 80059e4:	0800ddb1 	.word	0x0800ddb1
 80059e8:	0800dde2 	.word	0x0800dde2
 80059ec:	0800de13 	.word	0x0800de13
 80059f0:	0800de44 	.word	0x0800de44
 80059f4:	0800de6c 	.word	0x0800de6c

080059f8 <os_idle_task>:
 *
 * @param arg unused
 */
void
os_idle_task(void *arg)
{
 80059f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    os_time_t sanity_itvl_ticks;

    sanity_itvl_ticks = (MYNEWT_VAL(SANITY_INTERVAL) * OS_TICKS_PER_SEC) / 1000;
    sanity_last = 0;

    hal_watchdog_tickle();
 80059fc:	f003 f926 	bl	8008c4c <hal_watchdog_tickle>
    sanity_last = 0;
 8005a00:	2400      	movs	r4, #0
        cticks = os_callout_wakeup_ticks(now);
        iticks = min(sticks, cticks);
        /* Wakeup in time to run sanity as well from the idle context,
         * as the idle task does not schedule itself.
         */
        iticks = min(iticks, ((sanity_last + sanity_itvl_ticks) - now));
 8005a02:	f643 2798 	movw	r7, #15000	; 0x3a98
        ++g_os_idle_ctr;
 8005a06:	4d1b      	ldr	r5, [pc, #108]	; (8005a74 <os_idle_task+0x7c>)
 8005a08:	f8df 806c 	ldr.w	r8, [pc, #108]	; 8005a78 <os_idle_task+0x80>
 8005a0c:	682b      	ldr	r3, [r5, #0]
 8005a0e:	3301      	adds	r3, #1
 8005a10:	602b      	str	r3, [r5, #0]
        now = os_time_get();
 8005a12:	f001 f93d 	bl	8006c90 <os_time_get>
        if (OS_TIME_TICK_GT(now, sanity_last + sanity_itvl_ticks)) {
 8005a16:	f5a0 536a 	sub.w	r3, r0, #14976	; 0x3a80
 8005a1a:	3b18      	subs	r3, #24
 8005a1c:	1b1b      	subs	r3, r3, r4
 8005a1e:	2b00      	cmp	r3, #0
        now = os_time_get();
 8005a20:	4606      	mov	r6, r0
        if (OS_TIME_TICK_GT(now, sanity_last + sanity_itvl_ticks)) {
 8005a22:	dd04      	ble.n	8005a2e <os_idle_task+0x36>
            os_sanity_run();
 8005a24:	f000 fec4 	bl	80067b0 <os_sanity_run>
            sanity_last = now;
 8005a28:	4634      	mov	r4, r6
            hal_watchdog_tickle();
 8005a2a:	f003 f90f 	bl	8008c4c <hal_watchdog_tickle>
        OS_ENTER_CRITICAL(sr);
 8005a2e:	f7ff feaf 	bl	8005790 <os_arch_save_sr>
 8005a32:	4606      	mov	r6, r0
        now = os_time_get();
 8005a34:	f001 f92c 	bl	8006c90 <os_time_get>
 8005a38:	4682      	mov	sl, r0
        sticks = os_sched_wakeup_ticks(now);
 8005a3a:	f000 ffcf 	bl	80069dc <os_sched_wakeup_ticks>
 8005a3e:	4681      	mov	r9, r0
        cticks = os_callout_wakeup_ticks(now);
 8005a40:	4650      	mov	r0, sl
 8005a42:	f000 f957 	bl	8005cf4 <os_callout_wakeup_ticks>
        iticks = min(sticks, cticks);
 8005a46:	4581      	cmp	r9, r0
 8005a48:	bf28      	it	cs
 8005a4a:	4681      	movcs	r9, r0
        iticks = min(iticks, ((sanity_last + sanity_itvl_ticks) - now));
 8005a4c:	19e3      	adds	r3, r4, r7
 8005a4e:	eba3 000a 	sub.w	r0, r3, sl
 8005a52:	4548      	cmp	r0, r9
 8005a54:	bf28      	it	cs
 8005a56:	4648      	movcs	r0, r9

        if (iticks < MIN_IDLE_TICKS) {
 8005a58:	2863      	cmp	r0, #99	; 0x63
 8005a5a:	d908      	bls.n	8005a6e <os_idle_task+0x76>
 8005a5c:	4540      	cmp	r0, r8
 8005a5e:	bf28      	it	cs
 8005a60:	4640      	movcs	r0, r8
        /* Tell the architecture specific support to put the processor to sleep
         * for 'n' ticks.
         */

        os_trace_idle();
        os_tick_idle(iticks);
 8005a62:	f002 fd1d 	bl	80084a0 <os_tick_idle>
        OS_EXIT_CRITICAL(sr);
 8005a66:	4630      	mov	r0, r6
 8005a68:	f7ff fe98 	bl	800579c <os_arch_restore_sr>
        ++g_os_idle_ctr;
 8005a6c:	e7ce      	b.n	8005a0c <os_idle_task+0x14>
            iticks = 0;
 8005a6e:	2000      	movs	r0, #0
 8005a70:	e7f7      	b.n	8005a62 <os_idle_task+0x6a>
 8005a72:	bf00      	nop
 8005a74:	200034b8 	.word	0x200034b8
 8005a78:	000927c0 	.word	0x000927c0

08005a7c <os_main>:
os_main(void *arg)
{
    int (*fn)(int argc, char **argv) = arg;

#if !MYNEWT_VAL(SELFTEST)
    fn(0, NULL);
 8005a7c:	2100      	movs	r1, #0
{
 8005a7e:	b508      	push	{r3, lr}
 8005a80:	4603      	mov	r3, r0
    fn(0, NULL);
 8005a82:	4608      	mov	r0, r1
 8005a84:	4798      	blx	r3
    (void)fn;
    while (1) {
        os_eventq_run(os_eventq_dflt_get());
    }
#endif
    assert(0);
 8005a86:	2300      	movs	r3, #0
 8005a88:	461a      	mov	r2, r3
 8005a8a:	4619      	mov	r1, r3
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f7ff ff41 	bl	8005914 <__assert_func>
	...

08005a94 <os_started>:
}
 8005a94:	4b01      	ldr	r3, [pc, #4]	; (8005a9c <os_started+0x8>)
 8005a96:	6818      	ldr	r0, [r3, #0]
 8005a98:	4770      	bx	lr
 8005a9a:	bf00      	nop
 8005a9c:	200034bc 	.word	0x200034bc

08005aa0 <os_init_idle_task>:
}
#endif

void
os_init_idle_task(void)
{
 8005aa0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    int rc;

    rc = os_task_init(&g_idle_task, "idle", os_idle_task, NULL,
 8005aa2:	2340      	movs	r3, #64	; 0x40
 8005aa4:	9303      	str	r3, [sp, #12]
 8005aa6:	4b10      	ldr	r3, [pc, #64]	; (8005ae8 <os_init_idle_task+0x48>)
 8005aa8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005aac:	9302      	str	r3, [sp, #8]
 8005aae:	23ff      	movs	r3, #255	; 0xff
 8005ab0:	490e      	ldr	r1, [pc, #56]	; (8005aec <os_init_idle_task+0x4c>)
 8005ab2:	e9cd 3200 	strd	r3, r2, [sp]
 8005ab6:	480e      	ldr	r0, [pc, #56]	; (8005af0 <os_init_idle_task+0x50>)
 8005ab8:	2300      	movs	r3, #0
 8005aba:	4a0e      	ldr	r2, [pc, #56]	; (8005af4 <os_init_idle_task+0x54>)
 8005abc:	f001 f850 	bl	8006b60 <os_task_init>
            OS_IDLE_PRIO, OS_WAIT_FOREVER, g_idle_task_stack,
            OS_STACK_ALIGN(OS_IDLE_STACK_SIZE));
    assert(rc == 0);
 8005ac0:	b128      	cbz	r0, 8005ace <os_init_idle_task+0x2e>
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	4619      	mov	r1, r3
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f7ff ff23 	bl	8005914 <__assert_func>

    /* Initialize sanity */
    rc = os_sanity_init();
 8005ace:	f000 fe97 	bl	8006800 <os_sanity_init>
    assert(rc == 0);
 8005ad2:	2800      	cmp	r0, #0
 8005ad4:	d1f5      	bne.n	8005ac2 <os_init_idle_task+0x22>

    rc = hal_watchdog_init(MYNEWT_VAL(WATCHDOG_INTERVAL));
 8005ad6:	f247 5030 	movw	r0, #30000	; 0x7530
 8005ada:	f003 f893 	bl	8008c04 <hal_watchdog_init>
    assert(rc == 0);
 8005ade:	2800      	cmp	r0, #0
 8005ae0:	d1ef      	bne.n	8005ac2 <os_init_idle_task+0x22>

#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
    os_cputime_timer_init(&os_wdog_monitor, os_wdog_monitor_tmo, NULL);
    os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
}
 8005ae2:	b005      	add	sp, #20
 8005ae4:	f85d fb04 	ldr.w	pc, [sp], #4
 8005ae8:	20000a28 	.word	0x20000a28
 8005aec:	0800de8d 	.word	0x0800de8d
 8005af0:	20003468 	.word	0x20003468
 8005af4:	080059f9 	.word	0x080059f9

08005af8 <os_init>:

void
os_init(int (*main_fn)(int argc, char **arg))
{
 8005af8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
#if MYNEWT_VAL(RTT)
    memset(&_SEGGER_RTT, 0, sizeof(_SEGGER_RTT));
    SEGGER_RTT_Init();
#endif

    TAILQ_INIT(&g_callout_list);
 8005afa:	2300      	movs	r3, #0
 8005afc:	4a1c      	ldr	r2, [pc, #112]	; (8005b70 <os_init+0x78>)
{
 8005afe:	4604      	mov	r4, r0
    TAILQ_INIT(&g_callout_list);
 8005b00:	e9c2 3200 	strd	r3, r2, [r2]
    STAILQ_INIT(&g_os_task_list);
 8005b04:	4a1b      	ldr	r2, [pc, #108]	; (8005b74 <os_init+0x7c>)
 8005b06:	e9c2 3200 	strd	r3, r2, [r2]
    os_eventq_init(os_eventq_dflt_get());
 8005b0a:	f000 fa69 	bl	8005fe0 <os_eventq_dflt_get>
 8005b0e:	f000 f9cd 	bl	8005eac <os_eventq_init>

    /* Initialize device list. */
    os_dev_reset();
 8005b12:	f000 f9c3 	bl	8005e9c <os_dev_reset>

    err = os_arch_os_init();
 8005b16:	f7ff fe6f 	bl	80057f8 <os_arch_os_init>
    assert(err == OS_OK);
 8005b1a:	b128      	cbz	r0, 8005b28 <os_init+0x30>
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	461a      	mov	r2, r3
 8005b20:	4619      	mov	r1, r3
 8005b22:	4618      	mov	r0, r3
 8005b24:	f7ff fef6 	bl	8005914 <__assert_func>

    if (main_fn) {
 8005b28:	b194      	cbz	r4, 8005b50 <os_init+0x58>
        err = os_task_init(&os_main_task, "main", os_main, main_fn,
 8005b2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b2e:	9303      	str	r3, [sp, #12]
 8005b30:	4b11      	ldr	r3, [pc, #68]	; (8005b78 <os_init+0x80>)
 8005b32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005b36:	9302      	str	r3, [sp, #8]
 8005b38:	237f      	movs	r3, #127	; 0x7f
 8005b3a:	4910      	ldr	r1, [pc, #64]	; (8005b7c <os_init+0x84>)
 8005b3c:	e9cd 3200 	strd	r3, r2, [sp]
 8005b40:	480f      	ldr	r0, [pc, #60]	; (8005b80 <os_init+0x88>)
 8005b42:	4623      	mov	r3, r4
 8005b44:	4a0f      	ldr	r2, [pc, #60]	; (8005b84 <os_init+0x8c>)
 8005b46:	f001 f80b 	bl	8006b60 <os_task_init>
                           OS_MAIN_TASK_PRIO, OS_WAIT_FOREVER, os_main_stack,
                           OS_STACK_ALIGN(OS_MAIN_STACK_SIZE));
        assert(err == 0);
 8005b4a:	f010 0fff 	tst.w	r0, #255	; 0xff
 8005b4e:	d1e5      	bne.n	8005b1c <os_init+0x24>
    }
    /* Call bsp related OS initializations */
    hal_bsp_init();
 8005b50:	f002 fb12 	bl	8008178 <hal_bsp_init>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_PRIMARY);
 8005b54:	2001      	movs	r0, #1
 8005b56:	f000 f941 	bl	8005ddc <os_dev_initialize_all>
    assert(err == OS_OK);
 8005b5a:	f010 0fff 	tst.w	r0, #255	; 0xff
 8005b5e:	d1dd      	bne.n	8005b1c <os_init+0x24>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_SECONDARY);
 8005b60:	2002      	movs	r0, #2
 8005b62:	f000 f93b 	bl	8005ddc <os_dev_initialize_all>
    assert(err == OS_OK);
 8005b66:	f010 0fff 	tst.w	r0, #255	; 0xff
 8005b6a:	d1d7      	bne.n	8005b1c <os_init+0x24>
}
 8005b6c:	b004      	add	sp, #16
 8005b6e:	bd10      	pop	{r4, pc}
 8005b70:	200034c0 	.word	0x200034c0
 8005b74:	200034e4 	.word	0x200034e4
 8005b78:	20000b28 	.word	0x20000b28
 8005b7c:	0800de88 	.word	0x0800de88
 8005b80:	20001b28 	.word	0x20001b28
 8005b84:	08005a7d 	.word	0x08005a7d

08005b88 <os_start>:

void
os_start(void)
{
 8005b88:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_SCHEDULING)
    os_error_t err;

    /* Enable the watchdog prior to starting the OS */
    hal_watchdog_enable();
 8005b8a:	f003 f853 	bl	8008c34 <hal_watchdog_enable>

    err = os_arch_os_start();
 8005b8e:	f7ff fe97 	bl	80058c0 <os_arch_os_start>
    assert(err == OS_OK);
 8005b92:	b128      	cbz	r0, 8005ba0 <os_start+0x18>
 8005b94:	2300      	movs	r3, #0
 8005b96:	461a      	mov	r2, r3
 8005b98:	4619      	mov	r1, r3
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f7ff feba 	bl	8005914 <__assert_func>
#else
    assert(0);
#endif
}
 8005ba0:	bd08      	pop	{r3, pc}
	...

08005ba4 <os_pkg_init>:
    hal_system_reset();
}

void
os_pkg_init(void)
{
 8005ba4:	b508      	push	{r3, lr}
    os_error_t err;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
 8005ba6:	4b0a      	ldr	r3, [pc, #40]	; (8005bd0 <os_pkg_init+0x2c>)
 8005ba8:	781b      	ldrb	r3, [r3, #0]
 8005baa:	b92b      	cbnz	r3, 8005bb8 <os_pkg_init+0x14>
 8005bac:	2300      	movs	r3, #0
 8005bae:	461a      	mov	r2, r3
 8005bb0:	4619      	mov	r1, r3
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f7ff feae 	bl	8005914 <__assert_func>

    err = os_dev_initialize_all(OS_DEV_INIT_KERNEL);
 8005bb8:	2003      	movs	r0, #3
 8005bba:	f000 f90f 	bl	8005ddc <os_dev_initialize_all>
    assert(err == OS_OK);
 8005bbe:	f010 0fff 	tst.w	r0, #255	; 0xff
 8005bc2:	d1f3      	bne.n	8005bac <os_pkg_init+0x8>

    os_mempool_module_init();
 8005bc4:	f000 fc72 	bl	80064ac <os_mempool_module_init>
    os_msys_init();
}
 8005bc8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    os_msys_init();
 8005bcc:	f000 bcc6 	b.w	800655c <os_msys_init>
 8005bd0:	200033f0 	.word	0x200033f0

08005bd4 <os_callout_init>:

struct os_callout_list g_callout_list;

void os_callout_init(struct os_callout *c, struct os_eventq *evq,
                     os_event_fn *ev_cb, void *ev_arg)
{
 8005bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bd6:	4604      	mov	r4, r0
 8005bd8:	460d      	mov	r5, r1
 8005bda:	4617      	mov	r7, r2
 8005bdc:	461e      	mov	r6, r3
    os_trace_api_u32x2(OS_TRACE_ID_CALLOUT_INIT, (uint32_t)c, (uint32_t)evq);

    memset(c, 0, sizeof(*c));
 8005bde:	2220      	movs	r2, #32
 8005be0:	2100      	movs	r1, #0
 8005be2:	f001 fa32 	bl	800704a <memset>
    c->c_ev.ev_cb = ev_cb;
    c->c_ev.ev_arg = ev_arg;
 8005be6:	e9c4 7601 	strd	r7, r6, [r4, #4]
    c->c_evq = evq;
 8005bea:	6125      	str	r5, [r4, #16]

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_INIT);
}
 8005bec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005bf0 <os_callout_stop>:

void
os_callout_stop(struct os_callout *c)
{
 8005bf0:	b538      	push	{r3, r4, r5, lr}
 8005bf2:	4604      	mov	r4, r0
    os_sr_t sr;

    os_trace_api_u32(OS_TRACE_ID_CALLOUT_STOP, (uint32_t)c);

    OS_ENTER_CRITICAL(sr);
 8005bf4:	f7ff fdcc 	bl	8005790 <os_arch_save_sr>

    if (os_callout_queued(c)) {
 8005bf8:	69e2      	ldr	r2, [r4, #28]
    OS_ENTER_CRITICAL(sr);
 8005bfa:	4605      	mov	r5, r0
    if (os_callout_queued(c)) {
 8005bfc:	b132      	cbz	r2, 8005c0c <os_callout_stop+0x1c>
        TAILQ_REMOVE(&g_callout_list, c, c_next);
 8005bfe:	69a3      	ldr	r3, [r4, #24]
 8005c00:	b173      	cbz	r3, 8005c20 <os_callout_stop+0x30>
 8005c02:	61da      	str	r2, [r3, #28]
 8005c04:	69e2      	ldr	r2, [r4, #28]
 8005c06:	6013      	str	r3, [r2, #0]
        c->c_next.tqe_prev = NULL;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	61e3      	str	r3, [r4, #28]
    }

    if (c->c_evq) {
 8005c0c:	6920      	ldr	r0, [r4, #16]
 8005c0e:	b110      	cbz	r0, 8005c16 <os_callout_stop+0x26>
        os_eventq_remove(c->c_evq, &c->c_ev);
 8005c10:	4621      	mov	r1, r4
 8005c12:	f000 f9c6 	bl	8005fa2 <os_eventq_remove>
    }

    OS_EXIT_CRITICAL(sr);
 8005c16:	4628      	mov	r0, r5

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_STOP);
}
 8005c18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    OS_EXIT_CRITICAL(sr);
 8005c1c:	f7ff bdbe 	b.w	800579c <os_arch_restore_sr>
        TAILQ_REMOVE(&g_callout_list, c, c_next);
 8005c20:	4901      	ldr	r1, [pc, #4]	; (8005c28 <os_callout_stop+0x38>)
 8005c22:	604a      	str	r2, [r1, #4]
 8005c24:	e7ee      	b.n	8005c04 <os_callout_stop+0x14>
 8005c26:	bf00      	nop
 8005c28:	200034c0 	.word	0x200034c0

08005c2c <os_callout_reset>:
    struct os_callout *entry;
    os_sr_t sr;
    int ret;

    /* Ensure this callout has been initialized. */
    assert(c->c_evq != NULL);
 8005c2c:	6903      	ldr	r3, [r0, #16]
{
 8005c2e:	b570      	push	{r4, r5, r6, lr}
 8005c30:	4604      	mov	r4, r0
 8005c32:	460d      	mov	r5, r1
    assert(c->c_evq != NULL);
 8005c34:	b923      	cbnz	r3, 8005c40 <os_callout_reset+0x14>
 8005c36:	461a      	mov	r2, r3
 8005c38:	4619      	mov	r1, r3
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f7ff fe6a 	bl	8005914 <__assert_func>

    os_trace_api_u32x2(OS_TRACE_ID_CALLOUT_RESET, (uint32_t)c, (uint32_t)ticks);

    if (ticks > INT32_MAX) {
 8005c40:	2900      	cmp	r1, #0
 8005c42:	db1c      	blt.n	8005c7e <os_callout_reset+0x52>
        ret = OS_EINVAL;
        goto err;
    }

    OS_ENTER_CRITICAL(sr);
 8005c44:	f7ff fda4 	bl	8005790 <os_arch_save_sr>
 8005c48:	4606      	mov	r6, r0

    os_callout_stop(c);
 8005c4a:	4620      	mov	r0, r4
 8005c4c:	f7ff ffd0 	bl	8005bf0 <os_callout_stop>

    if (ticks == 0) {
        ticks = 1;
 8005c50:	2d00      	cmp	r5, #0
 8005c52:	bf08      	it	eq
 8005c54:	2501      	moveq	r5, #1
    }

    c->c_ticks = os_time_get() + ticks;
 8005c56:	f001 f81b 	bl	8006c90 <os_time_get>

    entry = NULL;
    TAILQ_FOREACH(entry, &g_callout_list, c_next) {
 8005c5a:	4a10      	ldr	r2, [pc, #64]	; (8005c9c <os_callout_reset+0x70>)
    c->c_ticks = os_time_get() + ticks;
 8005c5c:	4428      	add	r0, r5
    TAILQ_FOREACH(entry, &g_callout_list, c_next) {
 8005c5e:	6813      	ldr	r3, [r2, #0]
    c->c_ticks = os_time_get() + ticks;
 8005c60:	6160      	str	r0, [r4, #20]
    TAILQ_FOREACH(entry, &g_callout_list, c_next) {
 8005c62:	b933      	cbnz	r3, 8005c72 <os_callout_reset+0x46>
    }

    if (entry) {
        TAILQ_INSERT_BEFORE(entry, c, c_next);
    } else {
        TAILQ_INSERT_TAIL(&g_callout_list, c, c_next);
 8005c64:	61a3      	str	r3, [r4, #24]
 8005c66:	6853      	ldr	r3, [r2, #4]
 8005c68:	61e3      	str	r3, [r4, #28]
 8005c6a:	601c      	str	r4, [r3, #0]
 8005c6c:	3418      	adds	r4, #24
 8005c6e:	6054      	str	r4, [r2, #4]
 8005c70:	e00e      	b.n	8005c90 <os_callout_reset+0x64>
        if (OS_TIME_TICK_LT(c->c_ticks, entry->c_ticks)) {
 8005c72:	6959      	ldr	r1, [r3, #20]
 8005c74:	1a41      	subs	r1, r0, r1
 8005c76:	2900      	cmp	r1, #0
 8005c78:	db03      	blt.n	8005c82 <os_callout_reset+0x56>
    TAILQ_FOREACH(entry, &g_callout_list, c_next) {
 8005c7a:	699b      	ldr	r3, [r3, #24]
 8005c7c:	e7f1      	b.n	8005c62 <os_callout_reset+0x36>
        ret = OS_EINVAL;
 8005c7e:	2002      	movs	r0, #2

    ret = OS_OK;

err:
    os_trace_api_ret_u32(OS_TRACE_ID_CALLOUT_RESET, (uint32_t)ret);
    return ret;
 8005c80:	e00a      	b.n	8005c98 <os_callout_reset+0x6c>
        TAILQ_INSERT_BEFORE(entry, c, c_next);
 8005c82:	69da      	ldr	r2, [r3, #28]
 8005c84:	e9c4 3206 	strd	r3, r2, [r4, #24]
 8005c88:	69da      	ldr	r2, [r3, #28]
 8005c8a:	6014      	str	r4, [r2, #0]
 8005c8c:	3418      	adds	r4, #24
 8005c8e:	61dc      	str	r4, [r3, #28]
    OS_EXIT_CRITICAL(sr);
 8005c90:	4630      	mov	r0, r6
 8005c92:	f7ff fd83 	bl	800579c <os_arch_restore_sr>
    ret = OS_OK;
 8005c96:	2000      	movs	r0, #0
}
 8005c98:	bd70      	pop	{r4, r5, r6, pc}
 8005c9a:	bf00      	nop
 8005c9c:	200034c0 	.word	0x200034c0

08005ca0 <os_callout_tick>:
 * to run, it posts an event for each callout that's ready to run,
 * to the event queue provided to os_callout_init().
 */
void
os_callout_tick(void)
{
 8005ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    struct os_callout *c;
    uint32_t now;

    os_trace_api_void(OS_TRACE_ID_CALLOUT_TICK);

    now = os_time_get();
 8005ca2:	f000 fff5 	bl	8006c90 <os_time_get>
 8005ca6:	2700      	movs	r7, #0
 8005ca8:	4606      	mov	r6, r0

    while (1) {
        OS_ENTER_CRITICAL(sr);
        c = TAILQ_FIRST(&g_callout_list);
 8005caa:	4d11      	ldr	r5, [pc, #68]	; (8005cf0 <os_callout_tick+0x50>)
        OS_ENTER_CRITICAL(sr);
 8005cac:	f7ff fd70 	bl	8005790 <os_arch_save_sr>
        c = TAILQ_FIRST(&g_callout_list);
 8005cb0:	682c      	ldr	r4, [r5, #0]
        if (c) {
 8005cb2:	b154      	cbz	r4, 8005cca <os_callout_tick+0x2a>
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
 8005cb4:	6963      	ldr	r3, [r4, #20]
 8005cb6:	1af3      	subs	r3, r6, r3
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	db11      	blt.n	8005ce0 <os_callout_tick+0x40>
 8005cbc:	e9d4 3206 	ldrd	r3, r2, [r4, #24]
                TAILQ_REMOVE(&g_callout_list, c, c_next);
 8005cc0:	b163      	cbz	r3, 8005cdc <os_callout_tick+0x3c>
 8005cc2:	61da      	str	r2, [r3, #28]
 8005cc4:	69e2      	ldr	r2, [r4, #28]
 8005cc6:	6013      	str	r3, [r2, #0]
                c->c_next.tqe_prev = NULL;
 8005cc8:	61e7      	str	r7, [r4, #28]
            } else {
                c = NULL;
            }
        }
        OS_EXIT_CRITICAL(sr);
 8005cca:	f7ff fd67 	bl	800579c <os_arch_restore_sr>

        if (c) {
 8005cce:	b16c      	cbz	r4, 8005cec <os_callout_tick+0x4c>
            if (c->c_evq) {
 8005cd0:	6920      	ldr	r0, [r4, #16]
 8005cd2:	b138      	cbz	r0, 8005ce4 <os_callout_tick+0x44>
                os_eventq_put(c->c_evq, &c->c_ev);
 8005cd4:	4621      	mov	r1, r4
 8005cd6:	f000 f8f1 	bl	8005ebc <os_eventq_put>
 8005cda:	e7e7      	b.n	8005cac <os_callout_tick+0xc>
                TAILQ_REMOVE(&g_callout_list, c, c_next);
 8005cdc:	606a      	str	r2, [r5, #4]
 8005cde:	e7f1      	b.n	8005cc4 <os_callout_tick+0x24>
 8005ce0:	2400      	movs	r4, #0
 8005ce2:	e7f2      	b.n	8005cca <os_callout_tick+0x2a>
            } else {
                c->c_ev.ev_cb(&c->c_ev);
 8005ce4:	6863      	ldr	r3, [r4, #4]
 8005ce6:	4620      	mov	r0, r4
 8005ce8:	4798      	blx	r3
 8005cea:	e7df      	b.n	8005cac <os_callout_tick+0xc>
            break;
        }
    }

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_TICK);
}
 8005cec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cee:	bf00      	nop
 8005cf0:	200034c0 	.word	0x200034c0

08005cf4 <os_callout_wakeup_ticks>:
 *
 * @return Number of ticks to first pending callout
 */
os_time_t
os_callout_wakeup_ticks(os_time_t now)
{
 8005cf4:	b510      	push	{r4, lr}
 8005cf6:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_callout *c;

    OS_ASSERT_CRITICAL();
 8005cf8:	f7ff fd53 	bl	80057a2 <os_arch_in_critical>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	b918      	cbnz	r0, 8005d08 <os_callout_wakeup_ticks+0x14>
 8005d00:	4602      	mov	r2, r0
 8005d02:	4601      	mov	r1, r0
 8005d04:	f7ff fe06 	bl	8005914 <__assert_func>

    c = TAILQ_FIRST(&g_callout_list);
 8005d08:	4b05      	ldr	r3, [pc, #20]	; (8005d20 <os_callout_wakeup_ticks+0x2c>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
    if (c != NULL) {
 8005d0c:	b123      	cbz	r3, 8005d18 <os_callout_wakeup_ticks+0x24>
        if (OS_TIME_TICK_GEQ(c->c_ticks, now)) {
 8005d0e:	6958      	ldr	r0, [r3, #20]
 8005d10:	1b00      	subs	r0, r0, r4
            rt = c->c_ticks - now;
        } else {
            rt = 0;     /* callout time is in the past */
 8005d12:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    } else {
        rt = OS_TIMEOUT_NEVER;
    }

    return (rt);
}
 8005d16:	bd10      	pop	{r4, pc}
        rt = OS_TIMEOUT_NEVER;
 8005d18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d1c:	e7fb      	b.n	8005d16 <os_callout_wakeup_ticks+0x22>
 8005d1e:	bf00      	nop
 8005d20:	200034c0 	.word	0x200034c0

08005d24 <os_cputime_init>:

    /* Set the ticks per microsecond. */
#if defined(OS_CPUTIME_FREQ_HIGH)
    g_os_cputime.ticks_per_usec = clock_freq / 1000000U;
#endif
    rc = hal_timer_config(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM), clock_freq);
 8005d24:	4601      	mov	r1, r0
 8005d26:	2000      	movs	r0, #0
 8005d28:	f002 bcfc 	b.w	8008724 <hal_timer_config>

08005d2c <os_cputime_get32>:
uint32_t
os_cputime_get32(void)
{
    uint32_t cpu_time;

    cpu_time = hal_timer_read(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM));
 8005d2c:	2000      	movs	r0, #0
 8005d2e:	f002 bd3b 	b.w	80087a8 <hal_timer_read>

08005d32 <os_dev_initialize>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_initialize(struct os_dev *dev)
{
 8005d32:	b510      	push	{r4, lr}
    int rc;

    rc = dev->od_init(dev, dev->od_init_arg);
 8005d34:	e9d0 3104 	ldrd	r3, r1, [r0, #16]
{
 8005d38:	4604      	mov	r4, r0
    rc = dev->od_init(dev, dev->od_init_arg);
 8005d3a:	4798      	blx	r3
 8005d3c:	7ee3      	ldrb	r3, [r4, #27]
    if (rc != 0) {
 8005d3e:	b120      	cbz	r0, 8005d4a <os_dev_initialize+0x18>
        if (dev->od_flags & OS_DEV_F_INIT_CRITICAL) {
 8005d40:	f013 0f08 	tst.w	r3, #8
            goto err;
        }
    } else {
        dev->od_flags |= OS_DEV_F_STATUS_READY;
    }
    return 0;
 8005d44:	bf08      	it	eq
 8005d46:	2000      	moveq	r0, #0
err:
    return rc;
}
 8005d48:	bd10      	pop	{r4, pc}
        dev->od_flags |= OS_DEV_F_STATUS_READY;
 8005d4a:	f043 0301 	orr.w	r3, r3, #1
 8005d4e:	76e3      	strb	r3, [r4, #27]
 8005d50:	e7fa      	b.n	8005d48 <os_dev_initialize+0x16>
	...

08005d54 <os_dev_create>:

int
os_dev_create(struct os_dev *dev, const char *name, uint8_t stage,
        uint8_t priority, os_dev_init_func_t od_init, void *arg)
{
 8005d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d56:	4604      	mov	r4, r0
    dev->od_open_ref = 0;
 8005d58:	2500      	movs	r5, #0
    dev->od_name = name;
 8005d5a:	61c1      	str	r1, [r0, #28]
{
 8005d5c:	461f      	mov	r7, r3
    dev->od_priority = priority;
 8005d5e:	7663      	strb	r3, [r4, #25]
    dev->od_init = od_init;
 8005d60:	9b06      	ldr	r3, [sp, #24]
    dev->od_stage = stage;
 8005d62:	7622      	strb	r2, [r4, #24]
    dev->od_init = od_init;
 8005d64:	6103      	str	r3, [r0, #16]
    dev->od_init_arg = arg;
 8005d66:	9b07      	ldr	r3, [sp, #28]
{
 8005d68:	4616      	mov	r6, r2
    dev->od_init_arg = arg;
 8005d6a:	6143      	str	r3, [r0, #20]
    memset(&dev->od_handlers, 0, sizeof(dev->od_handlers));
 8005d6c:	2210      	movs	r2, #16
    dev->od_open_ref = 0;
 8005d6e:	8345      	strh	r5, [r0, #26]
    memset(&dev->od_handlers, 0, sizeof(dev->od_handlers));
 8005d70:	4629      	mov	r1, r5
 8005d72:	f001 f96a 	bl	800704a <memset>
    if (STAILQ_FIRST(&g_os_dev_list) == NULL) {
 8005d76:	4a17      	ldr	r2, [pc, #92]	; (8005dd4 <os_dev_create+0x80>)
 8005d78:	6810      	ldr	r0, [r2, #0]
 8005d7a:	4613      	mov	r3, r2
 8005d7c:	b960      	cbnz	r0, 8005d98 <os_dev_create+0x44>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
 8005d7e:	4623      	mov	r3, r4
 8005d80:	f843 0f20 	str.w	r0, [r3, #32]!
 8005d84:	e9c2 4300 	strd	r4, r3, [r2]
    rc = os_dev_add(dev);
    if (rc != 0) {
        goto err;
    }

    if (g_os_started) {
 8005d88:	4b13      	ldr	r3, [pc, #76]	; (8005dd8 <os_dev_create+0x84>)
 8005d8a:	6818      	ldr	r0, [r3, #0]
 8005d8c:	b300      	cbz	r0, 8005dd0 <os_dev_create+0x7c>
        rc = os_dev_initialize(dev);
 8005d8e:	4620      	mov	r0, r4
    }
err:
    return (rc);
}
 8005d90:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        rc = os_dev_initialize(dev);
 8005d94:	f7ff bfcd 	b.w	8005d32 <os_dev_initialize>
    if (STAILQ_FIRST(&g_os_dev_list) == NULL) {
 8005d98:	4602      	mov	r2, r0
    prev_dev = NULL;
 8005d9a:	4629      	mov	r1, r5
        if (dev->od_stage < cur_dev->od_stage ||
 8005d9c:	7e15      	ldrb	r5, [r2, #24]
 8005d9e:	42ae      	cmp	r6, r5
 8005da0:	d30a      	bcc.n	8005db8 <os_dev_create+0x64>
 8005da2:	d102      	bne.n	8005daa <os_dev_create+0x56>
            ((dev->od_stage == cur_dev->od_stage) &&
 8005da4:	7e55      	ldrb	r5, [r2, #25]
 8005da6:	42bd      	cmp	r5, r7
 8005da8:	d806      	bhi.n	8005db8 <os_dev_create+0x64>
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
 8005daa:	6a15      	ldr	r5, [r2, #32]
 8005dac:	4611      	mov	r1, r2
 8005dae:	b90d      	cbnz	r5, 8005db4 <os_dev_create+0x60>
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
 8005db0:	6225      	str	r5, [r4, #32]
 8005db2:	e005      	b.n	8005dc0 <os_dev_create+0x6c>
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
 8005db4:	462a      	mov	r2, r5
 8005db6:	e7f1      	b.n	8005d9c <os_dev_create+0x48>
    if (prev_dev) {
 8005db8:	b139      	cbz	r1, 8005dca <os_dev_create+0x76>
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
 8005dba:	6a0a      	ldr	r2, [r1, #32]
 8005dbc:	6222      	str	r2, [r4, #32]
 8005dbe:	b912      	cbnz	r2, 8005dc6 <os_dev_create+0x72>
 8005dc0:	f104 0220 	add.w	r2, r4, #32
 8005dc4:	605a      	str	r2, [r3, #4]
 8005dc6:	620c      	str	r4, [r1, #32]
 8005dc8:	e7de      	b.n	8005d88 <os_dev_create+0x34>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
 8005dca:	6220      	str	r0, [r4, #32]
 8005dcc:	601c      	str	r4, [r3, #0]
 8005dce:	e7db      	b.n	8005d88 <os_dev_create+0x34>
}
 8005dd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005dd2:	bf00      	nop
 8005dd4:	20001b78 	.word	0x20001b78
 8005dd8:	200034bc 	.word	0x200034bc

08005ddc <os_dev_initialize_all>:

int
os_dev_initialize_all(uint8_t stage)
{
 8005ddc:	b538      	push	{r3, r4, r5, lr}
 8005dde:	4605      	mov	r5, r0
    struct os_dev *dev;
    int rc = 0;

    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
 8005de0:	4b07      	ldr	r3, [pc, #28]	; (8005e00 <os_dev_initialize_all+0x24>)
 8005de2:	681c      	ldr	r4, [r3, #0]
 8005de4:	b90c      	cbnz	r4, 8005dea <os_dev_initialize_all+0xe>
 8005de6:	4620      	mov	r0, r4
                break;
            }
        }
    }

    return (rc);
 8005de8:	e009      	b.n	8005dfe <os_dev_initialize_all+0x22>
        if (dev->od_stage == stage) {
 8005dea:	7e23      	ldrb	r3, [r4, #24]
 8005dec:	42ab      	cmp	r3, r5
 8005dee:	d001      	beq.n	8005df4 <os_dev_initialize_all+0x18>
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
 8005df0:	6a24      	ldr	r4, [r4, #32]
 8005df2:	e7f7      	b.n	8005de4 <os_dev_initialize_all+0x8>
            rc = os_dev_initialize(dev);
 8005df4:	4620      	mov	r0, r4
 8005df6:	f7ff ff9c 	bl	8005d32 <os_dev_initialize>
            if (rc) {
 8005dfa:	2800      	cmp	r0, #0
 8005dfc:	d0f8      	beq.n	8005df0 <os_dev_initialize_all+0x14>
}
 8005dfe:	bd38      	pop	{r3, r4, r5, pc}
 8005e00:	20001b78 	.word	0x20001b78

08005e04 <os_dev_lookup>:
    return (rc);
}

struct os_dev *
os_dev_lookup(const char *name)
{
 8005e04:	b538      	push	{r3, r4, r5, lr}
 8005e06:	4605      	mov	r5, r0
    struct os_dev *dev;

    dev = NULL;
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
 8005e08:	4b06      	ldr	r3, [pc, #24]	; (8005e24 <os_dev_lookup+0x20>)
 8005e0a:	681c      	ldr	r4, [r3, #0]
 8005e0c:	b90c      	cbnz	r4, 8005e12 <os_dev_lookup+0xe>
        if (!strcmp(dev->od_name, name)) {
            break;
        }
    }
    return (dev);
}
 8005e0e:	4620      	mov	r0, r4
 8005e10:	bd38      	pop	{r3, r4, r5, pc}
        if (!strcmp(dev->od_name, name)) {
 8005e12:	4629      	mov	r1, r5
 8005e14:	69e0      	ldr	r0, [r4, #28]
 8005e16:	f001 f92f 	bl	8007078 <strcmp>
 8005e1a:	2800      	cmp	r0, #0
 8005e1c:	d0f7      	beq.n	8005e0e <os_dev_lookup+0xa>
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
 8005e1e:	6a24      	ldr	r4, [r4, #32]
 8005e20:	e7f4      	b.n	8005e0c <os_dev_lookup+0x8>
 8005e22:	bf00      	nop
 8005e24:	20001b78 	.word	0x20001b78

08005e28 <os_dev_open>:

struct os_dev *
os_dev_open(const char *devname, uint32_t timo, void *arg)
{
 8005e28:	b570      	push	{r4, r5, r6, lr}
 8005e2a:	460d      	mov	r5, r1
 8005e2c:	4616      	mov	r6, r2
    struct os_dev *dev;
    os_sr_t sr;
    int rc;

    dev = os_dev_lookup(devname);
 8005e2e:	f7ff ffe9 	bl	8005e04 <os_dev_lookup>
    if (dev == NULL) {
 8005e32:	4604      	mov	r4, r0
 8005e34:	b910      	cbnz	r0, 8005e3c <os_dev_open+0x14>
        return (NULL);
 8005e36:	2400      	movs	r4, #0
    OS_EXIT_CRITICAL(sr);

    return (dev);
err:
    return (NULL);
}
 8005e38:	4620      	mov	r0, r4
 8005e3a:	bd70      	pop	{r4, r5, r6, pc}
    if ((dev->od_flags & OS_DEV_F_STATUS_READY) == 0) {
 8005e3c:	7ec3      	ldrb	r3, [r0, #27]
 8005e3e:	07db      	lsls	r3, r3, #31
 8005e40:	d5f9      	bpl.n	8005e36 <os_dev_open+0xe>
    if (dev->od_handlers.od_open) {
 8005e42:	6803      	ldr	r3, [r0, #0]
 8005e44:	b95b      	cbnz	r3, 8005e5e <os_dev_open+0x36>
    OS_ENTER_CRITICAL(sr);
 8005e46:	f7ff fca3 	bl	8005790 <os_arch_save_sr>
    ++dev->od_open_ref;
 8005e4a:	7ea3      	ldrb	r3, [r4, #26]
 8005e4c:	3301      	adds	r3, #1
 8005e4e:	76a3      	strb	r3, [r4, #26]
    dev->od_flags |= OS_DEV_F_STATUS_OPEN;
 8005e50:	7ee3      	ldrb	r3, [r4, #27]
 8005e52:	f043 0302 	orr.w	r3, r3, #2
 8005e56:	76e3      	strb	r3, [r4, #27]
    OS_EXIT_CRITICAL(sr);
 8005e58:	f7ff fca0 	bl	800579c <os_arch_restore_sr>
    return (dev);
 8005e5c:	e7ec      	b.n	8005e38 <os_dev_open+0x10>
        rc = dev->od_handlers.od_open(dev, timo, arg);
 8005e5e:	4632      	mov	r2, r6
 8005e60:	4629      	mov	r1, r5
 8005e62:	4798      	blx	r3
        if (rc != 0) {
 8005e64:	2800      	cmp	r0, #0
 8005e66:	d0ee      	beq.n	8005e46 <os_dev_open+0x1e>
 8005e68:	e7e5      	b.n	8005e36 <os_dev_open+0xe>

08005e6a <os_dev_close>:
os_dev_close(struct os_dev *dev)
{
    int rc;
    os_sr_t sr;

    if (dev->od_handlers.od_close) {
 8005e6a:	68c3      	ldr	r3, [r0, #12]
{
 8005e6c:	b510      	push	{r4, lr}
 8005e6e:	4604      	mov	r4, r0
    if (dev->od_handlers.od_close) {
 8005e70:	b953      	cbnz	r3, 8005e88 <os_dev_close+0x1e>
        if (rc != 0) {
            goto err;
        }
    }

    OS_ENTER_CRITICAL(sr);
 8005e72:	f7ff fc8d 	bl	8005790 <os_arch_save_sr>
    if (--dev->od_open_ref == 0) {
 8005e76:	7ea3      	ldrb	r3, [r4, #26]
 8005e78:	3b01      	subs	r3, #1
 8005e7a:	b2db      	uxtb	r3, r3
 8005e7c:	76a3      	strb	r3, [r4, #26]
 8005e7e:	b13b      	cbz	r3, 8005e90 <os_dev_close+0x26>
        dev->od_flags &= ~(OS_DEV_F_STATUS_OPEN | OS_DEV_F_STATUS_SUSPENDED);
    }
    OS_EXIT_CRITICAL(sr);
 8005e80:	f7ff fc8c 	bl	800579c <os_arch_restore_sr>

    return (0);
 8005e84:	2000      	movs	r0, #0
 8005e86:	e002      	b.n	8005e8e <os_dev_close+0x24>
        rc = dev->od_handlers.od_close(dev);
 8005e88:	4798      	blx	r3
        if (rc != 0) {
 8005e8a:	2800      	cmp	r0, #0
 8005e8c:	d0f1      	beq.n	8005e72 <os_dev_close+0x8>
err:
    return (rc);
}
 8005e8e:	bd10      	pop	{r4, pc}
        dev->od_flags &= ~(OS_DEV_F_STATUS_OPEN | OS_DEV_F_STATUS_SUSPENDED);
 8005e90:	7ee3      	ldrb	r3, [r4, #27]
 8005e92:	f023 0306 	bic.w	r3, r3, #6
 8005e96:	76e3      	strb	r3, [r4, #27]
 8005e98:	e7f2      	b.n	8005e80 <os_dev_close+0x16>
	...

08005e9c <os_dev_reset>:
}

void
os_dev_reset(void)
{
    STAILQ_INIT(&g_os_dev_list);
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	4b02      	ldr	r3, [pc, #8]	; (8005ea8 <os_dev_reset+0xc>)
 8005ea0:	e9c3 2300 	strd	r2, r3, [r3]
}
 8005ea4:	4770      	bx	lr
 8005ea6:	bf00      	nop
 8005ea8:	20001b78 	.word	0x20001b78

08005eac <os_eventq_init>:
static struct os_eventq os_eventq_main;

void
os_eventq_init(struct os_eventq *evq)
{
    memset(evq, 0, sizeof(*evq));
 8005eac:	2200      	movs	r2, #0
    STAILQ_INIT(&evq->evq_list);
 8005eae:	4603      	mov	r3, r0
    memset(evq, 0, sizeof(*evq));
 8005eb0:	6002      	str	r2, [r0, #0]
 8005eb2:	6042      	str	r2, [r0, #4]
    STAILQ_INIT(&evq->evq_list);
 8005eb4:	f843 2f08 	str.w	r2, [r3, #8]!
 8005eb8:	60c3      	str	r3, [r0, #12]
}
 8005eba:	4770      	bx	lr

08005ebc <os_eventq_put>:
    return evq->evq_list.stqh_last != NULL;
}

void
os_eventq_put(struct os_eventq *evq, struct os_event *ev)
{
 8005ebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ec0:	460d      	mov	r5, r1
 8005ec2:	4606      	mov	r6, r0
    int resched;
    os_sr_t sr;

    os_trace_api_u32x2(OS_TRACE_ID_EVENTQ_PUT, (uint32_t)evq, (uint32_t)ev);

    OS_ENTER_CRITICAL(sr);
 8005ec4:	f7ff fc64 	bl	8005790 <os_arch_save_sr>

    /* Do not queue if already queued */
    if (OS_EVENT_QUEUED(ev)) {
 8005ec8:	782c      	ldrb	r4, [r5, #0]
    OS_ENTER_CRITICAL(sr);
 8005eca:	4680      	mov	r8, r0
    if (OS_EVENT_QUEUED(ev)) {
 8005ecc:	b11c      	cbz	r4, 8005ed6 <os_eventq_put+0x1a>
    if (resched) {
        os_sched(NULL);
    }

    os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
}
 8005ece:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        OS_EXIT_CRITICAL(sr);
 8005ed2:	f7ff bc63 	b.w	800579c <os_arch_restore_sr>
    ev->ev_queued = 1;
 8005ed6:	2701      	movs	r7, #1
 8005ed8:	702f      	strb	r7, [r5, #0]
    STAILQ_INSERT_TAIL(&evq->evq_list, ev, ev_next);
 8005eda:	68f3      	ldr	r3, [r6, #12]
    if (evq->evq_task) {
 8005edc:	6870      	ldr	r0, [r6, #4]
    STAILQ_INSERT_TAIL(&evq->evq_list, ev, ev_next);
 8005ede:	60ec      	str	r4, [r5, #12]
 8005ee0:	601d      	str	r5, [r3, #0]
 8005ee2:	350c      	adds	r5, #12
 8005ee4:	60f5      	str	r5, [r6, #12]
    if (evq->evq_task) {
 8005ee6:	b180      	cbz	r0, 8005f0a <os_eventq_put+0x4e>
        if (evq->evq_task->t_state == OS_TASK_SLEEP) {
 8005ee8:	7b03      	ldrb	r3, [r0, #12]
 8005eea:	2b02      	cmp	r3, #2
 8005eec:	d102      	bne.n	8005ef4 <os_eventq_put+0x38>
            os_sched_wakeup(evq->evq_task);
 8005eee:	f000 fd23 	bl	8006938 <os_sched_wakeup>
            resched = 1;
 8005ef2:	463c      	mov	r4, r7
        evq->evq_task = NULL;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	6073      	str	r3, [r6, #4]
    OS_EXIT_CRITICAL(sr);
 8005ef8:	4640      	mov	r0, r8
 8005efa:	f7ff fc4f 	bl	800579c <os_arch_restore_sr>
    if (resched) {
 8005efe:	b134      	cbz	r4, 8005f0e <os_eventq_put+0x52>
}
 8005f00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        os_sched(NULL);
 8005f04:	2000      	movs	r0, #0
 8005f06:	f000 bccb 	b.w	80068a0 <os_sched>
    resched = 0;
 8005f0a:	4604      	mov	r4, r0
 8005f0c:	e7f4      	b.n	8005ef8 <os_eventq_put+0x3c>
}
 8005f0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005f12 <os_eventq_get>:
    return ev;
}

struct os_event *
os_eventq_get(struct os_eventq *evq)
{
 8005f12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f14:	4604      	mov	r4, r0
    os_sr_t sr;
    struct os_task *t;

    os_trace_api_u32(OS_TRACE_ID_EVENTQ_GET, (uint32_t)evq);

    t = os_sched_get_current_task();
 8005f16:	f000 fcb7 	bl	8006888 <os_sched_get_current_task>
    if (evq->evq_owner != t) {
 8005f1a:	6823      	ldr	r3, [r4, #0]
    t = os_sched_get_current_task();
 8005f1c:	4605      	mov	r5, r0
    if (evq->evq_owner != t) {
 8005f1e:	4283      	cmp	r3, r0
 8005f20:	d001      	beq.n	8005f26 <os_eventq_get+0x14>
        if (evq->evq_owner == NULL) {
 8005f22:	b9b3      	cbnz	r3, 8005f52 <os_eventq_get+0x40>
            evq->evq_owner = t;
 8005f24:	6020      	str	r0, [r4, #0]
             * by another.
             */
            assert(0);
        }
    }
    OS_ENTER_CRITICAL(sr);
 8005f26:	f7ff fc33 	bl	8005790 <os_arch_save_sr>
 8005f2a:	4607      	mov	r7, r0
pull_one:
    ev = STAILQ_FIRST(&evq->evq_list);
 8005f2c:	68a6      	ldr	r6, [r4, #8]
    if (ev) {
 8005f2e:	b1b6      	cbz	r6, 8005f5e <os_eventq_get+0x4c>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
 8005f30:	68f3      	ldr	r3, [r6, #12]
 8005f32:	60a3      	str	r3, [r4, #8]
 8005f34:	b913      	cbnz	r3, 8005f3c <os_eventq_get+0x2a>
 8005f36:	f104 0308 	add.w	r3, r4, #8
 8005f3a:	60e3      	str	r3, [r4, #12]
        ev->ev_queued = 0;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	7033      	strb	r3, [r6, #0]
        t->t_flags &= ~OS_TASK_FLAG_EVQ_WAIT;
 8005f40:	7b6b      	ldrb	r3, [r5, #13]

        OS_ENTER_CRITICAL(sr);
        evq->evq_task = NULL;
        goto pull_one;
    }
    OS_EXIT_CRITICAL(sr);
 8005f42:	4638      	mov	r0, r7
        t->t_flags &= ~OS_TASK_FLAG_EVQ_WAIT;
 8005f44:	f023 0308 	bic.w	r3, r3, #8
 8005f48:	736b      	strb	r3, [r5, #13]
    OS_EXIT_CRITICAL(sr);
 8005f4a:	f7ff fc27 	bl	800579c <os_arch_restore_sr>
#if MYNEWT_VAL(OS_EVENTQ_DEBUG)
    evq->evq_prev = ev;
#endif

    return (ev);
}
 8005f4e:	4630      	mov	r0, r6
 8005f50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            assert(0);
 8005f52:	2300      	movs	r3, #0
 8005f54:	461a      	mov	r2, r3
 8005f56:	4619      	mov	r1, r3
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f7ff fcdb 	bl	8005914 <__assert_func>
        os_sched_sleep(evq->evq_task, OS_TIMEOUT_NEVER);
 8005f5e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
        evq->evq_task = t;
 8005f62:	6065      	str	r5, [r4, #4]
        os_sched_sleep(evq->evq_task, OS_TIMEOUT_NEVER);
 8005f64:	4628      	mov	r0, r5
 8005f66:	f000 fcad 	bl	80068c4 <os_sched_sleep>
        t->t_flags |= OS_TASK_FLAG_EVQ_WAIT;
 8005f6a:	7b6b      	ldrb	r3, [r5, #13]
        OS_EXIT_CRITICAL(sr);
 8005f6c:	4638      	mov	r0, r7
        t->t_flags |= OS_TASK_FLAG_EVQ_WAIT;
 8005f6e:	f043 0308 	orr.w	r3, r3, #8
 8005f72:	736b      	strb	r3, [r5, #13]
        OS_EXIT_CRITICAL(sr);
 8005f74:	f7ff fc12 	bl	800579c <os_arch_restore_sr>
        os_sched(NULL);
 8005f78:	4630      	mov	r0, r6
 8005f7a:	f000 fc91 	bl	80068a0 <os_sched>
        OS_ENTER_CRITICAL(sr);
 8005f7e:	f7ff fc07 	bl	8005790 <os_arch_save_sr>
        evq->evq_task = NULL;
 8005f82:	6066      	str	r6, [r4, #4]
        OS_ENTER_CRITICAL(sr);
 8005f84:	4607      	mov	r7, r0
        goto pull_one;
 8005f86:	e7d1      	b.n	8005f2c <os_eventq_get+0x1a>

08005f88 <os_eventq_run>:
}
#endif

void
os_eventq_run(struct os_eventq *evq)
{
 8005f88:	b510      	push	{r4, lr}
#if MYNEWT_VAL(OS_EVENTQ_MONITOR)
    struct os_eventq_mon *mon;
    uint32_t ticks;
#endif

    ev = os_eventq_get(evq);
 8005f8a:	f7ff ffc2 	bl	8005f12 <os_eventq_get>
    assert(ev->ev_cb != NULL);
 8005f8e:	6843      	ldr	r3, [r0, #4]
 8005f90:	b923      	cbnz	r3, 8005f9c <os_eventq_run+0x14>
 8005f92:	461a      	mov	r2, r3
 8005f94:	4619      	mov	r1, r3
 8005f96:	4618      	mov	r0, r3
 8005f98:	f7ff fcbc 	bl	8005914 <__assert_func>
        if (ticks > mon->em_max) {
            mon->em_max = ticks;
        }
    }
#endif
}
 8005f9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ev->ev_cb(ev);
 8005fa0:	4718      	bx	r3

08005fa2 <os_eventq_remove>:
    return (ev);
}

void
os_eventq_remove(struct os_eventq *evq, struct os_event *ev)
{
 8005fa2:	b538      	push	{r3, r4, r5, lr}
 8005fa4:	460c      	mov	r4, r1
 8005fa6:	4605      	mov	r5, r0
    os_sr_t sr;

    os_trace_api_u32x2(OS_TRACE_ID_EVENTQ_REMOVE, (uint32_t)evq, (uint32_t)ev);

    OS_ENTER_CRITICAL(sr);
 8005fa8:	f7ff fbf2 	bl	8005790 <os_arch_save_sr>
    if (OS_EVENT_QUEUED(ev)) {
 8005fac:	7823      	ldrb	r3, [r4, #0]
 8005fae:	b143      	cbz	r3, 8005fc2 <os_eventq_remove+0x20>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
 8005fb0:	68ab      	ldr	r3, [r5, #8]
 8005fb2:	68e2      	ldr	r2, [r4, #12]
 8005fb4:	42a3      	cmp	r3, r4
 8005fb6:	d10b      	bne.n	8005fd0 <os_eventq_remove+0x2e>
 8005fb8:	60aa      	str	r2, [r5, #8]
 8005fba:	b912      	cbnz	r2, 8005fc2 <os_eventq_remove+0x20>
 8005fbc:	f105 0308 	add.w	r3, r5, #8
 8005fc0:	60eb      	str	r3, [r5, #12]
    }
    ev->ev_queued = 0;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	7023      	strb	r3, [r4, #0]
    OS_EXIT_CRITICAL(sr);

    os_trace_api_ret(OS_TRACE_ID_EVENTQ_REMOVE);
}
 8005fc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    OS_EXIT_CRITICAL(sr);
 8005fca:	f7ff bbe7 	b.w	800579c <os_arch_restore_sr>
 8005fce:	460b      	mov	r3, r1
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
 8005fd0:	68d9      	ldr	r1, [r3, #12]
 8005fd2:	42a1      	cmp	r1, r4
 8005fd4:	d1fb      	bne.n	8005fce <os_eventq_remove+0x2c>
 8005fd6:	60da      	str	r2, [r3, #12]
 8005fd8:	2a00      	cmp	r2, #0
 8005fda:	d1f2      	bne.n	8005fc2 <os_eventq_remove+0x20>
 8005fdc:	330c      	adds	r3, #12
 8005fde:	e7ef      	b.n	8005fc0 <os_eventq_remove+0x1e>

08005fe0 <os_eventq_dflt_get>:

struct os_eventq *
os_eventq_dflt_get(void)
{
    return &os_eventq_main;
}
 8005fe0:	4800      	ldr	r0, [pc, #0]	; (8005fe4 <os_eventq_dflt_get+0x4>)
 8005fe2:	4770      	bx	lr
 8005fe4:	20001b80 	.word	0x20001b80

08005fe8 <_os_mbuf_trailingspace>:
{
    struct os_mbuf_pool *omp;

    omp = om->om_omp;

    return (&om->om_databuf[0] + omp->omp_databuf_len) -
 8005fe8:	6882      	ldr	r2, [r0, #8]
 8005fea:	f100 0310 	add.w	r3, r0, #16
 8005fee:	8812      	ldrh	r2, [r2, #0]
 8005ff0:	4413      	add	r3, r2
      (om->om_data + om->om_len);
 8005ff2:	88c2      	ldrh	r2, [r0, #6]
 8005ff4:	6800      	ldr	r0, [r0, #0]
 8005ff6:	4410      	add	r0, r2
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
 8005ff8:	1a18      	subs	r0, r3, r0
}
 8005ffa:	b280      	uxth	r0, r0
 8005ffc:	4770      	bx	lr

08005ffe <_os_mbuf_copypkthdr>:
 * @param new_buf The new buffer to copy the packet header into
 * @param old_buf The old buffer to copy the packet header from
 */
static inline void
_os_mbuf_copypkthdr(struct os_mbuf *new_buf, struct os_mbuf *old_buf)
{
 8005ffe:	b538      	push	{r3, r4, r5, lr}
    assert(new_buf->om_len == 0);
 8006000:	88c3      	ldrh	r3, [r0, #6]
{
 8006002:	4604      	mov	r4, r0
 8006004:	460d      	mov	r5, r1
    assert(new_buf->om_len == 0);
 8006006:	b12b      	cbz	r3, 8006014 <_os_mbuf_copypkthdr+0x16>
 8006008:	2300      	movs	r3, #0
 800600a:	461a      	mov	r2, r3
 800600c:	4619      	mov	r1, r3
 800600e:	4618      	mov	r0, r3
 8006010:	f7ff fc80 	bl	8005914 <__assert_func>

    memcpy(&new_buf->om_databuf[0], &old_buf->om_databuf[0],
 8006014:	f100 0310 	add.w	r3, r0, #16
 8006018:	794a      	ldrb	r2, [r1, #5]
 800601a:	4618      	mov	r0, r3
 800601c:	3110      	adds	r1, #16
 800601e:	f001 f807 	bl	8007030 <memcpy>
 8006022:	4603      	mov	r3, r0
           old_buf->om_pkthdr_len);
    new_buf->om_pkthdr_len = old_buf->om_pkthdr_len;
 8006024:	796a      	ldrb	r2, [r5, #5]
 8006026:	7162      	strb	r2, [r4, #5]
    new_buf->om_data = new_buf->om_databuf + old_buf->om_pkthdr_len;
 8006028:	796a      	ldrb	r2, [r5, #5]
 800602a:	4413      	add	r3, r2
 800602c:	6023      	str	r3, [r4, #0]
}
 800602e:	bd38      	pop	{r3, r4, r5, pc}

08006030 <os_mqueue_init>:
{
 8006030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    STAILQ_INIT(&mq->mq_head);
 8006032:	2500      	movs	r5, #0
{
 8006034:	4604      	mov	r4, r0
 8006036:	460f      	mov	r7, r1
 8006038:	4616      	mov	r6, r2
    STAILQ_INIT(&mq->mq_head);
 800603a:	e9c0 5000 	strd	r5, r0, [r0]
    memset(ev, 0, sizeof(*ev));
 800603e:	2210      	movs	r2, #16
 8006040:	4629      	mov	r1, r5
 8006042:	3008      	adds	r0, #8
 8006044:	f001 f801 	bl	800704a <memset>
    ev->ev_arg = arg;
 8006048:	e9c4 7603 	strd	r7, r6, [r4, #12]
}
 800604c:	4628      	mov	r0, r5
 800604e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006050 <os_mqueue_get>:
{
 8006050:	b538      	push	{r3, r4, r5, lr}
 8006052:	4605      	mov	r5, r0
    OS_ENTER_CRITICAL(sr);
 8006054:	f7ff fb9c 	bl	8005790 <os_arch_save_sr>
    mp = STAILQ_FIRST(&mq->mq_head);
 8006058:	682c      	ldr	r4, [r5, #0]
    if (mp) {
 800605a:	b144      	cbz	r4, 800606e <os_mqueue_get+0x1e>
        STAILQ_REMOVE_HEAD(&mq->mq_head, omp_next);
 800605c:	6863      	ldr	r3, [r4, #4]
 800605e:	602b      	str	r3, [r5, #0]
 8006060:	b903      	cbnz	r3, 8006064 <os_mqueue_get+0x14>
 8006062:	606d      	str	r5, [r5, #4]
    OS_EXIT_CRITICAL(sr);
 8006064:	f7ff fb9a 	bl	800579c <os_arch_restore_sr>
        m = OS_MBUF_PKTHDR_TO_MBUF(mp);
 8006068:	f1a4 0010 	sub.w	r0, r4, #16
}
 800606c:	bd38      	pop	{r3, r4, r5, pc}
    OS_EXIT_CRITICAL(sr);
 800606e:	f7ff fb95 	bl	800579c <os_arch_restore_sr>
        m = NULL;
 8006072:	4620      	mov	r0, r4
 8006074:	e7fa      	b.n	800606c <os_mqueue_get+0x1c>

08006076 <os_mqueue_put>:
{
 8006076:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!OS_MBUF_IS_PKTHDR(m)) {
 8006078:	7953      	ldrb	r3, [r2, #5]
{
 800607a:	4606      	mov	r6, r0
    if (!OS_MBUF_IS_PKTHDR(m)) {
 800607c:	2b07      	cmp	r3, #7
{
 800607e:	460c      	mov	r4, r1
 8006080:	4615      	mov	r5, r2
    if (!OS_MBUF_IS_PKTHDR(m)) {
 8006082:	d913      	bls.n	80060ac <os_mqueue_put+0x36>
    STAILQ_INSERT_TAIL(&mq->mq_head, mp, omp_next);
 8006084:	2700      	movs	r7, #0
    OS_ENTER_CRITICAL(sr);
 8006086:	f7ff fb83 	bl	8005790 <os_arch_save_sr>
    STAILQ_INSERT_TAIL(&mq->mq_head, mp, omp_next);
 800608a:	6873      	ldr	r3, [r6, #4]
 800608c:	616f      	str	r7, [r5, #20]
    mp = OS_MBUF_PKTHDR(m);
 800608e:	f105 0210 	add.w	r2, r5, #16
    STAILQ_INSERT_TAIL(&mq->mq_head, mp, omp_next);
 8006092:	3514      	adds	r5, #20
 8006094:	601a      	str	r2, [r3, #0]
 8006096:	6075      	str	r5, [r6, #4]
    OS_EXIT_CRITICAL(sr);
 8006098:	f7ff fb80 	bl	800579c <os_arch_restore_sr>
    if (evq) {
 800609c:	b144      	cbz	r4, 80060b0 <os_mqueue_put+0x3a>
        os_eventq_put(evq, &mq->mq_ev);
 800609e:	4620      	mov	r0, r4
 80060a0:	f106 0108 	add.w	r1, r6, #8
 80060a4:	f7ff ff0a 	bl	8005ebc <os_eventq_put>
    return (0);
 80060a8:	4638      	mov	r0, r7
}
 80060aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return (rc);
 80060ac:	2002      	movs	r0, #2
 80060ae:	e7fc      	b.n	80060aa <os_mqueue_put+0x34>
    return (0);
 80060b0:	4620      	mov	r0, r4
 80060b2:	e7fa      	b.n	80060aa <os_mqueue_put+0x34>

080060b4 <os_mbuf_pool_init>:
    omp->omp_databuf_len = buf_len - sizeof(struct os_mbuf);
 80060b4:	3a10      	subs	r2, #16
 80060b6:	8002      	strh	r2, [r0, #0]
    omp->omp_pool = mp;
 80060b8:	6041      	str	r1, [r0, #4]
}
 80060ba:	2000      	movs	r0, #0
 80060bc:	4770      	bx	lr

080060be <os_mbuf_get>:
{
 80060be:	b538      	push	{r3, r4, r5, lr}
    if (leadingspace > omp->omp_databuf_len) {
 80060c0:	8803      	ldrh	r3, [r0, #0]
{
 80060c2:	4604      	mov	r4, r0
    if (leadingspace > omp->omp_databuf_len) {
 80060c4:	428b      	cmp	r3, r1
{
 80060c6:	460d      	mov	r5, r1
    if (leadingspace > omp->omp_databuf_len) {
 80060c8:	d30c      	bcc.n	80060e4 <os_mbuf_get+0x26>
    om = os_memblock_get(omp->omp_pool);
 80060ca:	6840      	ldr	r0, [r0, #4]
 80060cc:	f000 f9af 	bl	800642e <os_memblock_get>
    if (!om) {
 80060d0:	b138      	cbz	r0, 80060e2 <os_mbuf_get+0x24>
    SLIST_NEXT(om, om_next) = NULL;
 80060d2:	2300      	movs	r3, #0
 80060d4:	60c3      	str	r3, [r0, #12]
    om->om_flags = 0;
 80060d6:	6043      	str	r3, [r0, #4]
    om->om_data = (&om->om_databuf[0] + leadingspace);
 80060d8:	f100 0310 	add.w	r3, r0, #16
 80060dc:	442b      	add	r3, r5
 80060de:	6003      	str	r3, [r0, #0]
    om->om_omp = omp;
 80060e0:	6084      	str	r4, [r0, #8]
}
 80060e2:	bd38      	pop	{r3, r4, r5, pc}
        om = NULL;
 80060e4:	2000      	movs	r0, #0
    return om;
 80060e6:	e7fc      	b.n	80060e2 <os_mbuf_get+0x24>

080060e8 <os_mbuf_get_pkthdr>:
{
 80060e8:	b538      	push	{r3, r4, r5, lr}
    pkthdr_len = user_pkthdr_len + sizeof(struct os_mbuf_pkthdr);
 80060ea:	f101 0508 	add.w	r5, r1, #8
    if ((pkthdr_len > omp->omp_databuf_len) || (pkthdr_len > 255)) {
 80060ee:	8803      	ldrh	r3, [r0, #0]
    pkthdr_len = user_pkthdr_len + sizeof(struct os_mbuf_pkthdr);
 80060f0:	b2ac      	uxth	r4, r5
    if ((pkthdr_len > omp->omp_databuf_len) || (pkthdr_len > 255)) {
 80060f2:	42a3      	cmp	r3, r4
 80060f4:	d30d      	bcc.n	8006112 <os_mbuf_get_pkthdr+0x2a>
 80060f6:	2cff      	cmp	r4, #255	; 0xff
 80060f8:	d80b      	bhi.n	8006112 <os_mbuf_get_pkthdr+0x2a>
    om = os_mbuf_get(omp, 0);
 80060fa:	2100      	movs	r1, #0
 80060fc:	f7ff ffdf 	bl	80060be <os_mbuf_get>
    if (om) {
 8006100:	b130      	cbz	r0, 8006110 <os_mbuf_get_pkthdr+0x28>
        om->om_data += pkthdr_len;
 8006102:	6803      	ldr	r3, [r0, #0]
        om->om_pkthdr_len = pkthdr_len;
 8006104:	7145      	strb	r5, [r0, #5]
        om->om_data += pkthdr_len;
 8006106:	4423      	add	r3, r4
 8006108:	6003      	str	r3, [r0, #0]
        pkthdr->omp_len = 0;
 800610a:	2300      	movs	r3, #0
        pkthdr->omp_flags = 0;
 800610c:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
 8006110:	bd38      	pop	{r3, r4, r5, pc}
        om = NULL;
 8006112:	2000      	movs	r0, #0
    return om;
 8006114:	e7fc      	b.n	8006110 <os_mbuf_get_pkthdr+0x28>

08006116 <os_mbuf_free>:
{
 8006116:	4601      	mov	r1, r0
    if (om->om_omp != NULL) {
 8006118:	6880      	ldr	r0, [r0, #8]
{
 800611a:	b508      	push	{r3, lr}
    if (om->om_omp != NULL) {
 800611c:	b110      	cbz	r0, 8006124 <os_mbuf_free+0xe>
        rc = os_memblock_put(om->om_omp->omp_pool, om);
 800611e:	6840      	ldr	r0, [r0, #4]
 8006120:	f000 f9ad 	bl	800647e <os_memblock_put>
}
 8006124:	bd08      	pop	{r3, pc}

08006126 <os_mbuf_free_chain>:
{
 8006126:	4603      	mov	r3, r0
 8006128:	b510      	push	{r4, lr}
    while (om != NULL) {
 800612a:	b90b      	cbnz	r3, 8006130 <os_mbuf_free_chain+0xa>
    rc = 0;
 800612c:	4618      	mov	r0, r3
    return (rc);
 800612e:	e006      	b.n	800613e <os_mbuf_free_chain+0x18>
        rc = os_mbuf_free(om);
 8006130:	4618      	mov	r0, r3
        next = SLIST_NEXT(om, om_next);
 8006132:	68dc      	ldr	r4, [r3, #12]
        rc = os_mbuf_free(om);
 8006134:	f7ff ffef 	bl	8006116 <os_mbuf_free>
        om = next;
 8006138:	4623      	mov	r3, r4
        if (rc != 0) {
 800613a:	2800      	cmp	r0, #0
 800613c:	d0f5      	beq.n	800612a <os_mbuf_free_chain+0x4>
}
 800613e:	bd10      	pop	{r4, pc}

08006140 <os_mbuf_len>:
uint16_t
os_mbuf_len(const struct os_mbuf *om)
{
    uint16_t len;

    len = 0;
 8006140:	2300      	movs	r3, #0
    while (om != NULL) {
 8006142:	b908      	cbnz	r0, 8006148 <os_mbuf_len+0x8>
        len += om->om_len;
        om = SLIST_NEXT(om, om_next);
    }

    return len;
}
 8006144:	4618      	mov	r0, r3
 8006146:	4770      	bx	lr
        len += om->om_len;
 8006148:	88c2      	ldrh	r2, [r0, #6]
        om = SLIST_NEXT(om, om_next);
 800614a:	68c0      	ldr	r0, [r0, #12]
        len += om->om_len;
 800614c:	4413      	add	r3, r2
 800614e:	b29b      	uxth	r3, r3
 8006150:	e7f7      	b.n	8006142 <os_mbuf_len+0x2>

08006152 <os_mbuf_append>:

int
os_mbuf_append(struct os_mbuf *om, const void *data,  uint16_t len)
{
 8006152:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006156:	4688      	mov	r8, r1
 8006158:	4616      	mov	r6, r2
    struct os_mbuf *new;
    int remainder;
    int space;
    int rc;

    if (om == NULL) {
 800615a:	4607      	mov	r7, r0
 800615c:	2800      	cmp	r0, #0
 800615e:	d042      	beq.n	80061e6 <os_mbuf_append+0x94>

    omp = om->om_omp;

    /* Scroll to last mbuf in the chain */
    last = om;
    while (SLIST_NEXT(last, om_next) != NULL) {
 8006160:	4605      	mov	r5, r0
    omp = om->om_omp;
 8006162:	f8d0 a008 	ldr.w	sl, [r0, #8]
    while (SLIST_NEXT(last, om_next) != NULL) {
 8006166:	68eb      	ldr	r3, [r5, #12]
 8006168:	bb23      	cbnz	r3, 80061b4 <os_mbuf_append+0x62>
        last = SLIST_NEXT(last, om_next);
    }

    remainder = len;
    space = OS_MBUF_TRAILINGSPACE(last);
 800616a:	4628      	mov	r0, r5
    remainder = len;
 800616c:	4634      	mov	r4, r6
    space = OS_MBUF_TRAILINGSPACE(last);
 800616e:	f7ff ff3b 	bl	8005fe8 <_os_mbuf_trailingspace>

    /* If room in current mbuf, copy the first part of the data into the
     * remaining space in that mbuf.
     */
    if (space > 0) {
 8006172:	b178      	cbz	r0, 8006194 <os_mbuf_append+0x42>
 8006174:	42b0      	cmp	r0, r6
 8006176:	bfa8      	it	ge
 8006178:	4630      	movge	r0, r6
 800617a:	4604      	mov	r4, r0
        if (space > remainder) {
            space = remainder;
        }

        memcpy(OS_MBUF_DATA(last, uint8_t *) + last->om_len , data, space);
 800617c:	682b      	ldr	r3, [r5, #0]
 800617e:	88e8      	ldrh	r0, [r5, #6]
 8006180:	4622      	mov	r2, r4
 8006182:	4641      	mov	r1, r8
 8006184:	4418      	add	r0, r3
 8006186:	f000 ff53 	bl	8007030 <memcpy>

        last->om_len += space;
 800618a:	88eb      	ldrh	r3, [r5, #6]
        data += space;
 800618c:	44a0      	add	r8, r4
        last->om_len += space;
 800618e:	4423      	add	r3, r4
 8006190:	80eb      	strh	r3, [r5, #6]
        remainder -= space;
 8006192:	1b34      	subs	r4, r6, r4
    }

    /* Take the remaining data, and keep allocating new mbufs and copying
     * data into it, until data is exhausted.
     */
    while (remainder > 0) {
 8006194:	2c00      	cmp	r4, #0
 8006196:	dd05      	ble.n	80061a4 <os_mbuf_append+0x52>
        new = os_mbuf_get(omp, 0);
 8006198:	2100      	movs	r1, #0
 800619a:	4650      	mov	r0, sl
 800619c:	f7ff ff8f 	bl	80060be <os_mbuf_get>
        if (!new) {
 80061a0:	4681      	mov	r9, r0
 80061a2:	b948      	cbnz	r0, 80061b8 <os_mbuf_append+0x66>
        SLIST_NEXT(last, om_next) = new;
        last = new;
    }

    /* Adjust the packet header length in the buffer */
    if (OS_MBUF_IS_PKTHDR(om)) {
 80061a4:	797b      	ldrb	r3, [r7, #5]
 80061a6:	2b07      	cmp	r3, #7
 80061a8:	d818      	bhi.n	80061dc <os_mbuf_append+0x8a>
        OS_MBUF_PKTHDR(om)->omp_len += len - remainder;
    }

    if (remainder != 0) {
 80061aa:	1c20      	adds	r0, r4, #0
 80061ac:	bf18      	it	ne
 80061ae:	2001      	movne	r0, #1


    return (0);
err:
    return (rc);
}
 80061b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061b4:	461d      	mov	r5, r3
 80061b6:	e7d6      	b.n	8006166 <os_mbuf_append+0x14>
        new->om_len = min(omp->omp_databuf_len, remainder);
 80061b8:	f8ba 2000 	ldrh.w	r2, [sl]
        memcpy(OS_MBUF_DATA(new, void *), data, new->om_len);
 80061bc:	4641      	mov	r1, r8
        new->om_len = min(omp->omp_databuf_len, remainder);
 80061be:	42a2      	cmp	r2, r4
 80061c0:	bfa8      	it	ge
 80061c2:	4622      	movge	r2, r4
 80061c4:	80c2      	strh	r2, [r0, #6]
        memcpy(OS_MBUF_DATA(new, void *), data, new->om_len);
 80061c6:	6800      	ldr	r0, [r0, #0]
 80061c8:	f000 ff32 	bl	8007030 <memcpy>
        data += new->om_len;
 80061cc:	f8b9 3006 	ldrh.w	r3, [r9, #6]
        SLIST_NEXT(last, om_next) = new;
 80061d0:	f8c5 900c 	str.w	r9, [r5, #12]
        data += new->om_len;
 80061d4:	4498      	add	r8, r3
        remainder -= new->om_len;
 80061d6:	1ae4      	subs	r4, r4, r3
        SLIST_NEXT(last, om_next) = new;
 80061d8:	464d      	mov	r5, r9
 80061da:	e7db      	b.n	8006194 <os_mbuf_append+0x42>
        OS_MBUF_PKTHDR(om)->omp_len += len - remainder;
 80061dc:	8a3b      	ldrh	r3, [r7, #16]
 80061de:	441e      	add	r6, r3
 80061e0:	1b36      	subs	r6, r6, r4
 80061e2:	823e      	strh	r6, [r7, #16]
 80061e4:	e7e1      	b.n	80061aa <os_mbuf_append+0x58>
        rc = OS_EINVAL;
 80061e6:	2002      	movs	r0, #2
 80061e8:	e7e2      	b.n	80061b0 <os_mbuf_append+0x5e>

080061ea <os_mbuf_dup>:
    return 0;
}

struct os_mbuf *
os_mbuf_dup(struct os_mbuf *om)
{
 80061ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    struct os_mbuf *copy;

    omp = om->om_omp;

    head = NULL;
    copy = NULL;
 80061ee:	2500      	movs	r5, #0
{
 80061f0:	4604      	mov	r4, r0
    head = NULL;
 80061f2:	462e      	mov	r6, r5
    omp = om->om_omp;
 80061f4:	6887      	ldr	r7, [r0, #8]
 80061f6:	7963      	ldrb	r3, [r4, #5]
 80061f8:	f104 0210 	add.w	r2, r4, #16
    if (OS_MBUF_IS_PKTHDR(om)) {
 80061fc:	2b07      	cmp	r3, #7
 80061fe:	bf98      	it	ls
 8006200:	2300      	movls	r3, #0
 8006202:	6821      	ldr	r1, [r4, #0]
        ((uint8_t *) &om->om_databuf[0] + startoff));
 8006204:	4413      	add	r3, r2
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
 8006206:	1ac9      	subs	r1, r1, r3

    for (; om != NULL; om = SLIST_NEXT(om, om_next)) {
        if (head) {
            SLIST_NEXT(copy, om_next) = os_mbuf_get(omp,
 8006208:	b289      	uxth	r1, r1
 800620a:	4638      	mov	r0, r7
        if (head) {
 800620c:	b15e      	cbz	r6, 8006226 <os_mbuf_dup+0x3c>
            SLIST_NEXT(copy, om_next) = os_mbuf_get(omp,
 800620e:	f7ff ff56 	bl	80060be <os_mbuf_get>
 8006212:	4680      	mov	r8, r0
 8006214:	60e8      	str	r0, [r5, #12]
                    OS_MBUF_LEADINGSPACE(om));
            if (!SLIST_NEXT(copy, om_next)) {
 8006216:	b998      	cbnz	r0, 8006240 <os_mbuf_dup+0x56>
                os_mbuf_free_chain(head);
 8006218:	4630      	mov	r0, r6
 800621a:	f7ff ff84 	bl	8006126 <os_mbuf_free_chain>
                om->om_len);
    }

    return (head);
err:
    return (NULL);
 800621e:	4646      	mov	r6, r8
}
 8006220:	4630      	mov	r0, r6
 8006222:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            head = os_mbuf_get(omp, OS_MBUF_LEADINGSPACE(om));
 8006226:	f7ff ff4a 	bl	80060be <os_mbuf_get>
            if (!head) {
 800622a:	4606      	mov	r6, r0
 800622c:	2800      	cmp	r0, #0
 800622e:	d0f7      	beq.n	8006220 <os_mbuf_dup+0x36>
            if (OS_MBUF_IS_PKTHDR(om)) {
 8006230:	7963      	ldrb	r3, [r4, #5]
 8006232:	2b07      	cmp	r3, #7
 8006234:	d902      	bls.n	800623c <os_mbuf_dup+0x52>
                _os_mbuf_copypkthdr(head, om);
 8006236:	4621      	mov	r1, r4
 8006238:	f7ff fee1 	bl	8005ffe <_os_mbuf_copypkthdr>
 800623c:	4635      	mov	r5, r6
 800623e:	e000      	b.n	8006242 <os_mbuf_dup+0x58>
 8006240:	4605      	mov	r5, r0
        copy->om_flags = om->om_flags;
 8006242:	7923      	ldrb	r3, [r4, #4]
        memcpy(OS_MBUF_DATA(copy, uint8_t *), OS_MBUF_DATA(om, uint8_t *),
 8006244:	6828      	ldr	r0, [r5, #0]
        copy->om_flags = om->om_flags;
 8006246:	712b      	strb	r3, [r5, #4]
        copy->om_len = om->om_len;
 8006248:	88e3      	ldrh	r3, [r4, #6]
        memcpy(OS_MBUF_DATA(copy, uint8_t *), OS_MBUF_DATA(om, uint8_t *),
 800624a:	6821      	ldr	r1, [r4, #0]
        copy->om_len = om->om_len;
 800624c:	80eb      	strh	r3, [r5, #6]
        memcpy(OS_MBUF_DATA(copy, uint8_t *), OS_MBUF_DATA(om, uint8_t *),
 800624e:	88e2      	ldrh	r2, [r4, #6]
 8006250:	f000 feee 	bl	8007030 <memcpy>
    for (; om != NULL; om = SLIST_NEXT(om, om_next)) {
 8006254:	68e4      	ldr	r4, [r4, #12]
 8006256:	2c00      	cmp	r4, #0
 8006258:	d1cd      	bne.n	80061f6 <os_mbuf_dup+0xc>
 800625a:	e7e1      	b.n	8006220 <os_mbuf_dup+0x36>

0800625c <os_mbuf_adj>:
    return (len > 0 ? -1 : 0);
}

void
os_mbuf_adj(struct os_mbuf *mp, int req_len)
{
 800625c:	b570      	push	{r4, r5, r6, lr}
    int len = req_len;
    struct os_mbuf *m;
    int count;

    if ((m = mp) == NULL)
 800625e:	4604      	mov	r4, r0
 8006260:	b368      	cbz	r0, 80062be <os_mbuf_adj+0x62>
        return;
    if (len >= 0) {
 8006262:	2900      	cmp	r1, #0
 8006264:	da17      	bge.n	8006296 <os_mbuf_adj+0x3a>
         * If the adjustment only affects this mbuf, then just
         * adjust and return.  Otherwise, rescan and truncate
         * after the remaining size.
         */
        len = -len;
        count = 0;
 8006266:	2500      	movs	r5, #0
        len = -len;
 8006268:	424b      	negs	r3, r1
        for (;;) {
            count += m->om_len;
 800626a:	88c2      	ldrh	r2, [r0, #6]
            if (SLIST_NEXT(m, om_next) == (struct os_mbuf *)0)
 800626c:	68c6      	ldr	r6, [r0, #12]
            count += m->om_len;
 800626e:	4415      	add	r5, r2
            if (SLIST_NEXT(m, om_next) == (struct os_mbuf *)0)
 8006270:	bb36      	cbnz	r6, 80062c0 <os_mbuf_adj+0x64>
                break;
            m = SLIST_NEXT(m, om_next);
        }
        if (m->om_len >= len) {
 8006272:	429a      	cmp	r2, r3
 8006274:	7966      	ldrb	r6, [r4, #5]
 8006276:	db25      	blt.n	80062c4 <os_mbuf_adj+0x68>
            m->om_len -= len;
 8006278:	b29b      	uxth	r3, r3
 800627a:	1ad2      	subs	r2, r2, r3
            if (OS_MBUF_IS_PKTHDR(mp))
 800627c:	2e07      	cmp	r6, #7
            m->om_len -= len;
 800627e:	80c2      	strh	r2, [r0, #6]
            if (OS_MBUF_IS_PKTHDR(mp))
 8006280:	d91d      	bls.n	80062be <os_mbuf_adj+0x62>
                OS_MBUF_PKTHDR(mp)->omp_len -= len;
 8006282:	8a22      	ldrh	r2, [r4, #16]
 8006284:	1ad3      	subs	r3, r2, r3
 8006286:	e019      	b.n	80062bc <os_mbuf_adj+0x60>
                m->om_len -= len;
 8006288:	1ac0      	subs	r0, r0, r3
 800628a:	80d0      	strh	r0, [r2, #6]
                m->om_data += len;
 800628c:	6810      	ldr	r0, [r2, #0]
 800628e:	4403      	add	r3, r0
 8006290:	6013      	str	r3, [r2, #0]
                len = 0;
 8006292:	2300      	movs	r3, #0
 8006294:	e00c      	b.n	80062b0 <os_mbuf_adj+0x54>
 8006296:	4602      	mov	r2, r0
 8006298:	460b      	mov	r3, r1
                m->om_len = 0;
 800629a:	2500      	movs	r5, #0
        while (m != NULL && len > 0) {
 800629c:	2b00      	cmp	r3, #0
 800629e:	dd07      	ble.n	80062b0 <os_mbuf_adj+0x54>
            if (m->om_len <= len) {
 80062a0:	88d0      	ldrh	r0, [r2, #6]
 80062a2:	4298      	cmp	r0, r3
 80062a4:	dcf0      	bgt.n	8006288 <os_mbuf_adj+0x2c>
                m->om_len = 0;
 80062a6:	80d5      	strh	r5, [r2, #6]
                m = SLIST_NEXT(m, om_next);
 80062a8:	68d2      	ldr	r2, [r2, #12]
                len -= m->om_len;
 80062aa:	1a1b      	subs	r3, r3, r0
        while (m != NULL && len > 0) {
 80062ac:	2a00      	cmp	r2, #0
 80062ae:	d1f5      	bne.n	800629c <os_mbuf_adj+0x40>
        if (OS_MBUF_IS_PKTHDR(mp))
 80062b0:	7962      	ldrb	r2, [r4, #5]
 80062b2:	2a07      	cmp	r2, #7
 80062b4:	d903      	bls.n	80062be <os_mbuf_adj+0x62>
            OS_MBUF_PKTHDR(mp)->omp_len -= (req_len - len);
 80062b6:	8a22      	ldrh	r2, [r4, #16]
 80062b8:	1a51      	subs	r1, r2, r1
 80062ba:	440b      	add	r3, r1
                OS_MBUF_PKTHDR(mp)->omp_len -= len;
 80062bc:	8223      	strh	r3, [r4, #16]
                break;
            }
            count -= m->om_len;
        }
    }
}
 80062be:	bd70      	pop	{r4, r5, r6, pc}
 80062c0:	4630      	mov	r0, r6
 80062c2:	e7d2      	b.n	800626a <os_mbuf_adj+0xe>
        count -= len;
 80062c4:	4429      	add	r1, r5
 80062c6:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
        if (OS_MBUF_IS_PKTHDR(m))
 80062ca:	2e07      	cmp	r6, #7
            OS_MBUF_PKTHDR(m)->omp_len = count;
 80062cc:	bf88      	it	hi
 80062ce:	8221      	strhhi	r1, [r4, #16]
            if (m->om_len >= count) {
 80062d0:	88e3      	ldrh	r3, [r4, #6]
 80062d2:	68e0      	ldr	r0, [r4, #12]
 80062d4:	428b      	cmp	r3, r1
 80062d6:	db07      	blt.n	80062e8 <os_mbuf_adj+0x8c>
                m->om_len = count;
 80062d8:	80e1      	strh	r1, [r4, #6]
                if (SLIST_NEXT(m, om_next) != NULL) {
 80062da:	2800      	cmp	r0, #0
 80062dc:	d0ef      	beq.n	80062be <os_mbuf_adj+0x62>
                    os_mbuf_free_chain(SLIST_NEXT(m, om_next));
 80062de:	f7ff ff22 	bl	8006126 <os_mbuf_free_chain>
                    SLIST_NEXT(m, om_next) = NULL;
 80062e2:	2300      	movs	r3, #0
 80062e4:	60e3      	str	r3, [r4, #12]
 80062e6:	e7ea      	b.n	80062be <os_mbuf_adj+0x62>
            count -= m->om_len;
 80062e8:	1ac9      	subs	r1, r1, r3
        for (; m; m = SLIST_NEXT(m, om_next)) {
 80062ea:	4604      	mov	r4, r0
 80062ec:	2800      	cmp	r0, #0
 80062ee:	d1ef      	bne.n	80062d0 <os_mbuf_adj+0x74>
 80062f0:	e7e5      	b.n	80062be <os_mbuf_adj+0x62>

080062f2 <os_mbuf_prepend>:
    }
}

struct os_mbuf *
os_mbuf_prepend(struct os_mbuf *om, int len)
{
 80062f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062f4:	460d      	mov	r5, r1
 80062f6:	4604      	mov	r4, r0
        /* The current head didn't have enough space; allocate a new head. */
        if (OS_MBUF_IS_PKTHDR(om)) {
            p = os_mbuf_get_pkthdr(om->om_omp,
                om->om_pkthdr_len - sizeof (struct os_mbuf_pkthdr));
        } else {
            p = os_mbuf_get(om->om_omp, 0);
 80062f8:	2600      	movs	r6, #0
    if (OS_MBUF_IS_PKTHDR(om)) {
 80062fa:	7961      	ldrb	r1, [r4, #5]
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
 80062fc:	4623      	mov	r3, r4
    if (OS_MBUF_IS_PKTHDR(om)) {
 80062fe:	2908      	cmp	r1, #8
 8006300:	bf2c      	ite	cs
 8006302:	4608      	movcs	r0, r1
 8006304:	2000      	movcc	r0, #0
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
 8006306:	f853 2b10 	ldr.w	r2, [r3], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
 800630a:	4403      	add	r3, r0
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
 800630c:	1ad3      	subs	r3, r2, r3
 800630e:	b29b      	uxth	r3, r3
 8006310:	42ab      	cmp	r3, r5
 8006312:	bfa8      	it	ge
 8006314:	462b      	movge	r3, r5
        om->om_len += leading;
 8006316:	88e0      	ldrh	r0, [r4, #6]
        om->om_data -= leading;
 8006318:	1ad2      	subs	r2, r2, r3
 800631a:	6022      	str	r2, [r4, #0]
        om->om_len += leading;
 800631c:	b29a      	uxth	r2, r3
        if (OS_MBUF_IS_PKTHDR(om)) {
 800631e:	2907      	cmp	r1, #7
        om->om_len += leading;
 8006320:	4410      	add	r0, r2
 8006322:	80e0      	strh	r0, [r4, #6]
            OS_MBUF_PKTHDR(om)->omp_len += leading;
 8006324:	bf82      	ittt	hi
 8006326:	8a20      	ldrhhi	r0, [r4, #16]
 8006328:	1812      	addhi	r2, r2, r0
 800632a:	8222      	strhhi	r2, [r4, #16]
        if (len == 0) {
 800632c:	1aed      	subs	r5, r5, r3
 800632e:	d00c      	beq.n	800634a <os_mbuf_prepend+0x58>
        if (OS_MBUF_IS_PKTHDR(om)) {
 8006330:	2907      	cmp	r1, #7
 8006332:	68a0      	ldr	r0, [r4, #8]
 8006334:	d90b      	bls.n	800634e <os_mbuf_prepend+0x5c>
            p = os_mbuf_get_pkthdr(om->om_omp,
 8006336:	3908      	subs	r1, #8
 8006338:	b2c9      	uxtb	r1, r1
 800633a:	f7ff fed5 	bl	80060e8 <os_mbuf_get_pkthdr>
            p = os_mbuf_get(om->om_omp, 0);
 800633e:	4607      	mov	r7, r0
        }
        if (p == NULL) {
 8006340:	b948      	cbnz	r0, 8006356 <os_mbuf_prepend+0x64>
            os_mbuf_free_chain(om);
 8006342:	4620      	mov	r0, r4
 8006344:	f7ff feef 	bl	8006126 <os_mbuf_free_chain>
            om = NULL;
 8006348:	463c      	mov	r4, r7
        SLIST_NEXT(p, om_next) = om;
        om = p;
    }

    return om;
}
 800634a:	4620      	mov	r0, r4
 800634c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            p = os_mbuf_get(om->om_omp, 0);
 800634e:	2100      	movs	r1, #0
 8006350:	f7ff feb5 	bl	80060be <os_mbuf_get>
 8006354:	e7f3      	b.n	800633e <os_mbuf_prepend+0x4c>
        if (OS_MBUF_IS_PKTHDR(om)) {
 8006356:	7963      	ldrb	r3, [r4, #5]
 8006358:	2b07      	cmp	r3, #7
 800635a:	d903      	bls.n	8006364 <os_mbuf_prepend+0x72>
            _os_mbuf_copypkthdr(p, om);
 800635c:	4621      	mov	r1, r4
 800635e:	f7ff fe4e 	bl	8005ffe <_os_mbuf_copypkthdr>
            om->om_pkthdr_len = 0;
 8006362:	7166      	strb	r6, [r4, #5]
        p->om_data += OS_MBUF_TRAILINGSPACE(p);
 8006364:	4638      	mov	r0, r7
 8006366:	f7ff fe3f 	bl	8005fe8 <_os_mbuf_trailingspace>
 800636a:	683b      	ldr	r3, [r7, #0]
        SLIST_NEXT(p, om_next) = om;
 800636c:	60fc      	str	r4, [r7, #12]
        p->om_data += OS_MBUF_TRAILINGSPACE(p);
 800636e:	4418      	add	r0, r3
 8006370:	6038      	str	r0, [r7, #0]
        leading = min(len, OS_MBUF_LEADINGSPACE(om));
 8006372:	463c      	mov	r4, r7
 8006374:	e7c1      	b.n	80062fa <os_mbuf_prepend+0x8>

08006376 <os_mbuf_concat>:
    return 0;
}

void
os_mbuf_concat(struct os_mbuf *first, struct os_mbuf *second)
{
 8006376:	4603      	mov	r3, r0
 8006378:	b510      	push	{r4, lr}
    struct os_mbuf *cur;

    /* Point 'cur' to the last buffer in the first chain. */
    cur = first;
    while (1) {
        next = SLIST_NEXT(cur, om_next);
 800637a:	68da      	ldr	r2, [r3, #12]
        if (next == NULL) {
 800637c:	b96a      	cbnz	r2, 800639a <os_mbuf_concat+0x24>

        cur = next;
    }

    /* Attach the second chain to the end of the first. */
    SLIST_NEXT(cur, om_next) = second;
 800637e:	60d9      	str	r1, [r3, #12]

    /* If the first chain has a packet header, calculate the length of the
     * second chain and add it to the header length.
     */
    if (OS_MBUF_IS_PKTHDR(first)) {
 8006380:	7943      	ldrb	r3, [r0, #5]
 8006382:	2b07      	cmp	r3, #7
 8006384:	d906      	bls.n	8006394 <os_mbuf_concat+0x1e>
        if (OS_MBUF_IS_PKTHDR(second)) {
 8006386:	794a      	ldrb	r2, [r1, #5]
 8006388:	8a03      	ldrh	r3, [r0, #16]
 800638a:	2a07      	cmp	r2, #7
 800638c:	d907      	bls.n	800639e <os_mbuf_concat+0x28>
            OS_MBUF_PKTHDR(first)->omp_len += OS_MBUF_PKTHDR(second)->omp_len;
 800638e:	8a0a      	ldrh	r2, [r1, #16]
 8006390:	4413      	add	r3, r2
 8006392:	8203      	strh	r3, [r0, #16]
                OS_MBUF_PKTHDR(first)->omp_len += cur->om_len;
            }
        }
    }

    second->om_pkthdr_len = 0;
 8006394:	2300      	movs	r3, #0
 8006396:	714b      	strb	r3, [r1, #5]
}
 8006398:	bd10      	pop	{r4, pc}
 800639a:	4613      	mov	r3, r2
 800639c:	e7ed      	b.n	800637a <os_mbuf_concat+0x4>
 800639e:	460a      	mov	r2, r1
                OS_MBUF_PKTHDR(first)->omp_len += cur->om_len;
 80063a0:	88d4      	ldrh	r4, [r2, #6]
            for (cur = second; cur != NULL; cur = SLIST_NEXT(cur, om_next)) {
 80063a2:	68d2      	ldr	r2, [r2, #12]
                OS_MBUF_PKTHDR(first)->omp_len += cur->om_len;
 80063a4:	4423      	add	r3, r4
 80063a6:	b29b      	uxth	r3, r3
            for (cur = second; cur != NULL; cur = SLIST_NEXT(cur, om_next)) {
 80063a8:	2a00      	cmp	r2, #0
 80063aa:	d1f9      	bne.n	80063a0 <os_mbuf_concat+0x2a>
 80063ac:	e7f1      	b.n	8006392 <os_mbuf_concat+0x1c>
	...

080063b0 <os_mempool_init_internal>:

static os_error_t
os_mempool_init_internal(struct os_mempool *mp, uint16_t blocks,
                         uint32_t block_size, void *membuf, char *name,
                         uint8_t flags)
{
 80063b0:	b570      	push	{r4, r5, r6, lr}
    int i;
    uint8_t *block_addr;
    struct os_memblock *block_ptr;

    /* Check for valid parameters */
    if (!mp || (block_size == 0)) {
 80063b2:	b110      	cbz	r0, 80063ba <os_mempool_init_internal+0xa>
 80063b4:	b10a      	cbz	r2, 80063ba <os_mempool_init_internal+0xa>
        return OS_INVALID_PARM;
    }

    if ((!membuf) && (blocks != 0)) {
 80063b6:	b913      	cbnz	r3, 80063be <os_mempool_init_internal+0xe>
 80063b8:	b119      	cbz	r1, 80063c2 <os_mempool_init_internal+0x12>
        return OS_INVALID_PARM;
 80063ba:	2003      	movs	r0, #3
 80063bc:	e023      	b.n	8006406 <os_mempool_init_internal+0x56>

    if (membuf != NULL) {
        /* Blocks need to be sized properly and memory buffer should be
         * aligned
         */
        if (((uint32_t)membuf & (OS_ALIGNMENT - 1)) != 0) {
 80063be:	079d      	lsls	r5, r3, #30
 80063c0:	d127      	bne.n	8006412 <os_mempool_init_internal+0x62>

    /* Initialize the memory pool structure */
    mp->mp_block_size = block_size;
    mp->mp_num_free = blocks;
    mp->mp_min_free = blocks;
    mp->mp_flags = flags;
 80063c2:	f89d 4014 	ldrb.w	r4, [sp, #20]
    mp->mp_block_size = block_size;
 80063c6:	6002      	str	r2, [r0, #0]
    mp->mp_flags = flags;
 80063c8:	7284      	strb	r4, [r0, #10]
    mp->mp_num_blocks = blocks;
    mp->mp_membuf_addr = (uint32_t)membuf;
    mp->name = name;
 80063ca:	9c04      	ldr	r4, [sp, #16]
    mp->mp_num_free = blocks;
 80063cc:	80c1      	strh	r1, [r0, #6]
    mp->mp_min_free = blocks;
 80063ce:	8101      	strh	r1, [r0, #8]
    mp->mp_num_blocks = blocks;
 80063d0:	8081      	strh	r1, [r0, #4]
    mp->mp_membuf_addr = (uint32_t)membuf;
 80063d2:	60c3      	str	r3, [r0, #12]
    SLIST_FIRST(mp) = membuf;
 80063d4:	e9c0 3405 	strd	r3, r4, [r0, #20]

    if (blocks > 0) {
 80063d8:	b169      	cbz	r1, 80063f6 <os_mempool_init_internal+0x46>
        os_mempool_poison(mp, membuf);
        os_mempool_guard(mp, membuf);
        true_block_size = OS_MEMPOOL_TRUE_BLOCK_SIZE(mp);
 80063da:	0794      	lsls	r4, r2, #30
{
 80063dc:	461d      	mov	r5, r3

        /* Chain the memory blocks to the free list */
        block_addr = (uint8_t *)membuf;
        block_ptr = (struct os_memblock *)block_addr;
        for (i = 1; i < blocks; i++) {
 80063de:	f04f 0401 	mov.w	r4, #1
        true_block_size = OS_MEMPOOL_TRUE_BLOCK_SIZE(mp);
 80063e2:	bf1c      	itt	ne
 80063e4:	f022 0203 	bicne.w	r2, r2, #3
 80063e8:	3204      	addne	r2, #4
        for (i = 1; i < blocks; i++) {
 80063ea:	428c      	cmp	r4, r1
 80063ec:	db0c      	blt.n	8006408 <os_mempool_init_internal+0x58>
            SLIST_NEXT(block_ptr, mb_next) = (struct os_memblock *)block_addr;
            block_ptr = (struct os_memblock *)block_addr;
        }

        /* Last one in the list should be NULL */
        SLIST_NEXT(block_ptr, mb_next) = NULL;
 80063ee:	3901      	subs	r1, #1
 80063f0:	434a      	muls	r2, r1
 80063f2:	2100      	movs	r1, #0
 80063f4:	5099      	str	r1, [r3, r2]
    }

    STAILQ_INSERT_TAIL(&g_os_mempool_list, mp, mp_list);
 80063f6:	2300      	movs	r3, #0
 80063f8:	4a07      	ldr	r2, [pc, #28]	; (8006418 <os_mempool_init_internal+0x68>)
 80063fa:	6103      	str	r3, [r0, #16]
 80063fc:	6851      	ldr	r1, [r2, #4]
 80063fe:	6008      	str	r0, [r1, #0]
 8006400:	3010      	adds	r0, #16
 8006402:	6050      	str	r0, [r2, #4]
 8006404:	4618      	mov	r0, r3

    return OS_OK;
}
 8006406:	bd70      	pop	{r4, r5, r6, pc}
            block_addr += true_block_size;
 8006408:	18ae      	adds	r6, r5, r2
            SLIST_NEXT(block_ptr, mb_next) = (struct os_memblock *)block_addr;
 800640a:	602e      	str	r6, [r5, #0]
        for (i = 1; i < blocks; i++) {
 800640c:	3401      	adds	r4, #1
            block_addr += true_block_size;
 800640e:	4635      	mov	r5, r6
 8006410:	e7eb      	b.n	80063ea <os_mempool_init_internal+0x3a>
            return OS_MEM_NOT_ALIGNED;
 8006412:	2004      	movs	r0, #4
 8006414:	e7f7      	b.n	8006406 <os_mempool_init_internal+0x56>
 8006416:	bf00      	nop
 8006418:	200034c8 	.word	0x200034c8

0800641c <os_mempool_init>:

os_error_t
os_mempool_init(struct os_mempool *mp, uint16_t blocks, uint32_t block_size,
                void *membuf, char *name)
{
 800641c:	b513      	push	{r0, r1, r4, lr}
    return os_mempool_init_internal(mp, blocks, block_size, membuf, name, 0);
 800641e:	2400      	movs	r4, #0
 8006420:	9401      	str	r4, [sp, #4]
 8006422:	9c04      	ldr	r4, [sp, #16]
 8006424:	9400      	str	r4, [sp, #0]
 8006426:	f7ff ffc3 	bl	80063b0 <os_mempool_init_internal>
}
 800642a:	b002      	add	sp, #8
 800642c:	bd10      	pop	{r4, pc}

0800642e <os_memblock_get>:
    return 1;
}

void *
os_memblock_get(struct os_mempool *mp)
{
 800642e:	b538      	push	{r3, r4, r5, lr}

    os_trace_api_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)mp);

    /* Check to make sure they passed in a memory pool (or something) */
    block = NULL;
    if (mp) {
 8006430:	4604      	mov	r4, r0
 8006432:	b198      	cbz	r0, 800645c <os_memblock_get+0x2e>
        OS_ENTER_CRITICAL(sr);
 8006434:	f7ff f9ac 	bl	8005790 <os_arch_save_sr>
        /* Check for any free */
        if (mp->mp_num_free) {
 8006438:	88e3      	ldrh	r3, [r4, #6]
 800643a:	b16b      	cbz	r3, 8006458 <os_memblock_get+0x2a>
            /* Get a free block */
            block = SLIST_FIRST(mp);
 800643c:	6965      	ldr	r5, [r4, #20]

            /* Set new free list head */
            SLIST_FIRST(mp) = SLIST_NEXT(block, mb_next);

            /* Decrement number free by 1 */
            mp->mp_num_free--;
 800643e:	3b01      	subs	r3, #1
            SLIST_FIRST(mp) = SLIST_NEXT(block, mb_next);
 8006440:	682a      	ldr	r2, [r5, #0]
            mp->mp_num_free--;
 8006442:	b29b      	uxth	r3, r3
            SLIST_FIRST(mp) = SLIST_NEXT(block, mb_next);
 8006444:	6162      	str	r2, [r4, #20]
            if (mp->mp_min_free > mp->mp_num_free) {
 8006446:	8922      	ldrh	r2, [r4, #8]
            mp->mp_num_free--;
 8006448:	80e3      	strh	r3, [r4, #6]
            if (mp->mp_min_free > mp->mp_num_free) {
 800644a:	429a      	cmp	r2, r3
 800644c:	d900      	bls.n	8006450 <os_memblock_get+0x22>
                mp->mp_min_free = mp->mp_num_free;
 800644e:	8123      	strh	r3, [r4, #8]
            }
        }
        OS_EXIT_CRITICAL(sr);
 8006450:	f7ff f9a4 	bl	800579c <os_arch_restore_sr>
    }

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)block);

    return (void *)block;
}
 8006454:	4628      	mov	r0, r5
 8006456:	bd38      	pop	{r3, r4, r5, pc}
    block = NULL;
 8006458:	461d      	mov	r5, r3
 800645a:	e7f9      	b.n	8006450 <os_memblock_get+0x22>
 800645c:	4605      	mov	r5, r0
    return (void *)block;
 800645e:	e7f9      	b.n	8006454 <os_memblock_get+0x26>

08006460 <os_memblock_put_from_cb>:

os_error_t
os_memblock_put_from_cb(struct os_mempool *mp, void *block_addr)
{
 8006460:	b538      	push	{r3, r4, r5, lr}
 8006462:	4604      	mov	r4, r0
 8006464:	460d      	mov	r5, r1

    os_mempool_guard_check(mp, block_addr);
    os_mempool_poison(mp, block_addr);

    block = (struct os_memblock *)block_addr;
    OS_ENTER_CRITICAL(sr);
 8006466:	f7ff f993 	bl	8005790 <os_arch_save_sr>

    /* Chain current free list pointer to this block; make this block head */
    SLIST_NEXT(block, mb_next) = SLIST_FIRST(mp);
 800646a:	6963      	ldr	r3, [r4, #20]
 800646c:	602b      	str	r3, [r5, #0]
    SLIST_FIRST(mp) = block;

    /* XXX: Should we check that the number free <= number blocks? */
    /* Increment number free */
    mp->mp_num_free++;
 800646e:	88e3      	ldrh	r3, [r4, #6]
    SLIST_FIRST(mp) = block;
 8006470:	6165      	str	r5, [r4, #20]
    mp->mp_num_free++;
 8006472:	3301      	adds	r3, #1
 8006474:	80e3      	strh	r3, [r4, #6]

    OS_EXIT_CRITICAL(sr);
 8006476:	f7ff f991 	bl	800579c <os_arch_restore_sr>

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT_FROM_CB, (uint32_t)OS_OK);

    return OS_OK;
}
 800647a:	2000      	movs	r0, #0
 800647c:	bd38      	pop	{r3, r4, r5, pc}

0800647e <os_memblock_put>:

os_error_t
os_memblock_put(struct os_mempool *mp, void *block_addr)
{
 800647e:	b410      	push	{r4}
 8006480:	460a      	mov	r2, r1

    os_trace_api_u32x2(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)mp,
                       (uint32_t)block_addr);

    /* Make sure parameters are valid */
    if ((mp == NULL) || (block_addr == NULL)) {
 8006482:	4603      	mov	r3, r0
 8006484:	b170      	cbz	r0, 80064a4 <os_memblock_put+0x26>
 8006486:	b169      	cbz	r1, 80064a4 <os_memblock_put+0x26>
    }
#endif
    /* If this is an extended mempool with a put callback, call the callback
     * instead of freeing the block directly.
     */
    if (mp->mp_flags & OS_MEMPOOL_F_EXT) {
 8006488:	7a84      	ldrb	r4, [r0, #10]
 800648a:	07e4      	lsls	r4, r4, #31
 800648c:	d505      	bpl.n	800649a <os_memblock_put+0x1c>
        mpe = (struct os_mempool_ext *)mp;
        if (mpe->mpe_put_cb != NULL) {
 800648e:	69c4      	ldr	r4, [r0, #28]
 8006490:	b11c      	cbz	r4, 800649a <os_memblock_put+0x1c>
            ret = mpe->mpe_put_cb(mpe, block_addr, mpe->mpe_put_arg);
 8006492:	4623      	mov	r3, r4
 8006494:	6a02      	ldr	r2, [r0, #32]
    ret = os_memblock_put_from_cb(mp, block_addr);

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)ret);
    return ret;
}
 8006496:	bc10      	pop	{r4}
            ret = mpe->mpe_put_cb(mpe, block_addr, mpe->mpe_put_arg);
 8006498:	4718      	bx	r3
    ret = os_memblock_put_from_cb(mp, block_addr);
 800649a:	4611      	mov	r1, r2
 800649c:	4618      	mov	r0, r3
}
 800649e:	bc10      	pop	{r4}
    ret = os_memblock_put_from_cb(mp, block_addr);
 80064a0:	f7ff bfde 	b.w	8006460 <os_memblock_put_from_cb>
}
 80064a4:	2003      	movs	r0, #3
 80064a6:	bc10      	pop	{r4}
 80064a8:	4770      	bx	lr
	...

080064ac <os_mempool_module_init>:
}

void
os_mempool_module_init(void)
{
    STAILQ_INIT(&g_os_mempool_list);
 80064ac:	2200      	movs	r2, #0
 80064ae:	4b02      	ldr	r3, [pc, #8]	; (80064b8 <os_mempool_module_init+0xc>)
 80064b0:	e9c3 2300 	strd	r2, r3, [r3]
}
 80064b4:	4770      	bx	lr
 80064b6:	bf00      	nop
 80064b8:	200034c8 	.word	0x200034c8

080064bc <os_msys_find_pool>:
os_msys_find_pool(uint16_t dsize)
{
    struct os_mbuf_pool *pool;

    pool = NULL;
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
 80064bc:	4a07      	ldr	r2, [pc, #28]	; (80064dc <os_msys_find_pool+0x20>)
{
 80064be:	b510      	push	{r4, lr}
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
 80064c0:	6811      	ldr	r1, [r2, #0]
 80064c2:	460b      	mov	r3, r1
 80064c4:	b923      	cbnz	r3, 80064d0 <os_msys_find_pool+0x14>
            break;
        }
    }

    if (!pool) {
        pool = STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
 80064c6:	b109      	cbz	r1, 80064cc <os_msys_find_pool+0x10>
 80064c8:	6853      	ldr	r3, [r2, #4]
 80064ca:	3b08      	subs	r3, #8
    }

    return (pool);
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	bd10      	pop	{r4, pc}
        if (dsize <= pool->omp_databuf_len) {
 80064d0:	881c      	ldrh	r4, [r3, #0]
 80064d2:	4284      	cmp	r4, r0
 80064d4:	d2fa      	bcs.n	80064cc <os_msys_find_pool+0x10>
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
 80064d6:	689b      	ldr	r3, [r3, #8]
 80064d8:	e7f4      	b.n	80064c4 <os_msys_find_pool+0x8>
 80064da:	bf00      	nop
 80064dc:	2000014c 	.word	0x2000014c

080064e0 <os_msys_register>:
{
 80064e0:	b530      	push	{r4, r5, lr}
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
 80064e2:	4b0c      	ldr	r3, [pc, #48]	; (8006514 <os_msys_register+0x34>)
 80064e4:	681a      	ldr	r2, [r3, #0]
 80064e6:	b92a      	cbnz	r2, 80064f4 <os_msys_register+0x14>
        STAILQ_INSERT_TAIL(&g_msys_pool_list, new_pool, omp_next);
 80064e8:	6082      	str	r2, [r0, #8]
 80064ea:	685a      	ldr	r2, [r3, #4]
 80064ec:	6010      	str	r0, [r2, #0]
 80064ee:	3008      	adds	r0, #8
 80064f0:	6058      	str	r0, [r3, #4]
    return (0);
 80064f2:	e00c      	b.n	800650e <os_msys_register+0x2e>
        if (new_pool->omp_databuf_len > pool->omp_databuf_len) {
 80064f4:	8805      	ldrh	r5, [r0, #0]
 80064f6:	8814      	ldrh	r4, [r2, #0]
 80064f8:	6891      	ldr	r1, [r2, #8]
 80064fa:	42a5      	cmp	r5, r4
 80064fc:	d801      	bhi.n	8006502 <os_msys_register+0x22>
 80064fe:	460a      	mov	r2, r1
 8006500:	e7f1      	b.n	80064e6 <os_msys_register+0x6>
        STAILQ_INSERT_AFTER(&g_msys_pool_list, pool, new_pool, omp_next);
 8006502:	6081      	str	r1, [r0, #8]
 8006504:	b911      	cbnz	r1, 800650c <os_msys_register+0x2c>
 8006506:	f100 0108 	add.w	r1, r0, #8
 800650a:	6059      	str	r1, [r3, #4]
 800650c:	6090      	str	r0, [r2, #8]
}
 800650e:	2000      	movs	r0, #0
 8006510:	bd30      	pop	{r4, r5, pc}
 8006512:	bf00      	nop
 8006514:	2000014c 	.word	0x2000014c

08006518 <os_msys_reset>:
    STAILQ_INIT(&g_msys_pool_list);
 8006518:	2200      	movs	r2, #0
 800651a:	4b02      	ldr	r3, [pc, #8]	; (8006524 <os_msys_reset+0xc>)
 800651c:	e9c3 2300 	strd	r2, r3, [r3]
}
 8006520:	4770      	bx	lr
 8006522:	bf00      	nop
 8006524:	2000014c 	.word	0x2000014c

08006528 <os_msys_get_pkthdr>:
    uint16_t total_pkthdr_len;
    struct os_mbuf *m;
    struct os_mbuf_pool *pool;

    total_pkthdr_len =  user_hdr_len + sizeof(struct os_mbuf_pkthdr);
    pool = os_msys_find_pool(dsize + total_pkthdr_len);
 8006528:	3008      	adds	r0, #8
 800652a:	4408      	add	r0, r1
{
 800652c:	b510      	push	{r4, lr}
    pool = os_msys_find_pool(dsize + total_pkthdr_len);
 800652e:	b280      	uxth	r0, r0
{
 8006530:	460c      	mov	r4, r1
    pool = os_msys_find_pool(dsize + total_pkthdr_len);
 8006532:	f7ff ffc3 	bl	80064bc <os_msys_find_pool>
    if (!pool) {
 8006536:	b120      	cbz	r0, 8006542 <os_msys_get_pkthdr+0x1a>
        goto err;
    }

    m = os_mbuf_get_pkthdr(pool, user_hdr_len);
 8006538:	b2e1      	uxtb	r1, r4
    return (m);
err:
    return (NULL);
}
 800653a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    m = os_mbuf_get_pkthdr(pool, user_hdr_len);
 800653e:	f7ff bdd3 	b.w	80060e8 <os_mbuf_get_pkthdr>
}
 8006542:	bd10      	pop	{r4, pc}

08006544 <os_msys_num_free>:
os_msys_num_free(void)
{
    struct os_mbuf_pool *omp;
    int total;

    total = 0;
 8006544:	2000      	movs	r0, #0
    STAILQ_FOREACH(omp, &g_msys_pool_list, omp_next) {
 8006546:	4b04      	ldr	r3, [pc, #16]	; (8006558 <os_msys_num_free+0x14>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	b903      	cbnz	r3, 800654e <os_msys_num_free+0xa>
        total += omp->omp_pool->mp_num_free;
    }

    return total;
}
 800654c:	4770      	bx	lr
        total += omp->omp_pool->mp_num_free;
 800654e:	685a      	ldr	r2, [r3, #4]
    STAILQ_FOREACH(omp, &g_msys_pool_list, omp_next) {
 8006550:	689b      	ldr	r3, [r3, #8]
        total += omp->omp_pool->mp_num_free;
 8006552:	88d2      	ldrh	r2, [r2, #6]
 8006554:	4410      	add	r0, r2
 8006556:	e7f8      	b.n	800654a <os_msys_num_free+0x6>
 8006558:	2000014c 	.word	0x2000014c

0800655c <os_msys_init>:
    SYSINIT_PANIC_ASSERT(rc == 0);
}

void
os_msys_init(void)
{
 800655c:	b513      	push	{r0, r1, r4, lr}
    int rc;

    os_msys_reset();
 800655e:	f7ff ffdb 	bl	8006518 <os_msys_reset>
    rc = mem_init_mbuf_pool(data, mempool, mbuf_pool, block_count, block_size,
 8006562:	4b11      	ldr	r3, [pc, #68]	; (80065a8 <os_msys_init+0x4c>)
 8006564:	4a11      	ldr	r2, [pc, #68]	; (80065ac <os_msys_init+0x50>)
 8006566:	9301      	str	r3, [sp, #4]
 8006568:	f44f 7392 	mov.w	r3, #292	; 0x124
 800656c:	4910      	ldr	r1, [pc, #64]	; (80065b0 <os_msys_init+0x54>)
 800656e:	9300      	str	r3, [sp, #0]
 8006570:	4810      	ldr	r0, [pc, #64]	; (80065b4 <os_msys_init+0x58>)
 8006572:	230c      	movs	r3, #12
 8006574:	f001 fa85 	bl	8007a82 <mem_init_mbuf_pool>
    SYSINIT_PANIC_ASSERT(rc == 0);
 8006578:	b138      	cbz	r0, 800658a <os_msys_init+0x2e>
 800657a:	2300      	movs	r3, #0
 800657c:	4a0e      	ldr	r2, [pc, #56]	; (80065b8 <os_msys_init+0x5c>)
 800657e:	9300      	str	r3, [sp, #0]
 8006580:	6814      	ldr	r4, [r2, #0]
 8006582:	4619      	mov	r1, r3
 8006584:	461a      	mov	r2, r3
 8006586:	4618      	mov	r0, r3
 8006588:	47a0      	blx	r4
    rc = os_msys_register(mbuf_pool);
 800658a:	4808      	ldr	r0, [pc, #32]	; (80065ac <os_msys_init+0x50>)
 800658c:	f7ff ffa8 	bl	80064e0 <os_msys_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
 8006590:	b138      	cbz	r0, 80065a2 <os_msys_init+0x46>
 8006592:	2300      	movs	r3, #0
 8006594:	4a08      	ldr	r2, [pc, #32]	; (80065b8 <os_msys_init+0x5c>)
 8006596:	9300      	str	r3, [sp, #0]
 8006598:	6814      	ldr	r4, [r2, #0]
 800659a:	4619      	mov	r1, r3
 800659c:	461a      	mov	r2, r3
 800659e:	4618      	mov	r0, r3
 80065a0:	47a0      	blx	r4
    os_msys_sc.sc_checkin_itvl =
        OS_TICKS_PER_SEC * MYNEWT_VAL(MSYS_SANITY_TIMEOUT) / 1000;
    rc = os_sanity_check_register(&os_msys_sc);
    SYSINIT_PANIC_ASSERT(rc == 0);
#endif
}
 80065a2:	b002      	add	sp, #8
 80065a4:	bd10      	pop	{r4, pc}
 80065a6:	bf00      	nop
 80065a8:	0800de92 	.word	0x0800de92
 80065ac:	20002940 	.word	0x20002940
 80065b0:	2000294c 	.word	0x2000294c
 80065b4:	20001b90 	.word	0x20001b90
 80065b8:	20000148 	.word	0x20000148

080065bc <os_mutex_init>:
os_error_t
os_mutex_init(struct os_mutex *mu)
{
    os_error_t ret;

    if (!mu) {
 80065bc:	b130      	cbz	r0, 80065cc <os_mutex_init+0x10>
    }

    os_trace_api_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)mu);

    /* Initialize to 0 */
    mu->mu_prio = 0;
 80065be:	2300      	movs	r3, #0
 80065c0:	7143      	strb	r3, [r0, #5]
    mu->mu_level = 0;
 80065c2:	80c3      	strh	r3, [r0, #6]
    mu->mu_owner = NULL;
 80065c4:	6083      	str	r3, [r0, #8]
    SLIST_FIRST(&mu->mu_head) = NULL;
 80065c6:	6003      	str	r3, [r0, #0]

    ret = OS_OK;
 80065c8:	4618      	mov	r0, r3
 80065ca:	4770      	bx	lr
        ret = OS_INVALID_PARM;
 80065cc:	2003      	movs	r0, #3

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)ret);
    return ret;
}
 80065ce:	4770      	bx	lr

080065d0 <os_mutex_release>:

os_error_t
os_mutex_release(struct os_mutex *mu)
{
 80065d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)mu);

    /* Check if OS is started */
    if (!g_os_started) {
 80065d2:	4b26      	ldr	r3, [pc, #152]	; (800666c <os_mutex_release+0x9c>)
{
 80065d4:	4604      	mov	r4, r0
    if (!g_os_started) {
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d041      	beq.n	8006660 <os_mutex_release+0x90>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
 80065dc:	2800      	cmp	r0, #0
 80065de:	d041      	beq.n	8006664 <os_mutex_release+0x94>
        ret = OS_INVALID_PARM;
        goto done;
    }

    /* We better own this mutex! */
    current = os_sched_get_current_task();
 80065e0:	f000 f952 	bl	8006888 <os_sched_get_current_task>
    if ((mu->mu_level == 0) || (mu->mu_owner != current)) {
 80065e4:	88e3      	ldrh	r3, [r4, #6]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d03e      	beq.n	8006668 <os_mutex_release+0x98>
 80065ea:	68a6      	ldr	r6, [r4, #8]
 80065ec:	4286      	cmp	r6, r0
 80065ee:	d13b      	bne.n	8006668 <os_mutex_release+0x98>
        ret = OS_BAD_MUTEX;
        goto done;
    }

    /* Don't release if nested, just decrement nesting level */
    if (mu->mu_level != 1) {
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	d003      	beq.n	80065fc <os_mutex_release+0x2c>
        --mu->mu_level;
 80065f4:	3b01      	subs	r3, #1
 80065f6:	80e3      	strh	r3, [r4, #6]
    /* Re-schedule if needed */
    if (resched) {
        os_sched(rdy);
    }

    ret = OS_OK;
 80065f8:	2000      	movs	r0, #0
 80065fa:	e032      	b.n	8006662 <os_mutex_release+0x92>
    OS_ENTER_CRITICAL(sr);
 80065fc:	f7ff f8c8 	bl	8005790 <os_arch_save_sr>
    --mu->mu_level;
 8006600:	88e3      	ldrh	r3, [r4, #6]
    OS_ENTER_CRITICAL(sr);
 8006602:	4607      	mov	r7, r0
    --mu->mu_level;
 8006604:	3b01      	subs	r3, #1
 8006606:	80e3      	strh	r3, [r4, #6]
    if (current->t_prio != mu->mu_prio) {
 8006608:	7af2      	ldrb	r2, [r6, #11]
 800660a:	7963      	ldrb	r3, [r4, #5]
 800660c:	429a      	cmp	r2, r3
 800660e:	d003      	beq.n	8006618 <os_mutex_release+0x48>
        current->t_prio = mu->mu_prio;
 8006610:	72f3      	strb	r3, [r6, #11]
        os_sched_resort(current);
 8006612:	4630      	mov	r0, r6
 8006614:	f000 fa02 	bl	8006a1c <os_sched_resort>
    rdy = SLIST_FIRST(&mu->mu_head);
 8006618:	6825      	ldr	r5, [r4, #0]
    if (rdy) {
 800661a:	b16d      	cbz	r5, 8006638 <os_mutex_release+0x68>
        assert(rdy->t_obj);
 800661c:	69eb      	ldr	r3, [r5, #28]
 800661e:	b923      	cbnz	r3, 800662a <os_mutex_release+0x5a>
 8006620:	461a      	mov	r2, r3
 8006622:	4619      	mov	r1, r3
 8006624:	4618      	mov	r0, r3
 8006626:	f7ff f975 	bl	8005914 <__assert_func>
        os_sched_wakeup(rdy);
 800662a:	4628      	mov	r0, r5
 800662c:	f000 f984 	bl	8006938 <os_sched_wakeup>
        mu->mu_level = 1;
 8006630:	2301      	movs	r3, #1
 8006632:	80e3      	strh	r3, [r4, #6]
        mu->mu_prio = rdy->t_prio;
 8006634:	7aeb      	ldrb	r3, [r5, #11]
 8006636:	7163      	strb	r3, [r4, #5]
    mu->mu_owner = rdy;
 8006638:	60a5      	str	r5, [r4, #8]
    if (rdy) {
 800663a:	b115      	cbz	r5, 8006642 <os_mutex_release+0x72>
        rdy->t_lockcnt++;
 800663c:	7bab      	ldrb	r3, [r5, #14]
 800663e:	3301      	adds	r3, #1
 8006640:	73ab      	strb	r3, [r5, #14]
    --current->t_lockcnt;
 8006642:	7bb3      	ldrb	r3, [r6, #14]
 8006644:	3b01      	subs	r3, #1
 8006646:	73b3      	strb	r3, [r6, #14]
    rdy = os_sched_next_task();
 8006648:	f000 f9e2 	bl	8006a10 <os_sched_next_task>
 800664c:	4604      	mov	r4, r0
    OS_EXIT_CRITICAL(sr);
 800664e:	4638      	mov	r0, r7
 8006650:	f7ff f8a4 	bl	800579c <os_arch_restore_sr>
    if (resched) {
 8006654:	42a6      	cmp	r6, r4
 8006656:	d0cf      	beq.n	80065f8 <os_mutex_release+0x28>
        os_sched(rdy);
 8006658:	4620      	mov	r0, r4
 800665a:	f000 f921 	bl	80068a0 <os_sched>
 800665e:	e7cb      	b.n	80065f8 <os_mutex_release+0x28>
        ret = OS_NOT_STARTED;
 8006660:	2009      	movs	r0, #9

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)ret);
    return ret;
}
 8006662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ret = OS_INVALID_PARM;
 8006664:	2003      	movs	r0, #3
 8006666:	e7fc      	b.n	8006662 <os_mutex_release+0x92>
        ret = OS_BAD_MUTEX;
 8006668:	2005      	movs	r0, #5
 800666a:	e7fa      	b.n	8006662 <os_mutex_release+0x92>
 800666c:	200034bc 	.word	0x200034bc

08006670 <os_mutex_pend>:
    struct os_task *last;

    os_trace_api_u32x2(OS_TRACE_ID_MUTEX_PEND, (uint32_t)mu, (uint32_t)timeout);

    /* OS must be started when calling this function */
    if (!g_os_started) {
 8006670:	4b35      	ldr	r3, [pc, #212]	; (8006748 <os_mutex_pend+0xd8>)
{
 8006672:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (!g_os_started) {
 8006676:	681b      	ldr	r3, [r3, #0]
{
 8006678:	4606      	mov	r6, r0
 800667a:	4688      	mov	r8, r1
    if (!g_os_started) {
 800667c:	2b00      	cmp	r3, #0
 800667e:	d05e      	beq.n	800673e <os_mutex_pend+0xce>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
 8006680:	2800      	cmp	r0, #0
 8006682:	d05e      	beq.n	8006742 <os_mutex_pend+0xd2>
        ret = OS_INVALID_PARM;
        goto done;
    }

    OS_ENTER_CRITICAL(sr);
 8006684:	f7ff f884 	bl	8005790 <os_arch_save_sr>
 8006688:	4607      	mov	r7, r0

    /* Is this owned? */
    current = os_sched_get_current_task();
 800668a:	f000 f8fd 	bl	8006888 <os_sched_get_current_task>
    if (mu->mu_level == 0) {
 800668e:	88f5      	ldrh	r5, [r6, #6]
    current = os_sched_get_current_task();
 8006690:	4604      	mov	r4, r0
    if (mu->mu_level == 0) {
 8006692:	b96d      	cbnz	r5, 80066b0 <os_mutex_pend+0x40>
        mu->mu_owner = current;
 8006694:	60b0      	str	r0, [r6, #8]
        mu->mu_prio  = current->t_prio;
 8006696:	7ac3      	ldrb	r3, [r0, #11]
 8006698:	7173      	strb	r3, [r6, #5]
        current->t_lockcnt++;
 800669a:	7b83      	ldrb	r3, [r0, #14]
 800669c:	3301      	adds	r3, #1
 800669e:	7383      	strb	r3, [r0, #14]
        mu->mu_level = 1;
 80066a0:	2301      	movs	r3, #1
 80066a2:	80f3      	strh	r3, [r6, #6]
    }

    /* Are we owner? */
    if (mu->mu_owner == current) {
        ++mu->mu_level;
        OS_EXIT_CRITICAL(sr);
 80066a4:	4638      	mov	r0, r7
 80066a6:	f7ff f879 	bl	800579c <os_arch_restore_sr>
        ret = OS_OK;
 80066aa:	2000      	movs	r0, #0
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_PEND, (uint32_t)ret);
    return ret;
}
 80066ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (mu->mu_owner == current) {
 80066b0:	68b0      	ldr	r0, [r6, #8]
 80066b2:	42a0      	cmp	r0, r4
 80066b4:	d102      	bne.n	80066bc <os_mutex_pend+0x4c>
        ++mu->mu_level;
 80066b6:	1c68      	adds	r0, r5, #1
 80066b8:	80f0      	strh	r0, [r6, #6]
 80066ba:	e7f3      	b.n	80066a4 <os_mutex_pend+0x34>
    if (timeout == 0) {
 80066bc:	f1b8 0f00 	cmp.w	r8, #0
 80066c0:	d104      	bne.n	80066cc <os_mutex_pend+0x5c>
        OS_EXIT_CRITICAL(sr);
 80066c2:	4638      	mov	r0, r7
 80066c4:	f7ff f86a 	bl	800579c <os_arch_restore_sr>
        ret = OS_TIMEOUT;
 80066c8:	2006      	movs	r0, #6
        goto done;
 80066ca:	e7ef      	b.n	80066ac <os_mutex_pend+0x3c>
    if (mu->mu_owner->t_prio > current->t_prio) {
 80066cc:	7ae3      	ldrb	r3, [r4, #11]
 80066ce:	7ac2      	ldrb	r2, [r0, #11]
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d902      	bls.n	80066da <os_mutex_pend+0x6a>
        mu->mu_owner->t_prio = current->t_prio;
 80066d4:	72c3      	strb	r3, [r0, #11]
        os_sched_resort(mu->mu_owner);
 80066d6:	f000 f9a1 	bl	8006a1c <os_sched_resort>
    if (!SLIST_EMPTY(&mu->mu_head)) {
 80066da:	6831      	ldr	r1, [r6, #0]
 80066dc:	b361      	cbz	r1, 8006738 <os_mutex_pend+0xc8>
            if (current->t_prio < entry->t_prio) {
 80066de:	460a      	mov	r2, r1
    last = NULL;
 80066e0:	2300      	movs	r3, #0
            if (current->t_prio < entry->t_prio) {
 80066e2:	7ae5      	ldrb	r5, [r4, #11]
 80066e4:	7ad0      	ldrb	r0, [r2, #11]
 80066e6:	42a8      	cmp	r0, r5
 80066e8:	d824      	bhi.n	8006734 <os_mutex_pend+0xc4>
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
 80066ea:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 80066ec:	4613      	mov	r3, r2
 80066ee:	b9f8      	cbnz	r0, 8006730 <os_mutex_pend+0xc0>
        SLIST_INSERT_AFTER(last, current, t_obj_list);
 80066f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80066f2:	64e2      	str	r2, [r4, #76]	; 0x4c
 80066f4:	64dc      	str	r4, [r3, #76]	; 0x4c
    current->t_flags |= OS_TASK_FLAG_MUTEX_WAIT;
 80066f6:	7b63      	ldrb	r3, [r4, #13]
    os_sched_sleep(current, timeout);
 80066f8:	4641      	mov	r1, r8
    current->t_flags |= OS_TASK_FLAG_MUTEX_WAIT;
 80066fa:	f043 0304 	orr.w	r3, r3, #4
 80066fe:	7363      	strb	r3, [r4, #13]
    current->t_obj = mu;
 8006700:	61e6      	str	r6, [r4, #28]
    os_sched_sleep(current, timeout);
 8006702:	4620      	mov	r0, r4
 8006704:	f000 f8de 	bl	80068c4 <os_sched_sleep>
    OS_EXIT_CRITICAL(sr);
 8006708:	4638      	mov	r0, r7
 800670a:	f7ff f847 	bl	800579c <os_arch_restore_sr>
    os_sched(NULL);
 800670e:	2000      	movs	r0, #0
 8006710:	f000 f8c6 	bl	80068a0 <os_sched>
    OS_ENTER_CRITICAL(sr);
 8006714:	f7ff f83c 	bl	8005790 <os_arch_save_sr>
    current->t_flags &= ~OS_TASK_FLAG_MUTEX_WAIT;
 8006718:	7b63      	ldrb	r3, [r4, #13]
 800671a:	f023 0304 	bic.w	r3, r3, #4
 800671e:	7363      	strb	r3, [r4, #13]
    OS_EXIT_CRITICAL(sr);
 8006720:	f7ff f83c 	bl	800579c <os_arch_restore_sr>
    if (mu->mu_owner == current) {
 8006724:	68b0      	ldr	r0, [r6, #8]
        ret = OS_TIMEOUT;
 8006726:	42a0      	cmp	r0, r4
 8006728:	bf14      	ite	ne
 800672a:	2006      	movne	r0, #6
 800672c:	2000      	moveq	r0, #0
 800672e:	e7bd      	b.n	80066ac <os_mutex_pend+0x3c>
 8006730:	4602      	mov	r2, r0
 8006732:	e7d7      	b.n	80066e4 <os_mutex_pend+0x74>
    if (last) {
 8006734:	2b00      	cmp	r3, #0
 8006736:	d1db      	bne.n	80066f0 <os_mutex_pend+0x80>
        SLIST_INSERT_HEAD(&mu->mu_head, current, t_obj_list);
 8006738:	64e1      	str	r1, [r4, #76]	; 0x4c
 800673a:	6034      	str	r4, [r6, #0]
 800673c:	e7db      	b.n	80066f6 <os_mutex_pend+0x86>
        ret = OS_NOT_STARTED;
 800673e:	2009      	movs	r0, #9
 8006740:	e7b4      	b.n	80066ac <os_mutex_pend+0x3c>
        ret = OS_INVALID_PARM;
 8006742:	2003      	movs	r0, #3
 8006744:	e7b2      	b.n	80066ac <os_mutex_pend+0x3c>
 8006746:	bf00      	nop
 8006748:	200034bc 	.word	0x200034bc

0800674c <os_sanity_check_list_lock>:
 *
 * @return 0 on success, error code on failure.
 */
static int
os_sanity_check_list_lock(void)
{
 800674c:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
 800674e:	4b04      	ldr	r3, [pc, #16]	; (8006760 <os_sanity_check_list_lock+0x14>)
 8006750:	6818      	ldr	r0, [r3, #0]
 8006752:	b120      	cbz	r0, 800675e <os_sanity_check_list_lock+0x12>
        return (0);
    }

    rc = os_mutex_pend(&g_os_sanity_check_mu, OS_WAIT_FOREVER);
 8006754:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006758:	4802      	ldr	r0, [pc, #8]	; (8006764 <os_sanity_check_list_lock+0x18>)
 800675a:	f7ff ff89 	bl	8006670 <os_mutex_pend>
    }

    return (0);
err:
    return (rc);
}
 800675e:	bd08      	pop	{r3, pc}
 8006760:	200034bc 	.word	0x200034bc
 8006764:	200034d0 	.word	0x200034d0

08006768 <os_sanity_check_list_unlock>:
 *
 * @return 0 on success, error code on failure
 */
static int
os_sanity_check_list_unlock(void)
{
 8006768:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
 800676a:	4b03      	ldr	r3, [pc, #12]	; (8006778 <os_sanity_check_list_unlock+0x10>)
 800676c:	6818      	ldr	r0, [r3, #0]
 800676e:	b110      	cbz	r0, 8006776 <os_sanity_check_list_unlock+0xe>
        return (0);
    }

    rc = os_mutex_release(&g_os_sanity_check_mu);
 8006770:	4802      	ldr	r0, [pc, #8]	; (800677c <os_sanity_check_list_unlock+0x14>)
 8006772:	f7ff ff2d 	bl	80065d0 <os_mutex_release>
    }

    return (0);
err:
    return (rc);
}
 8006776:	bd08      	pop	{r3, pc}
 8006778:	200034bc 	.word	0x200034bc
 800677c:	200034d0 	.word	0x200034d0

08006780 <os_sanity_check_init>:
{
 8006780:	b508      	push	{r3, lr}
    memset(sc, 0, sizeof(*sc));
 8006782:	2214      	movs	r2, #20
 8006784:	2100      	movs	r1, #0
 8006786:	f000 fc60 	bl	800704a <memset>
}
 800678a:	2000      	movs	r0, #0
 800678c:	bd08      	pop	{r3, pc}
	...

08006790 <os_sanity_check_register>:
}


int
os_sanity_check_register(struct os_sanity_check *sc)
{
 8006790:	b510      	push	{r4, lr}
 8006792:	4604      	mov	r4, r0
    int rc;

    rc = os_sanity_check_list_lock();
 8006794:	f7ff ffda 	bl	800674c <os_sanity_check_list_lock>
    if (rc != OS_OK) {
 8006798:	b938      	cbnz	r0, 80067aa <os_sanity_check_register+0x1a>
        goto err;
    }

    SLIST_INSERT_HEAD(&g_os_sanity_check_list, sc, sc_next);
 800679a:	4b04      	ldr	r3, [pc, #16]	; (80067ac <os_sanity_check_register+0x1c>)
 800679c:	681a      	ldr	r2, [r3, #0]
 800679e:	601c      	str	r4, [r3, #0]
 80067a0:	6122      	str	r2, [r4, #16]
    }

    return (0);
err:
    return (rc);
}
 80067a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    rc = os_sanity_check_list_unlock();
 80067a6:	f7ff bfdf 	b.w	8006768 <os_sanity_check_list_unlock>
}
 80067aa:	bd10      	pop	{r4, pc}
 80067ac:	20002968 	.word	0x20002968

080067b0 <os_sanity_run>:
 * Goes through the sanity check list, and performs sanity checks.  If any of
 * these checks failed, or tasks have not checked in, it resets the processor.
 */
void
os_sanity_run(void)
{
 80067b0:	b510      	push	{r4, lr}
    struct os_sanity_check *sc;
    int rc;

    rc = os_sanity_check_list_lock();
 80067b2:	f7ff ffcb 	bl	800674c <os_sanity_check_list_lock>
    if (rc != 0) {
 80067b6:	b128      	cbz	r0, 80067c4 <os_sanity_run+0x14>
        assert(0);
 80067b8:	2300      	movs	r3, #0
 80067ba:	461a      	mov	r2, r3
 80067bc:	4619      	mov	r1, r3
 80067be:	4618      	mov	r0, r3
 80067c0:	f7ff f8a8 	bl	8005914 <__assert_func>
    }

    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
 80067c4:	4b0d      	ldr	r3, [pc, #52]	; (80067fc <os_sanity_run+0x4c>)
 80067c6:	681c      	ldr	r4, [r3, #0]
 80067c8:	b924      	cbnz	r4, 80067d4 <os_sanity_run+0x24>
                    sc->sc_checkin_last + sc->sc_checkin_itvl)) {
            assert(0);
        }
    }

    rc = os_sanity_check_list_unlock();
 80067ca:	f7ff ffcd 	bl	8006768 <os_sanity_check_list_unlock>
    if (rc != 0) {
 80067ce:	2800      	cmp	r0, #0
 80067d0:	d1f2      	bne.n	80067b8 <os_sanity_run+0x8>
        assert(0);
    }
}
 80067d2:	bd10      	pop	{r4, pc}
        if (sc->sc_func) {
 80067d4:	68a3      	ldr	r3, [r4, #8]
 80067d6:	b143      	cbz	r3, 80067ea <os_sanity_run+0x3a>
            rc = sc->sc_func(sc, sc->sc_arg);
 80067d8:	68e1      	ldr	r1, [r4, #12]
 80067da:	4620      	mov	r0, r4
 80067dc:	4798      	blx	r3
            if (rc == OS_OK) {
 80067de:	b920      	cbnz	r0, 80067ea <os_sanity_run+0x3a>
                sc->sc_checkin_last = os_time_get();
 80067e0:	f000 fa56 	bl	8006c90 <os_time_get>
 80067e4:	6020      	str	r0, [r4, #0]
    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
 80067e6:	6924      	ldr	r4, [r4, #16]
 80067e8:	e7ee      	b.n	80067c8 <os_sanity_run+0x18>
        if (OS_TIME_TICK_GT(os_time_get(),
 80067ea:	f000 fa51 	bl	8006c90 <os_time_get>
 80067ee:	e9d4 3200 	ldrd	r3, r2, [r4]
 80067f2:	4413      	add	r3, r2
 80067f4:	1ac3      	subs	r3, r0, r3
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	ddf5      	ble.n	80067e6 <os_sanity_run+0x36>
 80067fa:	e7dd      	b.n	80067b8 <os_sanity_run+0x8>
 80067fc:	20002968 	.word	0x20002968

08006800 <os_sanity_init>:

int
os_sanity_init(void)
{
 8006800:	b508      	push	{r3, lr}
    int rc;

    rc = os_mutex_init(&g_os_sanity_check_mu);
 8006802:	4802      	ldr	r0, [pc, #8]	; (800680c <os_sanity_init+0xc>)
 8006804:	f7ff feda 	bl	80065bc <os_mutex_init>
    }

    return (0);
err:
    return (rc);
}
 8006808:	bd08      	pop	{r3, pc}
 800680a:	bf00      	nop
 800680c:	200034d0 	.word	0x200034d0

08006810 <os_sched_insert>:
 * @return int  OS_OK: task was inserted into run list
 *              OS_EINVAL: Task was not in ready state.
 */
os_error_t
os_sched_insert(struct os_task *t)
{
 8006810:	b538      	push	{r3, r4, r5, lr}
    struct os_task *entry;
    os_sr_t sr;
    os_error_t rc;

    if (t->t_state != OS_TASK_READY) {
 8006812:	7b03      	ldrb	r3, [r0, #12]
{
 8006814:	4604      	mov	r4, r0
    if (t->t_state != OS_TASK_READY) {
 8006816:	2b01      	cmp	r3, #1
 8006818:	d111      	bne.n	800683e <os_sched_insert+0x2e>
        rc = OS_EINVAL;
        goto err;
    }

    entry = NULL;
    OS_ENTER_CRITICAL(sr);
 800681a:	f7fe ffb9 	bl	8005790 <os_arch_save_sr>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
 800681e:	4a0e      	ldr	r2, [pc, #56]	; (8006858 <os_sched_insert+0x48>)
 8006820:	6813      	ldr	r3, [r2, #0]
 8006822:	b933      	cbnz	r3, 8006832 <os_sched_insert+0x22>
        }
    }
    if (entry) {
        TAILQ_INSERT_BEFORE(entry, (struct os_task *) t, t_os_list);
    } else {
        TAILQ_INSERT_TAIL(&g_os_run_list, (struct os_task *) t, t_os_list);
 8006824:	6463      	str	r3, [r4, #68]	; 0x44
 8006826:	6853      	ldr	r3, [r2, #4]
 8006828:	64a3      	str	r3, [r4, #72]	; 0x48
 800682a:	601c      	str	r4, [r3, #0]
 800682c:	3444      	adds	r4, #68	; 0x44
 800682e:	6054      	str	r4, [r2, #4]
 8006830:	e00e      	b.n	8006850 <os_sched_insert+0x40>
        if (t->t_prio < entry->t_prio) {
 8006832:	7ae5      	ldrb	r5, [r4, #11]
 8006834:	7ad9      	ldrb	r1, [r3, #11]
 8006836:	428d      	cmp	r5, r1
 8006838:	d303      	bcc.n	8006842 <os_sched_insert+0x32>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
 800683a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800683c:	e7f1      	b.n	8006822 <os_sched_insert+0x12>
    }
    OS_EXIT_CRITICAL(sr);

    return (0);
err:
    return (rc);
 800683e:	2002      	movs	r0, #2
 8006840:	e009      	b.n	8006856 <os_sched_insert+0x46>
        TAILQ_INSERT_BEFORE(entry, (struct os_task *) t, t_os_list);
 8006842:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006844:	e9c4 3211 	strd	r3, r2, [r4, #68]	; 0x44
 8006848:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800684a:	6014      	str	r4, [r2, #0]
 800684c:	3444      	adds	r4, #68	; 0x44
 800684e:	649c      	str	r4, [r3, #72]	; 0x48
    OS_EXIT_CRITICAL(sr);
 8006850:	f7fe ffa4 	bl	800579c <os_arch_restore_sr>
 8006854:	2000      	movs	r0, #0
}
 8006856:	bd38      	pop	{r3, r4, r5, pc}
 8006858:	20000154 	.word	0x20000154

0800685c <os_sched_ctx_sw_hook>:
    top = g_current_task->t_stacktop - g_current_task->t_stacksize;
    for (i = 0; i < MYNEWT_VAL(OS_CTX_SW_STACK_GUARD); i++) {
        assert(top[i] == OS_STACK_PATTERN);
    }
#endif
    next_t->t_ctx_sw_cnt++;
 800685c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
{
 800685e:	b510      	push	{r4, lr}
    next_t->t_ctx_sw_cnt++;
 8006860:	3301      	adds	r3, #1
 8006862:	63c3      	str	r3, [r0, #60]	; 0x3c
    g_current_task->t_run_time += g_os_time - g_os_last_ctx_sw_time;
 8006864:	4b05      	ldr	r3, [pc, #20]	; (800687c <os_sched_ctx_sw_hook+0x20>)
 8006866:	4a06      	ldr	r2, [pc, #24]	; (8006880 <os_sched_ctx_sw_hook+0x24>)
 8006868:	6818      	ldr	r0, [r3, #0]
 800686a:	4b06      	ldr	r3, [pc, #24]	; (8006884 <os_sched_ctx_sw_hook+0x28>)
 800686c:	6814      	ldr	r4, [r2, #0]
 800686e:	6819      	ldr	r1, [r3, #0]
 8006870:	6b83      	ldr	r3, [r0, #56]	; 0x38
    g_os_last_ctx_sw_time = g_os_time;
 8006872:	6011      	str	r1, [r2, #0]
    g_current_task->t_run_time += g_os_time - g_os_last_ctx_sw_time;
 8006874:	1b1b      	subs	r3, r3, r4
 8006876:	440b      	add	r3, r1
 8006878:	6383      	str	r3, [r0, #56]	; 0x38
}
 800687a:	bd10      	pop	{r4, pc}
 800687c:	200034dc 	.word	0x200034dc
 8006880:	200034e0 	.word	0x200034e0
 8006884:	200034f0 	.word	0x200034f0

08006888 <os_sched_get_current_task>:

struct os_task *
os_sched_get_current_task(void)
{
    return (g_current_task);
}
 8006888:	4b01      	ldr	r3, [pc, #4]	; (8006890 <os_sched_get_current_task+0x8>)
 800688a:	6818      	ldr	r0, [r3, #0]
 800688c:	4770      	bx	lr
 800688e:	bf00      	nop
 8006890:	200034dc 	.word	0x200034dc

08006894 <os_sched_set_current_task>:
 * @param t Pointer to currently running task.
 */
void
os_sched_set_current_task(struct os_task *t)
{
    g_current_task = t;
 8006894:	4b01      	ldr	r3, [pc, #4]	; (800689c <os_sched_set_current_task+0x8>)
 8006896:	6018      	str	r0, [r3, #0]
}
 8006898:	4770      	bx	lr
 800689a:	bf00      	nop
 800689c:	200034dc 	.word	0x200034dc

080068a0 <os_sched>:

void
os_sched(struct os_task *next_t)
{
 80068a0:	b538      	push	{r3, r4, r5, lr}
 80068a2:	4604      	mov	r4, r0
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
 80068a4:	f7fe ff74 	bl	8005790 <os_arch_save_sr>
 80068a8:	4605      	mov	r5, r0

    if (!next_t) {
 80068aa:	b90c      	cbnz	r4, 80068b0 <os_sched+0x10>
 * @return struct os_task*
 */
struct os_task *
os_sched_next_task(void)
{
    return (TAILQ_FIRST(&g_os_run_list));
 80068ac:	4b04      	ldr	r3, [pc, #16]	; (80068c0 <os_sched+0x20>)
 80068ae:	681c      	ldr	r4, [r3, #0]
    os_arch_ctx_sw(next_t);
 80068b0:	4620      	mov	r0, r4
 80068b2:	f7fe ff63 	bl	800577c <os_arch_ctx_sw>
    OS_EXIT_CRITICAL(sr);
 80068b6:	4628      	mov	r0, r5
}
 80068b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    OS_EXIT_CRITICAL(sr);
 80068bc:	f7fe bf6e 	b.w	800579c <os_arch_restore_sr>
 80068c0:	20000154 	.word	0x20000154

080068c4 <os_sched_sleep>:
{
 80068c4:	b570      	push	{r4, r5, r6, lr}
 80068c6:	e9d0 3211 	ldrd	r3, r2, [r0, #68]	; 0x44
 80068ca:	4604      	mov	r4, r0
 80068cc:	460e      	mov	r6, r1
    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
 80068ce:	b1cb      	cbz	r3, 8006904 <os_sched_sleep+0x40>
 80068d0:	649a      	str	r2, [r3, #72]	; 0x48
 80068d2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80068d4:	f104 0544 	add.w	r5, r4, #68	; 0x44
 80068d8:	6013      	str	r3, [r2, #0]
    t->t_state = OS_TASK_SLEEP;
 80068da:	2302      	movs	r3, #2
 80068dc:	7323      	strb	r3, [r4, #12]
    t->t_next_wakeup = os_time_get() + nticks;
 80068de:	f000 f9d7 	bl	8006c90 <os_time_get>
 80068e2:	4430      	add	r0, r6
    if (nticks == OS_TIMEOUT_NEVER) {
 80068e4:	3601      	adds	r6, #1
    t->t_next_wakeup = os_time_get() + nticks;
 80068e6:	6360      	str	r0, [r4, #52]	; 0x34
 80068e8:	4a11      	ldr	r2, [pc, #68]	; (8006930 <os_sched_sleep+0x6c>)
    if (nticks == OS_TIMEOUT_NEVER) {
 80068ea:	d10e      	bne.n	800690a <os_sched_sleep+0x46>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
 80068ec:	7b63      	ldrb	r3, [r4, #13]
 80068ee:	f043 0301 	orr.w	r3, r3, #1
 80068f2:	7363      	strb	r3, [r4, #13]
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
 80068f4:	2300      	movs	r3, #0
            TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
 80068f6:	6463      	str	r3, [r4, #68]	; 0x44
 80068f8:	6853      	ldr	r3, [r2, #4]
 80068fa:	64a3      	str	r3, [r4, #72]	; 0x48
 80068fc:	601c      	str	r4, [r3, #0]
 80068fe:	6055      	str	r5, [r2, #4]
}
 8006900:	2000      	movs	r0, #0
 8006902:	bd70      	pop	{r4, r5, r6, pc}
    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
 8006904:	490b      	ldr	r1, [pc, #44]	; (8006934 <os_sched_sleep+0x70>)
 8006906:	604a      	str	r2, [r1, #4]
 8006908:	e7e3      	b.n	80068d2 <os_sched_sleep+0xe>
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
 800690a:	6813      	ldr	r3, [r2, #0]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d0f2      	beq.n	80068f6 <os_sched_sleep+0x32>
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
 8006910:	7b59      	ldrb	r1, [r3, #13]
 8006912:	07c9      	lsls	r1, r1, #31
 8006914:	d405      	bmi.n	8006922 <os_sched_sleep+0x5e>
                    OS_TIME_TICK_GT(entry->t_next_wakeup, t->t_next_wakeup)) {
 8006916:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006918:	1a09      	subs	r1, r1, r0
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
 800691a:	2900      	cmp	r1, #0
 800691c:	dc01      	bgt.n	8006922 <os_sched_sleep+0x5e>
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
 800691e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006920:	e7f4      	b.n	800690c <os_sched_sleep+0x48>
            TAILQ_INSERT_BEFORE(entry, t, t_os_list);
 8006922:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006924:	e9c4 3211 	strd	r3, r2, [r4, #68]	; 0x44
 8006928:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800692a:	6014      	str	r4, [r2, #0]
 800692c:	649d      	str	r5, [r3, #72]	; 0x48
    return (0);
 800692e:	e7e7      	b.n	8006900 <os_sched_sleep+0x3c>
 8006930:	2000015c 	.word	0x2000015c
 8006934:	20000154 	.word	0x20000154

08006938 <os_sched_wakeup>:
{
 8006938:	b508      	push	{r3, lr}
    assert(t->t_state == OS_TASK_SLEEP);
 800693a:	7b03      	ldrb	r3, [r0, #12]
 800693c:	2b02      	cmp	r3, #2
 800693e:	d005      	beq.n	800694c <os_sched_wakeup+0x14>
 8006940:	2300      	movs	r3, #0
 8006942:	461a      	mov	r2, r3
 8006944:	4619      	mov	r1, r3
 8006946:	4618      	mov	r0, r3
 8006948:	f7fe ffe4 	bl	8005914 <__assert_func>
    if (t->t_obj) {
 800694c:	69c2      	ldr	r2, [r0, #28]
 800694e:	b14a      	cbz	r2, 8006964 <os_sched_wakeup+0x2c>
        assert(!SLIST_EMPTY(&os_obj->obj_head));
 8006950:	6813      	ldr	r3, [r2, #0]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d0f4      	beq.n	8006940 <os_sched_wakeup+0x8>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
 8006956:	4283      	cmp	r3, r0
 8006958:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800695a:	d116      	bne.n	800698a <os_sched_wakeup+0x52>
 800695c:	6011      	str	r1, [r2, #0]
        SLIST_NEXT(t, t_obj_list) = NULL;
 800695e:	2300      	movs	r3, #0
 8006960:	64c3      	str	r3, [r0, #76]	; 0x4c
        t->t_obj = NULL;
 8006962:	61c3      	str	r3, [r0, #28]
    t->t_state = OS_TASK_READY;
 8006964:	2301      	movs	r3, #1
 8006966:	7303      	strb	r3, [r0, #12]
    t->t_next_wakeup = 0;
 8006968:	2300      	movs	r3, #0
 800696a:	6343      	str	r3, [r0, #52]	; 0x34
    t->t_flags &= ~OS_TASK_FLAG_NO_TIMEOUT;
 800696c:	7b43      	ldrb	r3, [r0, #13]
 800696e:	f023 0301 	bic.w	r3, r3, #1
 8006972:	7343      	strb	r3, [r0, #13]
 8006974:	e9d0 3211 	ldrd	r3, r2, [r0, #68]	; 0x44
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
 8006978:	b163      	cbz	r3, 8006994 <os_sched_wakeup+0x5c>
 800697a:	649a      	str	r2, [r3, #72]	; 0x48
 800697c:	6c82      	ldr	r2, [r0, #72]	; 0x48
 800697e:	6013      	str	r3, [r2, #0]
    os_sched_insert(t);
 8006980:	f7ff ff46 	bl	8006810 <os_sched_insert>
}
 8006984:	2000      	movs	r0, #0
 8006986:	bd08      	pop	{r3, pc}
 8006988:	4613      	mov	r3, r2
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
 800698a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800698c:	4282      	cmp	r2, r0
 800698e:	d1fb      	bne.n	8006988 <os_sched_wakeup+0x50>
 8006990:	64d9      	str	r1, [r3, #76]	; 0x4c
 8006992:	e7e4      	b.n	800695e <os_sched_wakeup+0x26>
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
 8006994:	4901      	ldr	r1, [pc, #4]	; (800699c <os_sched_wakeup+0x64>)
 8006996:	604a      	str	r2, [r1, #4]
 8006998:	e7f0      	b.n	800697c <os_sched_wakeup+0x44>
 800699a:	bf00      	nop
 800699c:	2000015c 	.word	0x2000015c

080069a0 <os_sched_os_timer_exp>:
{
 80069a0:	b570      	push	{r4, r5, r6, lr}
    now = os_time_get();
 80069a2:	f000 f975 	bl	8006c90 <os_time_get>
 80069a6:	4605      	mov	r5, r0
    OS_ENTER_CRITICAL(sr);
 80069a8:	f7fe fef2 	bl	8005790 <os_arch_save_sr>
    t = TAILQ_FIRST(&g_os_sleep_list);
 80069ac:	4b0a      	ldr	r3, [pc, #40]	; (80069d8 <os_sched_os_timer_exp+0x38>)
    OS_ENTER_CRITICAL(sr);
 80069ae:	4604      	mov	r4, r0
    t = TAILQ_FIRST(&g_os_sleep_list);
 80069b0:	6818      	ldr	r0, [r3, #0]
    while (t) {
 80069b2:	b920      	cbnz	r0, 80069be <os_sched_os_timer_exp+0x1e>
    OS_EXIT_CRITICAL(sr);
 80069b4:	4620      	mov	r0, r4
}
 80069b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    OS_EXIT_CRITICAL(sr);
 80069ba:	f7fe beef 	b.w	800579c <os_arch_restore_sr>
        if (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT) {
 80069be:	7b43      	ldrb	r3, [r0, #13]
 80069c0:	07db      	lsls	r3, r3, #31
 80069c2:	d4f7      	bmi.n	80069b4 <os_sched_os_timer_exp+0x14>
        if (OS_TIME_TICK_GEQ(now, t->t_next_wakeup)) {
 80069c4:	6b43      	ldr	r3, [r0, #52]	; 0x34
        next = TAILQ_NEXT(t, t_os_list);
 80069c6:	6c46      	ldr	r6, [r0, #68]	; 0x44
        if (OS_TIME_TICK_GEQ(now, t->t_next_wakeup)) {
 80069c8:	1aeb      	subs	r3, r5, r3
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	dbf2      	blt.n	80069b4 <os_sched_os_timer_exp+0x14>
            os_sched_wakeup(t);
 80069ce:	f7ff ffb3 	bl	8006938 <os_sched_wakeup>
        t = next;
 80069d2:	4630      	mov	r0, r6
 80069d4:	e7ed      	b.n	80069b2 <os_sched_os_timer_exp+0x12>
 80069d6:	bf00      	nop
 80069d8:	2000015c 	.word	0x2000015c

080069dc <os_sched_wakeup_ticks>:
{
 80069dc:	b510      	push	{r4, lr}
 80069de:	4604      	mov	r4, r0
    OS_ASSERT_CRITICAL();
 80069e0:	f7fe fedf 	bl	80057a2 <os_arch_in_critical>
 80069e4:	4603      	mov	r3, r0
 80069e6:	b918      	cbnz	r0, 80069f0 <os_sched_wakeup_ticks+0x14>
 80069e8:	4602      	mov	r2, r0
 80069ea:	4601      	mov	r1, r0
 80069ec:	f7fe ff92 	bl	8005914 <__assert_func>
    t = TAILQ_FIRST(&g_os_sleep_list);
 80069f0:	4b06      	ldr	r3, [pc, #24]	; (8006a0c <os_sched_wakeup_ticks+0x30>)
 80069f2:	681b      	ldr	r3, [r3, #0]
    if (t == NULL || (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT)) {
 80069f4:	b13b      	cbz	r3, 8006a06 <os_sched_wakeup_ticks+0x2a>
 80069f6:	7b5a      	ldrb	r2, [r3, #13]
 80069f8:	07d2      	lsls	r2, r2, #31
 80069fa:	d404      	bmi.n	8006a06 <os_sched_wakeup_ticks+0x2a>
    } else if (OS_TIME_TICK_GEQ(t->t_next_wakeup, now)) {
 80069fc:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80069fe:	1b00      	subs	r0, r0, r4
        rt = 0;     /* wakeup time was in the past */
 8006a00:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 8006a04:	bd10      	pop	{r4, pc}
        rt = OS_TIMEOUT_NEVER;
 8006a06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a0a:	e7fb      	b.n	8006a04 <os_sched_wakeup_ticks+0x28>
 8006a0c:	2000015c 	.word	0x2000015c

08006a10 <os_sched_next_task>:
}
 8006a10:	4b01      	ldr	r3, [pc, #4]	; (8006a18 <os_sched_next_task+0x8>)
 8006a12:	6818      	ldr	r0, [r3, #0]
 8006a14:	4770      	bx	lr
 8006a16:	bf00      	nop
 8006a18:	20000154 	.word	0x20000154

08006a1c <os_sched_resort>:
 * are not disabled here.
 */
void
os_sched_resort(struct os_task *t)
{
    if (t->t_state == OS_TASK_READY) {
 8006a1c:	7b03      	ldrb	r3, [r0, #12]
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	d10a      	bne.n	8006a38 <os_sched_resort+0x1c>
 8006a22:	e9d0 3211 	ldrd	r3, r2, [r0, #68]	; 0x44
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
 8006a26:	b123      	cbz	r3, 8006a32 <os_sched_resort+0x16>
 8006a28:	649a      	str	r2, [r3, #72]	; 0x48
 8006a2a:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8006a2c:	6013      	str	r3, [r2, #0]
        os_sched_insert(t);
 8006a2e:	f7ff beef 	b.w	8006810 <os_sched_insert>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
 8006a32:	4902      	ldr	r1, [pc, #8]	; (8006a3c <os_sched_resort+0x20>)
 8006a34:	604a      	str	r2, [r1, #4]
 8006a36:	e7f8      	b.n	8006a2a <os_sched_resort+0xe>
    }
}
 8006a38:	4770      	bx	lr
 8006a3a:	bf00      	nop
 8006a3c:	20000154 	.word	0x20000154

08006a40 <os_sem_init>:
{
    os_error_t ret;

    os_trace_api_u32x2(OS_TRACE_ID_SEM_INIT, (uint32_t)sem, (uint32_t)tokens);

    if (!sem) {
 8006a40:	b120      	cbz	r0, 8006a4c <os_sem_init+0xc>
        ret = OS_INVALID_PARM;
        goto done;
    }

    sem->sem_tokens = tokens;
    SLIST_FIRST(&sem->sem_head) = NULL;
 8006a42:	2300      	movs	r3, #0
    sem->sem_tokens = tokens;
 8006a44:	80c1      	strh	r1, [r0, #6]
    SLIST_FIRST(&sem->sem_head) = NULL;
 8006a46:	6003      	str	r3, [r0, #0]

    ret = OS_OK;
 8006a48:	4618      	mov	r0, r3
 8006a4a:	4770      	bx	lr
        ret = OS_INVALID_PARM;
 8006a4c:	2003      	movs	r0, #3

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_INIT, (uint32_t)ret);
    return ret;
}
 8006a4e:	4770      	bx	lr

08006a50 <os_sem_release>:

os_error_t
os_sem_release(struct os_sem *sem)
{
 8006a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_SEM_RELEASE, (uint32_t)sem);

    /* OS must be started to release semaphores */
    if (!g_os_started) {
 8006a52:	4b17      	ldr	r3, [pc, #92]	; (8006ab0 <os_sem_release+0x60>)
{
 8006a54:	4604      	mov	r4, r0
    if (!g_os_started) {
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	b31b      	cbz	r3, 8006aa2 <os_sem_release+0x52>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid semaphore */
    if (!sem) {
 8006a5a:	b320      	cbz	r0, 8006aa6 <os_sem_release+0x56>
        goto done;
    }

    /* Get current task */
    resched = 0;
    current = os_sched_get_current_task();
 8006a5c:	f7ff ff14 	bl	8006888 <os_sched_get_current_task>
 8006a60:	4607      	mov	r7, r0

    OS_ENTER_CRITICAL(sr);
 8006a62:	f7fe fe95 	bl	8005790 <os_arch_save_sr>

    /* Check if tasks are waiting for the semaphore */
    rdy = SLIST_FIRST(&sem->sem_head);
 8006a66:	6825      	ldr	r5, [r4, #0]
    OS_ENTER_CRITICAL(sr);
 8006a68:	4606      	mov	r6, r0
    if (rdy) {
 8006a6a:	b1ad      	cbz	r5, 8006a98 <os_sem_release+0x48>
        /* Clear flag that we are waiting on the semaphore; wake up task */
        rdy->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
 8006a6c:	7b6b      	ldrb	r3, [r5, #13]
        os_sched_wakeup(rdy);
 8006a6e:	4628      	mov	r0, r5
        rdy->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
 8006a70:	f023 0302 	bic.w	r3, r3, #2
 8006a74:	736b      	strb	r3, [r5, #13]
        os_sched_wakeup(rdy);
 8006a76:	f7ff ff5f 	bl	8006938 <os_sched_wakeup>

        /* Schedule if waiting task higher priority */
        if (current->t_prio > rdy->t_prio) {
 8006a7a:	7aec      	ldrb	r4, [r5, #11]
 8006a7c:	7af8      	ldrb	r0, [r7, #11]
 8006a7e:	42a0      	cmp	r0, r4
 8006a80:	bf94      	ite	ls
 8006a82:	2400      	movls	r4, #0
 8006a84:	2401      	movhi	r4, #1
    } else {
        /* Add to the number of tokens */
        sem->sem_tokens++;
    }

    OS_EXIT_CRITICAL(sr);
 8006a86:	4630      	mov	r0, r6
 8006a88:	f7fe fe88 	bl	800579c <os_arch_restore_sr>

    /* Re-schedule if needed */
    if (resched) {
 8006a8c:	b16c      	cbz	r4, 8006aaa <os_sem_release+0x5a>
        os_sched(rdy);
 8006a8e:	4628      	mov	r0, r5
 8006a90:	f7ff ff06 	bl	80068a0 <os_sched>
    }

    ret = OS_OK;
 8006a94:	2000      	movs	r0, #0

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_RELEASE, (uint32_t)ret);
    return ret;
}
 8006a96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        sem->sem_tokens++;
 8006a98:	88e3      	ldrh	r3, [r4, #6]
 8006a9a:	3301      	adds	r3, #1
 8006a9c:	80e3      	strh	r3, [r4, #6]
    resched = 0;
 8006a9e:	462c      	mov	r4, r5
 8006aa0:	e7f1      	b.n	8006a86 <os_sem_release+0x36>
        ret = OS_NOT_STARTED;
 8006aa2:	2009      	movs	r0, #9
 8006aa4:	e7f7      	b.n	8006a96 <os_sem_release+0x46>
        ret = OS_INVALID_PARM;
 8006aa6:	2003      	movs	r0, #3
 8006aa8:	e7f5      	b.n	8006a96 <os_sem_release+0x46>
    ret = OS_OK;
 8006aaa:	4620      	mov	r0, r4
 8006aac:	e7f3      	b.n	8006a96 <os_sem_release+0x46>
 8006aae:	bf00      	nop
 8006ab0:	200034bc 	.word	0x200034bc

08006ab4 <os_sem_pend>:

os_error_t
os_sem_pend(struct os_sem *sem, os_time_t timeout)
{
 8006ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32x2(OS_TRACE_ID_SEM_PEND, (uint32_t)sem, (uint32_t)timeout);

    /* Check if OS is started */
    if (!g_os_started) {
 8006ab6:	4b29      	ldr	r3, [pc, #164]	; (8006b5c <os_sem_pend+0xa8>)
{
 8006ab8:	4604      	mov	r4, r0
    if (!g_os_started) {
 8006aba:	681b      	ldr	r3, [r3, #0]
{
 8006abc:	460e      	mov	r6, r1
    if (!g_os_started) {
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d047      	beq.n	8006b52 <os_sem_pend+0x9e>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid semaphore */
    if (!sem) {
 8006ac2:	2800      	cmp	r0, #0
 8006ac4:	d047      	beq.n	8006b56 <os_sem_pend+0xa2>
        goto done;
    }

    /* Assume we dont have to put task to sleep; get current task */
    sched = 0;
    current = os_sched_get_current_task();
 8006ac6:	f7ff fedf 	bl	8006888 <os_sched_get_current_task>
 8006aca:	4605      	mov	r5, r0

    OS_ENTER_CRITICAL(sr);
 8006acc:	f7fe fe60 	bl	8005790 <os_arch_save_sr>

    /*
     * If there is a token available, take it. If no token, either return
     * with error if timeout was 0 or put this task to sleep.
     */
    if (sem->sem_tokens != 0) {
 8006ad0:	88e3      	ldrh	r3, [r4, #6]
    OS_ENTER_CRITICAL(sr);
 8006ad2:	4607      	mov	r7, r0
    if (sem->sem_tokens != 0) {
 8006ad4:	b1cb      	cbz	r3, 8006b0a <os_sem_pend+0x56>
        sem->sem_tokens--;
 8006ad6:	3b01      	subs	r3, #1
 8006ad8:	80e3      	strh	r3, [r4, #6]
        ret = OS_OK;
 8006ada:	2400      	movs	r4, #0
    sched = 0;
 8006adc:	4626      	mov	r6, r4
        /* We will put this task to sleep */
        sched = 1;
        os_sched_sleep(current, timeout);
    }

    OS_EXIT_CRITICAL(sr);
 8006ade:	4638      	mov	r0, r7
 8006ae0:	f7fe fe5c 	bl	800579c <os_arch_restore_sr>

    if (sched) {
 8006ae4:	b17e      	cbz	r6, 8006b06 <os_sem_pend+0x52>
        os_sched(NULL);
 8006ae6:	2000      	movs	r0, #0
 8006ae8:	f7ff feda 	bl	80068a0 <os_sched>
        /* Check if we timed out or got the semaphore */
        if (current->t_flags & OS_TASK_FLAG_SEM_WAIT) {
 8006aec:	7b6c      	ldrb	r4, [r5, #13]
 8006aee:	f014 0402 	ands.w	r4, r4, #2
 8006af2:	d008      	beq.n	8006b06 <os_sem_pend+0x52>
            OS_ENTER_CRITICAL(sr);
 8006af4:	f7fe fe4c 	bl	8005790 <os_arch_save_sr>
            current->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
 8006af8:	7b6b      	ldrb	r3, [r5, #13]
            OS_EXIT_CRITICAL(sr);
            ret = OS_TIMEOUT;
 8006afa:	2406      	movs	r4, #6
            current->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
 8006afc:	f023 0302 	bic.w	r3, r3, #2
 8006b00:	736b      	strb	r3, [r5, #13]
            OS_EXIT_CRITICAL(sr);
 8006b02:	f7fe fe4b 	bl	800579c <os_arch_restore_sr>
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_PEND, (uint32_t)ret);
    return ret;
}
 8006b06:	4620      	mov	r0, r4
 8006b08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if (timeout == 0) {
 8006b0a:	b306      	cbz	r6, 8006b4e <os_sem_pend+0x9a>
        current->t_flags |= OS_TASK_FLAG_SEM_WAIT;
 8006b0c:	7b6a      	ldrb	r2, [r5, #13]
        current->t_obj = sem;
 8006b0e:	61ec      	str	r4, [r5, #28]
        current->t_flags |= OS_TASK_FLAG_SEM_WAIT;
 8006b10:	f042 0202 	orr.w	r2, r2, #2
 8006b14:	736a      	strb	r2, [r5, #13]
        if (!SLIST_EMPTY(&sem->sem_head)) {
 8006b16:	6821      	ldr	r1, [r4, #0]
 8006b18:	b1b1      	cbz	r1, 8006b48 <os_sem_pend+0x94>
                if (current->t_prio < entry->t_prio) {
 8006b1a:	460a      	mov	r2, r1
 8006b1c:	f895 c00b 	ldrb.w	ip, [r5, #11]
 8006b20:	7ad0      	ldrb	r0, [r2, #11]
 8006b22:	4560      	cmp	r0, ip
 8006b24:	d80e      	bhi.n	8006b44 <os_sem_pend+0x90>
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
 8006b26:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 8006b28:	4613      	mov	r3, r2
 8006b2a:	b948      	cbnz	r0, 8006b40 <os_sem_pend+0x8c>
            SLIST_INSERT_AFTER(last, current, t_obj_list);
 8006b2c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006b2e:	64ea      	str	r2, [r5, #76]	; 0x4c
 8006b30:	64dd      	str	r5, [r3, #76]	; 0x4c
        os_sched_sleep(current, timeout);
 8006b32:	4631      	mov	r1, r6
 8006b34:	4628      	mov	r0, r5
 8006b36:	f7ff fec5 	bl	80068c4 <os_sched_sleep>
        ret = OS_OK;
 8006b3a:	2400      	movs	r4, #0
        sched = 1;
 8006b3c:	2601      	movs	r6, #1
 8006b3e:	e7ce      	b.n	8006ade <os_sem_pend+0x2a>
 8006b40:	4602      	mov	r2, r0
 8006b42:	e7ed      	b.n	8006b20 <os_sem_pend+0x6c>
        if (last) {
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d1f1      	bne.n	8006b2c <os_sem_pend+0x78>
            SLIST_INSERT_HEAD(&sem->sem_head, current, t_obj_list);
 8006b48:	64e9      	str	r1, [r5, #76]	; 0x4c
 8006b4a:	6025      	str	r5, [r4, #0]
 8006b4c:	e7f1      	b.n	8006b32 <os_sem_pend+0x7e>
        ret = OS_TIMEOUT;
 8006b4e:	2406      	movs	r4, #6
 8006b50:	e7c5      	b.n	8006ade <os_sem_pend+0x2a>
        ret = OS_NOT_STARTED;
 8006b52:	2409      	movs	r4, #9
 8006b54:	e7d7      	b.n	8006b06 <os_sem_pend+0x52>
        ret = OS_INVALID_PARM;
 8006b56:	2403      	movs	r4, #3
 8006b58:	e7d5      	b.n	8006b06 <os_sem_pend+0x52>
 8006b5a:	bf00      	nop
 8006b5c:	200034bc 	.word	0x200034bc

08006b60 <os_task_init>:

int
os_task_init(struct os_task *t, const char *name, os_task_func_t func,
        void *arg, uint8_t prio, os_time_t sanity_itvl,
        os_stack_t *stack_bottom, uint16_t stack_size)
{
 8006b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b64:	4604      	mov	r4, r0
 8006b66:	e9dd 9709 	ldrd	r9, r7, [sp, #36]	; 0x24
 8006b6a:	461d      	mov	r5, r3
 8006b6c:	4692      	mov	sl, r2
 8006b6e:	460e      	mov	r6, r1
    struct os_sanity_check *sc;
    int rc;
    struct os_task *task;

    memset(t, 0, sizeof(*t));
 8006b70:	2250      	movs	r2, #80	; 0x50
 8006b72:	2100      	movs	r1, #0
{
 8006b74:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    memset(t, 0, sizeof(*t));
 8006b78:	f000 fa67 	bl	800704a <memset>

    t->t_func = func;
    t->t_arg = arg;
 8006b7c:	e9c4 a505 	strd	sl, r5, [r4, #20]
    OS_ENTER_CRITICAL(sr);
 8006b80:	f7fe fe06 	bl	8005790 <os_arch_save_sr>
    rc = g_task_id;
 8006b84:	4b2c      	ldr	r3, [pc, #176]	; (8006c38 <os_task_init+0xd8>)
 8006b86:	781d      	ldrb	r5, [r3, #0]
    g_task_id++;
 8006b88:	1c6a      	adds	r2, r5, #1
 8006b8a:	701a      	strb	r2, [r3, #0]
    OS_EXIT_CRITICAL(sr);
 8006b8c:	f7fe fe06 	bl	800579c <os_arch_restore_sr>

    t->t_taskid = os_task_next_id();
    t->t_prio = prio;
 8006b90:	f89d 3020 	ldrb.w	r3, [sp, #32]

    t->t_state = OS_TASK_READY;
    t->t_name = name;
 8006b94:	6126      	str	r6, [r4, #16]
    t->t_prio = prio;
 8006b96:	72e3      	strb	r3, [r4, #11]
    t->t_state = OS_TASK_READY;
 8006b98:	2301      	movs	r3, #1
 8006b9a:	7323      	strb	r3, [r4, #12]
    t->t_next_wakeup = 0;
 8006b9c:	2300      	movs	r3, #0

    rc = os_sanity_check_init(&t->t_sanity_check);
 8006b9e:	f104 0620 	add.w	r6, r4, #32
    t->t_taskid = os_task_next_id();
 8006ba2:	72a5      	strb	r5, [r4, #10]
    t->t_next_wakeup = 0;
 8006ba4:	6363      	str	r3, [r4, #52]	; 0x34
    rc = os_sanity_check_init(&t->t_sanity_check);
 8006ba6:	4630      	mov	r0, r6
 8006ba8:	f7ff fdea 	bl	8006780 <os_sanity_check_init>
    if (rc != OS_OK) {
 8006bac:	4605      	mov	r5, r0
 8006bae:	2800      	cmp	r0, #0
 8006bb0:	d13f      	bne.n	8006c32 <os_task_init+0xd2>
        goto err;
    }

    if (sanity_itvl != OS_WAIT_FOREVER) {
 8006bb2:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 8006bb6:	d121      	bne.n	8006bfc <os_task_init+0x9c>
        stack_bottom[i] = OS_STACK_PATTERN;
 8006bb8:	4b20      	ldr	r3, [pc, #128]	; (8006c3c <os_task_init+0xdc>)
    for (i = 0; i < size; i++) {
 8006bba:	45a8      	cmp	r8, r5
 8006bbc:	dc29      	bgt.n	8006c12 <os_task_init+0xb2>
            goto err;
        }
    }

    _clear_stack(stack_bottom, stack_size);
    t->t_stacktop = &stack_bottom[stack_size];
 8006bbe:	eb07 0188 	add.w	r1, r7, r8, lsl #2
 8006bc2:	6061      	str	r1, [r4, #4]
    t->t_stacksize = stack_size;
 8006bc4:	f8a4 8008 	strh.w	r8, [r4, #8]
    t->t_stackptr = os_arch_task_stack_init(t, t->t_stacktop,
 8006bc8:	4642      	mov	r2, r8
 8006bca:	4620      	mov	r0, r4
 8006bcc:	f7fe fdee 	bl	80057ac <os_arch_task_stack_init>
            t->t_stacksize);

    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
 8006bd0:	4b1b      	ldr	r3, [pc, #108]	; (8006c40 <os_task_init+0xe0>)
    t->t_stackptr = os_arch_task_stack_init(t, t->t_stacktop,
 8006bd2:	6020      	str	r0, [r4, #0]
    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
 8006bd4:	681d      	ldr	r5, [r3, #0]
 8006bd6:	bb05      	cbnz	r5, 8006c1a <os_task_init+0xba>
        assert(t->t_prio != task->t_prio);
    }

    /* insert this task into the task list */
    STAILQ_INSERT_TAIL(&g_os_task_list, t, t_os_task_list);
 8006bd8:	685a      	ldr	r2, [r3, #4]
 8006bda:	6425      	str	r5, [r4, #64]	; 0x40

    /* insert this task into the scheduler list */
    rc = os_sched_insert(t);
 8006bdc:	4620      	mov	r0, r4
    STAILQ_INSERT_TAIL(&g_os_task_list, t, t_os_task_list);
 8006bde:	6014      	str	r4, [r2, #0]
 8006be0:	f104 0240 	add.w	r2, r4, #64	; 0x40
 8006be4:	605a      	str	r2, [r3, #4]
    rc = os_sched_insert(t);
 8006be6:	f7ff fe13 	bl	8006810 <os_sched_insert>
    if (rc != OS_OK) {
 8006bea:	4606      	mov	r6, r0
 8006bec:	b970      	cbnz	r0, 8006c0c <os_task_init+0xac>
    os_trace_task_info(t);

    /* Allow a preemption in case the new task has a higher priority than the
     * current one.
     */
    if (os_started()) {
 8006bee:	f7fe ff51 	bl	8005a94 <os_started>
 8006bf2:	b1f0      	cbz	r0, 8006c32 <os_task_init+0xd2>
        os_sched(NULL);
 8006bf4:	4628      	mov	r0, r5
 8006bf6:	f7ff fe53 	bl	80068a0 <os_sched>
 8006bfa:	e007      	b.n	8006c0c <os_task_init+0xac>
        rc = os_sanity_check_register(sc);
 8006bfc:	4630      	mov	r0, r6
        sc->sc_checkin_itvl = sanity_itvl;
 8006bfe:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
        rc = os_sanity_check_register(sc);
 8006c02:	f7ff fdc5 	bl	8006790 <os_sanity_check_register>
        if (rc != OS_OK) {
 8006c06:	4606      	mov	r6, r0
 8006c08:	2800      	cmp	r0, #0
 8006c0a:	d0d5      	beq.n	8006bb8 <os_task_init+0x58>
    }

    return (0);
err:
    return (rc);
}
 8006c0c:	4630      	mov	r0, r6
 8006c0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        stack_bottom[i] = OS_STACK_PATTERN;
 8006c12:	f847 3025 	str.w	r3, [r7, r5, lsl #2]
    for (i = 0; i < size; i++) {
 8006c16:	3501      	adds	r5, #1
 8006c18:	e7cf      	b.n	8006bba <os_task_init+0x5a>
        assert(t->t_prio != task->t_prio);
 8006c1a:	7ae1      	ldrb	r1, [r4, #11]
 8006c1c:	7aea      	ldrb	r2, [r5, #11]
 8006c1e:	4291      	cmp	r1, r2
 8006c20:	d105      	bne.n	8006c2e <os_task_init+0xce>
 8006c22:	2300      	movs	r3, #0
 8006c24:	461a      	mov	r2, r3
 8006c26:	4619      	mov	r1, r3
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f7fe fe73 	bl	8005914 <__assert_func>
    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
 8006c2e:	6c2d      	ldr	r5, [r5, #64]	; 0x40
 8006c30:	e7d1      	b.n	8006bd6 <os_task_init+0x76>
    return (0);
 8006c32:	462e      	mov	r6, r5
 8006c34:	e7ea      	b.n	8006c0c <os_task_init+0xac>
 8006c36:	bf00      	nop
 8006c38:	200034ec 	.word	0x200034ec
 8006c3c:	deadbeef 	.word	0xdeadbeef
 8006c40:	200034e4 	.word	0x200034e4

08006c44 <os_deltatime>:
} basetod;

static void
os_deltatime(os_time_t delta, const struct os_timeval *base,
    struct os_timeval *result)
{
 8006c44:	e92d 4870 	stmdb	sp!, {r4, r5, r6, fp, lr}
    struct os_timeval tvdelta;

    tvdelta.tv_sec = delta / OS_TICKS_PER_SEC;
    tvdelta.tv_usec = (delta % OS_TICKS_PER_SEC) * OS_USEC_PER_TICK;
    os_timeradd(base, &tvdelta, result);
 8006c48:	e9d1 4500 	ldrd	r4, r5, [r1]
    tvdelta.tv_sec = delta / OS_TICKS_PER_SEC;
 8006c4c:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8006c50:	fbb0 f3f6 	udiv	r3, r0, r6
    tvdelta.tv_usec = (delta % OS_TICKS_PER_SEC) * OS_USEC_PER_TICK;
 8006c54:	fb06 0013 	mls	r0, r6, r3, r0
    os_timeradd(base, &tvdelta, result);
 8006c58:	eb14 0b03 	adds.w	fp, r4, r3
 8006c5c:	688b      	ldr	r3, [r1, #8]
 8006c5e:	f145 0c00 	adc.w	ip, r5, #0
 8006c62:	fb06 3000 	mla	r0, r6, r0, r3
 8006c66:	4b09      	ldr	r3, [pc, #36]	; (8006c8c <os_deltatime+0x48>)
 8006c68:	e9c2 bc00 	strd	fp, ip, [r2]
 8006c6c:	4298      	cmp	r0, r3
 8006c6e:	6090      	str	r0, [r2, #8]
 8006c70:	dd0a      	ble.n	8006c88 <os_deltatime+0x44>
 8006c72:	f11b 0401 	adds.w	r4, fp, #1
 8006c76:	f14c 0500 	adc.w	r5, ip, #0
 8006c7a:	f5a0 2074 	sub.w	r0, r0, #999424	; 0xf4000
 8006c7e:	e9c2 4500 	strd	r4, r5, [r2]
 8006c82:	f5a0 7010 	sub.w	r0, r0, #576	; 0x240
 8006c86:	6090      	str	r0, [r2, #8]
}
 8006c88:	e8bd 8870 	ldmia.w	sp!, {r4, r5, r6, fp, pc}
 8006c8c:	000f423f 	.word	0x000f423f

08006c90 <os_time_get>:

os_time_t
os_time_get(void)
{
    return (g_os_time);
}
 8006c90:	4b01      	ldr	r3, [pc, #4]	; (8006c98 <os_time_get+0x8>)
 8006c92:	6818      	ldr	r0, [r3, #0]
 8006c94:	4770      	bx	lr
 8006c96:	bf00      	nop
 8006c98:	200034f0 	.word	0x200034f0

08006c9c <os_time_advance>:
    OS_EXIT_CRITICAL(sr);
}

void
os_time_advance(int ticks)
{
 8006c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    assert(ticks >= 0);
 8006c9e:	1e04      	subs	r4, r0, #0
 8006ca0:	da05      	bge.n	8006cae <os_time_advance+0x12>
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	4619      	mov	r1, r3
 8006ca8:	4618      	mov	r0, r3
 8006caa:	f7fe fe33 	bl	8005914 <__assert_func>

    if (ticks > 0) {
 8006cae:	d006      	beq.n	8006cbe <os_time_advance+0x22>
        if (!os_started()) {
 8006cb0:	f7fe fef0 	bl	8005a94 <os_started>
 8006cb4:	4d15      	ldr	r5, [pc, #84]	; (8006d0c <os_time_advance+0x70>)
 8006cb6:	b918      	cbnz	r0, 8006cc0 <os_time_advance+0x24>
            g_os_time += ticks;
 8006cb8:	6828      	ldr	r0, [r5, #0]
 8006cba:	4420      	add	r0, r4
 8006cbc:	6028      	str	r0, [r5, #0]
            os_callout_tick();
            os_sched_os_timer_exp();
            os_sched(NULL);
        }
    }
}
 8006cbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    OS_ENTER_CRITICAL(sr);
 8006cc0:	f7fe fd66 	bl	8005790 <os_arch_save_sr>
    prev_os_time = g_os_time;
 8006cc4:	682b      	ldr	r3, [r5, #0]
    OS_ENTER_CRITICAL(sr);
 8006cc6:	4607      	mov	r7, r0
    g_os_time += ticks;
 8006cc8:	18e0      	adds	r0, r4, r3
    if ((prev_os_time ^ g_os_time) >> 31) {
 8006cca:	ea93 0f00 	teq	r3, r0
    g_os_time += ticks;
 8006cce:	6028      	str	r0, [r5, #0]
    if ((prev_os_time ^ g_os_time) >> 31) {
 8006cd0:	d510      	bpl.n	8006cf4 <os_time_advance+0x58>
        delta = g_os_time - basetod.ostime;
 8006cd2:	4e0f      	ldr	r6, [pc, #60]	; (8006d10 <os_time_advance+0x74>)
 8006cd4:	4632      	mov	r2, r6
 8006cd6:	f852 4b08 	ldr.w	r4, [r2], #8
 8006cda:	1b04      	subs	r4, r0, r4
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
 8006cdc:	4611      	mov	r1, r2
 8006cde:	4620      	mov	r0, r4
 8006ce0:	f7ff ffb0 	bl	8006c44 <os_deltatime>
        os_deltatime(delta, &basetod.utctime, &basetod.utctime);
 8006ce4:	f106 0218 	add.w	r2, r6, #24
 8006ce8:	4611      	mov	r1, r2
 8006cea:	4620      	mov	r0, r4
 8006cec:	f7ff ffaa 	bl	8006c44 <os_deltatime>
        basetod.ostime = g_os_time;
 8006cf0:	682b      	ldr	r3, [r5, #0]
 8006cf2:	6033      	str	r3, [r6, #0]
    OS_EXIT_CRITICAL(sr);
 8006cf4:	4638      	mov	r0, r7
 8006cf6:	f7fe fd51 	bl	800579c <os_arch_restore_sr>
            os_callout_tick();
 8006cfa:	f7fe ffd1 	bl	8005ca0 <os_callout_tick>
            os_sched_os_timer_exp();
 8006cfe:	f7ff fe4f 	bl	80069a0 <os_sched_os_timer_exp>
}
 8006d02:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            os_sched(NULL);
 8006d06:	2000      	movs	r0, #0
 8006d08:	f7ff bdca 	b.w	80068a0 <os_sched>
 8006d0c:	200034f0 	.word	0x200034f0
 8006d10:	20002970 	.word	0x20002970

08006d14 <os_time_delay>:

void
os_time_delay(os_time_t osticks)
{
 8006d14:	b538      	push	{r3, r4, r5, lr}
    os_sr_t sr;

    if (osticks > 0) {
 8006d16:	4604      	mov	r4, r0
 8006d18:	b178      	cbz	r0, 8006d3a <os_time_delay+0x26>
        OS_ENTER_CRITICAL(sr);
 8006d1a:	f7fe fd39 	bl	8005790 <os_arch_save_sr>
 8006d1e:	4605      	mov	r5, r0
        os_sched_sleep(os_sched_get_current_task(), (os_time_t)osticks);
 8006d20:	f7ff fdb2 	bl	8006888 <os_sched_get_current_task>
 8006d24:	4621      	mov	r1, r4
 8006d26:	f7ff fdcd 	bl	80068c4 <os_sched_sleep>
        OS_EXIT_CRITICAL(sr);
 8006d2a:	4628      	mov	r0, r5
 8006d2c:	f7fe fd36 	bl	800579c <os_arch_restore_sr>
        os_sched(NULL);
    }
}
 8006d30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        os_sched(NULL);
 8006d34:	2000      	movs	r0, #0
 8006d36:	f7ff bdb3 	b.w	80068a0 <os_sched>
}
 8006d3a:	bd38      	pop	{r3, r4, r5, pc}

08006d3c <os_gettimeofday>:
    return (0);
}

int
os_gettimeofday(struct os_timeval *tv, struct os_timezone *tz)
{
 8006d3c:	b570      	push	{r4, r5, r6, lr}
 8006d3e:	4605      	mov	r5, r0
 8006d40:	460c      	mov	r4, r1
    os_sr_t sr;
    os_time_t delta;

    OS_ENTER_CRITICAL(sr);
 8006d42:	f7fe fd25 	bl	8005790 <os_arch_save_sr>
 8006d46:	4606      	mov	r6, r0
    if (tv != NULL) {
 8006d48:	b145      	cbz	r5, 8006d5c <os_gettimeofday+0x20>
    return (g_os_time);
 8006d4a:	4b09      	ldr	r3, [pc, #36]	; (8006d70 <os_gettimeofday+0x34>)
        delta = os_time_get() - basetod.ostime;
 8006d4c:	4909      	ldr	r1, [pc, #36]	; (8006d74 <os_gettimeofday+0x38>)
 8006d4e:	6818      	ldr	r0, [r3, #0]
 8006d50:	f851 3b18 	ldr.w	r3, [r1], #24
        os_deltatime(delta, &basetod.utctime, tv);
 8006d54:	462a      	mov	r2, r5
 8006d56:	1ac0      	subs	r0, r0, r3
 8006d58:	f7ff ff74 	bl	8006c44 <os_deltatime>
    }

    if (tz != NULL) {
 8006d5c:	b114      	cbz	r4, 8006d64 <os_gettimeofday+0x28>
        *tz = basetod.timezone;
 8006d5e:	4b05      	ldr	r3, [pc, #20]	; (8006d74 <os_gettimeofday+0x38>)
 8006d60:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8006d62:	6020      	str	r0, [r4, #0]
    }
    OS_EXIT_CRITICAL(sr);
 8006d64:	4630      	mov	r0, r6
 8006d66:	f7fe fd19 	bl	800579c <os_arch_restore_sr>

    return (0);
}
 8006d6a:	2000      	movs	r0, #0
 8006d6c:	bd70      	pop	{r4, r5, r6, pc}
 8006d6e:	bf00      	nop
 8006d70:	200034f0 	.word	0x200034f0
 8006d74:	20002970 	.word	0x20002970

08006d78 <os_time_ms_to_ticks>:
os_time_ms_to_ticks(uint32_t ms, os_time_t *out_ticks)
{
    uint64_t ticks;

#if OS_TICKS_PER_SEC == 1000
    *out_ticks = ms;
 8006d78:	6008      	str	r0, [r1, #0]
        return OS_EINVAL;
    }

    *out_ticks = ticks;
    return 0;
}
 8006d7a:	2000      	movs	r0, #0
 8006d7c:	4770      	bx	lr
	...

08006d80 <os_set_env>:
        .global os_set_env
os_set_env:
        .fnstart
        .cantunwind

        MSR     PSP,R0
 8006d80:	f380 8809 	msr	PSP, r0
        LDR     R0,=os_flags
 8006d84:	482b      	ldr	r0, [pc, #172]	; (8006e34 <os_default_irq_asm+0x1e>)
        LDRB    R0,[R0]
 8006d86:	7800      	ldrb	r0, [r0, #0]
        ADDS    R0, R0, #2
 8006d88:	3002      	adds	r0, #2
        MSR     CONTROL,R0
 8006d8a:	f380 8814 	msr	CONTROL, r0
        ISB
 8006d8e:	f3bf 8f6f 	isb	sy
        BX      LR
 8006d92:	4770      	bx	lr

08006d94 <os_arch_init_task_stack>:
        .type   os_arch_init_task_stack, %function
        .global os_arch_init_task_stack
os_arch_init_task_stack:
        .fnstart

        STMIA   R0,{R4-R11}
 8006d94:	e880 0ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp}
        BX      LR
 8006d98:	4770      	bx	lr

08006d9a <SVC_Handler>:
        .global SVC_Handler
SVC_Handler:
        .fnstart
        .cantunwind

        MRS     R0,PSP                  /* Read PSP */
 8006d9a:	f3ef 8009 	mrs	r0, PSP
        LDR     R1,[R0,#24]             /* Read Saved PC from Stack */
 8006d9e:	6981      	ldr	r1, [r0, #24]
        LDRB    R1,[R1,#-2]             /* Load SVC Number */
 8006da0:	f811 1c02 	ldrb.w	r1, [r1, #-2]
        CBNZ    R1,SVC_User
 8006da4:	b951      	cbnz	r1, 8006dbc <SVC_User>

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
 8006da6:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
 8006daa:	b510      	push	{r4, lr}
        BLX     R12                     /* Call SVC Function */
 8006dac:	47e0      	blx	ip
        POP     {R4,LR}                 /* Restore EXC_RETURN */
 8006dae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

        MRS     R12,PSP                 /* Read PSP */
 8006db2:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R2}             /* Store return values */
 8006db6:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
        BX      LR                      /* Return from interrupt */
 8006dba:	4770      	bx	lr

08006dbc <SVC_User>:

        /*------------------- User SVC ------------------------------*/
SVC_User:
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
 8006dbc:	b510      	push	{r4, lr}
        LDR     R2,=SVC_Count
 8006dbe:	4a1e      	ldr	r2, [pc, #120]	; (8006e38 <os_default_irq_asm+0x22>)
        LDR     R2,[R2]
 8006dc0:	6812      	ldr	r2, [r2, #0]
        CMP     R1,R2
 8006dc2:	4291      	cmp	r1, r2
        BHI     SVC_Done                /* Overflow */
 8006dc4:	d809      	bhi.n	8006dda <SVC_Done>

        LDR     R4,=SVC_Table-4
 8006dc6:	4c1d      	ldr	r4, [pc, #116]	; (8006e3c <os_default_irq_asm+0x26>)
        LDR     R4,[R4,R1,LSL #2]       /* Load SVC Function Address */
 8006dc8:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
 8006dcc:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        BLX     R4                      /* Call SVC Function */
 8006dd0:	47a0      	blx	r4

        MRS     R12,PSP
 8006dd2:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R3}             /* Function return values */
 8006dd6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

08006dda <SVC_Done>:
SVC_Done:
        POP     {R4,LR}                 /* Restore EXC_RETURN */
 8006dda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR                      /* Return from interrupt */
 8006dde:	4770      	bx	lr

08006de0 <PendSV_Handler>:
        .global PendSV_Handler
PendSV_Handler:
        .fnstart
        .cantunwind

        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
 8006de0:	4b17      	ldr	r3, [pc, #92]	; (8006e40 <os_default_irq_asm+0x2a>)
        LDR     R2,[R3]                 /* Store in R2 */
 8006de2:	681a      	ldr	r2, [r3, #0]
        LDR     R3,=g_current_task      /* Get current task */
 8006de4:	4b17      	ldr	r3, [pc, #92]	; (8006e44 <os_default_irq_asm+0x2e>)
        LDR     R1,[R3]                 /* Current task in R1 */
 8006de6:	6819      	ldr	r1, [r3, #0]
        CMP     R1,R2
 8006de8:	4291      	cmp	r1, r2
        IT      EQ
 8006dea:	bf08      	it	eq
        BXEQ    LR                      /* RETI, no task switch */
 8006dec:	4770      	bxeq	lr

        MRS     R12,PSP                 /* Read PSP */
 8006dee:	f3ef 8c09 	mrs	ip, PSP
        STMDB   R12!,{R4-R11}           /* Save Old context */
 8006df2:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
        STR     R12,[R1,#0]             /* Update stack pointer in current task */
 8006df6:	f8c1 c000 	str.w	ip, [r1]
        STR     R2,[R3]                 /* g_current_task = highest ready */
 8006dfa:	601a      	str	r2, [r3, #0]

        LDR     R12,[R2,#0]             /* get stack pointer of task we will start */
 8006dfc:	f8d2 c000 	ldr.w	ip, [r2]
        LDMIA   R12!,{R4-R11}           /* Restore New Context */
 8006e00:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
        MSR     PSP,R12                 /* Write PSP */
 8006e04:	f38c 8809 	msr	PSP, ip
        MOV     R0, R2
        BL      os_trace_task_start_exec
        POP     {R4,LR}
#endif

        BX      LR                      /* Return to Thread Mode */
 8006e08:	4770      	bx	lr

08006e0a <SysTick_Handler>:
        .global SysTick_Handler
SysTick_Handler:
        .fnstart
        .cantunwind

        PUSH    {R4,LR}                 /* Save EXC_RETURN */
 8006e0a:	b510      	push	{r4, lr}
        BL      timer_handler
 8006e0c:	f7fe fcb2 	bl	8005774 <timer_handler>
        POP     {R4,LR}                 /* Restore EXC_RETURN */
 8006e10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR
 8006e14:	4770      	bx	lr

08006e16 <os_default_irq_asm>:

        /*
         * LR = 0xfffffff9 if we were using MSP as SP
         * LR = 0xfffffffd if we were using PSP as SP
         */
        TST     LR,#4
 8006e16:	f01e 0f04 	tst.w	lr, #4
        ITE     EQ
 8006e1a:	bf0c      	ite	eq
        MRSEQ   R3,MSP
 8006e1c:	f3ef 8308 	mrseq	r3, MSP
        MRSNE   R3,PSP
 8006e20:	f3ef 8309 	mrsne	r3, PSP
        PUSH    {R3-R11,LR}
 8006e24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        MOV     R0, SP
 8006e28:	4668      	mov	r0, sp
        BL      os_default_irq
 8006e2a:	f7fe fd99 	bl	8005960 <os_default_irq>
        POP     {R3-R11,LR}                 /* Restore EXC_RETURN */
 8006e2e:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        BX      LR
 8006e32:	4770      	bx	lr
        LDR     R0,=os_flags
 8006e34:	20000a24 	.word	0x20000a24
        LDR     R2,=SVC_Count
 8006e38:	00000000 	.word	0x00000000
        LDR     R4,=SVC_Table-4
 8006e3c:	fffffffc 	.word	0xfffffffc
        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
 8006e40:	20000154 	.word	0x20000154
        LDR     R3,=g_current_task      /* Get current task */
 8006e44:	200034dc 	.word	0x200034dc

08006e48 <lrand48>:
#include <stdint.h>

extern unsigned short __rand48_seed[3];	/* Common with mrand48.c, srand48.c */

long lrand48(void)
{
 8006e48:	b508      	push	{r3, lr}
	return (uint32_t) jrand48(__rand48_seed) >> 1;
 8006e4a:	4802      	ldr	r0, [pc, #8]	; (8006e54 <lrand48+0xc>)
 8006e4c:	f000 fb92 	bl	8007574 <jrand48>
}
 8006e50:	0840      	lsrs	r0, r0, #1
 8006e52:	bd08      	pop	{r3, pc}
 8006e54:	200034f4 	.word	0x200034f4

08006e58 <malloc_lock_nop>:
    },
    &__malloc_head,
    &__malloc_head
};

static bool malloc_lock_nop() {return true;}
 8006e58:	2001      	movs	r0, #1
 8006e5a:	4770      	bx	lr

08006e5c <malloc_unlock_nop>:
static void malloc_unlock_nop() {}
 8006e5c:	4770      	bx	lr
	...

08006e60 <__free_block>:

    return (void *)(&fp->a + 1);
}

static struct free_arena_header *__free_block(struct free_arena_header *ah)
{
 8006e60:	b510      	push	{r4, lr}
    struct free_arena_header *pah, *nah;
    assert(ah); ////
 8006e62:	4603      	mov	r3, r0
 8006e64:	b928      	cbnz	r0, 8006e72 <__free_block+0x12>
 8006e66:	2300      	movs	r3, #0
 8006e68:	461a      	mov	r2, r3
 8006e6a:	4619      	mov	r1, r3
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	f7fe fd51 	bl	8005914 <__assert_func>

    pah = ah->a.prev;
    nah = ah->a.next;
 8006e72:	e9d0 2002 	ldrd	r2, r0, [r0, #8]
    if (pah->a.type == ARENA_TYPE_FREE &&
 8006e76:	6801      	ldr	r1, [r0, #0]
 8006e78:	2901      	cmp	r1, #1
 8006e7a:	d11b      	bne.n	8006eb4 <__free_block+0x54>
        (char *)pah + pah->a.size == (char *)ah) {
 8006e7c:	6841      	ldr	r1, [r0, #4]
 8006e7e:	1844      	adds	r4, r0, r1
    if (pah->a.type == ARENA_TYPE_FREE &&
 8006e80:	42a3      	cmp	r3, r4
 8006e82:	d117      	bne.n	8006eb4 <__free_block+0x54>
        /* Coalesce into the previous block */
        pah->a.size += ah->a.size;
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	440b      	add	r3, r1
        pah->a.next = nah;
 8006e88:	e9c0 3201 	strd	r3, r2, [r0, #4]
        nah->a.prev = pah;
 8006e8c:	60d0      	str	r0, [r2, #12]
        ah->next_free->prev_free = ah;
    }

    /* In either of the previous cases, we might be able to merge
       with the subsequent block... */
    if (nah->a.type == ARENA_TYPE_FREE &&
 8006e8e:	6813      	ldr	r3, [r2, #0]
 8006e90:	2b01      	cmp	r3, #1
 8006e92:	d10e      	bne.n	8006eb2 <__free_block+0x52>
        (char *)ah + ah->a.size == (char *)nah) {
 8006e94:	6841      	ldr	r1, [r0, #4]
 8006e96:	1843      	adds	r3, r0, r1
    if (nah->a.type == ARENA_TYPE_FREE &&
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d10a      	bne.n	8006eb2 <__free_block+0x52>
        ah->a.size += nah->a.size;
 8006e9c:	6853      	ldr	r3, [r2, #4]
 8006e9e:	440b      	add	r3, r1
 8006ea0:	6043      	str	r3, [r0, #4]
    an = ah->next_free;
 8006ea2:	e9d2 3104 	ldrd	r3, r1, [r2, #16]
    ap->next_free = an;
 8006ea6:	610b      	str	r3, [r1, #16]
    an->prev_free = ap;
 8006ea8:	6159      	str	r1, [r3, #20]
    an = ah->a.next;
 8006eaa:	e9d2 3102 	ldrd	r3, r1, [r2, #8]
    ap->a.next = an;
 8006eae:	608b      	str	r3, [r1, #8]
    an->a.prev = ap;
 8006eb0:	60d9      	str	r1, [r3, #12]
        remove_from_chains(nah);
    }

    /* Return the block that contains the called block */
    return ah;
}
 8006eb2:	bd10      	pop	{r4, pc}
        ah->a.type = ARENA_TYPE_FREE;
 8006eb4:	2101      	movs	r1, #1
 8006eb6:	6019      	str	r1, [r3, #0]
        ah->next_free = __malloc_head.next_free;
 8006eb8:	4905      	ldr	r1, [pc, #20]	; (8006ed0 <__free_block+0x70>)
 8006eba:	6908      	ldr	r0, [r1, #16]
        ah->prev_free = &__malloc_head;
 8006ebc:	e9c3 0104 	strd	r0, r1, [r3, #16]
        __malloc_head.next_free = ah;
 8006ec0:	610b      	str	r3, [r1, #16]
        assert(ah->next_free); ////
 8006ec2:	6919      	ldr	r1, [r3, #16]
 8006ec4:	2900      	cmp	r1, #0
 8006ec6:	d0ce      	beq.n	8006e66 <__free_block+0x6>
        ah->next_free->prev_free = ah;
 8006ec8:	614b      	str	r3, [r1, #20]
 8006eca:	4618      	mov	r0, r3
 8006ecc:	e7df      	b.n	8006e8e <__free_block+0x2e>
 8006ece:	bf00      	nop
 8006ed0:	20000164 	.word	0x20000164

08006ed4 <add_malloc_block>:
void add_malloc_block(void *buf, size_t size)
{
    struct free_arena_header *fp = buf;
    struct free_arena_header *pah;

    if (size < sizeof(struct free_arena_header))
 8006ed4:	2917      	cmp	r1, #23
{
 8006ed6:	b510      	push	{r4, lr}
 8006ed8:	4604      	mov	r4, r0
    if (size < sizeof(struct free_arena_header))
 8006eda:	d91b      	bls.n	8006f14 <add_malloc_block+0x40>
        return; // Too small.

    /* Insert the block into the management chains.  We need to set
       up the size and the main block list pointer, the rest of
       the work is logically identical to free(). */
    fp->a.type = ARENA_TYPE_FREE;
 8006edc:	2301      	movs	r3, #1
    fp->a.size = size;
 8006ede:	e9c0 3100 	strd	r3, r1, [r0]

    if (!malloc_lock())
 8006ee2:	4b0d      	ldr	r3, [pc, #52]	; (8006f18 <add_malloc_block+0x44>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4798      	blx	r3
 8006ee8:	b1a0      	cbz	r0, 8006f14 <add_malloc_block+0x40>

    /* We need to insert this into the main block list in the proper
       place -- this list is required to be sorted.  Since we most likely
       get memory assignments in ascending order, search backwards for
       the proper place. */
    for (pah = __malloc_head.a.prev; pah->a.type != ARENA_TYPE_HEAD;
 8006eea:	4b0c      	ldr	r3, [pc, #48]	; (8006f1c <add_malloc_block+0x48>)
         pah = pah->a.prev) {
 8006eec:	68db      	ldr	r3, [r3, #12]
    for (pah = __malloc_head.a.prev; pah->a.type != ARENA_TYPE_HEAD;
 8006eee:	681a      	ldr	r2, [r3, #0]
 8006ef0:	2a02      	cmp	r2, #2
 8006ef2:	d001      	beq.n	8006ef8 <add_malloc_block+0x24>
        if (pah < fp)
 8006ef4:	429c      	cmp	r4, r3
 8006ef6:	d9f9      	bls.n	8006eec <add_malloc_block+0x18>
            break;
    }

    /* Now pah points to the node that should be the predecessor of
       the new node */
    fp->a.next = pah->a.next;
 8006ef8:	689a      	ldr	r2, [r3, #8]
    fp->a.prev = pah;
    pah->a.next = fp;
    fp->a.next->a.prev = fp;

    /* Insert into the free chain and coalesce with adjacent blocks */
    fp = __free_block(fp);
 8006efa:	4620      	mov	r0, r4
    fp->a.prev = pah;
 8006efc:	e9c4 2302 	strd	r2, r3, [r4, #8]
    pah->a.next = fp;
 8006f00:	609c      	str	r4, [r3, #8]
    fp->a.next->a.prev = fp;
 8006f02:	68a3      	ldr	r3, [r4, #8]
 8006f04:	60dc      	str	r4, [r3, #12]
    fp = __free_block(fp);
 8006f06:	f7ff ffab 	bl	8006e60 <__free_block>

    malloc_unlock();
}
 8006f0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    malloc_unlock();
 8006f0e:	4b04      	ldr	r3, [pc, #16]	; (8006f20 <add_malloc_block+0x4c>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4718      	bx	r3
}
 8006f14:	bd10      	pop	{r4, pc}
 8006f16:	bf00      	nop
 8006f18:	2000017c 	.word	0x2000017c
 8006f1c:	20000164 	.word	0x20000164
 8006f20:	20000180 	.word	0x20000180

08006f24 <malloc>:
{
 8006f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size == 0 || size > (SIZE_MAX - sizeof(struct arena_header))) {
 8006f26:	1e43      	subs	r3, r0, #1
 8006f28:	3312      	adds	r3, #18
 8006f2a:	d902      	bls.n	8006f32 <malloc+0xe>
        return NULL;
 8006f2c:	2400      	movs	r4, #0
}
 8006f2e:	4620      	mov	r0, r4
 8006f30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (!malloc_lock())
 8006f32:	4b1f      	ldr	r3, [pc, #124]	; (8006fb0 <malloc+0x8c>)
    size = (size + 2 * sizeof(struct arena_header) - 1) & ARENA_SIZE_MASK;
 8006f34:	301f      	adds	r0, #31
    if (!malloc_lock())
 8006f36:	681b      	ldr	r3, [r3, #0]
    size = (size + 2 * sizeof(struct arena_header) - 1) & ARENA_SIZE_MASK;
 8006f38:	f020 040f 	bic.w	r4, r0, #15
    if (!malloc_lock())
 8006f3c:	4798      	blx	r3
 8006f3e:	2800      	cmp	r0, #0
 8006f40:	d0f4      	beq.n	8006f2c <malloc+0x8>
    for (fp = __malloc_head.next_free; fp->a.type != ARENA_TYPE_HEAD;
 8006f42:	4d1c      	ldr	r5, [pc, #112]	; (8006fb4 <malloc+0x90>)
 8006f44:	6928      	ldr	r0, [r5, #16]
 8006f46:	6803      	ldr	r3, [r0, #0]
 8006f48:	2b02      	cmp	r3, #2
 8006f4a:	d106      	bne.n	8006f5a <malloc+0x36>
        more_mem = _sbrk(size);
 8006f4c:	4620      	mov	r0, r4
 8006f4e:	f001 fe83 	bl	8008c58 <_sbrk>
        if (more_mem != (void *)-1) {
 8006f52:	1c43      	adds	r3, r0, #1
 8006f54:	d128      	bne.n	8006fa8 <malloc+0x84>
 8006f56:	2400      	movs	r4, #0
 8006f58:	e01b      	b.n	8006f92 <malloc+0x6e>
        if (fp->a.size >= size) {
 8006f5a:	6841      	ldr	r1, [r0, #4]
 8006f5c:	6902      	ldr	r2, [r0, #16]
 8006f5e:	42a1      	cmp	r1, r4
 8006f60:	d320      	bcc.n	8006fa4 <malloc+0x80>
    if (fsize >= size + 2 * sizeof(struct arena_header)) {
 8006f62:	f104 0320 	add.w	r3, r4, #32
 8006f66:	4299      	cmp	r1, r3
 8006f68:	6945      	ldr	r5, [r0, #20]
 8006f6a:	d316      	bcc.n	8006f9a <malloc+0x76>
        nfp->a.type = ARENA_TYPE_FREE;
 8006f6c:	2701      	movs	r7, #1
        nfp = (struct free_arena_header *)((char *)fp + size);
 8006f6e:	1903      	adds	r3, r0, r4
        nfp->a.size = fsize - size;
 8006f70:	1b09      	subs	r1, r1, r4
        na = fp->a.next;
 8006f72:	6886      	ldr	r6, [r0, #8]
        nfp->a.type = ARENA_TYPE_FREE;
 8006f74:	5107      	str	r7, [r0, r4]
        nfp->a.size = fsize - size;
 8006f76:	6059      	str	r1, [r3, #4]
        fp->a.type = ARENA_TYPE_USED;
 8006f78:	2100      	movs	r1, #0
        fp->a.size = size;
 8006f7a:	e9c0 1400 	strd	r1, r4, [r0]
        nfp->a.next = na;
 8006f7e:	e9c3 6002 	strd	r6, r0, [r3, #8]
        na->a.prev = nfp;
 8006f82:	60f3      	str	r3, [r6, #12]
        fp->a.next = nfp;
 8006f84:	6083      	str	r3, [r0, #8]
        nfp->prev_free = fpp = fp->prev_free;
 8006f86:	e9c3 2504 	strd	r2, r5, [r3, #16]
        fpn->prev_free = nfp;
 8006f8a:	6153      	str	r3, [r2, #20]
        fpp->next_free = nfp;
 8006f8c:	612b      	str	r3, [r5, #16]
    return (void *)(&fp->a + 1);
 8006f8e:	f100 0410 	add.w	r4, r0, #16
    malloc_unlock();
 8006f92:	4b09      	ldr	r3, [pc, #36]	; (8006fb8 <malloc+0x94>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4798      	blx	r3
    return result;
 8006f98:	e7c9      	b.n	8006f2e <malloc+0xa>
        fp->a.type = ARENA_TYPE_USED; /* Allocate the whole block */
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	6003      	str	r3, [r0, #0]
    ap->next_free = an;
 8006f9e:	612a      	str	r2, [r5, #16]
    an->prev_free = ap;
 8006fa0:	6155      	str	r5, [r2, #20]
 8006fa2:	e7f4      	b.n	8006f8e <malloc+0x6a>
 8006fa4:	4610      	mov	r0, r2
 8006fa6:	e7ce      	b.n	8006f46 <malloc+0x22>
            add_malloc_block(more_mem, size);
 8006fa8:	4621      	mov	r1, r4
 8006faa:	f7ff ff93 	bl	8006ed4 <add_malloc_block>
            goto retry_alloc;
 8006fae:	e7c9      	b.n	8006f44 <malloc+0x20>
 8006fb0:	2000017c 	.word	0x2000017c
 8006fb4:	20000164 	.word	0x20000164
 8006fb8:	20000180 	.word	0x20000180

08006fbc <free>:

void free(void *ptr)
{
 8006fbc:	b510      	push	{r4, lr}
    struct free_arena_header *ah;

    if (!ptr)
 8006fbe:	4604      	mov	r4, r0
 8006fc0:	b160      	cbz	r0, 8006fdc <free+0x20>

#ifdef DEBUG_MALLOC
    assert(ah->a.type == ARENA_TYPE_USED);
#endif

    if (!malloc_lock())
 8006fc2:	4b07      	ldr	r3, [pc, #28]	; (8006fe0 <free+0x24>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4798      	blx	r3
 8006fc8:	b140      	cbz	r0, 8006fdc <free+0x20>
        return;

    /* Merge into adjacent free blocks */
    ah = __free_block(ah);
 8006fca:	f1a4 0010 	sub.w	r0, r4, #16
 8006fce:	f7ff ff47 	bl	8006e60 <__free_block>
    malloc_unlock();
}
 8006fd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    malloc_unlock();
 8006fd6:	4b03      	ldr	r3, [pc, #12]	; (8006fe4 <free+0x28>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4718      	bx	r3
}
 8006fdc:	bd10      	pop	{r4, pc}
 8006fde:	bf00      	nop
 8006fe0:	2000017c 	.word	0x2000017c
 8006fe4:	20000180 	.word	0x20000180

08006fe8 <memcmp>:
int memcmp(const void *s1, const void *s2, size_t n)
{
    int d = 0;

#if defined(ARCH_cortex_m3) || defined(ARCH_cortex_m4) || defined(ARCH_cortex_m7)
    asm (".syntax unified                   \n"
 8006fe8:	b470      	push	{r4, r5, r6}
 8006fea:	f04f 0500 	mov.w	r5, #0
 8006fee:	f022 0603 	bic.w	r6, r2, #3
 8006ff2:	e005      	b.n	8007000 <test1>

08006ff4 <loop1>:
 8006ff4:	5943      	ldr	r3, [r0, r5]
 8006ff6:	594c      	ldr	r4, [r1, r5]
 8006ff8:	42a3      	cmp	r3, r4
 8006ffa:	d104      	bne.n	8007006 <res1>
 8006ffc:	f105 0504 	add.w	r5, r5, #4

08007000 <test1>:
 8007000:	42b5      	cmp	r5, r6
 8007002:	d1f7      	bne.n	8006ff4 <loop1>
 8007004:	e00d      	b.n	8007022 <test2>

08007006 <res1>:
 8007006:	ba1b      	rev	r3, r3
 8007008:	ba24      	rev	r4, r4
 800700a:	1b1b      	subs	r3, r3, r4
 800700c:	bf8c      	ite	hi
 800700e:	2301      	movhi	r3, #1
 8007010:	f04f 33ff 	movls.w	r3, #4294967295	; 0xffffffff
 8007014:	e009      	b.n	800702a <done>

08007016 <loop2>:
 8007016:	5d43      	ldrb	r3, [r0, r5]
 8007018:	5d4c      	ldrb	r4, [r1, r5]
 800701a:	1b1b      	subs	r3, r3, r4
 800701c:	d105      	bne.n	800702a <done>
 800701e:	f105 0501 	add.w	r5, r5, #1

08007022 <test2>:
 8007022:	4295      	cmp	r5, r2
 8007024:	d1f7      	bne.n	8007016 <loop2>
 8007026:	f04f 0300 	mov.w	r3, #0

0800702a <done>:
 800702a:	4618      	mov	r0, r3
 800702c:	bc70      	pop	{r4, r5, r6}
			break;
	}
#endif

	return d;
}
 800702e:	4770      	bx	lr

08007030 <memcpy>:
#if defined(__ARM_FEATURE_UNALIGNED)
        /*
         * We can speed up a bit by moving 32-bit words if unaligned access is
         * supported (e.g. Cortex-M3/4/7/33).
         */
        asm (".syntax unified           \n"
 8007030:	e001      	b.n	8007036 <test1>

08007032 <loop1>:
 8007032:	588b      	ldr	r3, [r1, r2]
 8007034:	5083      	str	r3, [r0, r2]

08007036 <test1>:
 8007036:	3a04      	subs	r2, #4
 8007038:	d5fb      	bpl.n	8007032 <loop1>
 800703a:	f102 0204 	add.w	r2, r2, #4
             "       bpl  loop1         \n"
             "       add  r2, #4        \n"
            );
#endif

        asm (".syntax unified           \n"
 800703e:	e001      	b.n	8007044 <test2>

08007040 <loop2>:
 8007040:	5c8b      	ldrb	r3, [r1, r2]
 8007042:	5483      	strb	r3, [r0, r2]

08007044 <test2>:
 8007044:	3a01      	subs	r2, #1
 8007046:	d5fb      	bpl.n	8007040 <loop2>
		*q++ = *p++;
	}
#endif

	return dst;
}
 8007048:	4770      	bx	lr

0800704a <memset>:
#include <string.h>
#include <stdint.h>

void *memset(void *dst, int c, size_t n)
{
	char *q = dst;
 800704a:	4603      	mov	r3, r0
 800704c:	4402      	add	r2, r0
	asm volatile ("cld ; rep ; stosq ; movl %3,%%ecx ; rep ; stosb"
		      :"+c" (nq), "+D" (q)
		      : "a" ((unsigned char)c * 0x0101010101010101U),
			"r" ((uint32_t) n & 7));
#else
	while (n--) {
 800704e:	4293      	cmp	r3, r2
 8007050:	d100      	bne.n	8007054 <memset+0xa>
		*q++ = c;
	}
#endif

	return dst;
}
 8007052:	4770      	bx	lr
		*q++ = c;
 8007054:	f803 1b01 	strb.w	r1, [r3], #1
 8007058:	e7f9      	b.n	800704e <memset+0x4>

0800705a <sprintf>:
#include <stdio.h>
#include <unistd.h>
#include <stdint.h>

int sprintf(char *buffer, const char *format, ...)
{
 800705a:	b40e      	push	{r1, r2, r3}
 800705c:	b503      	push	{r0, r1, lr}
 800705e:	ab03      	add	r3, sp, #12
 8007060:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list ap;
	int rv;

	va_start(ap, format);
	rv = vsnprintf(buffer, SIZE_MAX/2, format, ap);
 8007064:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
	va_start(ap, format);
 8007068:	9301      	str	r3, [sp, #4]
	rv = vsnprintf(buffer, SIZE_MAX/2, format, ap);
 800706a:	f000 fa5d 	bl	8007528 <vsnprintf>
	va_end(ap);

	return rv;
}
 800706e:	b002      	add	sp, #8
 8007070:	f85d eb04 	ldr.w	lr, [sp], #4
 8007074:	b003      	add	sp, #12
 8007076:	4770      	bx	lr

08007078 <strcmp>:
	const unsigned char *c2 = (const unsigned char *)s2;
	unsigned char ch;
	int d = 0;

	while (1) {
		d = (int)(ch = *c1++) - (int)*c2++;
 8007078:	f810 2b01 	ldrb.w	r2, [r0], #1
 800707c:	f811 3b01 	ldrb.w	r3, [r1], #1
		if (d || !ch)
 8007080:	1ad3      	subs	r3, r2, r3
 8007082:	d101      	bne.n	8007088 <strcmp+0x10>
 8007084:	2a00      	cmp	r2, #0
 8007086:	d1f7      	bne.n	8007078 <strcmp>
			break;
	}

	return d;
}
 8007088:	4618      	mov	r0, r3
 800708a:	4770      	bx	lr

0800708c <strcpy>:

#include <string.h>

char *strcpy(char *dst, const char *src)
{
	char *q = dst;
 800708c:	4602      	mov	r2, r0
	const char *p = src;
	char ch;

	do {
		*q++ = ch = *p++;
 800708e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007092:	f802 3b01 	strb.w	r3, [r2], #1
	} while (ch);
 8007096:	2b00      	cmp	r3, #0
 8007098:	d1f9      	bne.n	800708e <strcpy+0x2>

	return dst;
}
 800709a:	4770      	bx	lr

0800709c <strlen>:
 */

#include <string.h>

size_t strlen(const char *s)
{
 800709c:	4603      	mov	r3, r0
	const char *ss = s;
	while (*ss)
 800709e:	781a      	ldrb	r2, [r3, #0]
 80070a0:	1c59      	adds	r1, r3, #1
 80070a2:	b90a      	cbnz	r2, 80070a8 <strlen+0xc>
		ss++;
	return ss - s;
}
 80070a4:	1a18      	subs	r0, r3, r0
 80070a6:	4770      	bx	lr
 80070a8:	460b      	mov	r3, r1
 80070aa:	e7f8      	b.n	800709e <strlen+0x2>

080070ac <ui2a>:
    char base;  /**<  number base (e.g.: 8, 10, 16) */
    char *bf;           /**<  Buffer to output */
};

static void ui2a(unsigned long long int num, struct param *p)
{
 80070ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070b0:	4680      	mov	r8, r0
 80070b2:	4689      	mov	r9, r1
 80070b4:	4693      	mov	fp, r2
    int n = 0;
    unsigned long long int d = 1;
    char *bf = p->bf;
    while (num / d >= p->base)
 80070b6:	2700      	movs	r7, #0
    unsigned long long int d = 1;
 80070b8:	2401      	movs	r4, #1
 80070ba:	2500      	movs	r5, #0
    char *bf = p->bf;
 80070bc:	f8d2 a004 	ldr.w	sl, [r2, #4]
    while (num / d >= p->base)
 80070c0:	78d6      	ldrb	r6, [r2, #3]
 80070c2:	4622      	mov	r2, r4
 80070c4:	462b      	mov	r3, r5
 80070c6:	4640      	mov	r0, r8
 80070c8:	4649      	mov	r1, r9
 80070ca:	f004 fd8b 	bl	800bbe4 <__aeabi_uldivmod>
 80070ce:	42b9      	cmp	r1, r7
 80070d0:	bf08      	it	eq
 80070d2:	42b0      	cmpeq	r0, r6
 80070d4:	d20a      	bcs.n	80070ec <ui2a+0x40>
    int n = 0;
 80070d6:	2300      	movs	r3, #0
 80070d8:	9301      	str	r3, [sp, #4]
        d *= p->base;
    while (d != 0) {
 80070da:	ea54 0305 	orrs.w	r3, r4, r5
 80070de:	d10d      	bne.n	80070fc <ui2a+0x50>
        if (n || dgt > 0 || d == 0) {
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
            ++n;
        }
    }
    *bf = 0;
 80070e0:	2300      	movs	r3, #0
 80070e2:	f88a 3000 	strb.w	r3, [sl]
}
 80070e6:	b003      	add	sp, #12
 80070e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        d *= p->base;
 80070ec:	fb04 f307 	mul.w	r3, r4, r7
 80070f0:	fb06 3305 	mla	r3, r6, r5, r3
 80070f4:	fba4 4506 	umull	r4, r5, r4, r6
 80070f8:	441d      	add	r5, r3
 80070fa:	e7e2      	b.n	80070c2 <ui2a+0x16>
 80070fc:	4622      	mov	r2, r4
 80070fe:	462b      	mov	r3, r5
 8007100:	4640      	mov	r0, r8
 8007102:	4649      	mov	r1, r9
 8007104:	f004 fd6e 	bl	800bbe4 <__aeabi_uldivmod>
 8007108:	4606      	mov	r6, r0
 800710a:	460f      	mov	r7, r1
        d /= p->base;
 800710c:	4620      	mov	r0, r4
 800710e:	4629      	mov	r1, r5
 8007110:	4690      	mov	r8, r2
 8007112:	4699      	mov	r9, r3
 8007114:	f89b 2003 	ldrb.w	r2, [fp, #3]
 8007118:	2300      	movs	r3, #0
 800711a:	f004 fd63 	bl	800bbe4 <__aeabi_uldivmod>
        if (n || dgt > 0 || d == 0) {
 800711e:	9b01      	ldr	r3, [sp, #4]
        d /= p->base;
 8007120:	4604      	mov	r4, r0
 8007122:	460d      	mov	r5, r1
        if (n || dgt > 0 || d == 0) {
 8007124:	b93b      	cbnz	r3, 8007136 <ui2a+0x8a>
 8007126:	ea56 0307 	orrs.w	r3, r6, r7
 800712a:	d104      	bne.n	8007136 <ui2a+0x8a>
 800712c:	ea54 0305 	orrs.w	r3, r4, r5
 8007130:	d1d3      	bne.n	80070da <ui2a+0x2e>
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
 8007132:	2330      	movs	r3, #48	; 0x30
 8007134:	e00a      	b.n	800714c <ui2a+0xa0>
 8007136:	2f00      	cmp	r7, #0
 8007138:	bf08      	it	eq
 800713a:	2e0a      	cmpeq	r6, #10
 800713c:	d3f9      	bcc.n	8007132 <ui2a+0x86>
 800713e:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8007142:	f013 0f04 	tst.w	r3, #4
 8007146:	bf14      	ite	ne
 8007148:	2337      	movne	r3, #55	; 0x37
 800714a:	2357      	moveq	r3, #87	; 0x57
 800714c:	441e      	add	r6, r3
            ++n;
 800714e:	9b01      	ldr	r3, [sp, #4]
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
 8007150:	f88a 6000 	strb.w	r6, [sl]
            ++n;
 8007154:	3301      	adds	r3, #1
 8007156:	9301      	str	r3, [sp, #4]
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
 8007158:	f10a 0a01 	add.w	sl, sl, #1
 800715c:	e7bd      	b.n	80070da <ui2a+0x2e>

0800715e <putf>:
    *nump = num;
    return ch;
}

static int putf(FILE *putp, char c)
{
 800715e:	b507      	push	{r0, r1, r2, lr}
    return stream->vmt->read(stream, (char*)buf, size*nmemb) / size;
}

__extern_inline size_t fwrite(const void *buf, size_t size, size_t nmemb, FILE *stream)
{
    if (stream->vmt->write == NULL) return 0;
 8007160:	6803      	ldr	r3, [r0, #0]
	return fwrite(s, 1, strlen(s), stdout) + fwrite("\n", 1, 1, stdout);
}

__extern_inline int fputc(int c, FILE *f)
{
	unsigned char ch = c;
 8007162:	f88d 1007 	strb.w	r1, [sp, #7]
    if (stream->vmt->write == NULL) return 0;
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	b91b      	cbnz	r3, 8007172 <putf+0x14>
    if (fputc(c, putp) == EOF)
        return 0;
 800716a:	2000      	movs	r0, #0
    else
        return 1;
}
 800716c:	b003      	add	sp, #12
 800716e:	f85d fb04 	ldr.w	pc, [sp], #4
    return stream->vmt->write(stream, (char*)buf, size*nmemb) / size;
 8007172:	2201      	movs	r2, #1
 8007174:	f10d 0107 	add.w	r1, sp, #7
 8007178:	4798      	blx	r3
	return fwrite(&ch, 1, 1, f) == 1 ? ch : EOF;
 800717a:	2801      	cmp	r0, #1
 800717c:	d1f5      	bne.n	800716a <putf+0xc>
 800717e:	e7f5      	b.n	800716c <putf+0xe>

08007180 <putchw>:

static unsigned putchw(FILE *putp, struct param *p)
{
 8007180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007184:	4607      	mov	r7, r0
 8007186:	460e      	mov	r6, r1
    unsigned written = 0;
    char ch;
    int n = p->width;
 8007188:	780c      	ldrb	r4, [r1, #0]
    char *bf = p->bf;
 800718a:	684b      	ldr	r3, [r1, #4]

    /* Number of filling characters */
    while (*bf++ && n > 0)
 800718c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007190:	b10a      	cbz	r2, 8007196 <putchw+0x16>
 8007192:	2c00      	cmp	r4, #0
 8007194:	d152      	bne.n	800723c <putchw+0xbc>
        n--;
    if (p->sign)
        n--;
    if (p->alt && p->base == 16)
 8007196:	f241 0202 	movw	r2, #4098	; 0x1002
    if (p->sign)
 800719a:	78b3      	ldrb	r3, [r6, #2]
 800719c:	07d9      	lsls	r1, r3, #31
    if (p->alt && p->base == 16)
 800719e:	8873      	ldrh	r3, [r6, #2]
        n--;
 80071a0:	bf48      	it	mi
 80071a2:	f104 34ff 	addmi.w	r4, r4, #4294967295	; 0xffffffff
    if (p->alt && p->base == 16)
 80071a6:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
 80071aa:	b29b      	uxth	r3, r3
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d147      	bne.n	8007240 <putchw+0xc0>
        n -= 2;
 80071b0:	3c02      	subs	r4, #2
    else if (p->alt && p->base == 8)
        n--;

    /* Unless left-aligned, fill with space, before alternate or sign */
    if (!p->lz && !p->left) {
 80071b2:	6833      	ldr	r3, [r6, #0]
 80071b4:	4d38      	ldr	r5, [pc, #224]	; (8007298 <putchw+0x118>)
 80071b6:	401d      	ands	r5, r3
 80071b8:	2d00      	cmp	r5, #0
 80071ba:	d150      	bne.n	800725e <putchw+0xde>
 80071bc:	46a0      	mov	r8, r4
        while (n-- > 0)
 80071be:	f1b8 0f00 	cmp.w	r8, #0
 80071c2:	dc44      	bgt.n	800724e <putchw+0xce>
 80071c4:	1e63      	subs	r3, r4, #1
 80071c6:	2c00      	cmp	r4, #0
 80071c8:	bfb4      	ite	lt
 80071ca:	461c      	movlt	r4, r3
 80071cc:	1b1c      	subge	r4, r3, r4
            written += putf(putp, ' ');
    }

    /* print sign */
    if (p->sign)
 80071ce:	78b3      	ldrb	r3, [r6, #2]
 80071d0:	07da      	lsls	r2, r3, #31
 80071d2:	d504      	bpl.n	80071de <putchw+0x5e>
        written += putf(putp, '-');
 80071d4:	212d      	movs	r1, #45	; 0x2d
 80071d6:	4638      	mov	r0, r7
 80071d8:	f7ff ffc1 	bl	800715e <putf>
 80071dc:	4405      	add	r5, r0

    /* Alternate */
    if (p->alt && p->base == 16) {
 80071de:	f241 0202 	movw	r2, #4098	; 0x1002
 80071e2:	8873      	ldrh	r3, [r6, #2]
 80071e4:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
 80071e8:	b29b      	uxth	r3, r3
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d139      	bne.n	8007262 <putchw+0xe2>
        written += putf(putp, '0');
 80071ee:	2130      	movs	r1, #48	; 0x30
 80071f0:	4638      	mov	r0, r7
 80071f2:	f7ff ffb4 	bl	800715e <putf>
        written += putf(putp, (p->uc ? 'X' : 'x'));
 80071f6:	78b3      	ldrb	r3, [r6, #2]
        written += putf(putp, '0');
 80071f8:	4405      	add	r5, r0
        written += putf(putp, (p->uc ? 'X' : 'x'));
 80071fa:	f013 0f04 	tst.w	r3, #4
 80071fe:	bf14      	ite	ne
 8007200:	2158      	movne	r1, #88	; 0x58
 8007202:	2178      	moveq	r1, #120	; 0x78
    } else if (p->alt && p->base == 8) {
        written += putf(putp, '0');
 8007204:	4638      	mov	r0, r7
 8007206:	f7ff ffaa 	bl	800715e <putf>
 800720a:	4405      	add	r5, r0
    }

    /* Fill with zeros, after alternate or sign */
    if (p->lz) {
 800720c:	7873      	ldrb	r3, [r6, #1]
 800720e:	b143      	cbz	r3, 8007222 <putchw+0xa2>
 8007210:	46a0      	mov	r8, r4
        while (n-- > 0)
 8007212:	f1b8 0f00 	cmp.w	r8, #0
 8007216:	dc2a      	bgt.n	800726e <putchw+0xee>
 8007218:	1e63      	subs	r3, r4, #1
 800721a:	2c00      	cmp	r4, #0
 800721c:	bfb4      	ite	lt
 800721e:	461c      	movlt	r4, r3
 8007220:	1b1c      	subge	r4, r3, r4
            written += putf(putp, '0');
    }

    /* Put actual buffer */
    bf = p->bf;
 8007222:	f8d6 8004 	ldr.w	r8, [r6, #4]
    while ((ch = *bf++))
 8007226:	f818 1b01 	ldrb.w	r1, [r8], #1
 800722a:	bb41      	cbnz	r1, 800727e <putchw+0xfe>
        written += putf(putp, ch);

    /* If left-aligned, pad the end with spaces. */
    if (p->left) {
 800722c:	78b3      	ldrb	r3, [r6, #2]
 800722e:	071b      	lsls	r3, r3, #28
 8007230:	d501      	bpl.n	8007236 <putchw+0xb6>
        while (n-- > 0)
 8007232:	2c00      	cmp	r4, #0
 8007234:	dc28      	bgt.n	8007288 <putchw+0x108>
            written += putf(putp, ' ');
    }
    
    return written;
}
 8007236:	4628      	mov	r0, r5
 8007238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        n--;
 800723c:	3c01      	subs	r4, #1
 800723e:	e7a5      	b.n	800718c <putchw+0xc>
    else if (p->alt && p->base == 8)
 8007240:	f640 0202 	movw	r2, #2050	; 0x802
 8007244:	4293      	cmp	r3, r2
        n--;
 8007246:	bf08      	it	eq
 8007248:	f104 34ff 	addeq.w	r4, r4, #4294967295	; 0xffffffff
 800724c:	e7b1      	b.n	80071b2 <putchw+0x32>
            written += putf(putp, ' ');
 800724e:	2120      	movs	r1, #32
 8007250:	4638      	mov	r0, r7
 8007252:	f7ff ff84 	bl	800715e <putf>
 8007256:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800725a:	4405      	add	r5, r0
 800725c:	e7af      	b.n	80071be <putchw+0x3e>
    unsigned written = 0;
 800725e:	2500      	movs	r5, #0
 8007260:	e7b5      	b.n	80071ce <putchw+0x4e>
    } else if (p->alt && p->base == 8) {
 8007262:	f640 0202 	movw	r2, #2050	; 0x802
 8007266:	4293      	cmp	r3, r2
 8007268:	d1d0      	bne.n	800720c <putchw+0x8c>
        written += putf(putp, '0');
 800726a:	2130      	movs	r1, #48	; 0x30
 800726c:	e7ca      	b.n	8007204 <putchw+0x84>
            written += putf(putp, '0');
 800726e:	2130      	movs	r1, #48	; 0x30
 8007270:	4638      	mov	r0, r7
 8007272:	f7ff ff74 	bl	800715e <putf>
 8007276:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800727a:	4405      	add	r5, r0
 800727c:	e7c9      	b.n	8007212 <putchw+0x92>
        written += putf(putp, ch);
 800727e:	4638      	mov	r0, r7
 8007280:	f7ff ff6d 	bl	800715e <putf>
 8007284:	4405      	add	r5, r0
 8007286:	e7ce      	b.n	8007226 <putchw+0xa6>
            written += putf(putp, ' ');
 8007288:	2120      	movs	r1, #32
 800728a:	4638      	mov	r0, r7
 800728c:	f7ff ff67 	bl	800715e <putf>
 8007290:	3c01      	subs	r4, #1
 8007292:	4405      	add	r5, r0
 8007294:	e7cd      	b.n	8007232 <putchw+0xb2>
 8007296:	bf00      	nop
 8007298:	0008ff00 	.word	0x0008ff00

0800729c <tfp_format>:

    return val;
}

size_t tfp_format(FILE *putp, const char *fmt, va_list va)
{
 800729c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    size_t written = 0;
 80072a0:	2600      	movs	r6, #0
{
 80072a2:	4607      	mov	r7, r0
 80072a4:	4614      	mov	r4, r2
    while ((ch = *(fmt++))) {
        if (ch != '%') {
            written += putf(putp, ch);
        } else {
            /* Init parameter struct */
            p.lz = 0;
 80072a6:	46b0      	mov	r8, r6
{
 80072a8:	b089      	sub	sp, #36	; 0x24
    p.bf = bf;
 80072aa:	ad02      	add	r5, sp, #8
 80072ac:	9501      	str	r5, [sp, #4]
    while ((ch = *(fmt++))) {
 80072ae:	f101 0901 	add.w	r9, r1, #1
 80072b2:	7809      	ldrb	r1, [r1, #0]
 80072b4:	b919      	cbnz	r1, 80072be <tfp_format+0x22>
        }
    }
 abort:;
 
 return written;
}
 80072b6:	4630      	mov	r0, r6
 80072b8:	b009      	add	sp, #36	; 0x24
 80072ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (ch != '%') {
 80072be:	2925      	cmp	r1, #37	; 0x25
 80072c0:	d003      	beq.n	80072ca <tfp_format+0x2e>
                written += putf(putp, ch);
 80072c2:	4638      	mov	r0, r7
 80072c4:	f7ff ff4b 	bl	800715e <putf>
 80072c8:	e0ff      	b.n	80074ca <tfp_format+0x22e>
            p.alt = 0;
 80072ca:	f89d 3002 	ldrb.w	r3, [sp, #2]
    while ((ch = *(fmt++))) {
 80072ce:	4648      	mov	r0, r9
            p.uc = 0;
 80072d0:	f003 03f4 	and.w	r3, r3, #244	; 0xf4
 80072d4:	f368 0382 	bfi	r3, r8, #2, #1
 80072d8:	f88d 3002 	strb.w	r3, [sp, #2]
            while ((ch = *(fmt++))) {
 80072dc:	2300      	movs	r3, #0
 80072de:	461a      	mov	r2, r3
            p.lz = 0;
 80072e0:	f88d 8001 	strb.w	r8, [sp, #1]
            p.width = 0;
 80072e4:	f88d 8000 	strb.w	r8, [sp]
            while ((ch = *(fmt++))) {
 80072e8:	f819 1b01 	ldrb.w	r1, [r9], #1
 80072ec:	b949      	cbnz	r1, 8007302 <tfp_format+0x66>
 80072ee:	b10b      	cbz	r3, 80072f4 <tfp_format+0x58>
 80072f0:	f88d 2001 	strb.w	r2, [sp, #1]
            } else if (ch >= '0' && ch <= '9') {
 80072f4:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80072f8:	2b09      	cmp	r3, #9
 80072fa:	d834      	bhi.n	8007366 <tfp_format+0xca>
    int num = 0;
 80072fc:	2200      	movs	r2, #0
        num = num * base + digit;
 80072fe:	200a      	movs	r0, #10
 8007300:	e056      	b.n	80073b0 <tfp_format+0x114>
                switch (ch) {
 8007302:	292d      	cmp	r1, #45	; 0x2d
 8007304:	d010      	beq.n	8007328 <tfp_format+0x8c>
 8007306:	2930      	cmp	r1, #48	; 0x30
 8007308:	d008      	beq.n	800731c <tfp_format+0x80>
 800730a:	2923      	cmp	r1, #35	; 0x23
 800730c:	d118      	bne.n	8007340 <tfp_format+0xa4>
                    p.alt = 1;
 800730e:	f89d 1002 	ldrb.w	r1, [sp, #2]
 8007312:	f041 0102 	orr.w	r1, r1, #2
 8007316:	f88d 1002 	strb.w	r1, [sp, #2]
                    continue;
 800731a:	e003      	b.n	8007324 <tfp_format+0x88>
                    if (!p.left) {
 800731c:	f89d 1002 	ldrb.w	r1, [sp, #2]
 8007320:	0709      	lsls	r1, r1, #28
 8007322:	d50a      	bpl.n	800733a <tfp_format+0x9e>
                    p.lz = 0;
 8007324:	4648      	mov	r0, r9
 8007326:	e7df      	b.n	80072e8 <tfp_format+0x4c>
                    p.left = 1;
 8007328:	f89d 3002 	ldrb.w	r3, [sp, #2]
                    p.lz = 0;
 800732c:	2200      	movs	r2, #0
                    p.left = 1;
 800732e:	f043 0308 	orr.w	r3, r3, #8
 8007332:	f88d 3002 	strb.w	r3, [sp, #2]
                    continue;
 8007336:	2301      	movs	r3, #1
 8007338:	e7f4      	b.n	8007324 <tfp_format+0x88>
 800733a:	2301      	movs	r3, #1
                        p.lz = 1;
 800733c:	461a      	mov	r2, r3
 800733e:	e7f1      	b.n	8007324 <tfp_format+0x88>
 8007340:	b10b      	cbz	r3, 8007346 <tfp_format+0xaa>
 8007342:	f88d 2001 	strb.w	r2, [sp, #1]
            if (ch == '*') {
 8007346:	292a      	cmp	r1, #42	; 0x2a
 8007348:	d1d4      	bne.n	80072f4 <tfp_format+0x58>
            val = va_arg(*va, int);
 800734a:	6823      	ldr	r3, [r4, #0]
 800734c:	1d22      	adds	r2, r4, #4
                if (i > UCHAR_MAX) {
 800734e:	2bff      	cmp	r3, #255	; 0xff
 8007350:	dd03      	ble.n	800735a <tfp_format+0xbe>
                    p.width = UCHAR_MAX;
 8007352:	23ff      	movs	r3, #255	; 0xff
                    p.width = i;
 8007354:	f88d 3000 	strb.w	r3, [sp]
 8007358:	e001      	b.n	800735e <tfp_format+0xc2>
                } else if (i > 0) {
 800735a:	2b00      	cmp	r3, #0
 800735c:	dcfa      	bgt.n	8007354 <tfp_format+0xb8>
            val = va_arg(*va, int);
 800735e:	4614      	mov	r4, r2
                ch = *(fmt++);
 8007360:	7841      	ldrb	r1, [r0, #1]
 8007362:	f100 0902 	add.w	r9, r0, #2
            if (ch == 'l') {
 8007366:	296c      	cmp	r1, #108	; 0x6c
 8007368:	d13b      	bne.n	80073e2 <tfp_format+0x146>
                ch = *(fmt++);
 800736a:	f899 1000 	ldrb.w	r1, [r9]
                if (ch == 'l') {
 800736e:	296c      	cmp	r1, #108	; 0x6c
                lng = 1;
 8007370:	bf13      	iteet	ne
 8007372:	2301      	movne	r3, #1
                    lng = 2;
 8007374:	2302      	moveq	r3, #2
                    ch = *(fmt++);
 8007376:	f899 1001 	ldrbeq.w	r1, [r9, #1]
                ch = *(fmt++);
 800737a:	f109 0901 	addne.w	r9, r9, #1
                    ch = *(fmt++);
 800737e:	bf08      	it	eq
 8007380:	f109 0902 	addeq.w	r9, r9, #2
            if (ch == 'z') {
 8007384:	297a      	cmp	r1, #122	; 0x7a
                ch = *(fmt++);
 8007386:	bf04      	itt	eq
 8007388:	f899 1000 	ldrbeq.w	r1, [r9]
 800738c:	f109 0901 	addeq.w	r9, r9, #1
            switch (ch) {
 8007390:	2969      	cmp	r1, #105	; 0x69
 8007392:	d02c      	beq.n	80073ee <tfp_format+0x152>
 8007394:	d83a      	bhi.n	800740c <tfp_format+0x170>
 8007396:	2958      	cmp	r1, #88	; 0x58
 8007398:	d064      	beq.n	8007464 <tfp_format+0x1c8>
 800739a:	d824      	bhi.n	80073e6 <tfp_format+0x14a>
 800739c:	2900      	cmp	r1, #0
 800739e:	d08a      	beq.n	80072b6 <tfp_format+0x1a>
 80073a0:	2925      	cmp	r1, #37	; 0x25
 80073a2:	d08e      	beq.n	80072c2 <tfp_format+0x26>
                v = va_arg(va, void *);
 80073a4:	4649      	mov	r1, r9
 80073a6:	e782      	b.n	80072ae <tfp_format+0x12>
        num = num * base + digit;
 80073a8:	fb00 3202 	mla	r2, r0, r2, r3
        ch = *p++;
 80073ac:	f819 1b01 	ldrb.w	r1, [r9], #1
    if (ch >= '0' && ch <= '9')
 80073b0:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80073b4:	fa5f fc83 	uxtb.w	ip, r3
 80073b8:	f1bc 0f09 	cmp.w	ip, #9
 80073bc:	d9f4      	bls.n	80073a8 <tfp_format+0x10c>
    else if (ch >= 'a' && ch <= 'f')
 80073be:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
 80073c2:	2b05      	cmp	r3, #5
 80073c4:	d806      	bhi.n	80073d4 <tfp_format+0x138>
        return ch - 'a' + 10;
 80073c6:	f1a1 0357 	sub.w	r3, r1, #87	; 0x57
        if (digit > base)
 80073ca:	2b0a      	cmp	r3, #10
 80073cc:	ddec      	ble.n	80073a8 <tfp_format+0x10c>
    *nump = num;
 80073ce:	f88d 2000 	strb.w	r2, [sp]
 80073d2:	e7c8      	b.n	8007366 <tfp_format+0xca>
    else if (ch >= 'A' && ch <= 'F')
 80073d4:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
 80073d8:	2b05      	cmp	r3, #5
 80073da:	d8f8      	bhi.n	80073ce <tfp_format+0x132>
        return ch - 'A' + 10;
 80073dc:	f1a1 0337 	sub.w	r3, r1, #55	; 0x37
 80073e0:	e7f3      	b.n	80073ca <tfp_format+0x12e>
            lng = 0;
 80073e2:	2300      	movs	r3, #0
 80073e4:	e7ce      	b.n	8007384 <tfp_format+0xe8>
            switch (ch) {
 80073e6:	2963      	cmp	r1, #99	; 0x63
 80073e8:	d077      	beq.n	80074da <tfp_format+0x23e>
 80073ea:	2964      	cmp	r1, #100	; 0x64
 80073ec:	d1da      	bne.n	80073a4 <tfp_format+0x108>
                p.base = 10;
 80073ee:	220a      	movs	r2, #10
 80073f0:	f88d 2003 	strb.w	r2, [sp, #3]
    switch (lng) {
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d051      	beq.n	800749c <tfp_format+0x200>
 80073f8:	2b01      	cmp	r3, #1
 80073fa:	d04f      	beq.n	800749c <tfp_format+0x200>
            val = va_arg(*va, long long);
 80073fc:	3407      	adds	r4, #7
 80073fe:	f024 0307 	bic.w	r3, r4, #7
 8007402:	f103 0408 	add.w	r4, r3, #8
 8007406:	e9d3 0100 	ldrd	r0, r1, [r3]
 800740a:	e04a      	b.n	80074a2 <tfp_format+0x206>
            switch (ch) {
 800740c:	2973      	cmp	r1, #115	; 0x73
 800740e:	d06c      	beq.n	80074ea <tfp_format+0x24e>
 8007410:	d824      	bhi.n	800745c <tfp_format+0x1c0>
 8007412:	296f      	cmp	r1, #111	; 0x6f
 8007414:	d05b      	beq.n	80074ce <tfp_format+0x232>
 8007416:	2970      	cmp	r1, #112	; 0x70
 8007418:	d1c4      	bne.n	80073a4 <tfp_format+0x108>
                p.base = 16;
 800741a:	2310      	movs	r3, #16
                ui2a((uintptr_t)v, &p);
 800741c:	466a      	mov	r2, sp
                v = va_arg(va, void *);
 800741e:	6820      	ldr	r0, [r4, #0]
                ui2a((uintptr_t)v, &p);
 8007420:	2100      	movs	r1, #0
                p.base = 16;
 8007422:	f88d 3003 	strb.w	r3, [sp, #3]
                ui2a((uintptr_t)v, &p);
 8007426:	f7ff fe41 	bl	80070ac <ui2a>
                p.width = 2 * sizeof(void*);
 800742a:	f44f 7384 	mov.w	r3, #264	; 0x108
                written += putf(putp, '0');
 800742e:	2130      	movs	r1, #48	; 0x30
 8007430:	4638      	mov	r0, r7
                p.width = 2 * sizeof(void*);
 8007432:	f8ad 3000 	strh.w	r3, [sp]
                written += putf(putp, '0');
 8007436:	f7ff fe92 	bl	800715e <putf>
                written += putf(putp, 'x');
 800743a:	2178      	movs	r1, #120	; 0x78
                written += putf(putp, '0');
 800743c:	4683      	mov	fp, r0
                written += putf(putp, 'x');
 800743e:	4638      	mov	r0, r7
 8007440:	f7ff fe8d 	bl	800715e <putf>
                v = va_arg(va, void *);
 8007444:	f104 0a04 	add.w	sl, r4, #4
                written += putchw(putp, &p);
 8007448:	4669      	mov	r1, sp
                written += putf(putp, 'x');
 800744a:	4604      	mov	r4, r0
                written += putchw(putp, &p);
 800744c:	4638      	mov	r0, r7
 800744e:	f7ff fe97 	bl	8007180 <putchw>
 8007452:	4406      	add	r6, r0
 8007454:	445e      	add	r6, fp
 8007456:	4426      	add	r6, r4
                p.bf = va_arg(va, char *);
 8007458:	4654      	mov	r4, sl
                break;
 800745a:	e7a3      	b.n	80073a4 <tfp_format+0x108>
            switch (ch) {
 800745c:	2975      	cmp	r1, #117	; 0x75
 800745e:	d019      	beq.n	8007494 <tfp_format+0x1f8>
 8007460:	2978      	cmp	r1, #120	; 0x78
 8007462:	d19f      	bne.n	80073a4 <tfp_format+0x108>
                p.base = 16;
 8007464:	2210      	movs	r2, #16
 8007466:	f88d 2003 	strb.w	r2, [sp, #3]
                p.uc = (ch == 'X');
 800746a:	f1a1 0258 	sub.w	r2, r1, #88	; 0x58
 800746e:	4251      	negs	r1, r2
 8007470:	4151      	adcs	r1, r2
 8007472:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8007476:	f361 0282 	bfi	r2, r1, #2, #1
 800747a:	f88d 2002 	strb.w	r2, [sp, #2]
    switch (lng) {
 800747e:	b343      	cbz	r3, 80074d2 <tfp_format+0x236>
 8007480:	2b01      	cmp	r3, #1
 8007482:	d026      	beq.n	80074d2 <tfp_format+0x236>
            val = va_arg(*va, unsigned long long);
 8007484:	3407      	adds	r4, #7
 8007486:	f024 0307 	bic.w	r3, r4, #7
 800748a:	f103 0408 	add.w	r4, r3, #8
 800748e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007492:	e013      	b.n	80074bc <tfp_format+0x220>
                p.base = 10;
 8007494:	220a      	movs	r2, #10
                p.base = 8;
 8007496:	f88d 2003 	strb.w	r2, [sp, #3]
 800749a:	e7f0      	b.n	800747e <tfp_format+0x1e2>
            val = va_arg(*va, long);
 800749c:	6820      	ldr	r0, [r4, #0]
 800749e:	3404      	adds	r4, #4
 80074a0:	17c1      	asrs	r1, r0, #31
    if (num < 0) {
 80074a2:	2800      	cmp	r0, #0
 80074a4:	f171 0300 	sbcs.w	r3, r1, #0
 80074a8:	da08      	bge.n	80074bc <tfp_format+0x220>
        p->sign = 1;
 80074aa:	f89d 3002 	ldrb.w	r3, [sp, #2]
        num = -num;
 80074ae:	4240      	negs	r0, r0
        p->sign = 1;
 80074b0:	f043 0301 	orr.w	r3, r3, #1
        num = -num;
 80074b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
        p->sign = 1;
 80074b8:	f88d 3002 	strb.w	r3, [sp, #2]
                ui2a(intarg(lng, 0, &va), &p);
 80074bc:	466a      	mov	r2, sp
 80074be:	f7ff fdf5 	bl	80070ac <ui2a>
                written += putchw(putp, &p);
 80074c2:	4669      	mov	r1, sp
 80074c4:	4638      	mov	r0, r7
 80074c6:	f7ff fe5b 	bl	8007180 <putchw>
                written += putf(putp, ch);
 80074ca:	4406      	add	r6, r0
                break;
 80074cc:	e76a      	b.n	80073a4 <tfp_format+0x108>
                p.base = 8;
 80074ce:	2208      	movs	r2, #8
 80074d0:	e7e1      	b.n	8007496 <tfp_format+0x1fa>
            val = va_arg(*va, unsigned long);
 80074d2:	6820      	ldr	r0, [r4, #0]
 80074d4:	2100      	movs	r1, #0
 80074d6:	3404      	adds	r4, #4
 80074d8:	e7f0      	b.n	80074bc <tfp_format+0x220>
                written += putf(putp, (char)(va_arg(va, int)));
 80074da:	7821      	ldrb	r1, [r4, #0]
 80074dc:	4638      	mov	r0, r7
 80074de:	f7ff fe3e 	bl	800715e <putf>
 80074e2:	f104 0a04 	add.w	sl, r4, #4
 80074e6:	4406      	add	r6, r0
 80074e8:	e7b6      	b.n	8007458 <tfp_format+0x1bc>
                p.bf = va_arg(va, char *);
 80074ea:	6823      	ldr	r3, [r4, #0]
                written += putchw(putp, &p);
 80074ec:	4669      	mov	r1, sp
 80074ee:	4638      	mov	r0, r7
                p.bf = va_arg(va, char *);
 80074f0:	9301      	str	r3, [sp, #4]
                written += putchw(putp, &p);
 80074f2:	f7ff fe45 	bl	8007180 <putchw>
                p.bf = va_arg(va, char *);
 80074f6:	f104 0a04 	add.w	sl, r4, #4
                written += putchw(putp, &p);
 80074fa:	4406      	add	r6, r0
                p.bf = bf;
 80074fc:	9501      	str	r5, [sp, #4]
 80074fe:	e7ab      	b.n	8007458 <tfp_format+0x1bc>

08007500 <vfprintf>:

int vfprintf(FILE *f, const char *fmt, va_list va)
{
    return tfp_format(f, fmt, va);
 8007500:	f7ff becc 	b.w	800729c <tfp_format>

08007504 <printf>:
    va_end(va);
    return rv;
}

int printf(const char *fmt, ...)
{
 8007504:	b40f      	push	{r0, r1, r2, r3}
 8007506:	b507      	push	{r0, r1, r2, lr}
    return tfp_format(f, fmt, va);
 8007508:	4b06      	ldr	r3, [pc, #24]	; (8007524 <printf+0x20>)
{
 800750a:	aa04      	add	r2, sp, #16
 800750c:	f852 1b04 	ldr.w	r1, [r2], #4
    return tfp_format(f, fmt, va);
 8007510:	6818      	ldr	r0, [r3, #0]
    va_list va;
    va_start(va, fmt);
 8007512:	9201      	str	r2, [sp, #4]
    return tfp_format(f, fmt, va);
 8007514:	f7ff fec2 	bl	800729c <tfp_format>
    int rv = vfprintf(stdout, fmt, va);
    va_end(va);
    return rv;
}
 8007518:	b003      	add	sp, #12
 800751a:	f85d eb04 	ldr.w	lr, [sp], #4
 800751e:	b004      	add	sp, #16
 8007520:	4770      	bx	lr
 8007522:	bf00      	nop
 8007524:	0800dea4 	.word	0x0800dea4

08007528 <vsnprintf>:

int vsnprintf(char *str, size_t size, const char *fmt, va_list va)
{
 8007528:	b5f0      	push	{r4, r5, r6, r7, lr}
 800752a:	4616      	mov	r6, r2
 800752c:	461f      	mov	r7, r3
 800752e:	460d      	mov	r5, r1
 8007530:	b085      	sub	sp, #20
    struct MemFile state;
    FILE *f = fmemopen_w(&state, str, size);
 8007532:	460a      	mov	r2, r1
{
 8007534:	4604      	mov	r4, r0
    FILE *f = fmemopen_w(&state, str, size);
 8007536:	4601      	mov	r1, r0
 8007538:	4668      	mov	r0, sp
 800753a:	f000 f85d 	bl	80075f8 <fmemopen_w>
    tfp_format(f, fmt, va);
 800753e:	463a      	mov	r2, r7
 8007540:	4631      	mov	r1, r6
 8007542:	f7ff feab 	bl	800729c <tfp_format>
    if (size > 0) {
 8007546:	b14d      	cbz	r5, 800755c <vsnprintf+0x34>
        if (state.bytes_written < size) {
 8007548:	9b02      	ldr	r3, [sp, #8]
 800754a:	42ab      	cmp	r3, r5
 800754c:	f04f 0300 	mov.w	r3, #0
            *(state.buffer) = '\0';
 8007550:	bf35      	itete	cc
 8007552:	9a01      	ldrcc	r2, [sp, #4]
        } else {
            str[size - 1] = '\0';
 8007554:	1964      	addcs	r4, r4, r5
            *(state.buffer) = '\0';
 8007556:	7013      	strbcc	r3, [r2, #0]
            str[size - 1] = '\0';
 8007558:	f804 3c01 	strbcs.w	r3, [r4, #-1]
        }
    }
    return state.bytes_written;
}
 800755c:	9802      	ldr	r0, [sp, #8]
 800755e:	b005      	add	sp, #20
 8007560:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08007564 <vprintf>:
#include <stdio.h>
#include <stdarg.h>

int vprintf(const char *format, va_list ap)
{
	return vfprintf(stdout, format, ap);
 8007564:	4b02      	ldr	r3, [pc, #8]	; (8007570 <vprintf+0xc>)
 8007566:	460a      	mov	r2, r1
 8007568:	4601      	mov	r1, r0
 800756a:	6818      	ldr	r0, [r3, #0]
 800756c:	f7ff bfc8 	b.w	8007500 <vfprintf>
 8007570:	0800dea4 	.word	0x0800dea4

08007574 <jrand48>:

#include <stdlib.h>
#include <stdint.h>

long jrand48(unsigned short xsubi[3])
{
 8007574:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
	uint64_t x;

	/* The xsubi[] array is littleendian by spec */
	x = (uint64_t) (uint16_t) xsubi[0] +
	    ((uint64_t) (uint16_t) xsubi[1] << 16) +
 8007578:	8844      	ldrh	r4, [r0, #2]
	    ((uint64_t) (uint16_t) xsubi[2] << 32);
 800757a:	8885      	ldrh	r5, [r0, #4]
	    ((uint64_t) (uint16_t) xsubi[1] << 16) +
 800757c:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8007580:	ea4f 4b04 	mov.w	fp, r4, lsl #16
	    ((uint64_t) (uint16_t) xsubi[2] << 32);
 8007584:	2400      	movs	r4, #0
{
 8007586:	4601      	mov	r1, r0
	x = (uint64_t) (uint16_t) xsubi[0] +
 8007588:	eb1b 0204 	adds.w	r2, fp, r4
 800758c:	8804      	ldrh	r4, [r0, #0]

	x = (0x5deece66dULL * x) + 0xb;
 800758e:	f04f 0005 	mov.w	r0, #5
	x = (uint64_t) (uint16_t) xsubi[0] +
 8007592:	eb4c 0305 	adc.w	r3, ip, r5
 8007596:	2500      	movs	r5, #0
 8007598:	eb12 0b04 	adds.w	fp, r2, r4
	x = (0x5deece66dULL * x) + 0xb;
 800759c:	fb00 f00b 	mul.w	r0, r0, fp
 80075a0:	4c09      	ldr	r4, [pc, #36]	; (80075c8 <jrand48+0x54>)
	x = (uint64_t) (uint16_t) xsubi[0] +
 80075a2:	eb43 0c05 	adc.w	ip, r3, r5
	x = (0x5deece66dULL * x) + 0xb;
 80075a6:	fb04 000c 	mla	r0, r4, ip, r0
 80075aa:	fbab 2304 	umull	r2, r3, fp, r4
 80075ae:	f112 040b 	adds.w	r4, r2, #11
 80075b2:	4403      	add	r3, r0
 80075b4:	f143 0500 	adc.w	r5, r3, #0

	xsubi[0] = (unsigned short)(uint16_t) x;
	xsubi[1] = (unsigned short)(uint16_t) (x >> 16);
 80075b8:	0c20      	lsrs	r0, r4, #16
 80075ba:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
	xsubi[0] = (unsigned short)(uint16_t) x;
 80075be:	800c      	strh	r4, [r1, #0]
	xsubi[1] = (unsigned short)(uint16_t) (x >> 16);
 80075c0:	8048      	strh	r0, [r1, #2]
	xsubi[2] = (unsigned short)(uint16_t) (x >> 32);
 80075c2:	808d      	strh	r5, [r1, #4]

	return (long)(int32_t) (x >> 16);
}
 80075c4:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
 80075c8:	deece66d 	.word	0xdeece66d

080075cc <memfile_write>:
#include <stdio.h>

size_t memfile_write(FILE *instance, const char *bp, size_t n)
{
 80075cc:	4603      	mov	r3, r0
    struct MemFile *f = (struct MemFile*)instance;
    size_t i = 0;
 80075ce:	2000      	movs	r0, #0
{
 80075d0:	b530      	push	{r4, r5, lr}
    
    while (n--)
 80075d2:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
 80075d6:	d200      	bcs.n	80075da <memfile_write+0xe>
            i++;
        }
    }
    
    return i;
}
 80075d8:	bd30      	pop	{r4, r5, pc}
        f->bytes_written++;
 80075da:	689c      	ldr	r4, [r3, #8]
        if (f->bytes_written <= f->size)
 80075dc:	68dd      	ldr	r5, [r3, #12]
        f->bytes_written++;
 80075de:	3401      	adds	r4, #1
        if (f->bytes_written <= f->size)
 80075e0:	42ac      	cmp	r4, r5
        f->bytes_written++;
 80075e2:	609c      	str	r4, [r3, #8]
        if (f->bytes_written <= f->size)
 80075e4:	d8f5      	bhi.n	80075d2 <memfile_write+0x6>
            *f->buffer++ = *bp++;
 80075e6:	685c      	ldr	r4, [r3, #4]
            i++;
 80075e8:	3001      	adds	r0, #1
            *f->buffer++ = *bp++;
 80075ea:	1c65      	adds	r5, r4, #1
 80075ec:	605d      	str	r5, [r3, #4]
 80075ee:	780d      	ldrb	r5, [r1, #0]
 80075f0:	3101      	adds	r1, #1
 80075f2:	7025      	strb	r5, [r4, #0]
 80075f4:	e7ed      	b.n	80075d2 <memfile_write+0x6>
	...

080075f8 <fmemopen_w>:
    &memfile_write,
    NULL
};

FILE *fmemopen_w(struct MemFile* storage, char *buffer, size_t size)
{
 80075f8:	b510      	push	{r4, lr}
    storage->file.vmt = &MemFile_methods;
 80075fa:	4c03      	ldr	r4, [pc, #12]	; (8007608 <fmemopen_w+0x10>)
    storage->buffer = buffer;
 80075fc:	e9c0 4100 	strd	r4, r1, [r0]
    storage->bytes_written = 0;
 8007600:	2100      	movs	r1, #0
    storage->size = size;
 8007602:	e9c0 1202 	strd	r1, r2, [r0, #8]
    return (FILE*)storage;
}
 8007606:	bd10      	pop	{r4, pc}
 8007608:	0800de9c 	.word	0x0800de9c

0800760c <stdin_read>:

static size_t
stdin_read(FILE *fp, char *bp, size_t n)
{
    return 0;
}
 800760c:	2000      	movs	r0, #0
 800760e:	4770      	bx	lr

08007610 <stdout_write>:

static size_t
stdout_write(FILE *fp, const char *bp, size_t n)
{
 8007610:	b510      	push	{r4, lr}
 8007612:	4614      	mov	r4, r2
 8007614:	4608      	mov	r0, r1
    console_write(bp, n);
 8007616:	4611      	mov	r1, r2
 8007618:	f7fc fb94 	bl	8003d44 <console_write>
    return n;
}
 800761c:	4620      	mov	r0, r4
 800761e:	bd10      	pop	{r4, pc}

08007620 <hmac_prng_init>:
static struct tc_hmac_prng_struct prng;  //  TinyCrypt HMAC PRNG.
static uint8_t hw_id[12];  //  Hardware ID is 12 bytes for STM32
static int hw_id_len;      //  Actual length of hardware ID
static uint8_t seed[32];   //  Seed must be >= 32 bytes long

void hmac_prng_init(void) {
 8007620:	b530      	push	{r4, r5, lr}
#define ENTROPY
#ifdef ENTROPY
    //  Use the internal temperature sensor as a source of entropy (noise) for the generator.
    int rawtemp;
    //  Open the temp_stm32 internal temperature sensor driver.  Assumes already started with "stm32f1_adc_create();  temp_stm32_create();""
    struct temp_stm32 *dev = (struct temp_stm32 *) os_dev_open(MYNEWT_VAL(TEMP_STM32_DEVICE), OS_TIMEOUT_NEVER, NULL);  assert(dev);
 8007622:	2200      	movs	r2, #0
void hmac_prng_init(void) {
 8007624:	b085      	sub	sp, #20
    struct temp_stm32 *dev = (struct temp_stm32 *) os_dev_open(MYNEWT_VAL(TEMP_STM32_DEVICE), OS_TIMEOUT_NEVER, NULL);  assert(dev);
 8007626:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800762a:	4826      	ldr	r0, [pc, #152]	; (80076c4 <hmac_prng_init+0xa4>)
 800762c:	f7fe fbfc 	bl	8005e28 <os_dev_open>
 8007630:	4604      	mov	r4, r0
 8007632:	b928      	cbnz	r0, 8007640 <hmac_prng_init+0x20>
 8007634:	2300      	movs	r3, #0
 8007636:	461a      	mov	r2, r3
 8007638:	4619      	mov	r1, r3
 800763a:	4618      	mov	r0, r3
 800763c:	f7fe f96a 	bl	8005914 <__assert_func>

    //  Fetch 32 bytes of temperature noise into the seed array.
    rc = temp_stm32_get_raw_temperature(dev, sizeof(seed) * 2, &rawtemp, seed); assert(rc == 0);
 8007640:	4b21      	ldr	r3, [pc, #132]	; (80076c8 <hmac_prng_init+0xa8>)
 8007642:	aa03      	add	r2, sp, #12
 8007644:	2140      	movs	r1, #64	; 0x40
 8007646:	f000 f983 	bl	8007950 <temp_stm32_get_raw_temperature>
 800764a:	4605      	mov	r5, r0
 800764c:	2800      	cmp	r0, #0
 800764e:	d1f1      	bne.n	8007634 <hmac_prng_init+0x14>
    os_dev_close((struct os_dev *) dev);  //  Close the driver.
 8007650:	4620      	mov	r0, r4
 8007652:	f7fe fc0a 	bl	8005e6a <os_dev_close>
#endif  //  ENTROPY

    //  Fetch the hardware ID.  This is unique across all microcontrollers.  
    hw_id_len = hal_bsp_hw_id_len();     //  Fetch the length, i.e. 12
 8007656:	f7fd fde8 	bl	800522a <hal_bsp_hw_id_len>
 800765a:	4c1c      	ldr	r4, [pc, #112]	; (80076cc <hmac_prng_init+0xac>)
    assert(hw_id_len >= sizeof(hw_id));  //  Hardware ID too short.
 800765c:	280b      	cmp	r0, #11
    hw_id_len = hal_bsp_hw_id_len();     //  Fetch the length, i.e. 12
 800765e:	6020      	str	r0, [r4, #0]
    assert(hw_id_len >= sizeof(hw_id));  //  Hardware ID too short.
 8007660:	d9e8      	bls.n	8007634 <hmac_prng_init+0x14>
    hw_id_len = hal_bsp_hw_id(hw_id, sizeof(hw_id));  assert(hw_id_len > 0);  //  Get the hardware ID.
 8007662:	210c      	movs	r1, #12
 8007664:	481a      	ldr	r0, [pc, #104]	; (80076d0 <hmac_prng_init+0xb0>)
 8007666:	f7fd fde3 	bl	8005230 <hal_bsp_hw_id>
 800766a:	2800      	cmp	r0, #0
 800766c:	6020      	str	r0, [r4, #0]
 800766e:	dde1      	ble.n	8007634 <hmac_prng_init+0x14>

    //  Personalise the random number generator with the hardware ID.
    //  TinyCrypt uses the hardware ID to prevent generating similar random numbers across microcontrollers.
    console_printf("RND personalise with hw id "); console_dump(hw_id, hw_id_len); console_printf("\n"); console_flush(); ////
 8007670:	4818      	ldr	r0, [pc, #96]	; (80076d4 <hmac_prng_init+0xb4>)
 8007672:	f7fc fb9b 	bl	8003dac <console_printf>
 8007676:	6821      	ldr	r1, [r4, #0]
 8007678:	4815      	ldr	r0, [pc, #84]	; (80076d0 <hmac_prng_init+0xb0>)
 800767a:	f7fc fb2f 	bl	8003cdc <console_dump>
 800767e:	4816      	ldr	r0, [pc, #88]	; (80076d8 <hmac_prng_init+0xb8>)
 8007680:	f7fc fb94 	bl	8003dac <console_printf>
 8007684:	f7fc fab8 	bl	8003bf8 <console_flush>
    rc = tc_hmac_prng_init(&prng, hw_id, hw_id_len);  assert(rc);
 8007688:	6822      	ldr	r2, [r4, #0]
 800768a:	4911      	ldr	r1, [pc, #68]	; (80076d0 <hmac_prng_init+0xb0>)
 800768c:	4813      	ldr	r0, [pc, #76]	; (80076dc <hmac_prng_init+0xbc>)
 800768e:	f000 fa9f 	bl	8007bd0 <tc_hmac_prng_init>
 8007692:	2800      	cmp	r0, #0
 8007694:	d0ce      	beq.n	8007634 <hmac_prng_init+0x14>

#ifdef ENTROPY
    console_printf("RND seed with temp entropy "); console_dump(seed, sizeof(seed)); console_printf("\n"); console_flush(); ////
 8007696:	4812      	ldr	r0, [pc, #72]	; (80076e0 <hmac_prng_init+0xc0>)
 8007698:	f7fc fb88 	bl	8003dac <console_printf>
 800769c:	2120      	movs	r1, #32
 800769e:	480a      	ldr	r0, [pc, #40]	; (80076c8 <hmac_prng_init+0xa8>)
 80076a0:	f7fc fb1c 	bl	8003cdc <console_dump>
 80076a4:	480c      	ldr	r0, [pc, #48]	; (80076d8 <hmac_prng_init+0xb8>)
 80076a6:	f7fc fb81 	bl	8003dac <console_printf>
 80076aa:	f7fc faa5 	bl	8003bf8 <console_flush>
#else
    console_printf("NO ENTROPY\n");
#endif  //  ENTROPY

    //  Use the temperature entropy data to seed the generator.  Seed must be >= 32 bytes long.
    rc = tc_hmac_prng_reseed(&prng, seed, sizeof(seed), NULL, 0);
 80076ae:	9500      	str	r5, [sp, #0]
 80076b0:	462b      	mov	r3, r5
 80076b2:	2220      	movs	r2, #32
 80076b4:	4904      	ldr	r1, [pc, #16]	; (80076c8 <hmac_prng_init+0xa8>)
 80076b6:	4809      	ldr	r0, [pc, #36]	; (80076dc <hmac_prng_init+0xbc>)
 80076b8:	f000 faae 	bl	8007c18 <tc_hmac_prng_reseed>
    assert(rc);
 80076bc:	2800      	cmp	r0, #0
 80076be:	d0b9      	beq.n	8007634 <hmac_prng_init+0x14>
}
 80076c0:	b005      	add	sp, #20
 80076c2:	bd30      	pop	{r4, r5, pc}
 80076c4:	0800dea8 	.word	0x0800dea8
 80076c8:	20002ae8 	.word	0x20002ae8
 80076cc:	200029ac 	.word	0x200029ac
 80076d0:	200029a0 	.word	0x200029a0
 80076d4:	0800deb5 	.word	0x0800deb5
 80076d8:	0800e32c 	.word	0x0800e32c
 80076dc:	200029b0 	.word	0x200029b0
 80076e0:	0800ded1 	.word	0x0800ded1

080076e4 <hmac_prng_generate>:

int hmac_prng_generate(uint8_t *rnd, unsigned int rndlen) {
 80076e4:	b508      	push	{r3, lr}
    //  Generate a random number of length rndlen bytes and save to rnd.  Return 0 if successful.
    int rc;
    //  Call TinyCrypt to generate the random number.
    rc = tc_hmac_prng_generate(rnd, rndlen, &prng);  assert(rc);
 80076e6:	4a05      	ldr	r2, [pc, #20]	; (80076fc <hmac_prng_generate+0x18>)
 80076e8:	f000 fab1 	bl	8007c4e <tc_hmac_prng_generate>
 80076ec:	4603      	mov	r3, r0
 80076ee:	b918      	cbnz	r0, 80076f8 <hmac_prng_generate+0x14>
 80076f0:	4602      	mov	r2, r0
 80076f2:	4601      	mov	r1, r0
 80076f4:	f7fe f90e 	bl	8005914 <__assert_func>
    return 0;
}
 80076f8:	2000      	movs	r0, #0
 80076fa:	bd08      	pop	{r3, pc}
 80076fc:	200029b0 	.word	0x200029b0

08007700 <json_helper_set_array>:
#include <sensor_coap/sensor_coap.h>
#include <mynewt_rust/json_helper.h>

//  Assume we are writing an object now.  Write the key name and start a child array.
//  {a:b --> {a:b, key:[
void json_helper_set_array(void *object, const char *key) {
 8007700:	b508      	push	{r3, lr}
    assert(key);
 8007702:	460b      	mov	r3, r1
 8007704:	b919      	cbnz	r1, 800770e <json_helper_set_array+0xe>
 8007706:	460a      	mov	r2, r1
 8007708:	4608      	mov	r0, r1
 800770a:	f7fe f903 	bl	8005914 <__assert_func>
    //  console_printf("json_helper_set_array: %s\n", key); ////
    json_rep_set_array_k(object, (char *) key);
 800770e:	4804      	ldr	r0, [pc, #16]	; (8007720 <json_helper_set_array+0x20>)
 8007710:	f7fd fd4e 	bl	80051b0 <json_encode_array_name>
}
 8007714:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    json_rep_set_array_k(object, (char *) key);
 8007718:	4801      	ldr	r0, [pc, #4]	; (8007720 <json_helper_set_array+0x20>)
 800771a:	f7fd bd4b 	b.w	80051b4 <json_encode_array_start>
 800771e:	bf00      	nop
 8007720:	20003330 	.word	0x20003330

08007724 <json_helper_close_array>:

//  End the child array and resume writing the parent object.
//  {a:b, key:[... --> {a:b, key:[...]
void json_helper_close_array(void *object, const char *key) {
 8007724:	b508      	push	{r3, lr}
    assert(key);
 8007726:	460b      	mov	r3, r1
 8007728:	b919      	cbnz	r1, 8007732 <json_helper_close_array+0xe>
 800772a:	460a      	mov	r2, r1
 800772c:	4608      	mov	r0, r1
 800772e:	f7fe f8f1 	bl	8005914 <__assert_func>
    json_rep_close_array(object, key);
 8007732:	4802      	ldr	r0, [pc, #8]	; (800773c <json_helper_close_array+0x18>)
}
 8007734:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    json_rep_close_array(object, key);
 8007738:	f7fd bd4c 	b.w	80051d4 <json_encode_array_finish>
 800773c:	20003330 	.word	0x20003330

08007740 <json_helper_object_array_start_item>:

//  Assume we have called set_array.  Start an array item, assumed to be an object.
//  [... --> [...,
void json_helper_object_array_start_item(const char *key) {
 8007740:	b508      	push	{r3, lr}
    assert(key);
 8007742:	4603      	mov	r3, r0
 8007744:	b918      	cbnz	r0, 800774e <json_helper_object_array_start_item+0xe>
 8007746:	4602      	mov	r2, r0
 8007748:	4601      	mov	r1, r0
 800774a:	f7fe f8e3 	bl	8005914 <__assert_func>
    //  console_printf("json_helper_object_array_start_item: %s\n", key); ////
    json_rep_object_array_start_item(key);
 800774e:	4802      	ldr	r0, [pc, #8]	; (8007758 <json_helper_object_array_start_item+0x18>)
}
 8007750:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    json_rep_object_array_start_item(key);
 8007754:	f7fd bbcc 	b.w	8004ef0 <json_encode_object_start>
 8007758:	20003330 	.word	0x20003330

0800775c <json_helper_object_array_end_item>:

//  End an array item, assumed to be an object.
//  [... --> [...,
void json_helper_object_array_end_item(const char *key) {
 800775c:	b508      	push	{r3, lr}
    assert(key);
 800775e:	4603      	mov	r3, r0
 8007760:	b918      	cbnz	r0, 800776a <json_helper_object_array_end_item+0xe>
 8007762:	4602      	mov	r2, r0
 8007764:	4601      	mov	r1, r0
 8007766:	f7fe f8d5 	bl	8005914 <__assert_func>
    json_rep_object_array_end_item(key);
 800776a:	4802      	ldr	r0, [pc, #8]	; (8007774 <json_helper_object_array_end_item+0x18>)
}
 800776c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    json_rep_object_array_end_item(key);
 8007770:	f7fd bd0e 	b.w	8005190 <json_encode_object_finish>
 8007774:	20003330 	.word	0x20003330

08007778 <json_helper_set_int>:

//  Encode a value into JSON: int, unsigned int, float, text, ...
void json_helper_set_int(void *object, const char *key, uint64_t value) {
 8007778:	b538      	push	{r3, r4, r5, lr}
 800777a:	461d      	mov	r5, r3
 800777c:	4614      	mov	r4, r2
    assert(key);
 800777e:	460b      	mov	r3, r1
 8007780:	b919      	cbnz	r1, 800778a <json_helper_set_int+0x12>
 8007782:	460a      	mov	r2, r1
 8007784:	4608      	mov	r0, r1
 8007786:	f7fe f8c5 	bl	8005914 <__assert_func>
    //  console_printf("json_helper_set_int: %s\n", key); ////
    json_rep_set_int_k(object, (char *) key, value);
 800778a:	2202      	movs	r2, #2
 800778c:	4b04      	ldr	r3, [pc, #16]	; (80077a0 <json_helper_set_int+0x28>)
 800778e:	4805      	ldr	r0, [pc, #20]	; (80077a4 <json_helper_set_int+0x2c>)
 8007790:	705a      	strb	r2, [r3, #1]
 8007792:	e9c3 4502 	strd	r4, r5, [r3, #8]
 8007796:	461a      	mov	r2, r3
}
 8007798:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    json_rep_set_int_k(object, (char *) key, value);
 800779c:	f7fd bbf0 	b.w	8004f80 <json_encode_object_entry>
 80077a0:	20003380 	.word	0x20003380
 80077a4:	20003330 	.word	0x20003330

080077a8 <json_helper_set_text_string>:
void json_helper_set_float(void *object, const char *key, float value) {
    assert(key);
    json_rep_set_float_k(object, (char *) key, value);
}

void json_helper_set_text_string(void *object, const char *key, const char *value) {
 80077a8:	b570      	push	{r4, r5, r6, lr}
 80077aa:	4615      	mov	r5, r2
    assert(key);
 80077ac:	460e      	mov	r6, r1
 80077ae:	b929      	cbnz	r1, 80077bc <json_helper_set_text_string+0x14>
 80077b0:	2300      	movs	r3, #0
 80077b2:	461a      	mov	r2, r3
 80077b4:	4619      	mov	r1, r3
 80077b6:	4618      	mov	r0, r3
 80077b8:	f7fe f8ac 	bl	8005914 <__assert_func>
    assert(value);
 80077bc:	2a00      	cmp	r2, #0
 80077be:	d0f7      	beq.n	80077b0 <json_helper_set_text_string+0x8>
    //  console_printf("json_helper_set_text_string: %s\n", key); ////
    json_rep_set_text_string_k(object, (char *) key, value);
 80077c0:	2303      	movs	r3, #3
 80077c2:	4c07      	ldr	r4, [pc, #28]	; (80077e0 <json_helper_set_text_string+0x38>)
 80077c4:	4610      	mov	r0, r2
 80077c6:	7063      	strb	r3, [r4, #1]
 80077c8:	f7ff fc68 	bl	800709c <strlen>
 80077cc:	60a5      	str	r5, [r4, #8]
 80077ce:	8060      	strh	r0, [r4, #2]
 80077d0:	4622      	mov	r2, r4
 80077d2:	4631      	mov	r1, r6
}
 80077d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    json_rep_set_text_string_k(object, (char *) key, value);
 80077d8:	4802      	ldr	r0, [pc, #8]	; (80077e4 <json_helper_set_text_string+0x3c>)
 80077da:	f7fd bbd1 	b.w	8004f80 <json_encode_object_entry>
 80077de:	bf00      	nop
 80077e0:	20003380 	.word	0x20003380
 80077e4:	20003330 	.word	0x20003330

080077e8 <rust_sysinit>:
#include <mynewt_rust/mynewt_rust.h>
#include <mynewt_rust/sensor_helper.h>
#include <mynewt_rust/json_helper.h>

///  Initialise the Mynewt system.  Start the Mynewt drivers and libraries.  Equivalent to `sysinit()` macro in C.
void rust_sysinit() {
 80077e8:	b508      	push	{r3, lr}
    sysinit();
 80077ea:	f7fd fb69 	bl	8004ec0 <sysinit_start>
 80077ee:	f000 f961 	bl	8007ab4 <sysinit_app>
}
 80077f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    sysinit();
 80077f6:	f7fd bb69 	b.w	8004ecc <sysinit_end>

080077fa <get_temp_raw_data>:
#include <custom_sensor/custom_sensor.h>
#include <mynewt_rust/sensor_helper.h>

///  Interpret `sensor_data` as a `sensor_temp_raw_data` struct that contains raw temp.
///  Copy the sensor data into `dest`.  Return 0 if successful.
int get_temp_raw_data(void *sensor_data, struct sensor_temp_raw_data *dest) {
 80077fa:	b508      	push	{r3, lr}
    assert(sensor_data); assert(dest);
 80077fc:	b928      	cbnz	r0, 800780a <get_temp_raw_data+0x10>
 80077fe:	2300      	movs	r3, #0
 8007800:	461a      	mov	r2, r3
 8007802:	4619      	mov	r1, r3
 8007804:	4618      	mov	r0, r3
 8007806:	f7fe f885 	bl	8005914 <__assert_func>
 800780a:	2900      	cmp	r1, #0
 800780c:	d0f7      	beq.n	80077fe <get_temp_raw_data+0x4>
    struct sensor_temp_raw_data *src = (struct sensor_temp_raw_data *) sensor_data;
    memcpy(dest, src, sizeof(struct sensor_temp_raw_data));
 800780e:	6803      	ldr	r3, [r0, #0]
 8007810:	600b      	str	r3, [r1, #0]
 8007812:	7903      	ldrb	r3, [r0, #4]
    return 0;
}
 8007814:	2000      	movs	r0, #0
    memcpy(dest, src, sizeof(struct sensor_temp_raw_data));
 8007816:	710b      	strb	r3, [r1, #4]
}
 8007818:	bd08      	pop	{r3, pc}

0800781a <temp_stm32_sensor_get_config>:

static int temp_stm32_sensor_get_config(struct sensor *sensor, sensor_type_t type,
    struct sensor_cfg *cfg) {
    //  Return the type of the sensor value returned by the sensor.
    int rc;
    if (!(type & TEMP_SENSOR_TYPE)) {
 800781a:	2100      	movs	r1, #0
 800781c:	f002 6080 	and.w	r0, r2, #67108864	; 0x4000000
 8007820:	ea50 0301 	orrs.w	r3, r0, r1
        rc = SYS_EINVAL;
        goto err;
    }
    cfg->sc_valtype = TEMP_SENSOR_VALUE_TYPE;  //  We return float (computed values) or int (raw values).
 8007824:	bf1f      	itttt	ne
 8007826:	2201      	movne	r2, #1
 8007828:	9b00      	ldrne	r3, [sp, #0]
    return (0);
 800782a:	2000      	movne	r0, #0
    cfg->sc_valtype = TEMP_SENSOR_VALUE_TYPE;  //  We return float (computed values) or int (raw values).
 800782c:	701a      	strbne	r2, [r3, #0]
err:
    return (rc);
 800782e:	bf08      	it	eq
 8007830:	f06f 0001 	mvneq.w	r0, #1
}
 8007834:	4770      	bx	lr

08007836 <temp_stm32_close>:
static int temp_stm32_close(struct os_dev *dev0) {
 8007836:	b510      	push	{r4, lr}
 8007838:	4604      	mov	r4, r0
    if (dev->adc) {
 800783a:	f8d0 00cc 	ldr.w	r0, [r0, #204]	; 0xcc
 800783e:	b120      	cbz	r0, 800784a <temp_stm32_close+0x14>
        os_dev_close((struct os_dev *) dev->adc);
 8007840:	f7fe fb13 	bl	8005e6a <os_dev_close>
        dev->adc = NULL;
 8007844:	2300      	movs	r3, #0
 8007846:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
}
 800784a:	2000      	movs	r0, #0
 800784c:	bd10      	pop	{r4, pc}
	...

08007850 <temp_stm32_open>:
static int temp_stm32_open(struct os_dev *dev0, uint32_t timeout, void *arg) {
 8007850:	b510      	push	{r4, lr}
    dev = (struct temp_stm32 *) dev0;  assert(dev);  
 8007852:	4604      	mov	r4, r0
 8007854:	b928      	cbnz	r0, 8007862 <temp_stm32_open+0x12>
    assert(rc == 0);
 8007856:	2300      	movs	r3, #0
 8007858:	461a      	mov	r2, r3
 800785a:	4619      	mov	r1, r3
 800785c:	4618      	mov	r0, r3
 800785e:	f7fe f859 	bl	8005914 <__assert_func>
    cfg = &dev->cfg; assert(cfg); assert(cfg->adc_channel);  assert(cfg->adc_channel_cfg);  assert(cfg->adc_dev_name);
 8007862:	f890 30bc 	ldrb.w	r3, [r0, #188]	; 0xbc
 8007866:	2b00      	cmp	r3, #0
 8007868:	d0f5      	beq.n	8007856 <temp_stm32_open+0x6>
 800786a:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
 800786e:	2b00      	cmp	r3, #0
 8007870:	d0f1      	beq.n	8007856 <temp_stm32_open+0x6>
 8007872:	f8d0 00b8 	ldr.w	r0, [r0, #184]	; 0xb8
 8007876:	2800      	cmp	r0, #0
 8007878:	d0ed      	beq.n	8007856 <temp_stm32_open+0x6>
    dev->adc = (struct adc_dev *) os_dev_open(cfg->adc_dev_name, timeout, cfg->adc_open_arg);
 800787a:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
 800787e:	f7fe fad3 	bl	8005e28 <os_dev_open>
 8007882:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
    assert(dev->adc);
 8007886:	2800      	cmp	r0, #0
 8007888:	d0e5      	beq.n	8007856 <temp_stm32_open+0x6>
    console_printf("ADC open ch 16\n");  ////
 800788a:	480a      	ldr	r0, [pc, #40]	; (80078b4 <temp_stm32_open+0x64>)
 800788c:	f7fc fa8e 	bl	8003dac <console_printf>
    rc = adc_chan_config(dev->adc, cfg->adc_channel, cfg->adc_channel_cfg);
 8007890:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 8007894:	f894 10bc 	ldrb.w	r1, [r4, #188]	; 0xbc
 8007898:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
 800789c:	f000 fcbe 	bl	800821c <adc_chan_config>
    if (rc) { 
 80078a0:	b130      	cbz	r0, 80078b0 <temp_stm32_open+0x60>
        if (dev->adc) { os_dev_close((struct os_dev *) dev->adc); }
 80078a2:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
 80078a6:	2800      	cmp	r0, #0
 80078a8:	d0d5      	beq.n	8007856 <temp_stm32_open+0x6>
 80078aa:	f7fe fade 	bl	8005e6a <os_dev_close>
 80078ae:	e7d2      	b.n	8007856 <temp_stm32_open+0x6>
}
 80078b0:	bd10      	pop	{r4, pc}
 80078b2:	bf00      	nop
 80078b4:	0800df37 	.word	0x0800df37

080078b8 <temp_stm32_default_cfg>:
int temp_stm32_default_cfg(struct temp_stm32_cfg *cfg) {
 80078b8:	4603      	mov	r3, r0
    cfg->adc_dev_name    = STM32F1_ADC1_DEVICE;     //  For STM32F1: adc1
 80078ba:	4a08      	ldr	r2, [pc, #32]	; (80078dc <temp_stm32_default_cfg+0x24>)
    memset(cfg, 0, sizeof(struct temp_stm32_cfg));  //  Zero the entire object.
 80078bc:	2000      	movs	r0, #0
    cfg->adc_dev_name    = STM32F1_ADC1_DEVICE;     //  For STM32F1: adc1
 80078be:	609a      	str	r2, [r3, #8]
    cfg->adc_channel     = ADC_CHANNEL_TEMPSENSOR;  //  For STM32F1: 16
 80078c0:	2210      	movs	r2, #16
int temp_stm32_default_cfg(struct temp_stm32_cfg *cfg) {
 80078c2:	b530      	push	{r4, r5, lr}
    cfg->bc_s_mask       = SENSOR_TYPE_ALL;         //  Return all sensor values, i.e. temperature.
 80078c4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80078c8:	2500      	movs	r5, #0
    memset(cfg, 0, sizeof(struct temp_stm32_cfg));  //  Zero the entire object.
 80078ca:	60d8      	str	r0, [r3, #12]
    cfg->adc_channel     = ADC_CHANNEL_TEMPSENSOR;  //  For STM32F1: 16
 80078cc:	731a      	strb	r2, [r3, #12]
    cfg->adc_channel_cfg = &temp_channel_config;    //  Configure the temperature channel.
 80078ce:	4a04      	ldr	r2, [pc, #16]	; (80078e0 <temp_stm32_default_cfg+0x28>)
    cfg->bc_s_mask       = SENSOR_TYPE_ALL;         //  Return all sensor values, i.e. temperature.
 80078d0:	e9c3 4500 	strd	r4, r5, [r3]
    cfg->adc_open_arg    = NULL;
 80078d4:	6118      	str	r0, [r3, #16]
    cfg->adc_channel_cfg = &temp_channel_config;    //  Configure the temperature channel.
 80078d6:	615a      	str	r2, [r3, #20]
}
 80078d8:	bd30      	pop	{r4, r5, pc}
 80078da:	bf00      	nop
 80078dc:	0800df18 	.word	0x0800df18
 80078e0:	20000190 	.word	0x20000190

080078e4 <temp_stm32_init>:
int temp_stm32_init(struct os_dev *dev0, void *arg) {
 80078e4:	b570      	push	{r4, r5, r6, lr}
 80078e6:	4604      	mov	r4, r0
    if (!arg || !dev0) { rc = SYS_ENODEV; goto err; }
 80078e8:	460d      	mov	r5, r1
 80078ea:	b341      	cbz	r1, 800793e <temp_stm32_init+0x5a>
 80078ec:	b338      	cbz	r0, 800793e <temp_stm32_init+0x5a>
    dev->adc = NULL;
 80078ee:	2300      	movs	r3, #0
    rc = temp_stm32_default_cfg(&dev->cfg);
 80078f0:	30b0      	adds	r0, #176	; 0xb0
    dev->adc = NULL;
 80078f2:	61c3      	str	r3, [r0, #28]
    rc = temp_stm32_default_cfg(&dev->cfg);
 80078f4:	f7ff ffe0 	bl	80078b8 <temp_stm32_default_cfg>
    if (rc) { goto err; }
 80078f8:	bb00      	cbnz	r0, 800793c <temp_stm32_init+0x58>
    sensor = &dev->sensor;
 80078fa:	f104 0628 	add.w	r6, r4, #40	; 0x28
    rc = sensor_init(sensor, dev0);
 80078fe:	4621      	mov	r1, r4
 8007900:	4630      	mov	r0, r6
 8007902:	f7fd fe52 	bl	80055aa <sensor_init>
    if (rc != 0) { goto err; }
 8007906:	b9c8      	cbnz	r0, 800793c <temp_stm32_init+0x58>
 */
static inline int
sensor_set_driver(struct sensor *sensor, sensor_type_t type,
        struct sensor_driver *driver)
{
    sensor->s_funcs = driver;
 8007908:	4b0e      	ldr	r3, [pc, #56]	; (8007944 <temp_stm32_init+0x60>)
    sensor->s_types = type;
 800790a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    sensor->s_funcs = driver;
 800790e:	6523      	str	r3, [r4, #80]	; 0x50
    sensor->s_types = type;
 8007910:	2300      	movs	r3, #0
 * @param s_itf The interface type to set
 */
static inline int
sensor_set_interface(struct sensor *sensor, struct sensor_itf *s_itf)
{
    memcpy(&sensor->s_itf, s_itf, sizeof(*s_itf));
 8007912:	4629      	mov	r1, r5
    sensor->s_types = type;
 8007914:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
    memcpy(&sensor->s_itf, s_itf, sizeof(*s_itf));
 8007918:	f104 0370 	add.w	r3, r4, #112	; 0x70
 800791c:	f105 0214 	add.w	r2, r5, #20
 8007920:	f851 0b04 	ldr.w	r0, [r1], #4
 8007924:	4291      	cmp	r1, r2
 8007926:	f843 0b04 	str.w	r0, [r3], #4
 800792a:	d1f9      	bne.n	8007920 <temp_stm32_init+0x3c>
    rc = sensor_mgr_register(sensor);
 800792c:	4630      	mov	r0, r6
 800792e:	f7fd fe27 	bl	8005580 <sensor_mgr_register>
    if (rc != 0) { goto err; }
 8007932:	b918      	cbnz	r0, 800793c <temp_stm32_init+0x58>
    OS_DEV_SETHANDLERS(dev0, temp_stm32_open, temp_stm32_close);
 8007934:	4b04      	ldr	r3, [pc, #16]	; (8007948 <temp_stm32_init+0x64>)
 8007936:	6023      	str	r3, [r4, #0]
 8007938:	4b04      	ldr	r3, [pc, #16]	; (800794c <temp_stm32_init+0x68>)
 800793a:	60e3      	str	r3, [r4, #12]
}
 800793c:	bd70      	pop	{r4, r5, r6, pc}
    if (!arg || !dev0) { rc = SYS_ENODEV; goto err; }
 800793e:	f06f 0008 	mvn.w	r0, #8
 8007942:	e7fb      	b.n	800793c <temp_stm32_init+0x58>
 8007944:	0800def0 	.word	0x0800def0
 8007948:	08007851 	.word	0x08007851
 800794c:	08007837 	.word	0x08007837

08007950 <temp_stm32_get_raw_temperature>:
int temp_stm32_get_raw_temperature(struct temp_stm32 *dev, int num_readings, int *temp_sum, uint8_t *temp_diff) {
 8007950:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007954:	4680      	mov	r8, r0
    console_printf("STM read int temp sensor\n");  ////
 8007956:	4820      	ldr	r0, [pc, #128]	; (80079d8 <temp_stm32_get_raw_temperature+0x88>)
int temp_stm32_get_raw_temperature(struct temp_stm32 *dev, int num_readings, int *temp_sum, uint8_t *temp_diff) {
 8007958:	4699      	mov	r9, r3
 800795a:	468a      	mov	sl, r1
 800795c:	4617      	mov	r7, r2
    console_printf("STM read int temp sensor\n");  ////
 800795e:	f7fc fa25 	bl	8003dac <console_printf>
    assert(dev->adc);  assert(temp_sum);
 8007962:	f8d8 30cc 	ldr.w	r3, [r8, #204]	; 0xcc
 8007966:	b92b      	cbnz	r3, 8007974 <temp_stm32_get_raw_temperature+0x24>
 8007968:	2300      	movs	r3, #0
 800796a:	461a      	mov	r2, r3
 800796c:	4619      	mov	r1, r3
 800796e:	4618      	mov	r0, r3
 8007970:	f7fd ffd0 	bl	8005914 <__assert_func>
 8007974:	2f00      	cmp	r7, #0
 8007976:	d0f7      	beq.n	8007968 <temp_stm32_get_raw_temperature+0x18>
    *temp_sum = 0;
 8007978:	2400      	movs	r4, #0
        rawtemp = -1;
 800797a:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
    int lasttemp = 0;      //  Previous raw temperature
 800797e:	4625      	mov	r5, r4
    for (i = 0; i < num_readings; i++) {  //  For each sample to be read...
 8007980:	4626      	mov	r6, r4
    *temp_sum = 0;
 8007982:	603c      	str	r4, [r7, #0]
    for (i = 0; i < num_readings; i++) {  //  For each sample to be read...
 8007984:	4556      	cmp	r6, sl
 8007986:	db03      	blt.n	8007990 <temp_stm32_get_raw_temperature+0x40>
}
 8007988:	2000      	movs	r0, #0
 800798a:	b003      	add	sp, #12
 800798c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rc = adc_read_channel(dev->adc, ADC_CHANNEL_TEMPSENSOR, &rawtemp);
 8007990:	f8d8 00cc 	ldr.w	r0, [r8, #204]	; 0xcc
        rawtemp = -1;
 8007994:	f8cd b004 	str.w	fp, [sp, #4]
 * @return 0 on success, non-zero error code on failure
 */
static inline int
adc_read_channel(struct adc_dev *dev, uint8_t ch, int *result)
{
    return (dev->ad_funcs->af_read_channel(dev, ch, result));
 8007998:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800799a:	aa01      	add	r2, sp, #4
 800799c:	689b      	ldr	r3, [r3, #8]
 800799e:	2110      	movs	r1, #16
 80079a0:	4798      	blx	r3
        assert(rc == 0);
 80079a2:	2800      	cmp	r0, #0
 80079a4:	d1e0      	bne.n	8007968 <temp_stm32_get_raw_temperature+0x18>
        assert(rawtemp > 0);  //  If equals 0, it means we haven't sampled any values.  Check the above note.
 80079a6:	9b01      	ldr	r3, [sp, #4]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	dddd      	ble.n	8007968 <temp_stm32_get_raw_temperature+0x18>
        uint8_t diff = (rawtemp - lasttemp) & 0xf;  //  Delta between this and last reading, keeping lower 4 bits.
 80079ac:	1b5d      	subs	r5, r3, r5
        if (i % 2 == 1) {
 80079ae:	07f2      	lsls	r2, r6, #31
        uint8_t diff = (rawtemp - lasttemp) & 0xf;  //  Delta between this and last reading, keeping lower 4 bits.
 80079b0:	f005 050f 	and.w	r5, r5, #15
        if (i % 2 == 1) {
 80079b4:	d508      	bpl.n	80079c8 <temp_stm32_get_raw_temperature+0x78>
            if (temp_diff) { temp_diff[i2] = b; }  //  Save the combined delta into temp_diff as entropy.
 80079b6:	f1b9 0f00 	cmp.w	r9, #0
 80079ba:	d005      	beq.n	80079c8 <temp_stm32_get_raw_temperature+0x78>
 80079bc:	f3c6 0247 	ubfx	r2, r6, #1, #8
            uint8_t b = diff + (lastdiff << 4);    //  Combine current delta (4 bits) and previous delta (4 bits) to make 8 bits.
 80079c0:	eb05 1404 	add.w	r4, r5, r4, lsl #4
            if (temp_diff) { temp_diff[i2] = b; }  //  Save the combined delta into temp_diff as entropy.
 80079c4:	f809 4002 	strb.w	r4, [r9, r2]
        *temp_sum += rawtemp;  //  Accumulate the raw temperature.
 80079c8:	683a      	ldr	r2, [r7, #0]
        lastdiff = diff;
 80079ca:	462c      	mov	r4, r5
        *temp_sum += rawtemp;  //  Accumulate the raw temperature.
 80079cc:	441a      	add	r2, r3
 80079ce:	603a      	str	r2, [r7, #0]
    for (i = 0; i < num_readings; i++) {  //  For each sample to be read...
 80079d0:	3601      	adds	r6, #1
        lastdiff = diff;
 80079d2:	461d      	mov	r5, r3
 80079d4:	e7d6      	b.n	8007984 <temp_stm32_get_raw_temperature+0x34>
 80079d6:	bf00      	nop
 80079d8:	0800df1d 	.word	0x0800df1d

080079dc <temp_stm32_sensor_read>:
    if (!(type & TEMP_SENSOR_TYPE)) { rc = SYS_EINVAL; goto err; }
 80079dc:	2100      	movs	r1, #0
    sensor_data_func_t data_func, void *data_arg, uint32_t timeout) {
 80079de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079e0:	4607      	mov	r7, r0
    if (!(type & TEMP_SENSOR_TYPE)) { rc = SYS_EINVAL; goto err; }
 80079e2:	f002 6080 	and.w	r0, r2, #67108864	; 0x4000000
    sensor_data_func_t data_func, void *data_arg, uint32_t timeout) {
 80079e6:	b087      	sub	sp, #28
    if (!(type & TEMP_SENSOR_TYPE)) { rc = SYS_EINVAL; goto err; }
 80079e8:	ea50 0301 	orrs.w	r3, r0, r1
    sensor_data_func_t data_func, void *data_arg, uint32_t timeout) {
 80079ec:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    if (!(type & TEMP_SENSOR_TYPE)) { rc = SYS_EINVAL; goto err; }
 80079ee:	d032      	beq.n	8007a56 <temp_stm32_sensor_read+0x7a>
    dev = (struct temp_stm32 *) SENSOR_GET_DEVICE(sensor); assert(dev);
 80079f0:	683d      	ldr	r5, [r7, #0]
 80079f2:	b92d      	cbnz	r5, 8007a00 <temp_stm32_sensor_read+0x24>
 80079f4:	462b      	mov	r3, r5
 80079f6:	462a      	mov	r2, r5
 80079f8:	4629      	mov	r1, r5
 80079fa:	4628      	mov	r0, r5
 80079fc:	f7fd ff8a 	bl	8005914 <__assert_func>
        rc = temp_stm32_open((struct os_dev *) dev, 0, NULL);
 8007a00:	2200      	movs	r2, #0
    rawtemp = -1;
 8007a02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
        rc = temp_stm32_open((struct os_dev *) dev, 0, NULL);
 8007a06:	4611      	mov	r1, r2
 8007a08:	4628      	mov	r0, r5
    rawtemp = -1;
 8007a0a:	9303      	str	r3, [sp, #12]
        rc = temp_stm32_open((struct os_dev *) dev, 0, NULL);
 8007a0c:	f7ff ff20 	bl	8007850 <temp_stm32_open>
        if (rc) { goto err; }
 8007a10:	4604      	mov	r4, r0
 8007a12:	b9e8      	cbnz	r0, 8007a50 <temp_stm32_sensor_read+0x74>
        rc = temp_stm32_get_raw_temperature(dev, 1, &rawtemp, NULL);
 8007a14:	4603      	mov	r3, r0
 8007a16:	aa03      	add	r2, sp, #12
 8007a18:	2101      	movs	r1, #1
 8007a1a:	4628      	mov	r0, r5
 8007a1c:	f7ff ff98 	bl	8007950 <temp_stm32_get_raw_temperature>
 8007a20:	4604      	mov	r4, r0
        temp_stm32_close((struct os_dev *) dev);
 8007a22:	4628      	mov	r0, r5
 8007a24:	f7ff ff07 	bl	8007836 <temp_stm32_close>
    if (rc) { goto err; }  //  console_printf("rawtemp: %d\n", rawtemp);  ////
 8007a28:	b994      	cbnz	r4, 8007a50 <temp_stm32_sensor_read+0x74>
    temp_data->strd_temp_raw = rawtemp;  //  rawtemp must be between 0 and 4,095 (based on 12-bit ADC)
 8007a2a:	9b03      	ldr	r3, [sp, #12]
 8007a2c:	9304      	str	r3, [sp, #16]
    temp_data->strd_temp_raw_is_valid = 1;
 8007a2e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8007a32:	f043 0301 	orr.w	r3, r3, #1
 8007a36:	f88d 3014 	strb.w	r3, [sp, #20]
    if (data_func) {  //  Call the Listener Function to process the sensor data.
 8007a3a:	b14e      	cbz	r6, 8007a50 <temp_stm32_sensor_read+0x74>
        rc = data_func(sensor, data_arg, temp_data, TEMP_SENSOR_TYPE);
 8007a3c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8007a40:	2300      	movs	r3, #0
 8007a42:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007a44:	e9cd 2300 	strd	r2, r3, [sp]
 8007a48:	4638      	mov	r0, r7
 8007a4a:	aa04      	add	r2, sp, #16
 8007a4c:	47b0      	blx	r6
 8007a4e:	4604      	mov	r4, r0
}
 8007a50:	4620      	mov	r0, r4
 8007a52:	b007      	add	sp, #28
 8007a54:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!(type & TEMP_SENSOR_TYPE)) { rc = SYS_EINVAL; goto err; }
 8007a56:	f06f 0401 	mvn.w	r4, #1
 8007a5a:	e7f9      	b.n	8007a50 <temp_stm32_sensor_read+0x74>

08007a5c <temp_stm32_config>:
 * @param Sensor device temp_stm32 structure
 * @param Sensor device temp_stm32_cfg config
 *
 * @return 0 on success, and non-zero error code on failure
 */
int temp_stm32_config(struct temp_stm32 *dev, struct temp_stm32_cfg *cfg) {
 8007a5c:	b508      	push	{r3, lr}
    struct sensor_itf *itf;
    int rc;
    itf = SENSOR_GET_ITF(&(dev->sensor)); assert(itf);
 8007a5e:	f110 0370 	adds.w	r3, r0, #112	; 0x70
 8007a62:	d104      	bne.n	8007a6e <temp_stm32_config+0x12>
 8007a64:	461a      	mov	r2, r3
 8007a66:	4619      	mov	r1, r3
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f7fd ff53 	bl	8005914 <__assert_func>
    rc = sensor_set_type_mask(&(dev->sensor),  cfg->bc_s_mask);
 8007a6e:	e9d1 2300 	ldrd	r2, r3, [r1]
    sensor->s_mask = mask;
 8007a72:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
    if (rc) { goto err; }

    dev->cfg.bc_s_mask = cfg->bc_s_mask;
 8007a76:	e9d1 2300 	ldrd	r2, r3, [r1]
 8007a7a:	e9c0 232c 	strd	r2, r3, [r0, #176]	; 0xb0
    return 0;
err:
    return (rc);
}
 8007a7e:	2000      	movs	r0, #0
 8007a80:	bd08      	pop	{r3, pc}

08007a82 <mem_init_mbuf_pool>:

int
mem_init_mbuf_pool(void *mem, struct os_mempool *mempool,
                   struct os_mbuf_pool *mbuf_pool, int num_blocks,
                   int block_size, char *name)
{
 8007a82:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007a84:	460c      	mov	r4, r1
    int rc;

    rc = os_mempool_init(mempool, num_blocks, block_size, mem, name);
 8007a86:	b29e      	uxth	r6, r3
{
 8007a88:	9d08      	ldr	r5, [sp, #32]
    rc = os_mempool_init(mempool, num_blocks, block_size, mem, name);
 8007a8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
{
 8007a8c:	4617      	mov	r7, r2
    rc = os_mempool_init(mempool, num_blocks, block_size, mem, name);
 8007a8e:	9300      	str	r3, [sp, #0]
 8007a90:	462a      	mov	r2, r5
 8007a92:	4603      	mov	r3, r0
 8007a94:	4631      	mov	r1, r6
 8007a96:	4620      	mov	r0, r4
 8007a98:	f7fe fcc0 	bl	800641c <os_mempool_init>
    if (rc != 0) {
 8007a9c:	b940      	cbnz	r0, 8007ab0 <mem_init_mbuf_pool+0x2e>
        return rc;
    }

    rc = os_mbuf_pool_init(mbuf_pool, mempool, block_size, num_blocks);
 8007a9e:	4633      	mov	r3, r6
 8007aa0:	4621      	mov	r1, r4
 8007aa2:	4638      	mov	r0, r7
 8007aa4:	b2aa      	uxth	r2, r5
    if (rc != 0) {
        return rc;
    }

    return 0;
}
 8007aa6:	b003      	add	sp, #12
 8007aa8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    rc = os_mbuf_pool_init(mbuf_pool, mempool, block_size, num_blocks);
 8007aac:	f7fe bb02 	b.w	80060b4 <os_mbuf_pool_init>
}
 8007ab0:	b003      	add	sp, #12
 8007ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007ab4 <sysinit_app>:
void bc95g_create(void);
void init_sensor_coap(void);

void
sysinit_app(void)
{
 8007ab4:	b508      	push	{r3, lr}
    /*** Stage 0 */
    /* 0.0: os_pkg_init (kernel/os) */
    os_pkg_init();
 8007ab6:	f7fe f875 	bl	8005ba4 <os_pkg_init>

    /*** Stage 2 */
    /* 2.0: flash_map_init (sys/flash_map) */
    flash_map_init();
 8007aba:	f003 f815 	bl	800aae8 <flash_map_init>

    /*** Stage 20 */
    /* 20.0: console_pkg_init (libs/semihosting_console) */
    console_pkg_init();
 8007abe:	f7fc f951 	bl	8003d64 <console_pkg_init>

    /*** Stage 100 */
    /* 100.0: mfg_init (sys/mfg) */
    mfg_init();
 8007ac2:	f003 f93f 	bl	800ad44 <mfg_init>
    /* 100.1: modlog_init (sys/log/modlog) */
    modlog_init();
 8007ac6:	f003 f865 	bl	800ab94 <modlog_init>

    /*** Stage 300 */
    /* 300.0: oc_init (net/oic) */
    oc_init();
 8007aca:	f7fd f9b9 	bl	8004e40 <oc_init>

    /*** Stage 301 */
    /* 301.0: oc_register_gatt (net/oic) */
    oc_register_gatt();
 8007ace:	f002 ffd5 	bl	800aa7c <oc_register_gatt>
    /* 301.1: oc_register_ip4 (net/oic) */
    oc_register_ip4();
 8007ad2:	f002 ffd4 	bl	800aa7e <oc_register_ip4>
    /* 301.2: oc_register_ip6 (net/oic) */
    oc_register_ip6();
 8007ad6:	f002 ffd3 	bl	800aa80 <oc_register_ip6>
    /* 301.3: oc_register_lora (net/oic) */
    oc_register_lora();
 8007ada:	f002 ffd2 	bl	800aa82 <oc_register_lora>
    /* 301.4: oc_register_serial (net/oic) */
    oc_register_serial();
 8007ade:	f002 ffd1 	bl	800aa84 <oc_register_serial>

    /*** Stage 500 */
    /* 500.0: sensor_dev_create (hw/sensor/creator) */
    sensor_dev_create();
 8007ae2:	f001 ff4a 	bl	800997a <sensor_dev_create>

    /*** Stage 501 */
    /* 501.0: sensor_pkg_init (hw/sensor) */
    sensor_pkg_init();
 8007ae6:	f7fd fc87 	bl	80053f8 <sensor_pkg_init>

    /*** Stage 610 */
    /* 610.0: stm32f1_adc_create (libs/adc_stm32f1) */
    stm32f1_adc_create();
 8007aea:	f001 ff47 	bl	800997c <stm32f1_adc_create>

    /*** Stage 620 */
    /* 620.0: temp_stm32_create (libs/temp_stm32) */
    temp_stm32_create();
 8007aee:	f002 ff89 	bl	800aa04 <temp_stm32_create>

    /*** Stage 630 */
    /* 630.0: hmac_prng_init (libs/hmac_prng) */
    hmac_prng_init();
 8007af2:	f7ff fd95 	bl	8007620 <hmac_prng_init>

    /*** Stage 640 */
    /* 640.0: sensor_network_init (libs/sensor_network) */
    sensor_network_init();
 8007af6:	f7fc fcc1 	bl	800447c <sensor_network_init>

    /*** Stage 650 */
    /* 650.0: bc95g_create (libs/bc95g) */
    bc95g_create();
 8007afa:	f002 f903 	bl	8009d04 <bc95g_create>

    /*** Stage 660 */
    /* 660.0: init_sensor_coap (libs/sensor_coap) */
    init_sensor_coap();
}
 8007afe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    init_sensor_coap();
 8007b02:	f7fc b9a9 	b.w	8003e58 <init_sensor_coap>

08007b06 <update>:

/*
 * Assumes: prng != NULL, e != NULL, len >= 0.
 */
static void update(TCHmacPrng_t prng, const uint8_t *e, unsigned int len)
{
 8007b06:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007b0a:	4604      	mov	r4, r0
	const uint8_t separator0 = 0x00;
 8007b0c:	2300      	movs	r3, #0
	const uint8_t separator1 = 0x01;
 8007b0e:	2701      	movs	r7, #1
{
 8007b10:	4688      	mov	r8, r1
 8007b12:	4691      	mov	r9, r2

	/* use current state, e and separator 0 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
 8007b14:	f504 7588 	add.w	r5, r4, #272	; 0x110
	const uint8_t separator0 = 0x00;
 8007b18:	f88d 3006 	strb.w	r3, [sp, #6]
	const uint8_t separator1 = 0x01;
 8007b1c:	f88d 7007 	strb.w	r7, [sp, #7]
	(void)tc_hmac_init(&prng->h);
 8007b20:	f000 f93d 	bl	8007d9e <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
 8007b24:	4629      	mov	r1, r5
 8007b26:	2220      	movs	r2, #32
 8007b28:	4620      	mov	r0, r4
 8007b2a:	f000 f945 	bl	8007db8 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator0, sizeof(separator0));
 8007b2e:	463a      	mov	r2, r7
 8007b30:	f10d 0106 	add.w	r1, sp, #6
 8007b34:	4620      	mov	r0, r4
 8007b36:	f000 f93f 	bl	8007db8 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, e, len);
	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
 8007b3a:	f104 06f0 	add.w	r6, r4, #240	; 0xf0
	(void)tc_hmac_update(&prng->h, e, len);
 8007b3e:	464a      	mov	r2, r9
 8007b40:	4641      	mov	r1, r8
 8007b42:	4620      	mov	r0, r4
 8007b44:	f000 f938 	bl	8007db8 <tc_hmac_update>
	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
 8007b48:	4622      	mov	r2, r4
 8007b4a:	2120      	movs	r1, #32
 8007b4c:	4630      	mov	r0, r6
 8007b4e:	f000 f939 	bl	8007dc4 <tc_hmac_final>
	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
 8007b52:	4631      	mov	r1, r6
 8007b54:	2220      	movs	r2, #32
 8007b56:	4620      	mov	r0, r4
 8007b58:	f000 f8e3 	bl	8007d22 <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
 8007b5c:	4620      	mov	r0, r4
 8007b5e:	f000 f91e 	bl	8007d9e <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
 8007b62:	4629      	mov	r1, r5
 8007b64:	2220      	movs	r2, #32
 8007b66:	4620      	mov	r0, r4
 8007b68:	f000 f926 	bl	8007db8 <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
 8007b6c:	4622      	mov	r2, r4
 8007b6e:	2120      	movs	r1, #32
 8007b70:	4628      	mov	r0, r5
 8007b72:	f000 f927 	bl	8007dc4 <tc_hmac_final>

	/* use current state, e and separator 1 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
 8007b76:	4620      	mov	r0, r4
 8007b78:	f000 f911 	bl	8007d9e <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
 8007b7c:	4629      	mov	r1, r5
 8007b7e:	2220      	movs	r2, #32
 8007b80:	4620      	mov	r0, r4
 8007b82:	f000 f919 	bl	8007db8 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator1, sizeof(separator1));
 8007b86:	463a      	mov	r2, r7
 8007b88:	f10d 0107 	add.w	r1, sp, #7
 8007b8c:	4620      	mov	r0, r4
 8007b8e:	f000 f913 	bl	8007db8 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, e, len);
 8007b92:	464a      	mov	r2, r9
 8007b94:	4641      	mov	r1, r8
 8007b96:	4620      	mov	r0, r4
 8007b98:	f000 f90e 	bl	8007db8 <tc_hmac_update>
	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
 8007b9c:	4622      	mov	r2, r4
 8007b9e:	2120      	movs	r1, #32
 8007ba0:	4630      	mov	r0, r6
 8007ba2:	f000 f90f 	bl	8007dc4 <tc_hmac_final>
	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
 8007ba6:	4631      	mov	r1, r6
 8007ba8:	2220      	movs	r2, #32
 8007baa:	4620      	mov	r0, r4
 8007bac:	f000 f8b9 	bl	8007d22 <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
 8007bb0:	4620      	mov	r0, r4
 8007bb2:	f000 f8f4 	bl	8007d9e <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
 8007bb6:	4629      	mov	r1, r5
 8007bb8:	2220      	movs	r2, #32
 8007bba:	4620      	mov	r0, r4
 8007bbc:	f000 f8fc 	bl	8007db8 <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
 8007bc0:	4622      	mov	r2, r4
 8007bc2:	2120      	movs	r1, #32
 8007bc4:	4628      	mov	r0, r5
 8007bc6:	f000 f8fd 	bl	8007dc4 <tc_hmac_final>
}
 8007bca:	b003      	add	sp, #12
 8007bcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08007bd0 <tc_hmac_prng_init>:

int tc_hmac_prng_init(TCHmacPrng_t prng,
		      const uint8_t *personalization,
		      unsigned int plen)
{
 8007bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bd2:	460c      	mov	r4, r1
 8007bd4:	4617      	mov	r7, r2

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
 8007bd6:	4605      	mov	r5, r0
 8007bd8:	b1d8      	cbz	r0, 8007c12 <tc_hmac_prng_init+0x42>
	    personalization == (uint8_t *) 0 ||
 8007bda:	b1d9      	cbz	r1, 8007c14 <tc_hmac_prng_init+0x44>
	    plen > MAX_PLEN) {
		return TC_CRYPTO_FAIL;
	}

	/* put the generator into a known state: */
	_set(prng->key, 0x00, sizeof(prng->key));
 8007bdc:	f100 06f0 	add.w	r6, r0, #240	; 0xf0
 8007be0:	2220      	movs	r2, #32
 8007be2:	2100      	movs	r1, #0
 8007be4:	4630      	mov	r0, r6
 8007be6:	f000 f87d 	bl	8007ce4 <_set>
	_set(prng->v, 0x01, sizeof(prng->v));
 8007bea:	2220      	movs	r2, #32
 8007bec:	2101      	movs	r1, #1
 8007bee:	f505 7088 	add.w	r0, r5, #272	; 0x110
 8007bf2:	f000 f877 	bl	8007ce4 <_set>
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
 8007bf6:	2220      	movs	r2, #32
 8007bf8:	4631      	mov	r1, r6
 8007bfa:	4628      	mov	r0, r5
 8007bfc:	f000 f891 	bl	8007d22 <tc_hmac_set_key>
	/* update assumes SOME key has been configured into HMAC */

	update(prng, personalization, plen);
 8007c00:	4628      	mov	r0, r5
 8007c02:	463a      	mov	r2, r7
 8007c04:	4621      	mov	r1, r4
 8007c06:	f7ff ff7e 	bl	8007b06 <update>

	/* force a reseed before allowing tc_hmac_prng_generate to succeed: */
	prng->countdown = 0;
 8007c0a:	2300      	movs	r3, #0

	return TC_CRYPTO_SUCCESS;
 8007c0c:	2001      	movs	r0, #1
	prng->countdown = 0;
 8007c0e:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
}
 8007c12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
 8007c14:	4608      	mov	r0, r1
 8007c16:	e7fc      	b.n	8007c12 <tc_hmac_prng_init+0x42>

08007c18 <tc_hmac_prng_reseed>:
int tc_hmac_prng_reseed(TCHmacPrng_t prng,
			const uint8_t *seed,
			unsigned int seedlen,
			const uint8_t *additional_input,
			unsigned int additionallen)
{
 8007c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c1a:	9c06      	ldr	r4, [sp, #24]
 8007c1c:	461f      	mov	r7, r3

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
 8007c1e:	4605      	mov	r5, r0
 8007c20:	b188      	cbz	r0, 8007c46 <tc_hmac_prng_reseed+0x2e>
 8007c22:	b181      	cbz	r1, 8007c46 <tc_hmac_prng_reseed+0x2e>
	    seed == (const uint8_t *) 0 ||
	    seedlen < MIN_SLEN ||
 8007c24:	2a1f      	cmp	r2, #31
 8007c26:	d90e      	bls.n	8007c46 <tc_hmac_prng_reseed+0x2e>
	    seedlen > MAX_SLEN) {
		return TC_CRYPTO_FAIL;
	}

	if (additional_input != (const uint8_t *) 0) {
 8007c28:	b12b      	cbz	r3, 8007c36 <tc_hmac_prng_reseed+0x1e>
		/*
		 * Abort if additional_input is provided but has inappropriate
		 * length
		 */
		if (additionallen == 0 ||
 8007c2a:	b174      	cbz	r4, 8007c4a <tc_hmac_prng_reseed+0x32>
		    additionallen > MAX_ALEN) {
			return TC_CRYPTO_FAIL;
		} else {
		/* call update for the seed and additional_input */
		update(prng, seed, seedlen);
 8007c2c:	f7ff ff6b 	bl	8007b06 <update>
		update(prng, additional_input, additionallen);
 8007c30:	4622      	mov	r2, r4
 8007c32:	4639      	mov	r1, r7
 8007c34:	4628      	mov	r0, r5
		}
	} else {
		/* call update only for the seed */
		update(prng, seed, seedlen);
 8007c36:	f7ff ff66 	bl	8007b06 <update>
	}

	/* ... and enable hmac_prng_generate */
	prng->countdown = MAX_GENS;
 8007c3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff

	return TC_CRYPTO_SUCCESS;
 8007c3e:	2001      	movs	r0, #1
	prng->countdown = MAX_GENS;
 8007c40:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
}
 8007c44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
 8007c46:	2000      	movs	r0, #0
 8007c48:	e7fc      	b.n	8007c44 <tc_hmac_prng_reseed+0x2c>
 8007c4a:	4620      	mov	r0, r4
 8007c4c:	e7fa      	b.n	8007c44 <tc_hmac_prng_reseed+0x2c>

08007c4e <tc_hmac_prng_generate>:

int tc_hmac_prng_generate(uint8_t *out, unsigned int outlen, TCHmacPrng_t prng)
{
 8007c4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c52:	460d      	mov	r5, r1
 8007c54:	4614      	mov	r4, r2
	unsigned int bufferlen;

	/* input sanity check: */
	if (out == (uint8_t *) 0 ||
 8007c56:	4606      	mov	r6, r0
 8007c58:	b390      	cbz	r0, 8007cc0 <tc_hmac_prng_generate+0x72>
 8007c5a:	b38a      	cbz	r2, 8007cc0 <tc_hmac_prng_generate+0x72>
	    prng == (TCHmacPrng_t) 0 ||
 8007c5c:	1e4b      	subs	r3, r1, #1
 8007c5e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007c62:	d22d      	bcs.n	8007cc0 <tc_hmac_prng_generate+0x72>
	    outlen == 0 ||
	    outlen > MAX_OUT) {
		return TC_CRYPTO_FAIL;
	} else if (prng->countdown == 0) {
 8007c64:	f8d2 3130 	ldr.w	r3, [r2, #304]	; 0x130
 8007c68:	b363      	cbz	r3, 8007cc4 <tc_hmac_prng_generate+0x76>
		return TC_HMAC_PRNG_RESEED_REQ;
	}

	prng->countdown--;
 8007c6a:	3b01      	subs	r3, #1
 8007c6c:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

	while (outlen != 0) {
		/* operate HMAC in OFB mode to create "random" outputs */
		(void)tc_hmac_init(&prng->h);
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
 8007c70:	f502 7788 	add.w	r7, r2, #272	; 0x110
		(void)tc_hmac_init(&prng->h);
 8007c74:	4620      	mov	r0, r4
 8007c76:	f000 f892 	bl	8007d9e <tc_hmac_init>
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
 8007c7a:	2220      	movs	r2, #32
 8007c7c:	4639      	mov	r1, r7
 8007c7e:	4620      	mov	r0, r4
 8007c80:	f000 f89a 	bl	8007db8 <tc_hmac_update>
		(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
 8007c84:	4622      	mov	r2, r4
 8007c86:	2120      	movs	r1, #32
 8007c88:	4638      	mov	r0, r7
 8007c8a:	f000 f89b 	bl	8007dc4 <tc_hmac_final>

		bufferlen = (TC_SHA256_DIGEST_SIZE > outlen) ?
 8007c8e:	2d20      	cmp	r5, #32
 8007c90:	46a8      	mov	r8, r5
 8007c92:	bf28      	it	cs
 8007c94:	f04f 0820 	movcs.w	r8, #32
			outlen : TC_SHA256_DIGEST_SIZE;
		(void)_copy(out, bufferlen, prng->v, bufferlen);
 8007c98:	4630      	mov	r0, r6
 8007c9a:	4643      	mov	r3, r8
 8007c9c:	463a      	mov	r2, r7
 8007c9e:	4641      	mov	r1, r8
 8007ca0:	f000 f813 	bl	8007cca <_copy>

		out += bufferlen;
		outlen = (outlen > TC_SHA256_DIGEST_SIZE) ?
			(outlen - TC_SHA256_DIGEST_SIZE) : 0;
 8007ca4:	2d20      	cmp	r5, #32
 8007ca6:	bf38      	it	cc
 8007ca8:	2520      	movcc	r5, #32
	while (outlen != 0) {
 8007caa:	3d20      	subs	r5, #32
		out += bufferlen;
 8007cac:	4446      	add	r6, r8
	while (outlen != 0) {
 8007cae:	d1e1      	bne.n	8007c74 <tc_hmac_prng_generate+0x26>
	}

	/* block future PRNG compromises from revealing past state */
	update(prng, prng->v, TC_SHA256_DIGEST_SIZE);
 8007cb0:	4620      	mov	r0, r4
 8007cb2:	2220      	movs	r2, #32
 8007cb4:	4639      	mov	r1, r7
 8007cb6:	f7ff ff26 	bl	8007b06 <update>

	return TC_CRYPTO_SUCCESS;
 8007cba:	2001      	movs	r0, #1
}
 8007cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TC_CRYPTO_FAIL;
 8007cc0:	2000      	movs	r0, #0
 8007cc2:	e7fb      	b.n	8007cbc <tc_hmac_prng_generate+0x6e>
		return TC_HMAC_PRNG_RESEED_REQ;
 8007cc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007cc8:	e7f8      	b.n	8007cbc <tc_hmac_prng_generate+0x6e>

08007cca <_copy>:
#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
	if (from_len <= to_len) {
 8007cca:	428b      	cmp	r3, r1
{
 8007ccc:	b538      	push	{r3, r4, r5, lr}
 8007cce:	4615      	mov	r5, r2
 8007cd0:	461c      	mov	r4, r3
	if (from_len <= to_len) {
 8007cd2:	d805      	bhi.n	8007ce0 <_copy+0x16>
		(void)memcpy(to, from, from_len);
 8007cd4:	461a      	mov	r2, r3
 8007cd6:	4629      	mov	r1, r5
 8007cd8:	f7ff f9aa 	bl	8007030 <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
 8007cdc:	4620      	mov	r0, r4
 8007cde:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
 8007ce0:	2400      	movs	r4, #0
 8007ce2:	e7fb      	b.n	8007cdc <_copy+0x12>

08007ce4 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
 8007ce4:	f7ff b9b1 	b.w	800704a <memset>

08007ce8 <rekey>:
{
	const uint8_t inner_pad = (uint8_t) 0x36;
	const uint8_t outer_pad = (uint8_t) 0x5c;
	unsigned int i;

	for (i = 0; i < key_size; ++i) {
 8007ce8:	4603      	mov	r3, r0
{
 8007cea:	b510      	push	{r4, lr}
 8007cec:	3901      	subs	r1, #1
 8007cee:	4402      	add	r2, r0
	for (i = 0; i < key_size; ++i) {
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d105      	bne.n	8007d00 <rekey+0x18>
		key[i] = inner_pad ^ new_key[i];
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
	}
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
 8007cf4:	2136      	movs	r1, #54	; 0x36
 8007cf6:	245c      	movs	r4, #92	; 0x5c
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
 8007cf8:	1a1a      	subs	r2, r3, r0
 8007cfa:	2a3f      	cmp	r2, #63	; 0x3f
 8007cfc:	d90c      	bls.n	8007d18 <rekey+0x30>
	}
}
 8007cfe:	bd10      	pop	{r4, pc}
		key[i] = inner_pad ^ new_key[i];
 8007d00:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007d04:	f084 0436 	eor.w	r4, r4, #54	; 0x36
 8007d08:	f803 4b01 	strb.w	r4, [r3], #1
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
 8007d0c:	780c      	ldrb	r4, [r1, #0]
 8007d0e:	f084 045c 	eor.w	r4, r4, #92	; 0x5c
 8007d12:	f883 403f 	strb.w	r4, [r3, #63]	; 0x3f
 8007d16:	e7eb      	b.n	8007cf0 <rekey+0x8>
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
 8007d18:	f803 1b01 	strb.w	r1, [r3], #1
 8007d1c:	f883 403f 	strb.w	r4, [r3, #63]	; 0x3f
 8007d20:	e7ea      	b.n	8007cf8 <rekey+0x10>

08007d22 <tc_hmac_set_key>:

int tc_hmac_set_key(TCHmacState_t ctx, const uint8_t *key,
		    unsigned int key_size)
{
 8007d22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d26:	b0bc      	sub	sp, #240	; 0xf0
 8007d28:	460e      	mov	r6, r1
 8007d2a:	af00      	add	r7, sp, #0
 8007d2c:	4614      	mov	r4, r2

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0 ||
 8007d2e:	4605      	mov	r5, r0
 8007d30:	b1e8      	cbz	r0, 8007d6e <tc_hmac_set_key+0x4c>
 8007d32:	b381      	cbz	r1, 8007d96 <tc_hmac_set_key+0x74>
	    key == (const uint8_t *) 0 ||
 8007d34:	b38a      	cbz	r2, 8007d9a <tc_hmac_set_key+0x78>
	    key_size == 0) {
		return TC_CRYPTO_FAIL;
	}

	const uint8_t dummy_key[key_size];
 8007d36:	1dd3      	adds	r3, r2, #7
 8007d38:	f023 0307 	bic.w	r3, r3, #7
	struct tc_hmac_state_struct dummy_state;

	if (key_size <= TC_SHA256_BLOCK_SIZE) {
 8007d3c:	2a40      	cmp	r2, #64	; 0x40
	const uint8_t dummy_key[key_size];
 8007d3e:	ebad 0d03 	sub.w	sp, sp, r3
 8007d42:	f100 0870 	add.w	r8, r0, #112	; 0x70
	if (key_size <= TC_SHA256_BLOCK_SIZE) {
 8007d46:	d816      	bhi.n	8007d76 <tc_hmac_set_key+0x54>
		 * certain timing attacks. Without these dummy calls,
		 * adversaries would be able to learn whether the key_size is
		 * greater than TC_SHA256_BLOCK_SIZE by measuring the time
		 * consumed in this process.
		 */
		(void)tc_sha256_init(&dummy_state.hash_state);
 8007d48:	4638      	mov	r0, r7
 8007d4a:	f000 f947 	bl	8007fdc <tc_sha256_init>
		(void)tc_sha256_update(&dummy_state.hash_state,
 8007d4e:	4622      	mov	r2, r4
 8007d50:	4669      	mov	r1, sp
 8007d52:	4638      	mov	r0, r7
 8007d54:	f000 f96e 	bl	8008034 <tc_sha256_update>
				       dummy_key,
				       key_size);
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
 8007d58:	4639      	mov	r1, r7
 8007d5a:	f107 0090 	add.w	r0, r7, #144	; 0x90
 8007d5e:	f000 f995 	bl	800808c <tc_sha256_final>
				      &dummy_state.hash_state);

		/* Actual code for when key_size <= TC_SHA256_BLOCK_SIZE: */
		rekey(ctx->key, key, key_size);
 8007d62:	4622      	mov	r2, r4
 8007d64:	4631      	mov	r1, r6
	} else {
		(void)tc_sha256_init(&ctx->hash_state);
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
				      &ctx->hash_state);
		rekey(ctx->key,
 8007d66:	4640      	mov	r0, r8
 8007d68:	f7ff ffbe 	bl	8007ce8 <rekey>
		      &ctx->key[TC_SHA256_DIGEST_SIZE],
		      TC_SHA256_DIGEST_SIZE);
	}

	return TC_CRYPTO_SUCCESS;
 8007d6c:	2001      	movs	r0, #1
}
 8007d6e:	37f0      	adds	r7, #240	; 0xf0
 8007d70:	46bd      	mov	sp, r7
 8007d72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		(void)tc_sha256_init(&ctx->hash_state);
 8007d76:	f000 f931 	bl	8007fdc <tc_sha256_init>
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
 8007d7a:	4622      	mov	r2, r4
 8007d7c:	4631      	mov	r1, r6
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
 8007d7e:	f105 0490 	add.w	r4, r5, #144	; 0x90
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
 8007d82:	4628      	mov	r0, r5
 8007d84:	f000 f956 	bl	8008034 <tc_sha256_update>
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
 8007d88:	4629      	mov	r1, r5
 8007d8a:	4620      	mov	r0, r4
 8007d8c:	f000 f97e 	bl	800808c <tc_sha256_final>
		rekey(ctx->key,
 8007d90:	2220      	movs	r2, #32
 8007d92:	4621      	mov	r1, r4
 8007d94:	e7e7      	b.n	8007d66 <tc_hmac_set_key+0x44>
		return TC_CRYPTO_FAIL;
 8007d96:	4608      	mov	r0, r1
 8007d98:	e7e9      	b.n	8007d6e <tc_hmac_set_key+0x4c>
 8007d9a:	4610      	mov	r0, r2
 8007d9c:	e7e7      	b.n	8007d6e <tc_hmac_set_key+0x4c>

08007d9e <tc_hmac_init>:

int tc_hmac_init(TCHmacState_t ctx)
{
 8007d9e:	b510      	push	{r4, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
 8007da0:	4604      	mov	r4, r0
 8007da2:	b140      	cbz	r0, 8007db6 <tc_hmac_init+0x18>
		return TC_CRYPTO_FAIL;
	}

  (void) tc_sha256_init(&ctx->hash_state);
 8007da4:	f000 f91a 	bl	8007fdc <tc_sha256_init>
  (void) tc_sha256_update(&ctx->hash_state, ctx->key, TC_SHA256_BLOCK_SIZE);
 8007da8:	2240      	movs	r2, #64	; 0x40
 8007daa:	f104 0170 	add.w	r1, r4, #112	; 0x70
 8007dae:	4620      	mov	r0, r4
 8007db0:	f000 f940 	bl	8008034 <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
 8007db4:	2001      	movs	r0, #1
}
 8007db6:	bd10      	pop	{r4, pc}

08007db8 <tc_hmac_update>:

int tc_hmac_update(TCHmacState_t ctx,
		   const void *data,
		   unsigned int data_length)
{
 8007db8:	b508      	push	{r3, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
 8007dba:	b110      	cbz	r0, 8007dc2 <tc_hmac_update+0xa>
		return TC_CRYPTO_FAIL;
	}

	(void)tc_sha256_update(&ctx->hash_state, data, data_length);
 8007dbc:	f000 f93a 	bl	8008034 <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
 8007dc0:	2001      	movs	r0, #1
}
 8007dc2:	bd08      	pop	{r3, pc}

08007dc4 <tc_hmac_final>:

int tc_hmac_final(uint8_t *tag, unsigned int taglen, TCHmacState_t ctx)
{
 8007dc4:	b570      	push	{r4, r5, r6, lr}
 8007dc6:	460e      	mov	r6, r1
 8007dc8:	4614      	mov	r4, r2

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
 8007dca:	4605      	mov	r5, r0
 8007dcc:	b1f0      	cbz	r0, 8007e0c <tc_hmac_final+0x48>
 8007dce:	2920      	cmp	r1, #32
 8007dd0:	d11c      	bne.n	8007e0c <tc_hmac_final+0x48>
	    taglen != TC_SHA256_DIGEST_SIZE ||
 8007dd2:	b1ea      	cbz	r2, 8007e10 <tc_hmac_final+0x4c>
	    ctx == (TCHmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	(void) tc_sha256_final(tag, &ctx->hash_state);
 8007dd4:	4611      	mov	r1, r2
 8007dd6:	f000 f959 	bl	800808c <tc_sha256_final>

	(void)tc_sha256_init(&ctx->hash_state);
 8007dda:	4620      	mov	r0, r4
 8007ddc:	f000 f8fe 	bl	8007fdc <tc_sha256_init>
	(void)tc_sha256_update(&ctx->hash_state,
 8007de0:	2240      	movs	r2, #64	; 0x40
 8007de2:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
 8007de6:	4620      	mov	r0, r4
 8007de8:	f000 f924 	bl	8008034 <tc_sha256_update>
			       &ctx->key[TC_SHA256_BLOCK_SIZE],
				TC_SHA256_BLOCK_SIZE);
	(void)tc_sha256_update(&ctx->hash_state, tag, TC_SHA256_DIGEST_SIZE);
 8007dec:	4632      	mov	r2, r6
 8007dee:	4629      	mov	r1, r5
 8007df0:	4620      	mov	r0, r4
 8007df2:	f000 f91f 	bl	8008034 <tc_sha256_update>
	(void)tc_sha256_final(tag, &ctx->hash_state);
 8007df6:	4621      	mov	r1, r4
 8007df8:	4628      	mov	r0, r5
 8007dfa:	f000 f947 	bl	800808c <tc_sha256_final>

	/* destroy the current state */
	_set(ctx, 0, sizeof(*ctx));
 8007dfe:	4620      	mov	r0, r4
 8007e00:	22f0      	movs	r2, #240	; 0xf0
 8007e02:	2100      	movs	r1, #0
 8007e04:	f7ff ff6e 	bl	8007ce4 <_set>

	return TC_CRYPTO_SUCCESS;
 8007e08:	2001      	movs	r0, #1
}
 8007e0a:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
 8007e0c:	2000      	movs	r0, #0
 8007e0e:	e7fc      	b.n	8007e0a <tc_hmac_final+0x46>
 8007e10:	4610      	mov	r0, r2
 8007e12:	e7fa      	b.n	8007e0a <tc_hmac_final+0x46>

08007e14 <compress>:
	n |= ((unsigned int)(*((*c)++)));
	return n;
}

static void compress(unsigned int *iv, const uint8_t *data)
{
 8007e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	unsigned int work_space[16];
	unsigned int n;
	unsigned int i;

	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
 8007e18:	2600      	movs	r6, #0
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
 8007e1a:	6803      	ldr	r3, [r0, #0]
{
 8007e1c:	b09d      	sub	sp, #116	; 0x74
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
 8007e1e:	9304      	str	r3, [sp, #16]
 8007e20:	6843      	ldr	r3, [r0, #4]

	for (i = 0; i < 16; ++i) {
		n = BigEndian(&data);
		t1 = work_space[i] = n;
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
 8007e22:	f8df c1b4 	ldr.w	ip, [pc, #436]	; 8007fd8 <compress+0x1c4>
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
 8007e26:	9305      	str	r3, [sp, #20]
 8007e28:	6883      	ldr	r3, [r0, #8]
{
 8007e2a:	4689      	mov	r9, r1
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
 8007e2c:	e9dd 1504 	ldrd	r1, r5, [sp, #16]
 8007e30:	9306      	str	r3, [sp, #24]
 8007e32:	68c3      	ldr	r3, [r0, #12]
 8007e34:	9307      	str	r3, [sp, #28]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
 8007e36:	6903      	ldr	r3, [r0, #16]
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
 8007e38:	e9dd b706 	ldrd	fp, r7, [sp, #24]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
 8007e3c:	9308      	str	r3, [sp, #32]
 8007e3e:	6943      	ldr	r3, [r0, #20]
 8007e40:	9309      	str	r3, [sp, #36]	; 0x24
 8007e42:	6983      	ldr	r3, [r0, #24]
 8007e44:	e9dd 2a08 	ldrd	r2, sl, [sp, #32]
 8007e48:	930a      	str	r3, [sp, #40]	; 0x28
 8007e4a:	69c3      	ldr	r3, [r0, #28]
 8007e4c:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e4e:	469e      	mov	lr, r3
 8007e50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e52:	9300      	str	r3, [sp, #0]
 8007e54:	f859 3006 	ldr.w	r3, [r9, r6]
		t1 = work_space[i] = n;
 8007e58:	ac0c      	add	r4, sp, #48	; 0x30
 8007e5a:	ba1b      	rev	r3, r3
 8007e5c:	51a3      	str	r3, [r4, r6]
	return (((a) >> n) | ((a) << (32 - n)));
 8007e5e:	ea4f 24f2 	mov.w	r4, r2, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
 8007e62:	ea84 14b2 	eor.w	r4, r4, r2, ror #6
 8007e66:	ea84 6872 	eor.w	r8, r4, r2, ror #25
 8007e6a:	f856 400c 	ldr.w	r4, [r6, ip]
 8007e6e:	3604      	adds	r6, #4
 8007e70:	441c      	add	r4, r3
 8007e72:	9b00      	ldr	r3, [sp, #0]
 8007e74:	4444      	add	r4, r8
 8007e76:	ea23 0302 	bic.w	r3, r3, r2
 8007e7a:	ea02 080a 	and.w	r8, r2, sl
 8007e7e:	ea83 0308 	eor.w	r3, r3, r8
 8007e82:	4423      	add	r3, r4
 8007e84:	4473      	add	r3, lr
		t2 = Sigma0(a) + Maj(a, b, c);
 8007e86:	ea85 040b 	eor.w	r4, r5, fp
	return (((a) >> n) | ((a) << (32 - n)));
 8007e8a:	ea4f 3e71 	mov.w	lr, r1, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
 8007e8e:	ea8e 0eb1 	eor.w	lr, lr, r1, ror #2
 8007e92:	400c      	ands	r4, r1
 8007e94:	ea05 080b 	and.w	r8, r5, fp
 8007e98:	ea84 0408 	eor.w	r4, r4, r8
 8007e9c:	ea8e 5eb1 	eor.w	lr, lr, r1, ror #22
 8007ea0:	44a6      	add	lr, r4
	for (i = 0; i < 16; ++i) {
 8007ea2:	2e40      	cmp	r6, #64	; 0x40
		h = g; g = f; f = e; e = d + t1;
 8007ea4:	eb03 0407 	add.w	r4, r3, r7
		d = c; c = b; b = a; a = t1 + t2;
 8007ea8:	4473      	add	r3, lr
 8007eaa:	465f      	mov	r7, fp
 8007eac:	f8dd e000 	ldr.w	lr, [sp]
	for (i = 0; i < 16; ++i) {
 8007eb0:	f040 8082 	bne.w	8007fb8 <compress+0x1a4>
 8007eb4:	f04f 0c10 	mov.w	ip, #16
	}

	for ( ; i < 64; ++i) {
		s0 = work_space[(i+1)&0x0f];
 8007eb8:	f10c 0601 	add.w	r6, ip, #1
 8007ebc:	af1c      	add	r7, sp, #112	; 0x70
 8007ebe:	9603      	str	r6, [sp, #12]
 8007ec0:	f006 060f 	and.w	r6, r6, #15
 8007ec4:	eb07 0686 	add.w	r6, r7, r6, lsl #2
 8007ec8:	f856 6c40 	ldr.w	r6, [r6, #-64]
		s0 = sigma0(s0);
		s1 = work_space[(i+14)&0x0f];
		s1 = sigma1(s1);

		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
 8007ecc:	f00c 090f 	and.w	r9, ip, #15
	return (((a) >> n) | ((a) << (32 - n)));
 8007ed0:	ea4f 48b6 	mov.w	r8, r6, ror #18
		s0 = work_space[(i+1)&0x0f];
 8007ed4:	9601      	str	r6, [sp, #4]
		s0 = sigma0(s0);
 8007ed6:	ea88 18f6 	eor.w	r8, r8, r6, ror #7
		s1 = work_space[(i+14)&0x0f];
 8007eda:	f10c 060e 	add.w	r6, ip, #14
 8007ede:	f006 060f 	and.w	r6, r6, #15
 8007ee2:	eb07 0686 	add.w	r6, r7, r6, lsl #2
 8007ee6:	f856 6c40 	ldr.w	r6, [r6, #-64]
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
 8007eea:	eb07 0989 	add.w	r9, r7, r9, lsl #2
	return (((a) >> n) | ((a) << (32 - n)));
 8007eee:	ea4f 4ef6 	mov.w	lr, r6, ror #19
		s1 = work_space[(i+14)&0x0f];
 8007ef2:	9602      	str	r6, [sp, #8]
		s1 = sigma1(s1);
 8007ef4:	ea8e 4e76 	eor.w	lr, lr, r6, ror #17
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
 8007ef8:	f10c 0609 	add.w	r6, ip, #9
 8007efc:	f006 060f 	and.w	r6, r6, #15
 8007f00:	eb07 0686 	add.w	r6, r7, r6, lsl #2
 8007f04:	f856 6c40 	ldr.w	r6, [r6, #-64]
 8007f08:	f859 7c40 	ldr.w	r7, [r9, #-64]
 8007f0c:	443e      	add	r6, r7
		s0 = sigma0(s0);
 8007f0e:	9f01      	ldr	r7, [sp, #4]
 8007f10:	ea88 08d7 	eor.w	r8, r8, r7, lsr #3
		s1 = sigma1(s1);
 8007f14:	9f02      	ldr	r7, [sp, #8]
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
 8007f16:	4446      	add	r6, r8
		s1 = sigma1(s1);
 8007f18:	ea8e 2e97 	eor.w	lr, lr, r7, lsr #10
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
 8007f1c:	4476      	add	r6, lr
	return (((a) >> n) | ((a) << (32 - n)));
 8007f1e:	ea4f 27f4 	mov.w	r7, r4, ror #11
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
 8007f22:	f849 6c40 	str.w	r6, [r9, #-64]
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
 8007f26:	ea04 0e02 	and.w	lr, r4, r2
 8007f2a:	ea87 17b4 	eor.w	r7, r7, r4, ror #6
 8007f2e:	ea2a 0904 	bic.w	r9, sl, r4
 8007f32:	ea87 6774 	eor.w	r7, r7, r4, ror #25
 8007f36:	ea89 090e 	eor.w	r9, r9, lr
 8007f3a:	44b9      	add	r9, r7
 8007f3c:	4f26      	ldr	r7, [pc, #152]	; (8007fd8 <compress+0x1c4>)
 8007f3e:	f857 702c 	ldr.w	r7, [r7, ip, lsl #2]
		t2 = Sigma0(a) + Maj(a, b, c);
 8007f42:	ea81 0c05 	eor.w	ip, r1, r5
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
 8007f46:	44b9      	add	r9, r7
 8007f48:	9f00      	ldr	r7, [sp, #0]
 8007f4a:	444e      	add	r6, r9
 8007f4c:	4437      	add	r7, r6
 8007f4e:	46b8      	mov	r8, r7
		t2 = Sigma0(a) + Maj(a, b, c);
 8007f50:	ea0c 0c03 	and.w	ip, ip, r3
	return (((a) >> n) | ((a) << (32 - n)));
 8007f54:	ea4f 3773 	mov.w	r7, r3, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
 8007f58:	ea01 0605 	and.w	r6, r1, r5
 8007f5c:	ea8c 0606 	eor.w	r6, ip, r6
 8007f60:	ea87 07b3 	eor.w	r7, r7, r3, ror #2
 8007f64:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8007f68:	ea87 57b3 	eor.w	r7, r7, r3, ror #22
 8007f6c:	443e      	add	r6, r7
	for ( ; i < 64; ++i) {
 8007f6e:	f1bc 0f40 	cmp.w	ip, #64	; 0x40
		h = g; g = f; f = e; e = d + t1;
 8007f72:	eb08 070b 	add.w	r7, r8, fp
		d = c; c = b; b = a; a = t1 + t2;
 8007f76:	eb06 0e08 	add.w	lr, r6, r8
 8007f7a:	46ab      	mov	fp, r5
 8007f7c:	f8cd a000 	str.w	sl, [sp]
	for ( ; i < 64; ++i) {
 8007f80:	d122      	bne.n	8007fc8 <compress+0x1b4>
	}

	iv[0] += a; iv[1] += b; iv[2] += c; iv[3] += d;
 8007f82:	9e04      	ldr	r6, [sp, #16]
 8007f84:	4476      	add	r6, lr
 8007f86:	6006      	str	r6, [r0, #0]
 8007f88:	9e05      	ldr	r6, [sp, #20]
 8007f8a:	441e      	add	r6, r3
 8007f8c:	9b06      	ldr	r3, [sp, #24]
 8007f8e:	6046      	str	r6, [r0, #4]
 8007f90:	440b      	add	r3, r1
 8007f92:	6083      	str	r3, [r0, #8]
 8007f94:	9b07      	ldr	r3, [sp, #28]
 8007f96:	442b      	add	r3, r5
 8007f98:	60c3      	str	r3, [r0, #12]
	iv[4] += e; iv[5] += f; iv[6] += g; iv[7] += h;
 8007f9a:	9b08      	ldr	r3, [sp, #32]
 8007f9c:	443b      	add	r3, r7
 8007f9e:	6103      	str	r3, [r0, #16]
 8007fa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fa2:	4423      	add	r3, r4
 8007fa4:	6143      	str	r3, [r0, #20]
 8007fa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fa8:	4413      	add	r3, r2
 8007faa:	6183      	str	r3, [r0, #24]
 8007fac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007fae:	4453      	add	r3, sl
 8007fb0:	61c3      	str	r3, [r0, #28]
}
 8007fb2:	b01d      	add	sp, #116	; 0x74
 8007fb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fb8:	f8cd a000 	str.w	sl, [sp]
 8007fbc:	46ab      	mov	fp, r5
 8007fbe:	4692      	mov	sl, r2
 8007fc0:	460d      	mov	r5, r1
		h = g; g = f; f = e; e = d + t1;
 8007fc2:	4622      	mov	r2, r4
		d = c; c = b; b = a; a = t1 + t2;
 8007fc4:	4619      	mov	r1, r3
 8007fc6:	e745      	b.n	8007e54 <compress+0x40>
 8007fc8:	4692      	mov	sl, r2
 8007fca:	460d      	mov	r5, r1
 8007fcc:	4622      	mov	r2, r4
 8007fce:	4619      	mov	r1, r3
		h = g; g = f; f = e; e = d + t1;
 8007fd0:	463c      	mov	r4, r7
		d = c; c = b; b = a; a = t1 + t2;
 8007fd2:	4673      	mov	r3, lr
 8007fd4:	e770      	b.n	8007eb8 <compress+0xa4>
 8007fd6:	bf00      	nop
 8007fd8:	0800df48 	.word	0x0800df48

08007fdc <tc_sha256_init>:
{
 8007fdc:	b510      	push	{r4, lr}
	if (s == (TCSha256State_t) 0) {
 8007fde:	4604      	mov	r4, r0
 8007fe0:	b1c8      	cbz	r0, 8008016 <tc_sha256_init+0x3a>
	_set((uint8_t *) s, 0x00, sizeof(*s));
 8007fe2:	2270      	movs	r2, #112	; 0x70
 8007fe4:	2100      	movs	r1, #0
 8007fe6:	f7ff fe7d 	bl	8007ce4 <_set>
	s->iv[1] = 0xbb67ae85;
 8007fea:	4b0b      	ldr	r3, [pc, #44]	; (8008018 <tc_sha256_init+0x3c>)
 8007fec:	4a0b      	ldr	r2, [pc, #44]	; (800801c <tc_sha256_init+0x40>)
	s->iv[3] = 0xa54ff53a;
 8007fee:	490c      	ldr	r1, [pc, #48]	; (8008020 <tc_sha256_init+0x44>)
	s->iv[1] = 0xbb67ae85;
 8007ff0:	e9c4 2300 	strd	r2, r3, [r4]
	s->iv[3] = 0xa54ff53a;
 8007ff4:	4b0b      	ldr	r3, [pc, #44]	; (8008024 <tc_sha256_init+0x48>)
	s->iv[5] = 0x9b05688c;
 8007ff6:	480c      	ldr	r0, [pc, #48]	; (8008028 <tc_sha256_init+0x4c>)
	s->iv[3] = 0xa54ff53a;
 8007ff8:	e9c4 1302 	strd	r1, r3, [r4, #8]
	s->iv[5] = 0x9b05688c;
 8007ffc:	4b0b      	ldr	r3, [pc, #44]	; (800802c <tc_sha256_init+0x50>)
 8007ffe:	e9c4 0304 	strd	r0, r3, [r4, #16]
	return TC_CRYPTO_SUCCESS;
 8008002:	2001      	movs	r0, #1
	s->iv[6] = 0x1f83d9ab;
 8008004:	4b0a      	ldr	r3, [pc, #40]	; (8008030 <tc_sha256_init+0x54>)
 8008006:	61a3      	str	r3, [r4, #24]
	s->iv[7] = 0x5be0cd19;
 8008008:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
 800800c:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
 8008010:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
 8008014:	61e3      	str	r3, [r4, #28]
}
 8008016:	bd10      	pop	{r4, pc}
 8008018:	bb67ae85 	.word	0xbb67ae85
 800801c:	6a09e667 	.word	0x6a09e667
 8008020:	3c6ef372 	.word	0x3c6ef372
 8008024:	a54ff53a 	.word	0xa54ff53a
 8008028:	510e527f 	.word	0x510e527f
 800802c:	9b05688c 	.word	0x9b05688c
 8008030:	1f83d9ab 	.word	0x1f83d9ab

08008034 <tc_sha256_update>:
{
 8008034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008038:	460c      	mov	r4, r1
	if (s == (TCSha256State_t) 0 ||
 800803a:	4605      	mov	r5, r0
 800803c:	b110      	cbz	r0, 8008044 <tc_sha256_update+0x10>
 800803e:	b319      	cbz	r1, 8008088 <tc_sha256_update+0x54>
	} else if (datalen == 0) {
 8008040:	b912      	cbnz	r2, 8008048 <tc_sha256_update+0x14>
		return TC_CRYPTO_SUCCESS;
 8008042:	2001      	movs	r0, #1
}
 8008044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			s->leftover_offset = 0;
 8008048:	f04f 0800 	mov.w	r8, #0
 800804c:	188e      	adds	r6, r1, r2
			compress(s->iv, s->leftover);
 800804e:	f100 0728 	add.w	r7, r0, #40	; 0x28
	while (datalen-- > 0) {
 8008052:	42a6      	cmp	r6, r4
 8008054:	d0f5      	beq.n	8008042 <tc_sha256_update+0xe>
		s->leftover[s->leftover_offset++] = *(data++);
 8008056:	6eab      	ldr	r3, [r5, #104]	; 0x68
 8008058:	1c5a      	adds	r2, r3, #1
 800805a:	66aa      	str	r2, [r5, #104]	; 0x68
 800805c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008060:	442b      	add	r3, r5
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
 8008062:	2a3f      	cmp	r2, #63	; 0x3f
		s->leftover[s->leftover_offset++] = *(data++);
 8008064:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
 8008068:	d9f3      	bls.n	8008052 <tc_sha256_update+0x1e>
			compress(s->iv, s->leftover);
 800806a:	4639      	mov	r1, r7
 800806c:	4628      	mov	r0, r5
 800806e:	f7ff fed1 	bl	8007e14 <compress>
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
 8008072:	e9d5 2308 	ldrd	r2, r3, [r5, #32]
 8008076:	f512 7000 	adds.w	r0, r2, #512	; 0x200
 800807a:	f143 0100 	adc.w	r1, r3, #0
			s->leftover_offset = 0;
 800807e:	f8c5 8068 	str.w	r8, [r5, #104]	; 0x68
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
 8008082:	e9c5 0108 	strd	r0, r1, [r5, #32]
 8008086:	e7e4      	b.n	8008052 <tc_sha256_update+0x1e>
		return TC_CRYPTO_FAIL;
 8008088:	4608      	mov	r0, r1
 800808a:	e7db      	b.n	8008044 <tc_sha256_update+0x10>

0800808c <tc_sha256_final>:
{
 800808c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800808e:	460c      	mov	r4, r1
	if (digest == (uint8_t *) 0 ||
 8008090:	4605      	mov	r5, r0
 8008092:	2800      	cmp	r0, #0
 8008094:	d05d      	beq.n	8008152 <tc_sha256_final+0xc6>
 8008096:	2900      	cmp	r1, #0
 8008098:	d05c      	beq.n	8008154 <tc_sha256_final+0xc8>
	s->bits_hashed += (s->leftover_offset << 3);
 800809a:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 800809e:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80080a0:	00c8      	lsls	r0, r1, #3
 80080a2:	1816      	adds	r6, r2, r0
 80080a4:	f143 0700 	adc.w	r7, r3, #0
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
 80080a8:	2380      	movs	r3, #128	; 0x80
 80080aa:	1c48      	adds	r0, r1, #1
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
 80080ac:	2838      	cmp	r0, #56	; 0x38
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
 80080ae:	4421      	add	r1, r4
	s->bits_hashed += (s->leftover_offset << 3);
 80080b0:	e9c4 6708 	strd	r6, r7, [r4, #32]
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
 80080b4:	66a0      	str	r0, [r4, #104]	; 0x68
 80080b6:	f104 0628 	add.w	r6, r4, #40	; 0x28
 80080ba:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
 80080be:	d90b      	bls.n	80080d8 <tc_sha256_final+0x4c>
		_set(s->leftover + s->leftover_offset, 0x00,
 80080c0:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
 80080c4:	2100      	movs	r1, #0
 80080c6:	4430      	add	r0, r6
 80080c8:	f7ff fe0c 	bl	8007ce4 <_set>
		compress(s->iv, s->leftover);
 80080cc:	4631      	mov	r1, r6
 80080ce:	4620      	mov	r0, r4
 80080d0:	f7ff fea0 	bl	8007e14 <compress>
		s->leftover_offset = 0;
 80080d4:	2300      	movs	r3, #0
 80080d6:	66a3      	str	r3, [r4, #104]	; 0x68
	_set(s->leftover + s->leftover_offset, 0x00,
 80080d8:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80080da:	2100      	movs	r1, #0
 80080dc:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
 80080e0:	4430      	add	r0, r6
 80080e2:	f7ff fdff 	bl	8007ce4 <_set>
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
 80080e6:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
	s->leftover[sizeof(s->leftover) - 2] = (uint8_t)(s->bits_hashed >> 8);
 80080ea:	0a11      	lsrs	r1, r2, #8
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
 80080ec:	f884 2067 	strb.w	r2, [r4, #103]	; 0x67
	s->leftover[sizeof(s->leftover) - 2] = (uint8_t)(s->bits_hashed >> 8);
 80080f0:	f884 1066 	strb.w	r1, [r4, #102]	; 0x66
	s->leftover[sizeof(s->leftover) - 3] = (uint8_t)(s->bits_hashed >> 16);
 80080f4:	0c11      	lsrs	r1, r2, #16
	s->leftover[sizeof(s->leftover) - 4] = (uint8_t)(s->bits_hashed >> 24);
 80080f6:	0e12      	lsrs	r2, r2, #24
 80080f8:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
 80080fc:	0a1a      	lsrs	r2, r3, #8
	s->leftover[sizeof(s->leftover) - 5] = (uint8_t)(s->bits_hashed >> 32);
 80080fe:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
 8008102:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
 8008106:	0c1a      	lsrs	r2, r3, #16
	s->leftover[sizeof(s->leftover) - 8] = (uint8_t)(s->bits_hashed >> 56);
 8008108:	0e1b      	lsrs	r3, r3, #24
	s->leftover[sizeof(s->leftover) - 3] = (uint8_t)(s->bits_hashed >> 16);
 800810a:	f884 1065 	strb.w	r1, [r4, #101]	; 0x65
	s->leftover[sizeof(s->leftover) - 8] = (uint8_t)(s->bits_hashed >> 56);
 800810e:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	compress(s->iv, s->leftover);
 8008112:	4631      	mov	r1, r6
 8008114:	4620      	mov	r0, r4
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
 8008116:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
	compress(s->iv, s->leftover);
 800811a:	f7ff fe7b 	bl	8007e14 <compress>
 800811e:	1d2b      	adds	r3, r5, #4
 8008120:	1f21      	subs	r1, r4, #4
 8008122:	f105 0024 	add.w	r0, r5, #36	; 0x24
		unsigned int t = *((unsigned int *) &s->iv[i]);
 8008126:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800812a:	3304      	adds	r3, #4
		*digest++ = (uint8_t)(t >> 24);
 800812c:	0e15      	lsrs	r5, r2, #24
 800812e:	f803 5c08 	strb.w	r5, [r3, #-8]
		*digest++ = (uint8_t)(t >> 16);
 8008132:	0c15      	lsrs	r5, r2, #16
 8008134:	f803 5c07 	strb.w	r5, [r3, #-7]
		*digest++ = (uint8_t)(t >> 8);
 8008138:	0a15      	lsrs	r5, r2, #8
 800813a:	f803 5c06 	strb.w	r5, [r3, #-6]
		*digest++ = (uint8_t)(t);
 800813e:	f803 2c05 	strb.w	r2, [r3, #-5]
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
 8008142:	4283      	cmp	r3, r0
 8008144:	d1ef      	bne.n	8008126 <tc_sha256_final+0x9a>
	_set(s, 0, sizeof(*s));
 8008146:	4620      	mov	r0, r4
 8008148:	2270      	movs	r2, #112	; 0x70
 800814a:	2100      	movs	r1, #0
 800814c:	f7ff fdca 	bl	8007ce4 <_set>
	return TC_CRYPTO_SUCCESS;
 8008150:	2001      	movs	r0, #1
}
 8008152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
 8008154:	4608      	mov	r0, r1
 8008156:	e7fc      	b.n	8008152 <tc_sha256_final+0xc6>

08008158 <LL_GPIO_AF_DisableRemap_USART2>:
  * @note  DISABLE: No remap (CTS/PA0, RTS/PA1, TX/PA2, RX/PA3, CK/PA4)
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_DisableRemap_USART2(void)
{
  CLEAR_BIT(AFIO->MAPR, AFIO_MAPR_USART2_REMAP);
 8008158:	4a02      	ldr	r2, [pc, #8]	; (8008164 <LL_GPIO_AF_DisableRemap_USART2+0xc>)
 800815a:	6853      	ldr	r3, [r2, #4]
 800815c:	f023 0308 	bic.w	r3, r3, #8
 8008160:	6053      	str	r3, [r2, #4]
}
 8008162:	4770      	bx	lr
 8008164:	40010000 	.word	0x40010000

08008168 <hal_bsp_flash_dev>:
hal_bsp_flash_dev(uint8_t id)
{
    /*
     * Internal flash mapped to id 0.
     */
    if (id != 0) {
 8008168:	2800      	cmp	r0, #0
        return NULL;
    }
    return &stm32_flash_dev;
}
 800816a:	4802      	ldr	r0, [pc, #8]	; (8008174 <hal_bsp_flash_dev+0xc>)
 800816c:	bf18      	it	ne
 800816e:	2000      	movne	r0, #0
 8008170:	4770      	bx	lr
 8008172:	bf00      	nop
 8008174:	0800e068 	.word	0x0800e068

08008178 <hal_bsp_init>:
    }
}

void
hal_bsp_init(void)
{
 8008178:	b530      	push	{r4, r5, lr}
 800817a:	b093      	sub	sp, #76	; 0x4c
    RCC_ClkInitTypeDef clkinitstruct = { 0 };
 800817c:	2214      	movs	r2, #20
 800817e:	2100      	movs	r1, #0
 8008180:	a803      	add	r0, sp, #12
 8008182:	f7fe ff62 	bl	800704a <memset>
    RCC_OscInitTypeDef oscinitstruct = { 0 };
 8008186:	2220      	movs	r2, #32
 8008188:	2100      	movs	r1, #0
 800818a:	a809      	add	r0, sp, #36	; 0x24
 800818c:	f7fe ff5d 	bl	800704a <memset>
    oscinitstruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8008190:	2501      	movs	r5, #1
 8008192:	2310      	movs	r3, #16
    oscinitstruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8008194:	2402      	movs	r4, #2
    oscinitstruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8008196:	e9cd 530c 	strd	r5, r3, [sp, #48]	; 0x30
    oscinitstruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800819a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
    if (HAL_RCC_OscConfig(&oscinitstruct) != HAL_OK) {
 800819e:	a808      	add	r0, sp, #32
    oscinitstruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80081a0:	9408      	str	r4, [sp, #32]
    oscinitstruct.PLL.PLLState = RCC_PLL_ON;
 80081a2:	940f      	str	r4, [sp, #60]	; 0x3c
    oscinitstruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80081a4:	9311      	str	r3, [sp, #68]	; 0x44
    if (HAL_RCC_OscConfig(&oscinitstruct) != HAL_OK) {
 80081a6:	f001 f87d 	bl	80092a4 <HAL_RCC_OscConfig>
 80081aa:	b128      	cbz	r0, 80081b8 <hal_bsp_init+0x40>
        assert(0);
 80081ac:	2300      	movs	r3, #0
 80081ae:	461a      	mov	r2, r3
 80081b0:	4619      	mov	r1, r3
 80081b2:	4618      	mov	r0, r3
 80081b4:	f7fd fbae 	bl	8005914 <__assert_func>
    clkinitstruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK |
 80081b8:	230f      	movs	r3, #15
    clkinitstruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80081ba:	f44f 62a0 	mov.w	r2, #1280	; 0x500
    clkinitstruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80081be:	e9cd 3403 	strd	r3, r4, [sp, #12]
    clkinitstruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80081c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
    clkinitstruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80081c6:	9005      	str	r0, [sp, #20]
    if (HAL_RCC_ClockConfig(&clkinitstruct, FLASH_LATENCY_2) != HAL_OK) {
 80081c8:	4621      	mov	r1, r4
 80081ca:	a803      	add	r0, sp, #12
    clkinitstruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80081cc:	e9cd 3206 	strd	r3, r2, [sp, #24]
    if (HAL_RCC_ClockConfig(&clkinitstruct, FLASH_LATENCY_2) != HAL_OK) {
 80081d0:	f001 fa30 	bl	8009634 <HAL_RCC_ClockConfig>
 80081d4:	4603      	mov	r3, r0
 80081d6:	2800      	cmp	r0, #0
 80081d8:	d1e8      	bne.n	80081ac <hal_bsp_init+0x34>
    (void)rc;

    clock_config();

#if MYNEWT_VAL(UART_0)
    rc = os_dev_create((struct os_dev *) &hal_uart0, "uart0",
 80081da:	4a0b      	ldr	r2, [pc, #44]	; (8008208 <hal_bsp_init+0x90>)
 80081dc:	490b      	ldr	r1, [pc, #44]	; (800820c <hal_bsp_init+0x94>)
 80081de:	9201      	str	r2, [sp, #4]
 80081e0:	4a0b      	ldr	r2, [pc, #44]	; (8008210 <hal_bsp_init+0x98>)
 80081e2:	480c      	ldr	r0, [pc, #48]	; (8008214 <hal_bsp_init+0x9c>)
 80081e4:	9200      	str	r2, [sp, #0]
 80081e6:	462a      	mov	r2, r5
 80081e8:	f7fd fdb4 	bl	8005d54 <os_dev_create>
      OS_DEV_INIT_PRIMARY, 0, uart_hal_init, (void *)&uart_cfg[0]);
    assert(rc == 0);
 80081ec:	2800      	cmp	r0, #0
 80081ee:	d1dd      	bne.n	80081ac <hal_bsp_init+0x34>
#endif

#if MYNEWT_VAL(TIMER_0)
    hal_timer_init(0, TIM2);
 80081f0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80081f4:	f000 f9ec 	bl	80085d0 <hal_timer_init>
#if MYNEWT_VAL(TIMER_2)
    hal_timer_init(2, TIM4);
#endif

#if (MYNEWT_VAL(OS_CPUTIME_TIMER_NUM) >= 0)
    rc = os_cputime_init(MYNEWT_VAL(OS_CPUTIME_FREQ));
 80081f8:	4807      	ldr	r0, [pc, #28]	; (8008218 <hal_bsp_init+0xa0>)
 80081fa:	f7fd fd93 	bl	8005d24 <os_cputime_init>
    assert(rc == 0);
 80081fe:	2800      	cmp	r0, #0
 8008200:	d1d4      	bne.n	80081ac <hal_bsp_init+0x34>
#if MYNEWT_VAL(I2C_0)
    rc = hal_i2c_init(0, &i2c_cfg0);
    assert(rc == 0);
#endif

}
 8008202:	b013      	add	sp, #76	; 0x4c
 8008204:	bd30      	pop	{r4, r5, pc}
 8008206:	bf00      	nop
 8008208:	0800e050 	.word	0x0800e050
 800820c:	0800e048 	.word	0x0800e048
 8008210:	08008365 	.word	0x08008365
 8008214:	20002b08 	.word	0x20002b08
 8008218:	000f4240 	.word	0x000f4240

0800821c <adc_chan_config>:
 * @return 0 on success, non-zero error code on failure.
 */
int
adc_chan_config(struct adc_dev *dev, uint8_t cnum, void *data)
{
    assert(dev->ad_funcs->af_configure_channel != NULL);
 800821c:	6b03      	ldr	r3, [r0, #48]	; 0x30
{
 800821e:	b570      	push	{r4, r5, r6, lr}
    assert(dev->ad_funcs->af_configure_channel != NULL);
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	b923      	cbnz	r3, 800822e <adc_chan_config+0x12>
 8008224:	461a      	mov	r2, r3
 8008226:	4619      	mov	r1, r3
 8008228:	4618      	mov	r0, r3
 800822a:	f7fd fb73 	bl	8005914 <__assert_func>

    if (cnum >= dev->ad_chan_count) {
 800822e:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8008230:	42a1      	cmp	r1, r4
 8008232:	da02      	bge.n	800823a <adc_chan_config+0x1e>
        return (EINVAL);
    }

    return (dev->ad_funcs->af_configure_channel(dev, cnum, data));
}
 8008234:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return (dev->ad_funcs->af_configure_channel(dev, cnum, data));
 8008238:	4718      	bx	r3
}
 800823a:	2016      	movs	r0, #22
 800823c:	bd70      	pop	{r4, r5, r6, pc}

0800823e <uart_hal_resume>:
    return OS_OK;
}

static int
uart_hal_resume(struct os_dev *odev)
{
 800823e:	b513      	push	{r0, r1, r4, lr}
    struct uart_dev *dev = (struct uart_dev *)odev;
    struct uart_conf_port *ucp = &dev->ud_conf_port;
    int rc;

    rc = hal_uart_config(uart_hal_dev_get_id(dev), ucp->uc_speed,
 8008240:	f890 1037 	ldrb.w	r1, [r0, #55]	; 0x37
 8008244:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8008248:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
    return (intptr_t)(dev->ud_priv) - 1;
 800824c:	6b84      	ldr	r4, [r0, #56]	; 0x38
    rc = hal_uart_config(uart_hal_dev_get_id(dev), ucp->uc_speed,
 800824e:	9101      	str	r1, [sp, #4]
 8008250:	f890 1036 	ldrb.w	r1, [r0, #54]	; 0x36
 8008254:	9100      	str	r1, [sp, #0]
 8008256:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8008258:	1e60      	subs	r0, r4, #1
 800825a:	f000 fb65 	bl	8008928 <hal_uart_config>
    if (rc) {
        return OS_EINVAL;
    }

    return OS_OK;
}
 800825e:	2800      	cmp	r0, #0
 8008260:	bf14      	ite	ne
 8008262:	2002      	movne	r0, #2
 8008264:	2000      	moveq	r0, #0
 8008266:	b002      	add	sp, #8
 8008268:	bd10      	pop	{r4, pc}

0800826a <uart_hal_close>:
    return (intptr_t)(dev->ud_priv) - 1;
 800826a:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 800826c:	b508      	push	{r3, lr}
    rc = hal_uart_close(uart_hal_dev_get_id(dev));
 800826e:	3801      	subs	r0, #1
 8008270:	f000 fcb4 	bl	8008bdc <hal_uart_close>
}
 8008274:	2800      	cmp	r0, #0
 8008276:	bf14      	ite	ne
 8008278:	2002      	movne	r0, #2
 800827a:	2000      	moveq	r0, #0
 800827c:	bd08      	pop	{r3, pc}

0800827e <uart_hal_open>:
{
 800827e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008280:	4605      	mov	r5, r0
    assert(dev->ud_priv);
 8008282:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8008284:	4614      	mov	r4, r2
    assert(dev->ud_priv);
 8008286:	b920      	cbnz	r0, 8008292 <uart_hal_open+0x14>
 8008288:	4603      	mov	r3, r0
 800828a:	4602      	mov	r2, r0
 800828c:	4601      	mov	r1, r0
 800828e:	f7fd fb41 	bl	8005914 <__assert_func>
    if (!uc) {
 8008292:	b912      	cbnz	r2, 800829a <uart_hal_open+0x1c>
        return OS_EINVAL;
 8008294:	2002      	movs	r0, #2
}
 8008296:	b003      	add	sp, #12
 8008298:	bd30      	pop	{r4, r5, pc}
    if (odev->od_flags & OS_DEV_F_STATUS_OPEN) {
 800829a:	7eeb      	ldrb	r3, [r5, #27]
 800829c:	079b      	lsls	r3, r3, #30
 800829e:	d425      	bmi.n	80082ec <uart_hal_open+0x6e>
    dev->ud_conf_port.uc_databits = uc->uc_databits;
 80082a0:	7913      	ldrb	r3, [r2, #4]
    rc = hal_uart_init_cbs(uart_hal_dev_get_id(dev), uc->uc_tx_char, uc->uc_tx_done,
 80082a2:	3801      	subs	r0, #1
    dev->ud_conf_port.uc_databits = uc->uc_databits;
 80082a4:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
    dev->ud_conf_port.uc_flow_ctl = uc->uc_flow_ctl;
 80082a8:	79d3      	ldrb	r3, [r2, #7]
 80082aa:	f885 3037 	strb.w	r3, [r5, #55]	; 0x37
    dev->ud_conf_port.uc_parity = uc->uc_parity;
 80082ae:	7993      	ldrb	r3, [r2, #6]
 80082b0:	f885 3036 	strb.w	r3, [r5, #54]	; 0x36
    dev->ud_conf_port.uc_speed = uc->uc_speed;
 80082b4:	6813      	ldr	r3, [r2, #0]
 80082b6:	632b      	str	r3, [r5, #48]	; 0x30
    dev->ud_conf_port.uc_stopbits = uc->uc_stopbits;
 80082b8:	7953      	ldrb	r3, [r2, #5]
 80082ba:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
    rc = hal_uart_init_cbs(uart_hal_dev_get_id(dev), uc->uc_tx_char, uc->uc_tx_done,
 80082be:	6953      	ldr	r3, [r2, #20]
 80082c0:	68a1      	ldr	r1, [r4, #8]
 80082c2:	9300      	str	r3, [sp, #0]
 80082c4:	e9d2 3203 	ldrd	r3, r2, [r2, #12]
 80082c8:	f000 facc 	bl	8008864 <hal_uart_init_cbs>
    if (rc) {
 80082cc:	2800      	cmp	r0, #0
 80082ce:	d1e1      	bne.n	8008294 <uart_hal_open+0x16>
    rc = hal_uart_config(uart_hal_dev_get_id(dev), uc->uc_speed, uc->uc_databits,
 80082d0:	79e1      	ldrb	r1, [r4, #7]
    return (intptr_t)(dev->ud_priv) - 1;
 80082d2:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    rc = hal_uart_config(uart_hal_dev_get_id(dev), uc->uc_speed, uc->uc_databits,
 80082d4:	9101      	str	r1, [sp, #4]
 80082d6:	79a1      	ldrb	r1, [r4, #6]
 80082d8:	7963      	ldrb	r3, [r4, #5]
 80082da:	9100      	str	r1, [sp, #0]
 80082dc:	7922      	ldrb	r2, [r4, #4]
 80082de:	6821      	ldr	r1, [r4, #0]
 80082e0:	3801      	subs	r0, #1
 80082e2:	f000 fb21 	bl	8008928 <hal_uart_config>
    if (rc) {
 80082e6:	2800      	cmp	r0, #0
 80082e8:	d0d5      	beq.n	8008296 <uart_hal_open+0x18>
 80082ea:	e7d3      	b.n	8008294 <uart_hal_open+0x16>
        return OS_EBUSY;
 80082ec:	200b      	movs	r0, #11
 80082ee:	e7d2      	b.n	8008296 <uart_hal_open+0x18>

080082f0 <uart_hal_blocking_tx.part.2>:
uart_hal_blocking_tx(struct uart_dev *dev, uint8_t byte)
 80082f0:	b508      	push	{r3, lr}
    assert(dev->ud_priv);
 80082f2:	2300      	movs	r3, #0
 80082f4:	461a      	mov	r2, r3
 80082f6:	4619      	mov	r1, r3
 80082f8:	4618      	mov	r0, r3
 80082fa:	f7fd fb0b 	bl	8005914 <__assert_func>

080082fe <uart_hal_blocking_tx>:
 80082fe:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8008300:	b508      	push	{r3, lr}
    assert(dev->ud_priv);
 8008302:	b908      	cbnz	r0, 8008308 <uart_hal_blocking_tx+0xa>
 8008304:	f7ff fff4 	bl	80082f0 <uart_hal_blocking_tx.part.2>
    hal_uart_blocking_tx(uart_hal_dev_get_id(dev), byte);
 8008308:	3801      	subs	r0, #1
}
 800830a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    hal_uart_blocking_tx(uart_hal_dev_get_id(dev), byte);
 800830e:	f000 baf7 	b.w	8008900 <hal_uart_blocking_tx>

08008312 <uart_hal_start_rx>:
    assert(dev->ud_priv);
 8008312:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8008314:	b508      	push	{r3, lr}
    assert(dev->ud_priv);
 8008316:	b908      	cbnz	r0, 800831c <uart_hal_start_rx+0xa>
 8008318:	f7ff ffea 	bl	80082f0 <uart_hal_blocking_tx.part.2>
    hal_uart_start_rx(uart_hal_dev_get_id(dev));
 800831c:	3801      	subs	r0, #1
}
 800831e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    hal_uart_start_rx(uart_hal_dev_get_id(dev));
 8008322:	f000 bab5 	b.w	8008890 <hal_uart_start_rx>

08008326 <uart_hal_start_tx>:
    assert(dev->ud_priv);
 8008326:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8008328:	b508      	push	{r3, lr}
    assert(dev->ud_priv);
 800832a:	b908      	cbnz	r0, 8008330 <uart_hal_start_tx+0xa>
 800832c:	f7ff ffe0 	bl	80082f0 <uart_hal_blocking_tx.part.2>
    hal_uart_start_tx(uart_hal_dev_get_id(dev));
 8008330:	3801      	subs	r0, #1
}
 8008332:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    hal_uart_start_tx(uart_hal_dev_get_id(dev));
 8008336:	f000 bac9 	b.w	80088cc <hal_uart_start_tx>

0800833a <uart_hal_suspend>:
{
 800833a:	b570      	push	{r4, r5, r6, lr}
 800833c:	460c      	mov	r4, r1
 800833e:	4605      	mov	r5, r0
 8008340:	4616      	mov	r6, r2
    if (OS_TIME_TICK_GT(suspend_at, os_time_get()) || !force) {
 8008342:	f7fe fca5 	bl	8006c90 <os_time_get>
 8008346:	1a20      	subs	r0, r4, r0
 8008348:	2800      	cmp	r0, #0
 800834a:	dd01      	ble.n	8008350 <uart_hal_suspend+0x16>
        return OS_EINVAL;
 800834c:	2002      	movs	r0, #2
}
 800834e:	bd70      	pop	{r4, r5, r6, pc}
    if (OS_TIME_TICK_GT(suspend_at, os_time_get()) || !force) {
 8008350:	2e00      	cmp	r6, #0
 8008352:	d0fb      	beq.n	800834c <uart_hal_suspend+0x12>
    return (intptr_t)(dev->ud_priv) - 1;
 8008354:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    rc = hal_uart_close(uart_hal_dev_get_id(dev));
 8008356:	3801      	subs	r0, #1
 8008358:	f000 fc40 	bl	8008bdc <hal_uart_close>
    if (rc) {
 800835c:	2800      	cmp	r0, #0
 800835e:	d0f6      	beq.n	800834e <uart_hal_suspend+0x14>
 8008360:	e7f4      	b.n	800834c <uart_hal_suspend+0x12>
	...

08008364 <uart_hal_init>:
/*
 * Arg points to BSP specific UART configuration.
 */
int
uart_hal_init(struct os_dev *odev, void *arg)
{
 8008364:	b570      	push	{r4, r5, r6, lr}
    struct uart_dev *dev;
    char ch;

    dev = (struct uart_dev *)odev;

    ch = odev->od_name[strlen(odev->od_name) - 1];
 8008366:	69c5      	ldr	r5, [r0, #28]
{
 8008368:	4604      	mov	r4, r0
    ch = odev->od_name[strlen(odev->od_name) - 1];
 800836a:	4628      	mov	r0, r5
{
 800836c:	460e      	mov	r6, r1
    ch = odev->od_name[strlen(odev->od_name) - 1];
 800836e:	f7fe fe95 	bl	800709c <strlen>
 8008372:	4428      	add	r0, r5
 8008374:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    if (!isdigit((int) ch)) {
 8008378:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 800837c:	2809      	cmp	r0, #9
 800837e:	d814      	bhi.n	80083aa <uart_hal_init+0x46>
    dev->ud_priv = (void *)((intptr_t)(id + 1));
 8008380:	3b2f      	subs	r3, #47	; 0x2f
 8008382:	63a3      	str	r3, [r4, #56]	; 0x38
        return OS_EINVAL;
    }
    uart_hal_dev_set_id(dev, ch - '0');

    OS_DEV_SETHANDLERS(odev, uart_hal_open, uart_hal_close);
 8008384:	4b0a      	ldr	r3, [pc, #40]	; (80083b0 <uart_hal_init+0x4c>)

    dev->ud_funcs.uf_start_tx = uart_hal_start_tx;
    dev->ud_funcs.uf_start_rx = uart_hal_start_rx;
    dev->ud_funcs.uf_blocking_tx = uart_hal_blocking_tx;

    hal_uart_init(uart_hal_dev_get_id(dev), arg);
 8008386:	4631      	mov	r1, r6
    OS_DEV_SETHANDLERS(odev, uart_hal_open, uart_hal_close);
 8008388:	6023      	str	r3, [r4, #0]
 800838a:	4b0a      	ldr	r3, [pc, #40]	; (80083b4 <uart_hal_init+0x50>)
 800838c:	60e3      	str	r3, [r4, #12]
    odev->od_handlers.od_suspend = uart_hal_suspend;
 800838e:	4b0a      	ldr	r3, [pc, #40]	; (80083b8 <uart_hal_init+0x54>)
 8008390:	6063      	str	r3, [r4, #4]
    odev->od_handlers.od_resume = uart_hal_resume;
 8008392:	4b0a      	ldr	r3, [pc, #40]	; (80083bc <uart_hal_init+0x58>)
 8008394:	60a3      	str	r3, [r4, #8]
    dev->ud_funcs.uf_start_tx = uart_hal_start_tx;
 8008396:	4b0a      	ldr	r3, [pc, #40]	; (80083c0 <uart_hal_init+0x5c>)
 8008398:	6263      	str	r3, [r4, #36]	; 0x24
    dev->ud_funcs.uf_start_rx = uart_hal_start_rx;
 800839a:	4b0a      	ldr	r3, [pc, #40]	; (80083c4 <uart_hal_init+0x60>)
 800839c:	62a3      	str	r3, [r4, #40]	; 0x28
    dev->ud_funcs.uf_blocking_tx = uart_hal_blocking_tx;
 800839e:	4b0a      	ldr	r3, [pc, #40]	; (80083c8 <uart_hal_init+0x64>)
 80083a0:	62e3      	str	r3, [r4, #44]	; 0x2c
    hal_uart_init(uart_hal_dev_get_id(dev), arg);
 80083a2:	f000 fc0d 	bl	8008bc0 <hal_uart_init>

    return OS_OK;
 80083a6:	2000      	movs	r0, #0
}
 80083a8:	bd70      	pop	{r4, r5, r6, pc}
        return OS_EINVAL;
 80083aa:	2002      	movs	r0, #2
 80083ac:	e7fc      	b.n	80083a8 <uart_hal_init+0x44>
 80083ae:	bf00      	nop
 80083b0:	0800827f 	.word	0x0800827f
 80083b4:	0800826b 	.word	0x0800826b
 80083b8:	0800833b 	.word	0x0800833b
 80083bc:	0800823f 	.word	0x0800823f
 80083c0:	08008327 	.word	0x08008327
 80083c4:	08008313 	.word	0x08008313
 80083c8:	080082ff 	.word	0x080082ff

080083cc <stm32_flash_sector_info>:
        uint32_t *address, uint32_t *sz)
{
    (void)dev;

#if FLASH_IS_LINEAR
    *address = dev->hf_base_addr + _FLASH_SECTOR_SIZE * idx;
 80083cc:	6840      	ldr	r0, [r0, #4]
 80083ce:	eb00 2181 	add.w	r1, r0, r1, lsl #10
 80083d2:	6011      	str	r1, [r2, #0]
    *sz = _FLASH_SECTOR_SIZE;
 80083d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
    *address = stm32_flash_sectors[idx];
    *sz = stm32_flash_sectors[idx + 1] - stm32_flash_sectors[idx];
#endif

    return 0;
}
 80083d8:	2000      	movs	r0, #0
    *sz = _FLASH_SECTOR_SIZE;
 80083da:	601a      	str	r2, [r3, #0]
}
 80083dc:	4770      	bx	lr

080083de <stm32_flash_init>:

static int
stm32_flash_init(const struct hal_flash *dev)
{
 80083de:	b508      	push	{r3, lr}
    (void)dev;
    STM32_HAL_FLASH_INIT();
 80083e0:	f000 fcec 	bl	8008dbc <HAL_FLASH_Unlock>
    return 0;
}
 80083e4:	2000      	movs	r0, #0
 80083e6:	bd08      	pop	{r3, pc}

080083e8 <stm32_flash_erase_sector>:
    return stm32_mcu_flash_erase_sector(dev, sector_address);
 80083e8:	f001 ba48 	b.w	800987c <stm32_mcu_flash_erase_sector>

080083ec <stm32_flash_read>:
{
 80083ec:	b508      	push	{r3, lr}
 80083ee:	4610      	mov	r0, r2
    memcpy(dst, (void *)address, num_bytes);
 80083f0:	461a      	mov	r2, r3
 80083f2:	f7fe fe1d 	bl	8007030 <memcpy>
}
 80083f6:	2000      	movs	r0, #0
 80083f8:	bd08      	pop	{r3, pc}
	...

080083fc <stm32_flash_write>:
{
 80083fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008400:	4682      	mov	sl, r0
 8008402:	b087      	sub	sp, #28
 8008404:	4688      	mov	r8, r1
 8008406:	4693      	mov	fp, r2
    if (!num_bytes) {
 8008408:	2b00      	cmp	r3, #0
 800840a:	d043      	beq.n	8008494 <stm32_flash_write+0x98>
    STM32_HAL_FLASH_CLEAR_ERRORS();
 800840c:	2135      	movs	r1, #53	; 0x35
 800840e:	4646      	mov	r6, r8
 8008410:	461c      	mov	r4, r3
    for (i = 0; i < num_words; i++) {
 8008412:	2700      	movs	r7, #0
    num_words = ((num_bytes - 1) >> 1) + 1;
 8008414:	1e5a      	subs	r2, r3, #1
 8008416:	0852      	lsrs	r2, r2, #1
 8008418:	3201      	adds	r2, #1
    align = dev->hf_align;
 800841a:	6905      	ldr	r5, [r0, #16]
    num_words = ((num_bytes - 1) >> 1) + 1;
 800841c:	9201      	str	r2, [sp, #4]
    STM32_HAL_FLASH_CLEAR_ERRORS();
 800841e:	4a1f      	ldr	r2, [pc, #124]	; (800849c <stm32_flash_write+0xa0>)
        if (num_bytes < align) {
 8008420:	b2ed      	uxtb	r5, r5
    STM32_HAL_FLASH_CLEAR_ERRORS();
 8008422:	60d1      	str	r1, [r2, #12]
 8008424:	eb03 0208 	add.w	r2, r3, r8
 8008428:	a904      	add	r1, sp, #16
 800842a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
            memset((uint32_t *)&val + num_bytes, dev->hf_erased_val, align - num_bytes);
 800842e:	eba5 0903 	sub.w	r9, r5, r3
 8008432:	9202      	str	r2, [sp, #8]
 8008434:	eba9 0908 	sub.w	r9, r9, r8
 8008438:	ebab 0108 	sub.w	r1, fp, r8
        if (num_bytes < align) {
 800843c:	42a5      	cmp	r5, r4
 800843e:	4431      	add	r1, r6
 8008440:	d923      	bls.n	800848a <stm32_flash_write+0x8e>
            memcpy(&val, &((uint8_t *)src)[i * align], num_bytes);
 8008442:	4622      	mov	r2, r4
 8008444:	a804      	add	r0, sp, #16
 8008446:	f7fe fdf3 	bl	8007030 <memcpy>
            memset((uint32_t *)&val + num_bytes, dev->hf_erased_val, align - num_bytes);
 800844a:	9b02      	ldr	r3, [sp, #8]
 800844c:	eb09 0206 	add.w	r2, r9, r6
 8008450:	f89a 1014 	ldrb.w	r1, [sl, #20]
 8008454:	eba3 0086 	sub.w	r0, r3, r6, lsl #2
 8008458:	f7fe fdf7 	bl	800704a <memset>
        rc = HAL_FLASH_Program(FLASH_PROGRAM_TYPE, address, val);
 800845c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008460:	4631      	mov	r1, r6
 8008462:	2001      	movs	r0, #1
 8008464:	f000 fce6 	bl	8008e34 <HAL_FLASH_Program>
        if (rc != HAL_OK) {
 8008468:	b960      	cbnz	r0, 8008484 <stm32_flash_write+0x88>
        if (!(i % 32)) {
 800846a:	06fb      	lsls	r3, r7, #27
        address += align;
 800846c:	442e      	add	r6, r5
        num_bytes -= align;
 800846e:	eba4 0405 	sub.w	r4, r4, r5
        if (!(i % 32)) {
 8008472:	d103      	bne.n	800847c <stm32_flash_write+0x80>
 8008474:	9003      	str	r0, [sp, #12]
            hal_watchdog_tickle();
 8008476:	f000 fbe9 	bl	8008c4c <hal_watchdog_tickle>
 800847a:	9803      	ldr	r0, [sp, #12]
    for (i = 0; i < num_words; i++) {
 800847c:	9b01      	ldr	r3, [sp, #4]
 800847e:	3701      	adds	r7, #1
 8008480:	42bb      	cmp	r3, r7
 8008482:	d8d9      	bhi.n	8008438 <stm32_flash_write+0x3c>
}
 8008484:	b007      	add	sp, #28
 8008486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            memcpy(&val, &((uint8_t *)src)[i * align], align);
 800848a:	462a      	mov	r2, r5
 800848c:	a804      	add	r0, sp, #16
 800848e:	f7fe fdcf 	bl	8007030 <memcpy>
 8008492:	e7e3      	b.n	800845c <stm32_flash_write+0x60>
        return -1;
 8008494:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008498:	e7f4      	b.n	8008484 <stm32_flash_write+0x88>
 800849a:	bf00      	nop
 800849c:	40022000 	.word	0x40022000

080084a0 <os_tick_idle>:
/*
 * XXX implement tickless mode.
 */
void
os_tick_idle(os_time_t ticks)
{
 80084a0:	b508      	push	{r3, lr}
    OS_ASSERT_CRITICAL();
 80084a2:	f7fd f97e 	bl	80057a2 <os_arch_in_critical>
 80084a6:	4603      	mov	r3, r0
 80084a8:	b918      	cbnz	r0, 80084b2 <os_tick_idle+0x12>
 80084aa:	4602      	mov	r2, r0
 80084ac:	4601      	mov	r1, r0
 80084ae:	f7fd fa31 	bl	8005914 <__assert_func>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80084b2:	f3bf 8f4f 	dsb	sy
    __DSB();
    __WFI();
 80084b6:	bf30      	wfi
}
 80084b8:	bd08      	pop	{r3, pc}
	...

080084bc <os_tick_init>:
void
os_tick_init(uint32_t os_ticks_per_sec, int prio)
{
    uint32_t reload_val;

    reload_val = ((uint64_t)SystemCoreClock / os_ticks_per_sec) - 1;
 80084bc:	4b0a      	ldr	r3, [pc, #40]	; (80084e8 <os_tick_init+0x2c>)

    /* Set the system time ticker up */
    SysTick->LOAD = reload_val;
    SysTick->VAL = 0;
 80084be:	2200      	movs	r2, #0
    reload_val = ((uint64_t)SystemCoreClock / os_ticks_per_sec) - 1;
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	0109      	lsls	r1, r1, #4
 80084c4:	fbb3 f0f0 	udiv	r0, r3, r0
    SysTick->LOAD = reload_val;
 80084c8:	4b08      	ldr	r3, [pc, #32]	; (80084ec <os_tick_init+0x30>)
    reload_val = ((uint64_t)SystemCoreClock / os_ticks_per_sec) - 1;
 80084ca:	3801      	subs	r0, #1
    SysTick->LOAD = reload_val;
 80084cc:	6058      	str	r0, [r3, #4]
    SysTick->VAL = 0;
 80084ce:	609a      	str	r2, [r3, #8]
    SysTick->CTRL = 0x0007;
 80084d0:	2207      	movs	r2, #7
 80084d2:	b2c9      	uxtb	r1, r1
 80084d4:	601a      	str	r2, [r3, #0]

    /*
     * Keep clocking debug even when CPU is sleeping, stopped or in standby.
     */
#if !MYNEWT_VAL(MCU_STM32F0)
    DBGMCU->CR |= (DBGMCU_CR_DBG_SLEEP | DBGMCU_CR_DBG_STOP | DBGMCU_CR_DBG_STANDBY);
 80084d6:	4a06      	ldr	r2, [pc, #24]	; (80084f0 <os_tick_init+0x34>)
 80084d8:	f883 1d13 	strb.w	r1, [r3, #3347]	; 0xd13
 80084dc:	6853      	ldr	r3, [r2, #4]
 80084de:	f043 0307 	orr.w	r3, r3, #7
 80084e2:	6053      	str	r3, [r2, #4]
#else
    DBGMCU->CR |= (DBGMCU_CR_DBG_STOP | DBGMCU_CR_DBG_STANDBY);
#endif
}
 80084e4:	4770      	bx	lr
 80084e6:	bf00      	nop
 80084e8:	20000110 	.word	0x20000110
 80084ec:	e000e010 	.word	0xe000e010
 80084f0:	e0042000 	.word	0xe0042000

080084f4 <hal_system_reset>:
 80084f4:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80084f8:	4905      	ldr	r1, [pc, #20]	; (8008510 <hal_system_reset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80084fa:	4b06      	ldr	r3, [pc, #24]	; (8008514 <hal_system_reset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80084fc:	68ca      	ldr	r2, [r1, #12]
 80084fe:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8008502:	4313      	orrs	r3, r2
 8008504:	60cb      	str	r3, [r1, #12]
 8008506:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800850a:	bf00      	nop
 800850c:	e7fd      	b.n	800850a <hal_system_reset+0x16>
 800850e:	bf00      	nop
 8008510:	e000ed00 	.word	0xe000ed00
 8008514:	05fa0004 	.word	0x05fa0004

08008518 <hal_debugger_connected>:
int
hal_debugger_connected(void)
{
    /* FIXME */
    return 0;
}
 8008518:	2000      	movs	r0, #0
 800851a:	4770      	bx	lr

0800851c <HAL_GetTick>:

uint32_t
HAL_GetTick(void)
{
    return os_time_get();
 800851c:	f7fe bbb8 	b.w	8006c90 <os_time_get>

08008520 <HAL_InitTick>:

HAL_StatusTypeDef
HAL_InitTick (uint32_t TickPriority)
{
    return HAL_OK;
}
 8008520:	2000      	movs	r0, #0
 8008522:	4770      	bx	lr

08008524 <hal_timer_cnt>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008524:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8008528:	b672      	cpsid	i
{
    uint32_t cnt;
    int sr;

    __HAL_DISABLE_INTERRUPTS(sr);
    if (tmr->sht_regs->SR & TIM_SR_UIF) {
 800852a:	6803      	ldr	r3, [r0, #0]
 800852c:	691a      	ldr	r2, [r3, #16]
 800852e:	07d2      	lsls	r2, r2, #31
 8008530:	d507      	bpl.n	8008542 <hal_timer_cnt+0x1e>
        /*
         * Just overflowed
         */
        tmr->sht_oflow += STM32_OFLOW_VALUE;
 8008532:	6842      	ldr	r2, [r0, #4]
 8008534:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8008538:	6042      	str	r2, [r0, #4]
        tmr->sht_regs->SR &= ~TIM_SR_UIF;
 800853a:	691a      	ldr	r2, [r3, #16]
 800853c:	f022 0201 	bic.w	r2, r2, #1
 8008540:	611a      	str	r2, [r3, #16]
    }
    cnt = tmr->sht_oflow + tmr->sht_regs->CNT;
 8008542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008544:	6840      	ldr	r0, [r0, #4]
 8008546:	4418      	add	r0, r3
    __HAL_ENABLE_INTERRUPTS(sr);
 8008548:	b901      	cbnz	r1, 800854c <hal_timer_cnt+0x28>
  __ASM volatile ("cpsie i" : : : "memory");
 800854a:	b662      	cpsie	i

    return cnt;
}
 800854c:	4770      	bx	lr
	...

08008550 <stm32_tmr0_irq>:
{
 8008550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    sr = tmr->sht_regs->SR;
 8008554:	4c1d      	ldr	r4, [pc, #116]	; (80085cc <stm32_tmr0_irq+0x7c>)
 8008556:	6823      	ldr	r3, [r4, #0]
 8008558:	691b      	ldr	r3, [r3, #16]
    if (sr & TIM_SR_UIF) {
 800855a:	f013 0501 	ands.w	r5, r3, #1
        tmr->sht_oflow += STM32_OFLOW_VALUE;
 800855e:	bf1f      	itttt	ne
 8008560:	6862      	ldrne	r2, [r4, #4]
        clr |= TIM_SR_UIF;
 8008562:	2501      	movne	r5, #1
        tmr->sht_oflow += STM32_OFLOW_VALUE;
 8008564:	f502 3280 	addne.w	r2, r2, #65536	; 0x10000
 8008568:	6062      	strne	r2, [r4, #4]
    if (sr & TIM_SR_CC1IF) {
 800856a:	079b      	lsls	r3, r3, #30
 800856c:	d529      	bpl.n	80085c2 <stm32_tmr0_irq+0x72>
            ht->link.tqe_prev = NULL;
 800856e:	f04f 0800 	mov.w	r8, #0
        cnt = hal_timer_cnt(tmr);
 8008572:	4f16      	ldr	r7, [pc, #88]	; (80085cc <stm32_tmr0_irq+0x7c>)
        clr |= TIM_SR_CC1IF;
 8008574:	f045 0502 	orr.w	r5, r5, #2
    while ((ht = TAILQ_FIRST(&tmr->sht_timers)) != NULL) {
 8008578:	68a6      	ldr	r6, [r4, #8]
 800857a:	b136      	cbz	r6, 800858a <stm32_tmr0_irq+0x3a>
        cnt = hal_timer_cnt(tmr);
 800857c:	4638      	mov	r0, r7
 800857e:	f7ff ffd1 	bl	8008524 <hal_timer_cnt>
        if (((int32_t)(cnt - ht->expiry)) >= 0) {
 8008582:	68f3      	ldr	r3, [r6, #12]
 8008584:	1ac0      	subs	r0, r0, r3
 8008586:	2800      	cmp	r0, #0
 8008588:	da0b      	bge.n	80085a2 <stm32_tmr0_irq+0x52>
    ht = TAILQ_FIRST(&tmr->sht_timers);
 800858a:	68a2      	ldr	r2, [r4, #8]
 800858c:	6820      	ldr	r0, [r4, #0]
    if (ht) {
 800858e:	b9b2      	cbnz	r2, 80085be <stm32_tmr0_irq+0x6e>
        TIM_CCxChannelCmd(tmr->sht_regs, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8008590:	4611      	mov	r1, r2
 8008592:	f001 f967 	bl	8009864 <TIM_CCxChannelCmd>
        tmr->sht_regs->DIER &= ~TIM_DIER_CC1IE;
 8008596:	6822      	ldr	r2, [r4, #0]
 8008598:	68d3      	ldr	r3, [r2, #12]
 800859a:	f023 0302 	bic.w	r3, r3, #2
 800859e:	60d3      	str	r3, [r2, #12]
 80085a0:	e00f      	b.n	80085c2 <stm32_tmr0_irq+0x72>
 80085a2:	e9d6 3204 	ldrd	r3, r2, [r6, #16]
            TAILQ_REMOVE(&tmr->sht_timers, ht, link);
 80085a6:	b143      	cbz	r3, 80085ba <stm32_tmr0_irq+0x6a>
 80085a8:	615a      	str	r2, [r3, #20]
 80085aa:	6972      	ldr	r2, [r6, #20]
 80085ac:	6013      	str	r3, [r2, #0]
            ht->cb_func(ht->cb_arg);
 80085ae:	e9d6 3001 	ldrd	r3, r0, [r6, #4]
            ht->link.tqe_prev = NULL;
 80085b2:	f8c6 8014 	str.w	r8, [r6, #20]
            ht->cb_func(ht->cb_arg);
 80085b6:	4798      	blx	r3
 80085b8:	e7de      	b.n	8008578 <stm32_tmr0_irq+0x28>
            TAILQ_REMOVE(&tmr->sht_timers, ht, link);
 80085ba:	60e2      	str	r2, [r4, #12]
 80085bc:	e7f5      	b.n	80085aa <stm32_tmr0_irq+0x5a>
        tmr->sht_regs->CCR1 = ht->expiry;
 80085be:	68d3      	ldr	r3, [r2, #12]
 80085c0:	6343      	str	r3, [r0, #52]	; 0x34
    tmr->sht_regs->SR = ~clr;
 80085c2:	43ed      	mvns	r5, r5
 80085c4:	6823      	ldr	r3, [r4, #0]
 80085c6:	611d      	str	r5, [r3, #16]
}
 80085c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085cc:	200034fc 	.word	0x200034fc

080085d0 <hal_timer_init>:
    if (num >= STM32_HAL_TIMER_MAX || !(tmr = stm32_tmr_devs[num]) ||
 80085d0:	2802      	cmp	r0, #2
{
 80085d2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if (num >= STM32_HAL_TIMER_MAX || !(tmr = stm32_tmr_devs[num]) ||
 80085d4:	dd04      	ble.n	80085e0 <hal_timer_init+0x10>
        return -1;
 80085d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80085da:	b005      	add	sp, #20
 80085dc:	f85d fb04 	ldr.w	pc, [sp], #4
    if (num >= STM32_HAL_TIMER_MAX || !(tmr = stm32_tmr_devs[num]) ||
 80085e0:	4b49      	ldr	r3, [pc, #292]	; (8008708 <hal_timer_init+0x138>)
 80085e2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d0f5      	beq.n	80085d6 <hal_timer_init+0x6>
 80085ea:	2900      	cmp	r1, #0
 80085ec:	d0f3      	beq.n	80085d6 <hal_timer_init+0x6>
    regs = tmr->sht_regs = (TIM_TypeDef *)cfg;
 80085ee:	6019      	str	r1, [r3, #0]
    if (!IS_TIM_CC1_INSTANCE(regs)) {
 80085f0:	4b46      	ldr	r3, [pc, #280]	; (800870c <hal_timer_init+0x13c>)
 80085f2:	4299      	cmp	r1, r3
 80085f4:	d04c      	beq.n	8008690 <hal_timer_init+0xc0>
 80085f6:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 80085fa:	d041      	beq.n	8008680 <hal_timer_init+0xb0>
 80085fc:	f5a3 3394 	sub.w	r3, r3, #75776	; 0x12800
 8008600:	4299      	cmp	r1, r3
 8008602:	d063      	beq.n	80086cc <hal_timer_init+0xfc>
 8008604:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008608:	4299      	cmp	r1, r3
 800860a:	d1e4      	bne.n	80085d6 <hal_timer_init+0x6>
    switch (num) {
 800860c:	2800      	cmp	r0, #0
 800860e:	d139      	bne.n	8008684 <hal_timer_init+0xb4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008610:	22f0      	movs	r2, #240	; 0xf0
 8008612:	4b3f      	ldr	r3, [pc, #252]	; (8008710 <hal_timer_init+0x140>)
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 8008614:	493f      	ldr	r1, [pc, #252]	; (8008714 <hal_timer_init+0x144>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008616:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
  uint32_t vectors = (uint32_t )SCB->VTOR;
 800861a:	4a3f      	ldr	r2, [pc, #252]	; (8008718 <hal_timer_init+0x148>)
    return 0;
 800861c:	2000      	movs	r0, #0
 800861e:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 8008620:	f8c2 10b8 	str.w	r1, [r2, #184]	; 0xb8
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008624:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8008628:	601a      	str	r2, [r3, #0]
        __HAL_RCC_TIM4_CLK_ENABLE();
 800862a:	4b3c      	ldr	r3, [pc, #240]	; (800871c <hal_timer_init+0x14c>)
 800862c:	69da      	ldr	r2, [r3, #28]
 800862e:	f042 0204 	orr.w	r2, r2, #4
 8008632:	61da      	str	r2, [r3, #28]
 8008634:	69db      	ldr	r3, [r3, #28]
        __HAL_DBGMCU_FREEZE_TIM4();
 8008636:	4a3a      	ldr	r2, [pc, #232]	; (8008720 <hal_timer_init+0x150>)
        __HAL_RCC_TIM4_CLK_ENABLE();
 8008638:	f003 0304 	and.w	r3, r3, #4
 800863c:	9303      	str	r3, [sp, #12]
 800863e:	9b03      	ldr	r3, [sp, #12]
        __HAL_DBGMCU_FREEZE_TIM4();
 8008640:	6853      	ldr	r3, [r2, #4]
 8008642:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008646:	6053      	str	r3, [r2, #4]
 8008648:	e7c7      	b.n	80085da <hal_timer_init+0xa>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800864a:	22f0      	movs	r2, #240	; 0xf0
 800864c:	4b30      	ldr	r3, [pc, #192]	; (8008710 <hal_timer_init+0x140>)
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 800864e:	4931      	ldr	r1, [pc, #196]	; (8008714 <hal_timer_init+0x144>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008650:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  uint32_t vectors = (uint32_t )SCB->VTOR;
 8008654:	4a30      	ldr	r2, [pc, #192]	; (8008718 <hal_timer_init+0x148>)
 8008656:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 8008658:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800865c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008660:	601a      	str	r2, [r3, #0]
        __HAL_RCC_TIM2_CLK_ENABLE();
 8008662:	4b2e      	ldr	r3, [pc, #184]	; (800871c <hal_timer_init+0x14c>)
 8008664:	69da      	ldr	r2, [r3, #28]
 8008666:	f042 0201 	orr.w	r2, r2, #1
 800866a:	61da      	str	r2, [r3, #28]
 800866c:	69db      	ldr	r3, [r3, #28]
        __HAL_DBGMCU_FREEZE_TIM2();
 800866e:	4a2c      	ldr	r2, [pc, #176]	; (8008720 <hal_timer_init+0x150>)
        __HAL_RCC_TIM2_CLK_ENABLE();
 8008670:	f003 0301 	and.w	r3, r3, #1
 8008674:	9301      	str	r3, [sp, #4]
 8008676:	9b01      	ldr	r3, [sp, #4]
        __HAL_DBGMCU_FREEZE_TIM2();
 8008678:	6853      	ldr	r3, [r2, #4]
 800867a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800867e:	e023      	b.n	80086c8 <hal_timer_init+0xf8>
    switch (num) {
 8008680:	2800      	cmp	r0, #0
 8008682:	d0e2      	beq.n	800864a <hal_timer_init+0x7a>
        assert(0);
 8008684:	2300      	movs	r3, #0
 8008686:	461a      	mov	r2, r3
 8008688:	4619      	mov	r1, r3
 800868a:	4618      	mov	r0, r3
 800868c:	f7fd f942 	bl	8005914 <__assert_func>
    switch (num) {
 8008690:	2800      	cmp	r0, #0
 8008692:	d1f7      	bne.n	8008684 <hal_timer_init+0xb4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008694:	22f0      	movs	r2, #240	; 0xf0
 8008696:	4b1e      	ldr	r3, [pc, #120]	; (8008710 <hal_timer_init+0x140>)
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 8008698:	491e      	ldr	r1, [pc, #120]	; (8008714 <hal_timer_init+0x144>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800869a:	f883 2319 	strb.w	r2, [r3, #793]	; 0x319
  uint32_t vectors = (uint32_t )SCB->VTOR;
 800869e:	4a1e      	ldr	r2, [pc, #120]	; (8008718 <hal_timer_init+0x148>)
 80086a0:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 80086a2:	f8c2 10a4 	str.w	r1, [r2, #164]	; 0xa4
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80086a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80086aa:	601a      	str	r2, [r3, #0]
        __HAL_RCC_TIM1_CLK_ENABLE();
 80086ac:	4b1b      	ldr	r3, [pc, #108]	; (800871c <hal_timer_init+0x14c>)
 80086ae:	699a      	ldr	r2, [r3, #24]
 80086b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80086b4:	619a      	str	r2, [r3, #24]
 80086b6:	699b      	ldr	r3, [r3, #24]
        __HAL_DBGMCU_FREEZE_TIM1();
 80086b8:	4a19      	ldr	r2, [pc, #100]	; (8008720 <hal_timer_init+0x150>)
        __HAL_RCC_TIM1_CLK_ENABLE();
 80086ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80086be:	9300      	str	r3, [sp, #0]
 80086c0:	9b00      	ldr	r3, [sp, #0]
        __HAL_DBGMCU_FREEZE_TIM1();
 80086c2:	6853      	ldr	r3, [r2, #4]
 80086c4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
        __HAL_DBGMCU_FREEZE_TIM3();
 80086c8:	6053      	str	r3, [r2, #4]
 80086ca:	e786      	b.n	80085da <hal_timer_init+0xa>
    switch (num) {
 80086cc:	2800      	cmp	r0, #0
 80086ce:	d1d9      	bne.n	8008684 <hal_timer_init+0xb4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80086d0:	22f0      	movs	r2, #240	; 0xf0
 80086d2:	4b0f      	ldr	r3, [pc, #60]	; (8008710 <hal_timer_init+0x140>)
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 80086d4:	490f      	ldr	r1, [pc, #60]	; (8008714 <hal_timer_init+0x144>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80086d6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  uint32_t vectors = (uint32_t )SCB->VTOR;
 80086da:	4a0f      	ldr	r2, [pc, #60]	; (8008718 <hal_timer_init+0x148>)
 80086dc:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 80086de:	f8c2 10b4 	str.w	r1, [r2, #180]	; 0xb4
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80086e2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80086e6:	601a      	str	r2, [r3, #0]
        __HAL_RCC_TIM3_CLK_ENABLE();
 80086e8:	4b0c      	ldr	r3, [pc, #48]	; (800871c <hal_timer_init+0x14c>)
 80086ea:	69da      	ldr	r2, [r3, #28]
 80086ec:	f042 0202 	orr.w	r2, r2, #2
 80086f0:	61da      	str	r2, [r3, #28]
 80086f2:	69db      	ldr	r3, [r3, #28]
        __HAL_DBGMCU_FREEZE_TIM3();
 80086f4:	4a0a      	ldr	r2, [pc, #40]	; (8008720 <hal_timer_init+0x150>)
        __HAL_RCC_TIM3_CLK_ENABLE();
 80086f6:	f003 0302 	and.w	r3, r3, #2
 80086fa:	9302      	str	r3, [sp, #8]
 80086fc:	9b02      	ldr	r3, [sp, #8]
        __HAL_DBGMCU_FREEZE_TIM3();
 80086fe:	6853      	ldr	r3, [r2, #4]
 8008700:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008704:	e7e0      	b.n	80086c8 <hal_timer_init+0xf8>
 8008706:	bf00      	nop
 8008708:	0800e09c 	.word	0x0800e09c
 800870c:	40012c00 	.word	0x40012c00
 8008710:	e000e100 	.word	0xe000e100
 8008714:	08008551 	.word	0x08008551
 8008718:	e000ed00 	.word	0xe000ed00
 800871c:	40021000 	.word	0x40021000
 8008720:	e0042000 	.word	0xe0042000

08008724 <hal_timer_config>:
{
 8008724:	b530      	push	{r4, r5, lr}
    if (num >= STM32_HAL_TIMER_MAX || !(tmr = stm32_tmr_devs[num])) {
 8008726:	2802      	cmp	r0, #2
{
 8008728:	b087      	sub	sp, #28
 800872a:	460d      	mov	r5, r1
    if (num >= STM32_HAL_TIMER_MAX || !(tmr = stm32_tmr_devs[num])) {
 800872c:	dd03      	ble.n	8008736 <hal_timer_config+0x12>
        return -1;
 800872e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8008732:	b007      	add	sp, #28
 8008734:	bd30      	pop	{r4, r5, pc}
    if (num >= STM32_HAL_TIMER_MAX || !(tmr = stm32_tmr_devs[num])) {
 8008736:	4b1a      	ldr	r3, [pc, #104]	; (80087a0 <hal_timer_config+0x7c>)
 8008738:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 800873c:	2c00      	cmp	r4, #0
 800873e:	d0f6      	beq.n	800872e <hal_timer_config+0xa>
    if (!IS_TIM_CC1_INSTANCE(tmr->sht_regs)) {
 8008740:	6820      	ldr	r0, [r4, #0]
 8008742:	4b18      	ldr	r3, [pc, #96]	; (80087a4 <hal_timer_config+0x80>)
 8008744:	4298      	cmp	r0, r3
 8008746:	d00a      	beq.n	800875e <hal_timer_config+0x3a>
 8008748:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800874c:	d007      	beq.n	800875e <hal_timer_config+0x3a>
 800874e:	f5a3 3394 	sub.w	r3, r3, #75776	; 0x12800
 8008752:	4298      	cmp	r0, r3
 8008754:	d003      	beq.n	800875e <hal_timer_config+0x3a>
 8008756:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800875a:	4298      	cmp	r0, r3
 800875c:	d1e7      	bne.n	800872e <hal_timer_config+0xa>
    prescaler = stm32_hal_timer_get_freq(tmr->sht_regs) / freq_hz;
 800875e:	f001 f8a9 	bl	80098b4 <stm32_hal_timer_get_freq>
 8008762:	fbb0 f5f5 	udiv	r5, r0, r5
    if (prescaler > 0xffff) {
 8008766:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 800876a:	d2e0      	bcs.n	800872e <hal_timer_config+0xa>
    memset(&init, 0, sizeof(init));
 800876c:	2214      	movs	r2, #20
 800876e:	2100      	movs	r1, #0
 8008770:	a801      	add	r0, sp, #4
 8008772:	f7fe fc6a 	bl	800704a <memset>
    init.Period = 0xffff;
 8008776:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800877a:	9302      	str	r3, [sp, #8]
    tmr->sht_regs->CR1 = TIM_CR1_URS;
 800877c:	2304      	movs	r3, #4
 800877e:	6820      	ldr	r0, [r4, #0]
    init.Prescaler = prescaler;
 8008780:	9500      	str	r5, [sp, #0]
    tmr->sht_regs->CR1 = TIM_CR1_URS;
 8008782:	6003      	str	r3, [r0, #0]
    tmr->sht_regs->DIER = TIM_DIER_UIE;
 8008784:	2301      	movs	r3, #1
    TIM_Base_SetConfig(tmr->sht_regs, &init);
 8008786:	4669      	mov	r1, sp
    tmr->sht_regs->DIER = TIM_DIER_UIE;
 8008788:	60c3      	str	r3, [r0, #12]
    TIM_Base_SetConfig(tmr->sht_regs, &init);
 800878a:	f001 f833 	bl	80097f4 <TIM_Base_SetConfig>
    tmr->sht_regs->SR = 0;
 800878e:	2000      	movs	r0, #0
 8008790:	6823      	ldr	r3, [r4, #0]
 8008792:	6118      	str	r0, [r3, #16]
    tmr->sht_regs->CR1 |= TIM_CR1_CEN;
 8008794:	681a      	ldr	r2, [r3, #0]
 8008796:	f042 0201 	orr.w	r2, r2, #1
 800879a:	601a      	str	r2, [r3, #0]
    return 0;
 800879c:	e7c9      	b.n	8008732 <hal_timer_config+0xe>
 800879e:	bf00      	nop
 80087a0:	0800e09c 	.word	0x0800e09c
 80087a4:	40012c00 	.word	0x40012c00

080087a8 <hal_timer_read>:
uint32_t
hal_timer_read(int num)
{
    struct stm32_hal_tmr *tmr;

    if (num >= STM32_HAL_TIMER_MAX || !(tmr = stm32_tmr_devs[num])) {
 80087a8:	2802      	cmp	r0, #2
 80087aa:	dc05      	bgt.n	80087b8 <hal_timer_read+0x10>
 80087ac:	4b04      	ldr	r3, [pc, #16]	; (80087c0 <hal_timer_read+0x18>)
 80087ae:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80087b2:	b108      	cbz	r0, 80087b8 <hal_timer_read+0x10>
        return -1;
    }
    return hal_timer_cnt(tmr);
 80087b4:	f7ff beb6 	b.w	8008524 <hal_timer_cnt>
}
 80087b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80087bc:	4770      	bx	lr
 80087be:	bf00      	nop
 80087c0:	0800e09c 	.word	0x0800e09c

080087c4 <uart_irq_handler>:
    uint32_t cr1;
    int data;
    int rc;

    ui = &uart_irqs[num];
    ++ui->ui_cnt;
 80087c4:	4a21      	ldr	r2, [pc, #132]	; (800884c <uart_irq_handler+0x88>)
{
 80087c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ++ui->ui_cnt;
 80087c8:	eb02 01c0 	add.w	r1, r2, r0, lsl #3
 80087cc:	684b      	ldr	r3, [r1, #4]
    u = ui->ui_uart;
 80087ce:	f852 4030 	ldr.w	r4, [r2, r0, lsl #3]
    ++ui->ui_cnt;
 80087d2:	3301      	adds	r3, #1
    regs = u->u_regs;
 80087d4:	6825      	ldr	r5, [r4, #0]
    ++ui->ui_cnt;
 80087d6:	604b      	str	r3, [r1, #4]

    isr = STATUS(regs);
 80087d8:	682f      	ldr	r7, [r5, #0]
    if (isr & RXNE) {
 80087da:	06b8      	lsls	r0, r7, #26
 80087dc:	d510      	bpl.n	8008800 <uart_irq_handler+0x3c>
        data = RXDR(regs);
 80087de:	686e      	ldr	r6, [r5, #4]
        rc = u->u_rx_func(u->u_func_arg, data);
 80087e0:	68a3      	ldr	r3, [r4, #8]
 80087e2:	b2f6      	uxtb	r6, r6
 80087e4:	4631      	mov	r1, r6
 80087e6:	6960      	ldr	r0, [r4, #20]
 80087e8:	4798      	blx	r3
        if (rc < 0) {
 80087ea:	2800      	cmp	r0, #0
 80087ec:	da08      	bge.n	8008800 <uart_irq_handler+0x3c>
            regs->CR1 &= ~USART_CR1_RXNEIE;
 80087ee:	68eb      	ldr	r3, [r5, #12]
 80087f0:	f023 0320 	bic.w	r3, r3, #32
 80087f4:	60eb      	str	r3, [r5, #12]
            u->u_rx_data = data;
            u->u_rx_stall = 1;
 80087f6:	7923      	ldrb	r3, [r4, #4]
            u->u_rx_data = data;
 80087f8:	7166      	strb	r6, [r4, #5]
            u->u_rx_stall = 1;
 80087fa:	f043 0302 	orr.w	r3, r3, #2
 80087fe:	7123      	strb	r3, [r4, #4]
        }
    }
    if (isr & (TXE | TC)) {
 8008800:	f017 0fc0 	tst.w	r7, #192	; 0xc0
 8008804:	d021      	beq.n	800884a <uart_irq_handler+0x86>
        cr1 = regs->CR1;
        if (isr & TXE) {
 8008806:	0639      	lsls	r1, r7, #24
        cr1 = regs->CR1;
 8008808:	68ee      	ldr	r6, [r5, #12]
        if (isr & TXE) {
 800880a:	d50e      	bpl.n	800882a <uart_irq_handler+0x66>
            data = u->u_tx_func(u->u_func_arg);
 800880c:	68e3      	ldr	r3, [r4, #12]
 800880e:	6960      	ldr	r0, [r4, #20]
 8008810:	4798      	blx	r3
            if (data < 0) {
 8008812:	2800      	cmp	r0, #0
                cr1 &= ~USART_CR1_TXEIE;
                cr1 |= USART_CR1_TCIE;
                u->u_tx_end = 1;
 8008814:	bfbf      	itttt	lt
 8008816:	7923      	ldrblt	r3, [r4, #4]
                cr1 &= ~USART_CR1_TXEIE;
 8008818:	f026 0680 	biclt.w	r6, r6, #128	; 0x80
                u->u_tx_end = 1;
 800881c:	f043 0304 	orrlt.w	r3, r3, #4
                cr1 |= USART_CR1_TCIE;
 8008820:	f046 0640 	orrlt.w	r6, r6, #64	; 0x40
                u->u_tx_end = 1;
 8008824:	bfb4      	ite	lt
 8008826:	7123      	strblt	r3, [r4, #4]
            } else {
                TXDR(regs) = data;
 8008828:	6068      	strge	r0, [r5, #4]
            }
        }
        if (u->u_tx_end == 1 && isr & TC) {
 800882a:	7923      	ldrb	r3, [r4, #4]
 800882c:	075a      	lsls	r2, r3, #29
 800882e:	d50b      	bpl.n	8008848 <uart_irq_handler+0x84>
 8008830:	067b      	lsls	r3, r7, #25
 8008832:	d509      	bpl.n	8008848 <uart_irq_handler+0x84>
            if (u->u_tx_done) {
 8008834:	6923      	ldr	r3, [r4, #16]
 8008836:	b10b      	cbz	r3, 800883c <uart_irq_handler+0x78>
                u->u_tx_done(u->u_func_arg);
 8008838:	6960      	ldr	r0, [r4, #20]
 800883a:	4798      	blx	r3
            }
            u->u_tx_end = 0;
 800883c:	7923      	ldrb	r3, [r4, #4]
            cr1 &= ~USART_CR1_TCIE;
 800883e:	f026 0640 	bic.w	r6, r6, #64	; 0x40
            u->u_tx_end = 0;
 8008842:	f36f 0382 	bfc	r3, #2, #1
 8008846:	7123      	strb	r3, [r4, #4]
        }
        regs->CR1 = cr1;
 8008848:	60ee      	str	r6, [r5, #12]
    /* clear overrun */
    if (isr & USART_ISR_ORE) {
        regs->ICR |= USART_ICR_ORECF;
    }
#endif
}
 800884a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800884c:	20002b44 	.word	0x20002b44

08008850 <uart_irq1>:
}

static void
uart_irq1(void)
{
    uart_irq_handler(0);
 8008850:	2000      	movs	r0, #0
 8008852:	f7ff bfb7 	b.w	80087c4 <uart_irq_handler>

08008856 <uart_irq2>:
}

static void
uart_irq2(void)
{
    uart_irq_handler(1);
 8008856:	2001      	movs	r0, #1
 8008858:	f7ff bfb4 	b.w	80087c4 <uart_irq_handler>

0800885c <uart_irq3>:

#ifdef USART3_BASE
static void
uart_irq3(void)
{
    uart_irq_handler(2);
 800885c:	2002      	movs	r0, #2
 800885e:	f7ff bfb1 	b.w	80087c4 <uart_irq_handler>
	...

08008864 <hal_uart_init_cbs>:
    if (port >= UART_CNT || u->u_open) {
 8008864:	2800      	cmp	r0, #0
{
 8008866:	b530      	push	{r4, r5, lr}
    if (port >= UART_CNT || u->u_open) {
 8008868:	dc0d      	bgt.n	8008886 <hal_uart_init_cbs+0x22>
 800886a:	251c      	movs	r5, #28
 800886c:	4c07      	ldr	r4, [pc, #28]	; (800888c <hal_uart_init_cbs+0x28>)
 800886e:	fb05 4400 	mla	r4, r5, r0, r4
 8008872:	7920      	ldrb	r0, [r4, #4]
 8008874:	f010 0001 	ands.w	r0, r0, #1
 8008878:	d105      	bne.n	8008886 <hal_uart_init_cbs+0x22>
    u->u_tx_func = tx_func;
 800887a:	e9c4 3102 	strd	r3, r1, [r4, #8]
    u->u_func_arg = arg;
 800887e:	9b03      	ldr	r3, [sp, #12]
    u->u_tx_done = tx_done;
 8008880:	6122      	str	r2, [r4, #16]
    u->u_func_arg = arg;
 8008882:	6163      	str	r3, [r4, #20]
}
 8008884:	bd30      	pop	{r4, r5, pc}
        return -1;
 8008886:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800888a:	e7fb      	b.n	8008884 <hal_uart_init_cbs+0x20>
 800888c:	20002b5c 	.word	0x20002b5c

08008890 <hal_uart_start_rx>:
{
 8008890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (u->u_rx_stall) {
 8008892:	251c      	movs	r5, #28
 8008894:	4345      	muls	r5, r0
 8008896:	4e0c      	ldr	r6, [pc, #48]	; (80088c8 <hal_uart_start_rx+0x38>)
 8008898:	1974      	adds	r4, r6, r5
 800889a:	7923      	ldrb	r3, [r4, #4]
 800889c:	079b      	lsls	r3, r3, #30
 800889e:	d512      	bpl.n	80088c6 <hal_uart_start_rx+0x36>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80088a0:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80088a4:	b672      	cpsid	i
        rc = u->u_rx_func(u->u_func_arg, u->u_rx_data);
 80088a6:	68a3      	ldr	r3, [r4, #8]
 80088a8:	7961      	ldrb	r1, [r4, #5]
 80088aa:	6960      	ldr	r0, [r4, #20]
 80088ac:	4798      	blx	r3
        if (rc == 0) {
 80088ae:	b940      	cbnz	r0, 80088c2 <hal_uart_start_rx+0x32>
            u->u_rx_stall = 0;
 80088b0:	7923      	ldrb	r3, [r4, #4]
            u->u_regs->CR1 |= USART_CR1_RXNEIE;
 80088b2:	5972      	ldr	r2, [r6, r5]
            u->u_rx_stall = 0;
 80088b4:	f360 0341 	bfi	r3, r0, #1, #1
 80088b8:	7123      	strb	r3, [r4, #4]
            u->u_regs->CR1 |= USART_CR1_RXNEIE;
 80088ba:	68d3      	ldr	r3, [r2, #12]
 80088bc:	f043 0320 	orr.w	r3, r3, #32
 80088c0:	60d3      	str	r3, [r2, #12]
        __HAL_ENABLE_INTERRUPTS(sr);
 80088c2:	b907      	cbnz	r7, 80088c6 <hal_uart_start_rx+0x36>
  __ASM volatile ("cpsie i" : : : "memory");
 80088c4:	b662      	cpsie	i
}
 80088c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088c8:	20002b5c 	.word	0x20002b5c

080088cc <hal_uart_start_tx>:
{
 80088cc:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80088ce:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80088d2:	b672      	cpsid	i
    u->u_regs->CR1 &= ~USART_CR1_TCIE;
 80088d4:	231c      	movs	r3, #28
 80088d6:	4358      	muls	r0, r3
 80088d8:	4a08      	ldr	r2, [pc, #32]	; (80088fc <hal_uart_start_tx+0x30>)
 80088da:	5813      	ldr	r3, [r2, r0]
 80088dc:	1811      	adds	r1, r2, r0
 80088de:	68da      	ldr	r2, [r3, #12]
 80088e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80088e4:	60da      	str	r2, [r3, #12]
    u->u_regs->CR1 |= USART_CR1_TXEIE;
 80088e6:	68da      	ldr	r2, [r3, #12]
 80088e8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80088ec:	60da      	str	r2, [r3, #12]
    u->u_tx_end = 0;
 80088ee:	790b      	ldrb	r3, [r1, #4]
 80088f0:	f36f 0382 	bfc	r3, #2, #1
 80088f4:	710b      	strb	r3, [r1, #4]
    __HAL_ENABLE_INTERRUPTS(sr);
 80088f6:	b904      	cbnz	r4, 80088fa <hal_uart_start_tx+0x2e>
  __ASM volatile ("cpsie i" : : : "memory");
 80088f8:	b662      	cpsie	i
}
 80088fa:	bd10      	pop	{r4, pc}
 80088fc:	20002b5c 	.word	0x20002b5c

08008900 <hal_uart_blocking_tx>:
    if (port >= UART_CNT || !u->u_open) {
 8008900:	2800      	cmp	r0, #0
 8008902:	dc0e      	bgt.n	8008922 <hal_uart_blocking_tx+0x22>
 8008904:	231c      	movs	r3, #28
 8008906:	4358      	muls	r0, r3
 8008908:	4a06      	ldr	r2, [pc, #24]	; (8008924 <hal_uart_blocking_tx+0x24>)
 800890a:	1813      	adds	r3, r2, r0
 800890c:	791b      	ldrb	r3, [r3, #4]
 800890e:	07db      	lsls	r3, r3, #31
 8008910:	d507      	bpl.n	8008922 <hal_uart_blocking_tx+0x22>
    regs = u->u_regs;
 8008912:	5813      	ldr	r3, [r2, r0]
    while (!(STATUS(regs) & TXE));
 8008914:	681a      	ldr	r2, [r3, #0]
 8008916:	0610      	lsls	r0, r2, #24
 8008918:	d5fc      	bpl.n	8008914 <hal_uart_blocking_tx+0x14>
    TXDR(regs) = data;
 800891a:	6059      	str	r1, [r3, #4]
    while (!(STATUS(regs) & TC));
 800891c:	681a      	ldr	r2, [r3, #0]
 800891e:	0652      	lsls	r2, r2, #25
 8008920:	d5fc      	bpl.n	800891c <hal_uart_blocking_tx+0x1c>
}
 8008922:	4770      	bx	lr
 8008924:	20002b5c 	.word	0x20002b5c

08008928 <hal_uart_config>:
}

int
hal_uart_config(int port, int32_t baudrate, uint8_t databits, uint8_t stopbits,
  enum hal_uart_parity parity, enum hal_uart_flow_ctl flow_ctl)
{
 8008928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t cr1, cr2, cr3;
#if MYNEWT_VAL(MCU_STM32F1)
    GPIO_InitTypeDef gpio;
#endif

    if (port >= UART_CNT) {
 800892c:	1e06      	subs	r6, r0, #0
{
 800892e:	b087      	sub	sp, #28
 8008930:	460c      	mov	r4, r1
 8008932:	4693      	mov	fp, r2
 8008934:	469a      	mov	sl, r3
 8008936:	f89d 9040 	ldrb.w	r9, [sp, #64]	; 0x40
 800893a:	f89d 8044 	ldrb.w	r8, [sp, #68]	; 0x44
    if (port >= UART_CNT) {
 800893e:	f300 8127 	bgt.w	8008b90 <hal_uart_config+0x268>
        return -1;
    }

    u = &uarts[port];
    if (u->u_open) {
 8008942:	231c      	movs	r3, #28
 8008944:	4d94      	ldr	r5, [pc, #592]	; (8008b98 <hal_uart_config+0x270>)
 8008946:	fb03 5306 	mla	r3, r3, r6, r5
 800894a:	791a      	ldrb	r2, [r3, #4]
 800894c:	07d0      	lsls	r0, r2, #31
 800894e:	f100 811f 	bmi.w	8008b90 <hal_uart_config+0x268>
        return -1;
    }
    cfg = u->u_cfg;
 8008952:	699f      	ldr	r7, [r3, #24]
    assert(cfg);
 8008954:	b92f      	cbnz	r7, 8008962 <hal_uart_config+0x3a>
        break;
    case 9:
        cr1 |= UART_WORDLENGTH_9B;
        break;
    default:
        assert(0);
 8008956:	2300      	movs	r3, #0
 8008958:	461a      	mov	r2, r3
 800895a:	4619      	mov	r1, r3
 800895c:	4618      	mov	r0, r3
 800895e:	f7fc ffd9 	bl	8005914 <__assert_func>
    gpio.Mode = GPIO_MODE_AF_PP;
 8008962:	2302      	movs	r3, #2
    gpio.Pull = GPIO_PULLUP;
 8008964:	2103      	movs	r1, #3
    gpio.Mode = GPIO_MODE_AF_PP;
 8008966:	9303      	str	r3, [sp, #12]
    gpio.Pull = GPIO_PULLUP;
 8008968:	2301      	movs	r3, #1
 800896a:	e9cd 3104 	strd	r3, r1, [sp, #16]
    hal_gpio_init_stm(cfg->suc_pin_tx, &gpio);
 800896e:	a902      	add	r1, sp, #8
 8008970:	f997 000c 	ldrsb.w	r0, [r7, #12]
 8008974:	f000 f9c8 	bl	8008d08 <hal_gpio_init_stm>
    if (flow_ctl == HAL_UART_FLOW_CTL_RTS_CTS) {
 8008978:	f1b8 0f01 	cmp.w	r8, #1
 800897c:	d104      	bne.n	8008988 <hal_uart_config+0x60>
        hal_gpio_init_stm(cfg->suc_pin_rts, &gpio);
 800897e:	a902      	add	r1, sp, #8
 8008980:	f997 000e 	ldrsb.w	r0, [r7, #14]
 8008984:	f000 f9c0 	bl	8008d08 <hal_gpio_init_stm>
    gpio.Mode = GPIO_MODE_AF_INPUT;
 8008988:	2300      	movs	r3, #0
    hal_gpio_init_stm(cfg->suc_pin_rx, &gpio);
 800898a:	a902      	add	r1, sp, #8
 800898c:	f997 000d 	ldrsb.w	r0, [r7, #13]
    gpio.Mode = GPIO_MODE_AF_INPUT;
 8008990:	9303      	str	r3, [sp, #12]
    hal_gpio_init_stm(cfg->suc_pin_rx, &gpio);
 8008992:	f000 f9b9 	bl	8008d08 <hal_gpio_init_stm>
    if (flow_ctl == HAL_UART_FLOW_CTL_RTS_CTS) {
 8008996:	f1b8 0f01 	cmp.w	r8, #1
 800899a:	d104      	bne.n	80089a6 <hal_uart_config+0x7e>
        hal_gpio_init_stm(cfg->suc_pin_cts, &gpio);
 800899c:	a902      	add	r1, sp, #8
 800899e:	f997 000f 	ldrsb.w	r0, [r7, #15]
 80089a2:	f000 f9b1 	bl	8008d08 <hal_gpio_init_stm>
    if (cfg->suc_pin_remap_fn) {
 80089a6:	693b      	ldr	r3, [r7, #16]
 80089a8:	b103      	cbz	r3, 80089ac <hal_uart_config+0x84>
        cfg->suc_pin_remap_fn();
 80089aa:	4798      	blx	r3
    cr1 = cfg->suc_uart->CR1;
 80089ac:	683a      	ldr	r2, [r7, #0]
    switch (databits) {
 80089ae:	f1bb 0f08 	cmp.w	fp, #8
    cr1 = cfg->suc_uart->CR1;
 80089b2:	68d3      	ldr	r3, [r2, #12]
    cr2 = cfg->suc_uart->CR2;
 80089b4:	6910      	ldr	r0, [r2, #16]
    cr1 &= ~(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_RE);
 80089b6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
    cr3 = cfg->suc_uart->CR3;
 80089ba:	6951      	ldr	r1, [r2, #20]
    cr1 &= ~(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_RE);
 80089bc:	f023 0304 	bic.w	r3, r3, #4
    cr2 &= ~(USART_CR2_STOP);
 80089c0:	f420 5040 	bic.w	r0, r0, #12288	; 0x3000
    switch (databits) {
 80089c4:	d004      	beq.n	80089d0 <hal_uart_config+0xa8>
 80089c6:	f1bb 0f09 	cmp.w	fp, #9
 80089ca:	d1c4      	bne.n	8008956 <hal_uart_config+0x2e>
        cr1 |= UART_WORDLENGTH_9B;
 80089cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
        return -1;
    }

    switch (stopbits) {
 80089d0:	f1ba 0f01 	cmp.w	sl, #1
 80089d4:	d005      	beq.n	80089e2 <hal_uart_config+0xba>
 80089d6:	f1ba 0f02 	cmp.w	sl, #2
 80089da:	f040 80d9 	bne.w	8008b90 <hal_uart_config+0x268>
    case 1:
        cr2 |= UART_STOPBITS_1;
        break;
    case 2:
        cr2 |= UART_STOPBITS_2;
 80089de:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
        break;
    default:
        return -1;
    }

    switch (parity) {
 80089e2:	f1b9 0f01 	cmp.w	r9, #1
 80089e6:	f000 80a2 	beq.w	8008b2e <hal_uart_config+0x206>
 80089ea:	f1b9 0f02 	cmp.w	r9, #2
 80089ee:	f000 80a1 	beq.w	8008b34 <hal_uart_config+0x20c>
    case HAL_UART_PARITY_EVEN:
        cr1 |= UART_PARITY_EVEN;
        break;
    }

    switch (flow_ctl) {
 80089f2:	f1b8 0f01 	cmp.w	r8, #1
    cr3 &= ~(USART_CR3_RTSE | USART_CR3_CTSE);
 80089f6:	f421 7c40 	bic.w	ip, r1, #768	; 0x300
    switch (flow_ctl) {
 80089fa:	d109      	bne.n	8008a10 <hal_uart_config+0xe8>
    case HAL_UART_FLOW_CTL_NONE:
        cr3 |= UART_HWCONTROL_NONE;
        break;
    case HAL_UART_FLOW_CTL_RTS_CTS:
        cr3 |= UART_HWCONTROL_RTS_CTS;
        if (cfg->suc_pin_rts < 0 || cfg->suc_pin_cts < 0) {
 80089fc:	f997 100e 	ldrsb.w	r1, [r7, #14]
        cr3 |= UART_HWCONTROL_RTS_CTS;
 8008a00:	f44c 7c40 	orr.w	ip, ip, #768	; 0x300
        if (cfg->suc_pin_rts < 0 || cfg->suc_pin_cts < 0) {
 8008a04:	2900      	cmp	r1, #0
 8008a06:	dba6      	blt.n	8008956 <hal_uart_config+0x2e>
 8008a08:	f997 100f 	ldrsb.w	r1, [r7, #15]
 8008a0c:	2900      	cmp	r1, #0
 8008a0e:	dba2      	blt.n	8008956 <hal_uart_config+0x2e>
    cr1 |= (UART_MODE_RX | UART_MODE_TX | UART_OVERSAMPLING_16);
#else
    cr1 |= (UART_MODE_TX_RX | UART_OVERSAMPLING_16);
#endif

    *cfg->suc_rcc_reg |= cfg->suc_rcc_dev;
 8008a10:	f8d7 8004 	ldr.w	r8, [r7, #4]
    cr1 |= (UART_MODE_TX_RX | UART_OVERSAMPLING_16);
 8008a14:	f043 0e0c 	orr.w	lr, r3, #12
    *cfg->suc_rcc_reg |= cfg->suc_rcc_dev;
 8008a18:	f8d8 1000 	ldr.w	r1, [r8]
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	00a4      	lsls	r4, r4, #2
 8008a20:	4319      	orrs	r1, r3
 8008a22:	f8c8 1000 	str.w	r1, [r8]
        hal_gpio_init_af(cfg->suc_pin_rts, cfg->suc_pin_af, 0, 0);
        hal_gpio_init_af(cfg->suc_pin_cts, cfg->suc_pin_af, 0, 0);
    }
#endif

    u->u_regs = cfg->suc_uart;
 8008a26:	211c      	movs	r1, #28
 8008a28:	4371      	muls	r1, r6
    u->u_regs->CR2 = cr2;
    u->u_regs->CR1 = cr1;
#ifdef USART6_BASE
    if (cfg->suc_uart == USART1 || cfg->suc_uart == USART6) {
#else
    if (cfg->suc_uart == USART1) {
 8008a2a:	4b5c      	ldr	r3, [pc, #368]	; (8008b9c <hal_uart_config+0x274>)
    u->u_regs = cfg->suc_uart;
 8008a2c:	506a      	str	r2, [r5, r1]
    if (cfg->suc_uart == USART1) {
 8008a2e:	429a      	cmp	r2, r3
    u->u_regs->CR3 = cr3;
 8008a30:	f8c2 c014 	str.w	ip, [r2, #20]
 8008a34:	9101      	str	r1, [sp, #4]
    u->u_regs->CR2 = cr2;
 8008a36:	6110      	str	r0, [r2, #16]
    u->u_regs->CR1 = cr1;
 8008a38:	f8c2 e00c 	str.w	lr, [r2, #12]
    if (cfg->suc_uart == USART1) {
 8008a3c:	d17d      	bne.n	8008b3a <hal_uart_config+0x212>
#endif
#if MYNEWT_VAL(MCU_STM32F0)
        u->u_regs->BRR = BAUD(HAL_RCC_GetPCLK1Freq(), baudrate);
#else
        u->u_regs->BRR = BAUD(HAL_RCC_GetPCLK2Freq(), baudrate);
 8008a3e:	f000 feab 	bl	8009798 <HAL_RCC_GetPCLK2Freq>
 8008a42:	f04f 0819 	mov.w	r8, #25
 8008a46:	4681      	mov	r9, r0
 8008a48:	f000 fea6 	bl	8009798 <HAL_RCC_GetPCLK2Freq>
 8008a4c:	fb08 f000 	mul.w	r0, r8, r0
 8008a50:	fbb0 fbf4 	udiv	fp, r0, r4
 8008a54:	f000 fea0 	bl	8009798 <HAL_RCC_GetPCLK2Freq>
 8008a58:	9000      	str	r0, [sp, #0]
 8008a5a:	f000 fe9d 	bl	8009798 <HAL_RCC_GetPCLK2Freq>
 8008a5e:	fb08 f000 	mul.w	r0, r8, r0
 8008a62:	fbb0 faf4 	udiv	sl, r0, r4
 8008a66:	f000 fe97 	bl	8009798 <HAL_RCC_GetPCLK2Freq>
 8008a6a:	9b00      	ldr	r3, [sp, #0]
 8008a6c:	9901      	ldr	r1, [sp, #4]
 8008a6e:	fb08 f303 	mul.w	r3, r8, r3
 8008a72:	f855 c001 	ldr.w	ip, [r5, r1]
 8008a76:	fbb3 f3f4 	udiv	r3, r3, r4
 8008a7a:	2164      	movs	r1, #100	; 0x64
 8008a7c:	fbb3 f3f1 	udiv	r3, r3, r1
 8008a80:	fb01 b313 	mls	r3, r1, r3, fp
#endif

    } else {
        u->u_regs->BRR = BAUD(HAL_RCC_GetPCLK1Freq(), baudrate);
 8008a84:	fb08 f200 	mul.w	r2, r8, r0
 8008a88:	fbb2 f2f4 	udiv	r2, r2, r4
 8008a8c:	fbb2 f2f1 	udiv	r2, r2, r1
 8008a90:	fb08 f809 	mul.w	r8, r8, r9
 8008a94:	fbb8 f4f4 	udiv	r4, r8, r4
 8008a98:	fb01 a212 	mls	r2, r1, r2, sl
 8008a9c:	011b      	lsls	r3, r3, #4
 8008a9e:	0112      	lsls	r2, r2, #4
 8008aa0:	3332      	adds	r3, #50	; 0x32
 8008aa2:	3232      	adds	r2, #50	; 0x32
 8008aa4:	fbb3 f3f1 	udiv	r3, r3, r1
 8008aa8:	fbb2 f2f1 	udiv	r2, r2, r1
 8008aac:	fbb4 f1f1 	udiv	r1, r4, r1
 8008ab0:	f002 020f 	and.w	r2, r2, #15
 8008ab4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008ab8:	4313      	orrs	r3, r2
 8008aba:	eb03 1101 	add.w	r1, r3, r1, lsl #4
    }

    (void)RXDR(u->u_regs);
 8008abe:	231c      	movs	r3, #28
 8008ac0:	4373      	muls	r3, r6
 8008ac2:	58ea      	ldr	r2, [r5, r3]
        u->u_regs->BRR = BAUD(HAL_RCC_GetPCLK1Freq(), baudrate);
 8008ac4:	f8cc 1008 	str.w	r1, [ip, #8]
    (void)RXDR(u->u_regs);
 8008ac8:	6853      	ldr	r3, [r2, #4]
    (void)STATUS(u->u_regs);
 8008aca:	6813      	ldr	r3, [r2, #0]
    hal_uart_set_nvic(cfg->suc_irqn, u);
 8008acc:	f997 3014 	ldrsb.w	r3, [r7, #20]
    switch (irqn) {
 8008ad0:	2b26      	cmp	r3, #38	; 0x26
 8008ad2:	d057      	beq.n	8008b84 <hal_uart_config+0x25c>
 8008ad4:	2b27      	cmp	r3, #39	; 0x27
 8008ad6:	d058      	beq.n	8008b8a <hal_uart_config+0x262>
 8008ad8:	2b25      	cmp	r3, #37	; 0x25
 8008ada:	f47f af3c 	bne.w	8008956 <hal_uart_config+0x2e>
        isr = (uint32_t)&uart_irq1;
 8008ade:	4930      	ldr	r1, [pc, #192]	; (8008ba0 <hal_uart_config+0x278>)
        ui = &uart_irqs[0];
 8008ae0:	4830      	ldr	r0, [pc, #192]	; (8008ba4 <hal_uart_config+0x27c>)
    u = &uarts[port];
 8008ae2:	241c      	movs	r4, #28
 8008ae4:	fb04 5406 	mla	r4, r4, r6, r5
        ui->ui_uart = uart;
 8008ae8:	6004      	str	r4, [r0, #0]
  uint32_t vectors = (uint32_t )SCB->VTOR;
 8008aea:	482f      	ldr	r0, [pc, #188]	; (8008ba8 <hal_uart_config+0x280>)
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 8008aec:	f103 0410 	add.w	r4, r3, #16
  uint32_t vectors = (uint32_t )SCB->VTOR;
 8008af0:	6880      	ldr	r0, [r0, #8]
  if ((int32_t)(IRQn) >= 0)
 8008af2:	2b00      	cmp	r3, #0
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 8008af4:	f840 1024 	str.w	r1, [r0, r4, lsl #2]
  if ((int32_t)(IRQn) >= 0)
 8008af8:	db08      	blt.n	8008b0c <hal_uart_config+0x1e4>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008afa:	2101      	movs	r1, #1
 8008afc:	0958      	lsrs	r0, r3, #5
 8008afe:	f003 031f 	and.w	r3, r3, #31
 8008b02:	fa01 f303 	lsl.w	r3, r1, r3
 8008b06:	4929      	ldr	r1, [pc, #164]	; (8008bac <hal_uart_config+0x284>)
 8008b08:	f841 3020 	str.w	r3, [r1, r0, lsl #2]

    u->u_regs->CR1 |= (USART_CR1_RXNEIE | USART_CR1_UE);
 8008b0c:	68d3      	ldr	r3, [r2, #12]
    u->u_open = 1;

    return 0;
 8008b0e:	2000      	movs	r0, #0
    u->u_regs->CR1 |= (USART_CR1_RXNEIE | USART_CR1_UE);
 8008b10:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008b14:	f043 0320 	orr.w	r3, r3, #32
 8008b18:	60d3      	str	r3, [r2, #12]
    u->u_open = 1;
 8008b1a:	231c      	movs	r3, #28
 8008b1c:	fb03 5506 	mla	r5, r3, r6, r5
 8008b20:	792b      	ldrb	r3, [r5, #4]
 8008b22:	f043 0301 	orr.w	r3, r3, #1
 8008b26:	712b      	strb	r3, [r5, #4]
}
 8008b28:	b007      	add	sp, #28
 8008b2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        cr1 |= UART_PARITY_ODD;
 8008b2e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
        break;
 8008b32:	e75e      	b.n	80089f2 <hal_uart_config+0xca>
        cr1 |= UART_PARITY_EVEN;
 8008b34:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
        break;
 8008b38:	e75b      	b.n	80089f2 <hal_uart_config+0xca>
        u->u_regs->BRR = BAUD(HAL_RCC_GetPCLK1Freq(), baudrate);
 8008b3a:	f000 fe1d 	bl	8009778 <HAL_RCC_GetPCLK1Freq>
 8008b3e:	f04f 0819 	mov.w	r8, #25
 8008b42:	4681      	mov	r9, r0
 8008b44:	f000 fe18 	bl	8009778 <HAL_RCC_GetPCLK1Freq>
 8008b48:	fb08 f000 	mul.w	r0, r8, r0
 8008b4c:	fbb0 f3f4 	udiv	r3, r0, r4
 8008b50:	9300      	str	r3, [sp, #0]
 8008b52:	f000 fe11 	bl	8009778 <HAL_RCC_GetPCLK1Freq>
 8008b56:	4683      	mov	fp, r0
 8008b58:	f000 fe0e 	bl	8009778 <HAL_RCC_GetPCLK1Freq>
 8008b5c:	fb08 f000 	mul.w	r0, r8, r0
 8008b60:	fbb0 faf4 	udiv	sl, r0, r4
 8008b64:	f000 fe08 	bl	8009778 <HAL_RCC_GetPCLK1Freq>
 8008b68:	fb08 f30b 	mul.w	r3, r8, fp
 8008b6c:	9901      	ldr	r1, [sp, #4]
 8008b6e:	fbb3 f3f4 	udiv	r3, r3, r4
 8008b72:	f855 c001 	ldr.w	ip, [r5, r1]
 8008b76:	2164      	movs	r1, #100	; 0x64
 8008b78:	fbb3 f3f1 	udiv	r3, r3, r1
 8008b7c:	9a00      	ldr	r2, [sp, #0]
 8008b7e:	fb01 2313 	mls	r3, r1, r3, r2
 8008b82:	e77f      	b.n	8008a84 <hal_uart_config+0x15c>
        isr = (uint32_t)&uart_irq2;
 8008b84:	490a      	ldr	r1, [pc, #40]	; (8008bb0 <hal_uart_config+0x288>)
        ui = &uart_irqs[1];
 8008b86:	480b      	ldr	r0, [pc, #44]	; (8008bb4 <hal_uart_config+0x28c>)
 8008b88:	e7ab      	b.n	8008ae2 <hal_uart_config+0x1ba>
        isr = (uint32_t)&uart_irq3;
 8008b8a:	490b      	ldr	r1, [pc, #44]	; (8008bb8 <hal_uart_config+0x290>)
        ui = &uart_irqs[2];
 8008b8c:	480b      	ldr	r0, [pc, #44]	; (8008bbc <hal_uart_config+0x294>)
 8008b8e:	e7a8      	b.n	8008ae2 <hal_uart_config+0x1ba>
        return -1;
 8008b90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b94:	e7c8      	b.n	8008b28 <hal_uart_config+0x200>
 8008b96:	bf00      	nop
 8008b98:	20002b5c 	.word	0x20002b5c
 8008b9c:	40013800 	.word	0x40013800
 8008ba0:	08008851 	.word	0x08008851
 8008ba4:	20002b44 	.word	0x20002b44
 8008ba8:	e000ed00 	.word	0xe000ed00
 8008bac:	e000e100 	.word	0xe000e100
 8008bb0:	08008857 	.word	0x08008857
 8008bb4:	20002b4c 	.word	0x20002b4c
 8008bb8:	0800885d 	.word	0x0800885d
 8008bbc:	20002b54 	.word	0x20002b54

08008bc0 <hal_uart_init>:
int
hal_uart_init(int port, void *arg)
{
    struct hal_uart *u;

    if (port >= UART_CNT) {
 8008bc0:	2800      	cmp	r0, #0
        return -1;
    }
    u = &uarts[port];
    u->u_cfg = (const struct stm32_uart_cfg *)arg;
 8008bc2:	bfdf      	itttt	le
 8008bc4:	221c      	movle	r2, #28
 8008bc6:	4b04      	ldrle	r3, [pc, #16]	; (8008bd8 <hal_uart_init+0x18>)
 8008bc8:	fb02 3000 	mlale	r0, r2, r0, r3
 8008bcc:	6181      	strle	r1, [r0, #24]

    return 0;
 8008bce:	bfd4      	ite	le
 8008bd0:	2000      	movle	r0, #0
        return -1;
 8008bd2:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
}
 8008bd6:	4770      	bx	lr
 8008bd8:	20002b5c 	.word	0x20002b5c

08008bdc <hal_uart_close>:
int
hal_uart_close(int port)
{
    struct hal_uart *u;

    if (port >= UART_CNT) {
 8008bdc:	2800      	cmp	r0, #0
 8008bde:	dc0b      	bgt.n	8008bf8 <hal_uart_close+0x1c>
        return -1;
    }
    u = &uarts[port];

    u->u_open = 0;
 8008be0:	231c      	movs	r3, #28
 8008be2:	4358      	muls	r0, r3
 8008be4:	4a06      	ldr	r2, [pc, #24]	; (8008c00 <hal_uart_close+0x24>)
 8008be6:	1813      	adds	r3, r2, r0
 8008be8:	7919      	ldrb	r1, [r3, #4]
 8008bea:	f36f 0100 	bfc	r1, #0, #1
 8008bee:	7119      	strb	r1, [r3, #4]
    u->u_regs->CR1 = 0;
 8008bf0:	5813      	ldr	r3, [r2, r0]
 8008bf2:	2000      	movs	r0, #0
 8008bf4:	60d8      	str	r0, [r3, #12]

    return 0;
 8008bf6:	4770      	bx	lr
        return -1;
 8008bf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8008bfc:	4770      	bx	lr
 8008bfe:	bf00      	nop
 8008c00:	20002b5c 	.word	0x20002b5c

08008c04 <hal_watchdog_init>:
{
    uint32_t reload;

    /* Max prescaler is 256 */
    reload = 32768 / 256;
    reload = (reload * expire_msecs) / 1000;
 8008c04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008c08:	01c0      	lsls	r0, r0, #7
 8008c0a:	fbb0 f0f3 	udiv	r0, r0, r3

    /* Check to make sure we are not trying a reload value that is too large */
    if (reload > IWDG_RLR_RL) {
 8008c0e:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
        return -1;
    }

    g_wdt_cfg.Instance = IWDG;
    g_wdt_cfg.Init.Prescaler = IWDG_PRESCALER_256;
 8008c12:	bf3f      	itttt	cc
 8008c14:	2206      	movcc	r2, #6
    g_wdt_cfg.Instance = IWDG;
 8008c16:	4b05      	ldrcc	r3, [pc, #20]	; (8008c2c <hal_watchdog_init+0x28>)
    g_wdt_cfg.Init.Prescaler = IWDG_PRESCALER_256;
 8008c18:	4905      	ldrcc	r1, [pc, #20]	; (8008c30 <hal_watchdog_init+0x2c>)
    g_wdt_cfg.Init.Reload = reload;
 8008c1a:	6098      	strcc	r0, [r3, #8]
    g_wdt_cfg.Init.Prescaler = IWDG_PRESCALER_256;
 8008c1c:	bf3a      	itte	cc
 8008c1e:	e9c3 1200 	strdcc	r1, r2, [r3]
    STM32_HAL_WATCHDOG_CUSTOM_INIT(&g_wdt_cfg);

    return 0;
 8008c22:	2000      	movcc	r0, #0
        return -1;
 8008c24:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
}
 8008c28:	4770      	bx	lr
 8008c2a:	bf00      	nop
 8008c2c:	2000350c 	.word	0x2000350c
 8008c30:	40003000 	.word	0x40003000

08008c34 <hal_watchdog_enable>:

void
hal_watchdog_enable(void)
{
    __HAL_DBGMCU_FREEZE_IWDG();
 8008c34:	4a03      	ldr	r2, [pc, #12]	; (8008c44 <hal_watchdog_enable+0x10>)
    HAL_IWDG_Init(&g_wdt_cfg);
 8008c36:	4804      	ldr	r0, [pc, #16]	; (8008c48 <hal_watchdog_enable+0x14>)
    __HAL_DBGMCU_FREEZE_IWDG();
 8008c38:	6853      	ldr	r3, [r2, #4]
 8008c3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008c3e:	6053      	str	r3, [r2, #4]
    HAL_IWDG_Init(&g_wdt_cfg);
 8008c40:	f000 bb08 	b.w	8009254 <HAL_IWDG_Init>
 8008c44:	e0042000 	.word	0xe0042000
 8008c48:	2000350c 	.word	0x2000350c

08008c4c <hal_watchdog_tickle>:
}

void
hal_watchdog_tickle(void)
{
    HAL_IWDG_Refresh(&g_wdt_cfg);
 8008c4c:	4801      	ldr	r0, [pc, #4]	; (8008c54 <hal_watchdog_tickle+0x8>)
 8008c4e:	f000 bb22 	b.w	8009296 <HAL_IWDG_Refresh>
 8008c52:	bf00      	nop
 8008c54:	2000350c 	.word	0x2000350c

08008c58 <_sbrk>:
extern char __HeapBase;
extern char __HeapLimit;

void *
_sbrk(int incr)
{
 8008c58:	4a09      	ldr	r2, [pc, #36]	; (8008c80 <_sbrk+0x28>)
    static char *brk = &__HeapBase;

    void *prev_brk;

    if (incr < 0) {
 8008c5a:	2800      	cmp	r0, #0
 8008c5c:	6813      	ldr	r3, [r2, #0]
 8008c5e:	da06      	bge.n	8008c6e <_sbrk+0x16>
        /* Returning memory to the heap. */
        incr = -incr;
        if (brk - incr < &__HeapBase) {
 8008c60:	4908      	ldr	r1, [pc, #32]	; (8008c84 <_sbrk+0x2c>)
 8008c62:	4418      	add	r0, r3
 8008c64:	4288      	cmp	r0, r1
 8008c66:	d308      	bcc.n	8008c7a <_sbrk+0x22>
        }
    } else {
        /* Allocating memory from the heap. */
        if (&__HeapLimit - brk >= incr) {
            prev_brk = brk;
            brk += incr;
 8008c68:	6010      	str	r0, [r2, #0]
            prev_brk = (void *)-1;
        }
    }

    return prev_brk;
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	4770      	bx	lr
        if (&__HeapLimit - brk >= incr) {
 8008c6e:	4906      	ldr	r1, [pc, #24]	; (8008c88 <_sbrk+0x30>)
 8008c70:	1ac9      	subs	r1, r1, r3
 8008c72:	4281      	cmp	r1, r0
 8008c74:	db01      	blt.n	8008c7a <_sbrk+0x22>
            brk += incr;
 8008c76:	4418      	add	r0, r3
 8008c78:	e7f6      	b.n	8008c68 <_sbrk+0x10>
            prev_brk = (void *)-1;
 8008c7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    return prev_brk;
 8008c7e:	e7f4      	b.n	8008c6a <_sbrk+0x12>
 8008c80:	2000019c 	.word	0x2000019c
 8008c84:	20003540 	.word	0x20003540
 8008c88:	20005000 	.word	0x20005000

08008c8c <hal_gpio_clk_enable>:
 * @param port_idx
 */
static void
hal_gpio_clk_enable(uint32_t port_idx)
{
    switch (port_idx) {
 8008c8c:	3801      	subs	r0, #1
{
 8008c8e:	b086      	sub	sp, #24
 8008c90:	4b1c      	ldr	r3, [pc, #112]	; (8008d04 <hal_gpio_clk_enable+0x78>)
    switch (port_idx) {
 8008c92:	2803      	cmp	r0, #3
 8008c94:	d803      	bhi.n	8008c9e <hal_gpio_clk_enable+0x12>
 8008c96:	e8df f000 	tbb	[pc, r0]
 8008c9a:	170d      	.short	0x170d
 8008c9c:	2b21      	.short	0x2b21
#if defined GPIOA_BASE
    case 0:
        __HAL_RCC_GPIOA_CLK_ENABLE();
 8008c9e:	699a      	ldr	r2, [r3, #24]
 8008ca0:	f042 0204 	orr.w	r2, r2, #4
 8008ca4:	619a      	str	r2, [r3, #24]
 8008ca6:	699b      	ldr	r3, [r3, #24]
 8008ca8:	f003 0304 	and.w	r3, r3, #4
 8008cac:	9301      	str	r3, [sp, #4]
 8008cae:	9b01      	ldr	r3, [sp, #4]
#endif
    default:
        assert(0);
        break;
    }
}
 8008cb0:	b006      	add	sp, #24
 8008cb2:	4770      	bx	lr
        __HAL_RCC_GPIOB_CLK_ENABLE();
 8008cb4:	699a      	ldr	r2, [r3, #24]
 8008cb6:	f042 0208 	orr.w	r2, r2, #8
 8008cba:	619a      	str	r2, [r3, #24]
 8008cbc:	699b      	ldr	r3, [r3, #24]
 8008cbe:	f003 0308 	and.w	r3, r3, #8
 8008cc2:	9302      	str	r3, [sp, #8]
 8008cc4:	9b02      	ldr	r3, [sp, #8]
        break;
 8008cc6:	e7f3      	b.n	8008cb0 <hal_gpio_clk_enable+0x24>
        __HAL_RCC_GPIOC_CLK_ENABLE();
 8008cc8:	699a      	ldr	r2, [r3, #24]
 8008cca:	f042 0210 	orr.w	r2, r2, #16
 8008cce:	619a      	str	r2, [r3, #24]
 8008cd0:	699b      	ldr	r3, [r3, #24]
 8008cd2:	f003 0310 	and.w	r3, r3, #16
 8008cd6:	9303      	str	r3, [sp, #12]
 8008cd8:	9b03      	ldr	r3, [sp, #12]
        break;
 8008cda:	e7e9      	b.n	8008cb0 <hal_gpio_clk_enable+0x24>
        __HAL_RCC_GPIOD_CLK_ENABLE();
 8008cdc:	699a      	ldr	r2, [r3, #24]
 8008cde:	f042 0220 	orr.w	r2, r2, #32
 8008ce2:	619a      	str	r2, [r3, #24]
 8008ce4:	699b      	ldr	r3, [r3, #24]
 8008ce6:	f003 0320 	and.w	r3, r3, #32
 8008cea:	9304      	str	r3, [sp, #16]
 8008cec:	9b04      	ldr	r3, [sp, #16]
        break;
 8008cee:	e7df      	b.n	8008cb0 <hal_gpio_clk_enable+0x24>
        __HAL_RCC_GPIOE_CLK_ENABLE();
 8008cf0:	699a      	ldr	r2, [r3, #24]
 8008cf2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008cf6:	619a      	str	r2, [r3, #24]
 8008cf8:	699b      	ldr	r3, [r3, #24]
 8008cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cfe:	9305      	str	r3, [sp, #20]
 8008d00:	9b05      	ldr	r3, [sp, #20]
}
 8008d02:	e7d5      	b.n	8008cb0 <hal_gpio_clk_enable+0x24>
 8008d04:	40021000 	.word	0x40021000

08008d08 <hal_gpio_init_stm>:
 *
 * @return int
 */
int
hal_gpio_init_stm(int pin, GPIO_InitTypeDef *cfg)
{
 8008d08:	b510      	push	{r4, lr}
    int port;
    uint32_t mcu_pin_mask;

    /* Is this a valid pin? */
    port = MCU_GPIO_PIN_PORT(pin);
 8008d0a:	f3c0 1403 	ubfx	r4, r0, #4, #4
    if (port >= HAL_GPIO_PORT_COUNT) {
 8008d0e:	2c04      	cmp	r4, #4
 8008d10:	dc0f      	bgt.n	8008d32 <hal_gpio_init_stm+0x2a>
        return -1;
    }

    mcu_pin_mask = GPIO_MASK(pin);
 8008d12:	2301      	movs	r3, #1
 8008d14:	f000 000f 	and.w	r0, r0, #15
 8008d18:	fa03 f000 	lsl.w	r0, r3, r0
    cfg->Pin = mcu_pin_mask;
 8008d1c:	6008      	str	r0, [r1, #0]

    /* Enable the GPIO clock */
    hal_gpio_clk_enable(port);
 8008d1e:	4620      	mov	r0, r4
 8008d20:	f7ff ffb4 	bl	8008c8c <hal_gpio_clk_enable>

    /* Initialize pin as an input, setting proper mode */
    HAL_GPIO_Init(portmap[port], cfg);
 8008d24:	4b04      	ldr	r3, [pc, #16]	; (8008d38 <hal_gpio_init_stm+0x30>)
 8008d26:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8008d2a:	f000 f943 	bl	8008fb4 <HAL_GPIO_Init>

    return 0;
 8008d2e:	2000      	movs	r0, #0
}
 8008d30:	bd10      	pop	{r4, pc}
        return -1;
 8008d32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008d36:	e7fb      	b.n	8008d30 <hal_gpio_init_stm+0x28>
 8008d38:	0800e0a8 	.word	0x0800e0a8

08008d3c <hal_gpio_deinit_stm>:
{
    int port;
    uint32_t mcu_pin_mask;

    /* Is this a valid pin? */
    port = MCU_GPIO_PIN_PORT(pin);
 8008d3c:	f3c0 1203 	ubfx	r2, r0, #4, #4
    if (port >= HAL_GPIO_PORT_COUNT) {
 8008d40:	2a04      	cmp	r2, #4
{
 8008d42:	b508      	push	{r3, lr}
    if (port >= HAL_GPIO_PORT_COUNT) {
 8008d44:	dc0c      	bgt.n	8008d60 <hal_gpio_deinit_stm+0x24>
        return -1;
    }

    mcu_pin_mask = GPIO_MASK(pin);
 8008d46:	f000 030f 	and.w	r3, r0, #15
 8008d4a:	2001      	movs	r0, #1
 8008d4c:	4098      	lsls	r0, r3
    cfg->Pin = mcu_pin_mask;

    /* Initialize pin as an input, setting proper mode */
    HAL_GPIO_DeInit(portmap[port], cfg->Pin);
 8008d4e:	4b06      	ldr	r3, [pc, #24]	; (8008d68 <hal_gpio_deinit_stm+0x2c>)
    cfg->Pin = mcu_pin_mask;
 8008d50:	6008      	str	r0, [r1, #0]
    HAL_GPIO_DeInit(portmap[port], cfg->Pin);
 8008d52:	4601      	mov	r1, r0
 8008d54:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8008d58:	f000 fa0c 	bl	8009174 <HAL_GPIO_DeInit>

    return 0;
 8008d5c:	2000      	movs	r0, #0
}
 8008d5e:	bd08      	pop	{r3, pc}
        return -1;
 8008d60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008d64:	e7fb      	b.n	8008d5e <hal_gpio_deinit_stm+0x22>
 8008d66:	bf00      	nop
 8008d68:	0800e0a8 	.word	0x0800e0a8

08008d6c <FLASH_SetErrorCode>:
  uint32_t flags = 0U;
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8008d6c:	4a11      	ldr	r2, [pc, #68]	; (8008db4 <FLASH_SetErrorCode+0x48>)
 8008d6e:	68d3      	ldr	r3, [r2, #12]
 8008d70:	f013 0310 	ands.w	r3, r3, #16
 8008d74:	d005      	beq.n	8008d82 <FLASH_SetErrorCode+0x16>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8008d76:	4910      	ldr	r1, [pc, #64]	; (8008db8 <FLASH_SetErrorCode+0x4c>)
 8008d78:	69cb      	ldr	r3, [r1, #28]
 8008d7a:	f043 0302 	orr.w	r3, r3, #2
 8008d7e:	61cb      	str	r3, [r1, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8008d80:	2310      	movs	r3, #16
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8008d82:	68d2      	ldr	r2, [r2, #12]
 8008d84:	0750      	lsls	r0, r2, #29
 8008d86:	d506      	bpl.n	8008d96 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8008d88:	490b      	ldr	r1, [pc, #44]	; (8008db8 <FLASH_SetErrorCode+0x4c>)
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8008d8a:	f043 0304 	orr.w	r3, r3, #4
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8008d8e:	69ca      	ldr	r2, [r1, #28]
 8008d90:	f042 0201 	orr.w	r2, r2, #1
 8008d94:	61ca      	str	r2, [r1, #28]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8008d96:	4a07      	ldr	r2, [pc, #28]	; (8008db4 <FLASH_SetErrorCode+0x48>)
 8008d98:	69d1      	ldr	r1, [r2, #28]
 8008d9a:	07c9      	lsls	r1, r1, #31
 8008d9c:	d508      	bpl.n	8008db0 <FLASH_SetErrorCode+0x44>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8008d9e:	4806      	ldr	r0, [pc, #24]	; (8008db8 <FLASH_SetErrorCode+0x4c>)
 8008da0:	69c1      	ldr	r1, [r0, #28]
 8008da2:	f041 0104 	orr.w	r1, r1, #4
 8008da6:	61c1      	str	r1, [r0, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8008da8:	69d1      	ldr	r1, [r2, #28]
 8008daa:	f021 0101 	bic.w	r1, r1, #1
 8008dae:	61d1      	str	r1, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8008db0:	60d3      	str	r3, [r2, #12]
}  
 8008db2:	4770      	bx	lr
 8008db4:	40022000 	.word	0x40022000
 8008db8:	20003518 	.word	0x20003518

08008dbc <HAL_FLASH_Unlock>:
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 8008dbc:	4b06      	ldr	r3, [pc, #24]	; (8008dd8 <HAL_FLASH_Unlock+0x1c>)
 8008dbe:	691a      	ldr	r2, [r3, #16]
 8008dc0:	0612      	lsls	r2, r2, #24
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8008dc2:	bf41      	itttt	mi
 8008dc4:	4a05      	ldrmi	r2, [pc, #20]	; (8008ddc <HAL_FLASH_Unlock+0x20>)
  return HAL_OK; 
 8008dc6:	2000      	movmi	r0, #0
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8008dc8:	605a      	strmi	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8008dca:	f102 3288 	addmi.w	r2, r2, #2290649224	; 0x88888888
 8008dce:	bf4c      	ite	mi
 8008dd0:	605a      	strmi	r2, [r3, #4]
    return HAL_ERROR;
 8008dd2:	2001      	movpl	r0, #1
}
 8008dd4:	4770      	bx	lr
 8008dd6:	bf00      	nop
 8008dd8:	40022000 	.word	0x40022000
 8008ddc:	45670123 	.word	0x45670123

08008de0 <FLASH_WaitForLastOperation>:
{
 8008de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008de2:	4606      	mov	r6, r0
  uint32_t tickstart = HAL_GetTick();
 8008de4:	f7ff fb9a 	bl	800851c <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8008de8:	4c11      	ldr	r4, [pc, #68]	; (8008e30 <FLASH_WaitForLastOperation+0x50>)
  uint32_t tickstart = HAL_GetTick();
 8008dea:	4607      	mov	r7, r0
 8008dec:	4625      	mov	r5, r4
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8008dee:	68e3      	ldr	r3, [r4, #12]
 8008df0:	07d8      	lsls	r0, r3, #31
 8008df2:	d412      	bmi.n	8008e1a <FLASH_WaitForLastOperation+0x3a>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8008df4:	68e3      	ldr	r3, [r4, #12]
 8008df6:	0699      	lsls	r1, r3, #26
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8008df8:	bf44      	itt	mi
 8008dfa:	2320      	movmi	r3, #32
 8008dfc:	60e3      	strmi	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8008dfe:	68eb      	ldr	r3, [r5, #12]
 8008e00:	06da      	lsls	r2, r3, #27
 8008e02:	d406      	bmi.n	8008e12 <FLASH_WaitForLastOperation+0x32>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8008e04:	69eb      	ldr	r3, [r5, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8008e06:	07db      	lsls	r3, r3, #31
 8008e08:	d403      	bmi.n	8008e12 <FLASH_WaitForLastOperation+0x32>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8008e0a:	68e8      	ldr	r0, [r5, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8008e0c:	f010 0004 	ands.w	r0, r0, #4
 8008e10:	d007      	beq.n	8008e22 <FLASH_WaitForLastOperation+0x42>
    FLASH_SetErrorCode();
 8008e12:	f7ff ffab 	bl	8008d6c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8008e16:	2001      	movs	r0, #1
 8008e18:	e003      	b.n	8008e22 <FLASH_WaitForLastOperation+0x42>
    if (Timeout != HAL_MAX_DELAY)
 8008e1a:	1c73      	adds	r3, r6, #1
 8008e1c:	d0e7      	beq.n	8008dee <FLASH_WaitForLastOperation+0xe>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8008e1e:	b90e      	cbnz	r6, 8008e24 <FLASH_WaitForLastOperation+0x44>
        return HAL_TIMEOUT;
 8008e20:	2003      	movs	r0, #3
}
 8008e22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8008e24:	f7ff fb7a 	bl	800851c <HAL_GetTick>
 8008e28:	1bc0      	subs	r0, r0, r7
 8008e2a:	42b0      	cmp	r0, r6
 8008e2c:	d9df      	bls.n	8008dee <FLASH_WaitForLastOperation+0xe>
 8008e2e:	e7f7      	b.n	8008e20 <FLASH_WaitForLastOperation+0x40>
 8008e30:	40022000 	.word	0x40022000

08008e34 <HAL_FLASH_Program>:
{
 8008e34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_LOCK(&pFlash);
 8008e38:	4c24      	ldr	r4, [pc, #144]	; (8008ecc <HAL_FLASH_Program+0x98>)
{
 8008e3a:	461e      	mov	r6, r3
  __HAL_LOCK(&pFlash);
 8008e3c:	7e23      	ldrb	r3, [r4, #24]
{
 8008e3e:	4605      	mov	r5, r0
  __HAL_LOCK(&pFlash);
 8008e40:	2b01      	cmp	r3, #1
{
 8008e42:	460f      	mov	r7, r1
 8008e44:	4690      	mov	r8, r2
  __HAL_LOCK(&pFlash);
 8008e46:	d03f      	beq.n	8008ec8 <HAL_FLASH_Program+0x94>
 8008e48:	2301      	movs	r3, #1
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8008e4a:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 8008e4e:	7623      	strb	r3, [r4, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8008e50:	f7ff ffc6 	bl	8008de0 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8008e54:	bba0      	cbnz	r0, 8008ec0 <HAL_FLASH_Program+0x8c>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8008e56:	2d01      	cmp	r5, #1
 8008e58:	d003      	beq.n	8008e62 <HAL_FLASH_Program+0x2e>
      nbiterations = 4U;
 8008e5a:	2d02      	cmp	r5, #2
 8008e5c:	bf0c      	ite	eq
 8008e5e:	2502      	moveq	r5, #2
 8008e60:	2504      	movne	r5, #4
 8008e62:	f04f 0900 	mov.w	r9, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8008e66:	46cb      	mov	fp, r9
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8008e68:	f8df a064 	ldr.w	sl, [pc, #100]	; 8008ed0 <HAL_FLASH_Program+0x9c>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8008e6c:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8008e70:	f1c3 0120 	rsb	r1, r3, #32
 8008e74:	f1a3 0220 	sub.w	r2, r3, #32
 8008e78:	fa06 f101 	lsl.w	r1, r6, r1
 8008e7c:	fa28 f303 	lsr.w	r3, r8, r3
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8008e80:	f8c4 b01c 	str.w	fp, [r4, #28]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8008e84:	430b      	orrs	r3, r1
 8008e86:	fa26 f202 	lsr.w	r2, r6, r2
 8008e8a:	4313      	orrs	r3, r2
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8008e8c:	f8da 2010 	ldr.w	r2, [sl, #16]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8008e90:	b29b      	uxth	r3, r3
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8008e92:	f042 0201 	orr.w	r2, r2, #1
 8008e96:	f8ca 2010 	str.w	r2, [sl, #16]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8008e9a:	f24c 3050 	movw	r0, #50000	; 0xc350
  *(__IO uint16_t*)Address = Data;
 8008e9e:	f827 3019 	strh.w	r3, [r7, r9, lsl #1]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8008ea2:	f7ff ff9d 	bl	8008de0 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8008ea6:	f8da 3010 	ldr.w	r3, [sl, #16]
 8008eaa:	f023 0301 	bic.w	r3, r3, #1
 8008eae:	f8ca 3010 	str.w	r3, [sl, #16]
      if (status != HAL_OK)
 8008eb2:	b928      	cbnz	r0, 8008ec0 <HAL_FLASH_Program+0x8c>
 8008eb4:	f109 0901 	add.w	r9, r9, #1
    for (index = 0U; index < nbiterations; index++)
 8008eb8:	fa5f f389 	uxtb.w	r3, r9
 8008ebc:	429d      	cmp	r5, r3
 8008ebe:	d8d5      	bhi.n	8008e6c <HAL_FLASH_Program+0x38>
  __HAL_UNLOCK(&pFlash);
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	7623      	strb	r3, [r4, #24]
}
 8008ec4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_LOCK(&pFlash);
 8008ec8:	2002      	movs	r0, #2
 8008eca:	e7fb      	b.n	8008ec4 <HAL_FLASH_Program+0x90>
 8008ecc:	20003518 	.word	0x20003518
 8008ed0:	40022000 	.word	0x40022000

08008ed4 <FLASH_MassErase.isra.0>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	4b06      	ldr	r3, [pc, #24]	; (8008ef0 <FLASH_MassErase.isra.0+0x1c>)
 8008ed8:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8008eda:	4b06      	ldr	r3, [pc, #24]	; (8008ef4 <FLASH_MassErase.isra.0+0x20>)
 8008edc:	691a      	ldr	r2, [r3, #16]
 8008ede:	f042 0204 	orr.w	r2, r2, #4
 8008ee2:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8008ee4:	691a      	ldr	r2, [r3, #16]
 8008ee6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008eea:	611a      	str	r2, [r3, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8008eec:	4770      	bx	lr
 8008eee:	bf00      	nop
 8008ef0:	20003518 	.word	0x20003518
 8008ef4:	40022000 	.word	0x40022000

08008ef8 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8008ef8:	2200      	movs	r2, #0
 8008efa:	4b06      	ldr	r3, [pc, #24]	; (8008f14 <FLASH_PageErase+0x1c>)
 8008efc:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8008efe:	4b06      	ldr	r3, [pc, #24]	; (8008f18 <FLASH_PageErase+0x20>)
 8008f00:	691a      	ldr	r2, [r3, #16]
 8008f02:	f042 0202 	orr.w	r2, r2, #2
 8008f06:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8008f08:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8008f0a:	691a      	ldr	r2, [r3, #16]
 8008f0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008f10:	611a      	str	r2, [r3, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8008f12:	4770      	bx	lr
 8008f14:	20003518 	.word	0x20003518
 8008f18:	40022000 	.word	0x40022000

08008f1c <HAL_FLASHEx_Erase>:
{
 8008f1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 8008f20:	4d22      	ldr	r5, [pc, #136]	; (8008fac <HAL_FLASHEx_Erase+0x90>)
{
 8008f22:	4607      	mov	r7, r0
  __HAL_LOCK(&pFlash);
 8008f24:	7e2b      	ldrb	r3, [r5, #24]
{
 8008f26:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 8008f28:	2b01      	cmp	r3, #1
 8008f2a:	d03d      	beq.n	8008fa8 <HAL_FLASHEx_Erase+0x8c>
 8008f2c:	2401      	movs	r4, #1
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8008f2e:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(&pFlash);
 8008f30:	762c      	strb	r4, [r5, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8008f32:	2b02      	cmp	r3, #2
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8008f34:	f24c 3050 	movw	r0, #50000	; 0xc350
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8008f38:	d113      	bne.n	8008f62 <HAL_FLASHEx_Erase+0x46>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8008f3a:	f7ff ff51 	bl	8008de0 <FLASH_WaitForLastOperation>
 8008f3e:	b120      	cbz	r0, 8008f4a <HAL_FLASHEx_Erase+0x2e>
  HAL_StatusTypeDef status = HAL_ERROR;
 8008f40:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 8008f42:	2300      	movs	r3, #0
 8008f44:	762b      	strb	r3, [r5, #24]
}
 8008f46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        FLASH_MassErase(FLASH_BANK_1);
 8008f4a:	f7ff ffc3 	bl	8008ed4 <FLASH_MassErase.isra.0>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008f4e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8008f52:	f7ff ff45 	bl	8008de0 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8008f56:	4a16      	ldr	r2, [pc, #88]	; (8008fb0 <HAL_FLASHEx_Erase+0x94>)
 8008f58:	6913      	ldr	r3, [r2, #16]
 8008f5a:	f023 0304 	bic.w	r3, r3, #4
 8008f5e:	6113      	str	r3, [r2, #16]
 8008f60:	e7ef      	b.n	8008f42 <HAL_FLASHEx_Erase+0x26>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8008f62:	f7ff ff3d 	bl	8008de0 <FLASH_WaitForLastOperation>
 8008f66:	2800      	cmp	r0, #0
 8008f68:	d1ea      	bne.n	8008f40 <HAL_FLASHEx_Erase+0x24>
        *PageError = 0xFFFFFFFFU;
 8008f6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008f6e:	f8c8 3000 	str.w	r3, [r8]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008f72:	4620      	mov	r0, r4
        for(address = pEraseInit->PageAddress;
 8008f74:	68be      	ldr	r6, [r7, #8]
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8008f76:	4c0e      	ldr	r4, [pc, #56]	; (8008fb0 <HAL_FLASHEx_Erase+0x94>)
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8008f78:	e9d7 3202 	ldrd	r3, r2, [r7, #8]
 8008f7c:	eb03 2382 	add.w	r3, r3, r2, lsl #10
        for(address = pEraseInit->PageAddress;
 8008f80:	42b3      	cmp	r3, r6
 8008f82:	d9de      	bls.n	8008f42 <HAL_FLASHEx_Erase+0x26>
          FLASH_PageErase(address);
 8008f84:	4630      	mov	r0, r6
 8008f86:	f7ff ffb7 	bl	8008ef8 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008f8a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8008f8e:	f7ff ff27 	bl	8008de0 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8008f92:	6923      	ldr	r3, [r4, #16]
 8008f94:	f023 0302 	bic.w	r3, r3, #2
 8008f98:	6123      	str	r3, [r4, #16]
          if (status != HAL_OK)
 8008f9a:	b110      	cbz	r0, 8008fa2 <HAL_FLASHEx_Erase+0x86>
            *PageError = address;
 8008f9c:	f8c8 6000 	str.w	r6, [r8]
            break;
 8008fa0:	e7cf      	b.n	8008f42 <HAL_FLASHEx_Erase+0x26>
            address += FLASH_PAGE_SIZE)
 8008fa2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8008fa6:	e7e7      	b.n	8008f78 <HAL_FLASHEx_Erase+0x5c>
  __HAL_LOCK(&pFlash);
 8008fa8:	2002      	movs	r0, #2
 8008faa:	e7cc      	b.n	8008f46 <HAL_FLASHEx_Erase+0x2a>
 8008fac:	20003518 	.word	0x20003518
 8008fb0:	40022000 	.word	0x40022000

08008fb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008fb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8008fb8:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8008fba:	4616      	mov	r6, r2
 8008fbc:	4b65      	ldr	r3, [pc, #404]	; (8009154 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8008fbe:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8009164 <HAL_GPIO_Init+0x1b0>
 8008fc2:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8009168 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 8008fc6:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008fca:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 8008fcc:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008fd0:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8008fd4:	45a0      	cmp	r8, r4
 8008fd6:	d17e      	bne.n	80090d6 <HAL_GPIO_Init+0x122>
      switch (GPIO_Init->Mode)
 8008fd8:	684d      	ldr	r5, [r1, #4]
 8008fda:	2d12      	cmp	r5, #18
 8008fdc:	f000 80ae 	beq.w	800913c <HAL_GPIO_Init+0x188>
 8008fe0:	f200 8087 	bhi.w	80090f2 <HAL_GPIO_Init+0x13e>
 8008fe4:	2d02      	cmp	r5, #2
 8008fe6:	f000 80a6 	beq.w	8009136 <HAL_GPIO_Init+0x182>
 8008fea:	d87b      	bhi.n	80090e4 <HAL_GPIO_Init+0x130>
 8008fec:	2d00      	cmp	r5, #0
 8008fee:	f000 808d 	beq.w	800910c <HAL_GPIO_Init+0x158>
 8008ff2:	2d01      	cmp	r5, #1
 8008ff4:	f000 809d 	beq.w	8009132 <HAL_GPIO_Init+0x17e>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 8008ff8:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8008ffc:	2cff      	cmp	r4, #255	; 0xff
 8008ffe:	bf93      	iteet	ls
 8009000:	4682      	movls	sl, r0
 8009002:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8009006:	3d08      	subhi	r5, #8
 8009008:	f8d0 b000 	ldrls.w	fp, [r0]
 800900c:	bf92      	itee	ls
 800900e:	00b5      	lslls	r5, r6, #2
 8009010:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8009014:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 8009016:	fa09 f805 	lsl.w	r8, r9, r5
 800901a:	ea2b 0808 	bic.w	r8, fp, r8
 800901e:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009022:	bf88      	it	hi
 8009024:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 8009028:	ea48 0505 	orr.w	r5, r8, r5
 800902c:	f8ca 5000 	str.w	r5, [sl]
      
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8009030:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8009034:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8009038:	d04d      	beq.n	80090d6 <HAL_GPIO_Init+0x122>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800903a:	4f47      	ldr	r7, [pc, #284]	; (8009158 <HAL_GPIO_Init+0x1a4>)
 800903c:	f026 0803 	bic.w	r8, r6, #3
 8009040:	69bd      	ldr	r5, [r7, #24]
 8009042:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8009046:	f045 0501 	orr.w	r5, r5, #1
 800904a:	61bd      	str	r5, [r7, #24]
 800904c:	69bd      	ldr	r5, [r7, #24]
 800904e:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 8009052:	f005 0501 	and.w	r5, r5, #1
 8009056:	9501      	str	r5, [sp, #4]
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8009058:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800905c:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800905e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8009062:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8009066:	fa09 f90b 	lsl.w	r9, r9, fp
 800906a:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800906e:	4d3b      	ldr	r5, [pc, #236]	; (800915c <HAL_GPIO_Init+0x1a8>)
 8009070:	42a8      	cmp	r0, r5
 8009072:	d068      	beq.n	8009146 <HAL_GPIO_Init+0x192>
 8009074:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009078:	42a8      	cmp	r0, r5
 800907a:	d066      	beq.n	800914a <HAL_GPIO_Init+0x196>
 800907c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009080:	42a8      	cmp	r0, r5
 8009082:	d064      	beq.n	800914e <HAL_GPIO_Init+0x19a>
 8009084:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009088:	42a8      	cmp	r0, r5
 800908a:	bf0c      	ite	eq
 800908c:	2503      	moveq	r5, #3
 800908e:	2504      	movne	r5, #4
 8009090:	fa05 f50b 	lsl.w	r5, r5, fp
 8009094:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 8009098:	f8c8 5008 	str.w	r5, [r8, #8]
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 800909c:	681d      	ldr	r5, [r3, #0]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800909e:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent); 
 80090a2:	bf14      	ite	ne
 80090a4:	4325      	orrne	r5, r4
        } 
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
 80090a6:	43a5      	biceq	r5, r4
 80090a8:	601d      	str	r5, [r3, #0]
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 80090aa:	685d      	ldr	r5, [r3, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80090ac:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent); 
 80090b0:	bf14      	ite	ne
 80090b2:	4325      	orrne	r5, r4
        } 
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
 80090b4:	43a5      	biceq	r5, r4
 80090b6:	605d      	str	r5, [r3, #4]
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 80090b8:	689d      	ldr	r5, [r3, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80090ba:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent); 
 80090be:	bf14      	ite	ne
 80090c0:	4325      	orrne	r5, r4
        } 
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
 80090c2:	43a5      	biceq	r5, r4
 80090c4:	609d      	str	r5, [r3, #8]
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 80090c6:	68dd      	ldr	r5, [r3, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80090c8:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent); 
 80090cc:	bf14      	ite	ne
 80090ce:	432c      	orrne	r4, r5
        } 
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
 80090d0:	ea25 0404 	biceq.w	r4, r5, r4
 80090d4:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80090d6:	3601      	adds	r6, #1
 80090d8:	2e10      	cmp	r6, #16
 80090da:	f47f af74 	bne.w	8008fc6 <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 80090de:	b003      	add	sp, #12
 80090e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 80090e4:	2d03      	cmp	r5, #3
 80090e6:	d022      	beq.n	800912e <HAL_GPIO_Init+0x17a>
 80090e8:	2d11      	cmp	r5, #17
 80090ea:	d185      	bne.n	8008ff8 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80090ec:	68ca      	ldr	r2, [r1, #12]
 80090ee:	3204      	adds	r2, #4
          break;
 80090f0:	e782      	b.n	8008ff8 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 80090f2:	4f1b      	ldr	r7, [pc, #108]	; (8009160 <HAL_GPIO_Init+0x1ac>)
 80090f4:	42bd      	cmp	r5, r7
 80090f6:	d009      	beq.n	800910c <HAL_GPIO_Init+0x158>
 80090f8:	d812      	bhi.n	8009120 <HAL_GPIO_Init+0x16c>
 80090fa:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800916c <HAL_GPIO_Init+0x1b8>
 80090fe:	454d      	cmp	r5, r9
 8009100:	d004      	beq.n	800910c <HAL_GPIO_Init+0x158>
 8009102:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8009106:	454d      	cmp	r5, r9
 8009108:	f47f af76 	bne.w	8008ff8 <HAL_GPIO_Init+0x44>
          if(GPIO_Init->Pull == GPIO_NOPULL)
 800910c:	688a      	ldr	r2, [r1, #8]
 800910e:	b1c2      	cbz	r2, 8009142 <HAL_GPIO_Init+0x18e>
          else if(GPIO_Init->Pull == GPIO_PULLUP)
 8009110:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8009112:	bf0c      	ite	eq
 8009114:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8009118:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800911c:	2208      	movs	r2, #8
 800911e:	e76b      	b.n	8008ff8 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8009120:	4565      	cmp	r5, ip
 8009122:	d0f3      	beq.n	800910c <HAL_GPIO_Init+0x158>
 8009124:	4575      	cmp	r5, lr
 8009126:	d0f1      	beq.n	800910c <HAL_GPIO_Init+0x158>
 8009128:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8009170 <HAL_GPIO_Init+0x1bc>
 800912c:	e7eb      	b.n	8009106 <HAL_GPIO_Init+0x152>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800912e:	2200      	movs	r2, #0
 8009130:	e762      	b.n	8008ff8 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8009132:	68ca      	ldr	r2, [r1, #12]
          break;
 8009134:	e760      	b.n	8008ff8 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8009136:	68ca      	ldr	r2, [r1, #12]
 8009138:	3208      	adds	r2, #8
          break;
 800913a:	e75d      	b.n	8008ff8 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800913c:	68ca      	ldr	r2, [r1, #12]
 800913e:	320c      	adds	r2, #12
          break;
 8009140:	e75a      	b.n	8008ff8 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8009142:	2204      	movs	r2, #4
 8009144:	e758      	b.n	8008ff8 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8009146:	2500      	movs	r5, #0
 8009148:	e7a2      	b.n	8009090 <HAL_GPIO_Init+0xdc>
 800914a:	2501      	movs	r5, #1
 800914c:	e7a0      	b.n	8009090 <HAL_GPIO_Init+0xdc>
 800914e:	2502      	movs	r5, #2
 8009150:	e79e      	b.n	8009090 <HAL_GPIO_Init+0xdc>
 8009152:	bf00      	nop
 8009154:	40010400 	.word	0x40010400
 8009158:	40021000 	.word	0x40021000
 800915c:	40010800 	.word	0x40010800
 8009160:	10210000 	.word	0x10210000
 8009164:	10310000 	.word	0x10310000
 8009168:	10320000 	.word	0x10320000
 800916c:	10110000 	.word	0x10110000
 8009170:	10220000 	.word	0x10220000

08009174 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{ 
 8009174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 8009178:	2200      	movs	r2, #0

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1U << position);
 800917a:	f04f 0901 	mov.w	r9, #1
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
      
      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), GPIO_CRL_CNF0_0 << registeroffset);
 800917e:	f04f 0e0f 	mov.w	lr, #15
 8009182:	f04f 0a04 	mov.w	sl, #4
      {
        tmp = 0x0FU << (4U * (position & 0x03U));
        CLEAR_BIT(AFIO->EXTICR[position >> 2U], tmp);
          
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8009186:	4c30      	ldr	r4, [pc, #192]	; (8009248 <HAL_GPIO_DeInit+0xd4>)
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8009188:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 8009250 <HAL_GPIO_DeInit+0xdc>
  while ((GPIO_Pin >> position) != 0U)
 800918c:	fa31 f302 	lsrs.w	r3, r1, r2
 8009190:	d101      	bne.n	8009196 <HAL_GPIO_DeInit+0x22>
      }
    }
    
    position++;
  }
}
 8009192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Pin) & (1U << position);
 8009196:	fa09 f302 	lsl.w	r3, r9, r2
    if (iocurrent)
 800919a:	400b      	ands	r3, r1
 800919c:	d04c      	beq.n	8009238 <HAL_GPIO_DeInit+0xc4>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800919e:	2bff      	cmp	r3, #255	; 0xff
 80091a0:	bf98      	it	ls
 80091a2:	4607      	movls	r7, r0
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 80091a4:	ea6f 0303 	mvn.w	r3, r3
 80091a8:	bf85      	ittet	hi
 80091aa:	f102 4580 	addhi.w	r5, r2, #1073741824	; 0x40000000
 80091ae:	3d08      	subhi	r5, #8
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80091b0:	f8d0 c000 	ldrls.w	ip, [r0]
 80091b4:	f8d0 c004 	ldrhi.w	ip, [r0, #4]
 80091b8:	bf94      	ite	ls
 80091ba:	0095      	lslls	r5, r2, #2
 80091bc:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), GPIO_CRL_CNF0_0 << registeroffset);
 80091be:	fa0e f605 	lsl.w	r6, lr, r5
 80091c2:	ea2c 0606 	bic.w	r6, ip, r6
 80091c6:	fa0a f505 	lsl.w	r5, sl, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80091ca:	bf88      	it	hi
 80091cc:	1d07      	addhi	r7, r0, #4
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), GPIO_CRL_CNF0_0 << registeroffset);
 80091ce:	432e      	orrs	r6, r5
 80091d0:	603e      	str	r6, [r7, #0]
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 80091d2:	68c5      	ldr	r5, [r0, #12]
      tmp &= 0x0FU << (4U * (position & 0x03U));
 80091d4:	f002 0703 	and.w	r7, r2, #3
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 80091d8:	401d      	ands	r5, r3
 80091da:	60c5      	str	r5, [r0, #12]
 80091dc:	f022 0503 	bic.w	r5, r2, #3
 80091e0:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 80091e4:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
      tmp = AFIO->EXTICR[position >> 2U];
 80091e8:	68ae      	ldr	r6, [r5, #8]
      tmp &= 0x0FU << (4U * (position & 0x03U));
 80091ea:	00bf      	lsls	r7, r7, #2
 80091ec:	fa0e f807 	lsl.w	r8, lr, r7
 80091f0:	ea08 0c06 	and.w	ip, r8, r6
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80091f4:	4e15      	ldr	r6, [pc, #84]	; (800924c <HAL_GPIO_DeInit+0xd8>)
 80091f6:	42b0      	cmp	r0, r6
 80091f8:	d020      	beq.n	800923c <HAL_GPIO_DeInit+0xc8>
 80091fa:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80091fe:	42b0      	cmp	r0, r6
 8009200:	d01e      	beq.n	8009240 <HAL_GPIO_DeInit+0xcc>
 8009202:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8009206:	42b0      	cmp	r0, r6
 8009208:	d01c      	beq.n	8009244 <HAL_GPIO_DeInit+0xd0>
 800920a:	4558      	cmp	r0, fp
 800920c:	bf0c      	ite	eq
 800920e:	2603      	moveq	r6, #3
 8009210:	2604      	movne	r6, #4
 8009212:	40be      	lsls	r6, r7
 8009214:	4566      	cmp	r6, ip
 8009216:	d10f      	bne.n	8009238 <HAL_GPIO_DeInit+0xc4>
        CLEAR_BIT(AFIO->EXTICR[position >> 2U], tmp);
 8009218:	68ae      	ldr	r6, [r5, #8]
 800921a:	ea26 0608 	bic.w	r6, r6, r8
 800921e:	60ae      	str	r6, [r5, #8]
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8009220:	6825      	ldr	r5, [r4, #0]
 8009222:	401d      	ands	r5, r3
 8009224:	6025      	str	r5, [r4, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8009226:	6865      	ldr	r5, [r4, #4]
 8009228:	401d      	ands	r5, r3
 800922a:	6065      	str	r5, [r4, #4]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 800922c:	68a5      	ldr	r5, [r4, #8]
 800922e:	401d      	ands	r5, r3
 8009230:	60a5      	str	r5, [r4, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8009232:	68e5      	ldr	r5, [r4, #12]
 8009234:	402b      	ands	r3, r5
 8009236:	60e3      	str	r3, [r4, #12]
    position++;
 8009238:	3201      	adds	r2, #1
 800923a:	e7a7      	b.n	800918c <HAL_GPIO_DeInit+0x18>
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800923c:	2600      	movs	r6, #0
 800923e:	e7e8      	b.n	8009212 <HAL_GPIO_DeInit+0x9e>
 8009240:	2601      	movs	r6, #1
 8009242:	e7e6      	b.n	8009212 <HAL_GPIO_DeInit+0x9e>
 8009244:	2602      	movs	r6, #2
 8009246:	e7e4      	b.n	8009212 <HAL_GPIO_DeInit+0x9e>
 8009248:	40010400 	.word	0x40010400
 800924c:	40010800 	.word	0x40010800
 8009250:	40011400 	.word	0x40011400

08009254 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8009254:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if(hiwdg == NULL)
 8009256:	4604      	mov	r4, r0
 8009258:	b1d8      	cbz	r0, 8009292 <HAL_IWDG_Init+0x3e>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automaticaly */
  __HAL_IWDG_START(hiwdg);
 800925a:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800925e:	6803      	ldr	r3, [r0, #0]
 8009260:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing 0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8009262:	f245 5255 	movw	r2, #21845	; 0x5555
 8009266:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8009268:	6842      	ldr	r2, [r0, #4]
 800926a:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800926c:	6882      	ldr	r2, [r0, #8]
 800926e:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8009270:	f7ff f954 	bl	800851c <HAL_GetTick>
 8009274:	4605      	mov	r5, r0

  /* Wait for register to be updated */
  while(hiwdg->Instance->SR != RESET)
 8009276:	6823      	ldr	r3, [r4, #0]
 8009278:	68d8      	ldr	r0, [r3, #12]
 800927a:	b918      	cbnz	r0, 8009284 <HAL_IWDG_Init+0x30>
      return HAL_TIMEOUT;
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800927c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8009280:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 8009282:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > HAL_IWDG_DEFAULT_TIMEOUT)
 8009284:	f7ff f94a 	bl	800851c <HAL_GetTick>
 8009288:	1b40      	subs	r0, r0, r5
 800928a:	2830      	cmp	r0, #48	; 0x30
 800928c:	d9f3      	bls.n	8009276 <HAL_IWDG_Init+0x22>
      return HAL_TIMEOUT;
 800928e:	2003      	movs	r0, #3
 8009290:	e7f7      	b.n	8009282 <HAL_IWDG_Init+0x2e>
    return HAL_ERROR;
 8009292:	2001      	movs	r0, #1
 8009294:	e7f5      	b.n	8009282 <HAL_IWDG_Init+0x2e>

08009296 <HAL_IWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8009296:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800929a:	6803      	ldr	r3, [r0, #0]

  /* Return function status */
  return HAL_OK;
}
 800929c:	2000      	movs	r0, #0
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800929e:	601a      	str	r2, [r3, #0]
}
 80092a0:	4770      	bx	lr
	...

080092a4 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80092a4:	6803      	ldr	r3, [r0, #0]
{
 80092a6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80092aa:	07db      	lsls	r3, r3, #31
{
 80092ac:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80092ae:	d410      	bmi.n	80092d2 <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80092b0:	682b      	ldr	r3, [r5, #0]
 80092b2:	079f      	lsls	r7, r3, #30
 80092b4:	d45e      	bmi.n	8009374 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80092b6:	682b      	ldr	r3, [r5, #0]
 80092b8:	0719      	lsls	r1, r3, #28
 80092ba:	f100 8095 	bmi.w	80093e8 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80092be:	682b      	ldr	r3, [r5, #0]
 80092c0:	075a      	lsls	r2, r3, #29
 80092c2:	f100 80bf 	bmi.w	8009444 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80092c6:	69ea      	ldr	r2, [r5, #28]
 80092c8:	2a00      	cmp	r2, #0
 80092ca:	f040 812d 	bne.w	8009528 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80092ce:	2000      	movs	r0, #0
 80092d0:	e014      	b.n	80092fc <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80092d2:	4c90      	ldr	r4, [pc, #576]	; (8009514 <HAL_RCC_OscConfig+0x270>)
 80092d4:	6863      	ldr	r3, [r4, #4]
 80092d6:	f003 030c 	and.w	r3, r3, #12
 80092da:	2b04      	cmp	r3, #4
 80092dc:	d007      	beq.n	80092ee <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80092de:	6863      	ldr	r3, [r4, #4]
 80092e0:	f003 030c 	and.w	r3, r3, #12
 80092e4:	2b08      	cmp	r3, #8
 80092e6:	d10c      	bne.n	8009302 <HAL_RCC_OscConfig+0x5e>
 80092e8:	6863      	ldr	r3, [r4, #4]
 80092ea:	03de      	lsls	r6, r3, #15
 80092ec:	d509      	bpl.n	8009302 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80092ee:	6823      	ldr	r3, [r4, #0]
 80092f0:	039c      	lsls	r4, r3, #14
 80092f2:	d5dd      	bpl.n	80092b0 <HAL_RCC_OscConfig+0xc>
 80092f4:	686b      	ldr	r3, [r5, #4]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d1da      	bne.n	80092b0 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80092fa:	2001      	movs	r0, #1
}
 80092fc:	b002      	add	sp, #8
 80092fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009302:	686b      	ldr	r3, [r5, #4]
 8009304:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009308:	d110      	bne.n	800932c <HAL_RCC_OscConfig+0x88>
 800930a:	6823      	ldr	r3, [r4, #0]
 800930c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009310:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8009312:	f7ff f903 	bl	800851c <HAL_GetTick>
 8009316:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009318:	6823      	ldr	r3, [r4, #0]
 800931a:	0398      	lsls	r0, r3, #14
 800931c:	d4c8      	bmi.n	80092b0 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800931e:	f7ff f8fd 	bl	800851c <HAL_GetTick>
 8009322:	1b80      	subs	r0, r0, r6
 8009324:	2864      	cmp	r0, #100	; 0x64
 8009326:	d9f7      	bls.n	8009318 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8009328:	2003      	movs	r0, #3
 800932a:	e7e7      	b.n	80092fc <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800932c:	b99b      	cbnz	r3, 8009356 <HAL_RCC_OscConfig+0xb2>
 800932e:	6823      	ldr	r3, [r4, #0]
 8009330:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009334:	6023      	str	r3, [r4, #0]
 8009336:	6823      	ldr	r3, [r4, #0]
 8009338:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800933c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800933e:	f7ff f8ed 	bl	800851c <HAL_GetTick>
 8009342:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009344:	6823      	ldr	r3, [r4, #0]
 8009346:	0399      	lsls	r1, r3, #14
 8009348:	d5b2      	bpl.n	80092b0 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800934a:	f7ff f8e7 	bl	800851c <HAL_GetTick>
 800934e:	1b80      	subs	r0, r0, r6
 8009350:	2864      	cmp	r0, #100	; 0x64
 8009352:	d9f7      	bls.n	8009344 <HAL_RCC_OscConfig+0xa0>
 8009354:	e7e8      	b.n	8009328 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009356:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800935a:	6823      	ldr	r3, [r4, #0]
 800935c:	d103      	bne.n	8009366 <HAL_RCC_OscConfig+0xc2>
 800935e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009362:	6023      	str	r3, [r4, #0]
 8009364:	e7d1      	b.n	800930a <HAL_RCC_OscConfig+0x66>
 8009366:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800936a:	6023      	str	r3, [r4, #0]
 800936c:	6823      	ldr	r3, [r4, #0]
 800936e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009372:	e7cd      	b.n	8009310 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8009374:	4c67      	ldr	r4, [pc, #412]	; (8009514 <HAL_RCC_OscConfig+0x270>)
 8009376:	6863      	ldr	r3, [r4, #4]
 8009378:	f013 0f0c 	tst.w	r3, #12
 800937c:	d007      	beq.n	800938e <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800937e:	6863      	ldr	r3, [r4, #4]
 8009380:	f003 030c 	and.w	r3, r3, #12
 8009384:	2b08      	cmp	r3, #8
 8009386:	d110      	bne.n	80093aa <HAL_RCC_OscConfig+0x106>
 8009388:	6863      	ldr	r3, [r4, #4]
 800938a:	03da      	lsls	r2, r3, #15
 800938c:	d40d      	bmi.n	80093aa <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800938e:	6823      	ldr	r3, [r4, #0]
 8009390:	079b      	lsls	r3, r3, #30
 8009392:	d502      	bpl.n	800939a <HAL_RCC_OscConfig+0xf6>
 8009394:	692b      	ldr	r3, [r5, #16]
 8009396:	2b01      	cmp	r3, #1
 8009398:	d1af      	bne.n	80092fa <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800939a:	6823      	ldr	r3, [r4, #0]
 800939c:	696a      	ldr	r2, [r5, #20]
 800939e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80093a2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80093a6:	6023      	str	r3, [r4, #0]
 80093a8:	e785      	b.n	80092b6 <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80093aa:	692a      	ldr	r2, [r5, #16]
 80093ac:	4b5a      	ldr	r3, [pc, #360]	; (8009518 <HAL_RCC_OscConfig+0x274>)
 80093ae:	b16a      	cbz	r2, 80093cc <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 80093b0:	2201      	movs	r2, #1
 80093b2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80093b4:	f7ff f8b2 	bl	800851c <HAL_GetTick>
 80093b8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80093ba:	6823      	ldr	r3, [r4, #0]
 80093bc:	079f      	lsls	r7, r3, #30
 80093be:	d4ec      	bmi.n	800939a <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80093c0:	f7ff f8ac 	bl	800851c <HAL_GetTick>
 80093c4:	1b80      	subs	r0, r0, r6
 80093c6:	2802      	cmp	r0, #2
 80093c8:	d9f7      	bls.n	80093ba <HAL_RCC_OscConfig+0x116>
 80093ca:	e7ad      	b.n	8009328 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 80093cc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80093ce:	f7ff f8a5 	bl	800851c <HAL_GetTick>
 80093d2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80093d4:	6823      	ldr	r3, [r4, #0]
 80093d6:	0798      	lsls	r0, r3, #30
 80093d8:	f57f af6d 	bpl.w	80092b6 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80093dc:	f7ff f89e 	bl	800851c <HAL_GetTick>
 80093e0:	1b80      	subs	r0, r0, r6
 80093e2:	2802      	cmp	r0, #2
 80093e4:	d9f6      	bls.n	80093d4 <HAL_RCC_OscConfig+0x130>
 80093e6:	e79f      	b.n	8009328 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80093e8:	69aa      	ldr	r2, [r5, #24]
 80093ea:	4c4a      	ldr	r4, [pc, #296]	; (8009514 <HAL_RCC_OscConfig+0x270>)
 80093ec:	4b4b      	ldr	r3, [pc, #300]	; (800951c <HAL_RCC_OscConfig+0x278>)
 80093ee:	b1da      	cbz	r2, 8009428 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 80093f0:	2201      	movs	r2, #1
 80093f2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80093f4:	f7ff f892 	bl	800851c <HAL_GetTick>
 80093f8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80093fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80093fc:	079b      	lsls	r3, r3, #30
 80093fe:	d50d      	bpl.n	800941c <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8009400:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8009404:	4b46      	ldr	r3, [pc, #280]	; (8009520 <HAL_RCC_OscConfig+0x27c>)
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	fbb3 f3f2 	udiv	r3, r3, r2
 800940c:	9301      	str	r3, [sp, #4]
  do 
  {
    __NOP();
 800940e:	bf00      	nop
  } 
  while (Delay --);
 8009410:	9b01      	ldr	r3, [sp, #4]
 8009412:	1e5a      	subs	r2, r3, #1
 8009414:	9201      	str	r2, [sp, #4]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d1f9      	bne.n	800940e <HAL_RCC_OscConfig+0x16a>
 800941a:	e750      	b.n	80092be <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800941c:	f7ff f87e 	bl	800851c <HAL_GetTick>
 8009420:	1b80      	subs	r0, r0, r6
 8009422:	2802      	cmp	r0, #2
 8009424:	d9e9      	bls.n	80093fa <HAL_RCC_OscConfig+0x156>
 8009426:	e77f      	b.n	8009328 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8009428:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800942a:	f7ff f877 	bl	800851c <HAL_GetTick>
 800942e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009430:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009432:	079f      	lsls	r7, r3, #30
 8009434:	f57f af43 	bpl.w	80092be <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009438:	f7ff f870 	bl	800851c <HAL_GetTick>
 800943c:	1b80      	subs	r0, r0, r6
 800943e:	2802      	cmp	r0, #2
 8009440:	d9f6      	bls.n	8009430 <HAL_RCC_OscConfig+0x18c>
 8009442:	e771      	b.n	8009328 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009444:	4c33      	ldr	r4, [pc, #204]	; (8009514 <HAL_RCC_OscConfig+0x270>)
 8009446:	69e3      	ldr	r3, [r4, #28]
 8009448:	00d8      	lsls	r0, r3, #3
 800944a:	d424      	bmi.n	8009496 <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 800944c:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800944e:	69e3      	ldr	r3, [r4, #28]
 8009450:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009454:	61e3      	str	r3, [r4, #28]
 8009456:	69e3      	ldr	r3, [r4, #28]
 8009458:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800945c:	9300      	str	r3, [sp, #0]
 800945e:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009460:	4e30      	ldr	r6, [pc, #192]	; (8009524 <HAL_RCC_OscConfig+0x280>)
 8009462:	6833      	ldr	r3, [r6, #0]
 8009464:	05d9      	lsls	r1, r3, #23
 8009466:	d518      	bpl.n	800949a <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009468:	68eb      	ldr	r3, [r5, #12]
 800946a:	2b01      	cmp	r3, #1
 800946c:	d126      	bne.n	80094bc <HAL_RCC_OscConfig+0x218>
 800946e:	6a23      	ldr	r3, [r4, #32]
 8009470:	f043 0301 	orr.w	r3, r3, #1
 8009474:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8009476:	f7ff f851 	bl	800851c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800947a:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800947e:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009480:	6a23      	ldr	r3, [r4, #32]
 8009482:	079b      	lsls	r3, r3, #30
 8009484:	d53f      	bpl.n	8009506 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8009486:	2f00      	cmp	r7, #0
 8009488:	f43f af1d 	beq.w	80092c6 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 800948c:	69e3      	ldr	r3, [r4, #28]
 800948e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009492:	61e3      	str	r3, [r4, #28]
 8009494:	e717      	b.n	80092c6 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8009496:	2700      	movs	r7, #0
 8009498:	e7e2      	b.n	8009460 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800949a:	6833      	ldr	r3, [r6, #0]
 800949c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80094a0:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80094a2:	f7ff f83b 	bl	800851c <HAL_GetTick>
 80094a6:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80094a8:	6833      	ldr	r3, [r6, #0]
 80094aa:	05da      	lsls	r2, r3, #23
 80094ac:	d4dc      	bmi.n	8009468 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80094ae:	f7ff f835 	bl	800851c <HAL_GetTick>
 80094b2:	eba0 0008 	sub.w	r0, r0, r8
 80094b6:	2864      	cmp	r0, #100	; 0x64
 80094b8:	d9f6      	bls.n	80094a8 <HAL_RCC_OscConfig+0x204>
 80094ba:	e735      	b.n	8009328 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80094bc:	b9ab      	cbnz	r3, 80094ea <HAL_RCC_OscConfig+0x246>
 80094be:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80094c0:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80094c4:	f023 0301 	bic.w	r3, r3, #1
 80094c8:	6223      	str	r3, [r4, #32]
 80094ca:	6a23      	ldr	r3, [r4, #32]
 80094cc:	f023 0304 	bic.w	r3, r3, #4
 80094d0:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80094d2:	f7ff f823 	bl	800851c <HAL_GetTick>
 80094d6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80094d8:	6a23      	ldr	r3, [r4, #32]
 80094da:	0798      	lsls	r0, r3, #30
 80094dc:	d5d3      	bpl.n	8009486 <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80094de:	f7ff f81d 	bl	800851c <HAL_GetTick>
 80094e2:	1b80      	subs	r0, r0, r6
 80094e4:	4540      	cmp	r0, r8
 80094e6:	d9f7      	bls.n	80094d8 <HAL_RCC_OscConfig+0x234>
 80094e8:	e71e      	b.n	8009328 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80094ea:	2b05      	cmp	r3, #5
 80094ec:	6a23      	ldr	r3, [r4, #32]
 80094ee:	d103      	bne.n	80094f8 <HAL_RCC_OscConfig+0x254>
 80094f0:	f043 0304 	orr.w	r3, r3, #4
 80094f4:	6223      	str	r3, [r4, #32]
 80094f6:	e7ba      	b.n	800946e <HAL_RCC_OscConfig+0x1ca>
 80094f8:	f023 0301 	bic.w	r3, r3, #1
 80094fc:	6223      	str	r3, [r4, #32]
 80094fe:	6a23      	ldr	r3, [r4, #32]
 8009500:	f023 0304 	bic.w	r3, r3, #4
 8009504:	e7b6      	b.n	8009474 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009506:	f7ff f809 	bl	800851c <HAL_GetTick>
 800950a:	eba0 0008 	sub.w	r0, r0, r8
 800950e:	42b0      	cmp	r0, r6
 8009510:	d9b6      	bls.n	8009480 <HAL_RCC_OscConfig+0x1dc>
 8009512:	e709      	b.n	8009328 <HAL_RCC_OscConfig+0x84>
 8009514:	40021000 	.word	0x40021000
 8009518:	42420000 	.word	0x42420000
 800951c:	42420480 	.word	0x42420480
 8009520:	20000110 	.word	0x20000110
 8009524:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009528:	4c22      	ldr	r4, [pc, #136]	; (80095b4 <HAL_RCC_OscConfig+0x310>)
 800952a:	6863      	ldr	r3, [r4, #4]
 800952c:	f003 030c 	and.w	r3, r3, #12
 8009530:	2b08      	cmp	r3, #8
 8009532:	f43f aee2 	beq.w	80092fa <HAL_RCC_OscConfig+0x56>
 8009536:	2300      	movs	r3, #0
 8009538:	4e1f      	ldr	r6, [pc, #124]	; (80095b8 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800953a:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800953c:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800953e:	d12b      	bne.n	8009598 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8009540:	f7fe ffec 	bl	800851c <HAL_GetTick>
 8009544:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009546:	6823      	ldr	r3, [r4, #0]
 8009548:	0199      	lsls	r1, r3, #6
 800954a:	d41f      	bmi.n	800958c <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800954c:	6a2b      	ldr	r3, [r5, #32]
 800954e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009552:	d105      	bne.n	8009560 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8009554:	6862      	ldr	r2, [r4, #4]
 8009556:	68a9      	ldr	r1, [r5, #8]
 8009558:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800955c:	430a      	orrs	r2, r1
 800955e:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009560:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8009562:	6862      	ldr	r2, [r4, #4]
 8009564:	430b      	orrs	r3, r1
 8009566:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800956a:	4313      	orrs	r3, r2
 800956c:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800956e:	2301      	movs	r3, #1
 8009570:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8009572:	f7fe ffd3 	bl	800851c <HAL_GetTick>
 8009576:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009578:	6823      	ldr	r3, [r4, #0]
 800957a:	019a      	lsls	r2, r3, #6
 800957c:	f53f aea7 	bmi.w	80092ce <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009580:	f7fe ffcc 	bl	800851c <HAL_GetTick>
 8009584:	1b40      	subs	r0, r0, r5
 8009586:	2802      	cmp	r0, #2
 8009588:	d9f6      	bls.n	8009578 <HAL_RCC_OscConfig+0x2d4>
 800958a:	e6cd      	b.n	8009328 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800958c:	f7fe ffc6 	bl	800851c <HAL_GetTick>
 8009590:	1bc0      	subs	r0, r0, r7
 8009592:	2802      	cmp	r0, #2
 8009594:	d9d7      	bls.n	8009546 <HAL_RCC_OscConfig+0x2a2>
 8009596:	e6c7      	b.n	8009328 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8009598:	f7fe ffc0 	bl	800851c <HAL_GetTick>
 800959c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800959e:	6823      	ldr	r3, [r4, #0]
 80095a0:	019b      	lsls	r3, r3, #6
 80095a2:	f57f ae94 	bpl.w	80092ce <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80095a6:	f7fe ffb9 	bl	800851c <HAL_GetTick>
 80095aa:	1b40      	subs	r0, r0, r5
 80095ac:	2802      	cmp	r0, #2
 80095ae:	d9f6      	bls.n	800959e <HAL_RCC_OscConfig+0x2fa>
 80095b0:	e6ba      	b.n	8009328 <HAL_RCC_OscConfig+0x84>
 80095b2:	bf00      	nop
 80095b4:	40021000 	.word	0x40021000
 80095b8:	42420060 	.word	0x42420060

080095bc <HAL_RCC_GetSysClockFreq>:
{
 80095bc:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80095be:	4b19      	ldr	r3, [pc, #100]	; (8009624 <HAL_RCC_GetSysClockFreq+0x68>)
{
 80095c0:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80095c2:	ac02      	add	r4, sp, #8
 80095c4:	f103 0510 	add.w	r5, r3, #16
 80095c8:	4622      	mov	r2, r4
 80095ca:	6818      	ldr	r0, [r3, #0]
 80095cc:	6859      	ldr	r1, [r3, #4]
 80095ce:	3308      	adds	r3, #8
 80095d0:	c203      	stmia	r2!, {r0, r1}
 80095d2:	42ab      	cmp	r3, r5
 80095d4:	4614      	mov	r4, r2
 80095d6:	d1f7      	bne.n	80095c8 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80095d8:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 80095dc:	4912      	ldr	r1, [pc, #72]	; (8009628 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80095de:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 80095e2:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80095e4:	f003 020c 	and.w	r2, r3, #12
 80095e8:	2a08      	cmp	r2, #8
 80095ea:	d118      	bne.n	800961e <HAL_RCC_GetSysClockFreq+0x62>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80095ec:	f3c3 4283 	ubfx	r2, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80095f0:	03db      	lsls	r3, r3, #15
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80095f2:	bf48      	it	mi
 80095f4:	684b      	ldrmi	r3, [r1, #4]
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80095f6:	a806      	add	r0, sp, #24
 80095f8:	4402      	add	r2, r0
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80095fa:	bf48      	it	mi
 80095fc:	f3c3 4340 	ubfxmi	r3, r3, #17, #1
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8009600:	f812 0c10 	ldrb.w	r0, [r2, #-16]
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8009604:	bf41      	itttt	mi
 8009606:	aa06      	addmi	r2, sp, #24
 8009608:	189b      	addmi	r3, r3, r2
 800960a:	f813 2c14 	ldrbmi.w	r2, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 800960e:	4b07      	ldrmi	r3, [pc, #28]	; (800962c <HAL_RCC_GetSysClockFreq+0x70>)
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8009610:	bf54      	ite	pl
 8009612:	4b07      	ldrpl	r3, [pc, #28]	; (8009630 <HAL_RCC_GetSysClockFreq+0x74>)
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 8009614:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8009618:	4358      	muls	r0, r3
}
 800961a:	b007      	add	sp, #28
 800961c:	bd30      	pop	{r4, r5, pc}
      sysclockfreq = HSE_VALUE;
 800961e:	4803      	ldr	r0, [pc, #12]	; (800962c <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8009620:	e7fb      	b.n	800961a <HAL_RCC_GetSysClockFreq+0x5e>
 8009622:	bf00      	nop
 8009624:	0800e0bc 	.word	0x0800e0bc
 8009628:	40021000 	.word	0x40021000
 800962c:	007a1200 	.word	0x007a1200
 8009630:	003d0900 	.word	0x003d0900

08009634 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8009634:	4a4c      	ldr	r2, [pc, #304]	; (8009768 <HAL_RCC_ClockConfig+0x134>)
{
 8009636:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800963a:	6813      	ldr	r3, [r2, #0]
{
 800963c:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800963e:	f003 0307 	and.w	r3, r3, #7
 8009642:	428b      	cmp	r3, r1
{
 8009644:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8009646:	d327      	bcc.n	8009698 <HAL_RCC_ClockConfig+0x64>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009648:	682a      	ldr	r2, [r5, #0]
 800964a:	0791      	lsls	r1, r2, #30
 800964c:	d431      	bmi.n	80096b2 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800964e:	07d2      	lsls	r2, r2, #31
 8009650:	d437      	bmi.n	80096c2 <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8009652:	4a45      	ldr	r2, [pc, #276]	; (8009768 <HAL_RCC_ClockConfig+0x134>)
 8009654:	6813      	ldr	r3, [r2, #0]
 8009656:	f003 0307 	and.w	r3, r3, #7
 800965a:	42b3      	cmp	r3, r6
 800965c:	d871      	bhi.n	8009742 <HAL_RCC_ClockConfig+0x10e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800965e:	682a      	ldr	r2, [r5, #0]
 8009660:	4c42      	ldr	r4, [pc, #264]	; (800976c <HAL_RCC_ClockConfig+0x138>)
 8009662:	f012 0f04 	tst.w	r2, #4
 8009666:	d177      	bne.n	8009758 <HAL_RCC_ClockConfig+0x124>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009668:	0713      	lsls	r3, r2, #28
 800966a:	d506      	bpl.n	800967a <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800966c:	6863      	ldr	r3, [r4, #4]
 800966e:	692a      	ldr	r2, [r5, #16]
 8009670:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8009674:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8009678:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800967a:	f7ff ff9f 	bl	80095bc <HAL_RCC_GetSysClockFreq>
 800967e:	6863      	ldr	r3, [r4, #4]
 8009680:	4a3b      	ldr	r2, [pc, #236]	; (8009770 <HAL_RCC_ClockConfig+0x13c>)
 8009682:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8009686:	5cd3      	ldrb	r3, [r2, r3]
 8009688:	40d8      	lsrs	r0, r3
 800968a:	4b3a      	ldr	r3, [pc, #232]	; (8009774 <HAL_RCC_ClockConfig+0x140>)
 800968c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800968e:	200f      	movs	r0, #15
 8009690:	f7fe ff46 	bl	8008520 <HAL_InitTick>
  return HAL_OK;
 8009694:	2000      	movs	r0, #0
 8009696:	e00a      	b.n	80096ae <HAL_RCC_ClockConfig+0x7a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009698:	6813      	ldr	r3, [r2, #0]
 800969a:	f023 0307 	bic.w	r3, r3, #7
 800969e:	430b      	orrs	r3, r1
 80096a0:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80096a2:	6813      	ldr	r3, [r2, #0]
 80096a4:	f003 0307 	and.w	r3, r3, #7
 80096a8:	428b      	cmp	r3, r1
 80096aa:	d0cd      	beq.n	8009648 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 80096ac:	2001      	movs	r0, #1
}
 80096ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80096b2:	492e      	ldr	r1, [pc, #184]	; (800976c <HAL_RCC_ClockConfig+0x138>)
 80096b4:	68a8      	ldr	r0, [r5, #8]
 80096b6:	684b      	ldr	r3, [r1, #4]
 80096b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80096bc:	4303      	orrs	r3, r0
 80096be:	604b      	str	r3, [r1, #4]
 80096c0:	e7c5      	b.n	800964e <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80096c2:	686a      	ldr	r2, [r5, #4]
 80096c4:	4c29      	ldr	r4, [pc, #164]	; (800976c <HAL_RCC_ClockConfig+0x138>)
 80096c6:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80096c8:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80096ca:	d11b      	bne.n	8009704 <HAL_RCC_ClockConfig+0xd0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80096cc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80096d0:	d0ec      	beq.n	80096ac <HAL_RCC_ClockConfig+0x78>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80096d2:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80096d4:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80096d8:	f023 0303 	bic.w	r3, r3, #3
 80096dc:	4313      	orrs	r3, r2
 80096de:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 80096e0:	f7fe ff1c 	bl	800851c <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80096e4:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 80096e6:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80096e8:	2b01      	cmp	r3, #1
 80096ea:	d113      	bne.n	8009714 <HAL_RCC_ClockConfig+0xe0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80096ec:	6863      	ldr	r3, [r4, #4]
 80096ee:	f003 030c 	and.w	r3, r3, #12
 80096f2:	2b04      	cmp	r3, #4
 80096f4:	d0ad      	beq.n	8009652 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80096f6:	f7fe ff11 	bl	800851c <HAL_GetTick>
 80096fa:	1bc0      	subs	r0, r0, r7
 80096fc:	4540      	cmp	r0, r8
 80096fe:	d9f5      	bls.n	80096ec <HAL_RCC_ClockConfig+0xb8>
          return HAL_TIMEOUT;
 8009700:	2003      	movs	r0, #3
 8009702:	e7d4      	b.n	80096ae <HAL_RCC_ClockConfig+0x7a>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009704:	2a02      	cmp	r2, #2
 8009706:	d102      	bne.n	800970e <HAL_RCC_ClockConfig+0xda>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009708:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800970c:	e7e0      	b.n	80096d0 <HAL_RCC_ClockConfig+0x9c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800970e:	f013 0f02 	tst.w	r3, #2
 8009712:	e7dd      	b.n	80096d0 <HAL_RCC_ClockConfig+0x9c>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009714:	2b02      	cmp	r3, #2
 8009716:	d10f      	bne.n	8009738 <HAL_RCC_ClockConfig+0x104>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009718:	6863      	ldr	r3, [r4, #4]
 800971a:	f003 030c 	and.w	r3, r3, #12
 800971e:	2b08      	cmp	r3, #8
 8009720:	d097      	beq.n	8009652 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009722:	f7fe fefb 	bl	800851c <HAL_GetTick>
 8009726:	1bc0      	subs	r0, r0, r7
 8009728:	4540      	cmp	r0, r8
 800972a:	d9f5      	bls.n	8009718 <HAL_RCC_ClockConfig+0xe4>
 800972c:	e7e8      	b.n	8009700 <HAL_RCC_ClockConfig+0xcc>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800972e:	f7fe fef5 	bl	800851c <HAL_GetTick>
 8009732:	1bc0      	subs	r0, r0, r7
 8009734:	4540      	cmp	r0, r8
 8009736:	d8e3      	bhi.n	8009700 <HAL_RCC_ClockConfig+0xcc>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8009738:	6863      	ldr	r3, [r4, #4]
 800973a:	f013 0f0c 	tst.w	r3, #12
 800973e:	d1f6      	bne.n	800972e <HAL_RCC_ClockConfig+0xfa>
 8009740:	e787      	b.n	8009652 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009742:	6813      	ldr	r3, [r2, #0]
 8009744:	f023 0307 	bic.w	r3, r3, #7
 8009748:	4333      	orrs	r3, r6
 800974a:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800974c:	6813      	ldr	r3, [r2, #0]
 800974e:	f003 0307 	and.w	r3, r3, #7
 8009752:	42b3      	cmp	r3, r6
 8009754:	d1aa      	bne.n	80096ac <HAL_RCC_ClockConfig+0x78>
 8009756:	e782      	b.n	800965e <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009758:	6863      	ldr	r3, [r4, #4]
 800975a:	68e9      	ldr	r1, [r5, #12]
 800975c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8009760:	430b      	orrs	r3, r1
 8009762:	6063      	str	r3, [r4, #4]
 8009764:	e780      	b.n	8009668 <HAL_RCC_ClockConfig+0x34>
 8009766:	bf00      	nop
 8009768:	40022000 	.word	0x40022000
 800976c:	40021000 	.word	0x40021000
 8009770:	0800beec 	.word	0x0800beec
 8009774:	20000110 	.word	0x20000110

08009778 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009778:	4b04      	ldr	r3, [pc, #16]	; (800978c <HAL_RCC_GetPCLK1Freq+0x14>)
 800977a:	4a05      	ldr	r2, [pc, #20]	; (8009790 <HAL_RCC_GetPCLK1Freq+0x18>)
 800977c:	685b      	ldr	r3, [r3, #4]
 800977e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8009782:	5cd3      	ldrb	r3, [r2, r3]
 8009784:	4a03      	ldr	r2, [pc, #12]	; (8009794 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8009786:	6810      	ldr	r0, [r2, #0]
}    
 8009788:	40d8      	lsrs	r0, r3
 800978a:	4770      	bx	lr
 800978c:	40021000 	.word	0x40021000
 8009790:	0800befc 	.word	0x0800befc
 8009794:	20000110 	.word	0x20000110

08009798 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009798:	4b04      	ldr	r3, [pc, #16]	; (80097ac <HAL_RCC_GetPCLK2Freq+0x14>)
 800979a:	4a05      	ldr	r2, [pc, #20]	; (80097b0 <HAL_RCC_GetPCLK2Freq+0x18>)
 800979c:	685b      	ldr	r3, [r3, #4]
 800979e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80097a2:	5cd3      	ldrb	r3, [r2, r3]
 80097a4:	4a03      	ldr	r2, [pc, #12]	; (80097b4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80097a6:	6810      	ldr	r0, [r2, #0]
} 
 80097a8:	40d8      	lsrs	r0, r3
 80097aa:	4770      	bx	lr
 80097ac:	40021000 	.word	0x40021000
 80097b0:	0800befc 	.word	0x0800befc
 80097b4:	20000110 	.word	0x20000110

080097b8 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80097b8:	230f      	movs	r3, #15
 80097ba:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80097bc:	4b0b      	ldr	r3, [pc, #44]	; (80097ec <HAL_RCC_GetClockConfig+0x34>)
 80097be:	685a      	ldr	r2, [r3, #4]
 80097c0:	f002 0203 	and.w	r2, r2, #3
 80097c4:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80097c6:	685a      	ldr	r2, [r3, #4]
 80097c8:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80097cc:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80097ce:	685a      	ldr	r2, [r3, #4]
 80097d0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80097d4:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80097d6:	685b      	ldr	r3, [r3, #4]
 80097d8:	08db      	lsrs	r3, r3, #3
 80097da:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80097de:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80097e0:	4b03      	ldr	r3, [pc, #12]	; (80097f0 <HAL_RCC_GetClockConfig+0x38>)
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	f003 0307 	and.w	r3, r3, #7
 80097e8:	600b      	str	r3, [r1, #0]
}
 80097ea:	4770      	bx	lr
 80097ec:	40021000 	.word	0x40021000
 80097f0:	40022000 	.word	0x40022000

080097f4 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80097f4:	4a1a      	ldr	r2, [pc, #104]	; (8009860 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 80097f6:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80097f8:	4290      	cmp	r0, r2
 80097fa:	d00a      	beq.n	8009812 <TIM_Base_SetConfig+0x1e>
 80097fc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8009800:	d007      	beq.n	8009812 <TIM_Base_SetConfig+0x1e>
 8009802:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8009806:	4290      	cmp	r0, r2
 8009808:	d003      	beq.n	8009812 <TIM_Base_SetConfig+0x1e>
 800980a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800980e:	4290      	cmp	r0, r2
 8009810:	d115      	bne.n	800983e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8009812:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009814:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8009818:	4313      	orrs	r3, r2
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800981a:	4a11      	ldr	r2, [pc, #68]	; (8009860 <TIM_Base_SetConfig+0x6c>)
 800981c:	4290      	cmp	r0, r2
 800981e:	d00a      	beq.n	8009836 <TIM_Base_SetConfig+0x42>
 8009820:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8009824:	d007      	beq.n	8009836 <TIM_Base_SetConfig+0x42>
 8009826:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800982a:	4290      	cmp	r0, r2
 800982c:	d003      	beq.n	8009836 <TIM_Base_SetConfig+0x42>
 800982e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009832:	4290      	cmp	r0, r2
 8009834:	d103      	bne.n	800983e <TIM_Base_SetConfig+0x4a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009836:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8009838:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800983c:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 800983e:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 8009840:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8009844:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8009846:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009848:	688b      	ldr	r3, [r1, #8]
 800984a:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800984c:	680b      	ldr	r3, [r1, #0]
 800984e:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009850:	4b03      	ldr	r3, [pc, #12]	; (8009860 <TIM_Base_SetConfig+0x6c>)
 8009852:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009854:	bf04      	itt	eq
 8009856:	690b      	ldreq	r3, [r1, #16]
 8009858:	6303      	streq	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 800985a:	2301      	movs	r3, #1
 800985c:	6143      	str	r3, [r0, #20]
}
 800985e:	4770      	bx	lr
 8009860:	40012c00 	.word	0x40012c00

08009864 <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009864:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8009866:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009868:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << Channel;
 800986a:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 800986c:	ea23 0304 	bic.w	r3, r3, r4
 8009870:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8009872:	6a03      	ldr	r3, [r0, #32]
 8009874:	408a      	lsls	r2, r1
 8009876:	431a      	orrs	r2, r3
 8009878:	6202      	str	r2, [r0, #32]
}
 800987a:	bd10      	pop	{r4, pc}

0800987c <stm32_mcu_flash_erase_sector>:

#define _FLASH_SECTOR_SIZE MYNEWT_VAL(STM32_FLASH_SECTOR_SIZE)

int
stm32_mcu_flash_erase_sector(const struct hal_flash *dev, uint32_t sector_address)
{
 800987c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    FLASH_EraseInitTypeDef eraseinit;
    uint32_t PageError;

    (void)PageError;

    if ((sector_address & ~(_FLASH_SECTOR_SIZE - 1)) == sector_address) {
 800987e:	f421 737f 	bic.w	r3, r1, #1020	; 0x3fc
 8009882:	f023 0303 	bic.w	r3, r3, #3
 8009886:	428b      	cmp	r3, r1
 8009888:	d110      	bne.n	80098ac <stm32_mcu_flash_erase_sector+0x30>
        eraseinit.TypeErase = FLASH_TYPEERASE_PAGES;
        eraseinit.Banks = FLASH_BANK_1;
 800988a:	2201      	movs	r2, #1
 800988c:	2100      	movs	r1, #0
        eraseinit.PageAddress = sector_address;
        eraseinit.NbPages = _FLASH_SECTOR_SIZE / FLASH_PAGE_SIZE;
        if (HAL_FLASHEx_Erase(&eraseinit, &PageError) == HAL_OK) {
 800988e:	a802      	add	r0, sp, #8
        eraseinit.Banks = FLASH_BANK_1;
 8009890:	e9cd 1202 	strd	r1, r2, [sp, #8]
        if (HAL_FLASHEx_Erase(&eraseinit, &PageError) == HAL_OK) {
 8009894:	a901      	add	r1, sp, #4
        eraseinit.NbPages = _FLASH_SECTOR_SIZE / FLASH_PAGE_SIZE;
 8009896:	e9cd 3204 	strd	r3, r2, [sp, #16]
        if (HAL_FLASHEx_Erase(&eraseinit, &PageError) == HAL_OK) {
 800989a:	f7ff fb3f 	bl	8008f1c <HAL_FLASHEx_Erase>
 800989e:	3000      	adds	r0, #0
 80098a0:	bf18      	it	ne
 80098a2:	2001      	movne	r0, #1
 80098a4:	4240      	negs	r0, r0
            return 0;
        }
    }

    return -1;
}
 80098a6:	b007      	add	sp, #28
 80098a8:	f85d fb04 	ldr.w	pc, [sp], #4
    return -1;
 80098ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80098b0:	e7f9      	b.n	80098a6 <stm32_mcu_flash_erase_sector+0x2a>
	...

080098b4 <stm32_hal_timer_get_freq>:
 * of a timer.
 */

uint32_t
stm32_hal_timer_get_freq(void *regs)
{
 80098b4:	b510      	push	{r4, lr}
 80098b6:	4604      	mov	r4, r0
 80098b8:	b086      	sub	sp, #24
    RCC_ClkInitTypeDef clocks;
    uint32_t fl;
    uint32_t freq;

    HAL_RCC_GetClockConfig(&clocks, &fl);
 80098ba:	4669      	mov	r1, sp
 80098bc:	a801      	add	r0, sp, #4
 80098be:	f7ff ff7b 	bl	80097b8 <HAL_RCC_GetClockConfig>

    /*
     * Assuming RCC_DCKCFGR->TIMPRE is 0.
     * There's just APB2 timers here.
     */
    switch ((uintptr_t)regs) {
 80098c2:	4b0d      	ldr	r3, [pc, #52]	; (80098f8 <stm32_hal_timer_get_freq+0x44>)
 80098c4:	429c      	cmp	r4, r3
 80098c6:	d003      	beq.n	80098d0 <stm32_hal_timer_get_freq+0x1c>
 80098c8:	d806      	bhi.n	80098d8 <stm32_hal_timer_get_freq+0x24>
 80098ca:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 80098ce:	d111      	bne.n	80098f4 <stm32_hal_timer_get_freq+0x40>
    case (uintptr_t)TIM3:
#endif
#ifdef TIM4
    case (uintptr_t)TIM4:
#endif
        freq = HAL_RCC_GetPCLK1Freq();
 80098d0:	f7ff ff52 	bl	8009778 <HAL_RCC_GetPCLK1Freq>
        if (clocks.APB1CLKDivider) {
 80098d4:	9b04      	ldr	r3, [sp, #16]
 80098d6:	e009      	b.n	80098ec <stm32_hal_timer_get_freq+0x38>
    switch ((uintptr_t)regs) {
 80098d8:	4b08      	ldr	r3, [pc, #32]	; (80098fc <stm32_hal_timer_get_freq+0x48>)
 80098da:	429c      	cmp	r4, r3
 80098dc:	d0f8      	beq.n	80098d0 <stm32_hal_timer_get_freq+0x1c>
 80098de:	f503 3392 	add.w	r3, r3, #74752	; 0x12400
 80098e2:	429c      	cmp	r4, r3
 80098e4:	d106      	bne.n	80098f4 <stm32_hal_timer_get_freq+0x40>
        freq = HAL_RCC_GetPCLK2Freq();
 80098e6:	f7ff ff57 	bl	8009798 <HAL_RCC_GetPCLK2Freq>
        if (clocks.APB2CLKDivider) {
 80098ea:	9b05      	ldr	r3, [sp, #20]
        if (clocks.APB1CLKDivider) {
 80098ec:	b103      	cbz	r3, 80098f0 <stm32_hal_timer_get_freq+0x3c>
            freq *= 2;
 80098ee:	0040      	lsls	r0, r0, #1
        break;
    default:
        return 0;
    }
    return freq;
}
 80098f0:	b006      	add	sp, #24
 80098f2:	bd10      	pop	{r4, pc}
        return 0;
 80098f4:	2000      	movs	r0, #0
 80098f6:	e7fb      	b.n	80098f0 <stm32_hal_timer_get_freq+0x3c>
 80098f8:	40000400 	.word	0x40000400
 80098fc:	40000800 	.word	0x40000800

08009900 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009900:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8009902:	f890 4020 	ldrb.w	r4, [r0, #32]
 8009906:	2c01      	cmp	r4, #1
 8009908:	d035      	beq.n	8009976 <HAL_DMA_Start_IT+0x76>
 800990a:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800990c:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8009910:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8009914:	42a5      	cmp	r5, r4
 8009916:	f04f 0600 	mov.w	r6, #0
 800991a:	f04f 0402 	mov.w	r4, #2
 800991e:	d128      	bne.n	8009972 <HAL_DMA_Start_IT+0x72>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009920:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8009924:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009926:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8009928:	6826      	ldr	r6, [r4, #0]
 800992a:	f026 0601 	bic.w	r6, r6, #1
 800992e:	6026      	str	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8009930:	e9d0 670f 	ldrd	r6, r7, [r0, #60]	; 0x3c
 8009934:	40bd      	lsls	r5, r7
 8009936:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8009938:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800993a:	6843      	ldr	r3, [r0, #4]
 800993c:	6805      	ldr	r5, [r0, #0]
 800993e:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 8009940:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8009942:	bf0b      	itete	eq
 8009944:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8009946:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8009948:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800994a:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 800994c:	b14b      	cbz	r3, 8009962 <HAL_DMA_Start_IT+0x62>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800994e:	6823      	ldr	r3, [r4, #0]
 8009950:	f043 030e 	orr.w	r3, r3, #14
  HAL_StatusTypeDef status = HAL_OK;
 8009954:	2000      	movs	r0, #0
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8009956:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8009958:	682b      	ldr	r3, [r5, #0]
 800995a:	f043 0301 	orr.w	r3, r3, #1
 800995e:	602b      	str	r3, [r5, #0]
}
 8009960:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009962:	6823      	ldr	r3, [r4, #0]
 8009964:	f023 0304 	bic.w	r3, r3, #4
 8009968:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800996a:	6823      	ldr	r3, [r4, #0]
 800996c:	f043 030a 	orr.w	r3, r3, #10
 8009970:	e7f0      	b.n	8009954 <HAL_DMA_Start_IT+0x54>
    __HAL_UNLOCK(hdma); 
 8009972:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 8009976:	2002      	movs	r0, #2
 8009978:	e7f2      	b.n	8009960 <HAL_DMA_Start_IT+0x60>

0800997a <sensor_dev_create>:
    assert(rc == 0);

    rc = config_bme680_sensor();
    assert(rc == 0);
#endif
}
 800997a:	4770      	bx	lr

0800997c <stm32f1_adc_create>:

///////////////////////////////////////////////////////////////////////////////
//  Generic Device Creator Code

//  Create the device instance and configure it. Called by sysinit() during startup, defined in pkg.yml.
void DEVICE_CREATE(void) {
 800997c:	b507      	push	{r0, r1, r2, lr}
    console_printf("ADC create " DEVICE_NAME "\n");
 800997e:	480b      	ldr	r0, [pc, #44]	; (80099ac <stm32f1_adc_create+0x30>)
 8009980:	f7fa fa14 	bl	8003dac <console_printf>

    int rc = os_dev_create((struct os_dev *) &DEVICE_INSTANCE, DEVICE_NAME,
 8009984:	4b0a      	ldr	r3, [pc, #40]	; (80099b0 <stm32f1_adc_create+0x34>)
 8009986:	2201      	movs	r2, #1
 8009988:	9301      	str	r3, [sp, #4]
 800998a:	4b0a      	ldr	r3, [pc, #40]	; (80099b4 <stm32f1_adc_create+0x38>)
 800998c:	490a      	ldr	r1, [pc, #40]	; (80099b8 <stm32f1_adc_create+0x3c>)
 800998e:	9300      	str	r3, [sp, #0]
 8009990:	480a      	ldr	r0, [pc, #40]	; (80099bc <stm32f1_adc_create+0x40>)
 8009992:	2300      	movs	r3, #0
 8009994:	f7fc f9de 	bl	8005d54 <os_dev_create>
        OS_DEV_INIT_PRIMARY, 0,  //  For BSP: OS_DEV_INIT_KERNEL, OS_DEV_INIT_PRIO_DEFAULT,
        DEVICE_INIT, (void *) &DEVICE_ITF);
    assert(rc == 0);
 8009998:	b128      	cbz	r0, 80099a6 <stm32f1_adc_create+0x2a>
 800999a:	2300      	movs	r3, #0
 800999c:	461a      	mov	r2, r3
 800999e:	4619      	mov	r1, r3
 80099a0:	4618      	mov	r0, r3
 80099a2:	f7fb ffb7 	bl	8005914 <__assert_func>
}
 80099a6:	b003      	add	sp, #12
 80099a8:	f85d fb04 	ldr.w	pc, [sp], #4
 80099ac:	0800e0cc 	.word	0x0800e0cc
 80099b0:	200001a0 	.word	0x200001a0
 80099b4:	08009cc9 	.word	0x08009cc9
 80099b8:	0800df18 	.word	0x0800df18
 80099bc:	20002be4 	.word	0x20002be4

080099c0 <stm32f1_adc_size_buffer>:
 * @return Length of buffer in bytes
 */
static int
stm32f1_adc_size_buffer(struct adc_dev *dev, int chans, int samples)
{
    return (sizeof(uint32_t) * chans * samples);
 80099c0:	0092      	lsls	r2, r2, #2
}
 80099c2:	fb01 f002 	mul.w	r0, r1, r2
 80099c6:	4770      	bx	lr

080099c8 <stm32f1_adc_release_buffer>:
{
 80099c8:	b508      	push	{r3, lr}
    assert(0);  //  Not implemented.
 80099ca:	2300      	movs	r3, #0
 80099cc:	461a      	mov	r2, r3
 80099ce:	4619      	mov	r1, r3
 80099d0:	4618      	mov	r0, r3
 80099d2:	f7fb ff9f 	bl	8005914 <__assert_func>

080099d6 <stm32f1_adc_set_buffer>:
{
 80099d6:	b508      	push	{r3, lr}
    assert(0);  //  Not implemented.
 80099d8:	2300      	movs	r3, #0
 80099da:	461a      	mov	r2, r3
 80099dc:	4619      	mov	r1, r3
 80099de:	4618      	mov	r0, r3
 80099e0:	f7fb ff98 	bl	8005914 <__assert_func>

080099e4 <stm32f1_resolve_adc_gpio.part.0>:
            switch(cnum) {
 80099e4:	3804      	subs	r0, #4
stm32f1_resolve_adc_gpio(ADC_HandleTypeDef *adc, uint8_t cnum,
 80099e6:	b510      	push	{r4, lr}
 80099e8:	460b      	mov	r3, r1
            switch(cnum) {
 80099ea:	280b      	cmp	r0, #11
 80099ec:	d820      	bhi.n	8009a30 <stm32f1_resolve_adc_gpio.part.0+0x4c>
 80099ee:	e8df f000 	tbb	[pc, r0]
 80099f2:	061d      	.short	0x061d
 80099f4:	17151311 	.word	0x17151311
 80099f8:	1f1f1f1f 	.word	0x1f1f1f1f
 80099fc:	1b19      	.short	0x1b19
                    pin = ADC12_CH5_PIN;
 80099fe:	2405      	movs	r4, #5
    *gpio = (GPIO_InitTypeDef) {
 8009a00:	2210      	movs	r2, #16
 8009a02:	2100      	movs	r1, #0
 8009a04:	4618      	mov	r0, r3
 8009a06:	f7fd fb20 	bl	800704a <memset>
 8009a0a:	2203      	movs	r2, #3
 8009a0c:	6004      	str	r4, [r0, #0]
 8009a0e:	6042      	str	r2, [r0, #4]
    return rc;
 8009a10:	2000      	movs	r0, #0
}
 8009a12:	bd10      	pop	{r4, pc}
                    pin = ADC12_CH6_PIN;
 8009a14:	2406      	movs	r4, #6
 8009a16:	e7f3      	b.n	8009a00 <stm32f1_resolve_adc_gpio.part.0+0x1c>
                    pin = ADC12_CH7_PIN;
 8009a18:	2407      	movs	r4, #7
 8009a1a:	e7f1      	b.n	8009a00 <stm32f1_resolve_adc_gpio.part.0+0x1c>
                    pin = ADC12_CH8_PIN;
 8009a1c:	2410      	movs	r4, #16
 8009a1e:	e7ef      	b.n	8009a00 <stm32f1_resolve_adc_gpio.part.0+0x1c>
                    pin = ADC12_CH9_PIN;
 8009a20:	2411      	movs	r4, #17
 8009a22:	e7ed      	b.n	8009a00 <stm32f1_resolve_adc_gpio.part.0+0x1c>
                    pin = ADC12_CH14_PIN;
 8009a24:	2424      	movs	r4, #36	; 0x24
 8009a26:	e7eb      	b.n	8009a00 <stm32f1_resolve_adc_gpio.part.0+0x1c>
                    pin = ADC12_CH15_PIN;
 8009a28:	2425      	movs	r4, #37	; 0x25
 8009a2a:	e7e9      	b.n	8009a00 <stm32f1_resolve_adc_gpio.part.0+0x1c>
                    pin = ADC12_CH4_PIN;
 8009a2c:	2404      	movs	r4, #4
 8009a2e:	e7e7      	b.n	8009a00 <stm32f1_resolve_adc_gpio.part.0+0x1c>
            return rc;
 8009a30:	2002      	movs	r0, #2
 8009a32:	e7ee      	b.n	8009a12 <stm32f1_resolve_adc_gpio.part.0+0x2e>

08009a34 <stm32f1_adc_configure_channel>:
{
 8009a34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a36:	460c      	mov	r4, r1
 8009a38:	b085      	sub	sp, #20
    if (dev == NULL && !IS_ADC_CHANNEL(cnum)) {
 8009a3a:	4605      	mov	r5, r0
 8009a3c:	b918      	cbnz	r0, 8009a46 <stm32f1_adc_configure_channel+0x12>
 8009a3e:	2911      	cmp	r1, #17
 8009a40:	d901      	bls.n	8009a46 <stm32f1_adc_configure_channel+0x12>
    return (rc);
 8009a42:	2402      	movs	r4, #2
 8009a44:	e02d      	b.n	8009aa2 <stm32f1_adc_configure_channel+0x6e>
    cfg  = (struct stm32f1_adc_dev_cfg *)dev->ad_dev.od_init_arg;
 8009a46:	696b      	ldr	r3, [r5, #20]
    if ((HAL_ADC_ConfigChannel(hadc, cfgdata)) != HAL_OK) {
 8009a48:	4611      	mov	r1, r2
    hadc = cfg->sac_adc_handle;
 8009a4a:	695e      	ldr	r6, [r3, #20]
    chan_cfg = &((struct adc_chan_config *)cfg->sac_chans)[cnum];
 8009a4c:	685f      	ldr	r7, [r3, #4]
    if ((HAL_ADC_ConfigChannel(hadc, cfgdata)) != HAL_OK) {
 8009a4e:	4630      	mov	r0, r6
 8009a50:	f001 fcd2 	bl	800b3f8 <HAL_ADC_ConfigChannel>
 8009a54:	2800      	cmp	r0, #0
 8009a56:	d1f4      	bne.n	8009a42 <stm32f1_adc_configure_channel+0xe>
    chan_cfg = &((struct adc_chan_config *)cfg->sac_chans)[cnum];
 8009a58:	2306      	movs	r3, #6
 8009a5a:	4363      	muls	r3, r4
    dev->ad_chans[cnum].c_res = chan_cfg->c_res;
 8009a5c:	6b69      	ldr	r1, [r5, #52]	; 0x34
    chan_cfg = &((struct adc_chan_config *)cfg->sac_chans)[cnum];
 8009a5e:	eb07 0c03 	add.w	ip, r7, r3
    dev->ad_chans[cnum].c_res = chan_cfg->c_res;
 8009a62:	f89c 5002 	ldrb.w	r5, [ip, #2]
 8009a66:	18ca      	adds	r2, r1, r3
 8009a68:	7095      	strb	r5, [r2, #2]
    dev->ad_chans[cnum].c_refmv = chan_cfg->c_refmv;
 8009a6a:	5afd      	ldrh	r5, [r7, r3]
 8009a6c:	52cd      	strh	r5, [r1, r3]
    dev->ad_chans[cnum].c_configured = 1;
 8009a6e:	2301      	movs	r3, #1
 8009a70:	70d3      	strb	r3, [r2, #3]
    if (cnum == ADC_CHANNEL_TEMPSENSOR || cnum == ADC_CHANNEL_VREFINT) {
 8009a72:	f1a4 0310 	sub.w	r3, r4, #16
 8009a76:	2b01      	cmp	r3, #1
    dev->ad_chans[cnum].c_cnum = cnum;
 8009a78:	7114      	strb	r4, [r2, #4]
    if (cnum == ADC_CHANNEL_TEMPSENSOR || cnum == ADC_CHANNEL_VREFINT) {
 8009a7a:	d915      	bls.n	8009aa8 <stm32f1_adc_configure_channel+0x74>
    switch (adc_addr) {
 8009a7c:	6833      	ldr	r3, [r6, #0]
 8009a7e:	4a0b      	ldr	r2, [pc, #44]	; (8009aac <stm32f1_adc_configure_channel+0x78>)
 8009a80:	4293      	cmp	r3, r2
 8009a82:	d003      	beq.n	8009a8c <stm32f1_adc_configure_channel+0x58>
 8009a84:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009a88:	4293      	cmp	r3, r2
 8009a8a:	d1da      	bne.n	8009a42 <stm32f1_adc_configure_channel+0xe>
 8009a8c:	4620      	mov	r0, r4
 8009a8e:	4669      	mov	r1, sp
 8009a90:	f7ff ffa8 	bl	80099e4 <stm32f1_resolve_adc_gpio.part.0>
    if (stm32f1_resolve_adc_gpio(hadc, cnum, &gpio_td)) {
 8009a94:	4604      	mov	r4, r0
 8009a96:	2800      	cmp	r0, #0
 8009a98:	d1d3      	bne.n	8009a42 <stm32f1_adc_configure_channel+0xe>
    hal_gpio_init_stm(gpio_td.Pin, &gpio_td);
 8009a9a:	4669      	mov	r1, sp
 8009a9c:	9800      	ldr	r0, [sp, #0]
 8009a9e:	f7ff f933 	bl	8008d08 <hal_gpio_init_stm>
}
 8009aa2:	4620      	mov	r0, r4
 8009aa4:	b005      	add	sp, #20
 8009aa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return OS_OK;
 8009aa8:	4604      	mov	r4, r0
 8009aaa:	e7fa      	b.n	8009aa2 <stm32f1_adc_configure_channel+0x6e>
 8009aac:	40012400 	.word	0x40012400

08009ab0 <stm32f1_adc_open.part.4>:
stm32f1_adc_read_buffer(struct adc_dev *dev, void *buf, int buf_len, int off,
 8009ab0:	b508      	push	{r3, lr}
    assert(off < buf_len);
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	461a      	mov	r2, r3
 8009ab6:	4619      	mov	r1, r3
 8009ab8:	4618      	mov	r0, r3
 8009aba:	f7fb ff2b 	bl	8005914 <__assert_func>

08009abe <stm32f1_adc_read_buffer>:
 8009abe:	4293      	cmp	r3, r2
{
 8009ac0:	b508      	push	{r3, lr}
    assert(off < buf_len);
 8009ac2:	db01      	blt.n	8009ac8 <stm32f1_adc_read_buffer+0xa>
 8009ac4:	f7ff fff4 	bl	8009ab0 <stm32f1_adc_open.part.4>
    *result = *((uint32_t *)buf + off);
 8009ac8:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8009acc:	9b02      	ldr	r3, [sp, #8]
}
 8009ace:	2000      	movs	r0, #0
    *result = *((uint32_t *)buf + off);
 8009ad0:	601a      	str	r2, [r3, #0]
}
 8009ad2:	bd08      	pop	{r3, pc}

08009ad4 <stm32f1_adc_read_channel>:
{
 8009ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ad6:	4616      	mov	r6, r2
    assert(dev != NULL && result != NULL);
 8009ad8:	b100      	cbz	r0, 8009adc <stm32f1_adc_read_channel+0x8>
 8009ada:	b90a      	cbnz	r2, 8009ae0 <stm32f1_adc_read_channel+0xc>
 8009adc:	f7ff ffe8 	bl	8009ab0 <stm32f1_adc_open.part.4>
    hadc = cfg->sac_adc_handle;
 8009ae0:	6943      	ldr	r3, [r0, #20]
 8009ae2:	695c      	ldr	r4, [r3, #20]
    while (HAL_ADCEx_Calibration_Start(hadc) != HAL_OK);  // Calibrate AD converter.
 8009ae4:	4620      	mov	r0, r4
 8009ae6:	f001 fee9 	bl	800b8bc <HAL_ADCEx_Calibration_Start>
 8009aea:	4607      	mov	r7, r0
 8009aec:	2800      	cmp	r0, #0
 8009aee:	d1f9      	bne.n	8009ae4 <stm32f1_adc_read_channel+0x10>
    HAL_ADC_Start(hadc);
 8009af0:	4620      	mov	r0, r4
 8009af2:	f001 fd37 	bl	800b564 <HAL_ADC_Start>
    HAL_StatusTypeDef rc = HAL_ADC_PollForConversion(hadc, 10 * 1000);  //  Wait up to 10 seconds.  TODO: Yield to task scheduler while waiting.
 8009af6:	f242 7110 	movw	r1, #10000	; 0x2710
 8009afa:	4620      	mov	r0, r4
 8009afc:	f001 fba0 	bl	800b240 <HAL_ADC_PollForConversion>
    assert(rc == HAL_OK);
 8009b00:	4605      	mov	r5, r0
 8009b02:	b128      	cbz	r0, 8009b10 <stm32f1_adc_read_channel+0x3c>
 8009b04:	463b      	mov	r3, r7
 8009b06:	463a      	mov	r2, r7
 8009b08:	4639      	mov	r1, r7
 8009b0a:	4638      	mov	r0, r7
 8009b0c:	f7fb ff02 	bl	8005914 <__assert_func>
    val = HAL_ADC_GetValue(hadc);
 8009b10:	4620      	mov	r0, r4
 8009b12:	f001 fc33 	bl	800b37c <HAL_ADC_GetValue>
    *result = val;
 8009b16:	6030      	str	r0, [r6, #0]
    HAL_ADC_Stop(hadc);
 8009b18:	4620      	mov	r0, r4
 8009b1a:	f001 feb5 	bl	800b888 <HAL_ADC_Stop>
}
 8009b1e:	4628      	mov	r0, r5
 8009b20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009b24 <stm32f1_adc_sample>:
{
 8009b24:	b508      	push	{r3, lr}
    assert(dev);
 8009b26:	b908      	cbnz	r0, 8009b2c <stm32f1_adc_sample+0x8>
 8009b28:	f7ff ffc2 	bl	8009ab0 <stm32f1_adc_open.part.4>
    cfg  = (struct stm32f1_adc_dev_cfg *)dev->ad_dev.od_init_arg;
 8009b2c:	6943      	ldr	r3, [r0, #20]
    if (HAL_ADC_Start_DMA(hadc, cfg->primarybuf, cfg->buflen) != HAL_OK) {
 8009b2e:	691a      	ldr	r2, [r3, #16]
 8009b30:	6899      	ldr	r1, [r3, #8]
 8009b32:	6958      	ldr	r0, [r3, #20]
 8009b34:	f001 fd78 	bl	800b628 <HAL_ADC_Start_DMA>
 8009b38:	b120      	cbz	r0, 8009b44 <stm32f1_adc_sample+0x20>
    rc = OS_EINVAL;
 8009b3a:	2002      	movs	r0, #2
        ++stm32f1_adc_stats.adc_dma_start_error;
 8009b3c:	4a02      	ldr	r2, [pc, #8]	; (8009b48 <stm32f1_adc_sample+0x24>)
 8009b3e:	8953      	ldrh	r3, [r2, #10]
 8009b40:	3301      	adds	r3, #1
 8009b42:	8153      	strh	r3, [r2, #10]
}
 8009b44:	bd08      	pop	{r3, pc}
 8009b46:	bf00      	nop
 8009b48:	20002c2c 	.word	0x20002c2c

08009b4c <stm32f1_adc_open>:
{
 8009b4c:	b530      	push	{r4, r5, lr}
 8009b4e:	460d      	mov	r5, r1
 8009b50:	b089      	sub	sp, #36	; 0x24
    assert(odev);
 8009b52:	4604      	mov	r4, r0
 8009b54:	b908      	cbnz	r0, 8009b5a <stm32f1_adc_open+0xe>
 8009b56:	f7ff ffab 	bl	8009ab0 <stm32f1_adc_open.part.4>
    if (os_started()) {
 8009b5a:	f7fb ff9b 	bl	8005a94 <os_started>
 8009b5e:	b948      	cbnz	r0, 8009b74 <stm32f1_adc_open+0x28>
    if (odev->od_flags & OS_DEV_F_STATUS_OPEN) {
 8009b60:	7ee3      	ldrb	r3, [r4, #27]
 8009b62:	f013 0302 	ands.w	r3, r3, #2
 8009b66:	d00e      	beq.n	8009b86 <stm32f1_adc_open+0x3a>
        os_mutex_release(&dev->ad_lock);
 8009b68:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009b6c:	f7fc fd30 	bl	80065d0 <os_mutex_release>
        rc = OS_EBUSY;
 8009b70:	200b      	movs	r0, #11
        goto err;
 8009b72:	e006      	b.n	8009b82 <stm32f1_adc_open+0x36>
        rc = os_mutex_pend(&dev->ad_lock, wait);
 8009b74:	4629      	mov	r1, r5
 8009b76:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009b7a:	f7fc fd79 	bl	8006670 <os_mutex_pend>
        if (rc != OS_OK) {
 8009b7e:	2800      	cmp	r0, #0
 8009b80:	d0ee      	beq.n	8009b60 <stm32f1_adc_open+0x14>
}
 8009b82:	b009      	add	sp, #36	; 0x24
 8009b84:	bd30      	pop	{r4, r5, pc}
    hadc = adc_config->sac_adc_handle;
 8009b86:	6962      	ldr	r2, [r4, #20]
 8009b88:	6954      	ldr	r4, [r2, #20]
    assert(hadc);
 8009b8a:	b92c      	cbnz	r4, 8009b98 <stm32f1_adc_open+0x4c>
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	461a      	mov	r2, r3
 8009b90:	4619      	mov	r1, r3
 8009b92:	4618      	mov	r0, r3
            assert(0);
 8009b94:	f7fb febe 	bl	8005914 <__assert_func>
    RCC_ClkInitTypeDef clkinitstruct = { 0 };
 8009b98:	e9cd 3305 	strd	r3, r3, [sp, #20]
    clkinitstruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;  //  Value 2
 8009b9c:	2102      	movs	r1, #2
 8009b9e:	2309      	movs	r3, #9
 8009ba0:	e9cd 3103 	strd	r3, r1, [sp, #12]
    clkinitstruct.APB2CLKDivider = RCC_HCLK_DIV8;  //  Value 1536
 8009ba4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
    if (HAL_RCC_ClockConfig(&clkinitstruct, FLASH_LATENCY_2) != HAL_OK) { assert(0); }  //  Latency=2
 8009ba8:	a803      	add	r0, sp, #12
    clkinitstruct.APB2CLKDivider = RCC_HCLK_DIV8;  //  Value 1536
 8009baa:	9307      	str	r3, [sp, #28]
    if (HAL_RCC_ClockConfig(&clkinitstruct, FLASH_LATENCY_2) != HAL_OK) { assert(0); }  //  Latency=2
 8009bac:	f7ff fd42 	bl	8009634 <HAL_RCC_ClockConfig>
 8009bb0:	4603      	mov	r3, r0
 8009bb2:	2800      	cmp	r0, #0
 8009bb4:	d1ea      	bne.n	8009b8c <stm32f1_adc_open+0x40>
    switch (adc_addr) {
 8009bb6:	4a12      	ldr	r2, [pc, #72]	; (8009c00 <stm32f1_adc_open+0xb4>)
 8009bb8:	6821      	ldr	r1, [r4, #0]
 8009bba:	4291      	cmp	r1, r2
 8009bbc:	f502 426c 	add.w	r2, r2, #60416	; 0xec00
 8009bc0:	d005      	beq.n	8009bce <stm32f1_adc_open+0x82>
 8009bc2:	4d10      	ldr	r5, [pc, #64]	; (8009c04 <stm32f1_adc_open+0xb8>)
 8009bc4:	42a9      	cmp	r1, r5
 8009bc6:	d011      	beq.n	8009bec <stm32f1_adc_open+0xa0>
            assert(0);
 8009bc8:	4602      	mov	r2, r0
 8009bca:	4601      	mov	r1, r0
 8009bcc:	e7e2      	b.n	8009b94 <stm32f1_adc_open+0x48>
            __HAL_RCC_ADC1_CLK_ENABLE();
 8009bce:	6993      	ldr	r3, [r2, #24]
 8009bd0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009bd4:	6193      	str	r3, [r2, #24]
 8009bd6:	6993      	ldr	r3, [r2, #24]
 8009bd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009bdc:	9301      	str	r3, [sp, #4]
 8009bde:	9b01      	ldr	r3, [sp, #4]
    if (HAL_ADC_Init(hadc) != HAL_OK) {
 8009be0:	4620      	mov	r0, r4
 8009be2:	f001 fdd1 	bl	800b788 <HAL_ADC_Init>
 8009be6:	2800      	cmp	r0, #0
 8009be8:	d0cb      	beq.n	8009b82 <stm32f1_adc_open+0x36>
 8009bea:	e7cf      	b.n	8009b8c <stm32f1_adc_open+0x40>
            __HAL_RCC_ADC2_CLK_ENABLE();
 8009bec:	6993      	ldr	r3, [r2, #24]
 8009bee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009bf2:	6193      	str	r3, [r2, #24]
 8009bf4:	6993      	ldr	r3, [r2, #24]
 8009bf6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009bfa:	9302      	str	r3, [sp, #8]
 8009bfc:	9b02      	ldr	r3, [sp, #8]
 8009bfe:	e7ef      	b.n	8009be0 <stm32f1_adc_open+0x94>
 8009c00:	40012400 	.word	0x40012400
 8009c04:	40012800 	.word	0x40012800

08009c08 <stm32f1_adc_close>:
{
 8009c08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    assert(dev);
 8009c0a:	4604      	mov	r4, r0
 8009c0c:	b920      	cbnz	r0, 8009c18 <stm32f1_adc_close+0x10>
 8009c0e:	4603      	mov	r3, r0
 8009c10:	4602      	mov	r2, r0
 8009c12:	4601      	mov	r1, r0
            assert(0);
 8009c14:	f7fb fe7e 	bl	8005914 <__assert_func>
    cnum = dev->ad_chans->c_cnum;
 8009c18:	6b43      	ldr	r3, [r0, #52]	; 0x34
    switch (adc_addr) {
 8009c1a:	4a1b      	ldr	r2, [pc, #108]	; (8009c88 <stm32f1_adc_close+0x80>)
    cnum = dev->ad_chans->c_cnum;
 8009c1c:	7918      	ldrb	r0, [r3, #4]
    hadc = cfg->sac_adc_handle;
 8009c1e:	6963      	ldr	r3, [r4, #20]
    uintptr_t adc_addr = (uintptr_t)hadc->Instance;
 8009c20:	695b      	ldr	r3, [r3, #20]
 8009c22:	681b      	ldr	r3, [r3, #0]
    switch (adc_addr) {
 8009c24:	4293      	cmp	r3, r2
 8009c26:	f502 426c 	add.w	r2, r2, #60416	; 0xec00
 8009c2a:	d007      	beq.n	8009c3c <stm32f1_adc_close+0x34>
 8009c2c:	4917      	ldr	r1, [pc, #92]	; (8009c8c <stm32f1_adc_close+0x84>)
 8009c2e:	428b      	cmp	r3, r1
 8009c30:	d025      	beq.n	8009c7e <stm32f1_adc_close+0x76>
            assert(0);
 8009c32:	2300      	movs	r3, #0
 8009c34:	461a      	mov	r2, r3
 8009c36:	4619      	mov	r1, r3
 8009c38:	4618      	mov	r0, r3
 8009c3a:	e7eb      	b.n	8009c14 <stm32f1_adc_close+0xc>
            __HAL_RCC_ADC1_CLK_DISABLE();
 8009c3c:	6991      	ldr	r1, [r2, #24]
 8009c3e:	f421 7100 	bic.w	r1, r1, #512	; 0x200
            __HAL_RCC_ADC2_CLK_DISABLE();
 8009c42:	6191      	str	r1, [r2, #24]
    if (cnum != ADC_CHANNEL_TEMPSENSOR && cnum != ADC_CHANNEL_VREFINT) {
 8009c44:	f1a0 0210 	sub.w	r2, r0, #16
 8009c48:	2a01      	cmp	r2, #1
 8009c4a:	d90e      	bls.n	8009c6a <stm32f1_adc_close+0x62>
    switch (adc_addr) {
 8009c4c:	4a0e      	ldr	r2, [pc, #56]	; (8009c88 <stm32f1_adc_close+0x80>)
 8009c4e:	4293      	cmp	r3, r2
 8009c50:	d003      	beq.n	8009c5a <stm32f1_adc_close+0x52>
 8009c52:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009c56:	4293      	cmp	r3, r2
 8009c58:	d107      	bne.n	8009c6a <stm32f1_adc_close+0x62>
 8009c5a:	4669      	mov	r1, sp
 8009c5c:	f7ff fec2 	bl	80099e4 <stm32f1_resolve_adc_gpio.part.0>
        if (stm32f1_resolve_adc_gpio(hadc, cnum, &gpio_td)) {
 8009c60:	b918      	cbnz	r0, 8009c6a <stm32f1_adc_close+0x62>
        if (hal_gpio_deinit_stm(gpio_td.Pin, &gpio_td)) {
 8009c62:	4669      	mov	r1, sp
 8009c64:	9800      	ldr	r0, [sp, #0]
 8009c66:	f7ff f869 	bl	8008d3c <hal_gpio_deinit_stm>
    if (os_started()) {
 8009c6a:	f7fb ff13 	bl	8005a94 <os_started>
 8009c6e:	b118      	cbz	r0, 8009c78 <stm32f1_adc_close+0x70>
        os_mutex_release(&dev->ad_lock);
 8009c70:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009c74:	f7fc fcac 	bl	80065d0 <os_mutex_release>
}
 8009c78:	2000      	movs	r0, #0
 8009c7a:	b004      	add	sp, #16
 8009c7c:	bd10      	pop	{r4, pc}
            __HAL_RCC_ADC2_CLK_DISABLE();
 8009c7e:	6991      	ldr	r1, [r2, #24]
 8009c80:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8009c84:	e7dd      	b.n	8009c42 <stm32f1_adc_close+0x3a>
 8009c86:	bf00      	nop
 8009c88:	40012400 	.word	0x40012400
 8009c8c:	40012800 	.word	0x40012800

08009c90 <HAL_ADC_ErrorCallback>:
    ++stm32f1_adc_stats.adc_error;
 8009c90:	4b0c      	ldr	r3, [pc, #48]	; (8009cc4 <HAL_ADC_ErrorCallback+0x34>)
 8009c92:	885a      	ldrh	r2, [r3, #2]
 8009c94:	3201      	adds	r2, #1
 8009c96:	805a      	strh	r2, [r3, #2]
    if (hadc->ErrorCode & HAL_ADC_ERROR_DMA) {
 8009c98:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8009c9a:	0752      	lsls	r2, r2, #29
 8009c9c:	d503      	bpl.n	8009ca6 <HAL_ADC_ErrorCallback+0x16>
        ++stm32f1_adc_stats.adc_dma_xfer_failed;
 8009c9e:	889a      	ldrh	r2, [r3, #4]
 8009ca0:	3201      	adds	r2, #1
 8009ca2:	809a      	strh	r2, [r3, #4]
 8009ca4:	4770      	bx	lr
    } else if (hadc->ErrorCode & HAL_ADC_ERROR_OVR) {
 8009ca6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8009ca8:	0791      	lsls	r1, r2, #30
 8009caa:	d503      	bpl.n	8009cb4 <HAL_ADC_ErrorCallback+0x24>
        ++stm32f1_adc_stats.adc_dma_overrun;
 8009cac:	899a      	ldrh	r2, [r3, #12]
 8009cae:	3201      	adds	r2, #1
 8009cb0:	819a      	strh	r2, [r3, #12]
 8009cb2:	4770      	bx	lr
    } else if (hadc->ErrorCode & HAL_ADC_ERROR_INTERNAL) {
 8009cb4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8009cb6:	07d2      	lsls	r2, r2, #31
        ++stm32f1_adc_stats.adc_internal_error;
 8009cb8:	bf42      	ittt	mi
 8009cba:	89da      	ldrhmi	r2, [r3, #14]
 8009cbc:	3201      	addmi	r2, #1
 8009cbe:	81da      	strhmi	r2, [r3, #14]
}
 8009cc0:	4770      	bx	lr
 8009cc2:	bf00      	nop
 8009cc4:	20002c2c 	.word	0x20002c2c

08009cc8 <stm32f1_adc_dev_init>:
 * @param2 stm32f1 ADC device cfg ptr
 * @return OS_OK on success
 */
int
stm32f1_adc_dev_init(struct os_dev *odev, void *arg)
{
 8009cc8:	b538      	push	{r3, r4, r5, lr}
 8009cca:	4604      	mov	r4, r0
    struct stm32f1_adc_dev_cfg *sac;
    struct adc_dev *dev;

    sac = (struct stm32f1_adc_dev_cfg *) arg;

    assert(sac != NULL);
 8009ccc:	460d      	mov	r5, r1
 8009cce:	b921      	cbnz	r1, 8009cda <stm32f1_adc_dev_init+0x12>
 8009cd0:	460b      	mov	r3, r1
 8009cd2:	460a      	mov	r2, r1
 8009cd4:	4608      	mov	r0, r1
 8009cd6:	f7fb fe1d 	bl	8005914 <__assert_func>

    dev = (struct adc_dev *)odev;

    os_mutex_init(&dev->ad_lock);
 8009cda:	3024      	adds	r0, #36	; 0x24
 8009cdc:	f7fc fc6e 	bl	80065bc <os_mutex_init>

    dev->ad_chans = (void *) sac->sac_chans;
 8009ce0:	686b      	ldr	r3, [r5, #4]
    ADC_HandleTypeDef *hadc = cfg->sac_adc_handle;
    HAL_StatusTypeDef rc = HAL_ADC_Init(hadc);  ////  Added HAL initalisation, which was missing from the STM32F4 code.
    if (rc != HAL_OK) { return rc; }
#endif  //  NOTUSED
    return (OS_OK);
}
 8009ce2:	2000      	movs	r0, #0
    dev->ad_chans = (void *) sac->sac_chans;
 8009ce4:	6363      	str	r3, [r4, #52]	; 0x34
    dev->ad_chan_count = sac->sac_chan_count;
 8009ce6:	782b      	ldrb	r3, [r5, #0]
 8009ce8:	63a3      	str	r3, [r4, #56]	; 0x38
    OS_DEV_SETHANDLERS(odev, stm32f1_adc_open, stm32f1_adc_close);
 8009cea:	4b03      	ldr	r3, [pc, #12]	; (8009cf8 <stm32f1_adc_dev_init+0x30>)
 8009cec:	6023      	str	r3, [r4, #0]
 8009cee:	4b03      	ldr	r3, [pc, #12]	; (8009cfc <stm32f1_adc_dev_init+0x34>)
 8009cf0:	60e3      	str	r3, [r4, #12]
    dev->ad_funcs = &stm32f1_adc_funcs;
 8009cf2:	4b03      	ldr	r3, [pc, #12]	; (8009d00 <stm32f1_adc_dev_init+0x38>)
 8009cf4:	6323      	str	r3, [r4, #48]	; 0x30
}
 8009cf6:	bd38      	pop	{r3, r4, r5, pc}
 8009cf8:	08009b4d 	.word	0x08009b4d
 8009cfc:	08009c09 	.word	0x08009c09
 8009d00:	0800e0e0 	.word	0x0800e0e0

08009d04 <bc95g_create>:
//  Generic Device Creator Code based on repos\apache-mynewt-core\hw\sensor\creator\src\sensor_creator.c

static int config_device(void);

//  Create the device instance and configure it.  Called by sysinit() during startup, defined in pkg.yml.
void DEVICE_CREATE(void) {
 8009d04:	b530      	push	{r4, r5, lr}
    console_printf("%screate " DEVICE_NAME "\n", _nbt);
 8009d06:	4b18      	ldr	r3, [pc, #96]	; (8009d68 <bc95g_create+0x64>)
void DEVICE_CREATE(void) {
 8009d08:	b087      	sub	sp, #28
    console_printf("%screate " DEVICE_NAME "\n", _nbt);
 8009d0a:	6819      	ldr	r1, [r3, #0]
 8009d0c:	4817      	ldr	r0, [pc, #92]	; (8009d6c <bc95g_create+0x68>)
 8009d0e:	f7fa f84d 	bl	8003dac <console_printf>

    //  Create the device.
    int rc = os_dev_create((struct os_dev *) &DEVICE_INSTANCE, DEVICE_NAME,
        OS_DEV_INIT_PRIMARY, 0,  //  For BSP: OS_DEV_INIT_KERNEL, OS_DEV_INIT_PRIO_DEFAULT,
        DEVICE_INIT, (void *) &DEVICE_ITF);
 8009d12:	4b17      	ldr	r3, [pc, #92]	; (8009d70 <bc95g_create+0x6c>)
 8009d14:	2201      	movs	r2, #1
 8009d16:	9301      	str	r3, [sp, #4]
 8009d18:	4b16      	ldr	r3, [pc, #88]	; (8009d74 <bc95g_create+0x70>)
 8009d1a:	4917      	ldr	r1, [pc, #92]	; (8009d78 <bc95g_create+0x74>)
 8009d1c:	9300      	str	r3, [sp, #0]
 8009d1e:	4817      	ldr	r0, [pc, #92]	; (8009d7c <bc95g_create+0x78>)
 8009d20:	2300      	movs	r3, #0
 8009d22:	f7fc f817 	bl	8005d54 <os_dev_create>
    assert(rc == 0);
 8009d26:	4602      	mov	r2, r0
 8009d28:	b128      	cbz	r0, 8009d36 <bc95g_create+0x32>
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	461a      	mov	r2, r3
 8009d2e:	4619      	mov	r1, r3
 8009d30:	4618      	mov	r0, r3
 8009d32:	f7fb fdef 	bl	8005914 <__assert_func>
    int rc;
    struct os_dev *dev;
    struct DEVICE_CFG cfg;

    //  Fetch the device.
    dev = (struct os_dev *) os_dev_open(DEVICE_NAME, OS_TIMEOUT_NEVER, NULL);
 8009d36:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009d3a:	480f      	ldr	r0, [pc, #60]	; (8009d78 <bc95g_create+0x74>)
 8009d3c:	f7fc f874 	bl	8005e28 <os_dev_open>
    assert(dev != NULL);
 8009d40:	4604      	mov	r4, r0
 8009d42:	2800      	cmp	r0, #0
 8009d44:	d0f1      	beq.n	8009d2a <bc95g_create+0x26>

    //  Get the default config for the device.
    rc = DEVICE_CFG_DEFAULT(&cfg);
 8009d46:	a802      	add	r0, sp, #8
 8009d48:	f000 f9e2 	bl	800a110 <bc95g_default_cfg>
    assert(rc == 0);
 8009d4c:	2800      	cmp	r0, #0
 8009d4e:	d1ec      	bne.n	8009d2a <bc95g_create+0x26>

    //  Apply the device config.
    rc = DEVICE_CFG_FUNC((struct DEVICE_DEV *)dev, &cfg);
 8009d50:	a902      	add	r1, sp, #8
 8009d52:	4620      	mov	r0, r4
 8009d54:	f000 f9e3 	bl	800a11e <bc95g_config>
 8009d58:	4605      	mov	r5, r0
    os_dev_close(dev);
 8009d5a:	4620      	mov	r0, r4
 8009d5c:	f7fc f885 	bl	8005e6a <os_dev_close>
    assert(rc == 0);
 8009d60:	2d00      	cmp	r5, #0
 8009d62:	d1e2      	bne.n	8009d2a <bc95g_create+0x26>
}
 8009d64:	b007      	add	sp, #28
 8009d66:	bd30      	pop	{r4, r5, pc}
 8009d68:	20000200 	.word	0x20000200
 8009d6c:	0800e0fc 	.word	0x0800e0fc
 8009d70:	200001e8 	.word	0x200001e8
 8009d74:	0800a0dd 	.word	0x0800a0dd
 8009d78:	0800e10e 	.word	0x0800e10e
 8009d7c:	20002c3c 	.word	0x20002c3c

08009d80 <_ZL11bc95g_eventPv>:
        if (_cbs[i].callback) {
            _cbs[i].callback(_cbs[i].data);
        }
    }
#endif  //  TODO
}
 8009d80:	4770      	bx	lr

08009d82 <_ZL10bc95g_openP6os_devmPv.part.13>:
static const char *get_command(struct bc95g *dev, enum CommandId id) {
 8009d82:	b508      	push	{r3, lr}
    assert(id < (sizeof(COMMANDS) / sizeof(COMMANDS[0])));  //  Invalid id
 8009d84:	2300      	movs	r3, #0
 8009d86:	461a      	mov	r2, r3
 8009d88:	4619      	mov	r1, r3
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	f7fb fdc2 	bl	8005914 <__assert_func>

08009d90 <_ZL18register_transportPKcPvS0_th>:
static int register_transport(const char *network_device, void *server_endpoint, const char *host, uint16_t port, uint8_t server_endpoint_size) {
 8009d90:	b510      	push	{r4, lr}
 8009d92:	f89d 4008 	ldrb.w	r4, [sp, #8]
    assert(server_endpoint_size >= sizeof(struct bc95g_server));  //  Server Endpoint too small
 8009d96:	2c0f      	cmp	r4, #15
 8009d98:	d801      	bhi.n	8009d9e <_ZL18register_transportPKcPvS0_th+0xe>
 8009d9a:	f7ff fff2 	bl	8009d82 <_ZL10bc95g_openP6os_devmPv.part.13>
}
 8009d9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    int rc = bc95g_register_transport(network_device, (struct bc95g_server *) server_endpoint, host, port);
 8009da2:	f000 bb33 	b.w	800a40c <bc95g_register_transport>
	...

08009da8 <_ZL11bc95g_closeP6os_dev>:
static int bc95g_close(struct os_dev *dev0) {
 8009da8:	b510      	push	{r4, lr}
 8009daa:	4604      	mov	r4, r0
    console_printf("]\n");  console_flush();  ////
 8009dac:	4804      	ldr	r0, [pc, #16]	; (8009dc0 <_ZL11bc95g_closeP6os_dev+0x18>)
 8009dae:	f7f9 fffd 	bl	8003dac <console_printf>
 8009db2:	f7f9 ff21 	bl	8003bf8 <console_flush>
    assert(dev0);
 8009db6:	b90c      	cbnz	r4, 8009dbc <_ZL11bc95g_closeP6os_dev+0x14>
 8009db8:	f7ff ffe3 	bl	8009d82 <_ZL10bc95g_openP6os_devmPv.part.13>
}
 8009dbc:	2000      	movs	r0, #0
 8009dbe:	bd10      	pop	{r4, pc}
 8009dc0:	0800e134 	.word	0x0800e134

08009dc4 <_ZL9expect_okP5bc95g.isra.4>:
    return parser.recv("OK");
 8009dc4:	4901      	ldr	r1, [pc, #4]	; (8009dcc <_ZL9expect_okP5bc95g.isra.4+0x8>)
 8009dc6:	4802      	ldr	r0, [pc, #8]	; (8009dd0 <_ZL9expect_okP5bc95g.isra.4+0xc>)
 8009dc8:	f000 bd0a 	b.w	800a7e0 <_ZN8ATParser4recvEPKcz>
 8009dcc:	0800e1d8 	.word	0x0800e1d8
 8009dd0:	20003004 	.word	0x20003004

08009dd4 <_ZL8send_atpP5bc95g.isra.6>:
static bool send_atp(struct bc95g *dev) {
 8009dd4:	b508      	push	{r3, lr}
    return parser.write(ATP, sizeof(ATP) - 1) > 0;
 8009dd6:	2203      	movs	r2, #3
 8009dd8:	4904      	ldr	r1, [pc, #16]	; (8009dec <_ZL8send_atpP5bc95g.isra.6+0x18>)
 8009dda:	4805      	ldr	r0, [pc, #20]	; (8009df0 <_ZL8send_atpP5bc95g.isra.6+0x1c>)
 8009ddc:	f000 fb98 	bl	800a510 <_ZN8ATParser5writeEPKci>
}
 8009de0:	2800      	cmp	r0, #0
 8009de2:	bfd4      	ite	le
 8009de4:	2000      	movle	r0, #0
 8009de6:	2001      	movgt	r0, #1
 8009de8:	bd08      	pop	{r3, pc}
 8009dea:	bf00      	nop
 8009dec:	0800e18d 	.word	0x0800e18d
 8009df0:	20003004 	.word	0x20003004

08009df4 <_ZL10send_queryP5bc95g9CommandIdPiS2_.constprop.15>:
static bool send_query(struct bc95g *dev, enum CommandId id, int *res1, int *res2) {
 8009df4:	b570      	push	{r4, r5, r6, lr}
 8009df6:	461c      	mov	r4, r3
    const char *cmd = COMMANDS[id];
 8009df8:	4b19      	ldr	r3, [pc, #100]	; (8009e60 <_ZL10send_queryP5bc95g9CommandIdPiS2_.constprop.15+0x6c>)
static bool send_query(struct bc95g *dev, enum CommandId id, int *res1, int *res2) {
 8009dfa:	b088      	sub	sp, #32
    const char *cmd = COMMANDS[id];
 8009dfc:	f853 6021 	ldr.w	r6, [r3, r1, lsl #2]
    dev->last_error = id;  //  Set command ID as the last error.
 8009e00:	6341      	str	r1, [r0, #52]	; 0x34
static bool send_query(struct bc95g *dev, enum CommandId id, int *res1, int *res2) {
 8009e02:	4615      	mov	r5, r2
    char cmd_response[17];  memset(cmd_response, 0, sizeof(cmd_response));
 8009e04:	2100      	movs	r1, #0
 8009e06:	2211      	movs	r2, #17
 8009e08:	a803      	add	r0, sp, #12
 8009e0a:	f7fd f91e 	bl	800704a <memset>
    *res1 = -1; 
 8009e0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009e12:	602b      	str	r3, [r5, #0]
    if (res2) { *res2 = -1; }
 8009e14:	b104      	cbz	r4, 8009e18 <_ZL10send_queryP5bc95g9CommandIdPiS2_.constprop.15+0x24>
 8009e16:	6023      	str	r3, [r4, #0]
        send_atp(dev) &&
 8009e18:	f7ff ffdc 	bl	8009dd4 <_ZL8send_atpP5bc95g.isra.6>
        ) &&
 8009e1c:	b928      	cbnz	r0, 8009e2a <_ZL10send_queryP5bc95g9CommandIdPiS2_.constprop.15+0x36>
 8009e1e:	2400      	movs	r4, #0
    console_flush();
 8009e20:	f7f9 feea 	bl	8003bf8 <console_flush>
}
 8009e24:	4620      	mov	r0, r4
 8009e26:	b008      	add	sp, #32
 8009e28:	bd70      	pop	{r4, r5, r6, pc}
        parser.send(cmd) && (
 8009e2a:	4631      	mov	r1, r6
 8009e2c:	480d      	ldr	r0, [pc, #52]	; (8009e64 <_ZL10send_queryP5bc95g9CommandIdPiS2_.constprop.15+0x70>)
 8009e2e:	f000 fcca 	bl	800a7c6 <_ZN8ATParser4sendEPKcz>
        send_atp(dev) &&
 8009e32:	2800      	cmp	r0, #0
 8009e34:	d0f3      	beq.n	8009e1e <_ZL10send_queryP5bc95g9CommandIdPiS2_.constprop.15+0x2a>
        ) &&
 8009e36:	b95c      	cbnz	r4, 8009e50 <_ZL10send_queryP5bc95g9CommandIdPiS2_.constprop.15+0x5c>
            ? parser.recv("+%16[^:]:%d", cmd_response, res1)  //  Note: cmd is max 16 chars
 8009e38:	462b      	mov	r3, r5
 8009e3a:	aa03      	add	r2, sp, #12
 8009e3c:	490a      	ldr	r1, [pc, #40]	; (8009e68 <_ZL10send_queryP5bc95g9CommandIdPiS2_.constprop.15+0x74>)
 8009e3e:	4809      	ldr	r0, [pc, #36]	; (8009e64 <_ZL10send_queryP5bc95g9CommandIdPiS2_.constprop.15+0x70>)
 8009e40:	f000 fcce 	bl	800a7e0 <_ZN8ATParser4recvEPKcz>
        parser.send(cmd) && (
 8009e44:	2800      	cmp	r0, #0
 8009e46:	d0ea      	beq.n	8009e1e <_ZL10send_queryP5bc95g9CommandIdPiS2_.constprop.15+0x2a>
        expect_ok(dev)
 8009e48:	f7ff ffbc 	bl	8009dc4 <_ZL9expect_okP5bc95g.isra.4>
 8009e4c:	4604      	mov	r4, r0
 8009e4e:	e7e7      	b.n	8009e20 <_ZL10send_queryP5bc95g9CommandIdPiS2_.constprop.15+0x2c>
            : parser.recv("+%16[^:]:%d,%d", cmd_response, res1, res2)  //  Note: cmd is max 16 chars
 8009e50:	9400      	str	r4, [sp, #0]
 8009e52:	462b      	mov	r3, r5
 8009e54:	aa03      	add	r2, sp, #12
 8009e56:	4905      	ldr	r1, [pc, #20]	; (8009e6c <_ZL10send_queryP5bc95g9CommandIdPiS2_.constprop.15+0x78>)
 8009e58:	4802      	ldr	r0, [pc, #8]	; (8009e64 <_ZL10send_queryP5bc95g9CommandIdPiS2_.constprop.15+0x70>)
 8009e5a:	f000 fcc1 	bl	800a7e0 <_ZN8ATParser4recvEPKcz>
 8009e5e:	e7f1      	b.n	8009e44 <_ZL10send_queryP5bc95g9CommandIdPiS2_.constprop.15+0x50>
 8009e60:	0800e194 	.word	0x0800e194
 8009e64:	20003004 	.word	0x20003004
 8009e68:	0800e119 	.word	0x0800e119
 8009e6c:	0800e125 	.word	0x0800e125

08009e70 <_ZL10bc95g_openP6os_devmPv>:
static int bc95g_open(struct os_dev *dev0, uint32_t timeout, void *arg) {
 8009e70:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!first_open) { console_printf("[\n"); return 0; }  ////
 8009e72:	4b20      	ldr	r3, [pc, #128]	; (8009ef4 <_ZL10bc95g_openP6os_devmPv+0x84>)
static int bc95g_open(struct os_dev *dev0, uint32_t timeout, void *arg) {
 8009e74:	b085      	sub	sp, #20
    if (!first_open) { console_printf("[\n"); return 0; }  ////
 8009e76:	781a      	ldrb	r2, [r3, #0]
static int bc95g_open(struct os_dev *dev0, uint32_t timeout, void *arg) {
 8009e78:	4605      	mov	r5, r0
    if (!first_open) { console_printf("[\n"); return 0; }  ////
 8009e7a:	b92a      	cbnz	r2, 8009e88 <_ZL10bc95g_openP6os_devmPv+0x18>
 8009e7c:	481e      	ldr	r0, [pc, #120]	; (8009ef8 <_ZL10bc95g_openP6os_devmPv+0x88>)
 8009e7e:	f7f9 ff95 	bl	8003dac <console_printf>
}
 8009e82:	2000      	movs	r0, #0
 8009e84:	b005      	add	sp, #20
 8009e86:	bdf0      	pop	{r4, r5, r6, r7, pc}
    first_open = false;
 8009e88:	2400      	movs	r4, #0
    console_printf("[\n");  ////
 8009e8a:	481b      	ldr	r0, [pc, #108]	; (8009ef8 <_ZL10bc95g_openP6os_devmPv+0x88>)
    first_open = false;
 8009e8c:	701c      	strb	r4, [r3, #0]
    console_printf("[\n");  ////
 8009e8e:	f7f9 ff8d 	bl	8003dac <console_printf>
    assert(dev0);
 8009e92:	b90d      	cbnz	r5, 8009e98 <_ZL10bc95g_openP6os_devmPv+0x28>
 8009e94:	f7ff ff75 	bl	8009d82 <_ZL10bc95g_openP6os_devmPv.part.13>
    serial.init(txbuf, txbuf_size, rxbuf, rxbuf_size);
 8009e98:	f44f 7780 	mov.w	r7, #256	; 0x100
    memset(cfg->sockets, 0, sizeof(cfg->sockets));
 8009e9c:	62ac      	str	r4, [r5, #40]	; 0x28
 8009e9e:	62ec      	str	r4, [r5, #44]	; 0x2c
 8009ea0:	632c      	str	r4, [r5, #48]	; 0x30
    serial.init(txbuf, txbuf_size, rxbuf, rxbuf_size);
 8009ea2:	9401      	str	r4, [sp, #4]
 8009ea4:	9700      	str	r7, [sp, #0]
 8009ea6:	4b15      	ldr	r3, [pc, #84]	; (8009efc <_ZL10bc95g_openP6os_devmPv+0x8c>)
 8009ea8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8009eac:	4914      	ldr	r1, [pc, #80]	; (8009f00 <_ZL10bc95g_openP6os_devmPv+0x90>)
 8009eae:	4815      	ldr	r0, [pc, #84]	; (8009f04 <_ZL10bc95g_openP6os_devmPv+0x94>)
 8009eb0:	f000 fcab 	bl	800a80a <_ZN14BufferedSerial4initEPcmS0_mPKc>
    parser.init(serial, parserbuf, parserbuf_size);
 8009eb4:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8009eb8:	4e13      	ldr	r6, [pc, #76]	; (8009f08 <_ZL10bc95g_openP6os_devmPv+0x98>)
 8009eba:	9301      	str	r3, [sp, #4]
 8009ebc:	4b13      	ldr	r3, [pc, #76]	; (8009f0c <_ZL10bc95g_openP6os_devmPv+0x9c>)
 8009ebe:	4a14      	ldr	r2, [pc, #80]	; (8009f10 <_ZL10bc95g_openP6os_devmPv+0xa0>)
 8009ec0:	9300      	str	r3, [sp, #0]
 8009ec2:	4630      	mov	r0, r6
 8009ec4:	463b      	mov	r3, r7
 8009ec6:	9402      	str	r4, [sp, #8]
 8009ec8:	490e      	ldr	r1, [pc, #56]	; (8009f04 <_ZL10bc95g_openP6os_devmPv+0x94>)
 8009eca:	f000 fafb 	bl	800a4c4 <_ZN8ATParser4initER14BufferedSerialPciPKcib>
    packets = 0;
 8009ece:	4b11      	ldr	r3, [pc, #68]	; (8009f14 <_ZL10bc95g_openP6os_devmPv+0xa4>)
    serial.baud(9600);  //  TODO: Increase the bitrate
 8009ed0:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8009ed4:	480b      	ldr	r0, [pc, #44]	; (8009f04 <_ZL10bc95g_openP6os_devmPv+0x94>)
    packets = 0;
 8009ed6:	601c      	str	r4, [r3, #0]
    serial.baud(9600);  //  TODO: Increase the bitrate
 8009ed8:	f000 fd41 	bl	800a95e <_ZN14BufferedSerial4baudEm>
    serial.configure(uart);
 8009edc:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8009ede:	4809      	ldr	r0, [pc, #36]	; (8009f04 <_ZL10bc95g_openP6os_devmPv+0x94>)
    * Allows echo to be on or off
    *
    * @param echo 1 for echo and 0 turns it off
    */
    void debugOn(uint8_t on) {
        dbg_on = (on) ? 1 : 0;
 8009ee0:	7634      	strb	r4, [r6, #24]
 8009ee2:	f000 fcb2 	bl	800a84a <_ZN14BufferedSerial9configureEi>
    serial.attach(func, arg);
 8009ee6:	4623      	mov	r3, r4
 8009ee8:	462a      	mov	r2, r5
 8009eea:	490b      	ldr	r1, [pc, #44]	; (8009f18 <_ZL10bc95g_openP6os_devmPv+0xa8>)
 8009eec:	4805      	ldr	r0, [pc, #20]	; (8009f04 <_ZL10bc95g_openP6os_devmPv+0x94>)
 8009eee:	f000 fd31 	bl	800a954 <_ZN14BufferedSerial6attachEPFvPvES0_i>
 8009ef2:	e7c6      	b.n	8009e82 <_ZL10bc95g_openP6os_devmPv+0x12>
 8009ef4:	200001fc 	.word	0x200001fc
 8009ef8:	0800e116 	.word	0x0800e116
 8009efc:	20002c74 	.word	0x20002c74
 8009f00:	20002d74 	.word	0x20002d74
 8009f04:	20003040 	.word	0x20003040
 8009f08:	20003004 	.word	0x20003004
 8009f0c:	0800e32b 	.word	0x0800e32b
 8009f10:	20002f04 	.word	0x20002f04
 8009f14:	2000308c 	.word	0x2000308c
 8009f18:	08009d81 	.word	0x08009d81

08009f1c <_ZL8send_hexP5bc95gPKht.isra.8>:
        ? '0' + n
        : 'a' + n - 10;
}

/// Send the data as hex digits.
static bool send_hex(struct bc95g *dev, const uint8_t *data, uint16_t size) {
 8009f1c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009f1e:	4604      	mov	r4, r0
 8009f20:	460d      	mov	r5, r1
    console_dump(data, size); console_printf("\n");
 8009f22:	f7f9 fedb 	bl	8003cdc <console_dump>
 8009f26:	4813      	ldr	r0, [pc, #76]	; (8009f74 <_ZL8send_hexP5bc95gPKht.isra.8+0x58>)
 8009f28:	f7f9 ff40 	bl	8003dac <console_printf>
 8009f2c:	3c01      	subs	r4, #1
    char hex[2];
    for (uint16_t i = 0; i < size; i++) {
        uint8_t b = data[i];
        hex[0] = nibble_to_hex(b >> 4);
        hex[1] = nibble_to_hex(b & 0xf);
        int res = parser.write(hex, 2);
 8009f2e:	4e12      	ldr	r6, [pc, #72]	; (8009f78 <_ZL8send_hexP5bc95gPKht.isra.8+0x5c>)
 8009f30:	4425      	add	r5, r4
    for (uint16_t i = 0; i < size; i++) {
 8009f32:	42ac      	cmp	r4, r5
 8009f34:	d01b      	beq.n	8009f6e <_ZL8send_hexP5bc95gPKht.isra.8+0x52>
        uint8_t b = data[i];
 8009f36:	f814 3f01 	ldrb.w	r3, [r4, #1]!
        int res = parser.write(hex, 2);
 8009f3a:	4630      	mov	r0, r6
        hex[0] = nibble_to_hex(b >> 4);
 8009f3c:	1119      	asrs	r1, r3, #4
 8009f3e:	b2ca      	uxtb	r2, r1
        hex[1] = nibble_to_hex(b & 0xf);
 8009f40:	f003 030f 	and.w	r3, r3, #15
        : 'a' + n - 10;
 8009f44:	2909      	cmp	r1, #9
 8009f46:	bfd4      	ite	le
 8009f48:	3230      	addle	r2, #48	; 0x30
 8009f4a:	3257      	addgt	r2, #87	; 0x57
 8009f4c:	2b09      	cmp	r3, #9
 8009f4e:	bf94      	ite	ls
 8009f50:	3330      	addls	r3, #48	; 0x30
 8009f52:	3357      	addhi	r3, #87	; 0x57
        hex[0] = nibble_to_hex(b >> 4);
 8009f54:	f88d 2004 	strb.w	r2, [sp, #4]
        int res = parser.write(hex, 2);
 8009f58:	a901      	add	r1, sp, #4
 8009f5a:	2202      	movs	r2, #2
        hex[1] = nibble_to_hex(b & 0xf);
 8009f5c:	f88d 3005 	strb.w	r3, [sp, #5]
        int res = parser.write(hex, 2);
 8009f60:	f000 fad6 	bl	800a510 <_ZN8ATParser5writeEPKci>
        if (res <= 0) { return false; }
 8009f64:	2800      	cmp	r0, #0
 8009f66:	dce4      	bgt.n	8009f32 <_ZL8send_hexP5bc95gPKht.isra.8+0x16>
 8009f68:	2000      	movs	r0, #0
    }
    return true;
}
 8009f6a:	b002      	add	sp, #8
 8009f6c:	bd70      	pop	{r4, r5, r6, pc}
    return true;
 8009f6e:	2001      	movs	r0, #1
 8009f70:	e7fb      	b.n	8009f6a <_ZL8send_hexP5bc95gPKht.isra.8+0x4e>
 8009f72:	bf00      	nop
 8009f74:	0800e32c 	.word	0x0800e32c
 8009f78:	20003004 	.word	0x20003004

08009f7c <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf.isra.11>:
    _log(_f, result);
    return result;
}

/// Transmit the `data` buffer if `data` is non-null, or the chain of mbufs.  Return number of bytes sent.
static int send_tx_command(struct bc95g *dev, struct bc95g_socket *socket, const char *host, uint16_t port, 
 8009f7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f80:	461e      	mov	r6, r3
    const uint8_t *data, uint16_t length, uint8_t sequence, struct os_mbuf *mbuf) {
    uint16_t local_port = socket->local_port;
    int local_port_response = -1, length_response = -1;
 8009f82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    console_printf("AT> NSOST=%d,%s,%d,%d,\n", local_port, host, port, length);
 8009f86:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
    int local_port_response = -1, length_response = -1;
 8009f8a:	e9cd 3302 	strd	r3, r3, [sp, #8]
static int send_tx_command(struct bc95g *dev, struct bc95g_socket *socket, const char *host, uint16_t port, 
 8009f8e:	4680      	mov	r8, r0
    console_printf("AT> NSOST=%d,%s,%d,%d,\n", local_port, host, port, length);
 8009f90:	4613      	mov	r3, r2
static int send_tx_command(struct bc95g *dev, struct bc95g_socket *socket, const char *host, uint16_t port, 
 8009f92:	4689      	mov	r9, r1
 8009f94:	4692      	mov	sl, r2
    console_printf("AT> NSOST=%d,%s,%d,%d,\n", local_port, host, port, length);
 8009f96:	9500      	str	r5, [sp, #0]
 8009f98:	460a      	mov	r2, r1
 8009f9a:	4601      	mov	r1, r0
 8009f9c:	482b      	ldr	r0, [pc, #172]	; (800a04c <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf.isra.11+0xd0>)
static int send_tx_command(struct bc95g *dev, struct bc95g_socket *socket, const char *host, uint16_t port, 
 8009f9e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    console_printf("AT> NSOST=%d,%s,%d,%d,\n", local_port, host, port, length);
 8009fa0:	f7f9 ff04 	bl	8003dac <console_printf>
        _timeout = timeout;
 8009fa4:	f242 7310 	movw	r3, #10000	; 0x2710
 8009fa8:	4f29      	ldr	r7, [pc, #164]	; (800a050 <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf.isra.11+0xd4>)
 8009faa:	60fb      	str	r3, [r7, #12]
    internal_timeout(BC95G_SEND_TIMEOUT);
    bool res = (
        send_atp(dev) &&  //  Will pause between commands.
 8009fac:	f7ff ff12 	bl	8009dd4 <_ZL8send_atpP5bc95g.isra.6>
        parser.printf("NSOST=%d,%s,%d,%d,",
            local_port, host, port, length) &&
        send_data(dev, data, length, mbuf) &&
        parser.send(",%d", sequence) &&
        parser.recv("%d,%d", &local_port_response, &length_response) &&
 8009fb0:	b920      	cbnz	r0, 8009fbc <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf.isra.11+0x40>
        parser.recv("OK")
    );
    return res ? length : 0;
 8009fb2:	2500      	movs	r5, #0
}
 8009fb4:	4628      	mov	r0, r5
 8009fb6:	b004      	add	sp, #16
 8009fb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        parser.printf("NSOST=%d,%s,%d,%d,",
 8009fbc:	e9cd a500 	strd	sl, r5, [sp]
 8009fc0:	464b      	mov	r3, r9
 8009fc2:	4642      	mov	r2, r8
 8009fc4:	4923      	ldr	r1, [pc, #140]	; (800a054 <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf.isra.11+0xd8>)
 8009fc6:	4638      	mov	r0, r7
 8009fc8:	f000 fbf0 	bl	800a7ac <_ZN8ATParser6printfEPKcz>
        send_atp(dev) &&  //  Will pause between commands.
 8009fcc:	2800      	cmp	r0, #0
 8009fce:	d0f0      	beq.n	8009fb2 <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf.isra.11+0x36>
    if (data && length > 0) {
 8009fd0:	b1f6      	cbz	r6, 800a010 <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf.isra.11+0x94>
 8009fd2:	b1ed      	cbz	r5, 800a010 <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf.isra.11+0x94>
        return send_hex(dev, data, length);
 8009fd4:	4630      	mov	r0, r6
 8009fd6:	4629      	mov	r1, r5
 8009fd8:	f7ff ffa0 	bl	8009f1c <_ZL8send_hexP5bc95gPKht.isra.8>
 8009fdc:	4606      	mov	r6, r0
            local_port, host, port, length) &&
 8009fde:	2e00      	cmp	r6, #0
 8009fe0:	d0e7      	beq.n	8009fb2 <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf.isra.11+0x36>
        parser.send(",%d", sequence) &&
 8009fe2:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 8009fe6:	491c      	ldr	r1, [pc, #112]	; (800a058 <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf.isra.11+0xdc>)
 8009fe8:	4819      	ldr	r0, [pc, #100]	; (800a050 <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf.isra.11+0xd4>)
 8009fea:	f000 fbec 	bl	800a7c6 <_ZN8ATParser4sendEPKcz>
        send_data(dev, data, length, mbuf) &&
 8009fee:	2800      	cmp	r0, #0
 8009ff0:	d0df      	beq.n	8009fb2 <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf.isra.11+0x36>
        parser.recv("%d,%d", &local_port_response, &length_response) &&
 8009ff2:	ab03      	add	r3, sp, #12
 8009ff4:	aa02      	add	r2, sp, #8
 8009ff6:	4919      	ldr	r1, [pc, #100]	; (800a05c <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf.isra.11+0xe0>)
 8009ff8:	4815      	ldr	r0, [pc, #84]	; (800a050 <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf.isra.11+0xd4>)
 8009ffa:	f000 fbf1 	bl	800a7e0 <_ZN8ATParser4recvEPKcz>
        parser.send(",%d", sequence) &&
 8009ffe:	2800      	cmp	r0, #0
 800a000:	d0d7      	beq.n	8009fb2 <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf.isra.11+0x36>
        parser.recv("OK")
 800a002:	4917      	ldr	r1, [pc, #92]	; (800a060 <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf.isra.11+0xe4>)
 800a004:	4812      	ldr	r0, [pc, #72]	; (800a050 <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf.isra.11+0xd4>)
 800a006:	f000 fbeb 	bl	800a7e0 <_ZN8ATParser4recvEPKcz>
        parser.recv("%d,%d", &local_port_response, &length_response) &&
 800a00a:	2800      	cmp	r0, #0
 800a00c:	d1d2      	bne.n	8009fb4 <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf.isra.11+0x38>
 800a00e:	e7d0      	b.n	8009fb2 <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf.isra.11+0x36>
    assert(mbuf);
 800a010:	b92c      	cbnz	r4, 800a01e <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf.isra.11+0xa2>
 800a012:	4623      	mov	r3, r4
 800a014:	4622      	mov	r2, r4
 800a016:	4621      	mov	r1, r4
 800a018:	4620      	mov	r0, r4
 800a01a:	f7fb fc7b 	bl	8005914 <__assert_func>
    console_printf("%s%s %u...\n", _nbt, _f, (unsigned) chain_size);  console_flush();
 800a01e:	4911      	ldr	r1, [pc, #68]	; (800a064 <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf.isra.11+0xe8>)
 800a020:	8a23      	ldrh	r3, [r4, #16]
 800a022:	4a11      	ldr	r2, [pc, #68]	; (800a068 <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf.isra.11+0xec>)
 800a024:	6809      	ldr	r1, [r1, #0]
 800a026:	4811      	ldr	r0, [pc, #68]	; (800a06c <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf.isra.11+0xf0>)
 800a028:	f7f9 fec0 	bl	8003dac <console_printf>
 800a02c:	f7f9 fde4 	bl	8003bf8 <console_flush>
        bool res = send_hex(dev, data, size);
 800a030:	88e1      	ldrh	r1, [r4, #6]
 800a032:	6820      	ldr	r0, [r4, #0]
 800a034:	f7ff ff72 	bl	8009f1c <_ZL8send_hexP5bc95gPKht.isra.8>
        if (!res) { result = false; break; }
 800a038:	4606      	mov	r6, r0
 800a03a:	b110      	cbz	r0, 800a042 <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf.isra.11+0xc6>
        m = m->om_next.sle_next;   //  Fetch next mbuf in the list.
 800a03c:	68e4      	ldr	r4, [r4, #12]
    while (m) {  //  Send each mbuf in the chain.
 800a03e:	2c00      	cmp	r4, #0
 800a040:	d1f6      	bne.n	800a030 <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf.isra.11+0xb4>
    _log(_f, result);
 800a042:	4631      	mov	r1, r6
 800a044:	4808      	ldr	r0, [pc, #32]	; (800a068 <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf.isra.11+0xec>)
 800a046:	f000 fa25 	bl	800a494 <_log>
 800a04a:	e7c8      	b.n	8009fde <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf.isra.11+0x62>
 800a04c:	0800e14c 	.word	0x0800e14c
 800a050:	20003004 	.word	0x20003004
 800a054:	0800e164 	.word	0x0800e164
 800a058:	0800e26e 	.word	0x0800e26e
 800a05c:	0800e12e 	.word	0x0800e12e
 800a060:	0800e1d8 	.word	0x0800e1d8
 800a064:	20000200 	.word	0x20000200
 800a068:	0800e177 	.word	0x0800e177
 800a06c:	0800e181 	.word	0x0800e181

0800a070 <_ZL16send_command_intP5bc95g9CommandIdi>:
static bool send_command_int(struct bc95g *dev, enum CommandId id, int arg) {
 800a070:	b538      	push	{r3, r4, r5, lr}
 800a072:	4615      	mov	r5, r2
    const char *cmd = COMMANDS[id];
 800a074:	4a09      	ldr	r2, [pc, #36]	; (800a09c <_ZL16send_command_intP5bc95g9CommandIdi+0x2c>)
    dev->last_error = id;  //  Set command ID as the last error.
 800a076:	6341      	str	r1, [r0, #52]	; 0x34
    const char *cmd = COMMANDS[id];
 800a078:	f852 4021 	ldr.w	r4, [r2, r1, lsl #2]
        send_atp(dev) &&
 800a07c:	f7ff feaa 	bl	8009dd4 <_ZL8send_atpP5bc95g.isra.6>
        parser.send(cmd, arg) &&
 800a080:	b148      	cbz	r0, 800a096 <_ZL16send_command_intP5bc95g9CommandIdi+0x26>
 800a082:	462a      	mov	r2, r5
 800a084:	4621      	mov	r1, r4
 800a086:	4806      	ldr	r0, [pc, #24]	; (800a0a0 <_ZL16send_command_intP5bc95g9CommandIdi+0x30>)
 800a088:	f000 fb9d 	bl	800a7c6 <_ZN8ATParser4sendEPKcz>
        send_atp(dev) &&
 800a08c:	b118      	cbz	r0, 800a096 <_ZL16send_command_intP5bc95g9CommandIdi+0x26>
}
 800a08e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        expect_ok(dev)
 800a092:	f7ff be97 	b.w	8009dc4 <_ZL9expect_okP5bc95g.isra.4>
}
 800a096:	2000      	movs	r0, #0
 800a098:	bd38      	pop	{r3, r4, r5, pc}
 800a09a:	bf00      	nop
 800a09c:	0800e194 	.word	0x0800e194
 800a0a0:	20003004 	.word	0x20003004

0800a0a4 <_ZL12send_commandP5bc95g9CommandId>:
    const char *cmd = COMMANDS[id];
 800a0a4:	4a0b      	ldr	r2, [pc, #44]	; (800a0d4 <_ZL12send_commandP5bc95g9CommandId+0x30>)
static bool send_command(struct bc95g *dev, enum CommandId id) {
 800a0a6:	b510      	push	{r4, lr}
    dev->last_error = id;  //  Set command ID as the last error.
 800a0a8:	6341      	str	r1, [r0, #52]	; 0x34
    const char *cmd = COMMANDS[id];
 800a0aa:	f852 4021 	ldr.w	r4, [r2, r1, lsl #2]
        send_atp(dev) &&
 800a0ae:	f7ff fe91 	bl	8009dd4 <_ZL8send_atpP5bc95g.isra.6>
        parser.send(cmd) &&
 800a0b2:	b920      	cbnz	r0, 800a0be <_ZL12send_commandP5bc95g9CommandId+0x1a>
 800a0b4:	2400      	movs	r4, #0
    console_flush();
 800a0b6:	f7f9 fd9f 	bl	8003bf8 <console_flush>
}
 800a0ba:	4620      	mov	r0, r4
 800a0bc:	bd10      	pop	{r4, pc}
        parser.send(cmd) &&
 800a0be:	4621      	mov	r1, r4
 800a0c0:	4805      	ldr	r0, [pc, #20]	; (800a0d8 <_ZL12send_commandP5bc95g9CommandId+0x34>)
 800a0c2:	f000 fb80 	bl	800a7c6 <_ZN8ATParser4sendEPKcz>
        send_atp(dev) &&
 800a0c6:	2800      	cmp	r0, #0
 800a0c8:	d0f4      	beq.n	800a0b4 <_ZL12send_commandP5bc95g9CommandId+0x10>
        expect_ok(dev)
 800a0ca:	f7ff fe7b 	bl	8009dc4 <_ZL9expect_okP5bc95g.isra.4>
 800a0ce:	4604      	mov	r4, r0
 800a0d0:	e7f1      	b.n	800a0b6 <_ZL12send_commandP5bc95g9CommandId+0x12>
 800a0d2:	bf00      	nop
 800a0d4:	0800e194 	.word	0x0800e194
 800a0d8:	20003004 	.word	0x20003004

0800a0dc <bc95g_init>:
int bc95g_init(struct os_dev *dev0, void *arg) {
 800a0dc:	b508      	push	{r3, lr}
    if (!arg || !dev0) { rc = SYS_ENODEV; goto err; }
 800a0de:	b171      	cbz	r1, 800a0fe <bc95g_init+0x22>
 800a0e0:	b168      	cbz	r0, 800a0fe <bc95g_init+0x22>
    OS_DEV_SETHANDLERS(dev0, bc95g_open, bc95g_close);
 800a0e2:	4b08      	ldr	r3, [pc, #32]	; (800a104 <bc95g_init+0x28>)
 800a0e4:	6003      	str	r3, [r0, #0]
 800a0e6:	4b08      	ldr	r3, [pc, #32]	; (800a108 <bc95g_init+0x2c>)
 800a0e8:	60c3      	str	r3, [r0, #12]
    rc = sensor_network_register_interface(&network_iface);
 800a0ea:	4808      	ldr	r0, [pc, #32]	; (800a10c <bc95g_init+0x30>)
 800a0ec:	f7fa fa24 	bl	8004538 <sensor_network_register_interface>
    assert(rc == 0);
 800a0f0:	b138      	cbz	r0, 800a102 <bc95g_init+0x26>
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	461a      	mov	r2, r3
 800a0f6:	4619      	mov	r1, r3
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	f7fb fc0b 	bl	8005914 <__assert_func>
    return rc;
 800a0fe:	f06f 0008 	mvn.w	r0, #8
}
 800a102:	bd08      	pop	{r3, pc}
 800a104:	08009e71 	.word	0x08009e71
 800a108:	08009da9 	.word	0x08009da9
 800a10c:	0800e138 	.word	0x0800e138

0800a110 <bc95g_default_cfg>:
    memset(cfg, 0, sizeof(struct bc95g_cfg));  //  Zero the entire object.
 800a110:	2300      	movs	r3, #0
 800a112:	6043      	str	r3, [r0, #4]
 800a114:	6083      	str	r3, [r0, #8]
 800a116:	60c3      	str	r3, [r0, #12]
    cfg->uart = 0;  //  Default to UART number 0, which is UART2.
 800a118:	6003      	str	r3, [r0, #0]
}
 800a11a:	4618      	mov	r0, r3
 800a11c:	4770      	bx	lr

0800a11e <bc95g_config>:
}
 800a11e:	2000      	movs	r0, #0
 800a120:	4770      	bx	lr
	...

0800a124 <bc95g_connect>:
int bc95g_connect(struct bc95g *dev) {
 800a124:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800a128:	f242 7310 	movw	r3, #10000	; 0x2710
 800a12c:	4604      	mov	r4, r0
 800a12e:	250a      	movs	r5, #10
 800a130:	4e4a      	ldr	r6, [pc, #296]	; (800a25c <bc95g_connect+0x138>)
            parser.send("\r\nAT") &&
 800a132:	4f4b      	ldr	r7, [pc, #300]	; (800a260 <bc95g_connect+0x13c>)
            parser.recv("OK")
 800a134:	f8df 8130 	ldr.w	r8, [pc, #304]	; 800a268 <bc95g_connect+0x144>
 800a138:	60f3      	str	r3, [r6, #12]
            parser.send("\r\nAT") &&
 800a13a:	4639      	mov	r1, r7
 800a13c:	4630      	mov	r0, r6
 800a13e:	f000 fb42 	bl	800a7c6 <_ZN8ATParser4sendEPKcz>
 800a142:	2800      	cmp	r0, #0
 800a144:	d051      	beq.n	800a1ea <bc95g_connect+0xc6>
            parser.recv("OK")
 800a146:	4641      	mov	r1, r8
 800a148:	4630      	mov	r0, r6
 800a14a:	f000 fb49 	bl	800a7e0 <_ZN8ATParser4recvEPKcz>
            parser.send("\r\nAT") &&
 800a14e:	2800      	cmp	r0, #0
 800a150:	d04b      	beq.n	800a1ea <bc95g_connect+0xc6>
            parser.flush();
 800a152:	4842      	ldr	r0, [pc, #264]	; (800a25c <bc95g_connect+0x138>)
 800a154:	f000 f9d0 	bl	800a4f8 <_ZN8ATParser5flushEv>
        send_command(dev, NCONFIG) &&
 800a158:	2101      	movs	r1, #1
 800a15a:	4620      	mov	r0, r4
 800a15c:	f7ff ffa2 	bl	800a0a4 <_ZL12send_commandP5bc95g9CommandId>
        wait_for_ok(dev) &&
 800a160:	2800      	cmp	r0, #0
 800a162:	d04c      	beq.n	800a1fe <bc95g_connect+0xda>
        send_command(dev, QREGSWT) &&
 800a164:	2102      	movs	r1, #2
 800a166:	4620      	mov	r0, r4
 800a168:	f7ff ff9c 	bl	800a0a4 <_ZL12send_commandP5bc95g9CommandId>
        send_command(dev, NCONFIG) &&
 800a16c:	2800      	cmp	r0, #0
 800a16e:	d046      	beq.n	800a1fe <bc95g_connect+0xda>
        send_command(dev, NRB) &&
 800a170:	2103      	movs	r1, #3
 800a172:	4620      	mov	r0, r4
 800a174:	f7ff ff96 	bl	800a0a4 <_ZL12send_commandP5bc95g9CommandId>
        send_command(dev, QREGSWT) &&
 800a178:	2800      	cmp	r0, #0
 800a17a:	d040      	beq.n	800a1fe <bc95g_connect+0xda>
        parser.send("AT") &&
 800a17c:	4939      	ldr	r1, [pc, #228]	; (800a264 <bc95g_connect+0x140>)
 800a17e:	4837      	ldr	r0, [pc, #220]	; (800a25c <bc95g_connect+0x138>)
 800a180:	f000 fb21 	bl	800a7c6 <_ZN8ATParser4sendEPKcz>
        send_command(dev, NRB) &&
 800a184:	b3d8      	cbz	r0, 800a1fe <bc95g_connect+0xda>
        expect_ok(dev) &&
 800a186:	f7ff fe1d 	bl	8009dc4 <_ZL9expect_okP5bc95g.isra.4>
        parser.send("AT") &&
 800a18a:	b3c0      	cbz	r0, 800a1fe <bc95g_connect+0xda>
        (parser.flush() == 0)
 800a18c:	4833      	ldr	r0, [pc, #204]	; (800a25c <bc95g_connect+0x138>)
 800a18e:	f000 f9b3 	bl	800a4f8 <_ZN8ATParser5flushEv>
        expect_ok(dev) &&
 800a192:	4606      	mov	r6, r0
 800a194:	bb98      	cbnz	r0, 800a1fe <bc95g_connect+0xda>
        send_command_int(dev, NBAND, MYNEWT_VAL(NBIOT_BAND)) &&
 800a196:	2208      	movs	r2, #8
 800a198:	2104      	movs	r1, #4
 800a19a:	4620      	mov	r0, r4
 800a19c:	f7ff ff68 	bl	800a070 <_ZL16send_command_intP5bc95g9CommandIdi>
        wait_for_attach(dev) &&
 800a1a0:	b368      	cbz	r0, 800a1fe <bc95g_connect+0xda>
        send_command(dev, CFUN) &&
 800a1a2:	2105      	movs	r1, #5
 800a1a4:	4620      	mov	r0, r4
 800a1a6:	f7ff ff7d 	bl	800a0a4 <_ZL12send_commandP5bc95g9CommandId>
        send_command_int(dev, NBAND, MYNEWT_VAL(NBIOT_BAND)) &&
 800a1aa:	b340      	cbz	r0, 800a1fe <bc95g_connect+0xda>
        send_command(dev, CGATT) &&
 800a1ac:	2109      	movs	r1, #9
 800a1ae:	4620      	mov	r0, r4
 800a1b0:	f7ff ff78 	bl	800a0a4 <_ZL12send_commandP5bc95g9CommandId>
        send_command(dev, CFUN) &&
 800a1b4:	b318      	cbz	r0, 800a1fe <bc95g_connect+0xda>
        send_command(dev, CEREG) &&
 800a1b6:	2107      	movs	r1, #7
 800a1b8:	4620      	mov	r0, r4
 800a1ba:	f7ff ff73 	bl	800a0a4 <_ZL12send_commandP5bc95g9CommandId>
        send_command(dev, CGATT) &&
 800a1be:	b1f0      	cbz	r0, 800a1fe <bc95g_connect+0xda>
 800a1c0:	250a      	movs	r5, #10
        int code = -1, status = -1;
 800a1c2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
        bool res = send_query(dev, CEREG_QUERY, &code, &status);
 800a1c6:	ab02      	add	r3, sp, #8
 800a1c8:	aa01      	add	r2, sp, #4
 800a1ca:	2108      	movs	r1, #8
 800a1cc:	4620      	mov	r0, r4
        int code = -1, status = -1;
 800a1ce:	e9cd 7701 	strd	r7, r7, [sp, #4]
        bool res = send_query(dev, CEREG_QUERY, &code, &status);
 800a1d2:	f7ff fe0f 	bl	8009df4 <_ZL10send_queryP5bc95g9CommandIdPiS2_.constprop.15>
        if (!res) { return false; }  //  If send failed, quit.
 800a1d6:	b190      	cbz	r0, 800a1fe <bc95g_connect+0xda>
        assert(status >= 0);
 800a1d8:	9b02      	ldr	r3, [sp, #8]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	da14      	bge.n	800a208 <bc95g_connect+0xe4>
 800a1de:	2300      	movs	r3, #0
 800a1e0:	461a      	mov	r2, r3
 800a1e2:	4619      	mov	r1, r3
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	f7fb fb95 	bl	8005914 <__assert_func>
        console_flush();
 800a1ea:	f7f9 fd05 	bl	8003bf8 <console_flush>
 800a1ee:	3d01      	subs	r5, #1
    os_time_delay(seconds * OS_TICKS_PER_SEC);
 800a1f0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a1f4:	f7fc fd8e 	bl	8006d14 <os_time_delay>
    for (uint8_t i = 0; i < 10; i++) {
 800a1f8:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 800a1fc:	d19d      	bne.n	800a13a <bc95g_connect+0x16>
    ) ? 0 : dev->last_error;
 800a1fe:	6b66      	ldr	r6, [r4, #52]	; 0x34
}
 800a200:	4630      	mov	r0, r6
 800a202:	b004      	add	sp, #16
 800a204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (status == 1) { return true; }  //  If registered, exit.
 800a208:	2b01      	cmp	r3, #1
 800a20a:	d00a      	beq.n	800a222 <bc95g_connect+0xfe>
        console_flush();
 800a20c:	f7f9 fcf4 	bl	8003bf8 <console_flush>
 800a210:	3d01      	subs	r5, #1
    os_time_delay(seconds * OS_TICKS_PER_SEC);
 800a212:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a216:	f7fc fd7d 	bl	8006d14 <os_time_delay>
    for (uint8_t i = 0; i < 10; i++) {
 800a21a:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 800a21e:	d1d2      	bne.n	800a1c6 <bc95g_connect+0xa2>
 800a220:	e7ed      	b.n	800a1fe <bc95g_connect+0xda>
        if (!res) { return false; }  //  If send failed, quit.
 800a222:	250a      	movs	r5, #10
        int state = -1;
 800a224:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
        bool res = send_query(dev, CGATT_QUERY, &state, NULL);
 800a228:	2300      	movs	r3, #0
 800a22a:	aa03      	add	r2, sp, #12
 800a22c:	210a      	movs	r1, #10
 800a22e:	4620      	mov	r0, r4
        int state = -1;
 800a230:	9703      	str	r7, [sp, #12]
        bool res = send_query(dev, CGATT_QUERY, &state, NULL);
 800a232:	f7ff fddf 	bl	8009df4 <_ZL10send_queryP5bc95g9CommandIdPiS2_.constprop.15>
        if (!res) { return false; }  //  If send failed, quit.
 800a236:	2800      	cmp	r0, #0
 800a238:	d0e1      	beq.n	800a1fe <bc95g_connect+0xda>
        assert(state >= 0);
 800a23a:	9b03      	ldr	r3, [sp, #12]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	dbce      	blt.n	800a1de <bc95g_connect+0xba>
        if (state == 1) { return true; }  //  If attached, exit.
 800a240:	2b01      	cmp	r3, #1
 800a242:	d0dd      	beq.n	800a200 <bc95g_connect+0xdc>
        console_flush();
 800a244:	f7f9 fcd8 	bl	8003bf8 <console_flush>
 800a248:	3d01      	subs	r5, #1
    os_time_delay(seconds * OS_TICKS_PER_SEC);
 800a24a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a24e:	f7fc fd61 	bl	8006d14 <os_time_delay>
    for (uint8_t i = 0; i < 10; i++) {
 800a252:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 800a256:	d1e7      	bne.n	800a228 <bc95g_connect+0x104>
 800a258:	e7d1      	b.n	800a1fe <bc95g_connect+0xda>
 800a25a:	bf00      	nop
 800a25c:	20003004 	.word	0x20003004
 800a260:	0800e1db 	.word	0x0800e1db
 800a264:	0800e1dd 	.word	0x0800e1dd
 800a268:	0800e1d8 	.word	0x0800e1d8

0800a26c <bc95g_socket_open>:
 800a26c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
int bc95g_socket_open(struct bc95g *dev, struct bc95g_socket **socket_ptr) {
 800a270:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a272:	4d19      	ldr	r5, [pc, #100]	; (800a2d8 <bc95g_socket_open+0x6c>)
 800a274:	4604      	mov	r4, r0
 800a276:	60eb      	str	r3, [r5, #12]
    dev->last_error = id;  //  Set command ID as the last error.
 800a278:	230b      	movs	r3, #11
 800a27a:	6343      	str	r3, [r0, #52]	; 0x34
    *result = -1;
 800a27c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
int bc95g_socket_open(struct bc95g *dev, struct bc95g_socket **socket_ptr) {
 800a280:	460e      	mov	r6, r1
    *result = -1;
 800a282:	9301      	str	r3, [sp, #4]
        send_atp(dev) &&
 800a284:	f7ff fda6 	bl	8009dd4 <_ZL8send_atpP5bc95g.isra.6>
        parser.recv("%d", result) &&
 800a288:	b920      	cbnz	r0, 800a294 <bc95g_socket_open+0x28>
    console_flush();
 800a28a:	f7f9 fcb5 	bl	8003bf8 <console_flush>
    if (!res) { return dev->last_error; }
 800a28e:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 800a290:	b002      	add	sp, #8
 800a292:	bd70      	pop	{r4, r5, r6, pc}
        parser.send(cmd) &&
 800a294:	4911      	ldr	r1, [pc, #68]	; (800a2dc <bc95g_socket_open+0x70>)
 800a296:	4628      	mov	r0, r5
 800a298:	f000 fa95 	bl	800a7c6 <_ZN8ATParser4sendEPKcz>
        send_atp(dev) &&
 800a29c:	2800      	cmp	r0, #0
 800a29e:	d0f4      	beq.n	800a28a <bc95g_socket_open+0x1e>
        parser.recv("%d", result) &&
 800a2a0:	aa01      	add	r2, sp, #4
 800a2a2:	490f      	ldr	r1, [pc, #60]	; (800a2e0 <bc95g_socket_open+0x74>)
 800a2a4:	4628      	mov	r0, r5
 800a2a6:	f000 fa9b 	bl	800a7e0 <_ZN8ATParser4recvEPKcz>
        parser.send(cmd) &&
 800a2aa:	2800      	cmp	r0, #0
 800a2ac:	d0ed      	beq.n	800a28a <bc95g_socket_open+0x1e>
        expect_ok(dev)
 800a2ae:	f7ff fd89 	bl	8009dc4 <_ZL9expect_okP5bc95g.isra.4>
        parser.recv("%d", result) &&
 800a2b2:	2800      	cmp	r0, #0
 800a2b4:	d0e9      	beq.n	800a28a <bc95g_socket_open+0x1e>
    console_flush();
 800a2b6:	f7f9 fc9f 	bl	8003bf8 <console_flush>
    assert(local_port > 0);
 800a2ba:	9b01      	ldr	r3, [sp, #4]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	dc05      	bgt.n	800a2cc <bc95g_socket_open+0x60>
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	461a      	mov	r2, r3
 800a2c4:	4619      	mov	r1, r3
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	f7fb fb24 	bl	8005914 <__assert_func>
    socket->local_port = (uint16_t) local_port;
 800a2cc:	f824 3f28 	strh.w	r3, [r4, #40]!
    *socket_ptr = socket;
 800a2d0:	6034      	str	r4, [r6, #0]
    return 0;
 800a2d2:	2000      	movs	r0, #0
 800a2d4:	e7dc      	b.n	800a290 <bc95g_socket_open+0x24>
 800a2d6:	bf00      	nop
 800a2d8:	20003004 	.word	0x20003004
 800a2dc:	0800e1e0 	.word	0x0800e1e0
 800a2e0:	0800e26f 	.word	0x0800e26f

0800a2e4 <bc95g_socket_tx_mbuf>:
int bc95g_socket_tx(struct bc95g *dev, struct bc95g_socket *socket, const char *host, uint16_t port, const uint8_t *data, uint16_t length, uint8_t sequence) {
    //  Transmit the buffer through the socket.  `length` is the number of bytes in `data`.  `sequence` is a running message sequence number 1 to 255.  Return number of bytes transmitted.
    return send_tx_command(dev, socket, host, port, data, length, sequence, NULL);
}

int bc95g_socket_tx_mbuf(struct bc95g *dev, struct bc95g_socket *socket, const char *host, uint16_t port, uint8_t sequence, struct os_mbuf *mbuf) {
 800a2e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a2e6:	4614      	mov	r4, r2
    //  Transmit the chain of mbufs through the socket.  `sequence` is a running message sequence number 1 to 255.  Return number of bytes transmitted.
    uint16_t length = OS_MBUF_PKTLEN(mbuf);  //  Length of the mbuf chain.
    return send_tx_command(dev, socket, host, port, NULL, length, sequence, mbuf);
 800a2e8:	8808      	ldrh	r0, [r1, #0]
int bc95g_socket_tx_mbuf(struct bc95g *dev, struct bc95g_socket *socket, const char *host, uint16_t port, uint8_t sequence, struct os_mbuf *mbuf) {
 800a2ea:	461a      	mov	r2, r3
    return send_tx_command(dev, socket, host, port, NULL, length, sequence, mbuf);
 800a2ec:	f89d 1018 	ldrb.w	r1, [sp, #24]
int bc95g_socket_tx_mbuf(struct bc95g *dev, struct bc95g_socket *socket, const char *host, uint16_t port, uint8_t sequence, struct os_mbuf *mbuf) {
 800a2f0:	9b07      	ldr	r3, [sp, #28]
    return send_tx_command(dev, socket, host, port, NULL, length, sequence, mbuf);
 800a2f2:	9101      	str	r1, [sp, #4]
 800a2f4:	9302      	str	r3, [sp, #8]
 800a2f6:	8a1b      	ldrh	r3, [r3, #16]
 800a2f8:	4621      	mov	r1, r4
 800a2fa:	9300      	str	r3, [sp, #0]
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	f7ff fe3d 	bl	8009f7c <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf.isra.11>
}
 800a302:	b004      	add	sp, #16
 800a304:	bd10      	pop	{r4, pc}

0800a306 <_ZL10oc_ep_sizePK11oc_endpoint>:
}

static uint8_t oc_ep_size(const struct oc_endpoint *oe) {
    //  Return the size of the endpoint.  OIC will allocate space to store this endpoint in the transmitted mbuf.
    return sizeof(struct bc95g_endpoint);
}
 800a306:	200c      	movs	r0, #12
 800a308:	4770      	bx	lr

0800a30a <_ZL14oc_ep_has_connPK11oc_endpoint>:

static int oc_ep_has_conn(const struct oc_endpoint *oe) {
    //  Return true if the endpoint is connected.  We always return false.
    //  console_printf("oc_ep_has_conn\n");
    return 0;
}
 800a30a:	2000      	movs	r0, #0
 800a30c:	4770      	bx	lr

0800a30e <_ZL7oc_initv>:

static int oc_init(void) {
    //  Init the endpoint.
    //  console_printf("oc_init\n");
    return 0;
}
 800a30e:	2000      	movs	r0, #0
 800a310:	4770      	bx	lr

0800a312 <_ZL11oc_shutdownv>:

static void oc_shutdown(void) {
    //  Shutdown the endpoint.
    //  console_printf("oc_shutdown\n");
}
 800a312:	4770      	bx	lr

0800a314 <_ZL9oc_ep_strPciPK11oc_endpoint>:
static char *oc_ep_str(char *ptr, int maxlen, const struct oc_endpoint *oe) {
 800a314:	b510      	push	{r4, lr}
 800a316:	4604      	mov	r4, r0
    console_printf("NBT str\n");
 800a318:	4804      	ldr	r0, [pc, #16]	; (800a32c <_ZL9oc_ep_strPciPK11oc_endpoint+0x18>)
 800a31a:	f7f9 fd47 	bl	8003dac <console_printf>
    strcpy(ptr, "TODO:oc_ep_str");
 800a31e:	4904      	ldr	r1, [pc, #16]	; (800a330 <_ZL9oc_ep_strPciPK11oc_endpoint+0x1c>)
 800a320:	4620      	mov	r0, r4
 800a322:	f7fc feb3 	bl	800708c <strcpy>
}
 800a326:	4620      	mov	r0, r4
 800a328:	bd10      	pop	{r4, pc}
 800a32a:	bf00      	nop
 800a32c:	0800e29c 	.word	0x0800e29c
 800a330:	0800e2a5 	.word	0x0800e2a5

0800a334 <_ZL11oc_tx_ucastP7os_mbuf>:
static void oc_tx_ucast(struct os_mbuf *m) {
 800a334:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    assert(m);  assert(OS_MBUF_USRHDR_LEN(m) >= sizeof(struct bc95g_endpoint));
 800a336:	4604      	mov	r4, r0
 800a338:	b928      	cbnz	r0, 800a346 <_ZL11oc_tx_ucastP7os_mbuf+0x12>
 800a33a:	2300      	movs	r3, #0
 800a33c:	461a      	mov	r2, r3
 800a33e:	4619      	mov	r1, r3
 800a340:	4618      	mov	r0, r3
 800a342:	f7fb fae7 	bl	8005914 <__assert_func>
 800a346:	7943      	ldrb	r3, [r0, #5]
 800a348:	3b08      	subs	r3, #8
 800a34a:	2b0b      	cmp	r3, #11
 800a34c:	d9f5      	bls.n	800a33a <_ZL11oc_tx_ucastP7os_mbuf+0x6>
    assert(endpoint);  assert(endpoint->host);  assert(endpoint->port);  //  Host and endpoint should be in the endpoint.
 800a34e:	f110 0f18 	cmn.w	r0, #24
 800a352:	d0f2      	beq.n	800a33a <_ZL11oc_tx_ucastP7os_mbuf+0x6>
 800a354:	69c1      	ldr	r1, [r0, #28]
 800a356:	2900      	cmp	r1, #0
 800a358:	d0ef      	beq.n	800a33a <_ZL11oc_tx_ucastP7os_mbuf+0x6>
 800a35a:	8c02      	ldrh	r2, [r0, #32]
 800a35c:	2a00      	cmp	r2, #0
 800a35e:	d0ec      	beq.n	800a33a <_ZL11oc_tx_ucastP7os_mbuf+0x6>
    assert(server);  assert(endpoint->host == server->endpoint.host);  assert(endpoint->port == server->endpoint.port);  //  We only support 1 server connection. Must match the message endpoint.
 800a360:	4b1c      	ldr	r3, [pc, #112]	; (800a3d4 <_ZL11oc_tx_ucastP7os_mbuf+0xa0>)
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d0e8      	beq.n	800a33a <_ZL11oc_tx_ucastP7os_mbuf+0x6>
 800a368:	6858      	ldr	r0, [r3, #4]
 800a36a:	4281      	cmp	r1, r0
 800a36c:	d1e5      	bne.n	800a33a <_ZL11oc_tx_ucastP7os_mbuf+0x6>
 800a36e:	891b      	ldrh	r3, [r3, #8]
 800a370:	4293      	cmp	r3, r2
 800a372:	d1e2      	bne.n	800a33a <_ZL11oc_tx_ucastP7os_mbuf+0x6>
    assert(network_device);  assert(socket);
 800a374:	4b18      	ldr	r3, [pc, #96]	; (800a3d8 <_ZL11oc_tx_ucastP7os_mbuf+0xa4>)
 800a376:	6818      	ldr	r0, [r3, #0]
 800a378:	2800      	cmp	r0, #0
 800a37a:	d0de      	beq.n	800a33a <_ZL11oc_tx_ucastP7os_mbuf+0x6>
 800a37c:	4e17      	ldr	r6, [pc, #92]	; (800a3dc <_ZL11oc_tx_ucastP7os_mbuf+0xa8>)
 800a37e:	6833      	ldr	r3, [r6, #0]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d0da      	beq.n	800a33a <_ZL11oc_tx_ucastP7os_mbuf+0x6>
    sequence++;
 800a384:	4d16      	ldr	r5, [pc, #88]	; (800a3e0 <_ZL11oc_tx_ucastP7os_mbuf+0xac>)
        struct bc95g *dev = (struct bc95g *) os_dev_open(network_device, OS_TIMEOUT_NEVER, NULL);  //  network_device is `bc95g_0`
 800a386:	2200      	movs	r2, #0
    sequence++;
 800a388:	782b      	ldrb	r3, [r5, #0]
        struct bc95g *dev = (struct bc95g *) os_dev_open(network_device, OS_TIMEOUT_NEVER, NULL);  //  network_device is `bc95g_0`
 800a38a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    sequence++;
 800a38e:	3301      	adds	r3, #1
    if (sequence == 0) { sequence = 1; }
 800a390:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 800a394:	bf08      	it	eq
 800a396:	2301      	moveq	r3, #1
 800a398:	702b      	strb	r3, [r5, #0]
        struct bc95g *dev = (struct bc95g *) os_dev_open(network_device, OS_TIMEOUT_NEVER, NULL);  //  network_device is `bc95g_0`
 800a39a:	f7fb fd45 	bl	8005e28 <os_dev_open>
        assert(dev != NULL);
 800a39e:	4607      	mov	r7, r0
 800a3a0:	2800      	cmp	r0, #0
 800a3a2:	d0ca      	beq.n	800a33a <_ZL11oc_tx_ucastP7os_mbuf+0x6>
        console_printf("NBT send udp\n");
 800a3a4:	480f      	ldr	r0, [pc, #60]	; (800a3e4 <_ZL11oc_tx_ucastP7os_mbuf+0xb0>)
 800a3a6:	f7f9 fd01 	bl	8003dac <console_printf>
        rc = bc95g_socket_tx_mbuf(dev, socket, endpoint->host, endpoint->port, sequence, m);
 800a3aa:	782a      	ldrb	r2, [r5, #0]
 800a3ac:	8c23      	ldrh	r3, [r4, #32]
 800a3ae:	9401      	str	r4, [sp, #4]
 800a3b0:	9200      	str	r2, [sp, #0]
 800a3b2:	69e2      	ldr	r2, [r4, #28]
 800a3b4:	6831      	ldr	r1, [r6, #0]
 800a3b6:	4638      	mov	r0, r7
 800a3b8:	f7ff ff94 	bl	800a2e4 <bc95g_socket_tx_mbuf>
        assert(rc > 0);
 800a3bc:	2800      	cmp	r0, #0
 800a3be:	ddbc      	ble.n	800a33a <_ZL11oc_tx_ucastP7os_mbuf+0x6>
        os_dev_close((struct os_dev *) dev);
 800a3c0:	4638      	mov	r0, r7
 800a3c2:	f7fb fd52 	bl	8005e6a <os_dev_close>
    rc = os_mbuf_free_chain(m);  assert(rc == 0);
 800a3c6:	4620      	mov	r0, r4
 800a3c8:	f7fb fead 	bl	8006126 <os_mbuf_free_chain>
 800a3cc:	2800      	cmp	r0, #0
 800a3ce:	d1b4      	bne.n	800a33a <_ZL11oc_tx_ucastP7os_mbuf+0x6>
}
 800a3d0:	b003      	add	sp, #12
 800a3d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a3d4:	20003094 	.word	0x20003094
 800a3d8:	20003090 	.word	0x20003090
 800a3dc:	20003098 	.word	0x20003098
 800a3e0:	2000309c 	.word	0x2000309c
 800a3e4:	0800e28e 	.word	0x0800e28e

0800a3e8 <init_bc95g_server>:
int init_bc95g_server(struct bc95g_server *server, const char *host, uint16_t port) {
 800a3e8:	b510      	push	{r4, lr}
    endpoint->ep.oe_type = transport_id;  //  Populate our transport ID so that OIC will call our functions.
 800a3ea:	4c07      	ldr	r4, [pc, #28]	; (800a408 <init_bc95g_server+0x20>)
 800a3ec:	7803      	ldrb	r3, [r0, #0]
 800a3ee:	7824      	ldrb	r4, [r4, #0]
 800a3f0:	f364 0302 	bfi	r3, r4, #0, #3
    endpoint->ep.oe_flags = 0;
 800a3f4:	f36f 03c7 	bfc	r3, #3, #5
 800a3f8:	7003      	strb	r3, [r0, #0]
    if (host) { 
 800a3fa:	b109      	cbz	r1, 800a400 <init_bc95g_server+0x18>
        endpoint->host = host;
 800a3fc:	6041      	str	r1, [r0, #4]
        endpoint->port = port;
 800a3fe:	8102      	strh	r2, [r0, #8]
    server->handle = (struct oc_server_handle *) server;
 800a400:	60c0      	str	r0, [r0, #12]
}
 800a402:	2000      	movs	r0, #0
 800a404:	bd10      	pop	{r4, pc}
 800a406:	bf00      	nop
 800a408:	200001fd 	.word	0x200001fd

0800a40c <bc95g_register_transport>:
int bc95g_register_transport(const char *network_device0, struct bc95g_server *server0, const char *host, uint16_t port) {
 800a40c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a410:	460d      	mov	r5, r1
 800a412:	4616      	mov	r6, r2
 800a414:	4698      	mov	r8, r3
    assert(network_device0);  assert(server0);
 800a416:	4607      	mov	r7, r0
 800a418:	b928      	cbnz	r0, 800a426 <bc95g_register_transport+0x1a>
 800a41a:	2300      	movs	r3, #0
 800a41c:	461a      	mov	r2, r3
 800a41e:	4619      	mov	r1, r3
 800a420:	4618      	mov	r0, r3
 800a422:	f7fb fa77 	bl	8005914 <__assert_func>
 800a426:	2900      	cmp	r1, #0
 800a428:	d0f7      	beq.n	800a41a <bc95g_register_transport+0xe>
        struct bc95g *dev = (struct bc95g *) os_dev_open(network_device0, OS_TIMEOUT_NEVER, NULL);  //  BC95G_DEVICE is "bc95g_0"
 800a42a:	2200      	movs	r2, #0
 800a42c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a430:	f7fb fcfa 	bl	8005e28 <os_dev_open>
        assert(dev != NULL);
 800a434:	4604      	mov	r4, r0
 800a436:	2800      	cmp	r0, #0
 800a438:	d0ef      	beq.n	800a41a <bc95g_register_transport+0xe>
        transport_id = oc_transport_register(&transport);
 800a43a:	4811      	ldr	r0, [pc, #68]	; (800a480 <bc95g_register_transport+0x74>)
 800a43c:	f7fa fcb0 	bl	8004da0 <oc_transport_register>
 800a440:	4b10      	ldr	r3, [pc, #64]	; (800a484 <bc95g_register_transport+0x78>)
        int rc = init_bc95g_server(server0, host, port);
 800a442:	4642      	mov	r2, r8
        transport_id = oc_transport_register(&transport);
 800a444:	7018      	strb	r0, [r3, #0]
        int rc = init_bc95g_server(server0, host, port);
 800a446:	4631      	mov	r1, r6
 800a448:	4628      	mov	r0, r5
 800a44a:	f7ff ffcd 	bl	800a3e8 <init_bc95g_server>
        assert(rc == 0);
 800a44e:	2800      	cmp	r0, #0
 800a450:	d1e3      	bne.n	800a41a <bc95g_register_transport+0xe>
        rc = bc95g_connect(dev);
 800a452:	4620      	mov	r0, r4
 800a454:	f7ff fe66 	bl	800a124 <bc95g_connect>
        assert(rc == 0);
 800a458:	2800      	cmp	r0, #0
 800a45a:	d1de      	bne.n	800a41a <bc95g_register_transport+0xe>
        rc = bc95g_socket_open(dev, &socket);
 800a45c:	490a      	ldr	r1, [pc, #40]	; (800a488 <bc95g_register_transport+0x7c>)
 800a45e:	4620      	mov	r0, r4
 800a460:	f7ff ff04 	bl	800a26c <bc95g_socket_open>
        assert(rc == 0);
 800a464:	4606      	mov	r6, r0
 800a466:	2800      	cmp	r0, #0
 800a468:	d1d7      	bne.n	800a41a <bc95g_register_transport+0xe>
        network_device = network_device0;
 800a46a:	4b08      	ldr	r3, [pc, #32]	; (800a48c <bc95g_register_transport+0x80>)
        os_dev_close((struct os_dev *) dev);
 800a46c:	4620      	mov	r0, r4
        network_device = network_device0;
 800a46e:	601f      	str	r7, [r3, #0]
        server = server0;
 800a470:	4b07      	ldr	r3, [pc, #28]	; (800a490 <bc95g_register_transport+0x84>)
 800a472:	601d      	str	r5, [r3, #0]
        os_dev_close((struct os_dev *) dev);
 800a474:	f7fb fcf9 	bl	8005e6a <os_dev_close>
}
 800a478:	4630      	mov	r0, r6
 800a47a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a47e:	bf00      	nop
 800a480:	0800e2b4 	.word	0x0800e2b4
 800a484:	200001fd 	.word	0x200001fd
 800a488:	20003098 	.word	0x20003098
 800a48c:	20003090 	.word	0x20003090
 800a490:	20003094 	.word	0x20003094

0800a494 <_log>:
const char *_okfailed(int ok) {
    if (ok) { return " OK\n"; }
    return " FAILED\n";
}

void _log(const char *func, int ok) {
 800a494:	b508      	push	{r3, lr}
    console_printf("%s%s%s", _nbt, func, _okfailed(ok));
 800a496:	4a07      	ldr	r2, [pc, #28]	; (800a4b4 <_log+0x20>)
 800a498:	4b07      	ldr	r3, [pc, #28]	; (800a4b8 <_log+0x24>)
 800a49a:	2900      	cmp	r1, #0
 800a49c:	bf18      	it	ne
 800a49e:	4613      	movne	r3, r2
 800a4a0:	4906      	ldr	r1, [pc, #24]	; (800a4bc <_log+0x28>)
 800a4a2:	4602      	mov	r2, r0
 800a4a4:	6809      	ldr	r1, [r1, #0]
 800a4a6:	4806      	ldr	r0, [pc, #24]	; (800a4c0 <_log+0x2c>)
 800a4a8:	f7f9 fc80 	bl	8003dac <console_printf>
    console_flush();
}
 800a4ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    console_flush();
 800a4b0:	f7f9 bba2 	b.w	8003bf8 <console_flush>
 800a4b4:	0800e2df 	.word	0x0800e2df
 800a4b8:	0800e2e4 	.word	0x0800e2e4
 800a4bc:	20000200 	.word	0x20000200
 800a4c0:	0800e2d8 	.word	0x0800e2d8

0800a4c4 <_ZN8ATParser4initER14BufferedSerialPciPKcib>:
//  e.g.  debug_if(dbg_on, "AT> %s\r\n", _buffer)
#define debug_if(dbg_on, format, arg) console_printf(format, arg)
//  #define debug_if(dbg_on, format, arg) {}

void ATParser::init(BufferedSerial &serial, char *buffer, int buffer_size, const char *delimiter, int timeout, bool debug)
{
 800a4c4:	b510      	push	{r4, lr}
 800a4c6:	4604      	mov	r4, r0
 800a4c8:	9802      	ldr	r0, [sp, #8]
    _serial = &serial;
    _buffer = buffer;
    _buffer_size = buffer_size; 
 800a4ca:	60a3      	str	r3, [r4, #8]
 800a4cc:	9b03      	ldr	r3, [sp, #12]
    _buffer = buffer;
 800a4ce:	e9c4 1200 	strd	r1, r2, [r4]
        _delimiter = delimiter;
 800a4d2:	e9c4 3003 	strd	r3, r0, [r4, #12]
        _delim_size = strlen(delimiter);
 800a4d6:	f7fc fde1 	bl	800709c <strlen>
        dbg_on = (on) ? 1 : 0;
 800a4da:	f89d 3010 	ldrb.w	r3, [sp, #16]
        _delim_size = strlen(delimiter);
 800a4de:	6160      	str	r0, [r4, #20]
        dbg_on = (on) ? 1 : 0;
 800a4e0:	7623      	strb	r3, [r4, #24]
    setTimeout(timeout);
    setDelimiter(delimiter);
    debugOn(debug);
    for (int k = 0; k < MAX_OOBS; k++) { _oobs[k].len = 0; }  //  Init the callbacks.
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	61e3      	str	r3, [r4, #28]
 800a4e6:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 800a4e8:	bd10      	pop	{r4, pc}

0800a4ea <_ZN8ATParser4putcEc>:

// getc/putc handling with timeouts
int ATParser::putc(char c)
{
    //  TODO: Handle timeout.
    return _serial->putc(c);
 800a4ea:	6800      	ldr	r0, [r0, #0]
 800a4ec:	f000 ba48 	b.w	800a980 <_ZN14BufferedSerial4putcEi>

0800a4f0 <_ZN8ATParser5fgetcEv>:
}

int ATParser::getc()
{
    //  Return the next received byte.  If no data, block until the timeout.
    return _serial->getc(_timeout);
 800a4f0:	68c1      	ldr	r1, [r0, #12]
 800a4f2:	6800      	ldr	r0, [r0, #0]
 800a4f4:	f000 b9b1 	b.w	800a85a <_ZN14BufferedSerial5fgetcEi>

0800a4f8 <_ZN8ATParser5flushEv>:
}

int ATParser::flush()
{
 800a4f8:	b510      	push	{r4, lr}
 800a4fa:	4604      	mov	r4, r0
    while (_serial->readable()) {
 800a4fc:	6820      	ldr	r0, [r4, #0]
 800a4fe:	f000 f9a6 	bl	800a84e <_ZN14BufferedSerial8readableEv>
 800a502:	b120      	cbz	r0, 800a50e <_ZN8ATParser5flushEv+0x16>
        _serial->getc(0);  //  Do not wait for data to be available.
 800a504:	2100      	movs	r1, #0
 800a506:	6820      	ldr	r0, [r4, #0]
 800a508:	f000 f9a7 	bl	800a85a <_ZN14BufferedSerial5fgetcEi>
    while (_serial->readable()) {
 800a50c:	e7f6      	b.n	800a4fc <_ZN8ATParser5flushEv+0x4>
    }
    return 0;
}
 800a50e:	bd10      	pop	{r4, pc}

0800a510 <_ZN8ATParser5writeEPKci>:


// read/write handling with timeouts
int ATParser::write(const char *data, int size)
{
 800a510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a512:	4605      	mov	r5, r0
 800a514:	460e      	mov	r6, r1
 800a516:	4617      	mov	r7, r2
    int i = 0;
 800a518:	2400      	movs	r4, #0
    for ( ; i < size; i++) {
 800a51a:	42bc      	cmp	r4, r7
 800a51c:	da09      	bge.n	800a532 <_ZN8ATParser5writeEPKci+0x22>
        if (putc(data[i]) < 0) {
 800a51e:	5d31      	ldrb	r1, [r6, r4]
 800a520:	4628      	mov	r0, r5
 800a522:	f7ff ffe2 	bl	800a4ea <_ZN8ATParser4putcEc>
 800a526:	2800      	cmp	r0, #0
 800a528:	db01      	blt.n	800a52e <_ZN8ATParser5writeEPKci+0x1e>
    for ( ; i < size; i++) {
 800a52a:	3401      	adds	r4, #1
 800a52c:	e7f5      	b.n	800a51a <_ZN8ATParser5writeEPKci+0xa>
            return -1;
 800a52e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
        }
    }
    return i;
}
 800a532:	4620      	mov	r0, r4
 800a534:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a536 <_ZN8ATParser7vprintfEPKcSt9__va_list>:
}


// printf/scanf handling
int ATParser::vprintf(const char *format, va_list args)
{
 800a536:	b538      	push	{r3, r4, r5, lr}
 800a538:	4605      	mov	r5, r0
    if (vsprintf(_buffer, format, args) < 0) {
 800a53a:	6840      	ldr	r0, [r0, #4]
 800a53c:	f001 fb4c 	bl	800bbd8 <vsprintf>
 800a540:	2800      	cmp	r0, #0
        return false;
 800a542:	f04f 0400 	mov.w	r4, #0
    if (vsprintf(_buffer, format, args) < 0) {
 800a546:	db0b      	blt.n	800a560 <_ZN8ATParser7vprintfEPKcSt9__va_list+0x2a>
    }
    int i = 0;
    for ( ; _buffer[i]; i++) {
 800a548:	686b      	ldr	r3, [r5, #4]
 800a54a:	5d19      	ldrb	r1, [r3, r4]
 800a54c:	b141      	cbz	r1, 800a560 <_ZN8ATParser7vprintfEPKcSt9__va_list+0x2a>
        if (putc(_buffer[i]) < 0) {
 800a54e:	4628      	mov	r0, r5
 800a550:	f7ff ffcb 	bl	800a4ea <_ZN8ATParser4putcEc>
 800a554:	2800      	cmp	r0, #0
 800a556:	db01      	blt.n	800a55c <_ZN8ATParser7vprintfEPKcSt9__va_list+0x26>
    for ( ; _buffer[i]; i++) {
 800a558:	3401      	adds	r4, #1
 800a55a:	e7f5      	b.n	800a548 <_ZN8ATParser7vprintfEPKcSt9__va_list+0x12>
            return -1;
 800a55c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
        }
    }
    return i;
}
 800a560:	4620      	mov	r0, r4
 800a562:	bd38      	pop	{r3, r4, r5, pc}

0800a564 <_ZN8ATParser5vsendEPKcSt9__va_list>:
}


// Command parsing with line handling
bool ATParser::vsend(const char *command, va_list args)
{
 800a564:	b538      	push	{r3, r4, r5, lr}
 800a566:	4605      	mov	r5, r0
    // Create and send command
    if (vsprintf(_buffer, command, args) < 0) {
 800a568:	6840      	ldr	r0, [r0, #4]
 800a56a:	f001 fb35 	bl	800bbd8 <vsprintf>
 800a56e:	2800      	cmp	r0, #0
 800a570:	da01      	bge.n	800a576 <_ZN8ATParser5vsendEPKcSt9__va_list+0x12>
        return false;
 800a572:	2000      	movs	r0, #0
        }
    }

    debug_if(dbg_on, "AT> %s\r\n", _buffer);
    return true;
}
 800a574:	bd38      	pop	{r3, r4, r5, pc}
    for (int i = 0; _buffer[i]; i++) {
 800a576:	2400      	movs	r4, #0
 800a578:	686b      	ldr	r3, [r5, #4]
 800a57a:	5d19      	ldrb	r1, [r3, r4]
 800a57c:	b131      	cbz	r1, 800a58c <_ZN8ATParser5vsendEPKcSt9__va_list+0x28>
        if (putc(_buffer[i]) < 0) {
 800a57e:	4628      	mov	r0, r5
 800a580:	f7ff ffb3 	bl	800a4ea <_ZN8ATParser4putcEc>
 800a584:	2800      	cmp	r0, #0
 800a586:	dbf4      	blt.n	800a572 <_ZN8ATParser5vsendEPKcSt9__va_list+0xe>
    for (int i = 0; _buffer[i]; i++) {
 800a588:	3401      	adds	r4, #1
 800a58a:	e7f5      	b.n	800a578 <_ZN8ATParser5vsendEPKcSt9__va_list+0x14>
    for (int i = 0; _delimiter[i]; i++) {
 800a58c:	460c      	mov	r4, r1
 800a58e:	692b      	ldr	r3, [r5, #16]
 800a590:	5d19      	ldrb	r1, [r3, r4]
 800a592:	b131      	cbz	r1, 800a5a2 <_ZN8ATParser5vsendEPKcSt9__va_list+0x3e>
        if (putc(_delimiter[i]) < 0) {
 800a594:	4628      	mov	r0, r5
 800a596:	f7ff ffa8 	bl	800a4ea <_ZN8ATParser4putcEc>
 800a59a:	2800      	cmp	r0, #0
 800a59c:	dbe9      	blt.n	800a572 <_ZN8ATParser5vsendEPKcSt9__va_list+0xe>
    for (int i = 0; _delimiter[i]; i++) {
 800a59e:	3401      	adds	r4, #1
 800a5a0:	e7f5      	b.n	800a58e <_ZN8ATParser5vsendEPKcSt9__va_list+0x2a>
    debug_if(dbg_on, "AT> %s\r\n", _buffer);
 800a5a2:	6869      	ldr	r1, [r5, #4]
 800a5a4:	4802      	ldr	r0, [pc, #8]	; (800a5b0 <_ZN8ATParser5vsendEPKcSt9__va_list+0x4c>)
 800a5a6:	f7f9 fc01 	bl	8003dac <console_printf>
 800a5aa:	2001      	movs	r0, #1
 800a5ac:	e7e2      	b.n	800a574 <_ZN8ATParser5vsendEPKcSt9__va_list+0x10>
 800a5ae:	bf00      	nop
 800a5b0:	0800e351 	.word	0x0800e351

0800a5b4 <_ZN8ATParser5vrecvEPKcSt9__va_list>:

bool ATParser::vrecv(const char *response, va_list args)
{
 800a5b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5b8:	4604      	mov	r4, r0
 800a5ba:	460d      	mov	r5, r1
 800a5bc:	b089      	sub	sp, #36	; 0x24
 800a5be:	9203      	str	r2, [sp, #12]
    // Iterate through each line in the expected response
    while (response[0]) {
 800a5c0:	782b      	ldrb	r3, [r5, #0]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	f000 80e1 	beq.w	800a78a <_ZN8ATParser5vrecvEPKcSt9__va_list+0x1d6>
 800a5c8:	462f      	mov	r7, r5
        // Since response is const, we need to copy it into our buffer to
        // add the line's null terminator and clobber value-matches with asterisks.
        //
        // We just use the beginning of the buffer to avoid unnecessary allocations.
        int i = 0;
        int offset = 0;
 800a5ca:	2600      	movs	r6, #0
 800a5cc:	eba7 0b05 	sub.w	fp, r7, r5
 800a5d0:	6862      	ldr	r2, [r4, #4]

        while (response[i]) {
 800a5d2:	f817 ab01 	ldrb.w	sl, [r7], #1
 800a5d6:	f106 0901 	add.w	r9, r6, #1
 800a5da:	f8cd 9000 	str.w	r9, [sp]
 800a5de:	eb02 0806 	add.w	r8, r2, r6
 800a5e2:	f1ba 0f00 	cmp.w	sl, #0
 800a5e6:	d01d      	beq.n	800a624 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x70>
            if (memcmp(&response[i+1-_delim_size], _delimiter, _delim_size) == 0) {
 800a5e8:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
 800a5ec:	1ab8      	subs	r0, r7, r2
 800a5ee:	eba7 0b05 	sub.w	fp, r7, r5
 800a5f2:	f7fc fcf9 	bl	8006fe8 <memcmp>
 800a5f6:	b1a8      	cbz	r0, 800a624 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x70>
                i++;
                break;
            } else if (response[i] == '%' && response[i+1] != '%' && response[i+1] != '*') {
 800a5f8:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 800a5fc:	9b00      	ldr	r3, [sp, #0]
 800a5fe:	d10e      	bne.n	800a61e <_ZN8ATParser5vrecvEPKcSt9__va_list+0x6a>
 800a600:	783a      	ldrb	r2, [r7, #0]
 800a602:	2a25      	cmp	r2, #37	; 0x25
 800a604:	d00b      	beq.n	800a61e <_ZN8ATParser5vrecvEPKcSt9__va_list+0x6a>
 800a606:	2a2a      	cmp	r2, #42	; 0x2a
 800a608:	d009      	beq.n	800a61e <_ZN8ATParser5vrecvEPKcSt9__va_list+0x6a>
                _buffer[offset++] = '%';
                _buffer[offset++] = '*';
 800a60a:	f04f 012a 	mov.w	r1, #42	; 0x2a
                _buffer[offset++] = '%';
 800a60e:	f888 a000 	strb.w	sl, [r8]
                _buffer[offset++] = '*';
 800a612:	6862      	ldr	r2, [r4, #4]
 800a614:	f106 0902 	add.w	r9, r6, #2
 800a618:	54d1      	strb	r1, [r2, r3]
{
 800a61a:	464e      	mov	r6, r9
 800a61c:	e7d6      	b.n	800a5cc <_ZN8ATParser5vrecvEPKcSt9__va_list+0x18>
                i++;
            } else {
                _buffer[offset++] = response[i++];
 800a61e:	f888 a000 	strb.w	sl, [r8]
 800a622:	e7fa      	b.n	800a61a <_ZN8ATParser5vrecvEPKcSt9__va_list+0x66>
        }

        // Scanf has very poor support for catching errors
        // fortunately, we can abuse the %n specifier to determine
        // if the entire string was matched.
        _buffer[offset++] = '%';
 800a624:	2325      	movs	r3, #37	; 0x25
        _buffer[offset++] = 'n';
 800a626:	226e      	movs	r2, #110	; 0x6e
        _buffer[offset++] = '%';
 800a628:	f888 3000 	strb.w	r3, [r8]
        _buffer[offset++] = 'n';
 800a62c:	6863      	ldr	r3, [r4, #4]
        _buffer[offset++] = 0;
 800a62e:	1cf7      	adds	r7, r6, #3
        _buffer[offset++] = 'n';
 800a630:	f803 2009 	strb.w	r2, [r3, r9]
        _buffer[offset++] = 0;
 800a634:	6863      	ldr	r3, [r4, #4]
        // format string that only stores the matched characters (%n).
        // The other reads in the actual matched values.
        //
        // We keep trying the match until we succeed or some other error
        // derails us.
        int j = 0, last_count = -1; char *last_scan = _buffer;
 800a636:	f04f 0800 	mov.w	r8, #0
        _buffer[offset++] = 0;
 800a63a:	441e      	add	r6, r3
 800a63c:	f04f 0300 	mov.w	r3, #0
 800a640:	70b3      	strb	r3, [r6, #2]
        int j = 0, last_count = -1; char *last_scan = _buffer;
 800a642:	f8d4 9004 	ldr.w	r9, [r4, #4]

        while (true) {
            // Receive next character
            int c = getc();
 800a646:	4620      	mov	r0, r4
 800a648:	f7ff ff52 	bl	800a4f0 <_ZN8ATParser5fgetcEv>
            if (c < 0) {
 800a64c:	1e03      	subs	r3, r0, #0
 800a64e:	9301      	str	r3, [sp, #4]
 800a650:	da0a      	bge.n	800a668 <_ZN8ATParser5vrecvEPKcSt9__va_list+0xb4>
                console_printf("AT response mismatch: found \"%s\"\n   expected \"%s\"\n", last_scan, _buffer);  console_flush();
 800a652:	6862      	ldr	r2, [r4, #4]
 800a654:	4649      	mov	r1, r9
 800a656:	484e      	ldr	r0, [pc, #312]	; (800a790 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x1dc>)
 800a658:	f7f9 fba8 	bl	8003dac <console_printf>
 800a65c:	f7f9 facc 	bl	8003bf8 <console_flush>
                ////asm("bkpt");
                return false;
 800a660:	2000      	movs	r0, #0
            }
        }
    }

    return true;
}
 800a662:	b009      	add	sp, #36	; 0x24
 800a664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            _buffer[offset + j] = 0;
 800a668:	f04f 0100 	mov.w	r1, #0
            for (int k = 0; k < MAX_OOBS; k++) {
 800a66c:	f04f 0a00 	mov.w	sl, #0
            _buffer[offset + j++] = c;
 800a670:	6863      	ldr	r3, [r4, #4]
 800a672:	9a01      	ldr	r2, [sp, #4]
 800a674:	f108 0601 	add.w	r6, r8, #1
 800a678:	4443      	add	r3, r8
 800a67a:	55da      	strb	r2, [r3, r7]
            _buffer[offset + j] = 0;
 800a67c:	19bb      	adds	r3, r7, r6
 800a67e:	9304      	str	r3, [sp, #16]
 800a680:	6863      	ldr	r3, [r4, #4]
 800a682:	19ba      	adds	r2, r7, r6
 800a684:	5499      	strb	r1, [r3, r2]
 800a686:	6863      	ldr	r3, [r4, #4]
 800a688:	19da      	adds	r2, r3, r7
 800a68a:	9202      	str	r2, [sp, #8]
 800a68c:	eb04 190a 	add.w	r9, r4, sl, lsl #4
                if (_oobs[k].len == 0) { continue; }  //  Skip empty callbacks.
 800a690:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800a694:	b1e2      	cbz	r2, 800a6d0 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x11c>
                if (
 800a696:	42b2      	cmp	r2, r6
 800a698:	d11a      	bne.n	800a6d0 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x11c>
 800a69a:	9305      	str	r3, [sp, #20]
                    memcmp(_oobs[k].prefix, _buffer+offset, _oobs[k].len) == 0
 800a69c:	f8d9 3020 	ldr.w	r3, [r9, #32]
 800a6a0:	4632      	mov	r2, r6
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	9902      	ldr	r1, [sp, #8]
 800a6a6:	9300      	str	r3, [sp, #0]
 800a6a8:	f7fc fc9e 	bl	8006fe8 <memcmp>
                    j == (int) _oobs[k].len && 
 800a6ac:	9b05      	ldr	r3, [sp, #20]
 800a6ae:	b978      	cbnz	r0, 800a6d0 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x11c>
                    debug_if(dbg_on, "AT! %s\r\n", _oobs[k].prefix);
 800a6b0:	9900      	ldr	r1, [sp, #0]
 800a6b2:	4838      	ldr	r0, [pc, #224]	; (800a794 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x1e0>)
 800a6b4:	f7f9 fb7a 	bl	8003dac <console_printf>
                    _oobs[k].cb(_oobs[k].arg);
 800a6b8:	e9d9 3009 	ldrd	r3, r0, [r9, #36]	; 0x24
 800a6bc:	4798      	blx	r3
                    return vrecv(response, args);
 800a6be:	9a03      	ldr	r2, [sp, #12]
 800a6c0:	4629      	mov	r1, r5
 800a6c2:	4620      	mov	r0, r4
 800a6c4:	f7ff ff76 	bl	800a5b4 <_ZN8ATParser5vrecvEPKcSt9__va_list>
 800a6c8:	e7cb      	b.n	800a662 <_ZN8ATParser5vrecvEPKcSt9__va_list+0xae>
 800a6ca:	f04f 0a01 	mov.w	sl, #1
 800a6ce:	e7dd      	b.n	800a68c <_ZN8ATParser5vrecvEPKcSt9__va_list+0xd8>
            for (int k = 0; k < MAX_OOBS; k++) {
 800a6d0:	f1ba 0f00 	cmp.w	sl, #0
 800a6d4:	d0f9      	beq.n	800a6ca <_ZN8ATParser5vrecvEPKcSt9__va_list+0x116>
            int count = -1;
 800a6d6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a6da:	aa08      	add	r2, sp, #32
 800a6dc:	f842 1d04 	str.w	r1, [r2, #-4]!
            sscanf(_buffer+offset, _buffer, &count);
 800a6e0:	9802      	ldr	r0, [sp, #8]
 800a6e2:	4619      	mov	r1, r3
 800a6e4:	f001 f9c6 	bl	800ba74 <sscanf>
            if (debug_bc95g && c == '\n' && last_scan[0] != '\n' && last_scan[0] != '\r') {
 800a6e8:	4a2b      	ldr	r2, [pc, #172]	; (800a798 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x1e4>)
            last_count = count; last_scan = _buffer + offset;
 800a6ea:	6863      	ldr	r3, [r4, #4]
            if (debug_bc95g && c == '\n' && last_scan[0] != '\n' && last_scan[0] != '\r') {
 800a6ec:	6812      	ldr	r2, [r2, #0]
            last_count = count; last_scan = _buffer + offset;
 800a6ee:	eb03 0907 	add.w	r9, r3, r7
            if (debug_bc95g && c == '\n' && last_scan[0] != '\n' && last_scan[0] != '\r') {
 800a6f2:	b172      	cbz	r2, 800a712 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x15e>
 800a6f4:	9a01      	ldr	r2, [sp, #4]
 800a6f6:	2a0a      	cmp	r2, #10
 800a6f8:	d10b      	bne.n	800a712 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x15e>
 800a6fa:	5ddb      	ldrb	r3, [r3, r7]
 800a6fc:	2b0a      	cmp	r3, #10
 800a6fe:	d008      	beq.n	800a712 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x15e>
 800a700:	2b0d      	cmp	r3, #13
 800a702:	d006      	beq.n	800a712 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x15e>
            last_count = count; last_scan = _buffer + offset;
 800a704:	9907      	ldr	r1, [sp, #28]
                if (last_count > 0) { console_printf("  < %d / %s", last_count, last_scan); }
 800a706:	2900      	cmp	r1, #0
 800a708:	dd1e      	ble.n	800a748 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x194>
 800a70a:	464a      	mov	r2, r9
 800a70c:	4823      	ldr	r0, [pc, #140]	; (800a79c <_ZN8ATParser5vrecvEPKcSt9__va_list+0x1e8>)
 800a70e:	f7f9 fb4d 	bl	8003dac <console_printf>
            if (count == j) {
 800a712:	9b07      	ldr	r3, [sp, #28]
 800a714:	f8d4 a004 	ldr.w	sl, [r4, #4]
 800a718:	42b3      	cmp	r3, r6
 800a71a:	d11a      	bne.n	800a752 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x19e>
                debug_if(dbg_on, "AT= %s\r\n", _buffer+offset);
 800a71c:	eb0a 0107 	add.w	r1, sl, r7
 800a720:	481f      	ldr	r0, [pc, #124]	; (800a7a0 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x1ec>)
 800a722:	f7f9 fb43 	bl	8003dac <console_printf>
                memcpy(_buffer, response, i);
 800a726:	4629      	mov	r1, r5
 800a728:	465a      	mov	r2, fp
 800a72a:	6860      	ldr	r0, [r4, #4]
 800a72c:	f7fc fc80 	bl	8007030 <memcpy>
                _buffer[i] = 0;
 800a730:	f04f 0200 	mov.w	r2, #0
 800a734:	6863      	ldr	r3, [r4, #4]
                response += i;
 800a736:	445d      	add	r5, fp
                _buffer[i] = 0;
 800a738:	f803 200b 	strb.w	r2, [r3, fp]
                vsscanf(_buffer+offset, _buffer, args);
 800a73c:	6861      	ldr	r1, [r4, #4]
 800a73e:	9a03      	ldr	r2, [sp, #12]
 800a740:	19c8      	adds	r0, r1, r7
 800a742:	f000 fb51 	bl	800ade8 <vsscanf>
 800a746:	e73b      	b.n	800a5c0 <_ZN8ATParser5vrecvEPKcSt9__va_list+0xc>
                else { console_printf("  < %s", last_scan); }
 800a748:	4649      	mov	r1, r9
 800a74a:	4816      	ldr	r0, [pc, #88]	; (800a7a4 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x1f0>)
 800a74c:	f7f9 fb2e 	bl	8003dac <console_printf>
 800a750:	e7df      	b.n	800a712 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x15e>
            if (j+1 >= _buffer_size - offset ||
 800a752:	68a3      	ldr	r3, [r4, #8]
 800a754:	f108 0802 	add.w	r8, r8, #2
 800a758:	1bdb      	subs	r3, r3, r7
 800a75a:	4598      	cmp	r8, r3
 800a75c:	da07      	bge.n	800a76e <_ZN8ATParser5vrecvEPKcSt9__va_list+0x1ba>
                strcmp(&_buffer[offset + j-_delim_size], _delimiter) == 0) {
 800a75e:	6960      	ldr	r0, [r4, #20]
 800a760:	9b04      	ldr	r3, [sp, #16]
 800a762:	6921      	ldr	r1, [r4, #16]
 800a764:	1a18      	subs	r0, r3, r0
 800a766:	4450      	add	r0, sl
 800a768:	f7fc fc86 	bl	8007078 <strcmp>
            if (j+1 >= _buffer_size - offset ||
 800a76c:	b958      	cbnz	r0, 800a786 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x1d2>
                if (_buffer[offset] != '\r' && _buffer[offset] != '\n') {  //  Skip blank lines.
 800a76e:	f81a 3007 	ldrb.w	r3, [sl, r7]
 800a772:	eb0a 0107 	add.w	r1, sl, r7
 800a776:	2b0d      	cmp	r3, #13
 800a778:	d004      	beq.n	800a784 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x1d0>
 800a77a:	2b0a      	cmp	r3, #10
 800a77c:	d002      	beq.n	800a784 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x1d0>
                    debug_if(dbg_on, "AT< %s", _buffer+offset);
 800a77e:	480a      	ldr	r0, [pc, #40]	; (800a7a8 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x1f4>)
 800a780:	f7f9 fb14 	bl	8003dac <console_printf>
                j = 0;
 800a784:	2600      	movs	r6, #0
        }
 800a786:	46b0      	mov	r8, r6
 800a788:	e75d      	b.n	800a646 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x92>
    return true;
 800a78a:	2001      	movs	r0, #1
 800a78c:	e769      	b.n	800a662 <_ZN8ATParser5vrecvEPKcSt9__va_list+0xae>
 800a78e:	bf00      	nop
 800a790:	0800e2f2 	.word	0x0800e2f2
 800a794:	0800e325 	.word	0x0800e325
 800a798:	200030a0 	.word	0x200030a0
 800a79c:	0800e32e 	.word	0x0800e32e
 800a7a0:	0800e341 	.word	0x0800e341
 800a7a4:	0800e33a 	.word	0x0800e33a
 800a7a8:	0800e34a 	.word	0x0800e34a

0800a7ac <_ZN8ATParser6printfEPKcz>:


// Mapping to vararg functions
int ATParser::printf(const char *format, ...)
{
 800a7ac:	b40e      	push	{r1, r2, r3}
 800a7ae:	b503      	push	{r0, r1, lr}
 800a7b0:	aa03      	add	r2, sp, #12
 800a7b2:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list args;
    va_start(args, format);
 800a7b6:	9201      	str	r2, [sp, #4]
    int res = vprintf(format, args);
 800a7b8:	f7ff febd 	bl	800a536 <_ZN8ATParser7vprintfEPKcSt9__va_list>
    va_end(args);
    return res;
}
 800a7bc:	b002      	add	sp, #8
 800a7be:	f85d eb04 	ldr.w	lr, [sp], #4
 800a7c2:	b003      	add	sp, #12
 800a7c4:	4770      	bx	lr

0800a7c6 <_ZN8ATParser4sendEPKcz>:
    va_end(args);
    return res;
}

bool ATParser::send(const char *command, ...)
{
 800a7c6:	b40e      	push	{r1, r2, r3}
 800a7c8:	b503      	push	{r0, r1, lr}
 800a7ca:	aa03      	add	r2, sp, #12
 800a7cc:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list args;
    va_start(args, command);
 800a7d0:	9201      	str	r2, [sp, #4]
    bool res = vsend(command, args);
 800a7d2:	f7ff fec7 	bl	800a564 <_ZN8ATParser5vsendEPKcSt9__va_list>
    va_end(args);
    return res;
}
 800a7d6:	b002      	add	sp, #8
 800a7d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a7dc:	b003      	add	sp, #12
 800a7de:	4770      	bx	lr

0800a7e0 <_ZN8ATParser4recvEPKcz>:

bool ATParser::recv(const char *response, ...)
{
 800a7e0:	b40e      	push	{r1, r2, r3}
 800a7e2:	b503      	push	{r0, r1, lr}
 800a7e4:	aa03      	add	r2, sp, #12
 800a7e6:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list args;
    va_start(args, response);
 800a7ea:	9201      	str	r2, [sp, #4]
    bool res = vrecv(response, args);
 800a7ec:	f7ff fee2 	bl	800a5b4 <_ZN8ATParser5vrecvEPKcSt9__va_list>
    va_end(args);
    return res;
}
 800a7f0:	b002      	add	sp, #8
 800a7f2:	f85d eb04 	ldr.w	lr, [sp], #4
 800a7f6:	b003      	add	sp, #12
 800a7f8:	4770      	bx	lr

0800a7fa <_ZL12uart_tx_donePv>:
    //  We wait 5 seconds for the current command to complete, 
    //  then trigger the next_cmd callout to switch to next command.
    int rc = os_callout_reset(&next_cmd_callout, OS_TICKS_PER_SEC * 5);
    assert(rc == 0);
#endif  //  TEST_UART
}
 800a7fa:	4770      	bx	lr

0800a7fc <_ZL12uart_rx_charPvh.part.4>:
    //  Trigger callback if no more data to send.
    if (_cbs[TxIrq]) { _cbs[TxIrq](_cbs_arg[TxIrq]); }
    return -1;
}

void BufferedSerial::prime(void)
 800a7fc:	b508      	push	{r3, lr}
{
    if (!_initialised) {
        //  Configure the UART port on first use.
        _initialised = 1;
        int rc = setup_uart(this);
        assert(rc == 0);
 800a7fe:	2300      	movs	r3, #0
 800a800:	461a      	mov	r2, r3
 800a802:	4619      	mov	r1, r3
 800a804:	4618      	mov	r0, r3
 800a806:	f7fb f885 	bl	8005914 <__assert_func>

0800a80a <_ZN14BufferedSerial4initEPcmS0_mPKc>:
{
 800a80a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _initialised = 0;
 800a80c:	2500      	movs	r5, #0
{
 800a80e:	4604      	mov	r4, r0
 800a810:	461f      	mov	r7, r3
 800a812:	9e06      	ldr	r6, [sp, #24]
    _initialised = 0;
 800a814:	f880 5028 	strb.w	r5, [r0, #40]	; 0x28
    _rxbuf_size = rxbuf_size;
 800a818:	e9c0 2608 	strd	r2, r6, [r0, #32]
    _baud = 0;
 800a81c:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
    _txbuf.init(txbuf, txbuf_size);
 800a820:	f000 f8e9 	bl	800a9f6 <_ZN8MyBufferIcE4initEPcm>
    _rxbuf.init(rxbuf, rxbuf_size);
 800a824:	4639      	mov	r1, r7
 800a826:	f104 0010 	add.w	r0, r4, #16
 800a82a:	4632      	mov	r2, r6
 800a82c:	f000 f8e3 	bl	800a9f6 <_ZN8MyBufferIcE4initEPcm>
    os_error_t rc = os_sem_init(&_rx_sem, 0);  //  Init to 0 tokens, so caller will block until data is available.
 800a830:	4629      	mov	r1, r5
 800a832:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 800a836:	f7fc f903 	bl	8006a40 <os_sem_init>
    assert(rc == OS_OK);
 800a83a:	b128      	cbz	r0, 800a848 <_ZN14BufferedSerial4initEPcmS0_mPKc+0x3e>
 800a83c:	462b      	mov	r3, r5
 800a83e:	462a      	mov	r2, r5
 800a840:	4629      	mov	r1, r5
 800a842:	4628      	mov	r0, r5
 800a844:	f7fb f866 	bl	8005914 <__assert_func>
}
 800a848:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a84a <_ZN14BufferedSerial9configureEi>:
    _uart = uart;
 800a84a:	6441      	str	r1, [r0, #68]	; 0x44
}
 800a84c:	4770      	bx	lr

0800a84e <_ZN14BufferedSerial8readableEv>:
}

template <class T>
inline uint32_t MyBuffer<T>::available(void)
{
    return (_wloc == _rloc) ? 0 : 1;
 800a84e:	6942      	ldr	r2, [r0, #20]
 800a850:	6980      	ldr	r0, [r0, #24]
}
 800a852:	1a10      	subs	r0, r2, r0
 800a854:	bf18      	it	ne
 800a856:	2001      	movne	r0, #1
 800a858:	4770      	bx	lr

0800a85a <_ZN14BufferedSerial5fgetcEi>:
{
 800a85a:	b510      	push	{r4, lr}
 800a85c:	4604      	mov	r4, r0
    os_sem_pend(&_rx_sem, timeout * OS_TICKS_PER_SEC / 1000);
 800a85e:	302c      	adds	r0, #44	; 0x2c
 800a860:	f7fc f928 	bl	8006ab4 <os_sem_pend>
 800a864:	6962      	ldr	r2, [r4, #20]
 800a866:	69a3      	ldr	r3, [r4, #24]
    if (_rxbuf.available()) { return _rxbuf.get(); }
 800a868:	429a      	cmp	r2, r3
 800a86a:	d00d      	beq.n	800a888 <_ZN14BufferedSerial5fgetcEi+0x2e>
    T data_pos = _buf[_rloc++];
 800a86c:	69a3      	ldr	r3, [r4, #24]
 800a86e:	6922      	ldr	r2, [r4, #16]
 800a870:	1c59      	adds	r1, r3, #1
 800a872:	61a1      	str	r1, [r4, #24]
 800a874:	5cd0      	ldrb	r0, [r2, r3]
    _rloc %= (_size-1);
 800a876:	69e3      	ldr	r3, [r4, #28]
 800a878:	69a1      	ldr	r1, [r4, #24]
 800a87a:	3b01      	subs	r3, #1
 800a87c:	fbb1 f2f3 	udiv	r2, r1, r3
 800a880:	fb03 1312 	mls	r3, r3, r2, r1
 800a884:	61a3      	str	r3, [r4, #24]
}
 800a886:	bd10      	pop	{r4, pc}
    return -1;
 800a888:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a88c:	e7fb      	b.n	800a886 <_ZN14BufferedSerial5fgetcEi+0x2c>

0800a88e <_ZN14BufferedSerial5txIrqEv>:
    return (_wloc == _rloc) ? 0 : 1;
 800a88e:	6842      	ldr	r2, [r0, #4]
 800a890:	6883      	ldr	r3, [r0, #8]
{
 800a892:	b510      	push	{r4, lr}
    if(_txbuf.available()) {
 800a894:	429a      	cmp	r2, r3
 800a896:	d00e      	beq.n	800a8b6 <_ZN14BufferedSerial5txIrqEv+0x28>
    T data_pos = _buf[_rloc++];
 800a898:	6883      	ldr	r3, [r0, #8]
 800a89a:	6802      	ldr	r2, [r0, #0]
 800a89c:	1c59      	adds	r1, r3, #1
 800a89e:	6081      	str	r1, [r0, #8]
 800a8a0:	5cd3      	ldrb	r3, [r2, r3]
    _rloc %= (_size-1);
 800a8a2:	68c2      	ldr	r2, [r0, #12]
 800a8a4:	6884      	ldr	r4, [r0, #8]
 800a8a6:	3a01      	subs	r2, #1
 800a8a8:	fbb4 f1f2 	udiv	r1, r4, r2
 800a8ac:	fb02 4211 	mls	r2, r2, r1, r4
 800a8b0:	6082      	str	r2, [r0, #8]
        return byte;
 800a8b2:	4618      	mov	r0, r3
}
 800a8b4:	bd10      	pop	{r4, pc}
    if (_cbs[TxIrq]) { _cbs[TxIrq](_cbs_arg[TxIrq]); }
 800a8b6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a8b8:	b10b      	cbz	r3, 800a8be <_ZN14BufferedSerial5txIrqEv+0x30>
 800a8ba:	6c00      	ldr	r0, [r0, #64]	; 0x40
 800a8bc:	4798      	blx	r3
 800a8be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a8c2:	e7f7      	b.n	800a8b4 <_ZN14BufferedSerial5txIrqEv+0x26>

0800a8c4 <_ZL12uart_tx_charPv>:
static int uart_tx_char(void *arg) {    
 800a8c4:	b508      	push	{r3, lr}
    assert(arg != NULL);
 800a8c6:	b908      	cbnz	r0, 800a8cc <_ZL12uart_tx_charPv+0x8>
 800a8c8:	f7ff ff98 	bl	800a7fc <_ZL12uart_rx_charPvh.part.4>
}
 800a8cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    int byte = serial->txIrq();
 800a8d0:	f7ff bfdd 	b.w	800a88e <_ZN14BufferedSerial5txIrqEv>

0800a8d4 <_ZN14BufferedSerial5primeEv>:
{
 800a8d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if (!_initialised) {
 800a8d6:	f890 1028 	ldrb.w	r1, [r0, #40]	; 0x28
{
 800a8da:	4604      	mov	r4, r0
    if (!_initialised) {
 800a8dc:	b141      	cbz	r1, 800a8f0 <_ZN14BufferedSerial5primeEv+0x1c>
    }
    hal_uart_start_rx(_uart);  //  Start receiving UART data.
 800a8de:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800a8e0:	f7fd ffd6 	bl	8008890 <hal_uart_start_rx>
    hal_uart_start_tx(_uart);  //  Start transmitting UART data.
 800a8e4:	6c60      	ldr	r0, [r4, #68]	; 0x44
}
 800a8e6:	b003      	add	sp, #12
 800a8e8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    hal_uart_start_tx(_uart);  //  Start transmitting UART data.
 800a8ec:	f7fd bfee 	b.w	80088cc <hal_uart_start_tx>
        _initialised = 1;
 800a8f0:	2701      	movs	r7, #1
    memset(rx_buf, 0, sizeof(rx_buf));
 800a8f2:	4b13      	ldr	r3, [pc, #76]	; (800a940 <_ZN14BufferedSerial5primeEv+0x6c>)
 800a8f4:	6c46      	ldr	r6, [r0, #68]	; 0x44
        _initialised = 1;
 800a8f6:	f880 7028 	strb.w	r7, [r0, #40]	; 0x28
    uint32_t baud = serial->_baud;
 800a8fa:	6c85      	ldr	r5, [r0, #72]	; 0x48
    memset(rx_buf, 0, sizeof(rx_buf));
 800a8fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a900:	4618      	mov	r0, r3
 800a902:	f7fc fba2 	bl	800704a <memset>
    rx_ptr = rx_buf;
 800a906:	4a0f      	ldr	r2, [pc, #60]	; (800a944 <_ZN14BufferedSerial5primeEv+0x70>)
    rc = hal_uart_init_cbs(uart,
 800a908:	4b0f      	ldr	r3, [pc, #60]	; (800a948 <_ZN14BufferedSerial5primeEv+0x74>)
    rx_ptr = rx_buf;
 800a90a:	6010      	str	r0, [r2, #0]
    rc = hal_uart_init_cbs(uart,
 800a90c:	490f      	ldr	r1, [pc, #60]	; (800a94c <_ZN14BufferedSerial5primeEv+0x78>)
 800a90e:	9400      	str	r4, [sp, #0]
 800a910:	4a0f      	ldr	r2, [pc, #60]	; (800a950 <_ZN14BufferedSerial5primeEv+0x7c>)
 800a912:	4630      	mov	r0, r6
 800a914:	f7fd ffa6 	bl	8008864 <hal_uart_init_cbs>
    if (rc != 0) { return rc; }
 800a918:	b978      	cbnz	r0, 800a93a <_ZN14BufferedSerial5primeEv+0x66>
    assert(baud != 0);
 800a91a:	b925      	cbnz	r5, 800a926 <_ZN14BufferedSerial5primeEv+0x52>
 800a91c:	462b      	mov	r3, r5
 800a91e:	462a      	mov	r2, r5
 800a920:	4629      	mov	r1, r5
 800a922:	f7fa fff7 	bl	8005914 <__assert_func>
    rc = hal_uart_config(uart,
 800a926:	e9cd 0000 	strd	r0, r0, [sp]
 800a92a:	463b      	mov	r3, r7
 800a92c:	2208      	movs	r2, #8
 800a92e:	4629      	mov	r1, r5
 800a930:	4630      	mov	r0, r6
 800a932:	f7fd fff9 	bl	8008928 <hal_uart_config>
    if (rc != 0) { return rc; }
 800a936:	2800      	cmp	r0, #0
 800a938:	d0d1      	beq.n	800a8de <_ZN14BufferedSerial5primeEv+0xa>
 800a93a:	f7ff ff5f 	bl	800a7fc <_ZL12uart_rx_charPvh.part.4>
 800a93e:	bf00      	nop
 800a940:	200030a4 	.word	0x200030a4
 800a944:	200031a4 	.word	0x200031a4
 800a948:	0800a9bd 	.word	0x0800a9bd
 800a94c:	0800a8c5 	.word	0x0800a8c5
 800a950:	0800a7fb 	.word	0x0800a7fb

0800a954 <_ZN14BufferedSerial6attachEPFvPvES0_i>:

void BufferedSerial::attach(void (*func)(void *), void *arg, IrqType type)
{
 800a954:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    _cbs[type] = func;
 800a958:	6359      	str	r1, [r3, #52]	; 0x34
    _cbs_arg[type] = arg;
 800a95a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800a95c:	4770      	bx	lr

0800a95e <_ZN14BufferedSerial4baudEm>:

void BufferedSerial::baud(uint32_t baud0)
{
    _baud = baud0;
 800a95e:	6481      	str	r1, [r0, #72]	; 0x48
}
 800a960:	4770      	bx	lr

0800a962 <_ZN8MyBufferIcE3putEc>:
    _buf[_wloc++] = data;
 800a962:	6843      	ldr	r3, [r0, #4]
 800a964:	6802      	ldr	r2, [r0, #0]
inline void MyBuffer<T>::put(T data)
 800a966:	b510      	push	{r4, lr}
    _buf[_wloc++] = data;
 800a968:	1c5c      	adds	r4, r3, #1
 800a96a:	6044      	str	r4, [r0, #4]
 800a96c:	54d1      	strb	r1, [r2, r3]
    _wloc %= (_size-1);
 800a96e:	68c3      	ldr	r3, [r0, #12]
 800a970:	6841      	ldr	r1, [r0, #4]
 800a972:	3b01      	subs	r3, #1
 800a974:	fbb1 f2f3 	udiv	r2, r1, r3
 800a978:	fb03 1312 	mls	r3, r3, r2, r1
 800a97c:	6043      	str	r3, [r0, #4]
}
 800a97e:	bd10      	pop	{r4, pc}

0800a980 <_ZN14BufferedSerial4putcEi>:
{
 800a980:	b538      	push	{r3, r4, r5, lr}
 800a982:	4605      	mov	r5, r0
 800a984:	460c      	mov	r4, r1
    _txbuf.put(c);
 800a986:	b2c9      	uxtb	r1, r1
 800a988:	f7ff ffeb 	bl	800a962 <_ZN8MyBufferIcE3putEc>
    BufferedSerial::prime();
 800a98c:	4628      	mov	r0, r5
 800a98e:	f7ff ffa1 	bl	800a8d4 <_ZN14BufferedSerial5primeEv>
}
 800a992:	4620      	mov	r0, r4
 800a994:	bd38      	pop	{r3, r4, r5, pc}

0800a996 <_ZN14BufferedSerial5rxIrqEh>:
{
 800a996:	b510      	push	{r4, lr}
 800a998:	4604      	mov	r4, r0
    _rxbuf.put(byte);  //  Add to TX buffer.
 800a99a:	3010      	adds	r0, #16
 800a99c:	f7ff ffe1 	bl	800a962 <_ZN8MyBufferIcE3putEc>
    os_error_t rc = os_sem_release(&_rx_sem);  //  Signal to semaphore that data is available.
 800a9a0:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 800a9a4:	f7fc f854 	bl	8006a50 <os_sem_release>
    assert(rc == OS_OK);
 800a9a8:	b108      	cbz	r0, 800a9ae <_ZN14BufferedSerial5rxIrqEh+0x18>
 800a9aa:	f7ff ff27 	bl	800a7fc <_ZL12uart_rx_charPvh.part.4>
    if (_cbs[RxIrq]) { _cbs[RxIrq](_cbs_arg[RxIrq]); }
 800a9ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a9b0:	b10b      	cbz	r3, 800a9b6 <_ZN14BufferedSerial5rxIrqEh+0x20>
 800a9b2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800a9b4:	4798      	blx	r3
}
 800a9b6:	2000      	movs	r0, #0
 800a9b8:	bd10      	pop	{r4, pc}
	...

0800a9bc <_ZL12uart_rx_charPvh>:
static int uart_rx_char(void *arg, uint8_t byte) {
 800a9bc:	b510      	push	{r4, lr}
    if (rx_ptr - rx_buf < (int) sizeof(rx_buf)) { *rx_ptr++ = byte; }  //  Save to rx buffer.
 800a9be:	4c08      	ldr	r4, [pc, #32]	; (800a9e0 <_ZL12uart_rx_charPvh+0x24>)
 800a9c0:	4a08      	ldr	r2, [pc, #32]	; (800a9e4 <_ZL12uart_rx_charPvh+0x28>)
 800a9c2:	6823      	ldr	r3, [r4, #0]
 800a9c4:	1a9a      	subs	r2, r3, r2
 800a9c6:	2aff      	cmp	r2, #255	; 0xff
 800a9c8:	bfde      	ittt	le
 800a9ca:	1c5a      	addle	r2, r3, #1
 800a9cc:	6022      	strle	r2, [r4, #0]
 800a9ce:	7019      	strble	r1, [r3, #0]
    assert(arg != NULL);
 800a9d0:	b908      	cbnz	r0, 800a9d6 <_ZL12uart_rx_charPvh+0x1a>
 800a9d2:	f7ff ff13 	bl	800a7fc <_ZL12uart_rx_charPvh.part.4>
}
 800a9d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    int rc = serial->rxIrq(byte);
 800a9da:	f7ff bfdc 	b.w	800a996 <_ZN14BufferedSerial5rxIrqEh>
 800a9de:	bf00      	nop
 800a9e0:	200031a4 	.word	0x200031a4
 800a9e4:	200030a4 	.word	0x200030a4

0800a9e8 <_ZN8MyBufferIcE5clearEv>:
}

template <class T>
void MyBuffer<T>::clear(void)
{
    _wloc = 0;
 800a9e8:	2100      	movs	r1, #0
    _rloc = 0;
    memset(_buf, 0, _size);
 800a9ea:	68c2      	ldr	r2, [r0, #12]
    _wloc = 0;
 800a9ec:	6041      	str	r1, [r0, #4]
    _rloc = 0;
 800a9ee:	6081      	str	r1, [r0, #8]
    memset(_buf, 0, _size);
 800a9f0:	6800      	ldr	r0, [r0, #0]
 800a9f2:	f7fc bb2a 	b.w	800704a <memset>

0800a9f6 <_ZN8MyBufferIcE4initEPcm>:
void MyBuffer<T>::init(T *buffer, uint32_t size)
 800a9f6:	b508      	push	{r3, lr}
    _buf = buffer;
 800a9f8:	6001      	str	r1, [r0, #0]
    _size = size;
 800a9fa:	60c2      	str	r2, [r0, #12]
    clear();    
 800a9fc:	f7ff fff4 	bl	800a9e8 <_ZN8MyBufferIcE5clearEv>
}
 800aa00:	bd08      	pop	{r3, pc}
	...

0800aa04 <temp_stm32_create>:
    os_dev_close(dev);
    return rc;
}

//  Create the device instance and configure it. Called by sysinit() during startup, defined in pkg.yml.
void DEVICE_CREATE(void) {
 800aa04:	b530      	push	{r4, r5, lr}
    console_printf("TMP create %s\n", DEVICE_NAME);
 800aa06:	4918      	ldr	r1, [pc, #96]	; (800aa68 <temp_stm32_create+0x64>)
void DEVICE_CREATE(void) {
 800aa08:	b089      	sub	sp, #36	; 0x24
    console_printf("TMP create %s\n", DEVICE_NAME);
 800aa0a:	4818      	ldr	r0, [pc, #96]	; (800aa6c <temp_stm32_create+0x68>)
 800aa0c:	f7f9 f9ce 	bl	8003dac <console_printf>

    //  Create the device.
    int rc = os_dev_create((struct os_dev *) &DEVICE_INSTANCE, DEVICE_NAME,
 800aa10:	4b17      	ldr	r3, [pc, #92]	; (800aa70 <temp_stm32_create+0x6c>)
 800aa12:	2201      	movs	r2, #1
 800aa14:	9301      	str	r3, [sp, #4]
 800aa16:	4b17      	ldr	r3, [pc, #92]	; (800aa74 <temp_stm32_create+0x70>)
 800aa18:	4913      	ldr	r1, [pc, #76]	; (800aa68 <temp_stm32_create+0x64>)
 800aa1a:	9300      	str	r3, [sp, #0]
 800aa1c:	4816      	ldr	r0, [pc, #88]	; (800aa78 <temp_stm32_create+0x74>)
 800aa1e:	2300      	movs	r3, #0
 800aa20:	f7fb f998 	bl	8005d54 <os_dev_create>
        OS_DEV_INIT_PRIMARY, 0, 
        DEVICE_INIT, (void *) &DEVICE_ITF);
    assert(rc == 0);
 800aa24:	4602      	mov	r2, r0
 800aa26:	b128      	cbz	r0, 800aa34 <temp_stm32_create+0x30>
 800aa28:	2300      	movs	r3, #0
 800aa2a:	461a      	mov	r2, r3
 800aa2c:	4619      	mov	r1, r3
 800aa2e:	4618      	mov	r0, r3
 800aa30:	f7fa ff70 	bl	8005914 <__assert_func>
    dev = (struct os_dev *) os_dev_open(DEVICE_NAME, OS_TIMEOUT_NEVER, NULL);
 800aa34:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800aa38:	480b      	ldr	r0, [pc, #44]	; (800aa68 <temp_stm32_create+0x64>)
 800aa3a:	f7fb f9f5 	bl	8005e28 <os_dev_open>
    assert(dev != NULL);
 800aa3e:	4604      	mov	r4, r0
 800aa40:	2800      	cmp	r0, #0
 800aa42:	d0f1      	beq.n	800aa28 <temp_stm32_create+0x24>
    rc = DEVICE_CFG_DEFAULT(&cfg);
 800aa44:	a802      	add	r0, sp, #8
 800aa46:	f7fc ff37 	bl	80078b8 <temp_stm32_default_cfg>
    assert(rc == 0);
 800aa4a:	2800      	cmp	r0, #0
 800aa4c:	d1ec      	bne.n	800aa28 <temp_stm32_create+0x24>
    rc = DEVICE_CFG_FUNC((struct DEVICE_DEV *)dev, &cfg);
 800aa4e:	a902      	add	r1, sp, #8
 800aa50:	4620      	mov	r0, r4
 800aa52:	f7fd f803 	bl	8007a5c <temp_stm32_config>
 800aa56:	4605      	mov	r5, r0
    os_dev_close(dev);
 800aa58:	4620      	mov	r0, r4
 800aa5a:	f7fb fa06 	bl	8005e6a <os_dev_close>

    //  Configure the device.
    rc = config_device();
    assert(rc == 0);
 800aa5e:	2d00      	cmp	r5, #0
 800aa60:	d1e2      	bne.n	800aa28 <temp_stm32_create+0x24>
}
 800aa62:	b009      	add	sp, #36	; 0x24
 800aa64:	bd30      	pop	{r4, r5, pc}
 800aa66:	bf00      	nop
 800aa68:	0800dea8 	.word	0x0800dea8
 800aa6c:	0800e35a 	.word	0x0800e35a
 800aa70:	200031a8 	.word	0x200031a8
 800aa74:	080078e5 	.word	0x080078e5
 800aa78:	200031c0 	.word	0x200031c0

0800aa7c <oc_register_gatt>:
oc_register_gatt(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_GATT) == 1)
    oc_gatt_transport_id = oc_transport_register(&oc_gatt_transport);
#endif
}
 800aa7c:	4770      	bx	lr

0800aa7e <oc_register_ip4>:
oc_register_ip4(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_IP) == 1) && (MYNEWT_VAL(OC_TRANSPORT_IPV4) == 1)
    oc_ip4_transport_id = oc_transport_register(&oc_ip4_transport);
#endif
}
 800aa7e:	4770      	bx	lr

0800aa80 <oc_register_ip6>:
oc_register_ip6(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_IP) == 1) && (MYNEWT_VAL(OC_TRANSPORT_IPV6) == 1)
    oc_ip6_transport_id = oc_transport_register(&oc_ip6_transport);
#endif
}
 800aa80:	4770      	bx	lr

0800aa82 <oc_register_lora>:
oc_register_lora(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_LORA) == 1)
    oc_lora_transport_id = oc_transport_register(&oc_lora_transport);
#endif
}
 800aa82:	4770      	bx	lr

0800aa84 <oc_register_serial>:
oc_register_serial(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_SERIAL) == 1)
    oc_serial_transport_id = oc_transport_register(&oc_serial_transport);
#endif
}
 800aa84:	4770      	bx	lr
	...

0800aa88 <flash_area_open>:
flash_area_open(uint8_t id, const struct flash_area **fap)
{
    const struct flash_area *area;
    int i;

    if (flash_map == NULL) {
 800aa88:	4b0c      	ldr	r3, [pc, #48]	; (800aabc <flash_area_open+0x34>)
{
 800aa8a:	b570      	push	{r4, r5, r6, lr}
    if (flash_map == NULL) {
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	b18b      	cbz	r3, 800aab4 <flash_area_open+0x2c>
        return SYS_EACCES;
    }

    for (i = 0; i < flash_map_entries; i++) {
 800aa90:	4a0b      	ldr	r2, [pc, #44]	; (800aac0 <flash_area_open+0x38>)
 800aa92:	6814      	ldr	r4, [r2, #0]
 800aa94:	2200      	movs	r2, #0
 800aa96:	4294      	cmp	r4, r2
 800aa98:	dc02      	bgt.n	800aaa0 <flash_area_open+0x18>
            *fap = area;
            return 0;
        }
    }

    return SYS_ENOENT;
 800aa9a:	f06f 0003 	mvn.w	r0, #3
 800aa9e:	e006      	b.n	800aaae <flash_area_open+0x26>
        area = flash_map + i;
 800aaa0:	461d      	mov	r5, r3
        if (area->fa_id == id) {
 800aaa2:	f813 6b0c 	ldrb.w	r6, [r3], #12
 800aaa6:	4286      	cmp	r6, r0
 800aaa8:	d102      	bne.n	800aab0 <flash_area_open+0x28>
            return 0;
 800aaaa:	2000      	movs	r0, #0
            *fap = area;
 800aaac:	600d      	str	r5, [r1, #0]
}
 800aaae:	bd70      	pop	{r4, r5, r6, pc}
    for (i = 0; i < flash_map_entries; i++) {
 800aab0:	3201      	adds	r2, #1
 800aab2:	e7f0      	b.n	800aa96 <flash_area_open+0xe>
        return SYS_EACCES;
 800aab4:	f06f 0006 	mvn.w	r0, #6
 800aab8:	e7f9      	b.n	800aaae <flash_area_open+0x26>
 800aaba:	bf00      	nop
 800aabc:	20003538 	.word	0x20003538
 800aac0:	2000353c 	.word	0x2000353c

0800aac4 <flash_area_read>:
}

int
flash_area_read(const struct flash_area *fa, uint32_t off, void *dst,
    uint32_t len)
{
 800aac4:	b430      	push	{r4, r5}
    if (off > fa->fa_size || off + len > fa->fa_size) {
 800aac6:	6885      	ldr	r5, [r0, #8]
{
 800aac8:	461c      	mov	r4, r3
    if (off > fa->fa_size || off + len > fa->fa_size) {
 800aaca:	428d      	cmp	r5, r1
 800aacc:	d308      	bcc.n	800aae0 <flash_area_read+0x1c>
 800aace:	440c      	add	r4, r1
 800aad0:	42a5      	cmp	r5, r4
 800aad2:	d305      	bcc.n	800aae0 <flash_area_read+0x1c>
        return -1;
    }
    return hal_flash_read(fa->fa_device_id, fa->fa_off + off, dst, len);
 800aad4:	6844      	ldr	r4, [r0, #4]
 800aad6:	7840      	ldrb	r0, [r0, #1]
 800aad8:	4421      	add	r1, r4
}
 800aada:	bc30      	pop	{r4, r5}
    return hal_flash_read(fa->fa_device_id, fa->fa_off + off, dst, len);
 800aadc:	f000 bb8c 	b.w	800b1f8 <hal_flash_read>
}
 800aae0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aae4:	bc30      	pop	{r4, r5}
 800aae6:	4770      	bx	lr

0800aae8 <flash_map_init>:
    }
}

void
flash_map_init(void)
{
 800aae8:	b5f0      	push	{r4, r5, r6, r7, lr}

    int num_areas;
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
 800aaea:	4b24      	ldr	r3, [pc, #144]	; (800ab7c <flash_map_init+0x94>)
{
 800aaec:	b089      	sub	sp, #36	; 0x24
    SYSINIT_ASSERT_ACTIVE();
 800aaee:	781b      	ldrb	r3, [r3, #0]
 800aaf0:	b923      	cbnz	r3, 800aafc <flash_map_init+0x14>
 800aaf2:	461a      	mov	r2, r3
 800aaf4:	4619      	mov	r1, r3
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	f7fa ff0c 	bl	8005914 <__assert_func>

    rc = hal_flash_init();
 800aafc:	f000 fb6a 	bl	800b1d4 <hal_flash_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
 800ab00:	b138      	cbz	r0, 800ab12 <flash_map_init+0x2a>
 800ab02:	2300      	movs	r3, #0
 800ab04:	4a1e      	ldr	r2, [pc, #120]	; (800ab80 <flash_map_init+0x98>)
 800ab06:	9300      	str	r3, [sp, #0]
 800ab08:	6814      	ldr	r4, [r2, #0]
 800ab0a:	4619      	mov	r1, r3
 800ab0c:	461a      	mov	r2, r3
 800ab0e:	4618      	mov	r0, r3
 800ab10:	47a0      	blx	r4
     *    In particular, a FLASH_AREA_BOOTLOADER entry is required for the boot
     *    MMR, as well as an entry for each extended MMR.
     * 2. If we fail to read the flash map from the MMRs, the system continues
     *    to use the default flash map.
     */
    flash_map = sysflash_map_dflt;
 800ab12:	4b1c      	ldr	r3, [pc, #112]	; (800ab84 <flash_map_init+0x9c>)
 800ab14:	4e1c      	ldr	r6, [pc, #112]	; (800ab88 <flash_map_init+0xa0>)
    flash_map_entries = sizeof sysflash_map_dflt / sizeof sysflash_map_dflt[0];
 800ab16:	4f1d      	ldr	r7, [pc, #116]	; (800ab8c <flash_map_init+0xa4>)
    flash_map = sysflash_map_dflt;
 800ab18:	6033      	str	r3, [r6, #0]
    flash_map_entries = sizeof sysflash_map_dflt / sizeof sysflash_map_dflt[0];
 800ab1a:	2306      	movs	r3, #6
 800ab1c:	603b      	str	r3, [r7, #0]
    mfg_init();
 800ab1e:	f000 f911 	bl	800ad44 <mfg_init>
    mfg_open(&reader);
 800ab22:	a803      	add	r0, sp, #12
 800ab24:	f000 f93c 	bl	800ada0 <mfg_open>
    *out_num_areas = 0;
 800ab28:	2400      	movs	r4, #0
        fap->fa_id = meta_flash_area.area_id;
 800ab2a:	4d19      	ldr	r5, [pc, #100]	; (800ab90 <flash_map_init+0xa8>)
        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_FLASH_AREA);
 800ab2c:	2102      	movs	r1, #2
 800ab2e:	a803      	add	r0, sp, #12
 800ab30:	f000 f8f6 	bl	800ad20 <mfg_seek_next_with_type>
        switch (rc) {
 800ab34:	f110 0f0f 	cmn.w	r0, #15
 800ab38:	d019      	beq.n	800ab6e <flash_map_init+0x86>
 800ab3a:	b9b0      	cbnz	r0, 800ab6a <flash_map_init+0x82>
        rc = mfg_read_tlv_flash_area(&reader, &meta_flash_area);
 800ab3c:	a905      	add	r1, sp, #20
 800ab3e:	a803      	add	r0, sp, #12
 800ab40:	f000 f8f9 	bl	800ad36 <mfg_read_tlv_flash_area>
        if (rc != 0) {
 800ab44:	b988      	cbnz	r0, 800ab6a <flash_map_init+0x82>
 800ab46:	230c      	movs	r3, #12
 800ab48:	4363      	muls	r3, r4
        fap->fa_id = meta_flash_area.area_id;
 800ab4a:	f89d 2014 	ldrb.w	r2, [sp, #20]
        (*out_num_areas)++;
 800ab4e:	3401      	adds	r4, #1
        fap->fa_id = meta_flash_area.area_id;
 800ab50:	555a      	strb	r2, [r3, r5]
        fap->fa_device_id = meta_flash_area.device_id;
 800ab52:	f89d 2015 	ldrb.w	r2, [sp, #21]
 800ab56:	442b      	add	r3, r5
 800ab58:	705a      	strb	r2, [r3, #1]
        fap->fa_off = meta_flash_area.offset;
 800ab5a:	f8dd 2016 	ldr.w	r2, [sp, #22]
        if (*out_num_areas >= max_areas) {
 800ab5e:	2c0a      	cmp	r4, #10
        fap->fa_off = meta_flash_area.offset;
 800ab60:	605a      	str	r2, [r3, #4]
        fap->fa_size = meta_flash_area.size;
 800ab62:	f8dd 201a 	ldr.w	r2, [sp, #26]
 800ab66:	609a      	str	r2, [r3, #8]
        if (*out_num_areas >= max_areas) {
 800ab68:	d1e0      	bne.n	800ab2c <flash_map_init+0x44>
                            mfg_areas, &num_areas);
    if (rc == 0 && num_areas > 0) {
        flash_map = mfg_areas;
        flash_map_entries = num_areas;
    }
}
 800ab6a:	b009      	add	sp, #36	; 0x24
 800ab6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (rc == 0 && num_areas > 0) {
 800ab6e:	2c00      	cmp	r4, #0
 800ab70:	d0fb      	beq.n	800ab6a <flash_map_init+0x82>
        flash_map = mfg_areas;
 800ab72:	4b07      	ldr	r3, [pc, #28]	; (800ab90 <flash_map_init+0xa8>)
        flash_map_entries = num_areas;
 800ab74:	603c      	str	r4, [r7, #0]
        flash_map = mfg_areas;
 800ab76:	6033      	str	r3, [r6, #0]
}
 800ab78:	e7f7      	b.n	800ab6a <flash_map_init+0x82>
 800ab7a:	bf00      	nop
 800ab7c:	200033f0 	.word	0x200033f0
 800ab80:	20000148 	.word	0x20000148
 800ab84:	0800e36c 	.word	0x0800e36c
 800ab88:	20003538 	.word	0x20003538
 800ab8c:	2000353c 	.word	0x2000353c
 800ab90:	20003290 	.word	0x20003290

0800ab94 <modlog_init>:

#else /* LOG_FULL */

void
modlog_init(void)
{ }
 800ab94:	4770      	bx	lr
	...

0800ab98 <mfg_read_next_mmr>:
 * Reads an MMR from the end of the specified flash area.  On success, the
 * global MMR list is populated with the result for subsequent reading.
 */
static int
mfg_read_next_mmr(uint8_t area_id)
{
 800ab98:	b5f0      	push	{r4, r5, r6, r7, lr}
    int rc;
    int i;

    /* Detect if this MMR has already been read. */
    for (i = 0; i < mfg_num_mmrs; i++) {
 800ab9a:	2300      	movs	r3, #0
{
 800ab9c:	4605      	mov	r5, r0
        if (mfg_mmrs[i].area_id == area_id) {
 800ab9e:	210c      	movs	r1, #12
    for (i = 0; i < mfg_num_mmrs; i++) {
 800aba0:	4c23      	ldr	r4, [pc, #140]	; (800ac30 <mfg_read_next_mmr+0x98>)
        if (mfg_mmrs[i].area_id == area_id) {
 800aba2:	4a24      	ldr	r2, [pc, #144]	; (800ac34 <mfg_read_next_mmr+0x9c>)
    for (i = 0; i < mfg_num_mmrs; i++) {
 800aba4:	6826      	ldr	r6, [r4, #0]
{
 800aba6:	b085      	sub	sp, #20
    for (i = 0; i < mfg_num_mmrs; i++) {
 800aba8:	429e      	cmp	r6, r3
 800abaa:	dc0a      	bgt.n	800abc2 <mfg_read_next_mmr+0x2a>
            return SYS_EALREADY;
        }
    }

    if (mfg_num_mmrs >= MYNEWT_VAL(MFG_MAX_MMRS)) {
 800abac:	2e02      	cmp	r6, #2
 800abae:	d03c      	beq.n	800ac2a <mfg_read_next_mmr+0x92>
    rc = flash_area_open(area_id, &fap);
 800abb0:	a901      	add	r1, sp, #4
 800abb2:	4628      	mov	r0, r5
 800abb4:	f7ff ff68 	bl	800aa88 <flash_area_open>
    if (rc != 0) {
 800abb8:	b150      	cbz	r0, 800abd0 <mfg_read_next_mmr+0x38>
        return SYS_EIO;
 800abba:	f06f 0004 	mvn.w	r0, #4
        return rc;
    }

    mfg_num_mmrs++;
    return 0;
}
 800abbe:	b005      	add	sp, #20
 800abc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (mfg_mmrs[i].area_id == area_id) {
 800abc2:	fb01 f003 	mul.w	r0, r1, r3
 800abc6:	5c80      	ldrb	r0, [r0, r2]
 800abc8:	42a8      	cmp	r0, r5
 800abca:	d02b      	beq.n	800ac24 <mfg_read_next_mmr+0x8c>
    for (i = 0; i < mfg_num_mmrs; i++) {
 800abcc:	3301      	adds	r3, #1
 800abce:	e7eb      	b.n	800aba8 <mfg_read_next_mmr+0x10>
    rc = flash_area_read(fap, fap->fa_size - sizeof ftr, &ftr, sizeof ftr);
 800abd0:	2308      	movs	r3, #8
 800abd2:	9801      	ldr	r0, [sp, #4]
 800abd4:	eb0d 0203 	add.w	r2, sp, r3
 800abd8:	6881      	ldr	r1, [r0, #8]
 800abda:	3908      	subs	r1, #8
 800abdc:	f7ff ff72 	bl	800aac4 <flash_area_read>
    if (rc != 0) {
 800abe0:	2800      	cmp	r0, #0
 800abe2:	d1ea      	bne.n	800abba <mfg_read_next_mmr+0x22>
    if (ftr.magic != MFG_META_MAGIC) {
 800abe4:	4b14      	ldr	r3, [pc, #80]	; (800ac38 <mfg_read_next_mmr+0xa0>)
 800abe6:	9a03      	ldr	r2, [sp, #12]
 800abe8:	429a      	cmp	r2, r3
 800abea:	d115      	bne.n	800ac18 <mfg_read_next_mmr+0x80>
    if (ftr.version != MFG_META_VERSION) {
 800abec:	f89d 300a 	ldrb.w	r3, [sp, #10]
 800abf0:	2b02      	cmp	r3, #2
 800abf2:	d114      	bne.n	800ac1e <mfg_read_next_mmr+0x86>
    if (ftr.size > fap->fa_size) {
 800abf4:	9b01      	ldr	r3, [sp, #4]
 800abf6:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 800abfa:	689b      	ldr	r3, [r3, #8]
 800abfc:	4299      	cmp	r1, r3
 800abfe:	d80b      	bhi.n	800ac18 <mfg_read_next_mmr+0x80>
    *out_mmr = (struct mfg_mmr) {
 800ac00:	220c      	movs	r2, #12
 800ac02:	4372      	muls	r2, r6
 800ac04:	4f0b      	ldr	r7, [pc, #44]	; (800ac34 <mfg_read_next_mmr+0x9c>)
        .offset = fap->fa_size - ftr.size,
 800ac06:	1a5b      	subs	r3, r3, r1
    *out_mmr = (struct mfg_mmr) {
 800ac08:	18be      	adds	r6, r7, r2
 800ac0a:	e9c6 3101 	strd	r3, r1, [r6, #4]
    mfg_num_mmrs++;
 800ac0e:	6823      	ldr	r3, [r4, #0]
    *out_mmr = (struct mfg_mmr) {
 800ac10:	54bd      	strb	r5, [r7, r2]
    mfg_num_mmrs++;
 800ac12:	3301      	adds	r3, #1
 800ac14:	6023      	str	r3, [r4, #0]
 800ac16:	e7d2      	b.n	800abbe <mfg_read_next_mmr+0x26>
        return SYS_ENODEV;
 800ac18:	f06f 0008 	mvn.w	r0, #8
 800ac1c:	e7cf      	b.n	800abbe <mfg_read_next_mmr+0x26>
        return SYS_ENOTSUP;
 800ac1e:	f06f 000b 	mvn.w	r0, #11
 800ac22:	e7cc      	b.n	800abbe <mfg_read_next_mmr+0x26>
            return SYS_EALREADY;
 800ac24:	f06f 000a 	mvn.w	r0, #10
 800ac28:	e7c9      	b.n	800abbe <mfg_read_next_mmr+0x26>
        return SYS_ENOMEM;
 800ac2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ac2e:	e7c6      	b.n	800abbe <mfg_read_next_mmr+0x26>
 800ac30:	20003324 	.word	0x20003324
 800ac34:	2000330c 	.word	0x2000330c
 800ac38:	3bb2a269 	.word	0x3bb2a269

0800ac3c <mfg_read_tlv_body>:
{
 800ac3c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    assert(reader->mmr_idx < mfg_num_mmrs);
 800ac3e:	4b16      	ldr	r3, [pc, #88]	; (800ac98 <mfg_read_tlv_body+0x5c>)
{
 800ac40:	4616      	mov	r6, r2
    assert(reader->mmr_idx < mfg_num_mmrs);
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	7882      	ldrb	r2, [r0, #2]
{
 800ac46:	4604      	mov	r4, r0
    assert(reader->mmr_idx < mfg_num_mmrs);
 800ac48:	429a      	cmp	r2, r3
{
 800ac4a:	460d      	mov	r5, r1
    assert(reader->mmr_idx < mfg_num_mmrs);
 800ac4c:	db05      	blt.n	800ac5a <mfg_read_tlv_body+0x1e>
 800ac4e:	2300      	movs	r3, #0
 800ac50:	461a      	mov	r2, r3
 800ac52:	4619      	mov	r1, r3
 800ac54:	4618      	mov	r0, r3
 800ac56:	f7fa fe5d 	bl	8005914 <__assert_func>
    rc = flash_area_open(mmr->area_id, fap);
 800ac5a:	230c      	movs	r3, #12
 800ac5c:	4353      	muls	r3, r2
 800ac5e:	4a0f      	ldr	r2, [pc, #60]	; (800ac9c <mfg_read_tlv_body+0x60>)
 800ac60:	a901      	add	r1, sp, #4
 800ac62:	5cd0      	ldrb	r0, [r2, r3]
 800ac64:	f7ff ff10 	bl	800aa88 <flash_area_open>
    if (rc != 0) {
 800ac68:	4601      	mov	r1, r0
 800ac6a:	b118      	cbz	r0, 800ac74 <mfg_read_tlv_body+0x38>
        return SYS_EIO;
 800ac6c:	f06f 0004 	mvn.w	r0, #4
}
 800ac70:	b002      	add	sp, #8
 800ac72:	bd70      	pop	{r4, r5, r6, pc}
    memset(dst, 0, max_size);
 800ac74:	4632      	mov	r2, r6
 800ac76:	4628      	mov	r0, r5
 800ac78:	f7fc f9e7 	bl	800704a <memset>
    read_sz = min(max_size, reader->cur_tlv.size);
 800ac7c:	7863      	ldrb	r3, [r4, #1]
    rc = flash_area_read(fap, reader->offset + MFG_META_TLV_SZ, dst, read_sz);
 800ac7e:	6861      	ldr	r1, [r4, #4]
 800ac80:	42b3      	cmp	r3, r6
 800ac82:	bfa8      	it	ge
 800ac84:	4633      	movge	r3, r6
 800ac86:	462a      	mov	r2, r5
 800ac88:	3102      	adds	r1, #2
 800ac8a:	9801      	ldr	r0, [sp, #4]
 800ac8c:	f7ff ff1a 	bl	800aac4 <flash_area_read>
    if (rc != 0) {
 800ac90:	2800      	cmp	r0, #0
 800ac92:	d0ed      	beq.n	800ac70 <mfg_read_tlv_body+0x34>
 800ac94:	e7ea      	b.n	800ac6c <mfg_read_tlv_body+0x30>
 800ac96:	bf00      	nop
 800ac98:	20003324 	.word	0x20003324
 800ac9c:	2000330c 	.word	0x2000330c

0800aca0 <mfg_seek_next>:
{
 800aca0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    if (reader->mmr_idx >= mfg_num_mmrs) {
 800aca4:	4d1c      	ldr	r5, [pc, #112]	; (800ad18 <mfg_seek_next+0x78>)
{
 800aca6:	4604      	mov	r4, r0
 800aca8:	462f      	mov	r7, r5
    rc = flash_area_open(mmr->area_id, &fap);
 800acaa:	4e1c      	ldr	r6, [pc, #112]	; (800ad1c <mfg_seek_next+0x7c>)
    if (reader->mmr_idx >= mfg_num_mmrs) {
 800acac:	78a2      	ldrb	r2, [r4, #2]
 800acae:	682b      	ldr	r3, [r5, #0]
 800acb0:	429a      	cmp	r2, r3
 800acb2:	db04      	blt.n	800acbe <mfg_seek_next+0x1e>
        return SYS_EINVAL;
 800acb4:	f06f 0001 	mvn.w	r0, #1
}
 800acb8:	b002      	add	sp, #8
 800acba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    rc = flash_area_open(mmr->area_id, &fap);
 800acbe:	230c      	movs	r3, #12
 800acc0:	4353      	muls	r3, r2
 800acc2:	a901      	add	r1, sp, #4
 800acc4:	5cf0      	ldrb	r0, [r6, r3]
 800acc6:	eb06 0803 	add.w	r8, r6, r3
 800acca:	f7ff fedd 	bl	800aa88 <flash_area_open>
    if (rc != 0) {
 800acce:	b9e8      	cbnz	r0, 800ad0c <mfg_seek_next+0x6c>
    if (reader->offset == 0) {
 800acd0:	6863      	ldr	r3, [r4, #4]
 800acd2:	b98b      	cbnz	r3, 800acf8 <mfg_seek_next+0x58>
        reader->offset = mmr->offset;
 800acd4:	f8d8 3004 	ldr.w	r3, [r8, #4]
    if (reader->offset >= fap->fa_size - MFG_META_FOOTER_SZ) {
 800acd8:	9801      	ldr	r0, [sp, #4]
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
 800acda:	6063      	str	r3, [r4, #4]
    if (reader->offset >= fap->fa_size - MFG_META_FOOTER_SZ) {
 800acdc:	6883      	ldr	r3, [r0, #8]
 800acde:	6861      	ldr	r1, [r4, #4]
 800ace0:	3b08      	subs	r3, #8
 800ace2:	4299      	cmp	r1, r3
 800ace4:	d30c      	bcc.n	800ad00 <mfg_seek_next+0x60>
        if (reader->mmr_idx + 1 >= mfg_num_mmrs) {
 800ace6:	78a3      	ldrb	r3, [r4, #2]
 800ace8:	683a      	ldr	r2, [r7, #0]
 800acea:	3301      	adds	r3, #1
 800acec:	4293      	cmp	r3, r2
 800acee:	da10      	bge.n	800ad12 <mfg_seek_next+0x72>
            reader->offset = 0;
 800acf0:	2200      	movs	r2, #0
            reader->mmr_idx++;
 800acf2:	70a3      	strb	r3, [r4, #2]
            reader->offset = 0;
 800acf4:	6062      	str	r2, [r4, #4]
 800acf6:	e7d9      	b.n	800acac <mfg_seek_next+0xc>
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
 800acf8:	7862      	ldrb	r2, [r4, #1]
 800acfa:	3302      	adds	r3, #2
 800acfc:	4413      	add	r3, r2
 800acfe:	e7eb      	b.n	800acd8 <mfg_seek_next+0x38>
    rc = flash_area_read(fap, reader->offset, &reader->cur_tlv,
 800ad00:	2302      	movs	r3, #2
 800ad02:	4622      	mov	r2, r4
 800ad04:	f7ff fede 	bl	800aac4 <flash_area_read>
    if (rc != 0) {
 800ad08:	2800      	cmp	r0, #0
 800ad0a:	d0d5      	beq.n	800acb8 <mfg_seek_next+0x18>
        rc = SYS_EIO;
 800ad0c:	f06f 0004 	mvn.w	r0, #4
 800ad10:	e7d2      	b.n	800acb8 <mfg_seek_next+0x18>
            rc = SYS_EDONE;
 800ad12:	f06f 000e 	mvn.w	r0, #14
 800ad16:	e7cf      	b.n	800acb8 <mfg_seek_next+0x18>
 800ad18:	20003324 	.word	0x20003324
 800ad1c:	2000330c 	.word	0x2000330c

0800ad20 <mfg_seek_next_with_type>:
{
 800ad20:	b538      	push	{r3, r4, r5, lr}
 800ad22:	4604      	mov	r4, r0
 800ad24:	460d      	mov	r5, r1
        rc = mfg_seek_next(reader);
 800ad26:	4620      	mov	r0, r4
 800ad28:	f7ff ffba 	bl	800aca0 <mfg_seek_next>
        if (rc != 0) {
 800ad2c:	b910      	cbnz	r0, 800ad34 <mfg_seek_next_with_type+0x14>
        if (reader->cur_tlv.type == type) {
 800ad2e:	7823      	ldrb	r3, [r4, #0]
 800ad30:	42ab      	cmp	r3, r5
 800ad32:	d1f8      	bne.n	800ad26 <mfg_seek_next_with_type+0x6>
}
 800ad34:	bd38      	pop	{r3, r4, r5, pc}

0800ad36 <mfg_read_tlv_flash_area>:
    return mfg_read_tlv_body(reader, out_mfa, sizeof *out_mfa);
 800ad36:	220a      	movs	r2, #10
 800ad38:	f7ff bf80 	b.w	800ac3c <mfg_read_tlv_body>

0800ad3c <mfg_read_tlv_mmr_ref>:
    return mfg_read_tlv_body(reader, out_mr, sizeof *out_mr);
 800ad3c:	2201      	movs	r2, #1
 800ad3e:	f7ff bf7d 	b.w	800ac3c <mfg_read_tlv_body>
	...

0800ad44 <mfg_init>:
 * called before any TLVs can be read.  No-op if this function has already
 * executed successfully.
 */
void
mfg_init(void)
{
 800ad44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    int rc;

    if (mfg_initialized) {
 800ad46:	4b14      	ldr	r3, [pc, #80]	; (800ad98 <mfg_init+0x54>)
 800ad48:	7818      	ldrb	r0, [r3, #0]
 800ad4a:	bb08      	cbnz	r0, 800ad90 <mfg_init+0x4c>
        return;
    }
    mfg_initialized = true;
 800ad4c:	2201      	movs	r2, #1
 800ad4e:	701a      	strb	r2, [r3, #0]

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
 800ad50:	4b12      	ldr	r3, [pc, #72]	; (800ad9c <mfg_init+0x58>)
 800ad52:	781b      	ldrb	r3, [r3, #0]
 800ad54:	b923      	cbnz	r3, 800ad60 <mfg_init+0x1c>
 800ad56:	461a      	mov	r2, r3
 800ad58:	4619      	mov	r1, r3
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	f7fa fdda 	bl	8005914 <__assert_func>

    /* Read the first MMR from the boot loader area. */
    rc = mfg_read_next_mmr(FLASH_AREA_BOOTLOADER);
 800ad60:	f7ff ff1a 	bl	800ab98 <mfg_read_next_mmr>
    if (rc != 0) {
 800ad64:	b9a0      	cbnz	r0, 800ad90 <mfg_init+0x4c>
    mfg_open(&reader);
 800ad66:	a802      	add	r0, sp, #8
 800ad68:	f000 f81a 	bl	800ada0 <mfg_open>
        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_MMR_REF);
 800ad6c:	2104      	movs	r1, #4
 800ad6e:	a802      	add	r0, sp, #8
 800ad70:	f7ff ffd6 	bl	800ad20 <mfg_seek_next_with_type>
        switch (rc) {
 800ad74:	b960      	cbnz	r0, 800ad90 <mfg_init+0x4c>
        rc = mfg_read_tlv_mmr_ref(&reader, &mmr_ref);
 800ad76:	a901      	add	r1, sp, #4
 800ad78:	a802      	add	r0, sp, #8
 800ad7a:	f7ff ffdf 	bl	800ad3c <mfg_read_tlv_mmr_ref>
        if (rc != 0) {
 800ad7e:	b938      	cbnz	r0, 800ad90 <mfg_init+0x4c>
        rc = mfg_read_next_mmr(mmr_ref.area_id);
 800ad80:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800ad84:	f7ff ff08 	bl	800ab98 <mfg_read_next_mmr>
        if (rc != 0 && rc != SYS_EALREADY) {
 800ad88:	2800      	cmp	r0, #0
 800ad8a:	d0ef      	beq.n	800ad6c <mfg_init+0x28>
 800ad8c:	300b      	adds	r0, #11
 800ad8e:	d0ed      	beq.n	800ad6c <mfg_init+0x28>

    return;

err:
    MFG_LOG(ERROR, "failed to read MMRs: rc=%d", rc);
}
 800ad90:	b005      	add	sp, #20
 800ad92:	f85d fb04 	ldr.w	pc, [sp], #4
 800ad96:	bf00      	nop
 800ad98:	20003308 	.word	0x20003308
 800ad9c:	200033f0 	.word	0x200033f0

0800ada0 <mfg_open>:
{
 800ada0:	b510      	push	{r4, lr}
 800ada2:	4604      	mov	r4, r0
    mfg_init();
 800ada4:	f7ff ffce 	bl	800ad44 <mfg_init>
    *out_reader = (struct mfg_reader) { 0 };
 800ada8:	2300      	movs	r3, #0
 800adaa:	e9c4 3300 	strd	r3, r3, [r4]
}
 800adae:	bd10      	pop	{r4, pc}

0800adb0 <skipspace>:
	bail_eof,		/* Hit EOF */
	bail_err		/* Conversion mismatch */
};

static inline const char *skipspace(const char *p)
{
 800adb0:	4602      	mov	r2, r0
	return __c < 0x20;
}

__extern_inline int isspace(int __c)
{
	return __c == ' ' || __c == '\n' || __c == '\t' || __c == '\r';
 800adb2:	4906      	ldr	r1, [pc, #24]	; (800adcc <skipspace+0x1c>)
 800adb4:	4610      	mov	r0, r2
 800adb6:	7803      	ldrb	r3, [r0, #0]
 800adb8:	3201      	adds	r2, #1
 800adba:	3b09      	subs	r3, #9
 800adbc:	b2db      	uxtb	r3, r3
 800adbe:	2b17      	cmp	r3, #23
 800adc0:	d803      	bhi.n	800adca <skipspace+0x1a>
 800adc2:	fa21 f303 	lsr.w	r3, r1, r3
 800adc6:	07db      	lsls	r3, r3, #31
 800adc8:	d4f4      	bmi.n	800adb4 <skipspace+0x4>
	while (isspace((unsigned char)*p))
		p++;
	return p;
}
 800adca:	4770      	bx	lr
 800adcc:	00800013 	.word	0x00800013

0800add0 <set_bit>:

#undef set_bit
static inline void set_bit(unsigned long *bitmap, unsigned int bit)
{
	bitmap[bit / LONG_BIT] |= 1UL << (bit % LONG_BIT);
 800add0:	2301      	movs	r3, #1
 800add2:	094a      	lsrs	r2, r1, #5
 800add4:	f001 011f 	and.w	r1, r1, #31
 800add8:	fa03 f101 	lsl.w	r1, r3, r1
 800addc:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 800ade0:	430b      	orrs	r3, r1
 800ade2:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
}
 800ade6:	4770      	bx	lr

0800ade8 <vsscanf>:
	enum bail bail = bail_none;
	int sign;
	int converted = 0;	/* Successful conversions */
	unsigned long matchmap[((1 << CHAR_BIT) + (LONG_BIT - 1)) / LONG_BIT];
	int matchinv = 0;	/* Is match map inverted? */
	unsigned char range_start = 0;
 800ade8:	2300      	movs	r3, #0
{
 800adea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int converted = 0;	/* Successful conversions */
 800adee:	469b      	mov	fp, r3
{
 800adf0:	4615      	mov	r5, r2
	const char *q = buffer;
 800adf2:	4606      	mov	r6, r0
	enum bail bail = bail_none;
 800adf4:	461f      	mov	r7, r3
	char *sarg = NULL;	/* %s %c or %[ string argument */
 800adf6:	4699      	mov	r9, r3
	enum flags flags = 0;
 800adf8:	469a      	mov	sl, r3
	unsigned int width = UINT_MAX;
 800adfa:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	int rank = rank_int;	/* Default rank */
 800adfe:	46d8      	mov	r8, fp
{
 800ae00:	b091      	sub	sp, #68	; 0x44
 800ae02:	9003      	str	r0, [sp, #12]
	unsigned char range_start = 0;
 800ae04:	9300      	str	r3, [sp, #0]
	int matchinv = 0;	/* Is match map inverted? */
 800ae06:	9302      	str	r3, [sp, #8]
	(void)sign;

	while ((ch = *p++) && !bail) {
 800ae08:	1c4a      	adds	r2, r1, #1
 800ae0a:	9201      	str	r2, [sp, #4]
 800ae0c:	780a      	ldrb	r2, [r1, #0]
 800ae0e:	b102      	cbz	r2, 800ae12 <vsscanf+0x2a>
 800ae10:	b157      	cbz	r7, 800ae28 <vsscanf+0x40>
				bail = bail_eof;
			break;
		}
	}

	if (bail == bail_eof && !converted)
 800ae12:	2f01      	cmp	r7, #1
 800ae14:	d104      	bne.n	800ae20 <vsscanf+0x38>
		converted = -1;	/* Return EOF (-1) */
 800ae16:	f1bb 0f00 	cmp.w	fp, #0
 800ae1a:	bf08      	it	eq
 800ae1c:	f04f 3bff 	moveq.w	fp, #4294967295	; 0xffffffff

	return converted;
}
 800ae20:	4658      	mov	r0, fp
 800ae22:	b011      	add	sp, #68	; 0x44
 800ae24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		switch (state) {
 800ae28:	2b06      	cmp	r3, #6
 800ae2a:	d819      	bhi.n	800ae60 <vsscanf+0x78>
 800ae2c:	e8df f013 	tbh	[pc, r3, lsl #1]
 800ae30:	00230007 	.word	0x00230007
 800ae34:	003d0034 	.word	0x003d0034
 800ae38:	0162015a 	.word	0x0162015a
 800ae3c:	016e      	.short	0x016e
			if (ch == '%') {
 800ae3e:	2a25      	cmp	r2, #37	; 0x25
 800ae40:	f000 81a9 	beq.w	800b196 <vsscanf+0x3ae>
 800ae44:	f1a2 0109 	sub.w	r1, r2, #9
 800ae48:	b2c9      	uxtb	r1, r1
 800ae4a:	2917      	cmp	r1, #23
 800ae4c:	d804      	bhi.n	800ae58 <vsscanf+0x70>
 800ae4e:	48ae      	ldr	r0, [pc, #696]	; (800b108 <vsscanf+0x320>)
 800ae50:	fa20 f101 	lsr.w	r1, r0, r1
 800ae54:	07c9      	lsls	r1, r1, #31
 800ae56:	d405      	bmi.n	800ae64 <vsscanf+0x7c>
				if (*q == ch)
 800ae58:	7831      	ldrb	r1, [r6, #0]
 800ae5a:	4291      	cmp	r1, r2
 800ae5c:	d009      	beq.n	800ae72 <vsscanf+0x8a>
					bail = bail_err; /* Match failure */
 800ae5e:	2702      	movs	r7, #2
				state = st_match;
 800ae60:	9901      	ldr	r1, [sp, #4]
 800ae62:	e7d1      	b.n	800ae08 <vsscanf+0x20>
				q = skipspace(q);
 800ae64:	4630      	mov	r0, r6
 800ae66:	9304      	str	r3, [sp, #16]
 800ae68:	f7ff ffa2 	bl	800adb0 <skipspace>
 800ae6c:	4606      	mov	r6, r0
 800ae6e:	9b04      	ldr	r3, [sp, #16]
 800ae70:	e7f6      	b.n	800ae60 <vsscanf+0x78>
					q++;
 800ae72:	3601      	adds	r6, #1
 800ae74:	e7f4      	b.n	800ae60 <vsscanf+0x78>
			switch (ch) {
 800ae76:	2a2a      	cmp	r2, #42	; 0x2a
 800ae78:	d006      	beq.n	800ae88 <vsscanf+0xa0>
 800ae7a:	d302      	bcc.n	800ae82 <vsscanf+0x9a>
 800ae7c:	3a30      	subs	r2, #48	; 0x30
 800ae7e:	2a09      	cmp	r2, #9
 800ae80:	d905      	bls.n	800ae8e <vsscanf+0xa6>
 800ae82:	9101      	str	r1, [sp, #4]
				state = st_modifiers;
 800ae84:	2303      	movs	r3, #3
 800ae86:	e7eb      	b.n	800ae60 <vsscanf+0x78>
				flags |= FL_SPLAT;
 800ae88:	f04a 0a01 	orr.w	sl, sl, #1
				break;
 800ae8c:	e7e8      	b.n	800ae60 <vsscanf+0x78>
				width = (ch - '0');
 800ae8e:	4614      	mov	r4, r2
				flags |= FL_WIDTH;
 800ae90:	f04a 0a04 	orr.w	sl, sl, #4
				state = st_width;
 800ae94:	2302      	movs	r3, #2
				break;
 800ae96:	e7e3      	b.n	800ae60 <vsscanf+0x78>
			if (ch >= '0' && ch <= '9') {
 800ae98:	f1a2 0030 	sub.w	r0, r2, #48	; 0x30
 800ae9c:	2809      	cmp	r0, #9
 800ae9e:	d8f0      	bhi.n	800ae82 <vsscanf+0x9a>
 800aea0:	210a      	movs	r1, #10
 800aea2:	fb01 2404 	mla	r4, r1, r4, r2
				width = width * 10 + (ch - '0');
 800aea6:	3c30      	subs	r4, #48	; 0x30
 800aea8:	e7da      	b.n	800ae60 <vsscanf+0x78>
			switch (ch) {
 800aeaa:	2a6c      	cmp	r2, #108	; 0x6c
 800aeac:	d015      	beq.n	800aeda <vsscanf+0xf2>
 800aeae:	d808      	bhi.n	800aec2 <vsscanf+0xda>
 800aeb0:	2a68      	cmp	r2, #104	; 0x68
 800aeb2:	d00f      	beq.n	800aed4 <vsscanf+0xec>
 800aeb4:	2a6a      	cmp	r2, #106	; 0x6a
 800aeb6:	d001      	beq.n	800aebc <vsscanf+0xd4>
 800aeb8:	2a4c      	cmp	r2, #76	; 0x4c
 800aeba:	d111      	bne.n	800aee0 <vsscanf+0xf8>
				rank = INTMAX_RANK;
 800aebc:	f04f 0802 	mov.w	r8, #2
 800aec0:	e7ce      	b.n	800ae60 <vsscanf+0x78>
			switch (ch) {
 800aec2:	2a74      	cmp	r2, #116	; 0x74
 800aec4:	d003      	beq.n	800aece <vsscanf+0xe6>
 800aec6:	2a7a      	cmp	r2, #122	; 0x7a
 800aec8:	d001      	beq.n	800aece <vsscanf+0xe6>
 800aeca:	2a71      	cmp	r2, #113	; 0x71
 800aecc:	e7f5      	b.n	800aeba <vsscanf+0xd2>
				rank = SIZE_T_RANK;
 800aece:	f04f 0801 	mov.w	r8, #1
 800aed2:	e7c5      	b.n	800ae60 <vsscanf+0x78>
				rank--;	/* Shorter rank */
 800aed4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
				break;
 800aed8:	e7c2      	b.n	800ae60 <vsscanf+0x78>
				rank++;	/* Longer rank */
 800aeda:	f108 0801 	add.w	r8, r8, #1
				break;
 800aede:	e7bf      	b.n	800ae60 <vsscanf+0x78>
 800aee0:	f1b8 0f02 	cmp.w	r8, #2
 800aee4:	f06f 0301 	mvn.w	r3, #1
 800aee8:	bfa8      	it	ge
 800aeea:	f04f 0802 	movge.w	r8, #2
 800aeee:	4598      	cmp	r8, r3
 800aef0:	bfb8      	it	lt
 800aef2:	4698      	movlt	r8, r3
				switch (ch) {
 800aef4:	2a69      	cmp	r2, #105	; 0x69
 800aef6:	d052      	beq.n	800af9e <vsscanf+0x1b6>
 800aef8:	d823      	bhi.n	800af42 <vsscanf+0x15a>
 800aefa:	2a58      	cmp	r2, #88	; 0x58
 800aefc:	d06a      	beq.n	800afd4 <vsscanf+0x1ec>
 800aefe:	d806      	bhi.n	800af0e <vsscanf+0x126>
 800af00:	2a25      	cmp	r2, #37	; 0x25
 800af02:	f000 80e9 	beq.w	800b0d8 <vsscanf+0x2f0>
 800af06:	2a50      	cmp	r2, #80	; 0x50
 800af08:	d078      	beq.n	800affc <vsscanf+0x214>
						bail = bail_err;
 800af0a:	2702      	movs	r7, #2
 800af0c:	e074      	b.n	800aff8 <vsscanf+0x210>
				switch (ch) {
 800af0e:	2a63      	cmp	r2, #99	; 0x63
 800af10:	f000 8092 	beq.w	800b038 <vsscanf+0x250>
 800af14:	2a64      	cmp	r2, #100	; 0x64
 800af16:	d05b      	beq.n	800afd0 <vsscanf+0x1e8>
 800af18:	2a5b      	cmp	r2, #91	; 0x5b
 800af1a:	d1f6      	bne.n	800af0a <vsscanf+0x122>
					memset(matchmap, 0, sizeof matchmap);
 800af1c:	2220      	movs	r2, #32
						: va_arg(ap, char *);
 800af1e:	f01a 0f01 	tst.w	sl, #1
					memset(matchmap, 0, sizeof matchmap);
 800af22:	f04f 0100 	mov.w	r1, #0
 800af26:	eb0d 0002 	add.w	r0, sp, r2
						: va_arg(ap, char *);
 800af2a:	bf0a      	itet	eq
 800af2c:	f8d5 9000 	ldreq.w	r9, [r5]
 800af30:	f04f 0900 	movne.w	r9, #0
 800af34:	3504      	addeq	r5, #4
					memset(matchmap, 0, sizeof matchmap);
 800af36:	f7fc f888 	bl	800704a <memset>
					matchinv = 0;
 800af3a:	2300      	movs	r3, #0
 800af3c:	9302      	str	r3, [sp, #8]
					state = st_match_init;
 800af3e:	2304      	movs	r3, #4
					break;
 800af40:	e78e      	b.n	800ae60 <vsscanf+0x78>
				switch (ch) {
 800af42:	2a70      	cmp	r2, #112	; 0x70
 800af44:	d05a      	beq.n	800affc <vsscanf+0x214>
 800af46:	d805      	bhi.n	800af54 <vsscanf+0x16c>
 800af48:	2a6e      	cmp	r2, #110	; 0x6e
 800af4a:	d045      	beq.n	800afd8 <vsscanf+0x1f0>
 800af4c:	2a6f      	cmp	r2, #111	; 0x6f
 800af4e:	d1dc      	bne.n	800af0a <vsscanf+0x122>
					base = 8;
 800af50:	2208      	movs	r2, #8
 800af52:	e025      	b.n	800afa0 <vsscanf+0x1b8>
				switch (ch) {
 800af54:	2a75      	cmp	r2, #117	; 0x75
 800af56:	d03b      	beq.n	800afd0 <vsscanf+0x1e8>
 800af58:	2a78      	cmp	r2, #120	; 0x78
 800af5a:	d03b      	beq.n	800afd4 <vsscanf+0x1ec>
 800af5c:	2a73      	cmp	r2, #115	; 0x73
 800af5e:	d1d4      	bne.n	800af0a <vsscanf+0x122>
					if (flags & FL_SPLAT) {
 800af60:	f01a 0f01 	tst.w	sl, #1
 800af64:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800af68:	f000 808d 	beq.w	800b086 <vsscanf+0x29e>
 800af6c:	4632      	mov	r2, r6
						while (width-- && (uc = *q) &&
 800af6e:	1c63      	adds	r3, r4, #1
 800af70:	4616      	mov	r6, r2
 800af72:	d041      	beq.n	800aff8 <vsscanf+0x210>
 800af74:	7813      	ldrb	r3, [r2, #0]
 800af76:	3201      	adds	r2, #1
 800af78:	2b00      	cmp	r3, #0
 800af7a:	f000 8114 	beq.w	800b1a6 <vsscanf+0x3be>
 800af7e:	3b09      	subs	r3, #9
 800af80:	b2db      	uxtb	r3, r3
 800af82:	2b17      	cmp	r3, #23
 800af84:	f104 31ff 	add.w	r1, r4, #4294967295	; 0xffffffff
 800af88:	d807      	bhi.n	800af9a <vsscanf+0x1b2>
 800af8a:	485f      	ldr	r0, [pc, #380]	; (800b108 <vsscanf+0x320>)
 800af8c:	fa20 f303 	lsr.w	r3, r0, r3
 800af90:	43db      	mvns	r3, r3
 800af92:	f013 0301 	ands.w	r3, r3, #1
 800af96:	f43f af63 	beq.w	800ae60 <vsscanf+0x78>
							*sarg++ = *q++;
 800af9a:	460c      	mov	r4, r1
 800af9c:	e7e7      	b.n	800af6e <vsscanf+0x186>
					base = 0;
 800af9e:	2200      	movs	r2, #0
					q = skipspace(q);
 800afa0:	4630      	mov	r0, r6
 800afa2:	9204      	str	r2, [sp, #16]
 800afa4:	f7ff ff04 	bl	800adb0 <skipspace>
					if (!*q) {
 800afa8:	7803      	ldrb	r3, [r0, #0]
					q = skipspace(q);
 800afaa:	4606      	mov	r6, r0
					if (!*q) {
 800afac:	9a04      	ldr	r2, [sp, #16]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	f000 80f9 	beq.w	800b1a6 <vsscanf+0x3be>
					val =
 800afb4:	4623      	mov	r3, r4
 800afb6:	a907      	add	r1, sp, #28
 800afb8:	f000 fd6a 	bl	800ba90 <strntoumax>
					if (qq == q) {
 800afbc:	9b07      	ldr	r3, [sp, #28]
 800afbe:	42b3      	cmp	r3, r6
 800afc0:	d0a3      	beq.n	800af0a <vsscanf+0x122>
					if (!(flags & FL_SPLAT))
 800afc2:	f01a 0f01 	tst.w	sl, #1
						converted++;
 800afc6:	bf08      	it	eq
 800afc8:	f10b 0b01 	addeq.w	fp, fp, #1
				      set_integer:
 800afcc:	461e      	mov	r6, r3
 800afce:	e006      	b.n	800afde <vsscanf+0x1f6>
					base = 10;
 800afd0:	220a      	movs	r2, #10
					goto scan_int;
 800afd2:	e7e5      	b.n	800afa0 <vsscanf+0x1b8>
					base = 16;
 800afd4:	2210      	movs	r2, #16
					goto scan_int;
 800afd6:	e7e3      	b.n	800afa0 <vsscanf+0x1b8>
					val = (q - buffer);
 800afd8:	9b03      	ldr	r3, [sp, #12]
 800afda:	1af0      	subs	r0, r6, r3
 800afdc:	17c1      	asrs	r1, r0, #31
					if (!(flags & FL_SPLAT)) {
 800afde:	f01a 0301 	ands.w	r3, sl, #1
 800afe2:	d109      	bne.n	800aff8 <vsscanf+0x210>
						switch (rank) {
 800afe4:	f1b8 0f00 	cmp.w	r8, #0
 800afe8:	d01e      	beq.n	800b028 <vsscanf+0x240>
 800afea:	dc0b      	bgt.n	800b004 <vsscanf+0x21c>
 800afec:	f118 0f02 	cmn.w	r8, #2
 800aff0:	d013      	beq.n	800b01a <vsscanf+0x232>
 800aff2:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 800aff6:	d014      	beq.n	800b022 <vsscanf+0x23a>
				state = st_normal;
 800aff8:	2300      	movs	r3, #0
 800affa:	e731      	b.n	800ae60 <vsscanf+0x78>
					base = 0;
 800affc:	2200      	movs	r2, #0
					rank = rank_ptr;
 800affe:	f06f 4800 	mvn.w	r8, #2147483648	; 0x80000000
 800b002:	e7cd      	b.n	800afa0 <vsscanf+0x1b8>
						switch (rank) {
 800b004:	f1b8 0f02 	cmp.w	r8, #2
 800b008:	d012      	beq.n	800b030 <vsscanf+0x248>
 800b00a:	db03      	blt.n	800b014 <vsscanf+0x22c>
 800b00c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800b010:	4590      	cmp	r8, r2
 800b012:	d1f1      	bne.n	800aff8 <vsscanf+0x210>
							*va_arg(ap, void **) =
 800b014:	682a      	ldr	r2, [r5, #0]
								(uintptr_t)val;
 800b016:	6010      	str	r0, [r2, #0]
 800b018:	e001      	b.n	800b01e <vsscanf+0x236>
							*va_arg(ap,
 800b01a:	682a      	ldr	r2, [r5, #0]
								= val;
 800b01c:	7010      	strb	r0, [r2, #0]
							*va_arg(ap, void **) =
 800b01e:	3504      	adds	r5, #4
							break;
 800b020:	e71e      	b.n	800ae60 <vsscanf+0x78>
								*) = val;
 800b022:	682a      	ldr	r2, [r5, #0]
 800b024:	8010      	strh	r0, [r2, #0]
 800b026:	e7fa      	b.n	800b01e <vsscanf+0x236>
							    = val;
 800b028:	682b      	ldr	r3, [r5, #0]
							*va_arg(ap,
 800b02a:	3504      	adds	r5, #4
							    = val;
 800b02c:	6018      	str	r0, [r3, #0]
 800b02e:	e7e3      	b.n	800aff8 <vsscanf+0x210>
								long *) = val;
 800b030:	682a      	ldr	r2, [r5, #0]
 800b032:	e9c2 0100 	strd	r0, r1, [r2]
 800b036:	e7f2      	b.n	800b01e <vsscanf+0x236>
					width = (flags & FL_WIDTH) ? width : 1;
 800b038:	f01a 0f04 	tst.w	sl, #4
 800b03c:	bf08      	it	eq
 800b03e:	2401      	moveq	r4, #1
					if (flags & FL_SPLAT) {
 800b040:	f01a 0f01 	tst.w	sl, #1
 800b044:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800b048:	d008      	beq.n	800b05c <vsscanf+0x274>
						while (width--) {
 800b04a:	1c63      	adds	r3, r4, #1
 800b04c:	d0d4      	beq.n	800aff8 <vsscanf+0x210>
							if (!*q) {
 800b04e:	7833      	ldrb	r3, [r6, #0]
 800b050:	1e62      	subs	r2, r4, #1
 800b052:	2b00      	cmp	r3, #0
 800b054:	f000 80a7 	beq.w	800b1a6 <vsscanf+0x3be>
 800b058:	4614      	mov	r4, r2
 800b05a:	e7f6      	b.n	800b04a <vsscanf+0x262>
 800b05c:	4632      	mov	r2, r6
						sarg = va_arg(ap, char *);
 800b05e:	f8d5 9000 	ldr.w	r9, [r5]
 800b062:	1d29      	adds	r1, r5, #4
						while (width--) {
 800b064:	1c60      	adds	r0, r4, #1
 800b066:	4616      	mov	r6, r2
 800b068:	d103      	bne.n	800b072 <vsscanf+0x28a>
							converted++;
 800b06a:	f10b 0b01 	add.w	fp, fp, #1
						sarg = va_arg(ap, char *);
 800b06e:	460d      	mov	r5, r1
 800b070:	e7c2      	b.n	800aff8 <vsscanf+0x210>
							if (!*q) {
 800b072:	f812 3b01 	ldrb.w	r3, [r2], #1
 800b076:	1e60      	subs	r0, r4, #1
 800b078:	2b00      	cmp	r3, #0
 800b07a:	f000 8093 	beq.w	800b1a4 <vsscanf+0x3bc>
							*sarg++ = *q++;
 800b07e:	f809 3b01 	strb.w	r3, [r9], #1
 800b082:	4604      	mov	r4, r0
 800b084:	e7ee      	b.n	800b064 <vsscanf+0x27c>
						sp = sarg = va_arg(ap, char *);
 800b086:	f8d5 9000 	ldr.w	r9, [r5]
 800b08a:	4631      	mov	r1, r6
 800b08c:	464a      	mov	r2, r9
					uc = 1;	/* Anything nonzero */
 800b08e:	2701      	movs	r7, #1
						sp = sarg = va_arg(ap, char *);
 800b090:	f105 0c04 	add.w	ip, r5, #4
						while (width-- && (uc = *q) &&
 800b094:	1c60      	adds	r0, r4, #1
 800b096:	460e      	mov	r6, r1
 800b098:	d012      	beq.n	800b0c0 <vsscanf+0x2d8>
 800b09a:	f811 7b01 	ldrb.w	r7, [r1], #1
 800b09e:	b17f      	cbz	r7, 800b0c0 <vsscanf+0x2d8>
 800b0a0:	f1a7 0309 	sub.w	r3, r7, #9
 800b0a4:	b2db      	uxtb	r3, r3
 800b0a6:	2b17      	cmp	r3, #23
 800b0a8:	f104 35ff 	add.w	r5, r4, #4294967295	; 0xffffffff
 800b0ac:	d804      	bhi.n	800b0b8 <vsscanf+0x2d0>
 800b0ae:	4816      	ldr	r0, [pc, #88]	; (800b108 <vsscanf+0x320>)
 800b0b0:	fa20 f303 	lsr.w	r3, r0, r3
 800b0b4:	07db      	lsls	r3, r3, #31
 800b0b6:	d403      	bmi.n	800b0c0 <vsscanf+0x2d8>
							*sp++ = uc;
 800b0b8:	f802 7b01 	strb.w	r7, [r2], #1
 800b0bc:	462c      	mov	r4, r5
 800b0be:	e7e9      	b.n	800b094 <vsscanf+0x2ac>
						if (sarg != sp) {
 800b0c0:	454a      	cmp	r2, r9
							*sp = '\0';
 800b0c2:	bf18      	it	ne
 800b0c4:	2300      	movne	r3, #0
	enum bail bail = bail_none;
 800b0c6:	fab7 f787 	clz	r7, r7
							*sp = '\0';
 800b0ca:	bf1c      	itt	ne
 800b0cc:	7013      	strbne	r3, [r2, #0]
							converted++;
 800b0ce:	f10b 0b01 	addne.w	fp, fp, #1
	enum bail bail = bail_none;
 800b0d2:	097f      	lsrs	r7, r7, #5
						sp = sarg = va_arg(ap, char *);
 800b0d4:	4665      	mov	r5, ip
 800b0d6:	e78f      	b.n	800aff8 <vsscanf+0x210>
					if (*q == '%')
 800b0d8:	7833      	ldrb	r3, [r6, #0]
 800b0da:	2b25      	cmp	r3, #37	; 0x25
 800b0dc:	f47f af15 	bne.w	800af0a <vsscanf+0x122>
						q++;
 800b0e0:	3601      	adds	r6, #1
 800b0e2:	e789      	b.n	800aff8 <vsscanf+0x210>
			if (ch == '^' && !(flags & FL_INV)) {
 800b0e4:	2a5e      	cmp	r2, #94	; 0x5e
 800b0e6:	d060      	beq.n	800b1aa <vsscanf+0x3c2>
				set_bit(matchmap, (unsigned char)ch);
 800b0e8:	4611      	mov	r1, r2
 800b0ea:	a808      	add	r0, sp, #32
 800b0ec:	f7ff fe70 	bl	800add0 <set_bit>
				state = st_match;
 800b0f0:	2305      	movs	r3, #5
 800b0f2:	e6b5      	b.n	800ae60 <vsscanf+0x78>
			if (ch == ']') {
 800b0f4:	2a5d      	cmp	r2, #93	; 0x5d
 800b0f6:	9304      	str	r3, [sp, #16]
 800b0f8:	d041      	beq.n	800b17e <vsscanf+0x396>
			} else if (ch == '-') {
 800b0fa:	2a2d      	cmp	r2, #45	; 0x2d
 800b0fc:	d058      	beq.n	800b1b0 <vsscanf+0x3c8>
				set_bit(matchmap, (unsigned char)ch);
 800b0fe:	4611      	mov	r1, r2
 800b100:	a808      	add	r0, sp, #32
 800b102:	f7ff fe65 	bl	800add0 <set_bit>
 800b106:	e6b2      	b.n	800ae6e <vsscanf+0x86>
 800b108:	00800013 	.word	0x00800013
			if (ch == ']') {
 800b10c:	2a5d      	cmp	r2, #93	; 0x5d
 800b10e:	d129      	bne.n	800b164 <vsscanf+0x37c>
	bitmap[bit / LONG_BIT] |= 1UL << (bit % LONG_BIT);
 800b110:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b112:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b116:	9209      	str	r2, [sp, #36]	; 0x24
 800b118:	46b4      	mov	ip, r6
			uc = 1;	/* Anything nonzero */
 800b11a:	2201      	movs	r2, #1
			qq = q;
 800b11c:	9607      	str	r6, [sp, #28]
 800b11e:	4666      	mov	r6, ip
			while (width && (uc = *q)
 800b120:	b18c      	cbz	r4, 800b146 <vsscanf+0x35e>
 800b122:	f81c 2b01 	ldrb.w	r2, [ip], #1
 800b126:	b172      	cbz	r2, 800b146 <vsscanf+0x35e>
	return (int)(bitmap[bit / LONG_BIT] >> (bit % LONG_BIT)) & 1;
 800b128:	a910      	add	r1, sp, #64	; 0x40
 800b12a:	0950      	lsrs	r0, r2, #5
 800b12c:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 800b130:	f850 0c20 	ldr.w	r0, [r0, #-32]
 800b134:	f002 011f 	and.w	r1, r2, #31
 800b138:	fa20 f101 	lsr.w	r1, r0, r1
			       && test_bit(matchmap, uc)^matchinv) {
 800b13c:	9802      	ldr	r0, [sp, #8]
	return (int)(bitmap[bit / LONG_BIT] >> (bit % LONG_BIT)) & 1;
 800b13e:	f001 0101 	and.w	r1, r1, #1
			       && test_bit(matchmap, uc)^matchinv) {
 800b142:	4288      	cmp	r0, r1
 800b144:	d11d      	bne.n	800b182 <vsscanf+0x39a>
			if (q != qq) {   ////  Previously: if (q != qq && sarg) {
 800b146:	9907      	ldr	r1, [sp, #28]
 800b148:	42b1      	cmp	r1, r6
 800b14a:	d022      	beq.n	800b192 <vsscanf+0x3aa>
				if (sarg) {  ////  Added: For "%*...[...]" format, don't bail out.
 800b14c:	f1b9 0f00 	cmp.w	r9, #0
 800b150:	d004      	beq.n	800b15c <vsscanf+0x374>
					*sarg = '\0';
 800b152:	2100      	movs	r1, #0
					converted++;
 800b154:	f10b 0b01 	add.w	fp, fp, #1
					*sarg = '\0';
 800b158:	f889 1000 	strb.w	r1, [r9]
				bail = bail_eof;
 800b15c:	2a00      	cmp	r2, #0
 800b15e:	bf08      	it	eq
 800b160:	2701      	moveq	r7, #1
 800b162:	e67d      	b.n	800ae60 <vsscanf+0x78>
				for (i = range_start; i < (unsigned char)ch;
 800b164:	9b00      	ldr	r3, [sp, #0]
 800b166:	429a      	cmp	r2, r3
 800b168:	ddc2      	ble.n	800b0f0 <vsscanf+0x308>
					set_bit(matchmap, i);
 800b16a:	4619      	mov	r1, r3
 800b16c:	a808      	add	r0, sp, #32
 800b16e:	9205      	str	r2, [sp, #20]
 800b170:	9304      	str	r3, [sp, #16]
 800b172:	f7ff fe2d 	bl	800add0 <set_bit>
				     i++)
 800b176:	9b04      	ldr	r3, [sp, #16]
 800b178:	9a05      	ldr	r2, [sp, #20]
 800b17a:	3301      	adds	r3, #1
 800b17c:	e7f3      	b.n	800b166 <vsscanf+0x37e>
				state = st_normal;  ////  Added: State should return to normal after matching.
 800b17e:	2300      	movs	r3, #0
 800b180:	e7ca      	b.n	800b118 <vsscanf+0x330>
				if (sarg)
 800b182:	f1b9 0f00 	cmp.w	r9, #0
 800b186:	d0ca      	beq.n	800b11e <vsscanf+0x336>
					*sarg++ = uc;
 800b188:	f889 2000 	strb.w	r2, [r9]
 800b18c:	f109 0901 	add.w	r9, r9, #1
 800b190:	e7c5      	b.n	800b11e <vsscanf+0x336>
				bail = bail_err;
 800b192:	2702      	movs	r7, #2
 800b194:	e7e2      	b.n	800b15c <vsscanf+0x374>
				flags = 0;
 800b196:	f04f 0a00 	mov.w	sl, #0
				state = st_flags;
 800b19a:	2301      	movs	r3, #1
				width = UINT_MAX;
 800b19c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
				rank = rank_int;
 800b1a0:	46d0      	mov	r8, sl
 800b1a2:	e65d      	b.n	800ae60 <vsscanf+0x78>
						sarg = va_arg(ap, char *);
 800b1a4:	460d      	mov	r5, r1
 800b1a6:	2701      	movs	r7, #1
 800b1a8:	e65a      	b.n	800ae60 <vsscanf+0x78>
				matchinv = 1;
 800b1aa:	2201      	movs	r2, #1
 800b1ac:	9202      	str	r2, [sp, #8]
 800b1ae:	e657      	b.n	800ae60 <vsscanf+0x78>
 800b1b0:	9200      	str	r2, [sp, #0]
				state = st_match_range;
 800b1b2:	2306      	movs	r3, #6
 800b1b4:	e654      	b.n	800ae60 <vsscanf+0x78>
 800b1b6:	bf00      	nop

0800b1b8 <hal_flash_check_addr>:
}

static int
hal_flash_check_addr(const struct hal_flash *hf, uint32_t addr)
{
    if (addr < hf->hf_base_addr || addr > hf->hf_base_addr + hf->hf_size) {
 800b1b8:	6843      	ldr	r3, [r0, #4]
 800b1ba:	428b      	cmp	r3, r1
 800b1bc:	d807      	bhi.n	800b1ce <hal_flash_check_addr+0x16>
 800b1be:	6882      	ldr	r2, [r0, #8]
 800b1c0:	4413      	add	r3, r2
 800b1c2:	428b      	cmp	r3, r1
        return SYS_EINVAL;
    }
    return 0;
 800b1c4:	bf34      	ite	cc
 800b1c6:	f06f 0001 	mvncc.w	r0, #1
 800b1ca:	2000      	movcs	r0, #0
 800b1cc:	4770      	bx	lr
        return SYS_EINVAL;
 800b1ce:	f06f 0001 	mvn.w	r0, #1
}
 800b1d2:	4770      	bx	lr

0800b1d4 <hal_flash_init>:
{
 800b1d4:	b538      	push	{r3, r4, r5, lr}
 800b1d6:	2400      	movs	r4, #0
    int rc = 0;
 800b1d8:	4625      	mov	r5, r4
        hf = hal_bsp_flash_dev(i);
 800b1da:	b2e0      	uxtb	r0, r4
 800b1dc:	f7fc ffc4 	bl	8008168 <hal_bsp_flash_dev>
        if (!hf) {
 800b1e0:	b140      	cbz	r0, 800b1f4 <hal_flash_init+0x20>
        if (hf->hf_itf->hff_init(hf)) {
 800b1e2:	6803      	ldr	r3, [r0, #0]
 800b1e4:	3401      	adds	r4, #1
 800b1e6:	695b      	ldr	r3, [r3, #20]
 800b1e8:	4798      	blx	r3
            rc = SYS_EIO;
 800b1ea:	2800      	cmp	r0, #0
 800b1ec:	bf18      	it	ne
 800b1ee:	f06f 0504 	mvnne.w	r5, #4
        hf = hal_bsp_flash_dev(i);
 800b1f2:	e7f2      	b.n	800b1da <hal_flash_init+0x6>
}
 800b1f4:	4628      	mov	r0, r5
 800b1f6:	bd38      	pop	{r3, r4, r5, pc}

0800b1f8 <hal_flash_read>:

int
hal_flash_read(uint8_t id, uint32_t address, void *dst, uint32_t num_bytes)
{
 800b1f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1fc:	460d      	mov	r5, r1
 800b1fe:	4690      	mov	r8, r2
 800b200:	461e      	mov	r6, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
 800b202:	f7fc ffb1 	bl	8008168 <hal_bsp_flash_dev>
    if (!hf) {
 800b206:	4604      	mov	r4, r0
 800b208:	b1a8      	cbz	r0, 800b236 <hal_flash_read+0x3e>
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
 800b20a:	4629      	mov	r1, r5
 800b20c:	f7ff ffd4 	bl	800b1b8 <hal_flash_check_addr>
 800b210:	b988      	cbnz	r0, 800b236 <hal_flash_read+0x3e>
      hal_flash_check_addr(hf, address + num_bytes)) {
 800b212:	19a9      	adds	r1, r5, r6
 800b214:	4620      	mov	r0, r4
 800b216:	f7ff ffcf 	bl	800b1b8 <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
 800b21a:	b960      	cbnz	r0, 800b236 <hal_flash_read+0x3e>
        return SYS_EINVAL;
    }

    rc = hf->hf_itf->hff_read(hf, address, dst, num_bytes);
 800b21c:	6823      	ldr	r3, [r4, #0]
 800b21e:	4642      	mov	r2, r8
 800b220:	681f      	ldr	r7, [r3, #0]
 800b222:	4629      	mov	r1, r5
 800b224:	4633      	mov	r3, r6
 800b226:	4620      	mov	r0, r4
 800b228:	47b8      	blx	r7
    if (rc != 0) {
 800b22a:	2800      	cmp	r0, #0
        return SYS_EIO;
 800b22c:	bf18      	it	ne
 800b22e:	f06f 0004 	mvnne.w	r0, #4
    }

    return 0;
}
 800b232:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EINVAL;
 800b236:	f06f 0001 	mvn.w	r0, #1
 800b23a:	e7fa      	b.n	800b232 <hal_flash_read+0x3a>

0800b23c <HAL_ADC_MspInit>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_MspInit must be implemented in the user file.
   */ 
}
 800b23c:	4770      	bx	lr
	...

0800b240 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800b240:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tickstart = 0U;
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800b242:	2500      	movs	r5, #0
{
 800b244:	4604      	mov	r4, r0
 800b246:	460e      	mov	r6, r1
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800b248:	9501      	str	r5, [sp, #4]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800b24a:	f7fd f967 	bl	800851c <HAL_GetTick>
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800b24e:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800b250:	4607      	mov	r7, r0
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800b252:	689a      	ldr	r2, [r3, #8]
 800b254:	05d2      	lsls	r2, r2, #23
 800b256:	d508      	bpl.n	800b26a <HAL_ADC_PollForConversion+0x2a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
    
    return HAL_ERROR;
 800b258:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800b25a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    __HAL_UNLOCK(hadc);
 800b25c:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800b260:	f043 0320 	orr.w	r3, r3, #32
 800b264:	62a3      	str	r3, [r4, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
}
 800b266:	b003      	add	sp, #12
 800b268:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800b26a:	685a      	ldr	r2, [r3, #4]
 800b26c:	05d5      	lsls	r5, r2, #23
 800b26e:	d403      	bmi.n	800b278 <HAL_ADC_PollForConversion+0x38>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 800b270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800b272:	f413 0f70 	tst.w	r3, #15728640	; 0xf00000
 800b276:	d03b      	beq.n	800b2f0 <HAL_ADC_PollForConversion+0xb0>
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800b278:	4b3a      	ldr	r3, [pc, #232]	; (800b364 <HAL_ADC_PollForConversion+0x124>)
 800b27a:	2002      	movs	r0, #2
 800b27c:	681d      	ldr	r5, [r3, #0]
 800b27e:	f000 fb85 	bl	800b98c <HAL_RCCEx_GetPeriphCLKFreq>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800b282:	6823      	ldr	r3, [r4, #0]
 800b284:	4a38      	ldr	r2, [pc, #224]	; (800b368 <HAL_ADC_PollForConversion+0x128>)
 800b286:	6919      	ldr	r1, [r3, #16]
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800b288:	fbb5 f0f0 	udiv	r0, r5, r0
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800b28c:	4211      	tst	r1, r2
 800b28e:	4a37      	ldr	r2, [pc, #220]	; (800b36c <HAL_ADC_PollForConversion+0x12c>)
 800b290:	d14f      	bne.n	800b332 <HAL_ADC_PollForConversion+0xf2>
 800b292:	68dd      	ldr	r5, [r3, #12]
 800b294:	4936      	ldr	r1, [pc, #216]	; (800b370 <HAL_ADC_PollForConversion+0x130>)
 800b296:	420d      	tst	r5, r1
 800b298:	d14b      	bne.n	800b332 <HAL_ADC_PollForConversion+0xf2>
 800b29a:	6919      	ldr	r1, [r3, #16]
 800b29c:	4211      	tst	r1, r2
 800b29e:	d159      	bne.n	800b354 <HAL_ADC_PollForConversion+0x114>
 800b2a0:	68da      	ldr	r2, [r3, #12]
 800b2a2:	4b34      	ldr	r3, [pc, #208]	; (800b374 <HAL_ADC_PollForConversion+0x134>)
 800b2a4:	421a      	tst	r2, r3
 800b2a6:	bf14      	ite	ne
 800b2a8:	2329      	movne	r3, #41	; 0x29
 800b2aa:	2314      	moveq	r3, #20
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800b2ac:	fb03 f500 	mul.w	r5, r3, r0
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800b2b0:	9b01      	ldr	r3, [sp, #4]
 800b2b2:	42ab      	cmp	r3, r5
 800b2b4:	d220      	bcs.n	800b2f8 <HAL_ADC_PollForConversion+0xb8>
      if(Timeout != HAL_MAX_DELAY)
 800b2b6:	1c73      	adds	r3, r6, #1
 800b2b8:	d005      	beq.n	800b2c6 <HAL_ADC_PollForConversion+0x86>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800b2ba:	b186      	cbz	r6, 800b2de <HAL_ADC_PollForConversion+0x9e>
 800b2bc:	f7fd f92e 	bl	800851c <HAL_GetTick>
 800b2c0:	1bc0      	subs	r0, r0, r7
 800b2c2:	42b0      	cmp	r0, r6
 800b2c4:	d80b      	bhi.n	800b2de <HAL_ADC_PollForConversion+0x9e>
      Conversion_Timeout_CPU_cycles ++;
 800b2c6:	9b01      	ldr	r3, [sp, #4]
 800b2c8:	3301      	adds	r3, #1
 800b2ca:	9301      	str	r3, [sp, #4]
 800b2cc:	e7f0      	b.n	800b2b0 <HAL_ADC_PollForConversion+0x70>
      if(Timeout != HAL_MAX_DELAY)
 800b2ce:	1c70      	adds	r0, r6, #1
 800b2d0:	d00f      	beq.n	800b2f2 <HAL_ADC_PollForConversion+0xb2>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800b2d2:	b126      	cbz	r6, 800b2de <HAL_ADC_PollForConversion+0x9e>
 800b2d4:	f7fd f922 	bl	800851c <HAL_GetTick>
 800b2d8:	1bc0      	subs	r0, r0, r7
 800b2da:	42b0      	cmp	r0, r6
 800b2dc:	d908      	bls.n	800b2f0 <HAL_ADC_PollForConversion+0xb0>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800b2de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          return HAL_TIMEOUT;
 800b2e0:	2003      	movs	r0, #3
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800b2e2:	f043 0304 	orr.w	r3, r3, #4
 800b2e6:	62a3      	str	r3, [r4, #40]	; 0x28
          __HAL_UNLOCK(hadc);
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          return HAL_TIMEOUT;
 800b2ee:	e7ba      	b.n	800b266 <HAL_ADC_PollForConversion+0x26>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800b2f0:	6822      	ldr	r2, [r4, #0]
 800b2f2:	6813      	ldr	r3, [r2, #0]
 800b2f4:	0799      	lsls	r1, r3, #30
 800b2f6:	d5ea      	bpl.n	800b2ce <HAL_ADC_PollForConversion+0x8e>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800b2f8:	f06f 0312 	mvn.w	r3, #18
 800b2fc:	6822      	ldr	r2, [r4, #0]
 800b2fe:	6013      	str	r3, [r2, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800b300:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b302:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b306:	62a3      	str	r3, [r4, #40]	; 0x28
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800b308:	6893      	ldr	r3, [r2, #8]
 800b30a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800b30e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800b312:	d125      	bne.n	800b360 <HAL_ADC_PollForConversion+0x120>
 800b314:	68e3      	ldr	r3, [r4, #12]
 800b316:	bb1b      	cbnz	r3, 800b360 <HAL_ADC_PollForConversion+0x120>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800b318:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b31a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b31e:	62a3      	str	r3, [r4, #40]	; 0x28
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800b320:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800b322:	f410 5080 	ands.w	r0, r0, #4096	; 0x1000
 800b326:	d11b      	bne.n	800b360 <HAL_ADC_PollForConversion+0x120>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800b328:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b32a:	f043 0301 	orr.w	r3, r3, #1
 800b32e:	62a3      	str	r3, [r4, #40]	; 0x28
 800b330:	e799      	b.n	800b266 <HAL_ADC_PollForConversion+0x26>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800b332:	6919      	ldr	r1, [r3, #16]
 800b334:	4211      	tst	r1, r2
 800b336:	d103      	bne.n	800b340 <HAL_ADC_PollForConversion+0x100>
 800b338:	68d9      	ldr	r1, [r3, #12]
 800b33a:	4a0e      	ldr	r2, [pc, #56]	; (800b374 <HAL_ADC_PollForConversion+0x134>)
 800b33c:	4211      	tst	r1, r2
 800b33e:	d00b      	beq.n	800b358 <HAL_ADC_PollForConversion+0x118>
 800b340:	6919      	ldr	r1, [r3, #16]
 800b342:	4a0d      	ldr	r2, [pc, #52]	; (800b378 <HAL_ADC_PollForConversion+0x138>)
 800b344:	4211      	tst	r1, r2
 800b346:	d109      	bne.n	800b35c <HAL_ADC_PollForConversion+0x11c>
 800b348:	68db      	ldr	r3, [r3, #12]
 800b34a:	4213      	tst	r3, r2
 800b34c:	bf14      	ite	ne
 800b34e:	23fc      	movne	r3, #252	; 0xfc
 800b350:	2354      	moveq	r3, #84	; 0x54
 800b352:	e7ab      	b.n	800b2ac <HAL_ADC_PollForConversion+0x6c>
 800b354:	2329      	movs	r3, #41	; 0x29
 800b356:	e7a9      	b.n	800b2ac <HAL_ADC_PollForConversion+0x6c>
 800b358:	2354      	movs	r3, #84	; 0x54
 800b35a:	e7a7      	b.n	800b2ac <HAL_ADC_PollForConversion+0x6c>
 800b35c:	23fc      	movs	r3, #252	; 0xfc
 800b35e:	e7a5      	b.n	800b2ac <HAL_ADC_PollForConversion+0x6c>
  return HAL_OK;
 800b360:	2000      	movs	r0, #0
 800b362:	e780      	b.n	800b266 <HAL_ADC_PollForConversion+0x26>
 800b364:	20000110 	.word	0x20000110
 800b368:	24924924 	.word	0x24924924
 800b36c:	12492492 	.word	0x12492492
 800b370:	00924924 	.word	0x00924924
 800b374:	00492492 	.word	0x00492492
 800b378:	00249249 	.word	0x00249249

0800b37c <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800b37c:	6803      	ldr	r3, [r0, #0]
 800b37e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 800b380:	4770      	bx	lr

0800b382 <HAL_ADC_ConvCpltCallback>:
 800b382:	4770      	bx	lr

0800b384 <ADC_DMAConvCplt>:
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800b384:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 800b386:	b510      	push	{r4, lr}
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800b388:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b38a:	f012 0f50 	tst.w	r2, #80	; 0x50
 800b38e:	d11b      	bne.n	800b3c8 <ADC_DMAConvCplt+0x44>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800b390:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b392:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b396:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800b398:	681a      	ldr	r2, [r3, #0]
 800b39a:	6892      	ldr	r2, [r2, #8]
 800b39c:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 800b3a0:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 800b3a4:	d10c      	bne.n	800b3c0 <ADC_DMAConvCplt+0x3c>
 800b3a6:	68da      	ldr	r2, [r3, #12]
 800b3a8:	b952      	cbnz	r2, 800b3c0 <ADC_DMAConvCplt+0x3c>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800b3aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b3ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b3b0:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800b3b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b3b4:	04d2      	lsls	r2, r2, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800b3b6:	bf5e      	ittt	pl
 800b3b8:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
 800b3ba:	f042 0201 	orrpl.w	r2, r2, #1
 800b3be:	629a      	strpl	r2, [r3, #40]	; 0x28
      }
    }
    
    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc); 
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	f7ff ffde 	bl	800b382 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800b3c6:	bd10      	pop	{r4, pc}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800b3c8:	6a1b      	ldr	r3, [r3, #32]
}
 800b3ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800b3ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3d0:	4718      	bx	r3

0800b3d2 <HAL_ADC_ConvHalfCpltCallback>:
 800b3d2:	4770      	bx	lr

0800b3d4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800b3d4:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Half conversion callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 800b3d6:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800b3d8:	f7ff fffb 	bl	800b3d2 <HAL_ADC_ConvHalfCpltCallback>
}
 800b3dc:	bd08      	pop	{r3, pc}

0800b3de <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800b3de:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 800b3e0:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800b3e2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b3e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3e8:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800b3ea:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800b3ec:	f043 0304 	orr.w	r3, r3, #4
 800b3f0:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
  HAL_ADC_ErrorCallback(hadc); 
 800b3f2:	f7fe fc4d 	bl	8009c90 <HAL_ADC_ErrorCallback>
}
 800b3f6:	bd08      	pop	{r3, pc}

0800b3f8 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 800b3f8:	2300      	movs	r3, #0
{ 
 800b3fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 800b3fc:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800b3fe:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800b402:	2b01      	cmp	r3, #1
 800b404:	d06d      	beq.n	800b4e2 <HAL_ADC_ConfigChannel+0xea>
 800b406:	2301      	movs	r3, #1
  if (sConfig->Rank < 7U)
 800b408:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 800b40a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 800b40e:	2d06      	cmp	r5, #6
 800b410:	6802      	ldr	r2, [r0, #0]
 800b412:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 800b416:	680c      	ldr	r4, [r1, #0]
 800b418:	d823      	bhi.n	800b462 <HAL_ADC_ConfigChannel+0x6a>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800b41a:	261f      	movs	r6, #31
 800b41c:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800b41e:	3b05      	subs	r3, #5
 800b420:	409e      	lsls	r6, r3
 800b422:	ea25 0506 	bic.w	r5, r5, r6
 800b426:	fa04 f303 	lsl.w	r3, r4, r3
 800b42a:	432b      	orrs	r3, r5
 800b42c:	6353      	str	r3, [r2, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800b42e:	2c09      	cmp	r4, #9
 800b430:	688b      	ldr	r3, [r1, #8]
 800b432:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 800b436:	f04f 0107 	mov.w	r1, #7
 800b43a:	d92a      	bls.n	800b492 <HAL_ADC_ConfigChannel+0x9a>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800b43c:	68d6      	ldr	r6, [r2, #12]
 800b43e:	3d1e      	subs	r5, #30
 800b440:	40a9      	lsls	r1, r5
 800b442:	ea26 0101 	bic.w	r1, r6, r1
 800b446:	40ab      	lsls	r3, r5
 800b448:	430b      	orrs	r3, r1
 800b44a:	60d3      	str	r3, [r2, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800b44c:	f1a4 0310 	sub.w	r3, r4, #16
 800b450:	2b01      	cmp	r3, #1
 800b452:	d926      	bls.n	800b4a2 <HAL_ADC_ConfigChannel+0xaa>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800b454:	2300      	movs	r3, #0
  __HAL_UNLOCK(hadc);
 800b456:	2200      	movs	r2, #0
 800b458:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
}
 800b45c:	4618      	mov	r0, r3
 800b45e:	b002      	add	sp, #8
 800b460:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 800b462:	2d0c      	cmp	r5, #12
 800b464:	f04f 051f 	mov.w	r5, #31
 800b468:	d809      	bhi.n	800b47e <HAL_ADC_ConfigChannel+0x86>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800b46a:	6b16      	ldr	r6, [r2, #48]	; 0x30
 800b46c:	3b23      	subs	r3, #35	; 0x23
 800b46e:	409d      	lsls	r5, r3
 800b470:	ea26 0505 	bic.w	r5, r6, r5
 800b474:	fa04 f303 	lsl.w	r3, r4, r3
 800b478:	432b      	orrs	r3, r5
 800b47a:	6313      	str	r3, [r2, #48]	; 0x30
 800b47c:	e7d7      	b.n	800b42e <HAL_ADC_ConfigChannel+0x36>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800b47e:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 800b480:	3b41      	subs	r3, #65	; 0x41
 800b482:	409d      	lsls	r5, r3
 800b484:	ea26 0505 	bic.w	r5, r6, r5
 800b488:	fa04 f303 	lsl.w	r3, r4, r3
 800b48c:	432b      	orrs	r3, r5
 800b48e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b490:	e7cd      	b.n	800b42e <HAL_ADC_ConfigChannel+0x36>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800b492:	6916      	ldr	r6, [r2, #16]
 800b494:	40a9      	lsls	r1, r5
 800b496:	ea26 0101 	bic.w	r1, r6, r1
 800b49a:	40ab      	lsls	r3, r5
 800b49c:	430b      	orrs	r3, r1
 800b49e:	6113      	str	r3, [r2, #16]
 800b4a0:	e7d4      	b.n	800b44c <HAL_ADC_ConfigChannel+0x54>
    if (hadc->Instance == ADC1)
 800b4a2:	4b11      	ldr	r3, [pc, #68]	; (800b4e8 <HAL_ADC_ConfigChannel+0xf0>)
 800b4a4:	429a      	cmp	r2, r3
 800b4a6:	d116      	bne.n	800b4d6 <HAL_ADC_ConfigChannel+0xde>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800b4a8:	6893      	ldr	r3, [r2, #8]
 800b4aa:	021b      	lsls	r3, r3, #8
 800b4ac:	d4d2      	bmi.n	800b454 <HAL_ADC_ConfigChannel+0x5c>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800b4ae:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800b4b0:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800b4b2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b4b6:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800b4b8:	d1cc      	bne.n	800b454 <HAL_ADC_ConfigChannel+0x5c>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800b4ba:	4b0c      	ldr	r3, [pc, #48]	; (800b4ec <HAL_ADC_ConfigChannel+0xf4>)
 800b4bc:	4a0c      	ldr	r2, [pc, #48]	; (800b4f0 <HAL_ADC_ConfigChannel+0xf8>)
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	fbb3 f2f2 	udiv	r2, r3, r2
 800b4c4:	230a      	movs	r3, #10
 800b4c6:	4353      	muls	r3, r2
            wait_loop_index--;
 800b4c8:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 800b4ca:	9b01      	ldr	r3, [sp, #4]
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d0c1      	beq.n	800b454 <HAL_ADC_ConfigChannel+0x5c>
            wait_loop_index--;
 800b4d0:	9b01      	ldr	r3, [sp, #4]
 800b4d2:	3b01      	subs	r3, #1
 800b4d4:	e7f8      	b.n	800b4c8 <HAL_ADC_ConfigChannel+0xd0>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800b4d6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b4d8:	f043 0320 	orr.w	r3, r3, #32
 800b4dc:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 800b4de:	2301      	movs	r3, #1
 800b4e0:	e7b9      	b.n	800b456 <HAL_ADC_ConfigChannel+0x5e>
  __HAL_LOCK(hadc);
 800b4e2:	2302      	movs	r3, #2
 800b4e4:	e7ba      	b.n	800b45c <HAL_ADC_ConfigChannel+0x64>
 800b4e6:	bf00      	nop
 800b4e8:	40012400 	.word	0x40012400
 800b4ec:	20000110 	.word	0x20000110
 800b4f0:	000f4240 	.word	0x000f4240

0800b4f4 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 800b4f4:	2300      	movs	r3, #0
{
 800b4f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 800b4f8:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 800b4fa:	6803      	ldr	r3, [r0, #0]
{
 800b4fc:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 800b4fe:	689a      	ldr	r2, [r3, #8]
 800b500:	07d2      	lsls	r2, r2, #31
 800b502:	d502      	bpl.n	800b50a <ADC_Enable+0x16>
  return HAL_OK;
 800b504:	2000      	movs	r0, #0
}
 800b506:	b002      	add	sp, #8
 800b508:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 800b50a:	689a      	ldr	r2, [r3, #8]
 800b50c:	f042 0201 	orr.w	r2, r2, #1
 800b510:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800b512:	4b12      	ldr	r3, [pc, #72]	; (800b55c <ADC_Enable+0x68>)
 800b514:	4a12      	ldr	r2, [pc, #72]	; (800b560 <ADC_Enable+0x6c>)
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 800b51c:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 800b51e:	9b01      	ldr	r3, [sp, #4]
 800b520:	b9c3      	cbnz	r3, 800b554 <ADC_Enable+0x60>
    tickstart = HAL_GetTick();
 800b522:	f7fc fffb 	bl	800851c <HAL_GetTick>
 800b526:	4606      	mov	r6, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 800b528:	6823      	ldr	r3, [r4, #0]
 800b52a:	689d      	ldr	r5, [r3, #8]
 800b52c:	f015 0501 	ands.w	r5, r5, #1
 800b530:	d1e8      	bne.n	800b504 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800b532:	f7fc fff3 	bl	800851c <HAL_GetTick>
 800b536:	1b80      	subs	r0, r0, r6
 800b538:	2802      	cmp	r0, #2
 800b53a:	d9f5      	bls.n	800b528 <ADC_Enable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b53c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 800b53e:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b542:	f043 0310 	orr.w	r3, r3, #16
 800b546:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b548:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 800b54a:	2001      	movs	r0, #1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b54c:	f043 0301 	orr.w	r3, r3, #1
 800b550:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b552:	e7d8      	b.n	800b506 <ADC_Enable+0x12>
      wait_loop_index--;
 800b554:	9b01      	ldr	r3, [sp, #4]
 800b556:	3b01      	subs	r3, #1
 800b558:	e7e0      	b.n	800b51c <ADC_Enable+0x28>
 800b55a:	bf00      	nop
 800b55c:	20000110 	.word	0x20000110
 800b560:	000f4240 	.word	0x000f4240

0800b564 <HAL_ADC_Start>:
  __HAL_LOCK(hadc);
 800b564:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 800b568:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 800b56a:	2b01      	cmp	r3, #1
{
 800b56c:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 800b56e:	d054      	beq.n	800b61a <HAL_ADC_Start+0xb6>
 800b570:	2301      	movs	r3, #1
 800b572:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 800b576:	f7ff ffbd 	bl	800b4f4 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 800b57a:	2800      	cmp	r0, #0
 800b57c:	d149      	bne.n	800b612 <HAL_ADC_Start+0xae>
    ADC_STATE_CLR_SET(hadc->State,
 800b57e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800b580:	4a27      	ldr	r2, [pc, #156]	; (800b620 <HAL_ADC_Start+0xbc>)
    ADC_STATE_CLR_SET(hadc->State,
 800b582:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b586:	f023 0301 	bic.w	r3, r3, #1
 800b58a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b58e:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800b590:	6823      	ldr	r3, [r4, #0]
 800b592:	4293      	cmp	r3, r2
 800b594:	d104      	bne.n	800b5a0 <HAL_ADC_Start+0x3c>
 800b596:	4923      	ldr	r1, [pc, #140]	; (800b624 <HAL_ADC_Start+0xc0>)
 800b598:	684a      	ldr	r2, [r1, #4]
 800b59a:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 800b59e:	d12e      	bne.n	800b5fe <HAL_ADC_Start+0x9a>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800b5a0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800b5a2:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800b5a6:	62a2      	str	r2, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800b5a8:	685a      	ldr	r2, [r3, #4]
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800b5aa:	0552      	lsls	r2, r2, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800b5ac:	bf41      	itttt	mi
 800b5ae:	6aa2      	ldrmi	r2, [r4, #40]	; 0x28
 800b5b0:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 800b5b4:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 800b5b8:	62a2      	strmi	r2, [r4, #40]	; 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800b5ba:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800b5bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800b5c0:	bf1c      	itt	ne
 800b5c2:	6ae2      	ldrne	r2, [r4, #44]	; 0x2c
 800b5c4:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 800b5c8:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800b5d0:	f06f 0202 	mvn.w	r2, #2
 800b5d4:	601a      	str	r2, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800b5d6:	689a      	ldr	r2, [r3, #8]
 800b5d8:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 800b5dc:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 800b5e0:	d113      	bne.n	800b60a <HAL_ADC_Start+0xa6>
 800b5e2:	4a0f      	ldr	r2, [pc, #60]	; (800b620 <HAL_ADC_Start+0xbc>)
 800b5e4:	4293      	cmp	r3, r2
 800b5e6:	d105      	bne.n	800b5f4 <HAL_ADC_Start+0x90>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800b5e8:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 800b5ec:	6852      	ldr	r2, [r2, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800b5ee:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 800b5f2:	d10a      	bne.n	800b60a <HAL_ADC_Start+0xa6>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800b5f4:	689a      	ldr	r2, [r3, #8]
 800b5f6:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800b5fa:	609a      	str	r2, [r3, #8]
}
 800b5fc:	bd10      	pop	{r4, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800b5fe:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800b600:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800b604:	62a2      	str	r2, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800b606:	684a      	ldr	r2, [r1, #4]
 800b608:	e7cf      	b.n	800b5aa <HAL_ADC_Start+0x46>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800b60a:	689a      	ldr	r2, [r3, #8]
 800b60c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800b610:	e7f3      	b.n	800b5fa <HAL_ADC_Start+0x96>
    __HAL_UNLOCK(hadc);
 800b612:	2300      	movs	r3, #0
 800b614:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 800b618:	e7f0      	b.n	800b5fc <HAL_ADC_Start+0x98>
  __HAL_LOCK(hadc);
 800b61a:	2002      	movs	r0, #2
 800b61c:	e7ee      	b.n	800b5fc <HAL_ADC_Start+0x98>
 800b61e:	bf00      	nop
 800b620:	40012800 	.word	0x40012800
 800b624:	40012400 	.word	0x40012400

0800b628 <HAL_ADC_Start_DMA>:
{
 800b628:	e92d 41d8 	stmdb	sp!, {r3, r4, r6, r7, r8, lr}
 800b62c:	4690      	mov	r8, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800b62e:	4b40      	ldr	r3, [pc, #256]	; (800b730 <HAL_ADC_Start_DMA+0x108>)
 800b630:	6802      	ldr	r2, [r0, #0]
{
 800b632:	4604      	mov	r4, r0
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800b634:	429a      	cmp	r2, r3
{
 800b636:	460f      	mov	r7, r1
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800b638:	d002      	beq.n	800b640 <HAL_ADC_Start_DMA+0x18>
 800b63a:	493e      	ldr	r1, [pc, #248]	; (800b734 <HAL_ADC_Start_DMA+0x10c>)
 800b63c:	428a      	cmp	r2, r1
 800b63e:	d103      	bne.n	800b648 <HAL_ADC_Start_DMA+0x20>
 800b640:	685b      	ldr	r3, [r3, #4]
 800b642:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 800b646:	d16e      	bne.n	800b726 <HAL_ADC_Start_DMA+0xfe>
    __HAL_LOCK(hadc);
 800b648:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800b64c:	2b01      	cmp	r3, #1
 800b64e:	d06c      	beq.n	800b72a <HAL_ADC_Start_DMA+0x102>
 800b650:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 800b652:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
 800b654:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    tmp_hal_status = ADC_Enable(hadc);
 800b658:	f7ff ff4c 	bl	800b4f4 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 800b65c:	4606      	mov	r6, r0
 800b65e:	2800      	cmp	r0, #0
 800b660:	d15d      	bne.n	800b71e <HAL_ADC_Start_DMA+0xf6>
      ADC_STATE_CLR_SET(hadc->State,
 800b662:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800b664:	6821      	ldr	r1, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 800b666:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800b66a:	4b32      	ldr	r3, [pc, #200]	; (800b734 <HAL_ADC_Start_DMA+0x10c>)
      ADC_STATE_CLR_SET(hadc->State,
 800b66c:	f020 0001 	bic.w	r0, r0, #1
 800b670:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800b674:	4299      	cmp	r1, r3
      ADC_STATE_CLR_SET(hadc->State,
 800b676:	62a0      	str	r0, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800b678:	d104      	bne.n	800b684 <HAL_ADC_Start_DMA+0x5c>
 800b67a:	4a2d      	ldr	r2, [pc, #180]	; (800b730 <HAL_ADC_Start_DMA+0x108>)
 800b67c:	6853      	ldr	r3, [r2, #4]
 800b67e:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 800b682:	d13e      	bne.n	800b702 <HAL_ADC_Start_DMA+0xda>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800b684:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b686:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b68a:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800b68c:	684b      	ldr	r3, [r1, #4]
 800b68e:	055a      	lsls	r2, r3, #21
 800b690:	d505      	bpl.n	800b69e <HAL_ADC_Start_DMA+0x76>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800b692:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b694:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800b698:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b69c:	62a3      	str	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800b69e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800b6a0:	6a20      	ldr	r0, [r4, #32]
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800b6a2:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800b6a6:	bf18      	it	ne
 800b6a8:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800b6aa:	463a      	mov	r2, r7
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800b6ac:	bf18      	it	ne
 800b6ae:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 800b6b2:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800b6ba:	4b1f      	ldr	r3, [pc, #124]	; (800b738 <HAL_ADC_Start_DMA+0x110>)
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800b6bc:	314c      	adds	r1, #76	; 0x4c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800b6be:	6283      	str	r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800b6c0:	4b1e      	ldr	r3, [pc, #120]	; (800b73c <HAL_ADC_Start_DMA+0x114>)
 800b6c2:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800b6c4:	4b1e      	ldr	r3, [pc, #120]	; (800b740 <HAL_ADC_Start_DMA+0x118>)
 800b6c6:	6303      	str	r3, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800b6c8:	f06f 0302 	mvn.w	r3, #2
 800b6cc:	f841 3c4c 	str.w	r3, [r1, #-76]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800b6d0:	f851 3c44 	ldr.w	r3, [r1, #-68]
 800b6d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b6d8:	f841 3c44 	str.w	r3, [r1, #-68]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800b6dc:	4643      	mov	r3, r8
 800b6de:	f7fe f90f 	bl	8009900 <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800b6e2:	6823      	ldr	r3, [r4, #0]
 800b6e4:	689a      	ldr	r2, [r3, #8]
 800b6e6:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 800b6ea:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800b6ee:	689a      	ldr	r2, [r3, #8]
 800b6f0:	bf0c      	ite	eq
 800b6f2:	f442 02a0 	orreq.w	r2, r2, #5242880	; 0x500000
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800b6f6:	f442 1280 	orrne.w	r2, r2, #1048576	; 0x100000
 800b6fa:	609a      	str	r2, [r3, #8]
}
 800b6fc:	4630      	mov	r0, r6
 800b6fe:	e8bd 81d8 	ldmia.w	sp!, {r3, r4, r6, r7, r8, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800b702:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b704:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b708:	62a3      	str	r3, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800b70a:	6853      	ldr	r3, [r2, #4]
 800b70c:	055b      	lsls	r3, r3, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800b70e:	bf41      	itttt	mi
 800b710:	6aa0      	ldrmi	r0, [r4, #40]	; 0x28
 800b712:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 800b716:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 800b71a:	62a0      	strmi	r0, [r4, #40]	; 0x28
 800b71c:	e7bf      	b.n	800b69e <HAL_ADC_Start_DMA+0x76>
      __HAL_UNLOCK(hadc);
 800b71e:	2300      	movs	r3, #0
 800b720:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 800b724:	e7ea      	b.n	800b6fc <HAL_ADC_Start_DMA+0xd4>
    tmp_hal_status = HAL_ERROR;
 800b726:	2601      	movs	r6, #1
 800b728:	e7e8      	b.n	800b6fc <HAL_ADC_Start_DMA+0xd4>
    __HAL_LOCK(hadc);
 800b72a:	2602      	movs	r6, #2
 800b72c:	e7e6      	b.n	800b6fc <HAL_ADC_Start_DMA+0xd4>
 800b72e:	bf00      	nop
 800b730:	40012400 	.word	0x40012400
 800b734:	40012800 	.word	0x40012800
 800b738:	0800b385 	.word	0x0800b385
 800b73c:	0800b3d5 	.word	0x0800b3d5
 800b740:	0800b3df 	.word	0x0800b3df

0800b744 <ADC_ConversionStop_Disable>:
{
 800b744:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 800b746:	6803      	ldr	r3, [r0, #0]
{
 800b748:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 800b74a:	689a      	ldr	r2, [r3, #8]
 800b74c:	07d2      	lsls	r2, r2, #31
 800b74e:	d401      	bmi.n	800b754 <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 800b750:	2000      	movs	r0, #0
}
 800b752:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 800b754:	689a      	ldr	r2, [r3, #8]
 800b756:	f022 0201 	bic.w	r2, r2, #1
 800b75a:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800b75c:	f7fc fede 	bl	800851c <HAL_GetTick>
 800b760:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 800b762:	6823      	ldr	r3, [r4, #0]
 800b764:	689b      	ldr	r3, [r3, #8]
 800b766:	07db      	lsls	r3, r3, #31
 800b768:	d5f2      	bpl.n	800b750 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800b76a:	f7fc fed7 	bl	800851c <HAL_GetTick>
 800b76e:	1b40      	subs	r0, r0, r5
 800b770:	2802      	cmp	r0, #2
 800b772:	d9f6      	bls.n	800b762 <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b774:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b776:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b778:	f043 0310 	orr.w	r3, r3, #16
 800b77c:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b77e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b780:	f043 0301 	orr.w	r3, r3, #1
 800b784:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b786:	e7e4      	b.n	800b752 <ADC_ConversionStop_Disable+0xe>

0800b788 <HAL_ADC_Init>:
{
 800b788:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 800b78a:	4604      	mov	r4, r0
 800b78c:	2800      	cmp	r0, #0
 800b78e:	d070      	beq.n	800b872 <HAL_ADC_Init+0xea>
  if (hadc->State == HAL_ADC_STATE_RESET)
 800b790:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b792:	b923      	cbnz	r3, 800b79e <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 800b794:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 800b796:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 800b79a:	f7ff fd4f 	bl	800b23c <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800b79e:	4620      	mov	r0, r4
 800b7a0:	f7ff ffd0 	bl	800b744 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800b7a4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b7a6:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 800b7aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800b7ac:	d163      	bne.n	800b876 <HAL_ADC_Init+0xee>
 800b7ae:	2800      	cmp	r0, #0
 800b7b0:	d161      	bne.n	800b876 <HAL_ADC_Init+0xee>
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 800b7b2:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 800b7b4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 800b7b8:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 800b7ba:	f023 0302 	bic.w	r3, r3, #2
 800b7be:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 800b7c2:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800b7c4:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 800b7c6:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 800b7c8:	68e3      	ldr	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800b7ca:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 800b7ce:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800b7d2:	d037      	beq.n	800b844 <HAL_ADC_Init+0xbc>
 800b7d4:	2901      	cmp	r1, #1
 800b7d6:	bf14      	ite	ne
 800b7d8:	4606      	movne	r6, r0
 800b7da:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800b7de:	6965      	ldr	r5, [r4, #20]
 800b7e0:	2d01      	cmp	r5, #1
 800b7e2:	d106      	bne.n	800b7f2 <HAL_ADC_Init+0x6a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800b7e4:	bb83      	cbnz	r3, 800b848 <HAL_ADC_Init+0xc0>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800b7e6:	69a3      	ldr	r3, [r4, #24]
 800b7e8:	3b01      	subs	r3, #1
 800b7ea:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 800b7ee:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 800b7f2:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800b7f4:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 800b7f8:	685d      	ldr	r5, [r3, #4]
 800b7fa:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 800b7fe:	ea45 0506 	orr.w	r5, r5, r6
 800b802:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 800b804:	689e      	ldr	r6, [r3, #8]
 800b806:	4d1e      	ldr	r5, [pc, #120]	; (800b880 <HAL_ADC_Init+0xf8>)
 800b808:	ea05 0506 	and.w	r5, r5, r6
 800b80c:	ea45 0502 	orr.w	r5, r5, r2
 800b810:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800b812:	d001      	beq.n	800b818 <HAL_ADC_Init+0x90>
 800b814:	2901      	cmp	r1, #1
 800b816:	d120      	bne.n	800b85a <HAL_ADC_Init+0xd2>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800b818:	6921      	ldr	r1, [r4, #16]
 800b81a:	3901      	subs	r1, #1
 800b81c:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 800b81e:	6add      	ldr	r5, [r3, #44]	; 0x2c
 800b820:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 800b824:	4329      	orrs	r1, r5
 800b826:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800b828:	6899      	ldr	r1, [r3, #8]
 800b82a:	4b16      	ldr	r3, [pc, #88]	; (800b884 <HAL_ADC_Init+0xfc>)
 800b82c:	400b      	ands	r3, r1
 800b82e:	429a      	cmp	r2, r3
 800b830:	d115      	bne.n	800b85e <HAL_ADC_Init+0xd6>
      ADC_CLEAR_ERRORCODE(hadc);
 800b832:	2300      	movs	r3, #0
 800b834:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 800b836:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b838:	f023 0303 	bic.w	r3, r3, #3
 800b83c:	f043 0301 	orr.w	r3, r3, #1
 800b840:	62a3      	str	r3, [r4, #40]	; 0x28
}
 800b842:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800b844:	460e      	mov	r6, r1
 800b846:	e7ca      	b.n	800b7de <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800b848:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b84a:	f043 0320 	orr.w	r3, r3, #32
 800b84e:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b850:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b852:	f043 0301 	orr.w	r3, r3, #1
 800b856:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b858:	e7cb      	b.n	800b7f2 <HAL_ADC_Init+0x6a>
  uint32_t tmp_sqr1 = 0U;
 800b85a:	2100      	movs	r1, #0
 800b85c:	e7df      	b.n	800b81e <HAL_ADC_Init+0x96>
      ADC_STATE_CLR_SET(hadc->State,
 800b85e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b860:	f023 0312 	bic.w	r3, r3, #18
 800b864:	f043 0310 	orr.w	r3, r3, #16
 800b868:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b86a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b86c:	f043 0301 	orr.w	r3, r3, #1
 800b870:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 800b872:	2001      	movs	r0, #1
 800b874:	e7e5      	b.n	800b842 <HAL_ADC_Init+0xba>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b876:	f043 0310 	orr.w	r3, r3, #16
 800b87a:	62a3      	str	r3, [r4, #40]	; 0x28
 800b87c:	e7f9      	b.n	800b872 <HAL_ADC_Init+0xea>
 800b87e:	bf00      	nop
 800b880:	ffe1f7fd 	.word	0xffe1f7fd
 800b884:	ff1f0efe 	.word	0xff1f0efe

0800b888 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 800b888:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 800b88c:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 800b88e:	2b01      	cmp	r3, #1
{
 800b890:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 800b892:	d011      	beq.n	800b8b8 <HAL_ADC_Stop+0x30>
 800b894:	2301      	movs	r3, #1
 800b896:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800b89a:	f7ff ff53 	bl	800b744 <ADC_ConversionStop_Disable>
  if (tmp_hal_status == HAL_OK)
 800b89e:	b938      	cbnz	r0, 800b8b0 <HAL_ADC_Stop+0x28>
    ADC_STATE_CLR_SET(hadc->State,
 800b8a0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b8a2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800b8a6:	f023 0301 	bic.w	r3, r3, #1
 800b8aa:	f043 0301 	orr.w	r3, r3, #1
 800b8ae:	62a3      	str	r3, [r4, #40]	; 0x28
  __HAL_UNLOCK(hadc);
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 800b8b6:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 800b8b8:	2002      	movs	r0, #2
 800b8ba:	e7fc      	b.n	800b8b6 <HAL_ADC_Stop+0x2e>

0800b8bc <HAL_ADCEx_Calibration_Start>:
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 800b8bc:	2300      	movs	r3, #0
{
 800b8be:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 800b8c0:	9301      	str	r3, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800b8c2:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 800b8c6:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 800b8c8:	2b01      	cmp	r3, #1
 800b8ca:	d05a      	beq.n	800b982 <HAL_ADCEx_Calibration_Start+0xc6>
 800b8cc:	2301      	movs	r3, #1
 800b8ce:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800b8d2:	f7ff ff37 	bl	800b744 <ADC_ConversionStop_Disable>
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800b8d6:	4605      	mov	r5, r0
 800b8d8:	2800      	cmp	r0, #0
 800b8da:	d132      	bne.n	800b942 <HAL_ADCEx_Calibration_Start+0x86>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800b8dc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800b8de:	2002      	movs	r0, #2
    ADC_STATE_CLR_SET(hadc->State,
 800b8e0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800b8e4:	f023 0302 	bic.w	r3, r3, #2
 800b8e8:	f043 0302 	orr.w	r3, r3, #2
 800b8ec:	62a3      	str	r3, [r4, #40]	; 0x28
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800b8ee:	4b26      	ldr	r3, [pc, #152]	; (800b988 <HAL_ADCEx_Calibration_Start+0xcc>)
 800b8f0:	681e      	ldr	r6, [r3, #0]
 800b8f2:	f000 f84b 	bl	800b98c <HAL_RCCEx_GetPeriphCLKFreq>
 800b8f6:	fbb6 f0f0 	udiv	r0, r6, r0
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 800b8fa:	0040      	lsls	r0, r0, #1
    wait_loop_index = ((SystemCoreClock
 800b8fc:	9001      	str	r0, [sp, #4]

    while(wait_loop_index != 0U)
 800b8fe:	9b01      	ldr	r3, [sp, #4]
 800b900:	bb1b      	cbnz	r3, 800b94a <HAL_ADCEx_Calibration_Start+0x8e>
    {
      wait_loop_index--;
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 800b902:	4620      	mov	r0, r4
 800b904:	f7ff fdf6 	bl	800b4f4 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 800b908:	6822      	ldr	r2, [r4, #0]
 800b90a:	6893      	ldr	r3, [r2, #8]
 800b90c:	f043 0308 	orr.w	r3, r3, #8
 800b910:	6093      	str	r3, [r2, #8]
    
    tickstart = HAL_GetTick();  
 800b912:	f7fc fe03 	bl	800851c <HAL_GetTick>
 800b916:	4606      	mov	r6, r0

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800b918:	6823      	ldr	r3, [r4, #0]
 800b91a:	689a      	ldr	r2, [r3, #8]
 800b91c:	0712      	lsls	r2, r2, #28
 800b91e:	d418      	bmi.n	800b952 <HAL_ADCEx_Calibration_Start+0x96>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 800b920:	689a      	ldr	r2, [r3, #8]
 800b922:	f042 0204 	orr.w	r2, r2, #4
 800b926:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800b928:	f7fc fdf8 	bl	800851c <HAL_GetTick>
 800b92c:	4606      	mov	r6, r0

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800b92e:	6823      	ldr	r3, [r4, #0]
 800b930:	689b      	ldr	r3, [r3, #8]
 800b932:	075b      	lsls	r3, r3, #29
 800b934:	d41f      	bmi.n	800b976 <HAL_ADCEx_Calibration_Start+0xba>
        return HAL_ERROR;
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800b936:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b938:	f023 0303 	bic.w	r3, r3, #3
 800b93c:	f043 0301 	orr.w	r3, r3, #1
 800b940:	62a3      	str	r3, [r4, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800b942:	2300      	movs	r3, #0
 800b944:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800b948:	e012      	b.n	800b970 <HAL_ADCEx_Calibration_Start+0xb4>
      wait_loop_index--;
 800b94a:	9b01      	ldr	r3, [sp, #4]
 800b94c:	3b01      	subs	r3, #1
 800b94e:	9301      	str	r3, [sp, #4]
 800b950:	e7d5      	b.n	800b8fe <HAL_ADCEx_Calibration_Start+0x42>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800b952:	f7fc fde3 	bl	800851c <HAL_GetTick>
 800b956:	1b80      	subs	r0, r0, r6
 800b958:	280a      	cmp	r0, #10
 800b95a:	d9dd      	bls.n	800b918 <HAL_ADCEx_Calibration_Start+0x5c>
        ADC_STATE_CLR_SET(hadc->State,
 800b95c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        return HAL_ERROR;
 800b95e:	2501      	movs	r5, #1
        ADC_STATE_CLR_SET(hadc->State,
 800b960:	f023 0312 	bic.w	r3, r3, #18
 800b964:	f043 0310 	orr.w	r3, r3, #16
 800b968:	62a3      	str	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 800b96a:	2300      	movs	r3, #0
 800b96c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 800b970:	4628      	mov	r0, r5
 800b972:	b002      	add	sp, #8
 800b974:	bd70      	pop	{r4, r5, r6, pc}
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800b976:	f7fc fdd1 	bl	800851c <HAL_GetTick>
 800b97a:	1b80      	subs	r0, r0, r6
 800b97c:	280a      	cmp	r0, #10
 800b97e:	d9d6      	bls.n	800b92e <HAL_ADCEx_Calibration_Start+0x72>
 800b980:	e7ec      	b.n	800b95c <HAL_ADCEx_Calibration_Start+0xa0>
  __HAL_LOCK(hadc);
 800b982:	2502      	movs	r5, #2
 800b984:	e7f4      	b.n	800b970 <HAL_ADCEx_Calibration_Start+0xb4>
 800b986:	bf00      	nop
 800b988:	20000110 	.word	0x20000110

0800b98c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800b98c:	b570      	push	{r4, r5, r6, lr}
 800b98e:	4604      	mov	r4, r0
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800b990:	4b34      	ldr	r3, [pc, #208]	; (800ba64 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>)
{
 800b992:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800b994:	ad02      	add	r5, sp, #8
 800b996:	f103 0610 	add.w	r6, r3, #16
 800b99a:	462a      	mov	r2, r5
 800b99c:	6818      	ldr	r0, [r3, #0]
 800b99e:	6859      	ldr	r1, [r3, #4]
 800b9a0:	3308      	adds	r3, #8
 800b9a2:	c203      	stmia	r2!, {r0, r1}
 800b9a4:	42b3      	cmp	r3, r6
 800b9a6:	4615      	mov	r5, r2
 800b9a8:	d1f7      	bne.n	800b99a <HAL_RCCEx_GetPeriphCLKFreq+0xe>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800b9aa:	f240 2301 	movw	r3, #513	; 0x201
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 800b9ae:	2c02      	cmp	r4, #2
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800b9b0:	f8ad 3004 	strh.w	r3, [sp, #4]
  switch (PeriphClk)
 800b9b4:	d047      	beq.n	800ba46 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 800b9b6:	2c10      	cmp	r4, #16
 800b9b8:	d017      	beq.n	800b9ea <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 800b9ba:	2c01      	cmp	r4, #1
 800b9bc:	d14f      	bne.n	800ba5e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800b9be:	f240 3102 	movw	r1, #770	; 0x302
      temp_reg = RCC->BDCR;
 800b9c2:	4a29      	ldr	r2, [pc, #164]	; (800ba68 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
 800b9c4:	6a13      	ldr	r3, [r2, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800b9c6:	4019      	ands	r1, r3
 800b9c8:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
 800b9cc:	d044      	beq.n	800ba58 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
      {
        frequency = LSE_VALUE;
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800b9ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b9d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b9d6:	d12d      	bne.n	800ba34 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
      {
        frequency = LSI_VALUE;
 800b9d8:	f649 4040 	movw	r0, #40000	; 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800b9dc:	6a53      	ldr	r3, [r2, #36]	; 0x24
        frequency = LSI_VALUE;
 800b9de:	f013 0f02 	tst.w	r3, #2
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
      {
        frequency = HSE_VALUE / 128U;
 800b9e2:	bf08      	it	eq
 800b9e4:	2000      	moveq	r0, #0
    {
      break;
    }
  }
  return(frequency);
}
 800b9e6:	b006      	add	sp, #24
 800b9e8:	bd70      	pop	{r4, r5, r6, pc}
      temp_reg = RCC->CFGR;
 800b9ea:	4b1f      	ldr	r3, [pc, #124]	; (800ba68 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
 800b9ec:	6859      	ldr	r1, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLLON))
 800b9ee:	6818      	ldr	r0, [r3, #0]
 800b9f0:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 800b9f4:	d0f7      	beq.n	800b9e6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800b9f6:	f3c1 4283 	ubfx	r2, r1, #18, #4
 800b9fa:	a806      	add	r0, sp, #24
 800b9fc:	4402      	add	r2, r0
 800b9fe:	f812 0c10 	ldrb.w	r0, [r2, #-16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800ba02:	03ca      	lsls	r2, r1, #15
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800ba04:	bf41      	itttt	mi
 800ba06:	685a      	ldrmi	r2, [r3, #4]
 800ba08:	a906      	addmi	r1, sp, #24
 800ba0a:	f3c2 4240 	ubfxmi	r2, r2, #17, #1
 800ba0e:	1852      	addmi	r2, r2, r1
 800ba10:	bf44      	itt	mi
 800ba12:	f812 1c14 	ldrbmi.w	r1, [r2, #-20]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800ba16:	4a15      	ldrmi	r2, [pc, #84]	; (800ba6c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800ba18:	685b      	ldr	r3, [r3, #4]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800ba1a:	bf4c      	ite	mi
 800ba1c:	fbb2 f2f1 	udivmi	r2, r2, r1
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800ba20:	4a13      	ldrpl	r2, [pc, #76]	; (800ba70 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800ba22:	025b      	lsls	r3, r3, #9
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800ba24:	fb02 f000 	mul.w	r0, r2, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800ba28:	d4dd      	bmi.n	800b9e6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          frequency = (pllclk * 2) / 3;
 800ba2a:	2303      	movs	r3, #3
 800ba2c:	0040      	lsls	r0, r0, #1
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800ba2e:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 800ba32:	e7d8      	b.n	800b9e6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800ba34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ba38:	d111      	bne.n	800ba5e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 800ba3a:	6813      	ldr	r3, [r2, #0]
        frequency = HSE_VALUE / 128U;
 800ba3c:	f24f 4024 	movw	r0, #62500	; 0xf424
 800ba40:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800ba44:	e7cd      	b.n	800b9e2 <HAL_RCCEx_GetPeriphCLKFreq+0x56>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800ba46:	f7fd fea7 	bl	8009798 <HAL_RCC_GetPCLK2Freq>
 800ba4a:	4b07      	ldr	r3, [pc, #28]	; (800ba68 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
 800ba4c:	685b      	ldr	r3, [r3, #4]
 800ba4e:	f3c3 3381 	ubfx	r3, r3, #14, #2
 800ba52:	3301      	adds	r3, #1
 800ba54:	005b      	lsls	r3, r3, #1
 800ba56:	e7ea      	b.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
        frequency = LSE_VALUE;
 800ba58:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800ba5c:	e7c3      	b.n	800b9e6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        frequency = 0U;
 800ba5e:	2000      	movs	r0, #0
 800ba60:	e7c1      	b.n	800b9e6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 800ba62:	bf00      	nop
 800ba64:	0800e3b4 	.word	0x0800e3b4
 800ba68:	40021000 	.word	0x40021000
 800ba6c:	007a1200 	.word	0x007a1200
 800ba70:	003d0900 	.word	0x003d0900

0800ba74 <sscanf>:
 */

#include <stdio.h>

int sscanf(const char *str, const char *format, ...)
{
 800ba74:	b40e      	push	{r1, r2, r3}
 800ba76:	b503      	push	{r0, r1, lr}
 800ba78:	aa03      	add	r2, sp, #12
 800ba7a:	f852 1b04 	ldr.w	r1, [r2], #4
	va_list ap;
	int rv;

	va_start(ap, format);
 800ba7e:	9201      	str	r2, [sp, #4]
	rv = vsscanf(str, format, ap);
 800ba80:	f7ff f9b2 	bl	800ade8 <vsscanf>
	va_end(ap);

	return rv;
}
 800ba84:	b002      	add	sp, #8
 800ba86:	f85d eb04 	ldr.w	lr, [sp], #4
 800ba8a:	b003      	add	sp, #12
 800ba8c:	4770      	bx	lr
	...

0800ba90 <strntoumax>:
		return -1;
	}
}

uintmax_t strntoumax(const char *nptr, char **endptr, int base, size_t n)
{
 800ba90:	468c      	mov	ip, r1
 800ba92:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba96:	4e4f      	ldr	r6, [pc, #316]	; (800bbd4 <strntoumax+0x144>)
 800ba98:	4604      	mov	r4, r0
	int minus = 0;
	uintmax_t v = 0;
	int d;

	while (n && isspace((unsigned char)*nptr)) {
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	f000 8090 	beq.w	800bbc0 <strntoumax+0x130>
 800baa0:	f810 5b01 	ldrb.w	r5, [r0], #1
 800baa4:	f1a5 0109 	sub.w	r1, r5, #9
 800baa8:	b2c9      	uxtb	r1, r1
 800baaa:	2917      	cmp	r1, #23
 800baac:	f200 8084 	bhi.w	800bbb8 <strntoumax+0x128>
 800bab0:	fa26 f101 	lsr.w	r1, r6, r1
 800bab4:	07cf      	lsls	r7, r1, #31
 800bab6:	d41d      	bmi.n	800baf4 <strntoumax+0x64>
	}

	/* Single optional + or - */
	if (n) {
		char c = *nptr;
		if (c == '-' || c == '+') {
 800bab8:	2d2b      	cmp	r5, #43	; 0x2b
 800baba:	d11d      	bne.n	800baf8 <strntoumax+0x68>
			minus = (c == '-');
 800babc:	f1a5 012d 	sub.w	r1, r5, #45	; 0x2d
 800bac0:	424d      	negs	r5, r1
 800bac2:	414d      	adcs	r5, r1
			nptr++;
 800bac4:	3401      	adds	r4, #1
			n--;
 800bac6:	3b01      	subs	r3, #1
		}
	}

	if (base == 0) {
 800bac8:	bb0a      	cbnz	r2, 800bb0e <strntoumax+0x7e>
		if (n >= 2 && nptr[0] == '0' &&
 800baca:	2b01      	cmp	r3, #1
 800bacc:	d916      	bls.n	800bafc <strntoumax+0x6c>
 800bace:	7822      	ldrb	r2, [r4, #0]
 800bad0:	2a30      	cmp	r2, #48	; 0x30
 800bad2:	d115      	bne.n	800bb00 <strntoumax+0x70>
		    (nptr[1] == 'x' || nptr[1] == 'X')) {
 800bad4:	7862      	ldrb	r2, [r4, #1]
 800bad6:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800bada:	2a58      	cmp	r2, #88	; 0x58
 800badc:	d110      	bne.n	800bb00 <strntoumax+0x70>
			n -= 2;
			nptr += 2;
			base = 16;
 800bade:	2210      	movs	r2, #16
			n -= 2;
 800bae0:	3b02      	subs	r3, #2
			nptr += 2;
 800bae2:	3402      	adds	r4, #2
 800bae4:	46a0      	mov	r8, r4
 800bae6:	4423      	add	r3, r4
			base = 16;
 800bae8:	f04f 0a00 	mov.w	sl, #0
 800baec:	f04f 0b00 	mov.w	fp, #0
			nptr += 2;
		}
	}

	while (n && (d = digitval(*nptr)) >= 0 && d < base) {
		v = v * base + d;
 800baf0:	17d7      	asrs	r7, r2, #31
 800baf2:	e026      	b.n	800bb42 <strntoumax+0xb2>
		n--;
 800baf4:	3b01      	subs	r3, #1
 800baf6:	e7cf      	b.n	800ba98 <strntoumax+0x8>
	int minus = 0;
 800baf8:	2500      	movs	r5, #0
 800bafa:	e7e5      	b.n	800bac8 <strntoumax+0x38>
		} else if (n >= 1 && nptr[0] == '0') {
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d04e      	beq.n	800bb9e <strntoumax+0x10e>
 800bb00:	7822      	ldrb	r2, [r4, #0]
 800bb02:	2a30      	cmp	r2, #48	; 0x30
 800bb04:	d13f      	bne.n	800bb86 <strntoumax+0xf6>
			n--;
 800bb06:	3b01      	subs	r3, #1
			nptr++;
 800bb08:	3401      	adds	r4, #1
			base = 8;
 800bb0a:	2208      	movs	r2, #8
 800bb0c:	e7ea      	b.n	800bae4 <strntoumax+0x54>
	} else if (base == 16) {
 800bb0e:	2a10      	cmp	r2, #16
 800bb10:	d1e8      	bne.n	800bae4 <strntoumax+0x54>
		if (n >= 2 && nptr[0] == '0' &&
 800bb12:	2b01      	cmp	r3, #1
 800bb14:	d9e6      	bls.n	800bae4 <strntoumax+0x54>
 800bb16:	7821      	ldrb	r1, [r4, #0]
 800bb18:	2930      	cmp	r1, #48	; 0x30
 800bb1a:	d1e3      	bne.n	800bae4 <strntoumax+0x54>
		    (nptr[1] == 'x' || nptr[1] == 'X')) {
 800bb1c:	7861      	ldrb	r1, [r4, #1]
 800bb1e:	f001 01df 	and.w	r1, r1, #223	; 0xdf
 800bb22:	2958      	cmp	r1, #88	; 0x58
 800bb24:	d1de      	bne.n	800bae4 <strntoumax+0x54>
			n -= 2;
 800bb26:	3b02      	subs	r3, #2
			nptr += 2;
 800bb28:	3402      	adds	r4, #2
 800bb2a:	e7db      	b.n	800bae4 <strntoumax+0x54>
		v = v * base + d;
 800bb2c:	fb02 f40b 	mul.w	r4, r2, fp
 800bb30:	fba2 010a 	umull	r0, r1, r2, sl
 800bb34:	fb0a 4407 	mla	r4, sl, r7, r4
 800bb38:	eb10 0a0e 	adds.w	sl, r0, lr
 800bb3c:	4421      	add	r1, r4
 800bb3e:	eb41 7bee 	adc.w	fp, r1, lr, asr #31
	while (n && (d = digitval(*nptr)) >= 0 && d < base) {
 800bb42:	4598      	cmp	r8, r3
 800bb44:	4644      	mov	r4, r8
 800bb46:	d012      	beq.n	800bb6e <strntoumax+0xde>
 800bb48:	f818 9b01 	ldrb.w	r9, [r8], #1
	if (ch >= '0' && ch <= '9') {
 800bb4c:	f1a9 0e30 	sub.w	lr, r9, #48	; 0x30
 800bb50:	f1be 0f09 	cmp.w	lr, #9
 800bb54:	d906      	bls.n	800bb64 <strntoumax+0xd4>
	} else if (ch >= 'A' && ch <= 'Z') {
 800bb56:	f1a9 0e41 	sub.w	lr, r9, #65	; 0x41
 800bb5a:	f1be 0f19 	cmp.w	lr, #25
 800bb5e:	d816      	bhi.n	800bb8e <strntoumax+0xfe>
		return ch - 'A' + 10;
 800bb60:	f1a9 0e37 	sub.w	lr, r9, #55	; 0x37
	while (n && (d = digitval(*nptr)) >= 0 && d < base) {
 800bb64:	f1be 0f00 	cmp.w	lr, #0
 800bb68:	db01      	blt.n	800bb6e <strntoumax+0xde>
 800bb6a:	4572      	cmp	r2, lr
 800bb6c:	dcde      	bgt.n	800bb2c <strntoumax+0x9c>
		n--;
		nptr++;
	}

	if (endptr)
 800bb6e:	f1bc 0f00 	cmp.w	ip, #0
 800bb72:	d11e      	bne.n	800bbb2 <strntoumax+0x122>
		*endptr = (char *)nptr;

	return minus ? -v : v;
 800bb74:	b11d      	cbz	r5, 800bb7e <strntoumax+0xee>
 800bb76:	f1da 0a00 	rsbs	sl, sl, #0
 800bb7a:	eb6b 0b4b 	sbc.w	fp, fp, fp, lsl #1
}
 800bb7e:	4650      	mov	r0, sl
 800bb80:	4659      	mov	r1, fp
 800bb82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			base = 10;
 800bb86:	220a      	movs	r2, #10
 800bb88:	e7ac      	b.n	800bae4 <strntoumax+0x54>
	int minus = 0;
 800bb8a:	461d      	mov	r5, r3
 800bb8c:	e7aa      	b.n	800bae4 <strntoumax+0x54>
	} else if (ch >= 'a' && ch <= 'z') {
 800bb8e:	f1a9 0e61 	sub.w	lr, r9, #97	; 0x61
 800bb92:	f1be 0f19 	cmp.w	lr, #25
 800bb96:	d8ea      	bhi.n	800bb6e <strntoumax+0xde>
		return ch - 'a' + 10;
 800bb98:	f1a9 0e57 	sub.w	lr, r9, #87	; 0x57
 800bb9c:	e7e2      	b.n	800bb64 <strntoumax+0xd4>
 800bb9e:	f04f 0a00 	mov.w	sl, #0
 800bba2:	f04f 0b00 	mov.w	fp, #0
 800bba6:	e7e2      	b.n	800bb6e <strntoumax+0xde>
	int minus = 0;
 800bba8:	4615      	mov	r5, r2
	if (endptr)
 800bbaa:	f04f 0a00 	mov.w	sl, #0
 800bbae:	f04f 0b00 	mov.w	fp, #0
		*endptr = (char *)nptr;
 800bbb2:	f8cc 4000 	str.w	r4, [ip]
 800bbb6:	e7dd      	b.n	800bb74 <strntoumax+0xe4>
		if (c == '-' || c == '+') {
 800bbb8:	2d2d      	cmp	r5, #45	; 0x2d
 800bbba:	f43f af7f 	beq.w	800babc <strntoumax+0x2c>
 800bbbe:	e77b      	b.n	800bab8 <strntoumax+0x28>
	if (base == 0) {
 800bbc0:	2a00      	cmp	r2, #0
 800bbc2:	d1e2      	bne.n	800bb8a <strntoumax+0xfa>
	if (endptr)
 800bbc4:	f1bc 0f00 	cmp.w	ip, #0
 800bbc8:	d1ee      	bne.n	800bba8 <strntoumax+0x118>
 800bbca:	f04f 0a00 	mov.w	sl, #0
 800bbce:	f04f 0b00 	mov.w	fp, #0
 800bbd2:	e7d4      	b.n	800bb7e <strntoumax+0xee>
 800bbd4:	00800013 	.word	0x00800013

0800bbd8 <vsprintf>:
#include <unistd.h>
#include <stdint.h>

int vsprintf(char *buffer, const char *format, va_list ap)
{
	return vsnprintf(buffer, SIZE_MAX/2, format, ap);
 800bbd8:	4613      	mov	r3, r2
 800bbda:	460a      	mov	r2, r1
 800bbdc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bbe0:	f7fb bca2 	b.w	8007528 <vsnprintf>

0800bbe4 <__aeabi_uldivmod>:
 800bbe4:	b953      	cbnz	r3, 800bbfc <__aeabi_uldivmod+0x18>
 800bbe6:	b94a      	cbnz	r2, 800bbfc <__aeabi_uldivmod+0x18>
 800bbe8:	2900      	cmp	r1, #0
 800bbea:	bf08      	it	eq
 800bbec:	2800      	cmpeq	r0, #0
 800bbee:	bf1c      	itt	ne
 800bbf0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800bbf4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800bbf8:	f000 b974 	b.w	800bee4 <__aeabi_idiv0>
 800bbfc:	f1ad 0c08 	sub.w	ip, sp, #8
 800bc00:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800bc04:	f000 f806 	bl	800bc14 <__udivmoddi4>
 800bc08:	f8dd e004 	ldr.w	lr, [sp, #4]
 800bc0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bc10:	b004      	add	sp, #16
 800bc12:	4770      	bx	lr

0800bc14 <__udivmoddi4>:
 800bc14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc18:	468c      	mov	ip, r1
 800bc1a:	4604      	mov	r4, r0
 800bc1c:	9e08      	ldr	r6, [sp, #32]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d14b      	bne.n	800bcba <__udivmoddi4+0xa6>
 800bc22:	428a      	cmp	r2, r1
 800bc24:	4615      	mov	r5, r2
 800bc26:	d967      	bls.n	800bcf8 <__udivmoddi4+0xe4>
 800bc28:	fab2 f282 	clz	r2, r2
 800bc2c:	b14a      	cbz	r2, 800bc42 <__udivmoddi4+0x2e>
 800bc2e:	f1c2 0720 	rsb	r7, r2, #32
 800bc32:	fa01 f302 	lsl.w	r3, r1, r2
 800bc36:	fa20 f707 	lsr.w	r7, r0, r7
 800bc3a:	4095      	lsls	r5, r2
 800bc3c:	ea47 0c03 	orr.w	ip, r7, r3
 800bc40:	4094      	lsls	r4, r2
 800bc42:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800bc46:	fbbc f7fe 	udiv	r7, ip, lr
 800bc4a:	fa1f f885 	uxth.w	r8, r5
 800bc4e:	fb0e c317 	mls	r3, lr, r7, ip
 800bc52:	fb07 f908 	mul.w	r9, r7, r8
 800bc56:	0c21      	lsrs	r1, r4, #16
 800bc58:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800bc5c:	4599      	cmp	r9, r3
 800bc5e:	d909      	bls.n	800bc74 <__udivmoddi4+0x60>
 800bc60:	18eb      	adds	r3, r5, r3
 800bc62:	f107 31ff 	add.w	r1, r7, #4294967295	; 0xffffffff
 800bc66:	f080 811c 	bcs.w	800bea2 <__udivmoddi4+0x28e>
 800bc6a:	4599      	cmp	r9, r3
 800bc6c:	f240 8119 	bls.w	800bea2 <__udivmoddi4+0x28e>
 800bc70:	3f02      	subs	r7, #2
 800bc72:	442b      	add	r3, r5
 800bc74:	eba3 0309 	sub.w	r3, r3, r9
 800bc78:	fbb3 f0fe 	udiv	r0, r3, lr
 800bc7c:	fb0e 3310 	mls	r3, lr, r0, r3
 800bc80:	fb00 f108 	mul.w	r1, r0, r8
 800bc84:	b2a4      	uxth	r4, r4
 800bc86:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800bc8a:	42a1      	cmp	r1, r4
 800bc8c:	d909      	bls.n	800bca2 <__udivmoddi4+0x8e>
 800bc8e:	192c      	adds	r4, r5, r4
 800bc90:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800bc94:	f080 8107 	bcs.w	800bea6 <__udivmoddi4+0x292>
 800bc98:	42a1      	cmp	r1, r4
 800bc9a:	f240 8104 	bls.w	800bea6 <__udivmoddi4+0x292>
 800bc9e:	3802      	subs	r0, #2
 800bca0:	442c      	add	r4, r5
 800bca2:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800bca6:	2700      	movs	r7, #0
 800bca8:	1a64      	subs	r4, r4, r1
 800bcaa:	b11e      	cbz	r6, 800bcb4 <__udivmoddi4+0xa0>
 800bcac:	2300      	movs	r3, #0
 800bcae:	40d4      	lsrs	r4, r2
 800bcb0:	e9c6 4300 	strd	r4, r3, [r6]
 800bcb4:	4639      	mov	r1, r7
 800bcb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcba:	428b      	cmp	r3, r1
 800bcbc:	d909      	bls.n	800bcd2 <__udivmoddi4+0xbe>
 800bcbe:	2e00      	cmp	r6, #0
 800bcc0:	f000 80ec 	beq.w	800be9c <__udivmoddi4+0x288>
 800bcc4:	2700      	movs	r7, #0
 800bcc6:	e9c6 0100 	strd	r0, r1, [r6]
 800bcca:	4638      	mov	r0, r7
 800bccc:	4639      	mov	r1, r7
 800bcce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcd2:	fab3 f783 	clz	r7, r3
 800bcd6:	2f00      	cmp	r7, #0
 800bcd8:	d148      	bne.n	800bd6c <__udivmoddi4+0x158>
 800bcda:	428b      	cmp	r3, r1
 800bcdc:	d302      	bcc.n	800bce4 <__udivmoddi4+0xd0>
 800bcde:	4282      	cmp	r2, r0
 800bce0:	f200 80fb 	bhi.w	800beda <__udivmoddi4+0x2c6>
 800bce4:	1a84      	subs	r4, r0, r2
 800bce6:	eb61 0303 	sbc.w	r3, r1, r3
 800bcea:	2001      	movs	r0, #1
 800bcec:	469c      	mov	ip, r3
 800bcee:	2e00      	cmp	r6, #0
 800bcf0:	d0e0      	beq.n	800bcb4 <__udivmoddi4+0xa0>
 800bcf2:	e9c6 4c00 	strd	r4, ip, [r6]
 800bcf6:	e7dd      	b.n	800bcb4 <__udivmoddi4+0xa0>
 800bcf8:	b902      	cbnz	r2, 800bcfc <__udivmoddi4+0xe8>
 800bcfa:	deff      	udf	#255	; 0xff
 800bcfc:	fab2 f282 	clz	r2, r2
 800bd00:	2a00      	cmp	r2, #0
 800bd02:	f040 808f 	bne.w	800be24 <__udivmoddi4+0x210>
 800bd06:	2701      	movs	r7, #1
 800bd08:	1b49      	subs	r1, r1, r5
 800bd0a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800bd0e:	fa1f f985 	uxth.w	r9, r5
 800bd12:	fbb1 fef8 	udiv	lr, r1, r8
 800bd16:	fb08 111e 	mls	r1, r8, lr, r1
 800bd1a:	fb09 f00e 	mul.w	r0, r9, lr
 800bd1e:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800bd22:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 800bd26:	4298      	cmp	r0, r3
 800bd28:	d907      	bls.n	800bd3a <__udivmoddi4+0x126>
 800bd2a:	18eb      	adds	r3, r5, r3
 800bd2c:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 800bd30:	d202      	bcs.n	800bd38 <__udivmoddi4+0x124>
 800bd32:	4298      	cmp	r0, r3
 800bd34:	f200 80cd 	bhi.w	800bed2 <__udivmoddi4+0x2be>
 800bd38:	468e      	mov	lr, r1
 800bd3a:	1a1b      	subs	r3, r3, r0
 800bd3c:	fbb3 f0f8 	udiv	r0, r3, r8
 800bd40:	fb08 3310 	mls	r3, r8, r0, r3
 800bd44:	fb09 f900 	mul.w	r9, r9, r0
 800bd48:	b2a4      	uxth	r4, r4
 800bd4a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800bd4e:	45a1      	cmp	r9, r4
 800bd50:	d907      	bls.n	800bd62 <__udivmoddi4+0x14e>
 800bd52:	192c      	adds	r4, r5, r4
 800bd54:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800bd58:	d202      	bcs.n	800bd60 <__udivmoddi4+0x14c>
 800bd5a:	45a1      	cmp	r9, r4
 800bd5c:	f200 80b6 	bhi.w	800becc <__udivmoddi4+0x2b8>
 800bd60:	4618      	mov	r0, r3
 800bd62:	eba4 0409 	sub.w	r4, r4, r9
 800bd66:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 800bd6a:	e79e      	b.n	800bcaa <__udivmoddi4+0x96>
 800bd6c:	f1c7 0520 	rsb	r5, r7, #32
 800bd70:	40bb      	lsls	r3, r7
 800bd72:	fa22 fc05 	lsr.w	ip, r2, r5
 800bd76:	ea4c 0c03 	orr.w	ip, ip, r3
 800bd7a:	fa21 f405 	lsr.w	r4, r1, r5
 800bd7e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800bd82:	fbb4 f9fe 	udiv	r9, r4, lr
 800bd86:	fa1f f88c 	uxth.w	r8, ip
 800bd8a:	fb0e 4419 	mls	r4, lr, r9, r4
 800bd8e:	fa20 f305 	lsr.w	r3, r0, r5
 800bd92:	40b9      	lsls	r1, r7
 800bd94:	fb09 fa08 	mul.w	sl, r9, r8
 800bd98:	4319      	orrs	r1, r3
 800bd9a:	0c0b      	lsrs	r3, r1, #16
 800bd9c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800bda0:	45a2      	cmp	sl, r4
 800bda2:	fa02 f207 	lsl.w	r2, r2, r7
 800bda6:	fa00 f307 	lsl.w	r3, r0, r7
 800bdaa:	d90b      	bls.n	800bdc4 <__udivmoddi4+0x1b0>
 800bdac:	eb1c 0404 	adds.w	r4, ip, r4
 800bdb0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800bdb4:	f080 8088 	bcs.w	800bec8 <__udivmoddi4+0x2b4>
 800bdb8:	45a2      	cmp	sl, r4
 800bdba:	f240 8085 	bls.w	800bec8 <__udivmoddi4+0x2b4>
 800bdbe:	f1a9 0902 	sub.w	r9, r9, #2
 800bdc2:	4464      	add	r4, ip
 800bdc4:	eba4 040a 	sub.w	r4, r4, sl
 800bdc8:	fbb4 f0fe 	udiv	r0, r4, lr
 800bdcc:	fb0e 4410 	mls	r4, lr, r0, r4
 800bdd0:	fb00 fa08 	mul.w	sl, r0, r8
 800bdd4:	b289      	uxth	r1, r1
 800bdd6:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 800bdda:	45a2      	cmp	sl, r4
 800bddc:	d908      	bls.n	800bdf0 <__udivmoddi4+0x1dc>
 800bdde:	eb1c 0404 	adds.w	r4, ip, r4
 800bde2:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800bde6:	d26b      	bcs.n	800bec0 <__udivmoddi4+0x2ac>
 800bde8:	45a2      	cmp	sl, r4
 800bdea:	d969      	bls.n	800bec0 <__udivmoddi4+0x2ac>
 800bdec:	3802      	subs	r0, #2
 800bdee:	4464      	add	r4, ip
 800bdf0:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800bdf4:	fba0 8902 	umull	r8, r9, r0, r2
 800bdf8:	eba4 040a 	sub.w	r4, r4, sl
 800bdfc:	454c      	cmp	r4, r9
 800bdfe:	4641      	mov	r1, r8
 800be00:	46ce      	mov	lr, r9
 800be02:	d354      	bcc.n	800beae <__udivmoddi4+0x29a>
 800be04:	d051      	beq.n	800beaa <__udivmoddi4+0x296>
 800be06:	2e00      	cmp	r6, #0
 800be08:	d069      	beq.n	800bede <__udivmoddi4+0x2ca>
 800be0a:	1a5a      	subs	r2, r3, r1
 800be0c:	eb64 040e 	sbc.w	r4, r4, lr
 800be10:	fa04 f505 	lsl.w	r5, r4, r5
 800be14:	fa22 f307 	lsr.w	r3, r2, r7
 800be18:	40fc      	lsrs	r4, r7
 800be1a:	431d      	orrs	r5, r3
 800be1c:	e9c6 5400 	strd	r5, r4, [r6]
 800be20:	2700      	movs	r7, #0
 800be22:	e747      	b.n	800bcb4 <__udivmoddi4+0xa0>
 800be24:	4095      	lsls	r5, r2
 800be26:	f1c2 0320 	rsb	r3, r2, #32
 800be2a:	fa21 f003 	lsr.w	r0, r1, r3
 800be2e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800be32:	fbb0 f7f8 	udiv	r7, r0, r8
 800be36:	fa1f f985 	uxth.w	r9, r5
 800be3a:	fb08 0017 	mls	r0, r8, r7, r0
 800be3e:	fa24 f303 	lsr.w	r3, r4, r3
 800be42:	4091      	lsls	r1, r2
 800be44:	fb07 fc09 	mul.w	ip, r7, r9
 800be48:	430b      	orrs	r3, r1
 800be4a:	0c19      	lsrs	r1, r3, #16
 800be4c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800be50:	458c      	cmp	ip, r1
 800be52:	fa04 f402 	lsl.w	r4, r4, r2
 800be56:	d907      	bls.n	800be68 <__udivmoddi4+0x254>
 800be58:	1869      	adds	r1, r5, r1
 800be5a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800be5e:	d231      	bcs.n	800bec4 <__udivmoddi4+0x2b0>
 800be60:	458c      	cmp	ip, r1
 800be62:	d92f      	bls.n	800bec4 <__udivmoddi4+0x2b0>
 800be64:	3f02      	subs	r7, #2
 800be66:	4429      	add	r1, r5
 800be68:	eba1 010c 	sub.w	r1, r1, ip
 800be6c:	fbb1 f0f8 	udiv	r0, r1, r8
 800be70:	fb08 1c10 	mls	ip, r8, r0, r1
 800be74:	fb00 fe09 	mul.w	lr, r0, r9
 800be78:	b299      	uxth	r1, r3
 800be7a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800be7e:	458e      	cmp	lr, r1
 800be80:	d907      	bls.n	800be92 <__udivmoddi4+0x27e>
 800be82:	1869      	adds	r1, r5, r1
 800be84:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800be88:	d218      	bcs.n	800bebc <__udivmoddi4+0x2a8>
 800be8a:	458e      	cmp	lr, r1
 800be8c:	d916      	bls.n	800bebc <__udivmoddi4+0x2a8>
 800be8e:	3802      	subs	r0, #2
 800be90:	4429      	add	r1, r5
 800be92:	eba1 010e 	sub.w	r1, r1, lr
 800be96:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800be9a:	e73a      	b.n	800bd12 <__udivmoddi4+0xfe>
 800be9c:	4637      	mov	r7, r6
 800be9e:	4630      	mov	r0, r6
 800bea0:	e708      	b.n	800bcb4 <__udivmoddi4+0xa0>
 800bea2:	460f      	mov	r7, r1
 800bea4:	e6e6      	b.n	800bc74 <__udivmoddi4+0x60>
 800bea6:	4618      	mov	r0, r3
 800bea8:	e6fb      	b.n	800bca2 <__udivmoddi4+0x8e>
 800beaa:	4543      	cmp	r3, r8
 800beac:	d2ab      	bcs.n	800be06 <__udivmoddi4+0x1f2>
 800beae:	ebb8 0102 	subs.w	r1, r8, r2
 800beb2:	eb69 020c 	sbc.w	r2, r9, ip
 800beb6:	3801      	subs	r0, #1
 800beb8:	4696      	mov	lr, r2
 800beba:	e7a4      	b.n	800be06 <__udivmoddi4+0x1f2>
 800bebc:	4618      	mov	r0, r3
 800bebe:	e7e8      	b.n	800be92 <__udivmoddi4+0x27e>
 800bec0:	4608      	mov	r0, r1
 800bec2:	e795      	b.n	800bdf0 <__udivmoddi4+0x1dc>
 800bec4:	4607      	mov	r7, r0
 800bec6:	e7cf      	b.n	800be68 <__udivmoddi4+0x254>
 800bec8:	4681      	mov	r9, r0
 800beca:	e77b      	b.n	800bdc4 <__udivmoddi4+0x1b0>
 800becc:	3802      	subs	r0, #2
 800bece:	442c      	add	r4, r5
 800bed0:	e747      	b.n	800bd62 <__udivmoddi4+0x14e>
 800bed2:	f1ae 0e02 	sub.w	lr, lr, #2
 800bed6:	442b      	add	r3, r5
 800bed8:	e72f      	b.n	800bd3a <__udivmoddi4+0x126>
 800beda:	4638      	mov	r0, r7
 800bedc:	e707      	b.n	800bcee <__udivmoddi4+0xda>
 800bede:	4637      	mov	r7, r6
 800bee0:	e6e8      	b.n	800bcb4 <__udivmoddi4+0xa0>
 800bee2:	bf00      	nop

0800bee4 <__aeabi_idiv0>:
 800bee4:	4770      	bx	lr
 800bee6:	bf00      	nop

0800bee8 <__aeabi_memcpy>:
 800bee8:	f7fb b8a2 	b.w	8007030 <memcpy>

0800beec <AHBPrescTable>:
	...
 800bef4:	0201 0403 0706 0908                         ........

0800befc <APBPrescTable>:
 800befc:	0000 0000 0201 0403 203a 0000 bf04 0800     ........: ......
 800bf0c:	0000 0000 bf04 0800 0002 0000 7273 2f63     ............src/
 800bf1c:	696c 6362 726f 2f65 6572 7573 746c 722e     libcore/result.r
 800bf2c:	0073 0000 bf18 0800 0015 0000 03e7 0000     s...............
 800bf3c:	0005 0000 6574 706d 735f 6d74 3233 305f     ....temp_stm32_0
 800bf4c:	0000 0000                                   ....

0800bf50 <_ZN3app10app_sensor13SENSOR_DEVICE17h2a469235bdce3198E>:
 800bf50:	0000 0000 bf40 0800 000d 0000 7552 7473     ....@.......Rust
 800bf60:	5420 504d 7020 6c6f 0a6c 6f6e 7320 6e65      TMP poll.no sen
 800bf70:	6f73 7272 7375 2f74 7061 2f70 7273 2f63     sorrust/app/src/
 800bf80:	7061 5f70 6573 736e 726f 722e 0073 0000     app_sensor.rs...
 800bf90:	bf6a 0800 0009 0000 bf73 0800 001a 0000     j.......s.......
 800bfa0:	0038 0000 0005 0000 7552 7473 6820 6e61     8.......Rust han
 800bfb0:	6c64 5f65 6573 736e 726f 645f 7461 0a61     dle_sensor_data.
 800bfc0:	756e 6c6c 7320 6e65 6f73 0072 bfc0 0800     null sensor.....
 800bfd0:	000b 0000 bf73 0800 001a 0000 0050 0000     ....s.......P...
 800bfe0:	0005 0000 4d54 2050 656e 7774 726f 206b     ....TMP network 
 800bff0:	6f6e 2074 6572 6461 0a79 4d54 2050 696c     not ready.TMP li
 800c000:	7473 6e65 7265 6720 746f 7220 7761 6d74     stener got rawtm
 800c010:	0a70 0000 0000 0000 656b 0079 7361 6573     p.......key.asse
 800c020:	7472 6f69 206e 6166 6c69 6465 203a 2860     rtion failed: `(
 800c030:	656c 7466 3d20 203d 6972 6867 2974 0a60     left == right)`.
 800c040:	2020 656c 7466 203a 6060 0a2c 7220 6769       left: ``,. rig
 800c050:	7468 203a 6060 203a c01c 0800 002d 0000     ht: ``: ....-...
 800c060:	c049 0800 000c 0000 c055 0800 0003 0000     I.......U.......
 800c070:	6172 7477 706d 6620 6961 006c c070 0800     rawtmp fail.p...
 800c080:	000b 0000 bf73 0800 001a 0000 0075 0000     ....s.......u...
 800c090:	0011 0000 6100 7373 7265 6974 6e6f 6620     .....assertion f
 800c0a0:	6961 656c 3a64 6020 6c28 6665 2074 3d21     ailed: `(left !=
 800c0b0:	7220 6769 7468 6029 200a 6c20 6665 3a74      right)`.  left:
 800c0c0:	6020 0000 c095 0800 002d 0000 c049 0800      `......-...I...
 800c0d0:	000c 0000 c055 0800 0003 0000 6162 2064     ....U.......bad 
 800c0e0:	6172 7477 706d 0000 c0dc 0800 000a 0000     rawtmp..........
 800c0f0:	bf73 0800 001a 0000 0077 0000 0011 0000     s.......w.......
 800c100:	5274 7375 2074 6573 646e 735f 6e65 6f73     tRust send_senso
 800c110:	5f72 6164 6174 760a 6c61 6575 0073 4f43     r_data.values.CO
 800c120:	5041 435f 4e4f 4554 5458 6400 7665 6369     AP_CONTEXT.devic
 800c130:	0065 6176 756c 0065 656b 7679 6c61 6575     e.value.keyvalue
 800c140:	454e 2054 6976 7765 7920 756f 2072 6573     NET view your se
 800c150:	736e 726f 6120 2074 680a 7474 7370 2f3a     nsor at .https:/
 800c160:	622f 756c 2d65 6970 6c6c 672d 6f65 6f6c     /blue-pill-geolo
 800c170:	6163 6574 612e 7070 7073 746f 632e 6d6f     cate.appspot.com
 800c180:	643f 7665 6369 3d65 540a 504d 6620 6961     ?device=.TMP fai
 800c190:	4e6c 5445 6620 6961 476c 5445 6620 6961     lNET failGET fai
 800c1a0:	526c 4e55 6620 6961 206c 696c 656e 3020     lRUN fail line 0
 800c1b0:	7078 6e61 6369 6e20 206f 6f6c 0a63 7461     xpanic no loc.at
 800c1c0:	6120 7373 7265 6974 6e6f 6620 6961 656c      assertion faile
 800c1d0:	3a64 6020 6c28 6665 2074 3d3d 7220 6769     d: `(left == rig
 800c1e0:	7468 6029 200a 6c20 6665 3a74 6020 2c60     ht)`.  left: ``,
 800c1f0:	200a 6972 6867 3a74 6020 3a60 0020 0000     . right: ``: ...
 800c200:	c1c1 0800 002d 0000 c1ee 0800 000c 0000     ....-...........
 800c210:	c1fa 0800 0003 0000 6f53 656d 6f4e 656e     ........SomeNone
 800c220:	6d5f 7061 6f72 746f 1861 0800 0004 0000     _maproota.......
 800c230:	0004 0000 1825 0800 0000 0000 0000 0000     ....%...........
 800c240:	6e65 2063 6166 6c69 6962 2067 7473 6e72     enc failbig strn
 800c250:	6572 2067 696c 0073 c250 0800 0007 0000     reg lis.P.......
 800c260:	7572 7473 6d2f 6e79 7765 2f74 7273 2f63     rust/mynewt/src/
 800c270:	7768 732f 6e65 6f73 2e72 7372 c260 0800     hw/sensor.rs`...
 800c280:	001c 0000 0047 0000 000e 0000 0000 0000     ....G...........
 800c290:	c28c 0800 6962 2067 656b 7279 7375 2f74     ....big keyrust/
 800c2a0:	796d 656e 7477 732f 6372 652f 636e 646f     mynewt/src/encod
 800c2b0:	6e69 2f67 6f63 7061 635f 6e6f 6574 7478     ing/coap_context
 800c2c0:	722e 0073 c294 0800 0007 0000 c29b 0800     .rs.............
 800c2d0:	0028 0000 003d 0000 0009 0000 6962 2067     (...=.......big 
 800c2e0:	6176 756c 0065 0000 c2dc 0800 0009 0000     value...........
 800c2f0:	c29b 0800 0028 0000 004a 0000 0009 0000     ....(...J.......
 800c300:	6f6e 6e20 6c75 006c c300 0800 0007 0000     no null.........
 800c310:	7572 7473 6d2f 6e79 7765 2f74 7273 2f63     rust/mynewt/src/
 800c320:	696c 2e62 7372 0000 c310 0800 0016 0000     lib.rs..........
 800c330:	0078 0000 0009 0000 c248 0800 0008 0000     x.......H.......
 800c340:	c310 0800 0016 0000 0098 0000 0011 0000     ................
 800c350:	c310 0800 0016 0000 00bd 0000 0011 0000     ................
 800c360:	5953 5f53 5045 5245 5355 5245 5953 5f53     SYS_EPERUSERSYS_
 800c370:	4445 4e4f 5345 5359 455f 4552 4f4d 4554     EDONESYS_EREMOTE
 800c380:	4f49 5953 5f53 5545 4b4e 4f4e 4e57 5953     IOSYS_EUNKNOWNSY
 800c390:	5f53 4e45 544f 5553 5350 5359 455f 4c41     S_ENOTSUPSYS_EAL
 800c3a0:	4552 4441 5359 5359 455f 4152 474e 5345     READYSYS_ERANGES
 800c3b0:	5359 455f 4f4e 4544 5356 5359 455f 5542     YS_ENODEVSYS_EBU
 800c3c0:	5953 5953 5f53 4145 4343 5345 5953 5f53     SYSYS_EACCESSYS_
 800c3d0:	4145 4147 4e49 5953 5f53 4945 534f 5359     EAGAINSYS_EIOSYS
 800c3e0:	455f 4f4e 4e45 5354 5359 455f 4954 454d     _ENOENTSYS_ETIME
 800c3f0:	554f 5354 5359 455f 4e49 4156 534c 5359     OUTSYS_EINVALSYS
 800c400:	455f 4f4e 454d 534d 5359 455f 4b4f 0060     _ENOMEMSYS_EOK`.
 800c410:	7273 2f63 696c 6362 726f 2f65 756e 2f6d     src/libcore/num/
 800c420:	6564 3263 6c66 2f74 6172 6677 2e70 7372     dec2flt/rawfp.rs
 800c430:	6e69 6564 2078 756f 2074 666f 6220 756f     index out of bou
 800c440:	646e 3a73 7420 6568 6c20 6e65 6920 2073     nds: the len is 
 800c450:	3e00 0000 0001 0000 0000 0000 0000 0000     .>..............
 800c460:	0020 0000 0000 0000 c000 0000 0300 0000      ...............
 800c470:	2e2e 0000 c470 0800 0002 0000 0000 0000     ....p...........
 800c480:	6c61 6572 6461 2079 6f62 7272 776f 6465     already borrowed
 800c490:	2029 6877 6e65 7320 696c 6963 676e 6020     ) when slicing `
 800c4a0:	ffff ffff 0000 0000 0000 0000 0000 8000     ................
 800c4b0:	6843 7261 7254 4679 6f72 456d 7272 726f     CharTryFromError
 800c4c0:	6544 6f63 6564 7455 3166 4536 7272 726f     DecodeUtf16Error
 800c4d0:	1ee3 0800 0000 0000 0001 0000 1f33 0800     ............3...
 800c4e0:	6220 7475 7420 6568 6920 646e 7865 6920      but the index i
 800c4f0:	2073 0000 c430 0800 0020 0000 c4e0 0800     s ..0... .......
 800c500:	0012 0000 7469 7265 7449 7265 3c20 203d     ....iterIter <= 
 800c510:	2020 2020 7274 6575 6164 6174 616d 746e         truedatamant
 800c520:	6c70 7375 655a 6f72 6f43 7970 696b 646e     plusZeroCopykind
 800c530:	654c 7373 6f63 6564 7954 6570 6f44 656e     LesscodeTypeDone
 800c540:	6843 7261 6966 656c 696c 656e 6142 6b63     CharfilelineBack
 800c550:	6f42 6874 6f53 656d 6f4e 656e 7449 6d65     BothSomeNoneItem
 800c560:	6174 6c69 654c 7466 6177 656b 7264 706f     tailLeftwakedrop
 800c570:	3875 3278 3869 3278 3875 3478 3869 3478     u8x2i8x2u8x4i8x4
 800c580:	3875 3878 3869 3878 6163 6c6c 6465 6020     u8x8i8x8called `
 800c590:	704f 6974 6e6f 3a3a 6e75 7277 7061 2928     Option::unwrap()
 800c5a0:	2060 6e6f 6120 6020 6f4e 656e 2060 6176     ` on a `None` va
 800c5b0:	756c 7365 6372 6c2f 6269 6f63 6572 6f2f     luesrc/libcore/o
 800c5c0:	7470 6f69 2e6e 7372 c588 0800 002b 0000     ption.rs....+...
 800c5d0:	c5b3 0800 0015 0000 015b 0000 0015 0000     ........[.......
 800c5e0:	7273 2f63 696c 6362 726f 2f65 6c73 6369     src/libcore/slic
 800c5f0:	2f65 6f6d 2e64 7372 6e69 6564 2078 6f20     e/mod.rsindex  o
 800c600:	7475 6f20 2066 6172 676e 2065 6f66 2072     ut of range for 
 800c610:	6c73 6369 2065 666f 6c20 6e65 7467 2068     slice of length 
 800c620:	c5f8 0800 0006 0000 c5fe 0800 0022 0000     ............"...
 800c630:	c5e0 0800 0018 0000 0a09 0000 0005 0000     ................
 800c640:	6c73 6369 2065 6e69 6564 2078 7473 7261     slice index star
 800c650:	7374 6120 2074 6220 7475 6520 646e 2073     ts at  but ends 
 800c660:	7461 0020 c640 0800 0016 0000 c656 0800     at .@.......V...
 800c670:	000d 0000 c5e0 0800 0018 0000 0a0f 0000     ................
 800c680:	0005 0000 6966 696e 6873 6465 6168 7379     ....finishedhays
 800c690:	6174 6b63 2820 7962 6574 2073 6e49 6966     tack (bytes Infi
 800c6a0:	696e 6574 694d 756e 5273 7761 654e 6167     niteMinusRawNega
 800c6b0:	6974 6576 6f50 6973 6974 6576 6e69 6574     tivePositiveinte
 800c6c0:	7267 6c61 764f 7265 6c66 776f 6f6c 6163     gralOverflowloca
 800c6d0:	6974 6e6f 6f4c 6163 6974 6e6f 6162 6b63     tionLocationback
 800c6e0:	7469 7265 6e49 6f74 7449 7265 6573 7261     iterIntoItersear
 800c6f0:	6863 7265 6f70 6973 6974 6e6f 7263 7469     cherpositioncrit
 800c700:	705f 736f 694c 656e 4173 796e 6152 5777     _posLinesAnyRawW
 800c710:	6b61 7265 6c41 6f6c 4563 7272 6e55 6170     akerAllocErrUnpa
 800c720:	6b63 6465 7273 2f63 696c 6362 726f 2f65     ckedsrc/libcore/
 800c730:	7473 2f72 6f6d 2e64 7372 2e5b 2e2e 625d     str/mod.rs[...]b
 800c740:	7479 2065 6e69 6564 2078 6920 2073 756f     yte index  is ou
 800c750:	2074 666f 6220 756f 646e 2073 666f 6020     t of bounds of `
 800c760:	c73f 0800 000b 0000 c74a 0800 0016 0000     ?.......J.......
 800c770:	c40e 0800 0001 0000 c724 0800 0016 0000     ........$.......
 800c780:	07eb 0000 0009 0000 6562 6967 206e 3d3c     ........begin <=
 800c790:	6520 646e 2820 0000 c788 0800 000e 0000      end (..........
 800c7a0:	c50c 0800 0004 0000 c490 0800 0010 0000     ................
 800c7b0:	c40e 0800 0001 0000 c724 0800 0016 0000     ........$.......
 800c7c0:	07ef 0000 0005 0000 6920 2073 6f6e 2074     ........ is not 
 800c7d0:	2061 6863 7261 6220 756f 646e 7261 3b79     a char boundary;
 800c7e0:	6920 2074 7369 6920 736e 6469 2065 2029      it is inside ) 
 800c7f0:	666f 6020 c73f 0800 000b 0000 c7c8 0800     of `?...........
 800c800:	0026 0000 c694 0800 0008 0000 c7ee 0800     &...............
 800c810:	0006 0000 c40e 0800 0001 0000 c724 0800     ............$...
 800c820:	0016 0000 07fc 0000 0005 0000 7830 3030     ............0x00
 800c830:	3130 3230 3330 3430 3530 3630 3730 3830     0102030405060708
 800c840:	3930 3031 3131 3231 3331 3431 3531 3631     0910111213141516
 800c850:	3731 3831 3931 3032 3132 3232 3332 3432     1718192021222324
 800c860:	3532 3632 3732 3832 3932 3033 3133 3233     2526272829303132
 800c870:	3333 3433 3533 3633 3733 3833 3933 3034     3334353637383940
 800c880:	3134 3234 3334 3434 3534 3634 3734 3834     4142434445464748
 800c890:	3934 3035 3135 3235 3335 3435 3535 3635     4950515253545556
 800c8a0:	3735 3835 3935 3036 3136 3236 3336 3436     5758596061626364
 800c8b0:	3536 3636 3736 3836 3936 3037 3137 3237     6566676869707172
 800c8c0:	3337 3437 3537 3637 3737 3837 3937 3038     7374757677787980
 800c8d0:	3138 3238 3338 3438 3538 3638 3738 3838     8182838485868788
 800c8e0:	3938 3039 3139 3239 3339 3439 3539 3639     8990919293949596
 800c8f0:	3739 3839 3939 0000 1ee1 0800 000c 0000     979899..........
 800c900:	0004 0000 258d 0800 2829 0800 28bf 0800     .....%..)(...(..
 800c910:	0a2c 202c 0a28 2c28 0029 0000 1edf 0800     ,., (.(,).......
 800c920:	0004 0000 0004 0000 28e3 0800 28e9 0800     .........(...(..
 800c930:	28ef 0800 0000 0000 0000 0000 0000 0000     .(..............

0800c940 <str.h>:
 800c940:	7273 2f63 696c 6362 726f 2f65 6d66 2f74     src/libcore/fmt/
 800c950:	6f6d 2e64 7372 0000 c940 0800 0016 0000     mod.rs..@.......
 800c960:	0448 0000 0028 0000 c940 0800 0016 0000     H...(...@.......
 800c970:	0454 0000 0011 0000 0000 0000 0000 0000     T...............

0800c980 <str.j>:
 800c980:	7273 2f63 696c 6362 726f 2f65 6e75 6369     src/libcore/unic
 800c990:	646f 2f65 6f62 6c6f 745f 6972 2e65 7372     ode/bool_trie.rs
 800c9a0:	c980 0800 0020 0000 0027 0000 0019 0000     .... ...'.......
 800c9b0:	c980 0800 0020 0000 0028 0000 0020 0000     .... ...(... ...
 800c9c0:	c980 0800 0020 0000 002a 0000 0019 0000     .... ...*.......
 800c9d0:	c980 0800 0020 0000 002b 0000 0018 0000     .... ...+.......
 800c9e0:	c980 0800 0020 0000 002c 0000 0020 0000     .... ...,... ...
 800c9f0:	0100 0503 0605 0306 0607 0808 1109 1c0a     ................
 800ca00:	190b 140c 120d 160e 040f 0310 1212 0913     ................
 800ca10:	0116 0517 0218 0319 071a 021c 011d 161f     ................
 800ca20:	0320 062b 022c 0b2d 012e 0330 0231 0232      .+.,.-...0.1.2.
 800ca30:	02a9 04aa 08ab 02fa 05fb 04fd 03fe 09ff     ................
 800ca40:	78ad 8b79 a28d 5730 8b58 908c 1d1c 0edd     .xy...0WX.......
 800ca50:	4b0f fb4c 2efc 3f2f 5d5c b55f 84e2 8e8d     .KL.../?\]_.....
 800ca60:	9291 b1a9 bbba c6c5 cac9 e4de ffe5 0400     ................
 800ca70:	1211 3129 3734 3b3a 493d 5d4a 8e84 a992     ..)147:;=IJ]....
 800ca80:	b4b1 bbba cac6 cfce e5e4 0400 0e0d 1211     ................
 800ca90:	3129 3a34 453b 4946 5e4a 6564 9184 9d9b     )14:;EFIJ^de....
 800caa0:	cec9 0dcf 2911 4945 6457 8d65 a991 bab4     .....)EIWde.....
 800cab0:	c5bb dfc9 e5e4 04f0 110d 4945 6564 8180     ..........EIde..
 800cac0:	b284 bebc d5bf f0d7 83f1 8685 8b89 988c     ................
 800cad0:	a4a0 a8a6 aca9 beba c5bf cec7 dacf 48db     ...............H
 800cae0:	bd98 c6cd cfce 4e49 574f 5e59 895f 8f8e     ......INOWY^_...
 800caf0:	b6b1 bfb7 c6c1 d7c7 1611 5b17 f65c fef7     ...........[\...
 800cb00:	80ff 6d0d de71 0edf 1f0f 6f6e 1d1c 7d5f     ...mq.....no.._}
 800cb10:	ae7e bbaf fabc 1716 1f1e 4746 4f4e 5a58     ~.........FGNOXZ
 800cb20:	5e5c 7f7e c5b5 d5d4 f0dc f5f1 7372 748f     \^~.........rs.t
 800cb30:	9675 c997 2fff 265f 2f2e afa7 bfb7 cfc7     u..../_&./......
 800cb40:	dfd7 409a 9897 8f30 ff1f ffce 4f4e 5b5a     ...@..0.....NOZ[
 800cb50:	0807 100f 2f27 efee 6f6e 3d37 423f 9045     ....'/..no7=?BE.
 800cb60:	fe91 53ff 7567 c9c8 d1d0 d9d8 fee7 00ff     ...Sgu..........
 800cb70:	5f20 8222 04df 4482 1b08 0604 8111 0eac      _"....D........
 800cb80:	ab80 1e35 8015 03e0 0819 0401 042f 0434     ..5........./.4.
 800cb90:	0307 0701 0706 0a11 0f50 0712 0855 0402     ........P...U...
 800cba0:	0a1c 0309 0308 0307 0302 0303 040c 0305     ................
 800cbb0:	060b 0e01 0515 033a 0711 0506 0810 0756     ......:.......V.
 800cbc0:	0702 0d15 0450 0343 032d 0401 0611 0c0f     ....P.C.-.......
 800cbd0:	043a 251d 060d 204c 046d 256a c880 8205     :..%..L m.j%....
 800cbe0:	03b0 061a fd82 5903 1507 170b 1409 140c     .......Y........
 800cbf0:	6a0c 0a06 1a06 5906 2b07 4605 2c0a 0c04     .j.....Y.+.F.,..
 800cc00:	0104 3103 2c0b 1a04 0b06 8003 06ac 060a     ...1.,..........
 800cc10:	411f 044c 032d 0874 033c 030f 073c 0838     .AL.-.t.<...<.8.
 800cc20:	062a ff82 1811 2f08 2d11 2003 2110 800f     *....../.-. .!..
 800cc30:	048c 9782 0b19 8815 0594 052f 073b 0e02     ........../.;...
 800cc40:	0918 af80 7431 800c 1ad6 050c ff80 8005     ....1t..........
 800cc50:	05b6 0c24 c69b d20a 1030 8d84 3703 8109     ..$.....0....7..
 800cc60:	145c b880 8008 3dba 0435 060a 0838 0846     \......=5...8.F.
 800cc70:	060c 0b74 031e 045a 0959 8380 1c18 160a     ..t...Z.Y.......
 800cc80:	4609 800a 068a a4ab 170c 3104 04a1 da81     .F.........1....
 800cc90:	0726 050c 8005 11a5 6d81 7810 2a28 4c06     &........m.x(*.L
 800cca0:	8004 048d be80 1b03 0f03 000d 0106 0301     ................
 800ccb0:	0401 0802 0908 0a02 0b05 1002 1101 1204     ................
 800ccc0:	1305 1411 1502 1702 1a02 1c02 1d05 2408     ...............$
 800ccd0:	6a01 6b03 bc02 d102 d402 d50c d609 d702     .j.k............
 800cce0:	da02 e001 e805 ee02 f020 f904 0c04 3b27     ........ .....';
 800ccf0:	4e3e 8f4f 9e9e 069f 0907 3d36 563e d0f3     >NO.......6=>V..
 800cd00:	04d1 1814 3736 5756 35bd cfce 12e0 8987     ....67VW.5......
 800cd10:	9e8e 0d04 110e 2912 3431 453a 4946 4e4a     .......)14:EFIJN
 800cd20:	644f 5a65 b65c 1bb7 841c 0985 9037 a891     OdeZ\.......7...
 800cd30:	0a07 3e3b 6966 928f 5f6f efee 625a 9b9a     ..;>fi..o_..Zb..
 800cd40:	2827 9d55 a1a0 a4a3 a8a7 baad c4bc 0b06     '(U.............
 800cd50:	150c 3a1d 453f a651 cca7 a0cd 1907 221a     ...:?EQ........"
 800cd60:	c525 04c6 2320 2625 3328 3a38 4a48 504c     %... #%&(38:HJLP
 800cd70:	5553 5856 5c5a 605e 6563 6b66 7873 7f7d     SUVXZ\^`cefksx}.
 800cd80:	a48a afaa c0b0 3fd0 7271 5e7b 7b22 0305     .......?qr{^"{..
 800cd90:	2d04 6503 0104 2e2f 8280 031d 0f31 041c     .-.e../.....1...
 800cda0:	0924 051e 052b 0444 2a0e aa80 2406 2404     $...+.D..*...$.$
 800cdb0:	2804 3408 010b 9080 3781 1609 080a 9880     .(.4.....7......
 800cdc0:	0339 0863 3009 0516 0321 051b 4001 0438     9.c..0..!....@8.
 800cdd0:	054b 042f 070a 0709 2040 0427 090c 0336     K./.....@ '...6.
 800cde0:	053a 071a 0c04 5007 3749 0d33 0733 082e     :......PI73.3...
 800cdf0:	810a 1f26 8180 0828 802a 4ea6 1e04 430f     ..&...(.*..N...C
 800ce00:	190e 0a07 4706 2709 7509 3f0b 2a41 3b06     .....G.'.u.?A*.;
 800ce10:	0a05 5106 0106 1005 0503 8b80 215f 0848     ...Q........_!H.
 800ce20:	800a 5ea6 4522 0a0b 0d06 3813 0a08 2c36     ...^"E.....8..6,
 800ce30:	1004 c080 643c 0c53 8101 4800 5308 391d     ....<dS....H.S.9
 800ce40:	0781 0a46 031d 4947 0337 080e 060a 0739     ..F...GI7.....9.
 800ce50:	810a 1936 0781 9a83 7566 800b 8ac4 84bc     ..6.....fu......
 800ce60:	8f2f 82d1 a147 82b9 0739 042a 6002 0a26     /...G...9.*..`&.
 800ce70:	0a46 0528 8213 5bb0 4565 2f0b 1110 0240     F.(....[eE./..@.
 800ce80:	971e 0ef2 f382 0da5 1f81 8151 898c 6b04     ..........Q....k
 800ce90:	0d05 0903 1007 6093 f680 730a 6e08 4617     .......`...s.n.F
 800cea0:	9a80 0c14 0957 8019 8187 0347 4285 150f     ....W.....G..B..
 800ceb0:	5085 872b 80d5 29d7 054b 040a 8302 4411     .P+....)K......D
 800cec0:	4b81 063c 0401 0555 341b 8102 2c0e 6404     .K<...U..4...,.d
 800ced0:	560c 0d0a 5c03 3d04 1d39 2c0d 0904 0207     .V...\.=9..,....
 800cee0:	060e 9a80 d583 0d0b 0a03 7406 590c 0c27     ...........t.Y'.
 800cef0:	3804 0a08 2806 1e08 0c52 6704 2903 0a0d     .8...(..R..g.)..
 800cf00:	0306 300d 0e60 9285 0000 fbc0 3eef 0000     ...0`........>..
 800cf10:	0000 0e00 0000 0000 0000 0000 0000 0000     ................
 800cf20:	0000 fff8 fffb ffff 0007 0000 0000 1400     ................
 800cf30:	21fe 00fe 000c 0000 0002 0000 0000 5000     .!.............P
 800cf40:	201e 0080 000c 4000 0006 0000 0000 1000     . .....@........
 800cf50:	3986 0002 0000 0023 21be 0000 000c fc00     .9....#..!......
 800cf60:	0002 0000 0000 d000 201e 00c0 000c 0000     ......... ......
 800cf70:	0004 0000 0000 4000 2001 0080 0000 0000     .......@. ......
 800cf80:	0011 0000 0000 c000 3dc1 0060 000c 0000     .........=`.....
 800cf90:	0002 0000 0000 9000 3044 0060 000c 0000     ........D0`.....
 800cfa0:	0003 0000 0000 5800 201e 0080 000c 0000     .......X. ......
 800cfb0:	8400 805c 0000 0000 0000 0000 0000 07f2     ..\.............
 800cfc0:	7f80 0000 0000 0000 0000 0000 0000 1bf2     ................
 800cfd0:	3f00 0000 0000 0000 0000 0300 0000 02a0     .?..............
 800cfe0:	0000 0000 0000 7ffe e0df feff ffff 1fff     ................
 800cff0:	0040 0000 0000 0000 0000 0000 e000 66fd     @..............f
 800d000:	0000 c300 0001 001e 2064 2000 0000 0000     ........d . ....
 800d010:	0000 e000 0000 0000 0000 001c 0000 001c     ................
 800d020:	0000 000c 0000 000c 0000 0000 0000 3fb0     ...............?
 800d030:	fe40 200f 0000 0000 3800 0000 0000 0000     @.. .....8......
 800d040:	0060 0000 0200 0000 0000 0000 0187 0e04     `...............
 800d050:	0000 0980 0000 0000 0000 7f40 1fe5 9ff8     ..........@.....
 800d060:	0000 0000 0000 7fff 000f 0000 0000 17d0     ................
 800d070:	0004 0000 f800 000f 0003 0000 3b3c 0000     ............<;..
 800d080:	0000 0000 a340 0003 0000 0000 f000 00cf     ....@...........
 800d090:	0000 fff7 21fd 0310 ffff ffff ffff fbff     .....!..........
 800d0a0:	1000 0000 0000 0000 0000 ffff ffff 0001     ................
 800d0b0:	0000 0000 8000 0003 0000 0000 0000 8000     ................
 800d0c0:	0000 0000 ffff ffff 0000 0000 fc00 0000     ................
 800d0d0:	0000 0600 0000 0000 0000 0000 8000 3ff7     ...............?
 800d0e0:	0000 c000 0000 0000 0000 0000 0000 0003     ................
 800d0f0:	0844 0000 0060 0000 0030 0000 ffff 8003     D...`...0.......
 800d100:	0000 0000 3fc0 0000 ff80 0003 0000 0000     .....?..........
 800d110:	0007 0000 0000 13c8 0000 0000 0020 0000     ............ ...
 800d120:	0000 0000 7e00 0066 1008 0000 0000 1000     .....~f.........
 800d130:	0000 0000 0000 c19d 0002 0000 3000 0040     .............0@.
 800d140:	0000 0000 2120 0000 0000 4000 0000 0000     .... !.....@....
 800d150:	ffff 0000 ffff 0000 0000 0000 0000 0100     ................
 800d160:	0000 0200 0300 0000 0000 0000 0000 0000     ................
	...
 800d180:	0004 0500 0000 0000 0000 0000 0006 0000     ................
 800d190:	0000 0000 0700 0000 0908 000a 0c0b 0e0d     ................
 800d1a0:	000f 1000 1211 0000 1413 1615 0000 1817     ................
 800d1b0:	1a19 001b 001c 0000 001d 0000 0000 0000     ................
 800d1c0:	1f1e 0020 0000 0000 0021 0022 2423 0025     .. .....!.".#$%.
 800d1d0:	0000 2600 0000 0000 0000 0000 0000 0000     ...&............
	...
 800d240:	0000 2700 0028 0000 0000 0000 0000 0000     ...'(...........
 800d250:	0000 0000 0000 0029 0000 0000 0000 0000     ......).........
	...
 800d288:	0000 002a 0000 0000 0000 0000 0000 0000     ..*.............
 800d298:	0000 0000 2b00 002c 2d00 0000 0000 0000     .....+,..-......
	...
 800d2c0:	2f2e 0030 0000 0000 0000 0000 0000 0000     ./0.............
	...
 800d2d8:	0031 0000 0000 0000 0000 0000 0000 0000     1...............
	...
 800d2f8:	0000 3200 3300 0000 0000 0000 0000 0000     ...2.3..........
	...
 800d318:	3534 0000 3535 3635 0000 0000 0000 0000     45..5556........
	...
 800d364:	0000 2000 0000 0000 0001 0000 0000 0000     ... ............
 800d374:	0000 07c0 f06e 0000 0000 8700 0000 0000     ....n...........
 800d384:	0060 0000 0000 0000 00f0 0000 ffc0 0001     `...............
 800d394:	0000 0000 0002 0000 0000 ff00 007f 0000     ................
 800d3a4:	0000 8000 0003 0000 0000 0678 0007 0000     ..........x.....
 800d3b4:	ef80 001f 0000 0000 0000 0008 0003 0000     ................
 800d3c4:	0000 7fc0 1e00 0000 0000 0000 0000 0000     ................
 800d3d4:	8000 40d3 0000 8000 07f8 0000 0003 0000     ...@............
 800d3e4:	0000 5800 0001 0080 1fc0 001f 0000 0000     ...X............
 800d3f4:	0000 ff00 005c 4000 0000 0000 0000 0000     ....\..@........
 800d404:	0000 a5f9 000d 0000 0000 0000 0000 0000     ................
 800d414:	8000 b03c 0001 3000 0000 0000 0000 0000     ..<....0........
 800d424:	0000 a7f8 0001 0000 0000 0000 0000 0000     ................
 800d434:	2800 00bf 0000 e000 0fbc 0000 0000 0000     .(..............
 800d444:	8000 06ff 07fe 0000 0000 79f8 0080 0e7e     ...........y..~.
 800d454:	0000 0000 fc00 037f 0000 0000 0000 0000     ................
 800d464:	0000 bf7f 0000 fffc fcff 006d 0000 0000     ..........m.....
 800d474:	0000 b47e 00bf 0000 0000 0000 0000 00a3     ..~.............
	...
 800d48c:	0000 0018 0000 0000 0000 001f 0000 0000     ................
 800d49c:	0000 007f 8000 0007 0000 0000 0000 6000     ...............`
	...
 800d4b4:	c3a0 f807 0fe7 0000 3c00 0000 001c 0000     .........<......
 800d4c4:	0000 0000 ffff ffff ffff f87f ffff ffff     ................
 800d4d4:	1fff 0020 0010 f800 fffe 0000 ff7f f9ff     .. .............
 800d4e4:	07db 0000 0000 007f 0000 0000 07f0 0000     ................
	...
 800d4fc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 800d50c:	ffff 0000 0000 0000 0000 0000 0000 0000     ................
	...
 800d570:	ffff ffff ffff ffff ffff ffff ffff 0000     ................
	...
 800d5a0:	03f8 0000 0000 0000 0000 0000 0000 0000     ................
	...
 800d5c0:	0000 fffe ffff bfff 00b6 0000 0000 0000     ................
 800d5d0:	0000 07ff 0000 0000 f800 ffff 0000 0001     ................
	...
 800d5e8:	0000 9fc0 3d9f 0000 0000 0002 0000 ffff     .....=..........
 800d5f8:	07ff 0000 0000 0000 0000 0000 ffc0 0001     ................
 800d608:	0000 0000 f800 200f cf08 0800 004a 0000     ....... ....J...
 800d618:	d158 0800 0200 0000 d358 0800 0037 0000     X.......X...7...
 800d628:	0100 0302 0504 0706 0908 0a08 0c0b 0e0d     ................
 800d638:	100f 1211 1413 1502 1716 1918 1b1a 1d1c     ................
 800d648:	1f1e 0220 0202 0202 0202 0202 2102 0202     .. ..........!..
 800d658:	0202 0202 0202 0202 0202 0202 2322 2524     ............"#$%
 800d668:	0226 0227 0228 0202 2a29 022b 2d2c 2f2e     &.'.(...)*+.,-./
 800d678:	0230 3102 0202 3202 0202 0202 0202 0202     0..1...2........
 800d688:	0233 3402 0202 0202 0202 0202 0202 0202     3..4............
 800d698:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800d6a8:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800d6b8:	0202 3502 3602 3702 0202 0202 0202 0202     ...5.6.7........
 800d6c8:	0238 0239 0202 0202 0202 0202 0202 0202     8.9.............
 800d6d8:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800d6e8:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800d6f8:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800d708:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800d718:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800d728:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800d738:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800d748:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800d758:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800d768:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800d778:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800d788:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800d798:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800d7a8:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800d7b8:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800d7c8:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800d7d8:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800d7e8:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800d7f8:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800d808:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800d818:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800d828:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800d838:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800d848:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800d858:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800d868:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800d878:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800d888:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800d898:	0202 0202 0202 0202 3a02 3c3b 0202 0202     .........:;<....
 800d8a8:	023d 3e02 403f 4241 4443 4645 0202 4702     =..>?@ABCDEF...G
 800d8b8:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800d8c8:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800d8d8:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800d8e8:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800d8f8:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800d908:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800d918:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800d928:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800d938:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800d948:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800d958:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800d968:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800d978:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800d988:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800d998:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800d9a8:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800d9b8:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800d9c8:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800d9d8:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800d9e8:	0202 0202 0202 0202 0202 0202 0248 0202     ............H...
 800d9f8:	0202 0202 0202 0202 0249 0202 0202 023b     ........I.....;.
 800da08:	0100 0202 0202 0203 0202 0402 0502 0206     ................
 800da18:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800da28:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800da38:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800da48:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800da58:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800da68:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800da78:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800da88:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800da98:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800daa8:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800dab8:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800dac8:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800dad8:	0207 0202 0202 0202 0202 0202 0202 0202     ................
 800dae8:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800daf8:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800db08:	3025 6c36 2075 6800 6e61 6c64 5f65 6f63     %06lu .handle_co
 800db18:	7061 000a 454e 2054 6170 6c79 616f 2064     ap..NET payload 
 800db28:	6973 657a 2520 0a64                          size %d..

0800db31 <COAP_HOST>:
 800db31:	3031 2e34 3931 2e39 3538 322e 3131           104.199.85.211.

0800db40 <COAP_URI>:
 800db40:	3276 742f 6968 676e 2f73 5649 6952 4342     v2/things/IVRiBC
 800db50:	5263 4836 7050 435f 5a63 4649 4f66 465a     cR6HPp_CcZIFfOZF
 800db60:	7a78 695f 6e7a 3569 6378 4b5f 2d4f 676b     xz_izni5xc_KO-kg
 800db70:	4153 5932 0038                              SA2Y8.

0800db76 <COLLECTOR_NODE_HW_ID>:
 800db76:	ff57 066a 7878 5054 2949 6724               W.j.xxTPI)$g

0800db82 <SENSOR_NODE_HW_IDS>:
 800db82:	ff38 066d 574e 3634 5825 4308 0201 0403     8.m.NW46%X.C....
 800db92:	0605 0807 0a09 020b 0201 0403 0605 0807     ................
 800dba2:	0a09 030b 0201 0403 0605 0807 0a09 040b     ................
 800dbb2:	0201 0403 0605 0807 0a09 050b 3025 7832     ............%02x
 800dbc2:	2500 7273 6e61 6f64 206d 6564 6976 6563     .%srandom device
 800dbd2:	6920 2064 7325 000a 7325 7768 6469 0020      id %s..%shwid .
 800dbe2:	454e 2054 7473 7261 0a74 4e00 5445 6620     NET start..NET f
 800dbf2:	6572 2065 626d 6675 2520 0a64 0000          ree mbuf %d...

0800dc00 <sensor_network_encoding>:
 800dc00:	0032 0000 003c 0000 3025 3031 6c6c 0078     2...<...%010llx.
 800dc10:	6e20 646f 2065 2500 7373 6e65 6f73 2572      node .%ssensor%
 800dc20:	2373 6425 000a 7325 6f63 6c6c 6365 6f74     s#%d..%scollecto
 800dc30:	2572 0a73 2500 7373 6174 646e 6c61 6e6f     r%s..%sstandalon
 800dc40:	2565 0a73 4e00 5445 6e20 7465 6f77 6b72     e%s..NET network
 800dc50:	6e20 746f 7220 6165 7964 000a 454e 2054      not ready..NET 
 800dc60:	2500 2573 2073 7325 000a 0000               .%s%s %s....

0800dc6c <sensor_network_shortname>:
 800dc6c:	dca8 0800 dcac 0800 656e 7774 726f 006b     ........network.
 800dc7c:	0000 0000                                   ....

0800dc80 <sensor_node_addresses>:
 800dc80:	b6f1 b4b5 00b3 0000 b6cd b4b5 00b3 0000     ................
 800dc90:	b6a3 b4b5 00b3 0000 b60f b4b5 00b3 0000     ................
 800dca0:	b605 b4b5 00b3 0000 7673 0072 6f63 006c     ........svr.col.
 800dcb0:	636f 725f 7065 6f5f 6f00 5f63 6c63 635f     oc_rep_o.oc_cl_c
 800dcc0:	7362 ff00 6300 616f 5f70 6572 6563 7669     bs...coap_receiv
 800dcd0:	2065 4f4e 2054 4d49 4c50 4d45 4e45 4554     e NOT IMPLEMENTE
 800dce0:	0a44 2200 2200 203a 7b00 7400 7572 0065     D..".": .{.true.
 800dcf0:	6166 736c 0065 6c25 756c 2500 6c6c 0064     false.%llu.%lld.
 800dd00:	005c 745c 5c00 0072 6e5c 5c00 0066 625c     \.\t.\r.\n.\f.\b
 800dd10:	5b00 5d00 7d00 7300 6e65 6f73 5f72 6f6e     .[.].}.sensor_no
 800dd20:	6974 5f66 7665 7374 4100 7373 7265 2074     tif_evts.Assert 
 800dd30:	2040 7830 7825 000a 7341 6573 7472 4020     @ 0x%x..Assert @
 800dd40:	3020 2578 2078 202d 7325 253a 0a64 5500      0x%x - %s:%d..U
 800dd50:	686e 6e61 6c64 6465 6920 746e 7265 7572     nhandled interru
 800dd60:	7470 2820 6c25 2964 202c 7865 6563 7470     pt (%ld), except
 800dd70:	6f69 206e 7073 3020 2578 3830 786c 000a     ion sp 0x%08lx..
 800dd80:	7220 3a30 7830 3025 6c38 2078 7220 3a31      r0:0x%08lx  r1:
 800dd90:	7830 3025 6c38 2078 7220 3a32 7830 3025     0x%08lx  r2:0x%0
 800dda0:	6c38 2078 7220 3a33 7830 3025 6c38 0a78     8lx  r3:0x%08lx.
 800ddb0:	2000 3472 303a 2578 3830 786c 2020 3572     . r4:0x%08lx  r5
 800ddc0:	303a 2578 3830 786c 2020 3672 303a 2578     :0x%08lx  r6:0x%
 800ddd0:	3830 786c 2020 3772 303a 2578 3830 786c     08lx  r7:0x%08lx
 800dde0:	000a 7220 3a38 7830 3025 6c38 2078 7220     .. r8:0x%08lx  r
 800ddf0:	3a39 7830 3025 6c38 2078 3172 3a30 7830     9:0x%08lx r10:0x
 800de00:	3025 6c38 2078 3172 3a31 7830 3025 6c38     %08lx r11:0x%08l
 800de10:	0a78 7200 3231 303a 2578 3830 786c 2020     x..r12:0x%08lx  
 800de20:	726c 303a 2578 3830 786c 2020 6370 303a     lr:0x%08lx  pc:0
 800de30:	2578 3830 786c 7020 7273 303a 2578 3830     x%08lx psr:0x%08
 800de40:	786c 000a 4349 5253 303a 2578 3830 786c     lx..ICSR:0x%08lx
 800de50:	4820 5346 3a52 7830 3025 6c38 2078 4643      HFSR:0x%08lx CF
 800de60:	5253 303a 2578 3830 786c 000a 4642 5241     SR:0x%08lx..BFAR
 800de70:	303a 2578 3830 786c 4d20 464d 5241 303a     :0x%08lx MMFAR:0
 800de80:	2578 3830 786c 000a 616d 6e69 6900 6c64     x%08lx..main.idl
 800de90:	0065 736d 7379 315f 0000 0000               e.msys_1....

0800de9c <MemFile_methods>:
 800de9c:	75cd 0800 0000 0000                         .u......

0800dea4 <stdout>:
 800dea4:	0184 2000 6574 706d 735f 6d74 3233 305f     ... temp_stm32_0
 800deb4:	5200 444e 7020 7265 6f73 616e 696c 6573     .RND personalise
 800dec4:	7720 7469 2068 7768 6920 2064 5200 444e      with hw id .RND
 800ded4:	7320 6565 2064 6977 6874 7420 6d65 2070      seed with temp 
 800dee4:	6e65 7274 706f 2079 0000 0000               entropy ....

0800def0 <g_temp_stm32_sensor_driver>:
 800def0:	79dd 0800 781b 0800 0000 0000 0000 0000     .y...x..........
	...
 800df18:	6461 3163 5300 4d54 7220 6165 2064 6e69     adc1.STM read in
 800df28:	2074 6574 706d 7320 6e65 6f73 0a72 4100     t temp sensor..A
 800df38:	4344 6f20 6570 206e 6863 3120 0a36 0000     DC open ch 16...

0800df48 <k256>:
 800df48:	2f98 428a 4491 7137 fbcf b5c0 dba5 e9b5     ./.B.D7q........
 800df58:	c25b 3956 11f1 59f1 82a4 923f 5ed5 ab1c     [.V9...Y..?..^..
 800df68:	aa98 d807 5b01 1283 85be 2431 7dc3 550c     .....[....1$.}.U
 800df78:	5d74 72be b1fe 80de 06a7 9bdc f174 c19b     t].r........t...
 800df88:	69c1 e49b 4786 efbe 9dc6 0fc1 a1cc 240c     .i...G.........$
 800df98:	2c6f 2de9 84aa 4a74 a9dc 5cb0 88da 76f9     o,.-..tJ...\...v
 800dfa8:	5152 983e c66d a831 27c8 b003 7fc7 bf59     RQ>.m.1..'....Y.
 800dfb8:	0bf3 c6e0 9147 d5a7 6351 06ca 2967 1429     ....G...Qc..g)).
 800dfc8:	0a85 27b7 2138 2e1b 6dfc 4d2c 0d13 5338     ...'8!...m,M..8S
 800dfd8:	7354 650a 0abb 766a c92e 81c2 2c85 9272     Ts.e..jv.....,r.
 800dfe8:	e8a1 a2bf 664b a81a 8b70 c24b 51a3 c76c     ....Kf..p.K..Ql.
 800dff8:	e819 d192 0624 d699 3585 f40e a070 106a     ....$....5..p.j.
 800e008:	c116 19a4 6c08 1e37 774c 2748 bcb5 34b0     .....l7.LwH'...4
 800e018:	0cb3 391c aa4a 4ed8 ca4f 5b9c 6ff3 682e     ...9J..NO..[.o.h
 800e028:	82ee 748f 636f 78a5 7814 84c8 0208 8cc7     ...toc.x.x......
 800e038:	fffa 90be 6ceb a450 a3f7 bef9 78f2 c671     .....lP......xq.
 800e048:	6175 7472 0030 0000                         uart0...

0800e050 <uart_cfg>:
 800e050:	4400 4000 101c 4002 0000 0002 0302 ffff     .D.@...@........
 800e060:	8159 0800 0026 0000                         Y...&...

0800e068 <stm32_flash_dev>:
 800e068:	e080 0800 0000 0800 0000 0002 0080 0000     ................
 800e078:	0002 0000 00ff 0000                         ........

0800e080 <stm32_flash_funcs>:
 800e080:	83ed 0800 83fd 0800 83e9 0800 83cd 0800     ................
 800e090:	0000 0000 83df 0800 0000 0000               ............

0800e09c <stm32_tmr_devs>:
 800e09c:	34fc 2000 0000 0000 0000 0000               .4. ........

0800e0a8 <portmap>:
 800e0a8:	0800 4001 0c00 4001 1000 4001 1400 4001     ...@...@...@...@
 800e0b8:	1800 4001 0302 0504 0706 0908 0b0a 0d0c     ...@............
 800e0c8:	0f0e 1010 4441 2043 7263 6165 6574 6120     ....ADC create a
 800e0d8:	6364 0a31 0000 0000                         dc1.....

0800e0e0 <stm32f1_adc_funcs>:
 800e0e0:	9a35 0800 9b25 0800 9ad5 0800 99d7 0800     5...%...........
 800e0f0:	99c9 0800 9abf 0800 99c1 0800 7325 7263     ............%scr
 800e100:	6165 6574 6220 3963 6735 305f 000a 6362     eate bc95g_0..bc
 800e110:	3539 5f67 0030 0a5b 2b00 3125 5b36 3a5e     95g_0.[..+%16[^:
 800e120:	3a5d 6425 2b00 3125 5b36 3a5e 3a5d 6425     ]:%d.+%16[^:]:%d
 800e130:	252c 0064 0a5d 0000                         ,%d.]...

0800e138 <_ZL13network_iface>:
 800e138:	0000 0000 e10e 0800 0010 0000 9d91 0800     ................
 800e148:	0000 0000 5441 203e 534e 534f 3d54 6425     ....AT> NSOST=%d
 800e158:	252c 2c73 6425 252c 2c64 000a 534e 534f     ,%s,%d,%d,..NSOS
 800e168:	3d54 6425 252c 2c73 6425 252c 2c64 7300     T=%d,%s,%d,%d,.s
 800e178:	6e65 2064 626d 6675 2500 2573 2073 7525     end mbuf.%s%s %u
 800e188:	2e2e 0a2e                                    .....

0800e18d <_ZL3ATP>:
 800e18d:	5441 002b 0000                               AT+....

0800e194 <_ZL8COMMANDS>:
 800e194:	e32d 0800 e1f3 0800 e20d 0800 e217 0800     -...............
 800e1a4:	e21b 0800 e224 0800 e22b 0800 e231 0800     ....$...+...1...
 800e1b4:	e239 0800 e240 0800 e248 0800 e1e0 0800     9...@...H.......
 800e1c4:	e24f 0800 e267 0800 e272 0800 e27d 0800     O...g...r...}...
 800e1d4:	e285 0800 4b4f 0d00 410a 0054 534e 434f     ....OK...AT.NSOC
 800e1e4:	3d52 4744 4152 2c4d 3731 302c 312c 4e00     R=DGRAM,17,0,1.N
 800e1f4:	4f43 464e 4749 413d 5455 434f 4e4f 454e     CONFIG=AUTOCONNE
 800e204:	5443 462c 4c41 4553 5100 4552 5347 5457     CT,FALSE.QREGSWT
 800e214:	323d 4e00 4252 4e00 4142 444e 253d 0064     =2.NRB.NBAND=%d.
 800e224:	4643 4e55 313d 4300 5546 3f4e 4300 5245     CFUN=1.CFUN?.CER
 800e234:	4745 303d 4300 5245 4745 003f 4743 5441     EG=0.CEREG?.CGAT
 800e244:	3d54 0031 4743 5441 3f54 4e00 4f53 5453     T=1.CGATT?.NSOST
 800e254:	253d 2c64 7325 252c 2c64 6425 252c 2c73     =%d,%s,%d,%d,%s,
 800e264:	6425 4e00 4f53 4652 313d 252c 0064 534e     %d.NSORF=1,%d.NS
 800e274:	434f 3d4c 2c31 6425 4300 5047 4441 5244     OCL=1,%d.CGPADDR
 800e284:	4e00 4555 5453 5441 0053 424e 2054 6573     .NUESTATS.NBT se
 800e294:	646e 7520 7064 000a 424e 2054 7473 0a72     nd udp..NBT str.
 800e2a4:	5400 444f 3a4f 636f 655f 5f70 7473 0072     .TODO:oc_ep_str.

0800e2b4 <_ZL9transport>:
 800e2b4:	0000 0000 a307 0800 a30b 0800 a335 0800     ............5...
	...
 800e2cc:	a315 0800 a30f 0800 a313 0800 7325 7325     ............%s%s
 800e2dc:	7325 2000 4b4f 000a 4620 4941 454c 0a44     %s. OK.. FAILED.
 800e2ec:	4e00 5442 0020 5441 7220 7365 6f70 736e     .NBT .AT respons
 800e2fc:	2065 696d 6d73 7461 6863 203a 6f66 6e75     e mismatch: foun
 800e30c:	2064 2522 2273 200a 2020 7865 6570 7463     d "%s".   expect
 800e31c:	6465 2220 7325 0a22 4100 2154 2520 0d73     ed "%s"..AT! %s.
 800e32c:	000a 2020 203c 6425 2f20 2520 0073 2020     ..  < %d / %s.  
 800e33c:	203c 7325 4100 3d54 2520 0d73 000a 5441     < %s.AT= %s...AT
 800e34c:	203c 7325 4100 3e54 2520 0d73 000a 4d54     < %s.AT> %s...TM
 800e35c:	2050 7263 6165 6574 2520 0a73 0000 0000     P create %s.....

0800e36c <sysflash_map_dflt>:
 800e36c:	0000 0000 0000 0800 1000 0000 0001 0000     ................
 800e37c:	1000 0800 f000 0000 0002 0000 4010 0801     .............@..
 800e38c:	0000 0000 0003 0000 4020 0801 0000 0000     ........ @......
 800e39c:	0010 0000 0000 0801 2000 0000 0011 0000     ......... ......
 800e3ac:	2000 0801 2000 0000 0302 0504 0706 0908     . ... ..........
 800e3bc:	0b0a 0d0c 0f0e 1010                         ........

/Users/Luppy/mynewt/stm32bluepill-mynewt-sensor/bin/targets/bluepill_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf:     file format elf32-littlearm

arm-none-eabi-objdump: section '.rodata' mentioned in a -j option, but not found in any input file
   text	   data	    bss	    dec	    hex	filename
  54204	    244	  13412	  67860	  10914	/Users/Luppy/mynewt/stm32bluepill-mynewt-sensor/bin/targets/bluepill_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf
