In archive target/thumbv7m-none-eabi/debug/libmylib.rlib:

mylib-01c8eb6571dba957.12y5xoizfzc3imbb.rcgu.o:     file format elf32-littlearm

SYMBOL TABLE:
00000000 l    df *ABS*	00000000 12y5xoizfzc3imbb
00000000 l       .debug_str	00000000 
00000039 l       .debug_str	00000000 
00000044 l       .debug_str	00000000 
00000067 l       .debug_str	00000000 
0000006d l       .debug_str	00000000 
0000007b l       .debug_str	00000000 
00000084 l       .debug_str	00000000 
0000008b l       .debug_str	00000000 
0000009a l       .debug_str	00000000 
0000009e l       .debug_str	00000000 
000000a6 l       .debug_str	00000000 
000000aa l       .debug_str	00000000 
000000af l       .debug_str	00000000 
000000b3 l       .debug_str	00000000 
000000bd l       .debug_str	00000000 
000000c7 l       .debug_str	00000000 
000000cd l       .debug_str	00000000 
000000e7 l       .debug_str	00000000 
0000013c l       .debug_str	00000000 
00000143 l       .debug_str	00000000 
0000014b l       .debug_str	00000000 
0000015a l       .debug_str	00000000 
00000190 l       .debug_str	00000000 
000001d4 l       .debug_str	00000000 
000001ea l       .debug_str	00000000 
00000229 l       .debug_str	00000000 
0000023a l       .debug_str	00000000 
00000278 l       .debug_str	00000000 
00000288 l       .debug_str	00000000 
0000028c l       .debug_str	00000000 
0000028f l       .debug_str	00000000 
00000299 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000002aa l       .debug_str	00000000 
000002ae l       .debug_str	00000000 
000002b8 l       .debug_str	00000000 
000002bc l       .debug_str	00000000 
000002c8 l       .debug_str	00000000 
000002cb l       .debug_str	00000000 
000002d0 l       .debug_str	00000000 
000002dc l       .debug_str	00000000 
000002e8 l       .debug_str	00000000 
000002ef l       .debug_str	00000000 
000002f5 l       .debug_str	00000000 
00000301 l       .debug_str	00000000 
0000030b l       .debug_str	00000000 
00000311 l       .debug_str	00000000 
00000325 l       .debug_str	00000000 
0000032a l       .debug_str	00000000 
0000033b l       .debug_str	00000000 
0000034d l       .debug_str	00000000 
0000035a l       .debug_str	00000000 
00000366 l       .debug_str	00000000 
00000374 l       .debug_str	00000000 
0000038b l       .debug_str	00000000 
0000039d l       .debug_str	00000000 
000003bd l       .debug_str	00000000 
000003c6 l       .debug_str	00000000 
000003cf l       .debug_str	00000000 
000003e1 l       .debug_str	00000000 
00000000 l     O .rodata..Lanon.c4007478d13b65e86f597003733140aa.0	0000000a .Lanon.c4007478d13b65e86f597003733140aa.0
00000000 l     O .rodata..Lanon.c4007478d13b65e86f597003733140aa.11	00000018 .Lanon.c4007478d13b65e86f597003733140aa.11
00000000 l     O .rodata..Lanon.c4007478d13b65e86f597003733140aa.12	00000016 .Lanon.c4007478d13b65e86f597003733140aa.12
00000000 l     O .rodata..Lanon.c4007478d13b65e86f597003733140aa.13	00000018 .Lanon.c4007478d13b65e86f597003733140aa.13
00000000 l     O .rodata..Lanon.c4007478d13b65e86f597003733140aa.14	00000001 .Lanon.c4007478d13b65e86f597003733140aa.14
00000000 l     O .rodata..Lanon.c4007478d13b65e86f597003733140aa.15	00000018 .Lanon.c4007478d13b65e86f597003733140aa.15
00000000 l     O .rodata..Lanon.c4007478d13b65e86f597003733140aa.16	00000018 .Lanon.c4007478d13b65e86f597003733140aa.16
00000000 l     O .rodata..Lanon.c4007478d13b65e86f597003733140aa.17	00000019 .Lanon.c4007478d13b65e86f597003733140aa.17
00000000 l     O .rodata..Lanon.c4007478d13b65e86f597003733140aa.3	00000018 .Lanon.c4007478d13b65e86f597003733140aa.3
00000000 l     O .rodata..Lanon.c4007478d13b65e86f597003733140aa.5	00000018 .Lanon.c4007478d13b65e86f597003733140aa.5
00000000 l     O .rodata..Lanon.c4007478d13b65e86f597003733140aa.6	00000018 .Lanon.c4007478d13b65e86f597003733140aa.6
00000000 l     O .rodata..Lanon.c4007478d13b65e86f597003733140aa.7	00000011 .Lanon.c4007478d13b65e86f597003733140aa.7
00000000 l     O .rodata..Lanon.c4007478d13b65e86f597003733140aa.9	00000018 .Lanon.c4007478d13b65e86f597003733140aa.9
00000000 l     F .text._ZN5mylib13listen_sensor15get_temperature17hc17d0de891fbd996E	00000150 mylib::listen_sensor::get_temperature
00000000 l     F .text._ZN5mylib13listen_sensor16read_temperature17hfd8de5ce0258286cE	00000120 mylib::listen_sensor::read_temperature
00000000 l     O .rodata._ZN5mylib13listen_sensor8LISTENER17h9abcd78aa272b11cE	00000018 mylib::listen_sensor::LISTENER
00000000 l    d  .text._ZN5mylib13listen_sensor21start_sensor_listener17hfc870be3f3518a85E	00000000 .text._ZN5mylib13listen_sensor21start_sensor_listener17hfc870be3f3518a85E
00000000 l    d  .text._ZN5mylib13listen_sensor16read_temperature17hfd8de5ce0258286cE	00000000 .text._ZN5mylib13listen_sensor16read_temperature17hfd8de5ce0258286cE
00000000 l    d  .text._ZN5mylib13listen_sensor15get_temperature17hc17d0de891fbd996E	00000000 .text._ZN5mylib13listen_sensor15get_temperature17hc17d0de891fbd996E
00000000 l    d  .rodata._ZN5mylib13listen_sensor8LISTENER17h9abcd78aa272b11cE	00000000 .rodata._ZN5mylib13listen_sensor8LISTENER17h9abcd78aa272b11cE
00000000 l    d  .rodata..Lanon.c4007478d13b65e86f597003733140aa.1	00000000 .rodata..Lanon.c4007478d13b65e86f597003733140aa.1
00000000 l    d  .rodata..Lanon.c4007478d13b65e86f597003733140aa.2	00000000 .rodata..Lanon.c4007478d13b65e86f597003733140aa.2
00000000 l    d  .rodata..Lanon.c4007478d13b65e86f597003733140aa.4	00000000 .rodata..Lanon.c4007478d13b65e86f597003733140aa.4
00000000 l    d  .rodata..Lanon.c4007478d13b65e86f597003733140aa.8	00000000 .rodata..Lanon.c4007478d13b65e86f597003733140aa.8
00000000 l    d  .rodata..Lanon.c4007478d13b65e86f597003733140aa.10	00000000 .rodata..Lanon.c4007478d13b65e86f597003733140aa.10
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_line	00000000 .debug_line
00000000         *UND*	00000000 core::slice::<impl [T]>::as_ptr
00000000         *UND*	00000000 core::panicking::panic
00000000 g     F .text._ZN5mylib13listen_sensor21start_sensor_listener17hfc870be3f3518a85E	000000ac .hidden mylib::listen_sensor::start_sensor_listener
00000000         *UND*	00000000 .hidden mylib::base::SENSOR_DEVICE
00000000         *UND*	00000000 .hidden mylib::base::console_print
00000000         *UND*	00000000 .hidden mylib::base::TEMP_SENSOR_KEY
00000000         *UND*	00000000 .hidden mylib::sensor::register_listener
00000000         *UND*	00000000 .hidden mylib::send_coap::send_sensor_data
00000000         *UND*	00000000 cstr_core::CStr::from_ptr
00000000         *UND*	00000000 device_get_name
00000000         *UND*	00000000 get_temp_data
00000000         *UND*	00000000 get_temp_raw_data
00000000         *UND*	00000000 is_null_sensor
00000000         *UND*	00000000 is_null_sensor_data
00000000         *UND*	00000000 null_sensor
00000000         *UND*	00000000 sensor_get_device
00000000         *UND*	00000000 sensor_mgr_find_next_bydevname
00000000         *UND*	00000000 sensor_set_poll_rate_ms



Disassembly of section .text._ZN5mylib13listen_sensor21start_sensor_listener17hfc870be3f3518a85E:

00000000 <mylib::listen_sensor::start_sensor_listener>:
_ZN5mylib13listen_sensor21start_sensor_listener17hfc870be3f3518a85E():
/mnt/c/stm32bluepill-mynewt-sensor/src/listen_sensor.rs:40
///  Listener Function to send the sensor data to the Collector Node (if this is a Sensor Node)
///  or CoAP Server (is this is a Standalone Node).
///  For Collector Node: Start the Listeners for Remote Sensor 
///  Otherwise this is a Standalone Node with ESP8266, or a Sensor Node with nRF24L01.
///  Return 0 if successful.
pub fn start_sensor_listener() -> i32 {
   0:	b580      	push	{r7, lr}
   2:	b088      	sub	sp, #32
/mnt/c/stm32bluepill-mynewt-sensor/src/listen_sensor.rs:41
    console_print(b"TMP poll \n");  //  SENSOR_DEVICE "\n";
   4:	f240 0000 	movw	r0, #0
   8:	f2c0 0000 	movt	r0, #0
   c:	210a      	movs	r1, #10
   e:	f7ff fffe 	bl	0 <mylib::base::console_print>
  12:	e7ff      	b.n	2 <mylib::base::SENSOR_DEVICE+0x2>
/mnt/c/stm32bluepill-mynewt-sensor/src/listen_sensor.rs:44

    //  Set the sensor polling time to 10 seconds.  SENSOR_DEVICE is either "bme280_0" or "temp_stm32_0"
    let rc = unsafe { sensor_set_poll_rate_ms(SENSOR_DEVICE(), SENSOR_POLL_TIME) };
  14:	f7ff fffe 	bl	0 <mylib::base::SENSOR_DEVICE>
  18:	9004      	str	r0, [sp, #16]
  1a:	e7ff      	b.n	1c <mylib::listen_sensor::start_sensor_listener+0x1c>
  1c:	f242 7110 	movw	r1, #10000	; 0x2710
  20:	9804      	ldr	r0, [sp, #16]
  22:	f7ff fffe 	bl	0 <sensor_set_poll_rate_ms>
  26:	9005      	str	r0, [sp, #20]
  28:	e7ff      	b.n	2a <mylib::listen_sensor::start_sensor_listener+0x2a>
/mnt/c/stm32bluepill-mynewt-sensor/src/listen_sensor.rs:45
    assert!(rc == 0);
  2a:	9805      	ldr	r0, [sp, #20]
  2c:	2800      	cmp	r0, #0
  2e:	d007      	beq.n	40 <mylib::listen_sensor::start_sensor_listener+0x40>
  30:	e7ff      	b.n	32 <mylib::listen_sensor::start_sensor_listener+0x32>
  32:	f240 0000 	movw	r0, #0
  36:	f2c0 0000 	movt	r0, #0
  3a:	f7ff fffe 	bl	0 <core::panicking::panic>
  3e:	defe      	udf	#254	; 0xfe
/mnt/c/stm32bluepill-mynewt-sensor/src/listen_sensor.rs:48

    //  Fetch the sensor by name, without locking the driver for exclusive access.
    let listen_sensor = unsafe { sensor_mgr_find_next_bydevname(SENSOR_DEVICE(), null_sensor()) };
  40:	f7ff fffe 	bl	0 <mylib::base::SENSOR_DEVICE>
  44:	9003      	str	r0, [sp, #12]
  46:	e7ff      	b.n	48 <mylib::listen_sensor::start_sensor_listener+0x48>
  48:	f7ff fffe 	bl	0 <null_sensor>
  4c:	9002      	str	r0, [sp, #8]
  4e:	e7ff      	b.n	50 <mylib::listen_sensor::start_sensor_listener+0x50>
  50:	9803      	ldr	r0, [sp, #12]
  52:	9902      	ldr	r1, [sp, #8]
  54:	f7ff fffe 	bl	0 <sensor_mgr_find_next_bydevname>
  58:	9006      	str	r0, [sp, #24]
  5a:	e7ff      	b.n	5c <mylib::listen_sensor::start_sensor_listener+0x5c>
/mnt/c/stm32bluepill-mynewt-sensor/src/listen_sensor.rs:49
    assert!(!unsafe{ is_null_sensor(listen_sensor) });
  5c:	9806      	ldr	r0, [sp, #24]
  5e:	f7ff fffe 	bl	0 <is_null_sensor>
  62:	9001      	str	r0, [sp, #4]
  64:	e7ff      	b.n	66 <mylib::listen_sensor::start_sensor_listener+0x66>
  66:	9801      	ldr	r0, [sp, #4]
  68:	07c1      	lsls	r1, r0, #31
  6a:	2900      	cmp	r1, #0
  6c:	d007      	beq.n	7e <mylib::listen_sensor::start_sensor_listener+0x7e>
  6e:	e7ff      	b.n	70 <mylib::listen_sensor::start_sensor_listener+0x70>
  70:	f240 0000 	movw	r0, #0
  74:	f2c0 0000 	movt	r0, #0
  78:	f7ff fffe 	bl	0 <core::panicking::panic>
  7c:	defe      	udf	#254	; 0xfe
/mnt/c/stm32bluepill-mynewt-sensor/src/listen_sensor.rs:52

    //  Set the Listener Function to be called every 10 seconds, with the polled sensor data.
    let rc = register_listener(listen_sensor, &LISTENER);
  7e:	9806      	ldr	r0, [sp, #24]
  80:	f240 0100 	movw	r1, #0
  84:	f2c0 0100 	movt	r1, #0
  88:	f7ff fffe 	bl	0 <mylib::sensor::register_listener>
  8c:	9007      	str	r0, [sp, #28]
  8e:	e7ff      	b.n	90 <mylib::listen_sensor::start_sensor_listener+0x90>
/mnt/c/stm32bluepill-mynewt-sensor/src/listen_sensor.rs:53
    assert!(rc == 0);
  90:	9807      	ldr	r0, [sp, #28]
  92:	2800      	cmp	r0, #0
  94:	d007      	beq.n	a6 <mylib::listen_sensor::start_sensor_listener+0xa6>
  96:	e7ff      	b.n	98 <mylib::listen_sensor::start_sensor_listener+0x98>
  98:	f240 0000 	movw	r0, #0
  9c:	f2c0 0000 	movt	r0, #0
  a0:	f7ff fffe 	bl	0 <core::panicking::panic>
  a4:	defe      	udf	#254	; 0xfe
  a6:	2000      	movs	r0, #0
/mnt/c/stm32bluepill-mynewt-sensor/src/listen_sensor.rs:57

    //  Return 0 to indicate success.  This line should not end with a semicolon (;).
    0
}
  a8:	b008      	add	sp, #32
  aa:	bd80      	pop	{r7, pc}

Disassembly of section .text._ZN5mylib13listen_sensor16read_temperature17hfd8de5ce0258286cE:

00000000 <mylib::listen_sensor::read_temperature>:
_ZN5mylib13listen_sensor16read_temperature17hfd8de5ce0258286cE():
/mnt/c/stm32bluepill-mynewt-sensor/src/listen_sensor.rs:72
///  This listener function is called by Mynewt every 10 seconds (for local sensors) or when sensor data is received
///  (for Remote Sensors).  Mynewt has fetched the raw or computed temperature value, passed through `sensor_data`.
///  If this is a Sensor Node, we send the sensor data to the Collector Node.
///  If this is a Collector Node or Standalone Node, we send the sensor data to the CoAP server.  
///  Return 0 if we have processed the sensor data successfully.
extern fn read_temperature(sensor: SensorPtr, _arg: SensorArg, sensor_data: SensorDataPtr, sensor_type: SensorType) -> i32 {
   0:	b5b0      	push	{r4, r5, r7, lr}
   2:	b096      	sub	sp, #88	; 0x58
   4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   6:	f8dd c068 	ldr.w	ip, [sp, #104]	; 0x68
   a:	4696      	mov	lr, r2
   c:	460c      	mov	r4, r1
   e:	4605      	mov	r5, r0
  10:	9007      	str	r0, [sp, #28]
  12:	9108      	str	r1, [sp, #32]
  14:	9209      	str	r2, [sp, #36]	; 0x24
  16:	930b      	str	r3, [sp, #44]	; 0x2c
  18:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
/mnt/c/stm32bluepill-mynewt-sensor/src/listen_sensor.rs:74
    unsafe {
        console_print(b"read_temperature\n");
  1c:	f240 0000 	movw	r0, #0
  20:	f2c0 0000 	movt	r0, #0
  24:	2111      	movs	r1, #17
  26:	f8cd e018 	str.w	lr, [sp, #24]
  2a:	9405      	str	r4, [sp, #20]
  2c:	9504      	str	r5, [sp, #16]
  2e:	f7ff fffe 	bl	0 <mylib::base::console_print>
  32:	e7ff      	b.n	34 <mylib::listen_sensor::read_temperature+0x34>
/mnt/c/stm32bluepill-mynewt-sensor/src/listen_sensor.rs:77
        //  Check that the temperature data is valid.
        //  TODO
        if is_null_sensor_data(sensor_data) { return SYS_EINVAL; }  //  Exit if data is missing
  34:	9809      	ldr	r0, [sp, #36]	; 0x24
  36:	f7ff fffe 	bl	0 <is_null_sensor_data>
  3a:	9003      	str	r0, [sp, #12]
  3c:	e7ff      	b.n	3e <mylib::listen_sensor::read_temperature+0x3e>
  3e:	9803      	ldr	r0, [sp, #12]
  40:	07c1      	lsls	r1, r0, #31
  42:	2900      	cmp	r1, #0
  44:	d004      	beq.n	50 <mylib::listen_sensor::read_temperature+0x50>
  46:	e7ff      	b.n	48 <mylib::listen_sensor::read_temperature+0x48>
  48:	f06f 0001 	mvn.w	r0, #1
  4c:	900c      	str	r0, [sp, #48]	; 0x30
  4e:	e004      	b.n	5a <mylib::listen_sensor::read_temperature+0x5a>
/mnt/c/stm32bluepill-mynewt-sensor/src/listen_sensor.rs:78
        assert!(!is_null_sensor(sensor));
  50:	9807      	ldr	r0, [sp, #28]
  52:	f7ff fffe 	bl	0 <is_null_sensor>
  56:	9002      	str	r0, [sp, #8]
  58:	e002      	b.n	60 <mylib::listen_sensor::read_temperature+0x60>
/mnt/c/stm32bluepill-mynewt-sensor/src/listen_sensor.rs:109
        }
        assert!(rc == 0);
        //#endif  //  MYNEWT_VAL(SENSOR_COAP)
    }
    0
}
  5a:	980c      	ldr	r0, [sp, #48]	; 0x30
  5c:	b016      	add	sp, #88	; 0x58
  5e:	bdb0      	pop	{r4, r5, r7, pc}
/mnt/c/stm32bluepill-mynewt-sensor/src/listen_sensor.rs:78
        assert!(!is_null_sensor(sensor));
  60:	9802      	ldr	r0, [sp, #8]
  62:	07c1      	lsls	r1, r0, #31
  64:	2900      	cmp	r1, #0
  66:	d007      	beq.n	78 <mylib::listen_sensor::read_temperature+0x78>
  68:	e7ff      	b.n	6a <mylib::listen_sensor::read_temperature+0x6a>
  6a:	f240 0000 	movw	r0, #0
  6e:	f2c0 0000 	movt	r0, #0
  72:	f7ff fffe 	bl	0 <core::panicking::panic>
  76:	defe      	udf	#254	; 0xfe
/mnt/c/stm32bluepill-mynewt-sensor/src/listen_sensor.rs:82
        let device = sensor_get_device(sensor);
  78:	9807      	ldr	r0, [sp, #28]
  7a:	f7ff fffe 	bl	0 <sensor_get_device>
  7e:	900d      	str	r0, [sp, #52]	; 0x34
  80:	e7ff      	b.n	82 <mylib::listen_sensor::read_temperature+0x82>
/mnt/c/stm32bluepill-mynewt-sensor/src/listen_sensor.rs:83
        let c_buf: *const c_char = device_get_name(device);
  82:	980d      	ldr	r0, [sp, #52]	; 0x34
  84:	f7ff fffe 	bl	0 <device_get_name>
  88:	900e      	str	r0, [sp, #56]	; 0x38
  8a:	e7ff      	b.n	8c <mylib::listen_sensor::read_temperature+0x8c>
/mnt/c/stm32bluepill-mynewt-sensor/src/listen_sensor.rs:84
        let device_name: &CStr = CStr::from_ptr(c_buf);
  8c:	980e      	ldr	r0, [sp, #56]	; 0x38
  8e:	f7ff fffe 	bl	0 <cstr_core::CStr::from_ptr>
  92:	9001      	str	r0, [sp, #4]
  94:	9100      	str	r1, [sp, #0]
  96:	e7ff      	b.n	98 <mylib::listen_sensor::read_temperature+0x98>
  98:	9801      	ldr	r0, [sp, #4]
  9a:	900f      	str	r0, [sp, #60]	; 0x3c
  9c:	9900      	ldr	r1, [sp, #0]
  9e:	9110      	str	r1, [sp, #64]	; 0x40
/mnt/c/stm32bluepill-mynewt-sensor/src/listen_sensor.rs:88
        let temp_sensor_value = get_temperature(sensor_data, sensor_type);
  a0:	9909      	ldr	r1, [sp, #36]	; 0x24
  a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  a6:	a811      	add	r0, sp, #68	; 0x44
  a8:	f7ff fffe 	bl	0 <mylib::listen_sensor::read_temperature>
  ac:	e7ff      	b.n	ae <mylib::listen_sensor::read_temperature+0xae>
/mnt/c/stm32bluepill-mynewt-sensor/src/listen_sensor.rs:89
        assert!(temp_sensor_value.val_type != 0);
  ae:	9812      	ldr	r0, [sp, #72]	; 0x48
  b0:	2800      	cmp	r0, #0
  b2:	d107      	bne.n	c4 <mylib::listen_sensor::read_temperature+0xc4>
  b4:	e7ff      	b.n	b6 <mylib::listen_sensor::read_temperature+0xb6>
  b6:	f240 0000 	movw	r0, #0
  ba:	f2c0 0000 	movt	r0, #0
  be:	f7ff fffe 	bl	0 <core::panicking::panic>
  c2:	defe      	udf	#254	; 0xfe
/mnt/c/stm32bluepill-mynewt-sensor/src/listen_sensor.rs:90
        if temp_sensor_value.val_type == 0 { return -1; }  //  Invalid type.
  c4:	9812      	ldr	r0, [sp, #72]	; 0x48
  c6:	2800      	cmp	r0, #0
  c8:	d104      	bne.n	d4 <mylib::listen_sensor::read_temperature+0xd4>
  ca:	e7ff      	b.n	cc <mylib::listen_sensor::read_temperature+0xcc>
  cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  d0:	900c      	str	r0, [sp, #48]	; 0x30
  d2:	e006      	b.n	e2 <mylib::listen_sensor::read_temperature+0xe2>
/mnt/c/stm32bluepill-mynewt-sensor/src/listen_sensor.rs:97
        let rc = send_sensor_data(&temp_sensor_value, device_name);
  d4:	990f      	ldr	r1, [sp, #60]	; 0x3c
  d6:	9a10      	ldr	r2, [sp, #64]	; 0x40
  d8:	a811      	add	r0, sp, #68	; 0x44
  da:	f7ff fffe 	bl	0 <mylib::send_coap::send_sensor_data>
  de:	9015      	str	r0, [sp, #84]	; 0x54
  e0:	e000      	b.n	e4 <mylib::listen_sensor::read_temperature+0xe4>
/mnt/c/stm32bluepill-mynewt-sensor/src/listen_sensor.rs:90
        if temp_sensor_value.val_type == 0 { return -1; }  //  Invalid type.
  e2:	e7ba      	b.n	5a <mylib::listen_sensor::read_temperature+0x5a>
/mnt/c/stm32bluepill-mynewt-sensor/src/listen_sensor.rs:101
        if rc == SYS_EAGAIN {
  e4:	9815      	ldr	r0, [sp, #84]	; 0x54
  e6:	3006      	adds	r0, #6
  e8:	2800      	cmp	r0, #0
  ea:	d108      	bne.n	fe <mylib::listen_sensor::read_temperature+0xfe>
  ec:	e7ff      	b.n	ee <mylib::listen_sensor::read_temperature+0xee>
/mnt/c/stm32bluepill-mynewt-sensor/src/listen_sensor.rs:102
            console_print(b"TMP network not ready\n");
  ee:	f240 0000 	movw	r0, #0
  f2:	f2c0 0000 	movt	r0, #0
  f6:	2116      	movs	r1, #22
  f8:	f7ff fffe 	bl	0 <mylib::base::console_print>
  fc:	e003      	b.n	106 <mylib::listen_sensor::read_temperature+0x106>
/mnt/c/stm32bluepill-mynewt-sensor/src/listen_sensor.rs:105
        assert!(rc == 0);
  fe:	9815      	ldr	r0, [sp, #84]	; 0x54
 100:	2800      	cmp	r0, #0
 102:	d103      	bne.n	10c <mylib::listen_sensor::read_temperature+0x10c>
 104:	e009      	b.n	11a <mylib::listen_sensor::read_temperature+0x11a>
 106:	2000      	movs	r0, #0
/mnt/c/stm32bluepill-mynewt-sensor/src/listen_sensor.rs:103
            return 0; 
 108:	900c      	str	r0, [sp, #48]	; 0x30
 10a:	e7ea      	b.n	e2 <mylib::listen_sensor::read_temperature+0xe2>
/mnt/c/stm32bluepill-mynewt-sensor/src/listen_sensor.rs:105
        assert!(rc == 0);
 10c:	f240 0000 	movw	r0, #0
 110:	f2c0 0000 	movt	r0, #0
 114:	f7ff fffe 	bl	0 <core::panicking::panic>
 118:	defe      	udf	#254	; 0xfe
 11a:	2000      	movs	r0, #0
/mnt/c/stm32bluepill-mynewt-sensor/src/listen_sensor.rs:108
    0
 11c:	900c      	str	r0, [sp, #48]	; 0x30
/mnt/c/stm32bluepill-mynewt-sensor/src/listen_sensor.rs:109
}
 11e:	e79c      	b.n	5a <mylib::listen_sensor::read_temperature+0x5a>

Disassembly of section .text._ZN5mylib13listen_sensor15get_temperature17hc17d0de891fbd996E:

00000000 <mylib::listen_sensor::get_temperature>:
_ZN5mylib13listen_sensor15get_temperature17hc17d0de891fbd996E():
/mnt/c/stm32bluepill-mynewt-sensor/src/listen_sensor.rs:114

///  Get the temperature value, raw or computed.  `sensor_data` contains the raw or computed temperature. 
///  `sensor_type` indicates whether `sensor_data` contains raw or computed temperature.  We return 
///  the raw or computed temperature, as well as the key and value type.
fn get_temperature(sensor_data: *const CVoid, sensor_type: SensorType) -> SensorValue {
   0:	b510      	push	{r4, lr}
   2:	b098      	sub	sp, #96	; 0x60
   4:	469c      	mov	ip, r3
   6:	4696      	mov	lr, r2
   8:	460c      	mov	r4, r1
   a:	9107      	str	r1, [sp, #28]
   c:	9309      	str	r3, [sp, #36]	; 0x24
   e:	9208      	str	r2, [sp, #32]
/mnt/c/stm32bluepill-mynewt-sensor/src/listen_sensor.rs:116
    let mut return_value = SensorValue {
        key: b"\0".as_ptr(),
  10:	f240 0100 	movw	r1, #0
  14:	f2c0 0100 	movt	r1, #0
  18:	2201      	movs	r2, #1
  1a:	9006      	str	r0, [sp, #24]
  1c:	4608      	mov	r0, r1
  1e:	4611      	mov	r1, r2
  20:	f8cd c014 	str.w	ip, [sp, #20]
  24:	f8cd e010 	str.w	lr, [sp, #16]
  28:	9403      	str	r4, [sp, #12]
  2a:	f7ff fffe 	bl	0 <core::slice::<impl [T]>::as_ptr>
  2e:	9002      	str	r0, [sp, #8]
  30:	e7ff      	b.n	32 <mylib::listen_sensor::get_temperature+0x32>
/mnt/c/stm32bluepill-mynewt-sensor/src/listen_sensor.rs:115
    let mut return_value = SensorValue {
  32:	9802      	ldr	r0, [sp, #8]
  34:	900b      	str	r0, [sp, #44]	; 0x2c
  36:	2100      	movs	r1, #0
  38:	910c      	str	r1, [sp, #48]	; 0x30
  3a:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
  3e:	910e      	str	r1, [sp, #56]	; 0x38
/mnt/c/stm32bluepill-mynewt-sensor/src/listen_sensor.rs:124
        float_val: 0.0,
    };
    unsafe {
        //assert!(sensor_data);
        match sensor_type {                                //  Is this raw or computed temperature?
            SENSOR_TYPE_AMBIENT_TEMPERATURE_RAW => {  //  If this is raw temperature...
  40:	9908      	ldr	r1, [sp, #32]
  42:	9a09      	ldr	r2, [sp, #36]	; 0x24
  44:	f081 6180 	eor.w	r1, r1, #67108864	; 0x4000000
  48:	4311      	orrs	r1, r2
  4a:	2900      	cmp	r1, #0
  4c:	d138      	bne.n	c0 <mylib::listen_sensor::get_temperature+0xc0>
  4e:	e7ff      	b.n	50 <mylib::listen_sensor::get_temperature+0x50>
  50:	2000      	movs	r0, #0
/mnt/c/stm32bluepill-mynewt-sensor/src/listen_sensor.rs:126
                //  Interpret the sensor data as a sensor_temp_raw_data struct that contains raw temp.
                let mut rawtempdata = SensorTempRawData {
  52:	900f      	str	r0, [sp, #60]	; 0x3c
  54:	f88d 0040 	strb.w	r0, [sp, #64]	; 0x40
/mnt/c/stm32bluepill-mynewt-sensor/src/listen_sensor.rs:130
                    strd_temp_raw: 0,
                    strd_temp_raw_is_valid: 0,
                };
                let rc = get_temp_raw_data(sensor_data, &mut rawtempdata);
  58:	9807      	ldr	r0, [sp, #28]
  5a:	a90f      	add	r1, sp, #60	; 0x3c
  5c:	f7ff fffe 	bl	0 <get_temp_raw_data>
  60:	9011      	str	r0, [sp, #68]	; 0x44
  62:	e7ff      	b.n	64 <mylib::listen_sensor::get_temperature+0x64>
/mnt/c/stm32bluepill-mynewt-sensor/src/listen_sensor.rs:131
                assert!(rc == 0);
  64:	9811      	ldr	r0, [sp, #68]	; 0x44
  66:	2800      	cmp	r0, #0
  68:	d007      	beq.n	7a <mylib::listen_sensor::get_temperature+0x7a>
  6a:	e7ff      	b.n	6c <mylib::listen_sensor::get_temperature+0x6c>
  6c:	f240 0000 	movw	r0, #0
  70:	f2c0 0000 	movt	r0, #0
  74:	f7ff fffe 	bl	0 <core::panicking::panic>
  78:	defe      	udf	#254	; 0xfe
/mnt/c/stm32bluepill-mynewt-sensor/src/listen_sensor.rs:134

                //  Check that the raw temperature data is valid.
                if rawtempdata.strd_temp_raw_is_valid == 0 { return return_value; }  //  Exit if data is not valid
  7a:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
  7e:	2800      	cmp	r0, #0
  80:	d10f      	bne.n	a2 <mylib::listen_sensor::get_temperature+0xa2>
  82:	e7ff      	b.n	84 <mylib::listen_sensor::get_temperature+0x84>
  84:	980b      	ldr	r0, [sp, #44]	; 0x2c
  86:	990c      	ldr	r1, [sp, #48]	; 0x30
  88:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  8c:	f8dd c018 	ldr.w	ip, [sp, #24]
  90:	f8cc 300c 	str.w	r3, [ip, #12]
  94:	f8cc 2008 	str.w	r2, [ip, #8]
  98:	f8cc 1004 	str.w	r1, [ip, #4]
  9c:	f8cc 0000 	str.w	r0, [ip]
  a0:	e00c      	b.n	bc <mylib::listen_sensor::get_temperature+0xbc>
/mnt/c/stm32bluepill-mynewt-sensor/src/listen_sensor.rs:137

                //  Raw temperature data is valid.  Copy and display it.
                return_value.int_val = rawtempdata.strd_temp_raw as u16;  //  Raw Temperature in integer (0 to 4095)
  a2:	980f      	ldr	r0, [sp, #60]	; 0x3c
  a4:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
/mnt/c/stm32bluepill-mynewt-sensor/src/listen_sensor.rs:138
                console_print(b"TMP listener got rawtmp \n");  // return_value->int_val);
  a8:	f240 0000 	movw	r0, #0
  ac:	f2c0 0000 	movt	r0, #0
  b0:	2119      	movs	r1, #25
  b2:	f7ff fffe 	bl	0 <mylib::base::console_print>
  b6:	e002      	b.n	be <mylib::listen_sensor::get_temperature+0xbe>
/mnt/c/stm32bluepill-mynewt-sensor/src/listen_sensor.rs:170
        //  Return the key and value type for raw or computed temperature, as defined in temp_stm32.h.
        return_value.key = TEMP_SENSOR_KEY();
        return_value.val_type = TEMP_SENSOR_VALUE_TYPE;
    };
    return_value
}
  b8:	b018      	add	sp, #96	; 0x60
  ba:	bd10      	pop	{r4, pc}
/mnt/c/stm32bluepill-mynewt-sensor/src/listen_sensor.rs:134
                if rawtempdata.strd_temp_raw_is_valid == 0 { return return_value; }  //  Exit if data is not valid
  bc:	e7fc      	b.n	b8 <mylib::listen_sensor::get_temperature+0xb8>
/mnt/c/stm32bluepill-mynewt-sensor/src/listen_sensor.rs:123
        match sensor_type {                                //  Is this raw or computed temperature?
  be:	e02f      	b.n	120 <mylib::listen_sensor::get_temperature+0x120>
/mnt/c/stm32bluepill-mynewt-sensor/src/listen_sensor.rs:140
            SENSOR_TYPE_AMBIENT_TEMPERATURE => {      //  If this is computed temperature...
  c0:	9808      	ldr	r0, [sp, #32]
  c2:	9909      	ldr	r1, [sp, #36]	; 0x24
  c4:	9113      	str	r1, [sp, #76]	; 0x4c
  c6:	9012      	str	r0, [sp, #72]	; 0x48
  c8:	2000      	movs	r0, #0
/mnt/c/stm32bluepill-mynewt-sensor/src/listen_sensor.rs:142
                let mut tempdata = SensorTempData {
  ca:	9015      	str	r0, [sp, #84]	; 0x54
  cc:	f88d 0058 	strb.w	r0, [sp, #88]	; 0x58
/mnt/c/stm32bluepill-mynewt-sensor/src/listen_sensor.rs:146
                let rc = get_temp_data(sensor_data, &mut tempdata);
  d0:	9807      	ldr	r0, [sp, #28]
  d2:	a915      	add	r1, sp, #84	; 0x54
  d4:	f7ff fffe 	bl	0 <get_temp_data>
  d8:	9017      	str	r0, [sp, #92]	; 0x5c
  da:	e7ff      	b.n	dc <mylib::listen_sensor::get_temperature+0xdc>
/mnt/c/stm32bluepill-mynewt-sensor/src/listen_sensor.rs:147
                assert!(rc == 0);
  dc:	9817      	ldr	r0, [sp, #92]	; 0x5c
  de:	2800      	cmp	r0, #0
  e0:	d007      	beq.n	f2 <mylib::listen_sensor::get_temperature+0xf2>
  e2:	e7ff      	b.n	e4 <mylib::listen_sensor::get_temperature+0xe4>
  e4:	f240 0000 	movw	r0, #0
  e8:	f2c0 0000 	movt	r0, #0
  ec:	f7ff fffe 	bl	0 <core::panicking::panic>
  f0:	defe      	udf	#254	; 0xfe
/mnt/c/stm32bluepill-mynewt-sensor/src/listen_sensor.rs:150
                if tempdata.std_temp_is_valid == 0 { return return_value; }  //  Exit if data is not valid
  f2:	f89d 0058 	ldrb.w	r0, [sp, #88]	; 0x58
  f6:	2800      	cmp	r0, #0
  f8:	d10f      	bne.n	11a <mylib::listen_sensor::get_temperature+0x11a>
  fa:	e7ff      	b.n	fc <mylib::listen_sensor::get_temperature+0xfc>
  fc:	980b      	ldr	r0, [sp, #44]	; 0x2c
  fe:	990c      	ldr	r1, [sp, #48]	; 0x30
 100:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 102:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 104:	f8dd c018 	ldr.w	ip, [sp, #24]
 108:	f8cc 300c 	str.w	r3, [ip, #12]
 10c:	f8cc 2008 	str.w	r2, [ip, #8]
 110:	f8cc 1004 	str.w	r1, [ip, #4]
 114:	f8cc 0000 	str.w	r0, [ip]
 118:	e7d0      	b.n	bc <mylib::listen_sensor::get_temperature+0xbc>
/mnt/c/stm32bluepill-mynewt-sensor/src/listen_sensor.rs:153
                return_value.float_val = tempdata.std_temp;  //  Temperature in floating point.
 11a:	9815      	ldr	r0, [sp, #84]	; 0x54
 11c:	900e      	str	r0, [sp, #56]	; 0x38
/mnt/c/stm32bluepill-mynewt-sensor/src/listen_sensor.rs:123
        match sensor_type {                                //  Is this raw or computed temperature?
 11e:	e7ff      	b.n	120 <mylib::listen_sensor::get_temperature+0x120>
/mnt/c/stm32bluepill-mynewt-sensor/src/listen_sensor.rs:166
        return_value.key = TEMP_SENSOR_KEY();
 120:	f7ff fffe 	bl	0 <mylib::base::TEMP_SENSOR_KEY>
 124:	9001      	str	r0, [sp, #4]
 126:	e7ff      	b.n	128 <mylib::listen_sensor::get_temperature+0x128>
 128:	9801      	ldr	r0, [sp, #4]
 12a:	900b      	str	r0, [sp, #44]	; 0x2c
 12c:	2101      	movs	r1, #1
/mnt/c/stm32bluepill-mynewt-sensor/src/listen_sensor.rs:167
        return_value.val_type = TEMP_SENSOR_VALUE_TYPE;
 12e:	910c      	str	r1, [sp, #48]	; 0x30
/mnt/c/stm32bluepill-mynewt-sensor/src/listen_sensor.rs:169
    return_value
 130:	990b      	ldr	r1, [sp, #44]	; 0x2c
 132:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 134:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 136:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
 13a:	f8dd e018 	ldr.w	lr, [sp, #24]
 13e:	f8ce c00c 	str.w	ip, [lr, #12]
 142:	f8ce 3008 	str.w	r3, [lr, #8]
 146:	f8ce 2004 	str.w	r2, [lr, #4]
 14a:	f8ce 1000 	str.w	r1, [lr]
/mnt/c/stm32bluepill-mynewt-sensor/src/listen_sensor.rs:170
}
 14e:	e7b3      	b.n	b8 <mylib::listen_sensor::get_temperature+0xb8>

mylib-01c8eb6571dba957.1570kja61litwunq.rcgu.o:     file format elf32-littlearm

SYMBOL TABLE:
00000000 l    df *ABS*	00000000 1570kja61litwunq
00000000 l       .debug_str	00000000 
00000039 l       .debug_str	00000000 
00000044 l       .debug_str	00000000 
00000067 l       .debug_str	00000000 
0000006d l       .debug_str	00000000 
00000072 l       .debug_str	00000000 
000000a4 l       .debug_str	00000000 
000000b2 l       .debug_str	00000000 
000000e4 l       .debug_str	00000000 
000000f2 l       .debug_str	00000000 
000000f5 l       .debug_str	00000000 
000000ff l       .debug_str	00000000 
00000135 l       .debug_str	00000000 
00000147 l       .debug_str	00000000 
0000017b l       .debug_str	00000000 
0000018b l       .debug_str	00000000 
0000018f l       .debug_str	00000000 
00000198 l       .debug_str	00000000 
0000019f l       .debug_str	00000000 
000001a5 l       .debug_str	00000000 
000001ab l       .debug_str	00000000 
00000000 l     O .rodata..Lanon.d4d2bc439859e4825713e48b7951eddf.0	0000000d .Lanon.d4d2bc439859e4825713e48b7951eddf.0
00000000 l     O .rodata..Lanon.d4d2bc439859e4825713e48b7951eddf.1	00000002 .Lanon.d4d2bc439859e4825713e48b7951eddf.1
00000000 l     F .text._ZN5mylib4base17TEMP_STM32_DEVICE17he0d632b0d91af018E	0000001c mylib::base::TEMP_STM32_DEVICE
00000000 l    d  .text._ZN5mylib4base13console_print17h4cf9cc516f96f871E	00000000 .text._ZN5mylib4base13console_print17h4cf9cc516f96f871E
00000000 l    d  .text._ZN5mylib4base13SENSOR_DEVICE17h98f99a5c4336ac0cE	00000000 .text._ZN5mylib4base13SENSOR_DEVICE17h98f99a5c4336ac0cE
00000000 l    d  .text._ZN5mylib4base17TEMP_STM32_DEVICE17he0d632b0d91af018E	00000000 .text._ZN5mylib4base17TEMP_STM32_DEVICE17he0d632b0d91af018E
00000000 l    d  .text._ZN5mylib4base15TEMP_SENSOR_KEY17he45b46d508b17b55E	00000000 .text._ZN5mylib4base15TEMP_SENSOR_KEY17he45b46d508b17b55E
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_line	00000000 .debug_line
00000000         *UND*	00000000 core::slice::<impl [T]>::len
00000000         *UND*	00000000 core::slice::<impl [T]>::as_ptr
00000000 g     F .text._ZN5mylib4base13SENSOR_DEVICE17h98f99a5c4336ac0cE	00000012 .hidden mylib::base::SENSOR_DEVICE
00000000 g     F .text._ZN5mylib4base13console_print17h4cf9cc516f96f871E	0000003c .hidden mylib::base::console_print
00000000 g     F .text._ZN5mylib4base15TEMP_SENSOR_KEY17he45b46d508b17b55E	0000001c .hidden mylib::base::TEMP_SENSOR_KEY
00000000         *UND*	00000000 console_buffer
00000000         *UND*	00000000 console_flush



Disassembly of section .text._ZN5mylib4base13console_print17h4cf9cc516f96f871E:

00000000 <mylib::base::console_print>:
_ZN5mylib4base13console_print17h4cf9cc516f96f871E():
/mnt/c/stm32bluepill-mynewt-sensor/src/base.rs:5
use cty::*;
use crate::sensor::*;

///  Display message `msg` on the Arm Semihosting console (via OpenOCD).
pub fn console_print(msg: &[u8]) {
   0:	b580      	push	{r7, lr}
   2:	b086      	sub	sp, #24
   4:	460a      	mov	r2, r1
   6:	4603      	mov	r3, r0
   8:	9003      	str	r0, [sp, #12]
   a:	9104      	str	r1, [sp, #16]
/mnt/c/stm32bluepill-mynewt-sensor/src/base.rs:6
    let len = msg.len();
   c:	9803      	ldr	r0, [sp, #12]
   e:	9904      	ldr	r1, [sp, #16]
  10:	9202      	str	r2, [sp, #8]
  12:	9301      	str	r3, [sp, #4]
  14:	f7ff fffe 	bl	0 <core::slice::<impl [T]>::len>
  18:	9005      	str	r0, [sp, #20]
  1a:	e7ff      	b.n	1c <mylib::base::console_print+0x1c>
/mnt/c/stm32bluepill-mynewt-sensor/src/base.rs:8
    unsafe {
        console_buffer(msg.as_ptr(), len as u32);
  1c:	9803      	ldr	r0, [sp, #12]
  1e:	9904      	ldr	r1, [sp, #16]
  20:	f7ff fffe 	bl	0 <core::slice::<impl [T]>::as_ptr>
  24:	9000      	str	r0, [sp, #0]
  26:	e7ff      	b.n	28 <mylib::base::console_print+0x28>
  28:	9905      	ldr	r1, [sp, #20]
  2a:	9800      	ldr	r0, [sp, #0]
  2c:	f7ff fffe 	bl	0 <console_buffer>
  30:	e7ff      	b.n	2 <console_flush+0x2>
/mnt/c/stm32bluepill-mynewt-sensor/src/base.rs:9
        console_flush(); //  TODO: Remove this.
  32:	f7ff fffe 	bl	0 <console_flush>
  36:	e7ff      	b.n	38 <mylib::base::console_print+0x38>
/mnt/c/stm32bluepill-mynewt-sensor/src/base.rs:11
    }
}
  38:	b006      	add	sp, #24
  3a:	bd80      	pop	{r7, pc}

Disassembly of section .text._ZN5mylib4base13SENSOR_DEVICE17h98f99a5c4336ac0cE:

00000000 <mylib::base::SENSOR_DEVICE>:
_ZN5mylib4base13SENSOR_DEVICE17h98f99a5c4336ac0cE():
/mnt/c/stm32bluepill-mynewt-sensor/src/base.rs:60
    pub fn os_eventq_run(evq: *const CVoid);
    pub fn os_eventq_dflt_get() -> *const CVoid;
}

//  Must sync with apps/my_sensor_app/src/listen_sensor.h
pub fn SENSOR_DEVICE() -> *const u8 { TEMP_STM32_DEVICE() }  //  We will open internal temperature sensor "temp_stm32_0"
   0:	b580      	push	{r7, lr}
   2:	b082      	sub	sp, #8
   4:	f7ff fffe 	bl	0 <mylib::base::SENSOR_DEVICE>
   8:	9001      	str	r0, [sp, #4]
   a:	e7ff      	b.n	c <mylib::base::SENSOR_DEVICE+0xc>
   c:	9801      	ldr	r0, [sp, #4]
   e:	b002      	add	sp, #8
  10:	bd80      	pop	{r7, pc}

Disassembly of section .text._ZN5mylib4base17TEMP_STM32_DEVICE17he0d632b0d91af018E:

00000000 <mylib::base::TEMP_STM32_DEVICE>:
_ZN5mylib4base17TEMP_STM32_DEVICE17he0d632b0d91af018E():
/mnt/c/stm32bluepill-mynewt-sensor/src/base.rs:61
pub fn TEMP_STM32_DEVICE() -> *const u8 { b"temp_stm32_0\0".as_ptr() }
   0:	b580      	push	{r7, lr}
   2:	b082      	sub	sp, #8
   4:	f240 0000 	movw	r0, #0
   8:	f2c0 0000 	movt	r0, #0
   c:	210d      	movs	r1, #13
   e:	f7ff fffe 	bl	0 <core::slice::<impl [T]>::as_ptr>
  12:	9001      	str	r0, [sp, #4]
  14:	e7ff      	b.n	16 <mylib::base::TEMP_STM32_DEVICE+0x16>
  16:	9801      	ldr	r0, [sp, #4]
  18:	b002      	add	sp, #8
  1a:	bd80      	pop	{r7, pc}

Disassembly of section .text._ZN5mylib4base15TEMP_SENSOR_KEY17he45b46d508b17b55E:

00000000 <mylib::base::TEMP_SENSOR_KEY>:
_ZN5mylib4base15TEMP_SENSOR_KEY17he45b46d508b17b55E():
/mnt/c/stm32bluepill-mynewt-sensor/src/base.rs:67

//  Must sync with libs/temp_stm32/include/temp_stm32/temp_stm32.h
//  #if MYNEWT_VAL(RAW_TEMP)                                       //  If we are returning raw temperature (integers)...
pub const TEMP_SENSOR_TYPE: SensorType = SENSOR_TYPE_AMBIENT_TEMPERATURE_RAW;  //  Set to raw sensor type
pub const TEMP_SENSOR_VALUE_TYPE: i32 = SENSOR_VALUE_TYPE_INT32;         //  Return integer sensor values
pub fn TEMP_SENSOR_KEY() -> *const u8 { b"t\0".as_ptr() }  //  Use key (field name) "t" to transmit raw temperature to CoAP Server or Collector Node
   0:	b580      	push	{r7, lr}
   2:	b082      	sub	sp, #8
   4:	f240 0000 	movw	r0, #0
   8:	f2c0 0000 	movt	r0, #0
   c:	2102      	movs	r1, #2
   e:	f7ff fffe 	bl	0 <core::slice::<impl [T]>::as_ptr>
  12:	9001      	str	r0, [sp, #4]
  14:	e7ff      	b.n	16 <mylib::base::TEMP_SENSOR_KEY+0x16>
  16:	9801      	ldr	r0, [sp, #4]
  18:	b002      	add	sp, #8
  1a:	bd80      	pop	{r7, pc}

mylib-01c8eb6571dba957.1gar34u4lhxtcpa1.rcgu.o:     file format elf32-littlearm

SYMBOL TABLE:
00000000 l    df *ABS*	00000000 1gar34u4lhxtcpa1
00000000 l       .debug_str	00000000 
00000039 l       .debug_str	00000000 
00000044 l       .debug_str	00000000 
00000067 l       .debug_str	00000000 
0000006d l       .debug_str	00000000 
00000077 l       .debug_str	00000000 
000000b3 l       .debug_str	00000000 
000000c6 l       .debug_str	00000000 
000000ca l       .debug_str	00000000 
00000104 l       .debug_str	00000000 
00000115 l       .debug_str	00000000 
0000011a l       .debug_str	00000000 
0000011f l       .debug_str	00000000 
00000123 l       .debug_str	00000000 
00000126 l       .debug_str	00000000 
00000130 l       .debug_str	00000000 
00000139 l       .debug_str	00000000 
00000141 l       .debug_str	00000000 
00000145 l       .debug_str	00000000 
0000014f l       .debug_str	00000000 
00000153 l       .debug_str	00000000 
0000015f l       .debug_str	00000000 
0000017f l       .debug_str	00000000 
0000018c l       .debug_str	00000000 
00000196 l       .debug_str	00000000 
0000019c l       .debug_str	00000000 
000001b0 l       .debug_str	00000000 
000001b5 l       .debug_str	00000000 
00000000 l     O .rodata..Lanon.93b529e3d5ea91784f009f0062a617a1.0	00000013 .Lanon.93b529e3d5ea91784f009f0062a617a1.0
00000000 l     O .rodata..Lanon.93b529e3d5ea91784f009f0062a617a1.1	00000011 .Lanon.93b529e3d5ea91784f009f0062a617a1.1
00000000 l    d  .text._ZN5mylib9send_coap18start_network_task17h45cebb75903de641E	00000000 .text._ZN5mylib9send_coap18start_network_task17h45cebb75903de641E
00000000 l    d  .text._ZN5mylib9send_coap16send_sensor_data17h6fc3d2337e381536E	00000000 .text._ZN5mylib9send_coap16send_sensor_data17h6fc3d2337e381536E
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_line	00000000 .debug_line
00000000         *UND*	00000000 .hidden mylib::base::console_print
00000000 g     F .text._ZN5mylib9send_coap16send_sensor_data17h6fc3d2337e381536E	00000030 .hidden mylib::send_coap::send_sensor_data
00000000 g     F .text._ZN5mylib9send_coap18start_network_task17h45cebb75903de641E	00000016 .hidden mylib::send_coap::start_network_task



Disassembly of section .text._ZN5mylib9send_coap18start_network_task17h45cebb75903de641E:

00000000 <mylib::send_coap::start_network_task>:
_ZN5mylib9send_coap18start_network_task17h45cebb75903de641E():
/mnt/c/stm32bluepill-mynewt-sensor/src/send_coap.rs:20

///  TODO: Start the Network Task in the background.  The Network Task prepares the network drivers
///  (ESP8266 and nRF24L01) for transmitting sensor data messages.  
///  Connecting the ESP8266 to the WiFi access point may be slow so we do this in the background.
///  Also perform WiFi Geolocation if it is enabled.  Return 0 if successful.
pub fn start_network_task() -> i32 {
   0:	b580      	push	{r7, lr}
/mnt/c/stm32bluepill-mynewt-sensor/src/send_coap.rs:21
    console_print(b"start_network_task\n");
   2:	f240 0000 	movw	r0, #0
   6:	f2c0 0000 	movt	r0, #0
   a:	2113      	movs	r1, #19
   c:	f7ff fffe 	bl	0 <mylib::base::console_print>
  10:	e7ff      	b.n	12 <mylib::send_coap::start_network_task+0x12>
  12:	2000      	movs	r0, #0
/mnt/c/stm32bluepill-mynewt-sensor/src/send_coap.rs:23
    0
}
  14:	bd80      	pop	{r7, pc}

Disassembly of section .text._ZN5mylib9send_coap16send_sensor_data17h6fc3d2337e381536E:

00000000 <mylib::send_coap::send_sensor_data>:
_ZN5mylib9send_coap16send_sensor_data17h6fc3d2337e381536E():
/mnt/c/stm32bluepill-mynewt-sensor/src/send_coap.rs:34
///  For Collector Node: sensor_node is the Sensor Node Address of the Sensor Node that transmitted
///  the sensor data (like `b3b4b5b6f1`)
///  The message will be enqueued for transmission by the CoAP / OIC Background Task 
///  so this function will return without waiting for the message to be transmitted.  
///  Return 0 if successful, SYS_EAGAIN if network is not ready yet.
pub fn send_sensor_data(_val: *const SensorValue, _sensor_node: &'static CStr) -> i32 {
   0:	b580      	push	{r7, lr}
   2:	b086      	sub	sp, #24
   4:	4613      	mov	r3, r2
   6:	468c      	mov	ip, r1
   8:	4686      	mov	lr, r0
   a:	9003      	str	r0, [sp, #12]
   c:	9104      	str	r1, [sp, #16]
   e:	9205      	str	r2, [sp, #20]
/mnt/c/stm32bluepill-mynewt-sensor/src/send_coap.rs:35
    console_print(b"send_sensor_data\n");
  10:	f240 0000 	movw	r0, #0
  14:	f2c0 0000 	movt	r0, #0
  18:	2111      	movs	r1, #17
  1a:	9302      	str	r3, [sp, #8]
  1c:	f8cd c004 	str.w	ip, [sp, #4]
  20:	f8cd e000 	str.w	lr, [sp]
  24:	f7ff fffe 	bl	0 <mylib::base::console_print>
  28:	e7ff      	b.n	2a <mylib::send_coap::send_sensor_data+0x2a>
  2a:	2000      	movs	r0, #0
/mnt/c/stm32bluepill-mynewt-sensor/src/send_coap.rs:37
    0
}
  2c:	b006      	add	sp, #24
  2e:	bd80      	pop	{r7, pc}

mylib-01c8eb6571dba957.4644zq9yvy8xhapc.rcgu.o:     file format elf32-littlearm

SYMBOL TABLE:
00000000 l    df *ABS*	00000000 4644zq9yvy8xhapc
00000000 l       .debug_str	00000000 
00000039 l       .debug_str	00000000 
00000044 l       .debug_str	00000000 
00000067 l       .debug_str	00000000 
0000006d l       .debug_str	00000000 
00000072 l       .debug_str	00000000 
00000076 l       .debug_str	00000000 
00000080 l       .debug_str	00000000 
0000008a l       .debug_str	00000000 
00000090 l       .debug_str	00000000 
00000097 l       .debug_str	00000000 
000000cf l       .debug_str	00000000 
000000e1 l       .debug_str	00000000 
000000e5 l       .debug_str	00000000 
000000ff l       .debug_str	00000000 
00000108 l       .debug_str	00000000 
00000117 l       .debug_str	00000000 
0000011b l       .debug_str	00000000 
00000123 l       .debug_str	00000000 
00000178 l       .debug_str	00000000 
0000017f l       .debug_str	00000000 
00000187 l       .debug_str	00000000 
00000196 l       .debug_str	00000000 
00000000 l    d  .text._ZN5mylib6sensor17register_listener17hdd3035f5bac88148E	00000000 .text._ZN5mylib6sensor17register_listener17hdd3035f5bac88148E
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_line	00000000 .debug_line
00000000 g     F .text._ZN5mylib6sensor17register_listener17hdd3035f5bac88148E	00000022 .hidden mylib::sensor::register_listener
00000000         *UND*	00000000 sensor_register_listener



Disassembly of section .text._ZN5mylib6sensor17register_listener17hdd3035f5bac88148E:

00000000 <mylib::sensor::register_listener>:
_ZN5mylib6sensor17register_listener17hdd3035f5bac88148E():
/mnt/c/stm32bluepill-mynewt-sensor/src/sensor.rs:12
///  for the sensor listener structure.
///
///  `sensor`: The sensor to register a listener on.
///  `listener`: The listener to register onto the sensor.
///  Return 0 on success, non-zero error code on failure.
pub fn register_listener(sensor: SensorPtr, listener: &SensorListener) -> i32 {    
   0:	b580      	push	{r7, lr}
   2:	b086      	sub	sp, #24
   4:	460a      	mov	r2, r1
   6:	4603      	mov	r3, r0
   8:	9004      	str	r0, [sp, #16]
   a:	9105      	str	r1, [sp, #20]
/mnt/c/stm32bluepill-mynewt-sensor/src/sensor.rs:14
    //  Make an unsafe call to the Mynewt API.
    unsafe { sensor_register_listener(sensor, listener) }
   c:	9804      	ldr	r0, [sp, #16]
   e:	9905      	ldr	r1, [sp, #20]
  10:	9203      	str	r2, [sp, #12]
  12:	9302      	str	r3, [sp, #8]
  14:	f7ff fffe 	bl	0 <sensor_register_listener>
  18:	9001      	str	r0, [sp, #4]
  1a:	e7ff      	b.n	1c <mylib::sensor::register_listener+0x1c>
/mnt/c/stm32bluepill-mynewt-sensor/src/sensor.rs:15
}
  1c:	9801      	ldr	r0, [sp, #4]
  1e:	b006      	add	sp, #24
  20:	bd80      	pop	{r7, pc}

mylib-01c8eb6571dba957.xtrnd2f50x208rj.rcgu.o:     file format elf32-littlearm

SYMBOL TABLE:
00000000 l    df *ABS*	00000000 xtrnd2f50x208rj
00000000 l       .debug_str	00000000 
00000039 l       .debug_str	00000000 
00000044 l       .debug_str	00000000 
00000067 l       .debug_str	00000000 
0000006c l       .debug_str	00000000 
00000070 l       .debug_str	00000000 
00000073 l       .debug_str	00000000 
00000076 l       .debug_str	00000000 
00000079 l       .debug_str	00000000 
0000007e l       .debug_str	00000000 
00000084 l       .debug_str	00000000 
0000008b l       .debug_str	00000000 
00000093 l       .debug_str	00000000 
0000009d l       .debug_str	00000000 
000000a4 l       .debug_str	00000000 
000000a7 l       .debug_str	00000000 
000000ab l       .debug_str	00000000 
000000b2 l       .debug_str	00000000 
000000b8 l       .debug_str	00000000 
000000bd l       .debug_str	00000000 
000000bf l       .debug_str	00000000 
000000d1 l       .debug_str	00000000 
000000d7 l       .debug_str	00000000 
000000db l       .debug_str	00000000 
000000df l       .debug_str	00000000 
000000e3 l       .debug_str	00000000 
000000e9 l       .debug_str	00000000 
000000f1 l       .debug_str	00000000 
000000f5 l       .debug_str	00000000 
000000fd l       .debug_str	00000000 
00000105 l       .debug_str	00000000 
0000010c l       .debug_str	00000000 
00000112 l       .debug_str	00000000 
00000126 l       .debug_str	00000000 
00000132 l       .debug_str	00000000 
00000137 l       .debug_str	00000000 
0000013f l       .debug_str	00000000 
00000146 l       .debug_str	00000000 
0000014a l       .debug_str	00000000 
0000014f l       .debug_str	00000000 
00000156 l       .debug_str	00000000 
0000015f l       .debug_str	00000000 
00000169 l       .debug_str	00000000 
00000170 l       .debug_str	00000000 
00000175 l       .debug_str	00000000 
00000181 l       .debug_str	00000000 
00000189 l       .debug_str	00000000 
00000192 l       .debug_str	00000000 
00000197 l       .debug_str	00000000 
0000019a l       .debug_str	00000000 
0000019e l       .debug_str	00000000 
000001a7 l       .debug_str	00000000 
000001ae l       .debug_str	00000000 
000001b3 l       .debug_str	00000000 
000001b8 l       .debug_str	00000000 
000001be l       .debug_str	00000000 
000001c4 l       .debug_str	00000000 
000001ce l       .debug_str	00000000 
000001d1 l       .debug_str	00000000 
000001d7 l       .debug_str	00000000 
000001e1 l       .debug_str	00000000 
000001e9 l       .debug_str	00000000 
000001ef l       .debug_str	00000000 
000001f5 l       .debug_str	00000000 
00000200 l       .debug_str	00000000 
00000209 l       .debug_str	00000000 
0000022c l       .debug_str	00000000 
0000024b l       .debug_str	00000000 
0000024d l       .debug_str	00000000 
00000252 l       .debug_str	00000000 
00000279 l       .debug_str	00000000 
0000027e l       .debug_str	00000000 
00000284 l       .debug_str	00000000 
0000028a l       .debug_str	00000000 
0000028d l       .debug_str	00000000 
0000029c l       .debug_str	00000000 
000002a3 l       .debug_str	00000000 
000002a7 l       .debug_str	00000000 
000002b0 l       .debug_str	00000000 
000002bc l       .debug_str	00000000 
000002d5 l       .debug_str	00000000 
000002da l       .debug_str	00000000 
000002eb l       .debug_str	00000000 
000002f5 l       .debug_str	00000000 
00000303 l       .debug_str	00000000 
00000307 l       .debug_str	00000000 
00000312 l       .debug_str	00000000 
00000319 l       .debug_str	00000000 
0000031f l       .debug_str	00000000 
00000323 l       .debug_str	00000000 
00000327 l       .debug_str	00000000 
0000032f l       .debug_str	00000000 
00000346 l       .debug_str	00000000 
0000036a l       .debug_str	00000000 
00000386 l       .debug_str	00000000 
00000390 l       .debug_str	00000000 
000003aa l       .debug_str	00000000 
00000408 l       .debug_str	00000000 
00000413 l       .debug_str	00000000 
00000430 l       .debug_str	00000000 
00000449 l       .debug_str	00000000 
00000453 l       .debug_str	00000000 
00000469 l       .debug_str	00000000 
00000487 l       .debug_str	00000000 
00000490 l       .debug_str	00000000 
00000495 l       .debug_str	00000000 
0000049a l       .debug_str	00000000 
0000049e l       .debug_str	00000000 
000004a7 l       .debug_str	00000000 
000004b1 l       .debug_str	00000000 
00000000 l     O .rodata..Lanon.3ed011473997af99b525cde47c9eaaac.2	00000018 .Lanon.3ed011473997af99b525cde47c9eaaac.2
00000000 l     O .rodata..Lanon.3ed011473997af99b525cde47c9eaaac.4	00000018 .Lanon.3ed011473997af99b525cde47c9eaaac.4
00000000 l    d  .text.main	00000000 .text.main
00000000 l    d  .text.rust_begin_unwind	00000000 .text.rust_begin_unwind
00000000 l    d  .rodata..Lanon.3ed011473997af99b525cde47c9eaaac.0	00000000 .rodata..Lanon.3ed011473997af99b525cde47c9eaaac.0
00000000 l    d  .rodata..Lanon.3ed011473997af99b525cde47c9eaaac.1	00000000 .rodata..Lanon.3ed011473997af99b525cde47c9eaaac.1
00000000 l    d  .rodata..Lanon.3ed011473997af99b525cde47c9eaaac.3	00000000 .rodata..Lanon.3ed011473997af99b525cde47c9eaaac.3
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_line	00000000 .debug_line
00000000         *UND*	00000000 core::panicking::panic
00000000         *UND*	00000000 .hidden mylib::listen_sensor::start_sensor_listener
00000000         *UND*	00000000 .hidden mylib::send_coap::start_network_task
00000000         *UND*	00000000 console_flush
00000000 g     F .text.main	0000005e main
00000000         *UND*	00000000 os_eventq_dflt_get
00000000         *UND*	00000000 os_eventq_run
00000000 g     F .text.rust_begin_unwind	0000000c rust_begin_unwind
00000000         *UND*	00000000 rust_sysinit



Disassembly of section .text.main:

00000000 <main>:
main():
/mnt/c/stm32bluepill-mynewt-sensor/src/lib.rs:20
use crate::listen_sensor::*;    //  Import listen_sensor.rs for polling the temperature sensor
use crate::send_coap::*;        //  Import send_coap.rs for sending sensor data

///  main() will be called at Mynewt startup. It replaces the C version of the main() function.
#[no_mangle]                     //  Don't mangle the name "main"
pub extern "C" fn main() -> ! {  //  Declare extern "C" because it will be called by Mynewt
   0:	b084      	sub	sp, #16
/mnt/c/stm32bluepill-mynewt-sensor/src/lib.rs:23
    unsafe {
        //  Init Mynewt system.
        rust_sysinit();
   2:	f7ff fffe 	bl	0 <rust_sysinit>
   6:	e7ff      	b.n	2 <console_flush+0x2>
/mnt/c/stm32bluepill-mynewt-sensor/src/lib.rs:24
        console_flush();
   8:	f7ff fffe 	bl	0 <console_flush>
   c:	e7ff      	b.n	2 <mylib::send_coap::start_network_task+0x2>
/mnt/c/stm32bluepill-mynewt-sensor/src/lib.rs:29

        //  Start the Network Task in the background.  The Network Task prepares the ESP8266 or nRF24L01 transceiver for
        //  sending CoAP messages.  We connect the ESP8266 to the WiFi access point and register
        //  the ESP8266/nRF24L01 driver as the network transport for CoAP.  Also perform WiFi Geolocation if it is enabled.
        let rc1 = start_network_task();  assert!(rc1 == 0);
   e:	f7ff fffe 	bl	0 <mylib::send_coap::start_network_task>
  12:	9002      	str	r0, [sp, #8]
  14:	e7ff      	b.n	16 <main+0x16>
  16:	9802      	ldr	r0, [sp, #8]
  18:	2800      	cmp	r0, #0
  1a:	d007      	beq.n	2c <main+0x2c>
  1c:	e7ff      	b.n	1e <main+0x1e>
  1e:	f240 0000 	movw	r0, #0
  22:	f2c0 0000 	movt	r0, #0
  26:	f7ff fffe 	bl	0 <core::panicking::panic>
  2a:	defe      	udf	#254	; 0xfe
/mnt/c/stm32bluepill-mynewt-sensor/src/lib.rs:34

        //  Starting polling the temperature sensor every 10 seconds in the background.  
        //  After polling the sensor, call the listener function to send the sensor data to the CoAP server or Collector Node.
        //  If this is the Collector Node, we shall wait for sensor data from the Sensor Nodes and transmit to the CoAP server.
        let rc2 = start_sensor_listener();  assert!(rc2 == 0);
  2c:	f7ff fffe 	bl	0 <mylib::listen_sensor::start_sensor_listener>
  30:	9003      	str	r0, [sp, #12]
  32:	e7ff      	b.n	34 <main+0x34>
  34:	9803      	ldr	r0, [sp, #12]
  36:	2800      	cmp	r0, #0
  38:	d007      	beq.n	4a <main+0x4a>
  3a:	e7ff      	b.n	3c <main+0x3c>
  3c:	f240 0000 	movw	r0, #0
  40:	f2c0 0000 	movt	r0, #0
  44:	f7ff fffe 	bl	0 <core::panicking::panic>
  48:	defe      	udf	#254	; 0xfe
/mnt/c/stm32bluepill-mynewt-sensor/src/lib.rs:37

        //  Main event loop
        loop {                        //  Loop forever...
  4a:	e7ff      	b.n	4c <main+0x4c>
/mnt/c/stm32bluepill-mynewt-sensor/src/lib.rs:39
            os_eventq_run(            //  Process events...
                os_eventq_dflt_get()  //  From default event queue.
  4c:	f7ff fffe 	bl	0 <os_eventq_dflt_get>
  50:	9001      	str	r0, [sp, #4]
  52:	e7ff      	b.n	54 <main+0x54>
/mnt/c/stm32bluepill-mynewt-sensor/src/lib.rs:38
            os_eventq_run(            //  Process events...
  54:	9801      	ldr	r0, [sp, #4]
  56:	f7ff fffe 	bl	0 <os_eventq_run>
  5a:	e7ff      	b.n	5c <main+0x5c>
/mnt/c/stm32bluepill-mynewt-sensor/src/lib.rs:37
        loop {                        //  Loop forever...
  5c:	e7f6      	b.n	4c <main+0x4c>

Disassembly of section .text.rust_begin_unwind:

00000000 <rust_begin_unwind>:
rust_begin_unwind():
/mnt/c/stm32bluepill-mynewt-sensor/src/lib.rs:48
    //  Never comes here.
}

///  This function is called on panic. Set a breakpoint here to see the panic details. From https://os.phil-opp.com/freestanding-rust-binary/
#[panic_handler]
fn panic(_info: &PanicInfo) -> ! {
   0:	b082      	sub	sp, #8
   2:	4601      	mov	r1, r0
   4:	9001      	str	r0, [sp, #4]
   6:	9100      	str	r1, [sp, #0]
   8:	e7ff      	b.n	a <rust_begin_unwind+0xa>
/mnt/c/stm32bluepill-mynewt-sensor/src/lib.rs:49
    loop {}
   a:	e7fe      	b.n	a <rust_begin_unwind+0xa>
arm-none-eabi-objdump: rust.metadata.bin: file format not recognized
arm-none-eabi-objdump: mylib-01c8eb6571dba957.12y5xoizfzc3imbb.rcgu.bc.z: file format not recognized
arm-none-eabi-objdump: mylib-01c8eb6571dba957.1570kja61litwunq.rcgu.bc.z: file format not recognized
arm-none-eabi-objdump: mylib-01c8eb6571dba957.1gar34u4lhxtcpa1.rcgu.bc.z: file format not recognized
arm-none-eabi-objdump: mylib-01c8eb6571dba957.4644zq9yvy8xhapc.rcgu.bc.z: file format not recognized
arm-none-eabi-objdump: mylib-01c8eb6571dba957.xtrnd2f50x208rj.rcgu.bc.z: file format not recognized
