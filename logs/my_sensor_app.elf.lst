
c:/stm32bluepill-mynewt-sensor/bin/targets/stm32l4_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf:     file format elf32-littlearm
c:/stm32bluepill-mynewt-sensor/bin/targets/stm32l4_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x080041a9

Program Header:
0x70000001 off    0x000188b0 vaddr 0x080188b0 paddr 0x080188b0 align 2**2
         filesz 0x00000018 memsz 0x00000018 flags r--
    LOAD off    0x00000000 vaddr 0x08000000 paddr 0x08000000 align 2**16
         filesz 0x000188c8 memsz 0x000188c8 flags rwx
    LOAD off    0x00020188 vaddr 0x20000188 paddr 0x080188c8 align 2**16
         filesz 0x000001e0 memsz 0x00003834 flags rw-
    LOAD off    0x00030000 vaddr 0x20000000 paddr 0x20000000 align 2**16
         filesz 0x00000000 memsz 0x00000188 flags rw-
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name               Size      VMA       LMA       File off  Algn  Flags
  0 .imghdr            00000020  08004000  08004000  00004000  2**0  ALLOC
  1 .text              00014890  08004020  08004020  00004020  2**4  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.exidx         00000018  080188b0  080188b0  000188b0  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .vector_relocation 00000188  20000000  20000000  00030000  2**0  ALLOC
  4 .coredata          00000000  20000188  20000188  00020368  2**0  CONTENTS
  5 .data              000001e0  20000188  080188c8  00020188  2**3  CONTENTS, ALLOC, LOAD, DATA
  6 .corebss           00000000  20000368  20000368  00020368  2**0  CONTENTS
  7 .bss               00003654  20000368  08018aa8  00020368  2**3  ALLOC
  8 .ARM.attributes    0000003b  00000000  00000000  00020368  2**0  CONTENTS, READONLY
  9 .comment           0000007f  00000000  00000000  000203a3  2**0  CONTENTS, READONLY
 10 .svc_table         00000004  00000000  00000000  00020422  2**0  CONTENTS, READONLY
 11 .debug_line        0004b7fe  00000000  00000000  00020426  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_info        000a89cc  00000000  00000000  0006bc24  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev      00012b0f  00000000  00000000  001145f0  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges     00003070  00000000  00000000  00127100  2**3  CONTENTS, READONLY, DEBUGGING
 15 .debug_str         000450b6  00000000  00000000  0012a170  2**0  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges      00015430  00000000  00000000  0016f228  2**3  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc         0002770e  00000000  00000000  00184658  2**0  CONTENTS, READONLY, DEBUGGING
 18 .debug_frame       0000eec4  00000000  00000000  001abd68  2**2  CONTENTS, READONLY, DEBUGGING
 19 .debug_macinfo     00000035  00000000  00000000  001bac2c  2**0  CONTENTS, READONLY, DEBUGGING
 20 .debug_pubnames    0000b7a2  00000000  00000000  001bac61  2**0  CONTENTS, READONLY, DEBUGGING
 21 .debug_pubtypes    00020d2f  00000000  00000000  001c6403  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
08004000 l    d  .imghdr	00000000 .imghdr
08004020 l    d  .text	00000000 .text
080188b0 l    d  .ARM.exidx	00000000 .ARM.exidx
20000000 l    d  .vector_relocation	00000000 .vector_relocation
20000188 l    d  .coredata	00000000 .coredata
20000188 l    d  .data	00000000 .data
20000368 l    d  .corebss	00000000 .corebss
20000368 l    d  .bss	00000000 .bss
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .svc_table	00000000 .svc_table
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_macinfo	00000000 .debug_macinfo
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_pubtypes	00000000 .debug_pubtypes
00000000 l    df *ABS*	00000000 startup_stm32l476xx.o
f1e0f85f l       *ABS*	00000000 BootRAM
080041b8 l       .text	00000000 LoopCopyDataInit
080041b0 l       .text	00000000 CopyDataInit
080041cc l       .text	00000000 LoopFillZerobss
080041c6 l       .text	00000000 FillZerobss
080041dc l       .text	00000000 LoopFillZeroCoreBss
080041d6 l       .text	00000000 FillZeroCoreBss
0800420c l       .text	00000000 Infinite_Loop
00000000 l    df *ABS*	00000000 system_stm32l4xx.c
00000000 l    df *ABS*	00000000 cmsis_nvic.c
00000000 l    df *ABS*	00000000 start.c
00000000 l    df *ABS*	00000000 ju01llv1v56g26l
00000881 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00000ae0 l       .debug_str	00000000 
00000ab6 l       .debug_str	00000000 
000360f4 l       .debug_str	00000000 
0003a457 l       .debug_str	00000000 
00000462 l       .debug_str	00000000 
00000ad2 l       .debug_str	00000000 
00010a9a l       .debug_str	00000000 
00010d9b l       .debug_str	00000000 
00010da7 l       .debug_str	00000000 
00000a9d l       .debug_str	00000000 
00000a80 l       .debug_str	00000000 
00000a92 l       .debug_str	00000000 
0000073c l       .debug_str	00000000 
0000077d l       .debug_str	00000000 
00000038 l       .debug_str	00000000 
000084cc l       .debug_str	00000000 
0002b5a7 l       .debug_str	00000000 
000142cf l       .debug_str	00000000 
00001cdb l       .debug_str	00000000 
0000b8e7 l       .debug_str	00000000 
00000791 l       .debug_str	00000000 
00000796 l       .debug_str	00000000 
0000079c l       .debug_str	00000000 
000007a3 l       .debug_str	00000000 
00041020 l       .debug_str	00000000 
00009ac3 l       .debug_str	00000000 
000007ab l       .debug_str	00000000 
000007ae l       .debug_str	00000000 
000007b2 l       .debug_str	00000000 
0003dfaf l       .debug_str	00000000 
000007b9 l       .debug_str	00000000 
000007c2 l       .debug_str	00000000 
000007c6 l       .debug_str	00000000 
000007f0 l       .debug_str	00000000 
0003b790 l       .debug_str	00000000 
000007f5 l       .debug_str	00000000 
000007f7 l       .debug_str	00000000 
00000809 l       .debug_str	00000000 
00004b0c l       .debug_str	00000000 
00038c4e l       .debug_str	00000000 
0000080f l       .debug_str	00000000 
00000813 l       .debug_str	00000000 
0000a6d6 l       .debug_str	00000000 
0000081b l       .debug_str	00000000 
0000bbcd l       .debug_str	00000000 
00000822 l       .debug_str	00000000 
00000836 l       .debug_str	00000000 
00010a86 l       .debug_str	00000000 
00037538 l       .debug_str	00000000 
0003709c l       .debug_str	00000000 
0000ba51 l       .debug_str	00000000 
00000842 l       .debug_str	00000000 
00000847 l       .debug_str	00000000 
0000084e l       .debug_str	00000000 
00000857 l       .debug_str	00000000 
0003eb70 l       .debug_str	00000000 
00000868 l       .debug_str	00000000 
00000861 l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00013c1b l       .debug_str	00000000 
00000875 l       .debug_str	00000000 
0000087a l       .debug_str	00000000 
0000087d l       .debug_str	00000000 
00000a22 l       .debug_str	00000000 
0003c705 l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
00000299 l       .debug_str	00000000 
00043a1a l       .debug_str	00000000 
000026ed l       .debug_str	00000000 
0000088f l       .debug_str	00000000 
00000899 l       .debug_str	00000000 
000008a0 l       .debug_str	00000000 
0000089c l       .debug_str	00000000 
000008a6 l       .debug_str	00000000 
00041eef l       .debug_str	00000000 
00018e5f l       .debug_str	00000000 
000008ae l       .debug_str	00000000 
000008d3 l       .debug_str	00000000 
000008b9 l       .debug_str	00000000 
000008dc l       .debug_str	00000000 
00043fa0 l       .debug_str	00000000 
000008fb l       .debug_str	00000000 
00000900 l       .debug_str	00000000 
00039ca3 l       .debug_str	00000000 
0003a53b l       .debug_str	00000000 
0003ef60 l       .debug_str	00000000 
0001143d l       .debug_str	00000000 
00000927 l       .debug_str	00000000 
000009aa l       .debug_str	00000000 
00000936 l       .debug_str	00000000 
0000093a l       .debug_str	00000000 
00000943 l       .debug_str	00000000 
0000094f l       .debug_str	00000000 
00000974 l       .debug_str	00000000 
00000968 l       .debug_str	00000000 
00000979 l       .debug_str	00000000 
00000983 l       .debug_str	00000000 
00039f5c l       .debug_str	00000000 
00000991 l       .debug_str	00000000 
0000099c l       .debug_str	00000000 
000009a3 l       .debug_str	00000000 
00000853 l       .debug_str	00000000 
00043b00 l       .debug_str	00000000 
000009a9 l       .debug_str	00000000 
000009b1 l       .debug_str	00000000 
000009c8 l       .debug_str	00000000 
000009ec l       .debug_str	00000000 
00000a18 l       .debug_str	00000000 
00000a08 l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 25zud6sfl6depydk
00000cdb l       .debug_str	00000000 
0000099c l       .debug_str	00000000 
00000991 l       .debug_str	00000000 
00039f5c l       .debug_str	00000000 
0003f7fd l       .debug_str	00000000 
00000983 l       .debug_str	00000000 
00000e1c l       .debug_str	00000000 
00000979 l       .debug_str	00000000 
00000968 l       .debug_str	00000000 
00000974 l       .debug_str	00000000 
0000094f l       .debug_str	00000000 
00000943 l       .debug_str	00000000 
0000209e l       .debug_str	00000000 
00000836 l       .debug_str	00000000 
00000e18 l       .debug_str	00000000 
00000822 l       .debug_str	00000000 
0003eefd l       .debug_str	00000000 
0000081b l       .debug_str	00000000 
0000a6d6 l       .debug_str	00000000 
00000813 l       .debug_str	00000000 
0000093a l       .debug_str	00000000 
00000936 l       .debug_str	00000000 
00043f35 l       .debug_str	00000000 
000009aa l       .debug_str	00000000 
00008503 l       .debug_str	00000000 
00000927 l       .debug_str	00000000 
0001143d l       .debug_str	00000000 
00009efc l       .debug_str	00000000 
0003ef60 l       .debug_str	00000000 
0003a53b l       .debug_str	00000000 
00039ca3 l       .debug_str	00000000 
00000900 l       .debug_str	00000000 
00010d9b l       .debug_str	00000000 
000008dc l       .debug_str	00000000 
000008b9 l       .debug_str	00000000 
00010da7 l       .debug_str	00000000 
000008d3 l       .debug_str	00000000 
000008ae l       .debug_str	00000000 
00000a9d l       .debug_str	00000000 
00000a80 l       .debug_str	00000000 
00000a92 l       .debug_str	00000000 
00000a22 l       .debug_str	00000000 
00000a08 l       .debug_str	00000000 
00000a18 l       .debug_str	00000000 
000009ec l       .debug_str	00000000 
000009c8 l       .debug_str	00000000 
00018e5f l       .debug_str	00000000 
000009b1 l       .debug_str	00000000 
00041eef l       .debug_str	00000000 
000009a9 l       .debug_str	00000000 
000008a6 l       .debug_str	00000000 
0000089c l       .debug_str	00000000 
00043b00 l       .debug_str	00000000 
00000853 l       .debug_str	00000000 
0000073c l       .debug_str	00000000 
00000ae9 l       .debug_str	00000000 
00000038 l       .debug_str	00000000 
000084cc l       .debug_str	00000000 
0002b5a7 l       .debug_str	00000000 
000142cf l       .debug_str	00000000 
00001cdb l       .debug_str	00000000 
0000b8e7 l       .debug_str	00000000 
00000791 l       .debug_str	00000000 
00000796 l       .debug_str	00000000 
0000079c l       .debug_str	00000000 
000007a3 l       .debug_str	00000000 
00041020 l       .debug_str	00000000 
00009ac3 l       .debug_str	00000000 
000007ab l       .debug_str	00000000 
000007ae l       .debug_str	00000000 
000007b2 l       .debug_str	00000000 
00000b00 l       .debug_str	00000000 
00037b87 l       .debug_str	00000000 
00000b07 l       .debug_str	00000000 
00000b14 l       .debug_str	00000000 
000381ee l       .debug_str	00000000 
00000b1d l       .debug_str	00000000 
0000087d l       .debug_str	00000000 
0000084e l       .debug_str	00000000 
00000857 l       .debug_str	00000000 
0003eb70 l       .debug_str	00000000 
0000bbcd l       .debug_str	00000000 
00006608 l       .debug_str	00000000 
00000b25 l       .debug_str	00000000 
00000b2a l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000b32 l       .debug_str	00000000 
00000bb7 l       .debug_str	00000000 
00000bcd l       .debug_str	00000000 
0003dfb8 l       .debug_str	00000000 
00000bf4 l       .debug_str	00000000 
0001d804 l       .debug_str	00000000 
00000c1c l       .debug_str	00000000 
00000c4a l       .debug_str	00000000 
00000c54 l       .debug_str	00000000 
00000c7f l       .debug_str	00000000 
00000c86 l       .debug_str	00000000 
00038c5b l       .debug_str	00000000 
00000cae l       .debug_str	00000000 
00043a8b l       .debug_str	00000000 
0000a452 l       .debug_str	00000000 
000008a0 l       .debug_str	00000000 
00000d07 l       .debug_str	00000000 
00000d0f l       .debug_str	00000000 
00000d3f l       .debug_str	00000000 
00000d4a l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000d80 l       .debug_str	00000000 
00000db6 l       .debug_str	00000000 
00000dc7 l       .debug_str	00000000 
00000dcc l       .debug_str	00000000 
0003623d l       .debug_str	00000000 
00009efb l       .debug_str	00000000 
00000dda l       .debug_str	00000000 
0003709c l       .debug_str	00000000 
0000ba51 l       .debug_str	00000000 
00000842 l       .debug_str	00000000 
00009379 l       .debug_str	00000000 
00043fa0 l       .debug_str	00000000 
000008fb l       .debug_str	00000000 
00000e02 l       .debug_str	00000000 
00000df3 l       .debug_str	00000000 
00000de3 l       .debug_str	00000000 
00000ded l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
00000e0e l       .debug_str	00000000 
00000e13 l       .debug_str	00000000 
00000847 l       .debug_str	00000000 
00000868 l       .debug_str	00000000 
00000861 l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00013c1b l       .debug_str	00000000 
00000875 l       .debug_str	00000000 
0000087a l       .debug_str	00000000 
00000881 l       .debug_str	00000000 
0003c705 l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
00000299 l       .debug_str	00000000 
00043a1a l       .debug_str	00000000 
000026ed l       .debug_str	00000000 
0000088f l       .debug_str	00000000 
00000899 l       .debug_str	00000000 
000009a3 l       .debug_str	00000000 
08015de0 l     O .text	00000016 str.0
08015e00 l     O .text	0000001c str.1
08015e70 l     O .text	00000021 str.2
00000000 l    df *ABS*	00000000 27vnoqc6a2zoh1fh
00036207 l       .debug_str	00000000 
00006608 l       .debug_str	00000000 
0000a3e3 l       .debug_str	00000000 
0000087d l       .debug_str	00000000 
000114f6 l       .debug_str	00000000 
00000b1d l       .debug_str	00000000 
0000250b l       .debug_str	00000000 
000381ee l       .debug_str	00000000 
0003e41a l       .debug_str	00000000 
00000868 l       .debug_str	00000000 
00000dcc l       .debug_str	00000000 
0000bbcd l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
0003eb70 l       .debug_str	00000000 
00000b2a l       .debug_str	00000000 
00000857 l       .debug_str	00000000 
0000073c l       .debug_str	00000000 
00000ae9 l       .debug_str	00000000 
00000038 l       .debug_str	00000000 
00000b00 l       .debug_str	00000000 
00000e23 l       .debug_str	00000000 
000360de l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e58 l       .debug_str	00000000 
00000e5e l       .debug_str	00000000 
00000e95 l       .debug_str	00000000 
00000ea0 l       .debug_str	00000000 
00042335 l       .debug_str	00000000 
00000ed2 l       .debug_str	00000000 
00036218 l       .debug_str	00000000 
00000f06 l       .debug_str	00000000 
0000b8e7 l       .debug_str	00000000 
00000f3a l       .debug_str	00000000 
000361bf l       .debug_str	00000000 
00000f71 l       .debug_str	00000000 
00036257 l       .debug_str	00000000 
00000fa9 l       .debug_str	00000000 
000361b1 l       .debug_str	00000000 
00000fda l       .debug_str	00000000 
0000084e l       .debug_str	00000000 
00000b25 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2xxpw2a6lichvasv
0000115d l       .debug_str	00000000 
00000b2a l       .debug_str	00000000 
00037b87 l       .debug_str	00000000 
00000b25 l       .debug_str	00000000 
00000dcc l       .debug_str	00000000 
00006608 l       .debug_str	00000000 
00037ac3 l       .debug_str	00000000 
0000bbcd l       .debug_str	00000000 
00001479 l       .debug_str	00000000 
0003eb70 l       .debug_str	00000000 
00001447 l       .debug_str	00000000 
0000084e l       .debug_str	00000000 
0000073c l       .debug_str	00000000 
00000ae9 l       .debug_str	00000000 
00000038 l       .debug_str	00000000 
000084cc l       .debug_str	00000000 
00000fde l       .debug_str	00000000 
0000b8e7 l       .debug_str	00000000 
00000fe2 l       .debug_str	00000000 
00000fed l       .debug_str	00000000 
0000119a l       .debug_str	00000000 
00000b00 l       .debug_str	00000000 
00009ac3 l       .debug_str	00000000 
0000250b l       .debug_str	00000000 
00000ff8 l       .debug_str	00000000 
00001000 l       .debug_str	00000000 
0000100b l       .debug_str	00000000 
00001016 l       .debug_str	00000000 
00001023 l       .debug_str	00000000 
0000102e l       .debug_str	00000000 
00001036 l       .debug_str	00000000 
00001041 l       .debug_str	00000000 
0000104c l       .debug_str	00000000 
00001056 l       .debug_str	00000000 
00001061 l       .debug_str	00000000 
0000106c l       .debug_str	00000000 
00001079 l       .debug_str	00000000 
00001085 l       .debug_str	00000000 
00001092 l       .debug_str	00000000 
000010a0 l       .debug_str	00000000 
000010aa l       .debug_str	00000000 
0000fafe l       .debug_str	00000000 
000010b7 l       .debug_str	00000000 
000010bc l       .debug_str	00000000 
00000b14 l       .debug_str	00000000 
000010cb l       .debug_str	00000000 
00016e36 l       .debug_str	00000000 
000378cf l       .debug_str	00000000 
0000114e l       .debug_str	00000000 
00000857 l       .debug_str	00000000 
00000b1d l       .debug_str	00000000 
00001172 l       .debug_str	00000000 
0003709c l       .debug_str	00000000 
0000ba51 l       .debug_str	00000000 
00000842 l       .debug_str	00000000 
0000118a l       .debug_str	00000000 
0000b99b l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
00043fa0 l       .debug_str	00000000 
000008fb l       .debug_str	00000000 
0000087d l       .debug_str	00000000 
000011f4 l       .debug_str	00000000 
0000124f l       .debug_str	00000000 
00001264 l       .debug_str	00000000 
0000127d l       .debug_str	00000000 
000012c9 l       .debug_str	00000000 
000007ab l       .debug_str	00000000 
0001143d l       .debug_str	00000000 
0002c0e1 l       .debug_str	00000000 
000007ae l       .debug_str	00000000 
0000f6b7 l       .debug_str	00000000 
000012e0 l       .debug_str	00000000 
00001326 l       .debug_str	00000000 
0000a452 l       .debug_str	00000000 
00001337 l       .debug_str	00000000 
00001361 l       .debug_str	00000000 
0003788c l       .debug_str	00000000 
000013a3 l       .debug_str	00000000 
000013e7 l       .debug_str	00000000 
000013f6 l       .debug_str	00000000 
00001439 l       .debug_str	00000000 
000381ee l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3h0gc0z0o6jj1kiz
00000991 l       .debug_str	00000000 
00001903 l       .debug_str	00000000 
00001c42 l       .debug_str	00000000 
00009378 l       .debug_str	00000000 
00010d9b l       .debug_str	00000000 
000018fd l       .debug_str	00000000 
00001bf0 l       .debug_str	00000000 
000018f7 l       .debug_str	00000000 
00001b9d l       .debug_str	00000000 
0003ef1f l       .debug_str	00000000 
00001b24 l       .debug_str	00000000 
000018f1 l       .debug_str	00000000 
00001af8 l       .debug_str	00000000 
00000dc7 l       .debug_str	00000000 
00001aa5 l       .debug_str	00000000 
000018d7 l       .debug_str	00000000 
00001a3c l       .debug_str	00000000 
000018a6 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
00010da7 l       .debug_str	00000000 
000019e9 l       .debug_str	00000000 
00000900 l       .debug_str	00000000 
0000197f l       .debug_str	00000000 
000008dc l       .debug_str	00000000 
00001962 l       .debug_str	00000000 
000008b9 l       .debug_str	00000000 
0000190f l       .debug_str	00000000 
000008d3 l       .debug_str	00000000 
0004491f l       .debug_str	00000000 
000008ae l       .debug_str	00000000 
0000073c l       .debug_str	00000000 
00000ae9 l       .debug_str	00000000 
00000038 l       .debug_str	00000000 
000084cc l       .debug_str	00000000 
00009ac3 l       .debug_str	00000000 
0000b8e7 l       .debug_str	00000000 
000007ab l       .debug_str	00000000 
000007ae l       .debug_str	00000000 
000007b2 l       .debug_str	00000000 
0002b5a7 l       .debug_str	00000000 
000142cf l       .debug_str	00000000 
00001cdb l       .debug_str	00000000 
00000791 l       .debug_str	00000000 
00000796 l       .debug_str	00000000 
0000079c l       .debug_str	00000000 
000007a3 l       .debug_str	00000000 
00041020 l       .debug_str	00000000 
00000b00 l       .debug_str	00000000 
0000250b l       .debug_str	00000000 
00000ff8 l       .debug_str	00000000 
00001000 l       .debug_str	00000000 
0000100b l       .debug_str	00000000 
00001016 l       .debug_str	00000000 
00001023 l       .debug_str	00000000 
0000102e l       .debug_str	00000000 
00001036 l       .debug_str	00000000 
00001041 l       .debug_str	00000000 
0000104c l       .debug_str	00000000 
00001056 l       .debug_str	00000000 
00001061 l       .debug_str	00000000 
0000106c l       .debug_str	00000000 
00001079 l       .debug_str	00000000 
00001085 l       .debug_str	00000000 
00001092 l       .debug_str	00000000 
000010a0 l       .debug_str	00000000 
000010aa l       .debug_str	00000000 
0000fafe l       .debug_str	00000000 
00037b87 l       .debug_str	00000000 
00000b07 l       .debug_str	00000000 
00000ffd l       .debug_str	00000000 
00001486 l       .debug_str	00000000 
00001b1a l       .debug_str	00000000 
00000b14 l       .debug_str	00000000 
0003a53b l       .debug_str	00000000 
0003ef60 l       .debug_str	00000000 
0001143d l       .debug_str	00000000 
00000927 l       .debug_str	00000000 
000009aa l       .debug_str	00000000 
00000936 l       .debug_str	00000000 
0000093a l       .debug_str	00000000 
00000813 l       .debug_str	00000000 
0000a6d6 l       .debug_str	00000000 
0000081b l       .debug_str	00000000 
0000bbcd l       .debug_str	00000000 
00000822 l       .debug_str	00000000 
00000836 l       .debug_str	00000000 
00000943 l       .debug_str	00000000 
00043fa0 l       .debug_str	00000000 
0000094f l       .debug_str	00000000 
00000974 l       .debug_str	00000000 
00000968 l       .debug_str	00000000 
00000979 l       .debug_str	00000000 
000026ed l       .debug_str	00000000 
0000ba51 l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
00000299 l       .debug_str	00000000 
00043a1a l       .debug_str	00000000 
00018e5f l       .debug_str	00000000 
0003709c l       .debug_str	00000000 
00000842 l       .debug_str	00000000 
000008fb l       .debug_str	00000000 
0000087d l       .debug_str	00000000 
00000983 l       .debug_str	00000000 
0000088f l       .debug_str	00000000 
00039f5c l       .debug_str	00000000 
00041eef l       .debug_str	00000000 
0000099c l       .debug_str	00000000 
000009a3 l       .debug_str	00000000 
00000853 l       .debug_str	00000000 
00000a80 l       .debug_str	00000000 
00043b00 l       .debug_str	00000000 
000009a9 l       .debug_str	00000000 
000009b1 l       .debug_str	00000000 
000009c8 l       .debug_str	00000000 
000009ec l       .debug_str	00000000 
00039ca3 l       .debug_str	00000000 
0000084e l       .debug_str	00000000 
0003eb70 l       .debug_str	00000000 
00000a9d l       .debug_str	00000000 
00000a18 l       .debug_str	00000000 
00000a08 l       .debug_str	00000000 
00000a22 l       .debug_str	00000000 
00000a92 l       .debug_str	00000000 
0000a35b l       .debug_str	00000000 
00001495 l       .debug_str	00000000 
000014dd l       .debug_str	00000000 
000014e6 l       .debug_str	00000000 
0000152e l       .debug_str	00000000 
00001537 l       .debug_str	00000000 
0000157f l       .debug_str	00000000 
00001588 l       .debug_str	00000000 
000015d0 l       .debug_str	00000000 
00009379 l       .debug_str	00000000 
000015d8 l       .debug_str	00000000 
00001620 l       .debug_str	00000000 
000114f2 l       .debug_str	00000000 
00001629 l       .debug_str	00000000 
00001673 l       .debug_str	00000000 
000018fe l       .debug_str	00000000 
0000167c l       .debug_str	00000000 
000016ad l       .debug_str	00000000 
000016b7 l       .debug_str	00000000 
000016e8 l       .debug_str	00000000 
000018f2 l       .debug_str	00000000 
00001709 l       .debug_str	00000000 
0000173a l       .debug_str	00000000 
00000e02 l       .debug_str	00000000 
00000df3 l       .debug_str	00000000 
00001744 l       .debug_str	00000000 
00001775 l       .debug_str	00000000 
00000857 l       .debug_str	00000000 
00000868 l       .debug_str	00000000 
00001795 l       .debug_str	00000000 
000017c6 l       .debug_str	00000000 
00001af9 l       .debug_str	00000000 
000017d0 l       .debug_str	00000000 
00001801 l       .debug_str	00000000 
000018f8 l       .debug_str	00000000 
00001831 l       .debug_str	00000000 
00001862 l       .debug_str	00000000 
0000186c l       .debug_str	00000000 
0000189d l       .debug_str	00000000 
00000847 l       .debug_str	00000000 
00000861 l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00013c1b l       .debug_str	00000000 
00000875 l       .debug_str	00000000 
0000087a l       .debug_str	00000000 
00000881 l       .debug_str	00000000 
0003c705 l       .debug_str	00000000 
00000899 l       .debug_str	00000000 
000008a0 l       .debug_str	00000000 
0000089c l       .debug_str	00000000 
000008a6 l       .debug_str	00000000 
00001909 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3lpv3wz185pwx0ss
000008d3 l       .debug_str	00000000 
00001ca5 l       .debug_str	00000000 
0000073c l       .debug_str	00000000 
00000ae9 l       .debug_str	00000000 
00000038 l       .debug_str	00000000 
000084cc l       .debug_str	00000000 
0002b5a7 l       .debug_str	00000000 
000142cf l       .debug_str	00000000 
00001cdb l       .debug_str	00000000 
0000b8e7 l       .debug_str	00000000 
00000791 l       .debug_str	00000000 
00000796 l       .debug_str	00000000 
0000079c l       .debug_str	00000000 
000007a3 l       .debug_str	00000000 
00041020 l       .debug_str	00000000 
00009ac3 l       .debug_str	00000000 
000007ab l       .debug_str	00000000 
000007ae l       .debug_str	00000000 
000007b2 l       .debug_str	00000000 
00000847 l       .debug_str	00000000 
0000084e l       .debug_str	00000000 
00000857 l       .debug_str	00000000 
0003eb70 l       .debug_str	00000000 
0000bbcd l       .debug_str	00000000 
00000868 l       .debug_str	00000000 
00000861 l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
0003709c l       .debug_str	00000000 
0000ba51 l       .debug_str	00000000 
00000842 l       .debug_str	00000000 
00013c1b l       .debug_str	00000000 
00000875 l       .debug_str	00000000 
0000087a l       .debug_str	00000000 
0000087d l       .debug_str	00000000 
00000881 l       .debug_str	00000000 
0003c705 l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
00000299 l       .debug_str	00000000 
00043a1a l       .debug_str	00000000 
000026ed l       .debug_str	00000000 
0000088f l       .debug_str	00000000 
00000899 l       .debug_str	00000000 
000008a0 l       .debug_str	00000000 
0000089c l       .debug_str	00000000 
000008a6 l       .debug_str	00000000 
00041eef l       .debug_str	00000000 
00018e5f l       .debug_str	00000000 
000008ae l       .debug_str	00000000 
00010da7 l       .debug_str	00000000 
000008b9 l       .debug_str	00000000 
000008dc l       .debug_str	00000000 
00043fa0 l       .debug_str	00000000 
000008fb l       .debug_str	00000000 
00000900 l       .debug_str	00000000 
00039ca3 l       .debug_str	00000000 
0003a53b l       .debug_str	00000000 
0003ef60 l       .debug_str	00000000 
0001143d l       .debug_str	00000000 
00000927 l       .debug_str	00000000 
000009aa l       .debug_str	00000000 
00000936 l       .debug_str	00000000 
0000093a l       .debug_str	00000000 
00000813 l       .debug_str	00000000 
0000a6d6 l       .debug_str	00000000 
0000081b l       .debug_str	00000000 
00000822 l       .debug_str	00000000 
00000836 l       .debug_str	00000000 
00000943 l       .debug_str	00000000 
0000094f l       .debug_str	00000000 
00000974 l       .debug_str	00000000 
00000968 l       .debug_str	00000000 
00000979 l       .debug_str	00000000 
00000983 l       .debug_str	00000000 
00039f5c l       .debug_str	00000000 
00000991 l       .debug_str	00000000 
0000099c l       .debug_str	00000000 
000009a3 l       .debug_str	00000000 
00000853 l       .debug_str	00000000 
00043b00 l       .debug_str	00000000 
000009a9 l       .debug_str	00000000 
000009b1 l       .debug_str	00000000 
000009c8 l       .debug_str	00000000 
000009ec l       .debug_str	00000000 
00000a18 l       .debug_str	00000000 
00000a08 l       .debug_str	00000000 
00000a22 l       .debug_str	00000000 
00000a92 l       .debug_str	00000000 
00000a80 l       .debug_str	00000000 
00000a9d l       .debug_str	00000000 
00001cd7 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3lyhyts7sux9unl8
0000ba51 l       .debug_str	00000000 
00001f4b l       .debug_str	00000000 
00042ae8 l       .debug_str	00000000 
00001f23 l       .debug_str	00000000 
00002087 l       .debug_str	00000000 
00001ec0 l       .debug_str	00000000 
00002078 l       .debug_str	00000000 
0000209e l       .debug_str	00000000 
00000dc7 l       .debug_str	00000000 
00001e96 l       .debug_str	00000000 
00001ff1 l       .debug_str	00000000 
00001e33 l       .debug_str	00000000 
0000073c l       .debug_str	00000000 
00000ae9 l       .debug_str	00000000 
00000038 l       .debug_str	00000000 
000084cc l       .debug_str	00000000 
000009a3 l       .debug_str	00000000 
00000b14 l       .debug_str	00000000 
00008503 l       .debug_str	00000000 
00043f35 l       .debug_str	00000000 
00003916 l       .debug_str	00000000 
00001cde l       .debug_str	00000000 
0000b8e7 l       .debug_str	00000000 
00043fa0 l       .debug_str	00000000 
00001ce6 l       .debug_str	00000000 
00001d70 l       .debug_str	00000000 
0000084e l       .debug_str	00000000 
00000857 l       .debug_str	00000000 
0003eb70 l       .debug_str	00000000 
0000bbcd l       .debug_str	00000000 
00001d7e l       .debug_str	00000000 
000378fe l       .debug_str	00000000 
0003e68a l       .debug_str	00000000 
00001d88 l       .debug_str	00000000 
00001e1d l       .debug_str	00000000 
0003709c l       .debug_str	00000000 
00000842 l       .debug_str	00000000 
000008fb l       .debug_str	00000000 
0000087d l       .debug_str	00000000 
00001e27 l       .debug_str	00000000 
00000936 l       .debug_str	00000000 
0003eefd l       .debug_str	00000000 
00043b00 l       .debug_str	00000000 
00000e18 l       .debug_str	00000000 
00008be6 l       .debug_str	00000000 
00001fdb l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3ndgehdtv7e66s5b
000030d4 l       .debug_str	00000000 
00004292 l       .debug_str	00000000 
0000436f l       .debug_str	00000000 
00017dd4 l       .debug_str	00000000 
000042dc l       .debug_str	00000000 
00004289 l       .debug_str	00000000 
000042d2 l       .debug_str	00000000 
00004275 l       .debug_str	00000000 
0000087b l       .debug_str	00000000 
0003e41a l       .debug_str	00000000 
0003a293 l       .debug_str	00000000 
000042c7 l       .debug_str	00000000 
00000a08 l       .debug_str	00000000 
000042c1 l       .debug_str	00000000 
00000a18 l       .debug_str	00000000 
000042b7 l       .debug_str	00000000 
00000a9d l       .debug_str	00000000 
000042b1 l       .debug_str	00000000 
0003eb70 l       .debug_str	00000000 
000042a8 l       .debug_str	00000000 
0000073c l       .debug_str	00000000 
00000ae9 l       .debug_str	00000000 
00000038 l       .debug_str	00000000 
0000081b l       .debug_str	00000000 
0000b8e7 l       .debug_str	00000000 
00009379 l       .debug_str	00000000 
00009378 l       .debug_str	00000000 
000084cc l       .debug_str	00000000 
00009ac3 l       .debug_str	00000000 
000007ab l       .debug_str	00000000 
000007ae l       .debug_str	00000000 
000007b2 l       .debug_str	00000000 
0002b5a7 l       .debug_str	00000000 
000142cf l       .debug_str	00000000 
00001cdb l       .debug_str	00000000 
00000791 l       .debug_str	00000000 
00000796 l       .debug_str	00000000 
0000079c l       .debug_str	00000000 
000007a3 l       .debug_str	00000000 
00041020 l       .debug_str	00000000 
00000fde l       .debug_str	00000000 
00000fe2 l       .debug_str	00000000 
00000fed l       .debug_str	00000000 
0000119a l       .debug_str	00000000 
00000b14 l       .debug_str	00000000 
0003709c l       .debug_str	00000000 
0000ba51 l       .debug_str	00000000 
00000842 l       .debug_str	00000000 
0000bbcd l       .debug_str	00000000 
00043fa0 l       .debug_str	00000000 
000008fb l       .debug_str	00000000 
0000087d l       .debug_str	00000000 
00000983 l       .debug_str	00000000 
000020a9 l       .debug_str	00000000 
00000e02 l       .debug_str	00000000 
000020b1 l       .debug_str	00000000 
000020f9 l       .debug_str	00000000 
00002118 l       .debug_str	00000000 
0002c0e1 l       .debug_str	00000000 
00002122 l       .debug_str	00000000 
0000215d l       .debug_str	00000000 
00002182 l       .debug_str	00000000 
000021a9 l       .debug_str	00000000 
000021fa l       .debug_str	00000000 
00002218 l       .debug_str	00000000 
00001620 l       .debug_str	00000000 
00002278 l       .debug_str	00000000 
000022e3 l       .debug_str	00000000 
000022f3 l       .debug_str	00000000 
0000235f l       .debug_str	00000000 
00002372 l       .debug_str	00000000 
000023d5 l       .debug_str	00000000 
0000a452 l       .debug_str	00000000 
0000250b l       .debug_str	00000000 
00000b00 l       .debug_str	00000000 
0003c69a l       .debug_str	00000000 
00000050 l       .debug_str	00000000 
000023dd l       .debug_str	00000000 
00002732 l       .debug_str	00000000 
000023e6 l       .debug_str	00000000 
0003e594 l       .debug_str	00000000 
000023ed l       .debug_str	00000000 
000023f9 l       .debug_str	00000000 
0000118a l       .debug_str	00000000 
00002401 l       .debug_str	00000000 
0000245b l       .debug_str	00000000 
000024bd l       .debug_str	00000000 
000024c8 l       .debug_str	00000000 
0000250f l       .debug_str	00000000 
0000255e l       .debug_str	00000000 
00002568 l       .debug_str	00000000 
000025a5 l       .debug_str	00000000 
000025ea l       .debug_str	00000000 
000025f3 l       .debug_str	00000000 
00002603 l       .debug_str	00000000 
0000260b l       .debug_str	00000000 
00002660 l       .debug_str	00000000 
000026bd l       .debug_str	00000000 
000026c9 l       .debug_str	00000000 
000026d2 l       .debug_str	00000000 
000026de l       .debug_str	00000000 
000026ea l       .debug_str	00000000 
000026f3 l       .debug_str	00000000 
00000857 l       .debug_str	00000000 
000026fb l       .debug_str	00000000 
00000581 l       .debug_str	00000000 
00002703 l       .debug_str	00000000 
00002731 l       .debug_str	00000000 
00002718 l       .debug_str	00000000 
00002738 l       .debug_str	00000000 
0000273f l       .debug_str	00000000 
00002747 l       .debug_str	00000000 
00000708 l       .debug_str	00000000 
00002751 l       .debug_str	00000000 
000004ad l       .debug_str	00000000 
000006ee l       .debug_str	00000000 
0000b99b l       .debug_str	00000000 
0000066b l       .debug_str	00000000 
00000643 l       .debug_str	00000000 
000006cf l       .debug_str	00000000 
00037204 l       .debug_str	00000000 
00000609 l       .debug_str	00000000 
000004df l       .debug_str	00000000 
0003e04e l       .debug_str	00000000 
000364f6 l       .debug_str	00000000 
0000275a l       .debug_str	00000000 
00002787 l       .debug_str	00000000 
000026c3 l       .debug_str	00000000 
00038516 l       .debug_str	00000000 
00000521 l       .debug_str	00000000 
00000690 l       .debug_str	00000000 
000005f2 l       .debug_str	00000000 
000004f0 l       .debug_str	00000000 
000027bc l       .debug_str	00000000 
000027e5 l       .debug_str	00000000 
00002843 l       .debug_str	00000000 
000005d2 l       .debug_str	00000000 
000006d7 l       .debug_str	00000000 
000006af l       .debug_str	00000000 
000028a9 l       .debug_str	00000000 
000027d5 l       .debug_str	00000000 
000006fa l       .debug_str	00000000 
000004a2 l       .debug_str	00000000 
00000674 l       .debug_str	00000000 
000006df l       .debug_str	00000000 
000028c7 l       .debug_str	00000000 
0000065b l       .debug_str	00000000 
00000582 l       .debug_str	00000000 
00000509 l       .debug_str	00000000 
000028dd l       .debug_str	00000000 
00002903 l       .debug_str	00000000 
000004b8 l       .debug_str	00000000 
00002919 l       .debug_str	00000000 
0000645f l       .debug_str	00000000 
000028e2 l       .debug_str	00000000 
0000292f l       .debug_str	00000000 
0002ce96 l       .debug_str	00000000 
00002946 l       .debug_str	00000000 
0000294e l       .debug_str	00000000 
00002957 l       .debug_str	00000000 
00003d55 l       .debug_str	00000000 
00002960 l       .debug_str	00000000 
0000a35b l       .debug_str	00000000 
0003cfba l       .debug_str	00000000 
00002968 l       .debug_str	00000000 
00002974 l       .debug_str	00000000 
0000297f l       .debug_str	00000000 
00002987 l       .debug_str	00000000 
000042eb l       .debug_str	00000000 
0000298f l       .debug_str	00000000 
00002a8b l       .debug_str	00000000 
00002b8f l       .debug_str	00000000 
00002b9d l       .debug_str	00000000 
00002ba8 l       .debug_str	00000000 
00000822 l       .debug_str	00000000 
00002bd5 l       .debug_str	00000000 
00002bb2 l       .debug_str	00000000 
00002be0 l       .debug_str	00000000 
00002c5b l       .debug_str	00000000 
00002cde l       .debug_str	00000000 
00002cec l       .debug_str	00000000 
00002d4b l       .debug_str	00000000 
00002db2 l       .debug_str	00000000 
00002dc8 l       .debug_str	00000000 
00002dd8 l       .debug_str	00000000 
0003a863 l       .debug_str	00000000 
000009aa l       .debug_str	00000000 
00002de7 l       .debug_str	00000000 
000114f6 l       .debug_str	00000000 
00002ded l       .debug_str	00000000 
00002df3 l       .debug_str	00000000 
00002df9 l       .debug_str	00000000 
00002e05 l       .debug_str	00000000 
00043a1a l       .debug_str	00000000 
00002e0d l       .debug_str	00000000 
0004208c l       .debug_str	00000000 
00002e15 l       .debug_str	00000000 
00002e5b l       .debug_str	00000000 
00002e38 l       .debug_str	00000000 
00002e6b l       .debug_str	00000000 
00002eab l       .debug_str	00000000 
0003a333 l       .debug_str	00000000 
00002ef3 l       .debug_str	00000000 
00002ef9 l       .debug_str	00000000 
00002eff l       .debug_str	00000000 
00002f28 l       .debug_str	00000000 
00002f05 l       .debug_str	00000000 
00002f3a l       .debug_str	00000000 
00002f7c l       .debug_str	00000000 
0003a1e5 l       .debug_str	00000000 
00002fc6 l       .debug_str	00000000 
00002fcc l       .debug_str	00000000 
00002fd2 l       .debug_str	00000000 
00002ffb l       .debug_str	00000000 
00002fd8 l       .debug_str	00000000 
0000300d l       .debug_str	00000000 
0000304f l       .debug_str	00000000 
00039457 l       .debug_str	00000000 
00003099 l       .debug_str	00000000 
0000309f l       .debug_str	00000000 
000030a5 l       .debug_str	00000000 
000030ab l       .debug_str	00000000 
0000084e l       .debug_str	00000000 
000030b1 l       .debug_str	00000000 
000030e5 l       .debug_str	00000000 
00003126 l       .debug_str	00000000 
0000316f l       .debug_str	00000000 
00003174 l       .debug_str	00000000 
0003a5e3 l       .debug_str	00000000 
00003179 l       .debug_str	00000000 
0000317f l       .debug_str	00000000 
00003185 l       .debug_str	00000000 
000031ae l       .debug_str	00000000 
0000318b l       .debug_str	00000000 
000031bf l       .debug_str	00000000 
00003200 l       .debug_str	00000000 
0003952b l       .debug_str	00000000 
00003249 l       .debug_str	00000000 
00003275 l       .debug_str	00000000 
00003252 l       .debug_str	00000000 
00003286 l       .debug_str	00000000 
000032c7 l       .debug_str	00000000 
00003310 l       .debug_str	00000000 
0003a806 l       .debug_str	00000000 
00003315 l       .debug_str	00000000 
0000331e l       .debug_str	00000000 
00003325 l       .debug_str	00000000 
00003350 l       .debug_str	00000000 
0000332d l       .debug_str	00000000 
00003362 l       .debug_str	00000000 
000033a4 l       .debug_str	00000000 
0003a46b l       .debug_str	00000000 
000033ee l       .debug_str	00000000 
000033f4 l       .debug_str	00000000 
000033fa l       .debug_str	00000000 
00003400 l       .debug_str	00000000 
00003406 l       .debug_str	00000000 
0000340e l       .debug_str	00000000 
0000341c l       .debug_str	00000000 
0000342b l       .debug_str	00000000 
0000343c l       .debug_str	00000000 
00003447 l       .debug_str	00000000 
00003452 l       .debug_str	00000000 
0000345d l       .debug_str	00000000 
00003464 l       .debug_str	00000000 
000034aa l       .debug_str	00000000 
00003487 l       .debug_str	00000000 
000034bc l       .debug_str	00000000 
000034fe l       .debug_str	00000000 
0003965a l       .debug_str	00000000 
00003548 l       .debug_str	00000000 
00003575 l       .debug_str	00000000 
00003552 l       .debug_str	00000000 
00003587 l       .debug_str	00000000 
000035c9 l       .debug_str	00000000 
00003613 l       .debug_str	00000000 
00003618 l       .debug_str	00000000 
00003645 l       .debug_str	00000000 
00003622 l       .debug_str	00000000 
00003657 l       .debug_str	00000000 
00003699 l       .debug_str	00000000 
000036e3 l       .debug_str	00000000 
0000bb07 l       .debug_str	00000000 
0003db77 l       .debug_str	00000000 
000036f7 l       .debug_str	00000000 
00003707 l       .debug_str	00000000 
00003710 l       .debug_str	00000000 
0000371b l       .debug_str	00000000 
0000372a l       .debug_str	00000000 
0000373f l       .debug_str	00000000 
00003770 l       .debug_str	00000000 
0000380d l       .debug_str	00000000 
000038b2 l       .debug_str	00000000 
000038bd l       .debug_str	00000000 
000038c6 l       .debug_str	00000000 
0000390a l       .debug_str	00000000 
000038e7 l       .debug_str	00000000 
0000391d l       .debug_str	00000000 
000039a0 l       .debug_str	00000000 
00003a2b l       .debug_str	00000000 
00003a47 l       .debug_str	00000000 
00003a93 l       .debug_str	00000000 
00003ae7 l       .debug_str	00000000 
00003b04 l       .debug_str	00000000 
00003b18 l       .debug_str	00000000 
00003b64 l       .debug_str	00000000 
00003bb8 l       .debug_str	00000000 
00003bce l       .debug_str	00000000 
00003be2 l       .debug_str	00000000 
00003c29 l       .debug_str	00000000 
00003c78 l       .debug_str	00000000 
00003ca4 l       .debug_str	00000000 
00003c81 l       .debug_str	00000000 
00003cb2 l       .debug_str	00000000 
00003cb8 l       .debug_str	00000000 
00003cc0 l       .debug_str	00000000 
00003cc7 l       .debug_str	00000000 
000049ef l       .debug_str	00000000 
00003ccf l       .debug_str	00000000 
00003cd7 l       .debug_str	00000000 
000108b5 l       .debug_str	00000000 
00003ce6 l       .debug_str	00000000 
00004a21 l       .debug_str	00000000 
00003cf1 l       .debug_str	00000000 
00003cfc l       .debug_str	00000000 
00003d0d l       .debug_str	00000000 
00003d13 l       .debug_str	00000000 
00003d1b l       .debug_str	00000000 
00003d22 l       .debug_str	00000000 
00003d2c l       .debug_str	00000000 
00003d34 l       .debug_str	00000000 
00003d3c l       .debug_str	00000000 
00003d5e l       .debug_str	00000000 
00003d69 l       .debug_str	00000000 
00003d75 l       .debug_str	00000000 
00003d7d l       .debug_str	00000000 
00003d86 l       .debug_str	00000000 
000005cb l       .debug_str	00000000 
00003d91 l       .debug_str	00000000 
00003d9c l       .debug_str	00000000 
00003da7 l       .debug_str	00000000 
00003db7 l       .debug_str	00000000 
000395bd l       .debug_str	00000000 
00004e10 l       .debug_str	00000000 
00003dc1 l       .debug_str	00000000 
00003df9 l       .debug_str	00000000 
00003e39 l       .debug_str	00000000 
00003e40 l       .debug_str	00000000 
00003e48 l       .debug_str	00000000 
00004e29 l       .debug_str	00000000 
00003e5f l       .debug_str	00000000 
00003e6f l       .debug_str	00000000 
00003e7e l       .debug_str	00000000 
00003e86 l       .debug_str	00000000 
00003e8d l       .debug_str	00000000 
0000f362 l       .debug_str	00000000 
00003eb8 l       .debug_str	00000000 
00003e95 l       .debug_str	00000000 
00003ec8 l       .debug_str	00000000 
00003edd l       .debug_str	00000000 
00003ee6 l       .debug_str	00000000 
00003f43 l       .debug_str	00000000 
00003fa8 l       .debug_str	00000000 
00003fb2 l       .debug_str	00000000 
00003fc2 l       .debug_str	00000000 
00003fd7 l       .debug_str	00000000 
00003fdf l       .debug_str	00000000 
00004043 l       .debug_str	00000000 
000040af l       .debug_str	00000000 
000040b6 l       .debug_str	00000000 
000040be l       .debug_str	00000000 
000040ff l       .debug_str	00000000 
000040dc l       .debug_str	00000000 
0000410f l       .debug_str	00000000 
00004124 l       .debug_str	00000000 
00004137 l       .debug_str	00000000 
0000414c l       .debug_str	00000000 
00004153 l       .debug_str	00000000 
00004168 l       .debug_str	00000000 
00004370 l       .debug_str	00000000 
00004192 l       .debug_str	00000000 
000041f5 l       .debug_str	00000000 
00000dc7 l       .debug_str	00000000 
00000df3 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0003ef1f l       .debug_str	00000000 
000026ed l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
00000299 l       .debug_str	00000000 
00018e5f l       .debug_str	00000000 
0000088f l       .debug_str	00000000 
00039f5c l       .debug_str	00000000 
00000813 l       .debug_str	00000000 
0000a6d6 l       .debug_str	00000000 
00000836 l       .debug_str	00000000 
00000991 l       .debug_str	00000000 
0000099c l       .debug_str	00000000 
000009a3 l       .debug_str	00000000 
00000853 l       .debug_str	00000000 
0003a53b l       .debug_str	00000000 
0003ef60 l       .debug_str	00000000 
0001143d l       .debug_str	00000000 
00000927 l       .debug_str	00000000 
00000936 l       .debug_str	00000000 
0000093a l       .debug_str	00000000 
00000943 l       .debug_str	00000000 
0000094f l       .debug_str	00000000 
00000974 l       .debug_str	00000000 
00000968 l       .debug_str	00000000 
00000979 l       .debug_str	00000000 
00000a22 l       .debug_str	00000000 
00000a92 l       .debug_str	00000000 
00000a80 l       .debug_str	00000000 
00043b00 l       .debug_str	00000000 
000009a9 l       .debug_str	00000000 
000009b1 l       .debug_str	00000000 
000009c8 l       .debug_str	00000000 
000009ec l       .debug_str	00000000 
00039ca3 l       .debug_str	00000000 
0000429d l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3z8aw6wisyc7u5tm
00039457 l       .debug_str	00000000 
00039a4f l       .debug_str	00000000 
00039863 l       .debug_str	00000000 
000447f8 l       .debug_str	00000000 
0003998f l       .debug_str	00000000 
0004491f l       .debug_str	00000000 
00004949 l       .debug_str	00000000 
000042b1 l       .debug_str	00000000 
00004945 l       .debug_str	00000000 
0000436f l       .debug_str	00000000 
00002f03 l       .debug_str	00000000 
00004370 l       .debug_str	00000000 
00038c5b l       .debug_str	00000000 
0000a6d6 l       .debug_str	00000000 
0000073c l       .debug_str	00000000 
00000ae9 l       .debug_str	00000000 
00000038 l       .debug_str	00000000 
000084cc l       .debug_str	00000000 
00000fde l       .debug_str	00000000 
0000b8e7 l       .debug_str	00000000 
00000fe2 l       .debug_str	00000000 
00000fed l       .debug_str	00000000 
0000119a l       .debug_str	00000000 
00000853 l       .debug_str	00000000 
00000b14 l       .debug_str	00000000 
0003c4b3 l       .debug_str	00000000 
000043ec l       .debug_str	00000000 
00042573 l       .debug_str	00000000 
0001143d l       .debug_str	00000000 
0003a53b l       .debug_str	00000000 
000043f9 l       .debug_str	00000000 
0000ba51 l       .debug_str	00000000 
00043fa0 l       .debug_str	00000000 
000045a8 l       .debug_str	00000000 
000044de l       .debug_str	00000000 
00004407 l       .debug_str	00000000 
00004453 l       .debug_str	00000000 
0000445f l       .debug_str	00000000 
000044b0 l       .debug_str	00000000 
00002751 l       .debug_str	00000000 
00000dc7 l       .debug_str	00000000 
000044c0 l       .debug_str	00000000 
000044ef l       .debug_str	00000000 
00004571 l       .debug_str	00000000 
00004580 l       .debug_str	00000000 
00004589 l       .debug_str	00000000 
000045ba l       .debug_str	00000000 
0000460c l       .debug_str	00000000 
0000461d l       .debug_str	00000000 
00004670 l       .debug_str	00000000 
00043c6e l       .debug_str	00000000 
0000250b l       .debug_str	00000000 
00004680 l       .debug_str	00000000 
00000b00 l       .debug_str	00000000 
0003c69a l       .debug_str	00000000 
00000050 l       .debug_str	00000000 
000023dd l       .debug_str	00000000 
00002732 l       .debug_str	00000000 
000023e6 l       .debug_str	00000000 
0003e594 l       .debug_str	00000000 
000023ed l       .debug_str	00000000 
000023f9 l       .debug_str	00000000 
0003709c l       .debug_str	00000000 
00000842 l       .debug_str	00000000 
0000118a l       .debug_str	00000000 
00002401 l       .debug_str	00000000 
000008fb l       .debug_str	00000000 
0000087d l       .debug_str	00000000 
0000245b l       .debug_str	00000000 
000024bd l       .debug_str	00000000 
000024c8 l       .debug_str	00000000 
0000250f l       .debug_str	00000000 
0000255e l       .debug_str	00000000 
00002568 l       .debug_str	00000000 
000025a5 l       .debug_str	00000000 
000025ea l       .debug_str	00000000 
000025f3 l       .debug_str	00000000 
00002603 l       .debug_str	00000000 
0000260b l       .debug_str	00000000 
00002660 l       .debug_str	00000000 
000026bd l       .debug_str	00000000 
000026c9 l       .debug_str	00000000 
000026d2 l       .debug_str	00000000 
000026de l       .debug_str	00000000 
000026ea l       .debug_str	00000000 
000026f3 l       .debug_str	00000000 
00000857 l       .debug_str	00000000 
000026fb l       .debug_str	00000000 
00000581 l       .debug_str	00000000 
00002703 l       .debug_str	00000000 
00002731 l       .debug_str	00000000 
00002718 l       .debug_str	00000000 
00002738 l       .debug_str	00000000 
0000273f l       .debug_str	00000000 
00002747 l       .debug_str	00000000 
00000708 l       .debug_str	00000000 
000004ad l       .debug_str	00000000 
000006ee l       .debug_str	00000000 
0000b99b l       .debug_str	00000000 
0000066b l       .debug_str	00000000 
00000643 l       .debug_str	00000000 
000006cf l       .debug_str	00000000 
00037204 l       .debug_str	00000000 
00000609 l       .debug_str	00000000 
000004df l       .debug_str	00000000 
0003e04e l       .debug_str	00000000 
000364f6 l       .debug_str	00000000 
0000275a l       .debug_str	00000000 
00002787 l       .debug_str	00000000 
000026c3 l       .debug_str	00000000 
00038516 l       .debug_str	00000000 
00000521 l       .debug_str	00000000 
00000690 l       .debug_str	00000000 
000005f2 l       .debug_str	00000000 
000004f0 l       .debug_str	00000000 
000027bc l       .debug_str	00000000 
000027e5 l       .debug_str	00000000 
00002843 l       .debug_str	00000000 
000005d2 l       .debug_str	00000000 
000006d7 l       .debug_str	00000000 
000006af l       .debug_str	00000000 
000028a9 l       .debug_str	00000000 
000027d5 l       .debug_str	00000000 
000006fa l       .debug_str	00000000 
000004a2 l       .debug_str	00000000 
00000674 l       .debug_str	00000000 
000006df l       .debug_str	00000000 
000028c7 l       .debug_str	00000000 
0000065b l       .debug_str	00000000 
00000582 l       .debug_str	00000000 
00000509 l       .debug_str	00000000 
000028dd l       .debug_str	00000000 
00002903 l       .debug_str	00000000 
000004b8 l       .debug_str	00000000 
00002919 l       .debug_str	00000000 
0000645f l       .debug_str	00000000 
000028e2 l       .debug_str	00000000 
0000292f l       .debug_str	00000000 
0002ce96 l       .debug_str	00000000 
00002946 l       .debug_str	00000000 
0000294e l       .debug_str	00000000 
00002957 l       .debug_str	00000000 
00003d55 l       .debug_str	00000000 
00002960 l       .debug_str	00000000 
0000a35b l       .debug_str	00000000 
0003cfba l       .debug_str	00000000 
00002968 l       .debug_str	00000000 
00002974 l       .debug_str	00000000 
0000297f l       .debug_str	00000000 
00002987 l       .debug_str	00000000 
00004684 l       .debug_str	00000000 
000042eb l       .debug_str	00000000 
0000298f l       .debug_str	00000000 
00002a8b l       .debug_str	00000000 
00002b8f l       .debug_str	00000000 
00002b9d l       .debug_str	00000000 
00002ba8 l       .debug_str	00000000 
00000822 l       .debug_str	00000000 
00002bd5 l       .debug_str	00000000 
00002bb2 l       .debug_str	00000000 
00002be0 l       .debug_str	00000000 
00002c5b l       .debug_str	00000000 
00002cde l       .debug_str	00000000 
00002cec l       .debug_str	00000000 
00002d4b l       .debug_str	00000000 
00002db2 l       .debug_str	00000000 
00002dc8 l       .debug_str	00000000 
00002dd8 l       .debug_str	00000000 
0003a863 l       .debug_str	00000000 
000009aa l       .debug_str	00000000 
00002de7 l       .debug_str	00000000 
000114f6 l       .debug_str	00000000 
00002ded l       .debug_str	00000000 
00002df3 l       .debug_str	00000000 
00002df9 l       .debug_str	00000000 
00002e05 l       .debug_str	00000000 
00043a1a l       .debug_str	00000000 
00002e0d l       .debug_str	00000000 
0004208c l       .debug_str	00000000 
00002e15 l       .debug_str	00000000 
00002e5b l       .debug_str	00000000 
00002e38 l       .debug_str	00000000 
00002e6b l       .debug_str	00000000 
00002eab l       .debug_str	00000000 
0003a333 l       .debug_str	00000000 
00002ef3 l       .debug_str	00000000 
00002ef9 l       .debug_str	00000000 
00002eff l       .debug_str	00000000 
00002f28 l       .debug_str	00000000 
00002f05 l       .debug_str	00000000 
00002f3a l       .debug_str	00000000 
00002f7c l       .debug_str	00000000 
0003a1e5 l       .debug_str	00000000 
00002fc6 l       .debug_str	00000000 
00002fcc l       .debug_str	00000000 
00002fd2 l       .debug_str	00000000 
00002ffb l       .debug_str	00000000 
00002fd8 l       .debug_str	00000000 
0000300d l       .debug_str	00000000 
0000304f l       .debug_str	00000000 
00004938 l       .debug_str	00000000 
00003099 l       .debug_str	00000000 
0000309f l       .debug_str	00000000 
000030a5 l       .debug_str	00000000 
000030ab l       .debug_str	00000000 
000030d4 l       .debug_str	00000000 
000030b1 l       .debug_str	00000000 
000030e5 l       .debug_str	00000000 
00003126 l       .debug_str	00000000 
0000316f l       .debug_str	00000000 
00003174 l       .debug_str	00000000 
0003a5e3 l       .debug_str	00000000 
00003179 l       .debug_str	00000000 
0000317f l       .debug_str	00000000 
00003185 l       .debug_str	00000000 
000031ae l       .debug_str	00000000 
0000318b l       .debug_str	00000000 
000031bf l       .debug_str	00000000 
00003200 l       .debug_str	00000000 
0003952b l       .debug_str	00000000 
00003249 l       .debug_str	00000000 
00003275 l       .debug_str	00000000 
00003252 l       .debug_str	00000000 
00003286 l       .debug_str	00000000 
000032c7 l       .debug_str	00000000 
00003310 l       .debug_str	00000000 
0003a806 l       .debug_str	00000000 
00003315 l       .debug_str	00000000 
0000331e l       .debug_str	00000000 
00003325 l       .debug_str	00000000 
00003350 l       .debug_str	00000000 
0000332d l       .debug_str	00000000 
00003362 l       .debug_str	00000000 
000033a4 l       .debug_str	00000000 
0003a46b l       .debug_str	00000000 
000033ee l       .debug_str	00000000 
000033f4 l       .debug_str	00000000 
000033fa l       .debug_str	00000000 
00003400 l       .debug_str	00000000 
00003406 l       .debug_str	00000000 
0000340e l       .debug_str	00000000 
0000341c l       .debug_str	00000000 
0000342b l       .debug_str	00000000 
0000343c l       .debug_str	00000000 
00003447 l       .debug_str	00000000 
00003452 l       .debug_str	00000000 
0000345d l       .debug_str	00000000 
00003464 l       .debug_str	00000000 
000034aa l       .debug_str	00000000 
00003487 l       .debug_str	00000000 
000034bc l       .debug_str	00000000 
000034fe l       .debug_str	00000000 
0003965a l       .debug_str	00000000 
00003548 l       .debug_str	00000000 
00003575 l       .debug_str	00000000 
00003552 l       .debug_str	00000000 
00003587 l       .debug_str	00000000 
000035c9 l       .debug_str	00000000 
00003613 l       .debug_str	00000000 
00003618 l       .debug_str	00000000 
00003645 l       .debug_str	00000000 
00003622 l       .debug_str	00000000 
00003657 l       .debug_str	00000000 
00003699 l       .debug_str	00000000 
000036e3 l       .debug_str	00000000 
0000bb07 l       .debug_str	00000000 
0003db77 l       .debug_str	00000000 
000036f7 l       .debug_str	00000000 
00003707 l       .debug_str	00000000 
00003710 l       .debug_str	00000000 
0000371b l       .debug_str	00000000 
0000372a l       .debug_str	00000000 
0000373f l       .debug_str	00000000 
00003770 l       .debug_str	00000000 
0000380d l       .debug_str	00000000 
000038b2 l       .debug_str	00000000 
000038bd l       .debug_str	00000000 
000038c6 l       .debug_str	00000000 
0000390a l       .debug_str	00000000 
000038e7 l       .debug_str	00000000 
0000391d l       .debug_str	00000000 
000039a0 l       .debug_str	00000000 
00003a2b l       .debug_str	00000000 
00003a47 l       .debug_str	00000000 
00003a93 l       .debug_str	00000000 
00003ae7 l       .debug_str	00000000 
00003b04 l       .debug_str	00000000 
00003b18 l       .debug_str	00000000 
00003b64 l       .debug_str	00000000 
00003bb8 l       .debug_str	00000000 
00003bce l       .debug_str	00000000 
00003be2 l       .debug_str	00000000 
00003c29 l       .debug_str	00000000 
00003c78 l       .debug_str	00000000 
00003ca4 l       .debug_str	00000000 
00003c81 l       .debug_str	00000000 
00003cb2 l       .debug_str	00000000 
00003cb8 l       .debug_str	00000000 
00003cc0 l       .debug_str	00000000 
00003cc7 l       .debug_str	00000000 
000049ef l       .debug_str	00000000 
00003ccf l       .debug_str	00000000 
00003cd7 l       .debug_str	00000000 
000108b5 l       .debug_str	00000000 
00003ce6 l       .debug_str	00000000 
00004a21 l       .debug_str	00000000 
00003cf1 l       .debug_str	00000000 
00003cfc l       .debug_str	00000000 
00003d0d l       .debug_str	00000000 
00003d13 l       .debug_str	00000000 
00003d1b l       .debug_str	00000000 
00003d22 l       .debug_str	00000000 
00003d2c l       .debug_str	00000000 
00003d34 l       .debug_str	00000000 
00003d3c l       .debug_str	00000000 
00003d5e l       .debug_str	00000000 
00003d69 l       .debug_str	00000000 
00003d75 l       .debug_str	00000000 
00003d7d l       .debug_str	00000000 
00003d86 l       .debug_str	00000000 
000005cb l       .debug_str	00000000 
00003d91 l       .debug_str	00000000 
00003d9c l       .debug_str	00000000 
00003da7 l       .debug_str	00000000 
00003db7 l       .debug_str	00000000 
000395bd l       .debug_str	00000000 
00004e10 l       .debug_str	00000000 
00003dc1 l       .debug_str	00000000 
00003df9 l       .debug_str	00000000 
00003e39 l       .debug_str	00000000 
00003e40 l       .debug_str	00000000 
00003e48 l       .debug_str	00000000 
00004e29 l       .debug_str	00000000 
00003e5f l       .debug_str	00000000 
00003e6f l       .debug_str	00000000 
00003e7e l       .debug_str	00000000 
00003e86 l       .debug_str	00000000 
00003e8d l       .debug_str	00000000 
0000f362 l       .debug_str	00000000 
00003eb8 l       .debug_str	00000000 
00003e95 l       .debug_str	00000000 
00003ec8 l       .debug_str	00000000 
00003edd l       .debug_str	00000000 
00003ee6 l       .debug_str	00000000 
00003f43 l       .debug_str	00000000 
00003fa8 l       .debug_str	00000000 
00003fb2 l       .debug_str	00000000 
00003fc2 l       .debug_str	00000000 
00003fd7 l       .debug_str	00000000 
00003fdf l       .debug_str	00000000 
00004043 l       .debug_str	00000000 
000040af l       .debug_str	00000000 
000040b6 l       .debug_str	00000000 
000040be l       .debug_str	00000000 
000040ff l       .debug_str	00000000 
000040dc l       .debug_str	00000000 
0000410f l       .debug_str	00000000 
00004124 l       .debug_str	00000000 
00004137 l       .debug_str	00000000 
0000414c l       .debug_str	00000000 
00004153 l       .debug_str	00000000 
00004168 l       .debug_str	00000000 
0003e68a l       .debug_str	00000000 
0003f7f4 l       .debug_str	00000000 
00036fb7 l       .debug_str	00000000 
0003f81e l       .debug_str	00000000 
00004691 l       .debug_str	00000000 
00004749 l       .debug_str	00000000 
0000a452 l       .debug_str	00000000 
000047ad l       .debug_str	00000000 
000047e3 l       .debug_str	00000000 
000047fc l       .debug_str	00000000 
00004836 l       .debug_str	00000000 
00004853 l       .debug_str	00000000 
00004879 l       .debug_str	00000000 
00004883 l       .debug_str	00000000 
000048aa l       .debug_str	00000000 
000048b5 l       .debug_str	00000000 
000048df l       .debug_str	00000000 
0000490e l       .debug_str	00000000 
0000bbcd l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 46egs5mv0r9490hu
000004a2 l       .debug_str	00000000 
0000610c l       .debug_str	00000000 
0000648b l       .debug_str	00000000 
00006096 l       .debug_str	00000000 
00006480 l       .debug_str	00000000 
00006020 l       .debug_str	00000000 
00004949 l       .debug_str	00000000 
00005faa l       .debug_str	00000000 
0000647b l       .debug_str	00000000 
00005f9e l       .debug_str	00000000 
00006476 l       .debug_str	00000000 
00005f95 l       .debug_str	00000000 
00006471 l       .debug_str	00000000 
00005f29 l       .debug_str	00000000 
0000646c l       .debug_str	00000000 
00005f0f l       .debug_str	00000000 
00006467 l       .debug_str	00000000 
00005e95 l       .debug_str	00000000 
00000dcc l       .debug_str	00000000 
00005e25 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00005da7 l       .debug_str	00000000 
00000b2a l       .debug_str	00000000 
00003d55 l       .debug_str	00000000 
00000b25 l       .debug_str	00000000 
00002957 l       .debug_str	00000000 
00006608 l       .debug_str	00000000 
0000294e l       .debug_str	00000000 
0000bbcd l       .debug_str	00000000 
00002946 l       .debug_str	00000000 
0003eb70 l       .debug_str	00000000 
0002ce96 l       .debug_str	00000000 
0000084e l       .debug_str	00000000 
0000273f l       .debug_str	00000000 
00000b1d l       .debug_str	00000000 
00005d3e l       .debug_str	00000000 
000381ee l       .debug_str	00000000 
0000292f l       .debug_str	00000000 
00000e13 l       .debug_str	00000000 
00005cc7 l       .debug_str	00000000 
00006446 l       .debug_str	00000000 
00005bba l       .debug_str	00000000 
00000e0e l       .debug_str	00000000 
00005cbb l       .debug_str	00000000 
00001479 l       .debug_str	00000000 
00005c3e l       .debug_str	00000000 
00038e48 l       .debug_str	00000000 
00005bc9 l       .debug_str	00000000 
0003b164 l       .debug_str	00000000 
00005ba1 l       .debug_str	00000000 
00006413 l       .debug_str	00000000 
00005b96 l       .debug_str	00000000 
000063cb l       .debug_str	00000000 
00005b8f l       .debug_str	00000000 
0003798d l       .debug_str	00000000 
00005b20 l       .debug_str	00000000 
00006391 l       .debug_str	00000000 
00005ab5 l       .debug_str	00000000 
0000f6b7 l       .debug_str	00000000 
00005a3c l       .debug_str	00000000 
000007ae l       .debug_str	00000000 
000059c3 l       .debug_str	00000000 
0002c0e1 l       .debug_str	00000000 
00005957 l       .debug_str	00000000 
0001143d l       .debug_str	00000000 
000058dd l       .debug_str	00000000 
000007ab l       .debug_str	00000000 
000058d3 l       .debug_str	00000000 
0003b798 l       .debug_str	00000000 
000058cd l       .debug_str	00000000 
0000635c l       .debug_str	00000000 
000058c5 l       .debug_str	00000000 
00006355 l       .debug_str	00000000 
0000585b l       .debug_str	00000000 
0000634a l       .debug_str	00000000 
00005843 l       .debug_str	00000000 
00006341 l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
000062da l       .debug_str	00000000 
0000579e l       .debug_str	00000000 
000062c5 l       .debug_str	00000000 
00005736 l       .debug_str	00000000 
00006250 l       .debug_str	00000000 
00005720 l       .debug_str	00000000 
00000683 l       .debug_str	00000000 
000056ff l       .debug_str	00000000 
000061e3 l       .debug_str	00000000 
0000d2a0 l       .debug_str	00000000 
000005a2 l       .debug_str	00000000 
000056e4 l       .debug_str	00000000 
0000073c l       .debug_str	00000000 
00000ae9 l       .debug_str	00000000 
00000038 l       .debug_str	00000000 
000084cc l       .debug_str	00000000 
00000fde l       .debug_str	00000000 
0000b8e7 l       .debug_str	00000000 
00000fe2 l       .debug_str	00000000 
00000fed l       .debug_str	00000000 
0000119a l       .debug_str	00000000 
00000b00 l       .debug_str	00000000 
00009ac3 l       .debug_str	00000000 
0000250b l       .debug_str	00000000 
00000ff8 l       .debug_str	00000000 
00001000 l       .debug_str	00000000 
0000100b l       .debug_str	00000000 
00001016 l       .debug_str	00000000 
00001023 l       .debug_str	00000000 
0000102e l       .debug_str	00000000 
00001036 l       .debug_str	00000000 
00001041 l       .debug_str	00000000 
0000104c l       .debug_str	00000000 
00001056 l       .debug_str	00000000 
00001061 l       .debug_str	00000000 
0000106c l       .debug_str	00000000 
00001079 l       .debug_str	00000000 
00001085 l       .debug_str	00000000 
00001092 l       .debug_str	00000000 
000010a0 l       .debug_str	00000000 
000010aa l       .debug_str	00000000 
0000fafe l       .debug_str	00000000 
000023e6 l       .debug_str	00000000 
0003e594 l       .debug_str	00000000 
00000b14 l       .debug_str	00000000 
00004954 l       .debug_str	00000000 
00016e36 l       .debug_str	00000000 
000049c8 l       .debug_str	00000000 
00003cc0 l       .debug_str	00000000 
0000a35b l       .debug_str	00000000 
00003cc7 l       .debug_str	00000000 
000049ef l       .debug_str	00000000 
000049d4 l       .debug_str	00000000 
000049fa l       .debug_str	00000000 
00003cd7 l       .debug_str	00000000 
000108b5 l       .debug_str	00000000 
00003ce6 l       .debug_str	00000000 
00004a21 l       .debug_str	00000000 
00004a06 l       .debug_str	00000000 
00004a2d l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
00004a43 l       .debug_str	00000000 
0000a452 l       .debug_str	00000000 
00004afd l       .debug_str	00000000 
00004a54 l       .debug_str	00000000 
00000581 l       .debug_str	00000000 
00004adb l       .debug_str	00000000 
0003709c l       .debug_str	00000000 
0000ba51 l       .debug_str	00000000 
00000842 l       .debug_str	00000000 
00004ae2 l       .debug_str	00000000 
0000118a l       .debug_str	00000000 
00004b11 l       .debug_str	00000000 
00043fa0 l       .debug_str	00000000 
000008fb l       .debug_str	00000000 
0000087d l       .debug_str	00000000 
00004b6e l       .debug_str	00000000 
00004bd3 l       .debug_str	00000000 
00004bdb l       .debug_str	00000000 
00004bfd l       .debug_str	00000000 
00004be4 l       .debug_str	00000000 
00004c15 l       .debug_str	00000000 
00004c3b l       .debug_str	00000000 
00004cb3 l       .debug_str	00000000 
00003db7 l       .debug_str	00000000 
000395bd l       .debug_str	00000000 
00003dc1 l       .debug_str	00000000 
00003df9 l       .debug_str	00000000 
00003e39 l       .debug_str	00000000 
00003e40 l       .debug_str	00000000 
00004e29 l       .debug_str	00000000 
00004e10 l       .debug_str	00000000 
00003e48 l       .debug_str	00000000 
00004d2a l       .debug_str	00000000 
00004d93 l       .debug_str	00000000 
000004c3 l       .debug_str	00000000 
00000713 l       .debug_str	00000000 
00004e0b l       .debug_str	00000000 
00004e32 l       .debug_str	00000000 
00004e4a l       .debug_str	00000000 
00004eb4 l       .debug_str	00000000 
00000708 l       .debug_str	00000000 
00002751 l       .debug_str	00000000 
000004ad l       .debug_str	00000000 
000006ee l       .debug_str	00000000 
0000b99b l       .debug_str	00000000 
0000066b l       .debug_str	00000000 
00000643 l       .debug_str	00000000 
000006cf l       .debug_str	00000000 
00037204 l       .debug_str	00000000 
00000609 l       .debug_str	00000000 
000004df l       .debug_str	00000000 
0003e04e l       .debug_str	00000000 
00000857 l       .debug_str	00000000 
000364f6 l       .debug_str	00000000 
0000275a l       .debug_str	00000000 
00002787 l       .debug_str	00000000 
000026c3 l       .debug_str	00000000 
00038516 l       .debug_str	00000000 
00000521 l       .debug_str	00000000 
00000690 l       .debug_str	00000000 
000005f2 l       .debug_str	00000000 
000004f0 l       .debug_str	00000000 
000027bc l       .debug_str	00000000 
000027e5 l       .debug_str	00000000 
00002843 l       .debug_str	00000000 
000005d2 l       .debug_str	00000000 
000006d7 l       .debug_str	00000000 
000006af l       .debug_str	00000000 
000028a9 l       .debug_str	00000000 
000027d5 l       .debug_str	00000000 
000006fa l       .debug_str	00000000 
00000822 l       .debug_str	00000000 
00000674 l       .debug_str	00000000 
000006df l       .debug_str	00000000 
000028c7 l       .debug_str	00000000 
0000065b l       .debug_str	00000000 
00000582 l       .debug_str	00000000 
00000509 l       .debug_str	00000000 
000028dd l       .debug_str	00000000 
00002903 l       .debug_str	00000000 
000004b8 l       .debug_str	00000000 
00002919 l       .debug_str	00000000 
0000645f l       .debug_str	00000000 
000028e2 l       .debug_str	00000000 
00004ebe l       .debug_str	00000000 
00004ec7 l       .debug_str	00000000 
00004f67 l       .debug_str	00000000 
00004ed0 l       .debug_str	00000000 
00004f49 l       .debug_str	00000000 
00038e46 l       .debug_str	00000000 
00004f4e l       .debug_str	00000000 
00004f71 l       .debug_str	00000000 
000006d8 l       .debug_str	00000000 
00004f97 l       .debug_str	00000000 
00004f7e l       .debug_str	00000000 
00004f79 l       .debug_str	00000000 
00004fa2 l       .debug_str	00000000 
00004fbb l       .debug_str	00000000 
00005026 l       .debug_str	00000000 
000004c4 l       .debug_str	00000000 
00000714 l       .debug_str	00000000 
00005096 l       .debug_str	00000000 
000050a6 l       .debug_str	00000000 
0000511e l       .debug_str	00000000 
00005128 l       .debug_str	00000000 
0003f225 l       .debug_str	00000000 
00005130 l       .debug_str	00000000 
00005137 l       .debug_str	00000000 
0000515a l       .debug_str	00000000 
00005141 l       .debug_str	00000000 
0000513c l       .debug_str	00000000 
00005164 l       .debug_str	00000000 
0000517c l       .debug_str	00000000 
000051e6 l       .debug_str	00000000 
000023ed l       .debug_str	00000000 
000023f9 l       .debug_str	00000000 
00002401 l       .debug_str	00000000 
0000245b l       .debug_str	00000000 
000024bd l       .debug_str	00000000 
000024c8 l       .debug_str	00000000 
0000250f l       .debug_str	00000000 
0000255e l       .debug_str	00000000 
00002568 l       .debug_str	00000000 
000025a5 l       .debug_str	00000000 
000025ea l       .debug_str	00000000 
000025f3 l       .debug_str	00000000 
00002603 l       .debug_str	00000000 
0000260b l       .debug_str	00000000 
00002660 l       .debug_str	00000000 
000026bd l       .debug_str	00000000 
000026c9 l       .debug_str	00000000 
000026d2 l       .debug_str	00000000 
000026de l       .debug_str	00000000 
000026ea l       .debug_str	00000000 
000026f3 l       .debug_str	00000000 
000026fb l       .debug_str	00000000 
00002731 l       .debug_str	00000000 
00002718 l       .debug_str	00000000 
00002703 l       .debug_str	00000000 
0000525b l       .debug_str	00000000 
000052c2 l       .debug_str	00000000 
0000533d l       .debug_str	00000000 
0000534d l       .debug_str	00000000 
00005356 l       .debug_str	00000000 
00005364 l       .debug_str	00000000 
00005372 l       .debug_str	00000000 
0000537e l       .debug_str	00000000 
0000558c l       .debug_str	00000000 
0000538a l       .debug_str	00000000 
00005399 l       .debug_str	00000000 
000053a1 l       .debug_str	00000000 
000053ba l       .debug_str	00000000 
00002747 l       .debug_str	00000000 
000053cb l       .debug_str	00000000 
000053d3 l       .debug_str	00000000 
0000c162 l       .debug_str	00000000 
000053ed l       .debug_str	00000000 
00005412 l       .debug_str	00000000 
000026f6 l       .debug_str	00000000 
0000a6d6 l       .debug_str	00000000 
0000c6ba l       .debug_str	00000000 
0000542b l       .debug_str	00000000 
0000544f l       .debug_str	00000000 
0000c6e5 l       .debug_str	00000000 
00005458 l       .debug_str	00000000 
0000547e l       .debug_str	00000000 
00005499 l       .debug_str	00000000 
00005506 l       .debug_str	00000000 
00005583 l       .debug_str	00000000 
0000558b l       .debug_str	00000000 
00005834 l       .debug_str	00000000 
0000581b l       .debug_str	00000000 
00005595 l       .debug_str	00000000 
000055b2 l       .debug_str	00000000 
00005621 l       .debug_str	00000000 
00005697 l       .debug_str	00000000 
0000569f l       .debug_str	00000000 
000056a8 l       .debug_str	00000000 
0003eb31 l       .debug_str	00000000 
000056b6 l       .debug_str	00000000 
000056bd l       .debug_str	00000000 
000056c5 l       .debug_str	00000000 
000009aa l       .debug_str	00000000 
000056d0 l       .debug_str	00000000 
000056e0 l       .debug_str	00000000 
00006174 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4i01xfee9wuwxvmo
0000650b l       .debug_str	00000000 
00000868 l       .debug_str	00000000 
00006607 l       .debug_str	00000000 
0000bbcd l       .debug_str	00000000 
00006608 l       .debug_str	00000000 
0003eb70 l       .debug_str	00000000 
0000073c l       .debug_str	00000000 
00000ae9 l       .debug_str	00000000 
00000038 l       .debug_str	00000000 
000084cc l       .debug_str	00000000 
0003a835 l       .debug_str	00000000 
0000fc7a l       .debug_str	00000000 
00000b14 l       .debug_str	00000000 
0000b8e7 l       .debug_str	00000000 
0003e68a l       .debug_str	00000000 
0003f7f4 l       .debug_str	00000000 
00006490 l       .debug_str	00000000 
00006501 l       .debug_str	00000000 
0000a452 l       .debug_str	00000000 
000114f2 l       .debug_str	00000000 
00000822 l       .debug_str	00000000 
00000857 l       .debug_str	00000000 
0000657c l       .debug_str	00000000 
00006588 l       .debug_str	00000000 
000065f9 l       .debug_str	00000000 
00000dc7 l       .debug_str	00000000 
00009379 l       .debug_str	00000000 
00009378 l       .debug_str	00000000 
000042b1 l       .debug_str	00000000 
0000084e l       .debug_str	00000000 
00001909 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4koelxpj0vilp4ti
00006741 l       .debug_str	00000000 
0000087b l       .debug_str	00000000 
0000073c l       .debug_str	00000000 
00000ae9 l       .debug_str	00000000 
00000038 l       .debug_str	00000000 
000084cc l       .debug_str	00000000 
0003c4b3 l       .debug_str	00000000 
000043ec l       .debug_str	00000000 
00042573 l       .debug_str	00000000 
0001143d l       .debug_str	00000000 
0003a53b l       .debug_str	00000000 
000043f9 l       .debug_str	00000000 
00000853 l       .debug_str	00000000 
0000660e l       .debug_str	00000000 
0000087d l       .debug_str	00000000 
0000bb07 l       .debug_str	00000000 
000056e0 l       .debug_str	00000000 
00006628 l       .debug_str	00000000 
0000662c l       .debug_str	00000000 
00006825 l       .debug_str	00000000 
00043fa0 l       .debug_str	00000000 
0000684a l       .debug_str	00000000 
00006708 l       .debug_str	00000000 
00006630 l       .debug_str	00000000 
00006681 l       .debug_str	00000000 
000066b9 l       .debug_str	00000000 
00000dc7 l       .debug_str	00000000 
000066ea l       .debug_str	00000000 
00000b14 l       .debug_str	00000000 
0003d87e l       .debug_str	00000000 
000067c3 l       .debug_str	00000000 
000067fa l       .debug_str	00000000 
0000682b l       .debug_str	00000000 
00006a9d l       .debug_str	00000000 
00006acb l       .debug_str	00000000 
0000696e l       .debug_str	00000000 
00006884 l       .debug_str	00000000 
000068d5 l       .debug_str	00000000 
00006916 l       .debug_str	00000000 
00006950 l       .debug_str	00000000 
000069b0 l       .debug_str	00000000 
00006a32 l       .debug_str	00000000 
00006a72 l       .debug_str	00000000 
00006aac l       .debug_str	00000000 
00006b0e l       .debug_str	00000000 
0004491f l       .debug_str	00000000 
0000b8e7 l       .debug_str	00000000 
0000a6d6 l       .debug_str	00000000 
000447f8 l       .debug_str	00000000 
00038c5b l       .debug_str	00000000 
0000bbcd l       .debug_str	00000000 
0003bbf7 l       .debug_str	00000000 
00012c91 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 567evy38v9kp0s79
00006b93 l       .debug_str	00000000 
00039a4f l       .debug_str	00000000 
0000073c l       .debug_str	00000000 
00000ae9 l       .debug_str	00000000 
00000038 l       .debug_str	00000000 
000084cc l       .debug_str	00000000 
00006b4a l       .debug_str	00000000 
0000ba51 l       .debug_str	00000000 
00043fa0 l       .debug_str	00000000 
00006b55 l       .debug_str	00000000 
00002751 l       .debug_str	00000000 
00004945 l       .debug_str	00000000 
00004949 l       .debug_str	00000000 
00039863 l       .debug_str	00000000 
0000bbcd l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 57kmiovebj0bsj75
00000857 l       .debug_str	00000000 
00038c5b l       .debug_str	00000000 
00000c7f l       .debug_str	00000000 
00006bf6 l       .debug_str	00000000 
0000073c l       .debug_str	00000000 
00000ae9 l       .debug_str	00000000 
00000038 l       .debug_str	00000000 
000084cc l       .debug_str	00000000 
00000869 l       .debug_str	00000000 
00000b14 l       .debug_str	00000000 
00006bac l       .debug_str	00000000 
00006bed l       .debug_str	00000000 
0000084e l       .debug_str	00000000 
0000b8e7 l       .debug_str	00000000 
00000868 l       .debug_str	00000000 
0003eb70 l       .debug_str	00000000 
0000bbcd l       .debug_str	00000000 
00006608 l       .debug_str	00000000 
00000dc7 l       .debug_str	00000000 
00006c32 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 a9erbz5vdx01918
0003a293 l       .debug_str	00000000 
00017dd4 l       .debug_str	00000000 
0000429d l       .debug_str	00000000 
00004289 l       .debug_str	00000000 
0000a452 l       .debug_str	00000000 
00004275 l       .debug_str	00000000 
00000a08 l       .debug_str	00000000 
00000a18 l       .debug_str	00000000 
00000a9d l       .debug_str	00000000 
0003eb70 l       .debug_str	00000000 
0000084e l       .debug_str	00000000 
00039ca3 l       .debug_str	00000000 
000009ec l       .debug_str	00000000 
000009c8 l       .debug_str	00000000 
000009b1 l       .debug_str	00000000 
000009a9 l       .debug_str	00000000 
00043b00 l       .debug_str	00000000 
00000a80 l       .debug_str	00000000 
00000a92 l       .debug_str	00000000 
00000a22 l       .debug_str	00000000 
00000979 l       .debug_str	00000000 
00000968 l       .debug_str	00000000 
00000974 l       .debug_str	00000000 
0000073c l       .debug_str	00000000 
00000ae9 l       .debug_str	00000000 
00000038 l       .debug_str	00000000 
00000b00 l       .debug_str	00000000 
00009ac3 l       .debug_str	00000000 
0000250b l       .debug_str	00000000 
00000ff8 l       .debug_str	00000000 
00001000 l       .debug_str	00000000 
0000100b l       .debug_str	00000000 
00001016 l       .debug_str	00000000 
00001023 l       .debug_str	00000000 
0000102e l       .debug_str	00000000 
00001036 l       .debug_str	00000000 
00001041 l       .debug_str	00000000 
0000104c l       .debug_str	00000000 
00001056 l       .debug_str	00000000 
00001061 l       .debug_str	00000000 
0000106c l       .debug_str	00000000 
00001079 l       .debug_str	00000000 
00001085 l       .debug_str	00000000 
00001092 l       .debug_str	00000000 
000010a0 l       .debug_str	00000000 
000010aa l       .debug_str	00000000 
0000fafe l       .debug_str	00000000 
000084cc l       .debug_str	00000000 
0000b8e7 l       .debug_str	00000000 
000007ab l       .debug_str	00000000 
000007ae l       .debug_str	00000000 
000007b2 l       .debug_str	00000000 
0002b5a7 l       .debug_str	00000000 
000142cf l       .debug_str	00000000 
00001cdb l       .debug_str	00000000 
00000791 l       .debug_str	00000000 
00000796 l       .debug_str	00000000 
0000079c l       .debug_str	00000000 
000007a3 l       .debug_str	00000000 
00041020 l       .debug_str	00000000 
00000b14 l       .debug_str	00000000 
00006c71 l       .debug_str	00000000 
0003bb79 l       .debug_str	00000000 
00006cf6 l       .debug_str	00000000 
00006d63 l       .debug_str	00000000 
0000094f l       .debug_str	00000000 
0003673f l       .debug_str	00000000 
00000dc7 l       .debug_str	00000000 
00001962 l       .debug_str	00000000 
0003ef1f l       .debug_str	00000000 
000026ed l       .debug_str	00000000 
0000ba51 l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
00000299 l       .debug_str	00000000 
00043a1a l       .debug_str	00000000 
00018e5f l       .debug_str	00000000 
0003709c l       .debug_str	00000000 
00000842 l       .debug_str	00000000 
0000bbcd l       .debug_str	00000000 
00043fa0 l       .debug_str	00000000 
000008fb l       .debug_str	00000000 
0000087d l       .debug_str	00000000 
00000983 l       .debug_str	00000000 
0000088f l       .debug_str	00000000 
00039f5c l       .debug_str	00000000 
00000813 l       .debug_str	00000000 
0000a6d6 l       .debug_str	00000000 
0000081b l       .debug_str	00000000 
00000822 l       .debug_str	00000000 
00000836 l       .debug_str	00000000 
00000991 l       .debug_str	00000000 
0000099c l       .debug_str	00000000 
000009a3 l       .debug_str	00000000 
00000853 l       .debug_str	00000000 
0003a53b l       .debug_str	00000000 
0003ef60 l       .debug_str	00000000 
0001143d l       .debug_str	00000000 
00000927 l       .debug_str	00000000 
000009aa l       .debug_str	00000000 
00000936 l       .debug_str	00000000 
0000093a l       .debug_str	00000000 
00000943 l       .debug_str	00000000 
00004292 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 gt32234chpttqs5
00002078 l       .debug_str	00000000 
00000853 l       .debug_str	00000000 
0000099c l       .debug_str	00000000 
00000991 l       .debug_str	00000000 
00039f5c l       .debug_str	00000000 
00007171 l       .debug_str	00000000 
00000983 l       .debug_str	00000000 
0003f7fd l       .debug_str	00000000 
00000979 l       .debug_str	00000000 
00000968 l       .debug_str	00000000 
00000974 l       .debug_str	00000000 
0000094f l       .debug_str	00000000 
00000943 l       .debug_str	00000000 
00002118 l       .debug_str	00000000 
00000836 l       .debug_str	00000000 
0003a293 l       .debug_str	00000000 
00000822 l       .debug_str	00000000 
00007168 l       .debug_str	00000000 
0000081b l       .debug_str	00000000 
00040304 l       .debug_str	00000000 
00000813 l       .debug_str	00000000 
00010d9b l       .debug_str	00000000 
0000093a l       .debug_str	00000000 
00010da7 l       .debug_str	00000000 
000009aa l       .debug_str	00000000 
00000927 l       .debug_str	00000000 
00000a9d l       .debug_str	00000000 
0001143d l       .debug_str	00000000 
00000a80 l       .debug_str	00000000 
00000a92 l       .debug_str	00000000 
00000a22 l       .debug_str	00000000 
00000a08 l       .debug_str	00000000 
00000a18 l       .debug_str	00000000 
000009ec l       .debug_str	00000000 
000009c8 l       .debug_str	00000000 
000009b1 l       .debug_str	00000000 
0000073c l       .debug_str	00000000 
00000ae9 l       .debug_str	00000000 
00000038 l       .debug_str	00000000 
000084cc l       .debug_str	00000000 
0002b5a7 l       .debug_str	00000000 
000142cf l       .debug_str	00000000 
00001cdb l       .debug_str	00000000 
0000b8e7 l       .debug_str	00000000 
00000791 l       .debug_str	00000000 
00000796 l       .debug_str	00000000 
0000079c l       .debug_str	00000000 
000007a3 l       .debug_str	00000000 
00041020 l       .debug_str	00000000 
00009ac3 l       .debug_str	00000000 
000007ab l       .debug_str	00000000 
000007ae l       .debug_str	00000000 
000007b2 l       .debug_str	00000000 
000009a3 l       .debug_str	00000000 
00000b14 l       .debug_str	00000000 
00043fa0 l       .debug_str	00000000 
00006dc1 l       .debug_str	00000000 
00006df8 l       .debug_str	00000000 
0000084e l       .debug_str	00000000 
00000857 l       .debug_str	00000000 
0003eb70 l       .debug_str	00000000 
0000bbcd l       .debug_str	00000000 
00001d7e l       .debug_str	00000000 
00006e0f l       .debug_str	00000000 
00006e5d l       .debug_str	00000000 
0000a6d6 l       .debug_str	00000000 
00006e6c l       .debug_str	00000000 
00006ebf l       .debug_str	00000000 
000378fe l       .debug_str	00000000 
00006ed3 l       .debug_str	00000000 
00006f19 l       .debug_str	00000000 
0003709c l       .debug_str	00000000 
0000ba51 l       .debug_str	00000000 
00000842 l       .debug_str	00000000 
00009379 l       .debug_str	00000000 
000008fb l       .debug_str	00000000 
0000087d l       .debug_str	00000000 
00000e02 l       .debug_str	00000000 
00006f27 l       .debug_str	00000000 
00006f6e l       .debug_str	00000000 
00006f77 l       .debug_str	00000000 
00006fc0 l       .debug_str	00000000 
00004949 l       .debug_str	00000000 
00000936 l       .debug_str	00000000 
00043f35 l       .debug_str	00000000 
00043b00 l       .debug_str	00000000 
00000e18 l       .debug_str	00000000 
0003ef60 l       .debug_str	00000000 
00006fcc l       .debug_str	00000000 
00007048 l       .debug_str	00000000 
00007077 l       .debug_str	00000000 
000070e4 l       .debug_str	00000000 
000070f6 l       .debug_str	00000000 
00007158 l       .debug_str	00000000 
0003bd4f l       .debug_str	00000000 
00038c5b l       .debug_str	00000000 
00000dc7 l       .debug_str	00000000 
00004945 l       .debug_str	00000000 
00006608 l       .debug_str	00000000 
00000dda l       .debug_str	00000000 
00008805 l       .debug_str	00000000 
00000de3 l       .debug_str	00000000 
00000ded l       .debug_str	00000000 
00007160 l       .debug_str	00000000 
00000e0e l       .debug_str	00000000 
00000e13 l       .debug_str	00000000 
00000847 l       .debug_str	00000000 
00000868 l       .debug_str	00000000 
00000861 l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00013c1b l       .debug_str	00000000 
00000875 l       .debug_str	00000000 
0000087a l       .debug_str	00000000 
00000881 l       .debug_str	00000000 
0003c705 l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
00000299 l       .debug_str	00000000 
00043a1a l       .debug_str	00000000 
000026ed l       .debug_str	00000000 
0000088f l       .debug_str	00000000 
00000899 l       .debug_str	00000000 
000008a0 l       .debug_str	00000000 
0000089c l       .debug_str	00000000 
000008a6 l       .debug_str	00000000 
00041eef l       .debug_str	00000000 
00018e5f l       .debug_str	00000000 
000008ae l       .debug_str	00000000 
000008d3 l       .debug_str	00000000 
000008b9 l       .debug_str	00000000 
000008dc l       .debug_str	00000000 
00000900 l       .debug_str	00000000 
00039ca3 l       .debug_str	00000000 
0003a53b l       .debug_str	00000000 
000009a9 l       .debug_str	00000000 
08015f90 l     O .text	00000048 str.0
08015fe0 l     O .text	00000039 str.1
00000000 l    df *ABS*	00000000 hd74ookg8ttyy52
0000088f l       .debug_str	00000000 
0000250b l       .debug_str	00000000 
000018fe l       .debug_str	00000000 
00000a08 l       .debug_str	00000000 
000018f2 l       .debug_str	00000000 
00000a18 l       .debug_str	00000000 
0000a35b l       .debug_str	00000000 
00000a9d l       .debug_str	00000000 
0000073c l       .debug_str	00000000 
00000ae9 l       .debug_str	00000000 
00000038 l       .debug_str	00000000 
000084cc l       .debug_str	00000000 
00009ac3 l       .debug_str	00000000 
0000b8e7 l       .debug_str	00000000 
000007ab l       .debug_str	00000000 
000007ae l       .debug_str	00000000 
000007b2 l       .debug_str	00000000 
0002b5a7 l       .debug_str	00000000 
000142cf l       .debug_str	00000000 
00001cdb l       .debug_str	00000000 
00000791 l       .debug_str	00000000 
00000796 l       .debug_str	00000000 
0000079c l       .debug_str	00000000 
000007a3 l       .debug_str	00000000 
00041020 l       .debug_str	00000000 
0003673f l       .debug_str	00000000 
00000b14 l       .debug_str	00000000 
00007178 l       .debug_str	00000000 
000071d4 l       .debug_str	00000000 
00007231 l       .debug_str	00000000 
0000728e l       .debug_str	00000000 
00000dc7 l       .debug_str	00000000 
00009379 l       .debug_str	00000000 
0003ef1f l       .debug_str	00000000 
000026ed l       .debug_str	00000000 
0000ba51 l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
00000299 l       .debug_str	00000000 
00043a1a l       .debug_str	00000000 
00018e5f l       .debug_str	00000000 
0003709c l       .debug_str	00000000 
00000842 l       .debug_str	00000000 
0000bbcd l       .debug_str	00000000 
00043fa0 l       .debug_str	00000000 
000008fb l       .debug_str	00000000 
0000087d l       .debug_str	00000000 
00000983 l       .debug_str	00000000 
0003eb70 l       .debug_str	00000000 
00039f5c l       .debug_str	00000000 
00000813 l       .debug_str	00000000 
0000a6d6 l       .debug_str	00000000 
0000081b l       .debug_str	00000000 
00000822 l       .debug_str	00000000 
00000836 l       .debug_str	00000000 
00000991 l       .debug_str	00000000 
0000099c l       .debug_str	00000000 
000009a3 l       .debug_str	00000000 
00000853 l       .debug_str	00000000 
0003a53b l       .debug_str	00000000 
0003ef60 l       .debug_str	00000000 
0001143d l       .debug_str	00000000 
00000927 l       .debug_str	00000000 
000009aa l       .debug_str	00000000 
00000936 l       .debug_str	00000000 
0000093a l       .debug_str	00000000 
00000943 l       .debug_str	00000000 
0000094f l       .debug_str	00000000 
00000974 l       .debug_str	00000000 
00000968 l       .debug_str	00000000 
00000979 l       .debug_str	00000000 
00000a22 l       .debug_str	00000000 
00000a92 l       .debug_str	00000000 
00000a80 l       .debug_str	00000000 
00043b00 l       .debug_str	00000000 
000009a9 l       .debug_str	00000000 
000009b1 l       .debug_str	00000000 
000009c8 l       .debug_str	00000000 
000009ec l       .debug_str	00000000 
00039ca3 l       .debug_str	00000000 
0000084e l       .debug_str	00000000 
000018f8 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2bqatrntwn9uk26t
0004208c l       .debug_str	00000000 
00004153 l       .debug_str	00000000 
0000414c l       .debug_str	00000000 
00004137 l       .debug_str	00000000 
00004124 l       .debug_str	00000000 
0000410f l       .debug_str	00000000 
000040dc l       .debug_str	00000000 
0003e21c l       .debug_str	00000000 
000040ff l       .debug_str	00000000 
0003f7fd l       .debug_str	00000000 
00004c0c l       .debug_str	00000000 
000040be l       .debug_str	00000000 
0000073c l       .debug_str	00000000 
0000077d l       .debug_str	00000000 
00000038 l       .debug_str	00000000 
0003dfaf l       .debug_str	00000000 
000072eb l       .debug_str	00000000 
000072f6 l       .debug_str	00000000 
00000b00 l       .debug_str	00000000 
000381ee l       .debug_str	00000000 
0000b8e7 l       .debug_str	00000000 
00000b1d l       .debug_str	00000000 
0000087d l       .debug_str	00000000 
0000084e l       .debug_str	00000000 
00000857 l       .debug_str	00000000 
0003eb70 l       .debug_str	00000000 
0000bbcd l       .debug_str	00000000 
00006608 l       .debug_str	00000000 
00000b25 l       .debug_str	00000000 
00000b2a l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00007301 l       .debug_str	00000000 
00009ac3 l       .debug_str	00000000 
0000250b l       .debug_str	00000000 
00000ff8 l       .debug_str	00000000 
00001000 l       .debug_str	00000000 
0000100b l       .debug_str	00000000 
00001016 l       .debug_str	00000000 
00001023 l       .debug_str	00000000 
0000102e l       .debug_str	00000000 
00001036 l       .debug_str	00000000 
00001041 l       .debug_str	00000000 
0000104c l       .debug_str	00000000 
00001056 l       .debug_str	00000000 
00001061 l       .debug_str	00000000 
0000106c l       .debug_str	00000000 
00001079 l       .debug_str	00000000 
00001085 l       .debug_str	00000000 
00001092 l       .debug_str	00000000 
000010a0 l       .debug_str	00000000 
000010aa l       .debug_str	00000000 
0000fafe l       .debug_str	00000000 
000084cc l       .debug_str	00000000 
00000fde l       .debug_str	00000000 
00000fe2 l       .debug_str	00000000 
00000fed l       .debug_str	00000000 
0000119a l       .debug_str	00000000 
00007335 l       .debug_str	00000000 
00007371 l       .debug_str	00000000 
0000ba51 l       .debug_str	00000000 
000007ab l       .debug_str	00000000 
0001143d l       .debug_str	00000000 
00043fa0 l       .debug_str	00000000 
0002c0e1 l       .debug_str	00000000 
000007ae l       .debug_str	00000000 
0000f6b7 l       .debug_str	00000000 
00007384 l       .debug_str	00000000 
000073bc l       .debug_str	00000000 
0003a293 l       .debug_str	00000000 
00000050 l       .debug_str	00000000 
0003c69a l       .debug_str	00000000 
000023dd l       .debug_str	00000000 
00002732 l       .debug_str	00000000 
000023e6 l       .debug_str	00000000 
0003e594 l       .debug_str	00000000 
000023ed l       .debug_str	00000000 
000023f9 l       .debug_str	00000000 
0003709c l       .debug_str	00000000 
00000842 l       .debug_str	00000000 
0000118a l       .debug_str	00000000 
00002401 l       .debug_str	00000000 
000008fb l       .debug_str	00000000 
0000245b l       .debug_str	00000000 
000024bd l       .debug_str	00000000 
000024c8 l       .debug_str	00000000 
0000250f l       .debug_str	00000000 
0000255e l       .debug_str	00000000 
00002568 l       .debug_str	00000000 
000025a5 l       .debug_str	00000000 
000025ea l       .debug_str	00000000 
000025f3 l       .debug_str	00000000 
00002603 l       .debug_str	00000000 
0000260b l       .debug_str	00000000 
00002660 l       .debug_str	00000000 
000026bd l       .debug_str	00000000 
000026c9 l       .debug_str	00000000 
000026d2 l       .debug_str	00000000 
000026de l       .debug_str	00000000 
000026ea l       .debug_str	00000000 
000026f3 l       .debug_str	00000000 
000026fb l       .debug_str	00000000 
00000581 l       .debug_str	00000000 
00002703 l       .debug_str	00000000 
00002731 l       .debug_str	00000000 
00002718 l       .debug_str	00000000 
00002738 l       .debug_str	00000000 
0000273f l       .debug_str	00000000 
00002747 l       .debug_str	00000000 
00000708 l       .debug_str	00000000 
00002751 l       .debug_str	00000000 
000004ad l       .debug_str	00000000 
000006ee l       .debug_str	00000000 
0000b99b l       .debug_str	00000000 
0000066b l       .debug_str	00000000 
00000643 l       .debug_str	00000000 
000006cf l       .debug_str	00000000 
00037204 l       .debug_str	00000000 
00000609 l       .debug_str	00000000 
000004df l       .debug_str	00000000 
0003e04e l       .debug_str	00000000 
000364f6 l       .debug_str	00000000 
0000275a l       .debug_str	00000000 
00002787 l       .debug_str	00000000 
000026c3 l       .debug_str	00000000 
00038516 l       .debug_str	00000000 
00000521 l       .debug_str	00000000 
00000690 l       .debug_str	00000000 
000005f2 l       .debug_str	00000000 
000004f0 l       .debug_str	00000000 
000027bc l       .debug_str	00000000 
000027e5 l       .debug_str	00000000 
00002843 l       .debug_str	00000000 
000005d2 l       .debug_str	00000000 
000006d7 l       .debug_str	00000000 
000006af l       .debug_str	00000000 
000028a9 l       .debug_str	00000000 
000027d5 l       .debug_str	00000000 
000006fa l       .debug_str	00000000 
000004a2 l       .debug_str	00000000 
00000674 l       .debug_str	00000000 
000006df l       .debug_str	00000000 
000028c7 l       .debug_str	00000000 
0000065b l       .debug_str	00000000 
00000582 l       .debug_str	00000000 
00000509 l       .debug_str	00000000 
000028dd l       .debug_str	00000000 
00002903 l       .debug_str	00000000 
000004b8 l       .debug_str	00000000 
00002919 l       .debug_str	00000000 
0000645f l       .debug_str	00000000 
000028e2 l       .debug_str	00000000 
0000292f l       .debug_str	00000000 
0002ce96 l       .debug_str	00000000 
00002946 l       .debug_str	00000000 
0000294e l       .debug_str	00000000 
00002957 l       .debug_str	00000000 
00003d55 l       .debug_str	00000000 
00002960 l       .debug_str	00000000 
0000a35b l       .debug_str	00000000 
0003cfba l       .debug_str	00000000 
00002968 l       .debug_str	00000000 
00002974 l       .debug_str	00000000 
0000297f l       .debug_str	00000000 
00002987 l       .debug_str	00000000 
00004370 l       .debug_str	00000000 
000042eb l       .debug_str	00000000 
0000298f l       .debug_str	00000000 
00002a8b l       .debug_str	00000000 
00002b8f l       .debug_str	00000000 
00002b9d l       .debug_str	00000000 
00002ba8 l       .debug_str	00000000 
00000822 l       .debug_str	00000000 
00002bd5 l       .debug_str	00000000 
00002bb2 l       .debug_str	00000000 
00002be0 l       .debug_str	00000000 
00002c5b l       .debug_str	00000000 
00002cde l       .debug_str	00000000 
00002cec l       .debug_str	00000000 
00002d4b l       .debug_str	00000000 
00002db2 l       .debug_str	00000000 
00002dc8 l       .debug_str	00000000 
00002dd8 l       .debug_str	00000000 
0003a863 l       .debug_str	00000000 
000009aa l       .debug_str	00000000 
00002de7 l       .debug_str	00000000 
000114f6 l       .debug_str	00000000 
00002ded l       .debug_str	00000000 
00002df3 l       .debug_str	00000000 
00002df9 l       .debug_str	00000000 
00002e05 l       .debug_str	00000000 
00043a1a l       .debug_str	00000000 
00002e0d l       .debug_str	00000000 
000040b6 l       .debug_str	00000000 
00002e15 l       .debug_str	00000000 
00002e5b l       .debug_str	00000000 
00002e38 l       .debug_str	00000000 
00002e6b l       .debug_str	00000000 
00002eab l       .debug_str	00000000 
0003a333 l       .debug_str	00000000 
00002ef3 l       .debug_str	00000000 
00002ef9 l       .debug_str	00000000 
00002eff l       .debug_str	00000000 
00002f28 l       .debug_str	00000000 
00002f05 l       .debug_str	00000000 
00002f3a l       .debug_str	00000000 
00002f7c l       .debug_str	00000000 
0003a1e5 l       .debug_str	00000000 
00002fc6 l       .debug_str	00000000 
00002fcc l       .debug_str	00000000 
00002fd2 l       .debug_str	00000000 
00002ffb l       .debug_str	00000000 
00002fd8 l       .debug_str	00000000 
0000300d l       .debug_str	00000000 
0000304f l       .debug_str	00000000 
00039457 l       .debug_str	00000000 
00003099 l       .debug_str	00000000 
0000309f l       .debug_str	00000000 
000030a5 l       .debug_str	00000000 
000030ab l       .debug_str	00000000 
000030d4 l       .debug_str	00000000 
000030b1 l       .debug_str	00000000 
000030e5 l       .debug_str	00000000 
00003126 l       .debug_str	00000000 
0000316f l       .debug_str	00000000 
00003174 l       .debug_str	00000000 
0003a5e3 l       .debug_str	00000000 
00003179 l       .debug_str	00000000 
0000317f l       .debug_str	00000000 
00003185 l       .debug_str	00000000 
000031ae l       .debug_str	00000000 
0000318b l       .debug_str	00000000 
000031bf l       .debug_str	00000000 
00003200 l       .debug_str	00000000 
0003952b l       .debug_str	00000000 
00003249 l       .debug_str	00000000 
00003275 l       .debug_str	00000000 
00003252 l       .debug_str	00000000 
00003286 l       .debug_str	00000000 
000032c7 l       .debug_str	00000000 
00003310 l       .debug_str	00000000 
0003a806 l       .debug_str	00000000 
00003315 l       .debug_str	00000000 
0000331e l       .debug_str	00000000 
00003325 l       .debug_str	00000000 
00003350 l       .debug_str	00000000 
0000332d l       .debug_str	00000000 
00003362 l       .debug_str	00000000 
000033a4 l       .debug_str	00000000 
0003a46b l       .debug_str	00000000 
000033ee l       .debug_str	00000000 
000033f4 l       .debug_str	00000000 
000033fa l       .debug_str	00000000 
00003400 l       .debug_str	00000000 
00003406 l       .debug_str	00000000 
0000340e l       .debug_str	00000000 
0000341c l       .debug_str	00000000 
0000342b l       .debug_str	00000000 
0000343c l       .debug_str	00000000 
00003447 l       .debug_str	00000000 
00003452 l       .debug_str	00000000 
0000345d l       .debug_str	00000000 
00003464 l       .debug_str	00000000 
000034aa l       .debug_str	00000000 
00003487 l       .debug_str	00000000 
000034bc l       .debug_str	00000000 
000034fe l       .debug_str	00000000 
0003965a l       .debug_str	00000000 
00003548 l       .debug_str	00000000 
00003575 l       .debug_str	00000000 
00003552 l       .debug_str	00000000 
00003587 l       .debug_str	00000000 
000035c9 l       .debug_str	00000000 
00003613 l       .debug_str	00000000 
00003618 l       .debug_str	00000000 
00003645 l       .debug_str	00000000 
00003622 l       .debug_str	00000000 
00003657 l       .debug_str	00000000 
00003699 l       .debug_str	00000000 
000036e3 l       .debug_str	00000000 
0000bb07 l       .debug_str	00000000 
0003db77 l       .debug_str	00000000 
000036f7 l       .debug_str	00000000 
00003707 l       .debug_str	00000000 
00003710 l       .debug_str	00000000 
0000371b l       .debug_str	00000000 
0000372a l       .debug_str	00000000 
0000373f l       .debug_str	00000000 
00003770 l       .debug_str	00000000 
0000380d l       .debug_str	00000000 
000038b2 l       .debug_str	00000000 
000038bd l       .debug_str	00000000 
000038c6 l       .debug_str	00000000 
0000390a l       .debug_str	00000000 
000038e7 l       .debug_str	00000000 
0000391d l       .debug_str	00000000 
000039a0 l       .debug_str	00000000 
00003a2b l       .debug_str	00000000 
00003a47 l       .debug_str	00000000 
00003a93 l       .debug_str	00000000 
00003ae7 l       .debug_str	00000000 
00003b04 l       .debug_str	00000000 
00003b18 l       .debug_str	00000000 
00003b64 l       .debug_str	00000000 
00003bb8 l       .debug_str	00000000 
00003bce l       .debug_str	00000000 
00003be2 l       .debug_str	00000000 
00003c29 l       .debug_str	00000000 
00003c78 l       .debug_str	00000000 
00003ca4 l       .debug_str	00000000 
00003c81 l       .debug_str	00000000 
00003cb2 l       .debug_str	00000000 
00003cb8 l       .debug_str	00000000 
00003cc0 l       .debug_str	00000000 
00003cc7 l       .debug_str	00000000 
000049ef l       .debug_str	00000000 
00003ccf l       .debug_str	00000000 
00003cd7 l       .debug_str	00000000 
000108b5 l       .debug_str	00000000 
00003ce6 l       .debug_str	00000000 
00004a21 l       .debug_str	00000000 
00003cf1 l       .debug_str	00000000 
00003cfc l       .debug_str	00000000 
00003d0d l       .debug_str	00000000 
00003d13 l       .debug_str	00000000 
00003d1b l       .debug_str	00000000 
00003d22 l       .debug_str	00000000 
00003d2c l       .debug_str	00000000 
00003d34 l       .debug_str	00000000 
00003d3c l       .debug_str	00000000 
00003d5e l       .debug_str	00000000 
00003d69 l       .debug_str	00000000 
00003d75 l       .debug_str	00000000 
00003d7d l       .debug_str	00000000 
00003d86 l       .debug_str	00000000 
000005cb l       .debug_str	00000000 
00003d91 l       .debug_str	00000000 
00003d9c l       .debug_str	00000000 
00003da7 l       .debug_str	00000000 
00003db7 l       .debug_str	00000000 
000395bd l       .debug_str	00000000 
00004e10 l       .debug_str	00000000 
00003dc1 l       .debug_str	00000000 
00003df9 l       .debug_str	00000000 
00003e39 l       .debug_str	00000000 
00003e40 l       .debug_str	00000000 
00003e48 l       .debug_str	00000000 
00004e29 l       .debug_str	00000000 
00003e5f l       .debug_str	00000000 
00003e6f l       .debug_str	00000000 
00003e7e l       .debug_str	00000000 
00003e86 l       .debug_str	00000000 
00003e8d l       .debug_str	00000000 
0000f362 l       .debug_str	00000000 
00003eb8 l       .debug_str	00000000 
00003e95 l       .debug_str	00000000 
00003ec8 l       .debug_str	00000000 
00003edd l       .debug_str	00000000 
00003ee6 l       .debug_str	00000000 
00003f43 l       .debug_str	00000000 
00003fa8 l       .debug_str	00000000 
00003fb2 l       .debug_str	00000000 
00003fc2 l       .debug_str	00000000 
00003fd7 l       .debug_str	00000000 
00003fdf l       .debug_str	00000000 
00004043 l       .debug_str	00000000 
000040af l       .debug_str	00000000 
00004168 l       .debug_str	00000000 
08016184 l     O .text	0000000c _ZN3app10gps_sensor10GPS_DEVICE17h5c1dc9ec84221b48E
08005f74 l     F .text	00000034 _ZN3app10gps_sensor14start_gps_l70r17hde73a7ac96a090b3E
00000000 l    df *ABS*	00000000 2irj8h114k888726
00002e38 l       .debug_str	00000000 
000077b1 l       .debug_str	00000000 
0003e41a l       .debug_str	00000000 
00001337 l       .debug_str	00000000 
00000dc7 l       .debug_str	00000000 
00007783 l       .debug_str	00000000 
00042875 l       .debug_str	00000000 
00007713 l       .debug_str	00000000 
0000087b l       .debug_str	00000000 
0000a452 l       .debug_str	00000000 
00000868 l       .debug_str	00000000 
00001447 l       .debug_str	00000000 
00000fda l       .debug_str	00000000 
000076dd l       .debug_str	00000000 
0000073c l       .debug_str	00000000 
0000077d l       .debug_str	00000000 
00000038 l       .debug_str	00000000 
000084cc l       .debug_str	00000000 
00000fde l       .debug_str	00000000 
0000b8e7 l       .debug_str	00000000 
00000fe2 l       .debug_str	00000000 
00000fed l       .debug_str	00000000 
0000119a l       .debug_str	00000000 
00000b00 l       .debug_str	00000000 
00009ac3 l       .debug_str	00000000 
0000250b l       .debug_str	00000000 
00000ff8 l       .debug_str	00000000 
00001000 l       .debug_str	00000000 
0000100b l       .debug_str	00000000 
00001016 l       .debug_str	00000000 
00001023 l       .debug_str	00000000 
0000102e l       .debug_str	00000000 
00001036 l       .debug_str	00000000 
00001041 l       .debug_str	00000000 
0000104c l       .debug_str	00000000 
00001056 l       .debug_str	00000000 
00001061 l       .debug_str	00000000 
0000106c l       .debug_str	00000000 
00001079 l       .debug_str	00000000 
00001085 l       .debug_str	00000000 
00001092 l       .debug_str	00000000 
000010a0 l       .debug_str	00000000 
000010aa l       .debug_str	00000000 
0000fafe l       .debug_str	00000000 
0000ba51 l       .debug_str	00000000 
000007ab l       .debug_str	00000000 
0000087d l       .debug_str	00000000 
000023e6 l       .debug_str	00000000 
0003e594 l       .debug_str	00000000 
00004eb4 l       .debug_str	00000000 
00000708 l       .debug_str	00000000 
00002751 l       .debug_str	00000000 
000004ad l       .debug_str	00000000 
000006ee l       .debug_str	00000000 
0000b99b l       .debug_str	00000000 
0000066b l       .debug_str	00000000 
00000643 l       .debug_str	00000000 
000006cf l       .debug_str	00000000 
00037204 l       .debug_str	00000000 
00000609 l       .debug_str	00000000 
000004df l       .debug_str	00000000 
0003e04e l       .debug_str	00000000 
00000857 l       .debug_str	00000000 
000364f6 l       .debug_str	00000000 
0003709c l       .debug_str	00000000 
00000842 l       .debug_str	00000000 
0000118a l       .debug_str	00000000 
0000275a l       .debug_str	00000000 
00043fa0 l       .debug_str	00000000 
000008fb l       .debug_str	00000000 
00002787 l       .debug_str	00000000 
000026c3 l       .debug_str	00000000 
00038516 l       .debug_str	00000000 
00000521 l       .debug_str	00000000 
00000690 l       .debug_str	00000000 
000005f2 l       .debug_str	00000000 
000004f0 l       .debug_str	00000000 
000027bc l       .debug_str	00000000 
000027e5 l       .debug_str	00000000 
00002843 l       .debug_str	00000000 
000005d2 l       .debug_str	00000000 
000006d7 l       .debug_str	00000000 
000006af l       .debug_str	00000000 
000028a9 l       .debug_str	00000000 
000027d5 l       .debug_str	00000000 
000006fa l       .debug_str	00000000 
000004a2 l       .debug_str	00000000 
00000674 l       .debug_str	00000000 
000006df l       .debug_str	00000000 
00000581 l       .debug_str	00000000 
000028c7 l       .debug_str	00000000 
0000065b l       .debug_str	00000000 
00000582 l       .debug_str	00000000 
00000509 l       .debug_str	00000000 
000028dd l       .debug_str	00000000 
00002903 l       .debug_str	00000000 
000004b8 l       .debug_str	00000000 
00002919 l       .debug_str	00000000 
0000645f l       .debug_str	00000000 
000028e2 l       .debug_str	00000000 
00004ebe l       .debug_str	00000000 
00004ec7 l       .debug_str	00000000 
000004c3 l       .debug_str	00000000 
00003db7 l       .debug_str	00000000 
000395bd l       .debug_str	00000000 
00003dc1 l       .debug_str	00000000 
00003df9 l       .debug_str	00000000 
00003e39 l       .debug_str	00000000 
00003e40 l       .debug_str	00000000 
00003e48 l       .debug_str	00000000 
00004e29 l       .debug_str	00000000 
00004e10 l       .debug_str	00000000 
00000713 l       .debug_str	00000000 
00004e0b l       .debug_str	00000000 
00004e32 l       .debug_str	00000000 
00004f67 l       .debug_str	00000000 
00004f4e l       .debug_str	00000000 
0002c0e1 l       .debug_str	00000000 
000007ae l       .debug_str	00000000 
000063cb l       .debug_str	00000000 
0001143d l       .debug_str	00000000 
0000f6b7 l       .debug_str	00000000 
00000b14 l       .debug_str	00000000 
000073cb l       .debug_str	00000000 
0000740b l       .debug_str	00000000 
00007452 l       .debug_str	00000000 
00007492 l       .debug_str	00000000 
000074b9 l       .debug_str	00000000 
00007528 l       .debug_str	00000000 
0003c69a l       .debug_str	00000000 
00000050 l       .debug_str	00000000 
000023dd l       .debug_str	00000000 
00003e6f l       .debug_str	00000000 
0000a35b l       .debug_str	00000000 
00003e7e l       .debug_str	00000000 
00002732 l       .debug_str	00000000 
000023ed l       .debug_str	00000000 
000023f9 l       .debug_str	00000000 
00002401 l       .debug_str	00000000 
0000245b l       .debug_str	00000000 
000024bd l       .debug_str	00000000 
000024c8 l       .debug_str	00000000 
0000250f l       .debug_str	00000000 
0000255e l       .debug_str	00000000 
00002568 l       .debug_str	00000000 
000025a5 l       .debug_str	00000000 
000025ea l       .debug_str	00000000 
000025f3 l       .debug_str	00000000 
00002603 l       .debug_str	00000000 
0000260b l       .debug_str	00000000 
00002660 l       .debug_str	00000000 
000026bd l       .debug_str	00000000 
000026c9 l       .debug_str	00000000 
000026d2 l       .debug_str	00000000 
000026de l       .debug_str	00000000 
000026ea l       .debug_str	00000000 
000026f3 l       .debug_str	00000000 
000026fb l       .debug_str	00000000 
00002703 l       .debug_str	00000000 
00002731 l       .debug_str	00000000 
00002718 l       .debug_str	00000000 
00002738 l       .debug_str	00000000 
0000273f l       .debug_str	00000000 
00002747 l       .debug_str	00000000 
0000292f l       .debug_str	00000000 
0002ce96 l       .debug_str	00000000 
00002946 l       .debug_str	00000000 
0000294e l       .debug_str	00000000 
00002957 l       .debug_str	00000000 
00003d55 l       .debug_str	00000000 
00002960 l       .debug_str	00000000 
0003cfba l       .debug_str	00000000 
00002968 l       .debug_str	00000000 
00002974 l       .debug_str	00000000 
0000297f l       .debug_str	00000000 
00002987 l       .debug_str	00000000 
0000298f l       .debug_str	00000000 
00002a8b l       .debug_str	00000000 
00002b8f l       .debug_str	00000000 
00002b9d l       .debug_str	00000000 
00002ba8 l       .debug_str	00000000 
00000822 l       .debug_str	00000000 
00002bd5 l       .debug_str	00000000 
00002bb2 l       .debug_str	00000000 
00002be0 l       .debug_str	00000000 
00002c5b l       .debug_str	00000000 
00002cde l       .debug_str	00000000 
00002cec l       .debug_str	00000000 
00002d4b l       .debug_str	00000000 
00002db2 l       .debug_str	00000000 
00002dc8 l       .debug_str	00000000 
00002dd8 l       .debug_str	00000000 
0003a863 l       .debug_str	00000000 
000009aa l       .debug_str	00000000 
00002de7 l       .debug_str	00000000 
000114f6 l       .debug_str	00000000 
00002ded l       .debug_str	00000000 
00002df3 l       .debug_str	00000000 
00002df9 l       .debug_str	00000000 
00002e05 l       .debug_str	00000000 
00043a1a l       .debug_str	00000000 
00002e0d l       .debug_str	00000000 
0004208c l       .debug_str	00000000 
00002e15 l       .debug_str	00000000 
00002e5b l       .debug_str	00000000 
0000766d l       .debug_str	00000000 
00002e6b l       .debug_str	00000000 
00002eab l       .debug_str	00000000 
0003a333 l       .debug_str	00000000 
00002ef3 l       .debug_str	00000000 
00002ef9 l       .debug_str	00000000 
00002eff l       .debug_str	00000000 
00002f28 l       .debug_str	00000000 
00002f05 l       .debug_str	00000000 
00002f3a l       .debug_str	00000000 
00002f7c l       .debug_str	00000000 
0003a1e5 l       .debug_str	00000000 
00002fc6 l       .debug_str	00000000 
00002fcc l       .debug_str	00000000 
00002fd2 l       .debug_str	00000000 
00002ffb l       .debug_str	00000000 
00002fd8 l       .debug_str	00000000 
0000300d l       .debug_str	00000000 
0000304f l       .debug_str	00000000 
00039457 l       .debug_str	00000000 
00003099 l       .debug_str	00000000 
0000309f l       .debug_str	00000000 
000030a5 l       .debug_str	00000000 
000030ab l       .debug_str	00000000 
000030d4 l       .debug_str	00000000 
000030b1 l       .debug_str	00000000 
000030e5 l       .debug_str	00000000 
00003126 l       .debug_str	00000000 
0000316f l       .debug_str	00000000 
00003174 l       .debug_str	00000000 
0003a5e3 l       .debug_str	00000000 
00003179 l       .debug_str	00000000 
0000317f l       .debug_str	00000000 
00003185 l       .debug_str	00000000 
000031ae l       .debug_str	00000000 
0000318b l       .debug_str	00000000 
000031bf l       .debug_str	00000000 
00003200 l       .debug_str	00000000 
0003952b l       .debug_str	00000000 
00003249 l       .debug_str	00000000 
00003275 l       .debug_str	00000000 
00003252 l       .debug_str	00000000 
00003286 l       .debug_str	00000000 
000032c7 l       .debug_str	00000000 
00003310 l       .debug_str	00000000 
0003a806 l       .debug_str	00000000 
00003315 l       .debug_str	00000000 
0000331e l       .debug_str	00000000 
00003325 l       .debug_str	00000000 
00003350 l       .debug_str	00000000 
0000332d l       .debug_str	00000000 
00003362 l       .debug_str	00000000 
000033a4 l       .debug_str	00000000 
0003a46b l       .debug_str	00000000 
000033ee l       .debug_str	00000000 
000033f4 l       .debug_str	00000000 
000033fa l       .debug_str	00000000 
00003400 l       .debug_str	00000000 
00003406 l       .debug_str	00000000 
0000340e l       .debug_str	00000000 
0000341c l       .debug_str	00000000 
0000342b l       .debug_str	00000000 
0000343c l       .debug_str	00000000 
00003447 l       .debug_str	00000000 
00003452 l       .debug_str	00000000 
0000345d l       .debug_str	00000000 
00003464 l       .debug_str	00000000 
000034aa l       .debug_str	00000000 
00003487 l       .debug_str	00000000 
000034bc l       .debug_str	00000000 
000034fe l       .debug_str	00000000 
0003965a l       .debug_str	00000000 
00003548 l       .debug_str	00000000 
00003575 l       .debug_str	00000000 
00003552 l       .debug_str	00000000 
00003587 l       .debug_str	00000000 
000035c9 l       .debug_str	00000000 
00003613 l       .debug_str	00000000 
00003618 l       .debug_str	00000000 
00003645 l       .debug_str	00000000 
00003622 l       .debug_str	00000000 
00003657 l       .debug_str	00000000 
00003699 l       .debug_str	00000000 
000036e3 l       .debug_str	00000000 
0000bb07 l       .debug_str	00000000 
0003db77 l       .debug_str	00000000 
000036f7 l       .debug_str	00000000 
00003707 l       .debug_str	00000000 
00003710 l       .debug_str	00000000 
0000371b l       .debug_str	00000000 
0000372a l       .debug_str	00000000 
0000373f l       .debug_str	00000000 
00003770 l       .debug_str	00000000 
0000380d l       .debug_str	00000000 
000038b2 l       .debug_str	00000000 
000038bd l       .debug_str	00000000 
000038c6 l       .debug_str	00000000 
0000390a l       .debug_str	00000000 
000038e7 l       .debug_str	00000000 
0000391d l       .debug_str	00000000 
000039a0 l       .debug_str	00000000 
00003a2b l       .debug_str	00000000 
00003a47 l       .debug_str	00000000 
00003a93 l       .debug_str	00000000 
00003ae7 l       .debug_str	00000000 
00003b04 l       .debug_str	00000000 
00003b18 l       .debug_str	00000000 
00003b64 l       .debug_str	00000000 
00003bb8 l       .debug_str	00000000 
00003bce l       .debug_str	00000000 
00003be2 l       .debug_str	00000000 
00003c29 l       .debug_str	00000000 
00003c78 l       .debug_str	00000000 
00003ca4 l       .debug_str	00000000 
00003c81 l       .debug_str	00000000 
00003cb2 l       .debug_str	00000000 
00003cb8 l       .debug_str	00000000 
00003cc0 l       .debug_str	00000000 
00003cc7 l       .debug_str	00000000 
000049ef l       .debug_str	00000000 
00003ccf l       .debug_str	00000000 
00003cd7 l       .debug_str	00000000 
000108b5 l       .debug_str	00000000 
00003ce6 l       .debug_str	00000000 
00004a21 l       .debug_str	00000000 
00003cf1 l       .debug_str	00000000 
00003cfc l       .debug_str	00000000 
00003d0d l       .debug_str	00000000 
00003d13 l       .debug_str	00000000 
00003d1b l       .debug_str	00000000 
00003d22 l       .debug_str	00000000 
00003d2c l       .debug_str	00000000 
00003d34 l       .debug_str	00000000 
00003d3c l       .debug_str	00000000 
00003d5e l       .debug_str	00000000 
00003d69 l       .debug_str	00000000 
00003d75 l       .debug_str	00000000 
00003d7d l       .debug_str	00000000 
00003d86 l       .debug_str	00000000 
000005cb l       .debug_str	00000000 
00003d91 l       .debug_str	00000000 
00003d9c l       .debug_str	00000000 
00003da7 l       .debug_str	00000000 
00003e5f l       .debug_str	00000000 
00003e95 l       .debug_str	00000000 
00003ec8 l       .debug_str	00000000 
00003edd l       .debug_str	00000000 
00003ee6 l       .debug_str	00000000 
00003f43 l       .debug_str	00000000 
00003fa8 l       .debug_str	00000000 
00003fb2 l       .debug_str	00000000 
00003fc2 l       .debug_str	00000000 
00003fd7 l       .debug_str	00000000 
00003fdf l       .debug_str	00000000 
00004043 l       .debug_str	00000000 
000040af l       .debug_str	00000000 
000040b6 l       .debug_str	00000000 
000040be l       .debug_str	00000000 
000040ff l       .debug_str	00000000 
000040dc l       .debug_str	00000000 
0000410f l       .debug_str	00000000 
00004124 l       .debug_str	00000000 
00004137 l       .debug_str	00000000 
0000414c l       .debug_str	00000000 
00004153 l       .debug_str	00000000 
00004168 l       .debug_str	00000000 
00004370 l       .debug_str	00000000 
000042eb l       .debug_str	00000000 
00003e86 l       .debug_str	00000000 
00003e8d l       .debug_str	00000000 
0000f362 l       .debug_str	00000000 
00003eb8 l       .debug_str	00000000 
00007553 l       .debug_str	00000000 
000075c3 l       .debug_str	00000000 
0000761a l       .debug_str	00000000 
000381ee l       .debug_str	00000000 
00000b1d l       .debug_str	00000000 
0000084e l       .debug_str	00000000 
0003eb70 l       .debug_str	00000000 
0000bbcd l       .debug_str	00000000 
00006608 l       .debug_str	00000000 
00000b25 l       .debug_str	00000000 
00000b2a l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00007821 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3t0neq0rfdfezmuj
00002e38 l       .debug_str	00000000 
00004153 l       .debug_str	00000000 
0000414c l       .debug_str	00000000 
00004137 l       .debug_str	00000000 
00004124 l       .debug_str	00000000 
0000410f l       .debug_str	00000000 
0003f7fd l       .debug_str	00000000 
00004c0c l       .debug_str	00000000 
0003a293 l       .debug_str	00000000 
0000073c l       .debug_str	00000000 
0000077d l       .debug_str	00000000 
00000038 l       .debug_str	00000000 
0003dfaf l       .debug_str	00000000 
0000784d l       .debug_str	00000000 
00007858 l       .debug_str	00000000 
00000b00 l       .debug_str	00000000 
000381ee l       .debug_str	00000000 
0000b8e7 l       .debug_str	00000000 
00000b1d l       .debug_str	00000000 
0000087d l       .debug_str	00000000 
0000084e l       .debug_str	00000000 
00000857 l       .debug_str	00000000 
0003eb70 l       .debug_str	00000000 
0000bbcd l       .debug_str	00000000 
00006608 l       .debug_str	00000000 
00000b25 l       .debug_str	00000000 
00000b2a l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00007866 l       .debug_str	00000000 
00009ac3 l       .debug_str	00000000 
0000250b l       .debug_str	00000000 
00000ff8 l       .debug_str	00000000 
00001000 l       .debug_str	00000000 
0000100b l       .debug_str	00000000 
00001016 l       .debug_str	00000000 
00001023 l       .debug_str	00000000 
0000102e l       .debug_str	00000000 
00001036 l       .debug_str	00000000 
00001041 l       .debug_str	00000000 
0000104c l       .debug_str	00000000 
00001056 l       .debug_str	00000000 
00001061 l       .debug_str	00000000 
0000106c l       .debug_str	00000000 
00001079 l       .debug_str	00000000 
00001085 l       .debug_str	00000000 
00001092 l       .debug_str	00000000 
000010a0 l       .debug_str	00000000 
000010aa l       .debug_str	00000000 
0000fafe l       .debug_str	00000000 
000084cc l       .debug_str	00000000 
00000fde l       .debug_str	00000000 
00000fe2 l       .debug_str	00000000 
00000fed l       .debug_str	00000000 
0000119a l       .debug_str	00000000 
0000789d l       .debug_str	00000000 
000078dc l       .debug_str	00000000 
0000ba51 l       .debug_str	00000000 
000007ab l       .debug_str	00000000 
0001143d l       .debug_str	00000000 
00043fa0 l       .debug_str	00000000 
0002c0e1 l       .debug_str	00000000 
000007ae l       .debug_str	00000000 
0000f6b7 l       .debug_str	00000000 
00000050 l       .debug_str	00000000 
0003c69a l       .debug_str	00000000 
000023dd l       .debug_str	00000000 
00002732 l       .debug_str	00000000 
000023e6 l       .debug_str	00000000 
0003e594 l       .debug_str	00000000 
000023ed l       .debug_str	00000000 
000023f9 l       .debug_str	00000000 
0003709c l       .debug_str	00000000 
00000842 l       .debug_str	00000000 
0000118a l       .debug_str	00000000 
00002401 l       .debug_str	00000000 
000008fb l       .debug_str	00000000 
0000245b l       .debug_str	00000000 
000024bd l       .debug_str	00000000 
000024c8 l       .debug_str	00000000 
0000250f l       .debug_str	00000000 
0000255e l       .debug_str	00000000 
00002568 l       .debug_str	00000000 
000025a5 l       .debug_str	00000000 
000025ea l       .debug_str	00000000 
000025f3 l       .debug_str	00000000 
00002603 l       .debug_str	00000000 
0000260b l       .debug_str	00000000 
00002660 l       .debug_str	00000000 
000026bd l       .debug_str	00000000 
000026c9 l       .debug_str	00000000 
000026d2 l       .debug_str	00000000 
000026de l       .debug_str	00000000 
000026ea l       .debug_str	00000000 
000026f3 l       .debug_str	00000000 
000026fb l       .debug_str	00000000 
00000581 l       .debug_str	00000000 
00002703 l       .debug_str	00000000 
00002731 l       .debug_str	00000000 
00002718 l       .debug_str	00000000 
00002738 l       .debug_str	00000000 
0000273f l       .debug_str	00000000 
00002747 l       .debug_str	00000000 
00000708 l       .debug_str	00000000 
00002751 l       .debug_str	00000000 
000004ad l       .debug_str	00000000 
000006ee l       .debug_str	00000000 
0000b99b l       .debug_str	00000000 
0000066b l       .debug_str	00000000 
00000643 l       .debug_str	00000000 
000006cf l       .debug_str	00000000 
00037204 l       .debug_str	00000000 
00000609 l       .debug_str	00000000 
000004df l       .debug_str	00000000 
0003e04e l       .debug_str	00000000 
000364f6 l       .debug_str	00000000 
0000275a l       .debug_str	00000000 
00002787 l       .debug_str	00000000 
000026c3 l       .debug_str	00000000 
00038516 l       .debug_str	00000000 
00000521 l       .debug_str	00000000 
00000690 l       .debug_str	00000000 
000005f2 l       .debug_str	00000000 
000004f0 l       .debug_str	00000000 
000027bc l       .debug_str	00000000 
000027e5 l       .debug_str	00000000 
00002843 l       .debug_str	00000000 
000005d2 l       .debug_str	00000000 
000006d7 l       .debug_str	00000000 
000006af l       .debug_str	00000000 
000028a9 l       .debug_str	00000000 
000027d5 l       .debug_str	00000000 
000006fa l       .debug_str	00000000 
000004a2 l       .debug_str	00000000 
00000674 l       .debug_str	00000000 
000006df l       .debug_str	00000000 
000028c7 l       .debug_str	00000000 
0000065b l       .debug_str	00000000 
00000582 l       .debug_str	00000000 
00000509 l       .debug_str	00000000 
000028dd l       .debug_str	00000000 
00002903 l       .debug_str	00000000 
000004b8 l       .debug_str	00000000 
00002919 l       .debug_str	00000000 
0000645f l       .debug_str	00000000 
000028e2 l       .debug_str	00000000 
0000292f l       .debug_str	00000000 
0002ce96 l       .debug_str	00000000 
00002946 l       .debug_str	00000000 
0000294e l       .debug_str	00000000 
00002957 l       .debug_str	00000000 
00003d55 l       .debug_str	00000000 
00002960 l       .debug_str	00000000 
0000a35b l       .debug_str	00000000 
0003cfba l       .debug_str	00000000 
00002968 l       .debug_str	00000000 
00002974 l       .debug_str	00000000 
0000297f l       .debug_str	00000000 
00002987 l       .debug_str	00000000 
00004370 l       .debug_str	00000000 
000042eb l       .debug_str	00000000 
0000298f l       .debug_str	00000000 
00002a8b l       .debug_str	00000000 
00002b8f l       .debug_str	00000000 
00002b9d l       .debug_str	00000000 
00002ba8 l       .debug_str	00000000 
00000822 l       .debug_str	00000000 
00002bd5 l       .debug_str	00000000 
00002bb2 l       .debug_str	00000000 
00002be0 l       .debug_str	00000000 
00002c5b l       .debug_str	00000000 
00002cde l       .debug_str	00000000 
00002cec l       .debug_str	00000000 
00002d4b l       .debug_str	00000000 
00002db2 l       .debug_str	00000000 
00002dc8 l       .debug_str	00000000 
00002dd8 l       .debug_str	00000000 
0003a863 l       .debug_str	00000000 
000009aa l       .debug_str	00000000 
00002de7 l       .debug_str	00000000 
000114f6 l       .debug_str	00000000 
00002ded l       .debug_str	00000000 
00002df3 l       .debug_str	00000000 
00002df9 l       .debug_str	00000000 
00002e05 l       .debug_str	00000000 
00043a1a l       .debug_str	00000000 
00002e0d l       .debug_str	00000000 
0004208c l       .debug_str	00000000 
00002e15 l       .debug_str	00000000 
00002e5b l       .debug_str	00000000 
000040dc l       .debug_str	00000000 
00002e6b l       .debug_str	00000000 
00002eab l       .debug_str	00000000 
0003a333 l       .debug_str	00000000 
00002ef3 l       .debug_str	00000000 
00002ef9 l       .debug_str	00000000 
00002eff l       .debug_str	00000000 
00002f28 l       .debug_str	00000000 
00002f05 l       .debug_str	00000000 
00002f3a l       .debug_str	00000000 
00002f7c l       .debug_str	00000000 
0003a1e5 l       .debug_str	00000000 
00002fc6 l       .debug_str	00000000 
00002fcc l       .debug_str	00000000 
00002fd2 l       .debug_str	00000000 
00002ffb l       .debug_str	00000000 
00002fd8 l       .debug_str	00000000 
0000300d l       .debug_str	00000000 
0000304f l       .debug_str	00000000 
00039457 l       .debug_str	00000000 
00003099 l       .debug_str	00000000 
0000309f l       .debug_str	00000000 
000030a5 l       .debug_str	00000000 
000030ab l       .debug_str	00000000 
000030d4 l       .debug_str	00000000 
000030b1 l       .debug_str	00000000 
000030e5 l       .debug_str	00000000 
00003126 l       .debug_str	00000000 
0000316f l       .debug_str	00000000 
00003174 l       .debug_str	00000000 
0003a5e3 l       .debug_str	00000000 
00003179 l       .debug_str	00000000 
0000317f l       .debug_str	00000000 
00003185 l       .debug_str	00000000 
000031ae l       .debug_str	00000000 
0000318b l       .debug_str	00000000 
000031bf l       .debug_str	00000000 
00003200 l       .debug_str	00000000 
0003952b l       .debug_str	00000000 
00003249 l       .debug_str	00000000 
00003275 l       .debug_str	00000000 
00003252 l       .debug_str	00000000 
00003286 l       .debug_str	00000000 
000032c7 l       .debug_str	00000000 
00003310 l       .debug_str	00000000 
0003a806 l       .debug_str	00000000 
00003315 l       .debug_str	00000000 
0000331e l       .debug_str	00000000 
00003325 l       .debug_str	00000000 
00003350 l       .debug_str	00000000 
0000332d l       .debug_str	00000000 
00003362 l       .debug_str	00000000 
000033a4 l       .debug_str	00000000 
0003a46b l       .debug_str	00000000 
000033ee l       .debug_str	00000000 
000033f4 l       .debug_str	00000000 
000033fa l       .debug_str	00000000 
00003400 l       .debug_str	00000000 
00003406 l       .debug_str	00000000 
0000340e l       .debug_str	00000000 
0000341c l       .debug_str	00000000 
0000342b l       .debug_str	00000000 
0000343c l       .debug_str	00000000 
00003447 l       .debug_str	00000000 
00003452 l       .debug_str	00000000 
0000345d l       .debug_str	00000000 
00003464 l       .debug_str	00000000 
000034aa l       .debug_str	00000000 
00003487 l       .debug_str	00000000 
000034bc l       .debug_str	00000000 
000034fe l       .debug_str	00000000 
0003965a l       .debug_str	00000000 
00003548 l       .debug_str	00000000 
00003575 l       .debug_str	00000000 
00003552 l       .debug_str	00000000 
00003587 l       .debug_str	00000000 
000035c9 l       .debug_str	00000000 
00003613 l       .debug_str	00000000 
00003618 l       .debug_str	00000000 
00003645 l       .debug_str	00000000 
00003622 l       .debug_str	00000000 
00003657 l       .debug_str	00000000 
00003699 l       .debug_str	00000000 
000036e3 l       .debug_str	00000000 
0000bb07 l       .debug_str	00000000 
0003db77 l       .debug_str	00000000 
000036f7 l       .debug_str	00000000 
00003707 l       .debug_str	00000000 
00003710 l       .debug_str	00000000 
0000371b l       .debug_str	00000000 
0000372a l       .debug_str	00000000 
0000373f l       .debug_str	00000000 
00003770 l       .debug_str	00000000 
0000380d l       .debug_str	00000000 
000038b2 l       .debug_str	00000000 
000038bd l       .debug_str	00000000 
000038c6 l       .debug_str	00000000 
0000390a l       .debug_str	00000000 
000038e7 l       .debug_str	00000000 
0000391d l       .debug_str	00000000 
000039a0 l       .debug_str	00000000 
00003a2b l       .debug_str	00000000 
00003a47 l       .debug_str	00000000 
00003a93 l       .debug_str	00000000 
00003ae7 l       .debug_str	00000000 
00003b04 l       .debug_str	00000000 
00003b18 l       .debug_str	00000000 
00003b64 l       .debug_str	00000000 
00003bb8 l       .debug_str	00000000 
00003bce l       .debug_str	00000000 
00003be2 l       .debug_str	00000000 
00003c29 l       .debug_str	00000000 
00003c78 l       .debug_str	00000000 
00003ca4 l       .debug_str	00000000 
00003c81 l       .debug_str	00000000 
00003cb2 l       .debug_str	00000000 
00003cb8 l       .debug_str	00000000 
00003cc0 l       .debug_str	00000000 
00003cc7 l       .debug_str	00000000 
000049ef l       .debug_str	00000000 
00003ccf l       .debug_str	00000000 
00003cd7 l       .debug_str	00000000 
000108b5 l       .debug_str	00000000 
00003ce6 l       .debug_str	00000000 
00004a21 l       .debug_str	00000000 
00003cf1 l       .debug_str	00000000 
00003cfc l       .debug_str	00000000 
00003d0d l       .debug_str	00000000 
00003d13 l       .debug_str	00000000 
00003d1b l       .debug_str	00000000 
00003d22 l       .debug_str	00000000 
00003d2c l       .debug_str	00000000 
00003d34 l       .debug_str	00000000 
00003d3c l       .debug_str	00000000 
00003d5e l       .debug_str	00000000 
00003d69 l       .debug_str	00000000 
00003d75 l       .debug_str	00000000 
00003d7d l       .debug_str	00000000 
00003d86 l       .debug_str	00000000 
000005cb l       .debug_str	00000000 
00003d91 l       .debug_str	00000000 
00003d9c l       .debug_str	00000000 
00003da7 l       .debug_str	00000000 
00003db7 l       .debug_str	00000000 
000395bd l       .debug_str	00000000 
00004e10 l       .debug_str	00000000 
00003dc1 l       .debug_str	00000000 
00003df9 l       .debug_str	00000000 
00003e39 l       .debug_str	00000000 
00003e40 l       .debug_str	00000000 
00003e48 l       .debug_str	00000000 
00004e29 l       .debug_str	00000000 
00003e5f l       .debug_str	00000000 
00003e6f l       .debug_str	00000000 
00003e7e l       .debug_str	00000000 
00003e86 l       .debug_str	00000000 
00003e8d l       .debug_str	00000000 
0000f362 l       .debug_str	00000000 
00003eb8 l       .debug_str	00000000 
00003e95 l       .debug_str	00000000 
00003ec8 l       .debug_str	00000000 
00003edd l       .debug_str	00000000 
00003ee6 l       .debug_str	00000000 
00003f43 l       .debug_str	00000000 
00003fa8 l       .debug_str	00000000 
00003fb2 l       .debug_str	00000000 
00003fc2 l       .debug_str	00000000 
00003fd7 l       .debug_str	00000000 
00003fdf l       .debug_str	00000000 
00004043 l       .debug_str	00000000 
000040af l       .debug_str	00000000 
000040b6 l       .debug_str	00000000 
000040be l       .debug_str	00000000 
000040ff l       .debug_str	00000000 
00004168 l       .debug_str	00000000 
080161c4 l     O .text	0000000c _ZN3app10app_sensor13SENSOR_DEVICE17h54c19c743b889826E
00000000 l    df *ABS*	00000000 3wu9uprs06ljmqpj
00001085 l       .debug_str	00000000 
00007a6d l       .debug_str	00000000 
00007a5b l       .debug_str	00000000 
00007a4d l       .debug_str	00000000 
00007a8a l       .debug_str	00000000 
00038c4d l       .debug_str	00000000 
0000a452 l       .debug_str	00000000 
00041091 l       .debug_str	00000000 
0003a293 l       .debug_str	00000000 
000005dc l       .debug_str	00000000 
0003f7fd l       .debug_str	00000000 
00007a3e l       .debug_str	00000000 
00007a1d l       .debug_str	00000000 
00007a32 l       .debug_str	00000000 
00007a19 l       .debug_str	00000000 
0003a53b l       .debug_str	00000000 
00000dcc l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000b2a l       .debug_str	00000000 
00000b25 l       .debug_str	00000000 
00007a81 l       .debug_str	00000000 
0000073c l       .debug_str	00000000 
0000077d l       .debug_str	00000000 
00000038 l       .debug_str	00000000 
0003dfaf l       .debug_str	00000000 
000078f2 l       .debug_str	00000000 
000078fe l       .debug_str	00000000 
00000b00 l       .debug_str	00000000 
0003c69a l       .debug_str	00000000 
00000050 l       .debug_str	00000000 
0000ba51 l       .debug_str	00000000 
00000842 l       .debug_str	00000000 
00007912 l       .debug_str	00000000 
0000087d l       .debug_str	00000000 
00007917 l       .debug_str	00000000 
000114f6 l       .debug_str	00000000 
0000791d l       .debug_str	00000000 
0000f9e9 l       .debug_str	00000000 
0000a3e3 l       .debug_str	00000000 
0000f9f6 l       .debug_str	00000000 
0000fa04 l       .debug_str	00000000 
00007929 l       .debug_str	00000000 
00007939 l       .debug_str	00000000 
00009ac3 l       .debug_str	00000000 
0000250b l       .debug_str	00000000 
00000ff8 l       .debug_str	00000000 
00001000 l       .debug_str	00000000 
0000100b l       .debug_str	00000000 
00001016 l       .debug_str	00000000 
00001023 l       .debug_str	00000000 
0000102e l       .debug_str	00000000 
00001036 l       .debug_str	00000000 
00001041 l       .debug_str	00000000 
0000104c l       .debug_str	00000000 
00001056 l       .debug_str	00000000 
00001061 l       .debug_str	00000000 
0000106c l       .debug_str	00000000 
00001079 l       .debug_str	00000000 
00000b1d l       .debug_str	00000000 
00001092 l       .debug_str	00000000 
000010a0 l       .debug_str	00000000 
000010aa l       .debug_str	00000000 
0000fafe l       .debug_str	00000000 
000084cc l       .debug_str	00000000 
00000869 l       .debug_str	00000000 
00000b14 l       .debug_str	00000000 
00006bac l       .debug_str	00000000 
00006bed l       .debug_str	00000000 
0000084e l       .debug_str	00000000 
0000b8e7 l       .debug_str	00000000 
00000857 l       .debug_str	00000000 
0003eb70 l       .debug_str	00000000 
0000bbcd l       .debug_str	00000000 
00006608 l       .debug_str	00000000 
00000dc7 l       .debug_str	00000000 
00000868 l       .debug_str	00000000 
00007977 l       .debug_str	00000000 
000079b7 l       .debug_str	00000000 
000007ab l       .debug_str	00000000 
0001143d l       .debug_str	00000000 
00043fa0 l       .debug_str	00000000 
0002c0e1 l       .debug_str	00000000 
000007ae l       .debug_str	00000000 
0000f6b7 l       .debug_str	00000000 
000079cd l       .debug_str	00000000 
00007a08 l       .debug_str	00000000 
0000fa69 l       .debug_str	00000000 
00009e08 l       .debug_str	00000000 
000381ee l       .debug_str	00000000 
0000bb07 l       .debug_str	00000000 
080062f6 l     F .text	00000574 _ZN3app11app_network16send_sensor_data17hb7b0df53949f361aE
20000368 l     O .bss	00000020 _ZN3app11app_network19CURRENT_GEOLOCATION17h51c9281e67d56691E
00000000 l    df *ABS*	00000000 4bnvtm33251e9r08
000030e5 l       .debug_str	00000000 
00000868 l       .debug_str	00000000 
0000073c l       .debug_str	00000000 
0000077d l       .debug_str	00000000 
00000038 l       .debug_str	00000000 
000084cc l       .debug_str	00000000 
00000fde l       .debug_str	00000000 
0000b8e7 l       .debug_str	00000000 
00000fe2 l       .debug_str	00000000 
00000fed l       .debug_str	00000000 
0000119a l       .debug_str	00000000 
0003709c l       .debug_str	00000000 
0000ba51 l       .debug_str	00000000 
00000842 l       .debug_str	00000000 
00000b00 l       .debug_str	00000000 
0003c69a l       .debug_str	00000000 
00000050 l       .debug_str	00000000 
000023dd l       .debug_str	00000000 
00002732 l       .debug_str	00000000 
000023e6 l       .debug_str	00000000 
0003e594 l       .debug_str	00000000 
000023ed l       .debug_str	00000000 
000023f9 l       .debug_str	00000000 
0000250b l       .debug_str	00000000 
0000118a l       .debug_str	00000000 
00002401 l       .debug_str	00000000 
00043fa0 l       .debug_str	00000000 
000008fb l       .debug_str	00000000 
0000087d l       .debug_str	00000000 
0000245b l       .debug_str	00000000 
000024bd l       .debug_str	00000000 
000024c8 l       .debug_str	00000000 
0000250f l       .debug_str	00000000 
0000255e l       .debug_str	00000000 
00002568 l       .debug_str	00000000 
000025a5 l       .debug_str	00000000 
000025ea l       .debug_str	00000000 
000025f3 l       .debug_str	00000000 
00002603 l       .debug_str	00000000 
0000260b l       .debug_str	00000000 
00002660 l       .debug_str	00000000 
000026bd l       .debug_str	00000000 
000026c9 l       .debug_str	00000000 
000026d2 l       .debug_str	00000000 
000026de l       .debug_str	00000000 
000026ea l       .debug_str	00000000 
000026f3 l       .debug_str	00000000 
00000857 l       .debug_str	00000000 
000026fb l       .debug_str	00000000 
00000581 l       .debug_str	00000000 
00002703 l       .debug_str	00000000 
00002731 l       .debug_str	00000000 
00002718 l       .debug_str	00000000 
00002738 l       .debug_str	00000000 
0000273f l       .debug_str	00000000 
00002747 l       .debug_str	00000000 
00000708 l       .debug_str	00000000 
00002751 l       .debug_str	00000000 
000004ad l       .debug_str	00000000 
000006ee l       .debug_str	00000000 
0000b99b l       .debug_str	00000000 
0000066b l       .debug_str	00000000 
00000643 l       .debug_str	00000000 
000006cf l       .debug_str	00000000 
00037204 l       .debug_str	00000000 
00000609 l       .debug_str	00000000 
000004df l       .debug_str	00000000 
0003e04e l       .debug_str	00000000 
000364f6 l       .debug_str	00000000 
0000275a l       .debug_str	00000000 
00002787 l       .debug_str	00000000 
000026c3 l       .debug_str	00000000 
00038516 l       .debug_str	00000000 
00000521 l       .debug_str	00000000 
00000690 l       .debug_str	00000000 
000005f2 l       .debug_str	00000000 
000004f0 l       .debug_str	00000000 
000027bc l       .debug_str	00000000 
000027e5 l       .debug_str	00000000 
00002843 l       .debug_str	00000000 
000005d2 l       .debug_str	00000000 
000006d7 l       .debug_str	00000000 
000006af l       .debug_str	00000000 
000028a9 l       .debug_str	00000000 
000027d5 l       .debug_str	00000000 
000006fa l       .debug_str	00000000 
000004a2 l       .debug_str	00000000 
00000674 l       .debug_str	00000000 
000006df l       .debug_str	00000000 
000028c7 l       .debug_str	00000000 
0000065b l       .debug_str	00000000 
00000582 l       .debug_str	00000000 
00000509 l       .debug_str	00000000 
000028dd l       .debug_str	00000000 
00002903 l       .debug_str	00000000 
000004b8 l       .debug_str	00000000 
00002919 l       .debug_str	00000000 
0000645f l       .debug_str	00000000 
000028e2 l       .debug_str	00000000 
0000292f l       .debug_str	00000000 
0002ce96 l       .debug_str	00000000 
00002946 l       .debug_str	00000000 
0000294e l       .debug_str	00000000 
00002957 l       .debug_str	00000000 
00003d55 l       .debug_str	00000000 
00002960 l       .debug_str	00000000 
0000a35b l       .debug_str	00000000 
0003cfba l       .debug_str	00000000 
00002968 l       .debug_str	00000000 
00002974 l       .debug_str	00000000 
0000297f l       .debug_str	00000000 
00002987 l       .debug_str	00000000 
00004370 l       .debug_str	00000000 
000042eb l       .debug_str	00000000 
0000298f l       .debug_str	00000000 
00002a8b l       .debug_str	00000000 
00002b8f l       .debug_str	00000000 
00002b9d l       .debug_str	00000000 
00002ba8 l       .debug_str	00000000 
00000822 l       .debug_str	00000000 
00002bd5 l       .debug_str	00000000 
00002bb2 l       .debug_str	00000000 
00002be0 l       .debug_str	00000000 
00002c5b l       .debug_str	00000000 
00002cde l       .debug_str	00000000 
00002cec l       .debug_str	00000000 
00002d4b l       .debug_str	00000000 
00002db2 l       .debug_str	00000000 
00002dc8 l       .debug_str	00000000 
00002dd8 l       .debug_str	00000000 
0003a863 l       .debug_str	00000000 
000009aa l       .debug_str	00000000 
00002de7 l       .debug_str	00000000 
000114f6 l       .debug_str	00000000 
00002ded l       .debug_str	00000000 
00002df3 l       .debug_str	00000000 
00002df9 l       .debug_str	00000000 
00002e05 l       .debug_str	00000000 
00043a1a l       .debug_str	00000000 
00002e0d l       .debug_str	00000000 
0004208c l       .debug_str	00000000 
00002e15 l       .debug_str	00000000 
00002e5b l       .debug_str	00000000 
00002e38 l       .debug_str	00000000 
00002e6b l       .debug_str	00000000 
00002eab l       .debug_str	00000000 
0003a333 l       .debug_str	00000000 
00002ef3 l       .debug_str	00000000 
00002ef9 l       .debug_str	00000000 
00002eff l       .debug_str	00000000 
00002f28 l       .debug_str	00000000 
00002f05 l       .debug_str	00000000 
00002f3a l       .debug_str	00000000 
00002f7c l       .debug_str	00000000 
0003a1e5 l       .debug_str	00000000 
00002fc6 l       .debug_str	00000000 
00002fcc l       .debug_str	00000000 
00002fd2 l       .debug_str	00000000 
00002ffb l       .debug_str	00000000 
00002fd8 l       .debug_str	00000000 
0000300d l       .debug_str	00000000 
0000304f l       .debug_str	00000000 
00039457 l       .debug_str	00000000 
00003099 l       .debug_str	00000000 
0000309f l       .debug_str	00000000 
000030a5 l       .debug_str	00000000 
000030ab l       .debug_str	00000000 
000030d4 l       .debug_str	00000000 
000030b1 l       .debug_str	00000000 
0000bbcd l       .debug_str	00000000 
00003126 l       .debug_str	00000000 
0000316f l       .debug_str	00000000 
00003174 l       .debug_str	00000000 
0003a5e3 l       .debug_str	00000000 
00003179 l       .debug_str	00000000 
0000317f l       .debug_str	00000000 
00003185 l       .debug_str	00000000 
000031ae l       .debug_str	00000000 
0000318b l       .debug_str	00000000 
000031bf l       .debug_str	00000000 
00003200 l       .debug_str	00000000 
0003952b l       .debug_str	00000000 
00003249 l       .debug_str	00000000 
00003275 l       .debug_str	00000000 
00003252 l       .debug_str	00000000 
00003286 l       .debug_str	00000000 
000032c7 l       .debug_str	00000000 
00003310 l       .debug_str	00000000 
0003a806 l       .debug_str	00000000 
00003315 l       .debug_str	00000000 
0000331e l       .debug_str	00000000 
00003325 l       .debug_str	00000000 
00003350 l       .debug_str	00000000 
0000332d l       .debug_str	00000000 
00003362 l       .debug_str	00000000 
000033a4 l       .debug_str	00000000 
0003a46b l       .debug_str	00000000 
000033ee l       .debug_str	00000000 
000033f4 l       .debug_str	00000000 
000033fa l       .debug_str	00000000 
00003400 l       .debug_str	00000000 
00003406 l       .debug_str	00000000 
0000340e l       .debug_str	00000000 
0000341c l       .debug_str	00000000 
0000342b l       .debug_str	00000000 
0000343c l       .debug_str	00000000 
00003447 l       .debug_str	00000000 
00003452 l       .debug_str	00000000 
0000345d l       .debug_str	00000000 
00003464 l       .debug_str	00000000 
000034aa l       .debug_str	00000000 
00003487 l       .debug_str	00000000 
000034bc l       .debug_str	00000000 
000034fe l       .debug_str	00000000 
0003965a l       .debug_str	00000000 
00003548 l       .debug_str	00000000 
00003575 l       .debug_str	00000000 
00003552 l       .debug_str	00000000 
00003587 l       .debug_str	00000000 
000035c9 l       .debug_str	00000000 
00003613 l       .debug_str	00000000 
00003618 l       .debug_str	00000000 
00003645 l       .debug_str	00000000 
00003622 l       .debug_str	00000000 
00003657 l       .debug_str	00000000 
00003699 l       .debug_str	00000000 
000036e3 l       .debug_str	00000000 
0000bb07 l       .debug_str	00000000 
0003db77 l       .debug_str	00000000 
000036f7 l       .debug_str	00000000 
00003707 l       .debug_str	00000000 
00003710 l       .debug_str	00000000 
0000371b l       .debug_str	00000000 
0000372a l       .debug_str	00000000 
0000373f l       .debug_str	00000000 
00003770 l       .debug_str	00000000 
0000380d l       .debug_str	00000000 
000038b2 l       .debug_str	00000000 
000038bd l       .debug_str	00000000 
000038c6 l       .debug_str	00000000 
0000390a l       .debug_str	00000000 
000038e7 l       .debug_str	00000000 
0000391d l       .debug_str	00000000 
000039a0 l       .debug_str	00000000 
00003a2b l       .debug_str	00000000 
00003a47 l       .debug_str	00000000 
00003a93 l       .debug_str	00000000 
00003ae7 l       .debug_str	00000000 
00003b04 l       .debug_str	00000000 
00003b18 l       .debug_str	00000000 
00003b64 l       .debug_str	00000000 
00003bb8 l       .debug_str	00000000 
00003bce l       .debug_str	00000000 
00003be2 l       .debug_str	00000000 
00003c29 l       .debug_str	00000000 
00003c78 l       .debug_str	00000000 
00003ca4 l       .debug_str	00000000 
00003c81 l       .debug_str	00000000 
00003cb2 l       .debug_str	00000000 
00003cb8 l       .debug_str	00000000 
00003cc0 l       .debug_str	00000000 
00003cc7 l       .debug_str	00000000 
000049ef l       .debug_str	00000000 
00003ccf l       .debug_str	00000000 
00003cd7 l       .debug_str	00000000 
000108b5 l       .debug_str	00000000 
00003ce6 l       .debug_str	00000000 
00004a21 l       .debug_str	00000000 
00003cf1 l       .debug_str	00000000 
00003cfc l       .debug_str	00000000 
00003d0d l       .debug_str	00000000 
00003d13 l       .debug_str	00000000 
00003d1b l       .debug_str	00000000 
00003d22 l       .debug_str	00000000 
00003d2c l       .debug_str	00000000 
00003d34 l       .debug_str	00000000 
00003d3c l       .debug_str	00000000 
00003d5e l       .debug_str	00000000 
00003d69 l       .debug_str	00000000 
00003d75 l       .debug_str	00000000 
00003d7d l       .debug_str	00000000 
00003d86 l       .debug_str	00000000 
000005cb l       .debug_str	00000000 
00003d91 l       .debug_str	00000000 
00003d9c l       .debug_str	00000000 
00003da7 l       .debug_str	00000000 
00003db7 l       .debug_str	00000000 
000395bd l       .debug_str	00000000 
00004e10 l       .debug_str	00000000 
00003dc1 l       .debug_str	00000000 
00003df9 l       .debug_str	00000000 
00003e39 l       .debug_str	00000000 
00003e40 l       .debug_str	00000000 
00003e48 l       .debug_str	00000000 
00004e29 l       .debug_str	00000000 
00003e5f l       .debug_str	00000000 
00003e6f l       .debug_str	00000000 
00003e7e l       .debug_str	00000000 
00003e86 l       .debug_str	00000000 
00003e8d l       .debug_str	00000000 
0000f362 l       .debug_str	00000000 
00003eb8 l       .debug_str	00000000 
00003e95 l       .debug_str	00000000 
00003ec8 l       .debug_str	00000000 
00003edd l       .debug_str	00000000 
00003ee6 l       .debug_str	00000000 
00003f43 l       .debug_str	00000000 
00003fa8 l       .debug_str	00000000 
00003fb2 l       .debug_str	00000000 
00003fc2 l       .debug_str	00000000 
00003fd7 l       .debug_str	00000000 
00003fdf l       .debug_str	00000000 
00004043 l       .debug_str	00000000 
000040af l       .debug_str	00000000 
000040b6 l       .debug_str	00000000 
000040be l       .debug_str	00000000 
000040ff l       .debug_str	00000000 
000040dc l       .debug_str	00000000 
0000410f l       .debug_str	00000000 
00004124 l       .debug_str	00000000 
00004137 l       .debug_str	00000000 
0000414c l       .debug_str	00000000 
00004153 l       .debug_str	00000000 
00004168 l       .debug_str	00000000 
00007a95 l       .debug_str	00000000 
00007ac7 l       .debug_str	00000000 
00007b03 l       .debug_str	00000000 
00000dc7 l       .debug_str	00000000 
00000fda l       .debug_str	00000000 
0000084e l       .debug_str	00000000 
0003eb70 l       .debug_str	00000000 
0003f7fd l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 55jcccxybhk58gh5
00001061 l       .debug_str	00000000 
00007b86 l       .debug_str	00000000 
0000073c l       .debug_str	00000000 
0000077d l       .debug_str	00000000 
00000038 l       .debug_str	00000000 
00000b00 l       .debug_str	00000000 
00009ac3 l       .debug_str	00000000 
0000250b l       .debug_str	00000000 
00000ff8 l       .debug_str	00000000 
00001000 l       .debug_str	00000000 
0000100b l       .debug_str	00000000 
00001016 l       .debug_str	00000000 
00001023 l       .debug_str	00000000 
0000102e l       .debug_str	00000000 
00001036 l       .debug_str	00000000 
00001041 l       .debug_str	00000000 
0000104c l       .debug_str	00000000 
00001056 l       .debug_str	00000000 
00007b35 l       .debug_str	00000000 
0000106c l       .debug_str	00000000 
00001079 l       .debug_str	00000000 
00001085 l       .debug_str	00000000 
00001092 l       .debug_str	00000000 
000010a0 l       .debug_str	00000000 
000010aa l       .debug_str	00000000 
0000fafe l       .debug_str	00000000 
000084cc l       .debug_str	00000000 
000020a9 l       .debug_str	00000000 
00000b14 l       .debug_str	00000000 
00043fa0 l       .debug_str	00000000 
0000087b l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 cstr_core.abfp6oo7-cgu.1
00006a72 l       .debug_str	00000000 
00039a4f l       .debug_str	00000000 
000447f8 l       .debug_str	00000000 
00039863 l       .debug_str	00000000 
0004491f l       .debug_str	00000000 
0003998f l       .debug_str	00000000 
000083a3 l       .debug_str	00000000 
000083b0 l       .debug_str	00000000 
0000837c l       .debug_str	00000000 
00004945 l       .debug_str	00000000 
00008370 l       .debug_str	00000000 
000042c1 l       .debug_str	00000000 
0000834a l       .debug_str	00000000 
00012c91 l       .debug_str	00000000 
0000831b l       .debug_str	00000000 
0000087b l       .debug_str	00000000 
00008324 l       .debug_str	00000000 
0003d87e l       .debug_str	00000000 
0000a452 l       .debug_str	00000000 
0003bbf7 l       .debug_str	00000000 
00008318 l       .debug_str	00000000 
00002f03 l       .debug_str	00000000 
000082cc l       .debug_str	00000000 
0000073c l       .debug_str	00000000 
00007ba8 l       .debug_str	00000000 
00007c02 l       .debug_str	00000000 
000084cc l       .debug_str	00000000 
00000853 l       .debug_str	00000000 
0003c4b3 l       .debug_str	00000000 
000043ec l       .debug_str	00000000 
00042573 l       .debug_str	00000000 
0001143d l       .debug_str	00000000 
0003a53b l       .debug_str	00000000 
000043f9 l       .debug_str	00000000 
0000660e l       .debug_str	00000000 
0000087d l       .debug_str	00000000 
0000bb07 l       .debug_str	00000000 
000056e0 l       .debug_str	00000000 
00006628 l       .debug_str	00000000 
0000662c l       .debug_str	00000000 
00006825 l       .debug_str	00000000 
00043fa0 l       .debug_str	00000000 
0000684a l       .debug_str	00000000 
00006708 l       .debug_str	00000000 
00007c51 l       .debug_str	00000000 
00006681 l       .debug_str	00000000 
000066b9 l       .debug_str	00000000 
00000dc7 l       .debug_str	00000000 
000066ea l       .debug_str	00000000 
00000b14 l       .debug_str	00000000 
00007ca2 l       .debug_str	00000000 
000067c3 l       .debug_str	00000000 
000067fa l       .debug_str	00000000 
0000682b l       .debug_str	00000000 
00006a9d l       .debug_str	00000000 
00006acb l       .debug_str	00000000 
0000696e l       .debug_str	00000000 
00007d24 l       .debug_str	00000000 
000068d5 l       .debug_str	00000000 
00006916 l       .debug_str	00000000 
00006950 l       .debug_str	00000000 
00007d75 l       .debug_str	00000000 
00006a32 l       .debug_str	00000000 
000082b8 l       .debug_str	00000000 
00006aac l       .debug_str	00000000 
0000bbcd l       .debug_str	00000000 
00007fad l       .debug_str	00000000 
00007edd l       .debug_str	00000000 
00007df7 l       .debug_str	00000000 
00007e43 l       .debug_str	00000000 
00007e51 l       .debug_str	00000000 
00007ea2 l       .debug_str	00000000 
00007eb4 l       .debug_str	00000000 
00007ebf l       .debug_str	00000000 
00007ef0 l       .debug_str	00000000 
00007f72 l       .debug_str	00000000 
00007f83 l       .debug_str	00000000 
00007f8e l       .debug_str	00000000 
00007fc1 l       .debug_str	00000000 
00008013 l       .debug_str	00000000 
00008026 l       .debug_str	00000000 
00008079 l       .debug_str	00000000 
00043c6e l       .debug_str	00000000 
0000808b l       .debug_str	00000000 
000080c1 l       .debug_str	00000000 
000080dc l       .debug_str	00000000 
00008116 l       .debug_str	00000000 
00008135 l       .debug_str	00000000 
0000b8e7 l       .debug_str	00000000 
00008171 l       .debug_str	00000000 
0000825b l       .debug_str	00000000 
0000a6d6 l       .debug_str	00000000 
000081b7 l       .debug_str	00000000 
000082c1 l       .debug_str	00000000 
00008200 l       .debug_str	00000000 
00008252 l       .debug_str	00000000 
00000857 l       .debug_str	00000000 
00008263 l       .debug_str	00000000 
00038c5b l       .debug_str	00000000 
08006964 l     F .text	00000106 _ZN4core3ptr25swap_nonoverlapping_bytes17haea9561059c72327E
00000000 l    df *ABS*	00000000 cstr_core.abfp6oo7-cgu.12
000378fe l       .debug_str	00000000 
000042b1 l       .debug_str	00000000 
00000dc7 l       .debug_str	00000000 
00008800 l       .debug_str	00000000 
00008701 l       .debug_str	00000000 
000087d5 l       .debug_str	00000000 
000086e6 l       .debug_str	00000000 
00008768 l       .debug_str	00000000 
000086b1 l       .debug_str	00000000 
00039a4f l       .debug_str	00000000 
00008805 l       .debug_str	00000000 
00007eb4 l       .debug_str	00000000 
00008677 l       .debug_str	00000000 
00008642 l       .debug_str	00000000 
00039863 l       .debug_str	00000000 
000087da l       .debug_str	00000000 
000083b0 l       .debug_str	00000000 
0000073c l       .debug_str	00000000 
00007ba8 l       .debug_str	00000000 
00007c02 l       .debug_str	00000000 
000084cc l       .debug_str	00000000 
00000936 l       .debug_str	00000000 
000083bd l       .debug_str	00000000 
00000b14 l       .debug_str	00000000 
00006b4a l       .debug_str	00000000 
00000853 l       .debug_str	00000000 
000083c3 l       .debug_str	00000000 
0000fc7a l       .debug_str	00000000 
000083c9 l       .debug_str	00000000 
0000f4e4 l       .debug_str	00000000 
0000bbcd l       .debug_str	00000000 
00043fa0 l       .debug_str	00000000 
00008416 l       .debug_str	00000000 
00008454 l       .debug_str	00000000 
00008503 l       .debug_str	00000000 
0000846f l       .debug_str	00000000 
00008478 l       .debug_str	00000000 
0002011c l       .debug_str	00000000 
000009a3 l       .debug_str	00000000 
0000b8e7 l       .debug_str	00000000 
00000857 l       .debug_str	00000000 
00043b00 l       .debug_str	00000000 
000009a9 l       .debug_str	00000000 
000009aa l       .debug_str	00000000 
00009379 l       .debug_str	00000000 
00008480 l       .debug_str	00000000 
00010d78 l       .debug_str	00000000 
0003ef1f l       .debug_str	00000000 
00008491 l       .debug_str	00000000 
000087e6 l       .debug_str	00000000 
000374a1 l       .debug_str	00000000 
00008499 l       .debug_str	00000000 
000084bd l       .debug_str	00000000 
0003709c l       .debug_str	00000000 
0000ba51 l       .debug_str	00000000 
00000842 l       .debug_str	00000000 
000084c7 l       .debug_str	00000000 
000084d1 l       .debug_str	00000000 
00043f35 l       .debug_str	00000000 
0003eefd l       .debug_str	00000000 
00000e18 l       .debug_str	00000000 
00008be6 l       .debug_str	00000000 
0003bd4f l       .debug_str	00000000 
00000822 l       .debug_str	00000000 
00010a4c l       .debug_str	00000000 
000008fb l       .debug_str	00000000 
0000087d l       .debug_str	00000000 
000084d7 l       .debug_str	00000000 
000084ff l       .debug_str	00000000 
00008508 l       .debug_str	00000000 
0000850a l       .debug_str	00000000 
0000878c l       .debug_str	00000000 
00008574 l       .debug_str	00000000 
000085a9 l       .debug_str	00000000 
00008625 l       .debug_str	00000000 
00008631 l       .debug_str	00000000 
00004945 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 cstr_core.abfp6oo7-cgu.14
00000853 l       .debug_str	00000000 
0003eb70 l       .debug_str	00000000 
000447f8 l       .debug_str	00000000 
00000857 l       .debug_str	00000000 
00007f83 l       .debug_str	00000000 
0000084e l       .debug_str	00000000 
0004491f l       .debug_str	00000000 
0003f7fd l       .debug_str	00000000 
0000073c l       .debug_str	00000000 
00007ba8 l       .debug_str	00000000 
00007c02 l       .debug_str	00000000 
000084cc l       .debug_str	00000000 
0003c4b3 l       .debug_str	00000000 
0000b8e7 l       .debug_str	00000000 
00000822 l       .debug_str	00000000 
00043fa0 l       .debug_str	00000000 
0000880c l       .debug_str	00000000 
0000883a l       .debug_str	00000000 
0000bbcd l       .debug_str	00000000 
0000884c l       .debug_str	00000000 
00008872 l       .debug_str	00000000 
0000887e l       .debug_str	00000000 
000088a7 l       .debug_str	00000000 
000088df l       .debug_str	00000000 
0000660e l       .debug_str	00000000 
0000087d l       .debug_str	00000000 
0000bb07 l       .debug_str	00000000 
000056e0 l       .debug_str	00000000 
00006628 l       .debug_str	00000000 
0000662c l       .debug_str	00000000 
00006825 l       .debug_str	00000000 
000088b6 l       .debug_str	00000000 
00006608 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 cstr_core.abfp6oo7-cgu.5
0003709c l       .debug_str	00000000 
00008be6 l       .debug_str	00000000 
00017ae1 l       .debug_str	00000000 
0003eefd l       .debug_str	00000000 
00008bf3 l       .debug_str	00000000 
00002078 l       .debug_str	00000000 
00042ae8 l       .debug_str	00000000 
00000e18 l       .debug_str	00000000 
0000073c l       .debug_str	00000000 
00007ba8 l       .debug_str	00000000 
00007c02 l       .debug_str	00000000 
000084cc l       .debug_str	00000000 
000009a3 l       .debug_str	00000000 
00000b14 l       .debug_str	00000000 
00008503 l       .debug_str	00000000 
00043f35 l       .debug_str	00000000 
0000b8e7 l       .debug_str	00000000 
00043fa0 l       .debug_str	00000000 
00008914 l       .debug_str	00000000 
0000899a l       .debug_str	00000000 
0000084e l       .debug_str	00000000 
00000857 l       .debug_str	00000000 
0003eb70 l       .debug_str	00000000 
0000bbcd l       .debug_str	00000000 
00006608 l       .debug_str	00000000 
0003e68a l       .debug_str	00000000 
000089a4 l       .debug_str	00000000 
00008a39 l       .debug_str	00000000 
00043b00 l       .debug_str	00000000 
0000ba51 l       .debug_str	00000000 
00000842 l       .debug_str	00000000 
000008fb l       .debug_str	00000000 
0000087d l       .debug_str	00000000 
00000983 l       .debug_str	00000000 
00008a45 l       .debug_str	00000000 
00008adf l       .debug_str	00000000 
000056e0 l       .debug_str	00000000 
00008af0 l       .debug_str	00000000 
00008b15 l       .debug_str	00000000 
00008bbe l       .debug_str	00000000 
00000dc7 l       .debug_str	00000000 
00000936 l       .debug_str	00000000 
00008bcf l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 cstr_core.abfp6oo7-cgu.8
00043fa0 l       .debug_str	00000000 
00043b00 l       .debug_str	00000000 
00008d35 l       .debug_str	00000000 
00008805 l       .debug_str	00000000 
00042ae8 l       .debug_str	00000000 
0003eefd l       .debug_str	00000000 
0000073c l       .debug_str	00000000 
00007ba8 l       .debug_str	00000000 
00007c02 l       .debug_str	00000000 
000084cc l       .debug_str	00000000 
00008503 l       .debug_str	00000000 
00043f35 l       .debug_str	00000000 
00000b14 l       .debug_str	00000000 
00008c13 l       .debug_str	00000000 
00008c6d l       .debug_str	00000000 
0003709c l       .debug_str	00000000 
0000ba51 l       .debug_str	00000000 
00000842 l       .debug_str	00000000 
0000bbcd l       .debug_str	00000000 
00008d2b l       .debug_str	00000000 
000008fb l       .debug_str	00000000 
0000087d l       .debug_str	00000000 
00000983 l       .debug_str	00000000 
00008c7b l       .debug_str	00000000 
00008cce l       .debug_str	00000000 
00008cd6 l       .debug_str	00000000 
00000dc7 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 cstr_core.abfp6oo7-cgu.9
0000fc7a l       .debug_str	00000000 
0000bbcd l       .debug_str	00000000 
000042b1 l       .debug_str	00000000 
00000dc7 l       .debug_str	00000000 
0000073c l       .debug_str	00000000 
00007ba8 l       .debug_str	00000000 
00007c02 l       .debug_str	00000000 
000084cc l       .debug_str	00000000 
0003a835 l       .debug_str	00000000 
000114f2 l       .debug_str	00000000 
00008d3c l       .debug_str	00000000 
00008d41 l       .debug_str	00000000 
00008d47 l       .debug_str	00000000 
00008d4f l       .debug_str	00000000 
0000a452 l       .debug_str	00000000 
00000b14 l       .debug_str	00000000 
00008d58 l       .debug_str	00000000 
00008db7 l       .debug_str	00000000 
0003e6a9 l       .debug_str	00000000 
00008805 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 memchr.c0kozxyb-cgu.0
00000991 l       .debug_str	00000000 
00007160 l       .debug_str	00000000 
00008f81 l       .debug_str	00000000 
00000dc7 l       .debug_str	00000000 
0004491f l       .debug_str	00000000 
00001cd7 l       .debug_str	00000000 
0000073c l       .debug_str	00000000 
00008e1c l       .debug_str	00000000 
00008e73 l       .debug_str	00000000 
000084cc l       .debug_str	00000000 
00009ac3 l       .debug_str	00000000 
0000b8e7 l       .debug_str	00000000 
000007ab l       .debug_str	00000000 
000007ae l       .debug_str	00000000 
000007b2 l       .debug_str	00000000 
0002b5a7 l       .debug_str	00000000 
000142cf l       .debug_str	00000000 
00001cdb l       .debug_str	00000000 
00000791 l       .debug_str	00000000 
00000796 l       .debug_str	00000000 
0000079c l       .debug_str	00000000 
000007a3 l       .debug_str	00000000 
00041020 l       .debug_str	00000000 
00000b14 l       .debug_str	00000000 
0003a53b l       .debug_str	00000000 
0003ef60 l       .debug_str	00000000 
0001143d l       .debug_str	00000000 
00000927 l       .debug_str	00000000 
000009aa l       .debug_str	00000000 
00000936 l       .debug_str	00000000 
0000093a l       .debug_str	00000000 
00000813 l       .debug_str	00000000 
0000a6d6 l       .debug_str	00000000 
0000081b l       .debug_str	00000000 
0000bbcd l       .debug_str	00000000 
00000822 l       .debug_str	00000000 
00000836 l       .debug_str	00000000 
00000943 l       .debug_str	00000000 
00043fa0 l       .debug_str	00000000 
0000094f l       .debug_str	00000000 
00000974 l       .debug_str	00000000 
00000968 l       .debug_str	00000000 
00000979 l       .debug_str	00000000 
000026ed l       .debug_str	00000000 
0000ba51 l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
00000299 l       .debug_str	00000000 
00043a1a l       .debug_str	00000000 
00018e5f l       .debug_str	00000000 
0003709c l       .debug_str	00000000 
00000842 l       .debug_str	00000000 
000008fb l       .debug_str	00000000 
0000087d l       .debug_str	00000000 
00000983 l       .debug_str	00000000 
0000088f l       .debug_str	00000000 
00039f5c l       .debug_str	00000000 
00008f4f l       .debug_str	00000000 
0000099c l       .debug_str	00000000 
000009a3 l       .debug_str	00000000 
00000853 l       .debug_str	00000000 
00000a80 l       .debug_str	00000000 
00043b00 l       .debug_str	00000000 
000009a9 l       .debug_str	00000000 
000009b1 l       .debug_str	00000000 
000009c8 l       .debug_str	00000000 
000009ec l       .debug_str	00000000 
00039ca3 l       .debug_str	00000000 
0000084e l       .debug_str	00000000 
0003eb70 l       .debug_str	00000000 
00000a9d l       .debug_str	00000000 
00000a18 l       .debug_str	00000000 
00000a08 l       .debug_str	00000000 
00000a22 l       .debug_str	00000000 
00000a92 l       .debug_str	00000000 
00000847 l       .debug_str	00000000 
00000857 l       .debug_str	00000000 
00000868 l       .debug_str	00000000 
00000861 l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00013c1b l       .debug_str	00000000 
00000875 l       .debug_str	00000000 
0000087a l       .debug_str	00000000 
00000881 l       .debug_str	00000000 
0003c705 l       .debug_str	00000000 
00000899 l       .debug_str	00000000 
000008a0 l       .debug_str	00000000 
0000089c l       .debug_str	00000000 
000008a6 l       .debug_str	00000000 
00041eef l       .debug_str	00000000 
000008ae l       .debug_str	00000000 
000008d3 l       .debug_str	00000000 
000008b9 l       .debug_str	00000000 
000008dc l       .debug_str	00000000 
00000900 l       .debug_str	00000000 
00010da7 l       .debug_str	00000000 
00008ebf l       .debug_str	00000000 
00008f07 l       .debug_str	00000000 
00008805 l       .debug_str	00000000 
00008f12 l       .debug_str	00000000 
00008f43 l       .debug_str	00000000 
0003ef1f l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 memchr.c0kozxyb-cgu.10
00043fa0 l       .debug_str	00000000 
0000bbcd l       .debug_str	00000000 
00009035 l       .debug_str	00000000 
00008fff l       .debug_str	00000000 
0000073c l       .debug_str	00000000 
00008e1c l       .debug_str	00000000 
00008e73 l       .debug_str	00000000 
000084cc l       .debug_str	00000000 
0003c4b3 l       .debug_str	00000000 
0000b8e7 l       .debug_str	00000000 
00008fd6 l       .debug_str	00000000 
0000900b l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 memchr.c0kozxyb-cgu.2
0000825b l       .debug_str	00000000 
00039a4f l       .debug_str	00000000 
000042c1 l       .debug_str	00000000 
00000dc7 l       .debug_str	00000000 
0000073c l       .debug_str	00000000 
00008e1c l       .debug_str	00000000 
00008e73 l       .debug_str	00000000 
000084cc l       .debug_str	00000000 
00000853 l       .debug_str	00000000 
00000b14 l       .debug_str	00000000 
0000b8e7 l       .debug_str	00000000 
00043fa0 l       .debug_str	00000000 
00009042 l       .debug_str	00000000 
000082c1 l       .debug_str	00000000 
00000857 l       .debug_str	00000000 
0000908a l       .debug_str	00000000 
0000bbcd l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 memchr.c0kozxyb-cgu.3
00039f5c l       .debug_str	00000000 
00000a18 l       .debug_str	00000000 
0000073c l       .debug_str	00000000 
00008e1c l       .debug_str	00000000 
00008e73 l       .debug_str	00000000 
000084cc l       .debug_str	00000000 
00009ac3 l       .debug_str	00000000 
0000b8e7 l       .debug_str	00000000 
000007ab l       .debug_str	00000000 
000007ae l       .debug_str	00000000 
000007b2 l       .debug_str	00000000 
0002b5a7 l       .debug_str	00000000 
000142cf l       .debug_str	00000000 
00001cdb l       .debug_str	00000000 
00000791 l       .debug_str	00000000 
00000796 l       .debug_str	00000000 
0000079c l       .debug_str	00000000 
000007a3 l       .debug_str	00000000 
00041020 l       .debug_str	00000000 
0003673f l       .debug_str	00000000 
00000b14 l       .debug_str	00000000 
000090d5 l       .debug_str	00000000 
00000dc7 l       .debug_str	00000000 
0000bbcd l       .debug_str	00000000 
00008805 l       .debug_str	00000000 
0003ef1f l       .debug_str	00000000 
000026ed l       .debug_str	00000000 
0000ba51 l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
00000299 l       .debug_str	00000000 
00043a1a l       .debug_str	00000000 
00018e5f l       .debug_str	00000000 
0003709c l       .debug_str	00000000 
00000842 l       .debug_str	00000000 
00043fa0 l       .debug_str	00000000 
000008fb l       .debug_str	00000000 
0000087d l       .debug_str	00000000 
00000983 l       .debug_str	00000000 
0000088f l       .debug_str	00000000 
00000a9d l       .debug_str	00000000 
00000813 l       .debug_str	00000000 
0000a6d6 l       .debug_str	00000000 
0000081b l       .debug_str	00000000 
00000822 l       .debug_str	00000000 
00000836 l       .debug_str	00000000 
00000991 l       .debug_str	00000000 
0000099c l       .debug_str	00000000 
000009a3 l       .debug_str	00000000 
00000853 l       .debug_str	00000000 
0003a53b l       .debug_str	00000000 
0003ef60 l       .debug_str	00000000 
0001143d l       .debug_str	00000000 
00000927 l       .debug_str	00000000 
000009aa l       .debug_str	00000000 
00000936 l       .debug_str	00000000 
0000093a l       .debug_str	00000000 
00000943 l       .debug_str	00000000 
0000094f l       .debug_str	00000000 
00000974 l       .debug_str	00000000 
00000968 l       .debug_str	00000000 
00000979 l       .debug_str	00000000 
00000a22 l       .debug_str	00000000 
00000a92 l       .debug_str	00000000 
00000a80 l       .debug_str	00000000 
00043b00 l       .debug_str	00000000 
000009a9 l       .debug_str	00000000 
000009b1 l       .debug_str	00000000 
000009c8 l       .debug_str	00000000 
000009ec l       .debug_str	00000000 
00039ca3 l       .debug_str	00000000 
0000084e l       .debug_str	00000000 
0003eb70 l       .debug_str	00000000 
00000a08 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 memchr.c0kozxyb-cgu.7
00009167 l       .debug_str	00000000 
0003eefd l       .debug_str	00000000 
00043f35 l       .debug_str	00000000 
00000936 l       .debug_str	00000000 
00009211 l       .debug_str	00000000 
00040304 l       .debug_str	00000000 
000091c8 l       .debug_str	00000000 
00000dc7 l       .debug_str	00000000 
000091c0 l       .debug_str	00000000 
00038c5b l       .debug_str	00000000 
0000917a l       .debug_str	00000000 
00006608 l       .debug_str	00000000 
0003bd4f l       .debug_str	00000000 
0000bbcd l       .debug_str	00000000 
000092a2 l       .debug_str	00000000 
0000922d l       .debug_str	00000000 
000378fe l       .debug_str	00000000 
0000921c l       .debug_str	00000000 
0000073c l       .debug_str	00000000 
00008e1c l       .debug_str	00000000 
00008e73 l       .debug_str	00000000 
000084cc l       .debug_str	00000000 
000009a3 l       .debug_str	00000000 
00000b14 l       .debug_str	00000000 
0000b8e7 l       .debug_str	00000000 
00043fa0 l       .debug_str	00000000 
00009134 l       .debug_str	00000000 
0003eb70 l       .debug_str	00000000 
0000084e l       .debug_str	00000000 
00000857 l       .debug_str	00000000 
00000e18 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 memchr.c0kozxyb-cgu.9
0000930d l       .debug_str	00000000 
00039a4f l       .debug_str	00000000 
0000073c l       .debug_str	00000000 
00008e1c l       .debug_str	00000000 
00008e73 l       .debug_str	00000000 
000084cc l       .debug_str	00000000 
00006b4a l       .debug_str	00000000 
0000b8e7 l       .debug_str	00000000 
00043fa0 l       .debug_str	00000000 
000092cf l       .debug_str	00000000 
0000a6d6 l       .debug_str	00000000 
00004945 l       .debug_str	00000000 
00000857 l       .debug_str	00000000 
00039863 l       .debug_str	00000000 
0000bbcd l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 16u36whw6bnrjd6f
00009378 l       .debug_str	00000000 
0000935a l       .debug_str	00000000 
0000073c l       .debug_str	00000000 
00000ae9 l       .debug_str	00000000 
00000038 l       .debug_str	00000000 
000084cc l       .debug_str	00000000 
00000853 l       .debug_str	00000000 
0000b8e7 l       .debug_str	00000000 
00009379 l       .debug_str	00000000 
00009325 l       .debug_str	00000000 
00043fa0 l       .debug_str	00000000 
00009373 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1779vvhsy04tg7x0
0000a452 l       .debug_str	00000000 
000042b1 l       .debug_str	00000000 
000018fe l       .debug_str	00000000 
00009379 l       .debug_str	00000000 
0000073c l       .debug_str	00000000 
00000ae9 l       .debug_str	00000000 
00000038 l       .debug_str	00000000 
000084cc l       .debug_str	00000000 
0003a835 l       .debug_str	00000000 
0000fc7a l       .debug_str	00000000 
00000b14 l       .debug_str	00000000 
0000937d l       .debug_str	00000000 
000106c4 l       .debug_str	00000000 
0000b8e7 l       .debug_str	00000000 
000093de l       .debug_str	00000000 
0003e6a9 l       .debug_str	00000000 
00000dc7 l       .debug_str	00000000 
0000ba51 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1ioit3lac41doadt
000097aa l       .debug_str	00000000 
00000983 l       .debug_str	00000000 
00000979 l       .debug_str	00000000 
00000968 l       .debug_str	00000000 
00000974 l       .debug_str	00000000 
0000094f l       .debug_str	00000000 
0000429d l       .debug_str	00000000 
00000943 l       .debug_str	00000000 
00000836 l       .debug_str	00000000 
00004292 l       .debug_str	00000000 
0000081b l       .debug_str	00000000 
00017dd4 l       .debug_str	00000000 
00000813 l       .debug_str	00000000 
00004289 l       .debug_str	00000000 
0000093a l       .debug_str	00000000 
00000936 l       .debug_str	00000000 
000009aa l       .debug_str	00000000 
00000927 l       .debug_str	00000000 
00004275 l       .debug_str	00000000 
0001143d l       .debug_str	00000000 
0003ef60 l       .debug_str	00000000 
00039ca3 l       .debug_str	00000000 
0003ef1f l       .debug_str	00000000 
00000900 l       .debug_str	00000000 
000008dc l       .debug_str	00000000 
000042c7 l       .debug_str	00000000 
000008b9 l       .debug_str	00000000 
000042c1 l       .debug_str	00000000 
000008d3 l       .debug_str	00000000 
000008ae l       .debug_str	00000000 
00018e5f l       .debug_str	00000000 
00041eef l       .debug_str	00000000 
000008a6 l       .debug_str	00000000 
0000089c l       .debug_str	00000000 
000008a0 l       .debug_str	00000000 
00000899 l       .debug_str	00000000 
000042b7 l       .debug_str	00000000 
0000088f l       .debug_str	00000000 
00000299 l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
0003c705 l       .debug_str	00000000 
000042b1 l       .debug_str	00000000 
00000881 l       .debug_str	00000000 
0000087a l       .debug_str	00000000 
00000875 l       .debug_str	00000000 
00013c1b l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000861 l       .debug_str	00000000 
00001909 l       .debug_str	00000000 
00000847 l       .debug_str	00000000 
00000e13 l       .debug_str	00000000 
00000e0e l       .debug_str	00000000 
000018fd l       .debug_str	00000000 
00009f2e l       .debug_str	00000000 
00000ded l       .debug_str	00000000 
00001af8 l       .debug_str	00000000 
00000de3 l       .debug_str	00000000 
00001af9 l       .debug_str	00000000 
000018fe l       .debug_str	00000000 
0003a293 l       .debug_str	00000000 
00000dda l       .debug_str	00000000 
00010d9b l       .debug_str	00000000 
0003e21c l       .debug_str	00000000 
00010da7 l       .debug_str	00000000 
00018d99 l       .debug_str	00000000 
00009f01 l       .debug_str	00000000 
0003c2e8 l       .debug_str	00000000 
00000a9d l       .debug_str	00000000 
00000a80 l       .debug_str	00000000 
00000a92 l       .debug_str	00000000 
00000a22 l       .debug_str	00000000 
00000a08 l       .debug_str	00000000 
00000a18 l       .debug_str	00000000 
00009efc l       .debug_str	00000000 
000009ec l       .debug_str	00000000 
000009c8 l       .debug_str	00000000 
0003623d l       .debug_str	00000000 
000009b1 l       .debug_str	00000000 
000009a9 l       .debug_str	00000000 
00043b00 l       .debug_str	00000000 
00009ef6 l       .debug_str	00000000 
0003a53b l       .debug_str	00000000 
00007929 l       .debug_str	00000000 
00000853 l       .debug_str	00000000 
000009a3 l       .debug_str	00000000 
0000099c l       .debug_str	00000000 
00000991 l       .debug_str	00000000 
0000fa04 l       .debug_str	00000000 
0000073c l       .debug_str	00000000 
00000ae9 l       .debug_str	00000000 
00000038 l       .debug_str	00000000 
00000b00 l       .debug_str	00000000 
00037b87 l       .debug_str	00000000 
00000b07 l       .debug_str	00000000 
00009441 l       .debug_str	00000000 
0000944e l       .debug_str	00000000 
0000b8e7 l       .debug_str	00000000 
00000822 l       .debug_str	00000000 
00009459 l       .debug_str	00000000 
00009def l       .debug_str	00000000 
00009466 l       .debug_str	00000000 
000094aa l       .debug_str	00000000 
000094b8 l       .debug_str	00000000 
000380e3 l       .debug_str	00000000 
00043b75 l       .debug_str	00000000 
000084cc l       .debug_str	00000000 
0003709c l       .debug_str	00000000 
0000ba51 l       .debug_str	00000000 
00000842 l       .debug_str	00000000 
0000250b l       .debug_str	00000000 
00000857 l       .debug_str	00000000 
000094c1 l       .debug_str	00000000 
00043fa0 l       .debug_str	00000000 
000008fb l       .debug_str	00000000 
0000087d l       .debug_str	00000000 
00009523 l       .debug_str	00000000 
0000958d l       .debug_str	00000000 
000095bc l       .debug_str	00000000 
0000959b l       .debug_str	00000000 
000095d0 l       .debug_str	00000000 
00000fde l       .debug_str	00000000 
00000fe2 l       .debug_str	00000000 
00000fed l       .debug_str	00000000 
0000119a l       .debug_str	00000000 
0000118a l       .debug_str	00000000 
000095db l       .debug_str	00000000 
0000bbcd l       .debug_str	00000000 
000026ed l       .debug_str	00000000 
000099b9 l       .debug_str	00000000 
000095e1 l       .debug_str	00000000 
00009626 l       .debug_str	00000000 
00009634 l       .debug_str	00000000 
0002b5a7 l       .debug_str	00000000 
000142cf l       .debug_str	00000000 
00001cdb l       .debug_str	00000000 
00000791 l       .debug_str	00000000 
00000796 l       .debug_str	00000000 
0000079c l       .debug_str	00000000 
000007a3 l       .debug_str	00000000 
00041020 l       .debug_str	00000000 
00009ac3 l       .debug_str	00000000 
000007ab l       .debug_str	00000000 
000007ae l       .debug_str	00000000 
000007b2 l       .debug_str	00000000 
00000ffd l       .debug_str	00000000 
00001486 l       .debug_str	00000000 
00001b1a l       .debug_str	00000000 
00000b14 l       .debug_str	00000000 
00000869 l       .debug_str	00000000 
00006bac l       .debug_str	00000000 
00006bed l       .debug_str	00000000 
0000084e l       .debug_str	00000000 
0003eb70 l       .debug_str	00000000 
00006608 l       .debug_str	00000000 
00000dc7 l       .debug_str	00000000 
00000868 l       .debug_str	00000000 
00009679 l       .debug_str	00000000 
000096d2 l       .debug_str	00000000 
000096e7 l       .debug_str	00000000 
00009740 l       .debug_str	00000000 
00009755 l       .debug_str	00000000 
0000791d l       .debug_str	00000000 
000097bb l       .debug_str	00000000 
00009812 l       .debug_str	00000000 
00009825 l       .debug_str	00000000 
00009875 l       .debug_str	00000000 
00009881 l       .debug_str	00000000 
000098d3 l       .debug_str	00000000 
000098e1 l       .debug_str	00000000 
0000992d l       .debug_str	00000000 
00009936 l       .debug_str	00000000 
00009989 l       .debug_str	00000000 
00009998 l       .debug_str	00000000 
000099c5 l       .debug_str	00000000 
00009a15 l       .debug_str	00000000 
00009a21 l       .debug_str	00000000 
00036eea l       .debug_str	00000000 
00009a6c l       .debug_str	00000000 
00009abd l       .debug_str	00000000 
00009aca l       .debug_str	00000000 
0002b7ad l       .debug_str	00000000 
00009b12 l       .debug_str	00000000 
00009b62 l       .debug_str	00000000 
00009b6e l       .debug_str	00000000 
00000bb7 l       .debug_str	00000000 
00009bf3 l       .debug_str	00000000 
00009c6f l       .debug_str	00000000 
00009cef l       .debug_str	00000000 
000106c4 l       .debug_str	00000000 
0000a452 l       .debug_str	00000000 
00009d5e l       .debug_str	00000000 
00009dca l       .debug_str	00000000 
00009e08 l       .debug_str	00000000 
000381ee l       .debug_str	00000000 
00000b1d l       .debug_str	00000000 
00000b25 l       .debug_str	00000000 
00000b2a l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000dcc l       .debug_str	00000000 
00009dfb l       .debug_str	00000000 
00009e03 l       .debug_str	00000000 
0000f9e9 l       .debug_str	00000000 
0000a3e3 l       .debug_str	00000000 
0000f9f6 l       .debug_str	00000000 
00009e0c l       .debug_str	00000000 
00009e14 l       .debug_str	00000000 
00009e19 l       .debug_str	00000000 
0000a6d6 l       .debug_str	00000000 
00009e22 l       .debug_str	00000000 
00009e64 l       .debug_str	00000000 
00009eae l       .debug_str	00000000 
00002df9 l       .debug_str	00000000 
00002e05 l       .debug_str	00000000 
00043a1a l       .debug_str	00000000 
00002e0d l       .debug_str	00000000 
0004208c l       .debug_str	00000000 
00002e15 l       .debug_str	00000000 
00009eb5 l       .debug_str	00000000 
00009ee0 l       .debug_str	00000000 
00009ec3 l       .debug_str	00000000 
00009eed l       .debug_str	00000000 
00041091 l       .debug_str	00000000 
00007a19 l       .debug_str	00000000 
0003c69a l       .debug_str	00000000 
00000050 l       .debug_str	00000000 
00007912 l       .debug_str	00000000 
00007917 l       .debug_str	00000000 
000114f6 l       .debug_str	00000000 
00039f5c l       .debug_str	00000000 
08006ff8 l     F .text	00000056 _ZN6mynewt8encoding12coap_context11CoapContext16key_strn_to_cstr17hb529d0c5fe367882E
0800704e l     F .text	00000056 _ZN6mynewt8encoding12coap_context11CoapContext18value_strn_to_cstr17h9e0d49dc0d23751dE
080073cc l     F .text	00000068 _ZN82_$LT$mynewt..encoding..coap_context..CoapError$u20$as$u20$core..cmp..PartialEq$GT$2eq17h6da722bd75e9643bE
08016340 l     O .text	00000028 str.0
00000000 l    df *ABS*	00000000 1mcd3vje3zvwnje
00000842 l       .debug_str	00000000 
0000bbcd l       .debug_str	00000000 
0000073c l       .debug_str	00000000 
00000ae9 l       .debug_str	00000000 
00000038 l       .debug_str	00000000 
000084cc l       .debug_str	00000000 
00008503 l       .debug_str	00000000 
00043f35 l       .debug_str	00000000 
00000b14 l       .debug_str	00000000 
00009f5f l       .debug_str	00000000 
00008d2b l       .debug_str	00000000 
0003709c l       .debug_str	00000000 
0000ba51 l       .debug_str	00000000 
00042ae8 l       .debug_str	00000000 
00043fa0 l       .debug_str	00000000 
000008fb l       .debug_str	00000000 
0000087d l       .debug_str	00000000 
00001e27 l       .debug_str	00000000 
00000dc7 l       .debug_str	00000000 
000018fe l       .debug_str	00000000 
00008d35 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1z84f9f9mw61shq7
00002fd8 l       .debug_str	00000000 
00000dcc l       .debug_str	00000000 
0000a095 l       .debug_str	00000000 
00007a95 l       .debug_str	00000000 
00000e1e l       .debug_str	00000000 
0000073c l       .debug_str	00000000 
00000ae9 l       .debug_str	00000000 
00000038 l       .debug_str	00000000 
000084cc l       .debug_str	00000000 
00000fde l       .debug_str	00000000 
0000b8e7 l       .debug_str	00000000 
00000fe2 l       .debug_str	00000000 
00000fed l       .debug_str	00000000 
0000119a l       .debug_str	00000000 
00000b00 l       .debug_str	00000000 
0003c69a l       .debug_str	00000000 
00009fb2 l       .debug_str	00000000 
00000b14 l       .debug_str	00000000 
00009fbd l       .debug_str	00000000 
00009ffb l       .debug_str	00000000 
0000a002 l       .debug_str	00000000 
000381ee l       .debug_str	00000000 
00000b1d l       .debug_str	00000000 
0000087d l       .debug_str	00000000 
0000084e l       .debug_str	00000000 
00000857 l       .debug_str	00000000 
0003eb70 l       .debug_str	00000000 
0000bbcd l       .debug_str	00000000 
00006608 l       .debug_str	00000000 
00000b25 l       .debug_str	00000000 
00000b2a l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
0000a00a l       .debug_str	00000000 
00000050 l       .debug_str	00000000 
000023dd l       .debug_str	00000000 
00002732 l       .debug_str	00000000 
000023e6 l       .debug_str	00000000 
0003e594 l       .debug_str	00000000 
000023ed l       .debug_str	00000000 
000023f9 l       .debug_str	00000000 
0003709c l       .debug_str	00000000 
0000ba51 l       .debug_str	00000000 
00000842 l       .debug_str	00000000 
0000250b l       .debug_str	00000000 
0000118a l       .debug_str	00000000 
00002401 l       .debug_str	00000000 
00043fa0 l       .debug_str	00000000 
000008fb l       .debug_str	00000000 
0000245b l       .debug_str	00000000 
000024bd l       .debug_str	00000000 
000024c8 l       .debug_str	00000000 
0000250f l       .debug_str	00000000 
0000255e l       .debug_str	00000000 
00002568 l       .debug_str	00000000 
000025a5 l       .debug_str	00000000 
000025ea l       .debug_str	00000000 
000025f3 l       .debug_str	00000000 
00002603 l       .debug_str	00000000 
0000260b l       .debug_str	00000000 
00002660 l       .debug_str	00000000 
000026bd l       .debug_str	00000000 
000026c9 l       .debug_str	00000000 
000026d2 l       .debug_str	00000000 
000026de l       .debug_str	00000000 
000026ea l       .debug_str	00000000 
000026f3 l       .debug_str	00000000 
000026fb l       .debug_str	00000000 
00000581 l       .debug_str	00000000 
00002703 l       .debug_str	00000000 
00002731 l       .debug_str	00000000 
00002718 l       .debug_str	00000000 
00002738 l       .debug_str	00000000 
0000273f l       .debug_str	00000000 
00002747 l       .debug_str	00000000 
00000708 l       .debug_str	00000000 
00002751 l       .debug_str	00000000 
000004ad l       .debug_str	00000000 
000006ee l       .debug_str	00000000 
0000b99b l       .debug_str	00000000 
0000066b l       .debug_str	00000000 
00000643 l       .debug_str	00000000 
000006cf l       .debug_str	00000000 
00037204 l       .debug_str	00000000 
00000609 l       .debug_str	00000000 
000004df l       .debug_str	00000000 
0003e04e l       .debug_str	00000000 
000364f6 l       .debug_str	00000000 
0000275a l       .debug_str	00000000 
00002787 l       .debug_str	00000000 
000026c3 l       .debug_str	00000000 
00038516 l       .debug_str	00000000 
00000521 l       .debug_str	00000000 
00000690 l       .debug_str	00000000 
000005f2 l       .debug_str	00000000 
000004f0 l       .debug_str	00000000 
000027bc l       .debug_str	00000000 
000027e5 l       .debug_str	00000000 
00002843 l       .debug_str	00000000 
000005d2 l       .debug_str	00000000 
000006d7 l       .debug_str	00000000 
000006af l       .debug_str	00000000 
000028a9 l       .debug_str	00000000 
000027d5 l       .debug_str	00000000 
000006fa l       .debug_str	00000000 
000004a2 l       .debug_str	00000000 
00000674 l       .debug_str	00000000 
000006df l       .debug_str	00000000 
000028c7 l       .debug_str	00000000 
0000065b l       .debug_str	00000000 
00000582 l       .debug_str	00000000 
00000509 l       .debug_str	00000000 
000028dd l       .debug_str	00000000 
00002903 l       .debug_str	00000000 
000004b8 l       .debug_str	00000000 
00002919 l       .debug_str	00000000 
0000645f l       .debug_str	00000000 
000028e2 l       .debug_str	00000000 
0000292f l       .debug_str	00000000 
0002ce96 l       .debug_str	00000000 
00002946 l       .debug_str	00000000 
0000294e l       .debug_str	00000000 
00002957 l       .debug_str	00000000 
00003d55 l       .debug_str	00000000 
00002960 l       .debug_str	00000000 
0000a35b l       .debug_str	00000000 
0003cfba l       .debug_str	00000000 
00002968 l       .debug_str	00000000 
00002974 l       .debug_str	00000000 
0000297f l       .debug_str	00000000 
00002987 l       .debug_str	00000000 
00004370 l       .debug_str	00000000 
000042eb l       .debug_str	00000000 
0000298f l       .debug_str	00000000 
00002a8b l       .debug_str	00000000 
00002b8f l       .debug_str	00000000 
00002b9d l       .debug_str	00000000 
00002ba8 l       .debug_str	00000000 
00000822 l       .debug_str	00000000 
00002bd5 l       .debug_str	00000000 
00002bb2 l       .debug_str	00000000 
00002be0 l       .debug_str	00000000 
00002c5b l       .debug_str	00000000 
00002cde l       .debug_str	00000000 
00002cec l       .debug_str	00000000 
00002d4b l       .debug_str	00000000 
00002db2 l       .debug_str	00000000 
00002dc8 l       .debug_str	00000000 
00002dd8 l       .debug_str	00000000 
0003a863 l       .debug_str	00000000 
000009aa l       .debug_str	00000000 
00002de7 l       .debug_str	00000000 
000114f6 l       .debug_str	00000000 
00002ded l       .debug_str	00000000 
00002df3 l       .debug_str	00000000 
00002df9 l       .debug_str	00000000 
00002e05 l       .debug_str	00000000 
00043a1a l       .debug_str	00000000 
00002e0d l       .debug_str	00000000 
0004208c l       .debug_str	00000000 
00002e15 l       .debug_str	00000000 
00002e5b l       .debug_str	00000000 
00002e38 l       .debug_str	00000000 
00002e6b l       .debug_str	00000000 
00002eab l       .debug_str	00000000 
0003a333 l       .debug_str	00000000 
00002ef3 l       .debug_str	00000000 
00002ef9 l       .debug_str	00000000 
00002eff l       .debug_str	00000000 
00002f28 l       .debug_str	00000000 
00002f05 l       .debug_str	00000000 
00002f3a l       .debug_str	00000000 
00002f7c l       .debug_str	00000000 
0003a1e5 l       .debug_str	00000000 
00002fc6 l       .debug_str	00000000 
00002fcc l       .debug_str	00000000 
00002fd2 l       .debug_str	00000000 
00002ffb l       .debug_str	00000000 
0000a013 l       .debug_str	00000000 
0000300d l       .debug_str	00000000 
0000304f l       .debug_str	00000000 
00039457 l       .debug_str	00000000 
00003099 l       .debug_str	00000000 
0000309f l       .debug_str	00000000 
000030a5 l       .debug_str	00000000 
000030ab l       .debug_str	00000000 
000030d4 l       .debug_str	00000000 
000030b1 l       .debug_str	00000000 
000030e5 l       .debug_str	00000000 
00003126 l       .debug_str	00000000 
0000316f l       .debug_str	00000000 
00003174 l       .debug_str	00000000 
0003a5e3 l       .debug_str	00000000 
00003179 l       .debug_str	00000000 
0000317f l       .debug_str	00000000 
00003185 l       .debug_str	00000000 
000031ae l       .debug_str	00000000 
0000318b l       .debug_str	00000000 
000031bf l       .debug_str	00000000 
00003200 l       .debug_str	00000000 
0003952b l       .debug_str	00000000 
00003249 l       .debug_str	00000000 
00003275 l       .debug_str	00000000 
00003252 l       .debug_str	00000000 
00003286 l       .debug_str	00000000 
000032c7 l       .debug_str	00000000 
00003310 l       .debug_str	00000000 
0003a806 l       .debug_str	00000000 
00003315 l       .debug_str	00000000 
0000331e l       .debug_str	00000000 
00003325 l       .debug_str	00000000 
00003350 l       .debug_str	00000000 
0000332d l       .debug_str	00000000 
00003362 l       .debug_str	00000000 
000033a4 l       .debug_str	00000000 
0003a46b l       .debug_str	00000000 
000033ee l       .debug_str	00000000 
000033f4 l       .debug_str	00000000 
000033fa l       .debug_str	00000000 
00003400 l       .debug_str	00000000 
00003406 l       .debug_str	00000000 
0000340e l       .debug_str	00000000 
0000341c l       .debug_str	00000000 
0000342b l       .debug_str	00000000 
0000343c l       .debug_str	00000000 
00003447 l       .debug_str	00000000 
00003452 l       .debug_str	00000000 
0000345d l       .debug_str	00000000 
00003464 l       .debug_str	00000000 
000034aa l       .debug_str	00000000 
00003487 l       .debug_str	00000000 
000034bc l       .debug_str	00000000 
000034fe l       .debug_str	00000000 
0003965a l       .debug_str	00000000 
00003548 l       .debug_str	00000000 
00003575 l       .debug_str	00000000 
00003552 l       .debug_str	00000000 
00003587 l       .debug_str	00000000 
000035c9 l       .debug_str	00000000 
00003613 l       .debug_str	00000000 
00003618 l       .debug_str	00000000 
00003645 l       .debug_str	00000000 
00003622 l       .debug_str	00000000 
00003657 l       .debug_str	00000000 
00003699 l       .debug_str	00000000 
000036e3 l       .debug_str	00000000 
0000bb07 l       .debug_str	00000000 
0003db77 l       .debug_str	00000000 
000036f7 l       .debug_str	00000000 
00003707 l       .debug_str	00000000 
00003710 l       .debug_str	00000000 
0000371b l       .debug_str	00000000 
0000372a l       .debug_str	00000000 
0000373f l       .debug_str	00000000 
00003770 l       .debug_str	00000000 
0000380d l       .debug_str	00000000 
000038b2 l       .debug_str	00000000 
000038bd l       .debug_str	00000000 
000038c6 l       .debug_str	00000000 
0000390a l       .debug_str	00000000 
000038e7 l       .debug_str	00000000 
0000391d l       .debug_str	00000000 
000039a0 l       .debug_str	00000000 
00003a2b l       .debug_str	00000000 
00003a47 l       .debug_str	00000000 
00003a93 l       .debug_str	00000000 
00003ae7 l       .debug_str	00000000 
00003b04 l       .debug_str	00000000 
00003b18 l       .debug_str	00000000 
00003b64 l       .debug_str	00000000 
00003bb8 l       .debug_str	00000000 
00003bce l       .debug_str	00000000 
00003be2 l       .debug_str	00000000 
00003c29 l       .debug_str	00000000 
00003c78 l       .debug_str	00000000 
00003ca4 l       .debug_str	00000000 
00003c81 l       .debug_str	00000000 
00003cb2 l       .debug_str	00000000 
00003cb8 l       .debug_str	00000000 
00003cc0 l       .debug_str	00000000 
00003cc7 l       .debug_str	00000000 
000049ef l       .debug_str	00000000 
00003ccf l       .debug_str	00000000 
00003cd7 l       .debug_str	00000000 
000108b5 l       .debug_str	00000000 
00003ce6 l       .debug_str	00000000 
00004a21 l       .debug_str	00000000 
00003cf1 l       .debug_str	00000000 
00003cfc l       .debug_str	00000000 
00003d0d l       .debug_str	00000000 
00003d13 l       .debug_str	00000000 
00003d1b l       .debug_str	00000000 
00003d22 l       .debug_str	00000000 
00003d2c l       .debug_str	00000000 
00003d34 l       .debug_str	00000000 
00003d3c l       .debug_str	00000000 
00003d5e l       .debug_str	00000000 
00003d69 l       .debug_str	00000000 
00003d75 l       .debug_str	00000000 
00003d7d l       .debug_str	00000000 
00003d86 l       .debug_str	00000000 
000005cb l       .debug_str	00000000 
00003d91 l       .debug_str	00000000 
00003d9c l       .debug_str	00000000 
00003da7 l       .debug_str	00000000 
00003db7 l       .debug_str	00000000 
000395bd l       .debug_str	00000000 
00004e10 l       .debug_str	00000000 
00003dc1 l       .debug_str	00000000 
00003df9 l       .debug_str	00000000 
00003e39 l       .debug_str	00000000 
00003e40 l       .debug_str	00000000 
00003e48 l       .debug_str	00000000 
00004e29 l       .debug_str	00000000 
00003e5f l       .debug_str	00000000 
00003e6f l       .debug_str	00000000 
00003e7e l       .debug_str	00000000 
00003e86 l       .debug_str	00000000 
00003e8d l       .debug_str	00000000 
0000f362 l       .debug_str	00000000 
00003eb8 l       .debug_str	00000000 
00003e95 l       .debug_str	00000000 
00003ec8 l       .debug_str	00000000 
00003edd l       .debug_str	00000000 
00003ee6 l       .debug_str	00000000 
00003f43 l       .debug_str	00000000 
00003fa8 l       .debug_str	00000000 
00003fb2 l       .debug_str	00000000 
00003fc2 l       .debug_str	00000000 
00003fd7 l       .debug_str	00000000 
00003fdf l       .debug_str	00000000 
00004043 l       .debug_str	00000000 
000040af l       .debug_str	00000000 
000040b6 l       .debug_str	00000000 
000040be l       .debug_str	00000000 
000040ff l       .debug_str	00000000 
000040dc l       .debug_str	00000000 
0000410f l       .debug_str	00000000 
00004124 l       .debug_str	00000000 
00004137 l       .debug_str	00000000 
0000414c l       .debug_str	00000000 
00004153 l       .debug_str	00000000 
00004168 l       .debug_str	00000000 
0000a0b2 l       .debug_str	00000000 
00000dc7 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 208map9ucpri05fl
0000309f l       .debug_str	00000000 
0000a452 l       .debug_str	00000000 
0000073c l       .debug_str	00000000 
00000ae9 l       .debug_str	00000000 
00000038 l       .debug_str	00000000 
000084cc l       .debug_str	00000000 
00000fde l       .debug_str	00000000 
0000b8e7 l       .debug_str	00000000 
00000fe2 l       .debug_str	00000000 
00000fed l       .debug_str	00000000 
0000119a l       .debug_str	00000000 
00000853 l       .debug_str	00000000 
00000b14 l       .debug_str	00000000 
00000b00 l       .debug_str	00000000 
0003c69a l       .debug_str	00000000 
00000050 l       .debug_str	00000000 
000023dd l       .debug_str	00000000 
00002732 l       .debug_str	00000000 
000023e6 l       .debug_str	00000000 
0003e594 l       .debug_str	00000000 
000023ed l       .debug_str	00000000 
000023f9 l       .debug_str	00000000 
0003709c l       .debug_str	00000000 
0000ba51 l       .debug_str	00000000 
00000842 l       .debug_str	00000000 
0000250b l       .debug_str	00000000 
0000118a l       .debug_str	00000000 
00002401 l       .debug_str	00000000 
00043fa0 l       .debug_str	00000000 
000008fb l       .debug_str	00000000 
0000087d l       .debug_str	00000000 
0000245b l       .debug_str	00000000 
000024bd l       .debug_str	00000000 
000024c8 l       .debug_str	00000000 
0000250f l       .debug_str	00000000 
0000255e l       .debug_str	00000000 
00002568 l       .debug_str	00000000 
000025a5 l       .debug_str	00000000 
000025ea l       .debug_str	00000000 
000025f3 l       .debug_str	00000000 
00002603 l       .debug_str	00000000 
0000260b l       .debug_str	00000000 
00002660 l       .debug_str	00000000 
000026bd l       .debug_str	00000000 
000026c9 l       .debug_str	00000000 
000026d2 l       .debug_str	00000000 
000026de l       .debug_str	00000000 
000026ea l       .debug_str	00000000 
000026f3 l       .debug_str	00000000 
00000857 l       .debug_str	00000000 
000026fb l       .debug_str	00000000 
00000581 l       .debug_str	00000000 
00002703 l       .debug_str	00000000 
00002731 l       .debug_str	00000000 
00002718 l       .debug_str	00000000 
00002738 l       .debug_str	00000000 
0000273f l       .debug_str	00000000 
00002747 l       .debug_str	00000000 
00000708 l       .debug_str	00000000 
00002751 l       .debug_str	00000000 
000004ad l       .debug_str	00000000 
000006ee l       .debug_str	00000000 
0000b99b l       .debug_str	00000000 
0000066b l       .debug_str	00000000 
00000643 l       .debug_str	00000000 
000006cf l       .debug_str	00000000 
00037204 l       .debug_str	00000000 
00000609 l       .debug_str	00000000 
000004df l       .debug_str	00000000 
0003e04e l       .debug_str	00000000 
000364f6 l       .debug_str	00000000 
0000275a l       .debug_str	00000000 
00002787 l       .debug_str	00000000 
000026c3 l       .debug_str	00000000 
00038516 l       .debug_str	00000000 
00000521 l       .debug_str	00000000 
00000690 l       .debug_str	00000000 
000005f2 l       .debug_str	00000000 
000004f0 l       .debug_str	00000000 
000027bc l       .debug_str	00000000 
000027e5 l       .debug_str	00000000 
00002843 l       .debug_str	00000000 
000005d2 l       .debug_str	00000000 
000006d7 l       .debug_str	00000000 
000006af l       .debug_str	00000000 
000028a9 l       .debug_str	00000000 
000027d5 l       .debug_str	00000000 
000006fa l       .debug_str	00000000 
000004a2 l       .debug_str	00000000 
00000674 l       .debug_str	00000000 
000006df l       .debug_str	00000000 
000028c7 l       .debug_str	00000000 
0000065b l       .debug_str	00000000 
00000582 l       .debug_str	00000000 
00000509 l       .debug_str	00000000 
000028dd l       .debug_str	00000000 
00002903 l       .debug_str	00000000 
000004b8 l       .debug_str	00000000 
00002919 l       .debug_str	00000000 
0000645f l       .debug_str	00000000 
000028e2 l       .debug_str	00000000 
0000292f l       .debug_str	00000000 
0002ce96 l       .debug_str	00000000 
00002946 l       .debug_str	00000000 
0000294e l       .debug_str	00000000 
00002957 l       .debug_str	00000000 
00003d55 l       .debug_str	00000000 
00002960 l       .debug_str	00000000 
0000a35b l       .debug_str	00000000 
0003cfba l       .debug_str	00000000 
00002968 l       .debug_str	00000000 
00002974 l       .debug_str	00000000 
0000297f l       .debug_str	00000000 
00002987 l       .debug_str	00000000 
00004168 l       .debug_str	00000000 
00004370 l       .debug_str	00000000 
000042eb l       .debug_str	00000000 
0000298f l       .debug_str	00000000 
00002a8b l       .debug_str	00000000 
00002b8f l       .debug_str	00000000 
00002b9d l       .debug_str	00000000 
00002ba8 l       .debug_str	00000000 
00000822 l       .debug_str	00000000 
00002bd5 l       .debug_str	00000000 
00002bb2 l       .debug_str	00000000 
00002be0 l       .debug_str	00000000 
00002c5b l       .debug_str	00000000 
00002cde l       .debug_str	00000000 
00002cec l       .debug_str	00000000 
00002d4b l       .debug_str	00000000 
00002db2 l       .debug_str	00000000 
00002dc8 l       .debug_str	00000000 
00002dd8 l       .debug_str	00000000 
0003a863 l       .debug_str	00000000 
000009aa l       .debug_str	00000000 
00002de7 l       .debug_str	00000000 
000114f6 l       .debug_str	00000000 
00002ded l       .debug_str	00000000 
00002df3 l       .debug_str	00000000 
00002df9 l       .debug_str	00000000 
00002e05 l       .debug_str	00000000 
00043a1a l       .debug_str	00000000 
00002e0d l       .debug_str	00000000 
0004208c l       .debug_str	00000000 
00002e15 l       .debug_str	00000000 
00002e5b l       .debug_str	00000000 
00002e38 l       .debug_str	00000000 
00002e6b l       .debug_str	00000000 
00002eab l       .debug_str	00000000 
0003a333 l       .debug_str	00000000 
00002ef3 l       .debug_str	00000000 
00002ef9 l       .debug_str	00000000 
00002eff l       .debug_str	00000000 
00002f28 l       .debug_str	00000000 
00002f05 l       .debug_str	00000000 
00002f3a l       .debug_str	00000000 
00002f7c l       .debug_str	00000000 
0003a1e5 l       .debug_str	00000000 
00002fc6 l       .debug_str	00000000 
00002fcc l       .debug_str	00000000 
00002fd2 l       .debug_str	00000000 
00002ffb l       .debug_str	00000000 
00002fd8 l       .debug_str	00000000 
0000300d l       .debug_str	00000000 
0000304f l       .debug_str	00000000 
00039457 l       .debug_str	00000000 
00003099 l       .debug_str	00000000 
0000a10d l       .debug_str	00000000 
000030a5 l       .debug_str	00000000 
000030ab l       .debug_str	00000000 
000030d4 l       .debug_str	00000000 
000030b1 l       .debug_str	00000000 
000030e5 l       .debug_str	00000000 
00003126 l       .debug_str	00000000 
0000316f l       .debug_str	00000000 
00003174 l       .debug_str	00000000 
0003a5e3 l       .debug_str	00000000 
00003179 l       .debug_str	00000000 
0000317f l       .debug_str	00000000 
00003185 l       .debug_str	00000000 
000031ae l       .debug_str	00000000 
0000318b l       .debug_str	00000000 
000031bf l       .debug_str	00000000 
00003200 l       .debug_str	00000000 
0003952b l       .debug_str	00000000 
00003249 l       .debug_str	00000000 
00003275 l       .debug_str	00000000 
00003252 l       .debug_str	00000000 
00003286 l       .debug_str	00000000 
000032c7 l       .debug_str	00000000 
00003310 l       .debug_str	00000000 
0003a806 l       .debug_str	00000000 
00003315 l       .debug_str	00000000 
0000331e l       .debug_str	00000000 
00003325 l       .debug_str	00000000 
00003350 l       .debug_str	00000000 
0000332d l       .debug_str	00000000 
00003362 l       .debug_str	00000000 
000033a4 l       .debug_str	00000000 
0003a46b l       .debug_str	00000000 
000033ee l       .debug_str	00000000 
000033f4 l       .debug_str	00000000 
000033fa l       .debug_str	00000000 
00003400 l       .debug_str	00000000 
00003406 l       .debug_str	00000000 
0000340e l       .debug_str	00000000 
0000341c l       .debug_str	00000000 
0000342b l       .debug_str	00000000 
0000343c l       .debug_str	00000000 
00003447 l       .debug_str	00000000 
00003452 l       .debug_str	00000000 
0000345d l       .debug_str	00000000 
00003464 l       .debug_str	00000000 
000034aa l       .debug_str	00000000 
00003487 l       .debug_str	00000000 
000034bc l       .debug_str	00000000 
000034fe l       .debug_str	00000000 
0003965a l       .debug_str	00000000 
00003548 l       .debug_str	00000000 
00003575 l       .debug_str	00000000 
00003552 l       .debug_str	00000000 
00003587 l       .debug_str	00000000 
000035c9 l       .debug_str	00000000 
00003613 l       .debug_str	00000000 
00003618 l       .debug_str	00000000 
00003645 l       .debug_str	00000000 
00003622 l       .debug_str	00000000 
00003657 l       .debug_str	00000000 
00003699 l       .debug_str	00000000 
000036e3 l       .debug_str	00000000 
0000bb07 l       .debug_str	00000000 
0003db77 l       .debug_str	00000000 
000036f7 l       .debug_str	00000000 
00003707 l       .debug_str	00000000 
00003710 l       .debug_str	00000000 
0000371b l       .debug_str	00000000 
0000372a l       .debug_str	00000000 
0000373f l       .debug_str	00000000 
00003770 l       .debug_str	00000000 
0000380d l       .debug_str	00000000 
000038b2 l       .debug_str	00000000 
000038bd l       .debug_str	00000000 
000038c6 l       .debug_str	00000000 
0000390a l       .debug_str	00000000 
000038e7 l       .debug_str	00000000 
0000391d l       .debug_str	00000000 
000039a0 l       .debug_str	00000000 
00003a2b l       .debug_str	00000000 
00003a47 l       .debug_str	00000000 
00003a93 l       .debug_str	00000000 
00003ae7 l       .debug_str	00000000 
00003b04 l       .debug_str	00000000 
00003b18 l       .debug_str	00000000 
00003b64 l       .debug_str	00000000 
00003bb8 l       .debug_str	00000000 
00003bce l       .debug_str	00000000 
00003be2 l       .debug_str	00000000 
00003c29 l       .debug_str	00000000 
00003c78 l       .debug_str	00000000 
00003ca4 l       .debug_str	00000000 
00003c81 l       .debug_str	00000000 
00003cb2 l       .debug_str	00000000 
00003cb8 l       .debug_str	00000000 
00003cc0 l       .debug_str	00000000 
00003cc7 l       .debug_str	00000000 
000049ef l       .debug_str	00000000 
00003ccf l       .debug_str	00000000 
00003cd7 l       .debug_str	00000000 
000108b5 l       .debug_str	00000000 
00003ce6 l       .debug_str	00000000 
00004a21 l       .debug_str	00000000 
00003cf1 l       .debug_str	00000000 
00003cfc l       .debug_str	00000000 
00003d0d l       .debug_str	00000000 
00003d13 l       .debug_str	00000000 
00003d1b l       .debug_str	00000000 
00003d22 l       .debug_str	00000000 
00003d2c l       .debug_str	00000000 
00003d34 l       .debug_str	00000000 
00003d3c l       .debug_str	00000000 
00003d5e l       .debug_str	00000000 
00003d69 l       .debug_str	00000000 
00003d75 l       .debug_str	00000000 
00003d7d l       .debug_str	00000000 
00003d86 l       .debug_str	00000000 
000005cb l       .debug_str	00000000 
00003d91 l       .debug_str	00000000 
00003d9c l       .debug_str	00000000 
00003da7 l       .debug_str	00000000 
00003db7 l       .debug_str	00000000 
000395bd l       .debug_str	00000000 
00004e10 l       .debug_str	00000000 
00003dc1 l       .debug_str	00000000 
00003df9 l       .debug_str	00000000 
00003e39 l       .debug_str	00000000 
00003e40 l       .debug_str	00000000 
00003e48 l       .debug_str	00000000 
00004e29 l       .debug_str	00000000 
00003e5f l       .debug_str	00000000 
00003e6f l       .debug_str	00000000 
00003e7e l       .debug_str	00000000 
00003e86 l       .debug_str	00000000 
00003e8d l       .debug_str	00000000 
0000f362 l       .debug_str	00000000 
00003eb8 l       .debug_str	00000000 
00003e95 l       .debug_str	00000000 
00003ec8 l       .debug_str	00000000 
00003edd l       .debug_str	00000000 
00003ee6 l       .debug_str	00000000 
00003f43 l       .debug_str	00000000 
00003fa8 l       .debug_str	00000000 
00003fb2 l       .debug_str	00000000 
00003fc2 l       .debug_str	00000000 
00003fd7 l       .debug_str	00000000 
00003fdf l       .debug_str	00000000 
00004043 l       .debug_str	00000000 
000040af l       .debug_str	00000000 
000040b6 l       .debug_str	00000000 
000040be l       .debug_str	00000000 
000040ff l       .debug_str	00000000 
000040dc l       .debug_str	00000000 
0000410f l       .debug_str	00000000 
00004124 l       .debug_str	00000000 
00004137 l       .debug_str	00000000 
0000414c l       .debug_str	00000000 
00004153 l       .debug_str	00000000 
0000a0c3 l       .debug_str	00000000 
00000dc7 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 291sqjmh47bw16ws
00003e8d l       .debug_str	00000000 
000056e4 l       .debug_str	00000000 
000447f8 l       .debug_str	00000000 
000056e0 l       .debug_str	00000000 
00004580 l       .debug_str	00000000 
000056c5 l       .debug_str	00000000 
0004491f l       .debug_str	00000000 
000056bd l       .debug_str	00000000 
0000e0d5 l       .debug_str	00000000 
00005458 l       .debug_str	00000000 
0000e0ac l       .debug_str	00000000 
000056b6 l       .debug_str	00000000 
0000e077 l       .debug_str	00000000 
0003eb31 l       .debug_str	00000000 
0000e04f l       .debug_str	00000000 
000056a8 l       .debug_str	00000000 
0000e021 l       .debug_str	00000000 
0000569f l       .debug_str	00000000 
0000dff9 l       .debug_str	00000000 
00005697 l       .debug_str	00000000 
0000dfba l       .debug_str	00000000 
0000ce96 l       .debug_str	00000000 
0000df92 l       .debug_str	00000000 
0000ce6e l       .debug_str	00000000 
0000df67 l       .debug_str	00000000 
0000ce5a l       .debug_str	00000000 
0000df3f l       .debug_str	00000000 
0000ce4e l       .debug_str	00000000 
00005bba l       .debug_str	00000000 
0000ce42 l       .debug_str	00000000 
00005cbb l       .debug_str	00000000 
0000ce39 l       .debug_str	00000000 
00005c3e l       .debug_str	00000000 
0000cdfe l       .debug_str	00000000 
00005bc9 l       .debug_str	00000000 
0000cdd6 l       .debug_str	00000000 
00005ba1 l       .debug_str	00000000 
0000cdaa l       .debug_str	00000000 
00005b96 l       .debug_str	00000000 
0000cd82 l       .debug_str	00000000 
00005b8f l       .debug_str	00000000 
0000cd46 l       .debug_str	00000000 
0000df07 l       .debug_str	00000000 
0000cd1e l       .debug_str	00000000 
0000dedf l       .debug_str	00000000 
0000ccda l       .debug_str	00000000 
0000dea4 l       .debug_str	00000000 
0000ccb2 l       .debug_str	00000000 
0000de7c l       .debug_str	00000000 
0000cc71 l       .debug_str	00000000 
0000de45 l       .debug_str	00000000 
0000cc49 l       .debug_str	00000000 
0000de1d l       .debug_str	00000000 
0000cc19 l       .debug_str	00000000 
0000dddc l       .debug_str	00000000 
0000cbf1 l       .debug_str	00000000 
0000ddb4 l       .debug_str	00000000 
0000cbbf l       .debug_str	00000000 
0000dd8d l       .debug_str	00000000 
0000cb97 l       .debug_str	00000000 
0000dd65 l       .debug_str	00000000 
0000cb5e l       .debug_str	00000000 
0000dd1e l       .debug_str	00000000 
0000cb36 l       .debug_str	00000000 
0000dcf6 l       .debug_str	00000000 
0000cb07 l       .debug_str	00000000 
0000dcbc l       .debug_str	00000000 
0000cadf l       .debug_str	00000000 
0000dc94 l       .debug_str	00000000 
0000cad4 l       .debug_str	00000000 
0000dc63 l       .debug_str	00000000 
0000cacc l       .debug_str	00000000 
0000dc3b l       .debug_str	00000000 
0000cac3 l       .debug_str	00000000 
0000dbff l       .debug_str	00000000 
0000ca96 l       .debug_str	00000000 
0000dbd7 l       .debug_str	00000000 
0000ca6e l       .debug_str	00000000 
0000dba4 l       .debug_str	00000000 
0000ca41 l       .debug_str	00000000 
0000db7c l       .debug_str	00000000 
0000ca19 l       .debug_str	00000000 
0000db3b l       .debug_str	00000000 
0000c9da l       .debug_str	00000000 
0000db13 l       .debug_str	00000000 
0000c9b2 l       .debug_str	00000000 
0000daef l       .debug_str	00000000 
00001264 l       .debug_str	00000000 
0000dac7 l       .debug_str	00000000 
0000124f l       .debug_str	00000000 
0000da7e l       .debug_str	00000000 
000011f4 l       .debug_str	00000000 
0000da56 l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
0000da1d l       .debug_str	00000000 
00001172 l       .debug_str	00000000 
0000d9f5 l       .debug_str	00000000 
0000115d l       .debug_str	00000000 
0000d9ca l       .debug_str	00000000 
0000114e l       .debug_str	00000000 
0000d9a2 l       .debug_str	00000000 
000378cf l       .debug_str	00000000 
0000d970 l       .debug_str	00000000 
000010bc l       .debug_str	00000000 
0000d948 l       .debug_str	00000000 
0000c982 l       .debug_str	00000000 
0000d914 l       .debug_str	00000000 
0000c95a l       .debug_str	00000000 
0000d8ec l       .debug_str	00000000 
0000c911 l       .debug_str	00000000 
0000b485 l       .debug_str	00000000 
0000c8e9 l       .debug_str	00000000 
0000d8dc l       .debug_str	00000000 
0000c8aa l       .debug_str	00000000 
0000d8d1 l       .debug_str	00000000 
0000c882 l       .debug_str	00000000 
0000d8be l       .debug_str	00000000 
0000c85f l       .debug_str	00000000 
0003a5b8 l       .debug_str	00000000 
0000c837 l       .debug_str	00000000 
0000d892 l       .debug_str	00000000 
0000c809 l       .debug_str	00000000 
0000d86a l       .debug_str	00000000 
0000c7e1 l       .debug_str	00000000 
0000d831 l       .debug_str	00000000 
0000c7d7 l       .debug_str	00000000 
0000d809 l       .debug_str	00000000 
0000c7d1 l       .debug_str	00000000 
0000d7cc l       .debug_str	00000000 
0003b8f8 l       .debug_str	00000000 
0000d7a4 l       .debug_str	00000000 
0000c7a3 l       .debug_str	00000000 
0000d768 l       .debug_str	00000000 
0003dbcf l       .debug_str	00000000 
0000d740 l       .debug_str	00000000 
0000c780 l       .debug_str	00000000 
0000d6e9 l       .debug_str	00000000 
0000c758 l       .debug_str	00000000 
0000d69a l       .debug_str	00000000 
00006355 l       .debug_str	00000000 
0000d65e l       .debug_str	00000000 
0000634a l       .debug_str	00000000 
0000d636 l       .debug_str	00000000 
00006341 l       .debug_str	00000000 
0000d5f2 l       .debug_str	00000000 
0000c71a l       .debug_str	00000000 
0000d5ca l       .debug_str	00000000 
0000c6f2 l       .debug_str	00000000 
0000d593 l       .debug_str	00000000 
0000547e l       .debug_str	00000000 
0000d56b l       .debug_str	00000000 
0000c6c5 l       .debug_str	00000000 
0000d530 l       .debug_str	00000000 
0000c6e5 l       .debug_str	00000000 
0000d508 l       .debug_str	00000000 
0000c69a l       .debug_str	00000000 
0000d4c6 l       .debug_str	00000000 
0000534d l       .debug_str	00000000 
0000d49e l       .debug_str	00000000 
0000533d l       .debug_str	00000000 
0000d463 l       .debug_str	00000000 
0000c66f l       .debug_str	00000000 
0000d43b l       .debug_str	00000000 
0000c647 l       .debug_str	00000000 
0000d3fe l       .debug_str	00000000 
0000c60a l       .debug_str	00000000 
0000d3d6 l       .debug_str	00000000 
0000c5e2 l       .debug_str	00000000 
0000d3b2 l       .debug_str	00000000 
0000c5a7 l       .debug_str	00000000 
0000d38a l       .debug_str	00000000 
0000c57f l       .debug_str	00000000 
0000d354 l       .debug_str	00000000 
0000c556 l       .debug_str	00000000 
0000d32c l       .debug_str	00000000 
0000c52e l       .debug_str	00000000 
0000d31c l       .debug_str	00000000 
00000683 l       .debug_str	00000000 
0000d313 l       .debug_str	00000000 
0000c4e5 l       .debug_str	00000000 
0000d309 l       .debug_str	00000000 
0000c4bd l       .debug_str	00000000 
0000d2d0 l       .debug_str	00000000 
0000c48c l       .debug_str	00000000 
0000d2a8 l       .debug_str	00000000 
0000c464 l       .debug_str	00000000 
0000d280 l       .debug_str	00000000 
0000c435 l       .debug_str	00000000 
0000d24b l       .debug_str	00000000 
0000c40d l       .debug_str	00000000 
0000d223 l       .debug_str	00000000 
0000c3dc l       .debug_str	00000000 
0000d1eb l       .debug_str	00000000 
0000c3b4 l       .debug_str	00000000 
0000d1c3 l       .debug_str	00000000 
000062c5 l       .debug_str	00000000 
0000d18b l       .debug_str	00000000 
0000c37f l       .debug_str	00000000 
0000d163 l       .debug_str	00000000 
0000c357 l       .debug_str	00000000 
0000d133 l       .debug_str	00000000 
000053a1 l       .debug_str	00000000 
0000d10b l       .debug_str	00000000 
0000542b l       .debug_str	00000000 
0000fa69 l       .debug_str	00000000 
0000c6ba l       .debug_str	00000000 
0000d101 l       .debug_str	00000000 
000053ba l       .debug_str	00000000 
0000d0f9 l       .debug_str	00000000 
00005399 l       .debug_str	00000000 
0000d0f0 l       .debug_str	00000000 
0000538a l       .debug_str	00000000 
00009e08 l       .debug_str	00000000 
0000558c l       .debug_str	00000000 
0000d0ca l       .debug_str	00000000 
0000537e l       .debug_str	00000000 
0000d0a2 l       .debug_str	00000000 
00005372 l       .debug_str	00000000 
000058d3 l       .debug_str	00000000 
00005364 l       .debug_str	00000000 
000058cd l       .debug_str	00000000 
00005356 l       .debug_str	00000000 
000058c5 l       .debug_str	00000000 
0000c327 l       .debug_str	00000000 
0000d079 l       .debug_str	00000000 
0000c2ff l       .debug_str	00000000 
0000d051 l       .debug_str	00000000 
000099b9 l       .debug_str	00000000 
0000d017 l       .debug_str	00000000 
000095db l       .debug_str	00000000 
0000cfef l       .debug_str	00000000 
000095d0 l       .debug_str	00000000 
0000cfb4 l       .debug_str	00000000 
0000959b l       .debug_str	00000000 
0000cf8c l       .debug_str	00000000 
000095bc l       .debug_str	00000000 
0000cf52 l       .debug_str	00000000 
0000958d l       .debug_str	00000000 
0000cf2a l       .debug_str	00000000 
00009523 l       .debug_str	00000000 
0000cef8 l       .debug_str	00000000 
000094c1 l       .debug_str	00000000 
0000ced0 l       .debug_str	00000000 
000380e3 l       .debug_str	00000000 
00005720 l       .debug_str	00000000 
0000c2c5 l       .debug_str	00000000 
000056ff l       .debug_str	00000000 
0000c29d l       .debug_str	00000000 
0000073c l       .debug_str	00000000 
00000ae9 l       .debug_str	00000000 
00000038 l       .debug_str	00000000 
000084cc l       .debug_str	00000000 
00000fde l       .debug_str	00000000 
0000b8e7 l       .debug_str	00000000 
00000fe2 l       .debug_str	00000000 
00000fed l       .debug_str	00000000 
0000119a l       .debug_str	00000000 
0003c4b3 l       .debug_str	00000000 
0000ba51 l       .debug_str	00000000 
00043fa0 l       .debug_str	00000000 
0000a13b l       .debug_str	00000000 
0000a161 l       .debug_str	00000000 
00000b00 l       .debug_str	00000000 
000023e6 l       .debug_str	00000000 
0003e594 l       .debug_str	00000000 
00000582 l       .debug_str	00000000 
0000511e l       .debug_str	00000000 
0000118a l       .debug_str	00000000 
00005128 l       .debug_str	00000000 
0003709c l       .debug_str	00000000 
00000842 l       .debug_str	00000000 
0000275a l       .debug_str	00000000 
000008fb l       .debug_str	00000000 
0000087d l       .debug_str	00000000 
00002787 l       .debug_str	00000000 
0003f225 l       .debug_str	00000000 
00005130 l       .debug_str	00000000 
00005137 l       .debug_str	00000000 
0000515a l       .debug_str	00000000 
00005141 l       .debug_str	00000000 
00000509 l       .debug_str	00000000 
0000513c l       .debug_str	00000000 
00005164 l       .debug_str	00000000 
0000a16b l       .debug_str	00000000 
0000a193 l       .debug_str	00000000 
00005583 l       .debug_str	00000000 
0000b99b l       .debug_str	00000000 
0000558b l       .debug_str	00000000 
0000544f l       .debug_str	00000000 
00000581 l       .debug_str	00000000 
0000581b l       .debug_str	00000000 
00005595 l       .debug_str	00000000 
00005834 l       .debug_str	00000000 
0000a1c7 l       .debug_str	00000000 
0000a1ef l       .debug_str	00000000 
000053cb l       .debug_str	00000000 
000006af l       .debug_str	00000000 
000053ed l       .debug_str	00000000 
000053d3 l       .debug_str	00000000 
0000c162 l       .debug_str	00000000 
0000a21a l       .debug_str	00000000 
0000a242 l       .debug_str	00000000 
0003c69a l       .debug_str	00000000 
00000050 l       .debug_str	00000000 
000023dd l       .debug_str	00000000 
0000a26a l       .debug_str	00000000 
00002732 l       .debug_str	00000000 
000023ed l       .debug_str	00000000 
000023f9 l       .debug_str	00000000 
0000250b l       .debug_str	00000000 
00002401 l       .debug_str	00000000 
0000245b l       .debug_str	00000000 
000024bd l       .debug_str	00000000 
000024c8 l       .debug_str	00000000 
0000250f l       .debug_str	00000000 
0000255e l       .debug_str	00000000 
00002568 l       .debug_str	00000000 
000025a5 l       .debug_str	00000000 
000025ea l       .debug_str	00000000 
000025f3 l       .debug_str	00000000 
00002603 l       .debug_str	00000000 
0000260b l       .debug_str	00000000 
00002660 l       .debug_str	00000000 
000026bd l       .debug_str	00000000 
000026c9 l       .debug_str	00000000 
000026d2 l       .debug_str	00000000 
000026de l       .debug_str	00000000 
000026ea l       .debug_str	00000000 
000026f3 l       .debug_str	00000000 
00000857 l       .debug_str	00000000 
000026fb l       .debug_str	00000000 
00002703 l       .debug_str	00000000 
00002731 l       .debug_str	00000000 
00002718 l       .debug_str	00000000 
00002738 l       .debug_str	00000000 
0000273f l       .debug_str	00000000 
00002747 l       .debug_str	00000000 
00000708 l       .debug_str	00000000 
00002751 l       .debug_str	00000000 
000004ad l       .debug_str	00000000 
000006ee l       .debug_str	00000000 
0000066b l       .debug_str	00000000 
00000643 l       .debug_str	00000000 
000006cf l       .debug_str	00000000 
00037204 l       .debug_str	00000000 
00000609 l       .debug_str	00000000 
000004df l       .debug_str	00000000 
0003e04e l       .debug_str	00000000 
000364f6 l       .debug_str	00000000 
000026c3 l       .debug_str	00000000 
00038516 l       .debug_str	00000000 
00000521 l       .debug_str	00000000 
00000690 l       .debug_str	00000000 
000005f2 l       .debug_str	00000000 
000004f0 l       .debug_str	00000000 
000027bc l       .debug_str	00000000 
000027e5 l       .debug_str	00000000 
00002843 l       .debug_str	00000000 
000005d2 l       .debug_str	00000000 
000006d7 l       .debug_str	00000000 
000028a9 l       .debug_str	00000000 
000027d5 l       .debug_str	00000000 
000006fa l       .debug_str	00000000 
000004a2 l       .debug_str	00000000 
00000674 l       .debug_str	00000000 
000006df l       .debug_str	00000000 
000028c7 l       .debug_str	00000000 
0000065b l       .debug_str	00000000 
000028dd l       .debug_str	00000000 
00002903 l       .debug_str	00000000 
000004b8 l       .debug_str	00000000 
00002919 l       .debug_str	00000000 
0000645f l       .debug_str	00000000 
000028e2 l       .debug_str	00000000 
0000292f l       .debug_str	00000000 
0002ce96 l       .debug_str	00000000 
00002946 l       .debug_str	00000000 
0000294e l       .debug_str	00000000 
00002957 l       .debug_str	00000000 
00003d55 l       .debug_str	00000000 
00002960 l       .debug_str	00000000 
0000a35b l       .debug_str	00000000 
0003cfba l       .debug_str	00000000 
00002968 l       .debug_str	00000000 
00002974 l       .debug_str	00000000 
0000297f l       .debug_str	00000000 
00002987 l       .debug_str	00000000 
00004370 l       .debug_str	00000000 
000042eb l       .debug_str	00000000 
0000298f l       .debug_str	00000000 
00002a8b l       .debug_str	00000000 
00002b8f l       .debug_str	00000000 
00002b9d l       .debug_str	00000000 
00002ba8 l       .debug_str	00000000 
00000822 l       .debug_str	00000000 
00002bd5 l       .debug_str	00000000 
00002bb2 l       .debug_str	00000000 
00002be0 l       .debug_str	00000000 
00002c5b l       .debug_str	00000000 
00002cde l       .debug_str	00000000 
00002cec l       .debug_str	00000000 
00002d4b l       .debug_str	00000000 
00002db2 l       .debug_str	00000000 
00002dc8 l       .debug_str	00000000 
00002dd8 l       .debug_str	00000000 
0003a863 l       .debug_str	00000000 
000009aa l       .debug_str	00000000 
00002de7 l       .debug_str	00000000 
000114f6 l       .debug_str	00000000 
00002ded l       .debug_str	00000000 
00002df3 l       .debug_str	00000000 
00002df9 l       .debug_str	00000000 
00002e05 l       .debug_str	00000000 
00043a1a l       .debug_str	00000000 
00002e0d l       .debug_str	00000000 
0004208c l       .debug_str	00000000 
00002e15 l       .debug_str	00000000 
00002e5b l       .debug_str	00000000 
00002e38 l       .debug_str	00000000 
00002e6b l       .debug_str	00000000 
00002eab l       .debug_str	00000000 
0003a333 l       .debug_str	00000000 
00002ef3 l       .debug_str	00000000 
00002ef9 l       .debug_str	00000000 
00002eff l       .debug_str	00000000 
00002f28 l       .debug_str	00000000 
00002f05 l       .debug_str	00000000 
00002f3a l       .debug_str	00000000 
00002f7c l       .debug_str	00000000 
0003a1e5 l       .debug_str	00000000 
00002fc6 l       .debug_str	00000000 
00002fcc l       .debug_str	00000000 
00002fd2 l       .debug_str	00000000 
00002ffb l       .debug_str	00000000 
00002fd8 l       .debug_str	00000000 
0000300d l       .debug_str	00000000 
0000304f l       .debug_str	00000000 
00039457 l       .debug_str	00000000 
00003099 l       .debug_str	00000000 
0000309f l       .debug_str	00000000 
000030a5 l       .debug_str	00000000 
000030ab l       .debug_str	00000000 
000030d4 l       .debug_str	00000000 
000030b1 l       .debug_str	00000000 
000030e5 l       .debug_str	00000000 
00003126 l       .debug_str	00000000 
0000316f l       .debug_str	00000000 
00003174 l       .debug_str	00000000 
0003a5e3 l       .debug_str	00000000 
00003179 l       .debug_str	00000000 
0000317f l       .debug_str	00000000 
00003185 l       .debug_str	00000000 
000031ae l       .debug_str	00000000 
0000318b l       .debug_str	00000000 
000031bf l       .debug_str	00000000 
00003200 l       .debug_str	00000000 
0003952b l       .debug_str	00000000 
00003249 l       .debug_str	00000000 
00003275 l       .debug_str	00000000 
00003252 l       .debug_str	00000000 
00003286 l       .debug_str	00000000 
000032c7 l       .debug_str	00000000 
00003310 l       .debug_str	00000000 
0003a806 l       .debug_str	00000000 
00003315 l       .debug_str	00000000 
0000331e l       .debug_str	00000000 
00003325 l       .debug_str	00000000 
00003350 l       .debug_str	00000000 
0000332d l       .debug_str	00000000 
00003362 l       .debug_str	00000000 
000033a4 l       .debug_str	00000000 
0003a46b l       .debug_str	00000000 
000033ee l       .debug_str	00000000 
000033f4 l       .debug_str	00000000 
000033fa l       .debug_str	00000000 
00003400 l       .debug_str	00000000 
00003406 l       .debug_str	00000000 
0000340e l       .debug_str	00000000 
0000341c l       .debug_str	00000000 
0000342b l       .debug_str	00000000 
0000343c l       .debug_str	00000000 
00003447 l       .debug_str	00000000 
00003452 l       .debug_str	00000000 
0000345d l       .debug_str	00000000 
00003464 l       .debug_str	00000000 
000034aa l       .debug_str	00000000 
00003487 l       .debug_str	00000000 
000034bc l       .debug_str	00000000 
000034fe l       .debug_str	00000000 
0003965a l       .debug_str	00000000 
00003548 l       .debug_str	00000000 
00003575 l       .debug_str	00000000 
00003552 l       .debug_str	00000000 
00003587 l       .debug_str	00000000 
000035c9 l       .debug_str	00000000 
00003613 l       .debug_str	00000000 
00003618 l       .debug_str	00000000 
00003645 l       .debug_str	00000000 
00003622 l       .debug_str	00000000 
00003657 l       .debug_str	00000000 
00003699 l       .debug_str	00000000 
000036e3 l       .debug_str	00000000 
0000bb07 l       .debug_str	00000000 
0003db77 l       .debug_str	00000000 
000036f7 l       .debug_str	00000000 
00003707 l       .debug_str	00000000 
00003710 l       .debug_str	00000000 
0000371b l       .debug_str	00000000 
0000372a l       .debug_str	00000000 
0000373f l       .debug_str	00000000 
00003770 l       .debug_str	00000000 
0000380d l       .debug_str	00000000 
000038b2 l       .debug_str	00000000 
000038bd l       .debug_str	00000000 
000038c6 l       .debug_str	00000000 
0000390a l       .debug_str	00000000 
000038e7 l       .debug_str	00000000 
0000391d l       .debug_str	00000000 
000039a0 l       .debug_str	00000000 
00003a2b l       .debug_str	00000000 
00003a47 l       .debug_str	00000000 
00003a93 l       .debug_str	00000000 
00003ae7 l       .debug_str	00000000 
00003b04 l       .debug_str	00000000 
00003b18 l       .debug_str	00000000 
00003b64 l       .debug_str	00000000 
00003bb8 l       .debug_str	00000000 
00003bce l       .debug_str	00000000 
00003be2 l       .debug_str	00000000 
00003c29 l       .debug_str	00000000 
00003c78 l       .debug_str	00000000 
00003ca4 l       .debug_str	00000000 
00003c81 l       .debug_str	00000000 
00003cb2 l       .debug_str	00000000 
00003cb8 l       .debug_str	00000000 
00003cc0 l       .debug_str	00000000 
00003cc7 l       .debug_str	00000000 
000049ef l       .debug_str	00000000 
00003ccf l       .debug_str	00000000 
00003cd7 l       .debug_str	00000000 
000108b5 l       .debug_str	00000000 
00003ce6 l       .debug_str	00000000 
00004a21 l       .debug_str	00000000 
00003cf1 l       .debug_str	00000000 
00003cfc l       .debug_str	00000000 
00003d0d l       .debug_str	00000000 
00003d13 l       .debug_str	00000000 
00003d1b l       .debug_str	00000000 
00003d22 l       .debug_str	00000000 
00003d2c l       .debug_str	00000000 
00003d34 l       .debug_str	00000000 
00003d3c l       .debug_str	00000000 
00003d5e l       .debug_str	00000000 
00003d69 l       .debug_str	00000000 
00003d75 l       .debug_str	00000000 
00003d7d l       .debug_str	00000000 
00003d86 l       .debug_str	00000000 
000005cb l       .debug_str	00000000 
00003d91 l       .debug_str	00000000 
00003d9c l       .debug_str	00000000 
00003da7 l       .debug_str	00000000 
00003db7 l       .debug_str	00000000 
000395bd l       .debug_str	00000000 
00004e10 l       .debug_str	00000000 
00003dc1 l       .debug_str	00000000 
00003df9 l       .debug_str	00000000 
00003e39 l       .debug_str	00000000 
00003e40 l       .debug_str	00000000 
00003e48 l       .debug_str	00000000 
00004e29 l       .debug_str	00000000 
00003e5f l       .debug_str	00000000 
00003e6f l       .debug_str	00000000 
00003e7e l       .debug_str	00000000 
00003e86 l       .debug_str	00000000 
0000c25e l       .debug_str	00000000 
0000f362 l       .debug_str	00000000 
00003eb8 l       .debug_str	00000000 
00003e95 l       .debug_str	00000000 
00003ec8 l       .debug_str	00000000 
00003edd l       .debug_str	00000000 
00003ee6 l       .debug_str	00000000 
00003f43 l       .debug_str	00000000 
00003fa8 l       .debug_str	00000000 
00003fb2 l       .debug_str	00000000 
00003fc2 l       .debug_str	00000000 
00003fd7 l       .debug_str	00000000 
00003fdf l       .debug_str	00000000 
00004043 l       .debug_str	00000000 
000040af l       .debug_str	00000000 
000040b6 l       .debug_str	00000000 
000040be l       .debug_str	00000000 
000040ff l       .debug_str	00000000 
000040dc l       .debug_str	00000000 
0000410f l       .debug_str	00000000 
00004124 l       .debug_str	00000000 
00004137 l       .debug_str	00000000 
0000414c l       .debug_str	00000000 
00004153 l       .debug_str	00000000 
00004168 l       .debug_str	00000000 
0000a276 l       .debug_str	00000000 
0000a282 l       .debug_str	00000000 
0000a297 l       .debug_str	00000000 
0000a2bf l       .debug_str	00000000 
00004adb l       .debug_str	00000000 
000049c8 l       .debug_str	00000000 
000049d4 l       .debug_str	00000000 
000049fa l       .debug_str	00000000 
00004a06 l       .debug_str	00000000 
00004a2d l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
00004a43 l       .debug_str	00000000 
0000a452 l       .debug_str	00000000 
00004afd l       .debug_str	00000000 
00004ae2 l       .debug_str	00000000 
00004b11 l       .debug_str	00000000 
00004b6e l       .debug_str	00000000 
00004bd3 l       .debug_str	00000000 
00004bdb l       .debug_str	00000000 
00004be4 l       .debug_str	00000000 
00004c15 l       .debug_str	00000000 
00004bfd l       .debug_str	00000000 
0000a2fa l       .debug_str	00000000 
0000a322 l       .debug_str	00000000 
00037b87 l       .debug_str	00000000 
00009e14 l       .debug_str	00000000 
00038064 l       .debug_str	00000000 
0000a356 l       .debug_str	00000000 
0000a35f l       .debug_str	00000000 
0000a375 l       .debug_str	00000000 
0000a393 l       .debug_str	00000000 
0000a39c l       .debug_str	00000000 
0000a3a5 l       .debug_str	00000000 
0000a3bb l       .debug_str	00000000 
0000a3d9 l       .debug_str	00000000 
0000a3e3 l       .debug_str	00000000 
0000a3de l       .debug_str	00000000 
0000a3e7 l       .debug_str	00000000 
0000a3fd l       .debug_str	00000000 
00037dea l       .debug_str	00000000 
0000a6d6 l       .debug_str	00000000 
0000a41b l       .debug_str	00000000 
0000a430 l       .debug_str	00000000 
000384e4 l       .debug_str	00000000 
0000a44d l       .debug_str	00000000 
0000a457 l       .debug_str	00000000 
0000a46e l       .debug_str	00000000 
0000a48d l       .debug_str	00000000 
00037fa5 l       .debug_str	00000000 
0000a497 l       .debug_str	00000000 
00038228 l       .debug_str	00000000 
000384f3 l       .debug_str	00000000 
0000a4a4 l       .debug_str	00000000 
0000a4ac l       .debug_str	00000000 
0000a4b6 l       .debug_str	00000000 
0004020a l       .debug_str	00000000 
0000053d l       .debug_str	00000000 
0000a4bc l       .debug_str	00000000 
0000a4cd l       .debug_str	00000000 
0000a4e6 l       .debug_str	00000000 
0000a4f7 l       .debug_str	00000000 
0000a510 l       .debug_str	00000000 
0000a521 l       .debug_str	00000000 
0000a53a l       .debug_str	00000000 
0000a54c l       .debug_str	00000000 
000056d0 l       .debug_str	00000000 
0000a566 l       .debug_str	00000000 
0002b56a l       .debug_str	00000000 
0000a57e l       .debug_str	00000000 
00038c5b l       .debug_str	00000000 
0000bbcd l       .debug_str	00000000 
0002cf61 l       .debug_str	00000000 
000026f6 l       .debug_str	00000000 
0003a53b l       .debug_str	00000000 
0000a5b7 l       .debug_str	00000000 
0000a598 l       .debug_str	00000000 
0000a5c3 l       .debug_str	00000000 
0000a5ec l       .debug_str	00000000 
0000a5cd l       .debug_str	00000000 
0000cac7 l       .debug_str	00000000 
0000a5f8 l       .debug_str	00000000 
0000a5ff l       .debug_str	00000000 
0000a628 l       .debug_str	00000000 
0000a676 l       .debug_str	00000000 
00038f94 l       .debug_str	00000000 
0000a6cc l       .debug_str	00000000 
0000a6d1 l       .debug_str	00000000 
0000a6de l       .debug_str	00000000 
0000a6e4 l       .debug_str	00000000 
0000a6ed l       .debug_str	00000000 
0000a716 l       .debug_str	00000000 
0000a764 l       .debug_str	00000000 
0000a888 l       .debug_str	00000000 
0000a7ba l       .debug_str	00000000 
0000a7e3 l       .debug_str	00000000 
0000a831 l       .debug_str	00000000 
0000a887 l       .debug_str	00000000 
0000a891 l       .debug_str	00000000 
0000a8ba l       .debug_str	00000000 
0000a908 l       .debug_str	00000000 
0000a95e l       .debug_str	00000000 
0000a964 l       .debug_str	00000000 
0000a98d l       .debug_str	00000000 
0000a9db l       .debug_str	00000000 
0000aa31 l       .debug_str	00000000 
0000aa3a l       .debug_str	00000000 
0000aa63 l       .debug_str	00000000 
0000aab1 l       .debug_str	00000000 
0000ab07 l       .debug_str	00000000 
00039a4f l       .debug_str	00000000 
0000ab22 l       .debug_str	00000000 
0000ab2b l       .debug_str	00000000 
0000ab32 l       .debug_str	00000000 
0000ab3f l       .debug_str	00000000 
0000ab71 l       .debug_str	00000000 
000373b0 l       .debug_str	00000000 
0000abab l       .debug_str	00000000 
0000abbe l       .debug_str	00000000 
0000abd9 l       .debug_str	00000000 
0000abf3 l       .debug_str	00000000 
0000ac1b l       .debug_str	00000000 
0000ac55 l       .debug_str	00000000 
0000ac7d l       .debug_str	00000000 
000004c3 l       .debug_str	00000000 
00000713 l       .debug_str	00000000 
00004e0b l       .debug_str	00000000 
00004e32 l       .debug_str	00000000 
0000acc6 l       .debug_str	00000000 
0000acee l       .debug_str	00000000 
0000ad22 l       .debug_str	00000000 
0000ad4a l       .debug_str	00000000 
0000ad8a l       .debug_str	00000000 
0000adb2 l       .debug_str	00000000 
0000adfb l       .debug_str	00000000 
0000ae23 l       .debug_str	00000000 
0000ae67 l       .debug_str	00000000 
0000ae8f l       .debug_str	00000000 
000010b7 l       .debug_str	00000000 
0000aeb5 l       .debug_str	00000000 
0000aec1 l       .debug_str	00000000 
0000aee9 l       .debug_str	00000000 
0000af21 l       .debug_str	00000000 
0000af49 l       .debug_str	00000000 
0000af6e l       .debug_str	00000000 
0000af96 l       .debug_str	00000000 
0000afcc l       .debug_str	00000000 
0000aff4 l       .debug_str	00000000 
0000b028 l       .debug_str	00000000 
0000b050 l       .debug_str	00000000 
0000b094 l       .debug_str	00000000 
0000b0bc l       .debug_str	00000000 
000005a2 l       .debug_str	00000000 
0000b103 l       .debug_str	00000000 
0000b12b l       .debug_str	00000000 
00009e19 l       .debug_str	00000000 
00009e22 l       .debug_str	00000000 
00009e64 l       .debug_str	00000000 
00009eae l       .debug_str	00000000 
00009eb5 l       .debug_str	00000000 
00009ee0 l       .debug_str	00000000 
0000b156 l       .debug_str	00000000 
0000b17e l       .debug_str	00000000 
000094b8 l       .debug_str	00000000 
0000b1ab l       .debug_str	00000000 
00043b75 l       .debug_str	00000000 
0000b1af l       .debug_str	00000000 
0000b1d5 l       .debug_str	00000000 
0000b22c l       .debug_str	00000000 
00043c03 l       .debug_str	00000000 
0000b28b l       .debug_str	00000000 
0000b2e0 l       .debug_str	00000000 
0000b360 l       .debug_str	00000000 
0000b33d l       .debug_str	00000000 
0000b1d0 l       .debug_str	00000000 
0000b36d l       .debug_str	00000000 
0000b395 l       .debug_str	00000000 
0000b3be l       .debug_str	00000000 
0000b3e6 l       .debug_str	00000000 
00036c07 l       .debug_str	00000000 
0000b40b l       .debug_str	00000000 
0000b410 l       .debug_str	00000000 
0000b417 l       .debug_str	00000000 
0000b41f l       .debug_str	00000000 
0000b427 l       .debug_str	00000000 
0000b42e l       .debug_str	00000000 
0003bdda l       .debug_str	00000000 
0000b435 l       .debug_str	00000000 
0000b438 l       .debug_str	00000000 
0000b449 l       .debug_str	00000000 
00000869 l       .debug_str	00000000 
0000b462 l       .debug_str	00000000 
0000b46c l       .debug_str	00000000 
0000b493 l       .debug_str	00000000 
0000b4df l       .debug_str	00000000 
0000b533 l       .debug_str	00000000 
0000b56e l       .debug_str	00000000 
0000b551 l       .debug_str	00000000 
0000b54c l       .debug_str	00000000 
0000b579 l       .debug_str	00000000 
0000b5a1 l       .debug_str	00000000 
0000b5eb l       .debug_str	00000000 
0000b5f7 l       .debug_str	00000000 
0000b601 l       .debug_str	00000000 
0000b614 l       .debug_str	00000000 
0000b63c l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
00005843 l       .debug_str	00000000 
0000b675 l       .debug_str	00000000 
0000b69d l       .debug_str	00000000 
00004eb4 l       .debug_str	00000000 
00004ebe l       .debug_str	00000000 
00004ec7 l       .debug_str	00000000 
00004f67 l       .debug_str	00000000 
0000b6d1 l       .debug_str	00000000 
0000b6f9 l       .debug_str	00000000 
0000b71f l       .debug_str	00000000 
0000b747 l       .debug_str	00000000 
0000b785 l       .debug_str	00000000 
0000b7ad l       .debug_str	00000000 
0000b7df l       .debug_str	00000000 
0000b807 l       .debug_str	00000000 
000004c4 l       .debug_str	00000000 
00004f49 l       .debug_str	00000000 
00038e46 l       .debug_str	00000000 
00004f4e l       .debug_str	00000000 
00004f71 l       .debug_str	00000000 
000006d8 l       .debug_str	00000000 
00004f79 l       .debug_str	00000000 
00004fa2 l       .debug_str	00000000 
00004f97 l       .debug_str	00000000 
00004f7e l       .debug_str	00000000 
00000714 l       .debug_str	00000000 
00005096 l       .debug_str	00000000 
0000b840 l       .debug_str	00000000 
0000b868 l       .debug_str	00000000 
0003d60c l       .debug_str	00000000 
00038494 l       .debug_str	00000000 
0000b894 l       .debug_str	00000000 
0000b8ea l       .debug_str	00000000 
00038004 l       .debug_str	00000000 
0000b948 l       .debug_str	00000000 
0000b99f l       .debug_str	00000000 
00039494 l       .debug_str	00000000 
0000b9fe l       .debug_str	00000000 
0000ba55 l       .debug_str	00000000 
0003815b l       .debug_str	00000000 
0000bab4 l       .debug_str	00000000 
0000bb0b l       .debug_str	00000000 
0003a835 l       .debug_str	00000000 
0000bb6a l       .debug_str	00000000 
0000bbd3 l       .debug_str	00000000 
00037c74 l       .debug_str	00000000 
0000bc44 l       .debug_str	00000000 
0000bc72 l       .debug_str	00000000 
0000bc51 l       .debug_str	00000000 
00043b00 l       .debug_str	00000000 
000026ed l       .debug_str	00000000 
0000c7c6 l       .debug_str	00000000 
0000bc86 l       .debug_str	00000000 
0000bcae l       .debug_str	00000000 
0000bcdd l       .debug_str	00000000 
0000bd05 l       .debug_str	00000000 
0000b477 l       .debug_str	00000000 
0000bd3e l       .debug_str	00000000 
0000bd66 l       .debug_str	00000000 
0000bda8 l       .debug_str	00000000 
0000bdd0 l       .debug_str	00000000 
00005f0f l       .debug_str	00000000 
0000be06 l       .debug_str	00000000 
0000be2e l       .debug_str	00000000 
00005f95 l       .debug_str	00000000 
00005f9e l       .debug_str	00000000 
0000be64 l       .debug_str	00000000 
0000be8c l       .debug_str	00000000 
0000beb4 l       .debug_str	00000000 
0000bedc l       .debug_str	00000000 
0000bf15 l       .debug_str	00000000 
0000bf3d l       .debug_str	00000000 
0000bf64 l       .debug_str	00000000 
0000bf8c l       .debug_str	00000000 
0000bfbf l       .debug_str	00000000 
0000bfe7 l       .debug_str	00000000 
0000c01f l       .debug_str	00000000 
0000c047 l       .debug_str	00000000 
0000c090 l       .debug_str	00000000 
0000c0b8 l       .debug_str	00000000 
0000c0ee l       .debug_str	00000000 
0000c116 l       .debug_str	00000000 
0000c142 l       .debug_str	00000000 
00005412 l       .debug_str	00000000 
0000c16e l       .debug_str	00000000 
0000c196 l       .debug_str	00000000 
0000c1d2 l       .debug_str	00000000 
0000c1fa l       .debug_str	00000000 
0000c236 l       .debug_str	00000000 
0000d2a0 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2satdti0g71jx3sg
0003a1e5 l       .debug_str	00000000 
0000d8dc l       .debug_str	00000000 
00039804 l       .debug_str	00000000 
0000d8d1 l       .debug_str	00000000 
0000f380 l       .debug_str	00000000 
0000d8be l       .debug_str	00000000 
00000dcc l       .debug_str	00000000 
0003a5b8 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
0000f05a l       .debug_str	00000000 
00000b2a l       .debug_str	00000000 
0000b477 l       .debug_str	00000000 
00000b25 l       .debug_str	00000000 
0000efd3 l       .debug_str	00000000 
00006608 l       .debug_str	00000000 
0000d31c l       .debug_str	00000000 
0000bbcd l       .debug_str	00000000 
0000d313 l       .debug_str	00000000 
0003eb70 l       .debug_str	00000000 
0000d309 l       .debug_str	00000000 
0000084e l       .debug_str	00000000 
0000ef59 l       .debug_str	00000000 
00000b1d l       .debug_str	00000000 
0000eee8 l       .debug_str	00000000 
000381ee l       .debug_str	00000000 
0000ee69 l       .debug_str	00000000 
0000a002 l       .debug_str	00000000 
0000edea l       .debug_str	00000000 
00001479 l       .debug_str	00000000 
0000ed6b l       .debug_str	00000000 
00042aab l       .debug_str	00000000 
0000ecec l       .debug_str	00000000 
0003dc9d l       .debug_str	00000000 
0000ec77 l       .debug_str	00000000 
00039b29 l       .debug_str	00000000 
0000ebfc l       .debug_str	00000000 
0000a4b6 l       .debug_str	00000000 
0000ce5a l       .debug_str	00000000 
0000f343 l       .debug_str	00000000 
0000ce4e l       .debug_str	00000000 
0000f314 l       .debug_str	00000000 
0000ce42 l       .debug_str	00000000 
00000dc7 l       .debug_str	00000000 
0000ce39 l       .debug_str	00000000 
00039785 l       .debug_str	00000000 
0000eb7e l       .debug_str	00000000 
0000f2d0 l       .debug_str	00000000 
0000a282 l       .debug_str	00000000 
0000f281 l       .debug_str	00000000 
0000a276 l       .debug_str	00000000 
000394ba l       .debug_str	00000000 
0000a26a l       .debug_str	00000000 
0000f236 l       .debug_str	00000000 
0000eaff l       .debug_str	00000000 
0000f6b7 l       .debug_str	00000000 
0000ea82 l       .debug_str	00000000 
000007ae l       .debug_str	00000000 
0000e9f6 l       .debug_str	00000000 
0002c0e1 l       .debug_str	00000000 
0000b601 l       .debug_str	00000000 
0001143d l       .debug_str	00000000 
0000b5f7 l       .debug_str	00000000 
000007ab l       .debug_str	00000000 
0000b5eb l       .debug_str	00000000 
00043c03 l       .debug_str	00000000 
0000e979 l       .debug_str	00000000 
0000f1ff l       .debug_str	00000000 
0000e8ff l       .debug_str	00000000 
0000f161 l       .debug_str	00000000 
0000e876 l       .debug_str	00000000 
000083c3 l       .debug_str	00000000 
0000e7fc l       .debug_str	00000000 
0000f0d2 l       .debug_str	00000000 
0000f362 l       .debug_str	00000000 
0000073c l       .debug_str	00000000 
00000ae9 l       .debug_str	00000000 
00000038 l       .debug_str	00000000 
000084cc l       .debug_str	00000000 
00000fde l       .debug_str	00000000 
0000b8e7 l       .debug_str	00000000 
00000fe2 l       .debug_str	00000000 
00000fed l       .debug_str	00000000 
0000119a l       .debug_str	00000000 
00000b00 l       .debug_str	00000000 
00009ac3 l       .debug_str	00000000 
0000250b l       .debug_str	00000000 
00000ff8 l       .debug_str	00000000 
00001000 l       .debug_str	00000000 
0000100b l       .debug_str	00000000 
00001016 l       .debug_str	00000000 
00001023 l       .debug_str	00000000 
0000102e l       .debug_str	00000000 
00001036 l       .debug_str	00000000 
00001041 l       .debug_str	00000000 
0000104c l       .debug_str	00000000 
00001056 l       .debug_str	00000000 
00001061 l       .debug_str	00000000 
0000106c l       .debug_str	00000000 
00001079 l       .debug_str	00000000 
00001085 l       .debug_str	00000000 
00001092 l       .debug_str	00000000 
000010a0 l       .debug_str	00000000 
000010aa l       .debug_str	00000000 
0000fafe l       .debug_str	00000000 
0003c69a l       .debug_str	00000000 
00000050 l       .debug_str	00000000 
000023dd l       .debug_str	00000000 
00000b14 l       .debug_str	00000000 
0000e0e2 l       .debug_str	00000000 
00016e36 l       .debug_str	00000000 
00000581 l       .debug_str	00000000 
000023e6 l       .debug_str	00000000 
0003e594 l       .debug_str	00000000 
00003db7 l       .debug_str	00000000 
000395bd l       .debug_str	00000000 
0003709c l       .debug_str	00000000 
0000ba51 l       .debug_str	00000000 
00000842 l       .debug_str	00000000 
00003dc1 l       .debug_str	00000000 
00043fa0 l       .debug_str	00000000 
000008fb l       .debug_str	00000000 
0000087d l       .debug_str	00000000 
00003df9 l       .debug_str	00000000 
00003e39 l       .debug_str	00000000 
0000118a l       .debug_str	00000000 
00003e40 l       .debug_str	00000000 
00003e48 l       .debug_str	00000000 
00004e29 l       .debug_str	00000000 
00004e10 l       .debug_str	00000000 
0000e163 l       .debug_str	00000000 
000004c3 l       .debug_str	00000000 
00000713 l       .debug_str	00000000 
00004e0b l       .debug_str	00000000 
00004e32 l       .debug_str	00000000 
0000e1e5 l       .debug_str	00000000 
00000582 l       .debug_str	00000000 
00004f49 l       .debug_str	00000000 
00038e46 l       .debug_str	00000000 
00004eb4 l       .debug_str	00000000 
00000708 l       .debug_str	00000000 
00002751 l       .debug_str	00000000 
000004ad l       .debug_str	00000000 
000006ee l       .debug_str	00000000 
0000b99b l       .debug_str	00000000 
0000066b l       .debug_str	00000000 
00000643 l       .debug_str	00000000 
000006cf l       .debug_str	00000000 
00037204 l       .debug_str	00000000 
00000609 l       .debug_str	00000000 
000004df l       .debug_str	00000000 
0003e04e l       .debug_str	00000000 
00000857 l       .debug_str	00000000 
000364f6 l       .debug_str	00000000 
0000275a l       .debug_str	00000000 
00002787 l       .debug_str	00000000 
000026c3 l       .debug_str	00000000 
00038516 l       .debug_str	00000000 
00000521 l       .debug_str	00000000 
00000690 l       .debug_str	00000000 
000005f2 l       .debug_str	00000000 
000004f0 l       .debug_str	00000000 
000027bc l       .debug_str	00000000 
000027e5 l       .debug_str	00000000 
00002843 l       .debug_str	00000000 
000005d2 l       .debug_str	00000000 
000006d7 l       .debug_str	00000000 
000006af l       .debug_str	00000000 
000028a9 l       .debug_str	00000000 
000027d5 l       .debug_str	00000000 
000006fa l       .debug_str	00000000 
000004a2 l       .debug_str	00000000 
00000674 l       .debug_str	00000000 
000006df l       .debug_str	00000000 
000028c7 l       .debug_str	00000000 
0000065b l       .debug_str	00000000 
00000509 l       .debug_str	00000000 
000028dd l       .debug_str	00000000 
00002903 l       .debug_str	00000000 
000004b8 l       .debug_str	00000000 
00002919 l       .debug_str	00000000 
0000645f l       .debug_str	00000000 
000028e2 l       .debug_str	00000000 
00004ebe l       .debug_str	00000000 
00004ec7 l       .debug_str	00000000 
00004f67 l       .debug_str	00000000 
00004f4e l       .debug_str	00000000 
00004f71 l       .debug_str	00000000 
000006d8 l       .debug_str	00000000 
00004f79 l       .debug_str	00000000 
00004fa2 l       .debug_str	00000000 
00004f97 l       .debug_str	00000000 
00004f7e l       .debug_str	00000000 
0000e268 l       .debug_str	00000000 
000023ed l       .debug_str	00000000 
000023f9 l       .debug_str	00000000 
00002401 l       .debug_str	00000000 
0000245b l       .debug_str	00000000 
000024bd l       .debug_str	00000000 
000024c8 l       .debug_str	00000000 
0000250f l       .debug_str	00000000 
0000255e l       .debug_str	00000000 
00002568 l       .debug_str	00000000 
000025a5 l       .debug_str	00000000 
000025ea l       .debug_str	00000000 
000025f3 l       .debug_str	00000000 
00002603 l       .debug_str	00000000 
0000260b l       .debug_str	00000000 
00002660 l       .debug_str	00000000 
000026bd l       .debug_str	00000000 
000026c9 l       .debug_str	00000000 
000026d2 l       .debug_str	00000000 
000026de l       .debug_str	00000000 
000026ea l       .debug_str	00000000 
000026f3 l       .debug_str	00000000 
000026fb l       .debug_str	00000000 
00002703 l       .debug_str	00000000 
00002731 l       .debug_str	00000000 
00002718 l       .debug_str	00000000 
0000e2e7 l       .debug_str	00000000 
000053cb l       .debug_str	00000000 
000053d3 l       .debug_str	00000000 
0000c162 l       .debug_str	00000000 
000053ed l       .debug_str	00000000 
0000e36b l       .debug_str	00000000 
00005356 l       .debug_str	00000000 
00005364 l       .debug_str	00000000 
00005372 l       .debug_str	00000000 
0000537e l       .debug_str	00000000 
0000558c l       .debug_str	00000000 
0000538a l       .debug_str	00000000 
00005399 l       .debug_str	00000000 
000053a1 l       .debug_str	00000000 
000053ba l       .debug_str	00000000 
00002747 l       .debug_str	00000000 
00005412 l       .debug_str	00000000 
000026f6 l       .debug_str	00000000 
0000a6d6 l       .debug_str	00000000 
0000c6ba l       .debug_str	00000000 
0000542b l       .debug_str	00000000 
0000e3ee l       .debug_str	00000000 
0000e471 l       .debug_str	00000000 
0000292f l       .debug_str	00000000 
0000e4f2 l       .debug_str	00000000 
0000e57b l       .debug_str	00000000 
0000e5fb l       .debug_str	00000000 
0000e67b l       .debug_str	00000000 
0000e6fb l       .debug_str	00000000 
0003a863 l       .debug_str	00000000 
000009aa l       .debug_str	00000000 
00002de7 l       .debug_str	00000000 
000114f6 l       .debug_str	00000000 
00002ded l       .debug_str	00000000 
00002df3 l       .debug_str	00000000 
00002df9 l       .debug_str	00000000 
00002e05 l       .debug_str	00000000 
00000822 l       .debug_str	00000000 
00043a1a l       .debug_str	00000000 
00002e0d l       .debug_str	00000000 
0004208c l       .debug_str	00000000 
00002e15 l       .debug_str	00000000 
00002e5b l       .debug_str	00000000 
00002e38 l       .debug_str	00000000 
00002e6b l       .debug_str	00000000 
00002eab l       .debug_str	00000000 
0003a333 l       .debug_str	00000000 
00002ef3 l       .debug_str	00000000 
00002ef9 l       .debug_str	00000000 
00002eff l       .debug_str	00000000 
00002f28 l       .debug_str	00000000 
00002f05 l       .debug_str	00000000 
00002f3a l       .debug_str	00000000 
00002f7c l       .debug_str	00000000 
00003e95 l       .debug_str	00000000 
00002fc6 l       .debug_str	00000000 
00002fcc l       .debug_str	00000000 
00002fd2 l       .debug_str	00000000 
00002ffb l       .debug_str	00000000 
00002fd8 l       .debug_str	00000000 
0000300d l       .debug_str	00000000 
0000304f l       .debug_str	00000000 
00039457 l       .debug_str	00000000 
00003099 l       .debug_str	00000000 
0000309f l       .debug_str	00000000 
000030a5 l       .debug_str	00000000 
000030ab l       .debug_str	00000000 
000030d4 l       .debug_str	00000000 
000030b1 l       .debug_str	00000000 
000030e5 l       .debug_str	00000000 
00003126 l       .debug_str	00000000 
0000316f l       .debug_str	00000000 
00003174 l       .debug_str	00000000 
0003a5e3 l       .debug_str	00000000 
00003179 l       .debug_str	00000000 
0000317f l       .debug_str	00000000 
00003185 l       .debug_str	00000000 
000031ae l       .debug_str	00000000 
0000318b l       .debug_str	00000000 
000031bf l       .debug_str	00000000 
00003200 l       .debug_str	00000000 
0003952b l       .debug_str	00000000 
00003249 l       .debug_str	00000000 
00003275 l       .debug_str	00000000 
00003252 l       .debug_str	00000000 
00003286 l       .debug_str	00000000 
000032c7 l       .debug_str	00000000 
00003310 l       .debug_str	00000000 
0003a806 l       .debug_str	00000000 
00003315 l       .debug_str	00000000 
0000331e l       .debug_str	00000000 
00003325 l       .debug_str	00000000 
00003350 l       .debug_str	00000000 
0000332d l       .debug_str	00000000 
00003362 l       .debug_str	00000000 
000033a4 l       .debug_str	00000000 
0003a46b l       .debug_str	00000000 
000033ee l       .debug_str	00000000 
000033f4 l       .debug_str	00000000 
000033fa l       .debug_str	00000000 
00003400 l       .debug_str	00000000 
00003406 l       .debug_str	00000000 
0000340e l       .debug_str	00000000 
0000341c l       .debug_str	00000000 
0000342b l       .debug_str	00000000 
0000343c l       .debug_str	00000000 
00003447 l       .debug_str	00000000 
00003452 l       .debug_str	00000000 
0000345d l       .debug_str	00000000 
00003464 l       .debug_str	00000000 
000034aa l       .debug_str	00000000 
00003487 l       .debug_str	00000000 
000034bc l       .debug_str	00000000 
000034fe l       .debug_str	00000000 
0003965a l       .debug_str	00000000 
00003548 l       .debug_str	00000000 
00003575 l       .debug_str	00000000 
00003552 l       .debug_str	00000000 
00003587 l       .debug_str	00000000 
000035c9 l       .debug_str	00000000 
00003613 l       .debug_str	00000000 
00003618 l       .debug_str	00000000 
00003645 l       .debug_str	00000000 
00003622 l       .debug_str	00000000 
00003657 l       .debug_str	00000000 
00003699 l       .debug_str	00000000 
000036e3 l       .debug_str	00000000 
0000bb07 l       .debug_str	00000000 
0003db77 l       .debug_str	00000000 
0000e773 l       .debug_str	00000000 
00003e6f l       .debug_str	00000000 
0000a35b l       .debug_str	00000000 
00003e7e l       .debug_str	00000000 
00002732 l       .debug_str	00000000 
00002738 l       .debug_str	00000000 
0000273f l       .debug_str	00000000 
0002ce96 l       .debug_str	00000000 
00002946 l       .debug_str	00000000 
0000294e l       .debug_str	00000000 
00002957 l       .debug_str	00000000 
00003d55 l       .debug_str	00000000 
00002960 l       .debug_str	00000000 
0003cfba l       .debug_str	00000000 
00002968 l       .debug_str	00000000 
00002974 l       .debug_str	00000000 
0000297f l       .debug_str	00000000 
00002987 l       .debug_str	00000000 
0000298f l       .debug_str	00000000 
00002a8b l       .debug_str	00000000 
00002b8f l       .debug_str	00000000 
00002b9d l       .debug_str	00000000 
00002ba8 l       .debug_str	00000000 
00002bd5 l       .debug_str	00000000 
00002bb2 l       .debug_str	00000000 
00002be0 l       .debug_str	00000000 
00002c5b l       .debug_str	00000000 
00002cde l       .debug_str	00000000 
00002cec l       .debug_str	00000000 
00002d4b l       .debug_str	00000000 
00002db2 l       .debug_str	00000000 
00002dc8 l       .debug_str	00000000 
00002dd8 l       .debug_str	00000000 
000036f7 l       .debug_str	00000000 
00003707 l       .debug_str	00000000 
00003710 l       .debug_str	00000000 
0000371b l       .debug_str	00000000 
0000372a l       .debug_str	00000000 
0000373f l       .debug_str	00000000 
00003770 l       .debug_str	00000000 
0000380d l       .debug_str	00000000 
000038b2 l       .debug_str	00000000 
000038bd l       .debug_str	00000000 
000038c6 l       .debug_str	00000000 
0000390a l       .debug_str	00000000 
000038e7 l       .debug_str	00000000 
0000391d l       .debug_str	00000000 
000039a0 l       .debug_str	00000000 
00003a2b l       .debug_str	00000000 
00003a47 l       .debug_str	00000000 
00003a93 l       .debug_str	00000000 
00003ae7 l       .debug_str	00000000 
00003b04 l       .debug_str	00000000 
00003b18 l       .debug_str	00000000 
00003b64 l       .debug_str	00000000 
00003bb8 l       .debug_str	00000000 
00003bce l       .debug_str	00000000 
00003be2 l       .debug_str	00000000 
00003c29 l       .debug_str	00000000 
00003c78 l       .debug_str	00000000 
00003ca4 l       .debug_str	00000000 
00003c81 l       .debug_str	00000000 
00003cb2 l       .debug_str	00000000 
00003cb8 l       .debug_str	00000000 
00003cc0 l       .debug_str	00000000 
00003cc7 l       .debug_str	00000000 
000049ef l       .debug_str	00000000 
00003ccf l       .debug_str	00000000 
00003cd7 l       .debug_str	00000000 
000108b5 l       .debug_str	00000000 
00003ce6 l       .debug_str	00000000 
00004a21 l       .debug_str	00000000 
00003cf1 l       .debug_str	00000000 
00003cfc l       .debug_str	00000000 
00003d0d l       .debug_str	00000000 
00003d13 l       .debug_str	00000000 
00003d1b l       .debug_str	00000000 
00003d22 l       .debug_str	00000000 
00003d2c l       .debug_str	00000000 
00003d34 l       .debug_str	00000000 
00003d3c l       .debug_str	00000000 
00003d5e l       .debug_str	00000000 
00003d69 l       .debug_str	00000000 
00003d75 l       .debug_str	00000000 
00003d7d l       .debug_str	00000000 
00003d86 l       .debug_str	00000000 
000005cb l       .debug_str	00000000 
00003d91 l       .debug_str	00000000 
00003d9c l       .debug_str	00000000 
00003da7 l       .debug_str	00000000 
00003e5f l       .debug_str	00000000 
00003ec8 l       .debug_str	00000000 
00003edd l       .debug_str	00000000 
00003ee6 l       .debug_str	00000000 
00003f43 l       .debug_str	00000000 
00003fa8 l       .debug_str	00000000 
00003fb2 l       .debug_str	00000000 
00003fc2 l       .debug_str	00000000 
00003fd7 l       .debug_str	00000000 
00003fdf l       .debug_str	00000000 
00004043 l       .debug_str	00000000 
000040af l       .debug_str	00000000 
000040b6 l       .debug_str	00000000 
000040be l       .debug_str	00000000 
000040ff l       .debug_str	00000000 
000040dc l       .debug_str	00000000 
0000410f l       .debug_str	00000000 
00004124 l       .debug_str	00000000 
00004137 l       .debug_str	00000000 
0000414c l       .debug_str	00000000 
00004153 l       .debug_str	00000000 
00004168 l       .debug_str	00000000 
00004370 l       .debug_str	00000000 
000042eb l       .debug_str	00000000 
00003e86 l       .debug_str	00000000 
00003e8d l       .debug_str	00000000 
00003eb8 l       .debug_str	00000000 
0000b485 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 34s9veycd8iw7blw
00043fa0 l       .debug_str	00000000 
0000f59c l       .debug_str	00000000 
0000f58c l       .debug_str	00000000 
000033fe l       .debug_str	00000000 
0000f541 l       .debug_str	00000000 
0003c6f9 l       .debug_str	00000000 
0000f532 l       .debug_str	00000000 
0000f4e8 l       .debug_str	00000000 
0000f4dc l       .debug_str	00000000 
0000f653 l       .debug_str	00000000 
0000f495 l       .debug_str	00000000 
00000983 l       .debug_str	00000000 
00000dc7 l       .debug_str	00000000 
0000bbcd l       .debug_str	00000000 
0000f489 l       .debug_str	00000000 
0000f649 l       .debug_str	00000000 
0000f442 l       .debug_str	00000000 
0000f605 l       .debug_str	00000000 
0000f436 l       .debug_str	00000000 
0000f5f5 l       .debug_str	00000000 
0000a452 l       .debug_str	00000000 
0000073c l       .debug_str	00000000 
00000ae9 l       .debug_str	00000000 
00000038 l       .debug_str	00000000 
000084cc l       .debug_str	00000000 
0003673f l       .debug_str	00000000 
00000b14 l       .debug_str	00000000 
0000f38c l       .debug_str	00000000 
0000f3d1 l       .debug_str	00000000 
0003709c l       .debug_str	00000000 
0000ba51 l       .debug_str	00000000 
00000842 l       .debug_str	00000000 
000056e0 l       .debug_str	00000000 
000008fb l       .debug_str	00000000 
0000087d l       .debug_str	00000000 
00001e27 l       .debug_str	00000000 
0000f3dd l       .debug_str	00000000 
0000f426 l       .debug_str	00000000 
0000f5aa l       .debug_str	00000000 
080076de l     F .text	00000052 _ZN4core3num21_$LT$impl$u20$u32$GT$15overflowing_add17ha22472e2d1844567E
08007730 l     F .text	00000050 _ZN4core3num23_$LT$impl$u20$usize$GT$11checked_mul17hfb0136607b8df7bdE
0800780a l     F .text	00000052 _ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_mul17h9b91c6b9eb70d744E
0800785c l     F .text	00000056 _ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_sub17h689f9906c0b5a932E
080078b2 l     F .text	00000006 _ZN4core3num23_$LT$impl$u20$usize$GT$9max_value17haf3c46268b03fd1eE
00000000 l    df *ABS*	00000000 36tpqlexyla0ym9j
00003126 l       .debug_str	00000000 
0000f9f2 l       .debug_str	00000000 
0000f9e5 l       .debug_str	00000000 
000096db l       .debug_str	00000000 
00009378 l       .debug_str	00000000 
00009379 l       .debug_str	00000000 
00010d9b l       .debug_str	00000000 
00010da7 l       .debug_str	00000000 
00000a9d l       .debug_str	00000000 
00000a80 l       .debug_str	00000000 
00000a92 l       .debug_str	00000000 
00000a22 l       .debug_str	00000000 
00000a08 l       .debug_str	00000000 
00000a18 l       .debug_str	00000000 
000009ec l       .debug_str	00000000 
0000f997 l       .debug_str	00000000 
000009c8 l       .debug_str	00000000 
000009b1 l       .debug_str	00000000 
000009a9 l       .debug_str	00000000 
00043b00 l       .debug_str	00000000 
00000853 l       .debug_str	00000000 
000009a3 l       .debug_str	00000000 
0000099c l       .debug_str	00000000 
00000991 l       .debug_str	00000000 
00039f5c l       .debug_str	00000000 
0000fa76 l       .debug_str	00000000 
00000983 l       .debug_str	00000000 
00000979 l       .debug_str	00000000 
00000968 l       .debug_str	00000000 
00000974 l       .debug_str	00000000 
0000094f l       .debug_str	00000000 
00000943 l       .debug_str	00000000 
00000836 l       .debug_str	00000000 
0000f999 l       .debug_str	00000000 
0000081b l       .debug_str	00000000 
0000a6d6 l       .debug_str	00000000 
00000813 l       .debug_str	00000000 
0000093a l       .debug_str	00000000 
00000936 l       .debug_str	00000000 
0000fa68 l       .debug_str	00000000 
00000927 l       .debug_str	00000000 
0003ef60 l       .debug_str	00000000 
00003e71 l       .debug_str	00000000 
00039ca3 l       .debug_str	00000000 
00000900 l       .debug_str	00000000 
00007a0c l       .debug_str	00000000 
000008dc l       .debug_str	00000000 
0003dc9c l       .debug_str	00000000 
0000a26e l       .debug_str	00000000 
0003a292 l       .debug_str	00000000 
0003e21c l       .debug_str	00000000 
0000fa69 l       .debug_str	00000000 
000018f1 l       .debug_str	00000000 
000018f2 l       .debug_str	00000000 
00004b0c l       .debug_str	00000000 
0003d87e l       .debug_str	00000000 
0003f7fd l       .debug_str	00000000 
000008b9 l       .debug_str	00000000 
00000e1c l       .debug_str	00000000 
000008d3 l       .debug_str	00000000 
00008be6 l       .debug_str	00000000 
00000e18 l       .debug_str	00000000 
0003eefd l       .debug_str	00000000 
00043f35 l       .debug_str	00000000 
00008503 l       .debug_str	00000000 
0003dc9d l       .debug_str	00000000 
0000fa50 l       .debug_str	00000000 
0000fa3a l       .debug_str	00000000 
0000fa23 l       .debug_str	00000000 
0000fa0d l       .debug_str	00000000 
0000073c l       .debug_str	00000000 
00000ae9 l       .debug_str	00000000 
00000038 l       .debug_str	00000000 
00000b00 l       .debug_str	00000000 
0003c69a l       .debug_str	00000000 
00000050 l       .debug_str	00000000 
0000f657 l       .debug_str	00000000 
0000f668 l       .debug_str	00000000 
000381ee l       .debug_str	00000000 
0000b8e7 l       .debug_str	00000000 
00000b1d l       .debug_str	00000000 
0000087d l       .debug_str	00000000 
0000084e l       .debug_str	00000000 
00000857 l       .debug_str	00000000 
0003eb70 l       .debug_str	00000000 
0000bbcd l       .debug_str	00000000 
00006608 l       .debug_str	00000000 
00000b25 l       .debug_str	00000000 
00000b2a l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000dcc l       .debug_str	00000000 
00003e72 l       .debug_str	00000000 
0000a35b l       .debug_str	00000000 
0000f673 l       .debug_str	00000000 
000084cc l       .debug_str	00000000 
00009ac3 l       .debug_str	00000000 
0000ba51 l       .debug_str	00000000 
000007ab l       .debug_str	00000000 
0001143d l       .debug_str	00000000 
00043fa0 l       .debug_str	00000000 
0000250b l       .debug_str	00000000 
00000ff8 l       .debug_str	00000000 
00001000 l       .debug_str	00000000 
0000100b l       .debug_str	00000000 
00001016 l       .debug_str	00000000 
00001023 l       .debug_str	00000000 
0000102e l       .debug_str	00000000 
00001036 l       .debug_str	00000000 
00001041 l       .debug_str	00000000 
0000104c l       .debug_str	00000000 
00001056 l       .debug_str	00000000 
00001061 l       .debug_str	00000000 
0000106c l       .debug_str	00000000 
00001079 l       .debug_str	00000000 
00001085 l       .debug_str	00000000 
00001092 l       .debug_str	00000000 
000010a0 l       .debug_str	00000000 
000010aa l       .debug_str	00000000 
0000fafe l       .debug_str	00000000 
0002c0e1 l       .debug_str	00000000 
000007ae l       .debug_str	00000000 
0000f6b7 l       .debug_str	00000000 
00009e08 l       .debug_str	00000000 
0003a53b l       .debug_str	00000000 
00000842 l       .debug_str	00000000 
00007912 l       .debug_str	00000000 
00007917 l       .debug_str	00000000 
000114f6 l       .debug_str	00000000 
0000791d l       .debug_str	00000000 
0000f9e9 l       .debug_str	00000000 
0000a3e3 l       .debug_str	00000000 
0000f9f6 l       .debug_str	00000000 
0000fa04 l       .debug_str	00000000 
00007929 l       .debug_str	00000000 
00007a19 l       .debug_str	00000000 
00007a32 l       .debug_str	00000000 
00007a1d l       .debug_str	00000000 
0000f681 l       .debug_str	00000000 
00004c0c l       .debug_str	00000000 
000023dd l       .debug_str	00000000 
00003e6f l       .debug_str	00000000 
00003e7e l       .debug_str	00000000 
0003709c l       .debug_str	00000000 
00002732 l       .debug_str	00000000 
000023e6 l       .debug_str	00000000 
0003e594 l       .debug_str	00000000 
000023ed l       .debug_str	00000000 
000023f9 l       .debug_str	00000000 
00000fde l       .debug_str	00000000 
00000fe2 l       .debug_str	00000000 
00000fed l       .debug_str	00000000 
0000119a l       .debug_str	00000000 
0000118a l       .debug_str	00000000 
00002401 l       .debug_str	00000000 
000008fb l       .debug_str	00000000 
0000245b l       .debug_str	00000000 
000024bd l       .debug_str	00000000 
000024c8 l       .debug_str	00000000 
0000250f l       .debug_str	00000000 
0000255e l       .debug_str	00000000 
00002568 l       .debug_str	00000000 
000025a5 l       .debug_str	00000000 
000025ea l       .debug_str	00000000 
000025f3 l       .debug_str	00000000 
00002603 l       .debug_str	00000000 
0000260b l       .debug_str	00000000 
00002660 l       .debug_str	00000000 
000026bd l       .debug_str	00000000 
000026c9 l       .debug_str	00000000 
000026d2 l       .debug_str	00000000 
000026de l       .debug_str	00000000 
000026ea l       .debug_str	00000000 
000026f3 l       .debug_str	00000000 
000026fb l       .debug_str	00000000 
00000581 l       .debug_str	00000000 
00002703 l       .debug_str	00000000 
00002731 l       .debug_str	00000000 
00002718 l       .debug_str	00000000 
00002738 l       .debug_str	00000000 
0000273f l       .debug_str	00000000 
00002747 l       .debug_str	00000000 
00000708 l       .debug_str	00000000 
00002751 l       .debug_str	00000000 
000004ad l       .debug_str	00000000 
000006ee l       .debug_str	00000000 
0000b99b l       .debug_str	00000000 
0000066b l       .debug_str	00000000 
00000643 l       .debug_str	00000000 
000006cf l       .debug_str	00000000 
00037204 l       .debug_str	00000000 
00000609 l       .debug_str	00000000 
000004df l       .debug_str	00000000 
0003e04e l       .debug_str	00000000 
000364f6 l       .debug_str	00000000 
0000275a l       .debug_str	00000000 
00002787 l       .debug_str	00000000 
000026c3 l       .debug_str	00000000 
00038516 l       .debug_str	00000000 
00000521 l       .debug_str	00000000 
00000690 l       .debug_str	00000000 
000005f2 l       .debug_str	00000000 
000004f0 l       .debug_str	00000000 
000027bc l       .debug_str	00000000 
000027e5 l       .debug_str	00000000 
00002843 l       .debug_str	00000000 
000005d2 l       .debug_str	00000000 
000006d7 l       .debug_str	00000000 
000006af l       .debug_str	00000000 
000028a9 l       .debug_str	00000000 
000027d5 l       .debug_str	00000000 
000006fa l       .debug_str	00000000 
000004a2 l       .debug_str	00000000 
00000674 l       .debug_str	00000000 
000006df l       .debug_str	00000000 
000028c7 l       .debug_str	00000000 
0000065b l       .debug_str	00000000 
00000582 l       .debug_str	00000000 
00000509 l       .debug_str	00000000 
000028dd l       .debug_str	00000000 
00002903 l       .debug_str	00000000 
000004b8 l       .debug_str	00000000 
00002919 l       .debug_str	00000000 
0000645f l       .debug_str	00000000 
000028e2 l       .debug_str	00000000 
0000292f l       .debug_str	00000000 
0002ce96 l       .debug_str	00000000 
00002946 l       .debug_str	00000000 
0000294e l       .debug_str	00000000 
00002957 l       .debug_str	00000000 
00003d55 l       .debug_str	00000000 
00002960 l       .debug_str	00000000 
0003cfba l       .debug_str	00000000 
00002968 l       .debug_str	00000000 
00002974 l       .debug_str	00000000 
0000297f l       .debug_str	00000000 
00002987 l       .debug_str	00000000 
0000298f l       .debug_str	00000000 
00002a8b l       .debug_str	00000000 
00002b8f l       .debug_str	00000000 
00002b9d l       .debug_str	00000000 
00002ba8 l       .debug_str	00000000 
00000822 l       .debug_str	00000000 
00002bd5 l       .debug_str	00000000 
00002bb2 l       .debug_str	00000000 
00002be0 l       .debug_str	00000000 
00002c5b l       .debug_str	00000000 
00002cde l       .debug_str	00000000 
00002cec l       .debug_str	00000000 
00002d4b l       .debug_str	00000000 
00002db2 l       .debug_str	00000000 
00002dc8 l       .debug_str	00000000 
00002dd8 l       .debug_str	00000000 
0003a863 l       .debug_str	00000000 
000009aa l       .debug_str	00000000 
00002de7 l       .debug_str	00000000 
00002ded l       .debug_str	00000000 
00002df3 l       .debug_str	00000000 
00002df9 l       .debug_str	00000000 
00002e05 l       .debug_str	00000000 
00043a1a l       .debug_str	00000000 
00002e0d l       .debug_str	00000000 
0004208c l       .debug_str	00000000 
00002e15 l       .debug_str	00000000 
00002e5b l       .debug_str	00000000 
00002e38 l       .debug_str	00000000 
00002e6b l       .debug_str	00000000 
00002eab l       .debug_str	00000000 
0003a333 l       .debug_str	00000000 
00002ef3 l       .debug_str	00000000 
00002ef9 l       .debug_str	00000000 
00002eff l       .debug_str	00000000 
00002f28 l       .debug_str	00000000 
00002f05 l       .debug_str	00000000 
00002f3a l       .debug_str	00000000 
00002f7c l       .debug_str	00000000 
0003a1e5 l       .debug_str	00000000 
00002fc6 l       .debug_str	00000000 
00002fcc l       .debug_str	00000000 
00002fd2 l       .debug_str	00000000 
00002ffb l       .debug_str	00000000 
00002fd8 l       .debug_str	00000000 
0000300d l       .debug_str	00000000 
0000304f l       .debug_str	00000000 
00039457 l       .debug_str	00000000 
00003099 l       .debug_str	00000000 
0000309f l       .debug_str	00000000 
000030a5 l       .debug_str	00000000 
000030ab l       .debug_str	00000000 
000030d4 l       .debug_str	00000000 
000030b1 l       .debug_str	00000000 
000030e5 l       .debug_str	00000000 
000008ae l       .debug_str	00000000 
0000316f l       .debug_str	00000000 
00003174 l       .debug_str	00000000 
0003a5e3 l       .debug_str	00000000 
00003179 l       .debug_str	00000000 
0000317f l       .debug_str	00000000 
00003185 l       .debug_str	00000000 
000031ae l       .debug_str	00000000 
0000318b l       .debug_str	00000000 
000031bf l       .debug_str	00000000 
00003200 l       .debug_str	00000000 
0003952b l       .debug_str	00000000 
00003249 l       .debug_str	00000000 
00003275 l       .debug_str	00000000 
00003252 l       .debug_str	00000000 
00003286 l       .debug_str	00000000 
000032c7 l       .debug_str	00000000 
00003310 l       .debug_str	00000000 
0003a806 l       .debug_str	00000000 
00003315 l       .debug_str	00000000 
0000331e l       .debug_str	00000000 
00003325 l       .debug_str	00000000 
00003350 l       .debug_str	00000000 
0000332d l       .debug_str	00000000 
00003362 l       .debug_str	00000000 
000033a4 l       .debug_str	00000000 
0003a46b l       .debug_str	00000000 
000033ee l       .debug_str	00000000 
000033f4 l       .debug_str	00000000 
000033fa l       .debug_str	00000000 
00003400 l       .debug_str	00000000 
00003406 l       .debug_str	00000000 
0000340e l       .debug_str	00000000 
0000341c l       .debug_str	00000000 
0000342b l       .debug_str	00000000 
0000343c l       .debug_str	00000000 
00003447 l       .debug_str	00000000 
00003452 l       .debug_str	00000000 
0000345d l       .debug_str	00000000 
00003464 l       .debug_str	00000000 
000034aa l       .debug_str	00000000 
00003487 l       .debug_str	00000000 
000034bc l       .debug_str	00000000 
000034fe l       .debug_str	00000000 
0003965a l       .debug_str	00000000 
00003548 l       .debug_str	00000000 
00003575 l       .debug_str	00000000 
00003552 l       .debug_str	00000000 
00003587 l       .debug_str	00000000 
000035c9 l       .debug_str	00000000 
00003613 l       .debug_str	00000000 
00003618 l       .debug_str	00000000 
00003645 l       .debug_str	00000000 
00003622 l       .debug_str	00000000 
00003657 l       .debug_str	00000000 
00003699 l       .debug_str	00000000 
000036e3 l       .debug_str	00000000 
0000bb07 l       .debug_str	00000000 
0003db77 l       .debug_str	00000000 
000036f7 l       .debug_str	00000000 
00003707 l       .debug_str	00000000 
00003710 l       .debug_str	00000000 
0000371b l       .debug_str	00000000 
0000372a l       .debug_str	00000000 
0000373f l       .debug_str	00000000 
00003770 l       .debug_str	00000000 
0000380d l       .debug_str	00000000 
000038b2 l       .debug_str	00000000 
000038bd l       .debug_str	00000000 
000038c6 l       .debug_str	00000000 
0000390a l       .debug_str	00000000 
000038e7 l       .debug_str	00000000 
0000391d l       .debug_str	00000000 
000039a0 l       .debug_str	00000000 
00003a2b l       .debug_str	00000000 
00003a47 l       .debug_str	00000000 
00003a93 l       .debug_str	00000000 
00003ae7 l       .debug_str	00000000 
00003b04 l       .debug_str	00000000 
00003b18 l       .debug_str	00000000 
00003b64 l       .debug_str	00000000 
00003bb8 l       .debug_str	00000000 
00003bce l       .debug_str	00000000 
00003be2 l       .debug_str	00000000 
00003c29 l       .debug_str	00000000 
00003c78 l       .debug_str	00000000 
00003ca4 l       .debug_str	00000000 
00003c81 l       .debug_str	00000000 
00003cb2 l       .debug_str	00000000 
00003cb8 l       .debug_str	00000000 
00003cc0 l       .debug_str	00000000 
00003cc7 l       .debug_str	00000000 
000049ef l       .debug_str	00000000 
00003ccf l       .debug_str	00000000 
00003cd7 l       .debug_str	00000000 
000108b5 l       .debug_str	00000000 
00003ce6 l       .debug_str	00000000 
00004a21 l       .debug_str	00000000 
00003cf1 l       .debug_str	00000000 
00003cfc l       .debug_str	00000000 
00003d0d l       .debug_str	00000000 
00003d13 l       .debug_str	00000000 
00003d1b l       .debug_str	00000000 
00003d22 l       .debug_str	00000000 
00003d2c l       .debug_str	00000000 
00003d34 l       .debug_str	00000000 
00003d3c l       .debug_str	00000000 
00003d5e l       .debug_str	00000000 
00003d69 l       .debug_str	00000000 
00003d75 l       .debug_str	00000000 
00003d7d l       .debug_str	00000000 
00003d86 l       .debug_str	00000000 
000005cb l       .debug_str	00000000 
00003d91 l       .debug_str	00000000 
00003d9c l       .debug_str	00000000 
00003da7 l       .debug_str	00000000 
00003db7 l       .debug_str	00000000 
000395bd l       .debug_str	00000000 
00004e10 l       .debug_str	00000000 
00003dc1 l       .debug_str	00000000 
00003df9 l       .debug_str	00000000 
00003e39 l       .debug_str	00000000 
00003e40 l       .debug_str	00000000 
00003e48 l       .debug_str	00000000 
00004e29 l       .debug_str	00000000 
00003e5f l       .debug_str	00000000 
00003e95 l       .debug_str	00000000 
00003ec8 l       .debug_str	00000000 
00003edd l       .debug_str	00000000 
00003ee6 l       .debug_str	00000000 
00003f43 l       .debug_str	00000000 
00003fa8 l       .debug_str	00000000 
00003fb2 l       .debug_str	00000000 
00003fc2 l       .debug_str	00000000 
00003fd7 l       .debug_str	00000000 
00003fdf l       .debug_str	00000000 
00004043 l       .debug_str	00000000 
000040af l       .debug_str	00000000 
000040b6 l       .debug_str	00000000 
000040be l       .debug_str	00000000 
000040ff l       .debug_str	00000000 
000040dc l       .debug_str	00000000 
0000410f l       .debug_str	00000000 
00004124 l       .debug_str	00000000 
00004137 l       .debug_str	00000000 
0000414c l       .debug_str	00000000 
00004153 l       .debug_str	00000000 
00004168 l       .debug_str	00000000 
00004370 l       .debug_str	00000000 
000042eb l       .debug_str	00000000 
00003e86 l       .debug_str	00000000 
00003e8d l       .debug_str	00000000 
0000f362 l       .debug_str	00000000 
00003eb8 l       .debug_str	00000000 
0000f6df l       .debug_str	00000000 
0000f6f4 l       .debug_str	00000000 
0000f72f l       .debug_str	00000000 
0000f741 l       .debug_str	00000000 
0002b5a7 l       .debug_str	00000000 
000142cf l       .debug_str	00000000 
00001cdb l       .debug_str	00000000 
00000791 l       .debug_str	00000000 
00000796 l       .debug_str	00000000 
0000079c l       .debug_str	00000000 
000007a3 l       .debug_str	00000000 
00041020 l       .debug_str	00000000 
000007b2 l       .debug_str	00000000 
0000f77d l       .debug_str	00000000 
0000f7bb l       .debug_str	00000000 
0000f7cf l       .debug_str	00000000 
00039d9e l       .debug_str	00000000 
0000f80b l       .debug_str	00000000 
0000f849 l       .debug_str	00000000 
0000761a l       .debug_str	00000000 
0000f85d l       .debug_str	00000000 
0000f89c l       .debug_str	00000000 
0000f8b1 l       .debug_str	00000000 
0000f8f1 l       .debug_str	00000000 
0000f907 l       .debug_str	00000000 
0000f948 l       .debug_str	00000000 
0000f95f l       .debug_str	00000000 
0000f994 l       .debug_str	00000000 
00007a0d l       .debug_str	00000000 
0000f99f l       .debug_str	00000000 
0000f9ab l       .debug_str	00000000 
0000f9b9 l       .debug_str	00000000 
0000f9d0 l       .debug_str	00000000 
00041091 l       .debug_str	00000000 
00000dda l       .debug_str	00000000 
000018f8 l       .debug_str	00000000 
00000de3 l       .debug_str	00000000 
00000ded l       .debug_str	00000000 
000018f7 l       .debug_str	00000000 
00000e0e l       .debug_str	00000000 
00000e13 l       .debug_str	00000000 
00000847 l       .debug_str	00000000 
00000868 l       .debug_str	00000000 
00000861 l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00013c1b l       .debug_str	00000000 
00000875 l       .debug_str	00000000 
0000087a l       .debug_str	00000000 
00000881 l       .debug_str	00000000 
0003c705 l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
00000299 l       .debug_str	00000000 
000026ed l       .debug_str	00000000 
0000088f l       .debug_str	00000000 
00000899 l       .debug_str	00000000 
000008a0 l       .debug_str	00000000 
0000089c l       .debug_str	00000000 
000008a6 l       .debug_str	00000000 
00041eef l       .debug_str	00000000 
00018e5f l       .debug_str	00000000 
0000fa00 l       .debug_str	00000000 
200001a8 l     O .data	00000050 _ZN6mynewt2hw6sensor16SENSOR_LISTENERS17hfe12201c63b15d71E
200001f8 l     O .data	00000018 _ZN6mynewt2hw6sensor17LISTENER_INTERNAL17h6a67ac2c268ecd7fE
080078b8 l     F .text	0000044e _ZN6mynewt2hw6sensor19convert_sensor_data17h960dbb24073819e0E
080081ce l     F .text	0000013c _ZN6mynewt2hw6sensor20wrap_sensor_listener17h6ce6e68bc6139224E
0800830a l     F .text	0000002a _ZN6mynewt2hw6sensor21null_sensor_data_func17h64205b3a5e59647aE
08008334 l     F .text	00000016 _ZN6mynewt2hw6sensor22null_sensor_value_func17h7124af7c589d1972E
08016590 l     O .text	0000001c str.0
080165b0 l     O .text	0000001c str.1
00000000 l    df *ABS*	00000000 3ohr3keow2ao2bqn
0000087d l       .debug_str	00000000 
00000a18 l       .debug_str	00000000 
0000073c l       .debug_str	00000000 
00000ae9 l       .debug_str	00000000 
00000038 l       .debug_str	00000000 
000084cc l       .debug_str	00000000 
00009ac3 l       .debug_str	00000000 
0000b8e7 l       .debug_str	00000000 
000007ab l       .debug_str	00000000 
000007ae l       .debug_str	00000000 
000007b2 l       .debug_str	00000000 
00000b00 l       .debug_str	00000000 
00037b87 l       .debug_str	00000000 
00000b07 l       .debug_str	00000000 
00000ffd l       .debug_str	00000000 
00001486 l       .debug_str	00000000 
00001b1a l       .debug_str	00000000 
0002b5a7 l       .debug_str	00000000 
000142cf l       .debug_str	00000000 
00001cdb l       .debug_str	00000000 
00000791 l       .debug_str	00000000 
00000796 l       .debug_str	00000000 
0000079c l       .debug_str	00000000 
000007a3 l       .debug_str	00000000 
00041020 l       .debug_str	00000000 
00000b14 l       .debug_str	00000000 
00043fa0 l       .debug_str	00000000 
0000fb0a l       .debug_str	00000000 
0000fb52 l       .debug_str	00000000 
00000dc7 l       .debug_str	00000000 
00001af9 l       .debug_str	00000000 
00001af8 l       .debug_str	00000000 
0003ef1f l       .debug_str	00000000 
000026ed l       .debug_str	00000000 
0000ba51 l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
00000299 l       .debug_str	00000000 
00043a1a l       .debug_str	00000000 
00018e5f l       .debug_str	00000000 
0003709c l       .debug_str	00000000 
00000842 l       .debug_str	00000000 
0000bbcd l       .debug_str	00000000 
000008fb l       .debug_str	00000000 
00000a9d l       .debug_str	00000000 
00000983 l       .debug_str	00000000 
0000088f l       .debug_str	00000000 
00039f5c l       .debug_str	00000000 
00000813 l       .debug_str	00000000 
0000a6d6 l       .debug_str	00000000 
0000081b l       .debug_str	00000000 
00000822 l       .debug_str	00000000 
00000836 l       .debug_str	00000000 
00000991 l       .debug_str	00000000 
0000099c l       .debug_str	00000000 
000009a3 l       .debug_str	00000000 
00000853 l       .debug_str	00000000 
0003a53b l       .debug_str	00000000 
0003ef60 l       .debug_str	00000000 
0001143d l       .debug_str	00000000 
00000927 l       .debug_str	00000000 
000009aa l       .debug_str	00000000 
00000936 l       .debug_str	00000000 
0000093a l       .debug_str	00000000 
00000943 l       .debug_str	00000000 
0000094f l       .debug_str	00000000 
00000974 l       .debug_str	00000000 
00000968 l       .debug_str	00000000 
00000979 l       .debug_str	00000000 
00000a22 l       .debug_str	00000000 
00000a92 l       .debug_str	00000000 
00000a80 l       .debug_str	00000000 
00043b00 l       .debug_str	00000000 
000009a9 l       .debug_str	00000000 
000009b1 l       .debug_str	00000000 
000009c8 l       .debug_str	00000000 
000009ec l       .debug_str	00000000 
00039ca3 l       .debug_str	00000000 
0000084e l       .debug_str	00000000 
0003eb70 l       .debug_str	00000000 
00000a08 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4trkzliuh15t83qr
00039457 l       .debug_str	00000000 
00001909 l       .debug_str	00000000 
00000ded l       .debug_str	00000000 
0004241b l       .debug_str	00000000 
00000dc7 l       .debug_str	00000000 
00000868 l       .debug_str	00000000 
00042875 l       .debug_str	00000000 
0000087b l       .debug_str	00000000 
00001962 l       .debug_str	00000000 
0000073c l       .debug_str	00000000 
00000ae9 l       .debug_str	00000000 
00000038 l       .debug_str	00000000 
00000b00 l       .debug_str	00000000 
00009ac3 l       .debug_str	00000000 
0000250b l       .debug_str	00000000 
00000ff8 l       .debug_str	00000000 
00001000 l       .debug_str	00000000 
0000100b l       .debug_str	00000000 
00001016 l       .debug_str	00000000 
00001023 l       .debug_str	00000000 
0000102e l       .debug_str	00000000 
00001036 l       .debug_str	00000000 
00001041 l       .debug_str	00000000 
0000104c l       .debug_str	00000000 
00001056 l       .debug_str	00000000 
00001061 l       .debug_str	00000000 
0000106c l       .debug_str	00000000 
00001079 l       .debug_str	00000000 
00001085 l       .debug_str	00000000 
00001092 l       .debug_str	00000000 
000010a0 l       .debug_str	00000000 
000010aa l       .debug_str	00000000 
0000fafe l       .debug_str	00000000 
000084cc l       .debug_str	00000000 
00000fde l       .debug_str	00000000 
0000b8e7 l       .debug_str	00000000 
00000fe2 l       .debug_str	00000000 
00000fed l       .debug_str	00000000 
0000119a l       .debug_str	00000000 
0000ba51 l       .debug_str	00000000 
000007ab l       .debug_str	00000000 
0000087d l       .debug_str	00000000 
0003c69a l       .debug_str	00000000 
00000050 l       .debug_str	00000000 
000023dd l       .debug_str	00000000 
00002732 l       .debug_str	00000000 
000023e6 l       .debug_str	00000000 
0003e594 l       .debug_str	00000000 
000023ed l       .debug_str	00000000 
000023f9 l       .debug_str	00000000 
0003709c l       .debug_str	00000000 
00000842 l       .debug_str	00000000 
0000118a l       .debug_str	00000000 
00002401 l       .debug_str	00000000 
00043fa0 l       .debug_str	00000000 
000008fb l       .debug_str	00000000 
0000245b l       .debug_str	00000000 
000024bd l       .debug_str	00000000 
000024c8 l       .debug_str	00000000 
0000250f l       .debug_str	00000000 
0000255e l       .debug_str	00000000 
00002568 l       .debug_str	00000000 
000025a5 l       .debug_str	00000000 
000025ea l       .debug_str	00000000 
000025f3 l       .debug_str	00000000 
00002603 l       .debug_str	00000000 
0000260b l       .debug_str	00000000 
00002660 l       .debug_str	00000000 
000026bd l       .debug_str	00000000 
000026c9 l       .debug_str	00000000 
000026d2 l       .debug_str	00000000 
000026de l       .debug_str	00000000 
000026ea l       .debug_str	00000000 
000026f3 l       .debug_str	00000000 
00000857 l       .debug_str	00000000 
000026fb l       .debug_str	00000000 
00000581 l       .debug_str	00000000 
00002703 l       .debug_str	00000000 
00002731 l       .debug_str	00000000 
00002718 l       .debug_str	00000000 
00002738 l       .debug_str	00000000 
0000273f l       .debug_str	00000000 
00002747 l       .debug_str	00000000 
00000708 l       .debug_str	00000000 
00002751 l       .debug_str	00000000 
000004ad l       .debug_str	00000000 
000006ee l       .debug_str	00000000 
0000b99b l       .debug_str	00000000 
0000066b l       .debug_str	00000000 
00000643 l       .debug_str	00000000 
000006cf l       .debug_str	00000000 
00037204 l       .debug_str	00000000 
00000609 l       .debug_str	00000000 
000004df l       .debug_str	00000000 
0003e04e l       .debug_str	00000000 
000364f6 l       .debug_str	00000000 
0000275a l       .debug_str	00000000 
00002787 l       .debug_str	00000000 
000026c3 l       .debug_str	00000000 
00038516 l       .debug_str	00000000 
00000521 l       .debug_str	00000000 
00000690 l       .debug_str	00000000 
000005f2 l       .debug_str	00000000 
000004f0 l       .debug_str	00000000 
000027bc l       .debug_str	00000000 
000027e5 l       .debug_str	00000000 
00002843 l       .debug_str	00000000 
000005d2 l       .debug_str	00000000 
000006d7 l       .debug_str	00000000 
000006af l       .debug_str	00000000 
000028a9 l       .debug_str	00000000 
000027d5 l       .debug_str	00000000 
000006fa l       .debug_str	00000000 
000004a2 l       .debug_str	00000000 
00000674 l       .debug_str	00000000 
000006df l       .debug_str	00000000 
000028c7 l       .debug_str	00000000 
0000065b l       .debug_str	00000000 
00000582 l       .debug_str	00000000 
00000509 l       .debug_str	00000000 
000028dd l       .debug_str	00000000 
00002903 l       .debug_str	00000000 
000004b8 l       .debug_str	00000000 
00002919 l       .debug_str	00000000 
0000645f l       .debug_str	00000000 
000028e2 l       .debug_str	00000000 
0000292f l       .debug_str	00000000 
0002ce96 l       .debug_str	00000000 
00002946 l       .debug_str	00000000 
0000294e l       .debug_str	00000000 
00002957 l       .debug_str	00000000 
00003d55 l       .debug_str	00000000 
00002960 l       .debug_str	00000000 
0000a35b l       .debug_str	00000000 
0003cfba l       .debug_str	00000000 
00002968 l       .debug_str	00000000 
00002974 l       .debug_str	00000000 
0000297f l       .debug_str	00000000 
00002987 l       .debug_str	00000000 
00004370 l       .debug_str	00000000 
000042eb l       .debug_str	00000000 
0000298f l       .debug_str	00000000 
00002a8b l       .debug_str	00000000 
00002b8f l       .debug_str	00000000 
00002b9d l       .debug_str	00000000 
00002ba8 l       .debug_str	00000000 
00000822 l       .debug_str	00000000 
00002bd5 l       .debug_str	00000000 
00002bb2 l       .debug_str	00000000 
00002be0 l       .debug_str	00000000 
00002c5b l       .debug_str	00000000 
00002cde l       .debug_str	00000000 
00002cec l       .debug_str	00000000 
00002d4b l       .debug_str	00000000 
00002db2 l       .debug_str	00000000 
00002dc8 l       .debug_str	00000000 
00002dd8 l       .debug_str	00000000 
0003a863 l       .debug_str	00000000 
000009aa l       .debug_str	00000000 
00002de7 l       .debug_str	00000000 
000114f6 l       .debug_str	00000000 
00002ded l       .debug_str	00000000 
00002df3 l       .debug_str	00000000 
00002df9 l       .debug_str	00000000 
00002e05 l       .debug_str	00000000 
00043a1a l       .debug_str	00000000 
00002e0d l       .debug_str	00000000 
0004208c l       .debug_str	00000000 
00002e15 l       .debug_str	00000000 
00002e5b l       .debug_str	00000000 
00002e38 l       .debug_str	00000000 
00002e6b l       .debug_str	00000000 
00002eab l       .debug_str	00000000 
0003a333 l       .debug_str	00000000 
00002ef3 l       .debug_str	00000000 
00002ef9 l       .debug_str	00000000 
00002eff l       .debug_str	00000000 
00002f28 l       .debug_str	00000000 
00002f05 l       .debug_str	00000000 
00002f3a l       .debug_str	00000000 
00002f7c l       .debug_str	00000000 
0003a1e5 l       .debug_str	00000000 
00002fc6 l       .debug_str	00000000 
00002fcc l       .debug_str	00000000 
00002fd2 l       .debug_str	00000000 
00002ffb l       .debug_str	00000000 
00002fd8 l       .debug_str	00000000 
0000300d l       .debug_str	00000000 
0000304f l       .debug_str	00000000 
0000bbcd l       .debug_str	00000000 
00003099 l       .debug_str	00000000 
0000309f l       .debug_str	00000000 
000030a5 l       .debug_str	00000000 
000030ab l       .debug_str	00000000 
000030d4 l       .debug_str	00000000 
000030b1 l       .debug_str	00000000 
000030e5 l       .debug_str	00000000 
00003126 l       .debug_str	00000000 
0000316f l       .debug_str	00000000 
00003174 l       .debug_str	00000000 
0003a5e3 l       .debug_str	00000000 
00003179 l       .debug_str	00000000 
0000317f l       .debug_str	00000000 
00003185 l       .debug_str	00000000 
000031ae l       .debug_str	00000000 
0000318b l       .debug_str	00000000 
000031bf l       .debug_str	00000000 
00003200 l       .debug_str	00000000 
0003952b l       .debug_str	00000000 
00003249 l       .debug_str	00000000 
00003275 l       .debug_str	00000000 
00003252 l       .debug_str	00000000 
00003286 l       .debug_str	00000000 
000032c7 l       .debug_str	00000000 
00003310 l       .debug_str	00000000 
0003a806 l       .debug_str	00000000 
00003315 l       .debug_str	00000000 
0000331e l       .debug_str	00000000 
00003325 l       .debug_str	00000000 
00003350 l       .debug_str	00000000 
0000332d l       .debug_str	00000000 
00003362 l       .debug_str	00000000 
000033a4 l       .debug_str	00000000 
0003a46b l       .debug_str	00000000 
000033ee l       .debug_str	00000000 
000033f4 l       .debug_str	00000000 
000033fa l       .debug_str	00000000 
00003400 l       .debug_str	00000000 
00003406 l       .debug_str	00000000 
0000340e l       .debug_str	00000000 
0000341c l       .debug_str	00000000 
0000342b l       .debug_str	00000000 
0000343c l       .debug_str	00000000 
00003447 l       .debug_str	00000000 
00003452 l       .debug_str	00000000 
0000345d l       .debug_str	00000000 
00003464 l       .debug_str	00000000 
000034aa l       .debug_str	00000000 
00003487 l       .debug_str	00000000 
000034bc l       .debug_str	00000000 
000034fe l       .debug_str	00000000 
0003965a l       .debug_str	00000000 
00003548 l       .debug_str	00000000 
00003575 l       .debug_str	00000000 
00003552 l       .debug_str	00000000 
00003587 l       .debug_str	00000000 
000035c9 l       .debug_str	00000000 
00003613 l       .debug_str	00000000 
00003618 l       .debug_str	00000000 
00003645 l       .debug_str	00000000 
00003622 l       .debug_str	00000000 
00003657 l       .debug_str	00000000 
00003699 l       .debug_str	00000000 
000036e3 l       .debug_str	00000000 
0000bb07 l       .debug_str	00000000 
0003db77 l       .debug_str	00000000 
000036f7 l       .debug_str	00000000 
00003707 l       .debug_str	00000000 
00003710 l       .debug_str	00000000 
0000371b l       .debug_str	00000000 
0000372a l       .debug_str	00000000 
0000373f l       .debug_str	00000000 
00003770 l       .debug_str	00000000 
0000380d l       .debug_str	00000000 
000038b2 l       .debug_str	00000000 
000038bd l       .debug_str	00000000 
000038c6 l       .debug_str	00000000 
0000390a l       .debug_str	00000000 
000038e7 l       .debug_str	00000000 
0000391d l       .debug_str	00000000 
000039a0 l       .debug_str	00000000 
00003a2b l       .debug_str	00000000 
00003a47 l       .debug_str	00000000 
00003a93 l       .debug_str	00000000 
00003ae7 l       .debug_str	00000000 
00003b04 l       .debug_str	00000000 
00003b18 l       .debug_str	00000000 
00003b64 l       .debug_str	00000000 
00003bb8 l       .debug_str	00000000 
00003bce l       .debug_str	00000000 
00003be2 l       .debug_str	00000000 
00003c29 l       .debug_str	00000000 
00003c78 l       .debug_str	00000000 
00003ca4 l       .debug_str	00000000 
00003c81 l       .debug_str	00000000 
00003cb2 l       .debug_str	00000000 
00003cb8 l       .debug_str	00000000 
00003cc0 l       .debug_str	00000000 
00003cc7 l       .debug_str	00000000 
000049ef l       .debug_str	00000000 
00003ccf l       .debug_str	00000000 
00003cd7 l       .debug_str	00000000 
000108b5 l       .debug_str	00000000 
00003ce6 l       .debug_str	00000000 
00004a21 l       .debug_str	00000000 
00003cf1 l       .debug_str	00000000 
00003cfc l       .debug_str	00000000 
00003d0d l       .debug_str	00000000 
00003d13 l       .debug_str	00000000 
00003d1b l       .debug_str	00000000 
00003d22 l       .debug_str	00000000 
00003d2c l       .debug_str	00000000 
00003d34 l       .debug_str	00000000 
00003d3c l       .debug_str	00000000 
00003d5e l       .debug_str	00000000 
00003d69 l       .debug_str	00000000 
00003d75 l       .debug_str	00000000 
00003d7d l       .debug_str	00000000 
00003d86 l       .debug_str	00000000 
000005cb l       .debug_str	00000000 
00003d91 l       .debug_str	00000000 
00003d9c l       .debug_str	00000000 
00003da7 l       .debug_str	00000000 
00003db7 l       .debug_str	00000000 
000395bd l       .debug_str	00000000 
00004e10 l       .debug_str	00000000 
00003dc1 l       .debug_str	00000000 
00003df9 l       .debug_str	00000000 
00003e39 l       .debug_str	00000000 
00003e40 l       .debug_str	00000000 
00003e48 l       .debug_str	00000000 
00004e29 l       .debug_str	00000000 
00003e5f l       .debug_str	00000000 
00003e6f l       .debug_str	00000000 
00003e7e l       .debug_str	00000000 
00003e86 l       .debug_str	00000000 
00003e8d l       .debug_str	00000000 
0000f362 l       .debug_str	00000000 
00003eb8 l       .debug_str	00000000 
00003e95 l       .debug_str	00000000 
00003ec8 l       .debug_str	00000000 
00003edd l       .debug_str	00000000 
00003ee6 l       .debug_str	00000000 
00003f43 l       .debug_str	00000000 
00003fa8 l       .debug_str	00000000 
00003fb2 l       .debug_str	00000000 
00003fc2 l       .debug_str	00000000 
00003fd7 l       .debug_str	00000000 
00003fdf l       .debug_str	00000000 
00004043 l       .debug_str	00000000 
000040af l       .debug_str	00000000 
000040b6 l       .debug_str	00000000 
000040be l       .debug_str	00000000 
000040ff l       .debug_str	00000000 
000040dc l       .debug_str	00000000 
0000410f l       .debug_str	00000000 
00004124 l       .debug_str	00000000 
00004137 l       .debug_str	00000000 
0000414c l       .debug_str	00000000 
00004153 l       .debug_str	00000000 
00004168 l       .debug_str	00000000 
0002c0e1 l       .debug_str	00000000 
000007ae l       .debug_str	00000000 
0000f281 l       .debug_str	00000000 
0000fb81 l       .debug_str	00000000 
0000fbb4 l       .debug_str	00000000 
000007f5 l       .debug_str	00000000 
0000fbdf l       .debug_str	00000000 
0000fc1f l       .debug_str	00000000 
00000fda l       .debug_str	00000000 
0000084e l       .debug_str	00000000 
0003eb70 l       .debug_str	00000000 
00000e0e l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 5dsjoo7xml11tgl6
000007ab l       .debug_str	00000000 
0003a53b l       .debug_str	00000000 
0000073c l       .debug_str	00000000 
00000ae9 l       .debug_str	00000000 
00000038 l       .debug_str	00000000 
000084cc l       .debug_str	00000000 
0003673f l       .debug_str	00000000 
0000fc6d l       .debug_str	00000000 
00000b14 l       .debug_str	00000000 
0000fc80 l       .debug_str	00000000 
0000fd05 l       .debug_str	00000000 
00009ac3 l       .debug_str	00000000 
0000ba51 l       .debug_str	00000000 
0000fd1e l       .debug_str	00000000 
0000087d l       .debug_str	00000000 
00043fa0 l       .debug_str	00000000 
0001143d l       .debug_str	00000000 
0000fd0e l       .debug_str	00000000 
0002c0e1 l       .debug_str	00000000 
000007ae l       .debug_str	00000000 
0000bbcd l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 lllmpnvtc5thcz6
00000853 l       .debug_str	00000000 
00000dc7 l       .debug_str	00000000 
0000073c l       .debug_str	00000000 
00000ae9 l       .debug_str	00000000 
00000038 l       .debug_str	00000000 
000084cc l       .debug_str	00000000 
00000fde l       .debug_str	00000000 
0000b8e7 l       .debug_str	00000000 
00000fe2 l       .debug_str	00000000 
00000fed l       .debug_str	00000000 
0000119a l       .debug_str	00000000 
0000a452 l       .debug_str	00000000 
00000b14 l       .debug_str	00000000 
00043fa0 l       .debug_str	00000000 
0000fd46 l       .debug_str	00000000 
0000fd90 l       .debug_str	00000000 
0000118a l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 cstr_core.abfp6oo7-cgu.15
0000fde0 l       .debug_str	00000000 
0000ff4b l       .debug_str	00000000 
0000ff71 l       .debug_str	00000000 
0000ff22 l       .debug_str	00000000 
0003a53b l       .debug_str	00000000 
0002c0e1 l       .debug_str	00000000 
00000dc7 l       .debug_str	00000000 
0000ff17 l       .debug_str	00000000 
0000073c l       .debug_str	00000000 
00007ba8 l       .debug_str	00000000 
00007c02 l       .debug_str	00000000 
000084cc l       .debug_str	00000000 
000020a9 l       .debug_str	00000000 
00000b14 l       .debug_str	00000000 
0000fdab l       .debug_str	00000000 
0000fdb2 l       .debug_str	00000000 
0000fddc l       .debug_str	00000000 
0003709c l       .debug_str	00000000 
0000ba51 l       .debug_str	00000000 
00000842 l       .debug_str	00000000 
0000bbcd l       .debug_str	00000000 
00043fa0 l       .debug_str	00000000 
000008fb l       .debug_str	00000000 
0000087d l       .debug_str	00000000 
00000983 l       .debug_str	00000000 
00038b3a l       .debug_str	00000000 
0000b8e7 l       .debug_str	00000000 
000007ab l       .debug_str	00000000 
0000084e l       .debug_str	00000000 
00000857 l       .debug_str	00000000 
0003eb70 l       .debug_str	00000000 
00006608 l       .debug_str	00000000 
0000fde9 l       .debug_str	00000000 
0000fe3a l       .debug_str	00000000 
00008508 l       .debug_str	00000000 
0000fe46 l       .debug_str	00000000 
0000fe97 l       .debug_str	00000000 
0000fea9 l       .debug_str	00000000 
0000ff01 l       .debug_str	00000000 
00009ac3 l       .debug_str	00000000 
0000087b l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 cstr_core.abfp6oo7-cgu.7
00043fa0 l       .debug_str	00000000 
0000f653 l       .debug_str	00000000 
00000dc7 l       .debug_str	00000000 
000033fe l       .debug_str	00000000 
0000f59c l       .debug_str	00000000 
0000073c l       .debug_str	00000000 
00007ba8 l       .debug_str	00000000 
00007c02 l       .debug_str	00000000 
000084cc l       .debug_str	00000000 
0003673f l       .debug_str	00000000 
00000b14 l       .debug_str	00000000 
0000ff78 l       .debug_str	00000000 
0000f3d1 l       .debug_str	00000000 
0003709c l       .debug_str	00000000 
0000ba51 l       .debug_str	00000000 
00000842 l       .debug_str	00000000 
0000bbcd l       .debug_str	00000000 
0000a452 l       .debug_str	00000000 
000008fb l       .debug_str	00000000 
0000087d l       .debug_str	00000000 
00000983 l       .debug_str	00000000 
0000ffbf l       .debug_str	00000000 
0000f426 l       .debug_str	00000000 
000056e0 l       .debug_str	00000000 
0003c6f9 l       .debug_str	00000000 
08008530 l     F .text	00000052 _ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_add17hd120bde4938f3d3eE
00000000 l    df *ABS*	00000000 memchr.c0kozxyb-cgu.6
000008fb l       .debug_str	00000000 
0001005a l       .debug_str	00000000 
0000073c l       .debug_str	00000000 
00008e1c l       .debug_str	00000000 
00008e73 l       .debug_str	00000000 
000084cc l       .debug_str	00000000 
0003709c l       .debug_str	00000000 
0000ba51 l       .debug_str	00000000 
00000842 l       .debug_str	00000000 
0000bbcd l       .debug_str	00000000 
00043fa0 l       .debug_str	00000000 
00000dc7 l       .debug_str	00000000 
0000087d l       .debug_str	00000000 
00000983 l       .debug_str	00000000 
0001000a l       .debug_str	00000000 
00010049 l       .debug_str	00000000 
0004491f l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 core.6gxsn4hc-cgu.0
0000073c l       .debug_str	00000000 
0001005e l       .debug_str	00000000 
00010071 l       .debug_str	00000000 
000084cc l       .debug_str	00000000 
0003673f l       .debug_str	00000000 
000100a2 l       .debug_str	00000000 
000100aa l       .debug_str	00000000 
000100b3 l       .debug_str	00000000 
000100fc l       .debug_str	00000000 
0000ba51 l       .debug_str	00000000 
00000822 l       .debug_str	00000000 
000100ba l       .debug_str	00000000 
000100f9 l       .debug_str	00000000 
00010102 l       .debug_str	00000000 
00010144 l       .debug_str	00000000 
0001014e l       .debug_str	00000000 
00010191 l       .debug_str	00000000 
0001019b l       .debug_str	00000000 
000101de l       .debug_str	00000000 
000101e8 l       .debug_str	00000000 
0001022b l       .debug_str	00000000 
00010236 l       .debug_str	00000000 
0001027b l       .debug_str	00000000 
00010286 l       .debug_str	00000000 
000102cb l       .debug_str	00000000 
000102d1 l       .debug_str	00000000 
0000087d l       .debug_str	00000000 
0000bb07 l       .debug_str	00000000 
000056e0 l       .debug_str	00000000 
000108b5 l       .debug_str	00000000 
00006628 l       .debug_str	00000000 
000102de l       .debug_str	00000000 
000102ee l       .debug_str	00000000 
0000081b l       .debug_str	00000000 
00000809 l       .debug_str	00000000 
00000b14 l       .debug_str	00000000 
00010334 l       .debug_str	00000000 
00010349 l       .debug_str	00000000 
00008503 l       .debug_str	00000000 
0000846f l       .debug_str	00000000 
00008478 l       .debug_str	00000000 
00000869 l       .debug_str	00000000 
000009a3 l       .debug_str	00000000 
00000853 l       .debug_str	00000000 
0000b8e7 l       .debug_str	00000000 
00000857 l       .debug_str	00000000 
00043b00 l       .debug_str	00000000 
000009a9 l       .debug_str	00000000 
000009aa l       .debug_str	00000000 
00009379 l       .debug_str	00000000 
00043fa0 l       .debug_str	00000000 
00008480 l       .debug_str	00000000 
00010d78 l       .debug_str	00000000 
00010f4c l       .debug_str	00000000 
0003ef1f l       .debug_str	00000000 
00010353 l       .debug_str	00000000 
000378fe l       .debug_str	00000000 
000374a1 l       .debug_str	00000000 
00010bd8 l       .debug_str	00000000 
000084bd l       .debug_str	00000000 
0003709c l       .debug_str	00000000 
00000842 l       .debug_str	00000000 
00000299 l       .debug_str	00000000 
0003e208 l       .debug_str	00000000 
0003a005 l       .debug_str	00000000 
00010365 l       .debug_str	00000000 
0001036a l       .debug_str	00000000 
000415e2 l       .debug_str	00000000 
00010375 l       .debug_str	00000000 
00040274 l       .debug_str	00000000 
0001037f l       .debug_str	00000000 
000109f1 l       .debug_str	00000000 
00010389 l       .debug_str	00000000 
0000bbcd l       .debug_str	00000000 
00010a31 l       .debug_str	00000000 
000008fb l       .debug_str	00000000 
00010c1b l       .debug_str	00000000 
000084ff l       .debug_str	00000000 
00008508 l       .debug_str	00000000 
00010397 l       .debug_str	00000000 
0001040b l       .debug_str	00000000 
00010cb4 l       .debug_str	00000000 
00010423 l       .debug_str	00000000 
00010a37 l       .debug_str	00000000 
00010a11 l       .debug_str	00000000 
00010a4c l       .debug_str	00000000 
00010d8e l       .debug_str	00000000 
00010c7d l       .debug_str	00000000 
00010428 l       .debug_str	00000000 
000104a0 l       .debug_str	00000000 
00010d05 l       .debug_str	00000000 
00010d48 l       .debug_str	00000000 
000104b2 l       .debug_str	00000000 
0002011c l       .debug_str	00000000 
00038b46 l       .debug_str	00000000 
0003e68a l       .debug_str	00000000 
00010dc0 l       .debug_str	00000000 
00010c4c l       .debug_str	00000000 
00010526 l       .debug_str	00000000 
0003eefd l       .debug_str	00000000 
0001057e l       .debug_str	00000000 
00010586 l       .debug_str	00000000 
0000fde0 l       .debug_str	00000000 
0000084e l       .debug_str	00000000 
0003eb70 l       .debug_str	00000000 
00000868 l       .debug_str	00000000 
0001058e l       .debug_str	00000000 
00010595 l       .debug_str	00000000 
0000ff71 l       .debug_str	00000000 
000105a1 l       .debug_str	00000000 
000105ab l       .debug_str	00000000 
000105b8 l       .debug_str	00000000 
000105c5 l       .debug_str	00000000 
0000a452 l       .debug_str	00000000 
000105da l       .debug_str	00000000 
0003a2b2 l       .debug_str	00000000 
000105e3 l       .debug_str	00000000 
000105f7 l       .debug_str	00000000 
0003e41a l       .debug_str	00000000 
00006608 l       .debug_str	00000000 
0001060d l       .debug_str	00000000 
00010612 l       .debug_str	00000000 
00010624 l       .debug_str	00000000 
0001064c l       .debug_str	00000000 
00010656 l       .debug_str	00000000 
00010666 l       .debug_str	00000000 
000106bf l       .debug_str	00000000 
000106c7 l       .debug_str	00000000 
000106d4 l       .debug_str	00000000 
000106e1 l       .debug_str	00000000 
00010e26 l       .debug_str	00000000 
00036fb7 l       .debug_str	00000000 
000106ee l       .debug_str	00000000 
0001071b l       .debug_str	00000000 
0001074a l       .debug_str	00000000 
00010771 l       .debug_str	00000000 
00010790 l       .debug_str	00000000 
000107a0 l       .debug_str	00000000 
0002b5a7 l       .debug_str	00000000 
000107d2 l       .debug_str	00000000 
000107e1 l       .debug_str	00000000 
000107ec l       .debug_str	00000000 
00004289 l       .debug_str	00000000 
00039f5c l       .debug_str	00000000 
00000813 l       .debug_str	00000000 
0000a6d6 l       .debug_str	00000000 
00000836 l       .debug_str	00000000 
00000991 l       .debug_str	00000000 
00010821 l       .debug_str	00000000 
0001084c l       .debug_str	00000000 
0001082c l       .debug_str	00000000 
00010832 l       .debug_str	00000000 
0003abf2 l       .debug_str	00000000 
00010857 l       .debug_str	00000000 
0001085c l       .debug_str	00000000 
0003bd4f l       .debug_str	00000000 
0001143d l       .debug_str	00000000 
00011436 l       .debug_str	00000000 
000083c3 l       .debug_str	00000000 
00011464 l       .debug_str	00000000 
00011498 l       .debug_str	00000000 
00010862 l       .debug_str	00000000 
00004402 l       .debug_str	00000000 
000108a0 l       .debug_str	00000000 
00011441 l       .debug_str	00000000 
0001148e l       .debug_str	00000000 
00010881 l       .debug_str	00000000 
0001086e l       .debug_str	00000000 
00010887 l       .debug_str	00000000 
000108af l       .debug_str	00000000 
000108b4 l       .debug_str	00000000 
000108b9 l       .debug_str	00000000 
000108bf l       .debug_str	00000000 
000108c7 l       .debug_str	00000000 
0002ce41 l       .debug_str	00000000 
0001d1b1 l       .debug_str	00000000 
0002a2f3 l       .debug_str	00000000 
000108cc l       .debug_str	00000000 
000108f4 l       .debug_str	00000000 
000108d6 l       .debug_str	00000000 
00006607 l       .debug_str	00000000 
0000b99b l       .debug_str	00000000 
000108fc l       .debug_str	00000000 
00008805 l       .debug_str	00000000 
0000a35b l       .debug_str	00000000 
000018f2 l       .debug_str	00000000 
00010901 l       .debug_str	00000000 
00010909 l       .debug_str	00000000 
0001d2df l       .debug_str	00000000 
0001090f l       .debug_str	00000000 
00010936 l       .debug_str	00000000 
0001091a l       .debug_str	00000000 
00010660 l       .debug_str	00000000 
0001093e l       .debug_str	00000000 
0001095b l       .debug_str	00000000 
00010946 l       .debug_str	00000000 
0001096a l       .debug_str	00000000 
0001096e l       .debug_str	00000000 
0001097b l       .debug_str	00000000 
00010984 l       .debug_str	00000000 
00036114 l       .debug_str	00000000 
0001099a l       .debug_str	00000000 
0001098e l       .debug_str	00000000 
000020a9 l       .debug_str	00000000 
000109a7 l       .debug_str	00000000 
000109b3 l       .debug_str	00000000 
000109d6 l       .debug_str	00000000 
000109c0 l       .debug_str	00000000 
000109e4 l       .debug_str	00000000 
00010a04 l       .debug_str	00000000 
00010a24 l       .debug_str	00000000 
00010a3f l       .debug_str	00000000 
00010a5a l       .debug_str	00000000 
00010a60 l       .debug_str	00000000 
00010a64 l       .debug_str	00000000 
00010a75 l       .debug_str	00000000 
00010a68 l       .debug_str	00000000 
0000080f l       .debug_str	00000000 
00010a86 l       .debug_str	00000000 
00010a85 l       .debug_str	00000000 
00000847 l       .debug_str	00000000 
00000861 l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
000142cf l       .debug_str	00000000 
00001cdb l       .debug_str	00000000 
00013c1b l       .debug_str	00000000 
00000875 l       .debug_str	00000000 
0000087a l       .debug_str	00000000 
00000881 l       .debug_str	00000000 
0003c705 l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
00043a1a l       .debug_str	00000000 
00000791 l       .debug_str	00000000 
00000796 l       .debug_str	00000000 
0000079c l       .debug_str	00000000 
000007a3 l       .debug_str	00000000 
00041020 l       .debug_str	00000000 
000026ed l       .debug_str	00000000 
0000088f l       .debug_str	00000000 
00000899 l       .debug_str	00000000 
000008a0 l       .debug_str	00000000 
0000089c l       .debug_str	00000000 
000008a6 l       .debug_str	00000000 
00041eef l       .debug_str	00000000 
00018e5f l       .debug_str	00000000 
000008ae l       .debug_str	00000000 
000008d3 l       .debug_str	00000000 
000008b9 l       .debug_str	00000000 
000008dc l       .debug_str	00000000 
00000900 l       .debug_str	00000000 
00039ca3 l       .debug_str	00000000 
0003a53b l       .debug_str	00000000 
0003ef60 l       .debug_str	00000000 
00000927 l       .debug_str	00000000 
00000936 l       .debug_str	00000000 
0000093a l       .debug_str	00000000 
00000943 l       .debug_str	00000000 
0000094f l       .debug_str	00000000 
00000974 l       .debug_str	00000000 
00000968 l       .debug_str	00000000 
00000979 l       .debug_str	00000000 
00009ac3 l       .debug_str	00000000 
000007ab l       .debug_str	00000000 
000007ae l       .debug_str	00000000 
000007b2 l       .debug_str	00000000 
00000983 l       .debug_str	00000000 
0000099c l       .debug_str	00000000 
000009b1 l       .debug_str	00000000 
000009c8 l       .debug_str	00000000 
000009ec l       .debug_str	00000000 
00000a18 l       .debug_str	00000000 
00000a08 l       .debug_str	00000000 
00000a22 l       .debug_str	00000000 
00000a92 l       .debug_str	00000000 
00000a80 l       .debug_str	00000000 
00000a9d l       .debug_str	00000000 
00010da7 l       .debug_str	00000000 
00010d9b l       .debug_str	00000000 
00010a9a l       .debug_str	00000000 
00010a8b l       .debug_str	00000000 
0003a457 l       .debug_str	00000000 
000360f4 l       .debug_str	00000000 
00000ab6 l       .debug_str	00000000 
00000ae0 l       .debug_str	00000000 
00000ad2 l       .debug_str	00000000 
00001909 l       .debug_str	00000000 
000018fe l       .debug_str	00000000 
00010ad8 l       .debug_str	00000000 
00010ab8 l       .debug_str	00000000 
00010b31 l       .debug_str	00000000 
00010b11 l       .debug_str	00000000 
00036106 l       .debug_str	00000000 
00010b88 l       .debug_str	00000000 
00010b8d l       .debug_str	00000000 
00010b93 l       .debug_str	00000000 
00010bb6 l       .debug_str	00000000 
00010b98 l       .debug_str	00000000 
00010bc1 l       .debug_str	00000000 
00010c0c l       .debug_str	00000000 
00010c3d l       .debug_str	00000000 
00010c6e l       .debug_str	00000000 
00010c9d l       .debug_str	00000000 
00010cee l       .debug_str	00000000 
00010d39 l       .debug_str	00000000 
00010d6a l       .debug_str	00000000 
00010d81 l       .debug_str	00000000 
00010d9a l       .debug_str	00000000 
00010db1 l       .debug_str	00000000 
00010df1 l       .debug_str	00000000 
00010ddf l       .debug_str	00000000 
00010dde l       .debug_str	00000000 
00010dfc l       .debug_str	00000000 
00010e05 l       .debug_str	00000000 
00010e12 l       .debug_str	00000000 
00010e11 l       .debug_str	00000000 
00010e1a l       .debug_str	00000000 
00010e47 l       .debug_str	00000000 
00010e32 l       .debug_str	00000000 
00010e64 l       .debug_str	00000000 
00010e70 l       .debug_str	00000000 
00010f1a l       .debug_str	00000000 
00010e7c l       .debug_str	00000000 
00010e83 l       .debug_str	00000000 
00010e8c l       .debug_str	00000000 
00010e9a l       .debug_str	00000000 
00010ea1 l       .debug_str	00000000 
00010ea9 l       .debug_str	00000000 
00010eb0 l       .debug_str	00000000 
00010ef6 l       .debug_str	00000000 
00010ed1 l       .debug_str	00000000 
00010ebc l       .debug_str	00000000 
00010ee1 l       .debug_str	00000000 
00010f05 l       .debug_str	00000000 
00010f35 l       .debug_str	00000000 
00010f26 l       .debug_str	00000000 
00010f40 l       .debug_str	00000000 
00041c8a l       .debug_str	00000000 
00010f69 l       .debug_str	00000000 
00010f52 l       .debug_str	00000000 
00010f87 l       .debug_str	00000000 
00010faa l       .debug_str	00000000 
00010f93 l       .debug_str	00000000 
00010ff4 l       .debug_str	00000000 
00010fe8 l       .debug_str	00000000 
0001065b l       .debug_str	00000000 
00011011 l       .debug_str	00000000 
00010ffa l       .debug_str	00000000 
0001105a l       .debug_str	00000000 
00011082 l       .debug_str	00000000 
0001106b l       .debug_str	00000000 
0003c6f9 l       .debug_str	00000000 
000033fe l       .debug_str	00000000 
0003f7f4 l       .debug_str	00000000 
00011131 l       .debug_str	00000000 
00011113 l       .debug_str	00000000 
00011227 l       .debug_str	00000000 
00011207 l       .debug_str	00000000 
0001129a l       .debug_str	00000000 
0001127a l       .debug_str	00000000 
00043e6b l       .debug_str	00000000 
000112ed l       .debug_str	00000000 
000112f1 l       .debug_str	00000000 
00038a8c l       .debug_str	00000000 
0003cbd5 l       .debug_str	00000000 
000112f4 l       .debug_str	00000000 
000112f7 l       .debug_str	00000000 
00040811 l       .debug_str	00000000 
000112fb l       .debug_str	00000000 
000112fa l       .debug_str	00000000 
00011300 l       .debug_str	00000000 
0001140b l       .debug_str	00000000 
00037911 l       .debug_str	00000000 
0001131e l       .debug_str	00000000 
0001130c l       .debug_str	00000000 
00011343 l       .debug_str	00000000 
000113d2 l       .debug_str	00000000 
00011361 l       .debug_str	00000000 
0001134f l       .debug_str	00000000 
00011386 l       .debug_str	00000000 
0001139f l       .debug_str	00000000 
0001138d l       .debug_str	00000000 
000113ab l       .debug_str	00000000 
000113c3 l       .debug_str	00000000 
000113fc l       .debug_str	00000000 
00011435 l       .debug_str	00000000 
00011440 l       .debug_str	00000000 
00011463 l       .debug_str	00000000 
00011497 l       .debug_str	00000000 
000114ad l       .debug_str	00000000 
000114cc l       .debug_str	00000000 
000114b6 l       .debug_str	00000000 
000114e4 l       .debug_str	00000000 
000114d8 l       .debug_str	00000000 
000114f2 l       .debug_str	00000000 
000114f1 l       .debug_str	00000000 
0000250b l       .debug_str	00000000 
000018f8 l       .debug_str	00000000 
000114f6 l       .debug_str	00000000 
000114f5 l       .debug_str	00000000 
0000a3e3 l       .debug_str	00000000 
000114fa l       .debug_str	00000000 
000114ff l       .debug_str	00000000 
0001153f l       .debug_str	00000000 
00011547 l       .debug_str	00000000 
00011587 l       .debug_str	00000000 
000115ce l       .debug_str	00000000 
000115dc l       .debug_str	00000000 
000115e6 l       .debug_str	00000000 
00023024 l       .debug_str	00000000 
0000cac7 l       .debug_str	00000000 
000115ed l       .debug_str	00000000 
000115f6 l       .debug_str	00000000 
00011631 l       .debug_str	00000000 
0001163b l       .debug_str	00000000 
000116c2 l       .debug_str	00000000 
000116d1 l       .debug_str	00000000 
0001175b l       .debug_str	00000000 
000117d7 l       .debug_str	00000000 
00011807 l       .debug_str	00000000 
00001e1d l       .debug_str	00000000 
0001187e l       .debug_str	00000000 
000044b0 l       .debug_str	00000000 
000118cc l       .debug_str	00000000 
00011917 l       .debug_str	00000000 
00011925 l       .debug_str	00000000 
000119b3 l       .debug_str	00000000 
000119c2 l       .debug_str	00000000 
00011a17 l       .debug_str	00000000 
00011a20 l       .debug_str	00000000 
00011a69 l       .debug_str	00000000 
00002751 l       .debug_str	00000000 
00004580 l       .debug_str	00000000 
00011a75 l       .debug_str	00000000 
00011a8b l       .debug_str	00000000 
00011a98 l       .debug_str	00000000 
00011add l       .debug_str	00000000 
00011af1 l       .debug_str	00000000 
0000f426 l       .debug_str	00000000 
00011b3a l       .debug_str	00000000 
0000f3d1 l       .debug_str	00000000 
00011b7f l       .debug_str	00000000 
0000f5f5 l       .debug_str	00000000 
00011bc8 l       .debug_str	00000000 
0000f4dc l       .debug_str	00000000 
00011c0d l       .debug_str	00000000 
00011c47 l       .debug_str	00000000 
00011c50 l       .debug_str	00000000 
00011c8d l       .debug_str	00000000 
00011c98 l       .debug_str	00000000 
00011ce4 l       .debug_str	00000000 
00011cfc l       .debug_str	00000000 
00011d5e l       .debug_str	00000000 
0000f3d9 l       .debug_str	00000000 
0003a835 l       .debug_str	00000000 
00012895 l       .debug_str	00000000 
00011d93 l       .debug_str	00000000 
00011dbc l       .debug_str	00000000 
00011dc7 l       .debug_str	00000000 
00011dec l       .debug_str	00000000 
00011df0 l       .debug_str	00000000 
00011e7f l       .debug_str	00000000 
00011eb6 l       .debug_str	00000000 
00011f3c l       .debug_str	00000000 
00011f82 l       .debug_str	00000000 
00011f8b l       .debug_str	00000000 
00012014 l       .debug_str	00000000 
00012027 l       .debug_str	00000000 
00012072 l       .debug_str	00000000 
000120ba l       .debug_str	00000000 
00012140 l       .debug_str	00000000 
00012195 l       .debug_str	00000000 
0001219e l       .debug_str	00000000 
000121fa l       .debug_str	00000000 
0001227d l       .debug_str	00000000 
00012288 l       .debug_str	00000000 
0001230e l       .debug_str	00000000 
00012383 l       .debug_str	00000000 
00003916 l       .debug_str	00000000 
000123af l       .debug_str	00000000 
000123b8 l       .debug_str	00000000 
000123c1 l       .debug_str	00000000 
00012400 l       .debug_str	00000000 
000124a5 l       .debug_str	00000000 
0001252e l       .debug_str	00000000 
0001253d l       .debug_str	00000000 
000125d1 l       .debug_str	00000000 
000125f7 l       .debug_str	00000000 
00012673 l       .debug_str	00000000 
0000fc7a l       .debug_str	00000000 
000126ae l       .debug_str	00000000 
00012713 l       .debug_str	00000000 
0001271a l       .debug_str	00000000 
00012778 l       .debug_str	00000000 
00012789 l       .debug_str	00000000 
00012796 l       .debug_str	00000000 
000127cf l       .debug_str	00000000 
000127e5 l       .debug_str	00000000 
00012825 l       .debug_str	00000000 
00012831 l       .debug_str	00000000 
0001288e l       .debug_str	00000000 
00012899 l       .debug_str	00000000 
000128c9 l       .debug_str	00000000 
000128f5 l       .debug_str	00000000 
00012961 l       .debug_str	00000000 
0001296d l       .debug_str	00000000 
0001299d l       .debug_str	00000000 
000129d9 l       .debug_str	00000000 
00012a23 l       .debug_str	00000000 
00012a33 l       .debug_str	00000000 
0000f4e4 l       .debug_str	00000000 
00012a68 l       .debug_str	00000000 
00012aad l       .debug_str	00000000 
00012ab8 l       .debug_str	00000000 
00012af8 l       .debug_str	00000000 
00012b06 l       .debug_str	00000000 
00012b92 l       .debug_str	00000000 
00012c0e l       .debug_str	00000000 
00012c2e l       .debug_str	00000000 
00012c88 l       .debug_str	00000000 
00012c95 l       .debug_str	00000000 
0002a479 l       .debug_str	00000000 
00012ccd l       .debug_str	00000000 
00012d06 l       .debug_str	00000000 
00043f35 l       .debug_str	00000000 
00012d0e l       .debug_str	00000000 
00008a39 l       .debug_str	00000000 
00012da3 l       .debug_str	00000000 
000119b8 l       .debug_str	00000000 
00012dea l       .debug_str	00000000 
00012e62 l       .debug_str	00000000 
00012e99 l       .debug_str	00000000 
00012ee2 l       .debug_str	00000000 
00012f2d l       .debug_str	00000000 
00012f6c l       .debug_str	00000000 
00012f90 l       .debug_str	00000000 
00012fd8 l       .debug_str	00000000 
00012fe5 l       .debug_str	00000000 
0001303c l       .debug_str	00000000 
0003b5e2 l       .debug_str	00000000 
00013048 l       .debug_str	00000000 
000130a5 l       .debug_str	00000000 
000130d1 l       .debug_str	00000000 
000130de l       .debug_str	00000000 
00013145 l       .debug_str	00000000 
00004949 l       .debug_str	00000000 
0001318f l       .debug_str	00000000 
000131a1 l       .debug_str	00000000 
000131ab l       .debug_str	00000000 
000131ed l       .debug_str	00000000 
00001d70 l       .debug_str	00000000 
00013274 l       .debug_str	00000000 
000132f0 l       .debug_str	00000000 
0001331d l       .debug_str	00000000 
00013394 l       .debug_str	00000000 
0001339d l       .debug_str	00000000 
000082c1 l       .debug_str	00000000 
000133e6 l       .debug_str	00000000 
0000825b l       .debug_str	00000000 
0001342c l       .debug_str	00000000 
00001fdb l       .debug_str	00000000 
000134bc l       .debug_str	00000000 
000134c4 l       .debug_str	00000000 
000134d9 l       .debug_str	00000000 
000134e5 l       .debug_str	00000000 
0001352a l       .debug_str	00000000 
0001353d l       .debug_str	00000000 
00042875 l       .debug_str	00000000 
00013547 l       .debug_str	00000000 
0001354a l       .debug_str	00000000 
00013582 l       .debug_str	00000000 
0001358c l       .debug_str	00000000 
000135c8 l       .debug_str	00000000 
000135d5 l       .debug_str	00000000 
0001361b l       .debug_str	00000000 
00013628 l       .debug_str	00000000 
0000f491 l       .debug_str	00000000 
0001365a l       .debug_str	00000000 
000136aa l       .debug_str	00000000 
000136c1 l       .debug_str	00000000 
000136d5 l       .debug_str	00000000 
00013732 l       .debug_str	00000000 
00013741 l       .debug_str	00000000 
000137cb l       .debug_str	00000000 
00007048 l       .debug_str	00000000 
00013847 l       .debug_str	00000000 
00013858 l       .debug_str	00000000 
000138b2 l       .debug_str	00000000 
000138c1 l       .debug_str	00000000 
0000899a l       .debug_str	00000000 
00013944 l       .debug_str	00000000 
000139ca l       .debug_str	00000000 
00013a3f l       .debug_str	00000000 
00013a6a l       .debug_str	00000000 
00013af3 l       .debug_str	00000000 
00013b32 l       .debug_str	00000000 
00013bab l       .debug_str	00000000 
00013bc1 l       .debug_str	00000000 
00013bca l       .debug_str	00000000 
00013c1a l       .debug_str	00000000 
00013c24 l       .debug_str	00000000 
00013cbb l       .debug_str	00000000 
00013cd3 l       .debug_str	00000000 
00013d6a l       .debug_str	00000000 
00013da3 l       .debug_str	00000000 
00013dbc l       .debug_str	00000000 
0003e6a9 l       .debug_str	00000000 
00013e21 l       .debug_str	00000000 
00013e6c l       .debug_str	00000000 
00013eb3 l       .debug_str	00000000 
00008d2b l       .debug_str	00000000 
00013f08 l       .debug_str	00000000 
00013f0c l       .debug_str	00000000 
000142cd l       .debug_str	00000000 
00013f11 l       .debug_str	00000000 
00038c5b l       .debug_str	00000000 
00006b4a l       .debug_str	00000000 
00013f43 l       .debug_str	00000000 
0000930d l       .debug_str	00000000 
00013f81 l       .debug_str	00000000 
00006ebf l       .debug_str	00000000 
00013fd4 l       .debug_str	00000000 
00014060 l       .debug_str	00000000 
0001406e l       .debug_str	00000000 
000140ea l       .debug_str	00000000 
00014109 l       .debug_str	00000000 
00014154 l       .debug_str	00000000 
00014161 l       .debug_str	00000000 
000141a3 l       .debug_str	00000000 
000141b3 l       .debug_str	00000000 
00014227 l       .debug_str	00000000 
00014246 l       .debug_str	00000000 
00014291 l       .debug_str	00000000 
000142b2 l       .debug_str	00000000 
000142d2 l       .debug_str	00000000 
000142ec l       .debug_str	00000000 
00014313 l       .debug_str	00000000 
00014332 l       .debug_str	00000000 
00014374 l       .debug_str	00000000 
0001b1ac l       .debug_str	00000000 
0002ccc5 l       .debug_str	00000000 
0001439d l       .debug_str	00000000 
000143b9 l       .debug_str	00000000 
000143c3 l       .debug_str	00000000 
0001444f l       .debug_str	00000000 
000144cb l       .debug_str	00000000 
000144fc l       .debug_str	00000000 
000070e4 l       .debug_str	00000000 
00014588 l       .debug_str	00000000 
00014610 l       .debug_str	00000000 
000092a2 l       .debug_str	00000000 
00014685 l       .debug_str	00000000 
000146d0 l       .debug_str	00000000 
00014718 l       .debug_str	00000000 
0001479b l       .debug_str	00000000 
000147bb l       .debug_str	00000000 
00014841 l       .debug_str	00000000 
000148b6 l       .debug_str	00000000 
000148f7 l       .debug_str	00000000 
00014901 l       .debug_str	00000000 
0001492a l       .debug_str	00000000 
00014935 l       .debug_str	00000000 
0001495a l       .debug_str	00000000 
00014993 l       .debug_str	00000000 
0001499b l       .debug_str	00000000 
00014a6d l       .debug_str	00000000 
000149e2 l       .debug_str	00000000 
00014a68 l       .debug_str	00000000 
00014a76 l       .debug_str	00000000 
00014ab7 l       .debug_str	00000000 
00014ada l       .debug_str	00000000 
00014b15 l       .debug_str	00000000 
00014b1f l       .debug_str	00000000 
00014ba9 l       .debug_str	00000000 
00014bdb l       .debug_str	00000000 
00014c4f l       .debug_str	00000000 
00014c91 l       .debug_str	00000000 
00008bbe l       .debug_str	00000000 
00014d3a l       .debug_str	00000000 
00014db6 l       .debug_str	00000000 
000083bd l       .debug_str	00000000 
00014ddb l       .debug_str	00000000 
00014e28 l       .debug_str	00000000 
00008cce l       .debug_str	00000000 
00014e7b l       .debug_str	00000000 
00014e81 l       .debug_str	00000000 
000007ac l       .debug_str	00000000 
00014e85 l       .debug_str	00000000 
00014e8e l       .debug_str	00000000 
00014ef3 l       .debug_str	00000000 
00014f02 l       .debug_str	00000000 
00014f44 l       .debug_str	00000000 
00014f4e l       .debug_str	00000000 
00014fb3 l       .debug_str	00000000 
00014ff5 l       .debug_str	00000000 
0001503f l       .debug_str	00000000 
0001504e l       .debug_str	00000000 
00015084 l       .debug_str	00000000 
0001508d l       .debug_str	00000000 
000150d1 l       .debug_str	00000000 
000150e7 l       .debug_str	00000000 
00015122 l       .debug_str	00000000 
0001512d l       .debug_str	00000000 
000023d5 l       .debug_str	00000000 
00015190 l       .debug_str	00000000 
000106c4 l       .debug_str	00000000 
000151f1 l       .debug_str	00000000 
00006501 l       .debug_str	00000000 
00015262 l       .debug_str	00000000 
00007158 l       .debug_str	00000000 
000152c4 l       .debug_str	00000000 
00006f19 l       .debug_str	00000000 
0001530a l       .debug_str	00000000 
00015352 l       .debug_str	00000000 
0001535c l       .debug_str	00000000 
0001539d l       .debug_str	00000000 
000153b7 l       .debug_str	00000000 
000153bc l       .debug_str	00000000 
000153cc l       .debug_str	00000000 
00015415 l       .debug_str	00000000 
00015423 l       .debug_str	00000000 
0001546b l       .debug_str	00000000 
000154b5 l       .debug_str	00000000 
000154c6 l       .debug_str	00000000 
00018ef2 l       .debug_str	00000000 
0001555e l       .debug_str	00000000 
00040304 l       .debug_str	00000000 
000155f8 l       .debug_str	00000000 
0001566a l       .debug_str	00000000 
00015694 l       .debug_str	00000000 
00015737 l       .debug_str	00000000 
00015745 l       .debug_str	00000000 
00001cd7 l       .debug_str	00000000 
0000fd0e l       .debug_str	00000000 
0000b365 l       .debug_str	00000000 
00015777 l       .debug_str	00000000 
000157c2 l       .debug_str	00000000 
000157cb l       .debug_str	00000000 
0000f58c l       .debug_str	00000000 
00015814 l       .debug_str	00000000 
0000f489 l       .debug_str	00000000 
00015859 l       .debug_str	00000000 
000158b5 l       .debug_str	00000000 
000158fe l       .debug_str	00000000 
00015943 l       .debug_str	00000000 
0001599f l       .debug_str	00000000 
000159e8 l       .debug_str	00000000 
00015a2d l       .debug_str	00000000 
00015a89 l       .debug_str	00000000 
00015ad1 l       .debug_str	00000000 
00015b15 l       .debug_str	00000000 
00015b70 l       .debug_str	00000000 
00015bb8 l       .debug_str	00000000 
00015bfc l       .debug_str	00000000 
00015c57 l       .debug_str	00000000 
00015cb2 l       .debug_str	00000000 
00015cfa l       .debug_str	00000000 
00015d3e l       .debug_str	00000000 
00015d89 l       .debug_str	00000000 
00015dd0 l       .debug_str	00000000 
00015e2e l       .debug_str	00000000 
00015e8c l       .debug_str	00000000 
00015ed6 l       .debug_str	00000000 
00015f1c l       .debug_str	00000000 
00015f79 l       .debug_str	00000000 
00015fc3 l       .debug_str	00000000 
00016009 l       .debug_str	00000000 
00016066 l       .debug_str	00000000 
000160b0 l       .debug_str	00000000 
000160f6 l       .debug_str	00000000 
00016153 l       .debug_str	00000000 
0001619e l       .debug_str	00000000 
000161e5 l       .debug_str	00000000 
00016243 l       .debug_str	00000000 
0001628e l       .debug_str	00000000 
000162d5 l       .debug_str	00000000 
00016333 l       .debug_str	00000000 
0001637e l       .debug_str	00000000 
000163c5 l       .debug_str	00000000 
00016423 l       .debug_str	00000000 
0001646c l       .debug_str	00000000 
000164b1 l       .debug_str	00000000 
0001650d l       .debug_str	00000000 
00016556 l       .debug_str	00000000 
0001659b l       .debug_str	00000000 
000165f7 l       .debug_str	00000000 
00016640 l       .debug_str	00000000 
00016685 l       .debug_str	00000000 
000166e1 l       .debug_str	00000000 
0001672a l       .debug_str	00000000 
0001676f l       .debug_str	00000000 
000167cb l       .debug_str	00000000 
00016814 l       .debug_str	00000000 
00016859 l       .debug_str	00000000 
000168b5 l       .debug_str	00000000 
000168fd l       .debug_str	00000000 
00016941 l       .debug_str	00000000 
0001699c l       .debug_str	00000000 
000169e4 l       .debug_str	00000000 
00016a28 l       .debug_str	00000000 
00016a83 l       .debug_str	00000000 
00016acd l       .debug_str	00000000 
00016b13 l       .debug_str	00000000 
00016b70 l       .debug_str	00000000 
00016bba l       .debug_str	00000000 
00016c00 l       .debug_str	00000000 
00016c5d l       .debug_str	00000000 
00016ca6 l       .debug_str	00000000 
00016ceb l       .debug_str	00000000 
00016d47 l       .debug_str	00000000 
00016da3 l       .debug_str	00000000 
00016db1 l       .debug_str	00000000 
00016df0 l       .debug_str	00000000 
00016e25 l       .debug_str	00000000 
00037fa5 l       .debug_str	00000000 
000084d1 l       .debug_str	00000000 
00016e2f l       .debug_str	00000000 
00016e3e l       .debug_str	00000000 
00016e78 l       .debug_str	00000000 
00000e1e l       .debug_str	00000000 
00016e7f l       .debug_str	00000000 
00016f11 l       .debug_str	00000000 
00016f4a l       .debug_str	00000000 
00016f60 l       .debug_str	00000000 
000083a3 l       .debug_str	00000000 
00016f87 l       .debug_str	00000000 
00008116 l       .debug_str	00000000 
0003c4b3 l       .debug_str	00000000 
00016fc1 l       .debug_str	00000000 
00008872 l       .debug_str	00000000 
00016fe7 l       .debug_str	00000000 
00008c6d l       .debug_str	00000000 
00017041 l       .debug_str	00000000 
00008adf l       .debug_str	00000000 
000170db l       .debug_str	00000000 
000170e5 l       .debug_str	00000000 
0001718c l       .debug_str	00000000 
000171c5 l       .debug_str	00000000 
000171ca l       .debug_str	00000000 
000171d1 l       .debug_str	00000000 
00017207 l       .debug_str	00000000 
00017217 l       .debug_str	00000000 
0001721c l       .debug_str	00000000 
0001722b l       .debug_str	00000000 
00017236 l       .debug_str	00000000 
0003fcc8 l       .debug_str	00000000 
00017270 l       .debug_str	00000000 
000172b9 l       .debug_str	00000000 
00017300 l       .debug_str	00000000 
00017335 l       .debug_str	00000000 
0001733f l       .debug_str	00000000 
0001737b l       .debug_str	00000000 
0001738c l       .debug_str	00000000 
000173c5 l       .debug_str	00000000 
000173d2 l       .debug_str	00000000 
000173e1 l       .debug_str	00000000 
00014efb l       .debug_str	00000000 
0001742a l       .debug_str	00000000 
00017460 l       .debug_str	00000000 
0001746b l       .debug_str	00000000 
000174d0 l       .debug_str	00000000 
00017530 l       .debug_str	00000000 
00017596 l       .debug_str	00000000 
000175fd l       .debug_str	00000000 
00017670 l       .debug_str	00000000 
000176cf l       .debug_str	00000000 
000176da l       .debug_str	00000000 
00017741 l       .debug_str	00000000 
00017761 l       .debug_str	00000000 
000177a0 l       .debug_str	00000000 
000177bf l       .debug_str	00000000 
00000718 l       .debug_str	00000000 
00017832 l       .debug_str	00000000 
000178af l       .debug_str	00000000 
00017914 l       .debug_str	00000000 
00017974 l       .debug_str	00000000 
000179e7 l       .debug_str	00000000 
00017a64 l       .debug_str	00000000 
00017adc l       .debug_str	00000000 
00017ae6 l       .debug_str	00000000 
00017b5b l       .debug_str	00000000 
00038c4e l       .debug_str	00000000 
00037538 l       .debug_str	00000000 
00000462 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00017bd5 l       .debug_str	00000000 
00017c11 l       .debug_str	00000000 
00017c1a l       .debug_str	00000000 
00017c61 l       .debug_str	00000000 
00017c74 l       .debug_str	00000000 
00017cd2 l       .debug_str	00000000 
00017d29 l       .debug_str	00000000 
00017d83 l       .debug_str	00000000 
00017d8d l       .debug_str	00000000 
00017dd0 l       .debug_str	00000000 
00017ddb l       .debug_str	00000000 
00017de7 l       .debug_str	00000000 
00036698 l       .debug_str	00000000 
00017e25 l       .debug_str	00000000 
00017e67 l       .debug_str	00000000 
00017e90 l       .debug_str	00000000 
00017ed1 l       .debug_str	00000000 
00017edb l       .debug_str	00000000 
00000fde l       .debug_str	00000000 
00017f37 l       .debug_str	00000000 
00017f66 l       .debug_str	00000000 
00017f77 l       .debug_str	00000000 
0000fdab l       .debug_str	00000000 
00017fc9 l       .debug_str	00000000 
00018000 l       .debug_str	00000000 
0001800c l       .debug_str	00000000 
0001804a l       .debug_str	00000000 
0001805d l       .debug_str	00000000 
000180d5 l       .debug_str	00000000 
00018113 l       .debug_str	00000000 
00013bac l       .debug_str	00000000 
0001818b l       .debug_str	00000000 
000181da l       .debug_str	00000000 
00018270 l       .debug_str	00000000 
000182a9 l       .debug_str	00000000 
00018321 l       .debug_str	00000000 
00018399 l       .debug_str	00000000 
000183e8 l       .debug_str	00000000 
0001847e l       .debug_str	00000000 
000184c9 l       .debug_str	00000000 
000184e5 l       .debug_str	00000000 
0001855e l       .debug_str	00000000 
000185e7 l       .debug_str	00000000 
000185ef l       .debug_str	00000000 
0001863f l       .debug_str	00000000 
000186d6 l       .debug_str	00000000 
0001876d l       .debug_str	00000000 
000187a6 l       .debug_str	00000000 
0001882f l       .debug_str	00000000 
000188a8 l       .debug_str	00000000 
000188f8 l       .debug_str	00000000 
0001898f l       .debug_str	00000000 
000189cc l       .debug_str	00000000 
000189db l       .debug_str	00000000 
00018d91 l       .debug_str	00000000 
00018a24 l       .debug_str	00000000 
0001d804 l       .debug_str	00000000 
00018a61 l       .debug_str	00000000 
00018ad6 l       .debug_str	00000000 
00018aff l       .debug_str	00000000 
00018b63 l       .debug_str	00000000 
00018b6d l       .debug_str	00000000 
00018be6 l       .debug_str	00000000 
000065f9 l       .debug_str	00000000 
00018c57 l       .debug_str	00000000 
00018ccb l       .debug_str	00000000 
00018ce0 l       .debug_str	00000000 
00018d29 l       .debug_str	00000000 
00018d38 l       .debug_str	00000000 
00018d89 l       .debug_str	00000000 
00018da0 l       .debug_str	00000000 
0001b9ff l       .debug_str	00000000 
00018e07 l       .debug_str	00000000 
00018e13 l       .debug_str	00000000 
0003c4a8 l       .debug_str	00000000 
00018e19 l       .debug_str	00000000 
00018e23 l       .debug_str	00000000 
00018e55 l       .debug_str	00000000 
00018e65 l       .debug_str	00000000 
00018eed l       .debug_str	00000000 
00018ef6 l       .debug_str	00000000 
00000e02 l       .debug_str	00000000 
00018f63 l       .debug_str	00000000 
00018fa2 l       .debug_str	00000000 
00018fb1 l       .debug_str	00000000 
00018fe3 l       .debug_str	00000000 
0001900a l       .debug_str	00000000 
00019074 l       .debug_str	00000000 
000190e4 l       .debug_str	00000000 
00019112 l       .debug_str	00000000 
0001911e l       .debug_str	00000000 
00019153 l       .debug_str	00000000 
00019166 l       .debug_str	00000000 
000191ba l       .debug_str	00000000 
000191cb l       .debug_str	00000000 
0001921b l       .debug_str	00000000 
00024ba7 l       .debug_str	00000000 
00019228 l       .debug_str	00000000 
0001922f l       .debug_str	00000000 
00019240 l       .debug_str	00000000 
0001928f l       .debug_str	00000000 
0001929f l       .debug_str	00000000 
000192f7 l       .debug_str	00000000 
0001934c l       .debug_str	00000000 
0001930c l       .debug_str	00000000 
00019349 l       .debug_str	00000000 
00019356 l       .debug_str	00000000 
000193ea l       .debug_str	00000000 
00019480 l       .debug_str	00000000 
000194f2 l       .debug_str	00000000 
00019518 l       .debug_str	00000000 
000195b7 l       .debug_str	00000000 
00019628 l       .debug_str	00000000 
00019673 l       .debug_str	00000000 
0001967c l       .debug_str	00000000 
00019689 l       .debug_str	00000000 
000196ce l       .debug_str	00000000 
000196eb l       .debug_str	00000000 
000197a3 l       .debug_str	00000000 
000197e8 l       .debug_str	00000000 
000197f4 l       .debug_str	00000000 
000197fe l       .debug_str	00000000 
00019808 l       .debug_str	00000000 
00019878 l       .debug_str	00000000 
0001989d l       .debug_str	00000000 
0001990c l       .debug_str	00000000 
00019932 l       .debug_str	00000000 
000199a1 l       .debug_str	00000000 
000199cb l       .debug_str	00000000 
00019a51 l       .debug_str	00000000 
00019ae3 l       .debug_str	00000000 
00019b0b l       .debug_str	00000000 
00019b47 l       .debug_str	00000000 
00019b61 l       .debug_str	00000000 
00019b6e l       .debug_str	00000000 
00019baa l       .debug_str	00000000 
00019bb7 l       .debug_str	00000000 
00036522 l       .debug_str	00000000 
00019bf5 l       .debug_str	00000000 
00019c3b l       .debug_str	00000000 
00019cc3 l       .debug_str	00000000 
00019cda l       .debug_str	00000000 
00019d34 l       .debug_str	00000000 
00019d7a l       .debug_str	00000000 
00019d90 l       .debug_str	00000000 
00019e10 l       .debug_str	00000000 
0001a3ec l       .debug_str	00000000 
00019e1e l       .debug_str	00000000 
00019e5d l       .debug_str	00000000 
00019e9b l       .debug_str	00000000 
00019f25 l       .debug_str	00000000 
00019f3a l       .debug_str	00000000 
00019f8b l       .debug_str	00000000 
00019f99 l       .debug_str	00000000 
00019f9e l       .debug_str	00000000 
00019ff9 l       .debug_str	00000000 
0001aaff l       .debug_str	00000000 
0001a050 l       .debug_str	00000000 
0003b038 l       .debug_str	00000000 
0003b03d l       .debug_str	00000000 
0001a05a l       .debug_str	00000000 
0001a065 l       .debug_str	00000000 
0001a06c l       .debug_str	00000000 
0001a07a l       .debug_str	00000000 
00038e59 l       .debug_str	00000000 
00019237 l       .debug_str	00000000 
0001a0bf l       .debug_str	00000000 
0002d8d3 l       .debug_str	00000000 
0001a101 l       .debug_str	00000000 
0001a141 l       .debug_str	00000000 
0001a151 l       .debug_str	00000000 
0001a1da l       .debug_str	00000000 
0001a214 l       .debug_str	00000000 
0001a243 l       .debug_str	00000000 
0001a2c1 l       .debug_str	00000000 
0001a345 l       .debug_str	00000000 
0001a3d2 l       .debug_str	00000000 
0001a3e5 l       .debug_str	00000000 
0001a3f5 l       .debug_str	00000000 
0001a441 l       .debug_str	00000000 
0001a484 l       .debug_str	00000000 
0001a51b l       .debug_str	00000000 
0001a535 l       .debug_str	00000000 
0001a569 l       .debug_str	00000000 
0001a57b l       .debug_str	00000000 
0001a5b4 l       .debug_str	00000000 
0001a5d4 l       .debug_str	00000000 
000091c0 l       .debug_str	00000000 
0001a652 l       .debug_str	00000000 
0001a699 l       .debug_str	00000000 
0001a6c7 l       .debug_str	00000000 
0001a747 l       .debug_str	00000000 
0001a786 l       .debug_str	00000000 
0001a810 l       .debug_str	00000000 
0001a85c l       .debug_str	00000000 
0001a878 l       .debug_str	00000000 
0001a883 l       .debug_str	00000000 
0001a8e5 l       .debug_str	00000000 
0001a93c l       .debug_str	00000000 
0001a9c9 l       .debug_str	00000000 
0001aa15 l       .debug_str	00000000 
0001aaac l       .debug_str	00000000 
0001aaf6 l       .debug_str	00000000 
0001ab10 l       .debug_str	00000000 
0001ab6a l       .debug_str	00000000 
0001ab73 l       .debug_str	00000000 
0001abd2 l       .debug_str	00000000 
0001ac29 l       .debug_str	00000000 
0001ac82 l       .debug_str	00000000 
0001ac97 l       .debug_str	00000000 
0001ace2 l       .debug_str	00000000 
0001acf5 l       .debug_str	00000000 
0001ad42 l       .debug_str	00000000 
0001ad8d l       .debug_str	00000000 
0001ada0 l       .debug_str	00000000 
0001adf9 l       .debug_str	00000000 
0001ae0e l       .debug_str	00000000 
0001ae59 l       .debug_str	00000000 
0001ae6c l       .debug_str	00000000 
0001aeb9 l       .debug_str	00000000 
0001af04 l       .debug_str	00000000 
0001af17 l       .debug_str	00000000 
0001af50 l       .debug_str	00000000 
0001af7a l       .debug_str	00000000 
0001afde l       .debug_str	00000000 
0001b016 l       .debug_str	00000000 
0001b022 l       .debug_str	00000000 
0001b05f l       .debug_str	00000000 
0001b0c1 l       .debug_str	00000000 
0001b102 l       .debug_str	00000000 
0001b10b l       .debug_str	00000000 
0001b169 l       .debug_str	00000000 
0001b1a2 l       .debug_str	00000000 
0001b1b1 l       .debug_str	00000000 
0001b1f0 l       .debug_str	00000000 
0001b205 l       .debug_str	00000000 
0001b24b l       .debug_str	00000000 
0001b258 l       .debug_str	00000000 
0001b25e l       .debug_str	00000000 
0001b297 l       .debug_str	00000000 
0001b323 l       .debug_str	00000000 
0001b35f l       .debug_str	00000000 
0003df14 l       .debug_str	00000000 
0001b371 l       .debug_str	00000000 
0001b3a9 l       .debug_str	00000000 
0001b3b5 l       .debug_str	00000000 
0001b3f2 l       .debug_str	00000000 
0001b454 l       .debug_str	00000000 
0001b495 l       .debug_str	00000000 
0001b4f3 l       .debug_str	00000000 
0001b52d l       .debug_str	00000000 
0001b587 l       .debug_str	00000000 
0001b5d0 l       .debug_str	00000000 
0001b5e0 l       .debug_str	00000000 
0001b619 l       .debug_str	00000000 
0001b69b l       .debug_str	00000000 
0001b6d5 l       .debug_str	00000000 
0001b72f l       .debug_str	00000000 
0001b76a l       .debug_str	00000000 
0001b7ca l       .debug_str	00000000 
0001b805 l       .debug_str	00000000 
0001b865 l       .debug_str	00000000 
0001b8a3 l       .debug_str	00000000 
0001b901 l       .debug_str	00000000 
0001b93f l       .debug_str	00000000 
0001b99d l       .debug_str	00000000 
0001b9fa l       .debug_str	00000000 
0001ba08 l       .debug_str	00000000 
0001ba45 l       .debug_str	00000000 
0001ba50 l       .debug_str	00000000 
0001bac7 l       .debug_str	00000000 
0001bad2 l       .debug_str	00000000 
0001bb53 l       .debug_str	00000000 
0001bb99 l       .debug_str	00000000 
0001bbc0 l       .debug_str	00000000 
0001bc56 l       .debug_str	00000000 
0001bcee l       .debug_str	00000000 
0001bd60 l       .debug_str	00000000 
0001bd88 l       .debug_str	00000000 
0001be3e l       .debug_str	00000000 
0001be83 l       .debug_str	00000000 
000036f1 l       .debug_str	00000000 
0001bec5 l       .debug_str	00000000 
0001bf20 l       .debug_str	00000000 
0001bf81 l       .debug_str	00000000 
0001bf9e l       .debug_str	00000000 
0001bfd2 l       .debug_str	00000000 
0001bfe4 l       .debug_str	00000000 
0001c01f l       .debug_str	00000000 
0001c024 l       .debug_str	00000000 
0001c07d l       .debug_str	00000000 
00017dd4 l       .debug_str	00000000 
00004292 l       .debug_str	00000000 
0000429d l       .debug_str	00000000 
0001c0bf l       .debug_str	00000000 
0001c0ff l       .debug_str	00000000 
0001c159 l       .debug_str	00000000 
0001c19b l       .debug_str	00000000 
0001c1f6 l       .debug_str	00000000 
0001c238 l       .debug_str	00000000 
0001c243 l       .debug_str	00000000 
0003918e l       .debug_str	00000000 
0001c283 l       .debug_str	00000000 
0001c2dd l       .debug_str	00000000 
0001c2e6 l       .debug_str	00000000 
0001c328 l       .debug_str	00000000 
0001c381 l       .debug_str	00000000 
0001c38b l       .debug_str	00000000 
0001c3cd l       .debug_str	00000000 
0001c3d6 l       .debug_str	00000000 
0001c413 l       .debug_str	00000000 
0001c46a l       .debug_str	00000000 
0001c4ac l       .debug_str	00000000 
0001c504 l       .debug_str	00000000 
0001c553 l       .debug_str	00000000 
00000996 l       .debug_str	00000000 
0001c55f l       .debug_str	00000000 
0001c590 l       .debug_str	00000000 
0001c5bb l       .debug_str	00000000 
0001c609 l       .debug_str	00000000 
0000fddc l       .debug_str	00000000 
0001c610 l       .debug_str	00000000 
0001c675 l       .debug_str	00000000 
0001c6a6 l       .debug_str	00000000 
0001c6b1 l       .debug_str	00000000 
0001c70a l       .debug_str	00000000 
0001c755 l       .debug_str	00000000 
0001c773 l       .debug_str	00000000 
0001c7bb l       .debug_str	00000000 
0001c7d6 l       .debug_str	00000000 
0001c81d l       .debug_str	00000000 
0001c839 l       .debug_str	00000000 
0001c8c7 l       .debug_str	00000000 
0001c913 l       .debug_str	00000000 
0001c930 l       .debug_str	00000000 
0001c95a l       .debug_str	00000000 
0001c97c l       .debug_str	00000000 
0001c98f l       .debug_str	00000000 
0001c99a l       .debug_str	00000000 
0001c9e7 l       .debug_str	00000000 
0001ca2c l       .debug_str	00000000 
0001ca6b l       .debug_str	00000000 
0001cab7 l       .debug_str	00000000 
0001cb46 l       .debug_str	00000000 
0001cb93 l       .debug_str	00000000 
0001cc19 l       .debug_str	00000000 
00043fdc l       .debug_str	00000000 
0001cc48 l       .debug_str	00000000 
0001cc7c l       .debug_str	00000000 
0001cc85 l       .debug_str	00000000 
0001ccf9 l       .debug_str	00000000 
0001cd15 l       .debug_str	00000000 
0001cd57 l       .debug_str	00000000 
0001cd7d l       .debug_str	00000000 
0001cdb3 l       .debug_str	00000000 
0001cdbc l       .debug_str	00000000 
0001ce4a l       .debug_str	00000000 
0001ce90 l       .debug_str	00000000 
0001ced7 l       .debug_str	00000000 
0001cf1c l       .debug_str	00000000 
0001cf5b l       .debug_str	00000000 
0001cfa1 l       .debug_str	00000000 
0001d030 l       .debug_str	00000000 
0001d077 l       .debug_str	00000000 
0001d0fd l       .debug_str	00000000 
0001d11c l       .debug_str	00000000 
0001d158 l       .debug_str	00000000 
0001d177 l       .debug_str	00000000 
0001d1ac l       .debug_str	00000000 
0001d1b6 l       .debug_str	00000000 
00039a4f l       .debug_str	00000000 
0001d221 l       .debug_str	00000000 
0001d256 l       .debug_str	00000000 
0001d260 l       .debug_str	00000000 
0001d293 l       .debug_str	00000000 
0001d29b l       .debug_str	00000000 
0001d2a7 l       .debug_str	00000000 
00043b75 l       .debug_str	00000000 
0001d2db l       .debug_str	00000000 
0001d2e8 l       .debug_str	00000000 
0001d325 l       .debug_str	00000000 
0001d334 l       .debug_str	00000000 
0001d39b l       .debug_str	00000000 
0001d3b8 l       .debug_str	00000000 
0001d3f7 l       .debug_str	00000000 
0001d413 l       .debug_str	00000000 
0001d44f l       .debug_str	00000000 
0001d475 l       .debug_str	00000000 
0001d4b4 l       .debug_str	00000000 
0001d4c4 l       .debug_str	00000000 
0001d52b l       .debug_str	00000000 
0001d537 l       .debug_str	00000000 
0001d59b l       .debug_str	00000000 
0001d602 l       .debug_str	00000000 
0001d624 l       .debug_str	00000000 
0001d65b l       .debug_str	00000000 
0001d671 l       .debug_str	00000000 
0001d6c0 l       .debug_str	00000000 
0001d6cc l       .debug_str	00000000 
0001d79e l       .debug_str	00000000 
0001d713 l       .debug_str	00000000 
0001d799 l       .debug_str	00000000 
0001d7bd l       .debug_str	00000000 
0001d7f8 l       .debug_str	00000000 
0001d808 l       .debug_str	00000000 
00043a8b l       .debug_str	00000000 
0001d849 l       .debug_str	00000000 
0001d883 l       .debug_str	00000000 
0001d892 l       .debug_str	00000000 
0001d8cb l       .debug_str	00000000 
0001d8d9 l       .debug_str	00000000 
0001d912 l       .debug_str	00000000 
0001d920 l       .debug_str	00000000 
0001d974 l       .debug_str	00000000 
0001d991 l       .debug_str	00000000 
0001d9de l       .debug_str	00000000 
0001d9e4 l       .debug_str	00000000 
0001d9f1 l       .debug_str	00000000 
0001da2c l       .debug_str	00000000 
0001da54 l       .debug_str	00000000 
0001dab6 l       .debug_str	00000000 
00017465 l       .debug_str	00000000 
0001db1f l       .debug_str	00000000 
0001e3b7 l       .debug_str	00000000 
000043ec l       .debug_str	00000000 
00042573 l       .debug_str	00000000 
000043f9 l       .debug_str	00000000 
0001db6c l       .debug_str	00000000 
0001db7d l       .debug_str	00000000 
0001db8d l       .debug_str	00000000 
0001dbd8 l       .debug_str	00000000 
0001dbe2 l       .debug_str	00000000 
0001dc65 l       .debug_str	00000000 
0001dc95 l       .debug_str	00000000 
0001dd1d l       .debug_str	00000000 
0001dd92 l       .debug_str	00000000 
0001dde5 l       .debug_str	00000000 
0001de71 l       .debug_str	00000000 
0001dea9 l       .debug_str	00000000 
0001def4 l       .debug_str	00000000 
0001df25 l       .debug_str	00000000 
0001df6d l       .debug_str	00000000 
0001df9b l       .debug_str	00000000 
0001dfef l       .debug_str	00000000 
0001e015 l       .debug_str	00000000 
0001e069 l       .debug_str	00000000 
0003dde8 l       .debug_str	00000000 
0003fd63 l       .debug_str	00000000 
0001e071 l       .debug_str	00000000 
0001e077 l       .debug_str	00000000 
0001e080 l       .debug_str	00000000 
0001e0b8 l       .debug_str	00000000 
0001e0d5 l       .debug_str	00000000 
0001e111 l       .debug_str	00000000 
0001e12e l       .debug_str	00000000 
0001e18a l       .debug_str	00000000 
0001e1c2 l       .debug_str	00000000 
0001e21e l       .debug_str	00000000 
0001e256 l       .debug_str	00000000 
0001e262 l       .debug_str	00000000 
0001e2a0 l       .debug_str	00000000 
0001e2ba l       .debug_str	00000000 
0001e310 l       .debug_str	00000000 
0001e377 l       .debug_str	00000000 
0001e3af l       .debug_str	00000000 
0001e3bb l       .debug_str	00000000 
0001e422 l       .debug_str	00000000 
0001e45b l       .debug_str	00000000 
00010049 l       .debug_str	00000000 
0003b042 l       .debug_str	00000000 
0001e49a l       .debug_str	00000000 
0001e49d l       .debug_str	00000000 
0001e4a0 l       .debug_str	00000000 
0001a071 l       .debug_str	00000000 
0001e4a3 l       .debug_str	00000000 
0001e517 l       .debug_str	00000000 
0001e526 l       .debug_str	00000000 
0001e571 l       .debug_str	00000000 
0001e589 l       .debug_str	00000000 
0001e582 l       .debug_str	00000000 
0001e592 l       .debug_str	00000000 
0001e59c l       .debug_str	00000000 
0001e5b3 l       .debug_str	00000000 
0001e5c2 l       .debug_str	00000000 
0001e604 l       .debug_str	00000000 
0001e61d l       .debug_str	00000000 
0001e69c l       .debug_str	00000000 
0001e6bb l       .debug_str	00000000 
0001e71f l       .debug_str	00000000 
0001e77d l       .debug_str	00000000 
0001e78d l       .debug_str	00000000 
0001e7c6 l       .debug_str	00000000 
0001e7da l       .debug_str	00000000 
0001e81a l       .debug_str	00000000 
0001e825 l       .debug_str	00000000 
0001e861 l       .debug_str	00000000 
0001e86c l       .debug_str	00000000 
0001e87d l       .debug_str	00000000 
0001e8d1 l       .debug_str	00000000 
0001e8fd l       .debug_str	00000000 
0001e909 l       .debug_str	00000000 
0001e956 l       .debug_str	00000000 
0001e969 l       .debug_str	00000000 
0003c355 l       .debug_str	00000000 
0001e9d4 l       .debug_str	00000000 
0001e9e9 l       .debug_str	00000000 
0001e9f3 l       .debug_str	00000000 
0003d2f4 l       .debug_str	00000000 
0001e9f8 l       .debug_str	00000000 
0001ea29 l       .debug_str	00000000 
0001ea3c l       .debug_str	00000000 
0001ea6d l       .debug_str	00000000 
0001ea81 l       .debug_str	00000000 
0001ea8c l       .debug_str	00000000 
0001eaaa l       .debug_str	00000000 
0001eae5 l       .debug_str	00000000 
0001eb1b l       .debug_str	00000000 
0001eb4c l       .debug_str	00000000 
0001eb60 l       .debug_str	00000000 
0001eba9 l       .debug_str	00000000 
0001ebee l       .debug_str	00000000 
0001ec4a l       .debug_str	00000000 
0001ec93 l       .debug_str	00000000 
0001ecd8 l       .debug_str	00000000 
0001ed34 l       .debug_str	00000000 
0001ed3f l       .debug_str	00000000 
0001ed5d l       .debug_str	00000000 
0001ed98 l       .debug_str	00000000 
0001edce l       .debug_str	00000000 
0001edff l       .debug_str	00000000 
0001ee13 l       .debug_str	00000000 
0001ee1e l       .debug_str	00000000 
0001ee3c l       .debug_str	00000000 
0001ee77 l       .debug_str	00000000 
0001eead l       .debug_str	00000000 
0001eede l       .debug_str	00000000 
0002778c l       .debug_str	00000000 
0001eef3 l       .debug_str	00000000 
0001eeff l       .debug_str	00000000 
0001ef1e l       .debug_str	00000000 
0001ef59 l       .debug_str	00000000 
0001ef90 l       .debug_str	00000000 
0001efc1 l       .debug_str	00000000 
0001efd4 l       .debug_str	00000000 
0001efde l       .debug_str	00000000 
0001effb l       .debug_str	00000000 
0001f036 l       .debug_str	00000000 
0001f06b l       .debug_str	00000000 
0001f09c l       .debug_str	00000000 
0001f0b0 l       .debug_str	00000000 
0001f0bb l       .debug_str	00000000 
0001f0d9 l       .debug_str	00000000 
0001f114 l       .debug_str	00000000 
0001f14a l       .debug_str	00000000 
0001f17b l       .debug_str	00000000 
0001f18f l       .debug_str	00000000 
0001f1d8 l       .debug_str	00000000 
0001f21d l       .debug_str	00000000 
0001f279 l       .debug_str	00000000 
0001f2c2 l       .debug_str	00000000 
0001f307 l       .debug_str	00000000 
0001f363 l       .debug_str	00000000 
0001f3ac l       .debug_str	00000000 
0001f3f1 l       .debug_str	00000000 
0001f44d l       .debug_str	00000000 
0001f458 l       .debug_str	00000000 
0001f476 l       .debug_str	00000000 
0001f4b1 l       .debug_str	00000000 
0001f4e7 l       .debug_str	00000000 
0001f556 l       .debug_str	00000000 
0001f591 l       .debug_str	00000000 
0001f5c2 l       .debug_str	00000000 
0001f5d6 l       .debug_str	00000000 
0001f5e1 l       .debug_str	00000000 
0001f5ff l       .debug_str	00000000 
0001f63a l       .debug_str	00000000 
0001f670 l       .debug_str	00000000 
0001f6df l       .debug_str	00000000 
0001f71a l       .debug_str	00000000 
0001f74b l       .debug_str	00000000 
0001f760 l       .debug_str	00000000 
0001f765 l       .debug_str	00000000 
0001f771 l       .debug_str	00000000 
0001f790 l       .debug_str	00000000 
0001f7cb l       .debug_str	00000000 
0001f802 l       .debug_str	00000000 
0001f871 l       .debug_str	00000000 
0001f8ad l       .debug_str	00000000 
0001f8e5 l       .debug_str	00000000 
0001f8f1 l       .debug_str	00000000 
0001f92e l       .debug_str	00000000 
0001f9b7 l       .debug_str	00000000 
0001fa11 l       .debug_str	00000000 
0001fa91 l       .debug_str	00000000 
0001fafd l       .debug_str	00000000 
0001fb88 l       .debug_str	00000000 
0001fbf9 l       .debug_str	00000000 
0001fc39 l       .debug_str	00000000 
0001fca9 l       .debug_str	00000000 
0001fcea l       .debug_str	00000000 
0001fd4d l       .debug_str	00000000 
0001fd8c l       .debug_str	00000000 
0001fd9d l       .debug_str	00000000 
0001fda8 l       .debug_str	00000000 
0001fe03 l       .debug_str	00000000 
0001fe0c l       .debug_str	00000000 
0001feb5 l       .debug_str	00000000 
0001ff29 l       .debug_str	00000000 
0001ff88 l       .debug_str	00000000 
0001fe07 l       .debug_str	00000000 
0001fff1 l       .debug_str	00000000 
0002004f l       .debug_str	00000000 
000200c6 l       .debug_str	00000000 
000200d1 l       .debug_str	00000000 
00020118 l       .debug_str	00000000 
00020122 l       .debug_str	00000000 
00006fc0 l       .debug_str	00000000 
0002016b l       .debug_str	00000000 
000201df l       .debug_str	00000000 
00020261 l       .debug_str	00000000 
0002027e l       .debug_str	00000000 
0002031e l       .debug_str	00000000 
00020342 l       .debug_str	00000000 
0002037b l       .debug_str	00000000 
0002039b l       .debug_str	00000000 
000203f5 l       .debug_str	00000000 
00020402 l       .debug_str	00000000 
00020474 l       .debug_str	00000000 
000204d8 l       .debug_str	00000000 
000204e3 l       .debug_str	00000000 
0002055c l       .debug_str	00000000 
00020568 l       .debug_str	00000000 
000205e4 l       .debug_str	00000000 
000205ea l       .debug_str	00000000 
000205f1 l       .debug_str	00000000 
0002062d l       .debug_str	00000000 
000206a5 l       .debug_str	00000000 
000206db l       .debug_str	00000000 
00020724 l       .debug_str	00000000 
0002076e l       .debug_str	00000000 
000207ad l       .debug_str	00000000 
000207d0 l       .debug_str	00000000 
0002082b l       .debug_str	00000000 
00020888 l       .debug_str	00000000 
000208b3 l       .debug_str	00000000 
0002091a l       .debug_str	00000000 
00020963 l       .debug_str	00000000 
000209ec l       .debug_str	00000000 
00020a45 l       .debug_str	00000000 
00020ac5 l       .debug_str	00000000 
00020b30 l       .debug_str	00000000 
00020bbb l       .debug_str	00000000 
00020c2b l       .debug_str	00000000 
00020c6b l       .debug_str	00000000 
00020cda l       .debug_str	00000000 
00020d1b l       .debug_str	00000000 
00020d7d l       .debug_str	00000000 
00020dbc l       .debug_str	00000000 
00020e1b l       .debug_str	00000000 
00020ec4 l       .debug_str	00000000 
00020f37 l       .debug_str	00000000 
00020f96 l       .debug_str	00000000 
00020ffe l       .debug_str	00000000 
0002105c l       .debug_str	00000000 
000210d2 l       .debug_str	00000000 
0002110f l       .debug_str	00000000 
0002119e l       .debug_str	00000000 
000211d3 l       .debug_str	00000000 
00021259 l       .debug_str	00000000 
000212e2 l       .debug_str	00000000 
00021336 l       .debug_str	00000000 
00006e5d l       .debug_str	00000000 
00021384 l       .debug_str	00000000 
00021412 l       .debug_str	00000000 
00021466 l       .debug_str	00000000 
000214a5 l       .debug_str	00000000 
000214f0 l       .debug_str	00000000 
00009211 l       .debug_str	00000000 
00021539 l       .debug_str	00000000 
000215bb l       .debug_str	00000000 
000215d7 l       .debug_str	00000000 
00021677 l       .debug_str	00000000 
0002169a l       .debug_str	00000000 
000216d3 l       .debug_str	00000000 
000216f1 l       .debug_str	00000000 
0002174a l       .debug_str	00000000 
000217a3 l       .debug_str	00000000 
000217e0 l       .debug_str	00000000 
00021841 l       .debug_str	00000000 
000218b2 l       .debug_str	00000000 
000218e2 l       .debug_str	00000000 
00021928 l       .debug_str	00000000 
0002199a l       .debug_str	00000000 
00021a2e l       .debug_str	00000000 
00021a52 l       .debug_str	00000000 
00021ace l       .debug_str	00000000 
00021b08 l       .debug_str	00000000 
00021b47 l       .debug_str	00000000 
00021bea l       .debug_str	00000000 
00021c23 l       .debug_str	00000000 
00021c7f l       .debug_str	00000000 
00021cfb l       .debug_str	00000000 
00021d53 l       .debug_str	00000000 
00021d73 l       .debug_str	00000000 
00021dcc l       .debug_str	00000000 
00021e25 l       .debug_str	00000000 
00021e7e l       .debug_str	00000000 
00021ed8 l       .debug_str	00000000 
00021f0e l       .debug_str	00000000 
00021f1e l       .debug_str	00000000 
00021f2d l       .debug_str	00000000 
00021f36 l       .debug_str	00000000 
00021f6d l       .debug_str	00000000 
00021fa9 l       .debug_str	00000000 
00021fb9 l       .debug_str	00000000 
00022015 l       .debug_str	00000000 
00022077 l       .debug_str	00000000 
00012c91 l       .debug_str	00000000 
000220c1 l       .debug_str	00000000 
000220fc l       .debug_str	00000000 
00022121 l       .debug_str	00000000 
00022180 l       .debug_str	00000000 
000221ca l       .debug_str	00000000 
00022205 l       .debug_str	00000000 
0002222a l       .debug_str	00000000 
00022289 l       .debug_str	00000000 
000222f2 l       .debug_str	00000000 
000222fb l       .debug_str	00000000 
00022332 l       .debug_str	00000000 
0002238e l       .debug_str	00000000 
000223f0 l       .debug_str	00000000 
0002244f l       .debug_str	00000000 
000224ae l       .debug_str	00000000 
000224e4 l       .debug_str	00000000 
000224f5 l       .debug_str	00000000 
00022505 l       .debug_str	00000000 
0002250f l       .debug_str	00000000 
00022547 l       .debug_str	00000000 
000225a4 l       .debug_str	00000000 
00022607 l       .debug_str	00000000 
00022652 l       .debug_str	00000000 
0002268d l       .debug_str	00000000 
000226b3 l       .debug_str	00000000 
00022713 l       .debug_str	00000000 
0002275e l       .debug_str	00000000 
00022799 l       .debug_str	00000000 
000227bf l       .debug_str	00000000 
0002281f l       .debug_str	00000000 
00022855 l       .debug_str	00000000 
00022866 l       .debug_str	00000000 
00022876 l       .debug_str	00000000 
00022880 l       .debug_str	00000000 
000228b8 l       .debug_str	00000000 
00022915 l       .debug_str	00000000 
00022978 l       .debug_str	00000000 
000229d8 l       .debug_str	00000000 
00022a38 l       .debug_str	00000000 
00022a6e l       .debug_str	00000000 
00022a7f l       .debug_str	00000000 
00022a8f l       .debug_str	00000000 
00022a99 l       .debug_str	00000000 
00022ad1 l       .debug_str	00000000 
00022b2e l       .debug_str	00000000 
00022b91 l       .debug_str	00000000 
00022bdc l       .debug_str	00000000 
00022c17 l       .debug_str	00000000 
00022c3d l       .debug_str	00000000 
00022c9d l       .debug_str	00000000 
00022ce8 l       .debug_str	00000000 
00022d23 l       .debug_str	00000000 
00022d49 l       .debug_str	00000000 
00022da9 l       .debug_str	00000000 
00022ddf l       .debug_str	00000000 
00022df0 l       .debug_str	00000000 
00022e00 l       .debug_str	00000000 
00022e0a l       .debug_str	00000000 
00022e42 l       .debug_str	00000000 
00022e9f l       .debug_str	00000000 
00022f02 l       .debug_str	00000000 
00022f62 l       .debug_str	00000000 
00022fc2 l       .debug_str	00000000 
00022ff8 l       .debug_str	00000000 
000042c1 l       .debug_str	00000000 
0002300b l       .debug_str	00000000 
0002301d l       .debug_str	00000000 
00023029 l       .debug_str	00000000 
00023064 l       .debug_str	00000000 
000230c3 l       .debug_str	00000000 
00023128 l       .debug_str	00000000 
0002318a l       .debug_str	00000000 
000231c5 l       .debug_str	00000000 
000231ed l       .debug_str	00000000 
0002324f l       .debug_str	00000000 
00023285 l       .debug_str	00000000 
00023298 l       .debug_str	00000000 
000232aa l       .debug_str	00000000 
000232b6 l       .debug_str	00000000 
000232f1 l       .debug_str	00000000 
00023355 l       .debug_str	00000000 
00023374 l       .debug_str	00000000 
000233d6 l       .debug_str	00000000 
0002343c l       .debug_str	00000000 
000234bc l       .debug_str	00000000 
0002350b l       .debug_str	00000000 
00023581 l       .debug_str	00000000 
000235f7 l       .debug_str	00000000 
000236cc l       .debug_str	00000000 
00023729 l       .debug_str	00000000 
00023787 l       .debug_str	00000000 
000237e8 l       .debug_str	00000000 
000237f2 l       .debug_str	00000000 
00023849 l       .debug_str	00000000 
000238b6 l       .debug_str	00000000 
000238f1 l       .debug_str	00000000 
00023971 l       .debug_str	00000000 
000239e0 l       .debug_str	00000000 
00023a5e l       .debug_str	00000000 
00023ab1 l       .debug_str	00000000 
00023b1f l       .debug_str	00000000 
00023bb7 l       .debug_str	00000000 
00023c44 l       .debug_str	00000000 
00023cd2 l       .debug_str	00000000 
00023d60 l       .debug_str	00000000 
00023e6e l       .debug_str	00000000 
00023ee2 l       .debug_str	00000000 
00023f22 l       .debug_str	00000000 
00023f6b l       .debug_str	00000000 
00023fc3 l       .debug_str	00000000 
00024007 l       .debug_str	00000000 
00024069 l       .debug_str	00000000 
000240e2 l       .debug_str	00000000 
00024149 l       .debug_str	00000000 
000241a0 l       .debug_str	00000000 
0002422a l       .debug_str	00000000 
00024247 l       .debug_str	00000000 
000242d1 l       .debug_str	00000000 
000242f3 l       .debug_str	00000000 
00024337 l       .debug_str	00000000 
000243a7 l       .debug_str	00000000 
0002445d l       .debug_str	00000000 
000244ed l       .debug_str	00000000 
00024585 l       .debug_str	00000000 
00024632 l       .debug_str	00000000 
000246c8 l       .debug_str	00000000 
00024759 l       .debug_str	00000000 
0002479d l       .debug_str	00000000 
000247ee l       .debug_str	00000000 
00024872 l       .debug_str	00000000 
000248fe l       .debug_str	00000000 
00024983 l       .debug_str	00000000 
00024988 l       .debug_str	00000000 
00024a14 l       .debug_str	00000000 
00024a1d l       .debug_str	00000000 
00024abf l       .debug_str	00000000 
00024b4e l       .debug_str	00000000 
00024ba0 l       .debug_str	00000000 
00024baf l       .debug_str	00000000 
00024bf6 l       .debug_str	00000000 
00024cac l       .debug_str	00000000 
00024d5c l       .debug_str	00000000 
00024dc9 l       .debug_str	00000000 
00024dfe l       .debug_str	00000000 
00024e7e l       .debug_str	00000000 
00024ee9 l       .debug_str	00000000 
00024f67 l       .debug_str	00000000 
00024fb6 l       .debug_str	00000000 
00025015 l       .debug_str	00000000 
00025079 l       .debug_str	00000000 
0002509a l       .debug_str	00000000 
00025132 l       .debug_str	00000000 
000251d6 l       .debug_str	00000000 
0002526c l       .debug_str	00000000 
000252f4 l       .debug_str	00000000 
0002536a l       .debug_str	00000000 
000253b3 l       .debug_str	00000000 
0002540d l       .debug_str	00000000 
00025451 l       .debug_str	00000000 
000254b0 l       .debug_str	00000000 
0002552b l       .debug_str	00000000 
00025592 l       .debug_str	00000000 
000255eb l       .debug_str	00000000 
00025675 l       .debug_str	00000000 
000256b9 l       .debug_str	00000000 
0002573d l       .debug_str	00000000 
000257c5 l       .debug_str	00000000 
00025817 l       .debug_str	00000000 
00025895 l       .debug_str	00000000 
0002591a l       .debug_str	00000000 
000259bc l       .debug_str	00000000 
00025a47 l       .debug_str	00000000 
00025afd l       .debug_str	00000000 
00025ba4 l       .debug_str	00000000 
00025c11 l       .debug_str	00000000 
00025c46 l       .debug_str	00000000 
00025cc6 l       .debug_str	00000000 
00025d31 l       .debug_str	00000000 
00025daf l       .debug_str	00000000 
00025dfe l       .debug_str	00000000 
00025e5d l       .debug_str	00000000 
00025ec1 l       .debug_str	00000000 
00025ee2 l       .debug_str	00000000 
00025f7a l       .debug_str	00000000 
0002601e l       .debug_str	00000000 
000260b4 l       .debug_str	00000000 
0002613c l       .debug_str	00000000 
000261b2 l       .debug_str	00000000 
000261fb l       .debug_str	00000000 
00026255 l       .debug_str	00000000 
00026299 l       .debug_str	00000000 
000262f8 l       .debug_str	00000000 
00026373 l       .debug_str	00000000 
000263da l       .debug_str	00000000 
00026433 l       .debug_str	00000000 
000264bd l       .debug_str	00000000 
00026501 l       .debug_str	00000000 
00026585 l       .debug_str	00000000 
0002660d l       .debug_str	00000000 
0002668b l       .debug_str	00000000 
00026710 l       .debug_str	00000000 
000267b2 l       .debug_str	00000000 
0002683d l       .debug_str	00000000 
000268f3 l       .debug_str	00000000 
0002699a l       .debug_str	00000000 
000269da l       .debug_str	00000000 
000269f7 l       .debug_str	00000000 
00026a3b l       .debug_str	00000000 
00026a5c l       .debug_str	00000000 
00026a9c l       .debug_str	00000000 
00026ab9 l       .debug_str	00000000 
00026afd l       .debug_str	00000000 
00026b1e l       .debug_str	00000000 
00026b80 l       .debug_str	00000000 
00026be7 l       .debug_str	00000000 
00026c22 l       .debug_str	00000000 
00026c45 l       .debug_str	00000000 
00026cab l       .debug_str	00000000 
00026ce6 l       .debug_str	00000000 
00026d08 l       .debug_str	00000000 
00026d43 l       .debug_str	00000000 
00026d67 l       .debug_str	00000000 
00026da2 l       .debug_str	00000000 
00026dc5 l       .debug_str	00000000 
00026e00 l       .debug_str	00000000 
00026e24 l       .debug_str	00000000 
00026e5f l       .debug_str	00000000 
00026e82 l       .debug_str	00000000 
00026ecb l       .debug_str	00000000 
00026f11 l       .debug_str	00000000 
00026f5c l       .debug_str	00000000 
00026f8f l       .debug_str	00000000 
00026fca l       .debug_str	00000000 
00026fee l       .debug_str	00000000 
0002707a l       .debug_str	00000000 
000270ae l       .debug_str	00000000 
0002712a l       .debug_str	00000000 
0002716f l       .debug_str	00000000 
000271ba l       .debug_str	00000000 
0002721c l       .debug_str	00000000 
00027257 l       .debug_str	00000000 
0002727a l       .debug_str	00000000 
000272b5 l       .debug_str	00000000 
000272db l       .debug_str	00000000 
00027326 l       .debug_str	00000000 
00027361 l       .debug_str	00000000 
00027387 l       .debug_str	00000000 
000273c2 l       .debug_str	00000000 
000273e7 l       .debug_str	00000000 
00027433 l       .debug_str	00000000 
00027496 l       .debug_str	00000000 
000274d1 l       .debug_str	00000000 
000274f5 l       .debug_str	00000000 
00027530 l       .debug_str	00000000 
00027557 l       .debug_str	00000000 
000275a3 l       .debug_str	00000000 
000275de l       .debug_str	00000000 
00027605 l       .debug_str	00000000 
00027650 l       .debug_str	00000000 
0002769c l       .debug_str	00000000 
000276e8 l       .debug_str	00000000 
00027734 l       .debug_str	00000000 
0002773b l       .debug_str	00000000 
00027789 l       .debug_str	00000000 
00027791 l       .debug_str	00000000 
000277fa l       .debug_str	00000000 
0002782d l       .debug_str	00000000 
000278ab l       .debug_str	00000000 
000278bd l       .debug_str	00000000 
00027922 l       .debug_str	00000000 
00027944 l       .debug_str	00000000 
000279a3 l       .debug_str	00000000 
000279ee l       .debug_str	00000000 
00027a48 l       .debug_str	00000000 
00027abb l       .debug_str	00000000 
00027ac8 l       .debug_str	00000000 
00027b2d l       .debug_str	00000000 
00027b9f l       .debug_str	00000000 
00027bec l       .debug_str	00000000 
00027c23 l       .debug_str	00000000 
00027c2e l       .debug_str	00000000 
000015d0 l       .debug_str	00000000 
00027c7c l       .debug_str	00000000 
00027cc4 l       .debug_str	00000000 
00027cce l       .debug_str	00000000 
00027d0a l       .debug_str	00000000 
00027d2d l       .debug_str	00000000 
00027d67 l       .debug_str	00000000 
00027da2 l       .debug_str	00000000 
00027e0e l       .debug_str	00000000 
00027e53 l       .debug_str	00000000 
00027eb3 l       .debug_str	00000000 
00027ed2 l       .debug_str	00000000 
00027f32 l       .debug_str	00000000 
00027f4d l       .debug_str	00000000 
00027fa4 l       .debug_str	00000000 
00027fec l       .debug_str	00000000 
00028006 l       .debug_str	00000000 
00028065 l       .debug_str	00000000 
000280c5 l       .debug_str	00000000 
000280e4 l       .debug_str	00000000 
00028156 l       .debug_str	00000000 
00028229 l       .debug_str	00000000 
00028288 l       .debug_str	00000000 
000282e5 l       .debug_str	00000000 
00028348 l       .debug_str	00000000 
000283a8 l       .debug_str	00000000 
00028408 l       .debug_str	00000000 
00028471 l       .debug_str	00000000 
000284ae l       .debug_str	00000000 
00028511 l       .debug_str	00000000 
0002857f l       .debug_str	00000000 
000285e4 l       .debug_str	00000000 
0002864e l       .debug_str	00000000 
000286ab l       .debug_str	00000000 
000286e9 l       .debug_str	00000000 
000286f8 l       .debug_str	00000000 
00028733 l       .debug_str	00000000 
00028740 l       .debug_str	00000000 
000287a2 l       .debug_str	00000000 
000287bf l       .debug_str	00000000 
00028828 l       .debug_str	00000000 
000288b8 l       .debug_str	00000000 
00028912 l       .debug_str	00000000 
0002897a l       .debug_str	00000000 
00028995 l       .debug_str	00000000 
000289e8 l       .debug_str	00000000 
00028a36 l       .debug_str	00000000 
00028a40 l       .debug_str	00000000 
00028a88 l       .debug_str	00000000 
00028a94 l       .debug_str	00000000 
00028b08 l       .debug_str	00000000 
00028b13 l       .debug_str	00000000 
00028b4f l       .debug_str	00000000 
00028b76 l       .debug_str	00000000 
00028bc1 l       .debug_str	00000000 
00028bce l       .debug_str	00000000 
00028be1 l       .debug_str	00000000 
00028bec l       .debug_str	00000000 
00028c2e l       .debug_str	00000000 
00028c43 l       .debug_str	00000000 
00028c8b l       .debug_str	00000000 
00028cee l       .debug_str	00000000 
00028d10 l       .debug_str	00000000 
00028d60 l       .debug_str	00000000 
00028dcd l       .debug_str	00000000 
00028e3d l       .debug_str	00000000 
00028e85 l       .debug_str	00000000 
00028e8e l       .debug_str	00000000 
00028f08 l       .debug_str	00000000 
00028f55 l       .debug_str	00000000 
00028fcf l       .debug_str	00000000 
0002901c l       .debug_str	00000000 
0002906e l       .debug_str	00000000 
000290cc l       .debug_str	00000000 
00001673 l       .debug_str	00000000 
00029114 l       .debug_str	00000000 
00029171 l       .debug_str	00000000 
000291d4 l       .debug_str	00000000 
00029234 l       .debug_str	00000000 
00029294 l       .debug_str	00000000 
000292f4 l       .debug_str	00000000 
00029350 l       .debug_str	00000000 
000293b0 l       .debug_str	00000000 
0002942a l       .debug_str	00000000 
0002947b l       .debug_str	00000000 
0003e4ab l       .debug_str	00000000 
000294c5 l       .debug_str	00000000 
000294cf l       .debug_str	00000000 
000294d3 l       .debug_str	00000000 
000294d7 l       .debug_str	00000000 
000294db l       .debug_str	00000000 
000294e2 l       .debug_str	00000000 
000294e7 l       .debug_str	00000000 
0002951c l       .debug_str	00000000 
00029542 l       .debug_str	00000000 
00029577 l       .debug_str	00000000 
000295ab l       .debug_str	00000000 
000295e0 l       .debug_str	00000000 
00029605 l       .debug_str	00000000 
0002963a l       .debug_str	00000000 
00029653 l       .debug_str	00000000 
00029688 l       .debug_str	00000000 
000296bd l       .debug_str	00000000 
000296f2 l       .debug_str	00000000 
00029730 l       .debug_str	00000000 
00029765 l       .debug_str	00000000 
000297f0 l       .debug_str	00000000 
00029825 l       .debug_str	00000000 
00029870 l       .debug_str	00000000 
000298a5 l       .debug_str	00000000 
000298fc l       .debug_str	00000000 
00029931 l       .debug_str	00000000 
00029966 l       .debug_str	00000000 
000299d7 l       .debug_str	00000000 
000299ea l       .debug_str	00000000 
00029a5b l       .debug_str	00000000 
00029a9e l       .debug_str	00000000 
00029aa8 l       .debug_str	00000000 
00029af2 l       .debug_str	00000000 
00029b39 l       .debug_str	00000000 
00029b86 l       .debug_str	00000000 
00029bd0 l       .debug_str	00000000 
00029c02 l       .debug_str	00000000 
00029c36 l       .debug_str	00000000 
00029c6f l       .debug_str	00000000 
00029cab l       .debug_str	00000000 
00029cbd l       .debug_str	00000000 
00029cfe l       .debug_str	00000000 
00029d0b l       .debug_str	00000000 
00029d4a l       .debug_str	00000000 
00029d55 l       .debug_str	00000000 
00029d91 l       .debug_str	00000000 
00029d9f l       .debug_str	00000000 
00029dd3 l       .debug_str	00000000 
00029e0f l       .debug_str	00000000 
00029e6b l       .debug_str	00000000 
00029e72 l       .debug_str	00000000 
00029ed0 l       .debug_str	00000000 
00029ed9 l       .debug_str	00000000 
00029f40 l       .debug_str	00000000 
00029f51 l       .debug_str	00000000 
00029fae l       .debug_str	00000000 
0002a00d l       .debug_str	00000000 
0002a069 l       .debug_str	00000000 
0002a0c7 l       .debug_str	00000000 
0002a12e l       .debug_str	00000000 
0002a18b l       .debug_str	00000000 
0002a1ea l       .debug_str	00000000 
0002a223 l       .debug_str	00000000 
0002a22d l       .debug_str	00000000 
0002a268 l       .debug_str	00000000 
0002a2a6 l       .debug_str	00000000 
0002a2b4 l       .debug_str	00000000 
0002a2ed l       .debug_str	00000000 
0002a2f7 l       .debug_str	00000000 
0002a35f l       .debug_str	00000000 
0002a392 l       .debug_str	00000000 
0002a39c l       .debug_str	00000000 
0002a3d2 l       .debug_str	00000000 
0002a3de l       .debug_str	00000000 
0002a415 l       .debug_str	00000000 
0002a422 l       .debug_str	00000000 
0002a466 l       .debug_str	00000000 
0002a480 l       .debug_str	00000000 
0002a4c1 l       .debug_str	00000000 
0002a520 l       .debug_str	00000000 
0002a551 l       .debug_str	00000000 
0002a567 l       .debug_str	00000000 
0002a598 l       .debug_str	00000000 
0002a5ae l       .debug_str	00000000 
0002a5e3 l       .debug_str	00000000 
0002a640 l       .debug_str	00000000 
0002a69e l       .debug_str	00000000 
00008f07 l       .debug_str	00000000 
0002a703 l       .debug_str	00000000 
0002a767 l       .debug_str	00000000 
0002a7c6 l       .debug_str	00000000 
0002a826 l       .debug_str	00000000 
0002a86c l       .debug_str	00000000 
0002a8ac l       .debug_str	00000000 
0002a934 l       .debug_str	00000000 
0003bb79 l       .debug_str	00000000 
0002a9bb l       .debug_str	00000000 
0002a9ee l       .debug_str	00000000 
0002aa62 l       .debug_str	00000000 
0002aadb l       .debug_str	00000000 
0002ab64 l       .debug_str	00000000 
0002abc1 l       .debug_str	00000000 
0002ac22 l       .debug_str	00000000 
0002ac7c l       .debug_str	00000000 
0002acd8 l       .debug_str	00000000 
0002ad35 l       .debug_str	00000000 
0002ad94 l       .debug_str	00000000 
0002adfc l       .debug_str	00000000 
0002ae66 l       .debug_str	00000000 
0002aecf l       .debug_str	00000000 
0002af2d l       .debug_str	00000000 
0003ca45 l       .debug_str	00000000 
0002af9f l       .debug_str	00000000 
0002b012 l       .debug_str	00000000 
0002b070 l       .debug_str	00000000 
0002b0e6 l       .debug_str	00000000 
0002b142 l       .debug_str	00000000 
0002b1b3 l       .debug_str	00000000 
0002b229 l       .debug_str	00000000 
0002b260 l       .debug_str	00000000 
0002b2c0 l       .debug_str	00000000 
0002b31c l       .debug_str	00000000 
0002b351 l       .debug_str	00000000 
0002b386 l       .debug_str	00000000 
0002b3bc l       .debug_str	00000000 
0002b417 l       .debug_str	00000000 
0002b459 l       .debug_str	00000000 
0002b48a l       .debug_str	00000000 
0002b4bb l       .debug_str	00000000 
0002b4ee l       .debug_str	00000000 
0002b4f5 l       .debug_str	00000000 
0002b522 l       .debug_str	00000000 
0002b55d l       .debug_str	00000000 
0002b570 l       .debug_str	00000000 
0002b5a1 l       .debug_str	00000000 
0002b5ab l       .debug_str	00000000 
0002b617 l       .debug_str	00000000 
0002b66c l       .debug_str	00000000 
0002b69f l       .debug_str	00000000 
0002b6ad l       .debug_str	00000000 
0002b701 l       .debug_str	00000000 
0002b732 l       .debug_str	00000000 
0002b764 l       .debug_str	00000000 
0002b79d l       .debug_str	00000000 
0002b7b2 l       .debug_str	00000000 
0002b7ed l       .debug_str	00000000 
0002b804 l       .debug_str	00000000 
0002b842 l       .debug_str	00000000 
0002b85c l       .debug_str	00000000 
0002b8be l       .debug_str	00000000 
0002b8e3 l       .debug_str	00000000 
0002b93e l       .debug_str	00000000 
0002b94d l       .debug_str	00000000 
0002b9c2 l       .debug_str	00000000 
0002b9df l       .debug_str	00000000 
0002ba19 l       .debug_str	00000000 
0002ba56 l       .debug_str	00000000 
0002ba61 l       .debug_str	00000000 
0002ba99 l       .debug_str	00000000 
0002baa0 l       .debug_str	00000000 
0002bb1f l       .debug_str	00000000 
0002bb7f l       .debug_str	00000000 
0002bbdd l       .debug_str	00000000 
0002bc3b l       .debug_str	00000000 
0002bc73 l       .debug_str	00000000 
0002bca8 l       .debug_str	00000000 
0002bcd3 l       .debug_str	00000000 
0002bcdd l       .debug_str	00000000 
0002bd0d l       .debug_str	00000000 
0002bd1b l       .debug_str	00000000 
0002bd74 l       .debug_str	00000000 
0002bdf0 l       .debug_str	00000000 
0002be54 l       .debug_str	00000000 
0002beb8 l       .debug_str	00000000 
0002beee l       .debug_str	00000000 
0002bf02 l       .debug_str	00000000 
0002bf43 l       .debug_str	00000000 
0002bf5b l       .debug_str	00000000 
0002c00f l       .debug_str	00000000 
0002c042 l       .debug_str	00000000 
0002c053 l       .debug_str	00000000 
0002c099 l       .debug_str	00000000 
0002c0a6 l       .debug_str	00000000 
0002c0e3 l       .debug_str	00000000 
0002c127 l       .debug_str	00000000 
0002c168 l       .debug_str	00000000 
0002c1aa l       .debug_str	00000000 
0002c1b4 l       .debug_str	00000000 
0002c1f8 l       .debug_str	00000000 
0002c203 l       .debug_str	00000000 
0002c251 l       .debug_str	00000000 
0002c29f l       .debug_str	00000000 
0002c2e5 l       .debug_str	00000000 
0002c32d l       .debug_str	00000000 
0002c375 l       .debug_str	00000000 
00016e36 l       .debug_str	00000000 
0002c3dc l       .debug_str	00000000 
0002c435 l       .debug_str	00000000 
0002c47b l       .debug_str	00000000 
0002c49e l       .debug_str	00000000 
0002c4e4 l       .debug_str	00000000 
0002c507 l       .debug_str	00000000 
0002c550 l       .debug_str	00000000 
0002c576 l       .debug_str	00000000 
0002c5bf l       .debug_str	00000000 
0002c5e5 l       .debug_str	00000000 
0002c62f l       .debug_str	00000000 
0002c656 l       .debug_str	00000000 
0002c6a0 l       .debug_str	00000000 
0002c6c7 l       .debug_str	00000000 
0002c714 l       .debug_str	00000000 
0002c73e l       .debug_str	00000000 
0002c78b l       .debug_str	00000000 
0002c7b5 l       .debug_str	00000000 
0002c81d l       .debug_str	00000000 
0002c85a l       .debug_str	00000000 
0002c896 l       .debug_str	00000000 
0002c8d2 l       .debug_str	00000000 
0002c90b l       .debug_str	00000000 
0002c944 l       .debug_str	00000000 
0002c97e l       .debug_str	00000000 
0002c9b1 l       .debug_str	00000000 
0002c9dd l       .debug_str	00000000 
0002ca33 l       .debug_str	00000000 
0002ca5e l       .debug_str	00000000 
0002cab6 l       .debug_str	00000000 
0002cb0c l       .debug_str	00000000 
0002cb45 l       .debug_str	00000000 
0002cb50 l       .debug_str	00000000 
0002cb89 l       .debug_str	00000000 
0002cb94 l       .debug_str	00000000 
0002cbbb l       .debug_str	00000000 
0002cbf4 l       .debug_str	00000000 
0002cc3b l       .debug_str	00000000 
0002cc48 l       .debug_str	00000000 
0002ce97 l       .debug_str	00000000 
0002cc77 l       .debug_str	00000000 
0002ccb7 l       .debug_str	00000000 
0002cccb l       .debug_str	00000000 
0002cd0d l       .debug_str	00000000 
0002cd3e l       .debug_str	00000000 
0002cd6e l       .debug_str	00000000 
0002cd9f l       .debug_str	00000000 
0002cdd0 l       .debug_str	00000000 
0002ce05 l       .debug_str	00000000 
0002ce3c l       .debug_str	00000000 
0002ce47 l       .debug_str	00000000 
0002ce87 l       .debug_str	00000000 
0002ce9b l       .debug_str	00000000 
0002ced7 l       .debug_str	00000000 
0002cee7 l       .debug_str	00000000 
0002cf1c l       .debug_str	00000000 
0002cf26 l       .debug_str	00000000 
0002cf5b l       .debug_str	00000000 
0002cf65 l       .debug_str	00000000 
0002cfba l       .debug_str	00000000 
0002d002 l       .debug_str	00000000 
0002d048 l       .debug_str	00000000 
0002d08f l       .debug_str	00000000 
0002d0d8 l       .debug_str	00000000 
0002d122 l       .debug_str	00000000 
0002d174 l       .debug_str	00000000 
0002d212 l       .debug_str	00000000 
0002d27c l       .debug_str	00000000 
0002d287 l       .debug_str	00000000 
0002d2f1 l       .debug_str	00000000 
0002d2fc l       .debug_str	00000000 
0002d377 l       .debug_str	00000000 
0002d3ec l       .debug_str	00000000 
0002d3f7 l       .debug_str	00000000 
0002d46c l       .debug_str	00000000 
0002d477 l       .debug_str	00000000 
0002d4ce l       .debug_str	00000000 
0002d532 l       .debug_str	00000000 
0002d53e l       .debug_str	00000000 
0002d57d l       .debug_str	00000000 
0002b56a l       .debug_str	00000000 
0002d5b2 l       .debug_str	00000000 
0002d5f3 l       .debug_str	00000000 
0002d5f6 l       .debug_str	00000000 
000373c9 l       .debug_str	00000000 
0002d636 l       .debug_str	00000000 
0002d680 l       .debug_str	00000000 
0002d68b l       .debug_str	00000000 
0002d6d9 l       .debug_str	00000000 
0002d6e8 l       .debug_str	00000000 
0002d72c l       .debug_str	00000000 
0002d732 l       .debug_str	00000000 
0002d77a l       .debug_str	00000000 
0002d784 l       .debug_str	00000000 
0002d7cc l       .debug_str	00000000 
0002d7d6 l       .debug_str	00000000 
0002d822 l       .debug_str	00000000 
0002d82f l       .debug_str	00000000 
0002d877 l       .debug_str	00000000 
0002d881 l       .debug_str	00000000 
0002d8cb l       .debug_str	00000000 
0002d8df l       .debug_str	00000000 
0002d921 l       .debug_str	00000000 
0002d92a l       .debug_str	00000000 
0002d96c l       .debug_str	00000000 
0002d975 l       .debug_str	00000000 
0002d9d1 l       .debug_str	00000000 
0002da2b l       .debug_str	00000000 
0002da86 l       .debug_str	00000000 
0002dae0 l       .debug_str	00000000 
00015417 l       .debug_str	00000000 
0002db26 l       .debug_str	00000000 
0002db8c l       .debug_str	00000000 
0002dbc3 l       .debug_str	00000000 
0002dbcb l       .debug_str	00000000 
0002dc03 l       .debug_str	00000000 
0002dc0c l       .debug_str	00000000 
0002dc44 l       .debug_str	00000000 
0002dc4d l       .debug_str	00000000 
0002dc84 l       .debug_str	00000000 
0002dc8c l       .debug_str	00000000 
0002dcc4 l       .debug_str	00000000 
0002dccd l       .debug_str	00000000 
0002dd05 l       .debug_str	00000000 
0002dd0e l       .debug_str	00000000 
0002dd45 l       .debug_str	00000000 
0002dd4d l       .debug_str	00000000 
0002ddc7 l       .debug_str	00000000 
0002de41 l       .debug_str	00000000 
0002debb l       .debug_str	00000000 
0002df37 l       .debug_str	00000000 
0002df95 l       .debug_str	00000000 
0002df9e l       .debug_str	00000000 
0002dffd l       .debug_str	00000000 
0002e05c l       .debug_str	00000000 
0002e0bb l       .debug_str	00000000 
0002e11b l       .debug_str	00000000 
0002e179 l       .debug_str	00000000 
0002e1d8 l       .debug_str	00000000 
0002e237 l       .debug_str	00000000 
0002e296 l       .debug_str	00000000 
0002e2f6 l       .debug_str	00000000 
0002e35d l       .debug_str	00000000 
0002e3c8 l       .debug_str	00000000 
0002e423 l       .debug_str	00000000 
0002e47e l       .debug_str	00000000 
0002e4e0 l       .debug_str	00000000 
0002e545 l       .debug_str	00000000 
0002e5ae l       .debug_str	00000000 
0002e614 l       .debug_str	00000000 
0002e669 l       .debug_str	00000000 
0002e6be l       .debug_str	00000000 
0002e718 l       .debug_str	00000000 
0002e772 l       .debug_str	00000000 
0002e7af l       .debug_str	00000000 
0002e7e9 l       .debug_str	00000000 
0002e7f2 l       .debug_str	00000000 
0002e82c l       .debug_str	00000000 
0002e835 l       .debug_str	00000000 
0002e872 l       .debug_str	00000000 
00012c8d l       .debug_str	00000000 
0002e8ab l       .debug_str	00000000 
0002e90c l       .debug_str	00000000 
0002e96a l       .debug_str	00000000 
0002e9ab l       .debug_str	00000000 
0002e9e9 l       .debug_str	00000000 
0002ea2a l       .debug_str	00000000 
0002ea63 l       .debug_str	00000000 
0002eaa2 l       .debug_str	00000000 
0002eae0 l       .debug_str	00000000 
0002eb1e l       .debug_str	00000000 
0002eb5f l       .debug_str	00000000 
0002eba3 l       .debug_str	00000000 
0002ebe0 l       .debug_str	00000000 
0002ec46 l       .debug_str	00000000 
0002ecad l       .debug_str	00000000 
0002ed10 l       .debug_str	00000000 
0002ed6b l       .debug_str	00000000 
0002edb2 l       .debug_str	00000000 
0002edc1 l       .debug_str	00000000 
0002ee09 l       .debug_str	00000000 
0002ee51 l       .debug_str	00000000 
0002ee99 l       .debug_str	00000000 
0002eee2 l       .debug_str	00000000 
0002ef2c l       .debug_str	00000000 
0002ef73 l       .debug_str	00000000 
0002efc6 l       .debug_str	00000000 
0002efe1 l       .debug_str	00000000 
0002f029 l       .debug_str	00000000 
0002f07d l       .debug_str	00000000 
0002f0c5 l       .debug_str	00000000 
0002f119 l       .debug_str	00000000 
0002f161 l       .debug_str	00000000 
0002f1b5 l       .debug_str	00000000 
0002f1fe l       .debug_str	00000000 
0002f253 l       .debug_str	00000000 
0002f29d l       .debug_str	00000000 
0002f2f5 l       .debug_str	00000000 
0002f357 l       .debug_str	00000000 
0002f3b6 l       .debug_str	00000000 
0002f416 l       .debug_str	00000000 
0002f476 l       .debug_str	00000000 
0002f4d6 l       .debug_str	00000000 
0002f537 l       .debug_str	00000000 
0002f596 l       .debug_str	00000000 
0002f5f6 l       .debug_str	00000000 
0002f656 l       .debug_str	00000000 
0002f6b6 l       .debug_str	00000000 
0002f717 l       .debug_str	00000000 
0002f774 l       .debug_str	00000000 
0002f7cf l       .debug_str	00000000 
0002f82d l       .debug_str	00000000 
0002f883 l       .debug_str	00000000 
0002f8d7 l       .debug_str	00000000 
0002f938 l       .debug_str	00000000 
0002f997 l       .debug_str	00000000 
0002f9f6 l       .debug_str	00000000 
0002fa55 l       .debug_str	00000000 
0002fab5 l       .debug_str	00000000 
0002fb15 l       .debug_str	00000000 
0002fb75 l       .debug_str	00000000 
0002fbd5 l       .debug_str	00000000 
0002fc37 l       .debug_str	00000000 
0002fc99 l       .debug_str	00000000 
0002fcff l       .debug_str	00000000 
0002fd67 l       .debug_str	00000000 
0002fdce l       .debug_str	00000000 
0002fe2a l       .debug_str	00000000 
0002fe8b l       .debug_str	00000000 
0002feec l       .debug_str	00000000 
0002ff46 l       .debug_str	00000000 
0002ffa0 l       .debug_str	00000000 
0002fffa l       .debug_str	00000000 
00030058 l       .debug_str	00000000 
000300b1 l       .debug_str	00000000 
00030109 l       .debug_str	00000000 
00030185 l       .debug_str	00000000 
000301ee l       .debug_str	00000000 
0003026a l       .debug_str	00000000 
000302e6 l       .debug_str	00000000 
00030353 l       .debug_str	00000000 
000303cf l       .debug_str	00000000 
00030438 l       .debug_str	00000000 
00030492 l       .debug_str	00000000 
000304e6 l       .debug_str	00000000 
00030547 l       .debug_str	00000000 
000305aa l       .debug_str	00000000 
00030612 l       .debug_str	00000000 
00030674 l       .debug_str	00000000 
000306da l       .debug_str	00000000 
0003073c l       .debug_str	00000000 
000307a1 l       .debug_str	00000000 
00030804 l       .debug_str	00000000 
00030860 l       .debug_str	00000000 
000308b7 l       .debug_str	00000000 
00030910 l       .debug_str	00000000 
00030963 l       .debug_str	00000000 
000309bf l       .debug_str	00000000 
00030a25 l       .debug_str	00000000 
00030a78 l       .debug_str	00000000 
00030ace l       .debug_str	00000000 
00030b2b l       .debug_str	00000000 
00030b8d l       .debug_str	00000000 
00030be6 l       .debug_str	00000000 
00030c41 l       .debug_str	00000000 
00030c9c l       .debug_str	00000000 
00030cf7 l       .debug_str	00000000 
00030d54 l       .debug_str	00000000 
00030db1 l       .debug_str	00000000 
00030e10 l       .debug_str	00000000 
00030e6d l       .debug_str	00000000 
00030ec6 l       .debug_str	00000000 
00030f25 l       .debug_str	00000000 
00030f84 l       .debug_str	00000000 
00030fe5 l       .debug_str	00000000 
00031047 l       .debug_str	00000000 
000310a9 l       .debug_str	00000000 
0003110a l       .debug_str	00000000 
0003116c l       .debug_str	00000000 
000311ce l       .debug_str	00000000 
00012d09 l       .debug_str	00000000 
00031217 l       .debug_str	00000000 
00031263 l       .debug_str	00000000 
0003126b l       .debug_str	00000000 
000312b5 l       .debug_str	00000000 
00031300 l       .debug_str	00000000 
00031307 l       .debug_str	00000000 
00031352 l       .debug_str	00000000 
0003139d l       .debug_str	00000000 
000313e9 l       .debug_str	00000000 
00031433 l       .debug_str	00000000 
00031480 l       .debug_str	00000000 
000314cb l       .debug_str	00000000 
00031517 l       .debug_str	00000000 
00031563 l       .debug_str	00000000 
000315af l       .debug_str	00000000 
000315fc l       .debug_str	00000000 
00031646 l       .debug_str	00000000 
00031693 l       .debug_str	00000000 
000316de l       .debug_str	00000000 
0003172a l       .debug_str	00000000 
00031776 l       .debug_str	00000000 
000317c2 l       .debug_str	00000000 
0003180f l       .debug_str	00000000 
00031859 l       .debug_str	00000000 
000318a6 l       .debug_str	00000000 
000318f1 l       .debug_str	00000000 
0003193d l       .debug_str	00000000 
00031989 l       .debug_str	00000000 
000319d5 l       .debug_str	00000000 
00031a22 l       .debug_str	00000000 
00031a6d l       .debug_str	00000000 
00031abb l       .debug_str	00000000 
00031b07 l       .debug_str	00000000 
00031b54 l       .debug_str	00000000 
00031ba1 l       .debug_str	00000000 
00031bee l       .debug_str	00000000 
00031c3c l       .debug_str	00000000 
00031c87 l       .debug_str	00000000 
00031cd2 l       .debug_str	00000000 
00031d1e l       .debug_str	00000000 
00031d6a l       .debug_str	00000000 
00031db7 l       .debug_str	00000000 
00031e03 l       .debug_str	00000000 
00031e50 l       .debug_str	00000000 
00031e9d l       .debug_str	00000000 
00031efc l       .debug_str	00000000 
00031f59 l       .debug_str	00000000 
00031fb5 l       .debug_str	00000000 
00032013 l       .debug_str	00000000 
00032070 l       .debug_str	00000000 
000320ce l       .debug_str	00000000 
0003212b l       .debug_str	00000000 
00032189 l       .debug_str	00000000 
000321e6 l       .debug_str	00000000 
00032245 l       .debug_str	00000000 
000322a3 l       .debug_str	00000000 
00032304 l       .debug_str	00000000 
00032365 l       .debug_str	00000000 
00032396 l       .debug_str	00000000 
0003239e l       .debug_str	00000000 
000323cf l       .debug_str	00000000 
000323d7 l       .debug_str	00000000 
00032405 l       .debug_str	00000000 
0003240e l       .debug_str	00000000 
0003246e l       .debug_str	00000000 
000324ce l       .debug_str	00000000 
00032525 l       .debug_str	00000000 
00032578 l       .debug_str	00000000 
000325c0 l       .debug_str	00000000 
0003260f l       .debug_str	00000000 
00032657 l       .debug_str	00000000 
00032671 l       .debug_str	00000000 
000326b9 l       .debug_str	00000000 
000326e1 l       .debug_str	00000000 
00032729 l       .debug_str	00000000 
00032766 l       .debug_str	00000000 
000327ae l       .debug_str	00000000 
000327d0 l       .debug_str	00000000 
00032818 l       .debug_str	00000000 
00032860 l       .debug_str	00000000 
000328a8 l       .debug_str	00000000 
000328c5 l       .debug_str	00000000 
0003290d l       .debug_str	00000000 
00032943 l       .debug_str	00000000 
0003298b l       .debug_str	00000000 
000329b3 l       .debug_str	00000000 
000329fb l       .debug_str	00000000 
00032a58 l       .debug_str	00000000 
00032aa0 l       .debug_str	00000000 
00032ac1 l       .debug_str	00000000 
00032b09 l       .debug_str	00000000 
00032b14 l       .debug_str	00000000 
00032b5c l       .debug_str	00000000 
00032bc0 l       .debug_str	00000000 
00032c08 l       .debug_str	00000000 
00032c3d l       .debug_str	00000000 
00032c85 l       .debug_str	00000000 
00032cb6 l       .debug_str	00000000 
00032cfe l       .debug_str	00000000 
00032d28 l       .debug_str	00000000 
00032d70 l       .debug_str	00000000 
00032db8 l       .debug_str	00000000 
00032dc1 l       .debug_str	00000000 
00032e09 l       .debug_str	00000000 
00032e3e l       .debug_str	00000000 
00032e86 l       .debug_str	00000000 
00032f7e l       .debug_str	00000000 
00032fc6 l       .debug_str	00000000 
00032fcf l       .debug_str	00000000 
000014dd l       .debug_str	00000000 
00033017 l       .debug_str	00000000 
0003305f l       .debug_str	00000000 
00033068 l       .debug_str	00000000 
000330b0 l       .debug_str	00000000 
00033109 l       .debug_str	00000000 
00033151 l       .debug_str	00000000 
0003315a l       .debug_str	00000000 
000331a2 l       .debug_str	00000000 
000331dd l       .debug_str	00000000 
00033225 l       .debug_str	00000000 
0003326d l       .debug_str	00000000 
0003327a l       .debug_str	00000000 
0000152e l       .debug_str	00000000 
000332c2 l       .debug_str	00000000 
0003330a l       .debug_str	00000000 
00033332 l       .debug_str	00000000 
0003337a l       .debug_str	00000000 
000333a7 l       .debug_str	00000000 
000333ef l       .debug_str	00000000 
0003340a l       .debug_str	00000000 
00033452 l       .debug_str	00000000 
0003349a l       .debug_str	00000000 
000334b6 l       .debug_str	00000000 
000334fe l       .debug_str	00000000 
00033533 l       .debug_str	00000000 
0003357b l       .debug_str	00000000 
0003359f l       .debug_str	00000000 
000335e7 l       .debug_str	00000000 
0003360c l       .debug_str	00000000 
00033654 l       .debug_str	00000000 
00033700 l       .debug_str	00000000 
00033748 l       .debug_str	00000000 
00033764 l       .debug_str	00000000 
000337ac l       .debug_str	00000000 
000337c9 l       .debug_str	00000000 
00033811 l       .debug_str	00000000 
0003384a l       .debug_str	00000000 
00033892 l       .debug_str	00000000 
000338a8 l       .debug_str	00000000 
000338f0 l       .debug_str	00000000 
00033938 l       .debug_str	00000000 
0003394e l       .debug_str	00000000 
00033996 l       .debug_str	00000000 
000339bd l       .debug_str	00000000 
00033a05 l       .debug_str	00000000 
00033a22 l       .debug_str	00000000 
00033a6a l       .debug_str	00000000 
00033aa5 l       .debug_str	00000000 
00033aed l       .debug_str	00000000 
00033b35 l       .debug_str	00000000 
00033b57 l       .debug_str	00000000 
0000157f l       .debug_str	00000000 
00033b9f l       .debug_str	00000000 
00033be7 l       .debug_str	00000000 
00033bf1 l       .debug_str	00000000 
00033c39 l       .debug_str	00000000 
00033c81 l       .debug_str	00000000 
00033cf8 l       .debug_str	00000000 
00033d40 l       .debug_str	00000000 
00033d69 l       .debug_str	00000000 
00033db1 l       .debug_str	00000000 
00033dbb l       .debug_str	00000000 
00033e03 l       .debug_str	00000000 
00033e7a l       .debug_str	00000000 
00033ec2 l       .debug_str	00000000 
00033eca l       .debug_str	00000000 
00033f12 l       .debug_str	00000000 
00033f3a l       .debug_str	00000000 
00033f82 l       .debug_str	00000000 
00033fca l       .debug_str	00000000 
00033fd9 l       .debug_str	00000000 
00034021 l       .debug_str	00000000 
00034052 l       .debug_str	00000000 
0003409a l       .debug_str	00000000 
000340be l       .debug_str	00000000 
00034106 l       .debug_str	00000000 
00034110 l       .debug_str	00000000 
00034158 l       .debug_str	00000000 
00034161 l       .debug_str	00000000 
000341a9 l       .debug_str	00000000 
000341c7 l       .debug_str	00000000 
0003420f l       .debug_str	00000000 
00034257 l       .debug_str	00000000 
0003428a l       .debug_str	00000000 
000342d2 l       .debug_str	00000000 
0003434d l       .debug_str	00000000 
00034397 l       .debug_str	00000000 
000343e1 l       .debug_str	00000000 
0003444a l       .debug_str	00000000 
000344a7 l       .debug_str	00000000 
0003450a l       .debug_str	00000000 
00034560 l       .debug_str	00000000 
000345b6 l       .debug_str	00000000 
0003460f l       .debug_str	00000000 
00034667 l       .debug_str	00000000 
000346cb l       .debug_str	00000000 
00034751 l       .debug_str	00000000 
00034757 l       .debug_str	00000000 
000347dd l       .debug_str	00000000 
000347e3 l       .debug_str	00000000 
00034865 l       .debug_str	00000000 
000348e7 l       .debug_str	00000000 
0003496a l       .debug_str	00000000 
00034971 l       .debug_str	00000000 
000349f4 l       .debug_str	00000000 
000349fb l       .debug_str	00000000 
00034a81 l       .debug_str	00000000 
00034b07 l       .debug_str	00000000 
00034b8a l       .debug_str	00000000 
00034c0d l       .debug_str	00000000 
00034c8f l       .debug_str	00000000 
00034d15 l       .debug_str	00000000 
00034d9b l       .debug_str	00000000 
00034e25 l       .debug_str	00000000 
00034ead l       .debug_str	00000000 
00034f35 l       .debug_str	00000000 
00034f9d l       .debug_str	00000000 
00035006 l       .debug_str	00000000 
00035070 l       .debug_str	00000000 
000350db l       .debug_str	00000000 
00035139 l       .debug_str	00000000 
00035197 l       .debug_str	00000000 
000351f5 l       .debug_str	00000000 
00035254 l       .debug_str	00000000 
000352b2 l       .debug_str	00000000 
00035311 l       .debug_str	00000000 
0003536f l       .debug_str	00000000 
000353ce l       .debug_str	00000000 
0003542d l       .debug_str	00000000 
0003548c l       .debug_str	00000000 
000354ea l       .debug_str	00000000 
00035549 l       .debug_str	00000000 
000355a8 l       .debug_str	00000000 
00035607 l       .debug_str	00000000 
00035666 l       .debug_str	00000000 
000356c5 l       .debug_str	00000000 
00035724 l       .debug_str	00000000 
00035783 l       .debug_str	00000000 
000357e2 l       .debug_str	00000000 
00035841 l       .debug_str	00000000 
000358a0 l       .debug_str	00000000 
000358ff l       .debug_str	00000000 
0003595e l       .debug_str	00000000 
000359bd l       .debug_str	00000000 
00035a1c l       .debug_str	00000000 
00035a7b l       .debug_str	00000000 
00035ada l       .debug_str	00000000 
00035b39 l       .debug_str	00000000 
00035b98 l       .debug_str	00000000 
00035bf7 l       .debug_str	00000000 
00035c57 l       .debug_str	00000000 
00035cb6 l       .debug_str	00000000 
00035d15 l       .debug_str	00000000 
00035d74 l       .debug_str	00000000 
00035dd4 l       .debug_str	00000000 
00035e33 l       .debug_str	00000000 
00035e92 l       .debug_str	00000000 
00035ef2 l       .debug_str	00000000 
00035f51 l       .debug_str	00000000 
00035fb7 l       .debug_str	00000000 
00035ff2 l       .debug_str	00000000 
0800866c l     F .text	00000012 _ZN36_$LT$T$u20$as$u20$core..any..Any$GT$7type_id17h60b349e3a3967a18E
0800a35a l     F .text	0000000c _ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h8430cdf27e8fe239E
0800907a l     F .text	0000000a _ZN4core3fmt10ArgumentV110show_usize17h0a1563fc3dacf510E
0800a0ea l     F .text	00000106 _ZN4core3fmt3num3imp7fmt_u3217hd5f71347e2daefbcE
0800a21c l     F .text	00000118 _ZN4core3fmt3num3imp7fmt_u6417hdb119abf1a24b3d2E
08009c42 l     F .text	00000170 _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hf6dcfdcd0c677f34E
08008f8e l     F .text	00000096 _ZN4core3fmt5Write10write_char17h46ea92a99ad03871E
08009024 l     F .text	00000024 _ZN4core3fmt5Write9write_fmt17h1dde8e33e3292656E
080094f2 l     F .text	00000032 _ZN4core3fmt9Formatter12pad_integral12write_prefix17h02b1b799aa412d57E
08008618 l     F .text	00000002 _ZN4core3ptr18real_drop_in_place17h012e98b5b5cd1768E
0800861a l     F .text	00000002 _ZN4core3ptr18real_drop_in_place17h02a68ac691a00745E
0800861c l     F .text	00000002 _ZN4core3ptr18real_drop_in_place17h605f2bc604187c4eE
08009a5e l     F .text	000000fc _ZN4core7unicode9bool_trie8BoolTrie6lookup17h04013171fa49f073E
08009b5a l     F .text	000000e8 _ZN4core7unicode9printable5check17h6013a5f54a0956d6E
0800904e l     F .text	00000006 _ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17hc1dd88ddb83e927aE
08009054 l     F .text	00000026 _ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_fmt17hbaabbcf1c32c6171E
08009048 l     F .text	00000006 _ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_str17hd3215ca6ed83c00eE
0800861e l     F .text	0000004e _ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17hbc81ca56d6e023e9E
08016cc0 l     O .text	00000016 str.h
08016d00 l     O .text	00000020 str.j
00000000 l    df *ABS*	00000000 semihosting_console.c
0800a368 l     F .text	00000024 __semihost
0800a38c l     F .text	00000010 debugger_connected
0800a39c l     F .text	0000002e semihost_write
0800a470 l     F .text	0000001c semihosting_console_write_ch
200003c8 l     O .bss	00000004 semihost_mbuf
20000210 l     O .data	00000001 log_enabled
00000000 l    df *ABS*	00000000 console.c
200003cc l     O .bss	00000010 avail_queue
200003dc l     O .bss	0000000c console_write_lock
00000000 l    df *ABS*	00000000 console_fmt.c
00000000 l    df *ABS*	00000000 ticks.c
200003e8 l     O .bss	00000001 do_ticks
00000000 l    df *ABS*	00000000 sensor_coap.c
0800a640 l     F .text	00000050 split_float
0800a690 l     F .text	00000010 handle_coap_response
0800a6ec l     F .text	00000078 json_encode_value_ext
0800a818 l     F .text	000000e4 prepare_coap_request
0800a9cc l     F .text	000000a8 dispatch_coap_request
200003ec l     O .bss	00000004 coap_json_mbuf
200003f0 l     O .bss	00000004 oc_c_message
200003f4 l     O .bss	0000006c oc_c_request
20000460 l     O .bss	00000004 oc_c_rsp
20000468 l     O .bss	00000008 oc_sem
20000470 l     O .bss	00000001 oc_sensor_coap_ready
00000000 l    df *ABS*	00000000 sensor_network.c
0800aca0 l     F .text	00000024 start_transport_callback
20000474 l     O .bss	00000020 callout.10401
20000494 l     O .bss	00000004 current_uri
20000498 l     O .bss	00000010 device_id
200004a8 l     O .bss	00000021 device_id_text
200004cc l     O .bss	0000000c hw_id
200004d8 l     O .bss	00000004 hw_id_len
200004dc l     O .bss	00000020 sensor_network_endpoints
200004fc l     O .bss	00000028 sensor_network_interfaces
20000528 l     O .bss	00000008 sensor_node_address
20000530 l     O .bss	00000037 sensor_node_names_buf
20000211 l     O .data	00000001 current_iface_type
20000214 l     O .data	00000014 sensor_node_names
08017ed8 l     O .text	0000000f COAP_HOST
08017ee8 l     O .text	00000036 COAP_URI
08017f20 l     O .text	0000000c COLLECTOR_NODE_HW_ID
08017f2c l     O .text	0000003c SENSOR_NODE_HW_IDS
08017f98 l     O .text	00000008 sensor_network_encoding
0801800c l     O .text	00000008 sensor_network_shortname
08018018 l     O .text	00000028 sensor_node_addresses
00000000 l    df *ABS*	00000000 oc_buffer.c
0800b0f8 l     F .text	00000030 oc_buffer_tx
0800b128 l     F .text	0000002c oc_buffer_rx
20000568 l     O .bss	00000018 oc_inq
20000580 l     O .bss	00000018 oc_outq
00000000 l    df *ABS*	00000000 oc_rep.c
20000598 l     O .bss	0000001c oc_rep_objects
200005b4 l     O .bss	00000030 oc_rep_objects_area
00000000 l    df *ABS*	00000000 oc_ri.c
0800b20c l     F .text	00000040 free_client_cb
0800b24c l     F .text	0000000a oc_ri_remove_cb
200005e4 l     O .bss	000000c8 oc_client_cb_area
200006ac l     O .bss	0000001c oc_client_cb_pool
200006c8 l     O .bss	00000004 oc_client_cbs
00000000 l    df *ABS*	00000000 coap.c
0800b350 l     F .text	00000012 coap_log_2
0800b362 l     F .text	00000016 coap_option_nibble
0800b378 l     F .text	0000008c coap_append_opt_hdr
0800b404 l     F .text	00000086 coap_append_array_opt
0800b48a l     F .text	0000009c coap_append_int_opt
200006cc l     O .bss	00000002 current_mid
00000000 l    df *ABS*	00000000 adaptor.c
200006d0 l     O .bss	00000004 oc_evq
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 random.c
00000000 l    df *ABS*	00000000 oc_helpers.c
00000000 l    df *ABS*	00000000 sysinit.c
0800ba76 l     F .text	00000006 sysinit_dflt_panic_cb
00000000 l    df *ABS*	00000000 low_power.c
00000000 l    df *ABS*	00000000 support.c
00000000 l    df *ABS*	00000000 json_encode.c
0800bbac l     F .text	00000200 json_encode_value
00000000 l    df *ABS*	00000000 stm32_hw_id.c
00000000 l    df *ABS*	00000000 sensor.c
0800be30 l     F .text	00000028 sensor_mgr_remove
0800be58 l     F .text	00000060 sensor_mgr_insert
0800beb8 l     F .text	0000000a sensor_type_traits_empty
0800bec4 l     F .text	0000000c sensor_mgr_evq_set
0800befe l     F .text	0000005c sensor_read_data_func
0800bf5a l     F .text	00000014 sensor_mgr_match_bydevname
0800bf70 l     F .text	00000050 sensor_base_ts_update_event
0800bfc0 l     F .text	00000050 sensor_up_timestamp
0800c048 l     F .text	000000a4 sensor_mgr_init
0800c3a0 l     F .text	0000007c sensor_mgr_wakeup_event
0800c166 l     F .text	00000014 sensor_update_poll_rate
0800c17a l     F .text	00000032 sensor_update_nextrun
0800c1ac l     F .text	0000001e sensor_calc_nextrun_delta
0800c1cc l     F .text	00000024 sensor_find_min_nextrun_sensor
0800c328 l     F .text	0000004a sensor_mgr_poll_bytype
0800c372 l     F .text	0000002e sensor_poll_per_type_trait
200006dc l     O .bss	00000078 sensor_notify_evt_area
20000754 l     O .bss	0000001c sensor_notify_evt_pool
00000000 l    df *ABS*	00000000 os_arch_arm.c
00000000 l    df *ABS*	00000000 os_fault.c
00000000 l    df *ABS*	00000000 os.c
0800c738 l     F .text	00000016 os_main
20000878 l     O .bss	00001000 g_os_main_stack
20000778 l     O .bss	00000100 g_idle_task_stack
00000000 l    df *ABS*	00000000 os_callout.c
00000000 l    df *ABS*	00000000 os_cputime.c
00000000 l    df *ABS*	00000000 os_dev.c
0800ca48 l     F .text	0000005c os_dev_add
0800caa4 l     F .text	00000026 os_dev_initialize
0800caca l     F .text	00000020 os_dev_init
20001878 l     O .bss	00000008 g_os_dev_list
00000000 l    df *ABS*	00000000 os_eventq.c
20001880 l     O .bss	00000010 os_eventq_main
00000000 l    df *ABS*	00000000 os_mbuf.c
00000000 l    df *ABS*	00000000 os_mempool.c
0800d19c l     F .text	00000078 os_mempool_init_internal
00000000 l    df *ABS*	00000000 os_msys.c
0800d2b0 l     F .text	00000010 os_msys_find_biggest_pool
0800d2c0 l     F .text	0000002c os_msys_find_pool
0800d338 l     F .text	00000044 os_msys_init_once
20001890 l     O .bss	00000db0 os_msys_1_data
20002640 l     O .bss	0000000c os_msys_1_mbuf_pool
2000264c l     O .bss	0000001c os_msys_1_mempool
2000022c l     O .data	00000008 g_msys_pool_list
00000000 l    df *ABS*	00000000 os_mutex.c
00000000 l    df *ABS*	00000000 os_sanity.c
0800d594 l     F .text	00000020 os_sanity_check_list_lock
0800d5b4 l     F .text	0000001c os_sanity_check_list_unlock
00000000 l    df *ABS*	00000000 os_sched.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
0800da28 l     F .text	00000018 _clear_stack
00000000 l    df *ABS*	00000000 os_time.c
0800db18 l     F .text	00000058 os_deltatime
0800db70 l     F .text	0000005c os_time_tick
20002670 l     O .bss	00000030 basetod
00000000 l    df *ABS*	00000000 HAL_CM4.o
0800dcbc l       .text	00000000 SVC_User
0800dcda l       .text	00000000 SVC_Done
00000000 l    df *ABS*	00000000 lrand48.c
00000000 l    df *ABS*	00000000 malloc.c
0800dd74 l     F .text	00000004 malloc_lock_nop
0800dd78 l     F .text	00000002 malloc_unlock_nop
0800dd7a l     F .text	00000048 __malloc_from_block
0800ddc4 l     F .text	00000068 __free_block
20000244 l     O .data	00000018 __malloc_head
2000025c l     O .data	00000004 malloc_lock
20000260 l     O .data	00000004 malloc_unlock
00000000 l    df *ABS*	00000000 memcmp.c
0800df2c l       .text	00000000 test1
0800df20 l       .text	00000000 loop1
0800df32 l       .text	00000000 res1
0800df4e l       .text	00000000 test2
0800df56 l       .text	00000000 done
0800df42 l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memcpy.c
0800df62 l       .text	00000000 test1
0800df5e l       .text	00000000 loop1
0800df70 l       .text	00000000 test2
0800df6c l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 tinyprintf.c
0800e01e l     F .text	000000c0 ui2a
0800e0de l     F .text	00000020 i2a
0800e0fe l     F .text	00000030 a2d
0800e12e l     F .text	00000036 a2i
0800e164 l     F .text	0000002a putf
0800e190 l     F .text	0000011c putchw
0800e2ac l     F .text	00000064 intarg
00000000 l    df *ABS*	00000000 vprintf.c
00000000 l    df *ABS*	00000000 jrand48.c
00000000 l    df *ABS*	00000000 memfile.c
00000000 l    df *ABS*	00000000 mynewt.c
0800e688 l     F .text	00000004 stdin_read
0800e68c l     F .text	00000010 stdout_write
20000264 l     O .data	00000004 _stdin
20000268 l     O .data	00000008 _stdin_methods
00000000 l    df *ABS*	00000000 driver.cpp
0800e69c l     F .text	00000010 _ZL13nibble_to_hexh
0800e6ac l     F .text	00000024 _ZL11get_commandP8gps_l70r9CommandId
0800e6d0 l     F .text	00000048 _ZL16compute_checksumPKh
0800e718 l     F .text	00000020 _ZL14gps_l70r_closeP6os_dev
0800e738 l     F .text	00000010 _ZL8rx_eventPv
0800e748 l     F .text	0000002c _ZL13internal_initPcmS_mS_mb
0800e774 l     F .text	00000010 _ZL18internal_configurei
0800e784 l     F .text	00000014 _ZL15internal_attachPFvPvES_
0800e798 l     F .text	00000078 _ZL13gps_l70r_openP6os_devmPv
0800e810 l     F .text	00000054 _ZL11rx_callbackP8os_event
0800e864 l     F .text	000000b0 _ZL16send_raw_commandP8gps_l70rPKc
0800e914 l     F .text	00000020 _ZL12send_commandP8gps_l70r9CommandId
0800e934 l     F .text	00000020 _Z41__static_initialization_and_destruction_0ii
0800ea88 l     F .text	0000000e _GLOBAL__sub_I_gps_parser
200026a0 l     O .bss	00000020 _ZL10rx_callout
200026c0 l     O .bss	00000100 _ZL18gps_l70r_rx_buffer
200027c0 l     O .bss	00000190 _ZL18gps_l70r_tx_buffer
20002950 l     O .bss	00000100 _ZL22gps_l70r_parser_buffer
20002a50 l     O .bss	0000004c _ZL6serial
20002a9c l     O .bss	00000004 _ZZL11rx_callbackP8os_eventE7lastSat
20002aa0 l     O .bss	00000003 _ZZL16compute_checksumPKhE12checksum_str
20002aa4 l     O .bss	00000040 _ZZL16send_raw_commandP8gps_l70rPKcE7raw_buf
20000270 l     O .data	00000001 _ZL10first_open
080182b8 l     O .text	0000000c _ZL8COMMANDS
00000000 l    df *ABS*	00000000 sensor.cpp
0800ea96 l     F .text	0000001c _ZL26gps_l70r_sensor_get_configP6sensor13sensor_type_tP10sensor_cfg
0800eab4 l     F .text	000000b0 _ZL20gps_l70r_sensor_readP6sensor13sensor_type_tPFiS0_PvS2_S1_ES2_m
080182ec l     O .text	00000028 _ZL24g_gps_l70r_sensor_driver
00000000 l    df *ABS*	00000000 hmac_prng.c
20002bbc l     O .bss	0000000c hw_id
20002bc8 l     O .bss	00000004 hw_id_len
20002bd0 l     O .bss	00000138 prng
20002d08 l     O .bss	00000020 seed
00000000 l    df *ABS*	00000000 json_helper.c
00000000 l    df *ABS*	00000000 mynewt_rust.c
00000000 l    df *ABS*	00000000 sensor_helper.c
00000000 l    df *ABS*	00000000 temp_stm32.c
0800eec6 l     F .text	0000001c temp_stm32_sensor_get_config
0800eee2 l     F .text	0000001e temp_stm32_close
0800ef00 l     F .text	000000a8 temp_stm32_open
0800f118 l     F .text	00000082 temp_stm32_sensor_read
20000274 l     O .data	00000018 temp_channel_config
0801835c l     O .text	00000028 g_temp_stm32_sensor_driver
00000000 l    df *ABS*	00000000 tiny_gps_plus.cpp
00000000 l    df *ABS*	00000000 mem.c
00000000 l    df *ABS*	00000000 stm32l4_my_sensor-sysinit-app.c
00000000 l    df *ABS*	00000000 hmac_prng.c
0800f8e6 l     F .text	000000cc update
00000000 l    df *ABS*	00000000 utils.c
00000000 l    df *ABS*	00000000 hmac.c
0800faf0 l     F .text	00000038 rekey
00000000 l    df *ABS*	00000000 sha256.c
0800fc34 l     F .text	000001b0 compress
080183d4 l     O .text	00000100 k256
00000000 l    df *ABS*	00000000 hal_bsp.c
20002d28 l     O .bss	0000003c hal_uart0
20002d64 l     O .bss	0000003c hal_uart2
080184e4 l     O .text	00000014 uart0_cfg
080184f8 l     O .text	00000014 uart2_cfg
00000000 l    df *ABS*	00000000 adc.c
00000000 l    df *ABS*	00000000 uart_hal.c
0801002c l     F .text	0000001a uart_hal_blocking_tx
08010046 l     F .text	0000001a uart_hal_start_rx
08010060 l     F .text	0000001a uart_hal_start_tx
0801007a l     F .text	00000030 uart_hal_resume
080100aa l     F .text	0000002e uart_hal_suspend
080100d8 l     F .text	00000016 uart_hal_close
080100ee l     F .text	00000082 uart_hal_open
00000000 l    df *ABS*	00000000 hal_flash.c
080101d8 l     F .text	00000012 stm32_flash_sector_info
080101ea l     F .text	0000000a stm32_flash_init
080101f4 l     F .text	00000008 stm32_flash_erase_sector
080101fc l     F .text	0000000e stm32_flash_read
0801020a l     F .text	00000082 stm32_flash_write_linear
0801028c l     F .text	00000010 stm32_flash_write
00000000 l    df *ABS*	00000000 hal_gpio.c
0801029c l     F .text	000000d8 hal_gpio_clk_enable
08018540 l     O .text	00000020 portmap
00000000 l    df *ABS*	00000000 hal_os_tick.c
00000000 l    df *ABS*	00000000 hal_system.c
00000000 l    df *ABS*	00000000 hal_timer.c
08010558 l     F .text	00000050 stm32_tmr_reg_irq
080105a8 l     F .text	0000002e hal_timer_cnt
080105d8 l     F .text	00000168 stm32_hw_setup
080107d0 l     F .text	00000010 stm32_tmr0_irq
08010740 l     F .text	0000005a stm32_tmr_cbs
0801079a l     F .text	00000036 stm32_tmr_irq
08018560 l     O .text	0000000c stm32_tmr_devs
00000000 l    df *ABS*	00000000 hal_uart.c
080109fc l     F .text	000000a8 uart_irq_handler
08010aa4 l     F .text	0000000a uart_irq1
08010aae l     F .text	0000000a uart_irq2
08010ab8 l     F .text	0000000a uart_irq3
08010ac2 l     F .text	0000000a uart_irq4
08010acc l     F .text	0000000a uart_irq5
08010ad8 l     F .text	000000a0 hal_uart_set_nvic
20002da0 l     O .bss	00000028 uart_irqs
20002dc8 l     O .bss	00000054 uarts
00000000 l    df *ABS*	00000000 hal_watchdog.c
00000000 l    df *ABS*	00000000 sbrk.c
2000028c l     O .data	00000004 brk.5378
00000000 l    df *ABS*	00000000 stm32l4xx_hal_flash.c
08010f54 l     F .text	00000020 FLASH_Program_DoubleWord
08010f74 l     F .text	00000034 FLASH_Program_Fast
00000000 l    df *ABS*	00000000 stm32l4xx_hal_flash_ex.c
08011114 l     F .text	00000030 FLASH_MassErase
00000000 l    df *ABS*	00000000 stm32l4xx_hal_gpio.c
00000000 l    df *ABS*	00000000 stm32l4xx_hal_iwdg.c
00000000 l    df *ABS*	00000000 stm32l4xx_hal_rcc.c
00000000 l    df *ABS*	00000000 stm32l4xx_hal_tim.c
00000000 l    df *ABS*	00000000 hal_flash.c
00000000 l    df *ABS*	00000000 hal_timer_freq.c
00000000 l    df *ABS*	00000000 stm32l4xx_hal_dma.c
08011890 l     F .text	00000030 DMA_SetConfig
00000000 l    df *ABS*	00000000 sensor_creator.c
00000000 l    df *ABS*	00000000 atol.c
00000000 l    df *ABS*	00000000 strcat.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strntoumax.c
00000000 l    df *ABS*	00000000 creator.c
20002e1c l     O .bss	00000072 __compound_literal.0
20002e90 l     O .bss	00000048 stm32l4_adc1_dev
200002b0 l     O .data	00000018 adc1_config
200002c8 l     O .data	00000064 adc1_handle
00000000 l    df *ABS*	00000000 adc_stm32l4.c
08011da0 l     F .text	00000008 stm32l4_adc_size_buffer
08011da8 l     F .text	00000024 stm32l4_resolve_dma_handle_idx
08011dcc l     F .text	0000001e stm32l4_adc_read_buffer
08011dea l     F .text	00000020 stm32l4_adc_set_buffer
08011e0c l     F .text	000000d0 stm32l4_resolve_adc_gpio
08011edc l     F .text	00000068 stm32l4_adc_clk_disable
08011f44 l     F .text	00000070 stm32l4_resolve_adc_dma_irq
08011fb4 l     F .text	00000084 stm32l4_adc_clk_enable
08012038 l     F .text	00000010 dma2_stream7_irq_handler
08012048 l     F .text	00000010 dma2_stream6_irq_handler
08012058 l     F .text	00000010 dma2_stream5_irq_handler
08012068 l     F .text	00000010 dma2_stream4_irq_handler
08012078 l     F .text	00000010 dma2_stream3_irq_handler
08012088 l     F .text	00000010 dma2_stream2_irq_handler
08012098 l     F .text	00000010 dma2_stream1_irq_handler
080120a8 l     F .text	00000034 stm32l4_adc_sample
080120dc l     F .text	0000001c stm32l4_adc_release_buffer
080120f8 l     F .text	00000062 stm32l4_adc_read_channel
0801215a l     F .text	0000008a stm32l4_adc_configure_channel
080121e4 l     F .text	00000098 stm32l4_adc_uninit
0801227c l     F .text	0000001c stm32l4_adc_close
08012324 l     F .text	000000b8 stm32l4_adc_dma_init
080123dc l     F .text	00000030 stm32l4_adc_init
0801240c l     F .text	00000064 stm32l4_adc_open
20002ed8 l     O .bss	00000014 adc_dma
20002eec l     O .bss	00000014 dma_handle
20002f00 l     O .bss	00000010 stm32l4_adc_stats
08018580 l     O .text	0000001c stm32l4_adc_funcs
00000000 l    df *ABS*	00000000 creator.cpp
08012580 l     F .text	00000050 _ZL13config_devicev
20002f10 l     O .bss	00000038 _ZL5bc95g
2000032c l     O .data	00000014 _ZL16uart_0_itf_bc95g
00000000 l    df *ABS*	00000000 driver.cpp
08012630 l     F .text	0000000c _ZL16internal_timeoutm
0801263c l     F .text	00000004 _ZL3cfgP5bc95g
08012640 l     F .text	00000002 _ZL11bc95g_eventPv
08012642 l     F .text	00000010 _ZL13nibble_to_hexh
08012654 l     F .text	00000024 _ZL11get_commandP5bc95g9CommandId
08012678 l     F .text	0000001c _ZL18register_transportPKcPvS0_th
08012694 l     F .text	00000024 _ZL11bc95g_closeP6os_dev
080126b8 l     F .text	0000005c _ZL13internal_initPcmS_mS_mb
08012714 l     F .text	00000010 _ZL18internal_configurei
08012724 l     F .text	00000014 _ZL15internal_attachPFvPvES_
08012738 l     F .text	0000007c _ZL10bc95g_openP6os_devmPv
080127b4 l     F .text	00000014 _ZL9expect_okP5bc95g
080127c8 l     F .text	00000012 _ZL5sleept
080127dc l     F .text	00000090 _ZL11wait_for_okP5bc95g
0801286c l     F .text	00000020 _ZL8send_atpP5bc95g
0801288c l     F .text	00000038 _ZL12send_commandP5bc95g9CommandId
080128c4 l     F .text	00000038 _ZL16send_command_intP5bc95g9CommandIdi
080128fc l     F .text	00000078 _ZL19prepare_to_transmitP5bc95g
08012974 l     F .text	0000009c _ZL10send_queryP5bc95g9CommandIdPiS2_
08012a10 l     F .text	00000052 _ZL15wait_for_attachP5bc95g
08012a64 l     F .text	00000064 _ZL14send_query_intP5bc95g9CommandIdPi
08012ac8 l     F .text	00000062 _ZL21wait_for_registrationP5bc95g
08012b2a l     F .text	0000005e _ZL17attach_to_networkP5bc95g
08012b88 l     F .text	0000005c _ZL8send_hexP5bc95gPKht
08012be4 l     F .text	000000b0 _ZL9send_dataP5bc95gPKhtP7os_mbuf
08012c94 l     F .text	000000c4 _ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf
20002f48 l     O .bss	00000100 _ZL15bc95g_rx_buffer
20003048 l     O .bss	00000384 _ZL15bc95g_tx_buffer
200033cc l     O .bss	00000100 _ZL19bc95g_parser_buffer
200034cc l     O .bss	0000003c _ZL6parser
20003508 l     O .bss	0000004c _ZL6serial
20003554 l     O .bss	00000004 _ZL7packets
20000340 l     O .data	00000001 _ZL10first_open
080185e0 l     O .text	00000014 _ZL13network_iface
0801863c l     O .text	00000004 _ZL3ATP
08018640 l     O .text	00000044 _ZL8COMMANDS
00000000 l    df *ABS*	00000000 transport.cpp
08012ed6 l     F .text	00000004 _ZL10oc_ep_sizePK11oc_endpoint
08012eda l     F .text	00000004 _ZL14oc_ep_has_connPK11oc_endpoint
08012ede l     F .text	00000004 _ZL7oc_initv
08012ee2 l     F .text	00000002 _ZL11oc_shutdownv
08012ee4 l     F .text	00000028 _ZL9oc_ep_strPciPK11oc_endpoint
08012f0c l     F .text	000001b8 _ZL11oc_tx_ucastP7os_mbuf
20003558 l     O .bss	00000004 _ZL14network_device
2000355c l     O .bss	00000004 _ZL6server
20003560 l     O .bss	00000001 _ZZL11oc_tx_ucastP7os_mbufE8sequence
20000341 l     O .data	00000001 _ZL12transport_id
0801877c l     O .text	00000024 _ZL9transport
00000000 l    df *ABS*	00000000 util.c
00000000 l    df *ABS*	00000000 at_parser.cpp
00000000 l    df *ABS*	00000000 buffered_serial.cpp
08013564 l     F .text	00000002 _ZL12uart_tx_donePv
08013694 l     F .text	00000016 _ZL12uart_rx_charPvh
080136e6 l     F .text	00000016 _ZL12uart_tx_charPv
00000000 l    df *ABS*	00000000 ring_buffer.cpp
00000000 l    df *ABS*	00000000 creator.cpp
080137d0 l     F .text	00000050 _ZL13config_devicev
20003568 l     O .bss	000000c8 _ZL8gps_l70r
20000348 l     O .data	00000014 _ZL19uart_0_itf_gps_l70r
00000000 l    df *ABS*	00000000 creator.c
08013880 l     F .text	00000050 config_device
20003630 l     O .bss	00000014 adc_1_itf_temp_stm32
20003648 l     O .bss	000000d0 temp_stm32_dev
00000000 l    df *ABS*	00000000 ble_adaptor.c
00000000 l    df *ABS*	00000000 ip4_adaptor.c
00000000 l    df *ABS*	00000000 ip_adaptor.c
00000000 l    df *ABS*	00000000 lora_adaptor.c
00000000 l    df *ABS*	00000000 serial_adaptor.c
00000000 l    df *ABS*	00000000 flash_map.c
08013936 l     F .text	00000078 flash_map_read_mfg
20003718 l     O .bss	00000078 mfg_areas.8550
00000000 l    df *ABS*	00000000 modlog.c
00000000 l    df *ABS*	00000000 mfg.c
08013a8c l     F .text	00000094 mfg_seek_next_aux
08013b20 l     F .text	00000070 mfg_read_mmr
08013b90 l     F .text	00000054 mfg_read_next_mmr
08013be4 l     F .text	0000003c mfg_open_flash_area
08013c20 l     F .text	00000044 mfg_read_tlv_body
08013cec l     F .text	0000004e mfg_read_mmr_refs
20003790 l     O .bss	00000001 mfg_initialized
20003794 l     O .bss	00000018 mfg_mmrs
200037ac l     O .bss	00000004 mfg_num_mmrs
00000000 l    df *ABS*	00000000 vsscanf.c
00000000 l    df *ABS*	00000000 hal_flash.c
080142b0 l     F .text	0000001e hal_flash_check_addr
00000000 l    df *ABS*	00000000 stm32l4xx_hal_adc.c
00000000 l    df *ABS*	00000000 stm32l4xx_hal_adc_ex.c
00000000 l    df *ABS*	00000000 sscanf.c
00000000 l    df *ABS*	00000000 vsprintf.c
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_truncdfsf2.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 aeabi_memcpy.c
00000000 l    df *ABS*	00000000 util.c
00000000 l    df *ABS*	00000000 stm32l4_my_sensor-sysflash.c
00000000 l    df *ABS*	00000000 SVC_Table.S
00000000 l       .svc_table	00000000 SVC_End
00000000 l    df *ABS*	00000000 srand48.c
0800ba30 g     F .text	0000000a oc_random_rand
0800420c  w    F .text	00000002 RTC_Alarm_IRQHandler
0800a41c g     F .text	00000054 console_buffer
0800420c  w    F .text	00000002 EXTI2_IRQHandler
0801434a  w    F .text	00000002 HAL_ADC_MspInit
08004ba0 g     F .text	00000028 _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hff4283aff90054cfE
0800420c  w    F .text	00000002 TIM8_TRG_COM_IRQHandler
08015cb0 g     O .text	00000008 APBPrescTable
08006b1a g     F .text	00000018 _ZN4core3ptr5write17h4a809fc726334fe9E
0800c540 g     F .text	00000034 os_arch_start
0800420c  w    F .text	00000002 TIM8_CC_IRQHandler
200039c0 g       .bss	00000000 __HeapBase
2000397c g     O .bss	00000008 g_os_task_list
0800c6b8 g     F .text	00000080 os_idle_task
08011c2c g     F .text	00000010 strcpy
08014678 g     F .text	0000000a ADC_DMAHalfConvCplt
08008f36 g     F .text	00000058 _ZN4core3fmt8builders10DebugTuple6finish17h7478dcd5620691a7E
08004cf6 g     F .text	00000032 _ZN4core3fmt10ArgumentV13new17hd9b543e4f4267a1eE
080114b4 g     F .text	00000120 HAL_GPIO_DeInit
2000398c g     O .bss	00000006 __rand48_seed
00000000 g       .svc_table	00000000 SVC_Count
0800e670 g     F .text	00000018 fmemopen_w
0800f4b4 g     F .text	00000016 _ZN14TinyGPSInteger6commitEv
08004c60 g     F .text	00000032 _ZN4core3fmt10ArgumentV13new17ha4bd00c3a822e50cE
0800420c  w    F .text	00000002 DebugMon_Handler
20003960 g     O .bss	00000008 g_os_mempool_list
0800c8d0 g     F .text	0000001a os_callout_init
0800c8ec g     F .text	0000003c os_callout_stop
08004ada g     F .text	00000020 _ZN6mynewt4libs14sensor_network14do_server_post17h6c90b73e883479caE
0800de2c g     F .text	00000050 add_malloc_block
08009818 g     F .text	00000026 _ZN4core3fmt9Formatter11debug_tuple17hb44f73c94ff26e9bE
080051f0 g     F .text	000000a8 _ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hc10bf46bde31ca95E
08012dc8 g     F .text	0000001c bc95g_connect
0800cc1e g     F .text	00000068 os_eventq_put
0800b960 g     F .text	00000038 oc_transport_register
0800f474 g     F .text	0000000e _ZN11TinyGPSTime7setTimeEPKc
0800fde4 g     F .text	0000005c tc_sha256_init
080118c0 g     F .text	000000f8 HAL_DMA_Init
20000188 g       .data	00000000 __data_start__
0800ed4c g     F .text	0000001c json_helper_close_array
0801548c g     F .text	0000005a .hidden __floatdidf
20002ae4 g     O .bss	000000d8 gps_parser
0800e574 g     F .text	00000024 printf
0800c2c0 g     F .text	00000068 sensor_read
0801827c g     O .text	00000004 stdout
0801515e g     F .text	00000010 vsprintf
08009e10 g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u8$GT$3fmt17hb0ae5251a2953077E
0800f392 g     F .text	00000010 _ZN15TinyGPSLocation11setLatitudeEPKc
0801165c g     F .text	00000024 HAL_RCC_GetPCLK1Freq
08010400 g     F .text	0000002c hal_gpio_write
0800420c  w    F .text	00000002 TIM1_CC_IRQHandler
08011680 g     F .text	00000024 HAL_RCC_GetPCLK2Freq
08018524 g     O .text	0000001c stm32_flash_funcs
0800420c  w    F .text	00000002 TSC_IRQHandler
0800460e g     F .text	0000021e _ZN6mynewt4Strn3len17h86b1e18ee358b80eE
0800a6a0 g     F .text	0000004c json_write_mbuf
0800c4b0 g     F .text	0000008c os_arch_os_init
0800420c  w    F .text	00000002 HardFault_Handler
08006ad4 g     F .text	00000004 _ZN4core3ptr4null17h94d8d37c80f6893dE
080107e0 g     F .text	00000134 hal_timer_init
08013c76 g     F .text	0000001a mfg_seek_next_with_type
0800c574 g     F .text	0000005c os_arch_os_start
08012e1e g     F .text	0000004c bc95g_socket_open
080130c4 g     F .text	00000024 init_bc95g_endpoint
0800ba3a g     F .text	0000002c oc_new_string
0800ba98 g     F .text	00000014 __wrap_coap_receive
080053b2 g     F .text	00000020 _ZN6mynewt6kernel2os10eventq_run17h6ef32da48f4d5d86E
0800e954 g     F .text	0000003c gps_l70r_init
0800dd26 g     F .text	0000000c SysTick_Handler
20000188 g       .coredata	00000000 __coredata_end__
080115e2 g     F .text	0000000a HAL_GPIO_WritePin
0800ba04 g     F .text	00000024 oc_init
080053ee g     F .text	0000002a _ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2eq17h2fc938e4934bc64eE
080090a6 g     F .text	00000204 _ZN4core3fmt5write17hfeb861b024853061E
0800c128 g     F .text	00000014 sensor_mgr_find_next_bydevname
0800d278 g     F .text	00000026 os_memblock_put
0800d38c g     F .text	00000028 os_msys_get_pkthdr
200039b4 g     O .bss	00000004 flash_map
0800420c  w    F .text	00000002 TAMP_STAMP_IRQHandler
0800f448 g     F .text	00000016 _ZN11TinyGPSDate6commitEv
080103dc g     F .text	00000024 hal_gpio_init_af
080188c8 g       *ABS*	00000000 _sidata
08011650 g     F .text	0000000c HAL_RCC_GetHCLKFreq
08006d16 g     F .text	00000022 _ZN4core3ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hf0106c7b78f17716E
0800dce0 g     F .text	00000046 PendSV_Handler
0800420c  w    F .text	00000002 NMI_Handler
08004c92 g     F .text	00000032 _ZN4core3fmt10ArgumentV13new17hbec50b814a491c08E
080188c8 g       .ARM.exidx	00000000 __exidx_end
08006066 g     F .text	00000020 _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h094b73547dab2142E
08004020 g       .text	00000000 __isr_vector_start
080125d0 g     F .text	00000060 bc95g_create
0800420c  w    F .text	00000002 EXTI3_IRQHandler
0800e640 g     F .text	0000002e memfile_write
0800c428 g     F .text	00000014 os_arch_ctx_sw
08004ab0 g     F .text	0000002a _ZN6mynewt4libs14sensor_network12prepare_post17he077c30fc9d88d28E
08013608 g     F .text	0000004c _ZN14BufferedSerial5fgetcEi
08010170 g     F .text	00000068 uart_hal_init
08010524 g     F .text	0000002c hal_system_reset
0800c75c g     F .text	00000070 os_init_idle_task
08013284 g     F .text	00000030 _ZN8ATParser7vprintfEPKcSt9__va_list
20000244 g       .data	00000000 __aeabi_unwind_cpp_pr0
0800d710 g     F .text	0000000c os_sched_set_current_task
08011c06 g     F .text	00000010 atol
080188c8 g       .ARM.exidx	00000000 __etext
0800739c g     F .text	00000030 _ZN75_$LT$str$u20$as$u20$mynewt..encoding..coap_context..ToBytesOptionalNull$GT$21to_bytes_optional_nul17hb05d971bf5bb80b5E
080115ec g     F .text	00000058 HAL_IWDG_Init
20000368 g       .corebss	00000000 __corebss_start__
0800420c  w    F .text	00000002 LPTIM2_IRQHandler
0800eb64 g     F .text	00000068 gps_l70r_sensor_init
0800d3fc g     F .text	000000b8 os_mutex_release
0800420c  w    F .text	00000002 DFSDM1_FLT1_IRQHandler
08004a74 g     F .text	0000003c _ZN6mynewt4libs14sensor_network16init_server_post17hbeda0b43632f58fbE
080089ea g     F .text	00000314 _ZN4core3str16slice_error_fail17h1c355556f2a38f35E
0800d5e0 g     F .text	00000024 os_sanity_check_register
08007434 g     F .text	00000078 _ZN78_$LT$mynewt..encoding..coap_context..CoapError$u20$as$u20$core..fmt..Debug$GT$3fmt17h06dcdae20cda8b1dE
080068c0 g     F .text	0000000e _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17he9bf930fef93cf18E
0800dc18 g     F .text	00000026 os_time_delay
080117ca g     F .text	00000048 stm32_mcu_flash_erase_sector
200037b8 g     O .bss	0000004c coap_json_encoder
0800e9b2 g     F .text	00000038 gps_l70r_config
20000368 g       .bss	00000000 _sbss
080077d0 g     F .text	0000003a .hidden _ZN4core3num23_$LT$impl$u20$usize$GT$14saturating_mul17h8e2aeaa79033e96cE
08013c90 g     F .text	0000000a mfg_read_tlv_flash_area
0800a634 g     F .text	0000000c console_get_ticks
080086c8 g     F .text	00000040 _ZN4core9panicking18panic_bounds_check17h794d18f1ca9e50a8E
08009e6e g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u32$GT$3fmt17h748e245dbb816a9eE
0800ee82 g     F .text	00000044 get_geolocation_data
08006ba0 g     F .text	0000009a _ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h0f755ebc716ea79fE
0800420c  w    F .text	00000002 I2C3_ER_IRQHandler
0800aab4 g     F .text	0000009c json_encode_object_entry_ext
08006086 g     F .text	00000028 _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h2263e92fd7e9e0c7E
0800420c  w    F .text	00000002 DFSDM1_FLT2_IRQHandler
0800d098 g     F .text	000000be os_mbuf_prepend
08013d3c g     F .text	00000572 vsscanf
08011c04 g     F .text	00000002 sensor_dev_create
08004590 g     F .text	00000030 _ZN6mynewt4Strn9from_cstr17h9a7495b7f5601cb6E
08011a80 g     F .text	00000076 HAL_DMA_Start_IT
0800849a g     F .text	0000000e _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h551cb65250c7c91bE
0800d2a0 g     F .text	00000010 os_mempool_module_init
0800edd0 g     F .text	00000030 json_helper_set_float
0800c44e g     F .text	0000000a os_arch_in_critical
0800ae48 g     F .text	00000070 get_hardware_id
08004dd8 g     F .text	00000046 _ZN101_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h27eb5c40c78bb5e7E
080112e0 g     F .text	000001d4 HAL_GPIO_Init
080070a4 g     F .text	000000ea _ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17h8c654d4708d2c2d0E
0800753c g     F .text	00000064 _ZN99_$LT$mynewt..hw..sensor_mgr..SensorsByDevname$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdf9b4b1bcd01faa9E
0800f1c2 g     F .text	000000a6 _ZN11TinyGPSPlusC1Ev
08011644 g     F .text	0000000c HAL_IWDG_Refresh
0800f1c2 g     F .text	000000a6 _ZN11TinyGPSPlusC2Ev
0800c41c g     F .text	0000000a timer_handler
080137b0  w    F .text	00000012 _ZN10RingBufferIcE5clearEv
0800cb58 g     F .text	00000020 os_dev_lookup
08009f44 g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$usize$GT$3fmt17he3ba660dd7ebe35fE
0800d71c g     F .text	00000090 os_sched_sleep
0800aa98 g     F .text	0000001c json_rep_end_root_object
080074ac g     F .text	00000054 .hidden _ZN47_$LT$u32$u20$as$u20$core..iter..range..Step$GT$9add_usize17he588ae2aecfa2f7eE
0800a574 g     F .text	00000004 semihosting_console_init
08015024 g     F .text	00000082 HAL_ADC_Stop_DMA
0800a8fc g     F .text	00000080 prepare_sensor_post
0800df5c g     F .text	0000001a memcpy
08014564 g     F .text	0000010c HAL_ADC_PollForConversion
08009808 g     F .text	00000008 _ZN4core3fmt9Formatter15debug_lower_hex17h28b672d23c16e15aE
08010eac g     F .text	00000038 hal_watchdog_init
08006dfc g     F .text	0000002c _ZN4core10intrinsics19copy_nonoverlapping17h85f5927901ef278dE
0800ec04 g     F .text	00000104 hmac_prng_init
08015414 g     F .text	00000022 .hidden __floatsidf
2000035c g     O .data	00000004 _gps
20003808 g     O .bss	00000010 coap_json_value
0800868e g     F .text	0000003a _ZN4core9panicking5panic17h138a849f37d3ac2dE
0800ca30 g     F .text	0000000c os_cputime_init
0800420c  w    F .text	00000002 EXTI0_IRQHandler
0800bdf4 g     F .text	0000001c json_encode_array_finish
0800420c  w    F .text	00000002 I2C2_EV_IRQHandler
080089a6 g     F .text	00000044 _ZN4core5slice22slice_index_order_fail17h7c776986fd4b085eE
080159ac g     F .text	00000000 .hidden __aeabi_uldivmod
08004fc0 g     F .text	00000028 _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3eec109f7132f81eE
00000020 g       *ABS*	00000000 _imghdr_size
08006d04 g     F .text	00000012 _ZN4core3mem8align_of17h7ba3878fe1d1633bE
0800d6d4 g     F .text	00000030 os_sched_ctx_sw_hook
0800420c  w    F .text	00000002 CAN1_RX0_IRQHandler
200037b0 g     O .bss	00000004 console_is_midline
0800ce48 g     F .text	00000014 os_mbuf_free
0800420c  w    F .text	00000002 FPU_IRQHandler
20000188 g     O .data	00000004 SystemCoreClock
0800845a g     F .text	0000001a .hidden _ZN4core3num18ptr_try_from_impls69_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u32$GT$8try_from17h3aea8e0368154f7bE
20003840 g     O .bss	00000034 sensor_mgr
08013930 g     F .text	00000002 oc_register_ip6
0800420c  w    F .text	00000002 TIM1_UP_TIM16_IRQHandler
0800c458 g     F .text	00000040 os_arch_task_stack_init
08005992 g     F .text	00000014 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h9420d1a1dab260e8E
0800de7c g     F .text	0000006c malloc
0800ba28 g     F .text	00000008 oc_clock_time
0800b8ee g     F .text	00000024 coap_set_header_uri_path
080139f0 g     F .text	00000026 flash_area_read
0800b938 g     F .text	0000000e coap_set_header_observe
080053aa g     F .text	00000004 _ZN4core3ptr8null_mut17h57061ec19ef29f26E
0800c5d4 g     F .text	0000004c __assert_func
08005076 g     F .text	00000006 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h7fa4a63a8b7dfa6dE
08014e44 g     F .text	00000108 HAL_ADC_Start_DMA
0800d860 g     F .text	00000040 os_sched_wakeup_ticks
0800a5a0 g     F .text	0000004c console_pkg_init
0800420c  w    F .text	00000002 UsageFault_Handler
08006de8 g     F .text	00000014 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hdef04f6d8168bdb2E
08004bfc g     F .text	00000032 _ZN4core3fmt10ArgumentV13new17h4625d42fff5bfd34E
0800e598 g     F .text	0000003a vsnprintf
0800559a g     F .text	00000018 _ZN78_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$i32$GT$$GT$4from17h0c00a0d5ca46366cE
0800ed84 g     F .text	0000001c json_helper_object_array_end_item
0800aed4 g     F .text	0000001a is_standalone_node
08005db6 g     F .text	000001be .hidden _ZN3app10gps_sensor18start_gps_listener17hff4f7c9c3618b255E
20003958 g     O .bss	00000008 g_callout_list
0800b194 g     F .text	00000028 oc_send_message
08015cac g     F .text	00000004 __aeabi_memcpy
0800420c  w    F .text	00000002 ADC1_2_IRQHandler
0800b8e0 g     F .text	0000000e coap_set_header_accept
08005122 g     F .text	00000026 _ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h266ad2132c426b62E
080137ac g     F .text	00000004 _ZN14BufferedSerial4baudEm
0800e310 g     F .text	0000025c tfp_format
0800b538 g     F .text	0000001a coap_init_message
20018000 g       .bss	00000000 __HeapLimit
08004988 g     F .text	00000036 _ZN6mynewt3sys7console5print17ha0601e49e4927bc4E
20000368 g       .bss	00000000 __bss_start__
08010514 g     F .text	00000010 hal_debugger_connected
080115d4 g     F .text	0000000e HAL_GPIO_ReadPin
08012e6a g     F .text	0000004e bc95g_socket_close
080153f4 g     F .text	0000001e .hidden __aeabi_ui2d
08011814 g     F .text	0000007c stm32_hal_timer_get_freq
08005b9e g     F .text	00000032 _ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17h67eed304dd30c897E
20000188 g       .data	00000000 _sdata
0800420c  w    F .text	00000002 SPI1_IRQHandler
080111e4 g     F .text	000000fc HAL_FLASHEx_Erase
080159dc g     F .text	000002cc .hidden __udivmoddi4
08015170 g     F .text	00000000 .hidden __aeabi_drsub
080131c0 g     F .text	00000014 _okfailed
08007fbc g     F .text	00000212 _ZN6mynewt2hw6sensor19new_sensor_listener17h2b99bb3fa912f4a2E
0800ad80 g     F .text	0000000c init_server_post
08014724 g     F .text	00000498 HAL_ADC_ConfigChannel
20000344 g     O .data	00000004 _nbt
08005c60 g     F .text	00000072 .hidden _ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17hd18febbae977edc8E
0800af64 g     F .text	000000c0 sensor_network_init
0800420c  w    F .text	00000002 TIM6_DAC_IRQHandler
0800a97c g     F .text	00000050 json_rep_finalize
08006c70 g     F .text	00000028 .hidden _ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$2lt17h390f3c86002de84aE
08005bd0 g     F .text	00000038 _ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17h85c309d56cc666c6E
08004ece g     F .text	00000016 _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hfc81ae825f5ef360E
0800554a g     F .text	0000003c .hidden _ZN4core3str21_$LT$impl$u20$str$GT$3len17hdfc178dac951c508E
20003974 g     O .bss	00000004 g_current_task
0800d604 g     F .text	0000006c os_sanity_run
0800b948 g     F .text	0000000c oc_evq_get
0800c43c g     F .text	0000000c os_arch_save_sr
08010e78 g     F .text	00000034 hal_uart_close
080060c8 g     F .text	0000000e _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h5477961aa483feaaE
0800d214 g     F .text	00000014 os_mempool_init
0800dc40 g     F .text	00000038 os_gettimeofday
0800ac14 g     F .text	00000074 sensor_network_start_transport
20003984 g     O .bss	00000001 g_task_id
0800ed08 g     F .text	00000020 hmac_prng_generate
0800a334 g     F .text	00000026 _ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i64$GT$3fmt17hf1595badf4d53d6dE
08014bbc g     F .text	00000100 ADC_ConversionStop
08015438 g     F .text	00000042 .hidden __extendsfdf2
0801573c g     F .text	000001d0 .hidden __aeabi_ddiv
0800420c  w    F .text	00000002 TIM8_UP_IRQHandler
08008582 g     F .text	00000096 _ZN4core6option15Option$LT$T$GT$9unwrap_or17h7d57ffc5ebfd5af5E
0801517c g     F .text	00000276 .hidden __adddf3
200037b4 g     O .bss	00000001 g_console_input_ignore
08005418 g     F .text	00000106 .hidden _ZN4core3ptr25swap_nonoverlapping_bytes17hea66163c817d6e8bE
08012e00 g     F .text	0000001e bc95g_detach
0801850c g     O .text	00000018 stm32_flash_dev
20000290 g     O .data	00000020 pFlash
0801434c g     F .text	00000218 HAL_ADC_Init
08010c58 g     F .text	00000038 hal_uart_blocking_tx
080188b0 g       .text	00000000 __exidx_start
0800f798 g     F .text	000000ca _ZN11TinyGPSPlus6encodeEc
08011c3c g     F .text	0000011a strntoumax
080154e8 g     F .text	00000254 .hidden __aeabi_dmul
08015cac g     F .text	00000004 __aeabi_memcpy4
0800acc4 g     F .text	000000bc sensor_network_init_post
0800d670 g     F .text	00000010 os_sanity_init
0800f4d8 g     F .text	0000001e _ZN13TinyGPSCustom6commitEv
0800768e g     F .text	00000050 .hidden _ZN4core3num21_$LT$impl$u20$u32$GT$11checked_add17h852543dd9c36f284E
0800ce94 g     F .text	000000a8 os_mbuf_append
08013c9a g     F .text	0000000a mfg_read_tlv_mmr_ref
0800dc80 g     F .text	00000014 os_set_env
0800ff70 g     F .text	00000010 hal_bsp_flash_dev
0800a082 g     F .text	00000068 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u64$GT$3fmt17ha9c56ab3b32cf62bE
0800b024 g     F .text	000000d4 sensor_network_register_interface
080075c6 g     F .text	0000001e _ZN4core3mem4swap17hddd51f7392412bcdE
08018274 g     O .text	00000008 MemFile_methods
0800445a g     F .text	00000136 _ZN6mynewt4Strn3new17h7c61c05e22ecd5faE
20003968 g     O .bss	0000000c g_os_sanity_check_mu
08012298 g     F .text	0000008c stm32l4_resolve_adc_dma_irq_handler
0800420c  w    F .text	00000002 DMA2_Channel2_IRQHandler
0800420c  w    F .text	00000002 DMA1_Channel4_IRQHandler
0800420c  w    F .text	00000002 SAI2_IRQHandler
08011188 g     F .text	0000005c FLASH_FlushCaches
08004e1e g     F .text	0000009a _ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd3e80460d631842cE
0800c1f0 g     F .text	00000064 sensor_set_poll_rate_ms
0800c2a0 g     F .text	00000020 sensor_register_listener
080153f4 g     F .text	0000001e .hidden __floatunsidf
08010f10 g     F .text	00000044 _sbrk
0800a212 g     F .text	0000000a _ZN4core3fmt3num3imp54_$LT$impl$u20$core..fmt..Display$u20$for$u20$usize$GT$3fmt17h75cd43405bee1ff8E
0800efa8 g     F .text	0000002c temp_stm32_default_cfg
0800a414 g     F .text	00000008 disable_buffer
080104bc g     F .text	0000001c os_tick_idle
080150a6 g     F .text	0000009c HAL_ADCEx_Calibration_Start
0800a5ec g     F .text	00000048 console_printf
0800a50c g     F .text	0000002c console_dump
0800420c  w    F .text	00000002 DFSDM1_FLT3_IRQHandler
0800aeb8 g     F .text	0000001c is_collector_node
08006d5a g     F .text	00000072 .hidden _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb6030de3e7f5cbeeE
08006e7e g     F .text	0000012e _ZN6mynewt8encoding12coap_context11CoapContext20json_set_geolocation17h2edab64b711d4dc6E
0800a596 g     F .text	00000008 console_blocking_mode
20000368 g       .corebss	00000000 __corebss_end__
080042a0 g     F .text	00000002 _init
0800ebda g     F .text	00000028 gps_l70r_sensor_config
0800a212 g     F .text	0000000a _ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17h490cd499cca46fe6E
0800984c g     F .text	00000212 _ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd139048c13a0f464E
08008776 g     F .text	000001ec _ZN4core5slice6memchr6memchr17hd4a19258abae6159E
08012eb8 g     F .text	0000001e bc95g_socket_tx_mbuf
0801590c g     F .text	0000009e .hidden __aeabi_d2f
0800420c  w    F .text	00000002 USART3_IRQHandler
080104d8 g     F .text	0000003c os_tick_init
0800c010 g     F .text	0000001c sensor_mgr_lock
08005148 g     F .text	000000a8 _ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17h70df41bf340d2af5E
0801325e g     F .text	00000026 _ZN8ATParser5writeEPKci
200039bc g       .bss	00000000 _ebss
08005cd2 g     F .text	00000072 .hidden _ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h16ef8ddab3dbb693E
0800ba66 g     F .text	00000010 oc_free_string
0800c7cc g     F .text	000000b0 os_init
0800420c  w    F .text	00000002 DMA1_Channel7_IRQHandler
08004fe8 g     F .text	0000008e _ZN4core6option15Option$LT$T$GT$5ok_or17hb3b3817347480c77E
20000388 g     O .bss	00000040 _ZN6mynewt8encoding12coap_context12COAP_CONTEXT17hf9d4811f16d70562E
080041a8  w    F .text	00000042 Reset_Handler
0800aa7c g     F .text	0000001c json_rep_start_root_object
080116e0 g     F .text	000000c8 TIM_Base_SetConfig
080136aa g     F .text	0000003c _ZN14BufferedSerial5txIrqEv
0800b954 g     F .text	0000000c oc_evq_set
0800420c  w    F .text	00000002 CAN1_RX1_IRQHandler
0800fad0 g     F .text	00000018 _copy
08012d58 g     F .text	00000040 bc95g_init
20003838 g     O .bss	00000001 sysinit_active
0800420c  w    F .text	00000002 LCD_IRQHandler
080119b8 g     F .text	000000c8 HAL_DMA_DeInit
0800420c  w    F .text	00000002 UART5_IRQHandler
080060d6 g     F .text	00000176 .hidden _ZN3app10app_sensor21start_sensor_listener17h188554d40be3fd49E
0800420c  w    F .text	00000002 ADC3_IRQHandler
0800cdd6 g     F .text	0000000a os_mbuf_pool_init
0800fe96 g     F .text	000000d8 tc_sha256_final
08006e28 g     F .text	0000000c .hidden _ZN4core3ptr18real_drop_in_place17hd0e47e9ad3c69e0eE
080104a0 g     F .text	0000001c hal_gpio_toggle
0800dd32 g     F .text	0000001e os_default_irq_asm
08007500 g     F .text	0000003c _ZN6mynewt2hw10sensor_mgr14find_bydevname17h06b2c476f1bcc849E
0800d8a0 g     F .text	0000000c os_sched_next_task
080055b2 g     F .text	00000336 _ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h29f960021fda47b2E
0800d680 g     F .text	00000054 os_sched_insert
0800ee58 g     F .text	0000002a get_temp_raw_data
0800c928 g     F .text	00000078 os_callout_reset
08013ca4 g     F .text	00000038 mfg_init
0800b288 g     F .text	00000020 oc_ri_remove_client_cb_by_mid
0800cbf4 g     F .text	00000010 os_dev_reset
08004a36 g     F .text	0000000a _ZN6mynewt3sys7console5flush17h6e6adb2d6c74f9b0E
0800983e g     F .text	0000000c _ZN42_$LT$str$u20$as$u20$core..fmt..Display$GT$3fmt17h8845cd1bde16499dE
0800be10 g     F .text	00000004 hal_bsp_hw_id_len
0800420c  w    F .text	00000002 TIM4_IRQHandler
0801517c g     F .text	00000276 .hidden __aeabi_dadd
0800b8d2 g     F .text	0000000e coap_set_header_content_format
08015cac g     F .text	00000004 __aeabi_memcpy8
0800d3e8 g     F .text	00000014 os_mutex_init
08011c16 g     F .text	00000016 strcat
0800867e g     F .text	00000004 _ZN4core5panic9PanicInfo8location17h122f9d519f4a246bE
0800420c  w    F .text	00000002 DMA2_Channel1_IRQHandler
0801547c g     F .text	0000006a .hidden __aeabi_ul2d
080084e0 g     F .text	00000050 .hidden _ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h9d9fb88919d8e73fE
08013a18 g     F .text	00000070 flash_map_init
0800f360 g     F .text	00000032 _ZN15TinyGPSLocation6commitEv
08007280 g     F .text	0000010a _ZN6mynewt8encoding12coap_context11CoapContext4fail17h060d8a703f8f2c9bE
0800e5d4 g     F .text	00000014 vprintf
0800c750 g     F .text	0000000c os_started
20000000 g       .bss	00000000 _ram_start
08013820 g     F .text	00000060 gps_l70r_create
0800420c  w    F .text	00000002 QUADSPI_IRQHandler
0800d824 g     F .text	0000003c os_sched_os_timer_exp
20000000 g       .vector_relocation	00000000 __vector_tbl_reloc__
08011064 g     F .text	000000b0 HAL_FLASH_Program
0800420c  w    F .text	00000002 I2C1_EV_IRQHandler
080058e8 g     F .text	000000aa _ZN4core5slice18from_raw_parts_mut17h14319b5b3cdbbc41E
08013244 g     F .text	0000001a _ZN8ATParser5flushEv
0800ae30 g     F .text	00000018 is_sensor_node
20000368 g       .data	00000000 __data_end__
0800b528 g     F .text	00000010 coap_get_mid
08007638 g     F .text	00000056 _ZN6mynewt2hw6sensor8bindings16set_poll_rate_ms17h1b333cb0fcc2972cE
080060ae g     F .text	0000001a _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h38cdae572661f6a9E
0800fbb2 g     F .text	0000001e tc_hmac_init
0800420c  w    F .text	00000002 DMA1_Channel6_IRQHandler
08013510 g     F .text	0000001c _ZN8ATParser6printfEPKcz
20003988 g     O .bss	00000004 g_os_time
0800420c  w    F .text	00000002 UART4_IRQHandler
0800420c  w    F .text	00000002 DMA2_Channel4_IRQHandler
08010b78 g     F .text	00000044 hal_uart_init_cbs
08010f00 g     F .text	00000010 hal_watchdog_tickle
200039bc g       .bss	00000000 __bss_end__
0800a1f0 g     F .text	0000000a _ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h4a5378243facc467E
0800b1bc g     F .text	00000028 oc_buffer_init
0800cde0 g     F .text	00000032 os_mbuf_get
080075a0 g     F .text	00000026 _ZN4core3ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h2fb6a3a5463e515aE
0800420c  w    F .text	00000002 TIM3_IRQHandler
0800420c  w    F .text	00000002 RCC_IRQHandler
0800eda0 g     F .text	00000030 json_helper_set_int
0800f400 g     F .text	00000048 _ZN15TinyGPSLocation3lngEv
0800b8a4 g     F .text	00000016 coap_send_message
0800ee00 g     F .text	00000048 json_helper_set_text_string
0800420c  w    F .text	00000002 DMA1_Channel1_IRQHandler
08004334 g     F .text	000000ac rust_begin_unwind
08015178 g     F .text	0000027a .hidden __aeabi_dsub
0800d37c g     F .text	00000010 os_msys_reset
080059a6 g     F .text	00000150 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17h67f17cd2efb0b422E
0800420c g       .text	00000002 Default_Handler
08006cc0 g     F .text	00000032 _ZN4core3fmt10ArgumentV13new17h5864edecdd47206aE
08011144 g     F .text	00000044 FLASH_PageErase
0800428c g     F .text	00000014 _start
0800fa42 g     F .text	0000008e tc_hmac_prng_generate
0800420c  w    F .text	00000002 DMA2_Channel7_IRQHandler
080136fc g     F .text	00000030 _ZN14BufferedSerial5primeEv
0800a48c g     F .text	00000070 console_printhex
08014fda g     F .text	0000004a HAL_ADC_Stop
08006cf2 g     F .text	00000012 _ZN4core3mem7size_of17he296f163b70ee57fE
0801547c g     F .text	0000006a .hidden __floatundidf
08004b78 g     F .text	00000028 _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17he1e06a6ebcf1933eE
08010fd8 g     F .text	0000008c FLASH_WaitForLastOperation
08013548 g     F .text	0000001c _ZN8ATParser4recvEPKcz
0800dc94 g     F .text	00000006 os_arch_init_task_stack
08011af6 g     F .text	0000004a HAL_DMA_Abort
08008962 g     F .text	00000044 _ZN4core5slice20slice_index_len_fail17hfa6ff34b8fd07644E
0800cf3c g     F .text	000000b8 os_mbuf_dup
0800cd00 g     F .text	00000018 os_eventq_run
0800a01a g     F .text	00000068 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u64$GT$3fmt17h1bf045a2a754efdcE
0800ed28 g     F .text	00000024 json_helper_set_array
0800f2e4 g     F .text	0000007c _ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees
08009f44 g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u32$GT$3fmt17h6fa9611feb1808ceE
0800420c  w    F .text	00000002 EXTI15_10_IRQHandler
08006910 g     F .text	00000054 _ZN4core3ptr23swap_nonoverlapping_one17h9a4b435a29b2077eE
08014d4c g     F .text	000000f8 HAL_ADC_Start
08006b7c g     F .text	00000012 _ZN4core3mem7size_of17h52ebf8b7386d8e01E
0800b2a8 g     F .text	000000a8 oc_ri_alloc_client_cb
08008cfe g     F .text	0000014e _ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hb4c162eac025d3e7E
080084a8 g     F .text	0000001a _ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h802ebe02decf163eE
0800f9fe g     F .text	00000044 tc_hmac_prng_reseed
200038b0 g     O .bss	00000050 g_idle_task
0801042c g     F .text	00000054 hal_gpio_init_out
08010480 g     F .text	00000020 hal_gpio_read
20000228 g     O .data	00000004 sysinit_panic_cb
080103ac g     F .text	00000030 hal_gpio_deinit_stm
20002668 g     O .bss	00000004 g_os_sanity_check_list
0800dffa g     F .text	00000024 strncpy
080137c2  w    F .text	0000000c _ZN10RingBufferIcE4initEPcm
0800c13c g     F .text	00000008 sensor_pkg_init
08010c18 g     F .text	00000040 hal_uart_start_tx
0800d228 g     F .text	00000032 os_memblock_get
0800d7ac g     F .text	00000078 os_sched_wakeup
0800cd72 g     F .text	00000026 os_mqueue_get
0800d8fc g     F .text	00000010 os_sem_init
08009e6e g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17h4f9d20d49859c5e5E
0800e990 g     F .text	00000022 gps_l70r_default_cfg
0800f9b2 g     F .text	0000004c tc_hmac_prng_init
0800f862 g     F .text	00000030 mem_init_mbuf_pool
08009084 g     F .text	00000022 _ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..fmt..Display$GT$3fmt17hd71f50db4d05698dE
0800c620 g     F .text	00000098 os_default_irq
0800420c  w    F .text	00000002 TIM7_IRQHandler
0800420c  w    F .text	00000002 SDMMC1_IRQHandler
08015414 g     F .text	00000022 .hidden __aeabi_i2d
20003978 g     O .bss	00000004 g_os_last_ctx_sw_time
0800d90c g     F .text	00000064 os_sem_release
0800420c  w    F .text	00000002 TIM5_IRQHandler
080052fc g     F .text	00000054 _ZN4core3ptr23swap_nonoverlapping_one17hf704b0957311fe22E
080075f6 g     F .text	00000042 _ZN6mynewt2hw6sensor8bindings23mgr_find_next_bydevname17hcf58d7c66915afb3E
0800df14 g     F .text	00000048 memcmp
0800c498 g     F .text	00000018 os_arch_init
20000188 g       .coredata	00000000 __coredata_start__
08006e34 g     F .text	00000022 .hidden _ZN4core3cmp5impls53_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$u8$GT$2eq17h996d81c265015a00E
0800420c  w    F .text	00000002 I2C3_EV_IRQHandler
20000368 g       .corebss	00000000 __ecorebss
08012540 g     F .text	00000040 stm32l4_adc_dev_init
08006aae g     F .text	00000026 _ZN4core3ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h7d5d72e646b2abd7E
08015142 g     F .text	0000001c sscanf
08004a40 g     F .text	00000034 _ZN6mynewt4libs14sensor_network22start_server_transport17h6009bbb3c25195b5E
08005fa8 g     F .text	0000005a _ZN4core6result19Result$LT$T$C$E$GT$6expect17h30f9912194b1df84E
08015ca8  w    F .text	00000002 .hidden __aeabi_ldiv0
0800420c  w    F .text	00000002 EXTI9_5_IRQHandler
0800ba7c g     F .text	0000000c sysinit_start
0801573c g     F .text	000001d0 .hidden __divdf3
08010914 g     F .text	000000c4 hal_timer_config
08008682 g     F .text	00000008 _ZN4core5panic8Location4file17ha9ce911e26883425E
0800cb78 g     F .text	00000044 os_dev_open
0800420c  w    F .text	00000002 RTC_WKUP_IRQHandler
0800ad8c g     F .text	00000064 sensor_network_prepare_post
080154e8 g     F .text	00000254 .hidden __muldf3
08005af6 g     F .text	0000002e _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3get17hb4a91e78f630f22cE
0800d970 g     F .text	000000b8 os_sem_pend
08010ee4 g     F .text	0000001c hal_watchdog_enable
08010550 g     F .text	00000008 HAL_GetTick
0800b8ba g     F .text	00000018 coap_set_token
0800aef0 g     F .text	00000074 get_device_id
0800420c  w    F .text	00000002 PVD_PVM_IRQHandler
08012470 g     F .text	00000050 HAL_ADC_ErrorCallback
0800b154 g     F .text	00000040 oc_allocate_mbuf
08008474 g     F .text	00000026 _ZN4core3ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h4d8b2180f89bdb80E
080084c2 g     F .text	0000001e _ZN53_$LT$T$u20$as$u20$core..convert..TryFrom$LT$U$GT$$GT$8try_from17h7c80ae12d7aabdd0E
0800cd98 g     F .text	0000003e os_mqueue_put
0800a764 g     F .text	00000028 init_sensor_coap
08014f4c g     F .text	0000008e ADC_Disable
0800d2ec g     F .text	0000004c os_msys_register
20003900 g     O .bss	00000004 g_os_idle_ctr
080139b0 g     F .text	00000040 flash_area_open
0800420c  w    F .text	00000002 SPI2_IRQHandler
0800a7d0 g     F .text	00000028 json_rep_reset
0800624c g     F .text	000000aa .hidden _ZN3app11app_network21aggregate_sensor_data17hb5d34e268bdd71d1E
0800f45e g     F .text	00000016 _ZN11TinyGPSTime6commitEv
0800e9ec g     F .text	0000002c gps_l70r_connect
0800df76 g     F .text	00000038 memset
0800482c g     F .text	00000020 _ZN6mynewt4Strn8is_empty17haf426a9141c41dd7E
0800420c  w    F .text	00000002 MemManage_Handler
08004020 g       .text	00000000 __isr_vector
080042a2 g     F .text	00000092 main
08007d06 g     F .text	000002b6 _ZN6mynewt2hw6sensor17register_listener17hc302d184d2da34dbE
0800a538 g     F .text	0000003c console_out_nolock
200006d8 g     O .bss	00000004 network_is_busy
08009524 g     F .text	000002e4 _ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E
08012d98 g     F .text	00000010 bc95g_default_cfg
08004d8c g     F .text	0000004c .hidden _ZN4core3fmt9Arguments6new_v117h7b18277453f88ac4E
080138d0 g     F .text	0000005c temp_stm32_create
0800bdd4 g     F .text	00000020 json_encode_array_start
0800ee48 g     F .text	00000010 rust_sysinit
0800420c  w    F .text	00000002 CAN1_TX_IRQHandler
0800b998 g     F .text	00000020 oc_send_buffer
0800ba88 g     F .text	0000000c sysinit_end
08013a88 g     F .text	00000002 modlog_init
0800dc9a g     F .text	00000046 SVC_Handler
0800420c  w    F .text	00000002 DMA2_Channel5_IRQHandler
0800cc14 g     F .text	0000000a os_eventq_inited
080135b8 g     F .text	00000040 _ZN14BufferedSerial4initEPcmS0_mPKc
0801590c g     F .text	0000009e .hidden __truncdfsf2
20003818 g     O .bss	00000020 oc_transports
080116a4 g     F .text	0000003c HAL_RCC_GetClockConfig
0801548c g     F .text	0000005a .hidden __aeabi_l2d
080142f6 g     F .text	00000054 hal_flash_read
0800ac88 g     F .text	00000018 start_server_transport
0800f268 g     F .text	00000026 _ZN11TinyGPSPlus7fromHexEc
0800cd58 g     F .text	00000008 os_eventq_dflt_get
080109d8 g     F .text	00000024 hal_timer_read
08005586 g     F .text	00000014 .hidden _ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17h6cfde3120b8a2279E
0801392c g     F .text	00000002 oc_register_gatt
0800cc86 g     F .text	0000007a os_eventq_get
0800f19a g     F .text	00000028 temp_stm32_config
080135fc g     F .text	0000000c _ZN14BufferedSerial8readableEv
08012de4 g     F .text	0000001c bc95g_attach
0800ce80 g     F .text	00000014 os_mbuf_len
0800dc78 g     F .text	00000006 os_time_ms_to_ticks
200037b5 g     O .bss	00000001 g_silence_console
080068ce g     F .text	00000042 _ZN4core3ptr19swap_nonoverlapping17h4352ecd5b7860646E
0800420c  w    F .text	00000002 DMA1_Channel5_IRQHandler
0800c9fc g     F .text	00000034 os_callout_wakeup_ticks
08006b8e g     F .text	00000012 _ZN4core3mem7size_of17hcafb567766d3ad6aE
0800420c  w    F .text	00000002 EXTI4_IRQHandler
0800c144 g     F .text	00000018 sensor_lock
080131d4 g     F .text	00000028 _log
08004f36 g     F .text	0000008a _ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h5aa536dd3e52e567E
08005350 g     F .text	00000042 _ZN4core3ptr4read17hbb03a88aef84744cE
200039b8 g     O .bss	00000004 flash_map_entries
0800cff4 g     F .text	000000a4 os_mbuf_adj
08009f44 g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hc10e55c761f9c3e5E
08005392 g     F .text	00000018 _ZN4core3ptr5write17hd998e398d0d5a877E
08011d58 g     F .text	00000048 stm32l4_adc_create
08009f44 g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$isize$GT$3fmt17h136c33dad23d062bE
08013c64 g     F .text	00000012 mfg_seek_next
0800dfce g     F .text	0000001c strcmp
08008372 g     F .text	0000008e _ZN4core6result13unwrap_failed17hc06b1ee04940e7c4E
08004b50 g     F .text	00000028 _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h5f3655b75e30a970E
0800c0ec g     F .text	0000003c sensor_mgr_find_next
0800d704 g     F .text	0000000c os_sched_get_current_task
0800f4ca g     F .text	0000000e _ZN14TinyGPSInteger3setEPKc
08005c08 g     F .text	00000058 _ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17h19d437c8d974b8d1E
0800a578 g     F .text	0000001e console_write
08004b28 g     F .text	00000028 _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h49d5a0f4de383fedE
0800dd64 g     F .text	00000010 lrand48
0800be14 g     F .text	0000001c hal_bsp_hw_id
08013792 g     F .text	0000001a _ZN14BufferedSerial6attachEPFvPvES0_i
08004210 g     F .text	00000048 SystemInit
0800ca3c g     F .text	0000000a os_cputime_get32
0800420c  w    F .text	00000002 RNG_IRQHandler
080132b4 g     F .text	00000058 _ZN8ATParser5vsendEPKcSt9__va_list
0800738a g     F .text	00000012 _ZN6mynewt8encoding12coap_context11CoapContext11to_void_ptr17h69d954fe1672413fE
08009db2 g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u8$GT$3fmt17h3b71bd20fd2652bfE
0800f482 g     F .text	0000000e _ZN11TinyGPSDate7setDateEPKc
0800cd18 g     F .text	00000040 os_eventq_remove
0800bdcc g     F .text	00000008 json_encode_array_name
08004d28 g     F .text	00000032 _ZN4core3fmt10ArgumentV13new17he64230cf919db0caE
0800baac g     F .text	00000002 _fini
0800718e g     F .text	000000f2 _ZN6mynewt8encoding12coap_context11CoapContext13value_to_cstr17h159023eafb6861b2E
0800adf0 g     F .text	00000026 sensor_network_do_post
08009e6e g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$isize$GT$3fmt17hf8d291ae99884edaE
0800420c  w    F .text	00000002 TIM1_TRG_COM_TIM17_IRQHandler
0800c03c g     F .text	0000000c sensor_mgr_evq_get
0800dfae g     F .text	00000020 sprintf
0801372c g     F .text	00000026 _ZN14BufferedSerial4putcEi
08006054 g     F .text	00000012 _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h411c740de4b3d5baE
08004a20 g     F .text	00000016 _ZN6mynewt3sys7console8printint17h0f8f736d6c26b18aE
0800d8ac g     F .text	00000022 os_sched
0800b9b8 g     F .text	0000004c oc_send_multicast_message
08010bbc g     F .text	0000005c hal_uart_start_rx
08008e4c g     F .text	000000ea _ZN4core3fmt8builders10DebugTuple5field17ha79ab474d6fe3b39E
0800d4b4 g     F .text	000000e0 os_mutex_pend
0800b912 g     F .text	00000026 coap_set_header_uri_query
00000000 g       .svc_table	00000000 SVC_Table
0800420c  w    F .text	00000002 DMA1_Channel3_IRQHandler
0800a1fa g     F .text	00000018 _ZN4core3fmt3num3imp54_$LT$impl$u20$core..fmt..Display$u20$for$u20$isize$GT$3fmt17h35833e1076b6bfecE
0800420c  w    F .text	00000002 COMP_IRQHandler
0800f500 g     F .text	00000298 _ZN11TinyGPSPlus16endOfTermHandlerEv
20003994 g     O .bss	00000010 stm32_tmr0
0800bab0 g     F .text	0000003c json_encode_object_start
0800b554 g     F .text	0000034e coap_serialize_message
20018000 g       .bss	00000000 __StackTop
0800c15c g     F .text	0000000a sensor_unlock
0800551e g     F .text	0000002c _ZN4core10intrinsics19copy_nonoverlapping17h0bbfc0328204f40cE
0800cd60 g     F .text	00000012 os_mqueue_init
0800a3cc g     F .text	00000048 console_flush
08011b40 g     F .text	000000c4 HAL_DMA_IRQHandler
20000464 g     O .bss	00000004 oc_content_format
0800686a g     F .text	00000056 _ZN4core6option15Option$LT$T$GT$6expect17hbf2467b5c00077abE
08008708 g     F .text	00000030 _ZN4core9panicking9panic_fmt17hbfe32cf8392a510cE
0800420c  w    F .text	00000002 WWDG_IRQHandler
0800fb28 g     F .text	0000008a tc_hmac_set_key
08008738 g     F .text	0000003e _ZN4core6option13expect_failed17h278dd9976412b211E
08013654 g     F .text	00000040 _ZN14BufferedSerial5rxIrqEh
080130e8 g     F .text	0000001c init_bc95g_server
08006c98 g     F .text	00000028 _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h8e167aafd3bdcdafE
20003874 g     O .bss	00000020 st_up_osco
0800fe40 g     F .text	00000056 tc_sha256_update
0800420c  w    F .text	00000002 LPUART1_IRQHandler
0800c9a0 g     F .text	0000005c os_callout_tick
0800420c  w    F .text	00000002 DMA2_Channel6_IRQHandler
08013104 g     F .text	000000bc bc95g_register_transport
08018868 g     O .text	00000048 sysflash_map_dflt
0800ae16 g     F .text	00000018 do_server_post
0800420c  w    F .text	00000002 TIM2_IRQHandler
080041a8 g       .text	00000000 __isr_vector_end
0800c87c g     F .text	0000001a os_start
0801352c g     F .text	0000001c _ZN8ATParser4sendEPKcz
0800ba94 g     F .text	00000004 power_standby_wakeup
0800fae8 g     F .text	00000008 _set
0800f4a6 g     F .text	0000000e _ZN14TinyGPSDecimal3setEPKc
08010c90 g     F .text	000001c8 hal_uart_config
0800f28e g     F .text	00000056 _ZN11TinyGPSPlus12parseDecimalEPKc
0800834a g     F .text	00000028 _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h44c685770c3cf9e5E
0800c254 g     F .text	0000002e sensor_mgr_register
08006e56 g     F .text	00000028 .hidden _ZN4core3cmp5impls55_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$u32$GT$2lt17h61db27facad99196E
080052ba g     F .text	00000042 _ZN4core3ptr19swap_nonoverlapping17ha3384305dc7c4be9E
0800aa74 g     F .text	00000008 do_sensor_post
08014cbc g     F .text	00000090 ADC_Enable
0801322e g     F .text	0000000a _ZN8ATParser4putcEc
20018000 g       .imghdr	00000000 _estack
0800ed68 g     F .text	0000001c json_helper_object_array_start_item
0800d156 g     F .text	00000046 os_mbuf_concat
0800420c  w    F .text	00000002 EXTI1_IRQHandler
08004cc4 g     F .text	00000032 _ZN4core3fmt10ArgumentV13new17hd53ba6b62a3b9591E
08013cdc g     F .text	00000010 mfg_open
20000234 g     O .data	00000008 g_os_run_list
20000368 g       .data	00000000 _edata
08004258 g     F .text	00000034 NVIC_Relocate
0801392e g     F .text	00000002 oc_register_ip4
08005298 g     F .text	00000022 _ZN4core3ptr145_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$unsafe$u20$extern$u20$$u22$C$u22$$u20$fn$LP$A$C$$u20$B$C$$u20$C$C$$u20$D$RP$$u20$.$GT$$u20$Ret$GT$2eq17h48917c1cab0294b9E
0800a082 g     F .text	00000068 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i64$GT$3fmt17hb3552287af737977E
0800f892 g     F .text	00000054 sysinit_app
08006dcc g     F .text	0000001c _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h12b66ceea47b68d2E
0800c02c g     F .text	00000010 sensor_mgr_unlock
20000770 g     O .bss	00000004 os_flags
0800baec g     F .text	00000054 json_encode_object_key
0800b258 g     F .text	00000030 oc_ri_mem_init
08010fa8 g     F .text	00000030 HAL_FLASH_Unlock
0800c448 g     F .text	00000006 os_arch_restore_sr
0800bb40 g     F .text	0000006c json_encode_object_entry
0800efd4 g     F .text	00000084 temp_stm32_init
08009db2 g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he7fa0f4e9bbfda2bE
20018000 g       *ABS*	00000000 __StackLimit
20003904 g     O .bss	00000004 g_os_started
0800cbbc g     F .text	00000036 os_dev_close
20003564 g     O .bss	00000004 debug_bc95g
0800420c  w    F .text	00000002 USART2_IRQHandler
0800ab50 g     F .text	000000c4 sensor_network_register_transport
0800420c  w    F .text	00000002 DFSDM1_FLT0_IRQHandler
08004c2e g     F .text	00000032 _ZN4core3fmt10ArgumentV13new17h99edaec200b06545E
080049ea g     F .text	00000036 _ZN6mynewt3sys7console6buffer17h37b7b8db742c4e2fE
0800b1e4 g     F .text	00000028 oc_rep_init
08004020 g     O .text	00000000 g_pfnVectors
0800868a g     F .text	00000004 _ZN4core5panic8Location4line17h997c0352f671f211E
08014682 g     F .text	00000088 ADC_DMAConvCplt
0800bdac g     F .text	00000020 json_encode_object_finish
0800ce5c g     F .text	00000024 os_mbuf_free_chain
080043e0 g     F .text	0000006a _ZN84_$LT$mynewt..Strn$u20$as$u20$mynewt..encoding..coap_context..ToBytesOptionalNull$GT$21to_bytes_optional_nul17h130831040ce73c29E
0800d3b4 g     F .text	00000034 os_msys_init
0800420c  w    F .text	00000002 I2C2_ER_IRQHandler
0800420c  w    F .text	00000002 DMA1_Channel2_IRQHandler
0800444a g     F .text	00000010 _ZN6mynewt7sysinit17hdf9acde92c8fdcd0E
0800dbcc g     F .text	0000000c os_time_get
080092aa g     F .text	00000248 _ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE
0800a4fc g     F .text	00000010 console_printint
20003898 g     O .bss	00000018 sensor_base_ts
0800484c g     F .text	0000013c _ZN6mynewt4Strn8validate17hd35e7e1944abd306E
0800507c g     F .text	0000009a _ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17ha361f31015ba9c1fE
0800bed0 g     F .text	0000002e sensor_mgr_match_bytype
0800420c  w    F .text	00000002 TIM8_BRK_IRQHandler
08006b32 g     F .text	0000002c _ZN4core10intrinsics19copy_nonoverlapping17hd07f3a150618ce6bE
080053d2 g     F .text	0000001c _ZN6mynewt6kernel2os15eventq_dflt_get17hc3569ee6b12f336bE
0800f490 g     F .text	00000016 _ZN14TinyGPSDecimal6commitEv
0800a7f8 g     F .text	00000020 json_rep_new
0800ce12 g     F .text	00000036 os_mbuf_get_pkthdr
08015ca8  w    F .text	00000002 .hidden __aeabi_idiv0
080117a8 g     F .text	00000022 TIM_CCxChannelCmd
08005b24 g     F .text	0000007a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h9f79003d40cdc30eE
0800420c  w    F .text	00000002 CAN1_SCE_IRQHandler
08014676  w    F .text	00000002 HAL_ADC_ConvHalfCpltCallback
08006c3a g     F .text	00000036 .hidden _ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17ha357325b6c2f1c37E
0800420c  w    F .text	00000002 FLASH_IRQHandler
0800a78c g     F .text	00000044 init_sensor_post
08013752 g     F .text	00000040 _ZN14BufferedSerial5writeEPKvj
0800da40 g     F .text	000000d8 os_task_init
0800420c  w    F .text	00000002 BusFault_Handler
0800420c  w    F .text	00000002 USART1_IRQHandler
08008400 g     F .text	0000005a _ZN4core6result19Result$LT$T$C$E$GT$6expect17h1c36e744b9342e1eE
0800a1fa g     F .text	00000018 _ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17h8362f63c9a899390E
0800dfea g     F .text	00000010 strlen
0800caec g     F .text	00000040 os_dev_create
0800420c  w    F .text	00000002 OTG_FS_IRQHandler
0800d25a g     F .text	0000001e os_memblock_put_from_cb
0800420c  w    F .text	00000002 SPI3_IRQHandler
0800cc04 g     F .text	00000010 os_eventq_init
0800dbd8 g     F .text	00000040 os_time_advance
0800f4f6 g     F .text	0000000a _ZN13TinyGPSCustom3setEPKc
0800ea18 g     F .text	00000070 gps_l70r_start
0800d8d0 g     F .text	0000002c os_sched_resort
08006a8c g     F .text	00000022 _ZN4core3ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h8c3e9b63d0164ad4E
0800fbd0 g     F .text	00000010 tc_hmac_update
080142ce g     F .text	00000028 hal_flash_init
0800420c  w    F .text	00000002 I2C1_ER_IRQHandler
0800420c  w    F .text	00000002 FMC_IRQHandler
08004d5a g     F .text	00000032 _ZN4core3fmt10ArgumentV13new17hf7ba76b3ae396a12E
08004eb8 g     F .text	00000016 _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17ha43f49b82ef7bb66E
08006a6a g     F .text	00000022 _ZN4core3ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h444475af15b7177dE
08015438 g     F .text	00000042 .hidden __aeabi_f2d
08006002 g     F .text	00000052 _ZN4core6result19Result$LT$T$C$E$GT$6expect17ha550042fe08afe55E
0800420c  w    F .text	00000002 SWPMI1_IRQHandler
08009810 g     F .text	00000008 _ZN4core3fmt9Formatter15debug_upper_hex17h4ab9339a84cb4dceE
0801470a g     F .text	0000001a ADC_DMAError
0800c282 g     F .text	0000001e sensor_init
0800420c  w    F .text	00000002 LPTIM1_IRQHandler
080131fc g     F .text	00000032 _ZN8ATParser4initER14BufferedSerialPciPKcib
0801000c g     F .text	00000020 adc_chan_config
0800f3a2 g     F .text	00000010 _ZN15TinyGPSLocation12setLongitudeEPKc
0800a01a g     F .text	00000068 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17h703a08cf31f25f17E
200039a4 g     O .bss	00000010 g_wdt_cfg
0800cb2c g     F .text	0000002c os_dev_initialize_all
08015178 g     F .text	0000027a .hidden __subdf3
0800f3b8 g     F .text	00000048 _ZN15TinyGPSLocation3latEv
0800f058 g     F .text	000000c0 temp_stm32_get_raw_temperature
08009e10 g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17hab068c13e1025a46E
0801330c g     F .text	00000204 _ZN8ATParser5vrecvEPKcSt9__va_list
08006d38 g     F .text	00000022 _ZN4core3ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h2dd721d17ad3d086E
08006b5e g     F .text	0000001e _ZN4core3mem4swap17ha215299b395665f3E
08004ee4 g     F .text	00000052 _ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h87228261cb1ac456E
08004afa g     F .text	0000002e _ZN6mynewt4libs14sensor_network13get_device_id17he689acf42fcaec72E
2000023c g     O .data	00000008 g_os_sleep_list
0800ebcc g     F .text	0000000e gps_l70r_sensor_default_cfg
0800e5e8 g     F .text	00000058 jrand48
08005116 g     F .text	0000000c _ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17hc5c34342aa7dc908E
08007780 g     F .text	00000050 .hidden _ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h1b2dc11be93c175aE
0800ff80 g     F .text	0000008c hal_bsp_init
0800c898 g     F .text	00000038 os_pkg_init
08012da8 g     F .text	00000020 bc95g_config
08009e6e g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$usize$GT$3fmt17h2d12e58c2cdf8b30E
08010374 g     F .text	00000038 hal_gpio_init_stm
200006d4 g     O .bss	00000004 network_has_transmitted
0800fbe0 g     F .text	00000052 tc_hmac_final
0800d5d0 g     F .text	00000010 os_sanity_check_init
080053ae g     F .text	00000004 _ZN4core3ptr8null_mut17hc0e3bb7e4d27c81eE
080045c0 g     F .text	0000004e _ZN6mynewt4Strn6as_ptr17h2aca29768dacdb60E
08005d44 g     F .text	00000072 .hidden _ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i64$GT$3fmt17h922eff1c86de8976E
080188c8 g       *ABS*	00000000 __ecoredata
08010e58 g     F .text	00000020 hal_uart_init
08013568 g     F .text	00000050 _Z10setup_uartP14BufferedSerial
08006fac g     F .text	0000004c _ZN6mynewt8encoding12coap_context11CoapContext20json_set_text_string17h9e175e462a901a28E
0800e56c g     F .text	00000008 vfprintf
0800420c  w    F .text	00000002 SAI1_IRQHandler
08013934 g     F .text	00000002 oc_register_serial
08013238 g     F .text	0000000c _ZN8ATParser5fgetcEv
080135f8 g     F .text	00000004 _ZN14BufferedSerial9configureEi
080049be g     F .text	0000002c _ZN6mynewt3sys7console10print_strn17h7b7fdfa60aa992abE
08006ad8 g     F .text	00000042 _ZN4core3ptr4read17h3dc0ab1aea7723f2E
20003908 g     O .bss	00000050 g_os_main_task
0800dee8 g     F .text	0000002c free
080124c0 g     F .text	00000080 HAL_ADC_ConvCpltCallback
0800420c  w    F .text	00000002 DMA2_Channel3_IRQHandler
08014670 g     F .text	00000006 HAL_ADC_GetValue
08013932 g     F .text	00000002 oc_register_lora
08004bc8 g     F .text	00000034 _ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h77e937fdb67d0448E
080075e4 g     F .text	00000012 _ZN4core3mem7size_of17hf368a5e6b408f7d1E
0800420c  w    F .text	00000002 TIM1_BRK_TIM15_IRQHandler



Disassembly of section .text:

08004020 <__isr_vector>:
 8004020:	20018000 	.word	0x20018000
 8004024:	080041a9 	.word	0x080041a9
 8004028:	0800420d 	.word	0x0800420d
 800402c:	0800420d 	.word	0x0800420d
 8004030:	0800420d 	.word	0x0800420d
 8004034:	0800420d 	.word	0x0800420d
 8004038:	0800420d 	.word	0x0800420d
	...
 800404c:	0800dc9b 	.word	0x0800dc9b
 8004050:	0800420d 	.word	0x0800420d
 8004054:	00000000 	.word	0x00000000
 8004058:	0800dce1 	.word	0x0800dce1
 800405c:	0800dd27 	.word	0x0800dd27
 8004060:	0800420d 	.word	0x0800420d
 8004064:	0800420d 	.word	0x0800420d
 8004068:	0800420d 	.word	0x0800420d
 800406c:	0800420d 	.word	0x0800420d
 8004070:	0800420d 	.word	0x0800420d
 8004074:	0800420d 	.word	0x0800420d
 8004078:	0800420d 	.word	0x0800420d
 800407c:	0800420d 	.word	0x0800420d
 8004080:	0800420d 	.word	0x0800420d
 8004084:	0800420d 	.word	0x0800420d
 8004088:	0800420d 	.word	0x0800420d
 800408c:	0800420d 	.word	0x0800420d
 8004090:	0800420d 	.word	0x0800420d
 8004094:	0800420d 	.word	0x0800420d
 8004098:	0800420d 	.word	0x0800420d
 800409c:	0800420d 	.word	0x0800420d
 80040a0:	0800420d 	.word	0x0800420d
 80040a4:	0800420d 	.word	0x0800420d
 80040a8:	0800420d 	.word	0x0800420d
 80040ac:	0800420d 	.word	0x0800420d
 80040b0:	0800420d 	.word	0x0800420d
 80040b4:	0800420d 	.word	0x0800420d
 80040b8:	0800420d 	.word	0x0800420d
 80040bc:	0800420d 	.word	0x0800420d
 80040c0:	0800420d 	.word	0x0800420d
 80040c4:	0800420d 	.word	0x0800420d
 80040c8:	0800420d 	.word	0x0800420d
 80040cc:	0800420d 	.word	0x0800420d
 80040d0:	0800420d 	.word	0x0800420d
 80040d4:	0800420d 	.word	0x0800420d
 80040d8:	0800420d 	.word	0x0800420d
 80040dc:	0800420d 	.word	0x0800420d
 80040e0:	0800420d 	.word	0x0800420d
 80040e4:	0800420d 	.word	0x0800420d
 80040e8:	0800420d 	.word	0x0800420d
 80040ec:	0800420d 	.word	0x0800420d
 80040f0:	0800420d 	.word	0x0800420d
 80040f4:	0800420d 	.word	0x0800420d
 80040f8:	0800420d 	.word	0x0800420d
 80040fc:	0800420d 	.word	0x0800420d
 8004100:	0800420d 	.word	0x0800420d
 8004104:	0800420d 	.word	0x0800420d
 8004108:	0800420d 	.word	0x0800420d
 800410c:	0800420d 	.word	0x0800420d
 8004110:	0800420d 	.word	0x0800420d
 8004114:	0800420d 	.word	0x0800420d
 8004118:	0800420d 	.word	0x0800420d
 800411c:	0800420d 	.word	0x0800420d
 8004120:	0800420d 	.word	0x0800420d
 8004124:	0800420d 	.word	0x0800420d
 8004128:	0800420d 	.word	0x0800420d
 800412c:	0800420d 	.word	0x0800420d
 8004130:	0800420d 	.word	0x0800420d
 8004134:	0800420d 	.word	0x0800420d
 8004138:	0800420d 	.word	0x0800420d
 800413c:	0800420d 	.word	0x0800420d
 8004140:	0800420d 	.word	0x0800420d
 8004144:	0800420d 	.word	0x0800420d
 8004148:	0800420d 	.word	0x0800420d
 800414c:	0800420d 	.word	0x0800420d
 8004150:	0800420d 	.word	0x0800420d
 8004154:	0800420d 	.word	0x0800420d
 8004158:	0800420d 	.word	0x0800420d
 800415c:	0800420d 	.word	0x0800420d
 8004160:	0800420d 	.word	0x0800420d
 8004164:	0800420d 	.word	0x0800420d
 8004168:	0800420d 	.word	0x0800420d
 800416c:	0800420d 	.word	0x0800420d
 8004170:	0800420d 	.word	0x0800420d
 8004174:	0800420d 	.word	0x0800420d
 8004178:	0800420d 	.word	0x0800420d
 800417c:	0800420d 	.word	0x0800420d
 8004180:	0800420d 	.word	0x0800420d
 8004184:	0800420d 	.word	0x0800420d
 8004188:	0800420d 	.word	0x0800420d
 800418c:	0800420d 	.word	0x0800420d
 8004190:	0800420d 	.word	0x0800420d
 8004194:	0800420d 	.word	0x0800420d
 8004198:	0800420d 	.word	0x0800420d
 800419c:	00000000 	.word	0x00000000
 80041a0:	0800420d 	.word	0x0800420d
 80041a4:	0800420d 	.word	0x0800420d

080041a8 <Reset_Handler>:

  .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80041a8:	f8df d040 	ldr.w	sp, [pc, #64]	; 80041ec <LoopFillZeroCoreBss+0x10>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80041ac:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80041ae:	e003      	b.n	80041b8 <LoopCopyDataInit>

080041b0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80041b0:	4b0f      	ldr	r3, [pc, #60]	; (80041f0 <LoopFillZeroCoreBss+0x14>)
  ldr  r3, [r3, r1]
 80041b2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80041b4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80041b6:	3104      	adds	r1, #4

080041b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 80041b8:	480e      	ldr	r0, [pc, #56]	; (80041f4 <LoopFillZeroCoreBss+0x18>)
  ldr  r3, =_edata
 80041ba:	4b0f      	ldr	r3, [pc, #60]	; (80041f8 <LoopFillZeroCoreBss+0x1c>)
  adds  r2, r0, r1
 80041bc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80041be:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80041c0:	d3f6      	bcc.n	80041b0 <CopyDataInit>

  ldr  r2, =_sbss
 80041c2:	4a0e      	ldr	r2, [pc, #56]	; (80041fc <LoopFillZeroCoreBss+0x20>)
  b  LoopFillZerobss
 80041c4:	e002      	b.n	80041cc <LoopFillZerobss>

080041c6 <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80041c6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80041c8:	f842 3b04 	str.w	r3, [r2], #4

080041cc <LoopFillZerobss>:

LoopFillZerobss:
  ldr  r3, = _ebss
 80041cc:	4b0c      	ldr	r3, [pc, #48]	; (8004200 <LoopFillZeroCoreBss+0x24>)
  cmp  r2, r3
 80041ce:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80041d0:	d3f9      	bcc.n	80041c6 <FillZerobss>

/*
 * mynewt specific corebss clearing.
 */
  ldr   r2, =__corebss_start__
 80041d2:	4a0c      	ldr	r2, [pc, #48]	; (8004204 <LoopFillZeroCoreBss+0x28>)
  b     LoopFillZeroCoreBss
 80041d4:	e002      	b.n	80041dc <LoopFillZeroCoreBss>

080041d6 <FillZeroCoreBss>:

/* Zero fill the bss segment. */
FillZeroCoreBss:
  movs  r3, #0
 80041d6:	2300      	movs	r3, #0
  str   r3, [r2], #4
 80041d8:	f842 3b04 	str.w	r3, [r2], #4

080041dc <LoopFillZeroCoreBss>:

LoopFillZeroCoreBss:
  ldr   r3, =__corebss_end__
 80041dc:	4b0a      	ldr	r3, [pc, #40]	; (8004208 <LoopFillZeroCoreBss+0x2c>)
  cmp   r2, r3
 80041de:	429a      	cmp	r2, r3
  bcc   FillZeroCoreBss
 80041e0:	d3f9      	bcc.n	80041d6 <FillZeroCoreBss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80041e2:	f000 f815 	bl	8004210 <SystemInit>
/* Call the libc entry point.*/
  bl  _start
 80041e6:	f000 f851 	bl	800428c <_start>
 80041ea:	0000      	.short	0x0000
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80041ec:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 80041f0:	080188c8 	.word	0x080188c8
  ldr  r0, =_sdata
 80041f4:	20000188 	.word	0x20000188
  ldr  r3, =_edata
 80041f8:	20000368 	.word	0x20000368
  ldr  r2, =_sbss
 80041fc:	20000368 	.word	0x20000368
  ldr  r3, = _ebss
 8004200:	200039bc 	.word	0x200039bc
  ldr   r2, =__corebss_start__
 8004204:	20000368 	.word	0x20000368
  ldr   r3, =__corebss_end__
 8004208:	20000368 	.word	0x20000368

0800420c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800420c:	e7fe      	b.n	800420c <ADC1_2_IRQHandler>
	...

08004210 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004210:	b508      	push	{r3, lr}
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004212:	4a0f      	ldr	r2, [pc, #60]	; (8004250 <SystemInit+0x40>)
 8004214:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004218:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800421c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8004220:	4b0c      	ldr	r3, [pc, #48]	; (8004254 <SystemInit+0x44>)
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	f042 0201 	orr.w	r2, r2, #1
 8004228:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800422a:	2100      	movs	r1, #0
 800422c:	6099      	str	r1, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8004234:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8004238:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 800423a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800423e:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004246:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004248:	6199      	str	r1, [r3, #24]

  /* Relocate the vector table */
  NVIC_Relocate();
 800424a:	f000 f805 	bl	8004258 <NVIC_Relocate>
}
 800424e:	bd08      	pop	{r3, pc}
 8004250:	e000ed00 	.word	0xe000ed00
 8004254:	40021000 	.word	0x40021000

08004258 <NVIC_Relocate>:
     * designated in the linker script.
     */
    current_location = (uint32_t *)&__isr_vector;
    new_location = (uint32_t *)&__vector_tbl_reloc__;

    if (new_location != current_location) {
 8004258:	4a09      	ldr	r2, [pc, #36]	; (8004280 <NVIC_Relocate+0x28>)
 800425a:	4b0a      	ldr	r3, [pc, #40]	; (8004284 <NVIC_Relocate+0x2c>)
 800425c:	429a      	cmp	r2, r3
 800425e:	d00a      	beq.n	8004276 <NVIC_Relocate+0x1e>
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
 8004260:	2300      	movs	r3, #0
 8004262:	e006      	b.n	8004272 <NVIC_Relocate+0x1a>
            new_location[i] = current_location[i];
 8004264:	4a07      	ldr	r2, [pc, #28]	; (8004284 <NVIC_Relocate+0x2c>)
 8004266:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800426a:	4a05      	ldr	r2, [pc, #20]	; (8004280 <NVIC_Relocate+0x28>)
 800426c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
 8004270:	3301      	adds	r3, #1
 8004272:	2b61      	cmp	r3, #97	; 0x61
 8004274:	ddf6      	ble.n	8004264 <NVIC_Relocate+0xc>
    }

    /* Set VTOR except for M0 */
#if ((__CORTEX_M == 0) && (__VTOR_PRESENT == 0))
#else
    SCB->VTOR = (uint32_t)&__vector_tbl_reloc__;
 8004276:	4a02      	ldr	r2, [pc, #8]	; (8004280 <NVIC_Relocate+0x28>)
 8004278:	4b03      	ldr	r3, [pc, #12]	; (8004288 <NVIC_Relocate+0x30>)
 800427a:	609a      	str	r2, [r3, #8]
#endif
}
 800427c:	4770      	bx	lr
 800427e:	bf00      	nop
 8004280:	20000000 	.word	0x20000000
 8004284:	08004020 	.word	0x08004020
 8004288:	e000ed00 	.word	0xe000ed00

0800428c <_start>:

/*
 * Rudimentary startup function.
 */
void _start(void)
{
 800428c:	b508      	push	{r3, lr}
    int rc;

    rc = main(0, NULL);
    exit(rc);
#else
    os_init(main);
 800428e:	4803      	ldr	r0, [pc, #12]	; (800429c <_start+0x10>)
 8004290:	f008 fa9c 	bl	800c7cc <os_init>
    os_start();
 8004294:	f008 faf2 	bl	800c87c <os_start>
#endif
}
 8004298:	bd08      	pop	{r3, pc}
 800429a:	bf00      	nop
 800429c:	080042a3 	.word	0x080042a3

080042a0 <_init>:

void
_init(void)
{
}
 80042a0:	4770      	bx	lr

080042a2 <main>:
};

///  Main program that initialises the sensor, network driver and starts reading and sending sensor data in the background.
///  main() will be called at Mynewt startup. It replaces the C version of the main() function.
#[no_mangle]                 //  Don't mangle the name "main"
extern "C" fn main() -> ! {  //  Declare extern "C" because it will be called by Mynewt
 80042a2:	b088      	sub	sp, #32
    //  Initialise the Mynewt packages and Blue Pill internal temperature sensor driver.
    //  Start the CoAP / OIC Background Task to transmit CoAP messages.  Any startup
    //  functions defined in pkg.yml of our custom drivers and libraries will be called by 
    //  sysinit().  Here are the startup functions consolidated by Mynewt:
    //  bin/targets/bluepill_my_sensor/generated/src/bluepill_my_sensor-sysinit-app.c
    mynewt::sysinit();
 80042a4:	f000 f8d1 	bl	800444a <_ZN6mynewt7sysinit17hdf9acde92c8fdcd0E>
 80042a8:	e7ff      	b.n	80042aa <main+0x8>

    //  Start the Server Transport for sending sensor data to CoAP Server over NB-IoT.
    sensor_network::start_server_transport()
 80042aa:	f000 fbc9 	bl	8004a40 <_ZN6mynewt4libs14sensor_network22start_server_transport17h6009bbb3c25195b5E>
 80042ae:	9005      	str	r0, [sp, #20]
 80042b0:	e7ff      	b.n	80042b2 <main+0x10>
 80042b2:	f645 41b8 	movw	r1, #23736	; 0x5cb8
 80042b6:	f6c0 0101 	movt	r1, #2049	; 0x801
 80042ba:	2208      	movs	r2, #8
 80042bc:	9805      	ldr	r0, [sp, #20]
 80042be:	f001 fea0 	bl	8006002 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17ha550042fe08afe55E>
 80042c2:	e7ff      	b.n	80042c4 <main+0x22>
        .expect("NET fail");

    //  Start polling the temperature sensor every 10 seconds in the background.
    //  If this is a standby wakeup, the server transport must already be started.
    app_sensor::start_sensor_listener()
 80042c4:	f001 ff07 	bl	80060d6 <_ZN3app10app_sensor21start_sensor_listener17h188554d40be3fd49E>
 80042c8:	9004      	str	r0, [sp, #16]
 80042ca:	e7ff      	b.n	80042cc <main+0x2a>
 80042cc:	f645 41c0 	movw	r1, #23744	; 0x5cc0
 80042d0:	f6c0 0101 	movt	r1, #2049	; 0x801
 80042d4:	2208      	movs	r2, #8
 80042d6:	9804      	ldr	r0, [sp, #16]
 80042d8:	f001 fe93 	bl	8006002 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17ha550042fe08afe55E>
 80042dc:	e7ff      	b.n	80042de <main+0x3c>
        .expect("TMP fail");

    //  Start polling the GPS.
    gps_sensor::start_gps_listener()
 80042de:	f001 fd6a 	bl	8005db6 <_ZN3app10gps_sensor18start_gps_listener17hff4f7c9c3618b255E>
 80042e2:	9003      	str	r0, [sp, #12]
 80042e4:	e7ff      	b.n	80042e6 <main+0x44>
 80042e6:	f645 41c8 	movw	r1, #23752	; 0x5cc8
 80042ea:	f6c0 0101 	movt	r1, #2049	; 0x801
 80042ee:	2208      	movs	r2, #8
 80042f0:	9803      	ldr	r0, [sp, #12]
 80042f2:	f001 fe86 	bl	8006002 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17ha550042fe08afe55E>
 80042f6:	e7ff      	b.n	80042f8 <main+0x56>
        .expect("GPS fail");

    //  Main event loop
    loop {                            //  Loop forever...
 80042f8:	e7ff      	b.n	80042fa <main+0x58>
 80042fa:	a806      	add	r0, sp, #24
        os::eventq_run(               //  Processing events...
            os::eventq_dflt_get()     //  From default event queue.
 80042fc:	f001 f869 	bl	80053d2 <_ZN6mynewt6kernel2os15eventq_dflt_get17hc3569ee6b12f336bE>
 8004300:	e7ff      	b.n	8004302 <main+0x60>
 8004302:	f645 41d0 	movw	r1, #23760	; 0x5cd0
 8004306:	f6c0 0101 	movt	r1, #2049	; 0x801
 800430a:	a806      	add	r0, sp, #24
 800430c:	2208      	movs	r2, #8
 800430e:	f001 fe4b 	bl	8005fa8 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h30f9912194b1df84E>
 8004312:	9002      	str	r0, [sp, #8]
 8004314:	e7ff      	b.n	8004316 <main+0x74>
        os::eventq_run(               //  Processing events...
 8004316:	9802      	ldr	r0, [sp, #8]
 8004318:	f001 f84b 	bl	80053b2 <_ZN6mynewt6kernel2os10eventq_run17h6ef32da48f4d5d86E>
 800431c:	9001      	str	r0, [sp, #4]
 800431e:	e7ff      	b.n	8004320 <main+0x7e>
 8004320:	f645 41d8 	movw	r1, #23768	; 0x5cd8
 8004324:	f6c0 0101 	movt	r1, #2049	; 0x801
 8004328:	2208      	movs	r2, #8
 800432a:	9801      	ldr	r0, [sp, #4]
 800432c:	f001 fe69 	bl	8006002 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17ha550042fe08afe55E>
 8004330:	e7ff      	b.n	8004332 <main+0x90>
    loop {                            //  Loop forever...
 8004332:	e7e2      	b.n	80042fa <main+0x58>

08004334 <rust_begin_unwind>:
    //  Never comes here
}

///  This function is called on panic, like an assertion failure. We display the filename and line number and pause in the debugger. From https://os.phil-opp.com/freestanding-rust-binary/
#[panic_handler]
fn panic(info: &PanicInfo) -> ! {
 8004334:	b088      	sub	sp, #32
 8004336:	4601      	mov	r1, r0
 8004338:	9002      	str	r0, [sp, #8]
    //  Display the filename and line number to the Semihosting Console.
    console::print("panic ");
 800433a:	f645 40e0 	movw	r0, #23776	; 0x5ce0
 800433e:	f6c0 0001 	movt	r0, #2049	; 0x801
 8004342:	2206      	movs	r2, #6
 8004344:	9101      	str	r1, [sp, #4]
 8004346:	4611      	mov	r1, r2
 8004348:	f000 fb1e 	bl	8004988 <_ZN6mynewt3sys7console5print17ha0601e49e4927bc4E>
 800434c:	e7ff      	b.n	800434e <rust_begin_unwind+0x1a>
    if let Some(location) = info.location() {
 800434e:	9802      	ldr	r0, [sp, #8]
 8004350:	f004 f995 	bl	800867e <_ZN4core5panic9PanicInfo8location17h122f9d519f4a246bE>
 8004354:	9003      	str	r0, [sp, #12]
 8004356:	e7ff      	b.n	8004358 <rust_begin_unwind+0x24>
 8004358:	9803      	ldr	r0, [sp, #12]
 800435a:	2800      	cmp	r0, #0
 800435c:	d032      	beq.n	80043c4 <rust_begin_unwind+0x90>
 800435e:	e7ff      	b.n	8004360 <rust_begin_unwind+0x2c>
 8004360:	9803      	ldr	r0, [sp, #12]
 8004362:	9004      	str	r0, [sp, #16]
        let file = location.file();
 8004364:	9804      	ldr	r0, [sp, #16]
 8004366:	f004 f98c 	bl	8008682 <_ZN4core5panic8Location4file17ha9ce911e26883425E>
 800436a:	9106      	str	r1, [sp, #24]
 800436c:	9005      	str	r0, [sp, #20]
 800436e:	e7ff      	b.n	8004370 <rust_begin_unwind+0x3c>
        let line = location.line();
 8004370:	9804      	ldr	r0, [sp, #16]
 8004372:	f004 f98a 	bl	800868a <_ZN4core5panic8Location4line17h997c0352f671f211E>
 8004376:	9007      	str	r0, [sp, #28]
 8004378:	e7ff      	b.n	800437a <rust_begin_unwind+0x46>
        console::print("at ");       console::buffer(&file);
 800437a:	f645 40ed 	movw	r0, #23789	; 0x5ced
 800437e:	f6c0 0001 	movt	r0, #2049	; 0x801
 8004382:	2103      	movs	r1, #3
 8004384:	f000 fb00 	bl	8004988 <_ZN6mynewt3sys7console5print17ha0601e49e4927bc4E>
 8004388:	e7ff      	b.n	800438a <rust_begin_unwind+0x56>
 800438a:	9805      	ldr	r0, [sp, #20]
 800438c:	9906      	ldr	r1, [sp, #24]
 800438e:	f000 fb2c 	bl	80049ea <_ZN6mynewt3sys7console6buffer17h37b7b8db742c4e2fE>
 8004392:	e7ff      	b.n	8004394 <rust_begin_unwind+0x60>
        console::print(" line ");    console::printint(line as i32);
 8004394:	f645 40f0 	movw	r0, #23792	; 0x5cf0
 8004398:	f6c0 0001 	movt	r0, #2049	; 0x801
 800439c:	2106      	movs	r1, #6
 800439e:	f000 faf3 	bl	8004988 <_ZN6mynewt3sys7console5print17ha0601e49e4927bc4E>
 80043a2:	e7ff      	b.n	80043a4 <rust_begin_unwind+0x70>
 80043a4:	9807      	ldr	r0, [sp, #28]
 80043a6:	f000 fb3b 	bl	8004a20 <_ZN6mynewt3sys7console8printint17h0f8f736d6c26b18aE>
 80043aa:	e7ff      	b.n	80043ac <rust_begin_unwind+0x78>
        console::print("\n");        console::flush();
 80043ac:	f645 40f6 	movw	r0, #23798	; 0x5cf6
 80043b0:	f6c0 0001 	movt	r0, #2049	; 0x801
 80043b4:	2101      	movs	r1, #1
 80043b6:	f000 fae7 	bl	8004988 <_ZN6mynewt3sys7console5print17ha0601e49e4927bc4E>
 80043ba:	e7ff      	b.n	80043bc <rust_begin_unwind+0x88>
 80043bc:	f000 fb3b 	bl	8004a36 <_ZN6mynewt3sys7console5flush17h6e6adb2d6c74f9b0E>
 80043c0:	e7ff      	b.n	80043c2 <rust_begin_unwind+0x8e>
    if let Some(location) = info.location() {
 80043c2:	e00a      	b.n	80043da <rust_begin_unwind+0xa6>
    } else {
        console::print("no loc\n");  console::flush();
 80043c4:	f645 40e6 	movw	r0, #23782	; 0x5ce6
 80043c8:	f6c0 0001 	movt	r0, #2049	; 0x801
 80043cc:	2107      	movs	r1, #7
 80043ce:	f000 fadb 	bl	8004988 <_ZN6mynewt3sys7console5print17ha0601e49e4927bc4E>
 80043d2:	e7ff      	b.n	80043d4 <rust_begin_unwind+0xa0>
 80043d4:	f000 fb2f 	bl	8004a36 <_ZN6mynewt3sys7console5flush17h6e6adb2d6c74f9b0E>
 80043d8:	e7ff      	b.n	80043da <rust_begin_unwind+0xa6>
/// exception.
#[inline(always)]
pub fn bkpt() {
    match () {
        #[cfg(all(cortex_m, feature = "inline-asm"))]
        () => unsafe { asm!("bkpt" :::: "volatile") },
 80043da:	be00      	bkpt	0x0000
    }
    //  Pause in the debugger.
    bkpt();
 80043dc:	e7ff      	b.n	80043de <rust_begin_unwind+0xaa>
    //  Loop forever so that device won't restart.
    loop {}
 80043de:	e7fe      	b.n	80043de <rust_begin_unwind+0xaa>

080043e0 <_ZN84_$LT$mynewt..Strn$u20$as$u20$mynewt..encoding..coap_context..ToBytesOptionalNull$GT$21to_bytes_optional_nul17h130831040ce73c29E>:
}

/// Convert the type to array of bytes that may or may not end with null. Strn always ends with null.
impl ToBytesOptionalNull for crate::Strn {
    /// Convert the type to array of bytes that may or may not end with null. Strn always ends with null.
    fn to_bytes_optional_nul(&self) -> &[u8] {
 80043e0:	b088      	sub	sp, #32
 80043e2:	4601      	mov	r1, r0
 80043e4:	9002      	str	r0, [sp, #8]
        match self.rep {
            StrnRep::ByteStr(bs) => { bs }
 80043e6:	9802      	ldr	r0, [sp, #8]
 80043e8:	7800      	ldrb	r0, [r0, #0]
 80043ea:	07c2      	lsls	r2, r0, #31
 80043ec:	2a00      	cmp	r2, #0
 80043ee:	9101      	str	r1, [sp, #4]
 80043f0:	9000      	str	r0, [sp, #0]
 80043f2:	d006      	beq.n	8004402 <_ZN84_$LT$mynewt..Strn$u20$as$u20$mynewt..encoding..coap_context..ToBytesOptionalNull$GT$21to_bytes_optional_nul17h130831040ce73c29E+0x22>
 80043f4:	e7ff      	b.n	80043f6 <_ZN84_$LT$mynewt..Strn$u20$as$u20$mynewt..encoding..coap_context..ToBytesOptionalNull$GT$21to_bytes_optional_nul17h130831040ce73c29E+0x16>
 80043f6:	9800      	ldr	r0, [sp, #0]
 80043f8:	b2c1      	uxtb	r1, r0
 80043fa:	2901      	cmp	r1, #1
 80043fc:	d00b      	beq.n	8004416 <_ZN84_$LT$mynewt..Strn$u20$as$u20$mynewt..encoding..coap_context..ToBytesOptionalNull$GT$21to_bytes_optional_nul17h130831040ce73c29E+0x36>
 80043fe:	e7ff      	b.n	8004400 <_ZN84_$LT$mynewt..Strn$u20$as$u20$mynewt..encoding..coap_context..ToBytesOptionalNull$GT$21to_bytes_optional_nul17h130831040ce73c29E+0x20>
            StrnRep::CStr(_cstr)  => { assert!(false, "strn bytes"); &[] }
            //  TODO: unsafe { ::core::mem::transmute::<*const u8, &[u8]>(cstr) }
        }
    }
 8004400:	defe      	udf	#254	; 0xfe
            StrnRep::ByteStr(bs) => { bs }
 8004402:	9802      	ldr	r0, [sp, #8]
 8004404:	6841      	ldr	r1, [r0, #4]
 8004406:	6880      	ldr	r0, [r0, #8]
 8004408:	9105      	str	r1, [sp, #20]
 800440a:	9006      	str	r0, [sp, #24]
 800440c:	9805      	ldr	r0, [sp, #20]
 800440e:	9906      	ldr	r1, [sp, #24]
 8004410:	9003      	str	r0, [sp, #12]
 8004412:	9104      	str	r1, [sp, #16]
        match self.rep {
 8004414:	e015      	b.n	8004442 <_ZN84_$LT$mynewt..Strn$u20$as$u20$mynewt..encoding..coap_context..ToBytesOptionalNull$GT$21to_bytes_optional_nul17h130831040ce73c29E+0x62>
            StrnRep::CStr(_cstr)  => { assert!(false, "strn bytes"); &[] }
 8004416:	9802      	ldr	r0, [sp, #8]
 8004418:	6840      	ldr	r0, [r0, #4]
 800441a:	9007      	str	r0, [sp, #28]
 800441c:	2000      	movs	r0, #0
 800441e:	2800      	cmp	r0, #0
 8004420:	d107      	bne.n	8004432 <_ZN84_$LT$mynewt..Strn$u20$as$u20$mynewt..encoding..coap_context..ToBytesOptionalNull$GT$21to_bytes_optional_nul17h130831040ce73c29E+0x52>
 8004422:	e7ff      	b.n	8004424 <_ZN84_$LT$mynewt..Strn$u20$as$u20$mynewt..encoding..coap_context..ToBytesOptionalNull$GT$21to_bytes_optional_nul17h130831040ce73c29E+0x44>
 8004424:	f645 502c 	movw	r0, #23852	; 0x5d2c
 8004428:	f6c0 0001 	movt	r0, #2049	; 0x801
 800442c:	f004 f92f 	bl	800868e <_ZN4core9panicking5panic17h138a849f37d3ac2dE>
 8004430:	defe      	udf	#254	; 0xfe
 8004432:	f645 5044 	movw	r0, #23876	; 0x5d44
 8004436:	f6c0 0001 	movt	r0, #2049	; 0x801
 800443a:	9003      	str	r0, [sp, #12]
 800443c:	2000      	movs	r0, #0
 800443e:	9004      	str	r0, [sp, #16]
    }
 8004440:	e7ff      	b.n	8004442 <_ZN84_$LT$mynewt..Strn$u20$as$u20$mynewt..encoding..coap_context..ToBytesOptionalNull$GT$21to_bytes_optional_nul17h130831040ce73c29E+0x62>
 8004442:	9803      	ldr	r0, [sp, #12]
 8004444:	9904      	ldr	r1, [sp, #16]
 8004446:	b008      	add	sp, #32
 8004448:	4770      	bx	lr

0800444a <_ZN6mynewt7sysinit17hdf9acde92c8fdcd0E>:
#[allow(non_camel_case_types)]    //  Allow type names to have non-camel case
#[allow(non_upper_case_globals)]  //  Allow globals to have lowercase letters
pub mod libs;                     //  Mynewt Custom API. Export folder `libs` as Rust module `mynewt::libs`

///  Initialise the Mynewt system.  Start the Mynewt drivers and libraries.  Equivalent to `sysinit()` macro in C.
pub fn sysinit() {
 800444a:	b580      	push	{r7, lr}
    unsafe { rust_sysinit(); }
 800444c:	f00a fcfc 	bl	800ee48 <rust_sysinit>
 8004450:	e7ff      	b.n	8004452 <_ZN6mynewt7sysinit17hdf9acde92c8fdcd0E+0x8>
    sys::console::flush();
 8004452:	f000 faf0 	bl	8004a36 <_ZN6mynewt3sys7console5flush17h6e6adb2d6c74f9b0E>
 8004456:	e7ff      	b.n	8004458 <_ZN6mynewt7sysinit17hdf9acde92c8fdcd0E+0xe>
}
 8004458:	bd80      	pop	{r7, pc}

0800445a <_ZN6mynewt4Strn3new17h7c61c05e22ecd5faE>:
    /// Create a new `Strn` with a byte string. Fail if the last byte is not zero.
    /// ```
    /// Strn::new(b"network\0")
    /// strn!("network")
    /// ```
    pub fn new(bs: &'static [u8]) -> Strn {
 800445a:	b5b0      	push	{r4, r5, r7, lr}
 800445c:	b0b0      	sub	sp, #192	; 0xc0
 800445e:	4613      	mov	r3, r2
 8004460:	468c      	mov	ip, r1
 8004462:	910c      	str	r1, [sp, #48]	; 0x30
 8004464:	920d      	str	r2, [sp, #52]	; 0x34
        assert_eq!(bs.last(), Some(&0u8), "no null");  //  Last byte must be 0.
 8004466:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004468:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800446a:	900b      	str	r0, [sp, #44]	; 0x2c
 800446c:	4608      	mov	r0, r1
 800446e:	4611      	mov	r1, r2
 8004470:	930a      	str	r3, [sp, #40]	; 0x28
 8004472:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 8004476:	f001 fb55 	bl	8005b24 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h9f79003d40cdc30eE>
 800447a:	9010      	str	r0, [sp, #64]	; 0x40
 800447c:	e7ff      	b.n	800447e <_ZN6mynewt4Strn3new17h7c61c05e22ecd5faE+0x24>
 800447e:	a810      	add	r0, sp, #64	; 0x40
 8004480:	900e      	str	r0, [sp, #56]	; 0x38
 8004482:	f645 5048 	movw	r0, #23880	; 0x5d48
 8004486:	f6c0 0001 	movt	r0, #2049	; 0x801
 800448a:	900f      	str	r0, [sp, #60]	; 0x3c
 800448c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800448e:	9011      	str	r0, [sp, #68]	; 0x44
 8004490:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004492:	9012      	str	r0, [sp, #72]	; 0x48
 8004494:	9811      	ldr	r0, [sp, #68]	; 0x44
 8004496:	9912      	ldr	r1, [sp, #72]	; 0x48
 8004498:	f000 fe56 	bl	8005148 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17h70df41bf340d2af5E>
 800449c:	9008      	str	r0, [sp, #32]
 800449e:	e7ff      	b.n	80044a0 <_ZN6mynewt4Strn3new17h7c61c05e22ecd5faE+0x46>
 80044a0:	9808      	ldr	r0, [sp, #32]
 80044a2:	07c1      	lsls	r1, r0, #31
 80044a4:	2900      	cmp	r1, #0
 80044a6:	d163      	bne.n	8004570 <_ZN6mynewt4Strn3new17h7c61c05e22ecd5faE+0x116>
 80044a8:	e7ff      	b.n	80044aa <_ZN6mynewt4Strn3new17h7c61c05e22ecd5faE+0x50>
 80044aa:	9811      	ldr	r0, [sp, #68]	; 0x44
 80044ac:	9022      	str	r0, [sp, #136]	; 0x88
 80044ae:	9812      	ldr	r0, [sp, #72]	; 0x48
 80044b0:	9023      	str	r0, [sp, #140]	; 0x8c
 80044b2:	4668      	mov	r0, sp
 80044b4:	2100      	movs	r1, #0
 80044b6:	6001      	str	r1, [r0, #0]
 80044b8:	f645 51a8 	movw	r1, #23976	; 0x5da8
 80044bc:	f6c0 0101 	movt	r1, #2049	; 0x801
 80044c0:	f645 5344 	movw	r3, #23876	; 0x5d44
 80044c4:	f6c0 0301 	movt	r3, #2049	; 0x801
 80044c8:	a824      	add	r0, sp, #144	; 0x90
 80044ca:	2201      	movs	r2, #1
 80044cc:	f000 fc5e 	bl	8004d8c <_ZN4core3fmt9Arguments6new_v117h7b18277453f88ac4E>
 80044d0:	e7ff      	b.n	80044d2 <_ZN6mynewt4Strn3new17h7c61c05e22ecd5faE+0x78>
 80044d2:	a822      	add	r0, sp, #136	; 0x88
 80044d4:	901f      	str	r0, [sp, #124]	; 0x7c
 80044d6:	a823      	add	r0, sp, #140	; 0x8c
 80044d8:	9020      	str	r0, [sp, #128]	; 0x80
 80044da:	a824      	add	r0, sp, #144	; 0x90
 80044dc:	9021      	str	r0, [sp, #132]	; 0x84
 80044de:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80044e0:	902a      	str	r0, [sp, #168]	; 0xa8
 80044e2:	9820      	ldr	r0, [sp, #128]	; 0x80
 80044e4:	902b      	str	r0, [sp, #172]	; 0xac
 80044e6:	9821      	ldr	r0, [sp, #132]	; 0x84
 80044e8:	902c      	str	r0, [sp, #176]	; 0xb0
 80044ea:	982a      	ldr	r0, [sp, #168]	; 0xa8
 80044ec:	f644 71c1 	movw	r1, #20417	; 0x4fc1
 80044f0:	f6c0 0100 	movt	r1, #2048	; 0x800
 80044f4:	f000 fbb4 	bl	8004c60 <_ZN4core3fmt10ArgumentV13new17ha4bd00c3a822e50cE>
 80044f8:	9007      	str	r0, [sp, #28]
 80044fa:	9106      	str	r1, [sp, #24]
 80044fc:	e7ff      	b.n	80044fe <_ZN6mynewt4Strn3new17h7c61c05e22ecd5faE+0xa4>
 80044fe:	982b      	ldr	r0, [sp, #172]	; 0xac
 8004500:	f644 71c1 	movw	r1, #20417	; 0x4fc1
 8004504:	f6c0 0100 	movt	r1, #2048	; 0x800
 8004508:	f000 fbaa 	bl	8004c60 <_ZN4core3fmt10ArgumentV13new17ha4bd00c3a822e50cE>
 800450c:	9005      	str	r0, [sp, #20]
 800450e:	9104      	str	r1, [sp, #16]
 8004510:	e7ff      	b.n	8004512 <_ZN6mynewt4Strn3new17h7c61c05e22ecd5faE+0xb8>
 8004512:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8004514:	f249 0185 	movw	r1, #36997	; 0x9085
 8004518:	f6c0 0100 	movt	r1, #2048	; 0x800
 800451c:	f000 fc1d 	bl	8004d5a <_ZN4core3fmt10ArgumentV13new17hf7ba76b3ae396a12E>
 8004520:	9003      	str	r0, [sp, #12]
 8004522:	9102      	str	r1, [sp, #8]
 8004524:	e7ff      	b.n	8004526 <_ZN6mynewt4Strn3new17h7c61c05e22ecd5faE+0xcc>
 8004526:	9807      	ldr	r0, [sp, #28]
 8004528:	9019      	str	r0, [sp, #100]	; 0x64
 800452a:	9906      	ldr	r1, [sp, #24]
 800452c:	911a      	str	r1, [sp, #104]	; 0x68
 800452e:	9a05      	ldr	r2, [sp, #20]
 8004530:	921b      	str	r2, [sp, #108]	; 0x6c
 8004532:	9b04      	ldr	r3, [sp, #16]
 8004534:	931c      	str	r3, [sp, #112]	; 0x70
 8004536:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800453a:	f8cd c074 	str.w	ip, [sp, #116]	; 0x74
 800453e:	f8dd e008 	ldr.w	lr, [sp, #8]
 8004542:	f8cd e078 	str.w	lr, [sp, #120]	; 0x78
 8004546:	466c      	mov	r4, sp
 8004548:	2503      	movs	r5, #3
 800454a:	6025      	str	r5, [r4, #0]
 800454c:	f645 5188 	movw	r1, #23944	; 0x5d88
 8004550:	f6c0 0101 	movt	r1, #2049	; 0x801
 8004554:	a813      	add	r0, sp, #76	; 0x4c
 8004556:	ab19      	add	r3, sp, #100	; 0x64
 8004558:	462a      	mov	r2, r5
 800455a:	f000 fc17 	bl	8004d8c <_ZN4core3fmt9Arguments6new_v117h7b18277453f88ac4E>
 800455e:	e7ff      	b.n	8004560 <_ZN6mynewt4Strn3new17h7c61c05e22ecd5faE+0x106>
 8004560:	f645 51c8 	movw	r1, #24008	; 0x5dc8
 8004564:	f6c0 0101 	movt	r1, #2049	; 0x801
 8004568:	a813      	add	r0, sp, #76	; 0x4c
 800456a:	f004 f8cd 	bl	8008708 <_ZN4core9panicking9panic_fmt17hbfe32cf8392a510cE>
 800456e:	defe      	udf	#254	; 0xfe
        Strn { 
            rep: StrnRep::ByteStr(bs)
 8004570:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004572:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004574:	902e      	str	r0, [sp, #184]	; 0xb8
 8004576:	912f      	str	r1, [sp, #188]	; 0xbc
 8004578:	2000      	movs	r0, #0
 800457a:	f88d 00b4 	strb.w	r0, [sp, #180]	; 0xb4
        Strn { 
 800457e:	982d      	ldr	r0, [sp, #180]	; 0xb4
 8004580:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8004582:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8004584:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004586:	609a      	str	r2, [r3, #8]
 8004588:	6059      	str	r1, [r3, #4]
 800458a:	6018      	str	r0, [r3, #0]
        }
    }
 800458c:	b030      	add	sp, #192	; 0xc0
 800458e:	bdb0      	pop	{r4, r5, r7, pc}

08004590 <_ZN6mynewt4Strn9from_cstr17h9a7495b7f5601cb6E>:

    /// Create a new `Strn` with a null-terminated string pointer returned by C.
    pub fn from_cstr(cstr: *const u8) -> Strn {
 8004590:	b580      	push	{r7, lr}
 8004592:	b086      	sub	sp, #24
 8004594:	460a      	mov	r2, r1
 8004596:	4603      	mov	r3, r0
 8004598:	9102      	str	r1, [sp, #8]
        Strn { 
            rep: StrnRep::CStr(cstr)
 800459a:	9902      	ldr	r1, [sp, #8]
 800459c:	9104      	str	r1, [sp, #16]
 800459e:	2101      	movs	r1, #1
 80045a0:	f88d 100c 	strb.w	r1, [sp, #12]
        Strn { 
 80045a4:	9903      	ldr	r1, [sp, #12]
 80045a6:	f8dd c010 	ldr.w	ip, [sp, #16]
 80045aa:	f8dd e014 	ldr.w	lr, [sp, #20]
 80045ae:	f8c0 e008 	str.w	lr, [r0, #8]
 80045b2:	f8c0 c004 	str.w	ip, [r0, #4]
 80045b6:	6001      	str	r1, [r0, #0]
        }
    }
 80045b8:	9201      	str	r2, [sp, #4]
 80045ba:	9300      	str	r3, [sp, #0]
 80045bc:	b006      	add	sp, #24
 80045be:	bd80      	pop	{r7, pc}

080045c0 <_ZN6mynewt4Strn6as_ptr17h2aca29768dacdb60E>:

    /// Return a pointer to the string
    pub fn as_ptr(&self) -> *const u8 {
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b088      	sub	sp, #32
 80045c4:	4601      	mov	r1, r0
 80045c6:	9003      	str	r0, [sp, #12]
        match self.rep {
            StrnRep::ByteStr(bs) => { bs.as_ptr() }
 80045c8:	9803      	ldr	r0, [sp, #12]
 80045ca:	7800      	ldrb	r0, [r0, #0]
 80045cc:	07c2      	lsls	r2, r0, #31
 80045ce:	2a00      	cmp	r2, #0
 80045d0:	9102      	str	r1, [sp, #8]
 80045d2:	9001      	str	r0, [sp, #4]
 80045d4:	d006      	beq.n	80045e4 <_ZN6mynewt4Strn6as_ptr17h2aca29768dacdb60E+0x24>
 80045d6:	e7ff      	b.n	80045d8 <_ZN6mynewt4Strn6as_ptr17h2aca29768dacdb60E+0x18>
 80045d8:	9801      	ldr	r0, [sp, #4]
 80045da:	b2c1      	uxtb	r1, r0
 80045dc:	2901      	cmp	r1, #1
 80045de:	d00d      	beq.n	80045fc <_ZN6mynewt4Strn6as_ptr17h2aca29768dacdb60E+0x3c>
 80045e0:	e7ff      	b.n	80045e2 <_ZN6mynewt4Strn6as_ptr17h2aca29768dacdb60E+0x22>
            StrnRep::CStr(cstr)  => { cstr }
        }
    }
 80045e2:	defe      	udf	#254	; 0xfe
            StrnRep::ByteStr(bs) => { bs.as_ptr() }
 80045e4:	9803      	ldr	r0, [sp, #12]
 80045e6:	6841      	ldr	r1, [r0, #4]
 80045e8:	6880      	ldr	r0, [r0, #8]
 80045ea:	9105      	str	r1, [sp, #20]
 80045ec:	9006      	str	r0, [sp, #24]
 80045ee:	9805      	ldr	r0, [sp, #20]
 80045f0:	9906      	ldr	r1, [sp, #24]
 80045f2:	f002 fbf9 	bl	8006de8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hdef04f6d8168bdb2E>
 80045f6:	9004      	str	r0, [sp, #16]
 80045f8:	e7ff      	b.n	80045fa <_ZN6mynewt4Strn6as_ptr17h2aca29768dacdb60E+0x3a>
        match self.rep {
 80045fa:	e005      	b.n	8004608 <_ZN6mynewt4Strn6as_ptr17h2aca29768dacdb60E+0x48>
            StrnRep::CStr(cstr)  => { cstr }
 80045fc:	9803      	ldr	r0, [sp, #12]
 80045fe:	6840      	ldr	r0, [r0, #4]
 8004600:	9007      	str	r0, [sp, #28]
 8004602:	9807      	ldr	r0, [sp, #28]
 8004604:	9004      	str	r0, [sp, #16]
        match self.rep {
 8004606:	e7ff      	b.n	8004608 <_ZN6mynewt4Strn6as_ptr17h2aca29768dacdb60E+0x48>
    }
 8004608:	9804      	ldr	r0, [sp, #16]
 800460a:	b008      	add	sp, #32
 800460c:	bd80      	pop	{r7, pc}

0800460e <_ZN6mynewt4Strn3len17h86b1e18ee358b80eE>:

    /// Return the length of the string, excluding the terminating null. For safety, we limit to 128.
    pub fn len(&self) -> usize {
 800460e:	b5b0      	push	{r4, r5, r7, lr}
 8004610:	b0c0      	sub	sp, #256	; 0x100
 8004612:	4601      	mov	r1, r0
 8004614:	9012      	str	r0, [sp, #72]	; 0x48
        match self.rep {
            StrnRep::ByteStr(bs) => { 
 8004616:	9812      	ldr	r0, [sp, #72]	; 0x48
 8004618:	7800      	ldrb	r0, [r0, #0]
 800461a:	07c2      	lsls	r2, r0, #31
 800461c:	2a00      	cmp	r2, #0
 800461e:	9111      	str	r1, [sp, #68]	; 0x44
 8004620:	9010      	str	r0, [sp, #64]	; 0x40
 8004622:	d007      	beq.n	8004634 <_ZN6mynewt4Strn3len17h86b1e18ee358b80eE+0x26>
 8004624:	e7ff      	b.n	8004626 <_ZN6mynewt4Strn3len17h86b1e18ee358b80eE+0x18>
 8004626:	9810      	ldr	r0, [sp, #64]	; 0x40
 8004628:	b2c1      	uxtb	r1, r0
 800462a:	2901      	cmp	r1, #1
 800462c:	f000 8095 	beq.w	800475a <_ZN6mynewt4Strn3len17h86b1e18ee358b80eE+0x14c>
 8004630:	e7ff      	b.n	8004632 <_ZN6mynewt4Strn3len17h86b1e18ee358b80eE+0x24>
                }
                assert!(false, "big strn");  //  String too long
                return 128 as usize;
            }
        }
    }
 8004632:	defe      	udf	#254	; 0xfe
            StrnRep::ByteStr(bs) => { 
 8004634:	9812      	ldr	r0, [sp, #72]	; 0x48
 8004636:	6841      	ldr	r1, [r0, #4]
 8004638:	6880      	ldr	r0, [r0, #8]
 800463a:	9114      	str	r1, [sp, #80]	; 0x50
 800463c:	9015      	str	r0, [sp, #84]	; 0x54
                assert_eq!(bs.last(), Some(&0u8), "no null");  //  Last byte must be 0.
 800463e:	9814      	ldr	r0, [sp, #80]	; 0x50
 8004640:	9915      	ldr	r1, [sp, #84]	; 0x54
 8004642:	f001 fa6f 	bl	8005b24 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h9f79003d40cdc30eE>
 8004646:	9018      	str	r0, [sp, #96]	; 0x60
 8004648:	e7ff      	b.n	800464a <_ZN6mynewt4Strn3len17h86b1e18ee358b80eE+0x3c>
 800464a:	a818      	add	r0, sp, #96	; 0x60
 800464c:	9016      	str	r0, [sp, #88]	; 0x58
 800464e:	f645 5048 	movw	r0, #23880	; 0x5d48
 8004652:	f6c0 0001 	movt	r0, #2049	; 0x801
 8004656:	9017      	str	r0, [sp, #92]	; 0x5c
 8004658:	9816      	ldr	r0, [sp, #88]	; 0x58
 800465a:	9019      	str	r0, [sp, #100]	; 0x64
 800465c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800465e:	901a      	str	r0, [sp, #104]	; 0x68
 8004660:	9819      	ldr	r0, [sp, #100]	; 0x64
 8004662:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004664:	f000 fd70 	bl	8005148 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17h70df41bf340d2af5E>
 8004668:	900f      	str	r0, [sp, #60]	; 0x3c
 800466a:	e7ff      	b.n	800466c <_ZN6mynewt4Strn3len17h86b1e18ee358b80eE+0x5e>
 800466c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800466e:	07c1      	lsls	r1, r0, #31
 8004670:	2900      	cmp	r1, #0
 8004672:	d163      	bne.n	800473c <_ZN6mynewt4Strn3len17h86b1e18ee358b80eE+0x12e>
 8004674:	e7ff      	b.n	8004676 <_ZN6mynewt4Strn3len17h86b1e18ee358b80eE+0x68>
 8004676:	9819      	ldr	r0, [sp, #100]	; 0x64
 8004678:	902a      	str	r0, [sp, #168]	; 0xa8
 800467a:	981a      	ldr	r0, [sp, #104]	; 0x68
 800467c:	902b      	str	r0, [sp, #172]	; 0xac
 800467e:	4668      	mov	r0, sp
 8004680:	2100      	movs	r1, #0
 8004682:	6001      	str	r1, [r0, #0]
 8004684:	f645 51a8 	movw	r1, #23976	; 0x5da8
 8004688:	f6c0 0101 	movt	r1, #2049	; 0x801
 800468c:	f645 5344 	movw	r3, #23876	; 0x5d44
 8004690:	f6c0 0301 	movt	r3, #2049	; 0x801
 8004694:	a82c      	add	r0, sp, #176	; 0xb0
 8004696:	2201      	movs	r2, #1
 8004698:	f000 fb78 	bl	8004d8c <_ZN4core3fmt9Arguments6new_v117h7b18277453f88ac4E>
 800469c:	e7ff      	b.n	800469e <_ZN6mynewt4Strn3len17h86b1e18ee358b80eE+0x90>
 800469e:	a82a      	add	r0, sp, #168	; 0xa8
 80046a0:	9027      	str	r0, [sp, #156]	; 0x9c
 80046a2:	a82b      	add	r0, sp, #172	; 0xac
 80046a4:	9028      	str	r0, [sp, #160]	; 0xa0
 80046a6:	a82c      	add	r0, sp, #176	; 0xb0
 80046a8:	9029      	str	r0, [sp, #164]	; 0xa4
 80046aa:	9827      	ldr	r0, [sp, #156]	; 0x9c
 80046ac:	9032      	str	r0, [sp, #200]	; 0xc8
 80046ae:	9828      	ldr	r0, [sp, #160]	; 0xa0
 80046b0:	9033      	str	r0, [sp, #204]	; 0xcc
 80046b2:	9829      	ldr	r0, [sp, #164]	; 0xa4
 80046b4:	9034      	str	r0, [sp, #208]	; 0xd0
 80046b6:	9832      	ldr	r0, [sp, #200]	; 0xc8
 80046b8:	f644 71c1 	movw	r1, #20417	; 0x4fc1
 80046bc:	f6c0 0100 	movt	r1, #2048	; 0x800
 80046c0:	f000 face 	bl	8004c60 <_ZN4core3fmt10ArgumentV13new17ha4bd00c3a822e50cE>
 80046c4:	900e      	str	r0, [sp, #56]	; 0x38
 80046c6:	910d      	str	r1, [sp, #52]	; 0x34
 80046c8:	e7ff      	b.n	80046ca <_ZN6mynewt4Strn3len17h86b1e18ee358b80eE+0xbc>
 80046ca:	9833      	ldr	r0, [sp, #204]	; 0xcc
 80046cc:	f644 71c1 	movw	r1, #20417	; 0x4fc1
 80046d0:	f6c0 0100 	movt	r1, #2048	; 0x800
 80046d4:	f000 fac4 	bl	8004c60 <_ZN4core3fmt10ArgumentV13new17ha4bd00c3a822e50cE>
 80046d8:	900c      	str	r0, [sp, #48]	; 0x30
 80046da:	910b      	str	r1, [sp, #44]	; 0x2c
 80046dc:	e7ff      	b.n	80046de <_ZN6mynewt4Strn3len17h86b1e18ee358b80eE+0xd0>
 80046de:	9834      	ldr	r0, [sp, #208]	; 0xd0
 80046e0:	f249 0185 	movw	r1, #36997	; 0x9085
 80046e4:	f6c0 0100 	movt	r1, #2048	; 0x800
 80046e8:	f000 fb37 	bl	8004d5a <_ZN4core3fmt10ArgumentV13new17hf7ba76b3ae396a12E>
 80046ec:	900a      	str	r0, [sp, #40]	; 0x28
 80046ee:	9109      	str	r1, [sp, #36]	; 0x24
 80046f0:	e7ff      	b.n	80046f2 <_ZN6mynewt4Strn3len17h86b1e18ee358b80eE+0xe4>
 80046f2:	980e      	ldr	r0, [sp, #56]	; 0x38
 80046f4:	9021      	str	r0, [sp, #132]	; 0x84
 80046f6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80046f8:	9122      	str	r1, [sp, #136]	; 0x88
 80046fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80046fc:	9223      	str	r2, [sp, #140]	; 0x8c
 80046fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004700:	9324      	str	r3, [sp, #144]	; 0x90
 8004702:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 8004706:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
 800470a:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 800470e:	f8cd e098 	str.w	lr, [sp, #152]	; 0x98
 8004712:	466c      	mov	r4, sp
 8004714:	2503      	movs	r5, #3
 8004716:	6025      	str	r5, [r4, #0]
 8004718:	f645 5188 	movw	r1, #23944	; 0x5d88
 800471c:	f6c0 0101 	movt	r1, #2049	; 0x801
 8004720:	a81b      	add	r0, sp, #108	; 0x6c
 8004722:	ab21      	add	r3, sp, #132	; 0x84
 8004724:	462a      	mov	r2, r5
 8004726:	f000 fb31 	bl	8004d8c <_ZN4core3fmt9Arguments6new_v117h7b18277453f88ac4E>
 800472a:	e7ff      	b.n	800472c <_ZN6mynewt4Strn3len17h86b1e18ee358b80eE+0x11e>
 800472c:	f645 6154 	movw	r1, #24148	; 0x5e54
 8004730:	f6c0 0101 	movt	r1, #2049	; 0x801
 8004734:	a81b      	add	r0, sp, #108	; 0x6c
 8004736:	f003 ffe7 	bl	8008708 <_ZN4core9panicking9panic_fmt17hbfe32cf8392a510cE>
 800473a:	defe      	udf	#254	; 0xfe
                bs.len() - 1  //  Don't count the terminating null.
 800473c:	9814      	ldr	r0, [sp, #80]	; 0x50
 800473e:	9915      	ldr	r1, [sp, #84]	; 0x54
 8004740:	f002 fb44 	bl	8006dcc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h12b66ceea47b68d2E>
 8004744:	9008      	str	r0, [sp, #32]
 8004746:	e7ff      	b.n	8004748 <_ZN6mynewt4Strn3len17h86b1e18ee358b80eE+0x13a>
 8004748:	9808      	ldr	r0, [sp, #32]
 800474a:	1e41      	subs	r1, r0, #1
 800474c:	2801      	cmp	r0, #1
 800474e:	9107      	str	r1, [sp, #28]
 8004750:	d365      	bcc.n	800481e <_ZN6mynewt4Strn3len17h86b1e18ee358b80eE+0x210>
 8004752:	e7ff      	b.n	8004754 <_ZN6mynewt4Strn3len17h86b1e18ee358b80eE+0x146>
 8004754:	9807      	ldr	r0, [sp, #28]
 8004756:	9013      	str	r0, [sp, #76]	; 0x4c
        match self.rep {
 8004758:	e00f      	b.n	800477a <_ZN6mynewt4Strn3len17h86b1e18ee358b80eE+0x16c>
            StrnRep::CStr(cstr)  => { 
 800475a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800475c:	6840      	ldr	r0, [r0, #4]
 800475e:	9035      	str	r0, [sp, #212]	; 0xd4
                if cstr.is_null() { return 0; }
 8004760:	9835      	ldr	r0, [sp, #212]	; 0xd4
 8004762:	f002 f9a4 	bl	8006aae <_ZN4core3ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h7d5d72e646b2abd7E>
 8004766:	9006      	str	r0, [sp, #24]
 8004768:	e7ff      	b.n	800476a <_ZN6mynewt4Strn3len17h86b1e18ee358b80eE+0x15c>
 800476a:	9806      	ldr	r0, [sp, #24]
 800476c:	07c1      	lsls	r1, r0, #31
 800476e:	2900      	cmp	r1, #0
 8004770:	d007      	beq.n	8004782 <_ZN6mynewt4Strn3len17h86b1e18ee358b80eE+0x174>
 8004772:	e7ff      	b.n	8004774 <_ZN6mynewt4Strn3len17h86b1e18ee358b80eE+0x166>
 8004774:	2000      	movs	r0, #0
 8004776:	9013      	str	r0, [sp, #76]	; 0x4c
 8004778:	e002      	b.n	8004780 <_ZN6mynewt4Strn3len17h86b1e18ee358b80eE+0x172>
    }
 800477a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800477c:	b040      	add	sp, #256	; 0x100
 800477e:	bdb0      	pop	{r4, r5, r7, pc}
                if cstr.is_null() { return 0; }
 8004780:	e7fb      	b.n	800477a <_ZN6mynewt4Strn3len17h86b1e18ee358b80eE+0x16c>
 8004782:	2000      	movs	r0, #0
                for len in 0..127 {
 8004784:	9036      	str	r0, [sp, #216]	; 0xd8
 8004786:	207f      	movs	r0, #127	; 0x7f
 8004788:	9037      	str	r0, [sp, #220]	; 0xdc
 800478a:	9836      	ldr	r0, [sp, #216]	; 0xd8
 800478c:	9937      	ldr	r1, [sp, #220]	; 0xdc
 800478e:	f000 fb9e 	bl	8004ece <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hfc81ae825f5ef360E>
 8004792:	9005      	str	r0, [sp, #20]
 8004794:	9104      	str	r1, [sp, #16]
 8004796:	e7ff      	b.n	8004798 <_ZN6mynewt4Strn3len17h86b1e18ee358b80eE+0x18a>
 8004798:	9805      	ldr	r0, [sp, #20]
 800479a:	9038      	str	r0, [sp, #224]	; 0xe0
 800479c:	9904      	ldr	r1, [sp, #16]
 800479e:	9139      	str	r1, [sp, #228]	; 0xe4
 80047a0:	e7ff      	b.n	80047a2 <_ZN6mynewt4Strn3len17h86b1e18ee358b80eE+0x194>
 80047a2:	a838      	add	r0, sp, #224	; 0xe0
 80047a4:	f000 fb3b 	bl	8004e1e <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd3e80460d631842cE>
 80047a8:	913c      	str	r1, [sp, #240]	; 0xf0
 80047aa:	903b      	str	r0, [sp, #236]	; 0xec
 80047ac:	e7ff      	b.n	80047ae <_ZN6mynewt4Strn3len17h86b1e18ee358b80eE+0x1a0>
 80047ae:	983b      	ldr	r0, [sp, #236]	; 0xec
 80047b0:	2800      	cmp	r0, #0
 80047b2:	9003      	str	r0, [sp, #12]
 80047b4:	d013      	beq.n	80047de <_ZN6mynewt4Strn3len17h86b1e18ee358b80eE+0x1d0>
 80047b6:	e7ff      	b.n	80047b8 <_ZN6mynewt4Strn3len17h86b1e18ee358b80eE+0x1aa>
 80047b8:	9803      	ldr	r0, [sp, #12]
 80047ba:	2801      	cmp	r0, #1
 80047bc:	f47f af39 	bne.w	8004632 <_ZN6mynewt4Strn3len17h86b1e18ee358b80eE+0x24>
 80047c0:	e7ff      	b.n	80047c2 <_ZN6mynewt4Strn3len17h86b1e18ee358b80eE+0x1b4>
 80047c2:	983c      	ldr	r0, [sp, #240]	; 0xf0
 80047c4:	903d      	str	r0, [sp, #244]	; 0xf4
 80047c6:	983d      	ldr	r0, [sp, #244]	; 0xf4
 80047c8:	903a      	str	r0, [sp, #232]	; 0xe8
 80047ca:	983a      	ldr	r0, [sp, #232]	; 0xe8
 80047cc:	903e      	str	r0, [sp, #248]	; 0xf8
                    let ptr: *const u8 =  ((cstr as u32) + len) as *const u8;
 80047ce:	9835      	ldr	r0, [sp, #212]	; 0xd4
 80047d0:	993e      	ldr	r1, [sp, #248]	; 0xf8
 80047d2:	4401      	add	r1, r0
 80047d4:	460a      	mov	r2, r1
 80047d6:	4281      	cmp	r1, r0
 80047d8:	9202      	str	r2, [sp, #8]
 80047da:	d319      	bcc.n	8004810 <_ZN6mynewt4Strn3len17h86b1e18ee358b80eE+0x202>
 80047dc:	e003      	b.n	80047e6 <_ZN6mynewt4Strn3len17h86b1e18ee358b80eE+0x1d8>
 80047de:	2001      	movs	r0, #1
                assert!(false, "big strn");  //  String too long
 80047e0:	2800      	cmp	r0, #0
 80047e2:	d10b      	bne.n	80047fc <_ZN6mynewt4Strn3len17h86b1e18ee358b80eE+0x1ee>
 80047e4:	e011      	b.n	800480a <_ZN6mynewt4Strn3len17h86b1e18ee358b80eE+0x1fc>
                    let ptr: *const u8 =  ((cstr as u32) + len) as *const u8;
 80047e6:	9802      	ldr	r0, [sp, #8]
 80047e8:	903f      	str	r0, [sp, #252]	; 0xfc
                    if unsafe { *ptr } == 0 { return len as usize; }                    
 80047ea:	993f      	ldr	r1, [sp, #252]	; 0xfc
 80047ec:	7809      	ldrb	r1, [r1, #0]
 80047ee:	2900      	cmp	r1, #0
 80047f0:	d103      	bne.n	80047fa <_ZN6mynewt4Strn3len17h86b1e18ee358b80eE+0x1ec>
 80047f2:	e7ff      	b.n	80047f4 <_ZN6mynewt4Strn3len17h86b1e18ee358b80eE+0x1e6>
 80047f4:	983e      	ldr	r0, [sp, #248]	; 0xf8
 80047f6:	9013      	str	r0, [sp, #76]	; 0x4c
 80047f8:	e7c2      	b.n	8004780 <_ZN6mynewt4Strn3len17h86b1e18ee358b80eE+0x172>
                for len in 0..127 {
 80047fa:	e7d2      	b.n	80047a2 <_ZN6mynewt4Strn3len17h86b1e18ee358b80eE+0x194>
                assert!(false, "big strn");  //  String too long
 80047fc:	f645 603c 	movw	r0, #24124	; 0x5e3c
 8004800:	f6c0 0001 	movt	r0, #2049	; 0x801
 8004804:	f003 ff43 	bl	800868e <_ZN4core9panicking5panic17h138a849f37d3ac2dE>
 8004808:	defe      	udf	#254	; 0xfe
 800480a:	2080      	movs	r0, #128	; 0x80
                return 128 as usize;
 800480c:	9013      	str	r0, [sp, #76]	; 0x4c
 800480e:	e7b7      	b.n	8004780 <_ZN6mynewt4Strn3len17h86b1e18ee358b80eE+0x172>
                    let ptr: *const u8 =  ((cstr as u32) + len) as *const u8;
 8004810:	f645 601c 	movw	r0, #24092	; 0x5e1c
 8004814:	f6c0 0001 	movt	r0, #2049	; 0x801
 8004818:	f003 ff39 	bl	800868e <_ZN4core9panicking5panic17h138a849f37d3ac2dE>
 800481c:	defe      	udf	#254	; 0xfe
                bs.len() - 1  //  Don't count the terminating null.
 800481e:	f645 6094 	movw	r0, #24212	; 0x5e94
 8004822:	f6c0 0001 	movt	r0, #2049	; 0x801
 8004826:	f003 ff32 	bl	800868e <_ZN4core9panicking5panic17h138a849f37d3ac2dE>
 800482a:	defe      	udf	#254	; 0xfe

0800482c <_ZN6mynewt4Strn8is_empty17haf426a9141c41dd7E>:

    /// Return true if the string is empty
    pub fn is_empty(&self) -> bool {
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	4601      	mov	r1, r0
 8004832:	9003      	str	r0, [sp, #12]
        self.len() == 0
 8004834:	9803      	ldr	r0, [sp, #12]
 8004836:	9102      	str	r1, [sp, #8]
 8004838:	f7ff fee9 	bl	800460e <_ZN6mynewt4Strn3len17h86b1e18ee358b80eE>
 800483c:	9001      	str	r0, [sp, #4]
 800483e:	e7ff      	b.n	8004840 <_ZN6mynewt4Strn8is_empty17haf426a9141c41dd7E+0x14>
 8004840:	9801      	ldr	r0, [sp, #4]
 8004842:	fab0 f180 	clz	r1, r0
 8004846:	0948      	lsrs	r0, r1, #5
    }
 8004848:	b004      	add	sp, #16
 800484a:	bd80      	pop	{r7, pc}

0800484c <_ZN6mynewt4Strn8validate17hd35e7e1944abd306E>:
            }
        }
    }

    /// Fail if the last byte is not zero.
    pub fn validate(&self) {
 800484c:	b5b0      	push	{r4, r5, r7, lr}
 800484e:	b0ae      	sub	sp, #184	; 0xb8
 8004850:	4601      	mov	r1, r0
 8004852:	900b      	str	r0, [sp, #44]	; 0x2c
        match self.rep {
            StrnRep::ByteStr(bs) => {         
 8004854:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004856:	7800      	ldrb	r0, [r0, #0]
 8004858:	07c2      	lsls	r2, r0, #31
 800485a:	2a00      	cmp	r2, #0
 800485c:	910a      	str	r1, [sp, #40]	; 0x28
 800485e:	9009      	str	r0, [sp, #36]	; 0x24
 8004860:	d007      	beq.n	8004872 <_ZN6mynewt4Strn8validate17hd35e7e1944abd306E+0x26>
 8004862:	e7ff      	b.n	8004864 <_ZN6mynewt4Strn8validate17hd35e7e1944abd306E+0x18>
 8004864:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004866:	b2c1      	uxtb	r1, r0
 8004868:	2901      	cmp	r1, #1
 800486a:	f000 8087 	beq.w	800497c <_ZN6mynewt4Strn8validate17hd35e7e1944abd306E+0x130>
 800486e:	e7ff      	b.n	8004870 <_ZN6mynewt4Strn8validate17hd35e7e1944abd306E+0x24>
                assert_eq!(bs.last(), Some(&0u8), "no null");  //  Last byte must be 0.
            }
            StrnRep::CStr(_cstr)  => {}
        }
    }
 8004870:	defe      	udf	#254	; 0xfe
            StrnRep::ByteStr(bs) => {         
 8004872:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004874:	6841      	ldr	r1, [r0, #4]
 8004876:	6880      	ldr	r0, [r0, #8]
 8004878:	910c      	str	r1, [sp, #48]	; 0x30
 800487a:	900d      	str	r0, [sp, #52]	; 0x34
                assert_eq!(bs.last(), Some(&0u8), "no null");  //  Last byte must be 0.
 800487c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800487e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004880:	f001 f950 	bl	8005b24 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h9f79003d40cdc30eE>
 8004884:	9010      	str	r0, [sp, #64]	; 0x40
 8004886:	e7ff      	b.n	8004888 <_ZN6mynewt4Strn8validate17hd35e7e1944abd306E+0x3c>
 8004888:	a810      	add	r0, sp, #64	; 0x40
 800488a:	900e      	str	r0, [sp, #56]	; 0x38
 800488c:	f645 5048 	movw	r0, #23880	; 0x5d48
 8004890:	f6c0 0001 	movt	r0, #2049	; 0x801
 8004894:	900f      	str	r0, [sp, #60]	; 0x3c
 8004896:	980e      	ldr	r0, [sp, #56]	; 0x38
 8004898:	9011      	str	r0, [sp, #68]	; 0x44
 800489a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800489c:	9012      	str	r0, [sp, #72]	; 0x48
 800489e:	9811      	ldr	r0, [sp, #68]	; 0x44
 80048a0:	9912      	ldr	r1, [sp, #72]	; 0x48
 80048a2:	f000 fc51 	bl	8005148 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17h70df41bf340d2af5E>
 80048a6:	9008      	str	r0, [sp, #32]
 80048a8:	e7ff      	b.n	80048aa <_ZN6mynewt4Strn8validate17hd35e7e1944abd306E+0x5e>
 80048aa:	9808      	ldr	r0, [sp, #32]
 80048ac:	07c1      	lsls	r1, r0, #31
 80048ae:	2900      	cmp	r1, #0
 80048b0:	d163      	bne.n	800497a <_ZN6mynewt4Strn8validate17hd35e7e1944abd306E+0x12e>
 80048b2:	e7ff      	b.n	80048b4 <_ZN6mynewt4Strn8validate17hd35e7e1944abd306E+0x68>
 80048b4:	9811      	ldr	r0, [sp, #68]	; 0x44
 80048b6:	9022      	str	r0, [sp, #136]	; 0x88
 80048b8:	9812      	ldr	r0, [sp, #72]	; 0x48
 80048ba:	9023      	str	r0, [sp, #140]	; 0x8c
 80048bc:	4668      	mov	r0, sp
 80048be:	2100      	movs	r1, #0
 80048c0:	6001      	str	r1, [r0, #0]
 80048c2:	f645 51a8 	movw	r1, #23976	; 0x5da8
 80048c6:	f6c0 0101 	movt	r1, #2049	; 0x801
 80048ca:	f645 5344 	movw	r3, #23876	; 0x5d44
 80048ce:	f6c0 0301 	movt	r3, #2049	; 0x801
 80048d2:	a824      	add	r0, sp, #144	; 0x90
 80048d4:	2201      	movs	r2, #1
 80048d6:	f000 fa59 	bl	8004d8c <_ZN4core3fmt9Arguments6new_v117h7b18277453f88ac4E>
 80048da:	e7ff      	b.n	80048dc <_ZN6mynewt4Strn8validate17hd35e7e1944abd306E+0x90>
 80048dc:	a822      	add	r0, sp, #136	; 0x88
 80048de:	901f      	str	r0, [sp, #124]	; 0x7c
 80048e0:	a823      	add	r0, sp, #140	; 0x8c
 80048e2:	9020      	str	r0, [sp, #128]	; 0x80
 80048e4:	a824      	add	r0, sp, #144	; 0x90
 80048e6:	9021      	str	r0, [sp, #132]	; 0x84
 80048e8:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80048ea:	902a      	str	r0, [sp, #168]	; 0xa8
 80048ec:	9820      	ldr	r0, [sp, #128]	; 0x80
 80048ee:	902b      	str	r0, [sp, #172]	; 0xac
 80048f0:	9821      	ldr	r0, [sp, #132]	; 0x84
 80048f2:	902c      	str	r0, [sp, #176]	; 0xb0
 80048f4:	982a      	ldr	r0, [sp, #168]	; 0xa8
 80048f6:	f644 71c1 	movw	r1, #20417	; 0x4fc1
 80048fa:	f6c0 0100 	movt	r1, #2048	; 0x800
 80048fe:	f000 f9af 	bl	8004c60 <_ZN4core3fmt10ArgumentV13new17ha4bd00c3a822e50cE>
 8004902:	9007      	str	r0, [sp, #28]
 8004904:	9106      	str	r1, [sp, #24]
 8004906:	e7ff      	b.n	8004908 <_ZN6mynewt4Strn8validate17hd35e7e1944abd306E+0xbc>
 8004908:	982b      	ldr	r0, [sp, #172]	; 0xac
 800490a:	f644 71c1 	movw	r1, #20417	; 0x4fc1
 800490e:	f6c0 0100 	movt	r1, #2048	; 0x800
 8004912:	f000 f9a5 	bl	8004c60 <_ZN4core3fmt10ArgumentV13new17ha4bd00c3a822e50cE>
 8004916:	9005      	str	r0, [sp, #20]
 8004918:	9104      	str	r1, [sp, #16]
 800491a:	e7ff      	b.n	800491c <_ZN6mynewt4Strn8validate17hd35e7e1944abd306E+0xd0>
 800491c:	982c      	ldr	r0, [sp, #176]	; 0xb0
 800491e:	f249 0185 	movw	r1, #36997	; 0x9085
 8004922:	f6c0 0100 	movt	r1, #2048	; 0x800
 8004926:	f000 fa18 	bl	8004d5a <_ZN4core3fmt10ArgumentV13new17hf7ba76b3ae396a12E>
 800492a:	9003      	str	r0, [sp, #12]
 800492c:	9102      	str	r1, [sp, #8]
 800492e:	e7ff      	b.n	8004930 <_ZN6mynewt4Strn8validate17hd35e7e1944abd306E+0xe4>
 8004930:	9807      	ldr	r0, [sp, #28]
 8004932:	9019      	str	r0, [sp, #100]	; 0x64
 8004934:	9906      	ldr	r1, [sp, #24]
 8004936:	911a      	str	r1, [sp, #104]	; 0x68
 8004938:	9a05      	ldr	r2, [sp, #20]
 800493a:	921b      	str	r2, [sp, #108]	; 0x6c
 800493c:	9b04      	ldr	r3, [sp, #16]
 800493e:	931c      	str	r3, [sp, #112]	; 0x70
 8004940:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8004944:	f8cd c074 	str.w	ip, [sp, #116]	; 0x74
 8004948:	f8dd e008 	ldr.w	lr, [sp, #8]
 800494c:	f8cd e078 	str.w	lr, [sp, #120]	; 0x78
 8004950:	466c      	mov	r4, sp
 8004952:	2503      	movs	r5, #3
 8004954:	6025      	str	r5, [r4, #0]
 8004956:	f645 5188 	movw	r1, #23944	; 0x5d88
 800495a:	f6c0 0101 	movt	r1, #2049	; 0x801
 800495e:	a813      	add	r0, sp, #76	; 0x4c
 8004960:	ab19      	add	r3, sp, #100	; 0x64
 8004962:	462a      	mov	r2, r5
 8004964:	f000 fa12 	bl	8004d8c <_ZN4core3fmt9Arguments6new_v117h7b18277453f88ac4E>
 8004968:	e7ff      	b.n	800496a <_ZN6mynewt4Strn8validate17hd35e7e1944abd306E+0x11e>
 800496a:	f645 61ac 	movw	r1, #24236	; 0x5eac
 800496e:	f6c0 0101 	movt	r1, #2049	; 0x801
 8004972:	a813      	add	r0, sp, #76	; 0x4c
 8004974:	f003 fec8 	bl	8008708 <_ZN4core9panicking9panic_fmt17hbfe32cf8392a510cE>
 8004978:	defe      	udf	#254	; 0xfe
        match self.rep {
 800497a:	e003      	b.n	8004984 <_ZN6mynewt4Strn8validate17hd35e7e1944abd306E+0x138>
            StrnRep::CStr(_cstr)  => {}
 800497c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800497e:	6840      	ldr	r0, [r0, #4]
 8004980:	902d      	str	r0, [sp, #180]	; 0xb4
        match self.rep {
 8004982:	e7ff      	b.n	8004984 <_ZN6mynewt4Strn8validate17hd35e7e1944abd306E+0x138>
    }
 8004984:	b02e      	add	sp, #184	; 0xb8
 8004986:	bdb0      	pop	{r4, r5, r7, pc}

08004988 <_ZN6mynewt3sys7console5print17ha0601e49e4927bc4E>:
//! Display messages on Arm Semihosting Console (via OpenOCD)

///  Display message `msg` on the Arm Semihosting console (via OpenOCD).
pub fn print(msg: &str) {
 8004988:	b580      	push	{r7, lr}
 800498a:	b086      	sub	sp, #24
 800498c:	460a      	mov	r2, r1
 800498e:	4603      	mov	r3, r0
 8004990:	9004      	str	r0, [sp, #16]
 8004992:	9105      	str	r1, [sp, #20]
    //  Call the Semihosting Console API, which is unsafe.
    unsafe { console_buffer(msg.as_ptr(), msg.len() as u32); }
 8004994:	9804      	ldr	r0, [sp, #16]
 8004996:	9905      	ldr	r1, [sp, #20]
 8004998:	9203      	str	r2, [sp, #12]
 800499a:	9302      	str	r3, [sp, #8]
 800499c:	f000 fdf3 	bl	8005586 <_ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17h6cfde3120b8a2279E>
 80049a0:	9001      	str	r0, [sp, #4]
 80049a2:	e7ff      	b.n	80049a4 <_ZN6mynewt3sys7console5print17ha0601e49e4927bc4E+0x1c>
 80049a4:	9804      	ldr	r0, [sp, #16]
 80049a6:	9905      	ldr	r1, [sp, #20]
 80049a8:	f000 fdcf 	bl	800554a <_ZN4core3str21_$LT$impl$u20$str$GT$3len17hdfc178dac951c508E>
 80049ac:	9000      	str	r0, [sp, #0]
 80049ae:	e7ff      	b.n	80049b0 <_ZN6mynewt3sys7console5print17ha0601e49e4927bc4E+0x28>
 80049b0:	9801      	ldr	r0, [sp, #4]
 80049b2:	9900      	ldr	r1, [sp, #0]
 80049b4:	f005 fd32 	bl	800a41c <console_buffer>
 80049b8:	e7ff      	b.n	80049ba <_ZN6mynewt3sys7console5print17ha0601e49e4927bc4E+0x32>
}
 80049ba:	b006      	add	sp, #24
 80049bc:	bd80      	pop	{r7, pc}

080049be <_ZN6mynewt3sys7console10print_strn17h7b7fdfa60aa992abE>:

///  Display message `msg` on the Arm Semihosting console (via OpenOCD).
pub fn print_strn(msg: &crate::Strn) {
 80049be:	b580      	push	{r7, lr}
 80049c0:	b084      	sub	sp, #16
 80049c2:	4601      	mov	r1, r0
 80049c4:	9003      	str	r0, [sp, #12]
    //  Call the Semihosting Console API, which is unsafe.
    unsafe { console_buffer(msg.as_ptr(), msg.len() as u32); }
 80049c6:	9803      	ldr	r0, [sp, #12]
 80049c8:	9102      	str	r1, [sp, #8]
 80049ca:	f7ff fdf9 	bl	80045c0 <_ZN6mynewt4Strn6as_ptr17h2aca29768dacdb60E>
 80049ce:	9001      	str	r0, [sp, #4]
 80049d0:	e7ff      	b.n	80049d2 <_ZN6mynewt3sys7console10print_strn17h7b7fdfa60aa992abE+0x14>
 80049d2:	9803      	ldr	r0, [sp, #12]
 80049d4:	f7ff fe1b 	bl	800460e <_ZN6mynewt4Strn3len17h86b1e18ee358b80eE>
 80049d8:	9000      	str	r0, [sp, #0]
 80049da:	e7ff      	b.n	80049dc <_ZN6mynewt3sys7console10print_strn17h7b7fdfa60aa992abE+0x1e>
 80049dc:	9801      	ldr	r0, [sp, #4]
 80049de:	9900      	ldr	r1, [sp, #0]
 80049e0:	f005 fd1c 	bl	800a41c <console_buffer>
 80049e4:	e7ff      	b.n	80049e6 <_ZN6mynewt3sys7console10print_strn17h7b7fdfa60aa992abE+0x28>
}
 80049e6:	b004      	add	sp, #16
 80049e8:	bd80      	pop	{r7, pc}

080049ea <_ZN6mynewt3sys7console6buffer17h37b7b8db742c4e2fE>:

///  Add the string to the output buffer.
pub fn buffer(msg: &str) {
 80049ea:	b580      	push	{r7, lr}
 80049ec:	b086      	sub	sp, #24
 80049ee:	460a      	mov	r2, r1
 80049f0:	4603      	mov	r3, r0
 80049f2:	9004      	str	r0, [sp, #16]
 80049f4:	9105      	str	r1, [sp, #20]
    //  Call the Semihosting Console API, which is unsafe.
    unsafe { console_buffer(msg.as_ptr(), msg.len() as u32); }
 80049f6:	9804      	ldr	r0, [sp, #16]
 80049f8:	9905      	ldr	r1, [sp, #20]
 80049fa:	9203      	str	r2, [sp, #12]
 80049fc:	9302      	str	r3, [sp, #8]
 80049fe:	f000 fdc2 	bl	8005586 <_ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17h6cfde3120b8a2279E>
 8004a02:	9001      	str	r0, [sp, #4]
 8004a04:	e7ff      	b.n	8004a06 <_ZN6mynewt3sys7console6buffer17h37b7b8db742c4e2fE+0x1c>
 8004a06:	9804      	ldr	r0, [sp, #16]
 8004a08:	9905      	ldr	r1, [sp, #20]
 8004a0a:	f000 fd9e 	bl	800554a <_ZN4core3str21_$LT$impl$u20$str$GT$3len17hdfc178dac951c508E>
 8004a0e:	9000      	str	r0, [sp, #0]
 8004a10:	e7ff      	b.n	8004a12 <_ZN6mynewt3sys7console6buffer17h37b7b8db742c4e2fE+0x28>
 8004a12:	9801      	ldr	r0, [sp, #4]
 8004a14:	9900      	ldr	r1, [sp, #0]
 8004a16:	f005 fd01 	bl	800a41c <console_buffer>
 8004a1a:	e7ff      	b.n	8004a1c <_ZN6mynewt3sys7console6buffer17h37b7b8db742c4e2fE+0x32>
}
 8004a1c:	b006      	add	sp, #24
 8004a1e:	bd80      	pop	{r7, pc}

08004a20 <_ZN6mynewt3sys7console8printint17h0f8f736d6c26b18aE>:
    unsafe { console_printhex(v); }
}

///  Write an int to the output buffer.
///  C API: `void console_printint(int i)`
pub fn printint(v: i32) {
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b082      	sub	sp, #8
 8004a24:	4601      	mov	r1, r0
 8004a26:	9001      	str	r0, [sp, #4]
    unsafe { console_printint(v); }
 8004a28:	9801      	ldr	r0, [sp, #4]
 8004a2a:	9100      	str	r1, [sp, #0]
 8004a2c:	f005 fd66 	bl	800a4fc <console_printint>
 8004a30:	e7ff      	b.n	8004a32 <_ZN6mynewt3sys7console8printint17h0f8f736d6c26b18aE+0x12>
}
 8004a32:	b002      	add	sp, #8
 8004a34:	bd80      	pop	{r7, pc}

08004a36 <_ZN6mynewt3sys7console5flush17h6e6adb2d6c74f9b0E>:
pub fn printdouble(v: f64) {
    unsafe { console_printdouble(v); }
}

///  Flush the output buffer to the console.
pub fn flush() {
 8004a36:	b580      	push	{r7, lr}
    unsafe { console_flush(); }
 8004a38:	f005 fcc8 	bl	800a3cc <console_flush>
 8004a3c:	e7ff      	b.n	8004a3e <_ZN6mynewt3sys7console5flush17h6e6adb2d6c74f9b0E+0x8>
}
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <_ZN6mynewt4libs14sensor_network22start_server_transport17h6009bbb3c25195b5E>:
impl Default for sensor_network_interface {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b084      	sub	sp, #16
 8004a44:	f006 f920 	bl	800ac88 <start_server_transport>
 8004a48:	9002      	str	r0, [sp, #8]
 8004a4a:	e7ff      	b.n	8004a4c <_ZN6mynewt4libs14sensor_network22start_server_transport17h6009bbb3c25195b5E+0xc>
 8004a4c:	9802      	ldr	r0, [sp, #8]
 8004a4e:	2800      	cmp	r0, #0
 8004a50:	d105      	bne.n	8004a5e <_ZN6mynewt4libs14sensor_network22start_server_transport17h6009bbb3c25195b5E+0x1e>
 8004a52:	e7ff      	b.n	8004a54 <_ZN6mynewt4libs14sensor_network22start_server_transport17h6009bbb3c25195b5E+0x14>
 8004a54:	2000      	movs	r0, #0
 8004a56:	9001      	str	r0, [sp, #4]
 8004a58:	2001      	movs	r0, #1
 8004a5a:	9001      	str	r0, [sp, #4]
 8004a5c:	e007      	b.n	8004a6e <_ZN6mynewt4libs14sensor_network22start_server_transport17h6009bbb3c25195b5E+0x2e>
 8004a5e:	9802      	ldr	r0, [sp, #8]
 8004a60:	f000 fd9b 	bl	800559a <_ZN78_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$i32$GT$$GT$4from17h0c00a0d5ca46366cE>
 8004a64:	9000      	str	r0, [sp, #0]
 8004a66:	e7ff      	b.n	8004a68 <_ZN6mynewt4libs14sensor_network22start_server_transport17h6009bbb3c25195b5E+0x28>
 8004a68:	9800      	ldr	r0, [sp, #0]
 8004a6a:	9001      	str	r0, [sp, #4]
 8004a6c:	e7ff      	b.n	8004a6e <_ZN6mynewt4libs14sensor_network22start_server_transport17h6009bbb3c25195b5E+0x2e>
 8004a6e:	9801      	ldr	r0, [sp, #4]
 8004a70:	b004      	add	sp, #16
 8004a72:	bd80      	pop	{r7, pc}

08004a74 <_ZN6mynewt4libs14sensor_network16init_server_post17hbeda0b43632f58fbE>:
    pub fn register_collector_transport() -> ::cty::c_int;
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
    pub fn sensor_network_register_transport(iface_type: u8) -> ::cty::c_int;
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b086      	sub	sp, #24
 8004a78:	460a      	mov	r2, r1
 8004a7a:	9104      	str	r1, [sp, #16]
 8004a7c:	9904      	ldr	r1, [sp, #16]
 8004a7e:	9003      	str	r0, [sp, #12]
 8004a80:	4608      	mov	r0, r1
 8004a82:	9202      	str	r2, [sp, #8]
 8004a84:	f7ff fee2 	bl	800484c <_ZN6mynewt4Strn8validate17hd35e7e1944abd306E>
 8004a88:	e7ff      	b.n	8004a8a <_ZN6mynewt4libs14sensor_network16init_server_post17hbeda0b43632f58fbE+0x16>
 8004a8a:	9804      	ldr	r0, [sp, #16]
 8004a8c:	f7ff fd98 	bl	80045c0 <_ZN6mynewt4Strn6as_ptr17h2aca29768dacdb60E>
 8004a90:	9001      	str	r0, [sp, #4]
 8004a92:	e7ff      	b.n	8004a94 <_ZN6mynewt4libs14sensor_network16init_server_post17hbeda0b43632f58fbE+0x20>
 8004a94:	9801      	ldr	r0, [sp, #4]
 8004a96:	f006 f973 	bl	800ad80 <init_server_post>
 8004a9a:	f88d 0017 	strb.w	r0, [sp, #23]
 8004a9e:	e7ff      	b.n	8004aa0 <_ZN6mynewt4libs14sensor_network16init_server_post17hbeda0b43632f58fbE+0x2c>
 8004aa0:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8004aa4:	9903      	ldr	r1, [sp, #12]
 8004aa6:	7048      	strb	r0, [r1, #1]
 8004aa8:	2000      	movs	r0, #0
 8004aaa:	7008      	strb	r0, [r1, #0]
 8004aac:	b006      	add	sp, #24
 8004aae:	bd80      	pop	{r7, pc}

08004ab0 <_ZN6mynewt4libs14sensor_network12prepare_post17he077c30fc9d88d28E>:
    pub fn init_collector_post() -> bool;
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
    pub fn sensor_network_init_post(iface_type: u8, uri: *const ::cty::c_char) -> bool;
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b084      	sub	sp, #16
 8004ab4:	460a      	mov	r2, r1
 8004ab6:	9102      	str	r1, [sp, #8]
 8004ab8:	9902      	ldr	r1, [sp, #8]
 8004aba:	9001      	str	r0, [sp, #4]
 8004abc:	4608      	mov	r0, r1
 8004abe:	9200      	str	r2, [sp, #0]
 8004ac0:	f006 f964 	bl	800ad8c <sensor_network_prepare_post>
 8004ac4:	f88d 000f 	strb.w	r0, [sp, #15]
 8004ac8:	e7ff      	b.n	8004aca <_ZN6mynewt4libs14sensor_network12prepare_post17he077c30fc9d88d28E+0x1a>
 8004aca:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8004ace:	9901      	ldr	r1, [sp, #4]
 8004ad0:	7048      	strb	r0, [r1, #1]
 8004ad2:	2000      	movs	r0, #0
 8004ad4:	7008      	strb	r0, [r1, #0]
 8004ad6:	b004      	add	sp, #16
 8004ad8:	bd80      	pop	{r7, pc}

08004ada <_ZN6mynewt4libs14sensor_network14do_server_post17h6c90b73e883479caE>:
    pub fn sensor_network_prepare_post(encoding: ::cty::c_int) -> bool;
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
 8004ada:	b580      	push	{r7, lr}
 8004adc:	b082      	sub	sp, #8
 8004ade:	9000      	str	r0, [sp, #0]
 8004ae0:	f006 f999 	bl	800ae16 <do_server_post>
 8004ae4:	f88d 0007 	strb.w	r0, [sp, #7]
 8004ae8:	e7ff      	b.n	8004aea <_ZN6mynewt4libs14sensor_network14do_server_post17h6c90b73e883479caE+0x10>
 8004aea:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8004aee:	9900      	ldr	r1, [sp, #0]
 8004af0:	7048      	strb	r0, [r1, #1]
 8004af2:	2000      	movs	r0, #0
 8004af4:	7008      	strb	r0, [r1, #0]
 8004af6:	b002      	add	sp, #8
 8004af8:	bd80      	pop	{r7, pc}

08004afa <_ZN6mynewt4libs14sensor_network13get_device_id17he689acf42fcaec72E>:
    pub fn should_send_to_collector(
        val: *mut sensor_value,
        device_name: *const ::cty::c_char,
    ) -> bool;
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
 8004afa:	b580      	push	{r7, lr}
 8004afc:	b086      	sub	sp, #24
 8004afe:	9001      	str	r0, [sp, #4]
 8004b00:	f006 f9f6 	bl	800aef0 <get_device_id>
 8004b04:	9002      	str	r0, [sp, #8]
 8004b06:	e7ff      	b.n	8004b08 <_ZN6mynewt4libs14sensor_network13get_device_id17he689acf42fcaec72E+0xe>
 8004b08:	9902      	ldr	r1, [sp, #8]
 8004b0a:	a803      	add	r0, sp, #12
 8004b0c:	f7ff fd40 	bl	8004590 <_ZN6mynewt4Strn9from_cstr17h9a7495b7f5601cb6E>
 8004b10:	e7ff      	b.n	8004b12 <_ZN6mynewt4libs14sensor_network13get_device_id17he689acf42fcaec72E+0x18>
 8004b12:	9803      	ldr	r0, [sp, #12]
 8004b14:	9904      	ldr	r1, [sp, #16]
 8004b16:	9a05      	ldr	r2, [sp, #20]
 8004b18:	9b01      	ldr	r3, [sp, #4]
 8004b1a:	60da      	str	r2, [r3, #12]
 8004b1c:	6099      	str	r1, [r3, #8]
 8004b1e:	6058      	str	r0, [r3, #4]
 8004b20:	2000      	movs	r0, #0
 8004b22:	6018      	str	r0, [r3, #0]
 8004b24:	b006      	add	sp, #24
 8004b26:	bd80      	pop	{r7, pc}

08004b28 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h49d5a0f4de383fedE>:
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b086      	sub	sp, #24
 8004b2c:	460a      	mov	r2, r1
 8004b2e:	4603      	mov	r3, r0
 8004b30:	9004      	str	r0, [sp, #16]
 8004b32:	9105      	str	r1, [sp, #20]
 8004b34:	9804      	ldr	r0, [sp, #16]
 8004b36:	6800      	ldr	r0, [r0, #0]
 8004b38:	9905      	ldr	r1, [sp, #20]
 8004b3a:	9203      	str	r2, [sp, #12]
 8004b3c:	9302      	str	r3, [sp, #8]
 8004b3e:	f001 f901 	bl	8005d44 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i64$GT$3fmt17h922eff1c86de8976E>
 8004b42:	9001      	str	r0, [sp, #4]
 8004b44:	e7ff      	b.n	8004b46 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h49d5a0f4de383fedE+0x1e>
 8004b46:	9801      	ldr	r0, [sp, #4]
 8004b48:	f000 0001 	and.w	r0, r0, #1
 8004b4c:	b006      	add	sp, #24
 8004b4e:	bd80      	pop	{r7, pc}

08004b50 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h5f3655b75e30a970E>:
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b086      	sub	sp, #24
 8004b54:	460a      	mov	r2, r1
 8004b56:	4603      	mov	r3, r0
 8004b58:	9004      	str	r0, [sp, #16]
 8004b5a:	9105      	str	r1, [sp, #20]
 8004b5c:	9804      	ldr	r0, [sp, #16]
 8004b5e:	6800      	ldr	r0, [r0, #0]
 8004b60:	9905      	ldr	r1, [sp, #20]
 8004b62:	9203      	str	r2, [sp, #12]
 8004b64:	9302      	str	r3, [sp, #8]
 8004b66:	f001 f8b4 	bl	8005cd2 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h16ef8ddab3dbb693E>
 8004b6a:	9001      	str	r0, [sp, #4]
 8004b6c:	e7ff      	b.n	8004b6e <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h5f3655b75e30a970E+0x1e>
 8004b6e:	9801      	ldr	r0, [sp, #4]
 8004b70:	f000 0001 	and.w	r0, r0, #1
 8004b74:	b006      	add	sp, #24
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17he1e06a6ebcf1933eE>:
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b086      	sub	sp, #24
 8004b7c:	460a      	mov	r2, r1
 8004b7e:	4603      	mov	r3, r0
 8004b80:	9004      	str	r0, [sp, #16]
 8004b82:	9105      	str	r1, [sp, #20]
 8004b84:	9804      	ldr	r0, [sp, #16]
 8004b86:	6800      	ldr	r0, [r0, #0]
 8004b88:	9905      	ldr	r1, [sp, #20]
 8004b8a:	9203      	str	r2, [sp, #12]
 8004b8c:	9302      	str	r3, [sp, #8]
 8004b8e:	f001 f867 	bl	8005c60 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17hd18febbae977edc8E>
 8004b92:	9001      	str	r0, [sp, #4]
 8004b94:	e7ff      	b.n	8004b96 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17he1e06a6ebcf1933eE+0x1e>
 8004b96:	9801      	ldr	r0, [sp, #4]
 8004b98:	f000 0001 	and.w	r0, r0, #1
 8004b9c:	b006      	add	sp, #24
 8004b9e:	bd80      	pop	{r7, pc}

08004ba0 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hff4283aff90054cfE>:
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b086      	sub	sp, #24
 8004ba4:	460a      	mov	r2, r1
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	9004      	str	r0, [sp, #16]
 8004baa:	9105      	str	r1, [sp, #20]
 8004bac:	9804      	ldr	r0, [sp, #16]
 8004bae:	6800      	ldr	r0, [r0, #0]
 8004bb0:	9905      	ldr	r1, [sp, #20]
 8004bb2:	9203      	str	r2, [sp, #12]
 8004bb4:	9302      	str	r3, [sp, #8]
 8004bb6:	f7ff ffdf 	bl	8004b78 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17he1e06a6ebcf1933eE>
 8004bba:	9001      	str	r0, [sp, #4]
 8004bbc:	e7ff      	b.n	8004bbe <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hff4283aff90054cfE+0x1e>
 8004bbe:	9801      	ldr	r0, [sp, #4]
 8004bc0:	f000 0001 	and.w	r0, r0, #1
 8004bc4:	b006      	add	sp, #24
 8004bc6:	bd80      	pop	{r7, pc}

08004bc8 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h77e937fdb67d0448E>:
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b086      	sub	sp, #24
 8004bcc:	460a      	mov	r2, r1
 8004bce:	4603      	mov	r3, r0
 8004bd0:	9004      	str	r0, [sp, #16]
 8004bd2:	9105      	str	r1, [sp, #20]
 8004bd4:	9804      	ldr	r0, [sp, #16]
 8004bd6:	6801      	ldr	r1, [r0, #0]
 8004bd8:	6840      	ldr	r0, [r0, #4]
 8004bda:	f8dd c014 	ldr.w	ip, [sp, #20]
 8004bde:	9003      	str	r0, [sp, #12]
 8004be0:	4608      	mov	r0, r1
 8004be2:	9903      	ldr	r1, [sp, #12]
 8004be4:	9202      	str	r2, [sp, #8]
 8004be6:	4662      	mov	r2, ip
 8004be8:	9301      	str	r3, [sp, #4]
 8004bea:	f004 fe28 	bl	800983e <_ZN42_$LT$str$u20$as$u20$core..fmt..Display$GT$3fmt17h8845cd1bde16499dE>
 8004bee:	9000      	str	r0, [sp, #0]
 8004bf0:	e7ff      	b.n	8004bf2 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h77e937fdb67d0448E+0x2a>
 8004bf2:	9800      	ldr	r0, [sp, #0]
 8004bf4:	f000 0001 	and.w	r0, r0, #1
 8004bf8:	b006      	add	sp, #24
 8004bfa:	bd80      	pop	{r7, pc}

08004bfc <_ZN4core3fmt10ArgumentV13new17h4625d42fff5bfd34E>:
 8004bfc:	b08a      	sub	sp, #40	; 0x28
 8004bfe:	460a      	mov	r2, r1
 8004c00:	4603      	mov	r3, r0
 8004c02:	9004      	str	r0, [sp, #16]
 8004c04:	9105      	str	r1, [sp, #20]
 8004c06:	9805      	ldr	r0, [sp, #20]
 8004c08:	9008      	str	r0, [sp, #32]
 8004c0a:	9808      	ldr	r0, [sp, #32]
 8004c0c:	9203      	str	r2, [sp, #12]
 8004c0e:	9302      	str	r3, [sp, #8]
 8004c10:	9001      	str	r0, [sp, #4]
 8004c12:	e7ff      	b.n	8004c14 <_ZN4core3fmt10ArgumentV13new17h4625d42fff5bfd34E+0x18>
 8004c14:	9804      	ldr	r0, [sp, #16]
 8004c16:	9009      	str	r0, [sp, #36]	; 0x24
 8004c18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004c1a:	9000      	str	r0, [sp, #0]
 8004c1c:	e7ff      	b.n	8004c1e <_ZN4core3fmt10ArgumentV13new17h4625d42fff5bfd34E+0x22>
 8004c1e:	9800      	ldr	r0, [sp, #0]
 8004c20:	9006      	str	r0, [sp, #24]
 8004c22:	9901      	ldr	r1, [sp, #4]
 8004c24:	9107      	str	r1, [sp, #28]
 8004c26:	9806      	ldr	r0, [sp, #24]
 8004c28:	9907      	ldr	r1, [sp, #28]
 8004c2a:	b00a      	add	sp, #40	; 0x28
 8004c2c:	4770      	bx	lr

08004c2e <_ZN4core3fmt10ArgumentV13new17h99edaec200b06545E>:
 8004c2e:	b08a      	sub	sp, #40	; 0x28
 8004c30:	460a      	mov	r2, r1
 8004c32:	4603      	mov	r3, r0
 8004c34:	9004      	str	r0, [sp, #16]
 8004c36:	9105      	str	r1, [sp, #20]
 8004c38:	9805      	ldr	r0, [sp, #20]
 8004c3a:	9008      	str	r0, [sp, #32]
 8004c3c:	9808      	ldr	r0, [sp, #32]
 8004c3e:	9203      	str	r2, [sp, #12]
 8004c40:	9302      	str	r3, [sp, #8]
 8004c42:	9001      	str	r0, [sp, #4]
 8004c44:	e7ff      	b.n	8004c46 <_ZN4core3fmt10ArgumentV13new17h99edaec200b06545E+0x18>
 8004c46:	9804      	ldr	r0, [sp, #16]
 8004c48:	9009      	str	r0, [sp, #36]	; 0x24
 8004c4a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004c4c:	9000      	str	r0, [sp, #0]
 8004c4e:	e7ff      	b.n	8004c50 <_ZN4core3fmt10ArgumentV13new17h99edaec200b06545E+0x22>
 8004c50:	9800      	ldr	r0, [sp, #0]
 8004c52:	9006      	str	r0, [sp, #24]
 8004c54:	9901      	ldr	r1, [sp, #4]
 8004c56:	9107      	str	r1, [sp, #28]
 8004c58:	9806      	ldr	r0, [sp, #24]
 8004c5a:	9907      	ldr	r1, [sp, #28]
 8004c5c:	b00a      	add	sp, #40	; 0x28
 8004c5e:	4770      	bx	lr

08004c60 <_ZN4core3fmt10ArgumentV13new17ha4bd00c3a822e50cE>:
 8004c60:	b08a      	sub	sp, #40	; 0x28
 8004c62:	460a      	mov	r2, r1
 8004c64:	4603      	mov	r3, r0
 8004c66:	9004      	str	r0, [sp, #16]
 8004c68:	9105      	str	r1, [sp, #20]
 8004c6a:	9805      	ldr	r0, [sp, #20]
 8004c6c:	9008      	str	r0, [sp, #32]
 8004c6e:	9808      	ldr	r0, [sp, #32]
 8004c70:	9203      	str	r2, [sp, #12]
 8004c72:	9302      	str	r3, [sp, #8]
 8004c74:	9001      	str	r0, [sp, #4]
 8004c76:	e7ff      	b.n	8004c78 <_ZN4core3fmt10ArgumentV13new17ha4bd00c3a822e50cE+0x18>
 8004c78:	9804      	ldr	r0, [sp, #16]
 8004c7a:	9009      	str	r0, [sp, #36]	; 0x24
 8004c7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004c7e:	9000      	str	r0, [sp, #0]
 8004c80:	e7ff      	b.n	8004c82 <_ZN4core3fmt10ArgumentV13new17ha4bd00c3a822e50cE+0x22>
 8004c82:	9800      	ldr	r0, [sp, #0]
 8004c84:	9006      	str	r0, [sp, #24]
 8004c86:	9901      	ldr	r1, [sp, #4]
 8004c88:	9107      	str	r1, [sp, #28]
 8004c8a:	9806      	ldr	r0, [sp, #24]
 8004c8c:	9907      	ldr	r1, [sp, #28]
 8004c8e:	b00a      	add	sp, #40	; 0x28
 8004c90:	4770      	bx	lr

08004c92 <_ZN4core3fmt10ArgumentV13new17hbec50b814a491c08E>:
 8004c92:	b08a      	sub	sp, #40	; 0x28
 8004c94:	460a      	mov	r2, r1
 8004c96:	4603      	mov	r3, r0
 8004c98:	9004      	str	r0, [sp, #16]
 8004c9a:	9105      	str	r1, [sp, #20]
 8004c9c:	9805      	ldr	r0, [sp, #20]
 8004c9e:	9008      	str	r0, [sp, #32]
 8004ca0:	9808      	ldr	r0, [sp, #32]
 8004ca2:	9203      	str	r2, [sp, #12]
 8004ca4:	9302      	str	r3, [sp, #8]
 8004ca6:	9001      	str	r0, [sp, #4]
 8004ca8:	e7ff      	b.n	8004caa <_ZN4core3fmt10ArgumentV13new17hbec50b814a491c08E+0x18>
 8004caa:	9804      	ldr	r0, [sp, #16]
 8004cac:	9009      	str	r0, [sp, #36]	; 0x24
 8004cae:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004cb0:	9000      	str	r0, [sp, #0]
 8004cb2:	e7ff      	b.n	8004cb4 <_ZN4core3fmt10ArgumentV13new17hbec50b814a491c08E+0x22>
 8004cb4:	9800      	ldr	r0, [sp, #0]
 8004cb6:	9006      	str	r0, [sp, #24]
 8004cb8:	9901      	ldr	r1, [sp, #4]
 8004cba:	9107      	str	r1, [sp, #28]
 8004cbc:	9806      	ldr	r0, [sp, #24]
 8004cbe:	9907      	ldr	r1, [sp, #28]
 8004cc0:	b00a      	add	sp, #40	; 0x28
 8004cc2:	4770      	bx	lr

08004cc4 <_ZN4core3fmt10ArgumentV13new17hd53ba6b62a3b9591E>:
 8004cc4:	b08a      	sub	sp, #40	; 0x28
 8004cc6:	460a      	mov	r2, r1
 8004cc8:	4603      	mov	r3, r0
 8004cca:	9004      	str	r0, [sp, #16]
 8004ccc:	9105      	str	r1, [sp, #20]
 8004cce:	9805      	ldr	r0, [sp, #20]
 8004cd0:	9008      	str	r0, [sp, #32]
 8004cd2:	9808      	ldr	r0, [sp, #32]
 8004cd4:	9203      	str	r2, [sp, #12]
 8004cd6:	9302      	str	r3, [sp, #8]
 8004cd8:	9001      	str	r0, [sp, #4]
 8004cda:	e7ff      	b.n	8004cdc <_ZN4core3fmt10ArgumentV13new17hd53ba6b62a3b9591E+0x18>
 8004cdc:	9804      	ldr	r0, [sp, #16]
 8004cde:	9009      	str	r0, [sp, #36]	; 0x24
 8004ce0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004ce2:	9000      	str	r0, [sp, #0]
 8004ce4:	e7ff      	b.n	8004ce6 <_ZN4core3fmt10ArgumentV13new17hd53ba6b62a3b9591E+0x22>
 8004ce6:	9800      	ldr	r0, [sp, #0]
 8004ce8:	9006      	str	r0, [sp, #24]
 8004cea:	9901      	ldr	r1, [sp, #4]
 8004cec:	9107      	str	r1, [sp, #28]
 8004cee:	9806      	ldr	r0, [sp, #24]
 8004cf0:	9907      	ldr	r1, [sp, #28]
 8004cf2:	b00a      	add	sp, #40	; 0x28
 8004cf4:	4770      	bx	lr

08004cf6 <_ZN4core3fmt10ArgumentV13new17hd9b543e4f4267a1eE>:
 8004cf6:	b08a      	sub	sp, #40	; 0x28
 8004cf8:	460a      	mov	r2, r1
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	9004      	str	r0, [sp, #16]
 8004cfe:	9105      	str	r1, [sp, #20]
 8004d00:	9805      	ldr	r0, [sp, #20]
 8004d02:	9008      	str	r0, [sp, #32]
 8004d04:	9808      	ldr	r0, [sp, #32]
 8004d06:	9203      	str	r2, [sp, #12]
 8004d08:	9302      	str	r3, [sp, #8]
 8004d0a:	9001      	str	r0, [sp, #4]
 8004d0c:	e7ff      	b.n	8004d0e <_ZN4core3fmt10ArgumentV13new17hd9b543e4f4267a1eE+0x18>
 8004d0e:	9804      	ldr	r0, [sp, #16]
 8004d10:	9009      	str	r0, [sp, #36]	; 0x24
 8004d12:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004d14:	9000      	str	r0, [sp, #0]
 8004d16:	e7ff      	b.n	8004d18 <_ZN4core3fmt10ArgumentV13new17hd9b543e4f4267a1eE+0x22>
 8004d18:	9800      	ldr	r0, [sp, #0]
 8004d1a:	9006      	str	r0, [sp, #24]
 8004d1c:	9901      	ldr	r1, [sp, #4]
 8004d1e:	9107      	str	r1, [sp, #28]
 8004d20:	9806      	ldr	r0, [sp, #24]
 8004d22:	9907      	ldr	r1, [sp, #28]
 8004d24:	b00a      	add	sp, #40	; 0x28
 8004d26:	4770      	bx	lr

08004d28 <_ZN4core3fmt10ArgumentV13new17he64230cf919db0caE>:
 8004d28:	b08a      	sub	sp, #40	; 0x28
 8004d2a:	460a      	mov	r2, r1
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	9004      	str	r0, [sp, #16]
 8004d30:	9105      	str	r1, [sp, #20]
 8004d32:	9805      	ldr	r0, [sp, #20]
 8004d34:	9008      	str	r0, [sp, #32]
 8004d36:	9808      	ldr	r0, [sp, #32]
 8004d38:	9203      	str	r2, [sp, #12]
 8004d3a:	9302      	str	r3, [sp, #8]
 8004d3c:	9001      	str	r0, [sp, #4]
 8004d3e:	e7ff      	b.n	8004d40 <_ZN4core3fmt10ArgumentV13new17he64230cf919db0caE+0x18>
 8004d40:	9804      	ldr	r0, [sp, #16]
 8004d42:	9009      	str	r0, [sp, #36]	; 0x24
 8004d44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004d46:	9000      	str	r0, [sp, #0]
 8004d48:	e7ff      	b.n	8004d4a <_ZN4core3fmt10ArgumentV13new17he64230cf919db0caE+0x22>
 8004d4a:	9800      	ldr	r0, [sp, #0]
 8004d4c:	9006      	str	r0, [sp, #24]
 8004d4e:	9901      	ldr	r1, [sp, #4]
 8004d50:	9107      	str	r1, [sp, #28]
 8004d52:	9806      	ldr	r0, [sp, #24]
 8004d54:	9907      	ldr	r1, [sp, #28]
 8004d56:	b00a      	add	sp, #40	; 0x28
 8004d58:	4770      	bx	lr

08004d5a <_ZN4core3fmt10ArgumentV13new17hf7ba76b3ae396a12E>:
 8004d5a:	b08a      	sub	sp, #40	; 0x28
 8004d5c:	460a      	mov	r2, r1
 8004d5e:	4603      	mov	r3, r0
 8004d60:	9004      	str	r0, [sp, #16]
 8004d62:	9105      	str	r1, [sp, #20]
 8004d64:	9805      	ldr	r0, [sp, #20]
 8004d66:	9008      	str	r0, [sp, #32]
 8004d68:	9808      	ldr	r0, [sp, #32]
 8004d6a:	9203      	str	r2, [sp, #12]
 8004d6c:	9302      	str	r3, [sp, #8]
 8004d6e:	9001      	str	r0, [sp, #4]
 8004d70:	e7ff      	b.n	8004d72 <_ZN4core3fmt10ArgumentV13new17hf7ba76b3ae396a12E+0x18>
 8004d72:	9804      	ldr	r0, [sp, #16]
 8004d74:	9009      	str	r0, [sp, #36]	; 0x24
 8004d76:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004d78:	9000      	str	r0, [sp, #0]
 8004d7a:	e7ff      	b.n	8004d7c <_ZN4core3fmt10ArgumentV13new17hf7ba76b3ae396a12E+0x22>
 8004d7c:	9800      	ldr	r0, [sp, #0]
 8004d7e:	9006      	str	r0, [sp, #24]
 8004d80:	9901      	ldr	r1, [sp, #4]
 8004d82:	9107      	str	r1, [sp, #28]
 8004d84:	9806      	ldr	r0, [sp, #24]
 8004d86:	9907      	ldr	r1, [sp, #28]
 8004d88:	b00a      	add	sp, #40	; 0x28
 8004d8a:	4770      	bx	lr

08004d8c <_ZN4core3fmt9Arguments6new_v117h7b18277453f88ac4E>:
 8004d8c:	b570      	push	{r4, r5, r6, lr}
 8004d8e:	b08a      	sub	sp, #40	; 0x28
 8004d90:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
 8004d94:	469e      	mov	lr, r3
 8004d96:	4614      	mov	r4, r2
 8004d98:	460d      	mov	r5, r1
 8004d9a:	4606      	mov	r6, r0
 8004d9c:	9104      	str	r1, [sp, #16]
 8004d9e:	9205      	str	r2, [sp, #20]
 8004da0:	9306      	str	r3, [sp, #24]
 8004da2:	f8cd c01c 	str.w	ip, [sp, #28]
 8004da6:	9904      	ldr	r1, [sp, #16]
 8004da8:	9a05      	ldr	r2, [sp, #20]
 8004daa:	2300      	movs	r3, #0
 8004dac:	9309      	str	r3, [sp, #36]	; 0x24
 8004dae:	9308      	str	r3, [sp, #32]
 8004db0:	9308      	str	r3, [sp, #32]
 8004db2:	9b06      	ldr	r3, [sp, #24]
 8004db4:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8004db8:	6001      	str	r1, [r0, #0]
 8004dba:	6042      	str	r2, [r0, #4]
 8004dbc:	9908      	ldr	r1, [sp, #32]
 8004dbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004dc0:	6081      	str	r1, [r0, #8]
 8004dc2:	60c2      	str	r2, [r0, #12]
 8004dc4:	6103      	str	r3, [r0, #16]
 8004dc6:	f8c0 c014 	str.w	ip, [r0, #20]
 8004dca:	f8cd e00c 	str.w	lr, [sp, #12]
 8004dce:	9402      	str	r4, [sp, #8]
 8004dd0:	9501      	str	r5, [sp, #4]
 8004dd2:	9600      	str	r6, [sp, #0]
 8004dd4:	b00a      	add	sp, #40	; 0x28
 8004dd6:	bd70      	pop	{r4, r5, r6, pc}

08004dd8 <_ZN101_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h27eb5c40c78bb5e7E>:
 8004dd8:	b510      	push	{r4, lr}
 8004dda:	b08c      	sub	sp, #48	; 0x30
 8004ddc:	4613      	mov	r3, r2
 8004dde:	468c      	mov	ip, r1
 8004de0:	4686      	mov	lr, r0
 8004de2:	9007      	str	r0, [sp, #28]
 8004de4:	9108      	str	r1, [sp, #32]
 8004de6:	9209      	str	r2, [sp, #36]	; 0x24
 8004de8:	9807      	ldr	r0, [sp, #28]
 8004dea:	2100      	movs	r1, #0
 8004dec:	910a      	str	r1, [sp, #40]	; 0x28
 8004dee:	900b      	str	r0, [sp, #44]	; 0x2c
 8004df0:	9a08      	ldr	r2, [sp, #32]
 8004df2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004df4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004df6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8004df8:	9006      	str	r0, [sp, #24]
 8004dfa:	4608      	mov	r0, r1
 8004dfc:	4621      	mov	r1, r4
 8004dfe:	9c06      	ldr	r4, [sp, #24]
 8004e00:	9305      	str	r3, [sp, #20]
 8004e02:	4623      	mov	r3, r4
 8004e04:	f8cd c010 	str.w	ip, [sp, #16]
 8004e08:	f8cd e00c 	str.w	lr, [sp, #12]
 8004e0c:	f000 f893 	bl	8004f36 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h5aa536dd3e52e567E>
 8004e10:	9002      	str	r0, [sp, #8]
 8004e12:	9101      	str	r1, [sp, #4]
 8004e14:	e7ff      	b.n	8004e16 <_ZN101_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h27eb5c40c78bb5e7E+0x3e>
 8004e16:	9802      	ldr	r0, [sp, #8]
 8004e18:	9901      	ldr	r1, [sp, #4]
 8004e1a:	b00c      	add	sp, #48	; 0x30
 8004e1c:	bd10      	pop	{r4, pc}

08004e1e <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd3e80460d631842cE>:
 8004e1e:	b580      	push	{r7, lr}
 8004e20:	b08a      	sub	sp, #40	; 0x28
 8004e22:	4601      	mov	r1, r0
 8004e24:	9003      	str	r0, [sp, #12]
 8004e26:	2000      	movs	r0, #0
 8004e28:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
 8004e2c:	9803      	ldr	r0, [sp, #12]
 8004e2e:	1d02      	adds	r2, r0, #4
 8004e30:	9102      	str	r1, [sp, #8]
 8004e32:	4611      	mov	r1, r2
 8004e34:	f002 f80f 	bl	8006e56 <_ZN4core3cmp5impls55_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$u32$GT$2lt17h61db27facad99196E>
 8004e38:	9001      	str	r0, [sp, #4]
 8004e3a:	e7ff      	b.n	8004e3c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd3e80460d631842cE+0x1e>
 8004e3c:	9801      	ldr	r0, [sp, #4]
 8004e3e:	07c1      	lsls	r1, r0, #31
 8004e40:	2900      	cmp	r1, #0
 8004e42:	d01f      	beq.n	8004e84 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd3e80460d631842cE+0x66>
 8004e44:	e7ff      	b.n	8004e46 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd3e80460d631842cE+0x28>
 8004e46:	9803      	ldr	r0, [sp, #12]
 8004e48:	2101      	movs	r1, #1
 8004e4a:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
 8004e4e:	f002 fb2d 	bl	80074ac <_ZN47_$LT$u32$u20$as$u20$core..iter..range..Step$GT$9add_usize17he588ae2aecfa2f7eE>
 8004e52:	9107      	str	r1, [sp, #28]
 8004e54:	9006      	str	r0, [sp, #24]
 8004e56:	e7ff      	b.n	8004e58 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd3e80460d631842cE+0x3a>
 8004e58:	9806      	ldr	r0, [sp, #24]
 8004e5a:	2801      	cmp	r0, #1
 8004e5c:	d10f      	bne.n	8004e7e <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd3e80460d631842cE+0x60>
 8004e5e:	e7ff      	b.n	8004e60 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd3e80460d631842cE+0x42>
 8004e60:	2000      	movs	r0, #0
 8004e62:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
 8004e66:	9807      	ldr	r0, [sp, #28]
 8004e68:	9008      	str	r0, [sp, #32]
 8004e6a:	9903      	ldr	r1, [sp, #12]
 8004e6c:	a808      	add	r0, sp, #32
 8004e6e:	f002 fbaa 	bl	80075c6 <_ZN4core3mem4swap17hddd51f7392412bcdE>
 8004e72:	e7ff      	b.n	8004e74 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd3e80460d631842cE+0x56>
 8004e74:	9808      	ldr	r0, [sp, #32]
 8004e76:	9005      	str	r0, [sp, #20]
 8004e78:	2001      	movs	r0, #1
 8004e7a:	9004      	str	r0, [sp, #16]
 8004e7c:	e018      	b.n	8004eb0 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd3e80460d631842cE+0x92>
 8004e7e:	2000      	movs	r0, #0
 8004e80:	9004      	str	r0, [sp, #16]
 8004e82:	e015      	b.n	8004eb0 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd3e80460d631842cE+0x92>
 8004e84:	2000      	movs	r0, #0
 8004e86:	9004      	str	r0, [sp, #16]
 8004e88:	e7ff      	b.n	8004e8a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd3e80460d631842cE+0x6c>
 8004e8a:	9804      	ldr	r0, [sp, #16]
 8004e8c:	9905      	ldr	r1, [sp, #20]
 8004e8e:	b00a      	add	sp, #40	; 0x28
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	2000      	movs	r0, #0
 8004e94:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
 8004e98:	e7f7      	b.n	8004e8a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd3e80460d631842cE+0x6c>
 8004e9a:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
 8004e9e:	07c0      	lsls	r0, r0, #31
 8004ea0:	2800      	cmp	r0, #0
 8004ea2:	d0f6      	beq.n	8004e92 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd3e80460d631842cE+0x74>
 8004ea4:	e7ff      	b.n	8004ea6 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd3e80460d631842cE+0x88>
 8004ea6:	2000      	movs	r0, #0
 8004ea8:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
 8004eac:	e7f1      	b.n	8004e92 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd3e80460d631842cE+0x74>
 8004eae:	e7f0      	b.n	8004e92 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd3e80460d631842cE+0x74>
 8004eb0:	9806      	ldr	r0, [sp, #24]
 8004eb2:	2801      	cmp	r0, #1
 8004eb4:	d0f1      	beq.n	8004e9a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd3e80460d631842cE+0x7c>
 8004eb6:	e7fa      	b.n	8004eae <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd3e80460d631842cE+0x90>

08004eb8 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17ha43f49b82ef7bb66E>:
 8004eb8:	b084      	sub	sp, #16
 8004eba:	460a      	mov	r2, r1
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	9002      	str	r0, [sp, #8]
 8004ec0:	9103      	str	r1, [sp, #12]
 8004ec2:	9802      	ldr	r0, [sp, #8]
 8004ec4:	9903      	ldr	r1, [sp, #12]
 8004ec6:	9201      	str	r2, [sp, #4]
 8004ec8:	9300      	str	r3, [sp, #0]
 8004eca:	b004      	add	sp, #16
 8004ecc:	4770      	bx	lr

08004ece <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hfc81ae825f5ef360E>:
 8004ece:	b084      	sub	sp, #16
 8004ed0:	460a      	mov	r2, r1
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	9002      	str	r0, [sp, #8]
 8004ed6:	9103      	str	r1, [sp, #12]
 8004ed8:	9802      	ldr	r0, [sp, #8]
 8004eda:	9903      	ldr	r1, [sp, #12]
 8004edc:	9201      	str	r2, [sp, #4]
 8004ede:	9300      	str	r3, [sp, #0]
 8004ee0:	b004      	add	sp, #16
 8004ee2:	4770      	bx	lr

08004ee4 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h87228261cb1ac456E>:
 8004ee4:	b5b0      	push	{r4, r5, r7, lr}
 8004ee6:	b08c      	sub	sp, #48	; 0x30
 8004ee8:	469c      	mov	ip, r3
 8004eea:	4696      	mov	lr, r2
 8004eec:	460c      	mov	r4, r1
 8004eee:	4605      	mov	r5, r0
 8004ef0:	9008      	str	r0, [sp, #32]
 8004ef2:	9109      	str	r1, [sp, #36]	; 0x24
 8004ef4:	920a      	str	r2, [sp, #40]	; 0x28
 8004ef6:	930b      	str	r3, [sp, #44]	; 0x2c
 8004ef8:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004efa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004efc:	f8cd c01c 	str.w	ip, [sp, #28]
 8004f00:	f8cd e018 	str.w	lr, [sp, #24]
 8004f04:	9405      	str	r4, [sp, #20]
 8004f06:	9504      	str	r5, [sp, #16]
 8004f08:	f000 fd43 	bl	8005992 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h9420d1a1dab260e8E>
 8004f0c:	9003      	str	r0, [sp, #12]
 8004f0e:	e7ff      	b.n	8004f10 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h87228261cb1ac456E+0x2c>
 8004f10:	9908      	ldr	r1, [sp, #32]
 8004f12:	9803      	ldr	r0, [sp, #12]
 8004f14:	f001 fda9 	bl	8006a6a <_ZN4core3ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h444475af15b7177dE>
 8004f18:	9002      	str	r0, [sp, #8]
 8004f1a:	e7ff      	b.n	8004f1c <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h87228261cb1ac456E+0x38>
 8004f1c:	9808      	ldr	r0, [sp, #32]
 8004f1e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004f20:	1a09      	subs	r1, r1, r0
 8004f22:	9802      	ldr	r0, [sp, #8]
 8004f24:	f000 fce0 	bl	80058e8 <_ZN4core5slice18from_raw_parts_mut17h14319b5b3cdbbc41E>
 8004f28:	9001      	str	r0, [sp, #4]
 8004f2a:	9100      	str	r1, [sp, #0]
 8004f2c:	e7ff      	b.n	8004f2e <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h87228261cb1ac456E+0x4a>
 8004f2e:	9801      	ldr	r0, [sp, #4]
 8004f30:	9900      	ldr	r1, [sp, #0]
 8004f32:	b00c      	add	sp, #48	; 0x30
 8004f34:	bdb0      	pop	{r4, r5, r7, pc}

08004f36 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h5aa536dd3e52e567E>:
 8004f36:	b5b0      	push	{r4, r5, r7, lr}
 8004f38:	b08e      	sub	sp, #56	; 0x38
 8004f3a:	469c      	mov	ip, r3
 8004f3c:	4696      	mov	lr, r2
 8004f3e:	460c      	mov	r4, r1
 8004f40:	4605      	mov	r5, r0
 8004f42:	900a      	str	r0, [sp, #40]	; 0x28
 8004f44:	910b      	str	r1, [sp, #44]	; 0x2c
 8004f46:	920c      	str	r2, [sp, #48]	; 0x30
 8004f48:	930d      	str	r3, [sp, #52]	; 0x34
 8004f4a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004f4c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004f4e:	4288      	cmp	r0, r1
 8004f50:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 8004f54:	f8cd e020 	str.w	lr, [sp, #32]
 8004f58:	9407      	str	r4, [sp, #28]
 8004f5a:	9506      	str	r5, [sp, #24]
 8004f5c:	d905      	bls.n	8004f6a <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h5aa536dd3e52e567E+0x34>
 8004f5e:	e7ff      	b.n	8004f60 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h5aa536dd3e52e567E+0x2a>
 8004f60:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004f62:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004f64:	f003 fd1f 	bl	80089a6 <_ZN4core5slice22slice_index_order_fail17h7c776986fd4b085eE>
 8004f68:	defe      	udf	#254	; 0xfe
 8004f6a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004f6c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004f6e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004f70:	9005      	str	r0, [sp, #20]
 8004f72:	4608      	mov	r0, r1
 8004f74:	4611      	mov	r1, r2
 8004f76:	f001 ff29 	bl	8006dcc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h12b66ceea47b68d2E>
 8004f7a:	9004      	str	r0, [sp, #16]
 8004f7c:	e7ff      	b.n	8004f7e <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h5aa536dd3e52e567E+0x48>
 8004f7e:	9805      	ldr	r0, [sp, #20]
 8004f80:	9904      	ldr	r1, [sp, #16]
 8004f82:	4288      	cmp	r0, r1
 8004f84:	d90f      	bls.n	8004fa6 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h5aa536dd3e52e567E+0x70>
 8004f86:	e7ff      	b.n	8004f88 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h5aa536dd3e52e567E+0x52>
 8004f88:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004f8a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004f8c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004f8e:	9003      	str	r0, [sp, #12]
 8004f90:	4608      	mov	r0, r1
 8004f92:	4611      	mov	r1, r2
 8004f94:	f001 ff1a 	bl	8006dcc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h12b66ceea47b68d2E>
 8004f98:	9002      	str	r0, [sp, #8]
 8004f9a:	e7ff      	b.n	8004f9c <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h5aa536dd3e52e567E+0x66>
 8004f9c:	9803      	ldr	r0, [sp, #12]
 8004f9e:	9902      	ldr	r1, [sp, #8]
 8004fa0:	f003 fcdf 	bl	8008962 <_ZN4core5slice20slice_index_len_fail17hfa6ff34b8fd07644E>
 8004fa4:	defe      	udf	#254	; 0xfe
 8004fa6:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004fa8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004faa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004fac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004fae:	f7ff ff99 	bl	8004ee4 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h87228261cb1ac456E>
 8004fb2:	9001      	str	r0, [sp, #4]
 8004fb4:	9100      	str	r1, [sp, #0]
 8004fb6:	e7ff      	b.n	8004fb8 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h5aa536dd3e52e567E+0x82>
 8004fb8:	9801      	ldr	r0, [sp, #4]
 8004fba:	9900      	ldr	r1, [sp, #0]
 8004fbc:	b00e      	add	sp, #56	; 0x38
 8004fbe:	bdb0      	pop	{r4, r5, r7, pc}

08004fc0 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3eec109f7132f81eE>:
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b086      	sub	sp, #24
 8004fc4:	460a      	mov	r2, r1
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	9004      	str	r0, [sp, #16]
 8004fca:	9105      	str	r1, [sp, #20]
 8004fcc:	9804      	ldr	r0, [sp, #16]
 8004fce:	6800      	ldr	r0, [r0, #0]
 8004fd0:	9905      	ldr	r1, [sp, #20]
 8004fd2:	9203      	str	r2, [sp, #12]
 8004fd4:	9302      	str	r3, [sp, #8]
 8004fd6:	f000 f851 	bl	800507c <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17ha361f31015ba9c1fE>
 8004fda:	9001      	str	r0, [sp, #4]
 8004fdc:	e7ff      	b.n	8004fde <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3eec109f7132f81eE+0x1e>
 8004fde:	9801      	ldr	r0, [sp, #4]
 8004fe0:	f000 0001 	and.w	r0, r0, #1
 8004fe4:	b006      	add	sp, #24
 8004fe6:	bd80      	pop	{r7, pc}

08004fe8 <_ZN4core6option15Option$LT$T$GT$5ok_or17hb3b3817347480c77E>:
 8004fe8:	b08a      	sub	sp, #40	; 0x28
 8004fea:	460a      	mov	r2, r1
 8004fec:	4603      	mov	r3, r0
 8004fee:	9003      	str	r0, [sp, #12]
 8004ff0:	9104      	str	r1, [sp, #16]
 8004ff2:	2000      	movs	r0, #0
 8004ff4:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
 8004ff8:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8004ffc:	2001      	movs	r0, #1
 8004ffe:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
 8005002:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8005006:	9803      	ldr	r0, [sp, #12]
 8005008:	2800      	cmp	r0, #0
 800500a:	9202      	str	r2, [sp, #8]
 800500c:	9301      	str	r3, [sp, #4]
 800500e:	9000      	str	r0, [sp, #0]
 8005010:	d00e      	beq.n	8005030 <_ZN4core6option15Option$LT$T$GT$5ok_or17hb3b3817347480c77E+0x48>
 8005012:	e7ff      	b.n	8005014 <_ZN4core6option15Option$LT$T$GT$5ok_or17hb3b3817347480c77E+0x2c>
 8005014:	9800      	ldr	r0, [sp, #0]
 8005016:	2801      	cmp	r0, #1
 8005018:	d001      	beq.n	800501e <_ZN4core6option15Option$LT$T$GT$5ok_or17hb3b3817347480c77E+0x36>
 800501a:	e7ff      	b.n	800501c <_ZN4core6option15Option$LT$T$GT$5ok_or17hb3b3817347480c77E+0x34>
 800501c:	defe      	udf	#254	; 0xfe
 800501e:	2000      	movs	r0, #0
 8005020:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
 8005024:	9904      	ldr	r1, [sp, #16]
 8005026:	9108      	str	r1, [sp, #32]
 8005028:	9908      	ldr	r1, [sp, #32]
 800502a:	9107      	str	r1, [sp, #28]
 800502c:	9006      	str	r0, [sp, #24]
 800502e:	e005      	b.n	800503c <_ZN4core6option15Option$LT$T$GT$5ok_or17hb3b3817347480c77E+0x54>
 8005030:	2000      	movs	r0, #0
 8005032:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8005036:	2001      	movs	r0, #1
 8005038:	9006      	str	r0, [sp, #24]
 800503a:	e7ff      	b.n	800503c <_ZN4core6option15Option$LT$T$GT$5ok_or17hb3b3817347480c77E+0x54>
 800503c:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
 8005040:	07c0      	lsls	r0, r0, #31
 8005042:	2800      	cmp	r0, #0
 8005044:	d104      	bne.n	8005050 <_ZN4core6option15Option$LT$T$GT$5ok_or17hb3b3817347480c77E+0x68>
 8005046:	e7ff      	b.n	8005048 <_ZN4core6option15Option$LT$T$GT$5ok_or17hb3b3817347480c77E+0x60>
 8005048:	9803      	ldr	r0, [sp, #12]
 800504a:	2801      	cmp	r0, #1
 800504c:	d008      	beq.n	8005060 <_ZN4core6option15Option$LT$T$GT$5ok_or17hb3b3817347480c77E+0x78>
 800504e:	e011      	b.n	8005074 <_ZN4core6option15Option$LT$T$GT$5ok_or17hb3b3817347480c77E+0x8c>
 8005050:	2000      	movs	r0, #0
 8005052:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8005056:	e7f7      	b.n	8005048 <_ZN4core6option15Option$LT$T$GT$5ok_or17hb3b3817347480c77E+0x60>
 8005058:	9806      	ldr	r0, [sp, #24]
 800505a:	9907      	ldr	r1, [sp, #28]
 800505c:	b00a      	add	sp, #40	; 0x28
 800505e:	4770      	bx	lr
 8005060:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
 8005064:	07c0      	lsls	r0, r0, #31
 8005066:	2800      	cmp	r0, #0
 8005068:	d0f6      	beq.n	8005058 <_ZN4core6option15Option$LT$T$GT$5ok_or17hb3b3817347480c77E+0x70>
 800506a:	e7ff      	b.n	800506c <_ZN4core6option15Option$LT$T$GT$5ok_or17hb3b3817347480c77E+0x84>
 800506c:	2000      	movs	r0, #0
 800506e:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
 8005072:	e7f1      	b.n	8005058 <_ZN4core6option15Option$LT$T$GT$5ok_or17hb3b3817347480c77E+0x70>
 8005074:	e7f0      	b.n	8005058 <_ZN4core6option15Option$LT$T$GT$5ok_or17hb3b3817347480c77E+0x70>

08005076 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h7fa4a63a8b7dfa6dE>:
 8005076:	b081      	sub	sp, #4
 8005078:	b001      	add	sp, #4
 800507a:	4770      	bx	lr

0800507c <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17ha361f31015ba9c1fE>:
 800507c:	b580      	push	{r7, lr}
 800507e:	b090      	sub	sp, #64	; 0x40
 8005080:	460a      	mov	r2, r1
 8005082:	4603      	mov	r3, r0
 8005084:	9004      	str	r0, [sp, #16]
 8005086:	9105      	str	r1, [sp, #20]
 8005088:	9804      	ldr	r0, [sp, #16]
 800508a:	9007      	str	r0, [sp, #28]
 800508c:	9807      	ldr	r0, [sp, #28]
 800508e:	6800      	ldr	r0, [r0, #0]
 8005090:	2800      	cmp	r0, #0
 8005092:	4601      	mov	r1, r0
 8005094:	bf18      	it	ne
 8005096:	2101      	movne	r1, #1
 8005098:	2800      	cmp	r0, #0
 800509a:	9203      	str	r2, [sp, #12]
 800509c:	9302      	str	r3, [sp, #8]
 800509e:	9101      	str	r1, [sp, #4]
 80050a0:	d005      	beq.n	80050ae <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17ha361f31015ba9c1fE+0x32>
 80050a2:	e7ff      	b.n	80050a4 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17ha361f31015ba9c1fE+0x28>
 80050a4:	9801      	ldr	r0, [sp, #4]
 80050a6:	2801      	cmp	r0, #1
 80050a8:	d012      	beq.n	80050d0 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17ha361f31015ba9c1fE+0x54>
 80050aa:	e7ff      	b.n	80050ac <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17ha361f31015ba9c1fE+0x30>
 80050ac:	defe      	udf	#254	; 0xfe
 80050ae:	9905      	ldr	r1, [sp, #20]
 80050b0:	f645 62c0 	movw	r2, #24256	; 0x5ec0
 80050b4:	f6c0 0201 	movt	r2, #2049	; 0x801
 80050b8:	a808      	add	r0, sp, #32
 80050ba:	2304      	movs	r3, #4
 80050bc:	f004 fbac 	bl	8009818 <_ZN4core3fmt9Formatter11debug_tuple17hb44f73c94ff26e9bE>
 80050c0:	e7ff      	b.n	80050c2 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17ha361f31015ba9c1fE+0x46>
 80050c2:	a808      	add	r0, sp, #32
 80050c4:	f003 ff37 	bl	8008f36 <_ZN4core3fmt8builders10DebugTuple6finish17h7478dcd5620691a7E>
 80050c8:	f88d 001b 	strb.w	r0, [sp, #27]
 80050cc:	e7ff      	b.n	80050ce <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17ha361f31015ba9c1fE+0x52>
 80050ce:	e01e      	b.n	800510e <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17ha361f31015ba9c1fE+0x92>
 80050d0:	9807      	ldr	r0, [sp, #28]
 80050d2:	900b      	str	r0, [sp, #44]	; 0x2c
 80050d4:	9905      	ldr	r1, [sp, #20]
 80050d6:	f645 62bc 	movw	r2, #24252	; 0x5ebc
 80050da:	f6c0 0201 	movt	r2, #2049	; 0x801
 80050de:	a80c      	add	r0, sp, #48	; 0x30
 80050e0:	2304      	movs	r3, #4
 80050e2:	f004 fb99 	bl	8009818 <_ZN4core3fmt9Formatter11debug_tuple17hb44f73c94ff26e9bE>
 80050e6:	e7ff      	b.n	80050e8 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17ha361f31015ba9c1fE+0x6c>
 80050e8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80050ea:	900f      	str	r0, [sp, #60]	; 0x3c
 80050ec:	f645 62c4 	movw	r2, #24260	; 0x5ec4
 80050f0:	f6c0 0201 	movt	r2, #2049	; 0x801
 80050f4:	a80c      	add	r0, sp, #48	; 0x30
 80050f6:	a90f      	add	r1, sp, #60	; 0x3c
 80050f8:	f003 fea8 	bl	8008e4c <_ZN4core3fmt8builders10DebugTuple5field17ha79ab474d6fe3b39E>
 80050fc:	9000      	str	r0, [sp, #0]
 80050fe:	e7ff      	b.n	8005100 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17ha361f31015ba9c1fE+0x84>
 8005100:	a80c      	add	r0, sp, #48	; 0x30
 8005102:	f003 ff18 	bl	8008f36 <_ZN4core3fmt8builders10DebugTuple6finish17h7478dcd5620691a7E>
 8005106:	f88d 001b 	strb.w	r0, [sp, #27]
 800510a:	e7ff      	b.n	800510c <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17ha361f31015ba9c1fE+0x90>
 800510c:	e7ff      	b.n	800510e <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17ha361f31015ba9c1fE+0x92>
 800510e:	f89d 001b 	ldrb.w	r0, [sp, #27]
 8005112:	b010      	add	sp, #64	; 0x40
 8005114:	bd80      	pop	{r7, pc}

08005116 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17hc5c34342aa7dc908E>:
 8005116:	b082      	sub	sp, #8
 8005118:	2000      	movs	r0, #0
 800511a:	9001      	str	r0, [sp, #4]
 800511c:	9801      	ldr	r0, [sp, #4]
 800511e:	b002      	add	sp, #8
 8005120:	4770      	bx	lr

08005122 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h266ad2132c426b62E>:
 8005122:	b580      	push	{r7, lr}
 8005124:	b088      	sub	sp, #32
 8005126:	460a      	mov	r2, r1
 8005128:	4603      	mov	r3, r0
 800512a:	9005      	str	r0, [sp, #20]
 800512c:	9106      	str	r1, [sp, #24]
 800512e:	9805      	ldr	r0, [sp, #20]
 8005130:	9906      	ldr	r1, [sp, #24]
 8005132:	9204      	str	r2, [sp, #16]
 8005134:	9303      	str	r3, [sp, #12]
 8005136:	f7ff ff57 	bl	8004fe8 <_ZN4core6option15Option$LT$T$GT$5ok_or17hb3b3817347480c77E>
 800513a:	9002      	str	r0, [sp, #8]
 800513c:	9101      	str	r1, [sp, #4]
 800513e:	e7ff      	b.n	8005140 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h266ad2132c426b62E+0x1e>
 8005140:	9802      	ldr	r0, [sp, #8]
 8005142:	9901      	ldr	r1, [sp, #4]
 8005144:	b008      	add	sp, #32
 8005146:	bd80      	pop	{r7, pc}

08005148 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17h70df41bf340d2af5E>:
 8005148:	b580      	push	{r7, lr}
 800514a:	b094      	sub	sp, #80	; 0x50
 800514c:	460a      	mov	r2, r1
 800514e:	4603      	mov	r3, r0
 8005150:	9007      	str	r0, [sp, #28]
 8005152:	9108      	str	r1, [sp, #32]
 8005154:	9807      	ldr	r0, [sp, #28]
 8005156:	6800      	ldr	r0, [r0, #0]
 8005158:	2800      	cmp	r0, #0
 800515a:	bf18      	it	ne
 800515c:	2001      	movne	r0, #1
 800515e:	f04f 0100 	mov.w	r1, #0
 8005162:	9111      	str	r1, [sp, #68]	; 0x44
 8005164:	9010      	str	r0, [sp, #64]	; 0x40
 8005166:	9810      	ldr	r0, [sp, #64]	; 0x40
 8005168:	9911      	ldr	r1, [sp, #68]	; 0x44
 800516a:	9206      	str	r2, [sp, #24]
 800516c:	9305      	str	r3, [sp, #20]
 800516e:	9004      	str	r0, [sp, #16]
 8005170:	9103      	str	r1, [sp, #12]
 8005172:	e7ff      	b.n	8005174 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17h70df41bf340d2af5E+0x2c>
 8005174:	9804      	ldr	r0, [sp, #16]
 8005176:	900a      	str	r0, [sp, #40]	; 0x28
 8005178:	9908      	ldr	r1, [sp, #32]
 800517a:	6809      	ldr	r1, [r1, #0]
 800517c:	2900      	cmp	r1, #0
 800517e:	bf18      	it	ne
 8005180:	2101      	movne	r1, #1
 8005182:	f04f 0200 	mov.w	r2, #0
 8005186:	9213      	str	r2, [sp, #76]	; 0x4c
 8005188:	9112      	str	r1, [sp, #72]	; 0x48
 800518a:	9912      	ldr	r1, [sp, #72]	; 0x48
 800518c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800518e:	9102      	str	r1, [sp, #8]
 8005190:	9201      	str	r2, [sp, #4]
 8005192:	e7ff      	b.n	8005194 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17h70df41bf340d2af5E+0x4c>
 8005194:	9802      	ldr	r0, [sp, #8]
 8005196:	900b      	str	r0, [sp, #44]	; 0x2c
 8005198:	990a      	ldr	r1, [sp, #40]	; 0x28
 800519a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800519c:	4291      	cmp	r1, r2
 800519e:	d109      	bne.n	80051b4 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17h70df41bf340d2af5E+0x6c>
 80051a0:	e7ff      	b.n	80051a2 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17h70df41bf340d2af5E+0x5a>
 80051a2:	9807      	ldr	r0, [sp, #28]
 80051a4:	9908      	ldr	r1, [sp, #32]
 80051a6:	900c      	str	r0, [sp, #48]	; 0x30
 80051a8:	910d      	str	r1, [sp, #52]	; 0x34
 80051aa:	980c      	ldr	r0, [sp, #48]	; 0x30
 80051ac:	6800      	ldr	r0, [r0, #0]
 80051ae:	2800      	cmp	r0, #0
 80051b0:	d113      	bne.n	80051da <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17h70df41bf340d2af5E+0x92>
 80051b2:	e00e      	b.n	80051d2 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17h70df41bf340d2af5E+0x8a>
 80051b4:	2000      	movs	r0, #0
 80051b6:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
 80051ba:	e015      	b.n	80051e8 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17h70df41bf340d2af5E+0xa0>
 80051bc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80051be:	900e      	str	r0, [sp, #56]	; 0x38
 80051c0:	980d      	ldr	r0, [sp, #52]	; 0x34
 80051c2:	900f      	str	r0, [sp, #60]	; 0x3c
 80051c4:	980e      	ldr	r0, [sp, #56]	; 0x38
 80051c6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80051c8:	f000 f911 	bl	80053ee <_ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2eq17h2fc938e4934bc64eE>
 80051cc:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
 80051d0:	e008      	b.n	80051e4 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17h70df41bf340d2af5E+0x9c>
 80051d2:	2001      	movs	r0, #1
 80051d4:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
 80051d8:	e005      	b.n	80051e6 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17h70df41bf340d2af5E+0x9e>
 80051da:	980d      	ldr	r0, [sp, #52]	; 0x34
 80051dc:	6800      	ldr	r0, [r0, #0]
 80051de:	2800      	cmp	r0, #0
 80051e0:	d1ec      	bne.n	80051bc <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17h70df41bf340d2af5E+0x74>
 80051e2:	e7f6      	b.n	80051d2 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17h70df41bf340d2af5E+0x8a>
 80051e4:	e7ff      	b.n	80051e6 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17h70df41bf340d2af5E+0x9e>
 80051e6:	e7ff      	b.n	80051e8 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17h70df41bf340d2af5E+0xa0>
 80051e8:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
 80051ec:	b014      	add	sp, #80	; 0x50
 80051ee:	bd80      	pop	{r7, pc}

080051f0 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hc10bf46bde31ca95E>:
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b094      	sub	sp, #80	; 0x50
 80051f4:	460a      	mov	r2, r1
 80051f6:	4603      	mov	r3, r0
 80051f8:	9007      	str	r0, [sp, #28]
 80051fa:	9108      	str	r1, [sp, #32]
 80051fc:	9807      	ldr	r0, [sp, #28]
 80051fe:	6800      	ldr	r0, [r0, #0]
 8005200:	2800      	cmp	r0, #0
 8005202:	bf18      	it	ne
 8005204:	2001      	movne	r0, #1
 8005206:	f04f 0100 	mov.w	r1, #0
 800520a:	9111      	str	r1, [sp, #68]	; 0x44
 800520c:	9010      	str	r0, [sp, #64]	; 0x40
 800520e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8005210:	9911      	ldr	r1, [sp, #68]	; 0x44
 8005212:	9206      	str	r2, [sp, #24]
 8005214:	9305      	str	r3, [sp, #20]
 8005216:	9004      	str	r0, [sp, #16]
 8005218:	9103      	str	r1, [sp, #12]
 800521a:	e7ff      	b.n	800521c <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hc10bf46bde31ca95E+0x2c>
 800521c:	9804      	ldr	r0, [sp, #16]
 800521e:	900a      	str	r0, [sp, #40]	; 0x28
 8005220:	9908      	ldr	r1, [sp, #32]
 8005222:	6809      	ldr	r1, [r1, #0]
 8005224:	2900      	cmp	r1, #0
 8005226:	bf18      	it	ne
 8005228:	2101      	movne	r1, #1
 800522a:	f04f 0200 	mov.w	r2, #0
 800522e:	9213      	str	r2, [sp, #76]	; 0x4c
 8005230:	9112      	str	r1, [sp, #72]	; 0x48
 8005232:	9912      	ldr	r1, [sp, #72]	; 0x48
 8005234:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005236:	9102      	str	r1, [sp, #8]
 8005238:	9201      	str	r2, [sp, #4]
 800523a:	e7ff      	b.n	800523c <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hc10bf46bde31ca95E+0x4c>
 800523c:	9802      	ldr	r0, [sp, #8]
 800523e:	900b      	str	r0, [sp, #44]	; 0x2c
 8005240:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005242:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005244:	4291      	cmp	r1, r2
 8005246:	d109      	bne.n	800525c <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hc10bf46bde31ca95E+0x6c>
 8005248:	e7ff      	b.n	800524a <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hc10bf46bde31ca95E+0x5a>
 800524a:	9807      	ldr	r0, [sp, #28]
 800524c:	9908      	ldr	r1, [sp, #32]
 800524e:	900c      	str	r0, [sp, #48]	; 0x30
 8005250:	910d      	str	r1, [sp, #52]	; 0x34
 8005252:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005254:	6800      	ldr	r0, [r0, #0]
 8005256:	2800      	cmp	r0, #0
 8005258:	d113      	bne.n	8005282 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hc10bf46bde31ca95E+0x92>
 800525a:	e00e      	b.n	800527a <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hc10bf46bde31ca95E+0x8a>
 800525c:	2000      	movs	r0, #0
 800525e:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
 8005262:	e015      	b.n	8005290 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hc10bf46bde31ca95E+0xa0>
 8005264:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005266:	900e      	str	r0, [sp, #56]	; 0x38
 8005268:	980d      	ldr	r0, [sp, #52]	; 0x34
 800526a:	900f      	str	r0, [sp, #60]	; 0x3c
 800526c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800526e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005270:	f000 f812 	bl	8005298 <_ZN4core3ptr145_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$unsafe$u20$extern$u20$$u22$C$u22$$u20$fn$LP$A$C$$u20$B$C$$u20$C$C$$u20$D$RP$$u20$.$GT$$u20$Ret$GT$2eq17h48917c1cab0294b9E>
 8005274:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
 8005278:	e008      	b.n	800528c <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hc10bf46bde31ca95E+0x9c>
 800527a:	2001      	movs	r0, #1
 800527c:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
 8005280:	e005      	b.n	800528e <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hc10bf46bde31ca95E+0x9e>
 8005282:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005284:	6800      	ldr	r0, [r0, #0]
 8005286:	2800      	cmp	r0, #0
 8005288:	d1ec      	bne.n	8005264 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hc10bf46bde31ca95E+0x74>
 800528a:	e7f6      	b.n	800527a <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hc10bf46bde31ca95E+0x8a>
 800528c:	e7ff      	b.n	800528e <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hc10bf46bde31ca95E+0x9e>
 800528e:	e7ff      	b.n	8005290 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hc10bf46bde31ca95E+0xa0>
 8005290:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
 8005294:	b014      	add	sp, #80	; 0x50
 8005296:	bd80      	pop	{r7, pc}

08005298 <_ZN4core3ptr145_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$unsafe$u20$extern$u20$$u22$C$u22$$u20$fn$LP$A$C$$u20$B$C$$u20$C$C$$u20$D$RP$$u20$.$GT$$u20$Ret$GT$2eq17h48917c1cab0294b9E>:
 8005298:	b084      	sub	sp, #16
 800529a:	460a      	mov	r2, r1
 800529c:	4603      	mov	r3, r0
 800529e:	9002      	str	r0, [sp, #8]
 80052a0:	9103      	str	r1, [sp, #12]
 80052a2:	9802      	ldr	r0, [sp, #8]
 80052a4:	6800      	ldr	r0, [r0, #0]
 80052a6:	9903      	ldr	r1, [sp, #12]
 80052a8:	6809      	ldr	r1, [r1, #0]
 80052aa:	1a40      	subs	r0, r0, r1
 80052ac:	fab0 f080 	clz	r0, r0
 80052b0:	0940      	lsrs	r0, r0, #5
 80052b2:	9201      	str	r2, [sp, #4]
 80052b4:	9300      	str	r3, [sp, #0]
 80052b6:	b004      	add	sp, #16
 80052b8:	4770      	bx	lr

080052ba <_ZN4core3ptr19swap_nonoverlapping17ha3384305dc7c4be9E>:
 80052ba:	b580      	push	{r7, lr}
 80052bc:	b08a      	sub	sp, #40	; 0x28
 80052be:	4613      	mov	r3, r2
 80052c0:	468c      	mov	ip, r1
 80052c2:	4686      	mov	lr, r0
 80052c4:	9004      	str	r0, [sp, #16]
 80052c6:	9105      	str	r1, [sp, #20]
 80052c8:	9206      	str	r2, [sp, #24]
 80052ca:	9804      	ldr	r0, [sp, #16]
 80052cc:	9007      	str	r0, [sp, #28]
 80052ce:	9805      	ldr	r0, [sp, #20]
 80052d0:	9008      	str	r0, [sp, #32]
 80052d2:	9303      	str	r3, [sp, #12]
 80052d4:	f8cd c008 	str.w	ip, [sp, #8]
 80052d8:	f8cd e004 	str.w	lr, [sp, #4]
 80052dc:	f002 f982 	bl	80075e4 <_ZN4core3mem7size_of17hf368a5e6b408f7d1E>
 80052e0:	9000      	str	r0, [sp, #0]
 80052e2:	e7ff      	b.n	80052e4 <_ZN4core3ptr19swap_nonoverlapping17ha3384305dc7c4be9E+0x2a>
 80052e4:	9806      	ldr	r0, [sp, #24]
 80052e6:	9900      	ldr	r1, [sp, #0]
 80052e8:	4348      	muls	r0, r1
 80052ea:	9009      	str	r0, [sp, #36]	; 0x24
 80052ec:	9807      	ldr	r0, [sp, #28]
 80052ee:	9908      	ldr	r1, [sp, #32]
 80052f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80052f2:	f000 f891 	bl	8005418 <_ZN4core3ptr25swap_nonoverlapping_bytes17hea66163c817d6e8bE>
 80052f6:	e7ff      	b.n	80052f8 <_ZN4core3ptr19swap_nonoverlapping17ha3384305dc7c4be9E+0x3e>
 80052f8:	b00a      	add	sp, #40	; 0x28
 80052fa:	bd80      	pop	{r7, pc}

080052fc <_ZN4core3ptr23swap_nonoverlapping_one17hf704b0957311fe22E>:
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b086      	sub	sp, #24
 8005300:	460a      	mov	r2, r1
 8005302:	4603      	mov	r3, r0
 8005304:	9003      	str	r0, [sp, #12]
 8005306:	9104      	str	r1, [sp, #16]
 8005308:	9202      	str	r2, [sp, #8]
 800530a:	9301      	str	r3, [sp, #4]
 800530c:	f002 f96a 	bl	80075e4 <_ZN4core3mem7size_of17hf368a5e6b408f7d1E>
 8005310:	9000      	str	r0, [sp, #0]
 8005312:	e7ff      	b.n	8005314 <_ZN4core3ptr23swap_nonoverlapping_one17hf704b0957311fe22E+0x18>
 8005314:	9800      	ldr	r0, [sp, #0]
 8005316:	281f      	cmp	r0, #31
 8005318:	d811      	bhi.n	800533e <_ZN4core3ptr23swap_nonoverlapping_one17hf704b0957311fe22E+0x42>
 800531a:	e7ff      	b.n	800531c <_ZN4core3ptr23swap_nonoverlapping_one17hf704b0957311fe22E+0x20>
 800531c:	9803      	ldr	r0, [sp, #12]
 800531e:	f000 f817 	bl	8005350 <_ZN4core3ptr4read17hbb03a88aef84744cE>
 8005322:	9005      	str	r0, [sp, #20]
 8005324:	e7ff      	b.n	8005326 <_ZN4core3ptr23swap_nonoverlapping_one17hf704b0957311fe22E+0x2a>
 8005326:	9804      	ldr	r0, [sp, #16]
 8005328:	9903      	ldr	r1, [sp, #12]
 800532a:	2201      	movs	r2, #1
 800532c:	f000 f8f7 	bl	800551e <_ZN4core10intrinsics19copy_nonoverlapping17h0bbfc0328204f40cE>
 8005330:	e7ff      	b.n	8005332 <_ZN4core3ptr23swap_nonoverlapping_one17hf704b0957311fe22E+0x36>
 8005332:	9804      	ldr	r0, [sp, #16]
 8005334:	9905      	ldr	r1, [sp, #20]
 8005336:	f000 f82c 	bl	8005392 <_ZN4core3ptr5write17hd998e398d0d5a877E>
 800533a:	e7ff      	b.n	800533c <_ZN4core3ptr23swap_nonoverlapping_one17hf704b0957311fe22E+0x40>
 800533c:	e006      	b.n	800534c <_ZN4core3ptr23swap_nonoverlapping_one17hf704b0957311fe22E+0x50>
 800533e:	9803      	ldr	r0, [sp, #12]
 8005340:	9904      	ldr	r1, [sp, #16]
 8005342:	2201      	movs	r2, #1
 8005344:	f7ff ffb9 	bl	80052ba <_ZN4core3ptr19swap_nonoverlapping17ha3384305dc7c4be9E>
 8005348:	e7ff      	b.n	800534a <_ZN4core3ptr23swap_nonoverlapping_one17hf704b0957311fe22E+0x4e>
 800534a:	e7ff      	b.n	800534c <_ZN4core3ptr23swap_nonoverlapping_one17hf704b0957311fe22E+0x50>
 800534c:	b006      	add	sp, #24
 800534e:	bd80      	pop	{r7, pc}

08005350 <_ZN4core3ptr4read17hbb03a88aef84744cE>:
 8005350:	b580      	push	{r7, lr}
 8005352:	b08c      	sub	sp, #48	; 0x30
 8005354:	4601      	mov	r1, r0
 8005356:	9005      	str	r0, [sp, #20]
 8005358:	9807      	ldr	r0, [sp, #28]
 800535a:	9006      	str	r0, [sp, #24]
 800535c:	9104      	str	r1, [sp, #16]
 800535e:	e7ff      	b.n	8005360 <_ZN4core3ptr4read17hbb03a88aef84744cE+0x10>
 8005360:	9805      	ldr	r0, [sp, #20]
 8005362:	a906      	add	r1, sp, #24
 8005364:	910a      	str	r1, [sp, #40]	; 0x28
 8005366:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005368:	910b      	str	r1, [sp, #44]	; 0x2c
 800536a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800536c:	9003      	str	r0, [sp, #12]
 800536e:	9102      	str	r1, [sp, #8]
 8005370:	e7ff      	b.n	8005372 <_ZN4core3ptr4read17hbb03a88aef84744cE+0x22>
 8005372:	2201      	movs	r2, #1
 8005374:	9803      	ldr	r0, [sp, #12]
 8005376:	9902      	ldr	r1, [sp, #8]
 8005378:	f000 f8d1 	bl	800551e <_ZN4core10intrinsics19copy_nonoverlapping17h0bbfc0328204f40cE>
 800537c:	e7ff      	b.n	800537e <_ZN4core3ptr4read17hbb03a88aef84744cE+0x2e>
 800537e:	9806      	ldr	r0, [sp, #24]
 8005380:	9008      	str	r0, [sp, #32]
 8005382:	9808      	ldr	r0, [sp, #32]
 8005384:	9009      	str	r0, [sp, #36]	; 0x24
 8005386:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005388:	9001      	str	r0, [sp, #4]
 800538a:	e7ff      	b.n	800538c <_ZN4core3ptr4read17hbb03a88aef84744cE+0x3c>
 800538c:	9801      	ldr	r0, [sp, #4]
 800538e:	b00c      	add	sp, #48	; 0x30
 8005390:	bd80      	pop	{r7, pc}

08005392 <_ZN4core3ptr5write17hd998e398d0d5a877E>:
 8005392:	b084      	sub	sp, #16
 8005394:	460a      	mov	r2, r1
 8005396:	4603      	mov	r3, r0
 8005398:	9002      	str	r0, [sp, #8]
 800539a:	9103      	str	r1, [sp, #12]
 800539c:	9802      	ldr	r0, [sp, #8]
 800539e:	9903      	ldr	r1, [sp, #12]
 80053a0:	6001      	str	r1, [r0, #0]
 80053a2:	9201      	str	r2, [sp, #4]
 80053a4:	9300      	str	r3, [sp, #0]
 80053a6:	b004      	add	sp, #16
 80053a8:	4770      	bx	lr

080053aa <_ZN4core3ptr8null_mut17h57061ec19ef29f26E>:
 80053aa:	2000      	movs	r0, #0
 80053ac:	4770      	bx	lr

080053ae <_ZN4core3ptr8null_mut17hc0e3bb7e4d27c81eE>:
 80053ae:	2000      	movs	r0, #0
 80053b0:	4770      	bx	lr

080053b2 <_ZN6mynewt6kernel2os10eventq_run17h6ef32da48f4d5d86E>:
    #[doc = " - __`evq`__: The event queue to pull an event from"]
    #[doc = ""]
    #[doc = " Return: The event from the queue"]
    pub fn os_eventq_get(arg1: *mut os_eventq) -> *mut os_event;
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
 80053b2:	b580      	push	{r7, lr}
 80053b4:	b084      	sub	sp, #16
 80053b6:	4601      	mov	r1, r0
 80053b8:	9001      	str	r0, [sp, #4]
 80053ba:	9801      	ldr	r0, [sp, #4]
 80053bc:	9100      	str	r1, [sp, #0]
 80053be:	f007 fc9f 	bl	800cd00 <os_eventq_run>
 80053c2:	e7ff      	b.n	80053c4 <_ZN6mynewt6kernel2os10eventq_run17h6ef32da48f4d5d86E+0x12>
 80053c4:	2000      	movs	r0, #0
 80053c6:	9002      	str	r0, [sp, #8]
 80053c8:	2001      	movs	r0, #1
 80053ca:	9002      	str	r0, [sp, #8]
 80053cc:	9802      	ldr	r0, [sp, #8]
 80053ce:	b004      	add	sp, #16
 80053d0:	bd80      	pop	{r7, pc}

080053d2 <_ZN6mynewt6kernel2os15eventq_dflt_get17hc3569ee6b12f336bE>:
    #[doc = ""]
    #[doc = " - __`evq`__: The event queue to remove the event from"]
    #[doc = " - __`ev`__:  The event to remove from the queue"]
    pub fn os_eventq_remove(arg1: *mut os_eventq, arg2: *mut os_event);
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
 80053d2:	b580      	push	{r7, lr}
 80053d4:	b082      	sub	sp, #8
 80053d6:	9000      	str	r0, [sp, #0]
 80053d8:	f007 fcbe 	bl	800cd58 <os_eventq_dflt_get>
 80053dc:	9001      	str	r0, [sp, #4]
 80053de:	e7ff      	b.n	80053e0 <_ZN6mynewt6kernel2os15eventq_dflt_get17hc3569ee6b12f336bE+0xe>
 80053e0:	9801      	ldr	r0, [sp, #4]
 80053e2:	9900      	ldr	r1, [sp, #0]
 80053e4:	6048      	str	r0, [r1, #4]
 80053e6:	2000      	movs	r0, #0
 80053e8:	6008      	str	r0, [r1, #0]
 80053ea:	b002      	add	sp, #8
 80053ec:	bd80      	pop	{r7, pc}

080053ee <_ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2eq17h2fc938e4934bc64eE>:
 80053ee:	b580      	push	{r7, lr}
 80053f0:	b086      	sub	sp, #24
 80053f2:	460a      	mov	r2, r1
 80053f4:	4603      	mov	r3, r0
 80053f6:	9004      	str	r0, [sp, #16]
 80053f8:	9105      	str	r1, [sp, #20]
 80053fa:	9804      	ldr	r0, [sp, #16]
 80053fc:	6800      	ldr	r0, [r0, #0]
 80053fe:	9905      	ldr	r1, [sp, #20]
 8005400:	6809      	ldr	r1, [r1, #0]
 8005402:	9203      	str	r2, [sp, #12]
 8005404:	9302      	str	r3, [sp, #8]
 8005406:	f001 fd15 	bl	8006e34 <_ZN4core3cmp5impls53_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$u8$GT$2eq17h996d81c265015a00E>
 800540a:	9001      	str	r0, [sp, #4]
 800540c:	e7ff      	b.n	800540e <_ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2eq17h2fc938e4934bc64eE+0x20>
 800540e:	9801      	ldr	r0, [sp, #4]
 8005410:	f000 0001 	and.w	r0, r0, #1
 8005414:	b006      	add	sp, #24
 8005416:	bd80      	pop	{r7, pc}

08005418 <_ZN4core3ptr25swap_nonoverlapping_bytes17hea66163c817d6e8bE>:
 8005418:	b5d0      	push	{r4, r6, r7, lr}
 800541a:	af02      	add	r7, sp, #8
 800541c:	b0ac      	sub	sp, #176	; 0xb0
 800541e:	466c      	mov	r4, sp
 8005420:	f36f 0404 	bfc	r4, #0, #5
 8005424:	46a5      	mov	sp, r4
 8005426:	4613      	mov	r3, r2
 8005428:	468c      	mov	ip, r1
 800542a:	4686      	mov	lr, r0
 800542c:	900b      	str	r0, [sp, #44]	; 0x2c
 800542e:	910c      	str	r1, [sp, #48]	; 0x30
 8005430:	920d      	str	r2, [sp, #52]	; 0x34
 8005432:	930a      	str	r3, [sp, #40]	; 0x28
 8005434:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 8005438:	f8cd e020 	str.w	lr, [sp, #32]
 800543c:	f001 fba7 	bl	8006b8e <_ZN4core3mem7size_of17hcafb567766d3ad6aE>
 8005440:	900e      	str	r0, [sp, #56]	; 0x38
 8005442:	e7ff      	b.n	8005444 <_ZN4core3ptr25swap_nonoverlapping_bytes17hea66163c817d6e8bE+0x2c>
 8005444:	2000      	movs	r0, #0
 8005446:	900f      	str	r0, [sp, #60]	; 0x3c
 8005448:	e7ff      	b.n	800544a <_ZN4core3ptr25swap_nonoverlapping_bytes17hea66163c817d6e8bE+0x32>
 800544a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800544c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800544e:	4408      	add	r0, r1
 8005450:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005452:	4288      	cmp	r0, r1
 8005454:	d905      	bls.n	8005462 <_ZN4core3ptr25swap_nonoverlapping_bytes17hea66163c817d6e8bE+0x4a>
 8005456:	e7ff      	b.n	8005458 <_ZN4core3ptr25swap_nonoverlapping_bytes17hea66163c817d6e8bE+0x40>
 8005458:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800545a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800545c:	4288      	cmp	r0, r1
 800545e:	d32d      	bcc.n	80054bc <_ZN4core3ptr25swap_nonoverlapping_bytes17hea66163c817d6e8bE+0xa4>
 8005460:	e059      	b.n	8005516 <_ZN4core3ptr25swap_nonoverlapping_bytes17hea66163c817d6e8bE+0xfe>
 8005462:	e7ff      	b.n	8005464 <_ZN4core3ptr25swap_nonoverlapping_bytes17hea66163c817d6e8bE+0x4c>
 8005464:	a810      	add	r0, sp, #64	; 0x40
 8005466:	902a      	str	r0, [sp, #168]	; 0xa8
 8005468:	982a      	ldr	r0, [sp, #168]	; 0xa8
 800546a:	902b      	str	r0, [sp, #172]	; 0xac
 800546c:	982b      	ldr	r0, [sp, #172]	; 0xac
 800546e:	9007      	str	r0, [sp, #28]
 8005470:	e7ff      	b.n	8005472 <_ZN4core3ptr25swap_nonoverlapping_bytes17hea66163c817d6e8bE+0x5a>
 8005472:	9807      	ldr	r0, [sp, #28]
 8005474:	9019      	str	r0, [sp, #100]	; 0x64
 8005476:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005478:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800547a:	f001 faf6 	bl	8006a6a <_ZN4core3ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h444475af15b7177dE>
 800547e:	901a      	str	r0, [sp, #104]	; 0x68
 8005480:	e7ff      	b.n	8005482 <_ZN4core3ptr25swap_nonoverlapping_bytes17hea66163c817d6e8bE+0x6a>
 8005482:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005484:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005486:	f001 faf0 	bl	8006a6a <_ZN4core3ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h444475af15b7177dE>
 800548a:	901b      	str	r0, [sp, #108]	; 0x6c
 800548c:	e7ff      	b.n	800548e <_ZN4core3ptr25swap_nonoverlapping_bytes17hea66163c817d6e8bE+0x76>
 800548e:	981a      	ldr	r0, [sp, #104]	; 0x68
 8005490:	9919      	ldr	r1, [sp, #100]	; 0x64
 8005492:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005494:	f001 fcb2 	bl	8006dfc <_ZN4core10intrinsics19copy_nonoverlapping17h85f5927901ef278dE>
 8005498:	e7ff      	b.n	800549a <_ZN4core3ptr25swap_nonoverlapping_bytes17hea66163c817d6e8bE+0x82>
 800549a:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800549c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800549e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80054a0:	f001 fcac 	bl	8006dfc <_ZN4core10intrinsics19copy_nonoverlapping17h85f5927901ef278dE>
 80054a4:	e7ff      	b.n	80054a6 <_ZN4core3ptr25swap_nonoverlapping_bytes17hea66163c817d6e8bE+0x8e>
 80054a6:	9819      	ldr	r0, [sp, #100]	; 0x64
 80054a8:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80054aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80054ac:	f001 fca6 	bl	8006dfc <_ZN4core10intrinsics19copy_nonoverlapping17h85f5927901ef278dE>
 80054b0:	e7ff      	b.n	80054b2 <_ZN4core3ptr25swap_nonoverlapping_bytes17hea66163c817d6e8bE+0x9a>
 80054b2:	980e      	ldr	r0, [sp, #56]	; 0x38
 80054b4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80054b6:	4408      	add	r0, r1
 80054b8:	900f      	str	r0, [sp, #60]	; 0x3c
 80054ba:	e7c6      	b.n	800544a <_ZN4core3ptr25swap_nonoverlapping_bytes17hea66163c817d6e8bE+0x32>
 80054bc:	e7ff      	b.n	80054be <_ZN4core3ptr25swap_nonoverlapping_bytes17hea66163c817d6e8bE+0xa6>
 80054be:	980d      	ldr	r0, [sp, #52]	; 0x34
 80054c0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80054c2:	1a40      	subs	r0, r0, r1
 80054c4:	9024      	str	r0, [sp, #144]	; 0x90
 80054c6:	a81c      	add	r0, sp, #112	; 0x70
 80054c8:	9028      	str	r0, [sp, #160]	; 0xa0
 80054ca:	9828      	ldr	r0, [sp, #160]	; 0xa0
 80054cc:	9029      	str	r0, [sp, #164]	; 0xa4
 80054ce:	9829      	ldr	r0, [sp, #164]	; 0xa4
 80054d0:	9006      	str	r0, [sp, #24]
 80054d2:	e7ff      	b.n	80054d4 <_ZN4core3ptr25swap_nonoverlapping_bytes17hea66163c817d6e8bE+0xbc>
 80054d4:	9806      	ldr	r0, [sp, #24]
 80054d6:	9025      	str	r0, [sp, #148]	; 0x94
 80054d8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80054da:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80054dc:	f001 fac5 	bl	8006a6a <_ZN4core3ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h444475af15b7177dE>
 80054e0:	9026      	str	r0, [sp, #152]	; 0x98
 80054e2:	e7ff      	b.n	80054e4 <_ZN4core3ptr25swap_nonoverlapping_bytes17hea66163c817d6e8bE+0xcc>
 80054e4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80054e6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80054e8:	f001 fabf 	bl	8006a6a <_ZN4core3ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h444475af15b7177dE>
 80054ec:	9027      	str	r0, [sp, #156]	; 0x9c
 80054ee:	e7ff      	b.n	80054f0 <_ZN4core3ptr25swap_nonoverlapping_bytes17hea66163c817d6e8bE+0xd8>
 80054f0:	9826      	ldr	r0, [sp, #152]	; 0x98
 80054f2:	9925      	ldr	r1, [sp, #148]	; 0x94
 80054f4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80054f6:	f001 fc81 	bl	8006dfc <_ZN4core10intrinsics19copy_nonoverlapping17h85f5927901ef278dE>
 80054fa:	e7ff      	b.n	80054fc <_ZN4core3ptr25swap_nonoverlapping_bytes17hea66163c817d6e8bE+0xe4>
 80054fc:	9827      	ldr	r0, [sp, #156]	; 0x9c
 80054fe:	9926      	ldr	r1, [sp, #152]	; 0x98
 8005500:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005502:	f001 fc7b 	bl	8006dfc <_ZN4core10intrinsics19copy_nonoverlapping17h85f5927901ef278dE>
 8005506:	e7ff      	b.n	8005508 <_ZN4core3ptr25swap_nonoverlapping_bytes17hea66163c817d6e8bE+0xf0>
 8005508:	9825      	ldr	r0, [sp, #148]	; 0x94
 800550a:	9927      	ldr	r1, [sp, #156]	; 0x9c
 800550c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800550e:	f001 fc75 	bl	8006dfc <_ZN4core10intrinsics19copy_nonoverlapping17h85f5927901ef278dE>
 8005512:	e7ff      	b.n	8005514 <_ZN4core3ptr25swap_nonoverlapping_bytes17hea66163c817d6e8bE+0xfc>
 8005514:	e7ff      	b.n	8005516 <_ZN4core3ptr25swap_nonoverlapping_bytes17hea66163c817d6e8bE+0xfe>
 8005516:	f1a7 0408 	sub.w	r4, r7, #8
 800551a:	46a5      	mov	sp, r4
 800551c:	bdd0      	pop	{r4, r6, r7, pc}

0800551e <_ZN4core10intrinsics19copy_nonoverlapping17h0bbfc0328204f40cE>:
 800551e:	b580      	push	{r7, lr}
 8005520:	b086      	sub	sp, #24
 8005522:	4613      	mov	r3, r2
 8005524:	468c      	mov	ip, r1
 8005526:	4686      	mov	lr, r0
 8005528:	9003      	str	r0, [sp, #12]
 800552a:	9104      	str	r1, [sp, #16]
 800552c:	9205      	str	r2, [sp, #20]
 800552e:	9903      	ldr	r1, [sp, #12]
 8005530:	9804      	ldr	r0, [sp, #16]
 8005532:	9a05      	ldr	r2, [sp, #20]
 8005534:	0092      	lsls	r2, r2, #2
 8005536:	9302      	str	r3, [sp, #8]
 8005538:	f8cd c004 	str.w	ip, [sp, #4]
 800553c:	f8cd e000 	str.w	lr, [sp]
 8005540:	f010 fbb4 	bl	8015cac <__aeabi_memcpy>
 8005544:	e7ff      	b.n	8005546 <_ZN4core10intrinsics19copy_nonoverlapping17h0bbfc0328204f40cE+0x28>
 8005546:	b006      	add	sp, #24
 8005548:	bd80      	pop	{r7, pc}

0800554a <_ZN4core3str21_$LT$impl$u20$str$GT$3len17hdfc178dac951c508E>:
 800554a:	b580      	push	{r7, lr}
 800554c:	b08c      	sub	sp, #48	; 0x30
 800554e:	460a      	mov	r2, r1
 8005550:	4603      	mov	r3, r0
 8005552:	9006      	str	r0, [sp, #24]
 8005554:	9107      	str	r1, [sp, #28]
 8005556:	9806      	ldr	r0, [sp, #24]
 8005558:	9907      	ldr	r1, [sp, #28]
 800555a:	9008      	str	r0, [sp, #32]
 800555c:	9109      	str	r1, [sp, #36]	; 0x24
 800555e:	9808      	ldr	r0, [sp, #32]
 8005560:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005562:	900a      	str	r0, [sp, #40]	; 0x28
 8005564:	910b      	str	r1, [sp, #44]	; 0x2c
 8005566:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005568:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800556a:	9205      	str	r2, [sp, #20]
 800556c:	9304      	str	r3, [sp, #16]
 800556e:	9003      	str	r0, [sp, #12]
 8005570:	9102      	str	r1, [sp, #8]
 8005572:	e7ff      	b.n	8005574 <_ZN4core3str21_$LT$impl$u20$str$GT$3len17hdfc178dac951c508E+0x2a>
 8005574:	9803      	ldr	r0, [sp, #12]
 8005576:	9902      	ldr	r1, [sp, #8]
 8005578:	f001 fc28 	bl	8006dcc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h12b66ceea47b68d2E>
 800557c:	9001      	str	r0, [sp, #4]
 800557e:	e7ff      	b.n	8005580 <_ZN4core3str21_$LT$impl$u20$str$GT$3len17hdfc178dac951c508E+0x36>
 8005580:	9801      	ldr	r0, [sp, #4]
 8005582:	b00c      	add	sp, #48	; 0x30
 8005584:	bd80      	pop	{r7, pc}

08005586 <_ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17h6cfde3120b8a2279E>:
 8005586:	b084      	sub	sp, #16
 8005588:	460a      	mov	r2, r1
 800558a:	4603      	mov	r3, r0
 800558c:	9002      	str	r0, [sp, #8]
 800558e:	9103      	str	r1, [sp, #12]
 8005590:	9802      	ldr	r0, [sp, #8]
 8005592:	9201      	str	r2, [sp, #4]
 8005594:	9300      	str	r3, [sp, #0]
 8005596:	b004      	add	sp, #16
 8005598:	4770      	bx	lr

0800559a <_ZN78_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$i32$GT$$GT$4from17h0c00a0d5ca46366cE>:
        fn from(num: i32) -> Self {
 800559a:	b084      	sub	sp, #16
 800559c:	4601      	mov	r1, r0
 800559e:	9002      	str	r0, [sp, #8]
                    (num)
 80055a0:	9802      	ldr	r0, [sp, #8]
                ::core::mem::transmute::
 80055a2:	9003      	str	r0, [sp, #12]
 80055a4:	9803      	ldr	r0, [sp, #12]
 80055a6:	9101      	str	r1, [sp, #4]
 80055a8:	9000      	str	r0, [sp, #0]
 80055aa:	e7ff      	b.n	80055ac <_ZN78_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$i32$GT$$GT$4from17h0c00a0d5ca46366cE+0x12>
        }
 80055ac:	9800      	ldr	r0, [sp, #0]
 80055ae:	b004      	add	sp, #16
 80055b0:	4770      	bx	lr

080055b2 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h29f960021fda47b2E>:
    #[derive(Debug, PartialEq)]
 80055b2:	b580      	push	{r7, lr}
 80055b4:	b0ba      	sub	sp, #232	; 0xe8
 80055b6:	460a      	mov	r2, r1
 80055b8:	4603      	mov	r3, r0
 80055ba:	9003      	str	r0, [sp, #12]
 80055bc:	9104      	str	r1, [sp, #16]
 80055be:	9803      	ldr	r0, [sp, #12]
 80055c0:	9006      	str	r0, [sp, #24]
 80055c2:	9806      	ldr	r0, [sp, #24]
 80055c4:	6800      	ldr	r0, [r0, #0]
 80055c6:	2101      	movs	r1, #1
 80055c8:	f6cf 71ff 	movt	r1, #65535	; 0xffff
 80055cc:	4288      	cmp	r0, r1
 80055ce:	9202      	str	r2, [sp, #8]
 80055d0:	9301      	str	r3, [sp, #4]
 80055d2:	9000      	str	r0, [sp, #0]
 80055d4:	f000 8173 	beq.w	80058be <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h29f960021fda47b2E+0x30c>
 80055d8:	e7ff      	b.n	80055da <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h29f960021fda47b2E+0x28>
 80055da:	9800      	ldr	r0, [sp, #0]
 80055dc:	f100 010f 	add.w	r1, r0, #15
 80055e0:	2900      	cmp	r1, #0
 80055e2:	f000 815b 	beq.w	800589c <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h29f960021fda47b2E+0x2ea>
 80055e6:	e7ff      	b.n	80055e8 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h29f960021fda47b2E+0x36>
 80055e8:	9800      	ldr	r0, [sp, #0]
 80055ea:	f100 010e 	add.w	r1, r0, #14
 80055ee:	2900      	cmp	r1, #0
 80055f0:	f000 8143 	beq.w	800587a <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h29f960021fda47b2E+0x2c8>
 80055f4:	e7ff      	b.n	80055f6 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h29f960021fda47b2E+0x44>
 80055f6:	9800      	ldr	r0, [sp, #0]
 80055f8:	f100 010d 	add.w	r1, r0, #13
 80055fc:	2900      	cmp	r1, #0
 80055fe:	f000 812b 	beq.w	8005858 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h29f960021fda47b2E+0x2a6>
 8005602:	e7ff      	b.n	8005604 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h29f960021fda47b2E+0x52>
 8005604:	9800      	ldr	r0, [sp, #0]
 8005606:	f100 010c 	add.w	r1, r0, #12
 800560a:	2900      	cmp	r1, #0
 800560c:	f000 8113 	beq.w	8005836 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h29f960021fda47b2E+0x284>
 8005610:	e7ff      	b.n	8005612 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h29f960021fda47b2E+0x60>
 8005612:	9800      	ldr	r0, [sp, #0]
 8005614:	f100 010b 	add.w	r1, r0, #11
 8005618:	2900      	cmp	r1, #0
 800561a:	f000 80fb 	beq.w	8005814 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h29f960021fda47b2E+0x262>
 800561e:	e7ff      	b.n	8005620 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h29f960021fda47b2E+0x6e>
 8005620:	9800      	ldr	r0, [sp, #0]
 8005622:	f100 010a 	add.w	r1, r0, #10
 8005626:	2900      	cmp	r1, #0
 8005628:	f000 80e3 	beq.w	80057f2 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h29f960021fda47b2E+0x240>
 800562c:	e7ff      	b.n	800562e <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h29f960021fda47b2E+0x7c>
 800562e:	9800      	ldr	r0, [sp, #0]
 8005630:	f100 0109 	add.w	r1, r0, #9
 8005634:	2900      	cmp	r1, #0
 8005636:	f000 80cb 	beq.w	80057d0 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h29f960021fda47b2E+0x21e>
 800563a:	e7ff      	b.n	800563c <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h29f960021fda47b2E+0x8a>
 800563c:	9800      	ldr	r0, [sp, #0]
 800563e:	f100 0108 	add.w	r1, r0, #8
 8005642:	2900      	cmp	r1, #0
 8005644:	f000 80b3 	beq.w	80057ae <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h29f960021fda47b2E+0x1fc>
 8005648:	e7ff      	b.n	800564a <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h29f960021fda47b2E+0x98>
 800564a:	9800      	ldr	r0, [sp, #0]
 800564c:	1dc1      	adds	r1, r0, #7
 800564e:	2900      	cmp	r1, #0
 8005650:	f000 809c 	beq.w	800578c <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h29f960021fda47b2E+0x1da>
 8005654:	e7ff      	b.n	8005656 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h29f960021fda47b2E+0xa4>
 8005656:	9800      	ldr	r0, [sp, #0]
 8005658:	1d81      	adds	r1, r0, #6
 800565a:	2900      	cmp	r1, #0
 800565c:	f000 8085 	beq.w	800576a <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h29f960021fda47b2E+0x1b8>
 8005660:	e7ff      	b.n	8005662 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h29f960021fda47b2E+0xb0>
 8005662:	9800      	ldr	r0, [sp, #0]
 8005664:	1d41      	adds	r1, r0, #5
 8005666:	2900      	cmp	r1, #0
 8005668:	d06e      	beq.n	8005748 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h29f960021fda47b2E+0x196>
 800566a:	e7ff      	b.n	800566c <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h29f960021fda47b2E+0xba>
 800566c:	9800      	ldr	r0, [sp, #0]
 800566e:	1d01      	adds	r1, r0, #4
 8005670:	2900      	cmp	r1, #0
 8005672:	d058      	beq.n	8005726 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h29f960021fda47b2E+0x174>
 8005674:	e7ff      	b.n	8005676 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h29f960021fda47b2E+0xc4>
 8005676:	9800      	ldr	r0, [sp, #0]
 8005678:	1cc1      	adds	r1, r0, #3
 800567a:	2900      	cmp	r1, #0
 800567c:	d042      	beq.n	8005704 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h29f960021fda47b2E+0x152>
 800567e:	e7ff      	b.n	8005680 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h29f960021fda47b2E+0xce>
 8005680:	9800      	ldr	r0, [sp, #0]
 8005682:	1c81      	adds	r1, r0, #2
 8005684:	2900      	cmp	r1, #0
 8005686:	d02c      	beq.n	80056e2 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h29f960021fda47b2E+0x130>
 8005688:	e7ff      	b.n	800568a <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h29f960021fda47b2E+0xd8>
 800568a:	9800      	ldr	r0, [sp, #0]
 800568c:	1c41      	adds	r1, r0, #1
 800568e:	2900      	cmp	r1, #0
 8005690:	d016      	beq.n	80056c0 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h29f960021fda47b2E+0x10e>
 8005692:	e7ff      	b.n	8005694 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h29f960021fda47b2E+0xe2>
 8005694:	9800      	ldr	r0, [sp, #0]
 8005696:	2800      	cmp	r0, #0
 8005698:	d001      	beq.n	800569e <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h29f960021fda47b2E+0xec>
 800569a:	e7ff      	b.n	800569c <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h29f960021fda47b2E+0xea>
 800569c:	defe      	udf	#254	; 0xfe
 800569e:	9904      	ldr	r1, [sp, #16]
 80056a0:	f645 727b 	movw	r2, #24443	; 0x5f7b
 80056a4:	f6c0 0201 	movt	r2, #2049	; 0x801
 80056a8:	a807      	add	r0, sp, #28
 80056aa:	2307      	movs	r3, #7
 80056ac:	f004 f8b4 	bl	8009818 <_ZN4core3fmt9Formatter11debug_tuple17hb44f73c94ff26e9bE>
 80056b0:	e7ff      	b.n	80056b2 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h29f960021fda47b2E+0x100>
 80056b2:	a807      	add	r0, sp, #28
 80056b4:	f003 fc3f 	bl	8008f36 <_ZN4core3fmt8builders10DebugTuple6finish17h7478dcd5620691a7E>
 80056b8:	f88d 0017 	strb.w	r0, [sp, #23]
 80056bc:	e7ff      	b.n	80056be <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h29f960021fda47b2E+0x10c>
 80056be:	e10f      	b.n	80058e0 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h29f960021fda47b2E+0x32e>
 80056c0:	9904      	ldr	r1, [sp, #16]
 80056c2:	f645 7271 	movw	r2, #24433	; 0x5f71
 80056c6:	f6c0 0201 	movt	r2, #2049	; 0x801
 80056ca:	a80a      	add	r0, sp, #40	; 0x28
 80056cc:	230a      	movs	r3, #10
 80056ce:	f004 f8a3 	bl	8009818 <_ZN4core3fmt9Formatter11debug_tuple17hb44f73c94ff26e9bE>
 80056d2:	e7ff      	b.n	80056d4 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h29f960021fda47b2E+0x122>
 80056d4:	a80a      	add	r0, sp, #40	; 0x28
 80056d6:	f003 fc2e 	bl	8008f36 <_ZN4core3fmt8builders10DebugTuple6finish17h7478dcd5620691a7E>
 80056da:	f88d 0017 	strb.w	r0, [sp, #23]
 80056de:	e7ff      	b.n	80056e0 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h29f960021fda47b2E+0x12e>
 80056e0:	e0fe      	b.n	80058e0 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h29f960021fda47b2E+0x32e>
 80056e2:	9904      	ldr	r1, [sp, #16]
 80056e4:	f645 7267 	movw	r2, #24423	; 0x5f67
 80056e8:	f6c0 0201 	movt	r2, #2049	; 0x801
 80056ec:	a80d      	add	r0, sp, #52	; 0x34
 80056ee:	230a      	movs	r3, #10
 80056f0:	f004 f892 	bl	8009818 <_ZN4core3fmt9Formatter11debug_tuple17hb44f73c94ff26e9bE>
 80056f4:	e7ff      	b.n	80056f6 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h29f960021fda47b2E+0x144>
 80056f6:	a80d      	add	r0, sp, #52	; 0x34
 80056f8:	f003 fc1d 	bl	8008f36 <_ZN4core3fmt8builders10DebugTuple6finish17h7478dcd5620691a7E>
 80056fc:	f88d 0017 	strb.w	r0, [sp, #23]
 8005700:	e7ff      	b.n	8005702 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h29f960021fda47b2E+0x150>
 8005702:	e0ed      	b.n	80058e0 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h29f960021fda47b2E+0x32e>
 8005704:	9904      	ldr	r1, [sp, #16]
 8005706:	f645 725b 	movw	r2, #24411	; 0x5f5b
 800570a:	f6c0 0201 	movt	r2, #2049	; 0x801
 800570e:	a810      	add	r0, sp, #64	; 0x40
 8005710:	230c      	movs	r3, #12
 8005712:	f004 f881 	bl	8009818 <_ZN4core3fmt9Formatter11debug_tuple17hb44f73c94ff26e9bE>
 8005716:	e7ff      	b.n	8005718 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h29f960021fda47b2E+0x166>
 8005718:	a810      	add	r0, sp, #64	; 0x40
 800571a:	f003 fc0c 	bl	8008f36 <_ZN4core3fmt8builders10DebugTuple6finish17h7478dcd5620691a7E>
 800571e:	f88d 0017 	strb.w	r0, [sp, #23]
 8005722:	e7ff      	b.n	8005724 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h29f960021fda47b2E+0x172>
 8005724:	e0dc      	b.n	80058e0 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h29f960021fda47b2E+0x32e>
 8005726:	9904      	ldr	r1, [sp, #16]
 8005728:	f645 7251 	movw	r2, #24401	; 0x5f51
 800572c:	f6c0 0201 	movt	r2, #2049	; 0x801
 8005730:	a813      	add	r0, sp, #76	; 0x4c
 8005732:	230a      	movs	r3, #10
 8005734:	f004 f870 	bl	8009818 <_ZN4core3fmt9Formatter11debug_tuple17hb44f73c94ff26e9bE>
 8005738:	e7ff      	b.n	800573a <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h29f960021fda47b2E+0x188>
 800573a:	a813      	add	r0, sp, #76	; 0x4c
 800573c:	f003 fbfb 	bl	8008f36 <_ZN4core3fmt8builders10DebugTuple6finish17h7478dcd5620691a7E>
 8005740:	f88d 0017 	strb.w	r0, [sp, #23]
 8005744:	e7ff      	b.n	8005746 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h29f960021fda47b2E+0x194>
 8005746:	e0cb      	b.n	80058e0 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h29f960021fda47b2E+0x32e>
 8005748:	9904      	ldr	r1, [sp, #16]
 800574a:	f645 724a 	movw	r2, #24394	; 0x5f4a
 800574e:	f6c0 0201 	movt	r2, #2049	; 0x801
 8005752:	a816      	add	r0, sp, #88	; 0x58
 8005754:	2307      	movs	r3, #7
 8005756:	f004 f85f 	bl	8009818 <_ZN4core3fmt9Formatter11debug_tuple17hb44f73c94ff26e9bE>
 800575a:	e7ff      	b.n	800575c <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h29f960021fda47b2E+0x1aa>
 800575c:	a816      	add	r0, sp, #88	; 0x58
 800575e:	f003 fbea 	bl	8008f36 <_ZN4core3fmt8builders10DebugTuple6finish17h7478dcd5620691a7E>
 8005762:	f88d 0017 	strb.w	r0, [sp, #23]
 8005766:	e7ff      	b.n	8005768 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h29f960021fda47b2E+0x1b6>
 8005768:	e0ba      	b.n	80058e0 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h29f960021fda47b2E+0x32e>
 800576a:	9904      	ldr	r1, [sp, #16]
 800576c:	f645 7240 	movw	r2, #24384	; 0x5f40
 8005770:	f6c0 0201 	movt	r2, #2049	; 0x801
 8005774:	a819      	add	r0, sp, #100	; 0x64
 8005776:	230a      	movs	r3, #10
 8005778:	f004 f84e 	bl	8009818 <_ZN4core3fmt9Formatter11debug_tuple17hb44f73c94ff26e9bE>
 800577c:	e7ff      	b.n	800577e <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h29f960021fda47b2E+0x1cc>
 800577e:	a819      	add	r0, sp, #100	; 0x64
 8005780:	f003 fbd9 	bl	8008f36 <_ZN4core3fmt8builders10DebugTuple6finish17h7478dcd5620691a7E>
 8005784:	f88d 0017 	strb.w	r0, [sp, #23]
 8005788:	e7ff      	b.n	800578a <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h29f960021fda47b2E+0x1d8>
 800578a:	e0a9      	b.n	80058e0 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h29f960021fda47b2E+0x32e>
 800578c:	9904      	ldr	r1, [sp, #16]
 800578e:	f645 7236 	movw	r2, #24374	; 0x5f36
 8005792:	f6c0 0201 	movt	r2, #2049	; 0x801
 8005796:	a81c      	add	r0, sp, #112	; 0x70
 8005798:	230a      	movs	r3, #10
 800579a:	f004 f83d 	bl	8009818 <_ZN4core3fmt9Formatter11debug_tuple17hb44f73c94ff26e9bE>
 800579e:	e7ff      	b.n	80057a0 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h29f960021fda47b2E+0x1ee>
 80057a0:	a81c      	add	r0, sp, #112	; 0x70
 80057a2:	f003 fbc8 	bl	8008f36 <_ZN4core3fmt8builders10DebugTuple6finish17h7478dcd5620691a7E>
 80057a6:	f88d 0017 	strb.w	r0, [sp, #23]
 80057aa:	e7ff      	b.n	80057ac <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h29f960021fda47b2E+0x1fa>
 80057ac:	e098      	b.n	80058e0 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h29f960021fda47b2E+0x32e>
 80057ae:	9904      	ldr	r1, [sp, #16]
 80057b0:	f645 722d 	movw	r2, #24365	; 0x5f2d
 80057b4:	f6c0 0201 	movt	r2, #2049	; 0x801
 80057b8:	a81f      	add	r0, sp, #124	; 0x7c
 80057ba:	2309      	movs	r3, #9
 80057bc:	f004 f82c 	bl	8009818 <_ZN4core3fmt9Formatter11debug_tuple17hb44f73c94ff26e9bE>
 80057c0:	e7ff      	b.n	80057c2 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h29f960021fda47b2E+0x210>
 80057c2:	a81f      	add	r0, sp, #124	; 0x7c
 80057c4:	f003 fbb7 	bl	8008f36 <_ZN4core3fmt8builders10DebugTuple6finish17h7478dcd5620691a7E>
 80057c8:	f88d 0017 	strb.w	r0, [sp, #23]
 80057cc:	e7ff      	b.n	80057ce <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h29f960021fda47b2E+0x21c>
 80057ce:	e087      	b.n	80058e0 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h29f960021fda47b2E+0x32e>
 80057d0:	9904      	ldr	r1, [sp, #16]
 80057d2:	f645 7223 	movw	r2, #24355	; 0x5f23
 80057d6:	f6c0 0201 	movt	r2, #2049	; 0x801
 80057da:	a822      	add	r0, sp, #136	; 0x88
 80057dc:	230a      	movs	r3, #10
 80057de:	f004 f81b 	bl	8009818 <_ZN4core3fmt9Formatter11debug_tuple17hb44f73c94ff26e9bE>
 80057e2:	e7ff      	b.n	80057e4 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h29f960021fda47b2E+0x232>
 80057e4:	a822      	add	r0, sp, #136	; 0x88
 80057e6:	f003 fba6 	bl	8008f36 <_ZN4core3fmt8builders10DebugTuple6finish17h7478dcd5620691a7E>
 80057ea:	f88d 0017 	strb.w	r0, [sp, #23]
 80057ee:	e7ff      	b.n	80057f0 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h29f960021fda47b2E+0x23e>
 80057f0:	e076      	b.n	80058e0 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h29f960021fda47b2E+0x32e>
 80057f2:	9904      	ldr	r1, [sp, #16]
 80057f4:	f645 7219 	movw	r2, #24345	; 0x5f19
 80057f8:	f6c0 0201 	movt	r2, #2049	; 0x801
 80057fc:	a825      	add	r0, sp, #148	; 0x94
 80057fe:	230a      	movs	r3, #10
 8005800:	f004 f80a 	bl	8009818 <_ZN4core3fmt9Formatter11debug_tuple17hb44f73c94ff26e9bE>
 8005804:	e7ff      	b.n	8005806 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h29f960021fda47b2E+0x254>
 8005806:	a825      	add	r0, sp, #148	; 0x94
 8005808:	f003 fb95 	bl	8008f36 <_ZN4core3fmt8builders10DebugTuple6finish17h7478dcd5620691a7E>
 800580c:	f88d 0017 	strb.w	r0, [sp, #23]
 8005810:	e7ff      	b.n	8005812 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h29f960021fda47b2E+0x260>
 8005812:	e065      	b.n	80058e0 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h29f960021fda47b2E+0x32e>
 8005814:	9904      	ldr	r1, [sp, #16]
 8005816:	f645 720d 	movw	r2, #24333	; 0x5f0d
 800581a:	f6c0 0201 	movt	r2, #2049	; 0x801
 800581e:	a828      	add	r0, sp, #160	; 0xa0
 8005820:	230c      	movs	r3, #12
 8005822:	f003 fff9 	bl	8009818 <_ZN4core3fmt9Formatter11debug_tuple17hb44f73c94ff26e9bE>
 8005826:	e7ff      	b.n	8005828 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h29f960021fda47b2E+0x276>
 8005828:	a828      	add	r0, sp, #160	; 0xa0
 800582a:	f003 fb84 	bl	8008f36 <_ZN4core3fmt8builders10DebugTuple6finish17h7478dcd5620691a7E>
 800582e:	f88d 0017 	strb.w	r0, [sp, #23]
 8005832:	e7ff      	b.n	8005834 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h29f960021fda47b2E+0x282>
 8005834:	e054      	b.n	80058e0 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h29f960021fda47b2E+0x32e>
 8005836:	9904      	ldr	r1, [sp, #16]
 8005838:	f645 7202 	movw	r2, #24322	; 0x5f02
 800583c:	f6c0 0201 	movt	r2, #2049	; 0x801
 8005840:	a82b      	add	r0, sp, #172	; 0xac
 8005842:	230b      	movs	r3, #11
 8005844:	f003 ffe8 	bl	8009818 <_ZN4core3fmt9Formatter11debug_tuple17hb44f73c94ff26e9bE>
 8005848:	e7ff      	b.n	800584a <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h29f960021fda47b2E+0x298>
 800584a:	a82b      	add	r0, sp, #172	; 0xac
 800584c:	f003 fb73 	bl	8008f36 <_ZN4core3fmt8builders10DebugTuple6finish17h7478dcd5620691a7E>
 8005850:	f88d 0017 	strb.w	r0, [sp, #23]
 8005854:	e7ff      	b.n	8005856 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h29f960021fda47b2E+0x2a4>
 8005856:	e043      	b.n	80058e0 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h29f960021fda47b2E+0x32e>
 8005858:	9904      	ldr	r1, [sp, #16]
 800585a:	f645 62f6 	movw	r2, #24310	; 0x5ef6
 800585e:	f6c0 0201 	movt	r2, #2049	; 0x801
 8005862:	a82e      	add	r0, sp, #184	; 0xb8
 8005864:	230c      	movs	r3, #12
 8005866:	f003 ffd7 	bl	8009818 <_ZN4core3fmt9Formatter11debug_tuple17hb44f73c94ff26e9bE>
 800586a:	e7ff      	b.n	800586c <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h29f960021fda47b2E+0x2ba>
 800586c:	a82e      	add	r0, sp, #184	; 0xb8
 800586e:	f003 fb62 	bl	8008f36 <_ZN4core3fmt8builders10DebugTuple6finish17h7478dcd5620691a7E>
 8005872:	f88d 0017 	strb.w	r0, [sp, #23]
 8005876:	e7ff      	b.n	8005878 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h29f960021fda47b2E+0x2c6>
 8005878:	e032      	b.n	80058e0 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h29f960021fda47b2E+0x32e>
 800587a:	9904      	ldr	r1, [sp, #16]
 800587c:	f645 62e9 	movw	r2, #24297	; 0x5ee9
 8005880:	f6c0 0201 	movt	r2, #2049	; 0x801
 8005884:	a831      	add	r0, sp, #196	; 0xc4
 8005886:	230d      	movs	r3, #13
 8005888:	f003 ffc6 	bl	8009818 <_ZN4core3fmt9Formatter11debug_tuple17hb44f73c94ff26e9bE>
 800588c:	e7ff      	b.n	800588e <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h29f960021fda47b2E+0x2dc>
 800588e:	a831      	add	r0, sp, #196	; 0xc4
 8005890:	f003 fb51 	bl	8008f36 <_ZN4core3fmt8builders10DebugTuple6finish17h7478dcd5620691a7E>
 8005894:	f88d 0017 	strb.w	r0, [sp, #23]
 8005898:	e7ff      	b.n	800589a <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h29f960021fda47b2E+0x2e8>
 800589a:	e021      	b.n	80058e0 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h29f960021fda47b2E+0x32e>
 800589c:	9904      	ldr	r1, [sp, #16]
 800589e:	f645 62e0 	movw	r2, #24288	; 0x5ee0
 80058a2:	f6c0 0201 	movt	r2, #2049	; 0x801
 80058a6:	a834      	add	r0, sp, #208	; 0xd0
 80058a8:	2309      	movs	r3, #9
 80058aa:	f003 ffb5 	bl	8009818 <_ZN4core3fmt9Formatter11debug_tuple17hb44f73c94ff26e9bE>
 80058ae:	e7ff      	b.n	80058b0 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h29f960021fda47b2E+0x2fe>
 80058b0:	a834      	add	r0, sp, #208	; 0xd0
 80058b2:	f003 fb40 	bl	8008f36 <_ZN4core3fmt8builders10DebugTuple6finish17h7478dcd5620691a7E>
 80058b6:	f88d 0017 	strb.w	r0, [sp, #23]
 80058ba:	e7ff      	b.n	80058bc <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h29f960021fda47b2E+0x30a>
 80058bc:	e010      	b.n	80058e0 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h29f960021fda47b2E+0x32e>
 80058be:	9904      	ldr	r1, [sp, #16]
 80058c0:	f645 62d4 	movw	r2, #24276	; 0x5ed4
 80058c4:	f6c0 0201 	movt	r2, #2049	; 0x801
 80058c8:	a837      	add	r0, sp, #220	; 0xdc
 80058ca:	230c      	movs	r3, #12
 80058cc:	f003 ffa4 	bl	8009818 <_ZN4core3fmt9Formatter11debug_tuple17hb44f73c94ff26e9bE>
 80058d0:	e7ff      	b.n	80058d2 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h29f960021fda47b2E+0x320>
 80058d2:	a837      	add	r0, sp, #220	; 0xdc
 80058d4:	f003 fb2f 	bl	8008f36 <_ZN4core3fmt8builders10DebugTuple6finish17h7478dcd5620691a7E>
 80058d8:	f88d 0017 	strb.w	r0, [sp, #23]
 80058dc:	e7ff      	b.n	80058de <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h29f960021fda47b2E+0x32c>
 80058de:	e7ff      	b.n	80058e0 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h29f960021fda47b2E+0x32e>
 80058e0:	f89d 0017 	ldrb.w	r0, [sp, #23]
 80058e4:	b03a      	add	sp, #232	; 0xe8
 80058e6:	bd80      	pop	{r7, pc}

080058e8 <_ZN4core5slice18from_raw_parts_mut17h14319b5b3cdbbc41E>:
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b08c      	sub	sp, #48	; 0x30
 80058ec:	460a      	mov	r2, r1
 80058ee:	4603      	mov	r3, r0
 80058f0:	9006      	str	r0, [sp, #24]
 80058f2:	9107      	str	r1, [sp, #28]
 80058f4:	2001      	movs	r0, #1
 80058f6:	2800      	cmp	r0, #0
 80058f8:	9205      	str	r2, [sp, #20]
 80058fa:	9304      	str	r3, [sp, #16]
 80058fc:	d11b      	bne.n	8005936 <_ZN4core5slice18from_raw_parts_mut17h14319b5b3cdbbc41E+0x4e>
 80058fe:	e7ff      	b.n	8005900 <_ZN4core5slice18from_raw_parts_mut17h14319b5b3cdbbc41E+0x18>
 8005900:	9806      	ldr	r0, [sp, #24]
 8005902:	9003      	str	r0, [sp, #12]
 8005904:	f001 f9fe 	bl	8006d04 <_ZN4core3mem8align_of17h7ba3878fe1d1633bE>
 8005908:	9002      	str	r0, [sp, #8]
 800590a:	e7ff      	b.n	800590c <_ZN4core5slice18from_raw_parts_mut17h14319b5b3cdbbc41E+0x24>
 800590c:	9802      	ldr	r0, [sp, #8]
 800590e:	2800      	cmp	r0, #0
 8005910:	d038      	beq.n	8005984 <_ZN4core5slice18from_raw_parts_mut17h14319b5b3cdbbc41E+0x9c>
 8005912:	e7ff      	b.n	8005914 <_ZN4core5slice18from_raw_parts_mut17h14319b5b3cdbbc41E+0x2c>
 8005914:	9803      	ldr	r0, [sp, #12]
 8005916:	9902      	ldr	r1, [sp, #8]
 8005918:	fbb0 f2f1 	udiv	r2, r0, r1
 800591c:	fb02 0211 	mls	r2, r2, r1, r0
 8005920:	2a00      	cmp	r2, #0
 8005922:	d007      	beq.n	8005934 <_ZN4core5slice18from_raw_parts_mut17h14319b5b3cdbbc41E+0x4c>
 8005924:	e7ff      	b.n	8005926 <_ZN4core5slice18from_raw_parts_mut17h14319b5b3cdbbc41E+0x3e>
 8005926:	f246 0070 	movw	r0, #24688	; 0x6070
 800592a:	f6c0 0001 	movt	r0, #2049	; 0x801
 800592e:	f002 feae 	bl	800868e <_ZN4core9panicking5panic17h138a849f37d3ac2dE>
 8005932:	defe      	udf	#254	; 0xfe
 8005934:	e7ff      	b.n	8005936 <_ZN4core5slice18from_raw_parts_mut17h14319b5b3cdbbc41E+0x4e>
 8005936:	2001      	movs	r0, #1
 8005938:	2800      	cmp	r0, #0
 800593a:	d117      	bne.n	800596c <_ZN4core5slice18from_raw_parts_mut17h14319b5b3cdbbc41E+0x84>
 800593c:	e7ff      	b.n	800593e <_ZN4core5slice18from_raw_parts_mut17h14319b5b3cdbbc41E+0x56>
 800593e:	f001 f9d8 	bl	8006cf2 <_ZN4core3mem7size_of17he296f163b70ee57fE>
 8005942:	9001      	str	r0, [sp, #4]
 8005944:	e7ff      	b.n	8005946 <_ZN4core5slice18from_raw_parts_mut17h14319b5b3cdbbc41E+0x5e>
 8005946:	9907      	ldr	r1, [sp, #28]
 8005948:	9801      	ldr	r0, [sp, #4]
 800594a:	f001 ff41 	bl	80077d0 <_ZN4core3num23_$LT$impl$u20$usize$GT$14saturating_mul17h8e2aeaa79033e96cE>
 800594e:	9000      	str	r0, [sp, #0]
 8005950:	e7ff      	b.n	8005952 <_ZN4core5slice18from_raw_parts_mut17h14319b5b3cdbbc41E+0x6a>
 8005952:	9800      	ldr	r0, [sp, #0]
 8005954:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005958:	dc07      	bgt.n	800596a <_ZN4core5slice18from_raw_parts_mut17h14319b5b3cdbbc41E+0x82>
 800595a:	e7ff      	b.n	800595c <_ZN4core5slice18from_raw_parts_mut17h14319b5b3cdbbc41E+0x74>
 800595c:	f246 00c0 	movw	r0, #24768	; 0x60c0
 8005960:	f6c0 0001 	movt	r0, #2049	; 0x801
 8005964:	f002 fe93 	bl	800868e <_ZN4core9panicking5panic17h138a849f37d3ac2dE>
 8005968:	defe      	udf	#254	; 0xfe
 800596a:	e7ff      	b.n	800596c <_ZN4core5slice18from_raw_parts_mut17h14319b5b3cdbbc41E+0x84>
 800596c:	9806      	ldr	r0, [sp, #24]
 800596e:	9907      	ldr	r1, [sp, #28]
 8005970:	900a      	str	r0, [sp, #40]	; 0x28
 8005972:	910b      	str	r1, [sp, #44]	; 0x2c
 8005974:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005976:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005978:	9008      	str	r0, [sp, #32]
 800597a:	9109      	str	r1, [sp, #36]	; 0x24
 800597c:	9808      	ldr	r0, [sp, #32]
 800597e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005980:	b00c      	add	sp, #48	; 0x30
 8005982:	bd80      	pop	{r7, pc}
 8005984:	f246 001c 	movw	r0, #24604	; 0x601c
 8005988:	f6c0 0001 	movt	r0, #2049	; 0x801
 800598c:	f002 fe7f 	bl	800868e <_ZN4core9panicking5panic17h138a849f37d3ac2dE>
 8005990:	defe      	udf	#254	; 0xfe

08005992 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h9420d1a1dab260e8E>:
 8005992:	b084      	sub	sp, #16
 8005994:	460a      	mov	r2, r1
 8005996:	4603      	mov	r3, r0
 8005998:	9002      	str	r0, [sp, #8]
 800599a:	9103      	str	r1, [sp, #12]
 800599c:	9802      	ldr	r0, [sp, #8]
 800599e:	9201      	str	r2, [sp, #4]
 80059a0:	9300      	str	r3, [sp, #0]
 80059a2:	b004      	add	sp, #16
 80059a4:	4770      	bx	lr

080059a6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17h67f17cd2efb0b422E>:
 80059a6:	b5b0      	push	{r4, r5, r7, lr}
 80059a8:	b0b2      	sub	sp, #200	; 0xc8
 80059aa:	469c      	mov	ip, r3
 80059ac:	4696      	mov	lr, r2
 80059ae:	460c      	mov	r4, r1
 80059b0:	4605      	mov	r5, r0
 80059b2:	900e      	str	r0, [sp, #56]	; 0x38
 80059b4:	910f      	str	r1, [sp, #60]	; 0x3c
 80059b6:	9210      	str	r2, [sp, #64]	; 0x40
 80059b8:	9311      	str	r3, [sp, #68]	; 0x44
 80059ba:	980e      	ldr	r0, [sp, #56]	; 0x38
 80059bc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80059be:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 80059c2:	f8cd e030 	str.w	lr, [sp, #48]	; 0x30
 80059c6:	940b      	str	r4, [sp, #44]	; 0x2c
 80059c8:	950a      	str	r5, [sp, #40]	; 0x28
 80059ca:	f001 f9ff 	bl	8006dcc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h12b66ceea47b68d2E>
 80059ce:	9014      	str	r0, [sp, #80]	; 0x50
 80059d0:	e7ff      	b.n	80059d2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17h67f17cd2efb0b422E+0x2c>
 80059d2:	9810      	ldr	r0, [sp, #64]	; 0x40
 80059d4:	9911      	ldr	r1, [sp, #68]	; 0x44
 80059d6:	f001 f9f9 	bl	8006dcc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h12b66ceea47b68d2E>
 80059da:	9015      	str	r0, [sp, #84]	; 0x54
 80059dc:	e7ff      	b.n	80059de <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17h67f17cd2efb0b422E+0x38>
 80059de:	a814      	add	r0, sp, #80	; 0x50
 80059e0:	9012      	str	r0, [sp, #72]	; 0x48
 80059e2:	a815      	add	r0, sp, #84	; 0x54
 80059e4:	9013      	str	r0, [sp, #76]	; 0x4c
 80059e6:	9812      	ldr	r0, [sp, #72]	; 0x48
 80059e8:	9016      	str	r0, [sp, #88]	; 0x58
 80059ea:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80059ec:	9017      	str	r0, [sp, #92]	; 0x5c
 80059ee:	9816      	ldr	r0, [sp, #88]	; 0x58
 80059f0:	6800      	ldr	r0, [r0, #0]
 80059f2:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80059f4:	6809      	ldr	r1, [r1, #0]
 80059f6:	4288      	cmp	r0, r1
 80059f8:	d014      	beq.n	8005a24 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17h67f17cd2efb0b422E+0x7e>
 80059fa:	e7ff      	b.n	80059fc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17h67f17cd2efb0b422E+0x56>
 80059fc:	9816      	ldr	r0, [sp, #88]	; 0x58
 80059fe:	9027      	str	r0, [sp, #156]	; 0x9c
 8005a00:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8005a02:	9028      	str	r0, [sp, #160]	; 0xa0
 8005a04:	4668      	mov	r0, sp
 8005a06:	2100      	movs	r1, #0
 8005a08:	6001      	str	r1, [r0, #0]
 8005a0a:	f246 1160 	movw	r1, #24928	; 0x6160
 8005a0e:	f6c0 0101 	movt	r1, #2049	; 0x801
 8005a12:	f246 1368 	movw	r3, #24936	; 0x6168
 8005a16:	f6c0 0301 	movt	r3, #2049	; 0x801
 8005a1a:	a829      	add	r0, sp, #164	; 0xa4
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	f7ff f9b5 	bl	8004d8c <_ZN4core3fmt9Arguments6new_v117h7b18277453f88ac4E>
 8005a22:	e005      	b.n	8005a30 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17h67f17cd2efb0b422E+0x8a>
 8005a24:	9810      	ldr	r0, [sp, #64]	; 0x40
 8005a26:	9911      	ldr	r1, [sp, #68]	; 0x44
 8005a28:	f001 f9de 	bl	8006de8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hdef04f6d8168bdb2E>
 8005a2c:	9009      	str	r0, [sp, #36]	; 0x24
 8005a2e:	e04e      	b.n	8005ace <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17h67f17cd2efb0b422E+0x128>
 8005a30:	a827      	add	r0, sp, #156	; 0x9c
 8005a32:	9024      	str	r0, [sp, #144]	; 0x90
 8005a34:	a828      	add	r0, sp, #160	; 0xa0
 8005a36:	9025      	str	r0, [sp, #148]	; 0x94
 8005a38:	a829      	add	r0, sp, #164	; 0xa4
 8005a3a:	9026      	str	r0, [sp, #152]	; 0x98
//! Mynewt API for Rust. Contains Rust bindings for Mynewt API for C, generated by `bindgen`.
 8005a3c:	9824      	ldr	r0, [sp, #144]	; 0x90
 8005a3e:	902f      	str	r0, [sp, #188]	; 0xbc
 8005a40:	9825      	ldr	r0, [sp, #148]	; 0x94
 8005a42:	9030      	str	r0, [sp, #192]	; 0xc0
 8005a44:	9826      	ldr	r0, [sp, #152]	; 0x98
 8005a46:	9031      	str	r0, [sp, #196]	; 0xc4
 8005a48:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8005a4a:	f646 4199 	movw	r1, #27801	; 0x6c99
 8005a4e:	f6c0 0100 	movt	r1, #2048	; 0x800
 8005a52:	f001 f935 	bl	8006cc0 <_ZN4core3fmt10ArgumentV13new17h5864edecdd47206aE>
 8005a56:	9008      	str	r0, [sp, #32]
 8005a58:	9107      	str	r1, [sp, #28]
 8005a5a:	e7ff      	b.n	8005a5c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17h67f17cd2efb0b422E+0xb6>
 8005a5c:	9830      	ldr	r0, [sp, #192]	; 0xc0
 8005a5e:	f646 4199 	movw	r1, #27801	; 0x6c99
 8005a62:	f6c0 0100 	movt	r1, #2048	; 0x800
 8005a66:	f001 f92b 	bl	8006cc0 <_ZN4core3fmt10ArgumentV13new17h5864edecdd47206aE>
 8005a6a:	9006      	str	r0, [sp, #24]
 8005a6c:	9105      	str	r1, [sp, #20]
 8005a6e:	e7ff      	b.n	8005a70 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17h67f17cd2efb0b422E+0xca>
 8005a70:	9831      	ldr	r0, [sp, #196]	; 0xc4
 8005a72:	f249 0185 	movw	r1, #36997	; 0x9085
 8005a76:	f6c0 0100 	movt	r1, #2048	; 0x800
 8005a7a:	f7ff f96e 	bl	8004d5a <_ZN4core3fmt10ArgumentV13new17hf7ba76b3ae396a12E>
 8005a7e:	9004      	str	r0, [sp, #16]
 8005a80:	9103      	str	r1, [sp, #12]
 8005a82:	e7ff      	b.n	8005a84 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17h67f17cd2efb0b422E+0xde>
 8005a84:	9808      	ldr	r0, [sp, #32]
 8005a86:	901e      	str	r0, [sp, #120]	; 0x78
 8005a88:	9907      	ldr	r1, [sp, #28]
 8005a8a:	911f      	str	r1, [sp, #124]	; 0x7c
 8005a8c:	9a06      	ldr	r2, [sp, #24]
 8005a8e:	9220      	str	r2, [sp, #128]	; 0x80
 8005a90:	9b05      	ldr	r3, [sp, #20]
 8005a92:	9321      	str	r3, [sp, #132]	; 0x84
 8005a94:	f8dd c010 	ldr.w	ip, [sp, #16]
 8005a98:	f8cd c088 	str.w	ip, [sp, #136]	; 0x88
 8005a9c:	f8dd e00c 	ldr.w	lr, [sp, #12]
 8005aa0:	f8cd e08c 	str.w	lr, [sp, #140]	; 0x8c
 8005aa4:	466c      	mov	r4, sp
 8005aa6:	2503      	movs	r5, #3
 8005aa8:	6025      	str	r5, [r4, #0]
 8005aaa:	f246 1114 	movw	r1, #24852	; 0x6114
 8005aae:	f6c0 0101 	movt	r1, #2049	; 0x801
 8005ab2:	a818      	add	r0, sp, #96	; 0x60
 8005ab4:	ab1e      	add	r3, sp, #120	; 0x78
 8005ab6:	462a      	mov	r2, r5
 8005ab8:	f7ff f968 	bl	8004d8c <_ZN4core3fmt9Arguments6new_v117h7b18277453f88ac4E>
 8005abc:	e7ff      	b.n	8005abe <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17h67f17cd2efb0b422E+0x118>
 8005abe:	f246 1168 	movw	r1, #24936	; 0x6168
 8005ac2:	f6c0 0101 	movt	r1, #2049	; 0x801
 8005ac6:	a818      	add	r0, sp, #96	; 0x60
 8005ac8:	f002 fe1e 	bl	8008708 <_ZN4core9panicking9panic_fmt17hbfe32cf8392a510cE>
 8005acc:	defe      	udf	#254	; 0xfe
 8005ace:	980e      	ldr	r0, [sp, #56]	; 0x38
 8005ad0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005ad2:	f7ff ff5e 	bl	8005992 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h9420d1a1dab260e8E>
 8005ad6:	9002      	str	r0, [sp, #8]
 8005ad8:	e7ff      	b.n	8005ada <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17h67f17cd2efb0b422E+0x134>
 8005ada:	980e      	ldr	r0, [sp, #56]	; 0x38
 8005adc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005ade:	f001 f975 	bl	8006dcc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h12b66ceea47b68d2E>
 8005ae2:	9001      	str	r0, [sp, #4]
 8005ae4:	e7ff      	b.n	8005ae6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17h67f17cd2efb0b422E+0x140>
 8005ae6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005ae8:	9902      	ldr	r1, [sp, #8]
 8005aea:	9a01      	ldr	r2, [sp, #4]
 8005aec:	f001 f986 	bl	8006dfc <_ZN4core10intrinsics19copy_nonoverlapping17h85f5927901ef278dE>
 8005af0:	e7ff      	b.n	8005af2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17h67f17cd2efb0b422E+0x14c>
 8005af2:	b032      	add	sp, #200	; 0xc8
 8005af4:	bdb0      	pop	{r4, r5, r7, pc}

08005af6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3get17hb4a91e78f630f22cE>:
 8005af6:	b580      	push	{r7, lr}
 8005af8:	b088      	sub	sp, #32
 8005afa:	4613      	mov	r3, r2
 8005afc:	468c      	mov	ip, r1
 8005afe:	4686      	mov	lr, r0
 8005b00:	9005      	str	r0, [sp, #20]
 8005b02:	9106      	str	r1, [sp, #24]
 8005b04:	9207      	str	r2, [sp, #28]
 8005b06:	9807      	ldr	r0, [sp, #28]
 8005b08:	9905      	ldr	r1, [sp, #20]
 8005b0a:	9a06      	ldr	r2, [sp, #24]
 8005b0c:	9304      	str	r3, [sp, #16]
 8005b0e:	f8cd c00c 	str.w	ip, [sp, #12]
 8005b12:	f8cd e008 	str.w	lr, [sp, #8]
 8005b16:	f000 f877 	bl	8005c08 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17h19d437c8d974b8d1E>
 8005b1a:	9001      	str	r0, [sp, #4]
 8005b1c:	e7ff      	b.n	8005b1e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3get17hb4a91e78f630f22cE+0x28>
 8005b1e:	9801      	ldr	r0, [sp, #4]
 8005b20:	b008      	add	sp, #32
 8005b22:	bd80      	pop	{r7, pc}

08005b24 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h9f79003d40cdc30eE>:
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b08e      	sub	sp, #56	; 0x38
 8005b28:	460a      	mov	r2, r1
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	9006      	str	r0, [sp, #24]
 8005b2e:	9107      	str	r1, [sp, #28]
 8005b30:	9806      	ldr	r0, [sp, #24]
 8005b32:	9907      	ldr	r1, [sp, #28]
 8005b34:	9205      	str	r2, [sp, #20]
 8005b36:	9304      	str	r3, [sp, #16]
 8005b38:	f001 f948 	bl	8006dcc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h12b66ceea47b68d2E>
 8005b3c:	9003      	str	r0, [sp, #12]
 8005b3e:	e7ff      	b.n	8005b40 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h9f79003d40cdc30eE+0x1c>
 8005b40:	2101      	movs	r1, #1
 8005b42:	9803      	ldr	r0, [sp, #12]
 8005b44:	f001 fe1c 	bl	8007780 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h1b2dc11be93c175aE>
 8005b48:	9002      	str	r0, [sp, #8]
 8005b4a:	9101      	str	r1, [sp, #4]
 8005b4c:	e7ff      	b.n	8005b4e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h9f79003d40cdc30eE+0x2a>
 8005b4e:	9802      	ldr	r0, [sp, #8]
 8005b50:	9901      	ldr	r1, [sp, #4]
 8005b52:	f7ff fae6 	bl	8005122 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h266ad2132c426b62E>
 8005b56:	910b      	str	r1, [sp, #44]	; 0x2c
 8005b58:	900a      	str	r0, [sp, #40]	; 0x28
 8005b5a:	e7ff      	b.n	8005b5c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h9f79003d40cdc30eE+0x38>
 8005b5c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005b5e:	2800      	cmp	r0, #0
 8005b60:	9000      	str	r0, [sp, #0]
 8005b62:	d010      	beq.n	8005b86 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h9f79003d40cdc30eE+0x62>
 8005b64:	e7ff      	b.n	8005b66 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h9f79003d40cdc30eE+0x42>
 8005b66:	9800      	ldr	r0, [sp, #0]
 8005b68:	2801      	cmp	r0, #1
 8005b6a:	d001      	beq.n	8005b70 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h9f79003d40cdc30eE+0x4c>
 8005b6c:	e7ff      	b.n	8005b6e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h9f79003d40cdc30eE+0x4a>
 8005b6e:	defe      	udf	#254	; 0xfe
 8005b70:	f7ff fa81 	bl	8005076 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h7fa4a63a8b7dfa6dE>
 8005b74:	e7ff      	b.n	8005b76 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h9f79003d40cdc30eE+0x52>
 8005b76:	f7ff face 	bl	8005116 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17hc5c34342aa7dc908E>
 8005b7a:	9008      	str	r0, [sp, #32]
 8005b7c:	e7ff      	b.n	8005b7e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h9f79003d40cdc30eE+0x5a>
 8005b7e:	e7ff      	b.n	8005b80 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h9f79003d40cdc30eE+0x5c>
 8005b80:	9808      	ldr	r0, [sp, #32]
 8005b82:	b00e      	add	sp, #56	; 0x38
 8005b84:	bd80      	pop	{r7, pc}
 8005b86:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005b88:	900d      	str	r0, [sp, #52]	; 0x34
 8005b8a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005b8c:	9009      	str	r0, [sp, #36]	; 0x24
 8005b8e:	9806      	ldr	r0, [sp, #24]
 8005b90:	9907      	ldr	r1, [sp, #28]
 8005b92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b94:	f7ff ffaf 	bl	8005af6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3get17hb4a91e78f630f22cE>
 8005b98:	9008      	str	r0, [sp, #32]
 8005b9a:	e7ff      	b.n	8005b9c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h9f79003d40cdc30eE+0x78>
 8005b9c:	e7f0      	b.n	8005b80 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h9f79003d40cdc30eE+0x5c>

08005b9e <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17h67eed304dd30c897E>:
 8005b9e:	b580      	push	{r7, lr}
 8005ba0:	b088      	sub	sp, #32
 8005ba2:	4613      	mov	r3, r2
 8005ba4:	468c      	mov	ip, r1
 8005ba6:	4686      	mov	lr, r0
 8005ba8:	9005      	str	r0, [sp, #20]
 8005baa:	9106      	str	r1, [sp, #24]
 8005bac:	9207      	str	r2, [sp, #28]
 8005bae:	9807      	ldr	r0, [sp, #28]
 8005bb0:	9905      	ldr	r1, [sp, #20]
 8005bb2:	9a06      	ldr	r2, [sp, #24]
 8005bb4:	9304      	str	r3, [sp, #16]
 8005bb6:	f8cd c00c 	str.w	ip, [sp, #12]
 8005bba:	f8cd e008 	str.w	lr, [sp, #8]
 8005bbe:	f7ff f90b 	bl	8004dd8 <_ZN101_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h27eb5c40c78bb5e7E>
 8005bc2:	9001      	str	r0, [sp, #4]
 8005bc4:	9100      	str	r1, [sp, #0]
 8005bc6:	e7ff      	b.n	8005bc8 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17h67eed304dd30c897E+0x2a>
 8005bc8:	9801      	ldr	r0, [sp, #4]
 8005bca:	9900      	ldr	r1, [sp, #0]
 8005bcc:	b008      	add	sp, #32
 8005bce:	bd80      	pop	{r7, pc}

08005bd0 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17h85c309d56cc666c6E>:
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b088      	sub	sp, #32
 8005bd4:	4613      	mov	r3, r2
 8005bd6:	468c      	mov	ip, r1
 8005bd8:	4686      	mov	lr, r0
 8005bda:	9005      	str	r0, [sp, #20]
 8005bdc:	9106      	str	r1, [sp, #24]
 8005bde:	9207      	str	r2, [sp, #28]
 8005be0:	9806      	ldr	r0, [sp, #24]
 8005be2:	9907      	ldr	r1, [sp, #28]
 8005be4:	9304      	str	r3, [sp, #16]
 8005be6:	f8cd c00c 	str.w	ip, [sp, #12]
 8005bea:	f8cd e008 	str.w	lr, [sp, #8]
 8005bee:	f001 f8fb 	bl	8006de8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hdef04f6d8168bdb2E>
 8005bf2:	9001      	str	r0, [sp, #4]
 8005bf4:	e7ff      	b.n	8005bf6 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17h85c309d56cc666c6E+0x26>
 8005bf6:	9905      	ldr	r1, [sp, #20]
 8005bf8:	9801      	ldr	r0, [sp, #4]
 8005bfa:	f001 f88c 	bl	8006d16 <_ZN4core3ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hf0106c7b78f17716E>
 8005bfe:	9000      	str	r0, [sp, #0]
 8005c00:	e7ff      	b.n	8005c02 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17h85c309d56cc666c6E+0x32>
 8005c02:	9800      	ldr	r0, [sp, #0]
 8005c04:	b008      	add	sp, #32
 8005c06:	bd80      	pop	{r7, pc}

08005c08 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17h19d437c8d974b8d1E>:
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b08a      	sub	sp, #40	; 0x28
 8005c0c:	4613      	mov	r3, r2
 8005c0e:	468c      	mov	ip, r1
 8005c10:	4686      	mov	lr, r0
 8005c12:	9006      	str	r0, [sp, #24]
 8005c14:	9107      	str	r1, [sp, #28]
 8005c16:	9208      	str	r2, [sp, #32]
 8005c18:	9806      	ldr	r0, [sp, #24]
 8005c1a:	9907      	ldr	r1, [sp, #28]
 8005c1c:	9a08      	ldr	r2, [sp, #32]
 8005c1e:	9005      	str	r0, [sp, #20]
 8005c20:	4608      	mov	r0, r1
 8005c22:	4611      	mov	r1, r2
 8005c24:	9304      	str	r3, [sp, #16]
 8005c26:	f8cd c00c 	str.w	ip, [sp, #12]
 8005c2a:	f8cd e008 	str.w	lr, [sp, #8]
 8005c2e:	f001 f8cd 	bl	8006dcc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h12b66ceea47b68d2E>
 8005c32:	9001      	str	r0, [sp, #4]
 8005c34:	e7ff      	b.n	8005c36 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17h19d437c8d974b8d1E+0x2e>
 8005c36:	9805      	ldr	r0, [sp, #20]
 8005c38:	9901      	ldr	r1, [sp, #4]
 8005c3a:	4288      	cmp	r0, r1
 8005c3c:	d20a      	bcs.n	8005c54 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17h19d437c8d974b8d1E+0x4c>
 8005c3e:	e7ff      	b.n	8005c40 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17h19d437c8d974b8d1E+0x38>
 8005c40:	9806      	ldr	r0, [sp, #24]
 8005c42:	9907      	ldr	r1, [sp, #28]
 8005c44:	9a08      	ldr	r2, [sp, #32]
 8005c46:	f7ff ffc3 	bl	8005bd0 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17h85c309d56cc666c6E>
 8005c4a:	9000      	str	r0, [sp, #0]
 8005c4c:	e7ff      	b.n	8005c4e <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17h19d437c8d974b8d1E+0x46>
 8005c4e:	9800      	ldr	r0, [sp, #0]
 8005c50:	9009      	str	r0, [sp, #36]	; 0x24
 8005c52:	e002      	b.n	8005c5a <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17h19d437c8d974b8d1E+0x52>
 8005c54:	2000      	movs	r0, #0
 8005c56:	9009      	str	r0, [sp, #36]	; 0x24
 8005c58:	e7ff      	b.n	8005c5a <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17h19d437c8d974b8d1E+0x52>
 8005c5a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005c5c:	b00a      	add	sp, #40	; 0x28
 8005c5e:	bd80      	pop	{r7, pc}

08005c60 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17hd18febbae977edc8E>:
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b088      	sub	sp, #32
 8005c64:	460a      	mov	r2, r1
 8005c66:	4603      	mov	r3, r0
 8005c68:	9005      	str	r0, [sp, #20]
 8005c6a:	9106      	str	r1, [sp, #24]
 8005c6c:	9806      	ldr	r0, [sp, #24]
 8005c6e:	9204      	str	r2, [sp, #16]
 8005c70:	9303      	str	r3, [sp, #12]
 8005c72:	f003 fdc9 	bl	8009808 <_ZN4core3fmt9Formatter15debug_lower_hex17h28b672d23c16e15aE>
 8005c76:	9002      	str	r0, [sp, #8]
 8005c78:	e7ff      	b.n	8005c7a <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17hd18febbae977edc8E+0x1a>
 8005c7a:	9802      	ldr	r0, [sp, #8]
 8005c7c:	07c1      	lsls	r1, r0, #31
 8005c7e:	2900      	cmp	r1, #0
 8005c80:	d008      	beq.n	8005c94 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17hd18febbae977edc8E+0x34>
 8005c82:	e7ff      	b.n	8005c84 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17hd18febbae977edc8E+0x24>
 8005c84:	9805      	ldr	r0, [sp, #20]
 8005c86:	9906      	ldr	r1, [sp, #24]
 8005c88:	f004 f893 	bl	8009db2 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he7fa0f4e9bbfda2bE>
 8005c8c:	f88d 001f 	strb.w	r0, [sp, #31]
 8005c90:	e7ff      	b.n	8005c92 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17hd18febbae977edc8E+0x32>
 8005c92:	e01a      	b.n	8005cca <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17hd18febbae977edc8E+0x6a>
 8005c94:	9806      	ldr	r0, [sp, #24]
 8005c96:	f003 fdbb 	bl	8009810 <_ZN4core3fmt9Formatter15debug_upper_hex17h4ab9339a84cb4dceE>
 8005c9a:	9001      	str	r0, [sp, #4]
 8005c9c:	e7ff      	b.n	8005c9e <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17hd18febbae977edc8E+0x3e>
 8005c9e:	9801      	ldr	r0, [sp, #4]
 8005ca0:	07c1      	lsls	r1, r0, #31
 8005ca2:	2900      	cmp	r1, #0
 8005ca4:	d008      	beq.n	8005cb8 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17hd18febbae977edc8E+0x58>
 8005ca6:	e7ff      	b.n	8005ca8 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17hd18febbae977edc8E+0x48>
 8005ca8:	9805      	ldr	r0, [sp, #20]
 8005caa:	9906      	ldr	r1, [sp, #24]
 8005cac:	f004 f8b0 	bl	8009e10 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17hab068c13e1025a46E>
 8005cb0:	f88d 001f 	strb.w	r0, [sp, #31]
 8005cb4:	e7ff      	b.n	8005cb6 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17hd18febbae977edc8E+0x56>
 8005cb6:	e007      	b.n	8005cc8 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17hd18febbae977edc8E+0x68>
 8005cb8:	9805      	ldr	r0, [sp, #20]
 8005cba:	9906      	ldr	r1, [sp, #24]
 8005cbc:	f004 fa98 	bl	800a1f0 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h4a5378243facc467E>
 8005cc0:	f88d 001f 	strb.w	r0, [sp, #31]
 8005cc4:	e7ff      	b.n	8005cc6 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17hd18febbae977edc8E+0x66>
 8005cc6:	e7ff      	b.n	8005cc8 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17hd18febbae977edc8E+0x68>
 8005cc8:	e7ff      	b.n	8005cca <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17hd18febbae977edc8E+0x6a>
 8005cca:	f89d 001f 	ldrb.w	r0, [sp, #31]
 8005cce:	b008      	add	sp, #32
 8005cd0:	bd80      	pop	{r7, pc}

08005cd2 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h16ef8ddab3dbb693E>:
 8005cd2:	b580      	push	{r7, lr}
 8005cd4:	b088      	sub	sp, #32
 8005cd6:	460a      	mov	r2, r1
 8005cd8:	4603      	mov	r3, r0
 8005cda:	9005      	str	r0, [sp, #20]
 8005cdc:	9106      	str	r1, [sp, #24]
 8005cde:	9806      	ldr	r0, [sp, #24]
 8005ce0:	9204      	str	r2, [sp, #16]
 8005ce2:	9303      	str	r3, [sp, #12]
 8005ce4:	f003 fd90 	bl	8009808 <_ZN4core3fmt9Formatter15debug_lower_hex17h28b672d23c16e15aE>
 8005ce8:	9002      	str	r0, [sp, #8]
 8005cea:	e7ff      	b.n	8005cec <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h16ef8ddab3dbb693E+0x1a>
 8005cec:	9802      	ldr	r0, [sp, #8]
 8005cee:	07c1      	lsls	r1, r0, #31
 8005cf0:	2900      	cmp	r1, #0
 8005cf2:	d008      	beq.n	8005d06 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h16ef8ddab3dbb693E+0x34>
 8005cf4:	e7ff      	b.n	8005cf6 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h16ef8ddab3dbb693E+0x24>
 8005cf6:	9805      	ldr	r0, [sp, #20]
 8005cf8:	9906      	ldr	r1, [sp, #24]
 8005cfa:	f004 f8b8 	bl	8009e6e <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17h4f9d20d49859c5e5E>
 8005cfe:	f88d 001f 	strb.w	r0, [sp, #31]
 8005d02:	e7ff      	b.n	8005d04 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h16ef8ddab3dbb693E+0x32>
 8005d04:	e01a      	b.n	8005d3c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h16ef8ddab3dbb693E+0x6a>
 8005d06:	9806      	ldr	r0, [sp, #24]
 8005d08:	f003 fd82 	bl	8009810 <_ZN4core3fmt9Formatter15debug_upper_hex17h4ab9339a84cb4dceE>
 8005d0c:	9001      	str	r0, [sp, #4]
 8005d0e:	e7ff      	b.n	8005d10 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h16ef8ddab3dbb693E+0x3e>
 8005d10:	9801      	ldr	r0, [sp, #4]
 8005d12:	07c1      	lsls	r1, r0, #31
 8005d14:	2900      	cmp	r1, #0
 8005d16:	d008      	beq.n	8005d2a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h16ef8ddab3dbb693E+0x58>
 8005d18:	e7ff      	b.n	8005d1a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h16ef8ddab3dbb693E+0x48>
 8005d1a:	9805      	ldr	r0, [sp, #20]
 8005d1c:	9906      	ldr	r1, [sp, #24]
 8005d1e:	f004 f911 	bl	8009f44 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hc10e55c761f9c3e5E>
 8005d22:	f88d 001f 	strb.w	r0, [sp, #31]
 8005d26:	e7ff      	b.n	8005d28 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h16ef8ddab3dbb693E+0x56>
 8005d28:	e007      	b.n	8005d3a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h16ef8ddab3dbb693E+0x68>
 8005d2a:	9805      	ldr	r0, [sp, #20]
 8005d2c:	9906      	ldr	r1, [sp, #24]
 8005d2e:	f004 fa64 	bl	800a1fa <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17h8362f63c9a899390E>
 8005d32:	f88d 001f 	strb.w	r0, [sp, #31]
 8005d36:	e7ff      	b.n	8005d38 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h16ef8ddab3dbb693E+0x66>
 8005d38:	e7ff      	b.n	8005d3a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h16ef8ddab3dbb693E+0x68>
 8005d3a:	e7ff      	b.n	8005d3c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h16ef8ddab3dbb693E+0x6a>
 8005d3c:	f89d 001f 	ldrb.w	r0, [sp, #31]
 8005d40:	b008      	add	sp, #32
 8005d42:	bd80      	pop	{r7, pc}

08005d44 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i64$GT$3fmt17h922eff1c86de8976E>:
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b088      	sub	sp, #32
 8005d48:	460a      	mov	r2, r1
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	9005      	str	r0, [sp, #20]
 8005d4e:	9106      	str	r1, [sp, #24]
 8005d50:	9806      	ldr	r0, [sp, #24]
 8005d52:	9204      	str	r2, [sp, #16]
 8005d54:	9303      	str	r3, [sp, #12]
 8005d56:	f003 fd57 	bl	8009808 <_ZN4core3fmt9Formatter15debug_lower_hex17h28b672d23c16e15aE>
 8005d5a:	9002      	str	r0, [sp, #8]
 8005d5c:	e7ff      	b.n	8005d5e <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i64$GT$3fmt17h922eff1c86de8976E+0x1a>
 8005d5e:	9802      	ldr	r0, [sp, #8]
 8005d60:	07c1      	lsls	r1, r0, #31
 8005d62:	2900      	cmp	r1, #0
 8005d64:	d008      	beq.n	8005d78 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i64$GT$3fmt17h922eff1c86de8976E+0x34>
 8005d66:	e7ff      	b.n	8005d68 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i64$GT$3fmt17h922eff1c86de8976E+0x24>
 8005d68:	9805      	ldr	r0, [sp, #20]
 8005d6a:	9906      	ldr	r1, [sp, #24]
 8005d6c:	f004 f955 	bl	800a01a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17h703a08cf31f25f17E>
 8005d70:	f88d 001f 	strb.w	r0, [sp, #31]
 8005d74:	e7ff      	b.n	8005d76 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i64$GT$3fmt17h922eff1c86de8976E+0x32>
 8005d76:	e01a      	b.n	8005dae <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i64$GT$3fmt17h922eff1c86de8976E+0x6a>
 8005d78:	9806      	ldr	r0, [sp, #24]
 8005d7a:	f003 fd49 	bl	8009810 <_ZN4core3fmt9Formatter15debug_upper_hex17h4ab9339a84cb4dceE>
 8005d7e:	9001      	str	r0, [sp, #4]
 8005d80:	e7ff      	b.n	8005d82 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i64$GT$3fmt17h922eff1c86de8976E+0x3e>
 8005d82:	9801      	ldr	r0, [sp, #4]
 8005d84:	07c1      	lsls	r1, r0, #31
 8005d86:	2900      	cmp	r1, #0
 8005d88:	d008      	beq.n	8005d9c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i64$GT$3fmt17h922eff1c86de8976E+0x58>
 8005d8a:	e7ff      	b.n	8005d8c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i64$GT$3fmt17h922eff1c86de8976E+0x48>
 8005d8c:	9805      	ldr	r0, [sp, #20]
 8005d8e:	9906      	ldr	r1, [sp, #24]
 8005d90:	f004 f977 	bl	800a082 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i64$GT$3fmt17hb3552287af737977E>
 8005d94:	f88d 001f 	strb.w	r0, [sp, #31]
 8005d98:	e7ff      	b.n	8005d9a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i64$GT$3fmt17h922eff1c86de8976E+0x56>
 8005d9a:	e007      	b.n	8005dac <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i64$GT$3fmt17h922eff1c86de8976E+0x68>
 8005d9c:	9805      	ldr	r0, [sp, #20]
 8005d9e:	9906      	ldr	r1, [sp, #24]
 8005da0:	f004 fac8 	bl	800a334 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i64$GT$3fmt17hf1595badf4d53d6dE>
 8005da4:	f88d 001f 	strb.w	r0, [sp, #31]
 8005da8:	e7ff      	b.n	8005daa <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i64$GT$3fmt17h922eff1c86de8976E+0x66>
 8005daa:	e7ff      	b.n	8005dac <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i64$GT$3fmt17h922eff1c86de8976E+0x68>
 8005dac:	e7ff      	b.n	8005dae <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i64$GT$3fmt17h922eff1c86de8976E+0x6a>
 8005dae:	f89d 001f 	ldrb.w	r0, [sp, #31]
 8005db2:	b008      	add	sp, #32
 8005db4:	bd80      	pop	{r7, pc}

08005db6 <_ZN3app10gps_sensor18start_gps_listener17hff4f7c9c3618b255E>:
///  Type of sensor: Geolocation (latitude, longitude, altitude)
const GPS_SENSOR_TYPE: sensor_type_t = sensor::SENSOR_TYPE_GEOLOCATION;

///  Ask Mynewt to poll the GPS sensor and call `aggregate_sensor_data()`
///  Return `Ok()` if successful, else return `Err()` with `MynewtError` error code inside.
pub fn start_gps_listener() -> MynewtResult<()>  {  //  Returns an error code upon error.
 8005db6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005db8:	b0c3      	sub	sp, #268	; 0x10c
    //  Start the GPS driver.
    console::print("Rust GPS poll\n");
 8005dba:	f246 1090 	movw	r0, #24976	; 0x6190
 8005dbe:	f6c0 0001 	movt	r0, #2049	; 0x801
 8005dc2:	210e      	movs	r1, #14
 8005dc4:	f7fe fde0 	bl	8004988 <_ZN6mynewt3sys7console5print17ha0601e49e4927bc4E>
 8005dc8:	e7ff      	b.n	8005dca <_ZN3app10gps_sensor18start_gps_listener17hff4f7c9c3618b255E+0x14>
    start_gps_l70r() ? ;
 8005dca:	f000 f8d3 	bl	8005f74 <_ZN3app10gps_sensor14start_gps_l70r17hde73a7ac96a090b3E>
 8005dce:	900d      	str	r0, [sp, #52]	; 0x34
 8005dd0:	e7ff      	b.n	8005dd2 <_ZN3app10gps_sensor18start_gps_listener17hff4f7c9c3618b255E+0x1c>
 8005dd2:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005dd4:	f000 f978 	bl	80060c8 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h5477961aa483feaaE>
 8005dd8:	900f      	str	r0, [sp, #60]	; 0x3c
 8005dda:	e7ff      	b.n	8005ddc <_ZN3app10gps_sensor18start_gps_listener17hff4f7c9c3618b255E+0x26>
 8005ddc:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8005dde:	1e41      	subs	r1, r0, #1
 8005de0:	bf18      	it	ne
 8005de2:	2101      	movne	r1, #1
 8005de4:	2801      	cmp	r0, #1
 8005de6:	910c      	str	r1, [sp, #48]	; 0x30
 8005de8:	d015      	beq.n	8005e16 <_ZN3app10gps_sensor18start_gps_listener17hff4f7c9c3618b255E+0x60>
 8005dea:	e7ff      	b.n	8005dec <_ZN3app10gps_sensor18start_gps_listener17hff4f7c9c3618b255E+0x36>
 8005dec:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005dee:	2801      	cmp	r0, #1
 8005df0:	d001      	beq.n	8005df6 <_ZN3app10gps_sensor18start_gps_listener17hff4f7c9c3618b255E+0x40>
 8005df2:	e7ff      	b.n	8005df4 <_ZN3app10gps_sensor18start_gps_listener17hff4f7c9c3618b255E+0x3e>
    //  Register the Listener Function to be called with the polled sensor data.
    sensor::register_listener(sensor, listener) ? ;  //  `?` means in case of error, return error now.

    //  Return `Ok()` to indicate success.  This line should not end with a semicolon (;).
    Ok(())
}
 8005df4:	defe      	udf	#254	; 0xfe
    start_gps_l70r() ? ;
 8005df6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8005df8:	9010      	str	r0, [sp, #64]	; 0x40
 8005dfa:	9810      	ldr	r0, [sp, #64]	; 0x40
 8005dfc:	f000 fd60 	bl	80068c0 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17he9bf930fef93cf18E>
 8005e00:	900b      	str	r0, [sp, #44]	; 0x2c
 8005e02:	e7ff      	b.n	8005e04 <_ZN3app10gps_sensor18start_gps_listener17hff4f7c9c3618b255E+0x4e>
 8005e04:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005e06:	f000 f925 	bl	8006054 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h411c740de4b3d5baE>
 8005e0a:	900e      	str	r0, [sp, #56]	; 0x38
 8005e0c:	e7ff      	b.n	8005e0e <_ZN3app10gps_sensor18start_gps_listener17hff4f7c9c3618b255E+0x58>
 8005e0e:	e7ff      	b.n	8005e10 <_ZN3app10gps_sensor18start_gps_listener17hff4f7c9c3618b255E+0x5a>
}
 8005e10:	980e      	ldr	r0, [sp, #56]	; 0x38
 8005e12:	b043      	add	sp, #268	; 0x10c
 8005e14:	bdf0      	pop	{r4, r5, r6, r7, pc}
    let sensor = sensor_mgr::find_bydevname(&GPS_DEVICE)
 8005e16:	f246 1184 	movw	r1, #24964	; 0x6184
 8005e1a:	f6c0 0101 	movt	r1, #2049	; 0x801
 8005e1e:	a813      	add	r0, sp, #76	; 0x4c
 8005e20:	f001 fb6e 	bl	8007500 <_ZN6mynewt2hw10sensor_mgr14find_bydevname17h06b2c476f1bcc849E>
 8005e24:	e7ff      	b.n	8005e26 <_ZN3app10gps_sensor18start_gps_listener17hff4f7c9c3618b255E+0x70>
 8005e26:	a813      	add	r0, sp, #76	; 0x4c
 8005e28:	f001 fb88 	bl	800753c <_ZN99_$LT$mynewt..hw..sensor_mgr..SensorsByDevname$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdf9b4b1bcd01faa9E>
 8005e2c:	900a      	str	r0, [sp, #40]	; 0x28
 8005e2e:	9109      	str	r1, [sp, #36]	; 0x24
 8005e30:	e7ff      	b.n	8005e32 <_ZN3app10gps_sensor18start_gps_listener17hff4f7c9c3618b255E+0x7c>
 8005e32:	f246 129e 	movw	r2, #24990	; 0x619e
 8005e36:	f6c0 0201 	movt	r2, #2049	; 0x801
 8005e3a:	2306      	movs	r3, #6
 8005e3c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005e3e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005e40:	f000 fd13 	bl	800686a <_ZN4core6option15Option$LT$T$GT$6expect17hbf2467b5c00077abE>
 8005e44:	9012      	str	r0, [sp, #72]	; 0x48
 8005e46:	e7ff      	b.n	8005e48 <_ZN3app10gps_sensor18start_gps_listener17hff4f7c9c3618b255E+0x92>
    sensor::set_poll_rate_ms(&GPS_DEVICE, GPS_POLL_TIME) ? ;
 8005e48:	f246 1084 	movw	r0, #24964	; 0x6184
 8005e4c:	f6c0 0001 	movt	r0, #2049	; 0x801
 8005e50:	f642 21f8 	movw	r1, #11000	; 0x2af8
 8005e54:	f001 fbf0 	bl	8007638 <_ZN6mynewt2hw6sensor8bindings16set_poll_rate_ms17h1b333cb0fcc2972cE>
 8005e58:	9008      	str	r0, [sp, #32]
 8005e5a:	e7ff      	b.n	8005e5c <_ZN3app10gps_sensor18start_gps_listener17hff4f7c9c3618b255E+0xa6>
 8005e5c:	9808      	ldr	r0, [sp, #32]
 8005e5e:	f000 f933 	bl	80060c8 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h5477961aa483feaaE>
 8005e62:	9017      	str	r0, [sp, #92]	; 0x5c
 8005e64:	e7ff      	b.n	8005e66 <_ZN3app10gps_sensor18start_gps_listener17hff4f7c9c3618b255E+0xb0>
 8005e66:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8005e68:	1e41      	subs	r1, r0, #1
 8005e6a:	bf18      	it	ne
 8005e6c:	2101      	movne	r1, #1
 8005e6e:	2801      	cmp	r0, #1
 8005e70:	9107      	str	r1, [sp, #28]
 8005e72:	d012      	beq.n	8005e9a <_ZN3app10gps_sensor18start_gps_listener17hff4f7c9c3618b255E+0xe4>
 8005e74:	e7ff      	b.n	8005e76 <_ZN3app10gps_sensor18start_gps_listener17hff4f7c9c3618b255E+0xc0>
 8005e76:	9807      	ldr	r0, [sp, #28]
 8005e78:	2801      	cmp	r0, #1
 8005e7a:	d1bb      	bne.n	8005df4 <_ZN3app10gps_sensor18start_gps_listener17hff4f7c9c3618b255E+0x3e>
 8005e7c:	e7ff      	b.n	8005e7e <_ZN3app10gps_sensor18start_gps_listener17hff4f7c9c3618b255E+0xc8>
 8005e7e:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8005e80:	9018      	str	r0, [sp, #96]	; 0x60
 8005e82:	9818      	ldr	r0, [sp, #96]	; 0x60
 8005e84:	f000 fd1c 	bl	80068c0 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17he9bf930fef93cf18E>
 8005e88:	9006      	str	r0, [sp, #24]
 8005e8a:	e7ff      	b.n	8005e8c <_ZN3app10gps_sensor18start_gps_listener17hff4f7c9c3618b255E+0xd6>
 8005e8c:	9806      	ldr	r0, [sp, #24]
 8005e8e:	f000 f8e1 	bl	8006054 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h411c740de4b3d5baE>
 8005e92:	900e      	str	r0, [sp, #56]	; 0x38
 8005e94:	e7ff      	b.n	8005e96 <_ZN3app10gps_sensor18start_gps_listener17hff4f7c9c3618b255E+0xe0>
 8005e96:	e7ff      	b.n	8005e98 <_ZN3app10gps_sensor18start_gps_listener17hff4f7c9c3618b255E+0xe2>
 8005e98:	e7ba      	b.n	8005e10 <_ZN3app10gps_sensor18start_gps_listener17hff4f7c9c3618b255E+0x5a>
    let listener = sensor::new_sensor_listener(
 8005e9a:	f246 204d 	movw	r0, #25165	; 0x624d
 8005e9e:	f6c0 0000 	movt	r0, #2048	; 0x800
 8005ea2:	4669      	mov	r1, sp
 8005ea4:	6008      	str	r0, [r1, #0]
 8005ea6:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8005eaa:	f6c0 0101 	movt	r1, #2049	; 0x801
 8005eae:	a828      	add	r0, sp, #160	; 0xa0
 8005eb0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	f002 f881 	bl	8007fbc <_ZN6mynewt2hw6sensor19new_sensor_listener17h2b99bb3fa912f4a2E>
 8005eba:	e7ff      	b.n	8005ebc <_ZN3app10gps_sensor18start_gps_listener17hff4f7c9c3618b255E+0x106>
 8005ebc:	a820      	add	r0, sp, #128	; 0x80
 8005ebe:	a928      	add	r1, sp, #160	; 0xa0
 8005ec0:	f000 f8d1 	bl	8006066 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h094b73547dab2142E>
 8005ec4:	e7ff      	b.n	8005ec6 <_ZN3app10gps_sensor18start_gps_listener17hff4f7c9c3618b255E+0x110>
    ) ? ;
 8005ec6:	9820      	ldr	r0, [sp, #128]	; 0x80
 8005ec8:	2800      	cmp	r0, #0
 8005eca:	9005      	str	r0, [sp, #20]
 8005ecc:	d013      	beq.n	8005ef6 <_ZN3app10gps_sensor18start_gps_listener17hff4f7c9c3618b255E+0x140>
 8005ece:	e7ff      	b.n	8005ed0 <_ZN3app10gps_sensor18start_gps_listener17hff4f7c9c3618b255E+0x11a>
 8005ed0:	9805      	ldr	r0, [sp, #20]
 8005ed2:	2801      	cmp	r0, #1
 8005ed4:	f47f af8e 	bne.w	8005df4 <_ZN3app10gps_sensor18start_gps_listener17hff4f7c9c3618b255E+0x3e>
 8005ed8:	e7ff      	b.n	8005eda <_ZN3app10gps_sensor18start_gps_listener17hff4f7c9c3618b255E+0x124>
 8005eda:	9821      	ldr	r0, [sp, #132]	; 0x84
 8005edc:	9031      	str	r0, [sp, #196]	; 0xc4
 8005ede:	9831      	ldr	r0, [sp, #196]	; 0xc4
 8005ee0:	f000 fcee 	bl	80068c0 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17he9bf930fef93cf18E>
 8005ee4:	9004      	str	r0, [sp, #16]
 8005ee6:	e7ff      	b.n	8005ee8 <_ZN3app10gps_sensor18start_gps_listener17hff4f7c9c3618b255E+0x132>
 8005ee8:	9804      	ldr	r0, [sp, #16]
 8005eea:	f000 f8b3 	bl	8006054 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h411c740de4b3d5baE>
 8005eee:	900e      	str	r0, [sp, #56]	; 0x38
 8005ef0:	e7ff      	b.n	8005ef2 <_ZN3app10gps_sensor18start_gps_listener17hff4f7c9c3618b255E+0x13c>
 8005ef2:	e7ff      	b.n	8005ef4 <_ZN3app10gps_sensor18start_gps_listener17hff4f7c9c3618b255E+0x13e>
 8005ef4:	e7d0      	b.n	8005e98 <_ZN3app10gps_sensor18start_gps_listener17hff4f7c9c3618b255E+0xe2>
 8005ef6:	a820      	add	r0, sp, #128	; 0x80
    let listener = sensor::new_sensor_listener(
 8005ef8:	3008      	adds	r0, #8
 8005efa:	a932      	add	r1, sp, #200	; 0xc8
 8005efc:	460a      	mov	r2, r1
 8005efe:	e890 5078 	ldmia.w	r0, {r3, r4, r5, r6, ip, lr}
 8005f02:	e882 5078 	stmia.w	r2, {r3, r4, r5, r6, ip, lr}
 8005f06:	a81a      	add	r0, sp, #104	; 0x68
 8005f08:	4602      	mov	r2, r0
 8005f0a:	e891 5078 	ldmia.w	r1, {r3, r4, r5, r6, ip, lr}
 8005f0e:	e882 5078 	stmia.w	r2, {r3, r4, r5, r6, ip, lr}
    sensor::register_listener(sensor, listener) ? ;  //  `?` means in case of error, return error now.
 8005f12:	9912      	ldr	r1, [sp, #72]	; 0x48
 8005f14:	aa3a      	add	r2, sp, #232	; 0xe8
 8005f16:	4613      	mov	r3, r2
 8005f18:	e890 50f0 	ldmia.w	r0, {r4, r5, r6, r7, ip, lr}
 8005f1c:	e883 50f0 	stmia.w	r3, {r4, r5, r6, r7, ip, lr}
 8005f20:	4608      	mov	r0, r1
 8005f22:	4611      	mov	r1, r2
 8005f24:	f001 feef 	bl	8007d06 <_ZN6mynewt2hw6sensor17register_listener17hc302d184d2da34dbE>
 8005f28:	9003      	str	r0, [sp, #12]
 8005f2a:	e7ff      	b.n	8005f2c <_ZN3app10gps_sensor18start_gps_listener17hff4f7c9c3618b255E+0x176>
 8005f2c:	9803      	ldr	r0, [sp, #12]
 8005f2e:	f000 f8cb 	bl	80060c8 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h5477961aa483feaaE>
 8005f32:	9039      	str	r0, [sp, #228]	; 0xe4
 8005f34:	e7ff      	b.n	8005f36 <_ZN3app10gps_sensor18start_gps_listener17hff4f7c9c3618b255E+0x180>
 8005f36:	9839      	ldr	r0, [sp, #228]	; 0xe4
 8005f38:	1e41      	subs	r1, r0, #1
 8005f3a:	bf18      	it	ne
 8005f3c:	2101      	movne	r1, #1
 8005f3e:	2801      	cmp	r0, #1
 8005f40:	9102      	str	r1, [sp, #8]
 8005f42:	d012      	beq.n	8005f6a <_ZN3app10gps_sensor18start_gps_listener17hff4f7c9c3618b255E+0x1b4>
 8005f44:	e7ff      	b.n	8005f46 <_ZN3app10gps_sensor18start_gps_listener17hff4f7c9c3618b255E+0x190>
 8005f46:	9802      	ldr	r0, [sp, #8]
 8005f48:	2801      	cmp	r0, #1
 8005f4a:	f47f af53 	bne.w	8005df4 <_ZN3app10gps_sensor18start_gps_listener17hff4f7c9c3618b255E+0x3e>
 8005f4e:	e7ff      	b.n	8005f50 <_ZN3app10gps_sensor18start_gps_listener17hff4f7c9c3618b255E+0x19a>
 8005f50:	9839      	ldr	r0, [sp, #228]	; 0xe4
 8005f52:	9040      	str	r0, [sp, #256]	; 0x100
 8005f54:	9840      	ldr	r0, [sp, #256]	; 0x100
 8005f56:	f000 fcb3 	bl	80068c0 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17he9bf930fef93cf18E>
 8005f5a:	9001      	str	r0, [sp, #4]
 8005f5c:	e7ff      	b.n	8005f5e <_ZN3app10gps_sensor18start_gps_listener17hff4f7c9c3618b255E+0x1a8>
 8005f5e:	9801      	ldr	r0, [sp, #4]
 8005f60:	f000 f878 	bl	8006054 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h411c740de4b3d5baE>
 8005f64:	900e      	str	r0, [sp, #56]	; 0x38
 8005f66:	e7ff      	b.n	8005f68 <_ZN3app10gps_sensor18start_gps_listener17hff4f7c9c3618b255E+0x1b2>
 8005f68:	e7c4      	b.n	8005ef4 <_ZN3app10gps_sensor18start_gps_listener17hff4f7c9c3618b255E+0x13e>
 8005f6a:	2000      	movs	r0, #0
    Ok(())
 8005f6c:	900e      	str	r0, [sp, #56]	; 0x38
 8005f6e:	2001      	movs	r0, #1
 8005f70:	900e      	str	r0, [sp, #56]	; 0x38
}
 8005f72:	e74d      	b.n	8005e10 <_ZN3app10gps_sensor18start_gps_listener17hff4f7c9c3618b255E+0x5a>

08005f74 <_ZN3app10gps_sensor14start_gps_l70r17hde73a7ac96a090b3E>:

/// Start the GPS driver for Quectel L70R
fn start_gps_l70r() -> MynewtResult<()> {
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b084      	sub	sp, #16
    //  Driver function to start the GPS
    extern { fn gps_l70r_start() -> i32; }
    let res = unsafe { gps_l70r_start() };
 8005f78:	f008 fd4e 	bl	800ea18 <gps_l70r_start>
 8005f7c:	9002      	str	r0, [sp, #8]
 8005f7e:	e7ff      	b.n	8005f80 <_ZN3app10gps_sensor14start_gps_l70r17hde73a7ac96a090b3E+0xc>
    if res == 0 { Ok(()) }
 8005f80:	9802      	ldr	r0, [sp, #8]
 8005f82:	2800      	cmp	r0, #0
 8005f84:	d105      	bne.n	8005f92 <_ZN3app10gps_sensor14start_gps_l70r17hde73a7ac96a090b3E+0x1e>
 8005f86:	e7ff      	b.n	8005f88 <_ZN3app10gps_sensor14start_gps_l70r17hde73a7ac96a090b3E+0x14>
 8005f88:	2000      	movs	r0, #0
 8005f8a:	9001      	str	r0, [sp, #4]
 8005f8c:	2001      	movs	r0, #1
 8005f8e:	9001      	str	r0, [sp, #4]
 8005f90:	e007      	b.n	8005fa2 <_ZN3app10gps_sensor14start_gps_l70r17hde73a7ac96a090b3E+0x2e>
    else { Err(MynewtError::from(res)) }
 8005f92:	9802      	ldr	r0, [sp, #8]
 8005f94:	f7ff fb01 	bl	800559a <_ZN78_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$i32$GT$$GT$4from17h0c00a0d5ca46366cE>
 8005f98:	9000      	str	r0, [sp, #0]
 8005f9a:	e7ff      	b.n	8005f9c <_ZN3app10gps_sensor14start_gps_l70r17hde73a7ac96a090b3E+0x28>
 8005f9c:	9800      	ldr	r0, [sp, #0]
 8005f9e:	9001      	str	r0, [sp, #4]
    if res == 0 { Ok(()) }
 8005fa0:	e7ff      	b.n	8005fa2 <_ZN3app10gps_sensor14start_gps_l70r17hde73a7ac96a090b3E+0x2e>
 8005fa2:	9801      	ldr	r0, [sp, #4]
 8005fa4:	b004      	add	sp, #16
 8005fa6:	bd80      	pop	{r7, pc}

08005fa8 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h30f9912194b1df84E>:
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b08a      	sub	sp, #40	; 0x28
 8005fac:	4613      	mov	r3, r2
 8005fae:	468c      	mov	ip, r1
 8005fb0:	4686      	mov	lr, r0
 8005fb2:	9106      	str	r1, [sp, #24]
 8005fb4:	9207      	str	r2, [sp, #28]
 8005fb6:	6800      	ldr	r0, [r0, #0]
 8005fb8:	2800      	cmp	r0, #0
 8005fba:	9305      	str	r3, [sp, #20]
 8005fbc:	f8cd c010 	str.w	ip, [sp, #16]
 8005fc0:	f8cd e00c 	str.w	lr, [sp, #12]
 8005fc4:	9002      	str	r0, [sp, #8]
 8005fc6:	d005      	beq.n	8005fd4 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h30f9912194b1df84E+0x2c>
 8005fc8:	e7ff      	b.n	8005fca <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h30f9912194b1df84E+0x22>
 8005fca:	9802      	ldr	r0, [sp, #8]
 8005fcc:	2801      	cmp	r0, #1
 8005fce:	d00b      	beq.n	8005fe8 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h30f9912194b1df84E+0x40>
 8005fd0:	e7ff      	b.n	8005fd2 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h30f9912194b1df84E+0x2a>
 8005fd2:	defe      	udf	#254	; 0xfe
 8005fd4:	9803      	ldr	r0, [sp, #12]
 8005fd6:	6841      	ldr	r1, [r0, #4]
 8005fd8:	9108      	str	r1, [sp, #32]
 8005fda:	9808      	ldr	r0, [sp, #32]
 8005fdc:	9903      	ldr	r1, [sp, #12]
 8005fde:	680a      	ldr	r2, [r1, #0]
 8005fe0:	2a00      	cmp	r2, #0
 8005fe2:	9001      	str	r0, [sp, #4]
 8005fe4:	d009      	beq.n	8005ffa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h30f9912194b1df84E+0x52>
 8005fe6:	e00b      	b.n	8006000 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h30f9912194b1df84E+0x58>
 8005fe8:	9803      	ldr	r0, [sp, #12]
 8005fea:	6841      	ldr	r1, [r0, #4]
 8005fec:	9109      	str	r1, [sp, #36]	; 0x24
 8005fee:	9806      	ldr	r0, [sp, #24]
 8005ff0:	9907      	ldr	r1, [sp, #28]
 8005ff2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ff4:	f002 f9bd 	bl	8008372 <_ZN4core6result13unwrap_failed17hc06b1ee04940e7c4E>
 8005ff8:	defe      	udf	#254	; 0xfe
 8005ffa:	9801      	ldr	r0, [sp, #4]
 8005ffc:	b00a      	add	sp, #40	; 0x28
 8005ffe:	bd80      	pop	{r7, pc}
 8006000:	e7fb      	b.n	8005ffa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h30f9912194b1df84E+0x52>

08006002 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17ha550042fe08afe55E>:
 8006002:	b580      	push	{r7, lr}
 8006004:	b08a      	sub	sp, #40	; 0x28
 8006006:	4613      	mov	r3, r2
 8006008:	468c      	mov	ip, r1
 800600a:	4686      	mov	lr, r0
 800600c:	9005      	str	r0, [sp, #20]
 800600e:	9106      	str	r1, [sp, #24]
 8006010:	9207      	str	r2, [sp, #28]
 8006012:	9805      	ldr	r0, [sp, #20]
 8006014:	1e41      	subs	r1, r0, #1
 8006016:	bf18      	it	ne
 8006018:	2101      	movne	r1, #1
 800601a:	2801      	cmp	r0, #1
 800601c:	9304      	str	r3, [sp, #16]
 800601e:	f8cd c00c 	str.w	ip, [sp, #12]
 8006022:	f8cd e008 	str.w	lr, [sp, #8]
 8006026:	9101      	str	r1, [sp, #4]
 8006028:	d005      	beq.n	8006036 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17ha550042fe08afe55E+0x34>
 800602a:	e7ff      	b.n	800602c <_ZN4core6result19Result$LT$T$C$E$GT$6expect17ha550042fe08afe55E+0x2a>
 800602c:	9801      	ldr	r0, [sp, #4]
 800602e:	2801      	cmp	r0, #1
 8006030:	d005      	beq.n	800603e <_ZN4core6result19Result$LT$T$C$E$GT$6expect17ha550042fe08afe55E+0x3c>
 8006032:	e7ff      	b.n	8006034 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17ha550042fe08afe55E+0x32>
 8006034:	defe      	udf	#254	; 0xfe
 8006036:	9805      	ldr	r0, [sp, #20]
 8006038:	2801      	cmp	r0, #1
 800603a:	d008      	beq.n	800604e <_ZN4core6result19Result$LT$T$C$E$GT$6expect17ha550042fe08afe55E+0x4c>
 800603c:	e009      	b.n	8006052 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17ha550042fe08afe55E+0x50>
 800603e:	9805      	ldr	r0, [sp, #20]
 8006040:	9009      	str	r0, [sp, #36]	; 0x24
 8006042:	9806      	ldr	r0, [sp, #24]
 8006044:	9907      	ldr	r1, [sp, #28]
 8006046:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006048:	f002 f993 	bl	8008372 <_ZN4core6result13unwrap_failed17hc06b1ee04940e7c4E>
 800604c:	defe      	udf	#254	; 0xfe
 800604e:	b00a      	add	sp, #40	; 0x28
 8006050:	bd80      	pop	{r7, pc}
 8006052:	e7fc      	b.n	800604e <_ZN4core6result19Result$LT$T$C$E$GT$6expect17ha550042fe08afe55E+0x4c>

08006054 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h411c740de4b3d5baE>:
 8006054:	b083      	sub	sp, #12
 8006056:	4601      	mov	r1, r0
 8006058:	9001      	str	r0, [sp, #4]
 800605a:	9801      	ldr	r0, [sp, #4]
 800605c:	9002      	str	r0, [sp, #8]
 800605e:	9802      	ldr	r0, [sp, #8]
 8006060:	9100      	str	r1, [sp, #0]
 8006062:	b003      	add	sp, #12
 8006064:	4770      	bx	lr

08006066 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h094b73547dab2142E>:
 8006066:	b5b0      	push	{r4, r5, r7, lr}
 8006068:	b082      	sub	sp, #8
 800606a:	460a      	mov	r2, r1
 800606c:	4603      	mov	r3, r0
 800606e:	e8b1 5030 	ldmia.w	r1!, {r4, r5, ip, lr}
 8006072:	e8a0 5030 	stmia.w	r0!, {r4, r5, ip, lr}
 8006076:	e891 5030 	ldmia.w	r1, {r4, r5, ip, lr}
 800607a:	e880 5030 	stmia.w	r0, {r4, r5, ip, lr}
 800607e:	9201      	str	r2, [sp, #4]
 8006080:	9300      	str	r3, [sp, #0]
 8006082:	b002      	add	sp, #8
 8006084:	bdb0      	pop	{r4, r5, r7, pc}

08006086 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h2263e92fd7e9e0c7E>:
 8006086:	b510      	push	{r4, lr}
 8006088:	b082      	sub	sp, #8
 800608a:	460a      	mov	r2, r1
 800608c:	4603      	mov	r3, r0
 800608e:	f8d1 c000 	ldr.w	ip, [r1]
 8006092:	f8d1 e004 	ldr.w	lr, [r1, #4]
 8006096:	688c      	ldr	r4, [r1, #8]
 8006098:	68c9      	ldr	r1, [r1, #12]
 800609a:	60c1      	str	r1, [r0, #12]
 800609c:	6084      	str	r4, [r0, #8]
 800609e:	f8c0 e004 	str.w	lr, [r0, #4]
 80060a2:	f8c0 c000 	str.w	ip, [r0]
 80060a6:	9201      	str	r2, [sp, #4]
 80060a8:	9300      	str	r3, [sp, #0]
 80060aa:	b002      	add	sp, #8
 80060ac:	bd10      	pop	{r4, pc}

080060ae <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h38cdae572661f6a9E>:
 80060ae:	b082      	sub	sp, #8
 80060b0:	460a      	mov	r2, r1
 80060b2:	4603      	mov	r3, r0
 80060b4:	f8d1 c000 	ldr.w	ip, [r1]
 80060b8:	6849      	ldr	r1, [r1, #4]
 80060ba:	6041      	str	r1, [r0, #4]
 80060bc:	f8c0 c000 	str.w	ip, [r0]
 80060c0:	9201      	str	r2, [sp, #4]
 80060c2:	9300      	str	r3, [sp, #0]
 80060c4:	b002      	add	sp, #8
 80060c6:	4770      	bx	lr

080060c8 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h5477961aa483feaaE>:
 80060c8:	b082      	sub	sp, #8
 80060ca:	4601      	mov	r1, r0
 80060cc:	9001      	str	r0, [sp, #4]
 80060ce:	9801      	ldr	r0, [sp, #4]
 80060d0:	9100      	str	r1, [sp, #0]
 80060d2:	b002      	add	sp, #8
 80060d4:	4770      	bx	lr

080060d6 <_ZN3app10app_sensor21start_sensor_listener17h188554d40be3fd49E>:
///  Type of sensor: Raw temperature sensor (integer sensor values 0 to 4095)
const TEMP_SENSOR_TYPE: sensor_type_t = sensor::SENSOR_TYPE_AMBIENT_TEMPERATURE_RAW;

///  Ask Mynewt to poll or read the temperature sensor and call `aggregate_sensor_data()`
///  Return `Ok()` if successful, else return `Err()` with `MynewtError` error code inside.
pub fn start_sensor_listener() -> MynewtResult<()>  {  //  Returns an error code upon error.
 80060d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060d8:	b0bd      	sub	sp, #244	; 0xf4
    console::print("Rust TMP poll\n");
 80060da:	f246 10d0 	movw	r0, #25040	; 0x61d0
 80060de:	f6c0 0001 	movt	r0, #2049	; 0x801
 80060e2:	210e      	movs	r1, #14
 80060e4:	f7fe fc50 	bl	8004988 <_ZN6mynewt3sys7console5print17ha0601e49e4927bc4E>
 80060e8:	e7ff      	b.n	80060ea <_ZN3app10app_sensor21start_sensor_listener17h188554d40be3fd49E+0x14>

    //  Fetch the sensor by name.
    let sensor = sensor_mgr::find_bydevname(&SENSOR_DEVICE)
 80060ea:	f246 11c4 	movw	r1, #25028	; 0x61c4
 80060ee:	f6c0 0101 	movt	r1, #2049	; 0x801
 80060f2:	a80d      	add	r0, sp, #52	; 0x34
 80060f4:	f001 fa04 	bl	8007500 <_ZN6mynewt2hw10sensor_mgr14find_bydevname17h06b2c476f1bcc849E>
 80060f8:	e7ff      	b.n	80060fa <_ZN3app10app_sensor21start_sensor_listener17h188554d40be3fd49E+0x24>
 80060fa:	a80d      	add	r0, sp, #52	; 0x34
 80060fc:	f001 fa1e 	bl	800753c <_ZN99_$LT$mynewt..hw..sensor_mgr..SensorsByDevname$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdf9b4b1bcd01faa9E>
 8006100:	900a      	str	r0, [sp, #40]	; 0x28
 8006102:	9109      	str	r1, [sp, #36]	; 0x24
 8006104:	e7ff      	b.n	8006106 <_ZN3app10app_sensor21start_sensor_listener17h188554d40be3fd49E+0x30>
 8006106:	f246 12de 	movw	r2, #25054	; 0x61de
 800610a:	f6c0 0201 	movt	r2, #2049	; 0x801
 800610e:	2306      	movs	r3, #6
 8006110:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006112:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006114:	f000 fba9 	bl	800686a <_ZN4core6option15Option$LT$T$GT$6expect17hbf2467b5c00077abE>
 8006118:	900c      	str	r0, [sp, #48]	; 0x30
 800611a:	e7ff      	b.n	800611c <_ZN3app10app_sensor21start_sensor_listener17h188554d40be3fd49E+0x46>
        .next()             //  Fetch the first sensor that matches
        .expect("no TMP");  //  Stop if no sensor found

    //  At power on, we ask Mynewt to poll our temperature sensor every 19 seconds.
    sensor::set_poll_rate_ms(&SENSOR_DEVICE, SENSOR_POLL_TIME) ? ;
 800611c:	f246 10c4 	movw	r0, #25028	; 0x61c4
 8006120:	f6c0 0001 	movt	r0, #2049	; 0x801
 8006124:	f644 2138 	movw	r1, #19000	; 0x4a38
 8006128:	f001 fa86 	bl	8007638 <_ZN6mynewt2hw6sensor8bindings16set_poll_rate_ms17h1b333cb0fcc2972cE>
 800612c:	9008      	str	r0, [sp, #32]
 800612e:	e7ff      	b.n	8006130 <_ZN3app10app_sensor21start_sensor_listener17h188554d40be3fd49E+0x5a>
 8006130:	9808      	ldr	r0, [sp, #32]
 8006132:	f7ff ffc9 	bl	80060c8 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h5477961aa483feaaE>
 8006136:	9011      	str	r0, [sp, #68]	; 0x44
 8006138:	e7ff      	b.n	800613a <_ZN3app10app_sensor21start_sensor_listener17h188554d40be3fd49E+0x64>
 800613a:	9811      	ldr	r0, [sp, #68]	; 0x44
 800613c:	1e41      	subs	r1, r0, #1
 800613e:	bf18      	it	ne
 8006140:	2101      	movne	r1, #1
 8006142:	2801      	cmp	r0, #1
 8006144:	9107      	str	r1, [sp, #28]
 8006146:	d016      	beq.n	8006176 <_ZN3app10app_sensor21start_sensor_listener17h188554d40be3fd49E+0xa0>
 8006148:	e7ff      	b.n	800614a <_ZN3app10app_sensor21start_sensor_listener17h188554d40be3fd49E+0x74>
 800614a:	9807      	ldr	r0, [sp, #28]
 800614c:	2801      	cmp	r0, #1
 800614e:	d001      	beq.n	8006154 <_ZN3app10app_sensor21start_sensor_listener17h188554d40be3fd49E+0x7e>
 8006150:	e7ff      	b.n	8006152 <_ZN3app10app_sensor21start_sensor_listener17h188554d40be3fd49E+0x7c>
    //  Register the Listener Function to be called with the polled sensor data.
    sensor::register_listener(sensor, listener) ? ;  //  `?` means in case of error, return error now.

    //  Return `Ok()` to indicate success.  This line should not end with a semicolon (;).
    Ok(())
 8006152:	defe      	udf	#254	; 0xfe
    sensor::set_poll_rate_ms(&SENSOR_DEVICE, SENSOR_POLL_TIME) ? ;
 8006154:	9811      	ldr	r0, [sp, #68]	; 0x44
 8006156:	9012      	str	r0, [sp, #72]	; 0x48
 8006158:	9812      	ldr	r0, [sp, #72]	; 0x48
 800615a:	f000 fbb1 	bl	80068c0 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17he9bf930fef93cf18E>
 800615e:	9006      	str	r0, [sp, #24]
 8006160:	e7ff      	b.n	8006162 <_ZN3app10app_sensor21start_sensor_listener17h188554d40be3fd49E+0x8c>
 8006162:	9806      	ldr	r0, [sp, #24]
 8006164:	f7ff ff76 	bl	8006054 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h411c740de4b3d5baE>
 8006168:	900b      	str	r0, [sp, #44]	; 0x2c
 800616a:	e7ff      	b.n	800616c <_ZN3app10app_sensor21start_sensor_listener17h188554d40be3fd49E+0x96>
 800616c:	e002      	b.n	8006174 <_ZN3app10app_sensor21start_sensor_listener17h188554d40be3fd49E+0x9e>
 800616e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006170:	b03d      	add	sp, #244	; 0xf4
 8006172:	bdf0      	pop	{r4, r5, r6, r7, pc}
    sensor::set_poll_rate_ms(&SENSOR_DEVICE, SENSOR_POLL_TIME) ? ;
 8006174:	e7fb      	b.n	800616e <_ZN3app10app_sensor21start_sensor_listener17h188554d40be3fd49E+0x98>
    let listener = sensor::new_sensor_listener(
 8006176:	f246 204d 	movw	r0, #25165	; 0x624d
 800617a:	f6c0 0000 	movt	r0, #2048	; 0x800
 800617e:	4669      	mov	r1, sp
 8006180:	6008      	str	r0, [r1, #0]
 8006182:	f246 11e8 	movw	r1, #25064	; 0x61e8
 8006186:	f6c0 0101 	movt	r1, #2049	; 0x801
 800618a:	a822      	add	r0, sp, #136	; 0x88
 800618c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8006190:	2300      	movs	r3, #0
 8006192:	f001 ff13 	bl	8007fbc <_ZN6mynewt2hw6sensor19new_sensor_listener17h2b99bb3fa912f4a2E>
 8006196:	e7ff      	b.n	8006198 <_ZN3app10app_sensor21start_sensor_listener17h188554d40be3fd49E+0xc2>
 8006198:	a81a      	add	r0, sp, #104	; 0x68
 800619a:	a922      	add	r1, sp, #136	; 0x88
 800619c:	f7ff ff63 	bl	8006066 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h094b73547dab2142E>
 80061a0:	e7ff      	b.n	80061a2 <_ZN3app10app_sensor21start_sensor_listener17h188554d40be3fd49E+0xcc>
    ) ? ;
 80061a2:	981a      	ldr	r0, [sp, #104]	; 0x68
 80061a4:	2800      	cmp	r0, #0
 80061a6:	9005      	str	r0, [sp, #20]
 80061a8:	d012      	beq.n	80061d0 <_ZN3app10app_sensor21start_sensor_listener17h188554d40be3fd49E+0xfa>
 80061aa:	e7ff      	b.n	80061ac <_ZN3app10app_sensor21start_sensor_listener17h188554d40be3fd49E+0xd6>
 80061ac:	9805      	ldr	r0, [sp, #20]
 80061ae:	2801      	cmp	r0, #1
 80061b0:	d1cf      	bne.n	8006152 <_ZN3app10app_sensor21start_sensor_listener17h188554d40be3fd49E+0x7c>
 80061b2:	e7ff      	b.n	80061b4 <_ZN3app10app_sensor21start_sensor_listener17h188554d40be3fd49E+0xde>
 80061b4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80061b6:	902b      	str	r0, [sp, #172]	; 0xac
 80061b8:	982b      	ldr	r0, [sp, #172]	; 0xac
 80061ba:	f000 fb81 	bl	80068c0 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17he9bf930fef93cf18E>
 80061be:	9004      	str	r0, [sp, #16]
 80061c0:	e7ff      	b.n	80061c2 <_ZN3app10app_sensor21start_sensor_listener17h188554d40be3fd49E+0xec>
 80061c2:	9804      	ldr	r0, [sp, #16]
 80061c4:	f7ff ff46 	bl	8006054 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h411c740de4b3d5baE>
 80061c8:	900b      	str	r0, [sp, #44]	; 0x2c
 80061ca:	e7ff      	b.n	80061cc <_ZN3app10app_sensor21start_sensor_listener17h188554d40be3fd49E+0xf6>
 80061cc:	e7ff      	b.n	80061ce <_ZN3app10app_sensor21start_sensor_listener17h188554d40be3fd49E+0xf8>
 80061ce:	e7d1      	b.n	8006174 <_ZN3app10app_sensor21start_sensor_listener17h188554d40be3fd49E+0x9e>
 80061d0:	a81a      	add	r0, sp, #104	; 0x68
    let listener = sensor::new_sensor_listener(
 80061d2:	3008      	adds	r0, #8
 80061d4:	a92c      	add	r1, sp, #176	; 0xb0
 80061d6:	460a      	mov	r2, r1
 80061d8:	e890 5078 	ldmia.w	r0, {r3, r4, r5, r6, ip, lr}
 80061dc:	e882 5078 	stmia.w	r2, {r3, r4, r5, r6, ip, lr}
 80061e0:	a814      	add	r0, sp, #80	; 0x50
 80061e2:	4602      	mov	r2, r0
 80061e4:	e891 5078 	ldmia.w	r1, {r3, r4, r5, r6, ip, lr}
 80061e8:	e882 5078 	stmia.w	r2, {r3, r4, r5, r6, ip, lr}
    sensor::register_listener(sensor, listener) ? ;  //  `?` means in case of error, return error now.
 80061ec:	990c      	ldr	r1, [sp, #48]	; 0x30
 80061ee:	aa34      	add	r2, sp, #208	; 0xd0
 80061f0:	4613      	mov	r3, r2
 80061f2:	e890 50f0 	ldmia.w	r0, {r4, r5, r6, r7, ip, lr}
 80061f6:	e883 50f0 	stmia.w	r3, {r4, r5, r6, r7, ip, lr}
 80061fa:	4608      	mov	r0, r1
 80061fc:	4611      	mov	r1, r2
 80061fe:	f001 fd82 	bl	8007d06 <_ZN6mynewt2hw6sensor17register_listener17hc302d184d2da34dbE>
 8006202:	9003      	str	r0, [sp, #12]
 8006204:	e7ff      	b.n	8006206 <_ZN3app10app_sensor21start_sensor_listener17h188554d40be3fd49E+0x130>
 8006206:	9803      	ldr	r0, [sp, #12]
 8006208:	f7ff ff5e 	bl	80060c8 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h5477961aa483feaaE>
 800620c:	9033      	str	r0, [sp, #204]	; 0xcc
 800620e:	e7ff      	b.n	8006210 <_ZN3app10app_sensor21start_sensor_listener17h188554d40be3fd49E+0x13a>
 8006210:	9833      	ldr	r0, [sp, #204]	; 0xcc
 8006212:	1e41      	subs	r1, r0, #1
 8006214:	bf18      	it	ne
 8006216:	2101      	movne	r1, #1
 8006218:	2801      	cmp	r0, #1
 800621a:	9102      	str	r1, [sp, #8]
 800621c:	d011      	beq.n	8006242 <_ZN3app10app_sensor21start_sensor_listener17h188554d40be3fd49E+0x16c>
 800621e:	e7ff      	b.n	8006220 <_ZN3app10app_sensor21start_sensor_listener17h188554d40be3fd49E+0x14a>
 8006220:	9802      	ldr	r0, [sp, #8]
 8006222:	2801      	cmp	r0, #1
 8006224:	d195      	bne.n	8006152 <_ZN3app10app_sensor21start_sensor_listener17h188554d40be3fd49E+0x7c>
 8006226:	e7ff      	b.n	8006228 <_ZN3app10app_sensor21start_sensor_listener17h188554d40be3fd49E+0x152>
 8006228:	9833      	ldr	r0, [sp, #204]	; 0xcc
 800622a:	903a      	str	r0, [sp, #232]	; 0xe8
 800622c:	983a      	ldr	r0, [sp, #232]	; 0xe8
 800622e:	f000 fb47 	bl	80068c0 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17he9bf930fef93cf18E>
 8006232:	9001      	str	r0, [sp, #4]
 8006234:	e7ff      	b.n	8006236 <_ZN3app10app_sensor21start_sensor_listener17h188554d40be3fd49E+0x160>
 8006236:	9801      	ldr	r0, [sp, #4]
 8006238:	f7ff ff0c 	bl	8006054 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h411c740de4b3d5baE>
 800623c:	900b      	str	r0, [sp, #44]	; 0x2c
 800623e:	e7ff      	b.n	8006240 <_ZN3app10app_sensor21start_sensor_listener17h188554d40be3fd49E+0x16a>
 8006240:	e7c5      	b.n	80061ce <_ZN3app10app_sensor21start_sensor_listener17h188554d40be3fd49E+0xf8>
 8006242:	2000      	movs	r0, #0
    Ok(())
 8006244:	900b      	str	r0, [sp, #44]	; 0x2c
 8006246:	2001      	movs	r0, #1
 8006248:	900b      	str	r0, [sp, #44]	; 0x2c
 800624a:	e790      	b.n	800616e <_ZN3app10app_sensor21start_sensor_listener17h188554d40be3fd49E+0x98>

0800624c <_ZN3app11app_network21aggregate_sensor_data17hb5d34e268bdd71d1E>:
};
use mynewt_macros::strn;        //  Import Mynewt procedural macros

///  Aggregate the sensor value with other sensor data before transmitting to server.
///  If the sensor value is a GPS geolocation, we remember it and attach it to other sensor data for transmission.
pub fn aggregate_sensor_data(sensor_value: &SensorValue) -> MynewtResult<()>  {  //  Returns an error code upon error.
 800624c:	b5b0      	push	{r4, r5, r7, lr}
 800624e:	b0a8      	sub	sp, #160	; 0xa0
 8006250:	4601      	mov	r1, r0
 8006252:	9002      	str	r0, [sp, #8]
    if let SensorValueType::Geolocation {..} = sensor_value.value {
 8006254:	9802      	ldr	r0, [sp, #8]
 8006256:	6800      	ldr	r0, [r0, #0]
 8006258:	2803      	cmp	r0, #3
 800625a:	9101      	str	r1, [sp, #4]
 800625c:	d11c      	bne.n	8006298 <_ZN3app11app_network21aggregate_sensor_data17hb5d34e268bdd71d1E+0x4c>
 800625e:	e7ff      	b.n	8006260 <_ZN3app11app_network21aggregate_sensor_data17hb5d34e268bdd71d1E+0x14>
        //  If this is a geolocation, save the geolocation for later transmission.
        unsafe { CURRENT_GEOLOCATION = sensor_value.value };  //  Current geolocation is unsafe because it's a mutable static
 8006260:	9802      	ldr	r0, [sp, #8]
 8006262:	a904      	add	r1, sp, #16
 8006264:	460a      	mov	r2, r1
 8006266:	e8b0 5018 	ldmia.w	r0!, {r3, r4, ip, lr}
 800626a:	e8a2 5018 	stmia.w	r2!, {r3, r4, ip, lr}
 800626e:	e890 5018 	ldmia.w	r0, {r3, r4, ip, lr}
 8006272:	e882 5018 	stmia.w	r2, {r3, r4, ip, lr}
 8006276:	f240 3068 	movw	r0, #872	; 0x368
 800627a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800627e:	e8b1 500c 	ldmia.w	r1!, {r2, r3, ip, lr}
 8006282:	e8a0 500c 	stmia.w	r0!, {r2, r3, ip, lr}
 8006286:	e891 500c 	ldmia.w	r1, {r2, r3, ip, lr}
 800628a:	e880 500c 	stmia.w	r0, {r2, r3, ip, lr}
 800628e:	2000      	movs	r0, #0
        Ok(())
 8006290:	9003      	str	r0, [sp, #12]
 8006292:	2001      	movs	r0, #1
 8006294:	9003      	str	r0, [sp, #12]
    if let SensorValueType::Geolocation {..} = sensor_value.value {
 8006296:	e02b      	b.n	80062f0 <_ZN3app11app_network21aggregate_sensor_data17hb5d34e268bdd71d1E+0xa4>
    } else {
        //  If this is temperature sensor data, attach the current geolocation to the sensor data for transmission.
        let transmit_value = SensorValue {
            geo: unsafe { CURRENT_GEOLOCATION },  //  Current geolocation is unsafe because it's a mutable static
 8006298:	f240 3068 	movw	r0, #872	; 0x368
 800629c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80062a0:	a920      	add	r1, sp, #128	; 0x80
 80062a2:	460a      	mov	r2, r1
 80062a4:	e8b0 5018 	ldmia.w	r0!, {r3, r4, ip, lr}
 80062a8:	e8a2 5018 	stmia.w	r2!, {r3, r4, ip, lr}
 80062ac:	e890 5018 	ldmia.w	r0, {r3, r4, ip, lr}
 80062b0:	e882 5018 	stmia.w	r2, {r3, r4, ip, lr}
        let transmit_value = SensorValue {
 80062b4:	9802      	ldr	r0, [sp, #8]
 80062b6:	6c00      	ldr	r0, [r0, #64]	; 0x40
 80062b8:	901e      	str	r0, [sp, #120]	; 0x78
 80062ba:	9802      	ldr	r0, [sp, #8]
 80062bc:	aa0e      	add	r2, sp, #56	; 0x38
 80062be:	4613      	mov	r3, r2
 80062c0:	e8b0 5030 	ldmia.w	r0!, {r4, r5, ip, lr}
 80062c4:	e8a3 5030 	stmia.w	r3!, {r4, r5, ip, lr}
 80062c8:	e890 5030 	ldmia.w	r0, {r4, r5, ip, lr}
 80062cc:	e883 5030 	stmia.w	r3, {r4, r5, ip, lr}
 80062d0:	f102 0020 	add.w	r0, r2, #32
 80062d4:	e8b1 5018 	ldmia.w	r1!, {r3, r4, ip, lr}
 80062d8:	e8a0 5018 	stmia.w	r0!, {r3, r4, ip, lr}
 80062dc:	e891 5018 	ldmia.w	r1, {r3, r4, ip, lr}
 80062e0:	e880 5018 	stmia.w	r0, {r3, r4, ip, lr}
            ..*sensor_value                       //  Copy the sensor name and value for transmission
        };
        //  Transmit sensor value with geolocation and return the result
        send_sensor_data(&transmit_value)
 80062e4:	4610      	mov	r0, r2
 80062e6:	f000 f806 	bl	80062f6 <_ZN3app11app_network16send_sensor_data17hb7b0df53949f361aE>
 80062ea:	9003      	str	r0, [sp, #12]
 80062ec:	e7ff      	b.n	80062ee <_ZN3app11app_network21aggregate_sensor_data17hb5d34e268bdd71d1E+0xa2>
    if let SensorValueType::Geolocation {..} = sensor_value.value {
 80062ee:	e7ff      	b.n	80062f0 <_ZN3app11app_network21aggregate_sensor_data17hb5d34e268bdd71d1E+0xa4>
    }
}
 80062f0:	9803      	ldr	r0, [sp, #12]
 80062f2:	b028      	add	sp, #160	; 0xa0
 80062f4:	bdb0      	pop	{r4, r5, r7, pc}

080062f6 <_ZN3app11app_network16send_sensor_data17hb7b0df53949f361aE>:
/// {"values":[
///   {"key":"t",      "value":1715, "geo": { "lat": ..., "long": ... }},
///   {"key":"device", "value":"0102030405060708090a0b0c0d0e0f10"}
/// ]}
/// ```
fn send_sensor_data(val: &SensorValue) -> MynewtResult<()>  {  //  Returns an error code upon error.
 80062f6:	b510      	push	{r4, lr}
 80062f8:	f5ad 7d2a 	sub.w	sp, sp, #680	; 0x2a8
 80062fc:	4601      	mov	r1, r0
 80062fe:	9029      	str	r0, [sp, #164]	; 0xa4
    console::print("Rust send_sensor_data\n");
 8006300:	f246 10f4 	movw	r0, #25076	; 0x61f4
 8006304:	f6c0 0001 	movt	r0, #2049	; 0x801
 8006308:	2216      	movs	r2, #22
 800630a:	9128      	str	r1, [sp, #160]	; 0xa0
 800630c:	4611      	mov	r1, r2
 800630e:	f7fe fb3b 	bl	8004988 <_ZN6mynewt3sys7console5print17ha0601e49e4927bc4E>
 8006312:	e7ff      	b.n	8006314 <_ZN3app11app_network16send_sensor_data17hb7b0df53949f361aE+0x1e>
 8006314:	a832      	add	r0, sp, #200	; 0xc8
    //  Get a randomly-generated device ID that changes each time we restart the device.
    let device_id = sensor_network::get_device_id() ? ;
 8006316:	f7fe fbf0 	bl	8004afa <_ZN6mynewt4libs14sensor_network13get_device_id17he689acf42fcaec72E>
 800631a:	e7ff      	b.n	800631c <_ZN3app11app_network16send_sensor_data17hb7b0df53949f361aE+0x26>
 800631c:	a82e      	add	r0, sp, #184	; 0xb8
 800631e:	a932      	add	r1, sp, #200	; 0xc8
 8006320:	f7ff feb1 	bl	8006086 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h2263e92fd7e9e0c7E>
 8006324:	e7ff      	b.n	8006326 <_ZN3app11app_network16send_sensor_data17hb7b0df53949f361aE+0x30>
 8006326:	982e      	ldr	r0, [sp, #184]	; 0xb8
 8006328:	2800      	cmp	r0, #0
 800632a:	9027      	str	r0, [sp, #156]	; 0x9c
 800632c:	d017      	beq.n	800635e <_ZN3app11app_network16send_sensor_data17hb7b0df53949f361aE+0x68>
 800632e:	e7ff      	b.n	8006330 <_ZN3app11app_network16send_sensor_data17hb7b0df53949f361aE+0x3a>
 8006330:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8006332:	2801      	cmp	r0, #1
 8006334:	d001      	beq.n	800633a <_ZN3app11app_network16send_sensor_data17hb7b0df53949f361aE+0x44>
 8006336:	e7ff      	b.n	8006338 <_ZN3app11app_network16send_sensor_data17hb7b0df53949f361aE+0x42>
    console::print("NET view your sensor at \nhttps://blue-pill-geolocate.appspot.com?device=");
    console::print_strn(&device_id); console::print("\n");

    //  The CoAP Background Task will transmit the message in the background.
    Ok(())
}
 8006338:	defe      	udf	#254	; 0xfe
    let device_id = sensor_network::get_device_id() ? ;
 800633a:	982f      	ldr	r0, [sp, #188]	; 0xbc
 800633c:	9036      	str	r0, [sp, #216]	; 0xd8
 800633e:	9836      	ldr	r0, [sp, #216]	; 0xd8
 8006340:	f000 fabe 	bl	80068c0 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17he9bf930fef93cf18E>
 8006344:	9026      	str	r0, [sp, #152]	; 0x98
 8006346:	e7ff      	b.n	8006348 <_ZN3app11app_network16send_sensor_data17hb7b0df53949f361aE+0x52>
 8006348:	9826      	ldr	r0, [sp, #152]	; 0x98
 800634a:	f7ff fe83 	bl	8006054 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h411c740de4b3d5baE>
 800634e:	902a      	str	r0, [sp, #168]	; 0xa8
 8006350:	e7ff      	b.n	8006352 <_ZN3app11app_network16send_sensor_data17hb7b0df53949f361aE+0x5c>
 8006352:	e003      	b.n	800635c <_ZN3app11app_network16send_sensor_data17hb7b0df53949f361aE+0x66>
}
 8006354:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8006356:	f50d 7d2a 	add.w	sp, sp, #680	; 0x2a8
 800635a:	bd10      	pop	{r4, pc}
    let device_id = sensor_network::get_device_id() ? ;
 800635c:	e7fa      	b.n	8006354 <_ZN3app11app_network16send_sensor_data17hb7b0df53949f361aE+0x5e>
 800635e:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8006360:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8006362:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8006364:	9239      	str	r2, [sp, #228]	; 0xe4
 8006366:	9138      	str	r1, [sp, #224]	; 0xe0
 8006368:	9037      	str	r0, [sp, #220]	; 0xdc
 800636a:	9837      	ldr	r0, [sp, #220]	; 0xdc
 800636c:	9938      	ldr	r1, [sp, #224]	; 0xe0
 800636e:	9a39      	ldr	r2, [sp, #228]	; 0xe4
 8006370:	922d      	str	r2, [sp, #180]	; 0xb4
 8006372:	912c      	str	r1, [sp, #176]	; 0xb0
 8006374:	902b      	str	r0, [sp, #172]	; 0xac
    let rc = sensor_network::init_server_post( strn!(()) ) ? ;  //  `strn!(())` means use default CoAP URI in `syscfg.yml`
 8006376:	f246 210a 	movw	r1, #25098	; 0x620a
 800637a:	f6c0 0101 	movt	r1, #2049	; 0x801
 800637e:	a83f      	add	r0, sp, #252	; 0xfc
 8006380:	2201      	movs	r2, #1
 8006382:	f7fe f86a 	bl	800445a <_ZN6mynewt4Strn3new17h7c61c05e22ecd5faE>
 8006386:	e7ff      	b.n	8006388 <_ZN3app11app_network16send_sensor_data17hb7b0df53949f361aE+0x92>
 8006388:	a83d      	add	r0, sp, #244	; 0xf4
 800638a:	a93f      	add	r1, sp, #252	; 0xfc
 800638c:	f7fe fb72 	bl	8004a74 <_ZN6mynewt4libs14sensor_network16init_server_post17hbeda0b43632f58fbE>
 8006390:	e7ff      	b.n	8006392 <_ZN3app11app_network16send_sensor_data17hb7b0df53949f361aE+0x9c>
 8006392:	a83b      	add	r0, sp, #236	; 0xec
 8006394:	a93d      	add	r1, sp, #244	; 0xf4
 8006396:	f7ff fe8a 	bl	80060ae <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h38cdae572661f6a9E>
 800639a:	e7ff      	b.n	800639c <_ZN3app11app_network16send_sensor_data17hb7b0df53949f361aE+0xa6>
 800639c:	f89d 00ec 	ldrb.w	r0, [sp, #236]	; 0xec
 80063a0:	07c1      	lsls	r1, r0, #31
 80063a2:	2900      	cmp	r1, #0
 80063a4:	9025      	str	r0, [sp, #148]	; 0x94
 80063a6:	d012      	beq.n	80063ce <_ZN3app11app_network16send_sensor_data17hb7b0df53949f361aE+0xd8>
 80063a8:	e7ff      	b.n	80063aa <_ZN3app11app_network16send_sensor_data17hb7b0df53949f361aE+0xb4>
 80063aa:	9825      	ldr	r0, [sp, #148]	; 0x94
 80063ac:	2801      	cmp	r0, #1
 80063ae:	d1c3      	bne.n	8006338 <_ZN3app11app_network16send_sensor_data17hb7b0df53949f361aE+0x42>
 80063b0:	e7ff      	b.n	80063b2 <_ZN3app11app_network16send_sensor_data17hb7b0df53949f361aE+0xbc>
 80063b2:	983c      	ldr	r0, [sp, #240]	; 0xf0
 80063b4:	9042      	str	r0, [sp, #264]	; 0x108
 80063b6:	9842      	ldr	r0, [sp, #264]	; 0x108
 80063b8:	f000 fa82 	bl	80068c0 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17he9bf930fef93cf18E>
 80063bc:	9024      	str	r0, [sp, #144]	; 0x90
 80063be:	e7ff      	b.n	80063c0 <_ZN3app11app_network16send_sensor_data17hb7b0df53949f361aE+0xca>
 80063c0:	9824      	ldr	r0, [sp, #144]	; 0x90
 80063c2:	f7ff fe47 	bl	8006054 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h411c740de4b3d5baE>
 80063c6:	902a      	str	r0, [sp, #168]	; 0xa8
 80063c8:	e7ff      	b.n	80063ca <_ZN3app11app_network16send_sensor_data17hb7b0df53949f361aE+0xd4>
 80063ca:	e7ff      	b.n	80063cc <_ZN3app11app_network16send_sensor_data17hb7b0df53949f361aE+0xd6>
 80063cc:	e7c6      	b.n	800635c <_ZN3app11app_network16send_sensor_data17hb7b0df53949f361aE+0x66>
 80063ce:	f89d 00ed 	ldrb.w	r0, [sp, #237]	; 0xed
 80063d2:	f88d 010f 	strb.w	r0, [sp, #271]	; 0x10f
 80063d6:	f89d 010f 	ldrb.w	r0, [sp, #271]	; 0x10f
 80063da:	f88d 00eb 	strb.w	r0, [sp, #235]	; 0xeb
    if !rc { return Err(MynewtError::SYS_EAGAIN); }
 80063de:	f89d 00eb 	ldrb.w	r0, [sp, #235]	; 0xeb
 80063e2:	07c0      	lsls	r0, r0, #31
 80063e4:	2800      	cmp	r0, #0
 80063e6:	d106      	bne.n	80063f6 <_ZN3app11app_network16send_sensor_data17hb7b0df53949f361aE+0x100>
 80063e8:	e7ff      	b.n	80063ea <_ZN3app11app_network16send_sensor_data17hb7b0df53949f361aE+0xf4>
 80063ea:	f06f 0005 	mvn.w	r0, #5
 80063ee:	9044      	str	r0, [sp, #272]	; 0x110
 80063f0:	9844      	ldr	r0, [sp, #272]	; 0x110
 80063f2:	902a      	str	r0, [sp, #168]	; 0xa8
 80063f4:	e7ea      	b.n	80063cc <_ZN3app11app_network16send_sensor_data17hb7b0df53949f361aE+0xd6>
 80063f6:	a848      	add	r0, sp, #288	; 0x120
 80063f8:	2132      	movs	r1, #50	; 0x32
    let _payload = coap!( @json {        
 80063fa:	f7fe fb59 	bl	8004ab0 <_ZN6mynewt4libs14sensor_network12prepare_post17he077c30fc9d88d28E>
 80063fe:	e7ff      	b.n	8006400 <_ZN3app11app_network16send_sensor_data17hb7b0df53949f361aE+0x10a>
 8006400:	a846      	add	r0, sp, #280	; 0x118
 8006402:	a948      	add	r1, sp, #288	; 0x120
 8006404:	f7ff fe53 	bl	80060ae <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h38cdae572661f6a9E>
 8006408:	e7ff      	b.n	800640a <_ZN3app11app_network16send_sensor_data17hb7b0df53949f361aE+0x114>
 800640a:	f89d 0118 	ldrb.w	r0, [sp, #280]	; 0x118
 800640e:	07c1      	lsls	r1, r0, #31
 8006410:	2900      	cmp	r1, #0
 8006412:	9023      	str	r0, [sp, #140]	; 0x8c
 8006414:	d013      	beq.n	800643e <_ZN3app11app_network16send_sensor_data17hb7b0df53949f361aE+0x148>
 8006416:	e7ff      	b.n	8006418 <_ZN3app11app_network16send_sensor_data17hb7b0df53949f361aE+0x122>
 8006418:	9823      	ldr	r0, [sp, #140]	; 0x8c
 800641a:	2801      	cmp	r0, #1
 800641c:	f47f af8c 	bne.w	8006338 <_ZN3app11app_network16send_sensor_data17hb7b0df53949f361aE+0x42>
 8006420:	e7ff      	b.n	8006422 <_ZN3app11app_network16send_sensor_data17hb7b0df53949f361aE+0x12c>
 8006422:	9847      	ldr	r0, [sp, #284]	; 0x11c
 8006424:	904a      	str	r0, [sp, #296]	; 0x128
 8006426:	984a      	ldr	r0, [sp, #296]	; 0x128
 8006428:	f000 fa4a 	bl	80068c0 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17he9bf930fef93cf18E>
 800642c:	9022      	str	r0, [sp, #136]	; 0x88
 800642e:	e7ff      	b.n	8006430 <_ZN3app11app_network16send_sensor_data17hb7b0df53949f361aE+0x13a>
 8006430:	9822      	ldr	r0, [sp, #136]	; 0x88
 8006432:	f7ff fe0f 	bl	8006054 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h411c740de4b3d5baE>
 8006436:	902a      	str	r0, [sp, #168]	; 0xa8
 8006438:	e7ff      	b.n	800643a <_ZN3app11app_network16send_sensor_data17hb7b0df53949f361aE+0x144>
 800643a:	e7ff      	b.n	800643c <_ZN3app11app_network16send_sensor_data17hb7b0df53949f361aE+0x146>
 800643c:	e7c6      	b.n	80063cc <_ZN3app11app_network16send_sensor_data17hb7b0df53949f361aE+0xd6>
 800643e:	f89d 0119 	ldrb.w	r0, [sp, #281]	; 0x119
 8006442:	f88d 012f 	strb.w	r0, [sp, #303]	; 0x12f
 8006446:	f004 fb19 	bl	800aa7c <json_rep_start_root_object>
 800644a:	e7ff      	b.n	800644c <_ZN3app11app_network16send_sensor_data17hb7b0df53949f361aE+0x156>
 800644c:	f246 200b 	movw	r0, #25099	; 0x620b
 8006450:	f6c0 0001 	movt	r0, #2049	; 0x801
 8006454:	904c      	str	r0, [sp, #304]	; 0x130
 8006456:	2007      	movs	r0, #7
 8006458:	904d      	str	r0, [sp, #308]	; 0x134
 800645a:	f240 3088 	movw	r0, #904	; 0x388
 800645e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8006462:	f000 ff92 	bl	800738a <_ZN6mynewt8encoding12coap_context11CoapContext11to_void_ptr17h69d954fe1672413fE>
 8006466:	9021      	str	r0, [sp, #132]	; 0x84
 8006468:	e7ff      	b.n	800646a <_ZN3app11app_network16send_sensor_data17hb7b0df53949f361aE+0x174>
 800646a:	984c      	ldr	r0, [sp, #304]	; 0x130
 800646c:	994d      	ldr	r1, [sp, #308]	; 0x134
 800646e:	9092      	str	r0, [sp, #584]	; 0x248
 8006470:	9193      	str	r1, [sp, #588]	; 0x24c
 8006472:	9892      	ldr	r0, [sp, #584]	; 0x248
 8006474:	9993      	ldr	r1, [sp, #588]	; 0x24c
 8006476:	9094      	str	r0, [sp, #592]	; 0x250
 8006478:	9195      	str	r1, [sp, #596]	; 0x254
 800647a:	9994      	ldr	r1, [sp, #592]	; 0x250
 800647c:	9a95      	ldr	r2, [sp, #596]	; 0x254
 800647e:	9120      	str	r1, [sp, #128]	; 0x80
 8006480:	921f      	str	r2, [sp, #124]	; 0x7c
 8006482:	e7ff      	b.n	8006484 <_ZN3app11app_network16send_sensor_data17hb7b0df53949f361aE+0x18e>
 8006484:	f240 3088 	movw	r0, #904	; 0x388
 8006488:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800648c:	9920      	ldr	r1, [sp, #128]	; 0x80
 800648e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8006490:	f000 fe08 	bl	80070a4 <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17h8c654d4708d2c2d0E>
 8006494:	901e      	str	r0, [sp, #120]	; 0x78
 8006496:	e7ff      	b.n	8006498 <_ZN3app11app_network16send_sensor_data17hb7b0df53949f361aE+0x1a2>
 8006498:	9821      	ldr	r0, [sp, #132]	; 0x84
 800649a:	991e      	ldr	r1, [sp, #120]	; 0x78
 800649c:	f008 fc44 	bl	800ed28 <json_helper_set_array>
 80064a0:	e7ff      	b.n	80064a2 <_ZN3app11app_network16send_sensor_data17hb7b0df53949f361aE+0x1ac>
 80064a2:	9829      	ldr	r0, [sp, #164]	; 0xa4
 80064a4:	3020      	adds	r0, #32
 80064a6:	a94e      	add	r1, sp, #312	; 0x138
 80064a8:	e8b0 500c 	ldmia.w	r0!, {r2, r3, ip, lr}
 80064ac:	e8a1 500c 	stmia.w	r1!, {r2, r3, ip, lr}
 80064b0:	e890 500c 	ldmia.w	r0, {r2, r3, ip, lr}
 80064b4:	e881 500c 	stmia.w	r1, {r2, r3, ip, lr}
 80064b8:	9829      	ldr	r0, [sp, #164]	; 0xa4
 80064ba:	6800      	ldr	r0, [r0, #0]
 80064bc:	2801      	cmp	r0, #1
 80064be:	f040 80e1 	bne.w	8006684 <_ZN3app11app_network16send_sensor_data17hb7b0df53949f361aE+0x38e>
 80064c2:	e7ff      	b.n	80064c4 <_ZN3app11app_network16send_sensor_data17hb7b0df53949f361aE+0x1ce>
 80064c4:	9829      	ldr	r0, [sp, #164]	; 0xa4
 80064c6:	6840      	ldr	r0, [r0, #4]
 80064c8:	9057      	str	r0, [sp, #348]	; 0x15c
 80064ca:	f246 2012 	movw	r0, #25106	; 0x6212
 80064ce:	f6c0 0001 	movt	r0, #2049	; 0x801
 80064d2:	9058      	str	r0, [sp, #352]	; 0x160
 80064d4:	200d      	movs	r0, #13
 80064d6:	9059      	str	r0, [sp, #356]	; 0x164
 80064d8:	9858      	ldr	r0, [sp, #352]	; 0x160
 80064da:	9959      	ldr	r1, [sp, #356]	; 0x164
 80064dc:	90a6      	str	r0, [sp, #664]	; 0x298
 80064de:	91a7      	str	r1, [sp, #668]	; 0x29c
 80064e0:	98a6      	ldr	r0, [sp, #664]	; 0x298
 80064e2:	99a7      	ldr	r1, [sp, #668]	; 0x29c
 80064e4:	90a8      	str	r0, [sp, #672]	; 0x2a0
 80064e6:	91a9      	str	r1, [sp, #676]	; 0x2a4
 80064e8:	99a8      	ldr	r1, [sp, #672]	; 0x2a0
 80064ea:	9aa9      	ldr	r2, [sp, #676]	; 0x2a4
 80064ec:	911d      	str	r1, [sp, #116]	; 0x74
 80064ee:	921c      	str	r2, [sp, #112]	; 0x70
 80064f0:	e7ff      	b.n	80064f2 <_ZN3app11app_network16send_sensor_data17hb7b0df53949f361aE+0x1fc>
 80064f2:	f240 3088 	movw	r0, #904	; 0x388
 80064f6:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80064fa:	991d      	ldr	r1, [sp, #116]	; 0x74
 80064fc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80064fe:	f000 fdd1 	bl	80070a4 <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17h8c654d4708d2c2d0E>
 8006502:	901b      	str	r0, [sp, #108]	; 0x6c
 8006504:	e7ff      	b.n	8006506 <_ZN3app11app_network16send_sensor_data17hb7b0df53949f361aE+0x210>
 8006506:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8006508:	f008 fc2e 	bl	800ed68 <json_helper_object_array_start_item>
 800650c:	e7ff      	b.n	800650e <_ZN3app11app_network16send_sensor_data17hb7b0df53949f361aE+0x218>
 800650e:	f246 201f 	movw	r0, #25119	; 0x621f
 8006512:	f6c0 0001 	movt	r0, #2049	; 0x801
 8006516:	2103      	movs	r1, #3
 8006518:	f000 ff40 	bl	800739c <_ZN75_$LT$str$u20$as$u20$mynewt..encoding..coap_context..ToBytesOptionalNull$GT$21to_bytes_optional_nul17hb05d971bf5bb80b5E>
 800651c:	901a      	str	r0, [sp, #104]	; 0x68
 800651e:	9119      	str	r1, [sp, #100]	; 0x64
 8006520:	e7ff      	b.n	8006522 <_ZN3app11app_network16send_sensor_data17hb7b0df53949f361aE+0x22c>
 8006522:	981a      	ldr	r0, [sp, #104]	; 0x68
 8006524:	905a      	str	r0, [sp, #360]	; 0x168
 8006526:	9919      	ldr	r1, [sp, #100]	; 0x64
 8006528:	915b      	str	r1, [sp, #364]	; 0x16c
 800652a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800652c:	6c10      	ldr	r0, [r2, #64]	; 0x40
 800652e:	f7fd ff57 	bl	80043e0 <_ZN84_$LT$mynewt..Strn$u20$as$u20$mynewt..encoding..coap_context..ToBytesOptionalNull$GT$21to_bytes_optional_nul17h130831040ce73c29E>
 8006532:	9018      	str	r0, [sp, #96]	; 0x60
 8006534:	9117      	str	r1, [sp, #92]	; 0x5c
 8006536:	e7ff      	b.n	8006538 <_ZN3app11app_network16send_sensor_data17hb7b0df53949f361aE+0x242>
 8006538:	9818      	ldr	r0, [sp, #96]	; 0x60
 800653a:	905c      	str	r0, [sp, #368]	; 0x170
 800653c:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800653e:	915d      	str	r1, [sp, #372]	; 0x174
 8006540:	f240 3088 	movw	r0, #904	; 0x388
 8006544:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8006548:	f000 ff1f 	bl	800738a <_ZN6mynewt8encoding12coap_context11CoapContext11to_void_ptr17h69d954fe1672413fE>
 800654c:	9016      	str	r0, [sp, #88]	; 0x58
 800654e:	e7ff      	b.n	8006550 <_ZN3app11app_network16send_sensor_data17hb7b0df53949f361aE+0x25a>
 8006550:	995a      	ldr	r1, [sp, #360]	; 0x168
 8006552:	9a5b      	ldr	r2, [sp, #364]	; 0x16c
 8006554:	f240 3088 	movw	r0, #904	; 0x388
 8006558:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800655c:	f000 fda2 	bl	80070a4 <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17h8c654d4708d2c2d0E>
 8006560:	9015      	str	r0, [sp, #84]	; 0x54
 8006562:	e7ff      	b.n	8006564 <_ZN3app11app_network16send_sensor_data17hb7b0df53949f361aE+0x26e>
 8006564:	995c      	ldr	r1, [sp, #368]	; 0x170
 8006566:	9a5d      	ldr	r2, [sp, #372]	; 0x174
 8006568:	f240 3088 	movw	r0, #904	; 0x388
 800656c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8006570:	f000 fe0d 	bl	800718e <_ZN6mynewt8encoding12coap_context11CoapContext13value_to_cstr17h159023eafb6861b2E>
 8006574:	9014      	str	r0, [sp, #80]	; 0x50
 8006576:	e7ff      	b.n	8006578 <_ZN3app11app_network16send_sensor_data17hb7b0df53949f361aE+0x282>
 8006578:	9816      	ldr	r0, [sp, #88]	; 0x58
 800657a:	9915      	ldr	r1, [sp, #84]	; 0x54
 800657c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800657e:	f008 fc3f 	bl	800ee00 <json_helper_set_text_string>
 8006582:	e7ff      	b.n	8006584 <_ZN3app11app_network16send_sensor_data17hb7b0df53949f361aE+0x28e>
 8006584:	f246 2022 	movw	r0, #25122	; 0x6222
 8006588:	f6c0 0001 	movt	r0, #2049	; 0x801
 800658c:	2105      	movs	r1, #5
 800658e:	f000 ff05 	bl	800739c <_ZN75_$LT$str$u20$as$u20$mynewt..encoding..coap_context..ToBytesOptionalNull$GT$21to_bytes_optional_nul17hb05d971bf5bb80b5E>
 8006592:	9013      	str	r0, [sp, #76]	; 0x4c
 8006594:	9112      	str	r1, [sp, #72]	; 0x48
 8006596:	e7ff      	b.n	8006598 <_ZN3app11app_network16send_sensor_data17hb7b0df53949f361aE+0x2a2>
 8006598:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800659a:	905e      	str	r0, [sp, #376]	; 0x178
 800659c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800659e:	915f      	str	r1, [sp, #380]	; 0x17c
 80065a0:	9a57      	ldr	r2, [sp, #348]	; 0x15c
 80065a2:	2300      	movs	r3, #0
 80065a4:	9361      	str	r3, [sp, #388]	; 0x184
 80065a6:	9260      	str	r2, [sp, #384]	; 0x180
 80065a8:	f240 3088 	movw	r0, #904	; 0x388
 80065ac:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80065b0:	f000 feeb 	bl	800738a <_ZN6mynewt8encoding12coap_context11CoapContext11to_void_ptr17h69d954fe1672413fE>
 80065b4:	9011      	str	r0, [sp, #68]	; 0x44
 80065b6:	e7ff      	b.n	80065b8 <_ZN3app11app_network16send_sensor_data17hb7b0df53949f361aE+0x2c2>
 80065b8:	995e      	ldr	r1, [sp, #376]	; 0x178
 80065ba:	9a5f      	ldr	r2, [sp, #380]	; 0x17c
 80065bc:	f240 3088 	movw	r0, #904	; 0x388
 80065c0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80065c4:	f000 fd6e 	bl	80070a4 <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17h8c654d4708d2c2d0E>
 80065c8:	9010      	str	r0, [sp, #64]	; 0x40
 80065ca:	e7ff      	b.n	80065cc <_ZN3app11app_network16send_sensor_data17hb7b0df53949f361aE+0x2d6>
 80065cc:	9a60      	ldr	r2, [sp, #384]	; 0x180
 80065ce:	9b61      	ldr	r3, [sp, #388]	; 0x184
 80065d0:	9811      	ldr	r0, [sp, #68]	; 0x44
 80065d2:	9910      	ldr	r1, [sp, #64]	; 0x40
 80065d4:	f008 fbe4 	bl	800eda0 <json_helper_set_int>
 80065d8:	e7ff      	b.n	80065da <_ZN3app11app_network16send_sensor_data17hb7b0df53949f361aE+0x2e4>
 80065da:	f246 11a4 	movw	r1, #24996	; 0x61a4
 80065de:	f6c0 0101 	movt	r1, #2049	; 0x801
 80065e2:	a863      	add	r0, sp, #396	; 0x18c
 80065e4:	2204      	movs	r2, #4
 80065e6:	f7fd ff38 	bl	800445a <_ZN6mynewt4Strn3new17h7c61c05e22ecd5faE>
 80065ea:	e7ff      	b.n	80065ec <_ZN3app11app_network16send_sensor_data17hb7b0df53949f361aE+0x2f6>
 80065ec:	f246 2127 	movw	r1, #25127	; 0x6227
 80065f0:	f6c0 0101 	movt	r1, #2049	; 0x801
 80065f4:	a866      	add	r0, sp, #408	; 0x198
 80065f6:	2204      	movs	r2, #4
 80065f8:	f7fd ff2f 	bl	800445a <_ZN6mynewt4Strn3new17h7c61c05e22ecd5faE>
 80065fc:	e7ff      	b.n	80065fe <_ZN3app11app_network16send_sensor_data17hb7b0df53949f361aE+0x308>
 80065fe:	f246 212f 	movw	r1, #25135	; 0x622f
 8006602:	f6c0 0101 	movt	r1, #2049	; 0x801
 8006606:	a869      	add	r0, sp, #420	; 0x1a4
 8006608:	2205      	movs	r2, #5
 800660a:	f7fd ff26 	bl	800445a <_ZN6mynewt4Strn3new17h7c61c05e22ecd5faE>
 800660e:	e7ff      	b.n	8006610 <_ZN3app11app_network16send_sensor_data17hb7b0df53949f361aE+0x31a>
 8006610:	a84e      	add	r0, sp, #312	; 0x138
 8006612:	a96c      	add	r1, sp, #432	; 0x1b0
 8006614:	460a      	mov	r2, r1
 8006616:	e8b0 5018 	ldmia.w	r0!, {r3, r4, ip, lr}
 800661a:	e8a2 5018 	stmia.w	r2!, {r3, r4, ip, lr}
 800661e:	e890 5018 	ldmia.w	r0, {r3, r4, ip, lr}
 8006622:	e882 5018 	stmia.w	r2, {r3, r4, ip, lr}
 8006626:	4668      	mov	r0, sp
 8006628:	6001      	str	r1, [r0, #0]
 800662a:	f240 3088 	movw	r0, #904	; 0x388
 800662e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8006632:	a963      	add	r1, sp, #396	; 0x18c
 8006634:	aa66      	add	r2, sp, #408	; 0x198
 8006636:	ab69      	add	r3, sp, #420	; 0x1a4
 8006638:	f000 fc21 	bl	8006e7e <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_geolocation17h2edab64b711d4dc6E>
 800663c:	e7ff      	b.n	800663e <_ZN3app11app_network16send_sensor_data17hb7b0df53949f361aE+0x348>
 800663e:	f246 2012 	movw	r0, #25106	; 0x6212
 8006642:	f6c0 0001 	movt	r0, #2049	; 0x801
 8006646:	9075      	str	r0, [sp, #468]	; 0x1d4
 8006648:	200d      	movs	r0, #13
 800664a:	9076      	str	r0, [sp, #472]	; 0x1d8
 800664c:	9875      	ldr	r0, [sp, #468]	; 0x1d4
 800664e:	9976      	ldr	r1, [sp, #472]	; 0x1d8
 8006650:	90a2      	str	r0, [sp, #648]	; 0x288
 8006652:	91a3      	str	r1, [sp, #652]	; 0x28c
 8006654:	98a2      	ldr	r0, [sp, #648]	; 0x288
 8006656:	99a3      	ldr	r1, [sp, #652]	; 0x28c
 8006658:	90a4      	str	r0, [sp, #656]	; 0x290
 800665a:	91a5      	str	r1, [sp, #660]	; 0x294
 800665c:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800665e:	9aa5      	ldr	r2, [sp, #660]	; 0x294
 8006660:	910f      	str	r1, [sp, #60]	; 0x3c
 8006662:	920e      	str	r2, [sp, #56]	; 0x38
 8006664:	e7ff      	b.n	8006666 <_ZN3app11app_network16send_sensor_data17hb7b0df53949f361aE+0x370>
 8006666:	f240 3088 	movw	r0, #904	; 0x388
 800666a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800666e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006670:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006672:	f000 fd17 	bl	80070a4 <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17h8c654d4708d2c2d0E>
 8006676:	900d      	str	r0, [sp, #52]	; 0x34
 8006678:	e7ff      	b.n	800667a <_ZN3app11app_network16send_sensor_data17hb7b0df53949f361aE+0x384>
 800667a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800667c:	f008 fb82 	bl	800ed84 <json_helper_object_array_end_item>
 8006680:	e7ff      	b.n	8006682 <_ZN3app11app_network16send_sensor_data17hb7b0df53949f361aE+0x38c>
 8006682:	e00c      	b.n	800669e <_ZN3app11app_network16send_sensor_data17hb7b0df53949f361aE+0x3a8>
 8006684:	2001      	movs	r0, #1
 8006686:	f88d 01df 	strb.w	r0, [sp, #479]	; 0x1df
 800668a:	f89d 11df 	ldrb.w	r1, [sp, #479]	; 0x1df
 800668e:	f240 3088 	movw	r0, #904	; 0x388
 8006692:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8006696:	f000 fdf3 	bl	8007280 <_ZN6mynewt8encoding12coap_context11CoapContext4fail17h060d8a703f8f2c9bE>
 800669a:	e7ff      	b.n	800669c <_ZN3app11app_network16send_sensor_data17hb7b0df53949f361aE+0x3a6>
 800669c:	e7ff      	b.n	800669e <_ZN3app11app_network16send_sensor_data17hb7b0df53949f361aE+0x3a8>
 800669e:	f246 2012 	movw	r0, #25106	; 0x6212
 80066a2:	f6c0 0001 	movt	r0, #2049	; 0x801
 80066a6:	9078      	str	r0, [sp, #480]	; 0x1e0
 80066a8:	200d      	movs	r0, #13
 80066aa:	9079      	str	r0, [sp, #484]	; 0x1e4
 80066ac:	9878      	ldr	r0, [sp, #480]	; 0x1e0
 80066ae:	9979      	ldr	r1, [sp, #484]	; 0x1e4
 80066b0:	909e      	str	r0, [sp, #632]	; 0x278
 80066b2:	919f      	str	r1, [sp, #636]	; 0x27c
 80066b4:	989e      	ldr	r0, [sp, #632]	; 0x278
 80066b6:	999f      	ldr	r1, [sp, #636]	; 0x27c
 80066b8:	90a0      	str	r0, [sp, #640]	; 0x280
 80066ba:	91a1      	str	r1, [sp, #644]	; 0x284
 80066bc:	99a0      	ldr	r1, [sp, #640]	; 0x280
 80066be:	9aa1      	ldr	r2, [sp, #644]	; 0x284
 80066c0:	910c      	str	r1, [sp, #48]	; 0x30
 80066c2:	920b      	str	r2, [sp, #44]	; 0x2c
 80066c4:	e7ff      	b.n	80066c6 <_ZN3app11app_network16send_sensor_data17hb7b0df53949f361aE+0x3d0>
 80066c6:	f240 3088 	movw	r0, #904	; 0x388
 80066ca:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80066ce:	990c      	ldr	r1, [sp, #48]	; 0x30
 80066d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80066d2:	f000 fce7 	bl	80070a4 <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17h8c654d4708d2c2d0E>
 80066d6:	900a      	str	r0, [sp, #40]	; 0x28
 80066d8:	e7ff      	b.n	80066da <_ZN3app11app_network16send_sensor_data17hb7b0df53949f361aE+0x3e4>
 80066da:	980a      	ldr	r0, [sp, #40]	; 0x28
 80066dc:	f008 fb44 	bl	800ed68 <json_helper_object_array_start_item>
 80066e0:	e7ff      	b.n	80066e2 <_ZN3app11app_network16send_sensor_data17hb7b0df53949f361aE+0x3ec>
 80066e2:	f246 212b 	movw	r1, #25131	; 0x622b
 80066e6:	f6c0 0101 	movt	r1, #2049	; 0x801
 80066ea:	a87b      	add	r0, sp, #492	; 0x1ec
 80066ec:	2204      	movs	r2, #4
 80066ee:	f7fd feb4 	bl	800445a <_ZN6mynewt4Strn3new17h7c61c05e22ecd5faE>
 80066f2:	e7ff      	b.n	80066f4 <_ZN3app11app_network16send_sensor_data17hb7b0df53949f361aE+0x3fe>
 80066f4:	a87b      	add	r0, sp, #492	; 0x1ec
 80066f6:	907a      	str	r0, [sp, #488]	; 0x1e8
 80066f8:	f246 2134 	movw	r1, #25140	; 0x6234
 80066fc:	f6c0 0101 	movt	r1, #2049	; 0x801
 8006700:	a87f      	add	r0, sp, #508	; 0x1fc
 8006702:	2207      	movs	r2, #7
 8006704:	f7fd fea9 	bl	800445a <_ZN6mynewt4Strn3new17h7c61c05e22ecd5faE>
 8006708:	e7ff      	b.n	800670a <_ZN3app11app_network16send_sensor_data17hb7b0df53949f361aE+0x414>
 800670a:	a87f      	add	r0, sp, #508	; 0x1fc
 800670c:	907e      	str	r0, [sp, #504]	; 0x1f8
 800670e:	997a      	ldr	r1, [sp, #488]	; 0x1e8
 8006710:	9a7e      	ldr	r2, [sp, #504]	; 0x1f8
 8006712:	f240 3088 	movw	r0, #904	; 0x388
 8006716:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800671a:	f000 fc47 	bl	8006fac <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_text_string17h9e175e462a901a28E>
 800671e:	e7ff      	b.n	8006720 <_ZN3app11app_network16send_sensor_data17hb7b0df53949f361aE+0x42a>
 8006720:	f246 213b 	movw	r1, #25147	; 0x623b
 8006724:	f6c0 0101 	movt	r1, #2049	; 0x801
 8006728:	a883      	add	r0, sp, #524	; 0x20c
 800672a:	2206      	movs	r2, #6
 800672c:	f7fd fe95 	bl	800445a <_ZN6mynewt4Strn3new17h7c61c05e22ecd5faE>
 8006730:	e7ff      	b.n	8006732 <_ZN3app11app_network16send_sensor_data17hb7b0df53949f361aE+0x43c>
 8006732:	a883      	add	r0, sp, #524	; 0x20c
 8006734:	9082      	str	r0, [sp, #520]	; 0x208
 8006736:	a82b      	add	r0, sp, #172	; 0xac
        "device": &device_id,
 8006738:	9086      	str	r0, [sp, #536]	; 0x218
    let _payload = coap!( @json {        
 800673a:	9982      	ldr	r1, [sp, #520]	; 0x208
 800673c:	9a86      	ldr	r2, [sp, #536]	; 0x218
 800673e:	f240 3088 	movw	r0, #904	; 0x388
 8006742:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8006746:	f000 fc31 	bl	8006fac <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_text_string17h9e175e462a901a28E>
 800674a:	e7ff      	b.n	800674c <_ZN3app11app_network16send_sensor_data17hb7b0df53949f361aE+0x456>
 800674c:	f246 2012 	movw	r0, #25106	; 0x6212
 8006750:	f6c0 0001 	movt	r0, #2049	; 0x801
 8006754:	9087      	str	r0, [sp, #540]	; 0x21c
 8006756:	200d      	movs	r0, #13
 8006758:	9088      	str	r0, [sp, #544]	; 0x220
 800675a:	9887      	ldr	r0, [sp, #540]	; 0x21c
 800675c:	9988      	ldr	r1, [sp, #544]	; 0x220
 800675e:	909a      	str	r0, [sp, #616]	; 0x268
 8006760:	919b      	str	r1, [sp, #620]	; 0x26c
 8006762:	989a      	ldr	r0, [sp, #616]	; 0x268
 8006764:	999b      	ldr	r1, [sp, #620]	; 0x26c
 8006766:	909c      	str	r0, [sp, #624]	; 0x270
 8006768:	919d      	str	r1, [sp, #628]	; 0x274
 800676a:	999c      	ldr	r1, [sp, #624]	; 0x270
 800676c:	9a9d      	ldr	r2, [sp, #628]	; 0x274
 800676e:	9109      	str	r1, [sp, #36]	; 0x24
 8006770:	9208      	str	r2, [sp, #32]
 8006772:	e7ff      	b.n	8006774 <_ZN3app11app_network16send_sensor_data17hb7b0df53949f361aE+0x47e>
 8006774:	f240 3088 	movw	r0, #904	; 0x388
 8006778:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800677c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800677e:	9a08      	ldr	r2, [sp, #32]
 8006780:	f000 fc90 	bl	80070a4 <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17h8c654d4708d2c2d0E>
 8006784:	9007      	str	r0, [sp, #28]
 8006786:	e7ff      	b.n	8006788 <_ZN3app11app_network16send_sensor_data17hb7b0df53949f361aE+0x492>
 8006788:	9807      	ldr	r0, [sp, #28]
 800678a:	f008 fafb 	bl	800ed84 <json_helper_object_array_end_item>
 800678e:	e7ff      	b.n	8006790 <_ZN3app11app_network16send_sensor_data17hb7b0df53949f361aE+0x49a>
 8006790:	f246 200b 	movw	r0, #25099	; 0x620b
 8006794:	f6c0 0001 	movt	r0, #2049	; 0x801
 8006798:	9089      	str	r0, [sp, #548]	; 0x224
 800679a:	2007      	movs	r0, #7
 800679c:	908a      	str	r0, [sp, #552]	; 0x228
 800679e:	f240 3088 	movw	r0, #904	; 0x388
 80067a2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80067a6:	f000 fdf0 	bl	800738a <_ZN6mynewt8encoding12coap_context11CoapContext11to_void_ptr17h69d954fe1672413fE>
 80067aa:	9006      	str	r0, [sp, #24]
 80067ac:	e7ff      	b.n	80067ae <_ZN3app11app_network16send_sensor_data17hb7b0df53949f361aE+0x4b8>
 80067ae:	9889      	ldr	r0, [sp, #548]	; 0x224
 80067b0:	998a      	ldr	r1, [sp, #552]	; 0x228
 80067b2:	9096      	str	r0, [sp, #600]	; 0x258
 80067b4:	9197      	str	r1, [sp, #604]	; 0x25c
 80067b6:	9896      	ldr	r0, [sp, #600]	; 0x258
 80067b8:	9997      	ldr	r1, [sp, #604]	; 0x25c
 80067ba:	9098      	str	r0, [sp, #608]	; 0x260
 80067bc:	9199      	str	r1, [sp, #612]	; 0x264
 80067be:	9998      	ldr	r1, [sp, #608]	; 0x260
 80067c0:	9a99      	ldr	r2, [sp, #612]	; 0x264
 80067c2:	9105      	str	r1, [sp, #20]
 80067c4:	9204      	str	r2, [sp, #16]
 80067c6:	e7ff      	b.n	80067c8 <_ZN3app11app_network16send_sensor_data17hb7b0df53949f361aE+0x4d2>
 80067c8:	f240 3088 	movw	r0, #904	; 0x388
 80067cc:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80067d0:	9905      	ldr	r1, [sp, #20]
 80067d2:	9a04      	ldr	r2, [sp, #16]
 80067d4:	f000 fc66 	bl	80070a4 <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17h8c654d4708d2c2d0E>
 80067d8:	9003      	str	r0, [sp, #12]
 80067da:	e7ff      	b.n	80067dc <_ZN3app11app_network16send_sensor_data17hb7b0df53949f361aE+0x4e6>
 80067dc:	9806      	ldr	r0, [sp, #24]
 80067de:	9903      	ldr	r1, [sp, #12]
 80067e0:	f008 fab4 	bl	800ed4c <json_helper_close_array>
 80067e4:	e7ff      	b.n	80067e6 <_ZN3app11app_network16send_sensor_data17hb7b0df53949f361aE+0x4f0>
 80067e6:	f004 f957 	bl	800aa98 <json_rep_end_root_object>
 80067ea:	e7ff      	b.n	80067ec <_ZN3app11app_network16send_sensor_data17hb7b0df53949f361aE+0x4f6>
 80067ec:	a88d      	add	r0, sp, #564	; 0x234
    sensor_network::do_server_post() ? ;
 80067ee:	f7fe f974 	bl	8004ada <_ZN6mynewt4libs14sensor_network14do_server_post17h6c90b73e883479caE>
 80067f2:	e7ff      	b.n	80067f4 <_ZN3app11app_network16send_sensor_data17hb7b0df53949f361aE+0x4fe>
 80067f4:	a88b      	add	r0, sp, #556	; 0x22c
 80067f6:	a98d      	add	r1, sp, #564	; 0x234
 80067f8:	f7ff fc59 	bl	80060ae <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h38cdae572661f6a9E>
 80067fc:	e7ff      	b.n	80067fe <_ZN3app11app_network16send_sensor_data17hb7b0df53949f361aE+0x508>
 80067fe:	f89d 022c 	ldrb.w	r0, [sp, #556]	; 0x22c
 8006802:	07c1      	lsls	r1, r0, #31
 8006804:	2900      	cmp	r1, #0
 8006806:	9002      	str	r0, [sp, #8]
 8006808:	d012      	beq.n	8006830 <_ZN3app11app_network16send_sensor_data17hb7b0df53949f361aE+0x53a>
 800680a:	e7ff      	b.n	800680c <_ZN3app11app_network16send_sensor_data17hb7b0df53949f361aE+0x516>
 800680c:	9802      	ldr	r0, [sp, #8]
 800680e:	2801      	cmp	r0, #1
 8006810:	f47f ad92 	bne.w	8006338 <_ZN3app11app_network16send_sensor_data17hb7b0df53949f361aE+0x42>
 8006814:	e7ff      	b.n	8006816 <_ZN3app11app_network16send_sensor_data17hb7b0df53949f361aE+0x520>
 8006816:	988c      	ldr	r0, [sp, #560]	; 0x230
 8006818:	908f      	str	r0, [sp, #572]	; 0x23c
 800681a:	988f      	ldr	r0, [sp, #572]	; 0x23c
 800681c:	f000 f850 	bl	80068c0 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17he9bf930fef93cf18E>
 8006820:	9001      	str	r0, [sp, #4]
 8006822:	e7ff      	b.n	8006824 <_ZN3app11app_network16send_sensor_data17hb7b0df53949f361aE+0x52e>
 8006824:	9801      	ldr	r0, [sp, #4]
 8006826:	f7ff fc15 	bl	8006054 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h411c740de4b3d5baE>
 800682a:	902a      	str	r0, [sp, #168]	; 0xa8
 800682c:	e7ff      	b.n	800682e <_ZN3app11app_network16send_sensor_data17hb7b0df53949f361aE+0x538>
 800682e:	e605      	b.n	800643c <_ZN3app11app_network16send_sensor_data17hb7b0df53949f361aE+0x146>
 8006830:	f89d 022d 	ldrb.w	r0, [sp, #557]	; 0x22d
 8006834:	f88d 0243 	strb.w	r0, [sp, #579]	; 0x243
    console::print("NET view your sensor at \nhttps://blue-pill-geolocate.appspot.com?device=");
 8006838:	f246 2041 	movw	r0, #25153	; 0x6241
 800683c:	f6c0 0001 	movt	r0, #2049	; 0x801
 8006840:	2148      	movs	r1, #72	; 0x48
 8006842:	f7fe f8a1 	bl	8004988 <_ZN6mynewt3sys7console5print17ha0601e49e4927bc4E>
 8006846:	e7ff      	b.n	8006848 <_ZN3app11app_network16send_sensor_data17hb7b0df53949f361aE+0x552>
 8006848:	a82b      	add	r0, sp, #172	; 0xac
    console::print_strn(&device_id); console::print("\n");
 800684a:	f7fe f8b8 	bl	80049be <_ZN6mynewt3sys7console10print_strn17h7b7fdfa60aa992abE>
 800684e:	e7ff      	b.n	8006850 <_ZN3app11app_network16send_sensor_data17hb7b0df53949f361aE+0x55a>
 8006850:	f246 2089 	movw	r0, #25225	; 0x6289
 8006854:	f6c0 0001 	movt	r0, #2049	; 0x801
 8006858:	2101      	movs	r1, #1
 800685a:	f7fe f895 	bl	8004988 <_ZN6mynewt3sys7console5print17ha0601e49e4927bc4E>
 800685e:	e7ff      	b.n	8006860 <_ZN3app11app_network16send_sensor_data17hb7b0df53949f361aE+0x56a>
 8006860:	2000      	movs	r0, #0
    Ok(())
 8006862:	902a      	str	r0, [sp, #168]	; 0xa8
 8006864:	2001      	movs	r0, #1
 8006866:	902a      	str	r0, [sp, #168]	; 0xa8
}
 8006868:	e574      	b.n	8006354 <_ZN3app11app_network16send_sensor_data17hb7b0df53949f361aE+0x5e>

0800686a <_ZN4core6option15Option$LT$T$GT$6expect17hbf2467b5c00077abE>:
 800686a:	b5b0      	push	{r4, r5, r7, lr}
 800686c:	b08c      	sub	sp, #48	; 0x30
 800686e:	469c      	mov	ip, r3
 8006870:	4696      	mov	lr, r2
 8006872:	460c      	mov	r4, r1
 8006874:	4605      	mov	r5, r0
 8006876:	9007      	str	r0, [sp, #28]
 8006878:	9108      	str	r1, [sp, #32]
 800687a:	9209      	str	r2, [sp, #36]	; 0x24
 800687c:	930a      	str	r3, [sp, #40]	; 0x28
 800687e:	9807      	ldr	r0, [sp, #28]
 8006880:	2800      	cmp	r0, #0
 8006882:	f8cd c018 	str.w	ip, [sp, #24]
 8006886:	f8cd e014 	str.w	lr, [sp, #20]
 800688a:	9404      	str	r4, [sp, #16]
 800688c:	9503      	str	r5, [sp, #12]
 800688e:	9002      	str	r0, [sp, #8]
 8006890:	d00d      	beq.n	80068ae <_ZN4core6option15Option$LT$T$GT$6expect17hbf2467b5c00077abE+0x44>
 8006892:	e7ff      	b.n	8006894 <_ZN4core6option15Option$LT$T$GT$6expect17hbf2467b5c00077abE+0x2a>
 8006894:	9802      	ldr	r0, [sp, #8]
 8006896:	2801      	cmp	r0, #1
 8006898:	d001      	beq.n	800689e <_ZN4core6option15Option$LT$T$GT$6expect17hbf2467b5c00077abE+0x34>
 800689a:	e7ff      	b.n	800689c <_ZN4core6option15Option$LT$T$GT$6expect17hbf2467b5c00077abE+0x32>
 800689c:	defe      	udf	#254	; 0xfe
 800689e:	9808      	ldr	r0, [sp, #32]
 80068a0:	900b      	str	r0, [sp, #44]	; 0x2c
 80068a2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80068a4:	9907      	ldr	r1, [sp, #28]
 80068a6:	2901      	cmp	r1, #1
 80068a8:	9001      	str	r0, [sp, #4]
 80068aa:	d005      	beq.n	80068b8 <_ZN4core6option15Option$LT$T$GT$6expect17hbf2467b5c00077abE+0x4e>
 80068ac:	e007      	b.n	80068be <_ZN4core6option15Option$LT$T$GT$6expect17hbf2467b5c00077abE+0x54>
 80068ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 80068b0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80068b2:	f001 ff41 	bl	8008738 <_ZN4core6option13expect_failed17h278dd9976412b211E>
 80068b6:	defe      	udf	#254	; 0xfe
 80068b8:	9801      	ldr	r0, [sp, #4]
 80068ba:	b00c      	add	sp, #48	; 0x30
 80068bc:	bdb0      	pop	{r4, r5, r7, pc}
 80068be:	e7fb      	b.n	80068b8 <_ZN4core6option15Option$LT$T$GT$6expect17hbf2467b5c00077abE+0x4e>

080068c0 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17he9bf930fef93cf18E>:
 80068c0:	b082      	sub	sp, #8
 80068c2:	4601      	mov	r1, r0
 80068c4:	9001      	str	r0, [sp, #4]
 80068c6:	9801      	ldr	r0, [sp, #4]
 80068c8:	9100      	str	r1, [sp, #0]
 80068ca:	b002      	add	sp, #8
 80068cc:	4770      	bx	lr

080068ce <_ZN4core3ptr19swap_nonoverlapping17h4352ecd5b7860646E>:
 80068ce:	b580      	push	{r7, lr}
 80068d0:	b08a      	sub	sp, #40	; 0x28
 80068d2:	4613      	mov	r3, r2
 80068d4:	468c      	mov	ip, r1
 80068d6:	4686      	mov	lr, r0
 80068d8:	9004      	str	r0, [sp, #16]
 80068da:	9105      	str	r1, [sp, #20]
 80068dc:	9206      	str	r2, [sp, #24]
 80068de:	9804      	ldr	r0, [sp, #16]
 80068e0:	9007      	str	r0, [sp, #28]
 80068e2:	9805      	ldr	r0, [sp, #20]
 80068e4:	9008      	str	r0, [sp, #32]
 80068e6:	9303      	str	r3, [sp, #12]
 80068e8:	f8cd c008 	str.w	ip, [sp, #8]
 80068ec:	f8cd e004 	str.w	lr, [sp, #4]
 80068f0:	f000 f944 	bl	8006b7c <_ZN4core3mem7size_of17h52ebf8b7386d8e01E>
 80068f4:	9000      	str	r0, [sp, #0]
 80068f6:	e7ff      	b.n	80068f8 <_ZN4core3ptr19swap_nonoverlapping17h4352ecd5b7860646E+0x2a>
 80068f8:	9806      	ldr	r0, [sp, #24]
 80068fa:	9900      	ldr	r1, [sp, #0]
 80068fc:	4348      	muls	r0, r1
 80068fe:	9009      	str	r0, [sp, #36]	; 0x24
 8006900:	9807      	ldr	r0, [sp, #28]
 8006902:	9908      	ldr	r1, [sp, #32]
 8006904:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006906:	f000 f82d 	bl	8006964 <_ZN4core3ptr25swap_nonoverlapping_bytes17haea9561059c72327E>
 800690a:	e7ff      	b.n	800690c <_ZN4core3ptr19swap_nonoverlapping17h4352ecd5b7860646E+0x3e>
 800690c:	b00a      	add	sp, #40	; 0x28
 800690e:	bd80      	pop	{r7, pc}

08006910 <_ZN4core3ptr23swap_nonoverlapping_one17h9a4b435a29b2077eE>:
 8006910:	b580      	push	{r7, lr}
 8006912:	b086      	sub	sp, #24
 8006914:	460a      	mov	r2, r1
 8006916:	4603      	mov	r3, r0
 8006918:	9003      	str	r0, [sp, #12]
 800691a:	9104      	str	r1, [sp, #16]
 800691c:	9202      	str	r2, [sp, #8]
 800691e:	9301      	str	r3, [sp, #4]
 8006920:	f000 f92c 	bl	8006b7c <_ZN4core3mem7size_of17h52ebf8b7386d8e01E>
 8006924:	9000      	str	r0, [sp, #0]
 8006926:	e7ff      	b.n	8006928 <_ZN4core3ptr23swap_nonoverlapping_one17h9a4b435a29b2077eE+0x18>
 8006928:	9800      	ldr	r0, [sp, #0]
 800692a:	281f      	cmp	r0, #31
 800692c:	d811      	bhi.n	8006952 <_ZN4core3ptr23swap_nonoverlapping_one17h9a4b435a29b2077eE+0x42>
 800692e:	e7ff      	b.n	8006930 <_ZN4core3ptr23swap_nonoverlapping_one17h9a4b435a29b2077eE+0x20>
 8006930:	9803      	ldr	r0, [sp, #12]
 8006932:	f000 f8d1 	bl	8006ad8 <_ZN4core3ptr4read17h3dc0ab1aea7723f2E>
 8006936:	9005      	str	r0, [sp, #20]
 8006938:	e7ff      	b.n	800693a <_ZN4core3ptr23swap_nonoverlapping_one17h9a4b435a29b2077eE+0x2a>
 800693a:	9804      	ldr	r0, [sp, #16]
 800693c:	9903      	ldr	r1, [sp, #12]
 800693e:	2201      	movs	r2, #1
 8006940:	f000 f8f7 	bl	8006b32 <_ZN4core10intrinsics19copy_nonoverlapping17hd07f3a150618ce6bE>
 8006944:	e7ff      	b.n	8006946 <_ZN4core3ptr23swap_nonoverlapping_one17h9a4b435a29b2077eE+0x36>
 8006946:	9804      	ldr	r0, [sp, #16]
 8006948:	9905      	ldr	r1, [sp, #20]
 800694a:	f000 f8e6 	bl	8006b1a <_ZN4core3ptr5write17h4a809fc726334fe9E>
 800694e:	e7ff      	b.n	8006950 <_ZN4core3ptr23swap_nonoverlapping_one17h9a4b435a29b2077eE+0x40>
 8006950:	e006      	b.n	8006960 <_ZN4core3ptr23swap_nonoverlapping_one17h9a4b435a29b2077eE+0x50>
 8006952:	9803      	ldr	r0, [sp, #12]
 8006954:	9904      	ldr	r1, [sp, #16]
 8006956:	2201      	movs	r2, #1
 8006958:	f7ff ffb9 	bl	80068ce <_ZN4core3ptr19swap_nonoverlapping17h4352ecd5b7860646E>
 800695c:	e7ff      	b.n	800695e <_ZN4core3ptr23swap_nonoverlapping_one17h9a4b435a29b2077eE+0x4e>
 800695e:	e7ff      	b.n	8006960 <_ZN4core3ptr23swap_nonoverlapping_one17h9a4b435a29b2077eE+0x50>
 8006960:	b006      	add	sp, #24
 8006962:	bd80      	pop	{r7, pc}

08006964 <_ZN4core3ptr25swap_nonoverlapping_bytes17haea9561059c72327E>:
 8006964:	b5d0      	push	{r4, r6, r7, lr}
 8006966:	af02      	add	r7, sp, #8
 8006968:	b0ac      	sub	sp, #176	; 0xb0
 800696a:	466c      	mov	r4, sp
 800696c:	f36f 0404 	bfc	r4, #0, #5
 8006970:	46a5      	mov	sp, r4
 8006972:	4613      	mov	r3, r2
 8006974:	468c      	mov	ip, r1
 8006976:	4686      	mov	lr, r0
 8006978:	900b      	str	r0, [sp, #44]	; 0x2c
 800697a:	910c      	str	r1, [sp, #48]	; 0x30
 800697c:	920d      	str	r2, [sp, #52]	; 0x34
 800697e:	930a      	str	r3, [sp, #40]	; 0x28
 8006980:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 8006984:	f8cd e020 	str.w	lr, [sp, #32]
 8006988:	f000 f901 	bl	8006b8e <_ZN4core3mem7size_of17hcafb567766d3ad6aE>
 800698c:	900e      	str	r0, [sp, #56]	; 0x38
 800698e:	e7ff      	b.n	8006990 <_ZN4core3ptr25swap_nonoverlapping_bytes17haea9561059c72327E+0x2c>
 8006990:	2000      	movs	r0, #0
 8006992:	900f      	str	r0, [sp, #60]	; 0x3c
 8006994:	e7ff      	b.n	8006996 <_ZN4core3ptr25swap_nonoverlapping_bytes17haea9561059c72327E+0x32>
 8006996:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8006998:	990e      	ldr	r1, [sp, #56]	; 0x38
 800699a:	4408      	add	r0, r1
 800699c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800699e:	4288      	cmp	r0, r1
 80069a0:	d905      	bls.n	80069ae <_ZN4core3ptr25swap_nonoverlapping_bytes17haea9561059c72327E+0x4a>
 80069a2:	e7ff      	b.n	80069a4 <_ZN4core3ptr25swap_nonoverlapping_bytes17haea9561059c72327E+0x40>
 80069a4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80069a6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80069a8:	4288      	cmp	r0, r1
 80069aa:	d32d      	bcc.n	8006a08 <_ZN4core3ptr25swap_nonoverlapping_bytes17haea9561059c72327E+0xa4>
 80069ac:	e059      	b.n	8006a62 <_ZN4core3ptr25swap_nonoverlapping_bytes17haea9561059c72327E+0xfe>
 80069ae:	e7ff      	b.n	80069b0 <_ZN4core3ptr25swap_nonoverlapping_bytes17haea9561059c72327E+0x4c>
 80069b0:	a810      	add	r0, sp, #64	; 0x40
 80069b2:	9028      	str	r0, [sp, #160]	; 0xa0
 80069b4:	9828      	ldr	r0, [sp, #160]	; 0xa0
 80069b6:	9029      	str	r0, [sp, #164]	; 0xa4
 80069b8:	9829      	ldr	r0, [sp, #164]	; 0xa4
 80069ba:	9007      	str	r0, [sp, #28]
 80069bc:	e7ff      	b.n	80069be <_ZN4core3ptr25swap_nonoverlapping_bytes17haea9561059c72327E+0x5a>
 80069be:	9807      	ldr	r0, [sp, #28]
 80069c0:	9019      	str	r0, [sp, #100]	; 0x64
 80069c2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80069c4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80069c6:	f000 f850 	bl	8006a6a <_ZN4core3ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h444475af15b7177dE>
 80069ca:	901a      	str	r0, [sp, #104]	; 0x68
 80069cc:	e7ff      	b.n	80069ce <_ZN4core3ptr25swap_nonoverlapping_bytes17haea9561059c72327E+0x6a>
 80069ce:	980c      	ldr	r0, [sp, #48]	; 0x30
 80069d0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80069d2:	f000 f84a 	bl	8006a6a <_ZN4core3ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h444475af15b7177dE>
 80069d6:	901b      	str	r0, [sp, #108]	; 0x6c
 80069d8:	e7ff      	b.n	80069da <_ZN4core3ptr25swap_nonoverlapping_bytes17haea9561059c72327E+0x76>
 80069da:	981a      	ldr	r0, [sp, #104]	; 0x68
 80069dc:	9919      	ldr	r1, [sp, #100]	; 0x64
 80069de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80069e0:	f000 fa0c 	bl	8006dfc <_ZN4core10intrinsics19copy_nonoverlapping17h85f5927901ef278dE>
 80069e4:	e7ff      	b.n	80069e6 <_ZN4core3ptr25swap_nonoverlapping_bytes17haea9561059c72327E+0x82>
 80069e6:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80069e8:	991a      	ldr	r1, [sp, #104]	; 0x68
 80069ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80069ec:	f000 fa06 	bl	8006dfc <_ZN4core10intrinsics19copy_nonoverlapping17h85f5927901ef278dE>
 80069f0:	e7ff      	b.n	80069f2 <_ZN4core3ptr25swap_nonoverlapping_bytes17haea9561059c72327E+0x8e>
 80069f2:	9819      	ldr	r0, [sp, #100]	; 0x64
 80069f4:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80069f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80069f8:	f000 fa00 	bl	8006dfc <_ZN4core10intrinsics19copy_nonoverlapping17h85f5927901ef278dE>
 80069fc:	e7ff      	b.n	80069fe <_ZN4core3ptr25swap_nonoverlapping_bytes17haea9561059c72327E+0x9a>
 80069fe:	980e      	ldr	r0, [sp, #56]	; 0x38
 8006a00:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006a02:	4408      	add	r0, r1
 8006a04:	900f      	str	r0, [sp, #60]	; 0x3c
 8006a06:	e7c6      	b.n	8006996 <_ZN4core3ptr25swap_nonoverlapping_bytes17haea9561059c72327E+0x32>
 8006a08:	e7ff      	b.n	8006a0a <_ZN4core3ptr25swap_nonoverlapping_bytes17haea9561059c72327E+0xa6>
 8006a0a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006a0c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006a0e:	1a40      	subs	r0, r0, r1
 8006a10:	9024      	str	r0, [sp, #144]	; 0x90
 8006a12:	a81c      	add	r0, sp, #112	; 0x70
 8006a14:	902a      	str	r0, [sp, #168]	; 0xa8
 8006a16:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8006a18:	902b      	str	r0, [sp, #172]	; 0xac
 8006a1a:	982b      	ldr	r0, [sp, #172]	; 0xac
 8006a1c:	9006      	str	r0, [sp, #24]
 8006a1e:	e7ff      	b.n	8006a20 <_ZN4core3ptr25swap_nonoverlapping_bytes17haea9561059c72327E+0xbc>
 8006a20:	9806      	ldr	r0, [sp, #24]
 8006a22:	9025      	str	r0, [sp, #148]	; 0x94
 8006a24:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006a26:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006a28:	f000 f81f 	bl	8006a6a <_ZN4core3ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h444475af15b7177dE>
 8006a2c:	9026      	str	r0, [sp, #152]	; 0x98
 8006a2e:	e7ff      	b.n	8006a30 <_ZN4core3ptr25swap_nonoverlapping_bytes17haea9561059c72327E+0xcc>
 8006a30:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006a32:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006a34:	f000 f819 	bl	8006a6a <_ZN4core3ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h444475af15b7177dE>
 8006a38:	9027      	str	r0, [sp, #156]	; 0x9c
 8006a3a:	e7ff      	b.n	8006a3c <_ZN4core3ptr25swap_nonoverlapping_bytes17haea9561059c72327E+0xd8>
 8006a3c:	9826      	ldr	r0, [sp, #152]	; 0x98
 8006a3e:	9925      	ldr	r1, [sp, #148]	; 0x94
 8006a40:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006a42:	f000 f9db 	bl	8006dfc <_ZN4core10intrinsics19copy_nonoverlapping17h85f5927901ef278dE>
 8006a46:	e7ff      	b.n	8006a48 <_ZN4core3ptr25swap_nonoverlapping_bytes17haea9561059c72327E+0xe4>
 8006a48:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8006a4a:	9926      	ldr	r1, [sp, #152]	; 0x98
 8006a4c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006a4e:	f000 f9d5 	bl	8006dfc <_ZN4core10intrinsics19copy_nonoverlapping17h85f5927901ef278dE>
 8006a52:	e7ff      	b.n	8006a54 <_ZN4core3ptr25swap_nonoverlapping_bytes17haea9561059c72327E+0xf0>
 8006a54:	9825      	ldr	r0, [sp, #148]	; 0x94
 8006a56:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8006a58:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006a5a:	f000 f9cf 	bl	8006dfc <_ZN4core10intrinsics19copy_nonoverlapping17h85f5927901ef278dE>
 8006a5e:	e7ff      	b.n	8006a60 <_ZN4core3ptr25swap_nonoverlapping_bytes17haea9561059c72327E+0xfc>
 8006a60:	e7ff      	b.n	8006a62 <_ZN4core3ptr25swap_nonoverlapping_bytes17haea9561059c72327E+0xfe>
 8006a62:	f1a7 0408 	sub.w	r4, r7, #8
 8006a66:	46a5      	mov	sp, r4
 8006a68:	bdd0      	pop	{r4, r6, r7, pc}

08006a6a <_ZN4core3ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h444475af15b7177dE>:
 8006a6a:	b580      	push	{r7, lr}
 8006a6c:	b086      	sub	sp, #24
 8006a6e:	460a      	mov	r2, r1
 8006a70:	4603      	mov	r3, r0
 8006a72:	9004      	str	r0, [sp, #16]
 8006a74:	9105      	str	r1, [sp, #20]
 8006a76:	9804      	ldr	r0, [sp, #16]
 8006a78:	9905      	ldr	r1, [sp, #20]
 8006a7a:	9203      	str	r2, [sp, #12]
 8006a7c:	9302      	str	r3, [sp, #8]
 8006a7e:	f000 f805 	bl	8006a8c <_ZN4core3ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h8c3e9b63d0164ad4E>
 8006a82:	9001      	str	r0, [sp, #4]
 8006a84:	e7ff      	b.n	8006a86 <_ZN4core3ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h444475af15b7177dE+0x1c>
 8006a86:	9801      	ldr	r0, [sp, #4]
 8006a88:	b006      	add	sp, #24
 8006a8a:	bd80      	pop	{r7, pc}

08006a8c <_ZN4core3ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h8c3e9b63d0164ad4E>:
 8006a8c:	b086      	sub	sp, #24
 8006a8e:	460a      	mov	r2, r1
 8006a90:	4603      	mov	r3, r0
 8006a92:	9003      	str	r0, [sp, #12]
 8006a94:	9104      	str	r1, [sp, #16]
 8006a96:	9803      	ldr	r0, [sp, #12]
 8006a98:	9904      	ldr	r1, [sp, #16]
 8006a9a:	4408      	add	r0, r1
 8006a9c:	9005      	str	r0, [sp, #20]
 8006a9e:	9805      	ldr	r0, [sp, #20]
 8006aa0:	9202      	str	r2, [sp, #8]
 8006aa2:	9301      	str	r3, [sp, #4]
 8006aa4:	9000      	str	r0, [sp, #0]
 8006aa6:	e7ff      	b.n	8006aa8 <_ZN4core3ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h8c3e9b63d0164ad4E+0x1c>
 8006aa8:	9800      	ldr	r0, [sp, #0]
 8006aaa:	b006      	add	sp, #24
 8006aac:	4770      	bx	lr

08006aae <_ZN4core3ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h7d5d72e646b2abd7E>:
 8006aae:	b580      	push	{r7, lr}
 8006ab0:	b084      	sub	sp, #16
 8006ab2:	4601      	mov	r1, r0
 8006ab4:	9003      	str	r0, [sp, #12]
 8006ab6:	9803      	ldr	r0, [sp, #12]
 8006ab8:	9102      	str	r1, [sp, #8]
 8006aba:	9001      	str	r0, [sp, #4]
 8006abc:	f000 f80a 	bl	8006ad4 <_ZN4core3ptr4null17h94d8d37c80f6893dE>
 8006ac0:	9000      	str	r0, [sp, #0]
 8006ac2:	e7ff      	b.n	8006ac4 <_ZN4core3ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h7d5d72e646b2abd7E+0x16>
 8006ac4:	9801      	ldr	r0, [sp, #4]
 8006ac6:	9900      	ldr	r1, [sp, #0]
 8006ac8:	1a42      	subs	r2, r0, r1
 8006aca:	fab2 f282 	clz	r2, r2
 8006ace:	0950      	lsrs	r0, r2, #5
 8006ad0:	b004      	add	sp, #16
 8006ad2:	bd80      	pop	{r7, pc}

08006ad4 <_ZN4core3ptr4null17h94d8d37c80f6893dE>:
 8006ad4:	2000      	movs	r0, #0
 8006ad6:	4770      	bx	lr

08006ad8 <_ZN4core3ptr4read17h3dc0ab1aea7723f2E>:
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b08c      	sub	sp, #48	; 0x30
 8006adc:	4601      	mov	r1, r0
 8006ade:	9005      	str	r0, [sp, #20]
 8006ae0:	9807      	ldr	r0, [sp, #28]
 8006ae2:	9006      	str	r0, [sp, #24]
 8006ae4:	9104      	str	r1, [sp, #16]
 8006ae6:	e7ff      	b.n	8006ae8 <_ZN4core3ptr4read17h3dc0ab1aea7723f2E+0x10>
 8006ae8:	9805      	ldr	r0, [sp, #20]
 8006aea:	a906      	add	r1, sp, #24
 8006aec:	910a      	str	r1, [sp, #40]	; 0x28
 8006aee:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006af0:	910b      	str	r1, [sp, #44]	; 0x2c
 8006af2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006af4:	9003      	str	r0, [sp, #12]
 8006af6:	9102      	str	r1, [sp, #8]
 8006af8:	e7ff      	b.n	8006afa <_ZN4core3ptr4read17h3dc0ab1aea7723f2E+0x22>
 8006afa:	2201      	movs	r2, #1
 8006afc:	9803      	ldr	r0, [sp, #12]
 8006afe:	9902      	ldr	r1, [sp, #8]
 8006b00:	f000 f817 	bl	8006b32 <_ZN4core10intrinsics19copy_nonoverlapping17hd07f3a150618ce6bE>
 8006b04:	e7ff      	b.n	8006b06 <_ZN4core3ptr4read17h3dc0ab1aea7723f2E+0x2e>
 8006b06:	9806      	ldr	r0, [sp, #24]
 8006b08:	9008      	str	r0, [sp, #32]
 8006b0a:	9808      	ldr	r0, [sp, #32]
 8006b0c:	9009      	str	r0, [sp, #36]	; 0x24
 8006b0e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006b10:	9001      	str	r0, [sp, #4]
 8006b12:	e7ff      	b.n	8006b14 <_ZN4core3ptr4read17h3dc0ab1aea7723f2E+0x3c>
 8006b14:	9801      	ldr	r0, [sp, #4]
 8006b16:	b00c      	add	sp, #48	; 0x30
 8006b18:	bd80      	pop	{r7, pc}

08006b1a <_ZN4core3ptr5write17h4a809fc726334fe9E>:
 8006b1a:	b084      	sub	sp, #16
 8006b1c:	460a      	mov	r2, r1
 8006b1e:	4603      	mov	r3, r0
 8006b20:	9002      	str	r0, [sp, #8]
 8006b22:	9103      	str	r1, [sp, #12]
 8006b24:	9802      	ldr	r0, [sp, #8]
 8006b26:	9903      	ldr	r1, [sp, #12]
 8006b28:	6001      	str	r1, [r0, #0]
 8006b2a:	9201      	str	r2, [sp, #4]
 8006b2c:	9300      	str	r3, [sp, #0]
 8006b2e:	b004      	add	sp, #16
 8006b30:	4770      	bx	lr

08006b32 <_ZN4core10intrinsics19copy_nonoverlapping17hd07f3a150618ce6bE>:
 8006b32:	b580      	push	{r7, lr}
 8006b34:	b086      	sub	sp, #24
 8006b36:	4613      	mov	r3, r2
 8006b38:	468c      	mov	ip, r1
 8006b3a:	4686      	mov	lr, r0
 8006b3c:	9003      	str	r0, [sp, #12]
 8006b3e:	9104      	str	r1, [sp, #16]
 8006b40:	9205      	str	r2, [sp, #20]
 8006b42:	9903      	ldr	r1, [sp, #12]
 8006b44:	9804      	ldr	r0, [sp, #16]
 8006b46:	9a05      	ldr	r2, [sp, #20]
 8006b48:	0092      	lsls	r2, r2, #2
 8006b4a:	9302      	str	r3, [sp, #8]
 8006b4c:	f8cd c004 	str.w	ip, [sp, #4]
 8006b50:	f8cd e000 	str.w	lr, [sp]
 8006b54:	f00f f8aa 	bl	8015cac <__aeabi_memcpy>
 8006b58:	e7ff      	b.n	8006b5a <_ZN4core10intrinsics19copy_nonoverlapping17hd07f3a150618ce6bE+0x28>
 8006b5a:	b006      	add	sp, #24
 8006b5c:	bd80      	pop	{r7, pc}

08006b5e <_ZN4core3mem4swap17ha215299b395665f3E>:
 8006b5e:	b580      	push	{r7, lr}
 8006b60:	b084      	sub	sp, #16
 8006b62:	460a      	mov	r2, r1
 8006b64:	4603      	mov	r3, r0
 8006b66:	9002      	str	r0, [sp, #8]
 8006b68:	9103      	str	r1, [sp, #12]
 8006b6a:	9802      	ldr	r0, [sp, #8]
 8006b6c:	9903      	ldr	r1, [sp, #12]
 8006b6e:	9201      	str	r2, [sp, #4]
 8006b70:	9300      	str	r3, [sp, #0]
 8006b72:	f7ff fecd 	bl	8006910 <_ZN4core3ptr23swap_nonoverlapping_one17h9a4b435a29b2077eE>
 8006b76:	e7ff      	b.n	8006b78 <_ZN4core3mem4swap17ha215299b395665f3E+0x1a>
 8006b78:	b004      	add	sp, #16
 8006b7a:	bd80      	pop	{r7, pc}

08006b7c <_ZN4core3mem7size_of17h52ebf8b7386d8e01E>:
 8006b7c:	b082      	sub	sp, #8
 8006b7e:	2004      	movs	r0, #4
 8006b80:	9001      	str	r0, [sp, #4]
 8006b82:	9801      	ldr	r0, [sp, #4]
 8006b84:	9000      	str	r0, [sp, #0]
 8006b86:	e7ff      	b.n	8006b88 <_ZN4core3mem7size_of17h52ebf8b7386d8e01E+0xc>
 8006b88:	9800      	ldr	r0, [sp, #0]
 8006b8a:	b002      	add	sp, #8
 8006b8c:	4770      	bx	lr

08006b8e <_ZN4core3mem7size_of17hcafb567766d3ad6aE>:
 8006b8e:	b082      	sub	sp, #8
 8006b90:	2020      	movs	r0, #32
 8006b92:	9001      	str	r0, [sp, #4]
 8006b94:	9801      	ldr	r0, [sp, #4]
 8006b96:	9000      	str	r0, [sp, #0]
 8006b98:	e7ff      	b.n	8006b9a <_ZN4core3mem7size_of17hcafb567766d3ad6aE+0xc>
 8006b9a:	9800      	ldr	r0, [sp, #0]
 8006b9c:	b002      	add	sp, #8
 8006b9e:	4770      	bx	lr

08006ba0 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h0f755ebc716ea79fE>:
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b08a      	sub	sp, #40	; 0x28
 8006ba4:	4601      	mov	r1, r0
 8006ba6:	9003      	str	r0, [sp, #12]
 8006ba8:	2000      	movs	r0, #0
 8006baa:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
 8006bae:	9803      	ldr	r0, [sp, #12]
 8006bb0:	1d02      	adds	r2, r0, #4
 8006bb2:	9102      	str	r1, [sp, #8]
 8006bb4:	4611      	mov	r1, r2
 8006bb6:	f000 f85b 	bl	8006c70 <_ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$2lt17h390f3c86002de84aE>
 8006bba:	9001      	str	r0, [sp, #4]
 8006bbc:	e7ff      	b.n	8006bbe <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h0f755ebc716ea79fE+0x1e>
 8006bbe:	9801      	ldr	r0, [sp, #4]
 8006bc0:	07c1      	lsls	r1, r0, #31
 8006bc2:	2900      	cmp	r1, #0
 8006bc4:	d01f      	beq.n	8006c06 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h0f755ebc716ea79fE+0x66>
 8006bc6:	e7ff      	b.n	8006bc8 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h0f755ebc716ea79fE+0x28>
 8006bc8:	9803      	ldr	r0, [sp, #12]
 8006bca:	2101      	movs	r1, #1
 8006bcc:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
 8006bd0:	f000 f833 	bl	8006c3a <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17ha357325b6c2f1c37E>
 8006bd4:	9107      	str	r1, [sp, #28]
 8006bd6:	9006      	str	r0, [sp, #24]
 8006bd8:	e7ff      	b.n	8006bda <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h0f755ebc716ea79fE+0x3a>
 8006bda:	9806      	ldr	r0, [sp, #24]
 8006bdc:	2801      	cmp	r0, #1
 8006bde:	d10f      	bne.n	8006c00 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h0f755ebc716ea79fE+0x60>
 8006be0:	e7ff      	b.n	8006be2 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h0f755ebc716ea79fE+0x42>
 8006be2:	2000      	movs	r0, #0
 8006be4:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
 8006be8:	9807      	ldr	r0, [sp, #28]
 8006bea:	9008      	str	r0, [sp, #32]
 8006bec:	9903      	ldr	r1, [sp, #12]
 8006bee:	a808      	add	r0, sp, #32
 8006bf0:	f7ff ffb5 	bl	8006b5e <_ZN4core3mem4swap17ha215299b395665f3E>
 8006bf4:	e7ff      	b.n	8006bf6 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h0f755ebc716ea79fE+0x56>
 8006bf6:	9808      	ldr	r0, [sp, #32]
 8006bf8:	9005      	str	r0, [sp, #20]
 8006bfa:	2001      	movs	r0, #1
 8006bfc:	9004      	str	r0, [sp, #16]
 8006bfe:	e018      	b.n	8006c32 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h0f755ebc716ea79fE+0x92>
 8006c00:	2000      	movs	r0, #0
 8006c02:	9004      	str	r0, [sp, #16]
 8006c04:	e015      	b.n	8006c32 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h0f755ebc716ea79fE+0x92>
 8006c06:	2000      	movs	r0, #0
 8006c08:	9004      	str	r0, [sp, #16]
 8006c0a:	e7ff      	b.n	8006c0c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h0f755ebc716ea79fE+0x6c>
 8006c0c:	9804      	ldr	r0, [sp, #16]
 8006c0e:	9905      	ldr	r1, [sp, #20]
 8006c10:	b00a      	add	sp, #40	; 0x28
 8006c12:	bd80      	pop	{r7, pc}
 8006c14:	2000      	movs	r0, #0
 8006c16:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
 8006c1a:	e7f7      	b.n	8006c0c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h0f755ebc716ea79fE+0x6c>
 8006c1c:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
 8006c20:	07c0      	lsls	r0, r0, #31
 8006c22:	2800      	cmp	r0, #0
 8006c24:	d0f6      	beq.n	8006c14 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h0f755ebc716ea79fE+0x74>
 8006c26:	e7ff      	b.n	8006c28 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h0f755ebc716ea79fE+0x88>
 8006c28:	2000      	movs	r0, #0
 8006c2a:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
 8006c2e:	e7f1      	b.n	8006c14 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h0f755ebc716ea79fE+0x74>
 8006c30:	e7f0      	b.n	8006c14 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h0f755ebc716ea79fE+0x74>
 8006c32:	9806      	ldr	r0, [sp, #24]
 8006c34:	2801      	cmp	r0, #1
 8006c36:	d0f1      	beq.n	8006c1c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h0f755ebc716ea79fE+0x7c>
 8006c38:	e7fa      	b.n	8006c30 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h0f755ebc716ea79fE+0x90>

08006c3a <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17ha357325b6c2f1c37E>:
 8006c3a:	b580      	push	{r7, lr}
 8006c3c:	b088      	sub	sp, #32
 8006c3e:	460a      	mov	r2, r1
 8006c40:	4603      	mov	r3, r0
 8006c42:	9004      	str	r0, [sp, #16]
 8006c44:	9105      	str	r1, [sp, #20]
 8006c46:	9805      	ldr	r0, [sp, #20]
 8006c48:	9203      	str	r2, [sp, #12]
 8006c4a:	9302      	str	r3, [sp, #8]
 8006c4c:	f001 fc39 	bl	80084c2 <_ZN53_$LT$T$u20$as$u20$core..convert..TryFrom$LT$U$GT$$GT$8try_from17h7c80ae12d7aabdd0E>
 8006c50:	9006      	str	r0, [sp, #24]
 8006c52:	e7ff      	b.n	8006c54 <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17ha357325b6c2f1c37E+0x1a>
 8006c54:	9806      	ldr	r0, [sp, #24]
 8006c56:	9007      	str	r0, [sp, #28]
 8006c58:	9804      	ldr	r0, [sp, #16]
 8006c5a:	6800      	ldr	r0, [r0, #0]
 8006c5c:	9907      	ldr	r1, [sp, #28]
 8006c5e:	f001 fc3f 	bl	80084e0 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h9d9fb88919d8e73fE>
 8006c62:	9001      	str	r0, [sp, #4]
 8006c64:	9100      	str	r1, [sp, #0]
 8006c66:	e7ff      	b.n	8006c68 <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17ha357325b6c2f1c37E+0x2e>
 8006c68:	9801      	ldr	r0, [sp, #4]
 8006c6a:	9900      	ldr	r1, [sp, #0]
 8006c6c:	b008      	add	sp, #32
 8006c6e:	bd80      	pop	{r7, pc}

08006c70 <_ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$2lt17h390f3c86002de84aE>:
 8006c70:	b084      	sub	sp, #16
 8006c72:	460a      	mov	r2, r1
 8006c74:	4603      	mov	r3, r0
 8006c76:	9002      	str	r0, [sp, #8]
 8006c78:	9103      	str	r1, [sp, #12]
 8006c7a:	9802      	ldr	r0, [sp, #8]
 8006c7c:	6800      	ldr	r0, [r0, #0]
 8006c7e:	9903      	ldr	r1, [sp, #12]
 8006c80:	6809      	ldr	r1, [r1, #0]
 8006c82:	f04f 0c00 	mov.w	ip, #0
 8006c86:	4288      	cmp	r0, r1
 8006c88:	bf38      	it	cc
 8006c8a:	f04f 0c01 	movcc.w	ip, #1
 8006c8e:	4660      	mov	r0, ip
 8006c90:	9201      	str	r2, [sp, #4]
 8006c92:	9300      	str	r3, [sp, #0]
 8006c94:	b004      	add	sp, #16
 8006c96:	4770      	bx	lr

08006c98 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h8e167aafd3bdcdafE>:
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b086      	sub	sp, #24
 8006c9c:	460a      	mov	r2, r1
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	9004      	str	r0, [sp, #16]
 8006ca2:	9105      	str	r1, [sp, #20]
 8006ca4:	9804      	ldr	r0, [sp, #16]
 8006ca6:	6800      	ldr	r0, [r0, #0]
 8006ca8:	9905      	ldr	r1, [sp, #20]
 8006caa:	9203      	str	r2, [sp, #12]
 8006cac:	9302      	str	r3, [sp, #8]
 8006cae:	f000 f854 	bl	8006d5a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb6030de3e7f5cbeeE>
 8006cb2:	9001      	str	r0, [sp, #4]
 8006cb4:	e7ff      	b.n	8006cb6 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h8e167aafd3bdcdafE+0x1e>
 8006cb6:	9801      	ldr	r0, [sp, #4]
 8006cb8:	f000 0001 	and.w	r0, r0, #1
 8006cbc:	b006      	add	sp, #24
 8006cbe:	bd80      	pop	{r7, pc}

08006cc0 <_ZN4core3fmt10ArgumentV13new17h5864edecdd47206aE>:
 8006cc0:	b08a      	sub	sp, #40	; 0x28
 8006cc2:	460a      	mov	r2, r1
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	9004      	str	r0, [sp, #16]
 8006cc8:	9105      	str	r1, [sp, #20]
 8006cca:	9805      	ldr	r0, [sp, #20]
 8006ccc:	9008      	str	r0, [sp, #32]
 8006cce:	9808      	ldr	r0, [sp, #32]
 8006cd0:	9203      	str	r2, [sp, #12]
 8006cd2:	9302      	str	r3, [sp, #8]
 8006cd4:	9001      	str	r0, [sp, #4]
 8006cd6:	e7ff      	b.n	8006cd8 <_ZN4core3fmt10ArgumentV13new17h5864edecdd47206aE+0x18>
 8006cd8:	9804      	ldr	r0, [sp, #16]
 8006cda:	9009      	str	r0, [sp, #36]	; 0x24
 8006cdc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006cde:	9000      	str	r0, [sp, #0]
 8006ce0:	e7ff      	b.n	8006ce2 <_ZN4core3fmt10ArgumentV13new17h5864edecdd47206aE+0x22>
 8006ce2:	9800      	ldr	r0, [sp, #0]
 8006ce4:	9006      	str	r0, [sp, #24]
 8006ce6:	9901      	ldr	r1, [sp, #4]
 8006ce8:	9107      	str	r1, [sp, #28]
 8006cea:	9806      	ldr	r0, [sp, #24]
 8006cec:	9907      	ldr	r1, [sp, #28]
 8006cee:	b00a      	add	sp, #40	; 0x28
 8006cf0:	4770      	bx	lr

08006cf2 <_ZN4core3mem7size_of17he296f163b70ee57fE>:
 8006cf2:	b082      	sub	sp, #8
 8006cf4:	2001      	movs	r0, #1
 8006cf6:	9001      	str	r0, [sp, #4]
 8006cf8:	9801      	ldr	r0, [sp, #4]
 8006cfa:	9000      	str	r0, [sp, #0]
 8006cfc:	e7ff      	b.n	8006cfe <_ZN4core3mem7size_of17he296f163b70ee57fE+0xc>
 8006cfe:	9800      	ldr	r0, [sp, #0]
 8006d00:	b002      	add	sp, #8
 8006d02:	4770      	bx	lr

08006d04 <_ZN4core3mem8align_of17h7ba3878fe1d1633bE>:
 8006d04:	b082      	sub	sp, #8
 8006d06:	2001      	movs	r0, #1
 8006d08:	9001      	str	r0, [sp, #4]
 8006d0a:	9801      	ldr	r0, [sp, #4]
 8006d0c:	9000      	str	r0, [sp, #0]
 8006d0e:	e7ff      	b.n	8006d10 <_ZN4core3mem8align_of17h7ba3878fe1d1633bE+0xc>
 8006d10:	9800      	ldr	r0, [sp, #0]
 8006d12:	b002      	add	sp, #8
 8006d14:	4770      	bx	lr

08006d16 <_ZN4core3ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hf0106c7b78f17716E>:
 8006d16:	b580      	push	{r7, lr}
 8006d18:	b086      	sub	sp, #24
 8006d1a:	460a      	mov	r2, r1
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	9004      	str	r0, [sp, #16]
 8006d20:	9105      	str	r1, [sp, #20]
 8006d22:	9804      	ldr	r0, [sp, #16]
 8006d24:	9905      	ldr	r1, [sp, #20]
 8006d26:	9203      	str	r2, [sp, #12]
 8006d28:	9302      	str	r3, [sp, #8]
 8006d2a:	f000 f805 	bl	8006d38 <_ZN4core3ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h2dd721d17ad3d086E>
 8006d2e:	9001      	str	r0, [sp, #4]
 8006d30:	e7ff      	b.n	8006d32 <_ZN4core3ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hf0106c7b78f17716E+0x1c>
 8006d32:	9801      	ldr	r0, [sp, #4]
 8006d34:	b006      	add	sp, #24
 8006d36:	bd80      	pop	{r7, pc}

08006d38 <_ZN4core3ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h2dd721d17ad3d086E>:
 8006d38:	b086      	sub	sp, #24
 8006d3a:	460a      	mov	r2, r1
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	9003      	str	r0, [sp, #12]
 8006d40:	9104      	str	r1, [sp, #16]
 8006d42:	9803      	ldr	r0, [sp, #12]
 8006d44:	9904      	ldr	r1, [sp, #16]
 8006d46:	4408      	add	r0, r1
 8006d48:	9005      	str	r0, [sp, #20]
 8006d4a:	9805      	ldr	r0, [sp, #20]
 8006d4c:	9202      	str	r2, [sp, #8]
 8006d4e:	9301      	str	r3, [sp, #4]
 8006d50:	9000      	str	r0, [sp, #0]
 8006d52:	e7ff      	b.n	8006d54 <_ZN4core3ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h2dd721d17ad3d086E+0x1c>
 8006d54:	9800      	ldr	r0, [sp, #0]
 8006d56:	b006      	add	sp, #24
 8006d58:	4770      	bx	lr

08006d5a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb6030de3e7f5cbeeE>:
 8006d5a:	b580      	push	{r7, lr}
 8006d5c:	b088      	sub	sp, #32
 8006d5e:	460a      	mov	r2, r1
 8006d60:	4603      	mov	r3, r0
 8006d62:	9005      	str	r0, [sp, #20]
 8006d64:	9106      	str	r1, [sp, #24]
 8006d66:	9806      	ldr	r0, [sp, #24]
 8006d68:	9204      	str	r2, [sp, #16]
 8006d6a:	9303      	str	r3, [sp, #12]
 8006d6c:	f002 fd4c 	bl	8009808 <_ZN4core3fmt9Formatter15debug_lower_hex17h28b672d23c16e15aE>
 8006d70:	9002      	str	r0, [sp, #8]
 8006d72:	e7ff      	b.n	8006d74 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb6030de3e7f5cbeeE+0x1a>
 8006d74:	9802      	ldr	r0, [sp, #8]
 8006d76:	07c1      	lsls	r1, r0, #31
 8006d78:	2900      	cmp	r1, #0
 8006d7a:	d008      	beq.n	8006d8e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb6030de3e7f5cbeeE+0x34>
 8006d7c:	e7ff      	b.n	8006d7e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb6030de3e7f5cbeeE+0x24>
 8006d7e:	9805      	ldr	r0, [sp, #20]
 8006d80:	9906      	ldr	r1, [sp, #24]
 8006d82:	f003 f874 	bl	8009e6e <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17h4f9d20d49859c5e5E>
 8006d86:	f88d 001f 	strb.w	r0, [sp, #31]
 8006d8a:	e7ff      	b.n	8006d8c <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb6030de3e7f5cbeeE+0x32>
 8006d8c:	e01a      	b.n	8006dc4 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb6030de3e7f5cbeeE+0x6a>
 8006d8e:	9806      	ldr	r0, [sp, #24]
 8006d90:	f002 fd3e 	bl	8009810 <_ZN4core3fmt9Formatter15debug_upper_hex17h4ab9339a84cb4dceE>
 8006d94:	9001      	str	r0, [sp, #4]
 8006d96:	e7ff      	b.n	8006d98 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb6030de3e7f5cbeeE+0x3e>
 8006d98:	9801      	ldr	r0, [sp, #4]
 8006d9a:	07c1      	lsls	r1, r0, #31
 8006d9c:	2900      	cmp	r1, #0
 8006d9e:	d008      	beq.n	8006db2 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb6030de3e7f5cbeeE+0x58>
 8006da0:	e7ff      	b.n	8006da2 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb6030de3e7f5cbeeE+0x48>
 8006da2:	9805      	ldr	r0, [sp, #20]
 8006da4:	9906      	ldr	r1, [sp, #24]
 8006da6:	f003 f8cd 	bl	8009f44 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hc10e55c761f9c3e5E>
 8006daa:	f88d 001f 	strb.w	r0, [sp, #31]
 8006dae:	e7ff      	b.n	8006db0 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb6030de3e7f5cbeeE+0x56>
 8006db0:	e007      	b.n	8006dc2 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb6030de3e7f5cbeeE+0x68>
 8006db2:	9805      	ldr	r0, [sp, #20]
 8006db4:	9906      	ldr	r1, [sp, #24]
 8006db6:	f003 fa2c 	bl	800a212 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17h490cd499cca46fe6E>
 8006dba:	f88d 001f 	strb.w	r0, [sp, #31]
 8006dbe:	e7ff      	b.n	8006dc0 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb6030de3e7f5cbeeE+0x66>
 8006dc0:	e7ff      	b.n	8006dc2 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb6030de3e7f5cbeeE+0x68>
 8006dc2:	e7ff      	b.n	8006dc4 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb6030de3e7f5cbeeE+0x6a>
 8006dc4:	f89d 001f 	ldrb.w	r0, [sp, #31]
 8006dc8:	b008      	add	sp, #32
 8006dca:	bd80      	pop	{r7, pc}

08006dcc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h12b66ceea47b68d2E>:
 8006dcc:	b086      	sub	sp, #24
 8006dce:	460a      	mov	r2, r1
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	9002      	str	r0, [sp, #8]
 8006dd4:	9103      	str	r1, [sp, #12]
 8006dd6:	9802      	ldr	r0, [sp, #8]
 8006dd8:	9903      	ldr	r1, [sp, #12]
 8006dda:	9004      	str	r0, [sp, #16]
 8006ddc:	9105      	str	r1, [sp, #20]
 8006dde:	9805      	ldr	r0, [sp, #20]
 8006de0:	9201      	str	r2, [sp, #4]
 8006de2:	9300      	str	r3, [sp, #0]
 8006de4:	b006      	add	sp, #24
 8006de6:	4770      	bx	lr

08006de8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hdef04f6d8168bdb2E>:
 8006de8:	b084      	sub	sp, #16
 8006dea:	460a      	mov	r2, r1
 8006dec:	4603      	mov	r3, r0
 8006dee:	9002      	str	r0, [sp, #8]
 8006df0:	9103      	str	r1, [sp, #12]
 8006df2:	9802      	ldr	r0, [sp, #8]
 8006df4:	9201      	str	r2, [sp, #4]
 8006df6:	9300      	str	r3, [sp, #0]
 8006df8:	b004      	add	sp, #16
 8006dfa:	4770      	bx	lr

08006dfc <_ZN4core10intrinsics19copy_nonoverlapping17h85f5927901ef278dE>:
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b088      	sub	sp, #32
 8006e00:	4613      	mov	r3, r2
 8006e02:	468c      	mov	ip, r1
 8006e04:	4686      	mov	lr, r0
 8006e06:	9005      	str	r0, [sp, #20]
 8006e08:	9106      	str	r1, [sp, #24]
 8006e0a:	9207      	str	r2, [sp, #28]
 8006e0c:	9905      	ldr	r1, [sp, #20]
 8006e0e:	9806      	ldr	r0, [sp, #24]
 8006e10:	9a07      	ldr	r2, [sp, #28]
 8006e12:	9304      	str	r3, [sp, #16]
 8006e14:	f8cd c00c 	str.w	ip, [sp, #12]
 8006e18:	f8cd e008 	str.w	lr, [sp, #8]
 8006e1c:	f00e ff46 	bl	8015cac <__aeabi_memcpy>
 8006e20:	9001      	str	r0, [sp, #4]
 8006e22:	e7ff      	b.n	8006e24 <_ZN4core10intrinsics19copy_nonoverlapping17h85f5927901ef278dE+0x28>
 8006e24:	b008      	add	sp, #32
 8006e26:	bd80      	pop	{r7, pc}

08006e28 <_ZN4core3ptr18real_drop_in_place17hd0e47e9ad3c69e0eE>:
 8006e28:	b082      	sub	sp, #8
 8006e2a:	4601      	mov	r1, r0
 8006e2c:	9001      	str	r0, [sp, #4]
 8006e2e:	9100      	str	r1, [sp, #0]
 8006e30:	b002      	add	sp, #8
 8006e32:	4770      	bx	lr

08006e34 <_ZN4core3cmp5impls53_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$u8$GT$2eq17h996d81c265015a00E>:
 8006e34:	b084      	sub	sp, #16
 8006e36:	460a      	mov	r2, r1
 8006e38:	4603      	mov	r3, r0
 8006e3a:	9002      	str	r0, [sp, #8]
 8006e3c:	9103      	str	r1, [sp, #12]
 8006e3e:	9802      	ldr	r0, [sp, #8]
 8006e40:	7800      	ldrb	r0, [r0, #0]
 8006e42:	9903      	ldr	r1, [sp, #12]
 8006e44:	7809      	ldrb	r1, [r1, #0]
 8006e46:	1a40      	subs	r0, r0, r1
 8006e48:	fab0 f080 	clz	r0, r0
 8006e4c:	0940      	lsrs	r0, r0, #5
 8006e4e:	9201      	str	r2, [sp, #4]
 8006e50:	9300      	str	r3, [sp, #0]
 8006e52:	b004      	add	sp, #16
 8006e54:	4770      	bx	lr

08006e56 <_ZN4core3cmp5impls55_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$u32$GT$2lt17h61db27facad99196E>:
 8006e56:	b084      	sub	sp, #16
 8006e58:	460a      	mov	r2, r1
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	9002      	str	r0, [sp, #8]
 8006e5e:	9103      	str	r1, [sp, #12]
 8006e60:	9802      	ldr	r0, [sp, #8]
 8006e62:	6800      	ldr	r0, [r0, #0]
 8006e64:	9903      	ldr	r1, [sp, #12]
 8006e66:	6809      	ldr	r1, [r1, #0]
 8006e68:	f04f 0c00 	mov.w	ip, #0
 8006e6c:	4288      	cmp	r0, r1
 8006e6e:	bf38      	it	cc
 8006e70:	f04f 0c01 	movcc.w	ip, #1
 8006e74:	4660      	mov	r0, ip
 8006e76:	9201      	str	r2, [sp, #4]
 8006e78:	9300      	str	r3, [sp, #0]
 8006e7a:	b004      	add	sp, #16
 8006e7c:	4770      	bx	lr

08006e7e <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_geolocation17h2edab64b711d4dc6E>:
    pub fn json_set_geolocation(&mut self, key: &Strn, lat_key: &Strn, long_key: &Strn, geo: SensorValueType) {
 8006e7e:	b570      	push	{r4, r5, r6, lr}
 8006e80:	b09a      	sub	sp, #104	; 0x68
 8006e82:	f8dd c078 	ldr.w	ip, [sp, #120]	; 0x78
 8006e86:	469e      	mov	lr, r3
 8006e88:	4614      	mov	r4, r2
 8006e8a:	460d      	mov	r5, r1
 8006e8c:	4606      	mov	r6, r0
 8006e8e:	900a      	str	r0, [sp, #40]	; 0x28
 8006e90:	910b      	str	r1, [sp, #44]	; 0x2c
 8006e92:	920c      	str	r2, [sp, #48]	; 0x30
 8006e94:	930d      	str	r3, [sp, #52]	; 0x34
        if let SensorValueType::Geolocation { latitude, longitude, .. } = geo {
 8006e96:	f8dc 0000 	ldr.w	r0, [ip]
 8006e9a:	2803      	cmp	r0, #3
 8006e9c:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 8006ea0:	f8cd e020 	str.w	lr, [sp, #32]
 8006ea4:	9407      	str	r4, [sp, #28]
 8006ea6:	9506      	str	r5, [sp, #24]
 8006ea8:	9605      	str	r6, [sp, #20]
 8006eaa:	d17d      	bne.n	8006fa8 <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_geolocation17h2edab64b711d4dc6E+0x12a>
 8006eac:	e7ff      	b.n	8006eae <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_geolocation17h2edab64b711d4dc6E+0x30>
 8006eae:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006eb0:	ed90 0b02 	vldr	d0, [r0, #8]
 8006eb4:	ed8d 0b0e 	vstr	d0, [sp, #56]	; 0x38
 8006eb8:	ed90 0b04 	vldr	d0, [r0, #16]
 8006ebc:	ed8d 0b10 	vstr	d0, [sp, #64]	; 0x40
            let notused = self.to_void_ptr();
 8006ec0:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006ec2:	f000 fa62 	bl	800738a <_ZN6mynewt8encoding12coap_context11CoapContext11to_void_ptr17h69d954fe1672413fE>
 8006ec6:	9012      	str	r0, [sp, #72]	; 0x48
 8006ec8:	e7ff      	b.n	8006eca <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_geolocation17h2edab64b711d4dc6E+0x4c>
            let encoder = unsafe { &mut sensor_coap::coap_json_encoder };
 8006eca:	f243 70b8 	movw	r0, #14264	; 0x37b8
 8006ece:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8006ed2:	9013      	str	r0, [sp, #76]	; 0x4c
            let key_cstr = self.key_strn_to_cstr(key);
 8006ed4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006ed6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006ed8:	f000 f88e 	bl	8006ff8 <_ZN6mynewt8encoding12coap_context11CoapContext16key_strn_to_cstr17hb529d0c5fe367882E>
 8006edc:	9014      	str	r0, [sp, #80]	; 0x50
 8006ede:	e7ff      	b.n	8006ee0 <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_geolocation17h2edab64b711d4dc6E+0x62>
            let rc = unsafe { json::json_encode_object_key(encoder, key_cstr as *mut u8) }; 
 8006ee0:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8006ee2:	9914      	ldr	r1, [sp, #80]	; 0x50
 8006ee4:	f004 fe02 	bl	800baec <json_encode_object_key>
 8006ee8:	9015      	str	r0, [sp, #84]	; 0x54
 8006eea:	e7ff      	b.n	8006eec <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_geolocation17h2edab64b711d4dc6E+0x6e>
            assert!(rc == 0);
 8006eec:	9815      	ldr	r0, [sp, #84]	; 0x54
 8006eee:	2800      	cmp	r0, #0
 8006ef0:	d007      	beq.n	8006f02 <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_geolocation17h2edab64b711d4dc6E+0x84>
 8006ef2:	e7ff      	b.n	8006ef4 <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_geolocation17h2edab64b711d4dc6E+0x76>
 8006ef4:	f246 20cc 	movw	r0, #25292	; 0x62cc
 8006ef8:	f6c0 0001 	movt	r0, #2049	; 0x801
 8006efc:	f001 fbc7 	bl	800868e <_ZN4core9panicking5panic17h138a849f37d3ac2dE>
 8006f00:	defe      	udf	#254	; 0xfe
            let rc = unsafe { json::json_encode_object_start(encoder) }; 
 8006f02:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8006f04:	f004 fdd4 	bl	800bab0 <json_encode_object_start>
 8006f08:	9016      	str	r0, [sp, #88]	; 0x58
 8006f0a:	e7ff      	b.n	8006f0c <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_geolocation17h2edab64b711d4dc6E+0x8e>
            assert!(rc == 0);
 8006f0c:	9816      	ldr	r0, [sp, #88]	; 0x58
 8006f0e:	2800      	cmp	r0, #0
 8006f10:	d007      	beq.n	8006f22 <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_geolocation17h2edab64b711d4dc6E+0xa4>
 8006f12:	e7ff      	b.n	8006f14 <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_geolocation17h2edab64b711d4dc6E+0x96>
 8006f14:	f246 20e4 	movw	r0, #25316	; 0x62e4
 8006f18:	f6c0 0001 	movt	r0, #2049	; 0x801
 8006f1c:	f001 fbb7 	bl	800868e <_ZN4core9panicking5panic17h138a849f37d3ac2dE>
 8006f20:	defe      	udf	#254	; 0xfe
            let key_cstr = self.key_strn_to_cstr(lat_key);
 8006f22:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006f24:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006f26:	f000 f867 	bl	8006ff8 <_ZN6mynewt8encoding12coap_context11CoapContext16key_strn_to_cstr17hb529d0c5fe367882E>
 8006f2a:	9017      	str	r0, [sp, #92]	; 0x5c
 8006f2c:	e7ff      	b.n	8006f2e <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_geolocation17h2edab64b711d4dc6E+0xb0>
            unsafe { mynewt_rust::json_helper_set_float(notused, key_cstr, latitude as f32) };
 8006f2e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8006f30:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8006f32:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 8006f36:	ec53 2b10 	vmov	r2, r3, d0
 8006f3a:	9004      	str	r0, [sp, #16]
 8006f3c:	4610      	mov	r0, r2
 8006f3e:	9103      	str	r1, [sp, #12]
 8006f40:	4619      	mov	r1, r3
 8006f42:	f00e fce3 	bl	801590c <__aeabi_d2f>
 8006f46:	ee00 0a10 	vmov	s0, r0
 8006f4a:	9804      	ldr	r0, [sp, #16]
 8006f4c:	9903      	ldr	r1, [sp, #12]
 8006f4e:	f007 ff3f 	bl	800edd0 <json_helper_set_float>
 8006f52:	e7ff      	b.n	8006f54 <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_geolocation17h2edab64b711d4dc6E+0xd6>
            let key_cstr = self.key_strn_to_cstr(long_key);
 8006f54:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006f56:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006f58:	f000 f84e 	bl	8006ff8 <_ZN6mynewt8encoding12coap_context11CoapContext16key_strn_to_cstr17hb529d0c5fe367882E>
 8006f5c:	9018      	str	r0, [sp, #96]	; 0x60
 8006f5e:	e7ff      	b.n	8006f60 <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_geolocation17h2edab64b711d4dc6E+0xe2>
            unsafe { mynewt_rust::json_helper_set_float(notused, key_cstr, longitude as f32) };
 8006f60:	9812      	ldr	r0, [sp, #72]	; 0x48
 8006f62:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006f64:	ed9d 0b10 	vldr	d0, [sp, #64]	; 0x40
 8006f68:	ec53 2b10 	vmov	r2, r3, d0
 8006f6c:	9002      	str	r0, [sp, #8]
 8006f6e:	4610      	mov	r0, r2
 8006f70:	9101      	str	r1, [sp, #4]
 8006f72:	4619      	mov	r1, r3
 8006f74:	f00e fcca 	bl	801590c <__aeabi_d2f>
 8006f78:	ee00 0a10 	vmov	s0, r0
 8006f7c:	9802      	ldr	r0, [sp, #8]
 8006f7e:	9901      	ldr	r1, [sp, #4]
 8006f80:	f007 ff26 	bl	800edd0 <json_helper_set_float>
 8006f84:	e7ff      	b.n	8006f86 <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_geolocation17h2edab64b711d4dc6E+0x108>
            let rc = unsafe { json::json_encode_object_finish(encoder) }; 
 8006f86:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8006f88:	f004 ff10 	bl	800bdac <json_encode_object_finish>
 8006f8c:	9019      	str	r0, [sp, #100]	; 0x64
 8006f8e:	e7ff      	b.n	8006f90 <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_geolocation17h2edab64b711d4dc6E+0x112>
            assert!(rc == 0);
 8006f90:	9819      	ldr	r0, [sp, #100]	; 0x64
 8006f92:	2800      	cmp	r0, #0
 8006f94:	d007      	beq.n	8006fa6 <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_geolocation17h2edab64b711d4dc6E+0x128>
 8006f96:	e7ff      	b.n	8006f98 <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_geolocation17h2edab64b711d4dc6E+0x11a>
 8006f98:	f246 20fc 	movw	r0, #25340	; 0x62fc
 8006f9c:	f6c0 0001 	movt	r0, #2049	; 0x801
 8006fa0:	f001 fb75 	bl	800868e <_ZN4core9panicking5panic17h138a849f37d3ac2dE>
 8006fa4:	defe      	udf	#254	; 0xfe
        if let SensorValueType::Geolocation { latitude, longitude, .. } = geo {
 8006fa6:	e7ff      	b.n	8006fa8 <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_geolocation17h2edab64b711d4dc6E+0x12a>
    }
 8006fa8:	b01a      	add	sp, #104	; 0x68
 8006faa:	bd70      	pop	{r4, r5, r6, pc}

08006fac <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_text_string17h9e175e462a901a28E>:
    pub fn json_set_text_string(&mut self, key: &Strn, value: &Strn) {
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b08a      	sub	sp, #40	; 0x28
 8006fb0:	4613      	mov	r3, r2
 8006fb2:	468c      	mov	ip, r1
 8006fb4:	4686      	mov	lr, r0
 8006fb6:	9004      	str	r0, [sp, #16]
 8006fb8:	9105      	str	r1, [sp, #20]
 8006fba:	9206      	str	r2, [sp, #24]
        let notused = self.to_void_ptr();
 8006fbc:	9804      	ldr	r0, [sp, #16]
 8006fbe:	9303      	str	r3, [sp, #12]
 8006fc0:	f8cd c008 	str.w	ip, [sp, #8]
 8006fc4:	f8cd e004 	str.w	lr, [sp, #4]
 8006fc8:	f000 f9df 	bl	800738a <_ZN6mynewt8encoding12coap_context11CoapContext11to_void_ptr17h69d954fe1672413fE>
 8006fcc:	9007      	str	r0, [sp, #28]
 8006fce:	e7ff      	b.n	8006fd0 <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_text_string17h9e175e462a901a28E+0x24>
        let key_cstr: *const u8 = self.key_strn_to_cstr(key);
 8006fd0:	9804      	ldr	r0, [sp, #16]
 8006fd2:	9905      	ldr	r1, [sp, #20]
 8006fd4:	f000 f810 	bl	8006ff8 <_ZN6mynewt8encoding12coap_context11CoapContext16key_strn_to_cstr17hb529d0c5fe367882E>
 8006fd8:	9008      	str	r0, [sp, #32]
 8006fda:	e7ff      	b.n	8006fdc <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_text_string17h9e175e462a901a28E+0x30>
        let value_cstr: *const u8 = self.value_strn_to_cstr(value);
 8006fdc:	9804      	ldr	r0, [sp, #16]
 8006fde:	9906      	ldr	r1, [sp, #24]
 8006fe0:	f000 f835 	bl	800704e <_ZN6mynewt8encoding12coap_context11CoapContext18value_strn_to_cstr17h9e0d49dc0d23751dE>
 8006fe4:	9009      	str	r0, [sp, #36]	; 0x24
 8006fe6:	e7ff      	b.n	8006fe8 <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_text_string17h9e175e462a901a28E+0x3c>
                notused,
 8006fe8:	9807      	ldr	r0, [sp, #28]
                key_cstr as *const c_char,
 8006fea:	9908      	ldr	r1, [sp, #32]
                value_cstr as *const c_char
 8006fec:	9a09      	ldr	r2, [sp, #36]	; 0x24
            mynewt_rust::json_helper_set_text_string(
 8006fee:	f007 ff07 	bl	800ee00 <json_helper_set_text_string>
 8006ff2:	e7ff      	b.n	8006ff4 <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_text_string17h9e175e462a901a28E+0x48>
    }
 8006ff4:	b00a      	add	sp, #40	; 0x28
 8006ff6:	bd80      	pop	{r7, pc}

08006ff8 <_ZN6mynewt8encoding12coap_context11CoapContext16key_strn_to_cstr17hb529d0c5fe367882E>:
    fn key_strn_to_cstr(&mut self, key: &Strn) -> *const u8 {
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b08a      	sub	sp, #40	; 0x28
 8006ffc:	460a      	mov	r2, r1
 8006ffe:	4603      	mov	r3, r0
 8007000:	9004      	str	r0, [sp, #16]
 8007002:	9105      	str	r1, [sp, #20]
            StrnRep::ByteStr(bs) => { self.key_to_cstr(bs) }
 8007004:	9805      	ldr	r0, [sp, #20]
 8007006:	7800      	ldrb	r0, [r0, #0]
 8007008:	07c1      	lsls	r1, r0, #31
 800700a:	2900      	cmp	r1, #0
 800700c:	9203      	str	r2, [sp, #12]
 800700e:	9302      	str	r3, [sp, #8]
 8007010:	9001      	str	r0, [sp, #4]
 8007012:	d006      	beq.n	8007022 <_ZN6mynewt8encoding12coap_context11CoapContext16key_strn_to_cstr17hb529d0c5fe367882E+0x2a>
 8007014:	e7ff      	b.n	8007016 <_ZN6mynewt8encoding12coap_context11CoapContext16key_strn_to_cstr17hb529d0c5fe367882E+0x1e>
 8007016:	9801      	ldr	r0, [sp, #4]
 8007018:	b2c1      	uxtb	r1, r0
 800701a:	2901      	cmp	r1, #1
 800701c:	d00e      	beq.n	800703c <_ZN6mynewt8encoding12coap_context11CoapContext16key_strn_to_cstr17hb529d0c5fe367882E+0x44>
 800701e:	e7ff      	b.n	8007020 <_ZN6mynewt8encoding12coap_context11CoapContext16key_strn_to_cstr17hb529d0c5fe367882E+0x28>
    }
 8007020:	defe      	udf	#254	; 0xfe
            StrnRep::ByteStr(bs) => { self.key_to_cstr(bs) }
 8007022:	9805      	ldr	r0, [sp, #20]
 8007024:	6841      	ldr	r1, [r0, #4]
 8007026:	6880      	ldr	r0, [r0, #8]
 8007028:	9107      	str	r1, [sp, #28]
 800702a:	9008      	str	r0, [sp, #32]
 800702c:	9804      	ldr	r0, [sp, #16]
 800702e:	9907      	ldr	r1, [sp, #28]
 8007030:	9a08      	ldr	r2, [sp, #32]
 8007032:	f000 f837 	bl	80070a4 <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17h8c654d4708d2c2d0E>
 8007036:	9006      	str	r0, [sp, #24]
 8007038:	e7ff      	b.n	800703a <_ZN6mynewt8encoding12coap_context11CoapContext16key_strn_to_cstr17hb529d0c5fe367882E+0x42>
        match key.rep {
 800703a:	e005      	b.n	8007048 <_ZN6mynewt8encoding12coap_context11CoapContext16key_strn_to_cstr17hb529d0c5fe367882E+0x50>
            StrnRep::CStr(cstr)  => { cstr }
 800703c:	9805      	ldr	r0, [sp, #20]
 800703e:	6840      	ldr	r0, [r0, #4]
 8007040:	9009      	str	r0, [sp, #36]	; 0x24
 8007042:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007044:	9006      	str	r0, [sp, #24]
        match key.rep {
 8007046:	e7ff      	b.n	8007048 <_ZN6mynewt8encoding12coap_context11CoapContext16key_strn_to_cstr17hb529d0c5fe367882E+0x50>
    }
 8007048:	9806      	ldr	r0, [sp, #24]
 800704a:	b00a      	add	sp, #40	; 0x28
 800704c:	bd80      	pop	{r7, pc}

0800704e <_ZN6mynewt8encoding12coap_context11CoapContext18value_strn_to_cstr17h9e0d49dc0d23751dE>:
    fn value_strn_to_cstr(&mut self, value: &Strn) -> *const u8 {
 800704e:	b580      	push	{r7, lr}
 8007050:	b08a      	sub	sp, #40	; 0x28
 8007052:	460a      	mov	r2, r1
 8007054:	4603      	mov	r3, r0
 8007056:	9004      	str	r0, [sp, #16]
 8007058:	9105      	str	r1, [sp, #20]
            StrnRep::ByteStr(bs) => { self.value_to_cstr(bs) }
 800705a:	9805      	ldr	r0, [sp, #20]
 800705c:	7800      	ldrb	r0, [r0, #0]
 800705e:	07c1      	lsls	r1, r0, #31
 8007060:	2900      	cmp	r1, #0
 8007062:	9203      	str	r2, [sp, #12]
 8007064:	9302      	str	r3, [sp, #8]
 8007066:	9001      	str	r0, [sp, #4]
 8007068:	d006      	beq.n	8007078 <_ZN6mynewt8encoding12coap_context11CoapContext18value_strn_to_cstr17h9e0d49dc0d23751dE+0x2a>
 800706a:	e7ff      	b.n	800706c <_ZN6mynewt8encoding12coap_context11CoapContext18value_strn_to_cstr17h9e0d49dc0d23751dE+0x1e>
 800706c:	9801      	ldr	r0, [sp, #4]
 800706e:	b2c1      	uxtb	r1, r0
 8007070:	2901      	cmp	r1, #1
 8007072:	d00e      	beq.n	8007092 <_ZN6mynewt8encoding12coap_context11CoapContext18value_strn_to_cstr17h9e0d49dc0d23751dE+0x44>
 8007074:	e7ff      	b.n	8007076 <_ZN6mynewt8encoding12coap_context11CoapContext18value_strn_to_cstr17h9e0d49dc0d23751dE+0x28>
    }
 8007076:	defe      	udf	#254	; 0xfe
            StrnRep::ByteStr(bs) => { self.value_to_cstr(bs) }
 8007078:	9805      	ldr	r0, [sp, #20]
 800707a:	6841      	ldr	r1, [r0, #4]
 800707c:	6880      	ldr	r0, [r0, #8]
 800707e:	9107      	str	r1, [sp, #28]
 8007080:	9008      	str	r0, [sp, #32]
 8007082:	9804      	ldr	r0, [sp, #16]
 8007084:	9907      	ldr	r1, [sp, #28]
 8007086:	9a08      	ldr	r2, [sp, #32]
 8007088:	f000 f881 	bl	800718e <_ZN6mynewt8encoding12coap_context11CoapContext13value_to_cstr17h159023eafb6861b2E>
 800708c:	9006      	str	r0, [sp, #24]
 800708e:	e7ff      	b.n	8007090 <_ZN6mynewt8encoding12coap_context11CoapContext18value_strn_to_cstr17h9e0d49dc0d23751dE+0x42>
        match value.rep {
 8007090:	e005      	b.n	800709e <_ZN6mynewt8encoding12coap_context11CoapContext18value_strn_to_cstr17h9e0d49dc0d23751dE+0x50>
            StrnRep::CStr(cstr)  => { cstr }
 8007092:	9805      	ldr	r0, [sp, #20]
 8007094:	6840      	ldr	r0, [r0, #4]
 8007096:	9009      	str	r0, [sp, #36]	; 0x24
 8007098:	9809      	ldr	r0, [sp, #36]	; 0x24
 800709a:	9006      	str	r0, [sp, #24]
        match value.rep {
 800709c:	e7ff      	b.n	800709e <_ZN6mynewt8encoding12coap_context11CoapContext18value_strn_to_cstr17h9e0d49dc0d23751dE+0x50>
    }
 800709e:	9806      	ldr	r0, [sp, #24]
 80070a0:	b00a      	add	sp, #40	; 0x28
 80070a2:	bd80      	pop	{r7, pc}

080070a4 <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17h8c654d4708d2c2d0E>:
    pub fn key_to_cstr(&mut self, s: &[u8]) -> *const u8 {                
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b090      	sub	sp, #64	; 0x40
 80070a8:	4613      	mov	r3, r2
 80070aa:	468c      	mov	ip, r1
 80070ac:	4686      	mov	lr, r0
 80070ae:	900a      	str	r0, [sp, #40]	; 0x28
 80070b0:	910b      	str	r1, [sp, #44]	; 0x2c
 80070b2:	920c      	str	r2, [sp, #48]	; 0x30
        if s.last() == Some(&0) { return s.as_ptr() as *const u8; }
 80070b4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80070b6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80070b8:	9309      	str	r3, [sp, #36]	; 0x24
 80070ba:	f8cd c020 	str.w	ip, [sp, #32]
 80070be:	f8cd e01c 	str.w	lr, [sp, #28]
 80070c2:	f7fe fd2f 	bl	8005b24 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h9f79003d40cdc30eE>
 80070c6:	900e      	str	r0, [sp, #56]	; 0x38
 80070c8:	e7ff      	b.n	80070ca <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17h8c654d4708d2c2d0E+0x26>
 80070ca:	f246 3118 	movw	r1, #25368	; 0x6318
 80070ce:	f6c0 0101 	movt	r1, #2049	; 0x801
 80070d2:	a80e      	add	r0, sp, #56	; 0x38
 80070d4:	f7fe f838 	bl	8005148 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17h70df41bf340d2af5E>
 80070d8:	9006      	str	r0, [sp, #24]
 80070da:	e7ff      	b.n	80070dc <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17h8c654d4708d2c2d0E+0x38>
 80070dc:	9806      	ldr	r0, [sp, #24]
 80070de:	07c1      	lsls	r1, r0, #31
 80070e0:	2900      	cmp	r1, #0
 80070e2:	d00a      	beq.n	80070fa <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17h8c654d4708d2c2d0E+0x56>
 80070e4:	e7ff      	b.n	80070e6 <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17h8c654d4708d2c2d0E+0x42>
 80070e6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80070e8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80070ea:	f7ff fe7d 	bl	8006de8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hdef04f6d8168bdb2E>
 80070ee:	900d      	str	r0, [sp, #52]	; 0x34
 80070f0:	e7ff      	b.n	80070f2 <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17h8c654d4708d2c2d0E+0x4e>
 80070f2:	e7ff      	b.n	80070f4 <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17h8c654d4708d2c2d0E+0x50>
    }
 80070f4:	980d      	ldr	r0, [sp, #52]	; 0x34
 80070f6:	b010      	add	sp, #64	; 0x40
 80070f8:	bd80      	pop	{r7, pc}
        assert!(s.len() < COAP_KEY_SIZE, "big key");  //  Key too long
 80070fa:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80070fc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80070fe:	f7ff fe65 	bl	8006dcc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h12b66ceea47b68d2E>
 8007102:	9005      	str	r0, [sp, #20]
 8007104:	e7ff      	b.n	8007106 <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17h8c654d4708d2c2d0E+0x62>
 8007106:	9805      	ldr	r0, [sp, #20]
 8007108:	2820      	cmp	r0, #32
 800710a:	d307      	bcc.n	800711c <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17h8c654d4708d2c2d0E+0x78>
 800710c:	e7ff      	b.n	800710e <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17h8c654d4708d2c2d0E+0x6a>
 800710e:	f246 3024 	movw	r0, #25380	; 0x6324
 8007112:	f6c0 0001 	movt	r0, #2049	; 0x801
 8007116:	f001 faba 	bl	800868e <_ZN4core9panicking5panic17h138a849f37d3ac2dE>
 800711a:	defe      	udf	#254	; 0xfe
        self.key_buffer[..s.len()].copy_from_slice(s);
 800711c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800711e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007120:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007122:	9004      	str	r0, [sp, #16]
 8007124:	4608      	mov	r0, r1
 8007126:	4611      	mov	r1, r2
 8007128:	f7ff fe50 	bl	8006dcc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h12b66ceea47b68d2E>
 800712c:	9003      	str	r0, [sp, #12]
 800712e:	e7ff      	b.n	8007130 <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17h8c654d4708d2c2d0E+0x8c>
 8007130:	9803      	ldr	r0, [sp, #12]
 8007132:	900f      	str	r0, [sp, #60]	; 0x3c
 8007134:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007136:	2120      	movs	r1, #32
 8007138:	9804      	ldr	r0, [sp, #16]
 800713a:	f7fe fd30 	bl	8005b9e <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17h67eed304dd30c897E>
 800713e:	9002      	str	r0, [sp, #8]
 8007140:	9101      	str	r1, [sp, #4]
 8007142:	e7ff      	b.n	8007144 <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17h8c654d4708d2c2d0E+0xa0>
 8007144:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007146:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007148:	9802      	ldr	r0, [sp, #8]
 800714a:	9901      	ldr	r1, [sp, #4]
 800714c:	f7fe fc2b 	bl	80059a6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17h67f17cd2efb0b422E>
 8007150:	e7ff      	b.n	8007152 <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17h8c654d4708d2c2d0E+0xae>
        self.key_buffer[s.len()] = 0;
 8007152:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007154:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007156:	f7ff fe39 	bl	8006dcc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h12b66ceea47b68d2E>
 800715a:	9000      	str	r0, [sp, #0]
 800715c:	e7ff      	b.n	800715e <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17h8c654d4708d2c2d0E+0xba>
 800715e:	9800      	ldr	r0, [sp, #0]
 8007160:	281f      	cmp	r0, #31
 8007162:	d80b      	bhi.n	800717c <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17h8c654d4708d2c2d0E+0xd8>
 8007164:	e7ff      	b.n	8007166 <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17h8c654d4708d2c2d0E+0xc2>
 8007166:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007168:	2100      	movs	r1, #0
 800716a:	9a00      	ldr	r2, [sp, #0]
 800716c:	5481      	strb	r1, [r0, r2]
        self.key_buffer.as_ptr() as *const u8
 800716e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007170:	2120      	movs	r1, #32
 8007172:	f7ff fe39 	bl	8006de8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hdef04f6d8168bdb2E>
 8007176:	900d      	str	r0, [sp, #52]	; 0x34
 8007178:	e7ff      	b.n	800717a <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17h8c654d4708d2c2d0E+0xd6>
    }
 800717a:	e7bb      	b.n	80070f4 <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17h8c654d4708d2c2d0E+0x50>
        self.key_buffer[s.len()] = 0;
 800717c:	f246 3068 	movw	r0, #25448	; 0x6368
 8007180:	f6c0 0001 	movt	r0, #2049	; 0x801
 8007184:	2220      	movs	r2, #32
 8007186:	9900      	ldr	r1, [sp, #0]
 8007188:	f001 fa9e 	bl	80086c8 <_ZN4core9panicking18panic_bounds_check17h794d18f1ca9e50a8E>
 800718c:	defe      	udf	#254	; 0xfe

0800718e <_ZN6mynewt8encoding12coap_context11CoapContext13value_to_cstr17h159023eafb6861b2E>:
    pub fn value_to_cstr(&mut self, s: &[u8]) -> *const u8 {
 800718e:	b580      	push	{r7, lr}
 8007190:	b090      	sub	sp, #64	; 0x40
 8007192:	4613      	mov	r3, r2
 8007194:	468c      	mov	ip, r1
 8007196:	4686      	mov	lr, r0
 8007198:	900a      	str	r0, [sp, #40]	; 0x28
 800719a:	910b      	str	r1, [sp, #44]	; 0x2c
 800719c:	920c      	str	r2, [sp, #48]	; 0x30
        if s.last() == Some(&0) { return s.as_ptr() as *const u8; }
 800719e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80071a0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80071a2:	9309      	str	r3, [sp, #36]	; 0x24
 80071a4:	f8cd c020 	str.w	ip, [sp, #32]
 80071a8:	f8cd e01c 	str.w	lr, [sp, #28]
 80071ac:	f7fe fcba 	bl	8005b24 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h9f79003d40cdc30eE>
 80071b0:	900e      	str	r0, [sp, #56]	; 0x38
 80071b2:	e7ff      	b.n	80071b4 <_ZN6mynewt8encoding12coap_context11CoapContext13value_to_cstr17h159023eafb6861b2E+0x26>
 80071b4:	f246 3118 	movw	r1, #25368	; 0x6318
 80071b8:	f6c0 0101 	movt	r1, #2049	; 0x801
 80071bc:	a80e      	add	r0, sp, #56	; 0x38
 80071be:	f7fd ffc3 	bl	8005148 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17h70df41bf340d2af5E>
 80071c2:	9006      	str	r0, [sp, #24]
 80071c4:	e7ff      	b.n	80071c6 <_ZN6mynewt8encoding12coap_context11CoapContext13value_to_cstr17h159023eafb6861b2E+0x38>
 80071c6:	9806      	ldr	r0, [sp, #24]
 80071c8:	07c1      	lsls	r1, r0, #31
 80071ca:	2900      	cmp	r1, #0
 80071cc:	d00a      	beq.n	80071e4 <_ZN6mynewt8encoding12coap_context11CoapContext13value_to_cstr17h159023eafb6861b2E+0x56>
 80071ce:	e7ff      	b.n	80071d0 <_ZN6mynewt8encoding12coap_context11CoapContext13value_to_cstr17h159023eafb6861b2E+0x42>
 80071d0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80071d2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80071d4:	f7ff fe08 	bl	8006de8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hdef04f6d8168bdb2E>
 80071d8:	900d      	str	r0, [sp, #52]	; 0x34
 80071da:	e7ff      	b.n	80071dc <_ZN6mynewt8encoding12coap_context11CoapContext13value_to_cstr17h159023eafb6861b2E+0x4e>
 80071dc:	e7ff      	b.n	80071de <_ZN6mynewt8encoding12coap_context11CoapContext13value_to_cstr17h159023eafb6861b2E+0x50>
    }
 80071de:	980d      	ldr	r0, [sp, #52]	; 0x34
 80071e0:	b010      	add	sp, #64	; 0x40
 80071e2:	bd80      	pop	{r7, pc}
        assert!(s.len() < COAP_VALUE_SIZE, "big value");  //  Value too long
 80071e4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80071e6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80071e8:	f7ff fdf0 	bl	8006dcc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h12b66ceea47b68d2E>
 80071ec:	9005      	str	r0, [sp, #20]
 80071ee:	e7ff      	b.n	80071f0 <_ZN6mynewt8encoding12coap_context11CoapContext13value_to_cstr17h159023eafb6861b2E+0x62>
 80071f0:	9805      	ldr	r0, [sp, #20]
 80071f2:	2820      	cmp	r0, #32
 80071f4:	d307      	bcc.n	8007206 <_ZN6mynewt8encoding12coap_context11CoapContext13value_to_cstr17h159023eafb6861b2E+0x78>
 80071f6:	e7ff      	b.n	80071f8 <_ZN6mynewt8encoding12coap_context11CoapContext13value_to_cstr17h159023eafb6861b2E+0x6a>
 80071f8:	f246 3084 	movw	r0, #25476	; 0x6384
 80071fc:	f6c0 0001 	movt	r0, #2049	; 0x801
 8007200:	f001 fa45 	bl	800868e <_ZN4core9panicking5panic17h138a849f37d3ac2dE>
 8007204:	defe      	udf	#254	; 0xfe
        self.value_buffer[..s.len()].copy_from_slice(s);
 8007206:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007208:	3020      	adds	r0, #32
 800720a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800720c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800720e:	9004      	str	r0, [sp, #16]
 8007210:	4608      	mov	r0, r1
 8007212:	4611      	mov	r1, r2
 8007214:	f7ff fdda 	bl	8006dcc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h12b66ceea47b68d2E>
 8007218:	9003      	str	r0, [sp, #12]
 800721a:	e7ff      	b.n	800721c <_ZN6mynewt8encoding12coap_context11CoapContext13value_to_cstr17h159023eafb6861b2E+0x8e>
 800721c:	9803      	ldr	r0, [sp, #12]
 800721e:	900f      	str	r0, [sp, #60]	; 0x3c
 8007220:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007222:	2120      	movs	r1, #32
 8007224:	9804      	ldr	r0, [sp, #16]
 8007226:	f7fe fcba 	bl	8005b9e <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17h67eed304dd30c897E>
 800722a:	9002      	str	r0, [sp, #8]
 800722c:	9101      	str	r1, [sp, #4]
 800722e:	e7ff      	b.n	8007230 <_ZN6mynewt8encoding12coap_context11CoapContext13value_to_cstr17h159023eafb6861b2E+0xa2>
 8007230:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007232:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007234:	9802      	ldr	r0, [sp, #8]
 8007236:	9901      	ldr	r1, [sp, #4]
 8007238:	f7fe fbb5 	bl	80059a6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17h67f17cd2efb0b422E>
 800723c:	e7ff      	b.n	800723e <_ZN6mynewt8encoding12coap_context11CoapContext13value_to_cstr17h159023eafb6861b2E+0xb0>
        self.value_buffer[s.len()] = 0;
 800723e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007240:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007242:	f7ff fdc3 	bl	8006dcc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h12b66ceea47b68d2E>
 8007246:	9000      	str	r0, [sp, #0]
 8007248:	e7ff      	b.n	800724a <_ZN6mynewt8encoding12coap_context11CoapContext13value_to_cstr17h159023eafb6861b2E+0xbc>
 800724a:	9800      	ldr	r0, [sp, #0]
 800724c:	281f      	cmp	r0, #31
 800724e:	d80e      	bhi.n	800726e <_ZN6mynewt8encoding12coap_context11CoapContext13value_to_cstr17h159023eafb6861b2E+0xe0>
 8007250:	e7ff      	b.n	8007252 <_ZN6mynewt8encoding12coap_context11CoapContext13value_to_cstr17h159023eafb6861b2E+0xc4>
 8007252:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007254:	9900      	ldr	r1, [sp, #0]
 8007256:	4408      	add	r0, r1
 8007258:	2200      	movs	r2, #0
 800725a:	f880 2020 	strb.w	r2, [r0, #32]
        self.value_buffer.as_ptr() as *const u8
 800725e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007260:	3020      	adds	r0, #32
 8007262:	2120      	movs	r1, #32
 8007264:	f7ff fdc0 	bl	8006de8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hdef04f6d8168bdb2E>
 8007268:	900d      	str	r0, [sp, #52]	; 0x34
 800726a:	e7ff      	b.n	800726c <_ZN6mynewt8encoding12coap_context11CoapContext13value_to_cstr17h159023eafb6861b2E+0xde>
    }
 800726c:	e7b7      	b.n	80071de <_ZN6mynewt8encoding12coap_context11CoapContext13value_to_cstr17h159023eafb6861b2E+0x50>
        self.value_buffer[s.len()] = 0;
 800726e:	f246 309c 	movw	r0, #25500	; 0x639c
 8007272:	f6c0 0001 	movt	r0, #2049	; 0x801
 8007276:	2220      	movs	r2, #32
 8007278:	9900      	ldr	r1, [sp, #0]
 800727a:	f001 fa25 	bl	80086c8 <_ZN4core9panicking18panic_bounds_check17h794d18f1ca9e50a8E>
 800727e:	defe      	udf	#254	; 0xfe

08007280 <_ZN6mynewt8encoding12coap_context11CoapContext4fail17h060d8a703f8f2c9bE>:
    pub fn fail(&mut self, err: CoapError) {
 8007280:	b5b0      	push	{r4, r5, r7, lr}
 8007282:	b0aa      	sub	sp, #168	; 0xa8
 8007284:	460a      	mov	r2, r1
 8007286:	4603      	mov	r3, r0
 8007288:	900a      	str	r0, [sp, #40]	; 0x28
 800728a:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 800728e:	f10d 002f 	add.w	r0, sp, #47	; 0x2f
        assert_eq!(err, CoapError::OK, "enc fail");
 8007292:	900c      	str	r0, [sp, #48]	; 0x30
 8007294:	f246 3014 	movw	r0, #25364	; 0x6314
 8007298:	f6c0 0001 	movt	r0, #2049	; 0x801
 800729c:	900d      	str	r0, [sp, #52]	; 0x34
 800729e:	980c      	ldr	r0, [sp, #48]	; 0x30
 80072a0:	900e      	str	r0, [sp, #56]	; 0x38
 80072a2:	980d      	ldr	r0, [sp, #52]	; 0x34
 80072a4:	900f      	str	r0, [sp, #60]	; 0x3c
 80072a6:	980e      	ldr	r0, [sp, #56]	; 0x38
 80072a8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80072aa:	9209      	str	r2, [sp, #36]	; 0x24
 80072ac:	9308      	str	r3, [sp, #32]
 80072ae:	f000 f88d 	bl	80073cc <_ZN82_$LT$mynewt..encoding..coap_context..CoapError$u20$as$u20$core..cmp..PartialEq$GT$2eq17h6da722bd75e9643bE>
 80072b2:	9007      	str	r0, [sp, #28]
 80072b4:	e7ff      	b.n	80072b6 <_ZN6mynewt8encoding12coap_context11CoapContext4fail17h060d8a703f8f2c9bE+0x36>
 80072b6:	9807      	ldr	r0, [sp, #28]
 80072b8:	07c1      	lsls	r1, r0, #31
 80072ba:	2900      	cmp	r1, #0
 80072bc:	d163      	bne.n	8007386 <_ZN6mynewt8encoding12coap_context11CoapContext4fail17h060d8a703f8f2c9bE+0x106>
 80072be:	e7ff      	b.n	80072c0 <_ZN6mynewt8encoding12coap_context11CoapContext4fail17h060d8a703f8f2c9bE+0x40>
 80072c0:	980e      	ldr	r0, [sp, #56]	; 0x38
 80072c2:	901f      	str	r0, [sp, #124]	; 0x7c
 80072c4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80072c6:	9020      	str	r0, [sp, #128]	; 0x80
 80072c8:	4668      	mov	r0, sp
 80072ca:	2100      	movs	r1, #0
 80072cc:	6001      	str	r1, [r0, #0]
 80072ce:	f246 4108 	movw	r1, #25608	; 0x6408
 80072d2:	f6c0 0101 	movt	r1, #2049	; 0x801
 80072d6:	f246 4310 	movw	r3, #25616	; 0x6410
 80072da:	f6c0 0301 	movt	r3, #2049	; 0x801
 80072de:	a821      	add	r0, sp, #132	; 0x84
 80072e0:	2201      	movs	r2, #1
 80072e2:	f7fd fd53 	bl	8004d8c <_ZN4core3fmt9Arguments6new_v117h7b18277453f88ac4E>
 80072e6:	e7ff      	b.n	80072e8 <_ZN6mynewt8encoding12coap_context11CoapContext4fail17h060d8a703f8f2c9bE+0x68>
 80072e8:	a81f      	add	r0, sp, #124	; 0x7c
 80072ea:	901c      	str	r0, [sp, #112]	; 0x70
 80072ec:	a820      	add	r0, sp, #128	; 0x80
 80072ee:	901d      	str	r0, [sp, #116]	; 0x74
 80072f0:	a821      	add	r0, sp, #132	; 0x84
 80072f2:	901e      	str	r0, [sp, #120]	; 0x78
 80072f4:	981c      	ldr	r0, [sp, #112]	; 0x70
 80072f6:	9027      	str	r0, [sp, #156]	; 0x9c
 80072f8:	981d      	ldr	r0, [sp, #116]	; 0x74
 80072fa:	9028      	str	r0, [sp, #160]	; 0xa0
 80072fc:	981e      	ldr	r0, [sp, #120]	; 0x78
 80072fe:	9029      	str	r0, [sp, #164]	; 0xa4
 8007300:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8007302:	f248 314b 	movw	r1, #33611	; 0x834b
 8007306:	f6c0 0100 	movt	r1, #2048	; 0x800
 800730a:	f7fd fcdb 	bl	8004cc4 <_ZN4core3fmt10ArgumentV13new17hd53ba6b62a3b9591E>
 800730e:	9006      	str	r0, [sp, #24]
 8007310:	9105      	str	r1, [sp, #20]
 8007312:	e7ff      	b.n	8007314 <_ZN6mynewt8encoding12coap_context11CoapContext4fail17h060d8a703f8f2c9bE+0x94>
 8007314:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8007316:	f248 314b 	movw	r1, #33611	; 0x834b
 800731a:	f6c0 0100 	movt	r1, #2048	; 0x800
 800731e:	f7fd fcd1 	bl	8004cc4 <_ZN4core3fmt10ArgumentV13new17hd53ba6b62a3b9591E>
 8007322:	9004      	str	r0, [sp, #16]
 8007324:	9103      	str	r1, [sp, #12]
 8007326:	e7ff      	b.n	8007328 <_ZN6mynewt8encoding12coap_context11CoapContext4fail17h060d8a703f8f2c9bE+0xa8>
 8007328:	9829      	ldr	r0, [sp, #164]	; 0xa4
 800732a:	f249 0185 	movw	r1, #36997	; 0x9085
 800732e:	f6c0 0100 	movt	r1, #2048	; 0x800
 8007332:	f7fd fd12 	bl	8004d5a <_ZN4core3fmt10ArgumentV13new17hf7ba76b3ae396a12E>
 8007336:	9002      	str	r0, [sp, #8]
 8007338:	9101      	str	r1, [sp, #4]
 800733a:	e7ff      	b.n	800733c <_ZN6mynewt8encoding12coap_context11CoapContext4fail17h060d8a703f8f2c9bE+0xbc>
 800733c:	9806      	ldr	r0, [sp, #24]
 800733e:	9016      	str	r0, [sp, #88]	; 0x58
 8007340:	9905      	ldr	r1, [sp, #20]
 8007342:	9117      	str	r1, [sp, #92]	; 0x5c
 8007344:	9a04      	ldr	r2, [sp, #16]
 8007346:	9218      	str	r2, [sp, #96]	; 0x60
 8007348:	9b03      	ldr	r3, [sp, #12]
 800734a:	9319      	str	r3, [sp, #100]	; 0x64
 800734c:	f8dd c008 	ldr.w	ip, [sp, #8]
 8007350:	f8cd c068 	str.w	ip, [sp, #104]	; 0x68
 8007354:	f8dd e004 	ldr.w	lr, [sp, #4]
 8007358:	f8cd e06c 	str.w	lr, [sp, #108]	; 0x6c
 800735c:	466c      	mov	r4, sp
 800735e:	2503      	movs	r5, #3
 8007360:	6025      	str	r5, [r4, #0]
 8007362:	f246 31e8 	movw	r1, #25576	; 0x63e8
 8007366:	f6c0 0101 	movt	r1, #2049	; 0x801
 800736a:	a810      	add	r0, sp, #64	; 0x40
 800736c:	ab16      	add	r3, sp, #88	; 0x58
 800736e:	462a      	mov	r2, r5
 8007370:	f7fd fd0c 	bl	8004d8c <_ZN4core3fmt9Arguments6new_v117h7b18277453f88ac4E>
 8007374:	e7ff      	b.n	8007376 <_ZN6mynewt8encoding12coap_context11CoapContext4fail17h060d8a703f8f2c9bE+0xf6>
 8007376:	f246 4110 	movw	r1, #25616	; 0x6410
 800737a:	f6c0 0101 	movt	r1, #2049	; 0x801
 800737e:	a810      	add	r0, sp, #64	; 0x40
 8007380:	f001 f9c2 	bl	8008708 <_ZN4core9panicking9panic_fmt17hbfe32cf8392a510cE>
 8007384:	defe      	udf	#254	; 0xfe
    }
 8007386:	b02a      	add	sp, #168	; 0xa8
 8007388:	bdb0      	pop	{r4, r5, r7, pc}

0800738a <_ZN6mynewt8encoding12coap_context11CoapContext11to_void_ptr17h69d954fe1672413fE>:
    pub fn to_void_ptr(&mut self) -> *mut c_void {
 800738a:	b083      	sub	sp, #12
 800738c:	4601      	mov	r1, r0
 800738e:	9001      	str	r0, [sp, #4]
        let ptr: *mut CoapContext = self;
 8007390:	9801      	ldr	r0, [sp, #4]
 8007392:	9002      	str	r0, [sp, #8]
        ptr as *mut c_void
 8007394:	9802      	ldr	r0, [sp, #8]
    }
 8007396:	9100      	str	r1, [sp, #0]
 8007398:	b003      	add	sp, #12
 800739a:	4770      	bx	lr

0800739c <_ZN75_$LT$str$u20$as$u20$mynewt..encoding..coap_context..ToBytesOptionalNull$GT$21to_bytes_optional_nul17hb05d971bf5bb80b5E>:
    fn to_bytes_optional_nul(&self) -> &[u8] {
 800739c:	b08a      	sub	sp, #40	; 0x28
 800739e:	460a      	mov	r2, r1
 80073a0:	4603      	mov	r3, r0
 80073a2:	9004      	str	r0, [sp, #16]
 80073a4:	9105      	str	r1, [sp, #20]
        self.as_bytes()
 80073a6:	9804      	ldr	r0, [sp, #16]
 80073a8:	9905      	ldr	r1, [sp, #20]
 80073aa:	9006      	str	r0, [sp, #24]
 80073ac:	9107      	str	r1, [sp, #28]
 80073ae:	9806      	ldr	r0, [sp, #24]
 80073b0:	9907      	ldr	r1, [sp, #28]
 80073b2:	9008      	str	r0, [sp, #32]
 80073b4:	9109      	str	r1, [sp, #36]	; 0x24
 80073b6:	9808      	ldr	r0, [sp, #32]
 80073b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80073ba:	9203      	str	r2, [sp, #12]
 80073bc:	9302      	str	r3, [sp, #8]
 80073be:	9001      	str	r0, [sp, #4]
 80073c0:	9100      	str	r1, [sp, #0]
 80073c2:	e7ff      	b.n	80073c4 <_ZN75_$LT$str$u20$as$u20$mynewt..encoding..coap_context..ToBytesOptionalNull$GT$21to_bytes_optional_nul17hb05d971bf5bb80b5E+0x28>
    }
 80073c4:	9801      	ldr	r0, [sp, #4]
 80073c6:	9900      	ldr	r1, [sp, #0]
 80073c8:	b00a      	add	sp, #40	; 0x28
 80073ca:	4770      	bx	lr

080073cc <_ZN82_$LT$mynewt..encoding..coap_context..CoapError$u20$as$u20$core..cmp..PartialEq$GT$2eq17h6da722bd75e9643bE>:
#[derive(Debug, PartialEq)]
 80073cc:	b092      	sub	sp, #72	; 0x48
 80073ce:	460a      	mov	r2, r1
 80073d0:	4603      	mov	r3, r0
 80073d2:	9007      	str	r0, [sp, #28]
 80073d4:	9108      	str	r1, [sp, #32]
 80073d6:	9807      	ldr	r0, [sp, #28]
 80073d8:	7800      	ldrb	r0, [r0, #0]
 80073da:	2100      	movs	r1, #0
 80073dc:	910f      	str	r1, [sp, #60]	; 0x3c
 80073de:	900e      	str	r0, [sp, #56]	; 0x38
 80073e0:	980e      	ldr	r0, [sp, #56]	; 0x38
 80073e2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80073e4:	9206      	str	r2, [sp, #24]
 80073e6:	9305      	str	r3, [sp, #20]
 80073e8:	9004      	str	r0, [sp, #16]
 80073ea:	9103      	str	r1, [sp, #12]
 80073ec:	e7ff      	b.n	80073ee <_ZN82_$LT$mynewt..encoding..coap_context..CoapError$u20$as$u20$core..cmp..PartialEq$GT$2eq17h6da722bd75e9643bE+0x22>
 80073ee:	9804      	ldr	r0, [sp, #16]
 80073f0:	900a      	str	r0, [sp, #40]	; 0x28
 80073f2:	9908      	ldr	r1, [sp, #32]
 80073f4:	7809      	ldrb	r1, [r1, #0]
 80073f6:	2200      	movs	r2, #0
 80073f8:	9211      	str	r2, [sp, #68]	; 0x44
 80073fa:	9110      	str	r1, [sp, #64]	; 0x40
 80073fc:	9910      	ldr	r1, [sp, #64]	; 0x40
 80073fe:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007400:	9102      	str	r1, [sp, #8]
 8007402:	9201      	str	r2, [sp, #4]
 8007404:	e7ff      	b.n	8007406 <_ZN82_$LT$mynewt..encoding..coap_context..CoapError$u20$as$u20$core..cmp..PartialEq$GT$2eq17h6da722bd75e9643bE+0x3a>
 8007406:	9802      	ldr	r0, [sp, #8]
 8007408:	900b      	str	r0, [sp, #44]	; 0x2c
 800740a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800740c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800740e:	4291      	cmp	r1, r2
 8007410:	d108      	bne.n	8007424 <_ZN82_$LT$mynewt..encoding..coap_context..CoapError$u20$as$u20$core..cmp..PartialEq$GT$2eq17h6da722bd75e9643bE+0x58>
 8007412:	e7ff      	b.n	8007414 <_ZN82_$LT$mynewt..encoding..coap_context..CoapError$u20$as$u20$core..cmp..PartialEq$GT$2eq17h6da722bd75e9643bE+0x48>
 8007414:	9807      	ldr	r0, [sp, #28]
 8007416:	9908      	ldr	r1, [sp, #32]
 8007418:	900c      	str	r0, [sp, #48]	; 0x30
 800741a:	910d      	str	r1, [sp, #52]	; 0x34
 800741c:	2001      	movs	r0, #1
 800741e:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
 8007422:	e003      	b.n	800742c <_ZN82_$LT$mynewt..encoding..coap_context..CoapError$u20$as$u20$core..cmp..PartialEq$GT$2eq17h6da722bd75e9643bE+0x60>
 8007424:	2000      	movs	r0, #0
 8007426:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
 800742a:	e7ff      	b.n	800742c <_ZN82_$LT$mynewt..encoding..coap_context..CoapError$u20$as$u20$core..cmp..PartialEq$GT$2eq17h6da722bd75e9643bE+0x60>
 800742c:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
 8007430:	b012      	add	sp, #72	; 0x48
 8007432:	4770      	bx	lr

08007434 <_ZN78_$LT$mynewt..encoding..coap_context..CoapError$u20$as$u20$core..fmt..Debug$GT$3fmt17h06dcdae20cda8b1dE>:
 8007434:	b580      	push	{r7, lr}
 8007436:	b08e      	sub	sp, #56	; 0x38
 8007438:	460a      	mov	r2, r1
 800743a:	4603      	mov	r3, r0
 800743c:	9004      	str	r0, [sp, #16]
 800743e:	9105      	str	r1, [sp, #20]
 8007440:	9804      	ldr	r0, [sp, #16]
 8007442:	9007      	str	r0, [sp, #28]
 8007444:	9807      	ldr	r0, [sp, #28]
 8007446:	7800      	ldrb	r0, [r0, #0]
 8007448:	07c1      	lsls	r1, r0, #31
 800744a:	2900      	cmp	r1, #0
 800744c:	9203      	str	r2, [sp, #12]
 800744e:	9302      	str	r3, [sp, #8]
 8007450:	9001      	str	r0, [sp, #4]
 8007452:	d005      	beq.n	8007460 <_ZN78_$LT$mynewt..encoding..coap_context..CoapError$u20$as$u20$core..fmt..Debug$GT$3fmt17h06dcdae20cda8b1dE+0x2c>
 8007454:	e7ff      	b.n	8007456 <_ZN78_$LT$mynewt..encoding..coap_context..CoapError$u20$as$u20$core..fmt..Debug$GT$3fmt17h06dcdae20cda8b1dE+0x22>
 8007456:	9801      	ldr	r0, [sp, #4]
 8007458:	2801      	cmp	r0, #1
 800745a:	d012      	beq.n	8007482 <_ZN78_$LT$mynewt..encoding..coap_context..CoapError$u20$as$u20$core..fmt..Debug$GT$3fmt17h06dcdae20cda8b1dE+0x4e>
 800745c:	e7ff      	b.n	800745e <_ZN78_$LT$mynewt..encoding..coap_context..CoapError$u20$as$u20$core..fmt..Debug$GT$3fmt17h06dcdae20cda8b1dE+0x2a>
 800745e:	defe      	udf	#254	; 0xfe
 8007460:	9905      	ldr	r1, [sp, #20]
 8007462:	f246 422e 	movw	r2, #25646	; 0x642e
 8007466:	f6c0 0201 	movt	r2, #2049	; 0x801
 800746a:	a808      	add	r0, sp, #32
 800746c:	2302      	movs	r3, #2
 800746e:	f002 f9d3 	bl	8009818 <_ZN4core3fmt9Formatter11debug_tuple17hb44f73c94ff26e9bE>
 8007472:	e7ff      	b.n	8007474 <_ZN78_$LT$mynewt..encoding..coap_context..CoapError$u20$as$u20$core..fmt..Debug$GT$3fmt17h06dcdae20cda8b1dE+0x40>
 8007474:	a808      	add	r0, sp, #32
 8007476:	f001 fd5e 	bl	8008f36 <_ZN4core3fmt8builders10DebugTuple6finish17h7478dcd5620691a7E>
 800747a:	f88d 001b 	strb.w	r0, [sp, #27]
 800747e:	e7ff      	b.n	8007480 <_ZN78_$LT$mynewt..encoding..coap_context..CoapError$u20$as$u20$core..fmt..Debug$GT$3fmt17h06dcdae20cda8b1dE+0x4c>
 8007480:	e010      	b.n	80074a4 <_ZN78_$LT$mynewt..encoding..coap_context..CoapError$u20$as$u20$core..fmt..Debug$GT$3fmt17h06dcdae20cda8b1dE+0x70>
 8007482:	9905      	ldr	r1, [sp, #20]
 8007484:	f246 4220 	movw	r2, #25632	; 0x6420
 8007488:	f6c0 0201 	movt	r2, #2049	; 0x801
 800748c:	a80b      	add	r0, sp, #44	; 0x2c
 800748e:	230e      	movs	r3, #14
 8007490:	f002 f9c2 	bl	8009818 <_ZN4core3fmt9Formatter11debug_tuple17hb44f73c94ff26e9bE>
 8007494:	e7ff      	b.n	8007496 <_ZN78_$LT$mynewt..encoding..coap_context..CoapError$u20$as$u20$core..fmt..Debug$GT$3fmt17h06dcdae20cda8b1dE+0x62>
 8007496:	a80b      	add	r0, sp, #44	; 0x2c
 8007498:	f001 fd4d 	bl	8008f36 <_ZN4core3fmt8builders10DebugTuple6finish17h7478dcd5620691a7E>
 800749c:	f88d 001b 	strb.w	r0, [sp, #27]
 80074a0:	e7ff      	b.n	80074a2 <_ZN78_$LT$mynewt..encoding..coap_context..CoapError$u20$as$u20$core..fmt..Debug$GT$3fmt17h06dcdae20cda8b1dE+0x6e>
 80074a2:	e7ff      	b.n	80074a4 <_ZN78_$LT$mynewt..encoding..coap_context..CoapError$u20$as$u20$core..fmt..Debug$GT$3fmt17h06dcdae20cda8b1dE+0x70>
 80074a4:	f89d 001b 	ldrb.w	r0, [sp, #27]
 80074a8:	b00e      	add	sp, #56	; 0x38
 80074aa:	bd80      	pop	{r7, pc}

080074ac <_ZN47_$LT$u32$u20$as$u20$core..iter..range..Step$GT$9add_usize17he588ae2aecfa2f7eE>:
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b08a      	sub	sp, #40	; 0x28
 80074b0:	460a      	mov	r2, r1
 80074b2:	4603      	mov	r3, r0
 80074b4:	9003      	str	r0, [sp, #12]
 80074b6:	9104      	str	r1, [sp, #16]
 80074b8:	9804      	ldr	r0, [sp, #16]
 80074ba:	9202      	str	r2, [sp, #8]
 80074bc:	9301      	str	r3, [sp, #4]
 80074be:	f000 ffcc 	bl	800845a <_ZN4core3num18ptr_try_from_impls69_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u32$GT$8try_from17h3aea8e0368154f7bE>
 80074c2:	9108      	str	r1, [sp, #32]
 80074c4:	9007      	str	r0, [sp, #28]
 80074c6:	e7ff      	b.n	80074c8 <_ZN47_$LT$u32$u20$as$u20$core..iter..range..Step$GT$9add_usize17he588ae2aecfa2f7eE+0x1c>
 80074c8:	9807      	ldr	r0, [sp, #28]
 80074ca:	2800      	cmp	r0, #0
 80074cc:	9000      	str	r0, [sp, #0]
 80074ce:	d005      	beq.n	80074dc <_ZN47_$LT$u32$u20$as$u20$core..iter..range..Step$GT$9add_usize17he588ae2aecfa2f7eE+0x30>
 80074d0:	e7ff      	b.n	80074d2 <_ZN47_$LT$u32$u20$as$u20$core..iter..range..Step$GT$9add_usize17he588ae2aecfa2f7eE+0x26>
 80074d2:	9800      	ldr	r0, [sp, #0]
 80074d4:	2801      	cmp	r0, #1
 80074d6:	d00c      	beq.n	80074f2 <_ZN47_$LT$u32$u20$as$u20$core..iter..range..Step$GT$9add_usize17he588ae2aecfa2f7eE+0x46>
 80074d8:	e7ff      	b.n	80074da <_ZN47_$LT$u32$u20$as$u20$core..iter..range..Step$GT$9add_usize17he588ae2aecfa2f7eE+0x2e>
 80074da:	defe      	udf	#254	; 0xfe
 80074dc:	9808      	ldr	r0, [sp, #32]
 80074de:	9009      	str	r0, [sp, #36]	; 0x24
 80074e0:	9803      	ldr	r0, [sp, #12]
 80074e2:	6800      	ldr	r0, [r0, #0]
 80074e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80074e6:	f000 f8d2 	bl	800768e <_ZN4core3num21_$LT$impl$u20$u32$GT$11checked_add17h852543dd9c36f284E>
 80074ea:	9106      	str	r1, [sp, #24]
 80074ec:	9005      	str	r0, [sp, #20]
 80074ee:	e7ff      	b.n	80074f0 <_ZN47_$LT$u32$u20$as$u20$core..iter..range..Step$GT$9add_usize17he588ae2aecfa2f7eE+0x44>
 80074f0:	e002      	b.n	80074f8 <_ZN47_$LT$u32$u20$as$u20$core..iter..range..Step$GT$9add_usize17he588ae2aecfa2f7eE+0x4c>
 80074f2:	2000      	movs	r0, #0
 80074f4:	9005      	str	r0, [sp, #20]
 80074f6:	e7ff      	b.n	80074f8 <_ZN47_$LT$u32$u20$as$u20$core..iter..range..Step$GT$9add_usize17he588ae2aecfa2f7eE+0x4c>
 80074f8:	9805      	ldr	r0, [sp, #20]
 80074fa:	9906      	ldr	r1, [sp, #24]
 80074fc:	b00a      	add	sp, #40	; 0x28
 80074fe:	bd80      	pop	{r7, pc}

08007500 <_ZN6mynewt2hw10sensor_mgr14find_bydevname17h06b2c476f1bcc849E>:
    },
    Strn,
};

/// Returns an iterator of sensors that match the device name `devname`
pub fn find_bydevname(devname: &Strn) -> SensorsByDevname {
 8007500:	b580      	push	{r7, lr}
 8007502:	b088      	sub	sp, #32
 8007504:	460a      	mov	r2, r1
 8007506:	9104      	str	r1, [sp, #16]
    SensorsByDevname { 
        devname: *devname,
 8007508:	9904      	ldr	r1, [sp, #16]
 800750a:	680b      	ldr	r3, [r1, #0]
 800750c:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8007510:	6889      	ldr	r1, [r1, #8]
 8007512:	9107      	str	r1, [sp, #28]
 8007514:	f8cd c018 	str.w	ip, [sp, #24]
 8007518:	9305      	str	r3, [sp, #20]
        previous: core::ptr::null_mut()
 800751a:	9203      	str	r2, [sp, #12]
 800751c:	9002      	str	r0, [sp, #8]
 800751e:	f7fd ff44 	bl	80053aa <_ZN4core3ptr8null_mut17h57061ec19ef29f26E>
 8007522:	9001      	str	r0, [sp, #4]
 8007524:	e7ff      	b.n	8007526 <_ZN6mynewt2hw10sensor_mgr14find_bydevname17h06b2c476f1bcc849E+0x26>
    SensorsByDevname { 
 8007526:	9805      	ldr	r0, [sp, #20]
 8007528:	9906      	ldr	r1, [sp, #24]
 800752a:	9a07      	ldr	r2, [sp, #28]
 800752c:	9b02      	ldr	r3, [sp, #8]
 800752e:	609a      	str	r2, [r3, #8]
 8007530:	6059      	str	r1, [r3, #4]
 8007532:	6018      	str	r0, [r3, #0]
 8007534:	9801      	ldr	r0, [sp, #4]
 8007536:	60d8      	str	r0, [r3, #12]
    }
    // MynewtResult<*mut sensor>
}
 8007538:	b008      	add	sp, #32
 800753a:	bd80      	pop	{r7, pc}

0800753c <_ZN99_$LT$mynewt..hw..sensor_mgr..SensorsByDevname$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdf9b4b1bcd01faa9E>:
impl Iterator for SensorsByDevname {
    /// Iterator returns a pointer to a sensor
    type Item = sensor_ptr;

    /// Return the next sensor that matches the device name    
    fn next(&mut self) -> Option<sensor_ptr> {
 800753c:	b580      	push	{r7, lr}
 800753e:	b08a      	sub	sp, #40	; 0x28
 8007540:	4601      	mov	r1, r0
 8007542:	9004      	str	r0, [sp, #16]
        //  Based on last iteration, find the next sensor with matching device name.
        let sensor = mgr_find_next_bydevname(&self.devname, self.previous)
 8007544:	9804      	ldr	r0, [sp, #16]
 8007546:	68c2      	ldr	r2, [r0, #12]
 8007548:	ab08      	add	r3, sp, #32
 800754a:	9003      	str	r0, [sp, #12]
 800754c:	4618      	mov	r0, r3
 800754e:	9b03      	ldr	r3, [sp, #12]
 8007550:	9102      	str	r1, [sp, #8]
 8007552:	4619      	mov	r1, r3
 8007554:	f000 f84f 	bl	80075f6 <_ZN6mynewt2hw6sensor8bindings23mgr_find_next_bydevname17hcf58d7c66915afb3E>
 8007558:	e7ff      	b.n	800755a <_ZN99_$LT$mynewt..hw..sensor_mgr..SensorsByDevname$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdf9b4b1bcd01faa9E+0x1e>
 800755a:	f246 4130 	movw	r1, #25648	; 0x6430
 800755e:	f6c0 0101 	movt	r1, #2049	; 0x801
 8007562:	a808      	add	r0, sp, #32
 8007564:	220b      	movs	r2, #11
 8007566:	f000 ff4b 	bl	8008400 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h1c36e744b9342e1eE>
 800756a:	9007      	str	r0, [sp, #28]
 800756c:	e7ff      	b.n	800756e <_ZN99_$LT$mynewt..hw..sensor_mgr..SensorsByDevname$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdf9b4b1bcd01faa9E+0x32>
            .expect("find sensor");
        if sensor.is_null() { None }  //  If sensor not found, return None
 800756e:	9807      	ldr	r0, [sp, #28]
 8007570:	f000 f816 	bl	80075a0 <_ZN4core3ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h2fb6a3a5463e515aE>
 8007574:	9001      	str	r0, [sp, #4]
 8007576:	e7ff      	b.n	8007578 <_ZN99_$LT$mynewt..hw..sensor_mgr..SensorsByDevname$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdf9b4b1bcd01faa9E+0x3c>
 8007578:	9801      	ldr	r0, [sp, #4]
 800757a:	07c1      	lsls	r1, r0, #31
 800757c:	2900      	cmp	r1, #0
 800757e:	d003      	beq.n	8007588 <_ZN99_$LT$mynewt..hw..sensor_mgr..SensorsByDevname$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdf9b4b1bcd01faa9E+0x4c>
 8007580:	e7ff      	b.n	8007582 <_ZN99_$LT$mynewt..hw..sensor_mgr..SensorsByDevname$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdf9b4b1bcd01faa9E+0x46>
 8007582:	2000      	movs	r0, #0
 8007584:	9005      	str	r0, [sp, #20]
 8007586:	e007      	b.n	8007598 <_ZN99_$LT$mynewt..hw..sensor_mgr..SensorsByDevname$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdf9b4b1bcd01faa9E+0x5c>
        else {
            //  If sensor found, remember this sensor for next iteration.
            self.previous = sensor;
 8007588:	9807      	ldr	r0, [sp, #28]
 800758a:	9904      	ldr	r1, [sp, #16]
 800758c:	60c8      	str	r0, [r1, #12]
            Some(sensor)  //  Return the sensor
 800758e:	9807      	ldr	r0, [sp, #28]
 8007590:	9006      	str	r0, [sp, #24]
 8007592:	2001      	movs	r0, #1
 8007594:	9005      	str	r0, [sp, #20]
        if sensor.is_null() { None }  //  If sensor not found, return None
 8007596:	e7ff      	b.n	8007598 <_ZN99_$LT$mynewt..hw..sensor_mgr..SensorsByDevname$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdf9b4b1bcd01faa9E+0x5c>
        }
    }
 8007598:	9805      	ldr	r0, [sp, #20]
 800759a:	9906      	ldr	r1, [sp, #24]
 800759c:	b00a      	add	sp, #40	; 0x28
 800759e:	bd80      	pop	{r7, pc}

080075a0 <_ZN4core3ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h2fb6a3a5463e515aE>:
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b084      	sub	sp, #16
 80075a4:	4601      	mov	r1, r0
 80075a6:	9003      	str	r0, [sp, #12]
 80075a8:	9803      	ldr	r0, [sp, #12]
 80075aa:	9102      	str	r1, [sp, #8]
 80075ac:	9001      	str	r0, [sp, #4]
 80075ae:	f7fd fefe 	bl	80053ae <_ZN4core3ptr8null_mut17hc0e3bb7e4d27c81eE>
 80075b2:	9000      	str	r0, [sp, #0]
 80075b4:	e7ff      	b.n	80075b6 <_ZN4core3ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h2fb6a3a5463e515aE+0x16>
 80075b6:	9801      	ldr	r0, [sp, #4]
 80075b8:	9900      	ldr	r1, [sp, #0]
 80075ba:	1a42      	subs	r2, r0, r1
 80075bc:	fab2 f282 	clz	r2, r2
 80075c0:	0950      	lsrs	r0, r2, #5
 80075c2:	b004      	add	sp, #16
 80075c4:	bd80      	pop	{r7, pc}

080075c6 <_ZN4core3mem4swap17hddd51f7392412bcdE>:
 80075c6:	b580      	push	{r7, lr}
 80075c8:	b084      	sub	sp, #16
 80075ca:	460a      	mov	r2, r1
 80075cc:	4603      	mov	r3, r0
 80075ce:	9002      	str	r0, [sp, #8]
 80075d0:	9103      	str	r1, [sp, #12]
 80075d2:	9802      	ldr	r0, [sp, #8]
 80075d4:	9903      	ldr	r1, [sp, #12]
 80075d6:	9201      	str	r2, [sp, #4]
 80075d8:	9300      	str	r3, [sp, #0]
 80075da:	f7fd fe8f 	bl	80052fc <_ZN4core3ptr23swap_nonoverlapping_one17hf704b0957311fe22E>
 80075de:	e7ff      	b.n	80075e0 <_ZN4core3mem4swap17hddd51f7392412bcdE+0x1a>
 80075e0:	b004      	add	sp, #16
 80075e2:	bd80      	pop	{r7, pc}

080075e4 <_ZN4core3mem7size_of17hf368a5e6b408f7d1E>:
 80075e4:	b082      	sub	sp, #8
 80075e6:	2004      	movs	r0, #4
 80075e8:	9001      	str	r0, [sp, #4]
 80075ea:	9801      	ldr	r0, [sp, #4]
 80075ec:	9000      	str	r0, [sp, #0]
 80075ee:	e7ff      	b.n	80075f0 <_ZN4core3mem7size_of17hf368a5e6b408f7d1E+0xc>
 80075f0:	9800      	ldr	r0, [sp, #0]
 80075f2:	b002      	add	sp, #8
 80075f4:	4770      	bx	lr

080075f6 <_ZN6mynewt2hw6sensor8bindings23mgr_find_next_bydevname17hcf58d7c66915afb3E>:
    #[doc = ""]
    #[doc = " Return: A pointer to the sensor object matching that sensor type, or NULL if"]
    #[doc = "         none found."]
    pub fn sensor_mgr_find_next_bytype(type_: sensor_type_t, sensor: *mut sensor) -> *mut sensor;
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
 80075f6:	b580      	push	{r7, lr}
 80075f8:	b088      	sub	sp, #32
 80075fa:	4613      	mov	r3, r2
 80075fc:	468c      	mov	ip, r1
 80075fe:	9105      	str	r1, [sp, #20]
 8007600:	9206      	str	r2, [sp, #24]
 8007602:	9905      	ldr	r1, [sp, #20]
 8007604:	9004      	str	r0, [sp, #16]
 8007606:	4608      	mov	r0, r1
 8007608:	9303      	str	r3, [sp, #12]
 800760a:	f8cd c008 	str.w	ip, [sp, #8]
 800760e:	f7fd f91d 	bl	800484c <_ZN6mynewt4Strn8validate17hd35e7e1944abd306E>
 8007612:	e7ff      	b.n	8007614 <_ZN6mynewt2hw6sensor8bindings23mgr_find_next_bydevname17hcf58d7c66915afb3E+0x1e>
 8007614:	9805      	ldr	r0, [sp, #20]
 8007616:	f7fc ffd3 	bl	80045c0 <_ZN6mynewt4Strn6as_ptr17h2aca29768dacdb60E>
 800761a:	9001      	str	r0, [sp, #4]
 800761c:	e7ff      	b.n	800761e <_ZN6mynewt2hw6sensor8bindings23mgr_find_next_bydevname17hcf58d7c66915afb3E+0x28>
 800761e:	9906      	ldr	r1, [sp, #24]
 8007620:	9801      	ldr	r0, [sp, #4]
 8007622:	f004 fd81 	bl	800c128 <sensor_mgr_find_next_bydevname>
 8007626:	9007      	str	r0, [sp, #28]
 8007628:	e7ff      	b.n	800762a <_ZN6mynewt2hw6sensor8bindings23mgr_find_next_bydevname17hcf58d7c66915afb3E+0x34>
 800762a:	9807      	ldr	r0, [sp, #28]
 800762c:	9904      	ldr	r1, [sp, #16]
 800762e:	6048      	str	r0, [r1, #4]
 8007630:	2000      	movs	r0, #0
 8007632:	6008      	str	r0, [r1, #0]
 8007634:	b008      	add	sp, #32
 8007636:	bd80      	pop	{r7, pc}

08007638 <_ZN6mynewt2hw6sensor8bindings16set_poll_rate_ms17h1b333cb0fcc2972cE>:
    #[doc = " - __`arg`__: type to check"]
    #[doc = ""]
    #[doc = " Return: 1 if matches, 0 if it doesn't match."]
    pub fn sensor_mgr_match_bytype(sensor: *mut sensor, arg1: *mut ::cty::c_void) -> ::cty::c_int;
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
 8007638:	b580      	push	{r7, lr}
 800763a:	b08a      	sub	sp, #40	; 0x28
 800763c:	460a      	mov	r2, r1
 800763e:	4603      	mov	r3, r0
 8007640:	9005      	str	r0, [sp, #20]
 8007642:	9106      	str	r1, [sp, #24]
 8007644:	9805      	ldr	r0, [sp, #20]
 8007646:	9204      	str	r2, [sp, #16]
 8007648:	9303      	str	r3, [sp, #12]
 800764a:	f7fd f8ff 	bl	800484c <_ZN6mynewt4Strn8validate17hd35e7e1944abd306E>
 800764e:	e7ff      	b.n	8007650 <_ZN6mynewt2hw6sensor8bindings16set_poll_rate_ms17h1b333cb0fcc2972cE+0x18>
 8007650:	9805      	ldr	r0, [sp, #20]
 8007652:	f7fc ffb5 	bl	80045c0 <_ZN6mynewt4Strn6as_ptr17h2aca29768dacdb60E>
 8007656:	9002      	str	r0, [sp, #8]
 8007658:	e7ff      	b.n	800765a <_ZN6mynewt2hw6sensor8bindings16set_poll_rate_ms17h1b333cb0fcc2972cE+0x22>
 800765a:	9906      	ldr	r1, [sp, #24]
 800765c:	9802      	ldr	r0, [sp, #8]
 800765e:	f004 fdc7 	bl	800c1f0 <sensor_set_poll_rate_ms>
 8007662:	9008      	str	r0, [sp, #32]
 8007664:	e7ff      	b.n	8007666 <_ZN6mynewt2hw6sensor8bindings16set_poll_rate_ms17h1b333cb0fcc2972cE+0x2e>
 8007666:	9808      	ldr	r0, [sp, #32]
 8007668:	2800      	cmp	r0, #0
 800766a:	d105      	bne.n	8007678 <_ZN6mynewt2hw6sensor8bindings16set_poll_rate_ms17h1b333cb0fcc2972cE+0x40>
 800766c:	e7ff      	b.n	800766e <_ZN6mynewt2hw6sensor8bindings16set_poll_rate_ms17h1b333cb0fcc2972cE+0x36>
 800766e:	2000      	movs	r0, #0
 8007670:	9007      	str	r0, [sp, #28]
 8007672:	2001      	movs	r0, #1
 8007674:	9007      	str	r0, [sp, #28]
 8007676:	e007      	b.n	8007688 <_ZN6mynewt2hw6sensor8bindings16set_poll_rate_ms17h1b333cb0fcc2972cE+0x50>
 8007678:	9808      	ldr	r0, [sp, #32]
 800767a:	f7fd ff8e 	bl	800559a <_ZN78_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$i32$GT$$GT$4from17h0c00a0d5ca46366cE>
 800767e:	9001      	str	r0, [sp, #4]
 8007680:	e7ff      	b.n	8007682 <_ZN6mynewt2hw6sensor8bindings16set_poll_rate_ms17h1b333cb0fcc2972cE+0x4a>
 8007682:	9801      	ldr	r0, [sp, #4]
 8007684:	9007      	str	r0, [sp, #28]
 8007686:	e7ff      	b.n	8007688 <_ZN6mynewt2hw6sensor8bindings16set_poll_rate_ms17h1b333cb0fcc2972cE+0x50>
 8007688:	9807      	ldr	r0, [sp, #28]
 800768a:	b00a      	add	sp, #40	; 0x28
 800768c:	bd80      	pop	{r7, pc}

0800768e <_ZN4core3num21_$LT$impl$u20$u32$GT$11checked_add17h852543dd9c36f284E>:
 800768e:	b580      	push	{r7, lr}
 8007690:	b08a      	sub	sp, #40	; 0x28
 8007692:	460a      	mov	r2, r1
 8007694:	4603      	mov	r3, r0
 8007696:	9004      	str	r0, [sp, #16]
 8007698:	9105      	str	r1, [sp, #20]
 800769a:	9804      	ldr	r0, [sp, #16]
 800769c:	9905      	ldr	r1, [sp, #20]
 800769e:	9203      	str	r2, [sp, #12]
 80076a0:	9302      	str	r3, [sp, #8]
 80076a2:	f000 f81c 	bl	80076de <_ZN4core3num21_$LT$impl$u20$u32$GT$15overflowing_add17ha22472e2d1844567E>
 80076a6:	9001      	str	r0, [sp, #4]
 80076a8:	9100      	str	r1, [sp, #0]
 80076aa:	e7ff      	b.n	80076ac <_ZN4core3num21_$LT$impl$u20$u32$GT$11checked_add17h852543dd9c36f284E+0x1e>
 80076ac:	9801      	ldr	r0, [sp, #4]
 80076ae:	9008      	str	r0, [sp, #32]
 80076b0:	9900      	ldr	r1, [sp, #0]
 80076b2:	f001 0201 	and.w	r2, r1, #1
 80076b6:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
 80076ba:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 80076be:	07d2      	lsls	r2, r2, #31
 80076c0:	2a00      	cmp	r2, #0
 80076c2:	d003      	beq.n	80076cc <_ZN4core3num21_$LT$impl$u20$u32$GT$11checked_add17h852543dd9c36f284E+0x3e>
 80076c4:	e7ff      	b.n	80076c6 <_ZN4core3num21_$LT$impl$u20$u32$GT$11checked_add17h852543dd9c36f284E+0x38>
 80076c6:	2000      	movs	r0, #0
 80076c8:	9006      	str	r0, [sp, #24]
 80076ca:	e004      	b.n	80076d6 <_ZN4core3num21_$LT$impl$u20$u32$GT$11checked_add17h852543dd9c36f284E+0x48>
 80076cc:	9808      	ldr	r0, [sp, #32]
 80076ce:	9007      	str	r0, [sp, #28]
 80076d0:	2001      	movs	r0, #1
 80076d2:	9006      	str	r0, [sp, #24]
 80076d4:	e7ff      	b.n	80076d6 <_ZN4core3num21_$LT$impl$u20$u32$GT$11checked_add17h852543dd9c36f284E+0x48>
 80076d6:	9806      	ldr	r0, [sp, #24]
 80076d8:	9907      	ldr	r1, [sp, #28]
 80076da:	b00a      	add	sp, #40	; 0x28
 80076dc:	bd80      	pop	{r7, pc}

080076de <_ZN4core3num21_$LT$impl$u20$u32$GT$15overflowing_add17ha22472e2d1844567E>:
 80076de:	b08c      	sub	sp, #48	; 0x30
 80076e0:	460a      	mov	r2, r1
 80076e2:	4603      	mov	r3, r0
 80076e4:	9004      	str	r0, [sp, #16]
 80076e6:	9105      	str	r1, [sp, #20]
 80076e8:	9804      	ldr	r0, [sp, #16]
 80076ea:	9905      	ldr	r1, [sp, #20]
 80076ec:	1840      	adds	r0, r0, r1
 80076ee:	f04f 0100 	mov.w	r1, #0
 80076f2:	f141 0100 	adc.w	r1, r1, #0
 80076f6:	900a      	str	r0, [sp, #40]	; 0x28
 80076f8:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 80076fc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80076fe:	f89d 102c 	ldrb.w	r1, [sp, #44]	; 0x2c
 8007702:	9203      	str	r2, [sp, #12]
 8007704:	9302      	str	r3, [sp, #8]
 8007706:	9001      	str	r0, [sp, #4]
 8007708:	9100      	str	r1, [sp, #0]
 800770a:	e7ff      	b.n	800770c <_ZN4core3num21_$LT$impl$u20$u32$GT$15overflowing_add17ha22472e2d1844567E+0x2e>
 800770c:	9801      	ldr	r0, [sp, #4]
 800770e:	9008      	str	r0, [sp, #32]
 8007710:	9900      	ldr	r1, [sp, #0]
 8007712:	f001 0201 	and.w	r2, r1, #1
 8007716:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
 800771a:	9a08      	ldr	r2, [sp, #32]
 800771c:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 8007720:	9206      	str	r2, [sp, #24]
 8007722:	f88d 301c 	strb.w	r3, [sp, #28]
 8007726:	9806      	ldr	r0, [sp, #24]
 8007728:	f89d 101c 	ldrb.w	r1, [sp, #28]
 800772c:	b00c      	add	sp, #48	; 0x30
 800772e:	4770      	bx	lr

08007730 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_mul17hfb0136607b8df7bdE>:
 8007730:	b580      	push	{r7, lr}
 8007732:	b08a      	sub	sp, #40	; 0x28
 8007734:	460a      	mov	r2, r1
 8007736:	4603      	mov	r3, r0
 8007738:	9004      	str	r0, [sp, #16]
 800773a:	9105      	str	r1, [sp, #20]
 800773c:	9804      	ldr	r0, [sp, #16]
 800773e:	9905      	ldr	r1, [sp, #20]
 8007740:	9203      	str	r2, [sp, #12]
 8007742:	9302      	str	r3, [sp, #8]
 8007744:	f000 f861 	bl	800780a <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_mul17h9b91c6b9eb70d744E>
 8007748:	9001      	str	r0, [sp, #4]
 800774a:	9100      	str	r1, [sp, #0]
 800774c:	e7ff      	b.n	800774e <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_mul17hfb0136607b8df7bdE+0x1e>
 800774e:	9801      	ldr	r0, [sp, #4]
 8007750:	9008      	str	r0, [sp, #32]
 8007752:	9900      	ldr	r1, [sp, #0]
 8007754:	f001 0201 	and.w	r2, r1, #1
 8007758:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
 800775c:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 8007760:	07d2      	lsls	r2, r2, #31
 8007762:	2a00      	cmp	r2, #0
 8007764:	d003      	beq.n	800776e <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_mul17hfb0136607b8df7bdE+0x3e>
 8007766:	e7ff      	b.n	8007768 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_mul17hfb0136607b8df7bdE+0x38>
 8007768:	2000      	movs	r0, #0
 800776a:	9006      	str	r0, [sp, #24]
 800776c:	e004      	b.n	8007778 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_mul17hfb0136607b8df7bdE+0x48>
 800776e:	9808      	ldr	r0, [sp, #32]
 8007770:	9007      	str	r0, [sp, #28]
 8007772:	2001      	movs	r0, #1
 8007774:	9006      	str	r0, [sp, #24]
 8007776:	e7ff      	b.n	8007778 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_mul17hfb0136607b8df7bdE+0x48>
 8007778:	9806      	ldr	r0, [sp, #24]
 800777a:	9907      	ldr	r1, [sp, #28]
 800777c:	b00a      	add	sp, #40	; 0x28
 800777e:	bd80      	pop	{r7, pc}

08007780 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h1b2dc11be93c175aE>:
 8007780:	b580      	push	{r7, lr}
 8007782:	b08a      	sub	sp, #40	; 0x28
 8007784:	460a      	mov	r2, r1
 8007786:	4603      	mov	r3, r0
 8007788:	9004      	str	r0, [sp, #16]
 800778a:	9105      	str	r1, [sp, #20]
 800778c:	9804      	ldr	r0, [sp, #16]
 800778e:	9905      	ldr	r1, [sp, #20]
 8007790:	9203      	str	r2, [sp, #12]
 8007792:	9302      	str	r3, [sp, #8]
 8007794:	f000 f862 	bl	800785c <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_sub17h689f9906c0b5a932E>
 8007798:	9001      	str	r0, [sp, #4]
 800779a:	9100      	str	r1, [sp, #0]
 800779c:	e7ff      	b.n	800779e <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h1b2dc11be93c175aE+0x1e>
 800779e:	9801      	ldr	r0, [sp, #4]
 80077a0:	9008      	str	r0, [sp, #32]
 80077a2:	9900      	ldr	r1, [sp, #0]
 80077a4:	f001 0201 	and.w	r2, r1, #1
 80077a8:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
 80077ac:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 80077b0:	07d2      	lsls	r2, r2, #31
 80077b2:	2a00      	cmp	r2, #0
 80077b4:	d003      	beq.n	80077be <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h1b2dc11be93c175aE+0x3e>
 80077b6:	e7ff      	b.n	80077b8 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h1b2dc11be93c175aE+0x38>
 80077b8:	2000      	movs	r0, #0
 80077ba:	9006      	str	r0, [sp, #24]
 80077bc:	e004      	b.n	80077c8 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h1b2dc11be93c175aE+0x48>
 80077be:	9808      	ldr	r0, [sp, #32]
 80077c0:	9007      	str	r0, [sp, #28]
 80077c2:	2001      	movs	r0, #1
 80077c4:	9006      	str	r0, [sp, #24]
 80077c6:	e7ff      	b.n	80077c8 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h1b2dc11be93c175aE+0x48>
 80077c8:	9806      	ldr	r0, [sp, #24]
 80077ca:	9907      	ldr	r1, [sp, #28]
 80077cc:	b00a      	add	sp, #40	; 0x28
 80077ce:	bd80      	pop	{r7, pc}

080077d0 <_ZN4core3num23_$LT$impl$u20$usize$GT$14saturating_mul17h8e2aeaa79033e96cE>:
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b088      	sub	sp, #32
 80077d4:	460a      	mov	r2, r1
 80077d6:	4603      	mov	r3, r0
 80077d8:	9006      	str	r0, [sp, #24]
 80077da:	9107      	str	r1, [sp, #28]
 80077dc:	9806      	ldr	r0, [sp, #24]
 80077de:	9907      	ldr	r1, [sp, #28]
 80077e0:	9205      	str	r2, [sp, #20]
 80077e2:	9304      	str	r3, [sp, #16]
 80077e4:	f7ff ffa4 	bl	8007730 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_mul17hfb0136607b8df7bdE>
 80077e8:	9003      	str	r0, [sp, #12]
 80077ea:	9102      	str	r1, [sp, #8]
 80077ec:	e7ff      	b.n	80077ee <_ZN4core3num23_$LT$impl$u20$usize$GT$14saturating_mul17h8e2aeaa79033e96cE+0x1e>
 80077ee:	f000 f860 	bl	80078b2 <_ZN4core3num23_$LT$impl$u20$usize$GT$9max_value17haf3c46268b03fd1eE>
 80077f2:	9001      	str	r0, [sp, #4]
 80077f4:	e7ff      	b.n	80077f6 <_ZN4core3num23_$LT$impl$u20$usize$GT$14saturating_mul17h8e2aeaa79033e96cE+0x26>
 80077f6:	9803      	ldr	r0, [sp, #12]
 80077f8:	9902      	ldr	r1, [sp, #8]
 80077fa:	9a01      	ldr	r2, [sp, #4]
 80077fc:	f000 fec1 	bl	8008582 <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h7d57ffc5ebfd5af5E>
 8007800:	9000      	str	r0, [sp, #0]
 8007802:	e7ff      	b.n	8007804 <_ZN4core3num23_$LT$impl$u20$usize$GT$14saturating_mul17h8e2aeaa79033e96cE+0x34>
 8007804:	9800      	ldr	r0, [sp, #0]
 8007806:	b008      	add	sp, #32
 8007808:	bd80      	pop	{r7, pc}

0800780a <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_mul17h9b91c6b9eb70d744E>:
 800780a:	b08c      	sub	sp, #48	; 0x30
 800780c:	460a      	mov	r2, r1
 800780e:	4603      	mov	r3, r0
 8007810:	9004      	str	r0, [sp, #16]
 8007812:	9105      	str	r1, [sp, #20]
 8007814:	9804      	ldr	r0, [sp, #16]
 8007816:	9905      	ldr	r1, [sp, #20]
 8007818:	fba0 0101 	umull	r0, r1, r0, r1
 800781c:	2900      	cmp	r1, #0
 800781e:	bf18      	it	ne
 8007820:	2101      	movne	r1, #1
 8007822:	900a      	str	r0, [sp, #40]	; 0x28
 8007824:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 8007828:	980a      	ldr	r0, [sp, #40]	; 0x28
 800782a:	f89d 102c 	ldrb.w	r1, [sp, #44]	; 0x2c
 800782e:	9203      	str	r2, [sp, #12]
 8007830:	9302      	str	r3, [sp, #8]
 8007832:	9001      	str	r0, [sp, #4]
 8007834:	9100      	str	r1, [sp, #0]
 8007836:	e7ff      	b.n	8007838 <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_mul17h9b91c6b9eb70d744E+0x2e>
 8007838:	9801      	ldr	r0, [sp, #4]
 800783a:	9008      	str	r0, [sp, #32]
 800783c:	9900      	ldr	r1, [sp, #0]
 800783e:	f001 0201 	and.w	r2, r1, #1
 8007842:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
 8007846:	9a08      	ldr	r2, [sp, #32]
 8007848:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 800784c:	9206      	str	r2, [sp, #24]
 800784e:	f88d 301c 	strb.w	r3, [sp, #28]
 8007852:	9806      	ldr	r0, [sp, #24]
 8007854:	f89d 101c 	ldrb.w	r1, [sp, #28]
 8007858:	b00c      	add	sp, #48	; 0x30
 800785a:	4770      	bx	lr

0800785c <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_sub17h689f9906c0b5a932E>:
 800785c:	b08c      	sub	sp, #48	; 0x30
 800785e:	460a      	mov	r2, r1
 8007860:	4603      	mov	r3, r0
 8007862:	9004      	str	r0, [sp, #16]
 8007864:	9105      	str	r1, [sp, #20]
 8007866:	9804      	ldr	r0, [sp, #16]
 8007868:	9905      	ldr	r1, [sp, #20]
 800786a:	1a40      	subs	r0, r0, r1
 800786c:	f04f 0100 	mov.w	r1, #0
 8007870:	f141 0100 	adc.w	r1, r1, #0
 8007874:	f1c1 0101 	rsb	r1, r1, #1
 8007878:	900a      	str	r0, [sp, #40]	; 0x28
 800787a:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 800787e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007880:	f89d 102c 	ldrb.w	r1, [sp, #44]	; 0x2c
 8007884:	9203      	str	r2, [sp, #12]
 8007886:	9302      	str	r3, [sp, #8]
 8007888:	9001      	str	r0, [sp, #4]
 800788a:	9100      	str	r1, [sp, #0]
 800788c:	e7ff      	b.n	800788e <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_sub17h689f9906c0b5a932E+0x32>
 800788e:	9801      	ldr	r0, [sp, #4]
 8007890:	9008      	str	r0, [sp, #32]
 8007892:	9900      	ldr	r1, [sp, #0]
 8007894:	f001 0201 	and.w	r2, r1, #1
 8007898:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
 800789c:	9a08      	ldr	r2, [sp, #32]
 800789e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 80078a2:	9206      	str	r2, [sp, #24]
 80078a4:	f88d 301c 	strb.w	r3, [sp, #28]
 80078a8:	9806      	ldr	r0, [sp, #24]
 80078aa:	f89d 101c 	ldrb.w	r1, [sp, #28]
 80078ae:	b00c      	add	sp, #48	; 0x30
 80078b0:	4770      	bx	lr

080078b2 <_ZN4core3num23_$LT$impl$u20$usize$GT$9max_value17haf3c46268b03fd1eE>:
 80078b2:	f04f 30ff 	mov.w	r0, #4294967295
 80078b6:	4770      	bx	lr

080078b8 <_ZN6mynewt2hw6sensor19convert_sensor_data17h960dbb24073819e0E>:
pub use self::bindings::*;

///  Convert the sensor data received from Mynewt into a `SensorValue` for transmission, which includes the sensor data key. 
///  `sensor_type` indicates the type of data in `sensor_data`.
#[allow(non_snake_case, unused_variables)]
fn convert_sensor_data(sensor_data: sensor_data_ptr, sensor_key: &'static Strn, sensor_type: sensor_type_t) -> SensorValue {
 80078b8:	b5b0      	push	{r4, r5, r7, lr}
 80078ba:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 80078be:	9ba9      	ldr	r3, [sp, #676]	; 0x2a4
 80078c0:	f8dd c2a0 	ldr.w	ip, [sp, #672]	; 0x2a0
 80078c4:	4696      	mov	lr, r2
 80078c6:	460c      	mov	r4, r1
 80078c8:	9120      	str	r1, [sp, #128]	; 0x80
 80078ca:	9221      	str	r2, [sp, #132]	; 0x84
 80078cc:	9323      	str	r3, [sp, #140]	; 0x8c
 80078ce:	f8cd c088 	str.w	ip, [sp, #136]	; 0x88
    //  Construct and return a new `SensorValue` (without semicolon)
    SensorValue {
        key: sensor_key,
 80078d2:	9921      	ldr	r1, [sp, #132]	; 0x84
 80078d4:	2200      	movs	r2, #0
        geo: SensorValueType::None,
 80078d6:	9224      	str	r2, [sp, #144]	; 0x90
        value: match sensor_type {
            SENSOR_TYPE_AMBIENT_TEMPERATURE_RAW => {  //  If this is raw temperature...
 80078d8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80078da:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80078dc:	f082 6c80 	eor.w	ip, r2, #67108864	; 0x4000000
 80078e0:	ea4c 0c03 	orr.w	ip, ip, r3
 80078e4:	f1bc 0f00 	cmp.w	ip, #0
 80078e8:	f8cd e064 	str.w	lr, [sp, #100]	; 0x64
 80078ec:	9418      	str	r4, [sp, #96]	; 0x60
 80078ee:	9017      	str	r0, [sp, #92]	; 0x5c
 80078f0:	9116      	str	r1, [sp, #88]	; 0x58
 80078f2:	9215      	str	r2, [sp, #84]	; 0x54
 80078f4:	9314      	str	r3, [sp, #80]	; 0x50
 80078f6:	d009      	beq.n	800790c <_ZN6mynewt2hw6sensor19convert_sensor_data17h960dbb24073819e0E+0x54>
 80078f8:	e7ff      	b.n	80078fa <_ZN6mynewt2hw6sensor19convert_sensor_data17h960dbb24073819e0E+0x42>
 80078fa:	9815      	ldr	r0, [sp, #84]	; 0x54
 80078fc:	f080 6100 	eor.w	r1, r0, #134217728	; 0x8000000
 8007900:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007902:	4311      	orrs	r1, r2
 8007904:	2900      	cmp	r1, #0
 8007906:	f000 8102 	beq.w	8007b0e <_ZN6mynewt2hw6sensor19convert_sensor_data17h960dbb24073819e0E+0x256>
 800790a:	e1d3      	b.n	8007cb4 <_ZN6mynewt2hw6sensor19convert_sensor_data17h960dbb24073819e0E+0x3fc>
 800790c:	2000      	movs	r0, #0
                //  Interpret the sensor data as a `sensor_temp_raw_data` struct that contains raw temp.
                let mut rawtempdata = fill_zero!(sensor_temp_raw_data);
 800790e:	f88d 00e0 	strb.w	r0, [sp, #224]	; 0xe0
 8007912:	9037      	str	r0, [sp, #220]	; 0xdc
 8007914:	f89d 00e0 	ldrb.w	r0, [sp, #224]	; 0xe0
 8007918:	f88d 00d8 	strb.w	r0, [sp, #216]	; 0xd8
 800791c:	9837      	ldr	r0, [sp, #220]	; 0xdc
 800791e:	9035      	str	r0, [sp, #212]	; 0xd4
 8007920:	e7ff      	b.n	8007922 <_ZN6mynewt2hw6sensor19convert_sensor_data17h960dbb24073819e0E+0x6a>
                let rc = unsafe { get_temp_raw_data(sensor_data, &mut rawtempdata) };
 8007922:	9820      	ldr	r0, [sp, #128]	; 0x80
 8007924:	a935      	add	r1, sp, #212	; 0xd4
 8007926:	f007 fa97 	bl	800ee58 <get_temp_raw_data>
 800792a:	9039      	str	r0, [sp, #228]	; 0xe4
 800792c:	e7ff      	b.n	800792e <_ZN6mynewt2hw6sensor19convert_sensor_data17h960dbb24073819e0E+0x76>
 800792e:	a839      	add	r0, sp, #228	; 0xe4
                assert_eq!(rc, 0, "rawtmp fail");
 8007930:	903a      	str	r0, [sp, #232]	; 0xe8
 8007932:	f246 407c 	movw	r0, #25724	; 0x647c
 8007936:	f6c0 0001 	movt	r0, #2049	; 0x801
 800793a:	903b      	str	r0, [sp, #236]	; 0xec
 800793c:	983a      	ldr	r0, [sp, #232]	; 0xe8
 800793e:	903c      	str	r0, [sp, #240]	; 0xf0
 8007940:	983b      	ldr	r0, [sp, #236]	; 0xec
 8007942:	903d      	str	r0, [sp, #244]	; 0xf4
 8007944:	983c      	ldr	r0, [sp, #240]	; 0xf0
 8007946:	6800      	ldr	r0, [r0, #0]
 8007948:	993d      	ldr	r1, [sp, #244]	; 0xf4
 800794a:	6809      	ldr	r1, [r1, #0]
 800794c:	4288      	cmp	r0, r1
 800794e:	d014      	beq.n	800797a <_ZN6mynewt2hw6sensor19convert_sensor_data17h960dbb24073819e0E+0xc2>
 8007950:	e7ff      	b.n	8007952 <_ZN6mynewt2hw6sensor19convert_sensor_data17h960dbb24073819e0E+0x9a>
 8007952:	983c      	ldr	r0, [sp, #240]	; 0xf0
 8007954:	904d      	str	r0, [sp, #308]	; 0x134
 8007956:	983d      	ldr	r0, [sp, #244]	; 0xf4
 8007958:	904e      	str	r0, [sp, #312]	; 0x138
 800795a:	4668      	mov	r0, sp
 800795c:	2100      	movs	r1, #0
 800795e:	6001      	str	r1, [r0, #0]
 8007960:	f246 5104 	movw	r1, #25860	; 0x6504
 8007964:	f6c0 0101 	movt	r1, #2049	; 0x801
 8007968:	f246 43e8 	movw	r3, #25832	; 0x64e8
 800796c:	f6c0 0301 	movt	r3, #2049	; 0x801
 8007970:	a84f      	add	r0, sp, #316	; 0x13c
 8007972:	2201      	movs	r2, #1
 8007974:	f7fd fa0a 	bl	8004d8c <_ZN4core3fmt9Arguments6new_v117h7b18277453f88ac4E>
 8007978:	e012      	b.n	80079a0 <_ZN6mynewt2hw6sensor19convert_sensor_data17h960dbb24073819e0E+0xe8>
 800797a:	a835      	add	r0, sp, #212	; 0xd4
                //  Check that the raw temperature data is valid.
                assert_ne!(rawtempdata.strd_temp_raw_is_valid, 0, "bad rawtmp");                
 800797c:	3004      	adds	r0, #4
 800797e:	9058      	str	r0, [sp, #352]	; 0x160
 8007980:	f246 501c 	movw	r0, #25884	; 0x651c
 8007984:	f6c0 0001 	movt	r0, #2049	; 0x801
 8007988:	9059      	str	r0, [sp, #356]	; 0x164
 800798a:	9858      	ldr	r0, [sp, #352]	; 0x160
 800798c:	905a      	str	r0, [sp, #360]	; 0x168
 800798e:	9859      	ldr	r0, [sp, #356]	; 0x164
 8007990:	905b      	str	r0, [sp, #364]	; 0x16c
 8007992:	985a      	ldr	r0, [sp, #360]	; 0x168
 8007994:	7800      	ldrb	r0, [r0, #0]
 8007996:	995b      	ldr	r1, [sp, #364]	; 0x16c
 8007998:	7809      	ldrb	r1, [r1, #0]
 800799a:	4288      	cmp	r0, r1
 800799c:	d04f      	beq.n	8007a3e <_ZN6mynewt2hw6sensor19convert_sensor_data17h960dbb24073819e0E+0x186>
 800799e:	e062      	b.n	8007a66 <_ZN6mynewt2hw6sensor19convert_sensor_data17h960dbb24073819e0E+0x1ae>
 80079a0:	a84d      	add	r0, sp, #308	; 0x134
                assert_eq!(rc, 0, "rawtmp fail");
 80079a2:	904a      	str	r0, [sp, #296]	; 0x128
 80079a4:	a84e      	add	r0, sp, #312	; 0x138
 80079a6:	904b      	str	r0, [sp, #300]	; 0x12c
 80079a8:	a84f      	add	r0, sp, #316	; 0x13c
 80079aa:	904c      	str	r0, [sp, #304]	; 0x130
 80079ac:	984a      	ldr	r0, [sp, #296]	; 0x128
 80079ae:	9055      	str	r0, [sp, #340]	; 0x154
 80079b0:	984b      	ldr	r0, [sp, #300]	; 0x12c
 80079b2:	9056      	str	r0, [sp, #344]	; 0x158
 80079b4:	984c      	ldr	r0, [sp, #304]	; 0x130
 80079b6:	9057      	str	r0, [sp, #348]	; 0x15c
 80079b8:	9855      	ldr	r0, [sp, #340]	; 0x154
 80079ba:	f644 3151 	movw	r1, #19281	; 0x4b51
 80079be:	f6c0 0100 	movt	r1, #2048	; 0x800
 80079c2:	f7fd f998 	bl	8004cf6 <_ZN4core3fmt10ArgumentV13new17hd9b543e4f4267a1eE>
 80079c6:	9013      	str	r0, [sp, #76]	; 0x4c
 80079c8:	9112      	str	r1, [sp, #72]	; 0x48
 80079ca:	e7ff      	b.n	80079cc <_ZN6mynewt2hw6sensor19convert_sensor_data17h960dbb24073819e0E+0x114>
 80079cc:	9856      	ldr	r0, [sp, #344]	; 0x158
 80079ce:	f644 3151 	movw	r1, #19281	; 0x4b51
 80079d2:	f6c0 0100 	movt	r1, #2048	; 0x800
 80079d6:	f7fd f98e 	bl	8004cf6 <_ZN4core3fmt10ArgumentV13new17hd9b543e4f4267a1eE>
 80079da:	9011      	str	r0, [sp, #68]	; 0x44
 80079dc:	9110      	str	r1, [sp, #64]	; 0x40
 80079de:	e7ff      	b.n	80079e0 <_ZN6mynewt2hw6sensor19convert_sensor_data17h960dbb24073819e0E+0x128>
 80079e0:	9857      	ldr	r0, [sp, #348]	; 0x15c
 80079e2:	f249 0185 	movw	r1, #36997	; 0x9085
 80079e6:	f6c0 0100 	movt	r1, #2048	; 0x800
 80079ea:	f7fd f9b6 	bl	8004d5a <_ZN4core3fmt10ArgumentV13new17hf7ba76b3ae396a12E>
 80079ee:	900f      	str	r0, [sp, #60]	; 0x3c
 80079f0:	910e      	str	r1, [sp, #56]	; 0x38
 80079f2:	e7ff      	b.n	80079f4 <_ZN6mynewt2hw6sensor19convert_sensor_data17h960dbb24073819e0E+0x13c>
 80079f4:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80079f6:	9044      	str	r0, [sp, #272]	; 0x110
 80079f8:	9912      	ldr	r1, [sp, #72]	; 0x48
 80079fa:	9145      	str	r1, [sp, #276]	; 0x114
 80079fc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80079fe:	9246      	str	r2, [sp, #280]	; 0x118
 8007a00:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007a02:	9347      	str	r3, [sp, #284]	; 0x11c
 8007a04:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 8007a08:	f8cd c120 	str.w	ip, [sp, #288]	; 0x120
 8007a0c:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
 8007a10:	f8cd e124 	str.w	lr, [sp, #292]	; 0x124
 8007a14:	466c      	mov	r4, sp
 8007a16:	2503      	movs	r5, #3
 8007a18:	6025      	str	r5, [r4, #0]
 8007a1a:	f246 41bc 	movw	r1, #25788	; 0x64bc
 8007a1e:	f6c0 0101 	movt	r1, #2049	; 0x801
 8007a22:	a83e      	add	r0, sp, #248	; 0xf8
 8007a24:	ab44      	add	r3, sp, #272	; 0x110
 8007a26:	462a      	mov	r2, r5
 8007a28:	f7fd f9b0 	bl	8004d8c <_ZN4core3fmt9Arguments6new_v117h7b18277453f88ac4E>
 8007a2c:	e7ff      	b.n	8007a2e <_ZN6mynewt2hw6sensor19convert_sensor_data17h960dbb24073819e0E+0x176>
 8007a2e:	f246 510c 	movw	r1, #25868	; 0x650c
 8007a32:	f6c0 0101 	movt	r1, #2049	; 0x801
 8007a36:	a83e      	add	r0, sp, #248	; 0xf8
 8007a38:	f000 fe66 	bl	8008708 <_ZN4core9panicking9panic_fmt17hbfe32cf8392a510cE>
 8007a3c:	defe      	udf	#254	; 0xfe
                assert_ne!(rawtempdata.strd_temp_raw_is_valid, 0, "bad rawtmp");                
 8007a3e:	985a      	ldr	r0, [sp, #360]	; 0x168
 8007a40:	906b      	str	r0, [sp, #428]	; 0x1ac
 8007a42:	985b      	ldr	r0, [sp, #364]	; 0x16c
 8007a44:	906c      	str	r0, [sp, #432]	; 0x1b0
 8007a46:	4668      	mov	r0, sp
 8007a48:	2100      	movs	r1, #0
 8007a4a:	6001      	str	r1, [r0, #0]
 8007a4c:	f246 5170 	movw	r1, #25968	; 0x6570
 8007a50:	f6c0 0101 	movt	r1, #2049	; 0x801
 8007a54:	f246 43e8 	movw	r3, #25832	; 0x64e8
 8007a58:	f6c0 0301 	movt	r3, #2049	; 0x801
 8007a5c:	a86d      	add	r0, sp, #436	; 0x1b4
 8007a5e:	2201      	movs	r2, #1
 8007a60:	f7fd f994 	bl	8004d8c <_ZN4core3fmt9Arguments6new_v117h7b18277453f88ac4E>
 8007a64:	e004      	b.n	8007a70 <_ZN6mynewt2hw6sensor19convert_sensor_data17h960dbb24073819e0E+0x1b8>
                //  Raw temperature data is valid.  Return it.
                SensorValueType::Uint(rawtempdata.strd_temp_raw)  //  Raw Temperature in integer (0 to 4095)
 8007a66:	9835      	ldr	r0, [sp, #212]	; 0xd4
 8007a68:	902d      	str	r0, [sp, #180]	; 0xb4
 8007a6a:	2001      	movs	r0, #1
 8007a6c:	902c      	str	r0, [sp, #176]	; 0xb0
        value: match sensor_type {
 8007a6e:	e12f      	b.n	8007cd0 <_ZN6mynewt2hw6sensor19convert_sensor_data17h960dbb24073819e0E+0x418>
 8007a70:	a86b      	add	r0, sp, #428	; 0x1ac
                assert_ne!(rawtempdata.strd_temp_raw_is_valid, 0, "bad rawtmp");                
 8007a72:	9068      	str	r0, [sp, #416]	; 0x1a0
 8007a74:	a86c      	add	r0, sp, #432	; 0x1b0
 8007a76:	9069      	str	r0, [sp, #420]	; 0x1a4
 8007a78:	a86d      	add	r0, sp, #436	; 0x1b4
 8007a7a:	906a      	str	r0, [sp, #424]	; 0x1a8
 8007a7c:	9868      	ldr	r0, [sp, #416]	; 0x1a0
 8007a7e:	9073      	str	r0, [sp, #460]	; 0x1cc
 8007a80:	9869      	ldr	r0, [sp, #420]	; 0x1a4
 8007a82:	9074      	str	r0, [sp, #464]	; 0x1d0
 8007a84:	986a      	ldr	r0, [sp, #424]	; 0x1a8
 8007a86:	9075      	str	r0, [sp, #468]	; 0x1d4
 8007a88:	9873      	ldr	r0, [sp, #460]	; 0x1cc
 8007a8a:	f644 3179 	movw	r1, #19321	; 0x4b79
 8007a8e:	f6c0 0100 	movt	r1, #2048	; 0x800
 8007a92:	f7fd f949 	bl	8004d28 <_ZN4core3fmt10ArgumentV13new17he64230cf919db0caE>
 8007a96:	900d      	str	r0, [sp, #52]	; 0x34
 8007a98:	910c      	str	r1, [sp, #48]	; 0x30
 8007a9a:	e7ff      	b.n	8007a9c <_ZN6mynewt2hw6sensor19convert_sensor_data17h960dbb24073819e0E+0x1e4>
 8007a9c:	9874      	ldr	r0, [sp, #464]	; 0x1d0
 8007a9e:	f644 3179 	movw	r1, #19321	; 0x4b79
 8007aa2:	f6c0 0100 	movt	r1, #2048	; 0x800
 8007aa6:	f7fd f93f 	bl	8004d28 <_ZN4core3fmt10ArgumentV13new17he64230cf919db0caE>
 8007aaa:	900b      	str	r0, [sp, #44]	; 0x2c
 8007aac:	910a      	str	r1, [sp, #40]	; 0x28
 8007aae:	e7ff      	b.n	8007ab0 <_ZN6mynewt2hw6sensor19convert_sensor_data17h960dbb24073819e0E+0x1f8>
 8007ab0:	9875      	ldr	r0, [sp, #468]	; 0x1d4
 8007ab2:	f249 0185 	movw	r1, #36997	; 0x9085
 8007ab6:	f6c0 0100 	movt	r1, #2048	; 0x800
 8007aba:	f7fd f94e 	bl	8004d5a <_ZN4core3fmt10ArgumentV13new17hf7ba76b3ae396a12E>
 8007abe:	9009      	str	r0, [sp, #36]	; 0x24
 8007ac0:	9108      	str	r1, [sp, #32]
 8007ac2:	e7ff      	b.n	8007ac4 <_ZN6mynewt2hw6sensor19convert_sensor_data17h960dbb24073819e0E+0x20c>
 8007ac4:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007ac6:	9062      	str	r0, [sp, #392]	; 0x188
 8007ac8:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007aca:	9163      	str	r1, [sp, #396]	; 0x18c
 8007acc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007ace:	9264      	str	r2, [sp, #400]	; 0x190
 8007ad0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ad2:	9365      	str	r3, [sp, #404]	; 0x194
 8007ad4:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8007ad8:	f8cd c198 	str.w	ip, [sp, #408]	; 0x198
 8007adc:	f8dd e020 	ldr.w	lr, [sp, #32]
 8007ae0:	f8cd e19c 	str.w	lr, [sp, #412]	; 0x19c
 8007ae4:	466c      	mov	r4, sp
 8007ae6:	2503      	movs	r5, #3
 8007ae8:	6025      	str	r5, [r4, #0]
 8007aea:	f246 514c 	movw	r1, #25932	; 0x654c
 8007aee:	f6c0 0101 	movt	r1, #2049	; 0x801
 8007af2:	a85c      	add	r0, sp, #368	; 0x170
 8007af4:	ab62      	add	r3, sp, #392	; 0x188
 8007af6:	462a      	mov	r2, r5
 8007af8:	f7fd f948 	bl	8004d8c <_ZN4core3fmt9Arguments6new_v117h7b18277453f88ac4E>
 8007afc:	e7ff      	b.n	8007afe <_ZN6mynewt2hw6sensor19convert_sensor_data17h960dbb24073819e0E+0x246>
 8007afe:	f246 5178 	movw	r1, #25976	; 0x6578
 8007b02:	f6c0 0101 	movt	r1, #2049	; 0x801
 8007b06:	a85c      	add	r0, sp, #368	; 0x170
 8007b08:	f000 fdfe 	bl	8008708 <_ZN4core9panicking9panic_fmt17hbfe32cf8392a510cE>
 8007b0c:	defe      	udf	#254	; 0xfe
 8007b0e:	2000      	movs	r0, #0
            }
            SENSOR_TYPE_GEOLOCATION => {  //  If sensor data is GPS geolocation...
                //  Interpret the sensor data as a `sensor_geolocation_data` struct that contains GPS geolocation.
                let mut geolocation = fill_zero!(sensor_geolocation_data);
 8007b10:	f8cd 020b 	str.w	r0, [sp, #523]	; 0x20b
 8007b14:	9082      	str	r0, [sp, #520]	; 0x208
 8007b16:	9081      	str	r0, [sp, #516]	; 0x204
 8007b18:	9080      	str	r0, [sp, #512]	; 0x200
 8007b1a:	907f      	str	r0, [sp, #508]	; 0x1fc
 8007b1c:	907e      	str	r0, [sp, #504]	; 0x1f8
 8007b1e:	907d      	str	r0, [sp, #500]	; 0x1f4
 8007b20:	a876      	add	r0, sp, #472	; 0x1d8
 8007b22:	a97d      	add	r1, sp, #500	; 0x1f4
 8007b24:	221b      	movs	r2, #27
 8007b26:	f00e f8c1 	bl	8015cac <__aeabi_memcpy>
 8007b2a:	9007      	str	r0, [sp, #28]
 8007b2c:	e7ff      	b.n	8007b2e <_ZN6mynewt2hw6sensor19convert_sensor_data17h960dbb24073819e0E+0x276>
                let rc = unsafe { get_geolocation_data(sensor_data, &mut geolocation) };
 8007b2e:	9820      	ldr	r0, [sp, #128]	; 0x80
 8007b30:	a976      	add	r1, sp, #472	; 0x1d8
 8007b32:	f007 f9a6 	bl	800ee82 <get_geolocation_data>
 8007b36:	9084      	str	r0, [sp, #528]	; 0x210
 8007b38:	e7ff      	b.n	8007b3a <_ZN6mynewt2hw6sensor19convert_sensor_data17h960dbb24073819e0E+0x282>
 8007b3a:	a884      	add	r0, sp, #528	; 0x210
                assert_eq!(rc, 0, "geodata fail");
 8007b3c:	9085      	str	r0, [sp, #532]	; 0x214
 8007b3e:	f246 407c 	movw	r0, #25724	; 0x647c
 8007b42:	f6c0 0001 	movt	r0, #2049	; 0x801
 8007b46:	9086      	str	r0, [sp, #536]	; 0x218
 8007b48:	9885      	ldr	r0, [sp, #532]	; 0x214
 8007b4a:	9087      	str	r0, [sp, #540]	; 0x21c
 8007b4c:	9886      	ldr	r0, [sp, #536]	; 0x218
 8007b4e:	9088      	str	r0, [sp, #544]	; 0x220
 8007b50:	9887      	ldr	r0, [sp, #540]	; 0x21c
 8007b52:	6800      	ldr	r0, [r0, #0]
 8007b54:	9988      	ldr	r1, [sp, #544]	; 0x220
 8007b56:	6809      	ldr	r1, [r1, #0]
 8007b58:	4288      	cmp	r0, r1
 8007b5a:	d014      	beq.n	8007b86 <_ZN6mynewt2hw6sensor19convert_sensor_data17h960dbb24073819e0E+0x2ce>
 8007b5c:	e7ff      	b.n	8007b5e <_ZN6mynewt2hw6sensor19convert_sensor_data17h960dbb24073819e0E+0x2a6>
 8007b5e:	9887      	ldr	r0, [sp, #540]	; 0x21c
 8007b60:	9098      	str	r0, [sp, #608]	; 0x260
 8007b62:	9888      	ldr	r0, [sp, #544]	; 0x220
 8007b64:	9099      	str	r0, [sp, #612]	; 0x264
 8007b66:	4668      	mov	r0, sp
 8007b68:	2100      	movs	r1, #0
 8007b6a:	6001      	str	r1, [r0, #0]
 8007b6c:	f246 41e0 	movw	r1, #25824	; 0x64e0
 8007b70:	f6c0 0101 	movt	r1, #2049	; 0x801
 8007b74:	f246 43e8 	movw	r3, #25832	; 0x64e8
 8007b78:	f6c0 0301 	movt	r3, #2049	; 0x801
 8007b7c:	a89a      	add	r0, sp, #616	; 0x268
 8007b7e:	2201      	movs	r2, #1
 8007b80:	f7fd f904 	bl	8004d8c <_ZN4core3fmt9Arguments6new_v117h7b18277453f88ac4E>
 8007b84:	e004      	b.n	8007b90 <_ZN6mynewt2hw6sensor19convert_sensor_data17h960dbb24073819e0E+0x2d8>
                //  Check that the geolocation data is valid.
                if  geolocation.sgd_latitude_is_valid  != 0 &&
 8007b86:	f89d 01f0 	ldrb.w	r0, [sp, #496]	; 0x1f0
 8007b8a:	2800      	cmp	r0, #0
 8007b8c:	d165      	bne.n	8007c5a <_ZN6mynewt2hw6sensor19convert_sensor_data17h960dbb24073819e0E+0x3a2>
 8007b8e:	e060      	b.n	8007c52 <_ZN6mynewt2hw6sensor19convert_sensor_data17h960dbb24073819e0E+0x39a>
 8007b90:	a898      	add	r0, sp, #608	; 0x260
                assert_eq!(rc, 0, "geodata fail");
 8007b92:	9095      	str	r0, [sp, #596]	; 0x254
 8007b94:	a899      	add	r0, sp, #612	; 0x264
 8007b96:	9096      	str	r0, [sp, #600]	; 0x258
 8007b98:	a89a      	add	r0, sp, #616	; 0x268
 8007b9a:	9097      	str	r0, [sp, #604]	; 0x25c
 8007b9c:	9895      	ldr	r0, [sp, #596]	; 0x254
 8007b9e:	90a0      	str	r0, [sp, #640]	; 0x280
 8007ba0:	9896      	ldr	r0, [sp, #600]	; 0x258
 8007ba2:	90a1      	str	r0, [sp, #644]	; 0x284
 8007ba4:	9897      	ldr	r0, [sp, #604]	; 0x25c
 8007ba6:	90a2      	str	r0, [sp, #648]	; 0x288
 8007ba8:	98a0      	ldr	r0, [sp, #640]	; 0x280
 8007baa:	f644 3151 	movw	r1, #19281	; 0x4b51
 8007bae:	f6c0 0100 	movt	r1, #2048	; 0x800
 8007bb2:	f7fd f8a0 	bl	8004cf6 <_ZN4core3fmt10ArgumentV13new17hd9b543e4f4267a1eE>
 8007bb6:	9006      	str	r0, [sp, #24]
 8007bb8:	9105      	str	r1, [sp, #20]
 8007bba:	e7ff      	b.n	8007bbc <_ZN6mynewt2hw6sensor19convert_sensor_data17h960dbb24073819e0E+0x304>
 8007bbc:	98a1      	ldr	r0, [sp, #644]	; 0x284
 8007bbe:	f644 3151 	movw	r1, #19281	; 0x4b51
 8007bc2:	f6c0 0100 	movt	r1, #2048	; 0x800
 8007bc6:	f7fd f896 	bl	8004cf6 <_ZN4core3fmt10ArgumentV13new17hd9b543e4f4267a1eE>
 8007bca:	9004      	str	r0, [sp, #16]
 8007bcc:	9103      	str	r1, [sp, #12]
 8007bce:	e7ff      	b.n	8007bd0 <_ZN6mynewt2hw6sensor19convert_sensor_data17h960dbb24073819e0E+0x318>
 8007bd0:	98a2      	ldr	r0, [sp, #648]	; 0x288
 8007bd2:	f249 0185 	movw	r1, #36997	; 0x9085
 8007bd6:	f6c0 0100 	movt	r1, #2048	; 0x800
 8007bda:	f7fd f8be 	bl	8004d5a <_ZN4core3fmt10ArgumentV13new17hf7ba76b3ae396a12E>
 8007bde:	9002      	str	r0, [sp, #8]
 8007be0:	9101      	str	r1, [sp, #4]
 8007be2:	e7ff      	b.n	8007be4 <_ZN6mynewt2hw6sensor19convert_sensor_data17h960dbb24073819e0E+0x32c>
 8007be4:	9806      	ldr	r0, [sp, #24]
 8007be6:	908f      	str	r0, [sp, #572]	; 0x23c
 8007be8:	9905      	ldr	r1, [sp, #20]
 8007bea:	9190      	str	r1, [sp, #576]	; 0x240
 8007bec:	9a04      	ldr	r2, [sp, #16]
 8007bee:	9291      	str	r2, [sp, #580]	; 0x244
 8007bf0:	9b03      	ldr	r3, [sp, #12]
 8007bf2:	9392      	str	r3, [sp, #584]	; 0x248
 8007bf4:	f8dd c008 	ldr.w	ip, [sp, #8]
 8007bf8:	f8cd c24c 	str.w	ip, [sp, #588]	; 0x24c
 8007bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8007c00:	f8cd e250 	str.w	lr, [sp, #592]	; 0x250
 8007c04:	466c      	mov	r4, sp
 8007c06:	2503      	movs	r5, #3
 8007c08:	6025      	str	r5, [r4, #0]
 8007c0a:	f246 41bc 	movw	r1, #25788	; 0x64bc
 8007c0e:	f6c0 0101 	movt	r1, #2049	; 0x801
 8007c12:	a889      	add	r0, sp, #548	; 0x224
 8007c14:	ab8f      	add	r3, sp, #572	; 0x23c
 8007c16:	462a      	mov	r2, r5
 8007c18:	f7fd f8b8 	bl	8004d8c <_ZN4core3fmt9Arguments6new_v117h7b18277453f88ac4E>
 8007c1c:	e7ff      	b.n	8007c1e <_ZN6mynewt2hw6sensor19convert_sensor_data17h960dbb24073819e0E+0x366>
 8007c1e:	f246 41e8 	movw	r1, #25832	; 0x64e8
 8007c22:	f6c0 0101 	movt	r1, #2049	; 0x801
 8007c26:	a889      	add	r0, sp, #548	; 0x224
 8007c28:	f000 fd6e 	bl	8008708 <_ZN4core9panicking9panic_fmt17hbfe32cf8392a510cE>
 8007c2c:	defe      	udf	#254	; 0xfe
 8007c2e:	2000      	movs	r0, #0
                if  geolocation.sgd_latitude_is_valid  != 0 &&
 8007c30:	f88d 028e 	strb.w	r0, [sp, #654]	; 0x28e
 8007c34:	e007      	b.n	8007c46 <_ZN6mynewt2hw6sensor19convert_sensor_data17h960dbb24073819e0E+0x38e>
                    geolocation.sgd_longitude_is_valid != 0 &&
                    geolocation.sgd_altitude_is_valid  != 0 {
 8007c36:	f89d 01f2 	ldrb.w	r0, [sp, #498]	; 0x1f2
 8007c3a:	2800      	cmp	r0, #0
 8007c3c:	bf18      	it	ne
 8007c3e:	2001      	movne	r0, #1
                if  geolocation.sgd_latitude_is_valid  != 0 &&
 8007c40:	f88d 028e 	strb.w	r0, [sp, #654]	; 0x28e
 8007c44:	e7ff      	b.n	8007c46 <_ZN6mynewt2hw6sensor19convert_sensor_data17h960dbb24073819e0E+0x38e>
 8007c46:	f89d 028e 	ldrb.w	r0, [sp, #654]	; 0x28e
 8007c4a:	07c0      	lsls	r0, r0, #31
 8007c4c:	2800      	cmp	r0, #0
 8007c4e:	d112      	bne.n	8007c76 <_ZN6mynewt2hw6sensor19convert_sensor_data17h960dbb24073819e0E+0x3be>
 8007c50:	e02c      	b.n	8007cac <_ZN6mynewt2hw6sensor19convert_sensor_data17h960dbb24073819e0E+0x3f4>
 8007c52:	2000      	movs	r0, #0
 8007c54:	f88d 028f 	strb.w	r0, [sp, #655]	; 0x28f
 8007c58:	e007      	b.n	8007c6a <_ZN6mynewt2hw6sensor19convert_sensor_data17h960dbb24073819e0E+0x3b2>
                    geolocation.sgd_longitude_is_valid != 0 &&
 8007c5a:	f89d 01f1 	ldrb.w	r0, [sp, #497]	; 0x1f1
 8007c5e:	2800      	cmp	r0, #0
 8007c60:	bf18      	it	ne
 8007c62:	2001      	movne	r0, #1
                if  geolocation.sgd_latitude_is_valid  != 0 &&
 8007c64:	f88d 028f 	strb.w	r0, [sp, #655]	; 0x28f
 8007c68:	e7ff      	b.n	8007c6a <_ZN6mynewt2hw6sensor19convert_sensor_data17h960dbb24073819e0E+0x3b2>
 8007c6a:	f89d 028f 	ldrb.w	r0, [sp, #655]	; 0x28f
 8007c6e:	07c0      	lsls	r0, r0, #31
 8007c70:	2800      	cmp	r0, #0
 8007c72:	d1e0      	bne.n	8007c36 <_ZN6mynewt2hw6sensor19convert_sensor_data17h960dbb24073819e0E+0x37e>
 8007c74:	e7db      	b.n	8007c2e <_ZN6mynewt2hw6sensor19convert_sensor_data17h960dbb24073819e0E+0x376>
                    //  Geolocation data is valid.  Return it.
                    SensorValueType::Geolocation {
                        latitude:  geolocation.sgd_latitude,
 8007c76:	9876      	ldr	r0, [sp, #472]	; 0x1d8
 8007c78:	9977      	ldr	r1, [sp, #476]	; 0x1dc
                        longitude: geolocation.sgd_longitude,
 8007c7a:	9a78      	ldr	r2, [sp, #480]	; 0x1e0
 8007c7c:	9b79      	ldr	r3, [sp, #484]	; 0x1e4
                        latitude:  geolocation.sgd_latitude,
 8007c7e:	911b      	str	r1, [sp, #108]	; 0x6c
 8007c80:	901a      	str	r0, [sp, #104]	; 0x68
 8007c82:	ed9d 0b1a 	vldr	d0, [sp, #104]	; 0x68
                        longitude: geolocation.sgd_longitude,
 8007c86:	931d      	str	r3, [sp, #116]	; 0x74
 8007c88:	921c      	str	r2, [sp, #112]	; 0x70
 8007c8a:	ed9d 1b1c 	vldr	d1, [sp, #112]	; 0x70
                        altitude:  geolocation.sgd_altitude,
 8007c8e:	987b      	ldr	r0, [sp, #492]	; 0x1ec
 8007c90:	901f      	str	r0, [sp, #124]	; 0x7c
 8007c92:	987a      	ldr	r0, [sp, #488]	; 0x1e8
 8007c94:	901e      	str	r0, [sp, #120]	; 0x78
 8007c96:	ed9d 2b1e 	vldr	d2, [sp, #120]	; 0x78
                    SensorValueType::Geolocation {
 8007c9a:	ed8d 0b2e 	vstr	d0, [sp, #184]	; 0xb8
 8007c9e:	ed8d 1b30 	vstr	d1, [sp, #192]	; 0xc0
 8007ca2:	ed8d 2b32 	vstr	d2, [sp, #200]	; 0xc8
 8007ca6:	2003      	movs	r0, #3
 8007ca8:	902c      	str	r0, [sp, #176]	; 0xb0
                if  geolocation.sgd_latitude_is_valid  != 0 &&
 8007caa:	e002      	b.n	8007cb2 <_ZN6mynewt2hw6sensor19convert_sensor_data17h960dbb24073819e0E+0x3fa>
 8007cac:	2000      	movs	r0, #0
                    }
                } else { SensorValueType::None }  //  Geolocation data is invalid.  Maybe GPS is not ready.                 
 8007cae:	902c      	str	r0, [sp, #176]	; 0xb0
                if  geolocation.sgd_latitude_is_valid  != 0 &&
 8007cb0:	e7ff      	b.n	8007cb2 <_ZN6mynewt2hw6sensor19convert_sensor_data17h960dbb24073819e0E+0x3fa>
        value: match sensor_type {
 8007cb2:	e00d      	b.n	8007cd0 <_ZN6mynewt2hw6sensor19convert_sensor_data17h960dbb24073819e0E+0x418>
 8007cb4:	2000      	movs	r0, #0
            }
            //  TODO: Convert other sensor types
            _ => { assert!(false, "sensor type"); SensorValueType::None }  //  Unknown type of sensor value
 8007cb6:	2800      	cmp	r0, #0
 8007cb8:	d107      	bne.n	8007cca <_ZN6mynewt2hw6sensor19convert_sensor_data17h960dbb24073819e0E+0x412>
 8007cba:	e7ff      	b.n	8007cbc <_ZN6mynewt2hw6sensor19convert_sensor_data17h960dbb24073819e0E+0x404>
 8007cbc:	f246 4064 	movw	r0, #25700	; 0x6464
 8007cc0:	f6c0 0001 	movt	r0, #2049	; 0x801
 8007cc4:	f000 fce3 	bl	800868e <_ZN4core9panicking5panic17h138a849f37d3ac2dE>
 8007cc8:	defe      	udf	#254	; 0xfe
 8007cca:	2000      	movs	r0, #0
 8007ccc:	902c      	str	r0, [sp, #176]	; 0xb0
        value: match sensor_type {
 8007cce:	e7ff      	b.n	8007cd0 <_ZN6mynewt2hw6sensor19convert_sensor_data17h960dbb24073819e0E+0x418>
    SensorValue {
 8007cd0:	9816      	ldr	r0, [sp, #88]	; 0x58
 8007cd2:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8007cd4:	6408      	str	r0, [r1, #64]	; 0x40
 8007cd6:	aa2c      	add	r2, sp, #176	; 0xb0
 8007cd8:	e8b2 5018 	ldmia.w	r2!, {r3, r4, ip, lr}
 8007cdc:	e8a1 5018 	stmia.w	r1!, {r3, r4, ip, lr}
 8007ce0:	e892 5018 	ldmia.w	r2, {r3, r4, ip, lr}
 8007ce4:	e881 5018 	stmia.w	r1, {r3, r4, ip, lr}
 8007ce8:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8007cea:	f101 0220 	add.w	r2, r1, #32
 8007cee:	ab24      	add	r3, sp, #144	; 0x90
 8007cf0:	e8b3 5030 	ldmia.w	r3!, {r4, r5, ip, lr}
 8007cf4:	e8a2 5030 	stmia.w	r2!, {r4, r5, ip, lr}
 8007cf8:	e893 5030 	ldmia.w	r3, {r4, r5, ip, lr}
 8007cfc:	e882 5030 	stmia.w	r2, {r4, r5, ip, lr}
        }
    }
}
 8007d00:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 8007d04:	bdb0      	pop	{r4, r5, r7, pc}

08007d06 <_ZN6mynewt2hw6sensor17register_listener17hc302d184d2da34dbE>:
///  For more information on the type of callbacks available, see the documentation
///  for the sensor listener structure.
///  `sensor`: The sensor to register a listener on.
///  `listener`: The listener to register onto the sensor.
///  Returns `Ok()` on success, `Err()` containing `MynewtError` error code on failure.
pub fn register_listener(sensor: *mut sensor, listener: sensor_listener) -> MynewtResult<()> {  //  Returns an error code upon error. 
 8007d06:	b570      	push	{r4, r5, r6, lr}
 8007d08:	b0d2      	sub	sp, #328	; 0x148
 8007d0a:	4602      	mov	r2, r0
 8007d0c:	9014      	str	r0, [sp, #80]	; 0x50
 8007d0e:	2003      	movs	r0, #3
 8007d10:	2300      	movs	r3, #0
    //  If this is a Wrapped Sensor Listener, register the associated Sensor Listener with Mynewt.
    let mut arg = MAX_SENSOR_LISTENERS + 1;
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	9113      	str	r1, [sp, #76]	; 0x4c
 8007d16:	9212      	str	r2, [sp, #72]	; 0x48
 8007d18:	9011      	str	r0, [sp, #68]	; 0x44
 8007d1a:	f040 8136 	bne.w	8007f8a <_ZN6mynewt2hw6sensor17register_listener17hc302d184d2da34dbE+0x284>
 8007d1e:	e7ff      	b.n	8007d20 <_ZN6mynewt2hw6sensor17register_listener17hc302d184d2da34dbE+0x1a>
 8007d20:	9811      	ldr	r0, [sp, #68]	; 0x44
 8007d22:	9016      	str	r0, [sp, #88]	; 0x58
 8007d24:	2100      	movs	r1, #0
    //  Find a matching `sensor_listener_info`
    for i in 0 .. MAX_SENSOR_LISTENERS {
 8007d26:	9117      	str	r1, [sp, #92]	; 0x5c
 8007d28:	2102      	movs	r1, #2
 8007d2a:	9118      	str	r1, [sp, #96]	; 0x60
 8007d2c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8007d2e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007d30:	f7fd f8c2 	bl	8004eb8 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17ha43f49b82ef7bb66E>
 8007d34:	9010      	str	r0, [sp, #64]	; 0x40
 8007d36:	910f      	str	r1, [sp, #60]	; 0x3c
 8007d38:	e7ff      	b.n	8007d3a <_ZN6mynewt2hw6sensor17register_listener17hc302d184d2da34dbE+0x34>
 8007d3a:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007d3c:	9019      	str	r0, [sp, #100]	; 0x64
 8007d3e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007d40:	911a      	str	r1, [sp, #104]	; 0x68
 8007d42:	e7ff      	b.n	8007d44 <_ZN6mynewt2hw6sensor17register_listener17hc302d184d2da34dbE+0x3e>
 8007d44:	a819      	add	r0, sp, #100	; 0x64
 8007d46:	f7fe ff2b 	bl	8006ba0 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h0f755ebc716ea79fE>
 8007d4a:	911d      	str	r1, [sp, #116]	; 0x74
 8007d4c:	901c      	str	r0, [sp, #112]	; 0x70
 8007d4e:	e7ff      	b.n	8007d50 <_ZN6mynewt2hw6sensor17register_listener17hc302d184d2da34dbE+0x4a>
 8007d50:	981c      	ldr	r0, [sp, #112]	; 0x70
 8007d52:	2800      	cmp	r0, #0
 8007d54:	900e      	str	r0, [sp, #56]	; 0x38
 8007d56:	d010      	beq.n	8007d7a <_ZN6mynewt2hw6sensor17register_listener17hc302d184d2da34dbE+0x74>
 8007d58:	e7ff      	b.n	8007d5a <_ZN6mynewt2hw6sensor17register_listener17hc302d184d2da34dbE+0x54>
 8007d5a:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007d5c:	2801      	cmp	r0, #1
 8007d5e:	d001      	beq.n	8007d64 <_ZN6mynewt2hw6sensor17register_listener17hc302d184d2da34dbE+0x5e>
 8007d60:	e7ff      	b.n	8007d62 <_ZN6mynewt2hw6sensor17register_listener17hc302d184d2da34dbE+0x5c>
        unsafe { LISTENER_INTERNAL = listener };
        //  Pass the internal listener to the unsafe Mynewt API.
        unsafe { sensor_register_listener(sensor, &mut LISTENER_INTERNAL) };
    }
    Ok(())
}
 8007d62:	defe      	udf	#254	; 0xfe
    for i in 0 .. MAX_SENSOR_LISTENERS {
 8007d64:	981d      	ldr	r0, [sp, #116]	; 0x74
 8007d66:	901e      	str	r0, [sp, #120]	; 0x78
 8007d68:	981e      	ldr	r0, [sp, #120]	; 0x78
 8007d6a:	901b      	str	r0, [sp, #108]	; 0x6c
 8007d6c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8007d6e:	901f      	str	r0, [sp, #124]	; 0x7c
        let info = unsafe { SENSOR_LISTENERS[i] };        
 8007d70:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8007d72:	2802      	cmp	r0, #2
 8007d74:	900d      	str	r0, [sp, #52]	; 0x34
 8007d76:	d305      	bcc.n	8007d84 <_ZN6mynewt2hw6sensor17register_listener17hc302d184d2da34dbE+0x7e>
 8007d78:	e10e      	b.n	8007f98 <_ZN6mynewt2hw6sensor17register_listener17hc302d184d2da34dbE+0x292>
    for i in 0 .. MAX_SENSOR_LISTENERS {
 8007d7a:	e7ff      	b.n	8007d7c <_ZN6mynewt2hw6sensor17register_listener17hc302d184d2da34dbE+0x76>
    if arg < MAX_SENSOR_LISTENERS {
 8007d7c:	9816      	ldr	r0, [sp, #88]	; 0x58
 8007d7e:	2802      	cmp	r0, #2
 8007d80:	d351      	bcc.n	8007e26 <_ZN6mynewt2hw6sensor17register_listener17hc302d184d2da34dbE+0x120>
 8007d82:	e068      	b.n	8007e56 <_ZN6mynewt2hw6sensor17register_listener17hc302d184d2da34dbE+0x150>
        let info = unsafe { SENSOR_LISTENERS[i] };        
 8007d84:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007d86:	eb00 0180 	add.w	r1, r0, r0, lsl #2
 8007d8a:	f240 12a8 	movw	r2, #424	; 0x1a8
 8007d8e:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8007d92:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8007d96:	aa20      	add	r2, sp, #128	; 0x80
 8007d98:	e8b1 5038 	ldmia.w	r1!, {r3, r4, r5, ip, lr}
 8007d9c:	e8a2 5038 	stmia.w	r2!, {r3, r4, r5, ip, lr}
 8007da0:	e891 5038 	ldmia.w	r1, {r3, r4, r5, ip, lr}
 8007da4:	e882 5038 	stmia.w	r2, {r3, r4, r5, ip, lr}
        if  listener.sl_sensor_type == info.listener.sl_sensor_type &&
 8007da8:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007daa:	680a      	ldr	r2, [r1, #0]
 8007dac:	684b      	ldr	r3, [r1, #4]
 8007dae:	f8dd c088 	ldr.w	ip, [sp, #136]	; 0x88
 8007db2:	f8dd e08c 	ldr.w	lr, [sp, #140]	; 0x8c
 8007db6:	ea83 030e 	eor.w	r3, r3, lr
 8007dba:	ea82 020c 	eor.w	r2, r2, ip
 8007dbe:	431a      	orrs	r2, r3
 8007dc0:	2a00      	cmp	r2, #0
 8007dc2:	d018      	beq.n	8007df6 <_ZN6mynewt2hw6sensor17register_listener17hc302d184d2da34dbE+0xf0>
 8007dc4:	e013      	b.n	8007dee <_ZN6mynewt2hw6sensor17register_listener17hc302d184d2da34dbE+0xe8>
 8007dc6:	2000      	movs	r0, #0
 8007dc8:	f88d 00ae 	strb.w	r0, [sp, #174]	; 0xae
 8007dcc:	e009      	b.n	8007de2 <_ZN6mynewt2hw6sensor17register_listener17hc302d184d2da34dbE+0xdc>
            listener.sl_arg         == info.listener.sl_arg {
 8007dce:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8007dd0:	68c1      	ldr	r1, [r0, #12]
 8007dd2:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8007dd4:	1a89      	subs	r1, r1, r2
 8007dd6:	fab1 f181 	clz	r1, r1
 8007dda:	0949      	lsrs	r1, r1, #5
        if  listener.sl_sensor_type == info.listener.sl_sensor_type &&
 8007ddc:	f88d 10ae 	strb.w	r1, [sp, #174]	; 0xae
 8007de0:	e7ff      	b.n	8007de2 <_ZN6mynewt2hw6sensor17register_listener17hc302d184d2da34dbE+0xdc>
 8007de2:	f89d 00ae 	ldrb.w	r0, [sp, #174]	; 0xae
 8007de6:	07c0      	lsls	r0, r0, #31
 8007de8:	2800      	cmp	r0, #0
 8007dea:	d118      	bne.n	8007e1e <_ZN6mynewt2hw6sensor17register_listener17hc302d184d2da34dbE+0x118>
 8007dec:	e01a      	b.n	8007e24 <_ZN6mynewt2hw6sensor17register_listener17hc302d184d2da34dbE+0x11e>
 8007dee:	2000      	movs	r0, #0
 8007df0:	f88d 00af 	strb.w	r0, [sp, #175]	; 0xaf
 8007df4:	e007      	b.n	8007e06 <_ZN6mynewt2hw6sensor17register_listener17hc302d184d2da34dbE+0x100>
            listener.sl_func        == info.listener.sl_func &&
 8007df6:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8007df8:	3008      	adds	r0, #8
 8007dfa:	a920      	add	r1, sp, #128	; 0x80
 8007dfc:	3110      	adds	r1, #16
 8007dfe:	f7fd f9f7 	bl	80051f0 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hc10bf46bde31ca95E>
 8007e02:	900c      	str	r0, [sp, #48]	; 0x30
 8007e04:	e005      	b.n	8007e12 <_ZN6mynewt2hw6sensor17register_listener17hc302d184d2da34dbE+0x10c>
        if  listener.sl_sensor_type == info.listener.sl_sensor_type &&
 8007e06:	f89d 00af 	ldrb.w	r0, [sp, #175]	; 0xaf
 8007e0a:	07c0      	lsls	r0, r0, #31
 8007e0c:	2800      	cmp	r0, #0
 8007e0e:	d1de      	bne.n	8007dce <_ZN6mynewt2hw6sensor17register_listener17hc302d184d2da34dbE+0xc8>
 8007e10:	e7d9      	b.n	8007dc6 <_ZN6mynewt2hw6sensor17register_listener17hc302d184d2da34dbE+0xc0>
 8007e12:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007e14:	f000 0101 	and.w	r1, r0, #1
 8007e18:	f88d 10af 	strb.w	r1, [sp, #175]	; 0xaf
 8007e1c:	e7f3      	b.n	8007e06 <_ZN6mynewt2hw6sensor17register_listener17hc302d184d2da34dbE+0x100>
            arg = i;  //  Found the match
 8007e1e:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8007e20:	9016      	str	r0, [sp, #88]	; 0x58
            break;
 8007e22:	e7ab      	b.n	8007d7c <_ZN6mynewt2hw6sensor17register_listener17hc302d184d2da34dbE+0x76>
    for i in 0 .. MAX_SENSOR_LISTENERS {
 8007e24:	e78e      	b.n	8007d44 <_ZN6mynewt2hw6sensor17register_listener17hc302d184d2da34dbE+0x3e>
        unsafe { sensor_register_listener(sensor, &mut SENSOR_LISTENERS[arg].listener) };
 8007e26:	9814      	ldr	r0, [sp, #80]	; 0x50
 8007e28:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007e2a:	2901      	cmp	r1, #1
 8007e2c:	900b      	str	r0, [sp, #44]	; 0x2c
 8007e2e:	910a      	str	r1, [sp, #40]	; 0x28
 8007e30:	f200 80bb 	bhi.w	8007faa <_ZN6mynewt2hw6sensor17register_listener17hc302d184d2da34dbE+0x2a4>
 8007e34:	e7ff      	b.n	8007e36 <_ZN6mynewt2hw6sensor17register_listener17hc302d184d2da34dbE+0x130>
 8007e36:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007e38:	eb00 0180 	add.w	r1, r0, r0, lsl #2
 8007e3c:	f240 12a8 	movw	r2, #424	; 0x1a8
 8007e40:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8007e44:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8007e48:	3108      	adds	r1, #8
 8007e4a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007e4c:	f004 fa28 	bl	800c2a0 <sensor_register_listener>
 8007e50:	9009      	str	r0, [sp, #36]	; 0x24
 8007e52:	e7ff      	b.n	8007e54 <_ZN6mynewt2hw6sensor17register_listener17hc302d184d2da34dbE+0x14e>
    if arg < MAX_SENSOR_LISTENERS {
 8007e54:	e092      	b.n	8007f7c <_ZN6mynewt2hw6sensor17register_listener17hc302d184d2da34dbE+0x276>
        unsafe { assert_eq!(LISTENER_INTERNAL.sl_sensor_type, 0, "reg lis") };  //  Make sure it's not used.
 8007e56:	f240 10f8 	movw	r0, #504	; 0x1f8
 8007e5a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8007e5e:	902c      	str	r0, [sp, #176]	; 0xb0
 8007e60:	f246 6008 	movw	r0, #26120	; 0x6608
 8007e64:	f6c0 0001 	movt	r0, #2049	; 0x801
 8007e68:	902d      	str	r0, [sp, #180]	; 0xb4
 8007e6a:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8007e6c:	902e      	str	r0, [sp, #184]	; 0xb8
 8007e6e:	982d      	ldr	r0, [sp, #180]	; 0xb4
 8007e70:	902f      	str	r0, [sp, #188]	; 0xbc
 8007e72:	982e      	ldr	r0, [sp, #184]	; 0xb8
 8007e74:	6801      	ldr	r1, [r0, #0]
 8007e76:	6840      	ldr	r0, [r0, #4]
 8007e78:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8007e7a:	6813      	ldr	r3, [r2, #0]
 8007e7c:	6852      	ldr	r2, [r2, #4]
 8007e7e:	4050      	eors	r0, r2
 8007e80:	4059      	eors	r1, r3
 8007e82:	4308      	orrs	r0, r1
 8007e84:	2800      	cmp	r0, #0
 8007e86:	d014      	beq.n	8007eb2 <_ZN6mynewt2hw6sensor17register_listener17hc302d184d2da34dbE+0x1ac>
 8007e88:	e7ff      	b.n	8007e8a <_ZN6mynewt2hw6sensor17register_listener17hc302d184d2da34dbE+0x184>
 8007e8a:	982e      	ldr	r0, [sp, #184]	; 0xb8
 8007e8c:	903f      	str	r0, [sp, #252]	; 0xfc
 8007e8e:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8007e90:	9040      	str	r0, [sp, #256]	; 0x100
 8007e92:	4668      	mov	r0, sp
 8007e94:	2100      	movs	r1, #0
 8007e96:	6001      	str	r1, [r0, #0]
 8007e98:	f246 6118 	movw	r1, #26136	; 0x6618
 8007e9c:	f6c0 0101 	movt	r1, #2049	; 0x801
 8007ea0:	f246 43e8 	movw	r3, #25832	; 0x64e8
 8007ea4:	f6c0 0301 	movt	r3, #2049	; 0x801
 8007ea8:	a841      	add	r0, sp, #260	; 0x104
 8007eaa:	2201      	movs	r2, #1
 8007eac:	f7fc ff6e 	bl	8004d8c <_ZN4core3fmt9Arguments6new_v117h7b18277453f88ac4E>
 8007eb0:	e014      	b.n	8007edc <_ZN6mynewt2hw6sensor17register_listener17hc302d184d2da34dbE+0x1d6>
 8007eb2:	a84a      	add	r0, sp, #296	; 0x128
        unsafe { LISTENER_INTERNAL = listener };
 8007eb4:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007eb6:	4602      	mov	r2, r0
 8007eb8:	e891 5078 	ldmia.w	r1, {r3, r4, r5, r6, ip, lr}
 8007ebc:	e882 5078 	stmia.w	r2, {r3, r4, r5, r6, ip, lr}
 8007ec0:	f240 11f8 	movw	r1, #504	; 0x1f8
 8007ec4:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8007ec8:	460a      	mov	r2, r1
 8007eca:	e890 5078 	ldmia.w	r0, {r3, r4, r5, r6, ip, lr}
 8007ece:	e882 5078 	stmia.w	r2, {r3, r4, r5, r6, ip, lr}
        unsafe { sensor_register_listener(sensor, &mut LISTENER_INTERNAL) };
 8007ed2:	9814      	ldr	r0, [sp, #80]	; 0x50
 8007ed4:	f004 f9e4 	bl	800c2a0 <sensor_register_listener>
 8007ed8:	9008      	str	r0, [sp, #32]
 8007eda:	e04e      	b.n	8007f7a <_ZN6mynewt2hw6sensor17register_listener17hc302d184d2da34dbE+0x274>
 8007edc:	a83f      	add	r0, sp, #252	; 0xfc
        unsafe { assert_eq!(LISTENER_INTERNAL.sl_sensor_type, 0, "reg lis") };  //  Make sure it's not used.
 8007ede:	903c      	str	r0, [sp, #240]	; 0xf0
 8007ee0:	a840      	add	r0, sp, #256	; 0x100
 8007ee2:	903d      	str	r0, [sp, #244]	; 0xf4
 8007ee4:	a841      	add	r0, sp, #260	; 0x104
 8007ee6:	903e      	str	r0, [sp, #248]	; 0xf8
 8007ee8:	983c      	ldr	r0, [sp, #240]	; 0xf0
 8007eea:	9047      	str	r0, [sp, #284]	; 0x11c
 8007eec:	983d      	ldr	r0, [sp, #244]	; 0xf4
 8007eee:	9048      	str	r0, [sp, #288]	; 0x120
 8007ef0:	983e      	ldr	r0, [sp, #248]	; 0xf8
 8007ef2:	9049      	str	r0, [sp, #292]	; 0x124
 8007ef4:	9847      	ldr	r0, [sp, #284]	; 0x11c
 8007ef6:	f644 3129 	movw	r1, #19241	; 0x4b29
 8007efa:	f6c0 0100 	movt	r1, #2048	; 0x800
 8007efe:	f7fc fe96 	bl	8004c2e <_ZN4core3fmt10ArgumentV13new17h99edaec200b06545E>
 8007f02:	9007      	str	r0, [sp, #28]
 8007f04:	9106      	str	r1, [sp, #24]
 8007f06:	e7ff      	b.n	8007f08 <_ZN6mynewt2hw6sensor17register_listener17hc302d184d2da34dbE+0x202>
 8007f08:	9848      	ldr	r0, [sp, #288]	; 0x120
 8007f0a:	f644 3129 	movw	r1, #19241	; 0x4b29
 8007f0e:	f6c0 0100 	movt	r1, #2048	; 0x800
 8007f12:	f7fc fe8c 	bl	8004c2e <_ZN4core3fmt10ArgumentV13new17h99edaec200b06545E>
 8007f16:	9005      	str	r0, [sp, #20]
 8007f18:	9104      	str	r1, [sp, #16]
 8007f1a:	e7ff      	b.n	8007f1c <_ZN6mynewt2hw6sensor17register_listener17hc302d184d2da34dbE+0x216>
 8007f1c:	9849      	ldr	r0, [sp, #292]	; 0x124
 8007f1e:	f249 0185 	movw	r1, #36997	; 0x9085
 8007f22:	f6c0 0100 	movt	r1, #2048	; 0x800
 8007f26:	f7fc ff18 	bl	8004d5a <_ZN4core3fmt10ArgumentV13new17hf7ba76b3ae396a12E>
 8007f2a:	9003      	str	r0, [sp, #12]
 8007f2c:	9102      	str	r1, [sp, #8]
 8007f2e:	e7ff      	b.n	8007f30 <_ZN6mynewt2hw6sensor17register_listener17hc302d184d2da34dbE+0x22a>
 8007f30:	9807      	ldr	r0, [sp, #28]
 8007f32:	9036      	str	r0, [sp, #216]	; 0xd8
 8007f34:	9906      	ldr	r1, [sp, #24]
 8007f36:	9137      	str	r1, [sp, #220]	; 0xdc
 8007f38:	9a05      	ldr	r2, [sp, #20]
 8007f3a:	9238      	str	r2, [sp, #224]	; 0xe0
 8007f3c:	9b04      	ldr	r3, [sp, #16]
 8007f3e:	9339      	str	r3, [sp, #228]	; 0xe4
 8007f40:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8007f44:	f8cd c0e8 	str.w	ip, [sp, #232]	; 0xe8
 8007f48:	f8dd e008 	ldr.w	lr, [sp, #8]
 8007f4c:	f8cd e0ec 	str.w	lr, [sp, #236]	; 0xec
 8007f50:	466c      	mov	r4, sp
 8007f52:	2503      	movs	r5, #3
 8007f54:	6025      	str	r5, [r4, #0]
 8007f56:	f246 41bc 	movw	r1, #25788	; 0x64bc
 8007f5a:	f6c0 0101 	movt	r1, #2049	; 0x801
 8007f5e:	a830      	add	r0, sp, #192	; 0xc0
 8007f60:	ab36      	add	r3, sp, #216	; 0xd8
 8007f62:	462a      	mov	r2, r5
 8007f64:	f7fc ff12 	bl	8004d8c <_ZN4core3fmt9Arguments6new_v117h7b18277453f88ac4E>
 8007f68:	e7ff      	b.n	8007f6a <_ZN6mynewt2hw6sensor17register_listener17hc302d184d2da34dbE+0x264>
 8007f6a:	f246 6120 	movw	r1, #26144	; 0x6620
 8007f6e:	f6c0 0101 	movt	r1, #2049	; 0x801
 8007f72:	a830      	add	r0, sp, #192	; 0xc0
 8007f74:	f000 fbc8 	bl	8008708 <_ZN4core9panicking9panic_fmt17hbfe32cf8392a510cE>
 8007f78:	defe      	udf	#254	; 0xfe
    if arg < MAX_SENSOR_LISTENERS {
 8007f7a:	e7ff      	b.n	8007f7c <_ZN6mynewt2hw6sensor17register_listener17hc302d184d2da34dbE+0x276>
 8007f7c:	2000      	movs	r0, #0
    Ok(())
 8007f7e:	9015      	str	r0, [sp, #84]	; 0x54
 8007f80:	2001      	movs	r0, #1
 8007f82:	9015      	str	r0, [sp, #84]	; 0x54
}
 8007f84:	9815      	ldr	r0, [sp, #84]	; 0x54
 8007f86:	b052      	add	sp, #328	; 0x148
 8007f88:	bd70      	pop	{r4, r5, r6, pc}
    let mut arg = MAX_SENSOR_LISTENERS + 1;
 8007f8a:	f246 50cc 	movw	r0, #26060	; 0x65cc
 8007f8e:	f6c0 0001 	movt	r0, #2049	; 0x801
 8007f92:	f000 fb7c 	bl	800868e <_ZN4core9panicking5panic17h138a849f37d3ac2dE>
 8007f96:	defe      	udf	#254	; 0xfe
        let info = unsafe { SENSOR_LISTENERS[i] };        
 8007f98:	f246 50e4 	movw	r0, #26084	; 0x65e4
 8007f9c:	f6c0 0001 	movt	r0, #2049	; 0x801
 8007fa0:	2202      	movs	r2, #2
 8007fa2:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007fa4:	f000 fb90 	bl	80086c8 <_ZN4core9panicking18panic_bounds_check17h794d18f1ca9e50a8E>
 8007fa8:	defe      	udf	#254	; 0xfe
        unsafe { sensor_register_listener(sensor, &mut SENSOR_LISTENERS[arg].listener) };
 8007faa:	f246 50f4 	movw	r0, #26100	; 0x65f4
 8007fae:	f6c0 0001 	movt	r0, #2049	; 0x801
 8007fb2:	2202      	movs	r2, #2
 8007fb4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007fb6:	f000 fb87 	bl	80086c8 <_ZN4core9panicking18panic_bounds_check17h794d18f1ca9e50a8E>
 8007fba:	defe      	udf	#254	; 0xfe

08007fbc <_ZN6mynewt2hw6sensor19new_sensor_listener17h2b99bb3fa912f4a2E>:

///  Wrapped version of `sensor_data_func` used by Visual Embedded Rust
pub type SensorValueFunc = fn(sensor_value: &SensorValue) -> MynewtResult<()>;

///  Return a new `sensor_listener` with the sensor type and sensor value function. Called by Visual Embedded Rust.
pub fn new_sensor_listener(
 8007fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fc0:	b0cd      	sub	sp, #308	; 0x134
 8007fc2:	469c      	mov	ip, r3
 8007fc4:	4696      	mov	lr, r2
 8007fc6:	9c56      	ldr	r4, [sp, #344]	; 0x158
 8007fc8:	460d      	mov	r5, r1
 8007fca:	9115      	str	r1, [sp, #84]	; 0x54
 8007fcc:	9317      	str	r3, [sp, #92]	; 0x5c
 8007fce:	9216      	str	r2, [sp, #88]	; 0x58
    sensor_key:     &'static Strn,
    sensor_type:    sensor_type_t, 
    listener_func:  SensorValueFunc
) -> MynewtResult<sensor_listener> {
    assert!(!sensor_key.is_empty(), "missing sensor key");
 8007fd0:	9915      	ldr	r1, [sp, #84]	; 0x54
 8007fd2:	9014      	str	r0, [sp, #80]	; 0x50
 8007fd4:	4608      	mov	r0, r1
 8007fd6:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
 8007fda:	f8cd e048 	str.w	lr, [sp, #72]	; 0x48
 8007fde:	9411      	str	r4, [sp, #68]	; 0x44
 8007fe0:	9510      	str	r5, [sp, #64]	; 0x40
 8007fe2:	f7fc fc23 	bl	800482c <_ZN6mynewt4Strn8is_empty17haf426a9141c41dd7E>
 8007fe6:	900f      	str	r0, [sp, #60]	; 0x3c
 8007fe8:	e7ff      	b.n	8007fea <_ZN6mynewt2hw6sensor19new_sensor_listener17h2b99bb3fa912f4a2E+0x2e>
 8007fea:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8007fec:	07c1      	lsls	r1, r0, #31
 8007fee:	2900      	cmp	r1, #0
 8007ff0:	d007      	beq.n	8008002 <_ZN6mynewt2hw6sensor19new_sensor_listener17h2b99bb3fa912f4a2E+0x46>
 8007ff2:	e7ff      	b.n	8007ff4 <_ZN6mynewt2hw6sensor19new_sensor_listener17h2b99bb3fa912f4a2E+0x38>
 8007ff4:	f246 6044 	movw	r0, #26180	; 0x6644
 8007ff8:	f6c0 0001 	movt	r0, #2049	; 0x801
 8007ffc:	f000 fb47 	bl	800868e <_ZN4core9panicking5panic17h138a849f37d3ac2dE>
 8008000:	defe      	udf	#254	; 0xfe
 8008002:	2003      	movs	r0, #3
 8008004:	2100      	movs	r1, #0
    //  Find an unused `sensor_listener_info`
    let mut arg = MAX_SENSOR_LISTENERS + 1;
 8008006:	2900      	cmp	r1, #0
 8008008:	900e      	str	r0, [sp, #56]	; 0x38
 800800a:	f040 80c7 	bne.w	800819c <_ZN6mynewt2hw6sensor19new_sensor_listener17h2b99bb3fa912f4a2E+0x1e0>
 800800e:	e7ff      	b.n	8008010 <_ZN6mynewt2hw6sensor19new_sensor_listener17h2b99bb3fa912f4a2E+0x54>
 8008010:	980e      	ldr	r0, [sp, #56]	; 0x38
 8008012:	9018      	str	r0, [sp, #96]	; 0x60
 8008014:	2100      	movs	r1, #0
    for i in 0 .. MAX_SENSOR_LISTENERS {
 8008016:	9119      	str	r1, [sp, #100]	; 0x64
 8008018:	2102      	movs	r1, #2
 800801a:	911a      	str	r1, [sp, #104]	; 0x68
 800801c:	9819      	ldr	r0, [sp, #100]	; 0x64
 800801e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008020:	f7fc ff4a 	bl	8004eb8 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17ha43f49b82ef7bb66E>
 8008024:	900d      	str	r0, [sp, #52]	; 0x34
 8008026:	910c      	str	r1, [sp, #48]	; 0x30
 8008028:	e7ff      	b.n	800802a <_ZN6mynewt2hw6sensor19new_sensor_listener17h2b99bb3fa912f4a2E+0x6e>
 800802a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800802c:	901b      	str	r0, [sp, #108]	; 0x6c
 800802e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008030:	911c      	str	r1, [sp, #112]	; 0x70
 8008032:	e7ff      	b.n	8008034 <_ZN6mynewt2hw6sensor19new_sensor_listener17h2b99bb3fa912f4a2E+0x78>
 8008034:	a81b      	add	r0, sp, #108	; 0x6c
 8008036:	f7fe fdb3 	bl	8006ba0 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h0f755ebc716ea79fE>
 800803a:	911f      	str	r1, [sp, #124]	; 0x7c
 800803c:	901e      	str	r0, [sp, #120]	; 0x78
 800803e:	e7ff      	b.n	8008040 <_ZN6mynewt2hw6sensor19new_sensor_listener17h2b99bb3fa912f4a2E+0x84>
 8008040:	981e      	ldr	r0, [sp, #120]	; 0x78
 8008042:	2800      	cmp	r0, #0
 8008044:	900b      	str	r0, [sp, #44]	; 0x2c
 8008046:	d010      	beq.n	800806a <_ZN6mynewt2hw6sensor19new_sensor_listener17h2b99bb3fa912f4a2E+0xae>
 8008048:	e7ff      	b.n	800804a <_ZN6mynewt2hw6sensor19new_sensor_listener17h2b99bb3fa912f4a2E+0x8e>
 800804a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800804c:	2801      	cmp	r0, #1
 800804e:	d001      	beq.n	8008054 <_ZN6mynewt2hw6sensor19new_sensor_listener17h2b99bb3fa912f4a2E+0x98>
 8008050:	e7ff      	b.n	8008052 <_ZN6mynewt2hw6sensor19new_sensor_listener17h2b99bb3fa912f4a2E+0x96>
        listener_func,
        listener,
    } };
    //  Return the Mynewt `sensor_listener`
    Ok(listener)
}
 8008052:	defe      	udf	#254	; 0xfe
    for i in 0 .. MAX_SENSOR_LISTENERS {
 8008054:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8008056:	9020      	str	r0, [sp, #128]	; 0x80
 8008058:	9820      	ldr	r0, [sp, #128]	; 0x80
 800805a:	901d      	str	r0, [sp, #116]	; 0x74
 800805c:	981d      	ldr	r0, [sp, #116]	; 0x74
 800805e:	9021      	str	r0, [sp, #132]	; 0x84
        let info = unsafe { SENSOR_LISTENERS[i] };
 8008060:	9821      	ldr	r0, [sp, #132]	; 0x84
 8008062:	2802      	cmp	r0, #2
 8008064:	900a      	str	r0, [sp, #40]	; 0x28
 8008066:	d305      	bcc.n	8008074 <_ZN6mynewt2hw6sensor19new_sensor_listener17h2b99bb3fa912f4a2E+0xb8>
 8008068:	e09f      	b.n	80081aa <_ZN6mynewt2hw6sensor19new_sensor_listener17h2b99bb3fa912f4a2E+0x1ee>
    for i in 0 .. MAX_SENSOR_LISTENERS {
 800806a:	e7ff      	b.n	800806c <_ZN6mynewt2hw6sensor19new_sensor_listener17h2b99bb3fa912f4a2E+0xb0>
    assert!(arg < MAX_SENSOR_LISTENERS, "increase MAX_SENSOR_LISTENERS");  //  Too many listeners registered. Increase MAX_SENSOR_LISTENERS
 800806c:	9818      	ldr	r0, [sp, #96]	; 0x60
 800806e:	2801      	cmp	r0, #1
 8008070:	d820      	bhi.n	80080b4 <_ZN6mynewt2hw6sensor19new_sensor_listener17h2b99bb3fa912f4a2E+0xf8>
 8008072:	e026      	b.n	80080c2 <_ZN6mynewt2hw6sensor19new_sensor_listener17h2b99bb3fa912f4a2E+0x106>
        let info = unsafe { SENSOR_LISTENERS[i] };
 8008074:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008076:	eb00 0180 	add.w	r1, r0, r0, lsl #2
 800807a:	f240 12a8 	movw	r2, #424	; 0x1a8
 800807e:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8008082:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8008086:	aa22      	add	r2, sp, #136	; 0x88
 8008088:	e8b1 5038 	ldmia.w	r1!, {r3, r4, r5, ip, lr}
 800808c:	e8a2 5038 	stmia.w	r2!, {r3, r4, r5, ip, lr}
 8008090:	e891 5038 	ldmia.w	r1, {r3, r4, r5, ip, lr}
 8008094:	e882 5038 	stmia.w	r2, {r3, r4, r5, ip, lr}
        if info.sensor_key.is_empty() {
 8008098:	982a      	ldr	r0, [sp, #168]	; 0xa8
 800809a:	f7fc fbc7 	bl	800482c <_ZN6mynewt4Strn8is_empty17haf426a9141c41dd7E>
 800809e:	9009      	str	r0, [sp, #36]	; 0x24
 80080a0:	e7ff      	b.n	80080a2 <_ZN6mynewt2hw6sensor19new_sensor_listener17h2b99bb3fa912f4a2E+0xe6>
 80080a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80080a4:	07c1      	lsls	r1, r0, #31
 80080a6:	2900      	cmp	r1, #0
 80080a8:	d003      	beq.n	80080b2 <_ZN6mynewt2hw6sensor19new_sensor_listener17h2b99bb3fa912f4a2E+0xf6>
 80080aa:	e7ff      	b.n	80080ac <_ZN6mynewt2hw6sensor19new_sensor_listener17h2b99bb3fa912f4a2E+0xf0>
            arg = i;
 80080ac:	9821      	ldr	r0, [sp, #132]	; 0x84
 80080ae:	9018      	str	r0, [sp, #96]	; 0x60
            break;
 80080b0:	e7dc      	b.n	800806c <_ZN6mynewt2hw6sensor19new_sensor_listener17h2b99bb3fa912f4a2E+0xb0>
    for i in 0 .. MAX_SENSOR_LISTENERS {
 80080b2:	e7bf      	b.n	8008034 <_ZN6mynewt2hw6sensor19new_sensor_listener17h2b99bb3fa912f4a2E+0x78>
    assert!(arg < MAX_SENSOR_LISTENERS, "increase MAX_SENSOR_LISTENERS");  //  Too many listeners registered. Increase MAX_SENSOR_LISTENERS
 80080b4:	f246 60a4 	movw	r0, #26276	; 0x66a4
 80080b8:	f6c0 0001 	movt	r0, #2049	; 0x801
 80080bc:	f000 fae7 	bl	800868e <_ZN4core9panicking5panic17h138a849f37d3ac2dE>
 80080c0:	defe      	udf	#254	; 0xfe
        sl_sensor_type: sensor_type,
 80080c2:	9816      	ldr	r0, [sp, #88]	; 0x58
 80080c4:	9917      	ldr	r1, [sp, #92]	; 0x5c
        sl_func:        Some(wrap_sensor_listener),
 80080c6:	f248 12cf 	movw	r2, #33231	; 0x81cf
 80080ca:	f6c0 0200 	movt	r2, #2048	; 0x800
 80080ce:	9233      	str	r2, [sp, #204]	; 0xcc
        sl_arg:         arg as *mut c_void,
 80080d0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80080d2:	2300      	movs	r3, #0
        ..fill_zero!(sensor_listener)
 80080d4:	933f      	str	r3, [sp, #252]	; 0xfc
 80080d6:	933e      	str	r3, [sp, #248]	; 0xf8
 80080d8:	933d      	str	r3, [sp, #244]	; 0xf4
 80080da:	933c      	str	r3, [sp, #240]	; 0xf0
 80080dc:	933b      	str	r3, [sp, #236]	; 0xec
 80080de:	933a      	str	r3, [sp, #232]	; 0xe8
 80080e0:	ab34      	add	r3, sp, #208	; 0xd0
 80080e2:	f10d 0ce8 	add.w	ip, sp, #232	; 0xe8
 80080e6:	f04f 0e18 	mov.w	lr, #24
 80080ea:	9008      	str	r0, [sp, #32]
 80080ec:	4618      	mov	r0, r3
 80080ee:	9107      	str	r1, [sp, #28]
 80080f0:	4661      	mov	r1, ip
 80080f2:	9206      	str	r2, [sp, #24]
 80080f4:	4672      	mov	r2, lr
 80080f6:	f00d fdd9 	bl	8015cac <__aeabi_memcpy>
 80080fa:	9005      	str	r0, [sp, #20]
 80080fc:	e7ff      	b.n	80080fe <_ZN6mynewt2hw6sensor19new_sensor_listener17h2b99bb3fa912f4a2E+0x142>
    let listener = sensor_listener {
 80080fe:	9808      	ldr	r0, [sp, #32]
 8008100:	902c      	str	r0, [sp, #176]	; 0xb0
 8008102:	9907      	ldr	r1, [sp, #28]
 8008104:	912d      	str	r1, [sp, #180]	; 0xb4
 8008106:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8008108:	922e      	str	r2, [sp, #184]	; 0xb8
 800810a:	9a06      	ldr	r2, [sp, #24]
 800810c:	922f      	str	r2, [sp, #188]	; 0xbc
 800810e:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8008110:	9330      	str	r3, [sp, #192]	; 0xc0
        sensor_key,
 8008112:	9b15      	ldr	r3, [sp, #84]	; 0x54
        sensor_type,
 8008114:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8008118:	f8dd e05c 	ldr.w	lr, [sp, #92]	; 0x5c
        listener_func,
 800811c:	9c56      	ldr	r4, [sp, #344]	; 0x158
 800811e:	ad2c      	add	r5, sp, #176	; 0xb0
 8008120:	ae40      	add	r6, sp, #256	; 0x100
        listener,
 8008122:	e895 0f81 	ldmia.w	r5, {r0, r7, r8, r9, sl, fp}
 8008126:	e886 0f81 	stmia.w	r6, {r0, r7, r8, r9, sl, fp}
    unsafe { SENSOR_LISTENERS[arg] = sensor_listener_info {
 800812a:	9818      	ldr	r0, [sp, #96]	; 0x60
 800812c:	2801      	cmp	r0, #1
 800812e:	9304      	str	r3, [sp, #16]
 8008130:	f8cd c00c 	str.w	ip, [sp, #12]
 8008134:	f8cd e008 	str.w	lr, [sp, #8]
 8008138:	9401      	str	r4, [sp, #4]
 800813a:	9000      	str	r0, [sp, #0]
 800813c:	d83e      	bhi.n	80081bc <_ZN6mynewt2hw6sensor19new_sensor_listener17h2b99bb3fa912f4a2E+0x200>
 800813e:	e7ff      	b.n	8008140 <_ZN6mynewt2hw6sensor19new_sensor_listener17h2b99bb3fa912f4a2E+0x184>
 8008140:	9800      	ldr	r0, [sp, #0]
 8008142:	eb00 0180 	add.w	r1, r0, r0, lsl #2
 8008146:	f240 12a8 	movw	r2, #424	; 0x1a8
 800814a:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800814e:	eb02 03c1 	add.w	r3, r2, r1, lsl #3
 8008152:	f8dd c010 	ldr.w	ip, [sp, #16]
 8008156:	f8c3 c020 	str.w	ip, [r3, #32]
 800815a:	f8dd e00c 	ldr.w	lr, [sp, #12]
 800815e:	f842 e031 	str.w	lr, [r2, r1, lsl #3]
 8008162:	9902      	ldr	r1, [sp, #8]
 8008164:	6059      	str	r1, [r3, #4]
 8008166:	9a01      	ldr	r2, [sp, #4]
 8008168:	625a      	str	r2, [r3, #36]	; 0x24
 800816a:	3308      	adds	r3, #8
 800816c:	ac40      	add	r4, sp, #256	; 0x100
 800816e:	e894 07e0 	ldmia.w	r4, {r5, r6, r7, r8, r9, sl}
 8008172:	e883 07e0 	stmia.w	r3, {r5, r6, r7, r8, r9, sl}
 8008176:	ab2c      	add	r3, sp, #176	; 0xb0
 8008178:	ac46      	add	r4, sp, #280	; 0x118
    Ok(listener)
 800817a:	4625      	mov	r5, r4
 800817c:	e893 0fc0 	ldmia.w	r3, {r6, r7, r8, r9, sl, fp}
 8008180:	e885 0fc0 	stmia.w	r5, {r6, r7, r8, r9, sl, fp}
 8008184:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008186:	f103 0508 	add.w	r5, r3, #8
 800818a:	e894 0fc0 	ldmia.w	r4, {r6, r7, r8, r9, sl, fp}
 800818e:	e885 0fc0 	stmia.w	r5, {r6, r7, r8, r9, sl, fp}
 8008192:	2400      	movs	r4, #0
 8008194:	601c      	str	r4, [r3, #0]
}
 8008196:	b04d      	add	sp, #308	; 0x134
 8008198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    let mut arg = MAX_SENSOR_LISTENERS + 1;
 800819c:	f246 605c 	movw	r0, #26204	; 0x665c
 80081a0:	f6c0 0001 	movt	r0, #2049	; 0x801
 80081a4:	f000 fa73 	bl	800868e <_ZN4core9panicking5panic17h138a849f37d3ac2dE>
 80081a8:	defe      	udf	#254	; 0xfe
        let info = unsafe { SENSOR_LISTENERS[i] };
 80081aa:	f246 6074 	movw	r0, #26228	; 0x6674
 80081ae:	f6c0 0001 	movt	r0, #2049	; 0x801
 80081b2:	2202      	movs	r2, #2
 80081b4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80081b6:	f000 fa87 	bl	80086c8 <_ZN4core9panicking18panic_bounds_check17h794d18f1ca9e50a8E>
 80081ba:	defe      	udf	#254	; 0xfe
    unsafe { SENSOR_LISTENERS[arg] = sensor_listener_info {
 80081bc:	f246 60bc 	movw	r0, #26300	; 0x66bc
 80081c0:	f6c0 0001 	movt	r0, #2049	; 0x801
 80081c4:	2202      	movs	r2, #2
 80081c6:	9900      	ldr	r1, [sp, #0]
 80081c8:	f000 fa7e 	bl	80086c8 <_ZN4core9panicking18panic_bounds_check17h794d18f1ca9e50a8E>
 80081cc:	defe      	udf	#254	; 0xfe

080081ce <_ZN6mynewt2hw6sensor20wrap_sensor_listener17h6ce6e68bc6139224E>:

///  Wrapped Sensor Listener that converts Mynewt `sensor_data` into our `sensor_value` format and calls the application's Listener Function
extern "C" fn wrap_sensor_listener(
 80081ce:	b5b0      	push	{r4, r5, r7, lr}
 80081d0:	b0b0      	sub	sp, #192	; 0xc0
 80081d2:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 80081d4:	f8dd c0d0 	ldr.w	ip, [sp, #208]	; 0xd0
 80081d8:	4696      	mov	lr, r2
 80081da:	460c      	mov	r4, r1
 80081dc:	4605      	mov	r5, r0
 80081de:	900b      	str	r0, [sp, #44]	; 0x2c
 80081e0:	910c      	str	r1, [sp, #48]	; 0x30
 80081e2:	920d      	str	r2, [sp, #52]	; 0x34
 80081e4:	930f      	str	r3, [sp, #60]	; 0x3c
 80081e6:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
    arg:           sensor_arg,
    sensor_data:   sensor_data_ptr,
    sensor_type:   sensor_type_t
) -> i32 {
    //  Use `arg` to fetch the `sensor_listener_info`
    let arg = arg as usize;
 80081ea:	980c      	ldr	r0, [sp, #48]	; 0x30
 80081ec:	9011      	str	r0, [sp, #68]	; 0x44
    assert!(arg < MAX_SENSOR_LISTENERS, "bad sensor arg");
 80081ee:	9811      	ldr	r0, [sp, #68]	; 0x44
 80081f0:	2802      	cmp	r0, #2
 80081f2:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 80081f6:	9409      	str	r4, [sp, #36]	; 0x24
 80081f8:	9508      	str	r5, [sp, #32]
 80081fa:	d307      	bcc.n	800820c <_ZN6mynewt2hw6sensor20wrap_sensor_listener17h6ce6e68bc6139224E+0x3e>
 80081fc:	e7ff      	b.n	80081fe <_ZN6mynewt2hw6sensor20wrap_sensor_listener17h6ce6e68bc6139224E+0x30>
 80081fe:	f246 60dc 	movw	r0, #26332	; 0x66dc
 8008202:	f6c0 0001 	movt	r0, #2049	; 0x801
 8008206:	f000 fa42 	bl	800868e <_ZN4core9panicking5panic17h138a849f37d3ac2dE>
 800820a:	defe      	udf	#254	; 0xfe
    let info = unsafe { SENSOR_LISTENERS[arg] };
 800820c:	9811      	ldr	r0, [sp, #68]	; 0x44
 800820e:	2801      	cmp	r0, #1
 8008210:	9007      	str	r0, [sp, #28]
 8008212:	d871      	bhi.n	80082f8 <_ZN6mynewt2hw6sensor20wrap_sensor_listener17h6ce6e68bc6139224E+0x12a>
 8008214:	e7ff      	b.n	8008216 <_ZN6mynewt2hw6sensor20wrap_sensor_listener17h6ce6e68bc6139224E+0x48>
 8008216:	9807      	ldr	r0, [sp, #28]
 8008218:	eb00 0180 	add.w	r1, r0, r0, lsl #2
 800821c:	f240 12a8 	movw	r2, #424	; 0x1a8
 8008220:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8008224:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8008228:	aa12      	add	r2, sp, #72	; 0x48
 800822a:	e8b1 5038 	ldmia.w	r1!, {r3, r4, r5, ip, lr}
 800822e:	e8a2 5038 	stmia.w	r2!, {r3, r4, r5, ip, lr}
 8008232:	e891 5038 	ldmia.w	r1, {r3, r4, r5, ip, lr}
 8008236:	e882 5038 	stmia.w	r2, {r3, r4, r5, ip, lr}
    assert!(!info.sensor_key.is_empty(), "missing sensor key");
 800823a:	981a      	ldr	r0, [sp, #104]	; 0x68
 800823c:	f7fc faf6 	bl	800482c <_ZN6mynewt4Strn8is_empty17haf426a9141c41dd7E>
 8008240:	9006      	str	r0, [sp, #24]
 8008242:	e7ff      	b.n	8008244 <_ZN6mynewt2hw6sensor20wrap_sensor_listener17h6ce6e68bc6139224E+0x76>
 8008244:	9806      	ldr	r0, [sp, #24]
 8008246:	07c1      	lsls	r1, r0, #31
 8008248:	2900      	cmp	r1, #0
 800824a:	d007      	beq.n	800825c <_ZN6mynewt2hw6sensor20wrap_sensor_listener17h6ce6e68bc6139224E+0x8e>
 800824c:	e7ff      	b.n	800824e <_ZN6mynewt2hw6sensor20wrap_sensor_listener17h6ce6e68bc6139224E+0x80>
 800824e:	f246 7004 	movw	r0, #26372	; 0x6704
 8008252:	f6c0 0001 	movt	r0, #2049	; 0x801
 8008256:	f000 fa1a 	bl	800868e <_ZN4core9panicking5panic17h138a849f37d3ac2dE>
 800825a:	defe      	udf	#254	; 0xfe

    //  Check that the sensor data is valid
    if sensor_data.is_null() { return SYS_EINVAL }  //  Exit if data is missing
 800825c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800825e:	f000 f909 	bl	8008474 <_ZN4core3ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h4d8b2180f89bdb80E>
 8008262:	9005      	str	r0, [sp, #20]
 8008264:	e7ff      	b.n	8008266 <_ZN6mynewt2hw6sensor20wrap_sensor_listener17h6ce6e68bc6139224E+0x98>
 8008266:	9805      	ldr	r0, [sp, #20]
 8008268:	07c1      	lsls	r1, r0, #31
 800826a:	2900      	cmp	r1, #0
 800826c:	d008      	beq.n	8008280 <_ZN6mynewt2hw6sensor20wrap_sensor_listener17h6ce6e68bc6139224E+0xb2>
 800826e:	e7ff      	b.n	8008270 <_ZN6mynewt2hw6sensor20wrap_sensor_listener17h6ce6e68bc6139224E+0xa2>
 8008270:	f06f 0001 	mvn.w	r0, #1
 8008274:	9010      	str	r0, [sp, #64]	; 0x40
 8008276:	e002      	b.n	800827e <_ZN6mynewt2hw6sensor20wrap_sensor_listener17h6ce6e68bc6139224E+0xb0>
    if let Err(_err) = res {
        SYS_EINVAL  //  Return error to Mynewt
    } else {
        0           //  Return 0 to Mynewt to indicate no error
    }
}
 8008278:	9810      	ldr	r0, [sp, #64]	; 0x40
 800827a:	b030      	add	sp, #192	; 0xc0
 800827c:	bdb0      	pop	{r4, r5, r7, pc}
    if sensor_data.is_null() { return SYS_EINVAL }  //  Exit if data is missing
 800827e:	e7fb      	b.n	8008278 <_ZN6mynewt2hw6sensor20wrap_sensor_listener17h6ce6e68bc6139224E+0xaa>
    assert!(!sensor.is_null(), "null sensor");
 8008280:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008282:	f7ff f98d 	bl	80075a0 <_ZN4core3ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h2fb6a3a5463e515aE>
 8008286:	9004      	str	r0, [sp, #16]
 8008288:	e7ff      	b.n	800828a <_ZN6mynewt2hw6sensor20wrap_sensor_listener17h6ce6e68bc6139224E+0xbc>
 800828a:	9804      	ldr	r0, [sp, #16]
 800828c:	07c1      	lsls	r1, r0, #31
 800828e:	2900      	cmp	r1, #0
 8008290:	d007      	beq.n	80082a2 <_ZN6mynewt2hw6sensor20wrap_sensor_listener17h6ce6e68bc6139224E+0xd4>
 8008292:	e7ff      	b.n	8008294 <_ZN6mynewt2hw6sensor20wrap_sensor_listener17h6ce6e68bc6139224E+0xc6>
 8008294:	f246 7028 	movw	r0, #26408	; 0x6728
 8008298:	f6c0 0001 	movt	r0, #2049	; 0x801
 800829c:	f000 f9f7 	bl	800868e <_ZN4core9panicking5panic17h138a849f37d3ac2dE>
 80082a0:	defe      	udf	#254	; 0xfe
    let sensor_value = convert_sensor_data(sensor_data, info.sensor_key, sensor_type);
 80082a2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80082a4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80082a6:	980e      	ldr	r0, [sp, #56]	; 0x38
 80082a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80082aa:	46ec      	mov	ip, sp
 80082ac:	f8cc 3004 	str.w	r3, [ip, #4]
 80082b0:	f8cc 0000 	str.w	r0, [ip]
 80082b4:	a81c      	add	r0, sp, #112	; 0x70
 80082b6:	f7ff faff 	bl	80078b8 <_ZN6mynewt2hw6sensor19convert_sensor_data17h960dbb24073819e0E>
 80082ba:	e7ff      	b.n	80082bc <_ZN6mynewt2hw6sensor20wrap_sensor_listener17h6ce6e68bc6139224E+0xee>
    if let SensorValueType::None = sensor_value.value { 
 80082bc:	981c      	ldr	r0, [sp, #112]	; 0x70
 80082be:	2800      	cmp	r0, #0
 80082c0:	d104      	bne.n	80082cc <_ZN6mynewt2hw6sensor20wrap_sensor_listener17h6ce6e68bc6139224E+0xfe>
 80082c2:	e7ff      	b.n	80082c4 <_ZN6mynewt2hw6sensor20wrap_sensor_listener17h6ce6e68bc6139224E+0xf6>
 80082c4:	f06f 0001 	mvn.w	r0, #1
        return SYS_EINVAL;   //  Exit if sensor is not ready
 80082c8:	9010      	str	r0, [sp, #64]	; 0x40
 80082ca:	e7d8      	b.n	800827e <_ZN6mynewt2hw6sensor20wrap_sensor_listener17h6ce6e68bc6139224E+0xb0>
    let res = (info.listener_func)(&sensor_value);
 80082cc:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80082ce:	a91c      	add	r1, sp, #112	; 0x70
 80082d0:	9003      	str	r0, [sp, #12]
 80082d2:	4608      	mov	r0, r1
 80082d4:	9903      	ldr	r1, [sp, #12]
 80082d6:	4788      	blx	r1
 80082d8:	902e      	str	r0, [sp, #184]	; 0xb8
 80082da:	e7ff      	b.n	80082dc <_ZN6mynewt2hw6sensor20wrap_sensor_listener17h6ce6e68bc6139224E+0x10e>
    if let Err(_err) = res {
 80082dc:	982e      	ldr	r0, [sp, #184]	; 0xb8
 80082de:	2801      	cmp	r0, #1
 80082e0:	d006      	beq.n	80082f0 <_ZN6mynewt2hw6sensor20wrap_sensor_listener17h6ce6e68bc6139224E+0x122>
 80082e2:	e7ff      	b.n	80082e4 <_ZN6mynewt2hw6sensor20wrap_sensor_listener17h6ce6e68bc6139224E+0x116>
 80082e4:	982e      	ldr	r0, [sp, #184]	; 0xb8
 80082e6:	902f      	str	r0, [sp, #188]	; 0xbc
 80082e8:	f06f 0001 	mvn.w	r0, #1
        SYS_EINVAL  //  Return error to Mynewt
 80082ec:	9010      	str	r0, [sp, #64]	; 0x40
    if let Err(_err) = res {
 80082ee:	e002      	b.n	80082f6 <_ZN6mynewt2hw6sensor20wrap_sensor_listener17h6ce6e68bc6139224E+0x128>
 80082f0:	2000      	movs	r0, #0
        0           //  Return 0 to Mynewt to indicate no error
 80082f2:	9010      	str	r0, [sp, #64]	; 0x40
    if let Err(_err) = res {
 80082f4:	e7ff      	b.n	80082f6 <_ZN6mynewt2hw6sensor20wrap_sensor_listener17h6ce6e68bc6139224E+0x128>
}
 80082f6:	e7bf      	b.n	8008278 <_ZN6mynewt2hw6sensor20wrap_sensor_listener17h6ce6e68bc6139224E+0xaa>
    let info = unsafe { SENSOR_LISTENERS[arg] };
 80082f8:	f246 60f4 	movw	r0, #26356	; 0x66f4
 80082fc:	f6c0 0001 	movt	r0, #2049	; 0x801
 8008300:	2202      	movs	r2, #2
 8008302:	9907      	ldr	r1, [sp, #28]
 8008304:	f000 f9e0 	bl	80086c8 <_ZN4core9panicking18panic_bounds_check17h794d18f1ca9e50a8E>
 8008308:	defe      	udf	#254	; 0xfe

0800830a <_ZN6mynewt2hw6sensor21null_sensor_data_func17h64205b3a5e59647aE>:
    sl_func: Some(null_sensor_data_func),
    ..fill_zero!(sensor_listener)
};

///  Define a default sensor data function in case there is none.
extern fn null_sensor_data_func(
 800830a:	b5b0      	push	{r4, r5, r7, lr}
 800830c:	b088      	sub	sp, #32
 800830e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008310:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
 8008314:	4696      	mov	lr, r2
 8008316:	460c      	mov	r4, r1
 8008318:	4605      	mov	r5, r0
 800831a:	9003      	str	r0, [sp, #12]
 800831c:	9104      	str	r1, [sp, #16]
 800831e:	9205      	str	r2, [sp, #20]
 8008320:	9307      	str	r3, [sp, #28]
 8008322:	f8cd c018 	str.w	ip, [sp, #24]
 8008326:	2000      	movs	r0, #0
    _sensor: sensor_ptr, 
    _arg: sensor_arg, 
    _sensor_data: sensor_data_ptr, 
    _sensor_type: sensor_type_t) -> i32
    { 0 }
 8008328:	f8cd e008 	str.w	lr, [sp, #8]
 800832c:	9401      	str	r4, [sp, #4]
 800832e:	9500      	str	r5, [sp, #0]
 8008330:	b008      	add	sp, #32
 8008332:	bdb0      	pop	{r4, r5, r7, pc}

08008334 <_ZN6mynewt2hw6sensor22null_sensor_value_func17h7124af7c589d1972E>:

///  Define a default sensor value function in case there is none.
fn null_sensor_value_func(
 8008334:	b084      	sub	sp, #16
 8008336:	4601      	mov	r1, r0
 8008338:	9001      	str	r0, [sp, #4]
 800833a:	2000      	movs	r0, #0
    _sensor_value: &SensorValue
    ) -> MynewtResult<()> 
    { Ok(()) }
 800833c:	9002      	str	r0, [sp, #8]
 800833e:	2001      	movs	r0, #1
 8008340:	9002      	str	r0, [sp, #8]
 8008342:	9802      	ldr	r0, [sp, #8]
 8008344:	9100      	str	r1, [sp, #0]
 8008346:	b004      	add	sp, #16
 8008348:	4770      	bx	lr

0800834a <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h44c685770c3cf9e5E>:
 800834a:	b580      	push	{r7, lr}
 800834c:	b086      	sub	sp, #24
 800834e:	460a      	mov	r2, r1
 8008350:	4603      	mov	r3, r0
 8008352:	9004      	str	r0, [sp, #16]
 8008354:	9105      	str	r1, [sp, #20]
 8008356:	9804      	ldr	r0, [sp, #16]
 8008358:	6800      	ldr	r0, [r0, #0]
 800835a:	9905      	ldr	r1, [sp, #20]
 800835c:	9203      	str	r2, [sp, #12]
 800835e:	9302      	str	r3, [sp, #8]
 8008360:	f7ff f868 	bl	8007434 <_ZN78_$LT$mynewt..encoding..coap_context..CoapError$u20$as$u20$core..fmt..Debug$GT$3fmt17h06dcdae20cda8b1dE>
 8008364:	9001      	str	r0, [sp, #4]
 8008366:	e7ff      	b.n	8008368 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h44c685770c3cf9e5E+0x1e>
 8008368:	9801      	ldr	r0, [sp, #4]
 800836a:	f000 0001 	and.w	r0, r0, #1
 800836e:	b006      	add	sp, #24
 8008370:	bd80      	pop	{r7, pc}

08008372 <_ZN4core6result13unwrap_failed17hc06b1ee04940e7c4E>:
 8008372:	b09a      	sub	sp, #104	; 0x68
 8008374:	4613      	mov	r3, r2
 8008376:	468c      	mov	ip, r1
 8008378:	4686      	mov	lr, r0
 800837a:	9009      	str	r0, [sp, #36]	; 0x24
 800837c:	910a      	str	r1, [sp, #40]	; 0x28
 800837e:	920b      	str	r2, [sp, #44]	; 0x2c
 8008380:	a809      	add	r0, sp, #36	; 0x24
 8008382:	9016      	str	r0, [sp, #88]	; 0x58
 8008384:	a80b      	add	r0, sp, #44	; 0x2c
 8008386:	9017      	str	r0, [sp, #92]	; 0x5c
 8008388:	9816      	ldr	r0, [sp, #88]	; 0x58
 800838a:	9018      	str	r0, [sp, #96]	; 0x60
 800838c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800838e:	9019      	str	r0, [sp, #100]	; 0x64
 8008390:	9818      	ldr	r0, [sp, #96]	; 0x60
 8008392:	f644 31c9 	movw	r1, #19401	; 0x4bc9
 8008396:	f6c0 0100 	movt	r1, #2048	; 0x800
 800839a:	9308      	str	r3, [sp, #32]
 800839c:	f8cd c01c 	str.w	ip, [sp, #28]
 80083a0:	f8cd e018 	str.w	lr, [sp, #24]
 80083a4:	f7fc fc75 	bl	8004c92 <_ZN4core3fmt10ArgumentV13new17hbec50b814a491c08E>
 80083a8:	9005      	str	r0, [sp, #20]
 80083aa:	9104      	str	r1, [sp, #16]
 80083ac:	e7ff      	b.n	80083ae <_ZN4core6result13unwrap_failed17hc06b1ee04940e7c4E+0x3c>
 80083ae:	9819      	ldr	r0, [sp, #100]	; 0x64
 80083b0:	f245 51b3 	movw	r1, #21939	; 0x55b3
 80083b4:	f6c0 0100 	movt	r1, #2048	; 0x800
 80083b8:	f7fc fc20 	bl	8004bfc <_ZN4core3fmt10ArgumentV13new17h4625d42fff5bfd34E>
 80083bc:	9003      	str	r0, [sp, #12]
 80083be:	9102      	str	r1, [sp, #8]
 80083c0:	e7ff      	b.n	80083c2 <_ZN4core6result13unwrap_failed17hc06b1ee04940e7c4E+0x50>
 80083c2:	9805      	ldr	r0, [sp, #20]
 80083c4:	9012      	str	r0, [sp, #72]	; 0x48
 80083c6:	9904      	ldr	r1, [sp, #16]
 80083c8:	9113      	str	r1, [sp, #76]	; 0x4c
 80083ca:	9a03      	ldr	r2, [sp, #12]
 80083cc:	9214      	str	r2, [sp, #80]	; 0x50
 80083ce:	9b02      	ldr	r3, [sp, #8]
 80083d0:	9315      	str	r3, [sp, #84]	; 0x54
 80083d2:	46ec      	mov	ip, sp
 80083d4:	f04f 0e02 	mov.w	lr, #2
 80083d8:	f8cc e000 	str.w	lr, [ip]
 80083dc:	f246 7144 	movw	r1, #26436	; 0x6744
 80083e0:	f6c0 0101 	movt	r1, #2049	; 0x801
 80083e4:	a80c      	add	r0, sp, #48	; 0x30
 80083e6:	ab12      	add	r3, sp, #72	; 0x48
 80083e8:	4672      	mov	r2, lr
 80083ea:	f7fc fccf 	bl	8004d8c <_ZN4core3fmt9Arguments6new_v117h7b18277453f88ac4E>
 80083ee:	e7ff      	b.n	80083f0 <_ZN4core6result13unwrap_failed17hc06b1ee04940e7c4E+0x7e>
 80083f0:	f246 716c 	movw	r1, #26476	; 0x676c
 80083f4:	f6c0 0101 	movt	r1, #2049	; 0x801
 80083f8:	a80c      	add	r0, sp, #48	; 0x30
 80083fa:	f000 f985 	bl	8008708 <_ZN4core9panicking9panic_fmt17hbfe32cf8392a510cE>
 80083fe:	defe      	udf	#254	; 0xfe

08008400 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h1c36e744b9342e1eE>:
 8008400:	b580      	push	{r7, lr}
 8008402:	b08a      	sub	sp, #40	; 0x28
 8008404:	4613      	mov	r3, r2
 8008406:	468c      	mov	ip, r1
 8008408:	4686      	mov	lr, r0
 800840a:	9106      	str	r1, [sp, #24]
 800840c:	9207      	str	r2, [sp, #28]
 800840e:	6800      	ldr	r0, [r0, #0]
 8008410:	2800      	cmp	r0, #0
 8008412:	9305      	str	r3, [sp, #20]
 8008414:	f8cd c010 	str.w	ip, [sp, #16]
 8008418:	f8cd e00c 	str.w	lr, [sp, #12]
 800841c:	9002      	str	r0, [sp, #8]
 800841e:	d005      	beq.n	800842c <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h1c36e744b9342e1eE+0x2c>
 8008420:	e7ff      	b.n	8008422 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h1c36e744b9342e1eE+0x22>
 8008422:	9802      	ldr	r0, [sp, #8]
 8008424:	2801      	cmp	r0, #1
 8008426:	d00b      	beq.n	8008440 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h1c36e744b9342e1eE+0x40>
 8008428:	e7ff      	b.n	800842a <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h1c36e744b9342e1eE+0x2a>
 800842a:	defe      	udf	#254	; 0xfe
 800842c:	9803      	ldr	r0, [sp, #12]
 800842e:	6841      	ldr	r1, [r0, #4]
 8008430:	9108      	str	r1, [sp, #32]
 8008432:	9808      	ldr	r0, [sp, #32]
 8008434:	9903      	ldr	r1, [sp, #12]
 8008436:	680a      	ldr	r2, [r1, #0]
 8008438:	2a00      	cmp	r2, #0
 800843a:	9001      	str	r0, [sp, #4]
 800843c:	d009      	beq.n	8008452 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h1c36e744b9342e1eE+0x52>
 800843e:	e00b      	b.n	8008458 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h1c36e744b9342e1eE+0x58>
 8008440:	9803      	ldr	r0, [sp, #12]
 8008442:	6841      	ldr	r1, [r0, #4]
 8008444:	9109      	str	r1, [sp, #36]	; 0x24
 8008446:	9806      	ldr	r0, [sp, #24]
 8008448:	9907      	ldr	r1, [sp, #28]
 800844a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800844c:	f7ff ff91 	bl	8008372 <_ZN4core6result13unwrap_failed17hc06b1ee04940e7c4E>
 8008450:	defe      	udf	#254	; 0xfe
 8008452:	9801      	ldr	r0, [sp, #4]
 8008454:	b00a      	add	sp, #40	; 0x28
 8008456:	bd80      	pop	{r7, pc}
 8008458:	e7fb      	b.n	8008452 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h1c36e744b9342e1eE+0x52>

0800845a <_ZN4core3num18ptr_try_from_impls69_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u32$GT$8try_from17h3aea8e0368154f7bE>:
 800845a:	b084      	sub	sp, #16
 800845c:	4601      	mov	r1, r0
 800845e:	9001      	str	r0, [sp, #4]
 8008460:	9801      	ldr	r0, [sp, #4]
 8008462:	9003      	str	r0, [sp, #12]
 8008464:	2000      	movs	r0, #0
 8008466:	9002      	str	r0, [sp, #8]
 8008468:	9802      	ldr	r0, [sp, #8]
 800846a:	9a03      	ldr	r2, [sp, #12]
 800846c:	9100      	str	r1, [sp, #0]
 800846e:	4611      	mov	r1, r2
 8008470:	b004      	add	sp, #16
 8008472:	4770      	bx	lr

08008474 <_ZN4core3ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h4d8b2180f89bdb80E>:
 8008474:	b580      	push	{r7, lr}
 8008476:	b084      	sub	sp, #16
 8008478:	4601      	mov	r1, r0
 800847a:	9003      	str	r0, [sp, #12]
 800847c:	9803      	ldr	r0, [sp, #12]
 800847e:	9102      	str	r1, [sp, #8]
 8008480:	9001      	str	r0, [sp, #4]
 8008482:	f7fc ff94 	bl	80053ae <_ZN4core3ptr8null_mut17hc0e3bb7e4d27c81eE>
 8008486:	9000      	str	r0, [sp, #0]
 8008488:	e7ff      	b.n	800848a <_ZN4core3ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h4d8b2180f89bdb80E+0x16>
 800848a:	9801      	ldr	r0, [sp, #4]
 800848c:	9900      	ldr	r1, [sp, #0]
 800848e:	1a42      	subs	r2, r0, r1
 8008490:	fab2 f282 	clz	r2, r2
 8008494:	0950      	lsrs	r0, r2, #5
 8008496:	b004      	add	sp, #16
 8008498:	bd80      	pop	{r7, pc}

0800849a <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h551cb65250c7c91bE>:
 800849a:	b082      	sub	sp, #8
 800849c:	4601      	mov	r1, r0
 800849e:	9001      	str	r0, [sp, #4]
 80084a0:	9801      	ldr	r0, [sp, #4]
 80084a2:	9100      	str	r1, [sp, #0]
 80084a4:	b002      	add	sp, #8
 80084a6:	4770      	bx	lr

080084a8 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h802ebe02decf163eE>:
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b084      	sub	sp, #16
 80084ac:	4601      	mov	r1, r0
 80084ae:	9003      	str	r0, [sp, #12]
 80084b0:	9803      	ldr	r0, [sp, #12]
 80084b2:	9102      	str	r1, [sp, #8]
 80084b4:	f7ff fff1 	bl	800849a <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h551cb65250c7c91bE>
 80084b8:	9001      	str	r0, [sp, #4]
 80084ba:	e7ff      	b.n	80084bc <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h802ebe02decf163eE+0x14>
 80084bc:	9801      	ldr	r0, [sp, #4]
 80084be:	b004      	add	sp, #16
 80084c0:	bd80      	pop	{r7, pc}

080084c2 <_ZN53_$LT$T$u20$as$u20$core..convert..TryFrom$LT$U$GT$$GT$8try_from17h7c80ae12d7aabdd0E>:
 80084c2:	b580      	push	{r7, lr}
 80084c4:	b084      	sub	sp, #16
 80084c6:	4601      	mov	r1, r0
 80084c8:	9002      	str	r0, [sp, #8]
 80084ca:	9802      	ldr	r0, [sp, #8]
 80084cc:	9101      	str	r1, [sp, #4]
 80084ce:	f7ff ffeb 	bl	80084a8 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h802ebe02decf163eE>
 80084d2:	9000      	str	r0, [sp, #0]
 80084d4:	e7ff      	b.n	80084d6 <_ZN53_$LT$T$u20$as$u20$core..convert..TryFrom$LT$U$GT$$GT$8try_from17h7c80ae12d7aabdd0E+0x14>
 80084d6:	9800      	ldr	r0, [sp, #0]
 80084d8:	9003      	str	r0, [sp, #12]
 80084da:	9803      	ldr	r0, [sp, #12]
 80084dc:	b004      	add	sp, #16
 80084de:	bd80      	pop	{r7, pc}

080084e0 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h9d9fb88919d8e73fE>:
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b08a      	sub	sp, #40	; 0x28
 80084e4:	460a      	mov	r2, r1
 80084e6:	4603      	mov	r3, r0
 80084e8:	9004      	str	r0, [sp, #16]
 80084ea:	9105      	str	r1, [sp, #20]
 80084ec:	9804      	ldr	r0, [sp, #16]
 80084ee:	9905      	ldr	r1, [sp, #20]
 80084f0:	9203      	str	r2, [sp, #12]
 80084f2:	9302      	str	r3, [sp, #8]
 80084f4:	f000 f81c 	bl	8008530 <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_add17hd120bde4938f3d3eE>
 80084f8:	9001      	str	r0, [sp, #4]
 80084fa:	9100      	str	r1, [sp, #0]
 80084fc:	e7ff      	b.n	80084fe <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h9d9fb88919d8e73fE+0x1e>
 80084fe:	9801      	ldr	r0, [sp, #4]
 8008500:	9008      	str	r0, [sp, #32]
 8008502:	9900      	ldr	r1, [sp, #0]
 8008504:	f001 0201 	and.w	r2, r1, #1
 8008508:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
 800850c:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 8008510:	07d2      	lsls	r2, r2, #31
 8008512:	2a00      	cmp	r2, #0
 8008514:	d003      	beq.n	800851e <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h9d9fb88919d8e73fE+0x3e>
 8008516:	e7ff      	b.n	8008518 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h9d9fb88919d8e73fE+0x38>
 8008518:	2000      	movs	r0, #0
 800851a:	9006      	str	r0, [sp, #24]
 800851c:	e004      	b.n	8008528 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h9d9fb88919d8e73fE+0x48>
 800851e:	9808      	ldr	r0, [sp, #32]
 8008520:	9007      	str	r0, [sp, #28]
 8008522:	2001      	movs	r0, #1
 8008524:	9006      	str	r0, [sp, #24]
 8008526:	e7ff      	b.n	8008528 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h9d9fb88919d8e73fE+0x48>
 8008528:	9806      	ldr	r0, [sp, #24]
 800852a:	9907      	ldr	r1, [sp, #28]
 800852c:	b00a      	add	sp, #40	; 0x28
 800852e:	bd80      	pop	{r7, pc}

08008530 <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_add17hd120bde4938f3d3eE>:
 8008530:	b08c      	sub	sp, #48	; 0x30
 8008532:	460a      	mov	r2, r1
 8008534:	4603      	mov	r3, r0
 8008536:	9004      	str	r0, [sp, #16]
 8008538:	9105      	str	r1, [sp, #20]
 800853a:	9804      	ldr	r0, [sp, #16]
 800853c:	9905      	ldr	r1, [sp, #20]
 800853e:	1840      	adds	r0, r0, r1
 8008540:	f04f 0100 	mov.w	r1, #0
 8008544:	f141 0100 	adc.w	r1, r1, #0
 8008548:	900a      	str	r0, [sp, #40]	; 0x28
 800854a:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 800854e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008550:	f89d 102c 	ldrb.w	r1, [sp, #44]	; 0x2c
 8008554:	9203      	str	r2, [sp, #12]
 8008556:	9302      	str	r3, [sp, #8]
 8008558:	9001      	str	r0, [sp, #4]
 800855a:	9100      	str	r1, [sp, #0]
 800855c:	e7ff      	b.n	800855e <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_add17hd120bde4938f3d3eE+0x2e>
 800855e:	9801      	ldr	r0, [sp, #4]
 8008560:	9008      	str	r0, [sp, #32]
 8008562:	9900      	ldr	r1, [sp, #0]
 8008564:	f001 0201 	and.w	r2, r1, #1
 8008568:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
 800856c:	9a08      	ldr	r2, [sp, #32]
 800856e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 8008572:	9206      	str	r2, [sp, #24]
 8008574:	f88d 301c 	strb.w	r3, [sp, #28]
 8008578:	9806      	ldr	r0, [sp, #24]
 800857a:	f89d 101c 	ldrb.w	r1, [sp, #28]
 800857e:	b00c      	add	sp, #48	; 0x30
 8008580:	4770      	bx	lr

08008582 <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h7d57ffc5ebfd5af5E>:
 8008582:	b580      	push	{r7, lr}
 8008584:	b08a      	sub	sp, #40	; 0x28
 8008586:	4613      	mov	r3, r2
 8008588:	468c      	mov	ip, r1
 800858a:	4686      	mov	lr, r0
 800858c:	9004      	str	r0, [sp, #16]
 800858e:	9105      	str	r1, [sp, #20]
 8008590:	9206      	str	r2, [sp, #24]
 8008592:	2000      	movs	r0, #0
 8008594:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8008598:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
 800859c:	2001      	movs	r0, #1
 800859e:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
 80085a2:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 80085a6:	9804      	ldr	r0, [sp, #16]
 80085a8:	2800      	cmp	r0, #0
 80085aa:	9303      	str	r3, [sp, #12]
 80085ac:	f8cd c008 	str.w	ip, [sp, #8]
 80085b0:	f8cd e004 	str.w	lr, [sp, #4]
 80085b4:	9000      	str	r0, [sp, #0]
 80085b6:	d00d      	beq.n	80085d4 <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h7d57ffc5ebfd5af5E+0x52>
 80085b8:	e7ff      	b.n	80085ba <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h7d57ffc5ebfd5af5E+0x38>
 80085ba:	9800      	ldr	r0, [sp, #0]
 80085bc:	2801      	cmp	r0, #1
 80085be:	d001      	beq.n	80085c4 <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h7d57ffc5ebfd5af5E+0x42>
 80085c0:	e7ff      	b.n	80085c2 <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h7d57ffc5ebfd5af5E+0x40>
 80085c2:	defe      	udf	#254	; 0xfe
 80085c4:	2000      	movs	r0, #0
 80085c6:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
 80085ca:	9805      	ldr	r0, [sp, #20]
 80085cc:	9008      	str	r0, [sp, #32]
 80085ce:	9808      	ldr	r0, [sp, #32]
 80085d0:	9007      	str	r0, [sp, #28]
 80085d2:	e00d      	b.n	80085f0 <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h7d57ffc5ebfd5af5E+0x6e>
 80085d4:	2000      	movs	r0, #0
 80085d6:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 80085da:	9806      	ldr	r0, [sp, #24]
 80085dc:	9007      	str	r0, [sp, #28]
 80085de:	e007      	b.n	80085f0 <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h7d57ffc5ebfd5af5E+0x6e>
 80085e0:	9804      	ldr	r0, [sp, #16]
 80085e2:	2801      	cmp	r0, #1
 80085e4:	d00d      	beq.n	8008602 <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h7d57ffc5ebfd5af5E+0x80>
 80085e6:	e016      	b.n	8008616 <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h7d57ffc5ebfd5af5E+0x94>
 80085e8:	2000      	movs	r0, #0
 80085ea:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 80085ee:	e7f7      	b.n	80085e0 <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h7d57ffc5ebfd5af5E+0x5e>
 80085f0:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
 80085f4:	07c0      	lsls	r0, r0, #31
 80085f6:	2800      	cmp	r0, #0
 80085f8:	d1f6      	bne.n	80085e8 <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h7d57ffc5ebfd5af5E+0x66>
 80085fa:	e7f1      	b.n	80085e0 <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h7d57ffc5ebfd5af5E+0x5e>
 80085fc:	9807      	ldr	r0, [sp, #28]
 80085fe:	b00a      	add	sp, #40	; 0x28
 8008600:	bd80      	pop	{r7, pc}
 8008602:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
 8008606:	07c0      	lsls	r0, r0, #31
 8008608:	2800      	cmp	r0, #0
 800860a:	d0f7      	beq.n	80085fc <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h7d57ffc5ebfd5af5E+0x7a>
 800860c:	e7ff      	b.n	800860e <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h7d57ffc5ebfd5af5E+0x8c>
 800860e:	2000      	movs	r0, #0
 8008610:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
 8008614:	e7f2      	b.n	80085fc <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h7d57ffc5ebfd5af5E+0x7a>
 8008616:	e7f1      	b.n	80085fc <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h7d57ffc5ebfd5af5E+0x7a>

08008618 <_ZN4core3ptr18real_drop_in_place17h012e98b5b5cd1768E>:
 8008618:	4770      	bx	lr

0800861a <_ZN4core3ptr18real_drop_in_place17h02a68ac691a00745E>:
 800861a:	4770      	bx	lr

0800861c <_ZN4core3ptr18real_drop_in_place17h605f2bc604187c4eE>:
 800861c:	4770      	bx	lr

0800861e <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17hbc81ca56d6e023e9E>:
 800861e:	b5b0      	push	{r4, r5, r7, lr}
 8008620:	b086      	sub	sp, #24
 8008622:	460c      	mov	r4, r1
 8008624:	4605      	mov	r5, r0
 8008626:	f001 fb0c 	bl	8009c42 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hf6dcfdcd0c677f34E>
 800862a:	b9a8      	cbnz	r0, 8008658 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17hbc81ca56d6e023e9E+0x3a>
 800862c:	f246 7380 	movw	r3, #26496	; 0x6780
 8008630:	2200      	movs	r2, #0
 8008632:	f6c0 0301 	movt	r3, #2049	; 0x801
 8008636:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
 800863a:	9205      	str	r2, [sp, #20]
 800863c:	9304      	str	r3, [sp, #16]
 800863e:	e9cd 2202 	strd	r2, r2, [sp, #8]
 8008642:	2201      	movs	r2, #1
 8008644:	9201      	str	r2, [sp, #4]
 8008646:	f246 72e4 	movw	r2, #26596	; 0x67e4
 800864a:	f6c0 0201 	movt	r2, #2049	; 0x801
 800864e:	9200      	str	r2, [sp, #0]
 8008650:	466a      	mov	r2, sp
 8008652:	f000 fd28 	bl	80090a6 <_ZN4core3fmt5write17hfeb861b024853061E>
 8008656:	b110      	cbz	r0, 800865e <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17hbc81ca56d6e023e9E+0x40>
 8008658:	2001      	movs	r0, #1
 800865a:	b006      	add	sp, #24
 800865c:	bdb0      	pop	{r4, r5, r7, pc}
 800865e:	1d28      	adds	r0, r5, #4
 8008660:	4621      	mov	r1, r4
 8008662:	b006      	add	sp, #24
 8008664:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8008668:	f001 baeb 	b.w	8009c42 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hf6dcfdcd0c677f34E>

0800866c <_ZN36_$LT$T$u20$as$u20$core..any..Any$GT$7type_id17h60b349e3a3967a18E>:
 800866c:	f642 205e 	movw	r0, #10846	; 0x2a5e
 8008670:	f24b 21fd 	movw	r1, #45821	; 0xb2fd
 8008674:	f6c5 401d 	movt	r0, #23581	; 0x5c1d
 8008678:	f2c1 6181 	movt	r1, #5761	; 0x1681
 800867c:	4770      	bx	lr

0800867e <_ZN4core5panic9PanicInfo8location17h122f9d519f4a246bE>:
 800867e:	300c      	adds	r0, #12
 8008680:	4770      	bx	lr

08008682 <_ZN4core5panic8Location4file17ha9ce911e26883425E>:
 8008682:	e9d0 2100 	ldrd	r2, r1, [r0]
 8008686:	4610      	mov	r0, r2
 8008688:	4770      	bx	lr

0800868a <_ZN4core5panic8Location4line17h997c0352f671f211E>:
 800868a:	6880      	ldr	r0, [r0, #8]
 800868c:	4770      	bx	lr

0800868e <_ZN4core9panicking5panic17h138a849f37d3ac2dE>:
 800868e:	b08c      	sub	sp, #48	; 0x30
 8008690:	e890 5006 	ldmia.w	r0, {r1, r2, ip, lr}
 8008694:	e9d0 3004 	ldrd	r3, r0, [r0, #16]
 8008698:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800869c:	f246 7280 	movw	r2, #26496	; 0x6780
 80086a0:	2100      	movs	r1, #0
 80086a2:	f6c0 0201 	movt	r2, #2049	; 0x801
 80086a6:	9105      	str	r1, [sp, #20]
 80086a8:	9204      	str	r2, [sp, #16]
 80086aa:	e9cd 1102 	strd	r1, r1, [sp, #8]
 80086ae:	2101      	movs	r1, #1
 80086b0:	9101      	str	r1, [sp, #4]
 80086b2:	a906      	add	r1, sp, #24
 80086b4:	9100      	str	r1, [sp, #0]
 80086b6:	a908      	add	r1, sp, #32
 80086b8:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 80086bc:	4668      	mov	r0, sp
 80086be:	e9cd ce08 	strd	ip, lr, [sp, #32]
 80086c2:	f000 f821 	bl	8008708 <_ZN4core9panicking9panic_fmt17hbfe32cf8392a510cE>
 80086c6:	defe      	udf	#254	; 0xfe

080086c8 <_ZN4core9panicking18panic_bounds_check17h794d18f1ca9e50a8E>:
 80086c8:	b08c      	sub	sp, #48	; 0x30
 80086ca:	4603      	mov	r3, r0
 80086cc:	f24a 2013 	movw	r0, #41491	; 0xa213
 80086d0:	e9cd 1200 	strd	r1, r2, [sp]
 80086d4:	f6c0 0000 	movt	r0, #2048	; 0x800
 80086d8:	4669      	mov	r1, sp
 80086da:	900b      	str	r0, [sp, #44]	; 0x2c
 80086dc:	e9cd 0109 	strd	r0, r1, [sp, #36]	; 0x24
 80086e0:	a801      	add	r0, sp, #4
 80086e2:	9008      	str	r0, [sp, #32]
 80086e4:	2002      	movs	r0, #2
 80086e6:	a908      	add	r1, sp, #32
 80086e8:	9007      	str	r0, [sp, #28]
 80086ea:	9106      	str	r1, [sp, #24]
 80086ec:	2100      	movs	r1, #0
 80086ee:	9105      	str	r1, [sp, #20]
 80086f0:	e9cd 0103 	strd	r0, r1, [sp, #12]
 80086f4:	f646 0064 	movw	r0, #26724	; 0x6864
 80086f8:	f6c0 0001 	movt	r0, #2049	; 0x801
 80086fc:	4619      	mov	r1, r3
 80086fe:	9002      	str	r0, [sp, #8]
 8008700:	a802      	add	r0, sp, #8
 8008702:	f000 f801 	bl	8008708 <_ZN4core9panicking9panic_fmt17hbfe32cf8392a510cE>
 8008706:	defe      	udf	#254	; 0xfe

08008708 <_ZN4core9panicking9panic_fmt17hbfe32cf8392a510cE>:
 8008708:	b088      	sub	sp, #32
 800870a:	e9d1 c300 	ldrd	ip, r3, [r1]
 800870e:	e9d1 2102 	ldrd	r2, r1, [r1, #8]
 8008712:	9107      	str	r1, [sp, #28]
 8008714:	e9cd 3205 	strd	r3, r2, [sp, #20]
 8008718:	e9cd 0c03 	strd	r0, ip, [sp, #12]
 800871c:	f646 0040 	movw	r0, #26688	; 0x6840
 8008720:	f6c0 0001 	movt	r0, #2049	; 0x801
 8008724:	9002      	str	r0, [sp, #8]
 8008726:	f246 7080 	movw	r0, #26496	; 0x6780
 800872a:	f6c0 0001 	movt	r0, #2049	; 0x801
 800872e:	9001      	str	r0, [sp, #4]
 8008730:	a801      	add	r0, sp, #4
 8008732:	f7fb fdff 	bl	8004334 <rust_begin_unwind>
 8008736:	defe      	udf	#254	; 0xfe

08008738 <_ZN4core6option13expect_failed17h278dd9976412b211E>:
 8008738:	b08a      	sub	sp, #40	; 0x28
 800873a:	e9cd 0100 	strd	r0, r1, [sp]
 800873e:	f24a 305b 	movw	r0, #41819	; 0xa35b
 8008742:	f6c0 0000 	movt	r0, #2048	; 0x800
 8008746:	a908      	add	r1, sp, #32
 8008748:	9009      	str	r0, [sp, #36]	; 0x24
 800874a:	4668      	mov	r0, sp
 800874c:	9008      	str	r0, [sp, #32]
 800874e:	2001      	movs	r0, #1
 8008750:	9007      	str	r0, [sp, #28]
 8008752:	9106      	str	r1, [sp, #24]
 8008754:	2100      	movs	r1, #0
 8008756:	9105      	str	r1, [sp, #20]
 8008758:	e9cd 0103 	strd	r0, r1, [sp, #12]
 800875c:	f646 1048 	movw	r0, #26952	; 0x6948
 8008760:	f6c0 0001 	movt	r0, #2049	; 0x801
 8008764:	f646 1150 	movw	r1, #26960	; 0x6950
 8008768:	9002      	str	r0, [sp, #8]
 800876a:	a802      	add	r0, sp, #8
 800876c:	f6c0 0101 	movt	r1, #2049	; 0x801
 8008770:	f7ff ffca 	bl	8008708 <_ZN4core9panicking9panic_fmt17hbfe32cf8392a510cE>
 8008774:	defe      	udf	#254	; 0xfe

08008776 <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E>:
 8008776:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800877a:	b081      	sub	sp, #4
 800877c:	f011 0303 	ands.w	r3, r1, #3
 8008780:	4684      	mov	ip, r0
 8008782:	f04f 0000 	mov.w	r0, #0
 8008786:	bf18      	it	ne
 8008788:	f1d3 0e04 	rsbsne	lr, r3, #4
 800878c:	d152      	bne.n	8008834 <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0xbe>
 800878e:	fa5f f38c 	uxtb.w	r3, ip
 8008792:	2a08      	cmp	r2, #8
 8008794:	d31f      	bcc.n	80087d6 <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0x60>
 8008796:	f1a2 0c08 	sub.w	ip, r2, #8
 800879a:	4560      	cmp	r0, ip
 800879c:	d81b      	bhi.n	80087d6 <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0x60>
 800879e:	f04f 3701 	mov.w	r7, #16843009	; 0x1010101
 80087a2:	fb03 f507 	mul.w	r5, r3, r7
 80087a6:	580f      	ldr	r7, [r1, r0]
 80087a8:	180c      	adds	r4, r1, r0
 80087aa:	6864      	ldr	r4, [r4, #4]
 80087ac:	406f      	eors	r7, r5
 80087ae:	f1a7 3601 	sub.w	r6, r7, #16843009	; 0x1010101
 80087b2:	ea26 0707 	bic.w	r7, r6, r7
 80087b6:	ea84 0605 	eor.w	r6, r4, r5
 80087ba:	f1a6 3401 	sub.w	r4, r6, #16843009	; 0x1010101
 80087be:	ea24 0606 	bic.w	r6, r4, r6
 80087c2:	4337      	orrs	r7, r6
 80087c4:	f017 3f80 	tst.w	r7, #2155905152	; 0x80808080
 80087c8:	d102      	bne.n	80087d0 <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0x5a>
 80087ca:	3008      	adds	r0, #8
 80087cc:	4560      	cmp	r0, ip
 80087ce:	d9ea      	bls.n	80087a6 <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0x30>
 80087d0:	4290      	cmp	r0, r2
 80087d2:	f200 80c2 	bhi.w	800895a <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0x1e4>
 80087d6:	180c      	adds	r4, r1, r0
 80087d8:	eb01 0e02 	add.w	lr, r1, r2
 80087dc:	eba2 0c00 	sub.w	ip, r2, r0
 80087e0:	2100      	movs	r1, #0
 80087e2:	4626      	mov	r6, r4
 80087e4:	2200      	movs	r2, #0
 80087e6:	ebae 0606 	sub.w	r6, lr, r6
 80087ea:	1865      	adds	r5, r4, r1
 80087ec:	2e03      	cmp	r6, #3
 80087ee:	f240 8081 	bls.w	80088f4 <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0x17e>
 80087f2:	782e      	ldrb	r6, [r5, #0]
 80087f4:	1af7      	subs	r7, r6, r3
 80087f6:	bf18      	it	ne
 80087f8:	2701      	movne	r7, #1
 80087fa:	443a      	add	r2, r7
 80087fc:	429e      	cmp	r6, r3
 80087fe:	d016      	beq.n	800882e <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0xb8>
 8008800:	786e      	ldrb	r6, [r5, #1]
 8008802:	1af7      	subs	r7, r6, r3
 8008804:	bf18      	it	ne
 8008806:	2701      	movne	r7, #1
 8008808:	443a      	add	r2, r7
 800880a:	429e      	cmp	r6, r3
 800880c:	d00f      	beq.n	800882e <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0xb8>
 800880e:	78ae      	ldrb	r6, [r5, #2]
 8008810:	1af7      	subs	r7, r6, r3
 8008812:	bf18      	it	ne
 8008814:	2701      	movne	r7, #1
 8008816:	443a      	add	r2, r7
 8008818:	429e      	cmp	r6, r3
 800881a:	d008      	beq.n	800882e <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0xb8>
 800881c:	78ef      	ldrb	r7, [r5, #3]
 800881e:	3104      	adds	r1, #4
 8008820:	1afe      	subs	r6, r7, r3
 8008822:	bf18      	it	ne
 8008824:	2601      	movne	r6, #1
 8008826:	4432      	add	r2, r6
 8008828:	1d2e      	adds	r6, r5, #4
 800882a:	429f      	cmp	r7, r3
 800882c:	d1db      	bne.n	80087e6 <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0x70>
 800882e:	2101      	movs	r1, #1
 8008830:	1813      	adds	r3, r2, r0
 8008832:	e02c      	b.n	800888e <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0x118>
 8008834:	4596      	cmp	lr, r2
 8008836:	bf88      	it	hi
 8008838:	4696      	movhi	lr, r2
 800883a:	eb01 080e 	add.w	r8, r1, lr
 800883e:	2300      	movs	r3, #0
 8008840:	4674      	mov	r4, lr
 8008842:	460d      	mov	r5, r1
 8008844:	eba8 0605 	sub.w	r6, r8, r5
 8008848:	2e03      	cmp	r6, #3
 800884a:	d925      	bls.n	8008898 <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0x122>
 800884c:	782f      	ldrb	r7, [r5, #0]
 800884e:	fa5f f68c 	uxtb.w	r6, ip
 8008852:	1bb8      	subs	r0, r7, r6
 8008854:	bf18      	it	ne
 8008856:	2001      	movne	r0, #1
 8008858:	4403      	add	r3, r0
 800885a:	42b7      	cmp	r7, r6
 800885c:	d016      	beq.n	800888c <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0x116>
 800885e:	7868      	ldrb	r0, [r5, #1]
 8008860:	1b87      	subs	r7, r0, r6
 8008862:	bf18      	it	ne
 8008864:	2701      	movne	r7, #1
 8008866:	443b      	add	r3, r7
 8008868:	42b0      	cmp	r0, r6
 800886a:	d00f      	beq.n	800888c <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0x116>
 800886c:	78a8      	ldrb	r0, [r5, #2]
 800886e:	1b87      	subs	r7, r0, r6
 8008870:	bf18      	it	ne
 8008872:	2701      	movne	r7, #1
 8008874:	443b      	add	r3, r7
 8008876:	42b0      	cmp	r0, r6
 8008878:	d008      	beq.n	800888c <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0x116>
 800887a:	78e8      	ldrb	r0, [r5, #3]
 800887c:	3c04      	subs	r4, #4
 800887e:	3504      	adds	r5, #4
 8008880:	1b87      	subs	r7, r0, r6
 8008882:	bf18      	it	ne
 8008884:	2701      	movne	r7, #1
 8008886:	443b      	add	r3, r7
 8008888:	42b0      	cmp	r0, r6
 800888a:	d1db      	bne.n	8008844 <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0xce>
 800888c:	2101      	movs	r1, #1
 800888e:	4608      	mov	r0, r1
 8008890:	4619      	mov	r1, r3
 8008892:	b001      	add	sp, #4
 8008894:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008898:	2c00      	cmp	r4, #0
 800889a:	d05c      	beq.n	8008956 <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0x1e0>
 800889c:	462f      	mov	r7, r5
 800889e:	fa5f f68c 	uxtb.w	r6, ip
 80088a2:	f817 9b01 	ldrb.w	r9, [r7], #1
 80088a6:	ebb9 0006 	subs.w	r0, r9, r6
 80088aa:	bf18      	it	ne
 80088ac:	2001      	movne	r0, #1
 80088ae:	4403      	add	r3, r0
 80088b0:	45b1      	cmp	r9, r6
 80088b2:	d0eb      	beq.n	800888c <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0x116>
 80088b4:	4547      	cmp	r7, r8
 80088b6:	d04e      	beq.n	8008956 <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0x1e0>
 80088b8:	7868      	ldrb	r0, [r5, #1]
 80088ba:	1b87      	subs	r7, r0, r6
 80088bc:	bf18      	it	ne
 80088be:	2701      	movne	r7, #1
 80088c0:	443b      	add	r3, r7
 80088c2:	42b0      	cmp	r0, r6
 80088c4:	d0e2      	beq.n	800888c <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0x116>
 80088c6:	1ca8      	adds	r0, r5, #2
 80088c8:	4540      	cmp	r0, r8
 80088ca:	d044      	beq.n	8008956 <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0x1e0>
 80088cc:	78a8      	ldrb	r0, [r5, #2]
 80088ce:	1b87      	subs	r7, r0, r6
 80088d0:	bf18      	it	ne
 80088d2:	2701      	movne	r7, #1
 80088d4:	443b      	add	r3, r7
 80088d6:	42b0      	cmp	r0, r6
 80088d8:	d0d8      	beq.n	800888c <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0x116>
 80088da:	1ce8      	adds	r0, r5, #3
 80088dc:	4540      	cmp	r0, r8
 80088de:	d03a      	beq.n	8008956 <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0x1e0>
 80088e0:	78e8      	ldrb	r0, [r5, #3]
 80088e2:	3c04      	subs	r4, #4
 80088e4:	3504      	adds	r5, #4
 80088e6:	1b87      	subs	r7, r0, r6
 80088e8:	bf18      	it	ne
 80088ea:	2701      	movne	r7, #1
 80088ec:	443b      	add	r3, r7
 80088ee:	42b0      	cmp	r0, r6
 80088f0:	d1d2      	bne.n	8008898 <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0x122>
 80088f2:	e7cb      	b.n	800888c <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0x116>
 80088f4:	ebac 0401 	sub.w	r4, ip, r1
 80088f8:	b35c      	cbz	r4, 8008952 <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0x1dc>
 80088fa:	4629      	mov	r1, r5
 80088fc:	f811 7b01 	ldrb.w	r7, [r1], #1
 8008900:	1afe      	subs	r6, r7, r3
 8008902:	bf18      	it	ne
 8008904:	2601      	movne	r6, #1
 8008906:	4432      	add	r2, r6
 8008908:	429f      	cmp	r7, r3
 800890a:	f43f af90 	beq.w	800882e <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0xb8>
 800890e:	4571      	cmp	r1, lr
 8008910:	d01f      	beq.n	8008952 <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0x1dc>
 8008912:	7869      	ldrb	r1, [r5, #1]
 8008914:	1acf      	subs	r7, r1, r3
 8008916:	bf18      	it	ne
 8008918:	2701      	movne	r7, #1
 800891a:	443a      	add	r2, r7
 800891c:	4299      	cmp	r1, r3
 800891e:	f43f af86 	beq.w	800882e <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0xb8>
 8008922:	1ca9      	adds	r1, r5, #2
 8008924:	4571      	cmp	r1, lr
 8008926:	d014      	beq.n	8008952 <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0x1dc>
 8008928:	78a9      	ldrb	r1, [r5, #2]
 800892a:	1acf      	subs	r7, r1, r3
 800892c:	bf18      	it	ne
 800892e:	2701      	movne	r7, #1
 8008930:	443a      	add	r2, r7
 8008932:	4299      	cmp	r1, r3
 8008934:	f43f af7b 	beq.w	800882e <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0xb8>
 8008938:	1ce9      	adds	r1, r5, #3
 800893a:	4571      	cmp	r1, lr
 800893c:	d009      	beq.n	8008952 <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0x1dc>
 800893e:	78e9      	ldrb	r1, [r5, #3]
 8008940:	3c04      	subs	r4, #4
 8008942:	3504      	adds	r5, #4
 8008944:	1acf      	subs	r7, r1, r3
 8008946:	bf18      	it	ne
 8008948:	2701      	movne	r7, #1
 800894a:	443a      	add	r2, r7
 800894c:	4299      	cmp	r1, r3
 800894e:	d1d3      	bne.n	80088f8 <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0x182>
 8008950:	e76d      	b.n	800882e <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0xb8>
 8008952:	2100      	movs	r1, #0
 8008954:	e76c      	b.n	8008830 <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0xba>
 8008956:	4670      	mov	r0, lr
 8008958:	e719      	b.n	800878e <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0x18>
 800895a:	4611      	mov	r1, r2
 800895c:	f000 f823 	bl	80089a6 <_ZN4core5slice22slice_index_order_fail17h7c776986fd4b085eE>
 8008960:	defe      	udf	#254	; 0xfe

08008962 <_ZN4core5slice20slice_index_len_fail17hfa6ff34b8fd07644E>:
 8008962:	b08c      	sub	sp, #48	; 0x30
 8008964:	e9cd 0100 	strd	r0, r1, [sp]
 8008968:	f24a 2013 	movw	r0, #41491	; 0xa213
 800896c:	a901      	add	r1, sp, #4
 800896e:	f6c0 0000 	movt	r0, #2048	; 0x800
 8008972:	900b      	str	r0, [sp, #44]	; 0x2c
 8008974:	e9cd 0109 	strd	r0, r1, [sp, #36]	; 0x24
 8008978:	4668      	mov	r0, sp
 800897a:	9008      	str	r0, [sp, #32]
 800897c:	2002      	movs	r0, #2
 800897e:	a908      	add	r1, sp, #32
 8008980:	9007      	str	r0, [sp, #28]
 8008982:	9106      	str	r1, [sp, #24]
 8008984:	2100      	movs	r1, #0
 8008986:	9105      	str	r1, [sp, #20]
 8008988:	e9cd 0103 	strd	r0, r1, [sp, #12]
 800898c:	f646 10a0 	movw	r0, #27040	; 0x69a0
 8008990:	f6c0 0001 	movt	r0, #2049	; 0x801
 8008994:	f646 11b0 	movw	r1, #27056	; 0x69b0
 8008998:	9002      	str	r0, [sp, #8]
 800899a:	a802      	add	r0, sp, #8
 800899c:	f6c0 0101 	movt	r1, #2049	; 0x801
 80089a0:	f7ff feb2 	bl	8008708 <_ZN4core9panicking9panic_fmt17hbfe32cf8392a510cE>
 80089a4:	defe      	udf	#254	; 0xfe

080089a6 <_ZN4core5slice22slice_index_order_fail17h7c776986fd4b085eE>:
 80089a6:	b08c      	sub	sp, #48	; 0x30
 80089a8:	e9cd 0100 	strd	r0, r1, [sp]
 80089ac:	f24a 2013 	movw	r0, #41491	; 0xa213
 80089b0:	a901      	add	r1, sp, #4
 80089b2:	f6c0 0000 	movt	r0, #2048	; 0x800
 80089b6:	900b      	str	r0, [sp, #44]	; 0x2c
 80089b8:	e9cd 0109 	strd	r0, r1, [sp, #36]	; 0x24
 80089bc:	4668      	mov	r0, sp
 80089be:	9008      	str	r0, [sp, #32]
 80089c0:	2002      	movs	r0, #2
 80089c2:	a908      	add	r1, sp, #32
 80089c4:	9007      	str	r0, [sp, #28]
 80089c6:	9106      	str	r1, [sp, #24]
 80089c8:	2100      	movs	r1, #0
 80089ca:	9105      	str	r1, [sp, #20]
 80089cc:	e9cd 0103 	strd	r0, r1, [sp, #12]
 80089d0:	f646 10e4 	movw	r0, #27108	; 0x69e4
 80089d4:	f6c0 0001 	movt	r0, #2049	; 0x801
 80089d8:	f646 11f4 	movw	r1, #27124	; 0x69f4
 80089dc:	9002      	str	r0, [sp, #8]
 80089de:	a802      	add	r0, sp, #8
 80089e0:	f6c0 0101 	movt	r1, #2049	; 0x801
 80089e4:	f7ff fe90 	bl	8008708 <_ZN4core9panicking9panic_fmt17hbfe32cf8392a510cE>
 80089e8:	defe      	udf	#254	; 0xfe

080089ea <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E>:
 80089ea:	b09a      	sub	sp, #104	; 0x68
 80089ec:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80089f0:	e9cd 2300 	strd	r2, r3, [sp]
 80089f4:	d802      	bhi.n	80089fc <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x12>
 80089f6:	2501      	movs	r5, #1
 80089f8:	468c      	mov	ip, r1
 80089fa:	e03e      	b.n	8008a7a <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x90>
 80089fc:	f1c1 0e00 	rsb	lr, r1, #0
 8008a00:	f44f 7c80 	mov.w	ip, #256	; 0x100
 8008a04:	458c      	cmp	ip, r1
 8008a06:	d205      	bcs.n	8008a14 <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x2a>
 8008a08:	f910 400c 	ldrsb.w	r4, [r0, ip]
 8008a0c:	f114 0f41 	cmn.w	r4, #65	; 0x41
 8008a10:	f300 8126 	bgt.w	8008c60 <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x276>
 8008a14:	eb0e 040c 	add.w	r4, lr, ip
 8008a18:	f1ac 0601 	sub.w	r6, ip, #1
 8008a1c:	2c01      	cmp	r4, #1
 8008a1e:	d02a      	beq.n	8008a76 <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x8c>
 8008a20:	428e      	cmp	r6, r1
 8008a22:	d206      	bcs.n	8008a32 <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x48>
 8008a24:	eb00 050c 	add.w	r5, r0, ip
 8008a28:	f915 5c01 	ldrsb.w	r5, [r5, #-1]
 8008a2c:	f115 0f41 	cmn.w	r5, #65	; 0x41
 8008a30:	dc21      	bgt.n	8008a76 <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x8c>
 8008a32:	f1ac 0602 	sub.w	r6, ip, #2
 8008a36:	2c02      	cmp	r4, #2
 8008a38:	d01d      	beq.n	8008a76 <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x8c>
 8008a3a:	428e      	cmp	r6, r1
 8008a3c:	d206      	bcs.n	8008a4c <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x62>
 8008a3e:	eb00 050c 	add.w	r5, r0, ip
 8008a42:	f915 5c02 	ldrsb.w	r5, [r5, #-2]
 8008a46:	f115 0f41 	cmn.w	r5, #65	; 0x41
 8008a4a:	dc14      	bgt.n	8008a76 <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x8c>
 8008a4c:	f1ac 0603 	sub.w	r6, ip, #3
 8008a50:	2c03      	cmp	r4, #3
 8008a52:	d010      	beq.n	8008a76 <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x8c>
 8008a54:	428e      	cmp	r6, r1
 8008a56:	d206      	bcs.n	8008a66 <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x7c>
 8008a58:	eb00 050c 	add.w	r5, r0, ip
 8008a5c:	f915 5c03 	ldrsb.w	r5, [r5, #-3]
 8008a60:	f115 0f41 	cmn.w	r5, #65	; 0x41
 8008a64:	dc07      	bgt.n	8008a76 <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x8c>
 8008a66:	f1bc 0c04 	subs.w	ip, ip, #4
 8008a6a:	f04f 0500 	mov.w	r5, #0
 8008a6e:	d004      	beq.n	8008a7a <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x90>
 8008a70:	2c04      	cmp	r4, #4
 8008a72:	d1c7      	bne.n	8008a04 <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x1a>
 8008a74:	e001      	b.n	8008a7a <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x90>
 8008a76:	2500      	movs	r5, #0
 8008a78:	46b4      	mov	ip, r6
 8008a7a:	2605      	movs	r6, #5
 8008a7c:	2d00      	cmp	r5, #0
 8008a7e:	f646 25c2 	movw	r5, #27330	; 0x6ac2
 8008a82:	e9cd 0c02 	strd	r0, ip, [sp, #8]
 8008a86:	bf18      	it	ne
 8008a88:	2600      	movne	r6, #0
 8008a8a:	9605      	str	r6, [sp, #20]
 8008a8c:	f246 7680 	movw	r6, #26496	; 0x6780
 8008a90:	f6c0 0501 	movt	r5, #2049	; 0x801
 8008a94:	f6c0 0601 	movt	r6, #2049	; 0x801
 8008a98:	bf18      	it	ne
 8008a9a:	4635      	movne	r5, r6
 8008a9c:	428a      	cmp	r2, r1
 8008a9e:	9504      	str	r5, [sp, #16]
 8008aa0:	bf98      	it	ls
 8008aa2:	428b      	cmpls	r3, r1
 8008aa4:	f200 80de 	bhi.w	8008c64 <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x27a>
 8008aa8:	429a      	cmp	r2, r3
 8008aaa:	f200 8102 	bhi.w	8008cb2 <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x2c8>
 8008aae:	2a00      	cmp	r2, #0
 8008ab0:	bf18      	it	ne
 8008ab2:	4291      	cmpne	r1, r2
 8008ab4:	d156      	bne.n	8008b64 <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x17a>
 8008ab6:	461a      	mov	r2, r3
 8008ab8:	2a00      	cmp	r2, #0
 8008aba:	9206      	str	r2, [sp, #24]
 8008abc:	bf18      	it	ne
 8008abe:	428a      	cmpne	r2, r1
 8008ac0:	d103      	bne.n	8008aca <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0xe0>
 8008ac2:	4613      	mov	r3, r2
 8008ac4:	428b      	cmp	r3, r1
 8008ac6:	d03c      	beq.n	8008b42 <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x158>
 8008ac8:	e042      	b.n	8008b50 <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x166>
 8008aca:	f1a0 0c01 	sub.w	ip, r0, #1
 8008ace:	f101 0e02 	add.w	lr, r1, #2
 8008ad2:	1ccc      	adds	r4, r1, #3
 8008ad4:	1c4d      	adds	r5, r1, #1
 8008ad6:	1d0e      	adds	r6, r1, #4
 8008ad8:	428a      	cmp	r2, r1
 8008ada:	d206      	bcs.n	8008aea <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x100>
 8008adc:	eb0c 0302 	add.w	r3, ip, r2
 8008ae0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8008ae4:	f113 0f40 	cmn.w	r3, #64	; 0x40
 8008ae8:	daeb      	bge.n	8008ac2 <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0xd8>
 8008aea:	1e53      	subs	r3, r2, #1
 8008aec:	bf18      	it	ne
 8008aee:	4295      	cmpne	r5, r2
 8008af0:	d025      	beq.n	8008b3e <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x154>
 8008af2:	428b      	cmp	r3, r1
 8008af4:	d204      	bcs.n	8008b00 <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x116>
 8008af6:	f91c 7002 	ldrsb.w	r7, [ip, r2]
 8008afa:	f117 0f41 	cmn.w	r7, #65	; 0x41
 8008afe:	dc1e      	bgt.n	8008b3e <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x154>
 8008b00:	1e93      	subs	r3, r2, #2
 8008b02:	bf18      	it	ne
 8008b04:	4596      	cmpne	lr, r2
 8008b06:	d01a      	beq.n	8008b3e <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x154>
 8008b08:	428b      	cmp	r3, r1
 8008b0a:	d206      	bcs.n	8008b1a <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x130>
 8008b0c:	eb0c 0702 	add.w	r7, ip, r2
 8008b10:	f917 7c01 	ldrsb.w	r7, [r7, #-1]
 8008b14:	f117 0f41 	cmn.w	r7, #65	; 0x41
 8008b18:	dc11      	bgt.n	8008b3e <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x154>
 8008b1a:	1ed3      	subs	r3, r2, #3
 8008b1c:	bf18      	it	ne
 8008b1e:	4294      	cmpne	r4, r2
 8008b20:	d00d      	beq.n	8008b3e <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x154>
 8008b22:	428b      	cmp	r3, r1
 8008b24:	d206      	bcs.n	8008b34 <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x14a>
 8008b26:	eb0c 0702 	add.w	r7, ip, r2
 8008b2a:	f917 7c02 	ldrsb.w	r7, [r7, #-2]
 8008b2e:	f117 0f41 	cmn.w	r7, #65	; 0x41
 8008b32:	dc04      	bgt.n	8008b3e <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x154>
 8008b34:	1f13      	subs	r3, r2, #4
 8008b36:	d002      	beq.n	8008b3e <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x154>
 8008b38:	4296      	cmp	r6, r2
 8008b3a:	461a      	mov	r2, r3
 8008b3c:	d1cc      	bne.n	8008ad8 <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0xee>
 8008b3e:	428b      	cmp	r3, r1
 8008b40:	d106      	bne.n	8008b50 <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x166>
 8008b42:	f646 1030 	movw	r0, #26928	; 0x6930
 8008b46:	f6c0 0001 	movt	r0, #2049	; 0x801
 8008b4a:	f7ff fda0 	bl	800868e <_ZN4core9panicking5panic17h138a849f37d3ac2dE>
 8008b4e:	defe      	udf	#254	; 0xfe
 8008b50:	18c5      	adds	r5, r0, r3
 8008b52:	462e      	mov	r6, r5
 8008b54:	f916 4b01 	ldrsb.w	r4, [r6], #1
 8008b58:	2c00      	cmp	r4, #0
 8008b5a:	b2e2      	uxtb	r2, r4
 8008b5c:	db09      	blt.n	8008b72 <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x188>
 8008b5e:	9207      	str	r2, [sp, #28]
 8008b60:	2101      	movs	r1, #1
 8008b62:	e046      	b.n	8008bf2 <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x208>
 8008b64:	d9a8      	bls.n	8008ab8 <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0xce>
 8008b66:	5686      	ldrsb	r6, [r0, r2]
 8008b68:	f116 0f40 	cmn.w	r6, #64	; 0x40
 8008b6c:	bfa8      	it	ge
 8008b6e:	461a      	movge	r2, r3
 8008b70:	e7a2      	b.n	8008ab8 <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0xce>
 8008b72:	4408      	add	r0, r1
 8008b74:	4286      	cmp	r6, r0
 8008b76:	d102      	bne.n	8008b7e <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x194>
 8008b78:	2500      	movs	r5, #0
 8008b7a:	4606      	mov	r6, r0
 8008b7c:	e003      	b.n	8008b86 <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x19c>
 8008b7e:	7869      	ldrb	r1, [r5, #1]
 8008b80:	1cae      	adds	r6, r5, #2
 8008b82:	f001 053f 	and.w	r5, r1, #63	; 0x3f
 8008b86:	f002 011f 	and.w	r1, r2, #31
 8008b8a:	2ae0      	cmp	r2, #224	; 0xe0
 8008b8c:	d304      	bcc.n	8008b98 <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x1ae>
 8008b8e:	4286      	cmp	r6, r0
 8008b90:	d105      	bne.n	8008b9e <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x1b4>
 8008b92:	2400      	movs	r4, #0
 8008b94:	4606      	mov	r6, r0
 8008b96:	e006      	b.n	8008ba6 <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x1bc>
 8008b98:	ea45 1081 	orr.w	r0, r5, r1, lsl #6
 8008b9c:	e01a      	b.n	8008bd4 <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x1ea>
 8008b9e:	f816 4b01 	ldrb.w	r4, [r6], #1
 8008ba2:	f004 043f 	and.w	r4, r4, #63	; 0x3f
 8008ba6:	ea44 1585 	orr.w	r5, r4, r5, lsl #6
 8008baa:	2af0      	cmp	r2, #240	; 0xf0
 8008bac:	d310      	bcc.n	8008bd0 <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x1e6>
 8008bae:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
 8008bb2:	ea02 4181 	and.w	r1, r2, r1, lsl #18
 8008bb6:	4286      	cmp	r6, r0
 8008bb8:	bf1a      	itte	ne
 8008bba:	7830      	ldrbne	r0, [r6, #0]
 8008bbc:	f000 003f 	andne.w	r0, r0, #63	; 0x3f
 8008bc0:	2000      	moveq	r0, #0
 8008bc2:	ea41 1185 	orr.w	r1, r1, r5, lsl #6
 8008bc6:	4408      	add	r0, r1
 8008bc8:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
 8008bcc:	d0b9      	beq.n	8008b42 <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x158>
 8008bce:	e001      	b.n	8008bd4 <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x1ea>
 8008bd0:	ea45 3001 	orr.w	r0, r5, r1, lsl #12
 8008bd4:	2880      	cmp	r0, #128	; 0x80
 8008bd6:	9007      	str	r0, [sp, #28]
 8008bd8:	d201      	bcs.n	8008bde <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x1f4>
 8008bda:	2101      	movs	r1, #1
 8008bdc:	e009      	b.n	8008bf2 <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x208>
 8008bde:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8008be2:	d201      	bcs.n	8008be8 <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x1fe>
 8008be4:	2102      	movs	r1, #2
 8008be6:	e004      	b.n	8008bf2 <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x208>
 8008be8:	2104      	movs	r1, #4
 8008bea:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8008bee:	bf38      	it	cc
 8008bf0:	2103      	movcc	r1, #3
 8008bf2:	4419      	add	r1, r3
 8008bf4:	aa04      	add	r2, sp, #16
 8008bf6:	a808      	add	r0, sp, #32
 8008bf8:	e9cd 3108 	strd	r3, r1, [sp, #32]
 8008bfc:	f24a 315b 	movw	r1, #41819	; 0xa35b
 8008c00:	f6c0 0100 	movt	r1, #2048	; 0x800
 8008c04:	9119      	str	r1, [sp, #100]	; 0x64
 8008c06:	e9cd 1217 	strd	r1, r2, [sp, #92]	; 0x5c
 8008c0a:	a902      	add	r1, sp, #8
 8008c0c:	9116      	str	r1, [sp, #88]	; 0x58
 8008c0e:	f248 611f 	movw	r1, #34335	; 0x861f
 8008c12:	f6c0 0100 	movt	r1, #2048	; 0x800
 8008c16:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
 8008c1a:	f649 004d 	movw	r0, #38989	; 0x984d
 8008c1e:	f6c0 0000 	movt	r0, #2048	; 0x800
 8008c22:	a910      	add	r1, sp, #64	; 0x40
 8008c24:	9013      	str	r0, [sp, #76]	; 0x4c
 8008c26:	a807      	add	r0, sp, #28
 8008c28:	9012      	str	r0, [sp, #72]	; 0x48
 8008c2a:	f24a 2013 	movw	r0, #41491	; 0xa213
 8008c2e:	f6c0 0000 	movt	r0, #2048	; 0x800
 8008c32:	9011      	str	r0, [sp, #68]	; 0x44
 8008c34:	a806      	add	r0, sp, #24
 8008c36:	9010      	str	r0, [sp, #64]	; 0x40
 8008c38:	2005      	movs	r0, #5
 8008c3a:	900f      	str	r0, [sp, #60]	; 0x3c
 8008c3c:	910e      	str	r1, [sp, #56]	; 0x38
 8008c3e:	2100      	movs	r1, #0
 8008c40:	910d      	str	r1, [sp, #52]	; 0x34
 8008c42:	e9cd 010b 	strd	r0, r1, [sp, #44]	; 0x2c
 8008c46:	f646 307c 	movw	r0, #27516	; 0x6b7c
 8008c4a:	f646 31a4 	movw	r1, #27556	; 0x6ba4
 8008c4e:	f6c0 0001 	movt	r0, #2049	; 0x801
 8008c52:	900a      	str	r0, [sp, #40]	; 0x28
 8008c54:	f6c0 0101 	movt	r1, #2049	; 0x801
 8008c58:	a80a      	add	r0, sp, #40	; 0x28
 8008c5a:	f7ff fd55 	bl	8008708 <_ZN4core9panicking9panic_fmt17hbfe32cf8392a510cE>
 8008c5e:	defe      	udf	#254	; 0xfe
 8008c60:	2500      	movs	r5, #0
 8008c62:	e70a      	b.n	8008a7a <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x90>
 8008c64:	428a      	cmp	r2, r1
 8008c66:	f24a 305b 	movw	r0, #41819	; 0xa35b
 8008c6a:	a904      	add	r1, sp, #16
 8008c6c:	f6c0 0000 	movt	r0, #2048	; 0x800
 8008c70:	bf88      	it	hi
 8008c72:	4613      	movhi	r3, r2
 8008c74:	9308      	str	r3, [sp, #32]
 8008c76:	9015      	str	r0, [sp, #84]	; 0x54
 8008c78:	e9cd 0113 	strd	r0, r1, [sp, #76]	; 0x4c
 8008c7c:	a802      	add	r0, sp, #8
 8008c7e:	9012      	str	r0, [sp, #72]	; 0x48
 8008c80:	f24a 2013 	movw	r0, #41491	; 0xa213
 8008c84:	f6c0 0000 	movt	r0, #2048	; 0x800
 8008c88:	a910      	add	r1, sp, #64	; 0x40
 8008c8a:	9011      	str	r0, [sp, #68]	; 0x44
 8008c8c:	a808      	add	r0, sp, #32
 8008c8e:	9010      	str	r0, [sp, #64]	; 0x40
 8008c90:	2003      	movs	r0, #3
 8008c92:	900f      	str	r0, [sp, #60]	; 0x3c
 8008c94:	910e      	str	r1, [sp, #56]	; 0x38
 8008c96:	2100      	movs	r1, #0
 8008c98:	910d      	str	r1, [sp, #52]	; 0x34
 8008c9a:	e9cd 010b 	strd	r0, r1, [sp, #44]	; 0x2c
 8008c9e:	f646 20e8 	movw	r0, #27368	; 0x6ae8
 8008ca2:	f646 3100 	movw	r1, #27392	; 0x6b00
 8008ca6:	f6c0 0001 	movt	r0, #2049	; 0x801
 8008caa:	f6c0 0101 	movt	r1, #2049	; 0x801
 8008cae:	900a      	str	r0, [sp, #40]	; 0x28
 8008cb0:	e7d2      	b.n	8008c58 <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x26e>
 8008cb2:	f24a 305b 	movw	r0, #41819	; 0xa35b
 8008cb6:	a904      	add	r1, sp, #16
 8008cb8:	f6c0 0000 	movt	r0, #2048	; 0x800
 8008cbc:	9017      	str	r0, [sp, #92]	; 0x5c
 8008cbe:	e9cd 0115 	strd	r0, r1, [sp, #84]	; 0x54
 8008cc2:	a802      	add	r0, sp, #8
 8008cc4:	9014      	str	r0, [sp, #80]	; 0x50
 8008cc6:	f24a 2013 	movw	r0, #41491	; 0xa213
 8008cca:	a901      	add	r1, sp, #4
 8008ccc:	f6c0 0000 	movt	r0, #2048	; 0x800
 8008cd0:	9013      	str	r0, [sp, #76]	; 0x4c
 8008cd2:	e9cd 0111 	strd	r0, r1, [sp, #68]	; 0x44
 8008cd6:	4668      	mov	r0, sp
 8008cd8:	9010      	str	r0, [sp, #64]	; 0x40
 8008cda:	2004      	movs	r0, #4
 8008cdc:	a910      	add	r1, sp, #64	; 0x40
 8008cde:	900f      	str	r0, [sp, #60]	; 0x3c
 8008ce0:	910e      	str	r1, [sp, #56]	; 0x38
 8008ce2:	2100      	movs	r1, #0
 8008ce4:	910d      	str	r1, [sp, #52]	; 0x34
 8008ce6:	e9cd 010b 	strd	r0, r1, [sp, #44]	; 0x2c
 8008cea:	f646 3020 	movw	r0, #27424	; 0x6b20
 8008cee:	f646 3140 	movw	r1, #27456	; 0x6b40
 8008cf2:	f6c0 0001 	movt	r0, #2049	; 0x801
 8008cf6:	900a      	str	r0, [sp, #40]	; 0x28
 8008cf8:	f6c0 0101 	movt	r1, #2049	; 0x801
 8008cfc:	e7ac      	b.n	8008c58 <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x26e>

08008cfe <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hb4c162eac025d3e7E>:
 8008cfe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d02:	b089      	sub	sp, #36	; 0x24
 8008d04:	2700      	movs	r7, #0
 8008d06:	2a00      	cmp	r2, #0
 8008d08:	f000 8089 	beq.w	8008e1e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hb4c162eac025d3e7E+0x120>
 8008d0c:	4683      	mov	fp, r0
 8008d0e:	a802      	add	r0, sp, #8
 8008d10:	4692      	mov	sl, r2
 8008d12:	460d      	mov	r5, r1
 8008d14:	3018      	adds	r0, #24
 8008d16:	9001      	str	r0, [sp, #4]
 8008d18:	f89b 0008 	ldrb.w	r0, [fp, #8]
 8008d1c:	b150      	cbz	r0, 8008d34 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hb4c162eac025d3e7E+0x36>
 8008d1e:	e9db 0100 	ldrd	r0, r1, [fp]
 8008d22:	2204      	movs	r2, #4
 8008d24:	68cb      	ldr	r3, [r1, #12]
 8008d26:	f646 0180 	movw	r1, #26752	; 0x6880
 8008d2a:	f6c0 0101 	movt	r1, #2049	; 0x801
 8008d2e:	4798      	blx	r3
 8008d30:	2800      	cmp	r0, #0
 8008d32:	d171      	bne.n	8008e18 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hb4c162eac025d3e7E+0x11a>
 8008d34:	200a      	movs	r0, #10
 8008d36:	2101      	movs	r1, #1
 8008d38:	9008      	str	r0, [sp, #32]
 8008d3a:	4652      	mov	r2, sl
 8008d3c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008d40:	200a      	movs	r0, #10
 8008d42:	4629      	mov	r1, r5
 8008d44:	e9cd 7a04 	strd	r7, sl, [sp, #16]
 8008d48:	e9cd 5a02 	strd	r5, sl, [sp, #8]
 8008d4c:	e006      	b.n	8008d5c <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hb4c162eac025d3e7E+0x5e>
 8008d4e:	eba0 0209 	sub.w	r2, r0, r9
 8008d52:	a802      	add	r0, sp, #8
 8008d54:	9902      	ldr	r1, [sp, #8]
 8008d56:	4420      	add	r0, r4
 8008d58:	7dc0      	ldrb	r0, [r0, #23]
 8008d5a:	4449      	add	r1, r9
 8008d5c:	f7ff fd0b 	bl	8008776 <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E>
 8008d60:	2801      	cmp	r0, #1
 8008d62:	d151      	bne.n	8008e08 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hb4c162eac025d3e7E+0x10a>
 8008d64:	9804      	ldr	r0, [sp, #16]
 8008d66:	9c07      	ldr	r4, [sp, #28]
 8008d68:	4408      	add	r0, r1
 8008d6a:	f100 0901 	add.w	r9, r0, #1
 8008d6e:	f8cd 9010 	str.w	r9, [sp, #16]
 8008d72:	45a1      	cmp	r9, r4
 8008d74:	d202      	bcs.n	8008d7c <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hb4c162eac025d3e7E+0x7e>
 8008d76:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008d7a:	e016      	b.n	8008daa <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hb4c162eac025d3e7E+0xac>
 8008d7c:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008d80:	4620      	mov	r0, r4
 8008d82:	45c8      	cmp	r8, r9
 8008d84:	bf38      	it	cc
 8008d86:	2000      	movcc	r0, #0
 8008d88:	d30f      	bcc.n	8008daa <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hb4c162eac025d3e7E+0xac>
 8008d8a:	2c05      	cmp	r4, #5
 8008d8c:	d24b      	bcs.n	8008e26 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hb4c162eac025d3e7E+0x128>
 8008d8e:	42a0      	cmp	r0, r4
 8008d90:	d10b      	bne.n	8008daa <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hb4c162eac025d3e7E+0xac>
 8008d92:	9802      	ldr	r0, [sp, #8]
 8008d94:	eba9 0604 	sub.w	r6, r9, r4
 8008d98:	9901      	ldr	r1, [sp, #4]
 8008d9a:	4430      	add	r0, r6
 8008d9c:	4288      	cmp	r0, r1
 8008d9e:	d036      	beq.n	8008e0e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hb4c162eac025d3e7E+0x110>
 8008da0:	9901      	ldr	r1, [sp, #4]
 8008da2:	4622      	mov	r2, r4
 8008da4:	f005 f8b6 	bl	800df14 <memcmp>
 8008da8:	b388      	cbz	r0, 8008e0e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hb4c162eac025d3e7E+0x110>
 8008daa:	9805      	ldr	r0, [sp, #20]
 8008dac:	4548      	cmp	r0, r9
 8008dae:	bf28      	it	cs
 8008db0:	4580      	cmpcs	r8, r0
 8008db2:	d2cc      	bcs.n	8008d4e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hb4c162eac025d3e7E+0x50>
 8008db4:	4654      	mov	r4, sl
 8008db6:	f88b 7008 	strb.w	r7, [fp, #8]
 8008dba:	ebaa 0604 	sub.w	r6, sl, r4
 8008dbe:	fab4 f384 	clz	r3, r4
 8008dc2:	fab6 f286 	clz	r2, r6
 8008dc6:	e9db 0100 	ldrd	r0, r1, [fp]
 8008dca:	095b      	lsrs	r3, r3, #5
 8008dcc:	0952      	lsrs	r2, r2, #5
 8008dce:	ea53 0702 	orrs.w	r7, r3, r2
 8008dd2:	d105      	bne.n	8008de0 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hb4c162eac025d3e7E+0xe2>
 8008dd4:	45a2      	cmp	sl, r4
 8008dd6:	d92b      	bls.n	8008e30 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hb4c162eac025d3e7E+0x132>
 8008dd8:	572a      	ldrsb	r2, [r5, r4]
 8008dda:	f112 0f41 	cmn.w	r2, #65	; 0x41
 8008dde:	dd27      	ble.n	8008e30 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hb4c162eac025d3e7E+0x132>
 8008de0:	68cb      	ldr	r3, [r1, #12]
 8008de2:	4629      	mov	r1, r5
 8008de4:	4622      	mov	r2, r4
 8008de6:	4798      	blx	r3
 8008de8:	b9b0      	cbnz	r0, 8008e18 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hb4c162eac025d3e7E+0x11a>
 8008dea:	b92f      	cbnz	r7, 8008df8 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hb4c162eac025d3e7E+0xfa>
 8008dec:	45a2      	cmp	sl, r4
 8008dee:	d926      	bls.n	8008e3e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hb4c162eac025d3e7E+0x140>
 8008df0:	5728      	ldrsb	r0, [r5, r4]
 8008df2:	f110 0f41 	cmn.w	r0, #65	; 0x41
 8008df6:	dd22      	ble.n	8008e3e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hb4c162eac025d3e7E+0x140>
 8008df8:	4425      	add	r5, r4
 8008dfa:	2e00      	cmp	r6, #0
 8008dfc:	46b2      	mov	sl, r6
 8008dfe:	f04f 0700 	mov.w	r7, #0
 8008e02:	f47f af89 	bne.w	8008d18 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hb4c162eac025d3e7E+0x1a>
 8008e06:	e009      	b.n	8008e1c <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hb4c162eac025d3e7E+0x11e>
 8008e08:	9805      	ldr	r0, [sp, #20]
 8008e0a:	9004      	str	r0, [sp, #16]
 8008e0c:	e7d2      	b.n	8008db4 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hb4c162eac025d3e7E+0xb6>
 8008e0e:	2001      	movs	r0, #1
 8008e10:	1c74      	adds	r4, r6, #1
 8008e12:	f88b 0008 	strb.w	r0, [fp, #8]
 8008e16:	e7d0      	b.n	8008dba <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hb4c162eac025d3e7E+0xbc>
 8008e18:	2701      	movs	r7, #1
 8008e1a:	e000      	b.n	8008e1e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hb4c162eac025d3e7E+0x120>
 8008e1c:	2700      	movs	r7, #0
 8008e1e:	4638      	mov	r0, r7
 8008e20:	b009      	add	sp, #36	; 0x24
 8008e22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e26:	4620      	mov	r0, r4
 8008e28:	2104      	movs	r1, #4
 8008e2a:	f7ff fd9a 	bl	8008962 <_ZN4core5slice20slice_index_len_fail17hfa6ff34b8fd07644E>
 8008e2e:	defe      	udf	#254	; 0xfe
 8008e30:	4628      	mov	r0, r5
 8008e32:	4651      	mov	r1, sl
 8008e34:	2200      	movs	r2, #0
 8008e36:	4623      	mov	r3, r4
 8008e38:	f7ff fdd7 	bl	80089ea <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E>
 8008e3c:	defe      	udf	#254	; 0xfe
 8008e3e:	4628      	mov	r0, r5
 8008e40:	4651      	mov	r1, sl
 8008e42:	4622      	mov	r2, r4
 8008e44:	4653      	mov	r3, sl
 8008e46:	f7ff fdd0 	bl	80089ea <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E>
 8008e4a:	defe      	udf	#254	; 0xfe

08008e4c <_ZN4core3fmt8builders10DebugTuple5field17ha79ab474d6fe3b39E>:
 8008e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e50:	b091      	sub	sp, #68	; 0x44
 8008e52:	4604      	mov	r4, r0
 8008e54:	7a00      	ldrb	r0, [r0, #8]
 8008e56:	b140      	cbz	r0, 8008e6a <_ZN4core3fmt8builders10DebugTuple5field17ha79ab474d6fe3b39E+0x1e>
 8008e58:	2001      	movs	r0, #1
 8008e5a:	6861      	ldr	r1, [r4, #4]
 8008e5c:	7220      	strb	r0, [r4, #8]
 8008e5e:	1c48      	adds	r0, r1, #1
 8008e60:	6060      	str	r0, [r4, #4]
 8008e62:	4620      	mov	r0, r4
 8008e64:	b011      	add	sp, #68	; 0x44
 8008e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e6a:	4616      	mov	r6, r2
 8008e6c:	460d      	mov	r5, r1
 8008e6e:	e9d4 1200 	ldrd	r1, r2, [r4]
 8008e72:	7808      	ldrb	r0, [r1, #0]
 8008e74:	0740      	lsls	r0, r0, #29
 8008e76:	d419      	bmi.n	8008eac <_ZN4core3fmt8builders10DebugTuple5field17ha79ab474d6fe3b39E+0x60>
 8008e78:	f646 439e 	movw	r3, #27806	; 0x6c9e
 8008e7c:	e9d1 0706 	ldrd	r0, r7, [r1, #24]
 8008e80:	f646 419a 	movw	r1, #27802	; 0x6c9a
 8008e84:	f6c0 0301 	movt	r3, #2049	; 0x801
 8008e88:	f6c0 0101 	movt	r1, #2049	; 0x801
 8008e8c:	2a00      	cmp	r2, #0
 8008e8e:	bf08      	it	eq
 8008e90:	4619      	moveq	r1, r3
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	f04f 0202 	mov.w	r2, #2
 8008e98:	bf08      	it	eq
 8008e9a:	2201      	moveq	r2, #1
 8008e9c:	4798      	blx	r3
 8008e9e:	2800      	cmp	r0, #0
 8008ea0:	d1da      	bne.n	8008e58 <_ZN4core3fmt8builders10DebugTuple5field17ha79ab474d6fe3b39E+0xc>
 8008ea2:	68f2      	ldr	r2, [r6, #12]
 8008ea4:	4628      	mov	r0, r5
 8008ea6:	6821      	ldr	r1, [r4, #0]
 8008ea8:	4790      	blx	r2
 8008eaa:	e7d6      	b.n	8008e5a <_ZN4core3fmt8builders10DebugTuple5field17ha79ab474d6fe3b39E+0xe>
 8008eac:	b95a      	cbnz	r2, 8008ec6 <_ZN4core3fmt8builders10DebugTuple5field17ha79ab474d6fe3b39E+0x7a>
 8008eae:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
 8008eb2:	2202      	movs	r2, #2
 8008eb4:	68cb      	ldr	r3, [r1, #12]
 8008eb6:	f646 419c 	movw	r1, #27804	; 0x6c9c
 8008eba:	f6c0 0101 	movt	r1, #2049	; 0x801
 8008ebe:	4798      	blx	r3
 8008ec0:	2800      	cmp	r0, #0
 8008ec2:	d1c9      	bne.n	8008e58 <_ZN4core3fmt8builders10DebugTuple5field17ha79ab474d6fe3b39E+0xc>
 8008ec4:	6821      	ldr	r1, [r4, #0]
 8008ec6:	2000      	movs	r0, #0
 8008ec8:	2301      	movs	r3, #1
 8008eca:	9003      	str	r0, [sp, #12]
 8008ecc:	e9cd 0001 	strd	r0, r0, [sp, #4]
 8008ed0:	e9d1 0206 	ldrd	r0, r2, [r1, #24]
 8008ed4:	f88d 300c 	strb.w	r3, [sp, #12]
 8008ed8:	e9cd 0201 	strd	r0, r2, [sp, #4]
 8008edc:	e891 5c00 	ldmia.w	r1, {sl, fp, ip, lr}
 8008ee0:	e9d1 8904 	ldrd	r8, r9, [r1, #16]
 8008ee4:	e9d1 3708 	ldrd	r3, r7, [r1, #32]
 8008ee8:	e9d1 020a 	ldrd	r0, r2, [r1, #40]	; 0x28
 8008eec:	f891 1030 	ldrb.w	r1, [r1, #48]	; 0x30
 8008ef0:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
 8008ef4:	a904      	add	r1, sp, #16
 8008ef6:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8008efa:	e9cd 020e 	strd	r0, r2, [sp, #56]	; 0x38
 8008efe:	f646 4080 	movw	r0, #27776	; 0x6c80
 8008f02:	f6c0 0001 	movt	r0, #2049	; 0x801
 8008f06:	e9cd 370c 	strd	r3, r7, [sp, #48]	; 0x30
 8008f0a:	900b      	str	r0, [sp, #44]	; 0x2c
 8008f0c:	a801      	add	r0, sp, #4
 8008f0e:	900a      	str	r0, [sp, #40]	; 0x28
 8008f10:	4628      	mov	r0, r5
 8008f12:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8008f16:	e9cd ce06 	strd	ip, lr, [sp, #24]
 8008f1a:	68f2      	ldr	r2, [r6, #12]
 8008f1c:	4790      	blx	r2
 8008f1e:	2800      	cmp	r0, #0
 8008f20:	d19a      	bne.n	8008e58 <_ZN4core3fmt8builders10DebugTuple5field17ha79ab474d6fe3b39E+0xc>
 8008f22:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008f26:	2202      	movs	r2, #2
 8008f28:	68cb      	ldr	r3, [r1, #12]
 8008f2a:	f646 4198 	movw	r1, #27800	; 0x6c98
 8008f2e:	f6c0 0101 	movt	r1, #2049	; 0x801
 8008f32:	4798      	blx	r3
 8008f34:	e791      	b.n	8008e5a <_ZN4core3fmt8builders10DebugTuple5field17ha79ab474d6fe3b39E+0xe>

08008f36 <_ZN4core3fmt8builders10DebugTuple6finish17h7478dcd5620691a7E>:
 8008f36:	b5b0      	push	{r4, r5, r7, lr}
 8008f38:	4604      	mov	r4, r0
 8008f3a:	7a05      	ldrb	r5, [r0, #8]
 8008f3c:	6840      	ldr	r0, [r0, #4]
 8008f3e:	b308      	cbz	r0, 8008f84 <_ZN4core3fmt8builders10DebugTuple6finish17h7478dcd5620691a7E+0x4e>
 8008f40:	b10d      	cbz	r5, 8008f46 <_ZN4core3fmt8builders10DebugTuple6finish17h7478dcd5620691a7E+0x10>
 8008f42:	2501      	movs	r5, #1
 8008f44:	e01d      	b.n	8008f82 <_ZN4core3fmt8builders10DebugTuple6finish17h7478dcd5620691a7E+0x4c>
 8008f46:	2801      	cmp	r0, #1
 8008f48:	d110      	bne.n	8008f6c <_ZN4core3fmt8builders10DebugTuple6finish17h7478dcd5620691a7E+0x36>
 8008f4a:	7a60      	ldrb	r0, [r4, #9]
 8008f4c:	b170      	cbz	r0, 8008f6c <_ZN4core3fmt8builders10DebugTuple6finish17h7478dcd5620691a7E+0x36>
 8008f4e:	6821      	ldr	r1, [r4, #0]
 8008f50:	7808      	ldrb	r0, [r1, #0]
 8008f52:	0740      	lsls	r0, r0, #29
 8008f54:	d40a      	bmi.n	8008f6c <_ZN4core3fmt8builders10DebugTuple6finish17h7478dcd5620691a7E+0x36>
 8008f56:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
 8008f5a:	2201      	movs	r2, #1
 8008f5c:	68cb      	ldr	r3, [r1, #12]
 8008f5e:	f646 419f 	movw	r1, #27807	; 0x6c9f
 8008f62:	f6c0 0101 	movt	r1, #2049	; 0x801
 8008f66:	2501      	movs	r5, #1
 8008f68:	4798      	blx	r3
 8008f6a:	b950      	cbnz	r0, 8008f82 <_ZN4core3fmt8builders10DebugTuple6finish17h7478dcd5620691a7E+0x4c>
 8008f6c:	6821      	ldr	r1, [r4, #0]
 8008f6e:	2201      	movs	r2, #1
 8008f70:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
 8008f74:	68cb      	ldr	r3, [r1, #12]
 8008f76:	f646 41a0 	movw	r1, #27808	; 0x6ca0
 8008f7a:	f6c0 0101 	movt	r1, #2049	; 0x801
 8008f7e:	4798      	blx	r3
 8008f80:	4605      	mov	r5, r0
 8008f82:	7225      	strb	r5, [r4, #8]
 8008f84:	2d00      	cmp	r5, #0
 8008f86:	bf18      	it	ne
 8008f88:	2501      	movne	r5, #1
 8008f8a:	4628      	mov	r0, r5
 8008f8c:	bdb0      	pop	{r4, r5, r7, pc}

08008f8e <_ZN4core3fmt5Write10write_char17h46ea92a99ad03871E>:
 8008f8e:	b580      	push	{r7, lr}
 8008f90:	b082      	sub	sp, #8
 8008f92:	2200      	movs	r2, #0
 8008f94:	297f      	cmp	r1, #127	; 0x7f
 8008f96:	9201      	str	r2, [sp, #4]
 8008f98:	d803      	bhi.n	8008fa2 <_ZN4core3fmt5Write10write_char17h46ea92a99ad03871E+0x14>
 8008f9a:	f88d 1004 	strb.w	r1, [sp, #4]
 8008f9e:	2201      	movs	r2, #1
 8008fa0:	e03b      	b.n	800901a <_ZN4core3fmt5Write10write_char17h46ea92a99ad03871E+0x8c>
 8008fa2:	ebb2 2fd1 	cmp.w	r2, r1, lsr #11
 8008fa6:	d10b      	bne.n	8008fc0 <_ZN4core3fmt5Write10write_char17h46ea92a99ad03871E+0x32>
 8008fa8:	2202      	movs	r2, #2
 8008faa:	098b      	lsrs	r3, r1, #6
 8008fac:	f362 119f 	bfi	r1, r2, #6, #26
 8008fb0:	f88d 1005 	strb.w	r1, [sp, #5]
 8008fb4:	2106      	movs	r1, #6
 8008fb6:	f361 135f 	bfi	r3, r1, #5, #27
 8008fba:	f88d 3004 	strb.w	r3, [sp, #4]
 8008fbe:	e02c      	b.n	800901a <_ZN4core3fmt5Write10write_char17h46ea92a99ad03871E+0x8c>
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	ebb2 4f11 	cmp.w	r2, r1, lsr #16
 8008fc6:	d112      	bne.n	8008fee <_ZN4core3fmt5Write10write_char17h46ea92a99ad03871E+0x60>
 8008fc8:	2202      	movs	r2, #2
 8008fca:	460b      	mov	r3, r1
 8008fcc:	f362 139f 	bfi	r3, r2, #6, #26
 8008fd0:	f88d 3006 	strb.w	r3, [sp, #6]
 8008fd4:	098b      	lsrs	r3, r1, #6
 8008fd6:	0b09      	lsrs	r1, r1, #12
 8008fd8:	f362 139f 	bfi	r3, r2, #6, #26
 8008fdc:	220e      	movs	r2, #14
 8008fde:	f362 111f 	bfi	r1, r2, #4, #28
 8008fe2:	f88d 3005 	strb.w	r3, [sp, #5]
 8008fe6:	f88d 1004 	strb.w	r1, [sp, #4]
 8008fea:	2203      	movs	r2, #3
 8008fec:	e015      	b.n	800901a <_ZN4core3fmt5Write10write_char17h46ea92a99ad03871E+0x8c>
 8008fee:	2202      	movs	r2, #2
 8008ff0:	460b      	mov	r3, r1
 8008ff2:	f362 139f 	bfi	r3, r2, #6, #26
 8008ff6:	f88d 3007 	strb.w	r3, [sp, #7]
 8008ffa:	098b      	lsrs	r3, r1, #6
 8008ffc:	f362 139f 	bfi	r3, r2, #6, #26
 8009000:	f88d 3006 	strb.w	r3, [sp, #6]
 8009004:	0b0b      	lsrs	r3, r1, #12
 8009006:	f362 139f 	bfi	r3, r2, #6, #26
 800900a:	22f0      	movs	r2, #240	; 0xf0
 800900c:	ea42 4191 	orr.w	r1, r2, r1, lsr #18
 8009010:	2204      	movs	r2, #4
 8009012:	f88d 3005 	strb.w	r3, [sp, #5]
 8009016:	f88d 1004 	strb.w	r1, [sp, #4]
 800901a:	a901      	add	r1, sp, #4
 800901c:	f7ff fe6f 	bl	8008cfe <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hb4c162eac025d3e7E>
 8009020:	b002      	add	sp, #8
 8009022:	bd80      	pop	{r7, pc}

08009024 <_ZN4core3fmt5Write9write_fmt17h1dde8e33e3292656E>:
 8009024:	b570      	push	{r4, r5, r6, lr}
 8009026:	b088      	sub	sp, #32
 8009028:	9001      	str	r0, [sp, #4]
 800902a:	aa02      	add	r2, sp, #8
 800902c:	e891 5078 	ldmia.w	r1, {r3, r4, r5, r6, ip, lr}
 8009030:	f646 41a4 	movw	r1, #27812	; 0x6ca4
 8009034:	4610      	mov	r0, r2
 8009036:	f6c0 0101 	movt	r1, #2049	; 0x801
 800903a:	e880 5078 	stmia.w	r0, {r3, r4, r5, r6, ip, lr}
 800903e:	a801      	add	r0, sp, #4
 8009040:	f000 f831 	bl	80090a6 <_ZN4core3fmt5write17hfeb861b024853061E>
 8009044:	b008      	add	sp, #32
 8009046:	bd70      	pop	{r4, r5, r6, pc}

08009048 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_str17hd3215ca6ed83c00eE>:
 8009048:	6800      	ldr	r0, [r0, #0]
 800904a:	f7ff be58 	b.w	8008cfe <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hb4c162eac025d3e7E>

0800904e <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17hc1dd88ddb83e927aE>:
 800904e:	6800      	ldr	r0, [r0, #0]
 8009050:	f7ff bf9d 	b.w	8008f8e <_ZN4core3fmt5Write10write_char17h46ea92a99ad03871E>

08009054 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_fmt17hbaabbcf1c32c6171E>:
 8009054:	b570      	push	{r4, r5, r6, lr}
 8009056:	b088      	sub	sp, #32
 8009058:	6800      	ldr	r0, [r0, #0]
 800905a:	aa02      	add	r2, sp, #8
 800905c:	9001      	str	r0, [sp, #4]
 800905e:	e891 5078 	ldmia.w	r1, {r3, r4, r5, r6, ip, lr}
 8009062:	4610      	mov	r0, r2
 8009064:	f646 41a4 	movw	r1, #27812	; 0x6ca4
 8009068:	f6c0 0101 	movt	r1, #2049	; 0x801
 800906c:	e880 5078 	stmia.w	r0, {r3, r4, r5, r6, ip, lr}
 8009070:	a801      	add	r0, sp, #4
 8009072:	f000 f818 	bl	80090a6 <_ZN4core3fmt5write17hfeb861b024853061E>
 8009076:	b008      	add	sp, #32
 8009078:	bd70      	pop	{r4, r5, r6, pc}

0800907a <_ZN4core3fmt10ArgumentV110show_usize17h0a1563fc3dacf510E>:
 800907a:	6800      	ldr	r0, [r0, #0]
 800907c:	460a      	mov	r2, r1
 800907e:	2101      	movs	r1, #1
 8009080:	f001 b833 	b.w	800a0ea <_ZN4core3fmt3num3imp7fmt_u3217hd5f71347e2daefbcE>

08009084 <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..fmt..Display$GT$3fmt17hd71f50db4d05698dE>:
 8009084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009088:	b086      	sub	sp, #24
 800908a:	e9d1 c106 	ldrd	ip, r1, [r1, #24]
 800908e:	466a      	mov	r2, sp
 8009090:	e890 41f0 	ldmia.w	r0, {r4, r5, r6, r7, r8, lr}
 8009094:	4613      	mov	r3, r2
 8009096:	4660      	mov	r0, ip
 8009098:	e883 41f0 	stmia.w	r3, {r4, r5, r6, r7, r8, lr}
 800909c:	f000 f803 	bl	80090a6 <_ZN4core3fmt5write17hfeb861b024853061E>
 80090a0:	b006      	add	sp, #24
 80090a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080090a6 <_ZN4core3fmt5write17hfeb861b024853061E>:
 80090a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090aa:	b08d      	sub	sp, #52	; 0x34
 80090ac:	2303      	movs	r3, #3
 80090ae:	e9d2 5404 	ldrd	r5, r4, [r2, #16]
 80090b2:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
 80090b6:	2320      	movs	r3, #32
 80090b8:	9301      	str	r3, [sp, #4]
 80090ba:	2300      	movs	r3, #0
 80090bc:	f10d 0c18 	add.w	ip, sp, #24
 80090c0:	9300      	str	r3, [sp, #0]
 80090c2:	e9cd 540a 	strd	r5, r4, [sp, #40]	; 0x28
 80090c6:	e88c 0023 	stmia.w	ip, {r0, r1, r5}
 80090ca:	6897      	ldr	r7, [r2, #8]
 80090cc:	9304      	str	r3, [sp, #16]
 80090ce:	2f00      	cmp	r7, #0
 80090d0:	9302      	str	r3, [sp, #8]
 80090d2:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 80090d6:	9309      	str	r3, [sp, #36]	; 0x24
 80090d8:	f000 8098 	beq.w	800920c <_ZN4core3fmt5write17hfeb861b024853061E+0x166>
 80090dc:	e9d2 ba00 	ldrd	fp, sl, [r2]
 80090e0:	68d4      	ldr	r4, [r2, #12]
 80090e2:	4554      	cmp	r4, sl
 80090e4:	bf88      	it	hi
 80090e6:	4654      	movhi	r4, sl
 80090e8:	2c00      	cmp	r4, #0
 80090ea:	f000 80b4 	beq.w	8009256 <_ZN4core3fmt5write17hfeb861b024853061E+0x1b0>
 80090ee:	e9db 3200 	ldrd	r3, r2, [fp]
 80090f2:	68ce      	ldr	r6, [r1, #12]
 80090f4:	4619      	mov	r1, r3
 80090f6:	47b0      	blx	r6
 80090f8:	2800      	cmp	r0, #0
 80090fa:	f040 80b9 	bne.w	8009270 <_ZN4core3fmt5write17hfeb861b024853061E+0x1ca>
 80090fe:	f249 097b 	movw	r9, #36987	; 0x907b
 8009102:	2500      	movs	r5, #0
 8009104:	f6c0 0900 	movt	r9, #2048	; 0x800
 8009108:	46e8      	mov	r8, sp
 800910a:	68b8      	ldr	r0, [r7, #8]
 800910c:	9001      	str	r0, [sp, #4]
 800910e:	f897 0020 	ldrb.w	r0, [r7, #32]
 8009112:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
 8009116:	68f8      	ldr	r0, [r7, #12]
 8009118:	9000      	str	r0, [sp, #0]
 800911a:	69b8      	ldr	r0, [r7, #24]
 800911c:	2801      	cmp	r0, #1
 800911e:	d011      	beq.n	8009144 <_ZN4core3fmt5write17hfeb861b024853061E+0x9e>
 8009120:	2802      	cmp	r0, #2
 8009122:	d003      	beq.n	800912c <_ZN4core3fmt5write17hfeb861b024853061E+0x86>
 8009124:	2803      	cmp	r0, #3
 8009126:	d01d      	beq.n	8009164 <_ZN4core3fmt5write17hfeb861b024853061E+0xbe>
 8009128:	69f9      	ldr	r1, [r7, #28]
 800912a:	e019      	b.n	8009160 <_ZN4core3fmt5write17hfeb861b024853061E+0xba>
 800912c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009130:	4288      	cmp	r0, r1
 8009132:	d017      	beq.n	8009164 <_ZN4core3fmt5write17hfeb861b024853061E+0xbe>
 8009134:	f100 0108 	add.w	r1, r0, #8
 8009138:	9108      	str	r1, [sp, #32]
 800913a:	6841      	ldr	r1, [r0, #4]
 800913c:	4549      	cmp	r1, r9
 800913e:	d111      	bne.n	8009164 <_ZN4core3fmt5write17hfeb861b024853061E+0xbe>
 8009140:	6800      	ldr	r0, [r0, #0]
 8009142:	e00c      	b.n	800915e <_ZN4core3fmt5write17hfeb861b024853061E+0xb8>
 8009144:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009146:	69f9      	ldr	r1, [r7, #28]
 8009148:	4291      	cmp	r1, r2
 800914a:	f080 8099 	bcs.w	8009280 <_ZN4core3fmt5write17hfeb861b024853061E+0x1da>
 800914e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009150:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 8009154:	6852      	ldr	r2, [r2, #4]
 8009156:	454a      	cmp	r2, r9
 8009158:	d104      	bne.n	8009164 <_ZN4core3fmt5write17hfeb861b024853061E+0xbe>
 800915a:	f850 0031 	ldr.w	r0, [r0, r1, lsl #3]
 800915e:	6801      	ldr	r1, [r0, #0]
 8009160:	2001      	movs	r0, #1
 8009162:	e000      	b.n	8009166 <_ZN4core3fmt5write17hfeb861b024853061E+0xc0>
 8009164:	2000      	movs	r0, #0
 8009166:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800916a:	6938      	ldr	r0, [r7, #16]
 800916c:	2801      	cmp	r0, #1
 800916e:	d011      	beq.n	8009194 <_ZN4core3fmt5write17hfeb861b024853061E+0xee>
 8009170:	2802      	cmp	r0, #2
 8009172:	d003      	beq.n	800917c <_ZN4core3fmt5write17hfeb861b024853061E+0xd6>
 8009174:	2803      	cmp	r0, #3
 8009176:	d01c      	beq.n	80091b2 <_ZN4core3fmt5write17hfeb861b024853061E+0x10c>
 8009178:	6979      	ldr	r1, [r7, #20]
 800917a:	e018      	b.n	80091ae <_ZN4core3fmt5write17hfeb861b024853061E+0x108>
 800917c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009180:	4288      	cmp	r0, r1
 8009182:	d016      	beq.n	80091b2 <_ZN4core3fmt5write17hfeb861b024853061E+0x10c>
 8009184:	f100 0108 	add.w	r1, r0, #8
 8009188:	9108      	str	r1, [sp, #32]
 800918a:	6841      	ldr	r1, [r0, #4]
 800918c:	4549      	cmp	r1, r9
 800918e:	d110      	bne.n	80091b2 <_ZN4core3fmt5write17hfeb861b024853061E+0x10c>
 8009190:	6800      	ldr	r0, [r0, #0]
 8009192:	e00b      	b.n	80091ac <_ZN4core3fmt5write17hfeb861b024853061E+0x106>
 8009194:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009196:	6979      	ldr	r1, [r7, #20]
 8009198:	4291      	cmp	r1, r2
 800919a:	d271      	bcs.n	8009280 <_ZN4core3fmt5write17hfeb861b024853061E+0x1da>
 800919c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800919e:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 80091a2:	6852      	ldr	r2, [r2, #4]
 80091a4:	454a      	cmp	r2, r9
 80091a6:	d104      	bne.n	80091b2 <_ZN4core3fmt5write17hfeb861b024853061E+0x10c>
 80091a8:	f850 0031 	ldr.w	r0, [r0, r1, lsl #3]
 80091ac:	6801      	ldr	r1, [r0, #0]
 80091ae:	2001      	movs	r0, #1
 80091b0:	e000      	b.n	80091b4 <_ZN4core3fmt5write17hfeb861b024853061E+0x10e>
 80091b2:	2000      	movs	r0, #0
 80091b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80091b8:	6838      	ldr	r0, [r7, #0]
 80091ba:	2801      	cmp	r0, #1
 80091bc:	d107      	bne.n	80091ce <_ZN4core3fmt5write17hfeb861b024853061E+0x128>
 80091be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80091c0:	6879      	ldr	r1, [r7, #4]
 80091c2:	4291      	cmp	r1, r2
 80091c4:	d263      	bcs.n	800928e <_ZN4core3fmt5write17hfeb861b024853061E+0x1e8>
 80091c6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80091c8:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 80091cc:	e006      	b.n	80091dc <_ZN4core3fmt5write17hfeb861b024853061E+0x136>
 80091ce:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80091d2:	4288      	cmp	r0, r1
 80091d4:	d062      	beq.n	800929c <_ZN4core3fmt5write17hfeb861b024853061E+0x1f6>
 80091d6:	f100 0108 	add.w	r1, r0, #8
 80091da:	9108      	str	r1, [sp, #32]
 80091dc:	1d01      	adds	r1, r0, #4
 80091de:	6800      	ldr	r0, [r0, #0]
 80091e0:	680a      	ldr	r2, [r1, #0]
 80091e2:	4641      	mov	r1, r8
 80091e4:	4790      	blx	r2
 80091e6:	2800      	cmp	r0, #0
 80091e8:	d142      	bne.n	8009270 <_ZN4core3fmt5write17hfeb861b024853061E+0x1ca>
 80091ea:	1c6e      	adds	r6, r5, #1
 80091ec:	42a6      	cmp	r6, r4
 80091ee:	d233      	bcs.n	8009258 <_ZN4core3fmt5write17hfeb861b024853061E+0x1b2>
 80091f0:	e9dd 0306 	ldrd	r0, r3, [sp, #24]
 80091f4:	eb0b 02c5 	add.w	r2, fp, r5, lsl #3
 80091f8:	e9d2 1202 	ldrd	r1, r2, [r2, #8]
 80091fc:	68db      	ldr	r3, [r3, #12]
 80091fe:	4798      	blx	r3
 8009200:	3724      	adds	r7, #36	; 0x24
 8009202:	2800      	cmp	r0, #0
 8009204:	4635      	mov	r5, r6
 8009206:	f43f af80 	beq.w	800910a <_ZN4core3fmt5write17hfeb861b024853061E+0x64>
 800920a:	e031      	b.n	8009270 <_ZN4core3fmt5write17hfeb861b024853061E+0x1ca>
 800920c:	e9d2 ba00 	ldrd	fp, sl, [r2]
 8009210:	4554      	cmp	r4, sl
 8009212:	bf88      	it	hi
 8009214:	4654      	movhi	r4, sl
 8009216:	b1f4      	cbz	r4, 8009256 <_ZN4core3fmt5write17hfeb861b024853061E+0x1b0>
 8009218:	e9db 3200 	ldrd	r3, r2, [fp]
 800921c:	68cf      	ldr	r7, [r1, #12]
 800921e:	4619      	mov	r1, r3
 8009220:	47b8      	blx	r7
 8009222:	bb28      	cbnz	r0, 8009270 <_ZN4core3fmt5write17hfeb861b024853061E+0x1ca>
 8009224:	2700      	movs	r7, #0
 8009226:	46e8      	mov	r8, sp
 8009228:	eb05 01c7 	add.w	r1, r5, r7, lsl #3
 800922c:	f855 0037 	ldr.w	r0, [r5, r7, lsl #3]
 8009230:	684a      	ldr	r2, [r1, #4]
 8009232:	4641      	mov	r1, r8
 8009234:	4790      	blx	r2
 8009236:	b9d8      	cbnz	r0, 8009270 <_ZN4core3fmt5write17hfeb861b024853061E+0x1ca>
 8009238:	1c7e      	adds	r6, r7, #1
 800923a:	42a6      	cmp	r6, r4
 800923c:	d20c      	bcs.n	8009258 <_ZN4core3fmt5write17hfeb861b024853061E+0x1b2>
 800923e:	e9dd 0306 	ldrd	r0, r3, [sp, #24]
 8009242:	eb0b 02c7 	add.w	r2, fp, r7, lsl #3
 8009246:	e9d2 1202 	ldrd	r1, r2, [r2, #8]
 800924a:	68db      	ldr	r3, [r3, #12]
 800924c:	4798      	blx	r3
 800924e:	2800      	cmp	r0, #0
 8009250:	4637      	mov	r7, r6
 8009252:	d0e9      	beq.n	8009228 <_ZN4core3fmt5write17hfeb861b024853061E+0x182>
 8009254:	e00c      	b.n	8009270 <_ZN4core3fmt5write17hfeb861b024853061E+0x1ca>
 8009256:	2600      	movs	r6, #0
 8009258:	45b2      	cmp	sl, r6
 800925a:	d90d      	bls.n	8009278 <_ZN4core3fmt5write17hfeb861b024853061E+0x1d2>
 800925c:	eb0b 02c6 	add.w	r2, fp, r6, lsl #3
 8009260:	e9dd 0306 	ldrd	r0, r3, [sp, #24]
 8009264:	f85b 1036 	ldr.w	r1, [fp, r6, lsl #3]
 8009268:	6852      	ldr	r2, [r2, #4]
 800926a:	68db      	ldr	r3, [r3, #12]
 800926c:	4798      	blx	r3
 800926e:	b118      	cbz	r0, 8009278 <_ZN4core3fmt5write17hfeb861b024853061E+0x1d2>
 8009270:	2001      	movs	r0, #1
 8009272:	b00d      	add	sp, #52	; 0x34
 8009274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009278:	2000      	movs	r0, #0
 800927a:	b00d      	add	sp, #52	; 0x34
 800927c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009280:	f646 40e8 	movw	r0, #27880	; 0x6ce8
 8009284:	f6c0 0001 	movt	r0, #2049	; 0x801
 8009288:	f7ff fa1e 	bl	80086c8 <_ZN4core9panicking18panic_bounds_check17h794d18f1ca9e50a8E>
 800928c:	defe      	udf	#254	; 0xfe
 800928e:	f646 40d8 	movw	r0, #27864	; 0x6cd8
 8009292:	f6c0 0001 	movt	r0, #2049	; 0x801
 8009296:	f7ff fa17 	bl	80086c8 <_ZN4core9panicking18panic_bounds_check17h794d18f1ca9e50a8E>
 800929a:	defe      	udf	#254	; 0xfe
 800929c:	f646 1030 	movw	r0, #26928	; 0x6930
 80092a0:	f6c0 0001 	movt	r0, #2049	; 0x801
 80092a4:	f7ff f9f3 	bl	800868e <_ZN4core9panicking5panic17h138a849f37d3ac2dE>
 80092a8:	defe      	udf	#254	; 0xfe

080092aa <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE>:
 80092aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092ae:	b083      	sub	sp, #12
 80092b0:	e9dd 690c 	ldrd	r6, r9, [sp, #48]	; 0x30
 80092b4:	461f      	mov	r7, r3
 80092b6:	4692      	mov	sl, r2
 80092b8:	4604      	mov	r4, r0
 80092ba:	b1c9      	cbz	r1, 80092f0 <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x46>
 80092bc:	f8d4 e000 	ldr.w	lr, [r4]
 80092c0:	f04f 082b 	mov.w	r8, #43	; 0x2b
 80092c4:	f01e 0101 	ands.w	r1, lr, #1
 80092c8:	bf08      	it	eq
 80092ca:	f44f 1888 	moveq.w	r8, #1114112	; 0x110000
 80092ce:	eb01 0b09 	add.w	fp, r1, r9
 80092d2:	ea5f 714e 	movs.w	r1, lr, lsl #29
 80092d6:	d514      	bpl.n	8009302 <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x58>
 80092d8:	b1bf      	cbz	r7, 800930a <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x60>
 80092da:	1e79      	subs	r1, r7, #1
 80092dc:	f007 0c03 	and.w	ip, r7, #3
 80092e0:	2903      	cmp	r1, #3
 80092e2:	d214      	bcs.n	800930e <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x64>
 80092e4:	2100      	movs	r1, #0
 80092e6:	4653      	mov	r3, sl
 80092e8:	f1bc 0f00 	cmp.w	ip, #0
 80092ec:	d136      	bne.n	800935c <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0xb2>
 80092ee:	e04d      	b.n	800938c <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0xe2>
 80092f0:	f8d4 e000 	ldr.w	lr, [r4]
 80092f4:	f109 0b01 	add.w	fp, r9, #1
 80092f8:	f04f 082d 	mov.w	r8, #45	; 0x2d
 80092fc:	ea5f 714e 	movs.w	r1, lr, lsl #29
 8009300:	d4ea      	bmi.n	80092d8 <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x2e>
 8009302:	2700      	movs	r7, #0
 8009304:	f04f 0a00 	mov.w	sl, #0
 8009308:	e044      	b.n	8009394 <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0xea>
 800930a:	2100      	movs	r1, #0
 800930c:	e03e      	b.n	800938c <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0xe2>
 800930e:	e9cd 9601 	strd	r9, r6, [sp, #4]
 8009312:	ebac 0607 	sub.w	r6, ip, r7
 8009316:	2100      	movs	r1, #0
 8009318:	4653      	mov	r3, sl
 800931a:	781d      	ldrb	r5, [r3, #0]
 800931c:	785a      	ldrb	r2, [r3, #1]
 800931e:	7898      	ldrb	r0, [r3, #2]
 8009320:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
 8009324:	f893 9003 	ldrb.w	r9, [r3, #3]
 8009328:	2d80      	cmp	r5, #128	; 0x80
 800932a:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 800932e:	bf08      	it	eq
 8009330:	3101      	addeq	r1, #1
 8009332:	2a80      	cmp	r2, #128	; 0x80
 8009334:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
 8009338:	bf08      	it	eq
 800933a:	3101      	addeq	r1, #1
 800933c:	2880      	cmp	r0, #128	; 0x80
 800933e:	f009 00c0 	and.w	r0, r9, #192	; 0xc0
 8009342:	bf08      	it	eq
 8009344:	3101      	addeq	r1, #1
 8009346:	2880      	cmp	r0, #128	; 0x80
 8009348:	bf08      	it	eq
 800934a:	3101      	addeq	r1, #1
 800934c:	3304      	adds	r3, #4
 800934e:	3604      	adds	r6, #4
 8009350:	d1e3      	bne.n	800931a <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x70>
 8009352:	e9dd 9601 	ldrd	r9, r6, [sp, #4]
 8009356:	f1bc 0f00 	cmp.w	ip, #0
 800935a:	d017      	beq.n	800938c <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0xe2>
 800935c:	7818      	ldrb	r0, [r3, #0]
 800935e:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
 8009362:	2880      	cmp	r0, #128	; 0x80
 8009364:	bf08      	it	eq
 8009366:	3101      	addeq	r1, #1
 8009368:	f1bc 0f01 	cmp.w	ip, #1
 800936c:	d00e      	beq.n	800938c <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0xe2>
 800936e:	7858      	ldrb	r0, [r3, #1]
 8009370:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
 8009374:	2880      	cmp	r0, #128	; 0x80
 8009376:	bf08      	it	eq
 8009378:	3101      	addeq	r1, #1
 800937a:	f1bc 0f02 	cmp.w	ip, #2
 800937e:	d005      	beq.n	800938c <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0xe2>
 8009380:	7898      	ldrb	r0, [r3, #2]
 8009382:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
 8009386:	2880      	cmp	r0, #128	; 0x80
 8009388:	bf08      	it	eq
 800938a:	3101      	addeq	r1, #1
 800938c:	eb0b 0007 	add.w	r0, fp, r7
 8009390:	eba0 0b01 	sub.w	fp, r0, r1
 8009394:	68a0      	ldr	r0, [r4, #8]
 8009396:	2801      	cmp	r0, #1
 8009398:	d115      	bne.n	80093c6 <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x11c>
 800939a:	68e5      	ldr	r5, [r4, #12]
 800939c:	455d      	cmp	r5, fp
 800939e:	d912      	bls.n	80093c6 <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x11c>
 80093a0:	ea5f 700e 	movs.w	r0, lr, lsl #28
 80093a4:	9602      	str	r6, [sp, #8]
 80093a6:	d423      	bmi.n	80093f0 <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x146>
 80093a8:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 80093ac:	eba5 000b 	sub.w	r0, r5, fp
 80093b0:	2903      	cmp	r1, #3
 80093b2:	bf08      	it	eq
 80093b4:	2101      	moveq	r1, #1
 80093b6:	078a      	lsls	r2, r1, #30
 80093b8:	d036      	beq.n	8009428 <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x17e>
 80093ba:	2902      	cmp	r1, #2
 80093bc:	d036      	beq.n	800942c <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x182>
 80093be:	2100      	movs	r1, #0
 80093c0:	4605      	mov	r5, r0
 80093c2:	9101      	str	r1, [sp, #4]
 80093c4:	e036      	b.n	8009434 <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x18a>
 80093c6:	4620      	mov	r0, r4
 80093c8:	4641      	mov	r1, r8
 80093ca:	4652      	mov	r2, sl
 80093cc:	463b      	mov	r3, r7
 80093ce:	f000 f890 	bl	80094f2 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h02b1b799aa412d57E>
 80093d2:	b120      	cbz	r0, 80093de <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x134>
 80093d4:	2601      	movs	r6, #1
 80093d6:	4630      	mov	r0, r6
 80093d8:	b003      	add	sp, #12
 80093da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093de:	69e1      	ldr	r1, [r4, #28]
 80093e0:	464a      	mov	r2, r9
 80093e2:	69a0      	ldr	r0, [r4, #24]
 80093e4:	68cb      	ldr	r3, [r1, #12]
 80093e6:	4631      	mov	r1, r6
 80093e8:	b003      	add	sp, #12
 80093ea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093ee:	4718      	bx	r3
 80093f0:	2601      	movs	r6, #1
 80093f2:	2030      	movs	r0, #48	; 0x30
 80093f4:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
 80093f8:	4641      	mov	r1, r8
 80093fa:	6060      	str	r0, [r4, #4]
 80093fc:	4620      	mov	r0, r4
 80093fe:	4652      	mov	r2, sl
 8009400:	463b      	mov	r3, r7
 8009402:	f000 f876 	bl	80094f2 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h02b1b799aa412d57E>
 8009406:	2800      	cmp	r0, #0
 8009408:	d1e5      	bne.n	80093d6 <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x12c>
 800940a:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 800940e:	eba5 000b 	sub.w	r0, r5, fp
 8009412:	2903      	cmp	r1, #3
 8009414:	bf08      	it	eq
 8009416:	2101      	moveq	r1, #1
 8009418:	078a      	lsls	r2, r1, #30
 800941a:	d03a      	beq.n	8009492 <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x1e8>
 800941c:	2902      	cmp	r1, #2
 800941e:	d03b      	beq.n	8009498 <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x1ee>
 8009420:	f04f 0800 	mov.w	r8, #0
 8009424:	4605      	mov	r5, r0
 8009426:	e03b      	b.n	80094a0 <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x1f6>
 8009428:	2500      	movs	r5, #0
 800942a:	e002      	b.n	8009432 <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x188>
 800942c:	0845      	lsrs	r5, r0, #1
 800942e:	3001      	adds	r0, #1
 8009430:	0840      	lsrs	r0, r0, #1
 8009432:	9001      	str	r0, [sp, #4]
 8009434:	f04f 36ff 	mov.w	r6, #4294967295
 8009438:	3601      	adds	r6, #1
 800943a:	42ae      	cmp	r6, r5
 800943c:	d207      	bcs.n	800944e <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x1a4>
 800943e:	6861      	ldr	r1, [r4, #4]
 8009440:	e9d4 0206 	ldrd	r0, r2, [r4, #24]
 8009444:	6912      	ldr	r2, [r2, #16]
 8009446:	4790      	blx	r2
 8009448:	2800      	cmp	r0, #0
 800944a:	d0f5      	beq.n	8009438 <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x18e>
 800944c:	e7c2      	b.n	80093d4 <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x12a>
 800944e:	4620      	mov	r0, r4
 8009450:	4641      	mov	r1, r8
 8009452:	4652      	mov	r2, sl
 8009454:	463b      	mov	r3, r7
 8009456:	f8d4 b004 	ldr.w	fp, [r4, #4]
 800945a:	f000 f84a 	bl	80094f2 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h02b1b799aa412d57E>
 800945e:	2800      	cmp	r0, #0
 8009460:	d1b8      	bne.n	80093d4 <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x12a>
 8009462:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
 8009466:	464a      	mov	r2, r9
 8009468:	68cb      	ldr	r3, [r1, #12]
 800946a:	9902      	ldr	r1, [sp, #8]
 800946c:	4798      	blx	r3
 800946e:	2800      	cmp	r0, #0
 8009470:	d1b0      	bne.n	80093d4 <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x12a>
 8009472:	e9d4 8406 	ldrd	r8, r4, [r4, #24]
 8009476:	f04f 37ff 	mov.w	r7, #4294967295
 800947a:	9d01      	ldr	r5, [sp, #4]
 800947c:	2601      	movs	r6, #1
 800947e:	3701      	adds	r7, #1
 8009480:	42af      	cmp	r7, r5
 8009482:	d234      	bcs.n	80094ee <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x244>
 8009484:	6922      	ldr	r2, [r4, #16]
 8009486:	4640      	mov	r0, r8
 8009488:	4659      	mov	r1, fp
 800948a:	4790      	blx	r2
 800948c:	2800      	cmp	r0, #0
 800948e:	d0f6      	beq.n	800947e <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x1d4>
 8009490:	e7a1      	b.n	80093d6 <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x12c>
 8009492:	2500      	movs	r5, #0
 8009494:	4680      	mov	r8, r0
 8009496:	e003      	b.n	80094a0 <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x1f6>
 8009498:	0845      	lsrs	r5, r0, #1
 800949a:	3001      	adds	r0, #1
 800949c:	ea4f 0850 	mov.w	r8, r0, lsr #1
 80094a0:	f04f 36ff 	mov.w	r6, #4294967295
 80094a4:	3601      	adds	r6, #1
 80094a6:	42ae      	cmp	r6, r5
 80094a8:	d207      	bcs.n	80094ba <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x210>
 80094aa:	6861      	ldr	r1, [r4, #4]
 80094ac:	e9d4 0206 	ldrd	r0, r2, [r4, #24]
 80094b0:	6912      	ldr	r2, [r2, #16]
 80094b2:	4790      	blx	r2
 80094b4:	2800      	cmp	r0, #0
 80094b6:	d0f5      	beq.n	80094a4 <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x1fa>
 80094b8:	e78c      	b.n	80093d4 <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x12a>
 80094ba:	f8d4 a004 	ldr.w	sl, [r4, #4]
 80094be:	464a      	mov	r2, r9
 80094c0:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
 80094c4:	68cb      	ldr	r3, [r1, #12]
 80094c6:	9902      	ldr	r1, [sp, #8]
 80094c8:	4798      	blx	r3
 80094ca:	2800      	cmp	r0, #0
 80094cc:	f47f af82 	bne.w	80093d4 <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x12a>
 80094d0:	e9d4 7406 	ldrd	r7, r4, [r4, #24]
 80094d4:	f04f 35ff 	mov.w	r5, #4294967295
 80094d8:	2601      	movs	r6, #1
 80094da:	3501      	adds	r5, #1
 80094dc:	4545      	cmp	r5, r8
 80094de:	d206      	bcs.n	80094ee <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x244>
 80094e0:	6922      	ldr	r2, [r4, #16]
 80094e2:	4638      	mov	r0, r7
 80094e4:	4651      	mov	r1, sl
 80094e6:	4790      	blx	r2
 80094e8:	2800      	cmp	r0, #0
 80094ea:	d0f6      	beq.n	80094da <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x230>
 80094ec:	e773      	b.n	80093d6 <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x12c>
 80094ee:	2600      	movs	r6, #0
 80094f0:	e771      	b.n	80093d6 <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x12c>

080094f2 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h02b1b799aa412d57E>:
 80094f2:	b570      	push	{r4, r5, r6, lr}
 80094f4:	461c      	mov	r4, r3
 80094f6:	4615      	mov	r5, r2
 80094f8:	4606      	mov	r6, r0
 80094fa:	f5b1 1f88 	cmp.w	r1, #1114112	; 0x110000
 80094fe:	d006      	beq.n	800950e <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h02b1b799aa412d57E+0x1c>
 8009500:	e9d6 0206 	ldrd	r0, r2, [r6, #24]
 8009504:	6912      	ldr	r2, [r2, #16]
 8009506:	4790      	blx	r2
 8009508:	b108      	cbz	r0, 800950e <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h02b1b799aa412d57E+0x1c>
 800950a:	2001      	movs	r0, #1
 800950c:	bd70      	pop	{r4, r5, r6, pc}
 800950e:	b13d      	cbz	r5, 8009520 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h02b1b799aa412d57E+0x2e>
 8009510:	e9d6 0106 	ldrd	r0, r1, [r6, #24]
 8009514:	4622      	mov	r2, r4
 8009516:	68cb      	ldr	r3, [r1, #12]
 8009518:	4629      	mov	r1, r5
 800951a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800951e:	4718      	bx	r3
 8009520:	2000      	movs	r0, #0
 8009522:	bd70      	pop	{r4, r5, r6, pc}

08009524 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E>:
 8009524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009528:	b081      	sub	sp, #4
 800952a:	f8d0 e008 	ldr.w	lr, [r0, #8]
 800952e:	4682      	mov	sl, r0
 8009530:	6900      	ldr	r0, [r0, #16]
 8009532:	4691      	mov	r9, r2
 8009534:	4688      	mov	r8, r1
 8009536:	f1be 0f01 	cmp.w	lr, #1
 800953a:	d10f      	bne.n	800955c <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x38>
 800953c:	b988      	cbnz	r0, 8009562 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x3e>
 800953e:	f1b9 0f00 	cmp.w	r9, #0
 8009542:	f000 80a9 	beq.w	8009698 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x174>
 8009546:	f1a9 0101 	sub.w	r1, r9, #1
 800954a:	f009 0003 	and.w	r0, r9, #3
 800954e:	2903      	cmp	r1, #3
 8009550:	d25f      	bcs.n	8009612 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0xee>
 8009552:	2100      	movs	r1, #0
 8009554:	4642      	mov	r2, r8
 8009556:	2800      	cmp	r0, #0
 8009558:	d17b      	bne.n	8009652 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x12e>
 800955a:	e09e      	b.n	800969a <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x176>
 800955c:	2800      	cmp	r0, #0
 800955e:	f000 80b1 	beq.w	80096c4 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x1a0>
 8009562:	f1b9 0f00 	cmp.w	r9, #0
 8009566:	d04d      	beq.n	8009604 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0xe0>
 8009568:	f8da 0014 	ldr.w	r0, [sl, #20]
 800956c:	eb08 0109 	add.w	r1, r8, r9
 8009570:	2200      	movs	r2, #0
 8009572:	4644      	mov	r4, r8
 8009574:	4647      	mov	r7, r8
 8009576:	43c3      	mvns	r3, r0
 8009578:	4626      	mov	r6, r4
 800957a:	f916 5b01 	ldrsb.w	r5, [r6], #1
 800957e:	2d00      	cmp	r5, #0
 8009580:	b2e8      	uxtb	r0, r5
 8009582:	da28      	bge.n	80095d6 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0xb2>
 8009584:	428e      	cmp	r6, r1
 8009586:	d005      	beq.n	8009594 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x70>
 8009588:	7865      	ldrb	r5, [r4, #1]
 800958a:	1ca6      	adds	r6, r4, #2
 800958c:	f005 053f 	and.w	r5, r5, #63	; 0x3f
 8009590:	4634      	mov	r4, r6
 8009592:	e001      	b.n	8009598 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x74>
 8009594:	2500      	movs	r5, #0
 8009596:	460c      	mov	r4, r1
 8009598:	f000 0b1f 	and.w	fp, r0, #31
 800959c:	28e0      	cmp	r0, #224	; 0xe0
 800959e:	d307      	bcc.n	80095b0 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x8c>
 80095a0:	428c      	cmp	r4, r1
 80095a2:	d008      	beq.n	80095b6 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x92>
 80095a4:	f814 6b01 	ldrb.w	r6, [r4], #1
 80095a8:	f006 0c3f 	and.w	ip, r6, #63	; 0x3f
 80095ac:	4626      	mov	r6, r4
 80095ae:	e005      	b.n	80095bc <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x98>
 80095b0:	ea45 108b 	orr.w	r0, r5, fp, lsl #6
 80095b4:	e00f      	b.n	80095d6 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0xb2>
 80095b6:	f04f 0c00 	mov.w	ip, #0
 80095ba:	460c      	mov	r4, r1
 80095bc:	ea4c 1585 	orr.w	r5, ip, r5, lsl #6
 80095c0:	28f0      	cmp	r0, #240	; 0xf0
 80095c2:	d306      	bcc.n	80095d2 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0xae>
 80095c4:	428c      	cmp	r4, r1
 80095c6:	d010      	beq.n	80095ea <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0xc6>
 80095c8:	f814 0b01 	ldrb.w	r0, [r4], #1
 80095cc:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 80095d0:	e00d      	b.n	80095ee <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0xca>
 80095d2:	ea45 300b 	orr.w	r0, r5, fp, lsl #12
 80095d6:	4634      	mov	r4, r6
 80095d8:	3301      	adds	r3, #1
 80095da:	d051      	beq.n	8009680 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x15c>
 80095dc:	1bd0      	subs	r0, r2, r7
 80095de:	42a1      	cmp	r1, r4
 80095e0:	eb00 0204 	add.w	r2, r0, r4
 80095e4:	4627      	mov	r7, r4
 80095e6:	d1c7      	bne.n	8009578 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x54>
 80095e8:	e04d      	b.n	8009686 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x162>
 80095ea:	2000      	movs	r0, #0
 80095ec:	4634      	mov	r4, r6
 80095ee:	f44f 16e0 	mov.w	r6, #1835008	; 0x1c0000
 80095f2:	ea06 468b 	and.w	r6, r6, fp, lsl #18
 80095f6:	ea46 1685 	orr.w	r6, r6, r5, lsl #6
 80095fa:	4430      	add	r0, r6
 80095fc:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
 8009600:	d1ea      	bne.n	80095d8 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0xb4>
 8009602:	e040      	b.n	8009686 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x162>
 8009604:	2200      	movs	r2, #0
 8009606:	f1be 0f00 	cmp.w	lr, #0
 800960a:	d140      	bne.n	800968e <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x16a>
 800960c:	e9da 0106 	ldrd	r0, r1, [sl, #24]
 8009610:	e05d      	b.n	80096ce <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x1aa>
 8009612:	eba0 0309 	sub.w	r3, r0, r9
 8009616:	2100      	movs	r1, #0
 8009618:	4642      	mov	r2, r8
 800961a:	7817      	ldrb	r7, [r2, #0]
 800961c:	7856      	ldrb	r6, [r2, #1]
 800961e:	f007 07c0 	and.w	r7, r7, #192	; 0xc0
 8009622:	7895      	ldrb	r5, [r2, #2]
 8009624:	78d4      	ldrb	r4, [r2, #3]
 8009626:	2f80      	cmp	r7, #128	; 0x80
 8009628:	f006 07c0 	and.w	r7, r6, #192	; 0xc0
 800962c:	bf08      	it	eq
 800962e:	3101      	addeq	r1, #1
 8009630:	2f80      	cmp	r7, #128	; 0x80
 8009632:	f005 07c0 	and.w	r7, r5, #192	; 0xc0
 8009636:	bf08      	it	eq
 8009638:	3101      	addeq	r1, #1
 800963a:	2f80      	cmp	r7, #128	; 0x80
 800963c:	f004 07c0 	and.w	r7, r4, #192	; 0xc0
 8009640:	bf08      	it	eq
 8009642:	3101      	addeq	r1, #1
 8009644:	2f80      	cmp	r7, #128	; 0x80
 8009646:	bf08      	it	eq
 8009648:	3101      	addeq	r1, #1
 800964a:	3204      	adds	r2, #4
 800964c:	3304      	adds	r3, #4
 800964e:	d1e4      	bne.n	800961a <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0xf6>
 8009650:	b318      	cbz	r0, 800969a <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x176>
 8009652:	7813      	ldrb	r3, [r2, #0]
 8009654:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009658:	2b80      	cmp	r3, #128	; 0x80
 800965a:	bf08      	it	eq
 800965c:	3101      	addeq	r1, #1
 800965e:	2801      	cmp	r0, #1
 8009660:	d01b      	beq.n	800969a <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x176>
 8009662:	7853      	ldrb	r3, [r2, #1]
 8009664:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009668:	2b80      	cmp	r3, #128	; 0x80
 800966a:	bf08      	it	eq
 800966c:	3101      	addeq	r1, #1
 800966e:	2802      	cmp	r0, #2
 8009670:	d013      	beq.n	800969a <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x176>
 8009672:	7890      	ldrb	r0, [r2, #2]
 8009674:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
 8009678:	2880      	cmp	r0, #128	; 0x80
 800967a:	bf08      	it	eq
 800967c:	3101      	addeq	r1, #1
 800967e:	e00c      	b.n	800969a <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x176>
 8009680:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
 8009684:	d175      	bne.n	8009772 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x24e>
 8009686:	464a      	mov	r2, r9
 8009688:	f1be 0f00 	cmp.w	lr, #0
 800968c:	d0be      	beq.n	800960c <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0xe8>
 800968e:	4691      	mov	r9, r2
 8009690:	f1b9 0f00 	cmp.w	r9, #0
 8009694:	f47f af57 	bne.w	8009546 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x22>
 8009698:	2100      	movs	r1, #0
 800969a:	f8da 000c 	ldr.w	r0, [sl, #12]
 800969e:	eba9 0101 	sub.w	r1, r9, r1
 80096a2:	4281      	cmp	r1, r0
 80096a4:	d20e      	bcs.n	80096c4 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x1a0>
 80096a6:	f1b9 0f00 	cmp.w	r9, #0
 80096aa:	d016      	beq.n	80096da <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x1b6>
 80096ac:	f1a9 0101 	sub.w	r1, r9, #1
 80096b0:	f009 0c03 	and.w	ip, r9, #3
 80096b4:	2903      	cmp	r1, #3
 80096b6:	d212      	bcs.n	80096de <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x1ba>
 80096b8:	2100      	movs	r1, #0
 80096ba:	4643      	mov	r3, r8
 80096bc:	f1bc 0f00 	cmp.w	ip, #0
 80096c0:	d12f      	bne.n	8009722 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x1fe>
 80096c2:	e046      	b.n	8009752 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x22e>
 80096c4:	f8da 101c 	ldr.w	r1, [sl, #28]
 80096c8:	464a      	mov	r2, r9
 80096ca:	f8da 0018 	ldr.w	r0, [sl, #24]
 80096ce:	68cb      	ldr	r3, [r1, #12]
 80096d0:	4641      	mov	r1, r8
 80096d2:	b001      	add	sp, #4
 80096d4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096d8:	4718      	bx	r3
 80096da:	2100      	movs	r1, #0
 80096dc:	e039      	b.n	8009752 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x22e>
 80096de:	ebac 0709 	sub.w	r7, ip, r9
 80096e2:	2100      	movs	r1, #0
 80096e4:	4643      	mov	r3, r8
 80096e6:	781e      	ldrb	r6, [r3, #0]
 80096e8:	785d      	ldrb	r5, [r3, #1]
 80096ea:	f006 06c0 	and.w	r6, r6, #192	; 0xc0
 80096ee:	789c      	ldrb	r4, [r3, #2]
 80096f0:	78da      	ldrb	r2, [r3, #3]
 80096f2:	2e80      	cmp	r6, #128	; 0x80
 80096f4:	f005 06c0 	and.w	r6, r5, #192	; 0xc0
 80096f8:	bf08      	it	eq
 80096fa:	3101      	addeq	r1, #1
 80096fc:	2e80      	cmp	r6, #128	; 0x80
 80096fe:	f004 06c0 	and.w	r6, r4, #192	; 0xc0
 8009702:	bf08      	it	eq
 8009704:	3101      	addeq	r1, #1
 8009706:	2e80      	cmp	r6, #128	; 0x80
 8009708:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 800970c:	bf08      	it	eq
 800970e:	3101      	addeq	r1, #1
 8009710:	2a80      	cmp	r2, #128	; 0x80
 8009712:	bf08      	it	eq
 8009714:	3101      	addeq	r1, #1
 8009716:	3304      	adds	r3, #4
 8009718:	3704      	adds	r7, #4
 800971a:	d1e4      	bne.n	80096e6 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x1c2>
 800971c:	f1bc 0f00 	cmp.w	ip, #0
 8009720:	d017      	beq.n	8009752 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x22e>
 8009722:	781a      	ldrb	r2, [r3, #0]
 8009724:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8009728:	2a80      	cmp	r2, #128	; 0x80
 800972a:	bf08      	it	eq
 800972c:	3101      	addeq	r1, #1
 800972e:	f1bc 0f01 	cmp.w	ip, #1
 8009732:	d00e      	beq.n	8009752 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x22e>
 8009734:	785a      	ldrb	r2, [r3, #1]
 8009736:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 800973a:	2a80      	cmp	r2, #128	; 0x80
 800973c:	bf08      	it	eq
 800973e:	3101      	addeq	r1, #1
 8009740:	f1bc 0f02 	cmp.w	ip, #2
 8009744:	d005      	beq.n	8009752 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x22e>
 8009746:	789a      	ldrb	r2, [r3, #2]
 8009748:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 800974c:	2a80      	cmp	r2, #128	; 0x80
 800974e:	bf08      	it	eq
 8009750:	3101      	addeq	r1, #1
 8009752:	f89a 3030 	ldrb.w	r3, [sl, #48]	; 0x30
 8009756:	eba1 0109 	sub.w	r1, r1, r9
 800975a:	4408      	add	r0, r1
 800975c:	1eda      	subs	r2, r3, #3
 800975e:	bf18      	it	ne
 8009760:	461a      	movne	r2, r3
 8009762:	0793      	lsls	r3, r2, #30
 8009764:	d00b      	beq.n	800977e <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x25a>
 8009766:	2a02      	cmp	r2, #2
 8009768:	d00c      	beq.n	8009784 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x260>
 800976a:	f04f 0b00 	mov.w	fp, #0
 800976e:	4604      	mov	r4, r0
 8009770:	e00c      	b.n	800978c <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x268>
 8009772:	2a00      	cmp	r2, #0
 8009774:	bf18      	it	ne
 8009776:	454a      	cmpne	r2, r9
 8009778:	d134      	bne.n	80097e4 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x2c0>
 800977a:	4640      	mov	r0, r8
 800977c:	e03b      	b.n	80097f6 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x2d2>
 800977e:	2400      	movs	r4, #0
 8009780:	4683      	mov	fp, r0
 8009782:	e003      	b.n	800978c <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x268>
 8009784:	0844      	lsrs	r4, r0, #1
 8009786:	3001      	adds	r0, #1
 8009788:	ea4f 0b50 	mov.w	fp, r0, lsr #1
 800978c:	f04f 35ff 	mov.w	r5, #4294967295
 8009790:	3501      	adds	r5, #1
 8009792:	42a5      	cmp	r5, r4
 8009794:	d208      	bcs.n	80097a8 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x284>
 8009796:	f8da 1004 	ldr.w	r1, [sl, #4]
 800979a:	e9da 0206 	ldrd	r0, r2, [sl, #24]
 800979e:	6912      	ldr	r2, [r2, #16]
 80097a0:	4790      	blx	r2
 80097a2:	2800      	cmp	r0, #0
 80097a4:	d0f4      	beq.n	8009790 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x26c>
 80097a6:	e015      	b.n	80097d4 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x2b0>
 80097a8:	f8da 7004 	ldr.w	r7, [sl, #4]
 80097ac:	464a      	mov	r2, r9
 80097ae:	e9da 0106 	ldrd	r0, r1, [sl, #24]
 80097b2:	68cb      	ldr	r3, [r1, #12]
 80097b4:	4641      	mov	r1, r8
 80097b6:	4798      	blx	r3
 80097b8:	b960      	cbnz	r0, 80097d4 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x2b0>
 80097ba:	e9da 4506 	ldrd	r4, r5, [sl, #24]
 80097be:	f04f 36ff 	mov.w	r6, #4294967295
 80097c2:	3601      	adds	r6, #1
 80097c4:	455e      	cmp	r6, fp
 80097c6:	d209      	bcs.n	80097dc <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x2b8>
 80097c8:	692a      	ldr	r2, [r5, #16]
 80097ca:	4620      	mov	r0, r4
 80097cc:	4639      	mov	r1, r7
 80097ce:	4790      	blx	r2
 80097d0:	2800      	cmp	r0, #0
 80097d2:	d0f6      	beq.n	80097c2 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x29e>
 80097d4:	2001      	movs	r0, #1
 80097d6:	b001      	add	sp, #4
 80097d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097dc:	2000      	movs	r0, #0
 80097de:	b001      	add	sp, #4
 80097e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097e4:	454a      	cmp	r2, r9
 80097e6:	d204      	bcs.n	80097f2 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x2ce>
 80097e8:	f918 0002 	ldrsb.w	r0, [r8, r2]
 80097ec:	f110 0f40 	cmn.w	r0, #64	; 0x40
 80097f0:	dac3      	bge.n	800977a <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x256>
 80097f2:	2200      	movs	r2, #0
 80097f4:	2000      	movs	r0, #0
 80097f6:	2800      	cmp	r0, #0
 80097f8:	bf0c      	ite	eq
 80097fa:	464a      	moveq	r2, r9
 80097fc:	4680      	movne	r8, r0
 80097fe:	f1be 0f00 	cmp.w	lr, #0
 8009802:	f47f af44 	bne.w	800968e <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x16a>
 8009806:	e701      	b.n	800960c <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0xe8>

08009808 <_ZN4core3fmt9Formatter15debug_lower_hex17h28b672d23c16e15aE>:
 8009808:	7800      	ldrb	r0, [r0, #0]
 800980a:	f3c0 1000 	ubfx	r0, r0, #4, #1
 800980e:	4770      	bx	lr

08009810 <_ZN4core3fmt9Formatter15debug_upper_hex17h4ab9339a84cb4dceE>:
 8009810:	7800      	ldrb	r0, [r0, #0]
 8009812:	f3c0 1040 	ubfx	r0, r0, #5, #1
 8009816:	4770      	bx	lr

08009818 <_ZN4core3fmt9Formatter11debug_tuple17hb44f73c94ff26e9bE>:
 8009818:	b570      	push	{r4, r5, r6, lr}
 800981a:	460d      	mov	r5, r1
 800981c:	4606      	mov	r6, r0
 800981e:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
 8009822:	461c      	mov	r4, r3
 8009824:	68cb      	ldr	r3, [r1, #12]
 8009826:	4611      	mov	r1, r2
 8009828:	4622      	mov	r2, r4
 800982a:	4798      	blx	r3
 800982c:	7230      	strb	r0, [r6, #8]
 800982e:	fab4 f084 	clz	r0, r4
 8009832:	0940      	lsrs	r0, r0, #5
 8009834:	7270      	strb	r0, [r6, #9]
 8009836:	2000      	movs	r0, #0
 8009838:	e9c6 5000 	strd	r5, r0, [r6]
 800983c:	bd70      	pop	{r4, r5, r6, pc}

0800983e <_ZN42_$LT$str$u20$as$u20$core..fmt..Display$GT$3fmt17h8845cd1bde16499dE>:
 800983e:	460b      	mov	r3, r1
 8009840:	4601      	mov	r1, r0
 8009842:	4610      	mov	r0, r2
 8009844:	461a      	mov	r2, r3
 8009846:	f7ff be6d 	b.w	8009524 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E>
	...

0800984c <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd139048c13a0f464E>:
 800984c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009850:	b085      	sub	sp, #20
 8009852:	460c      	mov	r4, r1
 8009854:	4605      	mov	r5, r0
 8009856:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
 800985a:	690a      	ldr	r2, [r1, #16]
 800985c:	2127      	movs	r1, #39	; 0x27
 800985e:	4790      	blx	r2
 8009860:	b118      	cbz	r0, 800986a <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd139048c13a0f464E+0x1e>
 8009862:	2001      	movs	r0, #1
 8009864:	b005      	add	sp, #20
 8009866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800986a:	682d      	ldr	r5, [r5, #0]
 800986c:	f1a5 0009 	sub.w	r0, r5, #9
 8009870:	281e      	cmp	r0, #30
 8009872:	d816      	bhi.n	80098a2 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd139048c13a0f464E+0x56>
 8009874:	2702      	movs	r7, #2
 8009876:	2674      	movs	r6, #116	; 0x74
 8009878:	e8df f000 	tbb	[pc, r0]
 800987c:	17171086 	.word	0x17171086
 8009880:	1717173a 	.word	0x1717173a
 8009884:	17171717 	.word	0x17171717
 8009888:	17171717 	.word	0x17171717
 800988c:	17171717 	.word	0x17171717
 8009890:	17171717 	.word	0x17171717
 8009894:	17171517 	.word	0x17171517
 8009898:	00151717 	.word	0x00151717
 800989c:	2702      	movs	r7, #2
 800989e:	266e      	movs	r6, #110	; 0x6e
 80098a0:	e028      	b.n	80098f4 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd139048c13a0f464E+0xa8>
 80098a2:	2d5c      	cmp	r5, #92	; 0x5c
 80098a4:	d101      	bne.n	80098aa <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd139048c13a0f464E+0x5e>
 80098a6:	2702      	movs	r7, #2
 80098a8:	e06d      	b.n	8009986 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd139048c13a0f464E+0x13a>
 80098aa:	f647 0090 	movw	r0, #30864	; 0x7890
 80098ae:	4629      	mov	r1, r5
 80098b0:	f6c0 0001 	movt	r0, #2049	; 0x801
 80098b4:	f000 f8d3 	bl	8009a5e <_ZN4core7unicode9bool_trie8BoolTrie6lookup17h04013171fa49f073E>
 80098b8:	2800      	cmp	r0, #0
 80098ba:	d159      	bne.n	8009970 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd139048c13a0f464E+0x124>
 80098bc:	2000      	movs	r0, #0
 80098be:	ebb0 4f15 	cmp.w	r0, r5, lsr #16
 80098c2:	d118      	bne.n	80098f6 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd139048c13a0f464E+0xaa>
 80098c4:	f646 61ef 	movw	r1, #28399	; 0x6eef
 80098c8:	f240 122f 	movw	r2, #303	; 0x12f
 80098cc:	f6c0 0101 	movt	r1, #2049	; 0x801
 80098d0:	f646 53c0 	movw	r3, #28096	; 0x6dc0
 80098d4:	e9cd 2100 	strd	r2, r1, [sp]
 80098d8:	f646 5170 	movw	r1, #28016	; 0x6d70
 80098dc:	f44f 709e 	mov.w	r0, #316	; 0x13c
 80098e0:	f6c0 0101 	movt	r1, #2049	; 0x801
 80098e4:	9002      	str	r0, [sp, #8]
 80098e6:	f6c0 0301 	movt	r3, #2049	; 0x801
 80098ea:	4628      	mov	r0, r5
 80098ec:	2228      	movs	r2, #40	; 0x28
 80098ee:	e019      	b.n	8009924 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd139048c13a0f464E+0xd8>
 80098f0:	2702      	movs	r7, #2
 80098f2:	2672      	movs	r6, #114	; 0x72
 80098f4:	e048      	b.n	8009988 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd139048c13a0f464E+0x13c>
 80098f6:	ebb0 4f55 	cmp.w	r0, r5, lsr #17
 80098fa:	d118      	bne.n	800992e <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd139048c13a0f464E+0xe2>
 80098fc:	f247 110b 	movw	r1, #28939	; 0x710b
 8009900:	229e      	movs	r2, #158	; 0x9e
 8009902:	f6c0 0101 	movt	r1, #2049	; 0x801
 8009906:	f247 036d 	movw	r3, #28781	; 0x706d
 800990a:	e9cd 2100 	strd	r2, r1, [sp]
 800990e:	f247 012b 	movw	r1, #28715	; 0x702b
 8009912:	f240 107d 	movw	r0, #381	; 0x17d
 8009916:	f6c0 0101 	movt	r1, #2049	; 0x801
 800991a:	9002      	str	r0, [sp, #8]
 800991c:	f6c0 0301 	movt	r3, #2049	; 0x801
 8009920:	4628      	mov	r0, r5
 8009922:	2221      	movs	r2, #33	; 0x21
 8009924:	f000 f919 	bl	8009b5a <_ZN4core7unicode9printable5check17h6013a5f54a0956d6E>
 8009928:	b310      	cbz	r0, 8009970 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd139048c13a0f464E+0x124>
 800992a:	2701      	movs	r7, #1
 800992c:	e7bc      	b.n	80098a8 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd139048c13a0f464E+0x5c>
 800992e:	f240 10ef 	movw	r0, #495	; 0x1ef
 8009932:	f2c0 000e 	movt	r0, #14
 8009936:	4285      	cmp	r5, r0
 8009938:	d81a      	bhi.n	8009970 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd139048c13a0f464E+0x124>
 800993a:	f240 50e2 	movw	r0, #1506	; 0x5e2
 800993e:	f240 61e2 	movw	r1, #1762	; 0x6e2
 8009942:	f6cf 70fd 	movt	r0, #65533	; 0xfffd
 8009946:	f2c0 010b 	movt	r1, #11
 800994a:	4428      	add	r0, r5
 800994c:	4288      	cmp	r0, r1
 800994e:	d30f      	bcc.n	8009970 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd139048c13a0f464E+0x124>
 8009950:	f241 401f 	movw	r0, #5151	; 0x141f
 8009954:	f640 411f 	movw	r1, #3103	; 0xc1f
 8009958:	f6cf 70fd 	movt	r0, #65533	; 0xfffd
 800995c:	4428      	add	r0, r5
 800995e:	4288      	cmp	r0, r1
 8009960:	bf21      	itttt	cs
 8009962:	f243 105e 	movwcs	r0, #12638	; 0x315e
 8009966:	f6cf 70fd 	movtcs	r0, #65533	; 0xfffd
 800996a:	4428      	addcs	r0, r5
 800996c:	280e      	cmpcs	r0, #14
 800996e:	d25d      	bcs.n	8009a2c <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd139048c13a0f464E+0x1e0>
 8009970:	f045 0001 	orr.w	r0, r5, #1
 8009974:	f04f 0905 	mov.w	r9, #5
 8009978:	fab0 f080 	clz	r0, r0
 800997c:	2703      	movs	r7, #3
 800997e:	2107      	movs	r1, #7
 8009980:	ea81 0090 	eor.w	r0, r1, r0, lsr #2
 8009984:	9004      	str	r0, [sp, #16]
 8009986:	462e      	mov	r6, r5
 8009988:	f04f 35ff 	mov.w	r5, #4294967295
 800998c:	f04f 0a1c 	mov.w	sl, #28
 8009990:	f04f 0802 	mov.w	r8, #2
 8009994:	f04f 0b04 	mov.w	fp, #4
 8009998:	2f01      	cmp	r7, #1
 800999a:	d010      	beq.n	80099be <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd139048c13a0f464E+0x172>
 800999c:	2f02      	cmp	r7, #2
 800999e:	d011      	beq.n	80099c4 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd139048c13a0f464E+0x178>
 80099a0:	2f03      	cmp	r7, #3
 80099a2:	d13b      	bne.n	8009a1c <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd139048c13a0f464E+0x1d0>
 80099a4:	fa55 f089 	uxtab	r0, r5, r9
 80099a8:	2804      	cmp	r0, #4
 80099aa:	d837      	bhi.n	8009a1c <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd139048c13a0f464E+0x1d0>
 80099ac:	e8df f000 	tbb	[pc, r0]
 80099b0:	221e0d03 	.word	0x221e0d03
 80099b4:	0027      	.short	0x0027
 80099b6:	f029 09ff 	bic.w	r9, r9, #255	; 0xff
 80099ba:	217d      	movs	r1, #125	; 0x7d
 80099bc:	e026      	b.n	8009a0c <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd139048c13a0f464E+0x1c0>
 80099be:	2700      	movs	r7, #0
 80099c0:	4631      	mov	r1, r6
 80099c2:	e024      	b.n	8009a0e <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd139048c13a0f464E+0x1c2>
 80099c4:	215c      	movs	r1, #92	; 0x5c
 80099c6:	2701      	movs	r7, #1
 80099c8:	e021      	b.n	8009a0e <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd139048c13a0f464E+0x1c2>
 80099ca:	9a04      	ldr	r2, [sp, #16]
 80099cc:	ea0a 0082 	and.w	r0, sl, r2, lsl #2
 80099d0:	fa26 f000 	lsr.w	r0, r6, r0
 80099d4:	f000 000f 	and.w	r0, r0, #15
 80099d8:	f100 0157 	add.w	r1, r0, #87	; 0x57
 80099dc:	280a      	cmp	r0, #10
 80099de:	bf38      	it	cc
 80099e0:	f100 0130 	addcc.w	r1, r0, #48	; 0x30
 80099e4:	b17a      	cbz	r2, 8009a06 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd139048c13a0f464E+0x1ba>
 80099e6:	3a01      	subs	r2, #1
 80099e8:	9204      	str	r2, [sp, #16]
 80099ea:	e00f      	b.n	8009a0c <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd139048c13a0f464E+0x1c0>
 80099ec:	f368 0907 	bfi	r9, r8, #0, #8
 80099f0:	217b      	movs	r1, #123	; 0x7b
 80099f2:	e00b      	b.n	8009a0c <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd139048c13a0f464E+0x1c0>
 80099f4:	2703      	movs	r7, #3
 80099f6:	2175      	movs	r1, #117	; 0x75
 80099f8:	f367 0907 	bfi	r9, r7, #0, #8
 80099fc:	e007      	b.n	8009a0e <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd139048c13a0f464E+0x1c2>
 80099fe:	f36b 0907 	bfi	r9, fp, #0, #8
 8009a02:	215c      	movs	r1, #92	; 0x5c
 8009a04:	e002      	b.n	8009a0c <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd139048c13a0f464E+0x1c0>
 8009a06:	2001      	movs	r0, #1
 8009a08:	f360 0907 	bfi	r9, r0, #0, #8
 8009a0c:	2703      	movs	r7, #3
 8009a0e:	e9d4 0206 	ldrd	r0, r2, [r4, #24]
 8009a12:	6912      	ldr	r2, [r2, #16]
 8009a14:	4790      	blx	r2
 8009a16:	2800      	cmp	r0, #0
 8009a18:	d0be      	beq.n	8009998 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd139048c13a0f464E+0x14c>
 8009a1a:	e722      	b.n	8009862 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd139048c13a0f464E+0x16>
 8009a1c:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
 8009a20:	690a      	ldr	r2, [r1, #16]
 8009a22:	2127      	movs	r1, #39	; 0x27
 8009a24:	b005      	add	sp, #20
 8009a26:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a2a:	4710      	bx	r2
 8009a2c:	f64b 011e 	movw	r1, #47134	; 0xb81e
 8009a30:	f025 0001 	bic.w	r0, r5, #1
 8009a34:	f2c0 0102 	movt	r1, #2
 8009a38:	4288      	cmp	r0, r1
 8009a3a:	f43f af99 	beq.w	8009970 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd139048c13a0f464E+0x124>
 8009a3e:	f645 1029 	movw	r0, #22825	; 0x5929
 8009a42:	f6cf 70fd 	movt	r0, #65533	; 0xfffd
 8009a46:	4428      	add	r0, r5
 8009a48:	2829      	cmp	r0, #41	; 0x29
 8009a4a:	bf21      	itttt	cs
 8009a4c:	f644 00cb 	movwcs	r0, #18635	; 0x48cb
 8009a50:	f6cf 70fd 	movtcs	r0, #65533	; 0xfffd
 8009a54:	4428      	addcs	r0, r5
 8009a56:	280a      	cmpcs	r0, #10
 8009a58:	f63f af67 	bhi.w	800992a <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd139048c13a0f464E+0xde>
 8009a5c:	e788      	b.n	8009970 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd139048c13a0f464E+0x124>

08009a5e <_ZN4core7unicode9bool_trie8BoolTrie6lookup17h04013171fa49f073E>:
 8009a5e:	b580      	push	{r7, lr}
 8009a60:	2200      	movs	r2, #0
 8009a62:	ebb2 2fd1 	cmp.w	r2, r1, lsr #11
 8009a66:	d105      	bne.n	8009a74 <_ZN4core7unicode9bool_trie8BoolTrie6lookup17h04013171fa49f073E+0x16>
 8009a68:	f06f 0207 	mvn.w	r2, #7
 8009a6c:	ea02 02d1 	and.w	r2, r2, r1, lsr #3
 8009a70:	4410      	add	r0, r2
 8009a72:	e030      	b.n	8009ad6 <_ZN4core7unicode9bool_trie8BoolTrie6lookup17h04013171fa49f073E+0x78>
 8009a74:	ebb2 4f11 	cmp.w	r2, r1, lsr #16
 8009a78:	d110      	bne.n	8009a9c <_ZN4core7unicode9bool_trie8BoolTrie6lookup17h04013171fa49f073E+0x3e>
 8009a7a:	f06f 021f 	mvn.w	r2, #31
 8009a7e:	eb02 1391 	add.w	r3, r2, r1, lsr #6
 8009a82:	095a      	lsrs	r2, r3, #5
 8009a84:	2a1e      	cmp	r2, #30
 8009a86:	d842      	bhi.n	8009b0e <_ZN4core7unicode9bool_trie8BoolTrie6lookup17h04013171fa49f073E+0xb0>
 8009a88:	4403      	add	r3, r0
 8009a8a:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
 8009a8e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8009a92:	429a      	cmp	r2, r3
 8009a94:	d945      	bls.n	8009b22 <_ZN4core7unicode9bool_trie8BoolTrie6lookup17h04013171fa49f073E+0xc4>
 8009a96:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
 8009a9a:	e01a      	b.n	8009ad2 <_ZN4core7unicode9bool_trie8BoolTrie6lookup17h04013171fa49f073E+0x74>
 8009a9c:	f06f 020f 	mvn.w	r2, #15
 8009aa0:	eb02 3211 	add.w	r2, r2, r1, lsr #12
 8009aa4:	2aff      	cmp	r2, #255	; 0xff
 8009aa6:	d841      	bhi.n	8009b2c <_ZN4core7unicode9bool_trie8BoolTrie6lookup17h04013171fa49f073E+0xce>
 8009aa8:	4402      	add	r2, r0
 8009aaa:	f892 c4f8 	ldrb.w	ip, [r2, #1272]	; 0x4f8
 8009aae:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8009ab2:	f3c1 1385 	ubfx	r3, r1, #6, #6
 8009ab6:	ea43 138c 	orr.w	r3, r3, ip, lsl #6
 8009aba:	4293      	cmp	r3, r2
 8009abc:	d240      	bcs.n	8009b40 <_ZN4core7unicode9bool_trie8BoolTrie6lookup17h04013171fa49f073E+0xe2>
 8009abe:	f8d0 c108 	ldr.w	ip, [r0, #264]	; 0x108
 8009ac2:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
 8009ac6:	f81c 3003 	ldrb.w	r3, [ip, r3]
 8009aca:	429a      	cmp	r2, r3
 8009acc:	d93d      	bls.n	8009b4a <_ZN4core7unicode9bool_trie8BoolTrie6lookup17h04013171fa49f073E+0xec>
 8009ace:	f8d0 0110 	ldr.w	r0, [r0, #272]	; 0x110
 8009ad2:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 8009ad6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8009ada:	f04f 0e01 	mov.w	lr, #1
 8009ade:	f1c1 0220 	rsb	r2, r1, #32
 8009ae2:	e9d0 c300 	ldrd	ip, r3, [r0]
 8009ae6:	f1a1 0020 	sub.w	r0, r1, #32
 8009aea:	fa0e f101 	lsl.w	r1, lr, r1
 8009aee:	fa2e f202 	lsr.w	r2, lr, r2
 8009af2:	2800      	cmp	r0, #0
 8009af4:	bfa8      	it	ge
 8009af6:	fa0e f200 	lslge.w	r2, lr, r0
 8009afa:	bfa8      	it	ge
 8009afc:	2100      	movge	r1, #0
 8009afe:	ea03 0002 	and.w	r0, r3, r2
 8009b02:	ea01 010c 	and.w	r1, r1, ip
 8009b06:	4308      	orrs	r0, r1
 8009b08:	bf18      	it	ne
 8009b0a:	2001      	movne	r0, #1
 8009b0c:	bd80      	pop	{r7, pc}
 8009b0e:	f646 5020 	movw	r0, #27936	; 0x6d20
 8009b12:	4619      	mov	r1, r3
 8009b14:	f6c0 0001 	movt	r0, #2049	; 0x801
 8009b18:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8009b1c:	f7fe fdd4 	bl	80086c8 <_ZN4core9panicking18panic_bounds_check17h794d18f1ca9e50a8E>
 8009b20:	defe      	udf	#254	; 0xfe
 8009b22:	f646 5030 	movw	r0, #27952	; 0x6d30
 8009b26:	f6c0 0001 	movt	r0, #2049	; 0x801
 8009b2a:	e012      	b.n	8009b52 <_ZN4core7unicode9bool_trie8BoolTrie6lookup17h04013171fa49f073E+0xf4>
 8009b2c:	f646 5040 	movw	r0, #27968	; 0x6d40
 8009b30:	4611      	mov	r1, r2
 8009b32:	f6c0 0001 	movt	r0, #2049	; 0x801
 8009b36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009b3a:	f7fe fdc5 	bl	80086c8 <_ZN4core9panicking18panic_bounds_check17h794d18f1ca9e50a8E>
 8009b3e:	defe      	udf	#254	; 0xfe
 8009b40:	f646 5050 	movw	r0, #27984	; 0x6d50
 8009b44:	f6c0 0001 	movt	r0, #2049	; 0x801
 8009b48:	e003      	b.n	8009b52 <_ZN4core7unicode9bool_trie8BoolTrie6lookup17h04013171fa49f073E+0xf4>
 8009b4a:	f646 5060 	movw	r0, #28000	; 0x6d60
 8009b4e:	f6c0 0001 	movt	r0, #2049	; 0x801
 8009b52:	4619      	mov	r1, r3
 8009b54:	f7fe fdb8 	bl	80086c8 <_ZN4core9panicking18panic_bounds_check17h794d18f1ca9e50a8E>
 8009b58:	defe      	udf	#254	; 0xfe

08009b5a <_ZN4core7unicode9printable5check17h6013a5f54a0956d6E>:
 8009b5a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b5e:	b081      	sub	sp, #4
 8009b60:	fa1f fa80 	uxth.w	sl, r0
 8009b64:	b3a2      	cbz	r2, 8009bd0 <_ZN4core7unicode9printable5check17h6013a5f54a0956d6E+0x76>
 8009b66:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 8009b6a:	eb01 0842 	add.w	r8, r1, r2, lsl #1
 8009b6e:	ea4f 291a 	mov.w	r9, sl, lsr #8
 8009b72:	f04f 0e00 	mov.w	lr, #0
 8009b76:	784f      	ldrb	r7, [r1, #1]
 8009b78:	4672      	mov	r2, lr
 8009b7a:	780c      	ldrb	r4, [r1, #0]
 8009b7c:	3102      	adds	r1, #2
 8009b7e:	44be      	add	lr, r7
 8009b80:	454c      	cmp	r4, r9
 8009b82:	d122      	bne.n	8009bca <_ZN4core7unicode9printable5check17h6013a5f54a0956d6E+0x70>
 8009b84:	4596      	cmp	lr, r2
 8009b86:	d352      	bcc.n	8009c2e <_ZN4core7unicode9printable5check17h6013a5f54a0956d6E+0xd4>
 8009b88:	45e6      	cmp	lr, ip
 8009b8a:	d855      	bhi.n	8009c38 <_ZN4core7unicode9printable5check17h6013a5f54a0956d6E+0xde>
 8009b8c:	189c      	adds	r4, r3, r2
 8009b8e:	eb04 0b07 	add.w	fp, r4, r7
 8009b92:	b1df      	cbz	r7, 8009bcc <_ZN4core7unicode9printable5check17h6013a5f54a0956d6E+0x72>
 8009b94:	4625      	mov	r5, r4
 8009b96:	b2c6      	uxtb	r6, r0
 8009b98:	f815 2b01 	ldrb.w	r2, [r5], #1
 8009b9c:	42b2      	cmp	r2, r6
 8009b9e:	d037      	beq.n	8009c10 <_ZN4core7unicode9printable5check17h6013a5f54a0956d6E+0xb6>
 8009ba0:	455d      	cmp	r5, fp
 8009ba2:	d013      	beq.n	8009bcc <_ZN4core7unicode9printable5check17h6013a5f54a0956d6E+0x72>
 8009ba4:	7862      	ldrb	r2, [r4, #1]
 8009ba6:	42b2      	cmp	r2, r6
 8009ba8:	d032      	beq.n	8009c10 <_ZN4core7unicode9printable5check17h6013a5f54a0956d6E+0xb6>
 8009baa:	1ca2      	adds	r2, r4, #2
 8009bac:	455a      	cmp	r2, fp
 8009bae:	d00d      	beq.n	8009bcc <_ZN4core7unicode9printable5check17h6013a5f54a0956d6E+0x72>
 8009bb0:	78a2      	ldrb	r2, [r4, #2]
 8009bb2:	42b2      	cmp	r2, r6
 8009bb4:	d02c      	beq.n	8009c10 <_ZN4core7unicode9printable5check17h6013a5f54a0956d6E+0xb6>
 8009bb6:	1ce2      	adds	r2, r4, #3
 8009bb8:	455a      	cmp	r2, fp
 8009bba:	d007      	beq.n	8009bcc <_ZN4core7unicode9printable5check17h6013a5f54a0956d6E+0x72>
 8009bbc:	1d22      	adds	r2, r4, #4
 8009bbe:	78e4      	ldrb	r4, [r4, #3]
 8009bc0:	3f04      	subs	r7, #4
 8009bc2:	42b4      	cmp	r4, r6
 8009bc4:	4614      	mov	r4, r2
 8009bc6:	d1e4      	bne.n	8009b92 <_ZN4core7unicode9printable5check17h6013a5f54a0956d6E+0x38>
 8009bc8:	e022      	b.n	8009c10 <_ZN4core7unicode9printable5check17h6013a5f54a0956d6E+0xb6>
 8009bca:	d801      	bhi.n	8009bd0 <_ZN4core7unicode9printable5check17h6013a5f54a0956d6E+0x76>
 8009bcc:	4541      	cmp	r1, r8
 8009bce:	d1d2      	bne.n	8009b76 <_ZN4core7unicode9printable5check17h6013a5f54a0956d6E+0x1c>
 8009bd0:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009bd2:	b1f8      	cbz	r0, 8009c14 <_ZN4core7unicode9printable5check17h6013a5f54a0956d6E+0xba>
 8009bd4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8009bd6:	1831      	adds	r1, r6, r0
 8009bd8:	2001      	movs	r0, #1
 8009bda:	4632      	mov	r2, r6
 8009bdc:	f812 3b01 	ldrb.w	r3, [r2], #1
 8009be0:	b25f      	sxtb	r7, r3
 8009be2:	f1b7 3fff 	cmp.w	r7, #4294967295
 8009be6:	dd01      	ble.n	8009bec <_ZN4core7unicode9printable5check17h6013a5f54a0956d6E+0x92>
 8009be8:	4616      	mov	r6, r2
 8009bea:	e007      	b.n	8009bfc <_ZN4core7unicode9printable5check17h6013a5f54a0956d6E+0xa2>
 8009bec:	428a      	cmp	r2, r1
 8009bee:	d017      	beq.n	8009c20 <_ZN4core7unicode9printable5check17h6013a5f54a0956d6E+0xc6>
 8009bf0:	7872      	ldrb	r2, [r6, #1]
 8009bf2:	f007 037f 	and.w	r3, r7, #127	; 0x7f
 8009bf6:	3602      	adds	r6, #2
 8009bf8:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8009bfc:	ebaa 0a03 	sub.w	sl, sl, r3
 8009c00:	f1ba 0f00 	cmp.w	sl, #0
 8009c04:	db07      	blt.n	8009c16 <_ZN4core7unicode9printable5check17h6013a5f54a0956d6E+0xbc>
 8009c06:	f080 0001 	eor.w	r0, r0, #1
 8009c0a:	428e      	cmp	r6, r1
 8009c0c:	d1e5      	bne.n	8009bda <_ZN4core7unicode9printable5check17h6013a5f54a0956d6E+0x80>
 8009c0e:	e002      	b.n	8009c16 <_ZN4core7unicode9printable5check17h6013a5f54a0956d6E+0xbc>
 8009c10:	2000      	movs	r0, #0
 8009c12:	e000      	b.n	8009c16 <_ZN4core7unicode9printable5check17h6013a5f54a0956d6E+0xbc>
 8009c14:	2001      	movs	r0, #1
 8009c16:	f000 0001 	and.w	r0, r0, #1
 8009c1a:	b001      	add	sp, #4
 8009c1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c20:	f646 1030 	movw	r0, #26928	; 0x6930
 8009c24:	f6c0 0001 	movt	r0, #2049	; 0x801
 8009c28:	f7fe fd31 	bl	800868e <_ZN4core9panicking5panic17h138a849f37d3ac2dE>
 8009c2c:	defe      	udf	#254	; 0xfe
 8009c2e:	4610      	mov	r0, r2
 8009c30:	4671      	mov	r1, lr
 8009c32:	f7fe feb8 	bl	80089a6 <_ZN4core5slice22slice_index_order_fail17h7c776986fd4b085eE>
 8009c36:	defe      	udf	#254	; 0xfe
 8009c38:	4670      	mov	r0, lr
 8009c3a:	4661      	mov	r1, ip
 8009c3c:	f7fe fe91 	bl	8008962 <_ZN4core5slice20slice_index_len_fail17hfa6ff34b8fd07644E>
 8009c40:	defe      	udf	#254	; 0xfe

08009c42 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hf6dcfdcd0c677f34E>:
 8009c42:	b5b0      	push	{r4, r5, r7, lr}
 8009c44:	b0a2      	sub	sp, #136	; 0x88
 8009c46:	468c      	mov	ip, r1
 8009c48:	6809      	ldr	r1, [r1, #0]
 8009c4a:	06ca      	lsls	r2, r1, #27
 8009c4c:	d409      	bmi.n	8009c62 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hf6dcfdcd0c677f34E+0x20>
 8009c4e:	6800      	ldr	r0, [r0, #0]
 8009c50:	0689      	lsls	r1, r1, #26
 8009c52:	d448      	bmi.n	8009ce6 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hf6dcfdcd0c677f34E+0xa4>
 8009c54:	2101      	movs	r1, #1
 8009c56:	4662      	mov	r2, ip
 8009c58:	b022      	add	sp, #136	; 0x88
 8009c5a:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8009c5e:	f000 ba44 	b.w	800a0ea <_ZN4core3fmt3num3imp7fmt_u3217hd5f71347e2daefbcE>
 8009c62:	6800      	ldr	r0, [r0, #0]
 8009c64:	f10d 0e08 	add.w	lr, sp, #8
 8009c68:	2281      	movs	r2, #129	; 0x81
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	f000 010f 	and.w	r1, r0, #15
 8009c70:	f101 0457 	add.w	r4, r1, #87	; 0x57
 8009c74:	290a      	cmp	r1, #10
 8009c76:	bf38      	it	cc
 8009c78:	f101 0430 	addcc.w	r4, r1, #48	; 0x30
 8009c7c:	eb0e 0102 	add.w	r1, lr, r2
 8009c80:	ebb3 1f10 	cmp.w	r3, r0, lsr #4
 8009c84:	f801 4c02 	strb.w	r4, [r1, #-2]
 8009c88:	d071      	beq.n	8009d6e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hf6dcfdcd0c677f34E+0x12c>
 8009c8a:	0904      	lsrs	r4, r0, #4
 8009c8c:	f004 040f 	and.w	r4, r4, #15
 8009c90:	f104 0557 	add.w	r5, r4, #87	; 0x57
 8009c94:	2c0a      	cmp	r4, #10
 8009c96:	bf38      	it	cc
 8009c98:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
 8009c9c:	ebb3 2f10 	cmp.w	r3, r0, lsr #8
 8009ca0:	f801 5c03 	strb.w	r5, [r1, #-3]
 8009ca4:	d078      	beq.n	8009d98 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hf6dcfdcd0c677f34E+0x156>
 8009ca6:	0a04      	lsrs	r4, r0, #8
 8009ca8:	f004 040f 	and.w	r4, r4, #15
 8009cac:	f104 0557 	add.w	r5, r4, #87	; 0x57
 8009cb0:	2c0a      	cmp	r4, #10
 8009cb2:	bf38      	it	cc
 8009cb4:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
 8009cb8:	ebb3 3f10 	cmp.w	r3, r0, lsr #12
 8009cbc:	f801 5c04 	strb.w	r5, [r1, #-4]
 8009cc0:	d072      	beq.n	8009da8 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hf6dcfdcd0c677f34E+0x166>
 8009cc2:	0b04      	lsrs	r4, r0, #12
 8009cc4:	3a04      	subs	r2, #4
 8009cc6:	f004 040f 	and.w	r4, r4, #15
 8009cca:	f104 0557 	add.w	r5, r4, #87	; 0x57
 8009cce:	2c0a      	cmp	r4, #10
 8009cd0:	bf38      	it	cc
 8009cd2:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
 8009cd6:	f801 5c05 	strb.w	r5, [r1, #-5]
 8009cda:	0c01      	lsrs	r1, r0, #16
 8009cdc:	ebb3 4f10 	cmp.w	r3, r0, lsr #16
 8009ce0:	4608      	mov	r0, r1
 8009ce2:	d1c3      	bne.n	8009c6c <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hf6dcfdcd0c677f34E+0x2a>
 8009ce4:	e03f      	b.n	8009d66 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hf6dcfdcd0c677f34E+0x124>
 8009ce6:	f10d 0e08 	add.w	lr, sp, #8
 8009cea:	2281      	movs	r2, #129	; 0x81
 8009cec:	2300      	movs	r3, #0
 8009cee:	f000 010f 	and.w	r1, r0, #15
 8009cf2:	f101 0437 	add.w	r4, r1, #55	; 0x37
 8009cf6:	290a      	cmp	r1, #10
 8009cf8:	bf38      	it	cc
 8009cfa:	f101 0430 	addcc.w	r4, r1, #48	; 0x30
 8009cfe:	eb0e 0102 	add.w	r1, lr, r2
 8009d02:	ebb3 1f10 	cmp.w	r3, r0, lsr #4
 8009d06:	f801 4c02 	strb.w	r4, [r1, #-2]
 8009d0a:	d030      	beq.n	8009d6e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hf6dcfdcd0c677f34E+0x12c>
 8009d0c:	0904      	lsrs	r4, r0, #4
 8009d0e:	f004 040f 	and.w	r4, r4, #15
 8009d12:	f104 0537 	add.w	r5, r4, #55	; 0x37
 8009d16:	2c0a      	cmp	r4, #10
 8009d18:	bf38      	it	cc
 8009d1a:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
 8009d1e:	ebb3 2f10 	cmp.w	r3, r0, lsr #8
 8009d22:	f801 5c03 	strb.w	r5, [r1, #-3]
 8009d26:	d037      	beq.n	8009d98 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hf6dcfdcd0c677f34E+0x156>
 8009d28:	0a04      	lsrs	r4, r0, #8
 8009d2a:	f004 040f 	and.w	r4, r4, #15
 8009d2e:	f104 0537 	add.w	r5, r4, #55	; 0x37
 8009d32:	2c0a      	cmp	r4, #10
 8009d34:	bf38      	it	cc
 8009d36:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
 8009d3a:	ebb3 3f10 	cmp.w	r3, r0, lsr #12
 8009d3e:	f801 5c04 	strb.w	r5, [r1, #-4]
 8009d42:	d031      	beq.n	8009da8 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hf6dcfdcd0c677f34E+0x166>
 8009d44:	0b04      	lsrs	r4, r0, #12
 8009d46:	3a04      	subs	r2, #4
 8009d48:	f004 040f 	and.w	r4, r4, #15
 8009d4c:	f104 0537 	add.w	r5, r4, #55	; 0x37
 8009d50:	2c0a      	cmp	r4, #10
 8009d52:	bf38      	it	cc
 8009d54:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
 8009d58:	f801 5c05 	strb.w	r5, [r1, #-5]
 8009d5c:	0c01      	lsrs	r1, r0, #16
 8009d5e:	ebb3 4f10 	cmp.w	r3, r0, lsr #16
 8009d62:	4608      	mov	r0, r1
 8009d64:	d1c3      	bne.n	8009cee <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hf6dcfdcd0c677f34E+0xac>
 8009d66:	1e50      	subs	r0, r2, #1
 8009d68:	2881      	cmp	r0, #129	; 0x81
 8009d6a:	d305      	bcc.n	8009d78 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hf6dcfdcd0c677f34E+0x136>
 8009d6c:	e018      	b.n	8009da0 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hf6dcfdcd0c677f34E+0x15e>
 8009d6e:	1e51      	subs	r1, r2, #1
 8009d70:	1e90      	subs	r0, r2, #2
 8009d72:	460a      	mov	r2, r1
 8009d74:	2881      	cmp	r0, #129	; 0x81
 8009d76:	d213      	bcs.n	8009da0 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hf6dcfdcd0c677f34E+0x15e>
 8009d78:	f1c2 0181 	rsb	r1, r2, #129	; 0x81
 8009d7c:	f646 32b4 	movw	r2, #27572	; 0x6bb4
 8009d80:	4470      	add	r0, lr
 8009d82:	f6c0 0201 	movt	r2, #2049	; 0x801
 8009d86:	e9cd 0100 	strd	r0, r1, [sp]
 8009d8a:	4660      	mov	r0, ip
 8009d8c:	2101      	movs	r1, #1
 8009d8e:	2302      	movs	r3, #2
 8009d90:	f7ff fa8b 	bl	80092aa <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE>
 8009d94:	b022      	add	sp, #136	; 0x88
 8009d96:	bdb0      	pop	{r4, r5, r7, pc}
 8009d98:	1ed0      	subs	r0, r2, #3
 8009d9a:	3a02      	subs	r2, #2
 8009d9c:	2881      	cmp	r0, #129	; 0x81
 8009d9e:	d3eb      	bcc.n	8009d78 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hf6dcfdcd0c677f34E+0x136>
 8009da0:	2180      	movs	r1, #128	; 0x80
 8009da2:	f7fe fe00 	bl	80089a6 <_ZN4core5slice22slice_index_order_fail17h7c776986fd4b085eE>
 8009da6:	defe      	udf	#254	; 0xfe
 8009da8:	1f10      	subs	r0, r2, #4
 8009daa:	3a03      	subs	r2, #3
 8009dac:	2881      	cmp	r0, #129	; 0x81
 8009dae:	d3e3      	bcc.n	8009d78 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hf6dcfdcd0c677f34E+0x136>
 8009db0:	e7f6      	b.n	8009da0 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hf6dcfdcd0c677f34E+0x15e>

08009db2 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he7fa0f4e9bbfda2bE>:
 8009db2:	b580      	push	{r7, lr}
 8009db4:	b0a2      	sub	sp, #136	; 0x88
 8009db6:	7802      	ldrb	r2, [r0, #0]
 8009db8:	468c      	mov	ip, r1
 8009dba:	f002 030f 	and.w	r3, r2, #15
 8009dbe:	f103 0057 	add.w	r0, r3, #87	; 0x57
 8009dc2:	2b0a      	cmp	r3, #10
 8009dc4:	bf38      	it	cc
 8009dc6:	f103 0030 	addcc.w	r0, r3, #48	; 0x30
 8009dca:	2300      	movs	r3, #0
 8009dcc:	ebb3 1f12 	cmp.w	r3, r2, lsr #4
 8009dd0:	d00b      	beq.n	8009dea <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he7fa0f4e9bbfda2bE+0x38>
 8009dd2:	0913      	lsrs	r3, r2, #4
 8009dd4:	f103 0157 	add.w	r1, r3, #87	; 0x57
 8009dd8:	2aa0      	cmp	r2, #160	; 0xa0
 8009dda:	bf38      	it	cc
 8009ddc:	f103 0130 	addcc.w	r1, r3, #48	; 0x30
 8009de0:	f88d 1086 	strb.w	r1, [sp, #134]	; 0x86
 8009de4:	227e      	movs	r2, #126	; 0x7e
 8009de6:	2302      	movs	r3, #2
 8009de8:	e001      	b.n	8009dee <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he7fa0f4e9bbfda2bE+0x3c>
 8009dea:	227f      	movs	r2, #127	; 0x7f
 8009dec:	2301      	movs	r3, #1
 8009dee:	f88d 0087 	strb.w	r0, [sp, #135]	; 0x87
 8009df2:	a802      	add	r0, sp, #8
 8009df4:	4410      	add	r0, r2
 8009df6:	f646 32b4 	movw	r2, #27572	; 0x6bb4
 8009dfa:	e9cd 0300 	strd	r0, r3, [sp]
 8009dfe:	f6c0 0201 	movt	r2, #2049	; 0x801
 8009e02:	4660      	mov	r0, ip
 8009e04:	2101      	movs	r1, #1
 8009e06:	2302      	movs	r3, #2
 8009e08:	f7ff fa4f 	bl	80092aa <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE>
 8009e0c:	b022      	add	sp, #136	; 0x88
 8009e0e:	bd80      	pop	{r7, pc}

08009e10 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17hab068c13e1025a46E>:
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b0a2      	sub	sp, #136	; 0x88
 8009e14:	7802      	ldrb	r2, [r0, #0]
 8009e16:	468c      	mov	ip, r1
 8009e18:	f002 030f 	and.w	r3, r2, #15
 8009e1c:	f103 0037 	add.w	r0, r3, #55	; 0x37
 8009e20:	2b0a      	cmp	r3, #10
 8009e22:	bf38      	it	cc
 8009e24:	f103 0030 	addcc.w	r0, r3, #48	; 0x30
 8009e28:	2300      	movs	r3, #0
 8009e2a:	ebb3 1f12 	cmp.w	r3, r2, lsr #4
 8009e2e:	d00b      	beq.n	8009e48 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17hab068c13e1025a46E+0x38>
 8009e30:	0913      	lsrs	r3, r2, #4
 8009e32:	f103 0137 	add.w	r1, r3, #55	; 0x37
 8009e36:	2aa0      	cmp	r2, #160	; 0xa0
 8009e38:	bf38      	it	cc
 8009e3a:	f103 0130 	addcc.w	r1, r3, #48	; 0x30
 8009e3e:	f88d 1086 	strb.w	r1, [sp, #134]	; 0x86
 8009e42:	227e      	movs	r2, #126	; 0x7e
 8009e44:	2302      	movs	r3, #2
 8009e46:	e001      	b.n	8009e4c <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17hab068c13e1025a46E+0x3c>
 8009e48:	227f      	movs	r2, #127	; 0x7f
 8009e4a:	2301      	movs	r3, #1
 8009e4c:	f88d 0087 	strb.w	r0, [sp, #135]	; 0x87
 8009e50:	a802      	add	r0, sp, #8
 8009e52:	4410      	add	r0, r2
 8009e54:	f646 32b4 	movw	r2, #27572	; 0x6bb4
 8009e58:	e9cd 0300 	strd	r0, r3, [sp]
 8009e5c:	f6c0 0201 	movt	r2, #2049	; 0x801
 8009e60:	4660      	mov	r0, ip
 8009e62:	2101      	movs	r1, #1
 8009e64:	2302      	movs	r3, #2
 8009e66:	f7ff fa20 	bl	80092aa <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE>
 8009e6a:	b022      	add	sp, #136	; 0x88
 8009e6c:	bd80      	pop	{r7, pc}

08009e6e <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17h4f9d20d49859c5e5E>:
 8009e6e:	b5b0      	push	{r4, r5, r7, lr}
 8009e70:	b0a2      	sub	sp, #136	; 0x88
 8009e72:	6800      	ldr	r0, [r0, #0]
 8009e74:	f10d 0e08 	add.w	lr, sp, #8
 8009e78:	468c      	mov	ip, r1
 8009e7a:	2381      	movs	r3, #129	; 0x81
 8009e7c:	2100      	movs	r1, #0
 8009e7e:	f000 020f 	and.w	r2, r0, #15
 8009e82:	f102 0457 	add.w	r4, r2, #87	; 0x57
 8009e86:	2a0a      	cmp	r2, #10
 8009e88:	bf38      	it	cc
 8009e8a:	f102 0430 	addcc.w	r4, r2, #48	; 0x30
 8009e8e:	eb0e 0203 	add.w	r2, lr, r3
 8009e92:	ebb1 1f10 	cmp.w	r1, r0, lsr #4
 8009e96:	f802 4c02 	strb.w	r4, [r2, #-2]
 8009e9a:	d030      	beq.n	8009efe <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17h4f9d20d49859c5e5E+0x90>
 8009e9c:	0904      	lsrs	r4, r0, #4
 8009e9e:	f004 040f 	and.w	r4, r4, #15
 8009ea2:	f104 0557 	add.w	r5, r4, #87	; 0x57
 8009ea6:	2c0a      	cmp	r4, #10
 8009ea8:	bf38      	it	cc
 8009eaa:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
 8009eae:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
 8009eb2:	f802 5c03 	strb.w	r5, [r2, #-3]
 8009eb6:	d028      	beq.n	8009f0a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17h4f9d20d49859c5e5E+0x9c>
 8009eb8:	0a04      	lsrs	r4, r0, #8
 8009eba:	f004 040f 	and.w	r4, r4, #15
 8009ebe:	f104 0557 	add.w	r5, r4, #87	; 0x57
 8009ec2:	2c0a      	cmp	r4, #10
 8009ec4:	bf38      	it	cc
 8009ec6:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
 8009eca:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
 8009ece:	f802 5c04 	strb.w	r5, [r2, #-4]
 8009ed2:	d01f      	beq.n	8009f14 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17h4f9d20d49859c5e5E+0xa6>
 8009ed4:	0b04      	lsrs	r4, r0, #12
 8009ed6:	3b04      	subs	r3, #4
 8009ed8:	f004 040f 	and.w	r4, r4, #15
 8009edc:	f104 0557 	add.w	r5, r4, #87	; 0x57
 8009ee0:	2c0a      	cmp	r4, #10
 8009ee2:	bf38      	it	cc
 8009ee4:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
 8009ee8:	f802 5c05 	strb.w	r5, [r2, #-5]
 8009eec:	0c02      	lsrs	r2, r0, #16
 8009eee:	ebb1 4f10 	cmp.w	r1, r0, lsr #16
 8009ef2:	4610      	mov	r0, r2
 8009ef4:	d1c3      	bne.n	8009e7e <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17h4f9d20d49859c5e5E+0x10>
 8009ef6:	1e58      	subs	r0, r3, #1
 8009ef8:	2881      	cmp	r0, #129	; 0x81
 8009efa:	d30f      	bcc.n	8009f1c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17h4f9d20d49859c5e5E+0xae>
 8009efc:	e01e      	b.n	8009f3c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17h4f9d20d49859c5e5E+0xce>
 8009efe:	1e59      	subs	r1, r3, #1
 8009f00:	1e98      	subs	r0, r3, #2
 8009f02:	460b      	mov	r3, r1
 8009f04:	2881      	cmp	r0, #129	; 0x81
 8009f06:	d309      	bcc.n	8009f1c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17h4f9d20d49859c5e5E+0xae>
 8009f08:	e018      	b.n	8009f3c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17h4f9d20d49859c5e5E+0xce>
 8009f0a:	1ed8      	subs	r0, r3, #3
 8009f0c:	3b02      	subs	r3, #2
 8009f0e:	2881      	cmp	r0, #129	; 0x81
 8009f10:	d304      	bcc.n	8009f1c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17h4f9d20d49859c5e5E+0xae>
 8009f12:	e013      	b.n	8009f3c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17h4f9d20d49859c5e5E+0xce>
 8009f14:	1f18      	subs	r0, r3, #4
 8009f16:	3b03      	subs	r3, #3
 8009f18:	2881      	cmp	r0, #129	; 0x81
 8009f1a:	d20f      	bcs.n	8009f3c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17h4f9d20d49859c5e5E+0xce>
 8009f1c:	f1c3 0181 	rsb	r1, r3, #129	; 0x81
 8009f20:	f646 32b4 	movw	r2, #27572	; 0x6bb4
 8009f24:	4470      	add	r0, lr
 8009f26:	f6c0 0201 	movt	r2, #2049	; 0x801
 8009f2a:	e9cd 0100 	strd	r0, r1, [sp]
 8009f2e:	4660      	mov	r0, ip
 8009f30:	2101      	movs	r1, #1
 8009f32:	2302      	movs	r3, #2
 8009f34:	f7ff f9b9 	bl	80092aa <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE>
 8009f38:	b022      	add	sp, #136	; 0x88
 8009f3a:	bdb0      	pop	{r4, r5, r7, pc}
 8009f3c:	2180      	movs	r1, #128	; 0x80
 8009f3e:	f7fe fd32 	bl	80089a6 <_ZN4core5slice22slice_index_order_fail17h7c776986fd4b085eE>
 8009f42:	defe      	udf	#254	; 0xfe

08009f44 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hc10e55c761f9c3e5E>:
 8009f44:	b5b0      	push	{r4, r5, r7, lr}
 8009f46:	b0a2      	sub	sp, #136	; 0x88
 8009f48:	6800      	ldr	r0, [r0, #0]
 8009f4a:	f10d 0e08 	add.w	lr, sp, #8
 8009f4e:	468c      	mov	ip, r1
 8009f50:	2381      	movs	r3, #129	; 0x81
 8009f52:	2100      	movs	r1, #0
 8009f54:	f000 020f 	and.w	r2, r0, #15
 8009f58:	f102 0437 	add.w	r4, r2, #55	; 0x37
 8009f5c:	2a0a      	cmp	r2, #10
 8009f5e:	bf38      	it	cc
 8009f60:	f102 0430 	addcc.w	r4, r2, #48	; 0x30
 8009f64:	eb0e 0203 	add.w	r2, lr, r3
 8009f68:	ebb1 1f10 	cmp.w	r1, r0, lsr #4
 8009f6c:	f802 4c02 	strb.w	r4, [r2, #-2]
 8009f70:	d030      	beq.n	8009fd4 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hc10e55c761f9c3e5E+0x90>
 8009f72:	0904      	lsrs	r4, r0, #4
 8009f74:	f004 040f 	and.w	r4, r4, #15
 8009f78:	f104 0537 	add.w	r5, r4, #55	; 0x37
 8009f7c:	2c0a      	cmp	r4, #10
 8009f7e:	bf38      	it	cc
 8009f80:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
 8009f84:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
 8009f88:	f802 5c03 	strb.w	r5, [r2, #-3]
 8009f8c:	d028      	beq.n	8009fe0 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hc10e55c761f9c3e5E+0x9c>
 8009f8e:	0a04      	lsrs	r4, r0, #8
 8009f90:	f004 040f 	and.w	r4, r4, #15
 8009f94:	f104 0537 	add.w	r5, r4, #55	; 0x37
 8009f98:	2c0a      	cmp	r4, #10
 8009f9a:	bf38      	it	cc
 8009f9c:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
 8009fa0:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
 8009fa4:	f802 5c04 	strb.w	r5, [r2, #-4]
 8009fa8:	d01f      	beq.n	8009fea <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hc10e55c761f9c3e5E+0xa6>
 8009faa:	0b04      	lsrs	r4, r0, #12
 8009fac:	3b04      	subs	r3, #4
 8009fae:	f004 040f 	and.w	r4, r4, #15
 8009fb2:	f104 0537 	add.w	r5, r4, #55	; 0x37
 8009fb6:	2c0a      	cmp	r4, #10
 8009fb8:	bf38      	it	cc
 8009fba:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
 8009fbe:	f802 5c05 	strb.w	r5, [r2, #-5]
 8009fc2:	0c02      	lsrs	r2, r0, #16
 8009fc4:	ebb1 4f10 	cmp.w	r1, r0, lsr #16
 8009fc8:	4610      	mov	r0, r2
 8009fca:	d1c3      	bne.n	8009f54 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hc10e55c761f9c3e5E+0x10>
 8009fcc:	1e58      	subs	r0, r3, #1
 8009fce:	2881      	cmp	r0, #129	; 0x81
 8009fd0:	d30f      	bcc.n	8009ff2 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hc10e55c761f9c3e5E+0xae>
 8009fd2:	e01e      	b.n	800a012 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hc10e55c761f9c3e5E+0xce>
 8009fd4:	1e59      	subs	r1, r3, #1
 8009fd6:	1e98      	subs	r0, r3, #2
 8009fd8:	460b      	mov	r3, r1
 8009fda:	2881      	cmp	r0, #129	; 0x81
 8009fdc:	d309      	bcc.n	8009ff2 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hc10e55c761f9c3e5E+0xae>
 8009fde:	e018      	b.n	800a012 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hc10e55c761f9c3e5E+0xce>
 8009fe0:	1ed8      	subs	r0, r3, #3
 8009fe2:	3b02      	subs	r3, #2
 8009fe4:	2881      	cmp	r0, #129	; 0x81
 8009fe6:	d304      	bcc.n	8009ff2 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hc10e55c761f9c3e5E+0xae>
 8009fe8:	e013      	b.n	800a012 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hc10e55c761f9c3e5E+0xce>
 8009fea:	1f18      	subs	r0, r3, #4
 8009fec:	3b03      	subs	r3, #3
 8009fee:	2881      	cmp	r0, #129	; 0x81
 8009ff0:	d20f      	bcs.n	800a012 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hc10e55c761f9c3e5E+0xce>
 8009ff2:	f1c3 0181 	rsb	r1, r3, #129	; 0x81
 8009ff6:	f646 32b4 	movw	r2, #27572	; 0x6bb4
 8009ffa:	4470      	add	r0, lr
 8009ffc:	f6c0 0201 	movt	r2, #2049	; 0x801
 800a000:	e9cd 0100 	strd	r0, r1, [sp]
 800a004:	4660      	mov	r0, ip
 800a006:	2101      	movs	r1, #1
 800a008:	2302      	movs	r3, #2
 800a00a:	f7ff f94e 	bl	80092aa <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE>
 800a00e:	b022      	add	sp, #136	; 0x88
 800a010:	bdb0      	pop	{r4, r5, r7, pc}
 800a012:	2180      	movs	r1, #128	; 0x80
 800a014:	f7fe fcc7 	bl	80089a6 <_ZN4core5slice22slice_index_order_fail17h7c776986fd4b085eE>
 800a018:	defe      	udf	#254	; 0xfe

0800a01a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17h703a08cf31f25f17E>:
 800a01a:	b510      	push	{r4, lr}
 800a01c:	b0a2      	sub	sp, #136	; 0x88
 800a01e:	468c      	mov	ip, r1
 800a020:	e9d0 2100 	ldrd	r2, r1, [r0]
 800a024:	f10d 0e08 	add.w	lr, sp, #8
 800a028:	237f      	movs	r3, #127	; 0x7f
 800a02a:	1c58      	adds	r0, r3, #1
 800a02c:	d013      	beq.n	800a056 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17h703a08cf31f25f17E+0x3c>
 800a02e:	f002 000f 	and.w	r0, r2, #15
 800a032:	f100 0457 	add.w	r4, r0, #87	; 0x57
 800a036:	280a      	cmp	r0, #10
 800a038:	bf38      	it	cc
 800a03a:	f100 0430 	addcc.w	r4, r0, #48	; 0x30
 800a03e:	0910      	lsrs	r0, r2, #4
 800a040:	ea40 7201 	orr.w	r2, r0, r1, lsl #28
 800a044:	f80e 4003 	strb.w	r4, [lr, r3]
 800a048:	ea42 1011 	orr.w	r0, r2, r1, lsr #4
 800a04c:	3b01      	subs	r3, #1
 800a04e:	0909      	lsrs	r1, r1, #4
 800a050:	2800      	cmp	r0, #0
 800a052:	d1ea      	bne.n	800a02a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17h703a08cf31f25f17E+0x10>
 800a054:	1c58      	adds	r0, r3, #1
 800a056:	2881      	cmp	r0, #129	; 0x81
 800a058:	d20f      	bcs.n	800a07a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17h703a08cf31f25f17E+0x60>
 800a05a:	f1c0 0180 	rsb	r1, r0, #128	; 0x80
 800a05e:	f646 32b4 	movw	r2, #27572	; 0x6bb4
 800a062:	4470      	add	r0, lr
 800a064:	f6c0 0201 	movt	r2, #2049	; 0x801
 800a068:	e9cd 0100 	strd	r0, r1, [sp]
 800a06c:	4660      	mov	r0, ip
 800a06e:	2101      	movs	r1, #1
 800a070:	2302      	movs	r3, #2
 800a072:	f7ff f91a 	bl	80092aa <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE>
 800a076:	b022      	add	sp, #136	; 0x88
 800a078:	bd10      	pop	{r4, pc}
 800a07a:	2180      	movs	r1, #128	; 0x80
 800a07c:	f7fe fc93 	bl	80089a6 <_ZN4core5slice22slice_index_order_fail17h7c776986fd4b085eE>
 800a080:	defe      	udf	#254	; 0xfe

0800a082 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i64$GT$3fmt17hb3552287af737977E>:
 800a082:	b510      	push	{r4, lr}
 800a084:	b0a2      	sub	sp, #136	; 0x88
 800a086:	468c      	mov	ip, r1
 800a088:	e9d0 2100 	ldrd	r2, r1, [r0]
 800a08c:	f10d 0e08 	add.w	lr, sp, #8
 800a090:	237f      	movs	r3, #127	; 0x7f
 800a092:	1c58      	adds	r0, r3, #1
 800a094:	d013      	beq.n	800a0be <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i64$GT$3fmt17hb3552287af737977E+0x3c>
 800a096:	f002 000f 	and.w	r0, r2, #15
 800a09a:	f100 0437 	add.w	r4, r0, #55	; 0x37
 800a09e:	280a      	cmp	r0, #10
 800a0a0:	bf38      	it	cc
 800a0a2:	f100 0430 	addcc.w	r4, r0, #48	; 0x30
 800a0a6:	0910      	lsrs	r0, r2, #4
 800a0a8:	ea40 7201 	orr.w	r2, r0, r1, lsl #28
 800a0ac:	f80e 4003 	strb.w	r4, [lr, r3]
 800a0b0:	ea42 1011 	orr.w	r0, r2, r1, lsr #4
 800a0b4:	3b01      	subs	r3, #1
 800a0b6:	0909      	lsrs	r1, r1, #4
 800a0b8:	2800      	cmp	r0, #0
 800a0ba:	d1ea      	bne.n	800a092 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i64$GT$3fmt17hb3552287af737977E+0x10>
 800a0bc:	1c58      	adds	r0, r3, #1
 800a0be:	2881      	cmp	r0, #129	; 0x81
 800a0c0:	d20f      	bcs.n	800a0e2 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i64$GT$3fmt17hb3552287af737977E+0x60>
 800a0c2:	f1c0 0180 	rsb	r1, r0, #128	; 0x80
 800a0c6:	f646 32b4 	movw	r2, #27572	; 0x6bb4
 800a0ca:	4470      	add	r0, lr
 800a0cc:	f6c0 0201 	movt	r2, #2049	; 0x801
 800a0d0:	e9cd 0100 	strd	r0, r1, [sp]
 800a0d4:	4660      	mov	r0, ip
 800a0d6:	2101      	movs	r1, #1
 800a0d8:	2302      	movs	r3, #2
 800a0da:	f7ff f8e6 	bl	80092aa <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE>
 800a0de:	b022      	add	sp, #136	; 0x88
 800a0e0:	bd10      	pop	{r4, pc}
 800a0e2:	2180      	movs	r1, #128	; 0x80
 800a0e4:	f7fe fc5f 	bl	80089a6 <_ZN4core5slice22slice_index_order_fail17h7c776986fd4b085eE>
 800a0e8:	defe      	udf	#254	; 0xfe

0800a0ea <_ZN4core3fmt3num3imp7fmt_u3217hd5f71347e2daefbcE>:
 800a0ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0ee:	b08f      	sub	sp, #60	; 0x3c
 800a0f0:	460e      	mov	r6, r1
 800a0f2:	f242 7110 	movw	r1, #10000	; 0x2710
 800a0f6:	4617      	mov	r7, r2
 800a0f8:	4288      	cmp	r0, r1
 800a0fa:	d345      	bcc.n	800a188 <_ZN4core3fmt3num3imp7fmt_u3217hd5f71347e2daefbcE+0x9e>
 800a0fc:	f241 7859 	movw	r8, #5977	; 0x1759
 800a100:	f248 591f 	movw	r9, #34079	; 0x851f
 800a104:	f24e 0eff 	movw	lr, #57599	; 0xe0ff
 800a108:	e9cd 6703 	strd	r6, r7, [sp, #12]
 800a10c:	f646 36b6 	movw	r6, #27574	; 0x6bb6
 800a110:	f10d 0b15 	add.w	fp, sp, #21
 800a114:	2300      	movs	r3, #0
 800a116:	f2cd 18b7 	movt	r8, #53687	; 0xd1b7
 800a11a:	f2c5 19eb 	movt	r9, #20971	; 0x51eb
 800a11e:	f04f 0a64 	mov.w	sl, #100	; 0x64
 800a122:	f6c0 0601 	movt	r6, #2049	; 0x801
 800a126:	f2c0 5ef5 	movt	lr, #1525	; 0x5f5
 800a12a:	fba0 4508 	umull	r4, r5, r0, r8
 800a12e:	eb0b 0203 	add.w	r2, fp, r3
 800a132:	3b04      	subs	r3, #4
 800a134:	4570      	cmp	r0, lr
 800a136:	ea4f 3455 	mov.w	r4, r5, lsr #13
 800a13a:	fb04 0511 	mls	r5, r4, r1, r0
 800a13e:	4620      	mov	r0, r4
 800a140:	fba5 7c09 	umull	r7, ip, r5, r9
 800a144:	ea4f 175c 	mov.w	r7, ip, lsr #5
 800a148:	fb07 551a 	mls	r5, r7, sl, r5
 800a14c:	f836 7017 	ldrh.w	r7, [r6, r7, lsl #1]
 800a150:	f8a2 7023 	strh.w	r7, [r2, #35]	; 0x23
 800a154:	f836 5015 	ldrh.w	r5, [r6, r5, lsl #1]
 800a158:	f8a2 5025 	strh.w	r5, [r2, #37]	; 0x25
 800a15c:	d8e5      	bhi.n	800a12a <_ZN4core3fmt3num3imp7fmt_u3217hd5f71347e2daefbcE+0x40>
 800a15e:	e9dd 6703 	ldrd	r6, r7, [sp, #12]
 800a162:	f103 0227 	add.w	r2, r3, #39	; 0x27
 800a166:	4620      	mov	r0, r4
 800a168:	2863      	cmp	r0, #99	; 0x63
 800a16a:	dc10      	bgt.n	800a18e <_ZN4core3fmt3num3imp7fmt_u3217hd5f71347e2daefbcE+0xa4>
 800a16c:	4603      	mov	r3, r0
 800a16e:	2b09      	cmp	r3, #9
 800a170:	dd25      	ble.n	800a1be <_ZN4core3fmt3num3imp7fmt_u3217hd5f71347e2daefbcE+0xd4>
 800a172:	f646 31b6 	movw	r1, #27574	; 0x6bb6
 800a176:	1e90      	subs	r0, r2, #2
 800a178:	f6c0 0101 	movt	r1, #2049	; 0x801
 800a17c:	f10d 0215 	add.w	r2, sp, #21
 800a180:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 800a184:	5211      	strh	r1, [r2, r0]
 800a186:	e020      	b.n	800a1ca <_ZN4core3fmt3num3imp7fmt_u3217hd5f71347e2daefbcE+0xe0>
 800a188:	2227      	movs	r2, #39	; 0x27
 800a18a:	2863      	cmp	r0, #99	; 0x63
 800a18c:	ddee      	ble.n	800a16c <_ZN4core3fmt3num3imp7fmt_u3217hd5f71347e2daefbcE+0x82>
 800a18e:	f248 531f 	movw	r3, #34079	; 0x851f
 800a192:	b281      	uxth	r1, r0
 800a194:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 800a198:	3a02      	subs	r2, #2
 800a19a:	fba1 1303 	umull	r1, r3, r1, r3
 800a19e:	2164      	movs	r1, #100	; 0x64
 800a1a0:	095b      	lsrs	r3, r3, #5
 800a1a2:	fb03 0011 	mls	r0, r3, r1, r0
 800a1a6:	f646 31b6 	movw	r1, #27574	; 0x6bb6
 800a1aa:	f6c0 0101 	movt	r1, #2049	; 0x801
 800a1ae:	b280      	uxth	r0, r0
 800a1b0:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
 800a1b4:	f10d 0115 	add.w	r1, sp, #21
 800a1b8:	5288      	strh	r0, [r1, r2]
 800a1ba:	2b09      	cmp	r3, #9
 800a1bc:	dcd9      	bgt.n	800a172 <_ZN4core3fmt3num3imp7fmt_u3217hd5f71347e2daefbcE+0x88>
 800a1be:	1e50      	subs	r0, r2, #1
 800a1c0:	f10d 0215 	add.w	r2, sp, #21
 800a1c4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a1c8:	5411      	strb	r1, [r2, r0]
 800a1ca:	f1c0 0127 	rsb	r1, r0, #39	; 0x27
 800a1ce:	f10d 0215 	add.w	r2, sp, #21
 800a1d2:	4410      	add	r0, r2
 800a1d4:	f246 7280 	movw	r2, #26496	; 0x6780
 800a1d8:	e9cd 0100 	strd	r0, r1, [sp]
 800a1dc:	f6c0 0201 	movt	r2, #2049	; 0x801
 800a1e0:	4638      	mov	r0, r7
 800a1e2:	4631      	mov	r1, r6
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	f7ff f860 	bl	80092aa <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE>
 800a1ea:	b00f      	add	sp, #60	; 0x3c
 800a1ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a1f0 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h4a5378243facc467E>:
 800a1f0:	7800      	ldrb	r0, [r0, #0]
 800a1f2:	460a      	mov	r2, r1
 800a1f4:	2101      	movs	r1, #1
 800a1f6:	f7ff bf78 	b.w	800a0ea <_ZN4core3fmt3num3imp7fmt_u3217hd5f71347e2daefbcE>

0800a1fa <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17h8362f63c9a899390E>:
 800a1fa:	6800      	ldr	r0, [r0, #0]
 800a1fc:	460a      	mov	r2, r1
 800a1fe:	2100      	movs	r1, #0
 800a200:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a204:	bfc8      	it	gt
 800a206:	2101      	movgt	r1, #1
 800a208:	2800      	cmp	r0, #0
 800a20a:	bf48      	it	mi
 800a20c:	4240      	negmi	r0, r0
 800a20e:	f7ff bf6c 	b.w	800a0ea <_ZN4core3fmt3num3imp7fmt_u3217hd5f71347e2daefbcE>

0800a212 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17h490cd499cca46fe6E>:
 800a212:	6800      	ldr	r0, [r0, #0]
 800a214:	460a      	mov	r2, r1
 800a216:	2101      	movs	r1, #1
 800a218:	f7ff bf67 	b.w	800a0ea <_ZN4core3fmt3num3imp7fmt_u3217hd5f71347e2daefbcE>

0800a21c <_ZN4core3fmt3num3imp7fmt_u6417hdb119abf1a24b3d2E>:
 800a21c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a220:	b08f      	sub	sp, #60	; 0x3c
 800a222:	4606      	mov	r6, r0
 800a224:	f242 7010 	movw	r0, #10000	; 0x2710
 800a228:	1a30      	subs	r0, r6, r0
 800a22a:	461d      	mov	r5, r3
 800a22c:	4614      	mov	r4, r2
 800a22e:	f171 0000 	sbcs.w	r0, r1, #0
 800a232:	d34c      	bcc.n	800a2ce <_ZN4core3fmt3num3imp7fmt_u6417hdb119abf1a24b3d2E+0xb2>
 800a234:	f646 38b6 	movw	r8, #27574	; 0x6bb6
 800a238:	f24e 0bff 	movw	fp, #57599	; 0xe0ff
 800a23c:	f10d 0915 	add.w	r9, sp, #21
 800a240:	e9cd 4503 	strd	r4, r5, [sp, #12]
 800a244:	460f      	mov	r7, r1
 800a246:	2564      	movs	r5, #100	; 0x64
 800a248:	f6c0 0801 	movt	r8, #2049	; 0x801
 800a24c:	f2c0 5bf5 	movt	fp, #1525	; 0x5f5
 800a250:	f04f 0a00 	mov.w	sl, #0
 800a254:	4630      	mov	r0, r6
 800a256:	4639      	mov	r1, r7
 800a258:	f242 7210 	movw	r2, #10000	; 0x2710
 800a25c:	2300      	movs	r3, #0
 800a25e:	f00b fba5 	bl	80159ac <__aeabi_uldivmod>
 800a262:	f242 7210 	movw	r2, #10000	; 0x2710
 800a266:	f248 531f 	movw	r3, #34079	; 0x851f
 800a26a:	fb00 6212 	mls	r2, r0, r2, r6
 800a26e:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 800a272:	fba2 3403 	umull	r3, r4, r2, r3
 800a276:	0963      	lsrs	r3, r4, #5
 800a278:	eb09 040a 	add.w	r4, r9, sl
 800a27c:	fb03 2215 	mls	r2, r3, r5, r2
 800a280:	f838 3013 	ldrh.w	r3, [r8, r3, lsl #1]
 800a284:	f8a4 3023 	strh.w	r3, [r4, #35]	; 0x23
 800a288:	f1aa 0a04 	sub.w	sl, sl, #4
 800a28c:	f838 2012 	ldrh.w	r2, [r8, r2, lsl #1]
 800a290:	f8a4 2025 	strh.w	r2, [r4, #37]	; 0x25
 800a294:	ebbb 0206 	subs.w	r2, fp, r6
 800a298:	f04f 0200 	mov.w	r2, #0
 800a29c:	4606      	mov	r6, r0
 800a29e:	41ba      	sbcs	r2, r7
 800a2a0:	460f      	mov	r7, r1
 800a2a2:	d3d7      	bcc.n	800a254 <_ZN4core3fmt3num3imp7fmt_u6417hdb119abf1a24b3d2E+0x38>
 800a2a4:	e9dd 4503 	ldrd	r4, r5, [sp, #12]
 800a2a8:	f10a 0127 	add.w	r1, sl, #39	; 0x27
 800a2ac:	4606      	mov	r6, r0
 800a2ae:	2e63      	cmp	r6, #99	; 0x63
 800a2b0:	dc10      	bgt.n	800a2d4 <_ZN4core3fmt3num3imp7fmt_u6417hdb119abf1a24b3d2E+0xb8>
 800a2b2:	4630      	mov	r0, r6
 800a2b4:	2809      	cmp	r0, #9
 800a2b6:	dd25      	ble.n	800a304 <_ZN4core3fmt3num3imp7fmt_u6417hdb119abf1a24b3d2E+0xe8>
 800a2b8:	f646 32b6 	movw	r2, #27574	; 0x6bb6
 800a2bc:	3902      	subs	r1, #2
 800a2be:	f6c0 0201 	movt	r2, #2049	; 0x801
 800a2c2:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
 800a2c6:	f10d 0215 	add.w	r2, sp, #21
 800a2ca:	5250      	strh	r0, [r2, r1]
 800a2cc:	e01f      	b.n	800a30e <_ZN4core3fmt3num3imp7fmt_u6417hdb119abf1a24b3d2E+0xf2>
 800a2ce:	2127      	movs	r1, #39	; 0x27
 800a2d0:	2e63      	cmp	r6, #99	; 0x63
 800a2d2:	ddee      	ble.n	800a2b2 <_ZN4core3fmt3num3imp7fmt_u6417hdb119abf1a24b3d2E+0x96>
 800a2d4:	f248 521f 	movw	r2, #34079	; 0x851f
 800a2d8:	b2b0      	uxth	r0, r6
 800a2da:	f2c5 12eb 	movt	r2, #20971	; 0x51eb
 800a2de:	f646 33b6 	movw	r3, #27574	; 0x6bb6
 800a2e2:	fba0 0202 	umull	r0, r2, r0, r2
 800a2e6:	f6c0 0301 	movt	r3, #2049	; 0x801
 800a2ea:	3902      	subs	r1, #2
 800a2ec:	0950      	lsrs	r0, r2, #5
 800a2ee:	2264      	movs	r2, #100	; 0x64
 800a2f0:	fb00 6212 	mls	r2, r0, r2, r6
 800a2f4:	b292      	uxth	r2, r2
 800a2f6:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800a2fa:	f10d 0315 	add.w	r3, sp, #21
 800a2fe:	525a      	strh	r2, [r3, r1]
 800a300:	2809      	cmp	r0, #9
 800a302:	dcd9      	bgt.n	800a2b8 <_ZN4core3fmt3num3imp7fmt_u6417hdb119abf1a24b3d2E+0x9c>
 800a304:	3901      	subs	r1, #1
 800a306:	f10d 0215 	add.w	r2, sp, #21
 800a30a:	3030      	adds	r0, #48	; 0x30
 800a30c:	5450      	strb	r0, [r2, r1]
 800a30e:	f1c1 0027 	rsb	r0, r1, #39	; 0x27
 800a312:	f10d 0215 	add.w	r2, sp, #21
 800a316:	4411      	add	r1, r2
 800a318:	f246 7280 	movw	r2, #26496	; 0x6780
 800a31c:	e9cd 1000 	strd	r1, r0, [sp]
 800a320:	f6c0 0201 	movt	r2, #2049	; 0x801
 800a324:	4628      	mov	r0, r5
 800a326:	4621      	mov	r1, r4
 800a328:	2300      	movs	r3, #0
 800a32a:	f7fe ffbe 	bl	80092aa <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE>
 800a32e:	b00f      	add	sp, #60	; 0x3c
 800a330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a334 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i64$GT$3fmt17hf1595badf4d53d6dE>:
 800a334:	468c      	mov	ip, r1
 800a336:	e9d0 0100 	ldrd	r0, r1, [r0]
 800a33a:	2200      	movs	r2, #0
 800a33c:	f1b1 3fff 	cmp.w	r1, #4294967295
 800a340:	bfc8      	it	gt
 800a342:	2201      	movgt	r2, #1
 800a344:	eb10 70e1 	adds.w	r0, r0, r1, asr #31
 800a348:	eb41 73e1 	adc.w	r3, r1, r1, asr #31
 800a34c:	ea80 70e1 	eor.w	r0, r0, r1, asr #31
 800a350:	ea83 71e1 	eor.w	r1, r3, r1, asr #31
 800a354:	4663      	mov	r3, ip
 800a356:	f7ff bf61 	b.w	800a21c <_ZN4core3fmt3num3imp7fmt_u6417hdb119abf1a24b3d2E>

0800a35a <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h8430cdf27e8fe239E>:
 800a35a:	460b      	mov	r3, r1
 800a35c:	e9d0 1200 	ldrd	r1, r2, [r0]
 800a360:	4618      	mov	r0, r3
 800a362:	f7ff b8df 	b.w	8009524 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E>
	...

0800a368 <__semihost>:
	//    openocd -f interface/stlink-v2.cfg -f target/stm32f1x.cfg -f scripts/debug.ocd

	//  Warning: This code will trigger a breakpoint and hang unless a debugger is connected.
	//  That's how ARM Semihosting sends a command to the debugger to print a message.
	//  This code MUST be disabled on production devices.
    if (!log_enabled) return -1;
 800a368:	4b07      	ldr	r3, [pc, #28]	; (800a388 <__semihost+0x20>)
 800a36a:	781b      	ldrb	r3, [r3, #0]
 800a36c:	b14b      	cbz	r3, 800a382 <__semihost+0x1a>
static int __semihost(int command, void* message) {
 800a36e:	b410      	push	{r4}
 800a370:	4602      	mov	r2, r0
 800a372:	460c      	mov	r4, r1
    __asm( 
 800a374:	4610      	mov	r0, r2
 800a376:	4621      	mov	r1, r4
 800a378:	beab      	bkpt	0x00ab
		[cmd] "r" (command), 
		[msg] "r" (message)
	:  //  Clobbered register list:
		"r0", "r1", "memory"
	);
	return 0;  //  TODO
 800a37a:	2000      	movs	r0, #0
}
 800a37c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a380:	4770      	bx	lr
    if (!log_enabled) return -1;
 800a382:	f04f 30ff 	mov.w	r0, #4294967295
}
 800a386:	4770      	bx	lr
 800a388:	20000210 	.word	0x20000210

0800a38c <debugger_connected>:
// #define SYS_RENAME (0xf)
// #define SYS_EXIT   (0x18)

static int debugger_connected(void) {
    //  Return non-zero if debugger is connected. From repos/apache-mynewt-core/hw/mcu/ambiq/apollo2/src/hal_system.c
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
 800a38c:	4b02      	ldr	r3, [pc, #8]	; (800a398 <debugger_connected+0xc>)
 800a38e:	6818      	ldr	r0, [r3, #0]
}
 800a390:	f000 0001 	and.w	r0, r0, #1
 800a394:	4770      	bx	lr
 800a396:	bf00      	nop
 800a398:	e000edf0 	.word	0xe000edf0

0800a39c <semihost_write>:
#endif  //  !DISABLE_SEMIHOSTING

// We normally set the file handle to 2 to write to the debugger's stderr output.
#define SEMIHOST_HANDLE 2

static int semihost_write(uint32_t fh, const unsigned char *buffer, unsigned int length) {
 800a39c:	b570      	push	{r4, r5, r6, lr}
 800a39e:	b084      	sub	sp, #16
 800a3a0:	4606      	mov	r6, r0
 800a3a2:	460d      	mov	r5, r1
 800a3a4:	4614      	mov	r4, r2
    //  Write "length" number of bytes from "buffer" to the debugger's file handle fh.
    //  We normally set fh=2 to write to the debugger's stderr output.
#ifdef DISABLE_SEMIHOSTING
    return 0;
#else
    if (!debugger_connected()) { return 0; }  //  If debugger is not connected, quit.
 800a3a6:	f7ff fff1 	bl	800a38c <debugger_connected>
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	b108      	cbz	r0, 800a3b2 <semihost_write+0x16>
    if (length == 0) { return 0; }
 800a3ae:	b91c      	cbnz	r4, 800a3b8 <semihost_write+0x1c>
 800a3b0:	2300      	movs	r3, #0
    args[0] = (uint32_t)fh;
    args[1] = (uint32_t)buffer;
    args[2] = (uint32_t)length;
    return __semihost(SYS_WRITE, args);
#endif  //  DISABLE_SEMIHOSTING
}
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	b004      	add	sp, #16
 800a3b6:	bd70      	pop	{r4, r5, r6, pc}
    args[0] = (uint32_t)fh;
 800a3b8:	9601      	str	r6, [sp, #4]
    args[1] = (uint32_t)buffer;
 800a3ba:	9502      	str	r5, [sp, #8]
    args[2] = (uint32_t)length;
 800a3bc:	9403      	str	r4, [sp, #12]
    return __semihost(SYS_WRITE, args);
 800a3be:	a901      	add	r1, sp, #4
 800a3c0:	2005      	movs	r0, #5
 800a3c2:	f7ff ffd1 	bl	800a368 <__semihost>
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	e7f3      	b.n	800a3b2 <semihost_write+0x16>
	...

0800a3cc <console_flush>:

static struct os_mbuf *semihost_mbuf = NULL;

void console_flush(void) {
 800a3cc:	b538      	push	{r3, r4, r5, lr}
    //  Flush output buffer to the console log.  This will be slow.
    if (!log_enabled) { return; }       //  Skip if log not enabled.
 800a3ce:	4b0e      	ldr	r3, [pc, #56]	; (800a408 <console_flush+0x3c>)
 800a3d0:	781b      	ldrb	r3, [r3, #0]
 800a3d2:	b1bb      	cbz	r3, 800a404 <console_flush+0x38>
    if (!semihost_mbuf) { return; }     //  Buffer is empty, nothing to write.
 800a3d4:	4b0d      	ldr	r3, [pc, #52]	; (800a40c <console_flush+0x40>)
 800a3d6:	681d      	ldr	r5, [r3, #0]
 800a3d8:	b1a5      	cbz	r5, 800a404 <console_flush+0x38>
#endif

static inline int
os_arch_in_isr(void)
{
    return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
 800a3da:	4b0d      	ldr	r3, [pc, #52]	; (800a410 <console_flush+0x44>)
 800a3dc:	685b      	ldr	r3, [r3, #4]
 800a3de:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (os_arch_in_isr()) { return; }   //  Don't flush if we are called during an interrupt.
 800a3e2:	b97b      	cbnz	r3, 800a404 <console_flush+0x38>

    //  Swap mbufs first to prevent concurrency problems.
    struct os_mbuf *old = semihost_mbuf;
    semihost_mbuf = NULL;
 800a3e4:	4b09      	ldr	r3, [pc, #36]	; (800a40c <console_flush+0x40>)
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	601a      	str	r2, [r3, #0]

    struct os_mbuf *m = old;
 800a3ea:	462c      	mov	r4, r5
    while (m) {  //  For each mbuf in the chain...
 800a3ec:	e005      	b.n	800a3fa <console_flush+0x2e>
        const unsigned char *data = OS_MBUF_DATA(m, const unsigned char *);  //  Fetch the data.
        int size = m->om_len;                         //  Fetch the size.
        semihost_write(SEMIHOST_HANDLE, data, size);  //  Write the data to Semihosting output.
 800a3ee:	88e2      	ldrh	r2, [r4, #6]
 800a3f0:	6821      	ldr	r1, [r4, #0]
 800a3f2:	2002      	movs	r0, #2
 800a3f4:	f7ff ffd2 	bl	800a39c <semihost_write>
        m = m->om_next.sle_next;                      //  Fetch next mbuf in the chain.
 800a3f8:	68e4      	ldr	r4, [r4, #12]
    while (m) {  //  For each mbuf in the chain...
 800a3fa:	2c00      	cmp	r4, #0
 800a3fc:	d1f7      	bne.n	800a3ee <console_flush+0x22>
    }
    if (old) { os_mbuf_free_chain(old); }  //  Deallocate the old chain.
 800a3fe:	4628      	mov	r0, r5
 800a400:	f002 fd2c 	bl	800ce5c <os_mbuf_free_chain>
}
 800a404:	bd38      	pop	{r3, r4, r5, pc}
 800a406:	bf00      	nop
 800a408:	20000210 	.word	0x20000210
 800a40c:	200003c8 	.word	0x200003c8
 800a410:	e000ed00 	.word	0xe000ed00

0800a414 <disable_buffer>:
void disable_buffer(void) { buffer_enabled = false; console_flush(); }  //  Disable buffering.
 800a414:	b508      	push	{r3, lr}
 800a416:	f7ff ffd9 	bl	800a3cc <console_flush>
 800a41a:	bd08      	pop	{r3, pc}

0800a41c <console_buffer>:

void console_buffer(const char *buffer, unsigned int length) {
 800a41c:	b538      	push	{r3, r4, r5, lr}
    //  Append "length" number of bytes from "buffer" to the output buffer.
    int rc;
    if (!log_enabled) { return; }           //  Skip if log not enabled.
 800a41e:	4b12      	ldr	r3, [pc, #72]	; (800a468 <console_buffer+0x4c>)
 800a420:	781b      	ldrb	r3, [r3, #0]
 800a422:	b903      	cbnz	r3, 800a426 <console_buffer+0xa>
    //  Limit the buffer size.  Quit if too big.
    if (os_mbuf_len(semihost_mbuf) + length >= OUTPUT_BUFFER_SIZE) { return; }
    //  Append the data to the mbuf chain.  This may increase the numbere of mbufs in the chain.
    rc = os_mbuf_append(semihost_mbuf, buffer, length);
    if (rc) { return; }  //  If out of memory, quit.
}
 800a424:	bd38      	pop	{r3, r4, r5, pc}
 800a426:	460d      	mov	r5, r1
 800a428:	4604      	mov	r4, r0
    if (!debugger_connected()) { return; }  //  If debugger is not connected, quit.
 800a42a:	f7ff ffaf 	bl	800a38c <debugger_connected>
 800a42e:	2800      	cmp	r0, #0
 800a430:	d0f8      	beq.n	800a424 <console_buffer+0x8>
    if (!semihost_mbuf) {                   //  Allocate mbuf if not already allocated.
 800a432:	4b0e      	ldr	r3, [pc, #56]	; (800a46c <console_buffer+0x50>)
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	b173      	cbz	r3, 800a456 <console_buffer+0x3a>
    if (os_mbuf_len(semihost_mbuf) + length >= OUTPUT_BUFFER_SIZE) { return; }
 800a438:	4b0c      	ldr	r3, [pc, #48]	; (800a46c <console_buffer+0x50>)
 800a43a:	6818      	ldr	r0, [r3, #0]
 800a43c:	f002 fd20 	bl	800ce80 <os_mbuf_len>
 800a440:	4428      	add	r0, r5
 800a442:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 800a446:	d2ed      	bcs.n	800a424 <console_buffer+0x8>
    rc = os_mbuf_append(semihost_mbuf, buffer, length);
 800a448:	b2aa      	uxth	r2, r5
 800a44a:	4621      	mov	r1, r4
 800a44c:	4b07      	ldr	r3, [pc, #28]	; (800a46c <console_buffer+0x50>)
 800a44e:	6818      	ldr	r0, [r3, #0]
 800a450:	f002 fd20 	bl	800ce94 <os_mbuf_append>
 800a454:	e7e6      	b.n	800a424 <console_buffer+0x8>
        semihost_mbuf = os_msys_get_pkthdr(length, 0);
 800a456:	2100      	movs	r1, #0
 800a458:	b2a8      	uxth	r0, r5
 800a45a:	f002 ff97 	bl	800d38c <os_msys_get_pkthdr>
 800a45e:	4b03      	ldr	r3, [pc, #12]	; (800a46c <console_buffer+0x50>)
 800a460:	6018      	str	r0, [r3, #0]
        if (!semihost_mbuf) { return; }  //  If out of memory, quit.
 800a462:	2800      	cmp	r0, #0
 800a464:	d1e8      	bne.n	800a438 <console_buffer+0x1c>
 800a466:	e7dd      	b.n	800a424 <console_buffer+0x8>
 800a468:	20000210 	.word	0x20000210
 800a46c:	200003c8 	.word	0x200003c8

0800a470 <semihosting_console_write_ch>:
    float f_abs = *neg ? -f : f;          //  Absolute value of f
    *i = (int) f_abs;                     //  Integer part
    *d = ((int) (1000000.0f * f_abs)) % 1000000;  //  6 decimal places
}

static void semihosting_console_write_ch(char c) {
 800a470:	b500      	push	{lr}
 800a472:	b083      	sub	sp, #12
 800a474:	f88d 0007 	strb.w	r0, [sp, #7]
    if (c == '\r') { return; }  //  Don't display \r.
 800a478:	280d      	cmp	r0, #13
 800a47a:	d004      	beq.n	800a486 <semihosting_console_write_ch+0x16>
    console_buffer(&c, 1);  //  Append the char to the output buffer.
 800a47c:	2101      	movs	r1, #1
 800a47e:	f10d 0007 	add.w	r0, sp, #7
 800a482:	f7ff ffcb 	bl	800a41c <console_buffer>
    //  if (c == '\n') { console_flush(); }  //  If we see a newline, flush the buffer.
}
 800a486:	b003      	add	sp, #12
 800a488:	f85d fb04 	ldr.w	pc, [sp], #4

0800a48c <console_printhex>:
void console_printhex(uint8_t v) {
 800a48c:	b510      	push	{r4, lr}
 800a48e:	b082      	sub	sp, #8
    for(uint8_t divisor = 16; divisor >= 1; divisor = divisor / 16) {
 800a490:	2310      	movs	r3, #16
    int length = 0;
 800a492:	2200      	movs	r2, #0
    for(uint8_t divisor = 16; divisor >= 1; divisor = divisor / 16) {
 800a494:	e005      	b.n	800a4a2 <console_printhex+0x16>
        v = v % divisor;
 800a496:	fbb0 f1f3 	udiv	r1, r0, r3
 800a49a:	fb03 0011 	mls	r0, r3, r1, r0
 800a49e:	b2c0      	uxtb	r0, r0
    for(uint8_t divisor = 16; divisor >= 1; divisor = divisor / 16) {
 800a4a0:	091b      	lsrs	r3, r3, #4
 800a4a2:	b18b      	cbz	r3, 800a4c8 <console_printhex+0x3c>
        char digit = '0' + (char)(v / divisor);
 800a4a4:	fbb0 f4f3 	udiv	r4, r0, r3
 800a4a8:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800a4ac:	b2c9      	uxtb	r1, r1
        if (digit > '9') { digit = digit - 10 - '0' + 'a'; }
 800a4ae:	2939      	cmp	r1, #57	; 0x39
 800a4b0:	d902      	bls.n	800a4b8 <console_printhex+0x2c>
 800a4b2:	f104 0157 	add.w	r1, r4, #87	; 0x57
 800a4b6:	b2c9      	uxtb	r1, r1
            if (length < size) {
 800a4b8:	2a02      	cmp	r2, #2
 800a4ba:	dcec      	bgt.n	800a496 <console_printhex+0xa>
                buffer[length++] = digit;
 800a4bc:	ac02      	add	r4, sp, #8
 800a4be:	4414      	add	r4, r2
 800a4c0:	f804 1c04 	strb.w	r1, [r4, #-4]
 800a4c4:	3201      	adds	r2, #1
 800a4c6:	e7e6      	b.n	800a496 <console_printhex+0xa>
    if (length == 0) { buffer[length++] = '0'; };
 800a4c8:	b92a      	cbnz	r2, 800a4d6 <console_printhex+0x4a>
 800a4ca:	ab02      	add	r3, sp, #8
 800a4cc:	4413      	add	r3, r2
 800a4ce:	2130      	movs	r1, #48	; 0x30
 800a4d0:	f803 1c04 	strb.w	r1, [r3, #-4]
 800a4d4:	3201      	adds	r2, #1
    if (length < size) buffer[length] = 0;
 800a4d6:	2a02      	cmp	r2, #2
 800a4d8:	dc04      	bgt.n	800a4e4 <console_printhex+0x58>
 800a4da:	ab02      	add	r3, sp, #8
 800a4dc:	441a      	add	r2, r3
 800a4de:	2300      	movs	r3, #0
 800a4e0:	f802 3c04 	strb.w	r3, [r2, #-4]
    buffer[size - 1] = 0;  //  Terminate in case of overflow.
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	f88d 3006 	strb.w	r3, [sp, #6]
    console_buffer(buffer, strlen(buffer));
 800a4ea:	a801      	add	r0, sp, #4
 800a4ec:	f003 fd7d 	bl	800dfea <strlen>
 800a4f0:	4601      	mov	r1, r0
 800a4f2:	a801      	add	r0, sp, #4
 800a4f4:	f7ff ff92 	bl	800a41c <console_buffer>
}
 800a4f8:	b002      	add	sp, #8
 800a4fa:	bd10      	pop	{r4, pc}

0800a4fc <console_printint>:
void console_printint(int i) {
 800a4fc:	b508      	push	{r3, lr}
    console_printf("%d", i);
 800a4fe:	4601      	mov	r1, r0
 800a500:	4801      	ldr	r0, [pc, #4]	; (800a508 <console_printint+0xc>)
 800a502:	f000 f873 	bl	800a5ec <console_printf>
}
 800a506:	bd08      	pop	{r3, pc}
 800a508:	0801872c 	.word	0x0801872c

0800a50c <console_dump>:
    if (buffer == NULL || len == 0) { return; }
 800a50c:	b180      	cbz	r0, 800a530 <console_dump+0x24>
void console_dump(const uint8_t *buffer, unsigned int len) {
 800a50e:	b570      	push	{r4, r5, r6, lr}
 800a510:	4606      	mov	r6, r0
    if (buffer == NULL || len == 0) { return; }
 800a512:	b161      	cbz	r1, 800a52e <console_dump+0x22>
 800a514:	460d      	mov	r5, r1
	for (int i = 0; i < len; i++) { console_printhex(buffer[i]); console_buffer(" ", 1); } 
 800a516:	2400      	movs	r4, #0
 800a518:	e007      	b.n	800a52a <console_dump+0x1e>
 800a51a:	5d30      	ldrb	r0, [r6, r4]
 800a51c:	f7ff ffb6 	bl	800a48c <console_printhex>
 800a520:	2101      	movs	r1, #1
 800a522:	4804      	ldr	r0, [pc, #16]	; (800a534 <console_dump+0x28>)
 800a524:	f7ff ff7a 	bl	800a41c <console_buffer>
 800a528:	3401      	adds	r4, #1
 800a52a:	42ac      	cmp	r4, r5
 800a52c:	d3f5      	bcc.n	800a51a <console_dump+0xe>
}
 800a52e:	bd70      	pop	{r4, r5, r6, pc}
 800a530:	4770      	bx	lr
 800a532:	bf00      	nop
 800a534:	08017e88 	.word	0x08017e88

0800a538 <console_out_nolock>:

int console_out_nolock(int character) {
 800a538:	b538      	push	{r3, r4, r5, lr}
    char c = (char)character;
 800a53a:	b2c5      	uxtb	r5, r0
    if (g_silence_console) { return c; }
 800a53c:	4b0b      	ldr	r3, [pc, #44]	; (800a56c <console_out_nolock+0x34>)
 800a53e:	781b      	ldrb	r3, [r3, #0]
 800a540:	b953      	cbnz	r3, 800a558 <console_out_nolock+0x20>
 800a542:	4604      	mov	r4, r0
    if ('\n' == c) {
 800a544:	2d0a      	cmp	r5, #10
 800a546:	d009      	beq.n	800a55c <console_out_nolock+0x24>
        semihosting_console_write_ch('\r');
        console_is_midline = 0;
    } else {
        console_is_midline = 1;
 800a548:	4b09      	ldr	r3, [pc, #36]	; (800a570 <console_out_nolock+0x38>)
 800a54a:	2201      	movs	r2, #1
 800a54c:	601a      	str	r2, [r3, #0]
    }
    semihosting_console_write_ch(c);
 800a54e:	4628      	mov	r0, r5
 800a550:	f7ff ff8e 	bl	800a470 <semihosting_console_write_ch>
    return character;
 800a554:	4620      	mov	r0, r4
}
 800a556:	bd38      	pop	{r3, r4, r5, pc}
 800a558:	4628      	mov	r0, r5
    if (g_silence_console) { return c; }
 800a55a:	e7fc      	b.n	800a556 <console_out_nolock+0x1e>
        semihosting_console_write_ch('\r');
 800a55c:	200d      	movs	r0, #13
 800a55e:	f7ff ff87 	bl	800a470 <semihosting_console_write_ch>
        console_is_midline = 0;
 800a562:	4b03      	ldr	r3, [pc, #12]	; (800a570 <console_out_nolock+0x38>)
 800a564:	2200      	movs	r2, #0
 800a566:	601a      	str	r2, [r3, #0]
 800a568:	e7f1      	b.n	800a54e <console_out_nolock+0x16>
 800a56a:	bf00      	nop
 800a56c:	200037b5 	.word	0x200037b5
 800a570:	200037b0 	.word	0x200037b0

0800a574 <semihosting_console_init>:

void console_rx_restart(void) {}

int semihosting_console_is_init(void) { return 1; }

int semihosting_console_init(void) { return 0; }
 800a574:	2000      	movs	r0, #0
 800a576:	4770      	bx	lr

0800a578 <console_write>:

int console_unlock(void) { return OS_OK; }

int console_out(int c) { return console_out_nolock(c); }

void console_write(const char *str, int cnt) {
 800a578:	b570      	push	{r4, r5, r6, lr}
 800a57a:	4606      	mov	r6, r0
 800a57c:	460d      	mov	r5, r1
    int i;
    for (i = 0; i < cnt; i++) {
 800a57e:	2400      	movs	r4, #0
 800a580:	42ac      	cmp	r4, r5
 800a582:	da07      	bge.n	800a594 <console_write+0x1c>
        if (console_out_nolock((int)str[i]) == EOF) { break; }
 800a584:	5d30      	ldrb	r0, [r6, r4]
 800a586:	f7ff ffd7 	bl	800a538 <console_out_nolock>
 800a58a:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a58e:	d001      	beq.n	800a594 <console_write+0x1c>
    for (i = 0; i < cnt; i++) {
 800a590:	3401      	adds	r4, #1
 800a592:	e7f5      	b.n	800a580 <console_write+0x8>
    }
}
 800a594:	bd70      	pop	{r4, r5, r6, pc}

0800a596 <console_blocking_mode>:

void console_blocking_mode(void) {
 800a596:	b508      	push	{r3, lr}
    disable_buffer();
 800a598:	f7ff ff3c 	bl	800a414 <disable_buffer>
}
 800a59c:	bd08      	pop	{r3, pc}
	...

0800a5a0 <console_pkg_init>:

void console_deinit(void) {}

void console_reinit(void) {}

void console_pkg_init(void) {
 800a5a0:	b510      	push	{r4, lr}
 800a5a2:	b082      	sub	sp, #8
    int rc = 0;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
 800a5a4:	4b0d      	ldr	r3, [pc, #52]	; (800a5dc <console_pkg_init+0x3c>)
 800a5a6:	781b      	ldrb	r3, [r3, #0]
 800a5a8:	b193      	cbz	r3, 800a5d0 <console_pkg_init+0x30>

    os_eventq_init(&avail_queue);
 800a5aa:	480d      	ldr	r0, [pc, #52]	; (800a5e0 <console_pkg_init+0x40>)
 800a5ac:	f002 fb2a 	bl	800cc04 <os_eventq_init>
    os_mutex_init(&console_write_lock);
 800a5b0:	480c      	ldr	r0, [pc, #48]	; (800a5e4 <console_pkg_init+0x44>)
 800a5b2:	f002 ff19 	bl	800d3e8 <os_mutex_init>

#if MYNEWT_VAL(CONSOLE_SEMIHOSTING)
    rc = semihosting_console_init();
 800a5b6:	f7ff ffdd 	bl	800a574 <semihosting_console_init>
#endif
    SYSINIT_PANIC_ASSERT(rc == 0);
 800a5ba:	b138      	cbz	r0, 800a5cc <console_pkg_init+0x2c>
 800a5bc:	2000      	movs	r0, #0
 800a5be:	9000      	str	r0, [sp, #0]
 800a5c0:	4b09      	ldr	r3, [pc, #36]	; (800a5e8 <console_pkg_init+0x48>)
 800a5c2:	681c      	ldr	r4, [r3, #0]
 800a5c4:	4603      	mov	r3, r0
 800a5c6:	4602      	mov	r2, r0
 800a5c8:	4601      	mov	r1, r0
 800a5ca:	47a0      	blx	r4
}
 800a5cc:	b002      	add	sp, #8
 800a5ce:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
 800a5d0:	461a      	mov	r2, r3
 800a5d2:	4619      	mov	r1, r3
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	f001 fffd 	bl	800c5d4 <__assert_func>
 800a5da:	bf00      	nop
 800a5dc:	20003838 	.word	0x20003838
 800a5e0:	200003cc 	.word	0x200003cc
 800a5e4:	200003dc 	.word	0x200003dc
 800a5e8:	20000228 	.word	0x20000228

0800a5ec <console_printf>:
 *                                  unlimited.  This return value is analogous
 *                                  to that of snprintf.
 */
int
console_printf(const char *fmt, ...)
{
 800a5ec:	b40f      	push	{r0, r1, r2, r3}
 800a5ee:	b510      	push	{r4, lr}
 800a5f0:	b082      	sub	sp, #8
    va_list args;
    int num_chars;

    num_chars = 0;

    if (console_get_ticks()) {
 800a5f2:	f000 f81f 	bl	800a634 <console_get_ticks>
 800a5f6:	b160      	cbz	r0, 800a612 <console_printf+0x26>
        /* Prefix each line with a timestamp. */
        if (!console_is_midline) {
 800a5f8:	4b0c      	ldr	r3, [pc, #48]	; (800a62c <console_printf+0x40>)
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	b10b      	cbz	r3, 800a602 <console_printf+0x16>
    num_chars = 0;
 800a5fe:	2400      	movs	r4, #0
 800a600:	e008      	b.n	800a614 <console_printf+0x28>
            num_chars += printf("%06lu ", (unsigned long)os_time_get());
 800a602:	f003 fae3 	bl	800dbcc <os_time_get>
 800a606:	4601      	mov	r1, r0
 800a608:	4809      	ldr	r0, [pc, #36]	; (800a630 <console_printf+0x44>)
 800a60a:	f003 ffb3 	bl	800e574 <printf>
 800a60e:	4604      	mov	r4, r0
 800a610:	e000      	b.n	800a614 <console_printf+0x28>
    num_chars = 0;
 800a612:	2400      	movs	r4, #0
        }
    }

    va_start(args, fmt);
 800a614:	a905      	add	r1, sp, #20
 800a616:	9101      	str	r1, [sp, #4]
    num_chars += vprintf(fmt, args);
 800a618:	9804      	ldr	r0, [sp, #16]
 800a61a:	f003 ffdb 	bl	800e5d4 <vprintf>
    va_end(args);

    return num_chars;
}
 800a61e:	4420      	add	r0, r4
 800a620:	b002      	add	sp, #8
 800a622:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a626:	b004      	add	sp, #16
 800a628:	4770      	bx	lr
 800a62a:	bf00      	nop
 800a62c:	200037b0 	.word	0x200037b0
 800a630:	08017e8c 	.word	0x08017e8c

0800a634 <console_get_ticks>:

/* return value of CONSOLE_TICKS */
char console_get_ticks(void)
{
    return do_ticks;
}
 800a634:	4b01      	ldr	r3, [pc, #4]	; (800a63c <console_get_ticks+0x8>)
 800a636:	7818      	ldrb	r0, [r3, #0]
 800a638:	4770      	bx	lr
 800a63a:	bf00      	nop
 800a63c:	200003e8 	.word	0x200003e8

0800a640 <split_float>:
    return (rc);
}

///  Split the float f into 3 parts: neg is true if negative, the absolute integer part i, and the decimal part d, with 6 decimal places.
static void split_float(float f, bool *neg, int *i, int *d) {
    *neg = (f < 0.0f);                    //  True if f is negative
 800a640:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a648:	bf4c      	ite	mi
 800a64a:	2301      	movmi	r3, #1
 800a64c:	2300      	movpl	r3, #0
 800a64e:	7003      	strb	r3, [r0, #0]
    float f_abs = *neg ? -f : f;          //  Absolute value of f
 800a650:	b10b      	cbz	r3, 800a656 <split_float+0x16>
 800a652:	eeb1 0a40 	vneg.f32	s0, s0
    *i = (int) f_abs;                     //  Integer part
 800a656:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800a65a:	edc1 7a00 	vstr	s15, [r1]
    *d = ((int) (1000000.0f * f_abs)) % 1000000;  //  Six decimal places
 800a65e:	eddf 7a09 	vldr	s15, [pc, #36]	; 800a684 <split_float+0x44>
 800a662:	ee20 0a27 	vmul.f32	s0, s0, s15
 800a666:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800a66a:	ee17 3a90 	vmov	r3, s15
 800a66e:	4806      	ldr	r0, [pc, #24]	; (800a688 <split_float+0x48>)
 800a670:	fb80 1003 	smull	r1, r0, r0, r3
 800a674:	17d9      	asrs	r1, r3, #31
 800a676:	ebc1 41a0 	rsb	r1, r1, r0, asr #18
 800a67a:	4804      	ldr	r0, [pc, #16]	; (800a68c <split_float+0x4c>)
 800a67c:	fb00 3111 	mls	r1, r0, r1, r3
 800a680:	6011      	str	r1, [r2, #0]
}
 800a682:	4770      	bx	lr
 800a684:	49742400 	.word	0x49742400
 800a688:	431bde83 	.word	0x431bde83
 800a68c:	000f4240 	.word	0x000f4240

0800a690 <handle_coap_response>:
static void handle_coap_response(oc_client_response_t *data) {
 800a690:	b508      	push	{r3, lr}
    console_printf("handle_coap\n");
 800a692:	4802      	ldr	r0, [pc, #8]	; (800a69c <handle_coap_response+0xc>)
 800a694:	f7ff ffaa 	bl	800a5ec <console_printf>
}
 800a698:	bd08      	pop	{r3, pc}
 800a69a:	bf00      	nop
 800a69c:	08017e94 	.word	0x08017e94

0800a6a0 <json_write_mbuf>:
int json_write_mbuf(void *buf, char *data, int len) {
 800a6a0:	b508      	push	{r3, lr}
    if (oc_content_format != APPLICATION_JSON) { return 0; }  //  Exit if we are encoding CBOR, not JSON.
 800a6a2:	4b10      	ldr	r3, [pc, #64]	; (800a6e4 <json_write_mbuf+0x44>)
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	2b32      	cmp	r3, #50	; 0x32
 800a6a8:	d001      	beq.n	800a6ae <json_write_mbuf+0xe>
}
 800a6aa:	2000      	movs	r0, #0
 800a6ac:	bd08      	pop	{r3, pc}
    assert(coap_json_mbuf);
 800a6ae:	4b0e      	ldr	r3, [pc, #56]	; (800a6e8 <json_write_mbuf+0x48>)
 800a6b0:	6818      	ldr	r0, [r3, #0]
 800a6b2:	b158      	cbz	r0, 800a6cc <json_write_mbuf+0x2c>
    assert(data);
 800a6b4:	b181      	cbz	r1, 800a6d8 <json_write_mbuf+0x38>
    int rc = os_mbuf_append(coap_json_mbuf, data, len);  assert(rc == 0);
 800a6b6:	b292      	uxth	r2, r2
 800a6b8:	f002 fbec 	bl	800ce94 <os_mbuf_append>
 800a6bc:	2800      	cmp	r0, #0
 800a6be:	d0f4      	beq.n	800a6aa <json_write_mbuf+0xa>
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	461a      	mov	r2, r3
 800a6c4:	4619      	mov	r1, r3
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	f001 ff84 	bl	800c5d4 <__assert_func>
    assert(coap_json_mbuf);
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	461a      	mov	r2, r3
 800a6d0:	4619      	mov	r1, r3
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	f001 ff7e 	bl	800c5d4 <__assert_func>
    assert(data);
 800a6d8:	2300      	movs	r3, #0
 800a6da:	461a      	mov	r2, r3
 800a6dc:	4619      	mov	r1, r3
 800a6de:	4618      	mov	r0, r3
 800a6e0:	f001 ff78 	bl	800c5d4 <__assert_func>
 800a6e4:	20000464 	.word	0x20000464
 800a6e8:	200003ec 	.word	0x200003ec

0800a6ec <json_encode_value_ext>:
{
 800a6ec:	b530      	push	{r4, r5, lr}
 800a6ee:	b087      	sub	sp, #28
    assert(encoder);  assert(jv);
 800a6f0:	b310      	cbz	r0, 800a738 <json_encode_value_ext+0x4c>
 800a6f2:	460b      	mov	r3, r1
 800a6f4:	4604      	mov	r4, r0
 800a6f6:	b329      	cbz	r1, 800a744 <json_encode_value_ext+0x58>
    switch (jv->jv_type) {
 800a6f8:	784a      	ldrb	r2, [r1, #1]
 800a6fa:	2a06      	cmp	r2, #6
 800a6fc:	d128      	bne.n	800a750 <json_encode_value_ext+0x64>
            split_float(f, &neg, &i, &d);  //  Split the float into neg, integer and decimal parts (6 decimal places)
 800a6fe:	aa05      	add	r2, sp, #20
 800a700:	a904      	add	r1, sp, #16
 800a702:	f10d 000f 	add.w	r0, sp, #15
 800a706:	ed93 0a02 	vldr	s0, [r3, #8]
 800a70a:	f7ff ff99 	bl	800a640 <split_float>
                encoder->je_encode_buf,
 800a70e:	f104 0509 	add.w	r5, r4, #9
                neg ? "-" : "",  //  Sign
 800a712:	f89d 300f 	ldrb.w	r3, [sp, #15]
            len = sprintf(
 800a716:	b1cb      	cbz	r3, 800a74c <json_encode_value_ext+0x60>
 800a718:	4a0f      	ldr	r2, [pc, #60]	; (800a758 <json_encode_value_ext+0x6c>)
 800a71a:	9b05      	ldr	r3, [sp, #20]
 800a71c:	9300      	str	r3, [sp, #0]
 800a71e:	9b04      	ldr	r3, [sp, #16]
 800a720:	490e      	ldr	r1, [pc, #56]	; (800a75c <json_encode_value_ext+0x70>)
 800a722:	4628      	mov	r0, r5
 800a724:	f003 fc43 	bl	800dfae <sprintf>
            encoder->je_write(encoder->je_arg, encoder->je_encode_buf, len);
 800a728:	6823      	ldr	r3, [r4, #0]
 800a72a:	4602      	mov	r2, r0
 800a72c:	4629      	mov	r1, r5
 800a72e:	6860      	ldr	r0, [r4, #4]
 800a730:	4798      	blx	r3
    return (0);
 800a732:	2000      	movs	r0, #0
}
 800a734:	b007      	add	sp, #28
 800a736:	bd30      	pop	{r4, r5, pc}
    assert(encoder);  assert(jv);
 800a738:	2300      	movs	r3, #0
 800a73a:	461a      	mov	r2, r3
 800a73c:	4619      	mov	r1, r3
 800a73e:	4618      	mov	r0, r3
 800a740:	f001 ff48 	bl	800c5d4 <__assert_func>
 800a744:	460a      	mov	r2, r1
 800a746:	4608      	mov	r0, r1
 800a748:	f001 ff44 	bl	800c5d4 <__assert_func>
            len = sprintf(
 800a74c:	4a04      	ldr	r2, [pc, #16]	; (800a760 <json_encode_value_ext+0x74>)
 800a74e:	e7e4      	b.n	800a71a <json_encode_value_ext+0x2e>
    return (rc);
 800a750:	f04f 30ff 	mov.w	r0, #4294967295
 800a754:	e7ee      	b.n	800a734 <json_encode_value_ext+0x48>
 800a756:	bf00      	nop
 800a758:	08017eb0 	.word	0x08017eb0
 800a75c:	08017eb4 	.word	0x08017eb4
 800a760:	080182c8 	.word	0x080182c8

0800a764 <init_sensor_coap>:
void init_sensor_coap(void) {
 800a764:	b508      	push	{r3, lr}
    os_error_t rc = os_sem_init(&oc_sem, 1);  //  Init to 1 token, so only 1 caller will be allowed.
 800a766:	2101      	movs	r1, #1
 800a768:	4806      	ldr	r0, [pc, #24]	; (800a784 <init_sensor_coap+0x20>)
 800a76a:	f003 f8c7 	bl	800d8fc <os_sem_init>
    assert(rc == OS_OK);
 800a76e:	b918      	cbnz	r0, 800a778 <init_sensor_coap+0x14>
    oc_sensor_coap_ready = true;
 800a770:	4b05      	ldr	r3, [pc, #20]	; (800a788 <init_sensor_coap+0x24>)
 800a772:	2201      	movs	r2, #1
 800a774:	701a      	strb	r2, [r3, #0]
}
 800a776:	bd08      	pop	{r3, pc}
    assert(rc == OS_OK);
 800a778:	2300      	movs	r3, #0
 800a77a:	461a      	mov	r2, r3
 800a77c:	4619      	mov	r1, r3
 800a77e:	4618      	mov	r0, r3
 800a780:	f001 ff28 	bl	800c5d4 <__assert_func>
 800a784:	20000468 	.word	0x20000468
 800a788:	20000470 	.word	0x20000470

0800a78c <init_sensor_post>:
{
 800a78c:	b508      	push	{r3, lr}
    assert(oc_sensor_coap_ready);  assert(server);
 800a78e:	4b0e      	ldr	r3, [pc, #56]	; (800a7c8 <init_sensor_post+0x3c>)
 800a790:	781b      	ldrb	r3, [r3, #0]
 800a792:	b143      	cbz	r3, 800a7a6 <init_sensor_post+0x1a>
 800a794:	b160      	cbz	r0, 800a7b0 <init_sensor_post+0x24>
    os_error_t rc = os_sem_pend(&oc_sem, OS_TIMEOUT_NEVER);  //  Allow only 1 task to be creating a sensor request at any time.
 800a796:	f04f 31ff 	mov.w	r1, #4294967295
 800a79a:	480c      	ldr	r0, [pc, #48]	; (800a7cc <init_sensor_post+0x40>)
 800a79c:	f003 f8e8 	bl	800d970 <os_sem_pend>
    assert(rc == OS_OK);
 800a7a0:	b960      	cbnz	r0, 800a7bc <init_sensor_post+0x30>
}
 800a7a2:	2001      	movs	r0, #1
 800a7a4:	bd08      	pop	{r3, pc}
    assert(oc_sensor_coap_ready);  assert(server);
 800a7a6:	461a      	mov	r2, r3
 800a7a8:	4619      	mov	r1, r3
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	f001 ff12 	bl	800c5d4 <__assert_func>
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	461a      	mov	r2, r3
 800a7b4:	4619      	mov	r1, r3
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	f001 ff0c 	bl	800c5d4 <__assert_func>
    assert(rc == OS_OK);
 800a7bc:	2300      	movs	r3, #0
 800a7be:	461a      	mov	r2, r3
 800a7c0:	4619      	mov	r1, r3
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	f001 ff06 	bl	800c5d4 <__assert_func>
 800a7c8:	20000470 	.word	0x20000470
 800a7cc:	20000468 	.word	0x20000468

0800a7d0 <json_rep_reset>:
void json_rep_reset(void) {
 800a7d0:	b510      	push	{r4, lr}
    coap_json_mbuf = NULL;
 800a7d2:	2100      	movs	r1, #0
 800a7d4:	4b05      	ldr	r3, [pc, #20]	; (800a7ec <json_rep_reset+0x1c>)
 800a7d6:	6019      	str	r1, [r3, #0]
    memset(&coap_json_encoder, 0, sizeof(coap_json_encoder));  //  Erase the encoder.
 800a7d8:	4c05      	ldr	r4, [pc, #20]	; (800a7f0 <json_rep_reset+0x20>)
 800a7da:	2248      	movs	r2, #72	; 0x48
 800a7dc:	4620      	mov	r0, r4
 800a7de:	f003 fbca 	bl	800df76 <memset>
    coap_json_encoder.je_write = json_write_mbuf;
 800a7e2:	4b04      	ldr	r3, [pc, #16]	; (800a7f4 <json_rep_reset+0x24>)
 800a7e4:	f844 3c04 	str.w	r3, [r4, #-4]
}
 800a7e8:	bd10      	pop	{r4, pc}
 800a7ea:	bf00      	nop
 800a7ec:	200003ec 	.word	0x200003ec
 800a7f0:	200037bc 	.word	0x200037bc
 800a7f4:	0800a6a1 	.word	0x0800a6a1

0800a7f8 <json_rep_new>:
void json_rep_new(struct os_mbuf *m) {
 800a7f8:	b510      	push	{r4, lr}
    assert(m);
 800a7fa:	b128      	cbz	r0, 800a808 <json_rep_new+0x10>
 800a7fc:	4604      	mov	r4, r0
    json_rep_reset();  //  Erase the JSON encoder.
 800a7fe:	f7ff ffe7 	bl	800a7d0 <json_rep_reset>
    coap_json_mbuf = m;
 800a802:	4b04      	ldr	r3, [pc, #16]	; (800a814 <json_rep_new+0x1c>)
 800a804:	601c      	str	r4, [r3, #0]
}
 800a806:	bd10      	pop	{r4, pc}
    assert(m);
 800a808:	2300      	movs	r3, #0
 800a80a:	461a      	mov	r2, r3
 800a80c:	4619      	mov	r1, r3
 800a80e:	4618      	mov	r0, r3
 800a810:	f001 fee0 	bl	800c5d4 <__assert_func>
 800a814:	200003ec 	.word	0x200003ec

0800a818 <prepare_coap_request>:
{
 800a818:	b570      	push	{r4, r5, r6, lr}
 800a81a:	4604      	mov	r4, r0
 800a81c:	460e      	mov	r6, r1
    oc_c_rsp = os_msys_get_pkthdr(0, 0);
 800a81e:	2100      	movs	r1, #0
 800a820:	4608      	mov	r0, r1
 800a822:	f002 fdb3 	bl	800d38c <os_msys_get_pkthdr>
 800a826:	4b31      	ldr	r3, [pc, #196]	; (800a8ec <prepare_coap_request+0xd4>)
 800a828:	6018      	str	r0, [r3, #0]
    if (!oc_c_rsp) {
 800a82a:	2800      	cmp	r0, #0
 800a82c:	d05b      	beq.n	800a8e6 <prepare_coap_request+0xce>
    oc_c_message = oc_allocate_mbuf(&cb->server.endpoint);
 800a82e:	f104 0038 	add.w	r0, r4, #56	; 0x38
 800a832:	f000 fc8f 	bl	800b154 <oc_allocate_mbuf>
 800a836:	4b2e      	ldr	r3, [pc, #184]	; (800a8f0 <prepare_coap_request+0xd8>)
 800a838:	6018      	str	r0, [r3, #0]
    if (!oc_c_message) {
 800a83a:	2800      	cmp	r0, #0
 800a83c:	d04c      	beq.n	800a8d8 <prepare_coap_request+0xc0>
    if (oc_content_format == APPLICATION_JSON) { 
 800a83e:	4b2d      	ldr	r3, [pc, #180]	; (800a8f4 <prepare_coap_request+0xdc>)
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	2b32      	cmp	r3, #50	; 0x32
 800a844:	d027      	beq.n	800a896 <prepare_coap_request+0x7e>
    else if (oc_content_format == APPLICATION_CBOR) { 
 800a846:	2b3c      	cmp	r3, #60	; 0x3c
 800a848:	d12a      	bne.n	800a8a0 <prepare_coap_request+0x88>
    coap_init_message(oc_c_request, type, cb->method, cb->mid);
 800a84a:	4d2b      	ldr	r5, [pc, #172]	; (800a8f8 <prepare_coap_request+0xe0>)
 800a84c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800a84e:	f894 2061 	ldrb.w	r2, [r4, #97]	; 0x61
 800a852:	2101      	movs	r1, #1
 800a854:	4628      	mov	r0, r5
 800a856:	f000 fe6f 	bl	800b538 <coap_init_message>
    coap_set_header_accept(oc_c_request, oc_content_format);  //  Either JSON or CBOR.
 800a85a:	4b26      	ldr	r3, [pc, #152]	; (800a8f4 <prepare_coap_request+0xdc>)
 800a85c:	6819      	ldr	r1, [r3, #0]
 800a85e:	4628      	mov	r0, r5
 800a860:	f001 f83e 	bl	800b8e0 <coap_set_header_accept>
    coap_set_token(oc_c_request, cb->token, cb->token_len);
 800a864:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 800a868:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 800a86c:	4628      	mov	r0, r5
 800a86e:	f001 f824 	bl	800b8ba <coap_set_token>
    coap_set_header_uri_path(oc_c_request, oc_string(cb->uri));
 800a872:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800a874:	4628      	mov	r0, r5
 800a876:	f001 f83a 	bl	800b8ee <coap_set_header_uri_path>
    if (cb->observe_seq != -1) {
 800a87a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800a87c:	f1b1 3fff 	cmp.w	r1, #4294967295
 800a880:	d114      	bne.n	800a8ac <prepare_coap_request+0x94>
    if (query && oc_string_len(*query)) {
 800a882:	b116      	cbz	r6, 800a88a <prepare_coap_request+0x72>
 800a884:	8833      	ldrh	r3, [r6, #0]
 800a886:	2b01      	cmp	r3, #1
 800a888:	d814      	bhi.n	800a8b4 <prepare_coap_request+0x9c>
    if (cb->observe_seq == -1 && cb->qos == LOW_QOS) {
 800a88a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a88c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a890:	d015      	beq.n	800a8be <prepare_coap_request+0xa6>
    return true;
 800a892:	2001      	movs	r0, #1
 800a894:	e028      	b.n	800a8e8 <prepare_coap_request+0xd0>
        json_rep_new(oc_c_rsp); 
 800a896:	4b15      	ldr	r3, [pc, #84]	; (800a8ec <prepare_coap_request+0xd4>)
 800a898:	6818      	ldr	r0, [r3, #0]
 800a89a:	f7ff ffad 	bl	800a7f8 <json_rep_new>
 800a89e:	e7d4      	b.n	800a84a <prepare_coap_request+0x32>
    else { assert(0); }  //  Unknown CoAP content format.
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	461a      	mov	r2, r3
 800a8a4:	4619      	mov	r1, r3
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	f001 fe94 	bl	800c5d4 <__assert_func>
        coap_set_header_observe(oc_c_request, cb->observe_seq);
 800a8ac:	4628      	mov	r0, r5
 800a8ae:	f001 f843 	bl	800b938 <coap_set_header_observe>
 800a8b2:	e7e6      	b.n	800a882 <prepare_coap_request+0x6a>
        coap_set_header_uri_query(oc_c_request, oc_string(*query));
 800a8b4:	6871      	ldr	r1, [r6, #4]
 800a8b6:	4810      	ldr	r0, [pc, #64]	; (800a8f8 <prepare_coap_request+0xe0>)
 800a8b8:	f001 f82b 	bl	800b912 <coap_set_header_uri_query>
 800a8bc:	e7e5      	b.n	800a88a <prepare_coap_request+0x72>
    if (cb->observe_seq == -1 && cb->qos == LOW_QOS) {
 800a8be:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 800a8c2:	2b01      	cmp	r3, #1
 800a8c4:	d001      	beq.n	800a8ca <prepare_coap_request+0xb2>
    return true;
 800a8c6:	2001      	movs	r0, #1
 800a8c8:	e00e      	b.n	800a8e8 <prepare_coap_request+0xd0>
        os_callout_reset(&cb->callout,
 800a8ca:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 800a8ce:	1d20      	adds	r0, r4, #4
 800a8d0:	f002 f82a 	bl	800c928 <os_callout_reset>
    return true;
 800a8d4:	2001      	movs	r0, #1
 800a8d6:	e007      	b.n	800a8e8 <prepare_coap_request+0xd0>
    os_mbuf_free_chain(oc_c_rsp);
 800a8d8:	4c04      	ldr	r4, [pc, #16]	; (800a8ec <prepare_coap_request+0xd4>)
 800a8da:	6820      	ldr	r0, [r4, #0]
 800a8dc:	f002 fabe 	bl	800ce5c <os_mbuf_free_chain>
    oc_c_rsp = NULL;
 800a8e0:	2000      	movs	r0, #0
 800a8e2:	6020      	str	r0, [r4, #0]
    return false;
 800a8e4:	e000      	b.n	800a8e8 <prepare_coap_request+0xd0>
        return false;
 800a8e6:	2000      	movs	r0, #0
}
 800a8e8:	bd70      	pop	{r4, r5, r6, pc}
 800a8ea:	bf00      	nop
 800a8ec:	20000460 	.word	0x20000460
 800a8f0:	200003f0 	.word	0x200003f0
 800a8f4:	20000464 	.word	0x20000464
 800a8f8:	200003f4 	.word	0x200003f4

0800a8fc <prepare_sensor_post>:
{
 800a8fc:	b510      	push	{r4, lr}
 800a8fe:	b082      	sub	sp, #8
    assert(oc_sensor_coap_ready);  assert(server);  assert(uri);
 800a900:	4b1a      	ldr	r3, [pc, #104]	; (800a96c <prepare_sensor_post+0x70>)
 800a902:	781b      	ldrb	r3, [r3, #0]
 800a904:	b1a3      	cbz	r3, 800a930 <prepare_sensor_post+0x34>
 800a906:	460c      	mov	r4, r1
 800a908:	b1b8      	cbz	r0, 800a93a <prepare_sensor_post+0x3e>
 800a90a:	b1e1      	cbz	r1, 800a946 <prepare_sensor_post+0x4a>
    if (coap_content_format == 0) { coap_content_format = COAP_CONTENT_FORMAT; }
 800a90c:	b902      	cbnz	r2, 800a910 <prepare_sensor_post+0x14>
 800a90e:	2232      	movs	r2, #50	; 0x32
    oc_content_format = coap_content_format;
 800a910:	4b17      	ldr	r3, [pc, #92]	; (800a970 <prepare_sensor_post+0x74>)
 800a912:	601a      	str	r2, [r3, #0]
    cb = oc_ri_alloc_client_cb(uri, server, OC_POST, handler, qos);
 800a914:	2301      	movs	r3, #1
 800a916:	9300      	str	r3, [sp, #0]
 800a918:	4b16      	ldr	r3, [pc, #88]	; (800a974 <prepare_sensor_post+0x78>)
 800a91a:	2202      	movs	r2, #2
 800a91c:	4601      	mov	r1, r0
 800a91e:	4620      	mov	r0, r4
 800a920:	f000 fcc2 	bl	800b2a8 <oc_ri_alloc_client_cb>
    if (!cb) {
 800a924:	b1a8      	cbz	r0, 800a952 <prepare_sensor_post+0x56>
    status = prepare_coap_request(cb, NULL);
 800a926:	2100      	movs	r1, #0
 800a928:	f7ff ff76 	bl	800a818 <prepare_coap_request>
}
 800a92c:	b002      	add	sp, #8
 800a92e:	bd10      	pop	{r4, pc}
    assert(oc_sensor_coap_ready);  assert(server);  assert(uri);
 800a930:	461a      	mov	r2, r3
 800a932:	4619      	mov	r1, r3
 800a934:	4618      	mov	r0, r3
 800a936:	f001 fe4d 	bl	800c5d4 <__assert_func>
 800a93a:	2300      	movs	r3, #0
 800a93c:	461a      	mov	r2, r3
 800a93e:	4619      	mov	r1, r3
 800a940:	4618      	mov	r0, r3
 800a942:	f001 fe47 	bl	800c5d4 <__assert_func>
 800a946:	2300      	movs	r3, #0
 800a948:	461a      	mov	r2, r3
 800a94a:	4619      	mov	r1, r3
 800a94c:	4618      	mov	r0, r3
 800a94e:	f001 fe41 	bl	800c5d4 <__assert_func>
        os_error_t rc = os_sem_release(&oc_sem);  //  Failed.  Release the semaphore.
 800a952:	4809      	ldr	r0, [pc, #36]	; (800a978 <prepare_sensor_post+0x7c>)
 800a954:	f002 ffda 	bl	800d90c <os_sem_release>
        assert(rc == OS_OK);
 800a958:	b908      	cbnz	r0, 800a95e <prepare_sensor_post+0x62>
        return false;
 800a95a:	2000      	movs	r0, #0
 800a95c:	e7e6      	b.n	800a92c <prepare_sensor_post+0x30>
        assert(rc == OS_OK);
 800a95e:	2300      	movs	r3, #0
 800a960:	461a      	mov	r2, r3
 800a962:	4619      	mov	r1, r3
 800a964:	4618      	mov	r0, r3
 800a966:	f001 fe35 	bl	800c5d4 <__assert_func>
 800a96a:	bf00      	nop
 800a96c:	20000470 	.word	0x20000470
 800a970:	20000464 	.word	0x20000464
 800a974:	0800a691 	.word	0x0800a691
 800a978:	20000468 	.word	0x20000468

0800a97c <json_rep_finalize>:
int json_rep_finalize(void) {
 800a97c:	b538      	push	{r3, r4, r5, lr}
    assert(coap_json_mbuf);
 800a97e:	4b10      	ldr	r3, [pc, #64]	; (800a9c0 <json_rep_finalize+0x44>)
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	b13b      	cbz	r3, 800a994 <json_rep_finalize+0x18>
    int size = OS_MBUF_PKTLEN(coap_json_mbuf);
 800a984:	8a1d      	ldrh	r5, [r3, #16]
    console_printf("NET payload size %d\n", size); struct os_mbuf *m = coap_json_mbuf;
 800a986:	4629      	mov	r1, r5
 800a988:	480e      	ldr	r0, [pc, #56]	; (800a9c4 <json_rep_finalize+0x48>)
 800a98a:	f7ff fe2f 	bl	800a5ec <console_printf>
 800a98e:	4b0c      	ldr	r3, [pc, #48]	; (800a9c0 <json_rep_finalize+0x44>)
 800a990:	681c      	ldr	r4, [r3, #0]
    while (m) {
 800a992:	e00c      	b.n	800a9ae <json_rep_finalize+0x32>
    assert(coap_json_mbuf);
 800a994:	461a      	mov	r2, r3
 800a996:	4619      	mov	r1, r3
 800a998:	4618      	mov	r0, r3
 800a99a:	f001 fe1b 	bl	800c5d4 <__assert_func>
        console_buffer((const char *) (m->om_databuf + m->om_pkthdr_len), m->om_len);
 800a99e:	f104 0010 	add.w	r0, r4, #16
 800a9a2:	7963      	ldrb	r3, [r4, #5]
 800a9a4:	88e1      	ldrh	r1, [r4, #6]
 800a9a6:	4418      	add	r0, r3
 800a9a8:	f7ff fd38 	bl	800a41c <console_buffer>
        m = m->om_next.sle_next;
 800a9ac:	68e4      	ldr	r4, [r4, #12]
    while (m) {
 800a9ae:	2c00      	cmp	r4, #0
 800a9b0:	d1f5      	bne.n	800a99e <json_rep_finalize+0x22>
    } console_printf("\n");
 800a9b2:	4805      	ldr	r0, [pc, #20]	; (800a9c8 <json_rep_finalize+0x4c>)
 800a9b4:	f7ff fe1a 	bl	800a5ec <console_printf>
    json_rep_reset();
 800a9b8:	f7ff ff0a 	bl	800a7d0 <json_rep_reset>
}
 800a9bc:	4628      	mov	r0, r5
 800a9be:	bd38      	pop	{r3, r4, r5, pc}
 800a9c0:	200003ec 	.word	0x200003ec
 800a9c4:	08017ec0 	.word	0x08017ec0
 800a9c8:	080185b4 	.word	0x080185b4

0800a9cc <dispatch_coap_request>:
{
 800a9cc:	b510      	push	{r4, lr}
    assert(oc_content_format);
 800a9ce:	4b24      	ldr	r3, [pc, #144]	; (800aa60 <dispatch_coap_request+0x94>)
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	b31b      	cbz	r3, 800aa1c <dispatch_coap_request+0x50>
        (oc_content_format == APPLICATION_JSON) ? json_rep_finalize() :
 800a9d4:	2b32      	cmp	r3, #50	; 0x32
 800a9d6:	d026      	beq.n	800aa26 <dispatch_coap_request+0x5a>
        os_mbuf_free_chain(oc_c_rsp);
 800a9d8:	4b22      	ldr	r3, [pc, #136]	; (800aa64 <dispatch_coap_request+0x98>)
 800a9da:	6818      	ldr	r0, [r3, #0]
 800a9dc:	f002 fa3e 	bl	800ce5c <os_mbuf_free_chain>
    oc_c_rsp = NULL;
 800a9e0:	4b20      	ldr	r3, [pc, #128]	; (800aa64 <dispatch_coap_request+0x98>)
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	601a      	str	r2, [r3, #0]
    if (oc_c_message) {
 800a9e6:	4b20      	ldr	r3, [pc, #128]	; (800aa68 <dispatch_coap_request+0x9c>)
 800a9e8:	6819      	ldr	r1, [r3, #0]
 800a9ea:	2900      	cmp	r1, #0
 800a9ec:	d030      	beq.n	800aa50 <dispatch_coap_request+0x84>
        if (!coap_serialize_message(oc_c_request, oc_c_message)) {
 800a9ee:	481f      	ldr	r0, [pc, #124]	; (800aa6c <dispatch_coap_request+0xa0>)
 800a9f0:	f000 fdb0 	bl	800b554 <coap_serialize_message>
 800a9f4:	bb38      	cbnz	r0, 800aa46 <dispatch_coap_request+0x7a>
            coap_send_message(oc_c_message, 0);
 800a9f6:	2100      	movs	r1, #0
 800a9f8:	4b1b      	ldr	r3, [pc, #108]	; (800aa68 <dispatch_coap_request+0x9c>)
 800a9fa:	6818      	ldr	r0, [r3, #0]
 800a9fc:	f000 ff52 	bl	800b8a4 <coap_send_message>
        oc_ri_remove_client_cb_by_mid(oc_c_request->mid);
 800aa00:	4b1a      	ldr	r3, [pc, #104]	; (800aa6c <dispatch_coap_request+0xa0>)
 800aa02:	8898      	ldrh	r0, [r3, #4]
 800aa04:	f000 fc40 	bl	800b288 <oc_ri_remove_client_cb_by_mid>
        oc_c_message = NULL;
 800aa08:	4b17      	ldr	r3, [pc, #92]	; (800aa68 <dispatch_coap_request+0x9c>)
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	601a      	str	r2, [r3, #0]
        ret = true;
 800aa0e:	2401      	movs	r4, #1
    os_error_t rc = os_sem_release(&oc_sem);  //  Request completed.  Release the semaphore for another request.
 800aa10:	4817      	ldr	r0, [pc, #92]	; (800aa70 <dispatch_coap_request+0xa4>)
 800aa12:	f002 ff7b 	bl	800d90c <os_sem_release>
    assert(rc == OS_OK);
 800aa16:	b9e8      	cbnz	r0, 800aa54 <dispatch_coap_request+0x88>
}
 800aa18:	4620      	mov	r0, r4
 800aa1a:	bd10      	pop	{r4, pc}
    assert(oc_content_format);
 800aa1c:	461a      	mov	r2, r3
 800aa1e:	4619      	mov	r1, r3
 800aa20:	4618      	mov	r0, r3
 800aa22:	f001 fdd7 	bl	800c5d4 <__assert_func>
        (oc_content_format == APPLICATION_JSON) ? json_rep_finalize() :
 800aa26:	f7ff ffa9 	bl	800a97c <json_rep_finalize>
    if (response_length) {
 800aa2a:	4603      	mov	r3, r0
 800aa2c:	2800      	cmp	r0, #0
 800aa2e:	d0d3      	beq.n	800a9d8 <dispatch_coap_request+0xc>
        oc_c_request->payload_m = oc_c_rsp;
 800aa30:	480e      	ldr	r0, [pc, #56]	; (800aa6c <dispatch_coap_request+0xa0>)
 800aa32:	4a0c      	ldr	r2, [pc, #48]	; (800aa64 <dispatch_coap_request+0x98>)
 800aa34:	6812      	ldr	r2, [r2, #0]
 800aa36:	6682      	str	r2, [r0, #104]	; 0x68
        oc_c_request->payload_len = response_length;
 800aa38:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
        coap_set_header_content_format(oc_c_request, oc_content_format);  //  Either JSON or CBOR.
 800aa3c:	4b08      	ldr	r3, [pc, #32]	; (800aa60 <dispatch_coap_request+0x94>)
 800aa3e:	6819      	ldr	r1, [r3, #0]
 800aa40:	f000 ff47 	bl	800b8d2 <coap_set_header_content_format>
 800aa44:	e7cc      	b.n	800a9e0 <dispatch_coap_request+0x14>
            os_mbuf_free_chain(oc_c_message);
 800aa46:	4b08      	ldr	r3, [pc, #32]	; (800aa68 <dispatch_coap_request+0x9c>)
 800aa48:	6818      	ldr	r0, [r3, #0]
 800aa4a:	f002 fa07 	bl	800ce5c <os_mbuf_free_chain>
 800aa4e:	e7d7      	b.n	800aa00 <dispatch_coap_request+0x34>
    bool ret = false;
 800aa50:	2400      	movs	r4, #0
 800aa52:	e7dd      	b.n	800aa10 <dispatch_coap_request+0x44>
    assert(rc == OS_OK);
 800aa54:	2300      	movs	r3, #0
 800aa56:	461a      	mov	r2, r3
 800aa58:	4619      	mov	r1, r3
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	f001 fdba 	bl	800c5d4 <__assert_func>
 800aa60:	20000464 	.word	0x20000464
 800aa64:	20000460 	.word	0x20000460
 800aa68:	200003f0 	.word	0x200003f0
 800aa6c:	200003f4 	.word	0x200003f4
 800aa70:	20000468 	.word	0x20000468

0800aa74 <do_sensor_post>:
{
 800aa74:	b508      	push	{r3, lr}
    return dispatch_coap_request();
 800aa76:	f7ff ffa9 	bl	800a9cc <dispatch_coap_request>
}
 800aa7a:	bd08      	pop	{r3, pc}

0800aa7c <json_rep_start_root_object>:
void json_rep_start_root_object(void) {
 800aa7c:	b508      	push	{r3, lr}
    int rc = json_encode_object_start(&coap_json_encoder);  assert(rc == 0);
 800aa7e:	4805      	ldr	r0, [pc, #20]	; (800aa94 <json_rep_start_root_object+0x18>)
 800aa80:	f001 f816 	bl	800bab0 <json_encode_object_start>
 800aa84:	b900      	cbnz	r0, 800aa88 <json_rep_start_root_object+0xc>
}
 800aa86:	bd08      	pop	{r3, pc}
    int rc = json_encode_object_start(&coap_json_encoder);  assert(rc == 0);
 800aa88:	2300      	movs	r3, #0
 800aa8a:	461a      	mov	r2, r3
 800aa8c:	4619      	mov	r1, r3
 800aa8e:	4618      	mov	r0, r3
 800aa90:	f001 fda0 	bl	800c5d4 <__assert_func>
 800aa94:	200037b8 	.word	0x200037b8

0800aa98 <json_rep_end_root_object>:
void json_rep_end_root_object(void) {
 800aa98:	b508      	push	{r3, lr}
    int rc = json_encode_object_finish(&coap_json_encoder);  assert(rc == 0);
 800aa9a:	4805      	ldr	r0, [pc, #20]	; (800aab0 <json_rep_end_root_object+0x18>)
 800aa9c:	f001 f986 	bl	800bdac <json_encode_object_finish>
 800aaa0:	b900      	cbnz	r0, 800aaa4 <json_rep_end_root_object+0xc>
}
 800aaa2:	bd08      	pop	{r3, pc}
    int rc = json_encode_object_finish(&coap_json_encoder);  assert(rc == 0);
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	461a      	mov	r2, r3
 800aaa8:	4619      	mov	r1, r3
 800aaaa:	4618      	mov	r0, r3
 800aaac:	f001 fd92 	bl	800c5d4 <__assert_func>
 800aab0:	200037b8 	.word	0x200037b8

0800aab4 <json_encode_object_entry_ext>:
{
 800aab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    assert(encoder); assert(key); assert(val);
 800aab6:	2800      	cmp	r0, #0
 800aab8:	d031      	beq.n	800ab1e <json_encode_object_entry_ext+0x6a>
 800aaba:	460d      	mov	r5, r1
 800aabc:	4616      	mov	r6, r2
 800aabe:	4604      	mov	r4, r0
 800aac0:	2900      	cmp	r1, #0
 800aac2:	d032      	beq.n	800ab2a <json_encode_object_entry_ext+0x76>
 800aac4:	2a00      	cmp	r2, #0
 800aac6:	d036      	beq.n	800ab36 <json_encode_object_entry_ext+0x82>
    if (encoder->je_wr_commas) {
 800aac8:	7a03      	ldrb	r3, [r0, #8]
 800aaca:	f013 0f01 	tst.w	r3, #1
 800aace:	d008      	beq.n	800aae2 <json_encode_object_entry_ext+0x2e>
        encoder->je_write(encoder->je_arg, ",", sizeof(",")-1);
 800aad0:	6803      	ldr	r3, [r0, #0]
 800aad2:	2201      	movs	r2, #1
 800aad4:	491b      	ldr	r1, [pc, #108]	; (800ab44 <json_encode_object_entry_ext+0x90>)
 800aad6:	6840      	ldr	r0, [r0, #4]
 800aad8:	4798      	blx	r3
        encoder->je_wr_commas = 0;
 800aada:	7a23      	ldrb	r3, [r4, #8]
 800aadc:	f36f 0300 	bfc	r3, #0, #1
 800aae0:	7223      	strb	r3, [r4, #8]
    encoder->je_write(encoder->je_arg, "\"", sizeof("\"")-1);
 800aae2:	6823      	ldr	r3, [r4, #0]
 800aae4:	2201      	movs	r2, #1
 800aae6:	4918      	ldr	r1, [pc, #96]	; (800ab48 <json_encode_object_entry_ext+0x94>)
 800aae8:	6860      	ldr	r0, [r4, #4]
 800aaea:	4798      	blx	r3
    encoder->je_write(encoder->je_arg, key, strlen(key));
 800aaec:	6827      	ldr	r7, [r4, #0]
 800aaee:	4628      	mov	r0, r5
 800aaf0:	f003 fa7b 	bl	800dfea <strlen>
 800aaf4:	4602      	mov	r2, r0
 800aaf6:	4629      	mov	r1, r5
 800aaf8:	6860      	ldr	r0, [r4, #4]
 800aafa:	47b8      	blx	r7
    encoder->je_write(encoder->je_arg, "\": ", sizeof("\": ")-1);
 800aafc:	6823      	ldr	r3, [r4, #0]
 800aafe:	2203      	movs	r2, #3
 800ab00:	4912      	ldr	r1, [pc, #72]	; (800ab4c <json_encode_object_entry_ext+0x98>)
 800ab02:	6860      	ldr	r0, [r4, #4]
 800ab04:	4798      	blx	r3
    rc = json_encode_value_ext(encoder, val);
 800ab06:	4631      	mov	r1, r6
 800ab08:	4620      	mov	r0, r4
 800ab0a:	f7ff fdef 	bl	800a6ec <json_encode_value_ext>
    if (rc != 0) {
 800ab0e:	4602      	mov	r2, r0
 800ab10:	b918      	cbnz	r0, 800ab1a <json_encode_object_entry_ext+0x66>
    encoder->je_wr_commas = 1;
 800ab12:	7a23      	ldrb	r3, [r4, #8]
 800ab14:	f043 0301 	orr.w	r3, r3, #1
 800ab18:	7223      	strb	r3, [r4, #8]
}
 800ab1a:	4610      	mov	r0, r2
 800ab1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert(encoder); assert(key); assert(val);
 800ab1e:	2300      	movs	r3, #0
 800ab20:	461a      	mov	r2, r3
 800ab22:	4619      	mov	r1, r3
 800ab24:	4618      	mov	r0, r3
 800ab26:	f001 fd55 	bl	800c5d4 <__assert_func>
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	461a      	mov	r2, r3
 800ab2e:	4619      	mov	r1, r3
 800ab30:	4618      	mov	r0, r3
 800ab32:	f001 fd4f 	bl	800c5d4 <__assert_func>
 800ab36:	2300      	movs	r3, #0
 800ab38:	461a      	mov	r2, r3
 800ab3a:	4619      	mov	r1, r3
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	f001 fd49 	bl	800c5d4 <__assert_func>
 800ab42:	bf00      	nop
 800ab44:	08017ea4 	.word	0x08017ea4
 800ab48:	08017ea8 	.word	0x08017ea8
 800ab4c:	08017eac 	.word	0x08017eac

0800ab50 <sensor_network_register_transport>:
    int rc = sensor_network_register_transport(i);
    assert(rc == 0);
    return rc;
}

int sensor_network_register_transport(uint8_t iface_type) {
 800ab50:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab52:	b083      	sub	sp, #12
    //  Register the Network Interface as the network transport for CoAP Server or CoAP Collector.
    //  Return 0 if successful.
    assert(iface_type >= 0 && iface_type < MAX_INTERFACE_TYPES);
 800ab54:	2801      	cmp	r0, #1
 800ab56:	d838      	bhi.n	800abca <sensor_network_register_transport+0x7a>
 800ab58:	4604      	mov	r4, r0
    struct sensor_network_interface *iface = &sensor_network_interfaces[iface_type];
    if (iface->transport_registered) { return 0; }  //  Quit if transport already registered and endpoint has been created.
 800ab5a:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 800ab5e:	009a      	lsls	r2, r3, #2
 800ab60:	4b26      	ldr	r3, [pc, #152]	; (800abfc <sensor_network_register_transport+0xac>)
 800ab62:	4413      	add	r3, r2
 800ab64:	7c1b      	ldrb	r3, [r3, #16]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d146      	bne.n	800abf8 <sensor_network_register_transport+0xa8>

    void *endpoint = &sensor_network_endpoints[iface_type];
 800ab6a:	4e25      	ldr	r6, [pc, #148]	; (800ac00 <sensor_network_register_transport+0xb0>)
 800ab6c:	eb06 1600 	add.w	r6, r6, r0, lsl #4
    //  If endpoint has not been created, register the transport for the interface and create the endpoint.
    assert(iface->network_device);  assert(iface->register_transport_func);
 800ab70:	4b22      	ldr	r3, [pc, #136]	; (800abfc <sensor_network_register_transport+0xac>)
 800ab72:	4413      	add	r3, r2
 800ab74:	685d      	ldr	r5, [r3, #4]
 800ab76:	b375      	cbz	r5, 800abd6 <sensor_network_register_transport+0x86>
 800ab78:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 800ab7c:	009a      	lsls	r2, r3, #2
 800ab7e:	4b1f      	ldr	r3, [pc, #124]	; (800abfc <sensor_network_register_transport+0xac>)
 800ab80:	4413      	add	r3, r2
 800ab82:	68db      	ldr	r3, [r3, #12]
 800ab84:	b36b      	cbz	r3, 800abe2 <sensor_network_register_transport+0x92>
    const char *network_device = iface->network_device;
    console_printf("%s%s %s\n", _net, sensor_network_shortname[iface_type], network_device);
 800ab86:	462b      	mov	r3, r5
 800ab88:	4a1e      	ldr	r2, [pc, #120]	; (800ac04 <sensor_network_register_transport+0xb4>)
 800ab8a:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 800ab8e:	491e      	ldr	r1, [pc, #120]	; (800ac08 <sensor_network_register_transport+0xb8>)
 800ab90:	481e      	ldr	r0, [pc, #120]	; (800ac0c <sensor_network_register_transport+0xbc>)
 800ab92:	f7ff fd2b 	bl	800a5ec <console_printf>

    //  TODO: Host and port are not needed for Collector.
    int rc = iface->register_transport_func(network_device, endpoint, COAP_HOST, MYNEWT_VAL(COAP_PORT), MAX_ENDPOINT_SIZE);
 800ab96:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800ab9a:	009a      	lsls	r2, r3, #2
 800ab9c:	4b17      	ldr	r3, [pc, #92]	; (800abfc <sensor_network_register_transport+0xac>)
 800ab9e:	4413      	add	r3, r2
 800aba0:	68df      	ldr	r7, [r3, #12]
 800aba2:	2310      	movs	r3, #16
 800aba4:	9300      	str	r3, [sp, #0]
 800aba6:	f241 6333 	movw	r3, #5683	; 0x1633
 800abaa:	4a19      	ldr	r2, [pc, #100]	; (800ac10 <sensor_network_register_transport+0xc0>)
 800abac:	4631      	mov	r1, r6
 800abae:	4628      	mov	r0, r5
 800abb0:	47b8      	blx	r7
    assert(rc == 0);
 800abb2:	4602      	mov	r2, r0
 800abb4:	b9d0      	cbnz	r0, 800abec <sensor_network_register_transport+0x9c>
    iface->transport_registered = 1;
 800abb6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800abba:	00a1      	lsls	r1, r4, #2
 800abbc:	4b0f      	ldr	r3, [pc, #60]	; (800abfc <sensor_network_register_transport+0xac>)
 800abbe:	440b      	add	r3, r1
 800abc0:	2101      	movs	r1, #1
 800abc2:	7419      	strb	r1, [r3, #16]
    return rc;
}
 800abc4:	4610      	mov	r0, r2
 800abc6:	b003      	add	sp, #12
 800abc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert(iface_type >= 0 && iface_type < MAX_INTERFACE_TYPES);
 800abca:	2300      	movs	r3, #0
 800abcc:	461a      	mov	r2, r3
 800abce:	4619      	mov	r1, r3
 800abd0:	4618      	mov	r0, r3
 800abd2:	f001 fcff 	bl	800c5d4 <__assert_func>
    assert(iface->network_device);  assert(iface->register_transport_func);
 800abd6:	2300      	movs	r3, #0
 800abd8:	461a      	mov	r2, r3
 800abda:	4619      	mov	r1, r3
 800abdc:	4618      	mov	r0, r3
 800abde:	f001 fcf9 	bl	800c5d4 <__assert_func>
 800abe2:	461a      	mov	r2, r3
 800abe4:	4619      	mov	r1, r3
 800abe6:	4618      	mov	r0, r3
 800abe8:	f001 fcf4 	bl	800c5d4 <__assert_func>
    assert(rc == 0);
 800abec:	2300      	movs	r3, #0
 800abee:	461a      	mov	r2, r3
 800abf0:	4619      	mov	r1, r3
 800abf2:	4618      	mov	r0, r3
 800abf4:	f001 fcee 	bl	800c5d4 <__assert_func>
    if (iface->transport_registered) { return 0; }  //  Quit if transport already registered and endpoint has been created.
 800abf8:	2200      	movs	r2, #0
 800abfa:	e7e3      	b.n	800abc4 <sensor_network_register_transport+0x74>
 800abfc:	200004fc 	.word	0x200004fc
 800ac00:	200004dc 	.word	0x200004dc
 800ac04:	0801800c 	.word	0x0801800c
 800ac08:	08017ff8 	.word	0x08017ff8
 800ac0c:	08018000 	.word	0x08018000
 800ac10:	08017ed8 	.word	0x08017ed8

0800ac14 <sensor_network_start_transport>:
int sensor_network_start_transport(uint8_t iface_type) {
 800ac14:	b570      	push	{r4, r5, r6, lr}
    assert(iface_type >= 0 && iface_type < MAX_INTERFACE_TYPES);
 800ac16:	2801      	cmp	r0, #1
 800ac18:	d80a      	bhi.n	800ac30 <sensor_network_start_transport+0x1c>
 800ac1a:	4604      	mov	r4, r0
    if (iface->transport_registered) { return 0; }  //  Quit if transport already registered and endpoint has been created.
 800ac1c:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 800ac20:	009a      	lsls	r2, r3, #2
 800ac22:	4b16      	ldr	r3, [pc, #88]	; (800ac7c <sensor_network_start_transport+0x68>)
 800ac24:	4413      	add	r3, r2
 800ac26:	7c1b      	ldrb	r3, [r3, #16]
 800ac28:	b143      	cbz	r3, 800ac3c <sensor_network_start_transport+0x28>
 800ac2a:	2500      	movs	r5, #0
}
 800ac2c:	4628      	mov	r0, r5
 800ac2e:	bd70      	pop	{r4, r5, r6, pc}
    assert(iface_type >= 0 && iface_type < MAX_INTERFACE_TYPES);
 800ac30:	2300      	movs	r3, #0
 800ac32:	461a      	mov	r2, r3
 800ac34:	4619      	mov	r1, r3
 800ac36:	4618      	mov	r0, r3
 800ac38:	f001 fccc 	bl	800c5d4 <__assert_func>
    if (!power_standby_wakeup()) {
 800ac3c:	f000 ff2a 	bl	800ba94 <power_standby_wakeup>
 800ac40:	4605      	mov	r5, r0
 800ac42:	b158      	cbz	r0, 800ac5c <sensor_network_start_transport+0x48>
        int rc = sensor_network_register_transport(iface_type);  assert(rc == 0);
 800ac44:	4620      	mov	r0, r4
 800ac46:	f7ff ff83 	bl	800ab50 <sensor_network_register_transport>
 800ac4a:	4605      	mov	r5, r0
 800ac4c:	2800      	cmp	r0, #0
 800ac4e:	d0ed      	beq.n	800ac2c <sensor_network_start_transport+0x18>
 800ac50:	2300      	movs	r3, #0
 800ac52:	461a      	mov	r2, r3
 800ac54:	4619      	mov	r1, r3
 800ac56:	4618      	mov	r0, r3
 800ac58:	f001 fcbc 	bl	800c5d4 <__assert_func>
        os_callout_init(&callout, os_eventq_dflt_get(), start_transport_callback, (void *)(uint32_t)iface_type);
 800ac5c:	f002 f87c 	bl	800cd58 <os_eventq_dflt_get>
 800ac60:	4e07      	ldr	r6, [pc, #28]	; (800ac80 <sensor_network_start_transport+0x6c>)
 800ac62:	4623      	mov	r3, r4
 800ac64:	4a07      	ldr	r2, [pc, #28]	; (800ac84 <sensor_network_start_transport+0x70>)
 800ac66:	4601      	mov	r1, r0
 800ac68:	4630      	mov	r0, r6
 800ac6a:	f001 fe31 	bl	800c8d0 <os_callout_init>
        os_callout_reset(&callout, 1 * OS_TICKS_PER_SEC);  //  Trigger the callout in 1 second
 800ac6e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800ac72:	4630      	mov	r0, r6
 800ac74:	f001 fe58 	bl	800c928 <os_callout_reset>
        return 0;       
 800ac78:	e7d8      	b.n	800ac2c <sensor_network_start_transport+0x18>
 800ac7a:	bf00      	nop
 800ac7c:	200004fc 	.word	0x200004fc
 800ac80:	20000474 	.word	0x20000474
 800ac84:	0800aca1 	.word	0x0800aca1

0800ac88 <start_server_transport>:
int start_server_transport(void) {
 800ac88:	b508      	push	{r3, lr}
    int rc = sensor_network_start_transport(i);
 800ac8a:	2000      	movs	r0, #0
 800ac8c:	f7ff ffc2 	bl	800ac14 <sensor_network_start_transport>
    assert(rc == 0);
 800ac90:	b900      	cbnz	r0, 800ac94 <start_server_transport+0xc>
}
 800ac92:	bd08      	pop	{r3, pc}
    assert(rc == 0);
 800ac94:	2300      	movs	r3, #0
 800ac96:	461a      	mov	r2, r3
 800ac98:	4619      	mov	r1, r3
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	f001 fc9a 	bl	800c5d4 <__assert_func>

0800aca0 <start_transport_callback>:
static void start_transport_callback(struct os_event *ev) {
 800aca0:	b510      	push	{r4, lr}
    uint8_t iface_type = (uint8_t)(uint32_t)ev->ev_arg;
 800aca2:	7a04      	ldrb	r4, [r0, #8]
    console_printf("NET start\n");
 800aca4:	4806      	ldr	r0, [pc, #24]	; (800acc0 <start_transport_callback+0x20>)
 800aca6:	f7ff fca1 	bl	800a5ec <console_printf>
    rc = sensor_network_register_transport(iface_type);  assert(rc == 0);
 800acaa:	4620      	mov	r0, r4
 800acac:	f7ff ff50 	bl	800ab50 <sensor_network_register_transport>
 800acb0:	b900      	cbnz	r0, 800acb4 <start_transport_callback+0x14>
}
 800acb2:	bd10      	pop	{r4, pc}
    rc = sensor_network_register_transport(iface_type);  assert(rc == 0);
 800acb4:	2300      	movs	r3, #0
 800acb6:	461a      	mov	r2, r3
 800acb8:	4619      	mov	r1, r3
 800acba:	4618      	mov	r0, r3
 800acbc:	f001 fc8a 	bl	800c5d4 <__assert_func>
 800acc0:	08018040 	.word	0x08018040

0800acc4 <sensor_network_init_post>:

//  Interface type and URI of the CoAP message being composed.
static uint8_t current_iface_type = 0xff;
static const char *current_uri = NULL;

bool sensor_network_init_post(uint8_t iface_type, const char *uri) {
 800acc4:	b510      	push	{r4, lr}
    //  Start composing the CoAP Server or Collector message with the sensor data in the payload.  This will 
    //  block other tasks from composing and posting CoAP messages (through a semaphore).
    //  We only have 1 memory buffer for composing CoAP messages so it needs to be locked.
    //  Return true if successful, false if network has not been registered.
    if (uri == NULL || uri[0] == 0) { uri = COAP_URI; }
 800acc6:	b341      	cbz	r1, 800ad1a <sensor_network_init_post+0x56>
 800acc8:	460b      	mov	r3, r1
 800acca:	780a      	ldrb	r2, [r1, #0]
 800accc:	b33a      	cbz	r2, 800ad1e <sensor_network_init_post+0x5a>
    assert(uri);  assert(iface_type >= 0 && iface_type < MAX_INTERFACE_TYPES);
 800acce:	b343      	cbz	r3, 800ad22 <sensor_network_init_post+0x5e>
 800acd0:	2801      	cmp	r0, #1
 800acd2:	d82b      	bhi.n	800ad2c <sensor_network_init_post+0x68>
    struct sensor_network_interface *iface = &sensor_network_interfaces[iface_type];
    if (!iface->transport_registered) {
 800acd4:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 800acd8:	0091      	lsls	r1, r2, #2
 800acda:	4a23      	ldr	r2, [pc, #140]	; (800ad68 <sensor_network_init_post+0xa4>)
 800acdc:	440a      	add	r2, r1
 800acde:	7c12      	ldrb	r2, [r2, #16]
 800ace0:	b352      	cbz	r2, 800ad38 <sensor_network_init_post+0x74>
        //  If transport has not been registered, wait for the transport to be registered.
        console_printf("NET network not ready\n");
        return false;
    }
    void *endpoint = &sensor_network_endpoints[iface_type];
 800ace2:	4a22      	ldr	r2, [pc, #136]	; (800ad6c <sensor_network_init_post+0xa8>)
 800ace4:	eb02 1200 	add.w	r2, r2, r0, lsl #4
    assert(iface->network_device);  assert(iface->register_transport_func);  assert(endpoint);
 800ace8:	eb00 0180 	add.w	r1, r0, r0, lsl #2
 800acec:	008c      	lsls	r4, r1, #2
 800acee:	491e      	ldr	r1, [pc, #120]	; (800ad68 <sensor_network_init_post+0xa4>)
 800acf0:	4421      	add	r1, r4
 800acf2:	6849      	ldr	r1, [r1, #4]
 800acf4:	b329      	cbz	r1, 800ad42 <sensor_network_init_post+0x7e>
 800acf6:	eb00 0180 	add.w	r1, r0, r0, lsl #2
 800acfa:	008c      	lsls	r4, r1, #2
 800acfc:	491a      	ldr	r1, [pc, #104]	; (800ad68 <sensor_network_init_post+0xa4>)
 800acfe:	4421      	add	r1, r4
 800ad00:	68c9      	ldr	r1, [r1, #12]
 800ad02:	b321      	cbz	r1, 800ad4e <sensor_network_init_post+0x8a>
    current_iface_type = iface_type;
 800ad04:	491a      	ldr	r1, [pc, #104]	; (800ad70 <sensor_network_init_post+0xac>)
 800ad06:	7008      	strb	r0, [r1, #0]
    current_uri = uri;
 800ad08:	491a      	ldr	r1, [pc, #104]	; (800ad74 <sensor_network_init_post+0xb0>)
 800ad0a:	600b      	str	r3, [r1, #0]
    bool status = init_sensor_post(endpoint);
 800ad0c:	4610      	mov	r0, r2
 800ad0e:	f7ff fd3d 	bl	800a78c <init_sensor_post>
    assert(status);
 800ad12:	4603      	mov	r3, r0
 800ad14:	b308      	cbz	r0, 800ad5a <sensor_network_init_post+0x96>
    return status;
}
 800ad16:	4618      	mov	r0, r3
 800ad18:	bd10      	pop	{r4, pc}
    if (uri == NULL || uri[0] == 0) { uri = COAP_URI; }
 800ad1a:	4b17      	ldr	r3, [pc, #92]	; (800ad78 <sensor_network_init_post+0xb4>)
 800ad1c:	e7d7      	b.n	800acce <sensor_network_init_post+0xa>
 800ad1e:	4b16      	ldr	r3, [pc, #88]	; (800ad78 <sensor_network_init_post+0xb4>)
 800ad20:	e7d5      	b.n	800acce <sensor_network_init_post+0xa>
    assert(uri);  assert(iface_type >= 0 && iface_type < MAX_INTERFACE_TYPES);
 800ad22:	461a      	mov	r2, r3
 800ad24:	4619      	mov	r1, r3
 800ad26:	4618      	mov	r0, r3
 800ad28:	f001 fc54 	bl	800c5d4 <__assert_func>
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	461a      	mov	r2, r3
 800ad30:	4619      	mov	r1, r3
 800ad32:	4618      	mov	r0, r3
 800ad34:	f001 fc4e 	bl	800c5d4 <__assert_func>
        console_printf("NET network not ready\n");
 800ad38:	4810      	ldr	r0, [pc, #64]	; (800ad7c <sensor_network_init_post+0xb8>)
 800ad3a:	f7ff fc57 	bl	800a5ec <console_printf>
        return false;
 800ad3e:	2300      	movs	r3, #0
 800ad40:	e7e9      	b.n	800ad16 <sensor_network_init_post+0x52>
    assert(iface->network_device);  assert(iface->register_transport_func);  assert(endpoint);
 800ad42:	2300      	movs	r3, #0
 800ad44:	461a      	mov	r2, r3
 800ad46:	4619      	mov	r1, r3
 800ad48:	4618      	mov	r0, r3
 800ad4a:	f001 fc43 	bl	800c5d4 <__assert_func>
 800ad4e:	2300      	movs	r3, #0
 800ad50:	461a      	mov	r2, r3
 800ad52:	4619      	mov	r1, r3
 800ad54:	4618      	mov	r0, r3
 800ad56:	f001 fc3d 	bl	800c5d4 <__assert_func>
    assert(status);
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	461a      	mov	r2, r3
 800ad5e:	4619      	mov	r1, r3
 800ad60:	4618      	mov	r0, r3
 800ad62:	f001 fc37 	bl	800c5d4 <__assert_func>
 800ad66:	bf00      	nop
 800ad68:	200004fc 	.word	0x200004fc
 800ad6c:	200004dc 	.word	0x200004dc
 800ad70:	20000211 	.word	0x20000211
 800ad74:	20000494 	.word	0x20000494
 800ad78:	08017ee8 	.word	0x08017ee8
 800ad7c:	08017fe0 	.word	0x08017fe0

0800ad80 <init_server_post>:
bool init_server_post(const char *uri) {
 800ad80:	b508      	push	{r3, lr}
    bool status = sensor_network_init_post(i, uri);
 800ad82:	4601      	mov	r1, r0
 800ad84:	2000      	movs	r0, #0
 800ad86:	f7ff ff9d 	bl	800acc4 <sensor_network_init_post>
}
 800ad8a:	bd08      	pop	{r3, pc}

0800ad8c <sensor_network_prepare_post>:

bool sensor_network_prepare_post(int encoding) {
 800ad8c:	b508      	push	{r3, lr}
    //  Set the encoding format for the CoAP message: APPLICATION_JSON or APPLICATION_CBOR.  If set to 0, use the default encoding format.
    //  Return true if successful.
    uint8_t iface_type = current_iface_type;
 800ad8e:	4b14      	ldr	r3, [pc, #80]	; (800ade0 <sensor_network_prepare_post+0x54>)
 800ad90:	781a      	ldrb	r2, [r3, #0]
    const char *uri = current_uri;
 800ad92:	4b14      	ldr	r3, [pc, #80]	; (800ade4 <sensor_network_prepare_post+0x58>)
 800ad94:	6819      	ldr	r1, [r3, #0]
    assert(uri);  assert(iface_type >= 0 && iface_type < MAX_INTERFACE_TYPES);
 800ad96:	b161      	cbz	r1, 800adb2 <sensor_network_prepare_post+0x26>
 800ad98:	2a01      	cmp	r2, #1
 800ad9a:	d810      	bhi.n	800adbe <sensor_network_prepare_post+0x32>
    void *endpoint = &sensor_network_endpoints[iface_type];
 800ad9c:	4b12      	ldr	r3, [pc, #72]	; (800ade8 <sensor_network_prepare_post+0x5c>)
 800ad9e:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    assert(endpoint);

    //  Use the specified encoding. If not specified, select the default encoding for the interface type.
    int enc = (encoding > 0) ? encoding : sensor_network_encoding[iface_type];
 800ada2:	2800      	cmp	r0, #0
 800ada4:	dd11      	ble.n	800adca <sensor_network_prepare_post+0x3e>
    bool status = prepare_sensor_post(endpoint, uri, enc);
 800ada6:	4602      	mov	r2, r0
 800ada8:	4618      	mov	r0, r3
 800adaa:	f7ff fda7 	bl	800a8fc <prepare_sensor_post>
    assert(status);
 800adae:	b180      	cbz	r0, 800add2 <sensor_network_prepare_post+0x46>
    return status;
}
 800adb0:	bd08      	pop	{r3, pc}
    assert(uri);  assert(iface_type >= 0 && iface_type < MAX_INTERFACE_TYPES);
 800adb2:	2300      	movs	r3, #0
 800adb4:	461a      	mov	r2, r3
 800adb6:	4619      	mov	r1, r3
 800adb8:	4618      	mov	r0, r3
 800adba:	f001 fc0b 	bl	800c5d4 <__assert_func>
 800adbe:	2300      	movs	r3, #0
 800adc0:	461a      	mov	r2, r3
 800adc2:	4619      	mov	r1, r3
 800adc4:	4618      	mov	r0, r3
 800adc6:	f001 fc05 	bl	800c5d4 <__assert_func>
    int enc = (encoding > 0) ? encoding : sensor_network_encoding[iface_type];
 800adca:	4808      	ldr	r0, [pc, #32]	; (800adec <sensor_network_prepare_post+0x60>)
 800adcc:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800add0:	e7e9      	b.n	800ada6 <sensor_network_prepare_post+0x1a>
    assert(status);
 800add2:	2300      	movs	r3, #0
 800add4:	461a      	mov	r2, r3
 800add6:	4619      	mov	r1, r3
 800add8:	4618      	mov	r0, r3
 800adda:	f001 fbfb 	bl	800c5d4 <__assert_func>
 800adde:	bf00      	nop
 800ade0:	20000211 	.word	0x20000211
 800ade4:	20000494 	.word	0x20000494
 800ade8:	200004dc 	.word	0x200004dc
 800adec:	08017f98 	.word	0x08017f98

0800adf0 <sensor_network_do_post>:
    bool status = sensor_network_do_post(i);
    assert(status);
    return status;
}

bool sensor_network_do_post(uint8_t iface_type) {
 800adf0:	b508      	push	{r3, lr}
    //  Post the CoAP Server or Collector message to the CoAP Background Task for transmission.  After posting the
    //  message to the background task, we release a semaphore that unblocks other requests
    //  to compose and post CoAP messages.
    assert(iface_type >= 0 && iface_type < MAX_INTERFACE_TYPES);
 800adf2:	2801      	cmp	r0, #1
 800adf4:	d803      	bhi.n	800adfe <sensor_network_do_post+0xe>
    bool status = do_sensor_post();
 800adf6:	f7ff fe3d 	bl	800aa74 <do_sensor_post>
    assert(status);
 800adfa:	b130      	cbz	r0, 800ae0a <sensor_network_do_post+0x1a>
    return status;
}
 800adfc:	bd08      	pop	{r3, pc}
    assert(iface_type >= 0 && iface_type < MAX_INTERFACE_TYPES);
 800adfe:	2300      	movs	r3, #0
 800ae00:	461a      	mov	r2, r3
 800ae02:	4619      	mov	r1, r3
 800ae04:	4618      	mov	r0, r3
 800ae06:	f001 fbe5 	bl	800c5d4 <__assert_func>
    assert(status);
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	461a      	mov	r2, r3
 800ae0e:	4619      	mov	r1, r3
 800ae10:	4618      	mov	r0, r3
 800ae12:	f001 fbdf 	bl	800c5d4 <__assert_func>

0800ae16 <do_server_post>:
bool do_server_post(void) {    
 800ae16:	b508      	push	{r3, lr}
    bool status = sensor_network_do_post(i);
 800ae18:	2000      	movs	r0, #0
 800ae1a:	f7ff ffe9 	bl	800adf0 <sensor_network_do_post>
    assert(status);
 800ae1e:	b100      	cbz	r0, 800ae22 <do_server_post+0xc>
}
 800ae20:	bd08      	pop	{r3, pc}
    assert(status);
 800ae22:	2300      	movs	r3, #0
 800ae24:	461a      	mov	r2, r3
 800ae26:	4619      	mov	r1, r3
 800ae28:	4618      	mov	r0, r3
 800ae2a:	f001 fbd3 	bl	800c5d4 <__assert_func>
	...

0800ae30 <is_sensor_node>:
}

bool is_sensor_node(void) {
    //  Return true if this is a Sensor Node.
    //  This is a Sensor Node if the Hardware ID matches one of the Sensor Node Hardware IDs.
    if (sensor_node_address) { return true; }  //  sensor_node_address is set in sensor_network_init().
 800ae30:	4b04      	ldr	r3, [pc, #16]	; (800ae44 <is_sensor_node+0x14>)
 800ae32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae36:	4313      	orrs	r3, r2
 800ae38:	d101      	bne.n	800ae3e <is_sensor_node+0xe>
    return false;
 800ae3a:	2000      	movs	r0, #0
}
 800ae3c:	4770      	bx	lr
    if (sensor_node_address) { return true; }  //  sensor_node_address is set in sensor_network_init().
 800ae3e:	2001      	movs	r0, #1
 800ae40:	4770      	bx	lr
 800ae42:	bf00      	nop
 800ae44:	20000528 	.word	0x20000528

0800ae48 <get_hardware_id>:
}

/////////////////////////////////////////////////////////
//  Sensor Network Addresses

const uint8_t *get_hardware_id(void) {
 800ae48:	b508      	push	{r3, lr}
    //  Return the Hardware ID, which is unique across all microcontrollers.
    if (hw_id_len == 0) {
 800ae4a:	4b16      	ldr	r3, [pc, #88]	; (800aea4 <get_hardware_id+0x5c>)
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	b10b      	cbz	r3, 800ae54 <get_hardware_id+0xc>
        assert((unsigned) hw_id_len >= sizeof(hw_id));  //  Hardware ID too short.
        hw_id_len = hal_bsp_hw_id(hw_id, sizeof(hw_id));  assert(hw_id_len > 0);  //  Get the hardware ID.
        console_printf("%shwid ", _net);  console_dump(hw_id, hw_id_len);  console_printf("\n");
    }
    return hw_id;
}
 800ae50:	4815      	ldr	r0, [pc, #84]	; (800aea8 <get_hardware_id+0x60>)
 800ae52:	bd08      	pop	{r3, pc}
        hw_id_len = hal_bsp_hw_id_len();     //  Fetch the length, i.e. 12
 800ae54:	f000 ffdc 	bl	800be10 <hal_bsp_hw_id_len>
 800ae58:	4b12      	ldr	r3, [pc, #72]	; (800aea4 <get_hardware_id+0x5c>)
 800ae5a:	6018      	str	r0, [r3, #0]
        assert((unsigned) hw_id_len >= sizeof(hw_id));  //  Hardware ID too short.
 800ae5c:	280b      	cmp	r0, #11
 800ae5e:	d914      	bls.n	800ae8a <get_hardware_id+0x42>
        hw_id_len = hal_bsp_hw_id(hw_id, sizeof(hw_id));  assert(hw_id_len > 0);  //  Get the hardware ID.
 800ae60:	210c      	movs	r1, #12
 800ae62:	4811      	ldr	r0, [pc, #68]	; (800aea8 <get_hardware_id+0x60>)
 800ae64:	f000 ffd6 	bl	800be14 <hal_bsp_hw_id>
 800ae68:	4b0e      	ldr	r3, [pc, #56]	; (800aea4 <get_hardware_id+0x5c>)
 800ae6a:	6018      	str	r0, [r3, #0]
 800ae6c:	2800      	cmp	r0, #0
 800ae6e:	dd12      	ble.n	800ae96 <get_hardware_id+0x4e>
        console_printf("%shwid ", _net);  console_dump(hw_id, hw_id_len);  console_printf("\n");
 800ae70:	490e      	ldr	r1, [pc, #56]	; (800aeac <get_hardware_id+0x64>)
 800ae72:	480f      	ldr	r0, [pc, #60]	; (800aeb0 <get_hardware_id+0x68>)
 800ae74:	f7ff fbba 	bl	800a5ec <console_printf>
 800ae78:	4b0a      	ldr	r3, [pc, #40]	; (800aea4 <get_hardware_id+0x5c>)
 800ae7a:	6819      	ldr	r1, [r3, #0]
 800ae7c:	480a      	ldr	r0, [pc, #40]	; (800aea8 <get_hardware_id+0x60>)
 800ae7e:	f7ff fb45 	bl	800a50c <console_dump>
 800ae82:	480c      	ldr	r0, [pc, #48]	; (800aeb4 <get_hardware_id+0x6c>)
 800ae84:	f7ff fbb2 	bl	800a5ec <console_printf>
 800ae88:	e7e2      	b.n	800ae50 <get_hardware_id+0x8>
        assert((unsigned) hw_id_len >= sizeof(hw_id));  //  Hardware ID too short.
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	461a      	mov	r2, r3
 800ae8e:	4619      	mov	r1, r3
 800ae90:	4618      	mov	r0, r3
 800ae92:	f001 fb9f 	bl	800c5d4 <__assert_func>
        hw_id_len = hal_bsp_hw_id(hw_id, sizeof(hw_id));  assert(hw_id_len > 0);  //  Get the hardware ID.
 800ae96:	2300      	movs	r3, #0
 800ae98:	461a      	mov	r2, r3
 800ae9a:	4619      	mov	r1, r3
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	f001 fb99 	bl	800c5d4 <__assert_func>
 800aea2:	bf00      	nop
 800aea4:	200004d8 	.word	0x200004d8
 800aea8:	200004cc 	.word	0x200004cc
 800aeac:	08017ff8 	.word	0x08017ff8
 800aeb0:	08017f90 	.word	0x08017f90
 800aeb4:	080185b4 	.word	0x080185b4

0800aeb8 <is_collector_node>:
bool is_collector_node(void) {
 800aeb8:	b508      	push	{r3, lr}
    const uint8_t *hardware_id = get_hardware_id();
 800aeba:	f7ff ffc5 	bl	800ae48 <get_hardware_id>
    if (memcmp(hardware_id, COLLECTOR_NODE_HW_ID, HARDWARE_ID_LENGTH) == 0) { return true; }
 800aebe:	220c      	movs	r2, #12
 800aec0:	4903      	ldr	r1, [pc, #12]	; (800aed0 <is_collector_node+0x18>)
 800aec2:	f003 f827 	bl	800df14 <memcmp>
 800aec6:	b108      	cbz	r0, 800aecc <is_collector_node+0x14>
    return false; 
 800aec8:	2000      	movs	r0, #0
}
 800aeca:	bd08      	pop	{r3, pc}
    if (memcmp(hardware_id, COLLECTOR_NODE_HW_ID, HARDWARE_ID_LENGTH) == 0) { return true; }
 800aecc:	2001      	movs	r0, #1
 800aece:	e7fc      	b.n	800aeca <is_collector_node+0x12>
 800aed0:	08017f20 	.word	0x08017f20

0800aed4 <is_standalone_node>:
bool is_standalone_node(void) {
 800aed4:	b510      	push	{r4, lr}
    if (!is_collector_node() && !is_sensor_node()) { return true; }
 800aed6:	f7ff ffef 	bl	800aeb8 <is_collector_node>
 800aeda:	b928      	cbnz	r0, 800aee8 <is_standalone_node+0x14>
 800aedc:	4604      	mov	r4, r0
 800aede:	f7ff ffa7 	bl	800ae30 <is_sensor_node>
 800aee2:	b910      	cbnz	r0, 800aeea <is_standalone_node+0x16>
 800aee4:	2401      	movs	r4, #1
 800aee6:	e000      	b.n	800aeea <is_standalone_node+0x16>
    return false;
 800aee8:	2400      	movs	r4, #0
}
 800aeea:	4620      	mov	r0, r4
 800aeec:	bd10      	pop	{r4, pc}
	...

0800aef0 <get_device_id>:

//  Device Type e.g. l476
static const char *DEVICE_TYPE = MYNEWT_VAL(DEVICE_TYPE);

const char *get_device_id(void) {
 800aef0:	b538      	push	{r3, r4, r5, lr}
    //  Get the randomly-generated Device ID that will be sent in every CoAP Server message.  Changes upon restart.
    if (device_id_text[0]) { return device_id_text; }
 800aef2:	4b16      	ldr	r3, [pc, #88]	; (800af4c <get_device_id+0x5c>)
 800aef4:	781b      	ldrb	r3, [r3, #0]
 800aef6:	b10b      	cbz	r3, 800aefc <get_device_id+0xc>
        strcpy(device_id_text, DEVICE_TYPE);
        device_id_text[strlen(DEVICE_TYPE)] = ',';
    }
    console_printf("%srandom device id %s\n", _net, device_id_text);
    return device_id_text;
}
 800aef8:	4814      	ldr	r0, [pc, #80]	; (800af4c <get_device_id+0x5c>)
 800aefa:	bd38      	pop	{r3, r4, r5, pc}
    int rc = hmac_prng_generate(device_id, DEVICE_ID_LENGTH);  assert(rc == 0);
 800aefc:	2110      	movs	r1, #16
 800aefe:	4814      	ldr	r0, [pc, #80]	; (800af50 <get_device_id+0x60>)
 800af00:	f003 ff02 	bl	800ed08 <hmac_prng_generate>
 800af04:	4604      	mov	r4, r0
 800af06:	b908      	cbnz	r0, 800af0c <get_device_id+0x1c>
    char *s = device_id_text; int i;
 800af08:	4d10      	ldr	r5, [pc, #64]	; (800af4c <get_device_id+0x5c>)
 800af0a:	e00d      	b.n	800af28 <get_device_id+0x38>
    int rc = hmac_prng_generate(device_id, DEVICE_ID_LENGTH);  assert(rc == 0);
 800af0c:	2300      	movs	r3, #0
 800af0e:	461a      	mov	r2, r3
 800af10:	4619      	mov	r1, r3
 800af12:	4618      	mov	r0, r3
 800af14:	f001 fb5e 	bl	800c5d4 <__assert_func>
        sprintf(s, "%02x", device_id[i]);
 800af18:	4b0d      	ldr	r3, [pc, #52]	; (800af50 <get_device_id+0x60>)
 800af1a:	5d1a      	ldrb	r2, [r3, r4]
 800af1c:	490d      	ldr	r1, [pc, #52]	; (800af54 <get_device_id+0x64>)
 800af1e:	4628      	mov	r0, r5
 800af20:	f003 f845 	bl	800dfae <sprintf>
        s += 2;
 800af24:	3502      	adds	r5, #2
    for (i = 0; i < DEVICE_ID_LENGTH; i++) {
 800af26:	3401      	adds	r4, #1
 800af28:	2c0f      	cmp	r4, #15
 800af2a:	ddf5      	ble.n	800af18 <get_device_id+0x28>
    device_id_text[DEVICE_ID_TEXT_LENGTH - 1] = 0;
 800af2c:	4a07      	ldr	r2, [pc, #28]	; (800af4c <get_device_id+0x5c>)
 800af2e:	2300      	movs	r3, #0
 800af30:	f882 3020 	strb.w	r3, [r2, #32]
        strcpy(device_id_text, DEVICE_TYPE);
 800af34:	4b08      	ldr	r3, [pc, #32]	; (800af58 <get_device_id+0x68>)
 800af36:	e893 0003 	ldmia.w	r3, {r0, r1}
 800af3a:	6010      	str	r0, [r2, #0]
        device_id_text[strlen(DEVICE_TYPE)] = ',';
 800af3c:	232c      	movs	r3, #44	; 0x2c
 800af3e:	7113      	strb	r3, [r2, #4]
    console_printf("%srandom device id %s\n", _net, device_id_text);
 800af40:	4906      	ldr	r1, [pc, #24]	; (800af5c <get_device_id+0x6c>)
 800af42:	4807      	ldr	r0, [pc, #28]	; (800af60 <get_device_id+0x70>)
 800af44:	f7ff fb52 	bl	800a5ec <console_printf>
    return device_id_text;
 800af48:	e7d6      	b.n	800aef8 <get_device_id+0x8>
 800af4a:	bf00      	nop
 800af4c:	200004a8 	.word	0x200004a8
 800af50:	20000498 	.word	0x20000498
 800af54:	08017f68 	.word	0x08017f68
 800af58:	08017f70 	.word	0x08017f70
 800af5c:	08017ff8 	.word	0x08017ff8
 800af60:	08017f78 	.word	0x08017f78

0800af64 <sensor_network_init>:
const char **get_sensor_node_names(void) { return sensor_node_names; }

/////////////////////////////////////////////////////////
//  Sensor Network Configuration

void sensor_network_init(void) {
 800af64:	b538      	push	{r3, r4, r5, lr}
    //  Allocate Sensor Node address for this node.

    //  Set the Sensor Node names for remote_sensor_create().
    for (int i = 0; i < SENSOR_NETWORK_SIZE; i++) {
 800af66:	2400      	movs	r4, #0
 800af68:	2c04      	cmp	r4, #4
 800af6a:	dc15      	bgt.n	800af98 <sensor_network_init+0x34>
        int len = sprintf((char *) sensor_node_names[i], "%010llx", sensor_node_addresses[i]);
 800af6c:	4b23      	ldr	r3, [pc, #140]	; (800affc <sensor_network_init+0x98>)
 800af6e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800af72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af76:	4922      	ldr	r1, [pc, #136]	; (800b000 <sensor_network_init+0x9c>)
 800af78:	4822      	ldr	r0, [pc, #136]	; (800b004 <sensor_network_init+0xa0>)
 800af7a:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800af7e:	f003 f816 	bl	800dfae <sprintf>
        assert(len + 1 <= NODE_NAME_LENGTH);
 800af82:	3001      	adds	r0, #1
 800af84:	280b      	cmp	r0, #11
 800af86:	dc01      	bgt.n	800af8c <sensor_network_init+0x28>
    for (int i = 0; i < SENSOR_NETWORK_SIZE; i++) {
 800af88:	3401      	adds	r4, #1
 800af8a:	e7ed      	b.n	800af68 <sensor_network_init+0x4>
        assert(len + 1 <= NODE_NAME_LENGTH);
 800af8c:	2300      	movs	r3, #0
 800af8e:	461a      	mov	r2, r3
 800af90:	4619      	mov	r1, r3
 800af92:	4618      	mov	r0, r3
 800af94:	f001 fb1e 	bl	800c5d4 <__assert_func>
    }
    //  Get Sensor Node address if applicable.
    const uint8_t *hardware_id = get_hardware_id();
 800af98:	f7ff ff56 	bl	800ae48 <get_hardware_id>
 800af9c:	4605      	mov	r5, r0
    int i;
    for (i = 0; i < SENSOR_NETWORK_SIZE; i++) {
 800af9e:	2400      	movs	r4, #0
 800afa0:	2c04      	cmp	r4, #4
 800afa2:	dc19      	bgt.n	800afd8 <sensor_network_init+0x74>
        if (memcmp(hardware_id, SENSOR_NODE_HW_IDS[i], HARDWARE_ID_LENGTH) == 0) {
 800afa4:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800afa8:	0093      	lsls	r3, r2, #2
 800afaa:	220c      	movs	r2, #12
 800afac:	4916      	ldr	r1, [pc, #88]	; (800b008 <sensor_network_init+0xa4>)
 800afae:	4419      	add	r1, r3
 800afb0:	4628      	mov	r0, r5
 800afb2:	f002 ffaf 	bl	800df14 <memcmp>
 800afb6:	b108      	cbz	r0, 800afbc <sensor_network_init+0x58>
    for (i = 0; i < SENSOR_NETWORK_SIZE; i++) {
 800afb8:	3401      	adds	r4, #1
 800afba:	e7f1      	b.n	800afa0 <sensor_network_init+0x3c>
            sensor_node_address = sensor_node_addresses[i];
 800afbc:	4b0f      	ldr	r3, [pc, #60]	; (800affc <sensor_network_init+0x98>)
 800afbe:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800afc2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800afc6:	4b11      	ldr	r3, [pc, #68]	; (800b00c <sensor_network_init+0xa8>)
 800afc8:	e9c3 0100 	strd	r0, r1, [r3]
            console_printf("%ssensor%s#%d\n", _net, _node, i + 1);
 800afcc:	1c63      	adds	r3, r4, #1
 800afce:	4a10      	ldr	r2, [pc, #64]	; (800b010 <sensor_network_init+0xac>)
 800afd0:	4910      	ldr	r1, [pc, #64]	; (800b014 <sensor_network_init+0xb0>)
 800afd2:	4811      	ldr	r0, [pc, #68]	; (800b018 <sensor_network_init+0xb4>)
 800afd4:	f7ff fb0a 	bl	800a5ec <console_printf>
            break;
        }
    }
    //  Display the type of node.
    if (is_collector_node()) { console_printf("%scollector%s\n", _net, _node); }
 800afd8:	f7ff ff6e 	bl	800aeb8 <is_collector_node>
 800afdc:	b940      	cbnz	r0, 800aff0 <sensor_network_init+0x8c>
    else if (is_standalone_node()) { console_printf("%sstandalone%s\n", _net, _node); }
 800afde:	f7ff ff79 	bl	800aed4 <is_standalone_node>
 800afe2:	b150      	cbz	r0, 800affa <sensor_network_init+0x96>
 800afe4:	4a0a      	ldr	r2, [pc, #40]	; (800b010 <sensor_network_init+0xac>)
 800afe6:	490b      	ldr	r1, [pc, #44]	; (800b014 <sensor_network_init+0xb0>)
 800afe8:	480c      	ldr	r0, [pc, #48]	; (800b01c <sensor_network_init+0xb8>)
 800afea:	f7ff faff 	bl	800a5ec <console_printf>
}
 800afee:	e004      	b.n	800affa <sensor_network_init+0x96>
    if (is_collector_node()) { console_printf("%scollector%s\n", _net, _node); }
 800aff0:	4a07      	ldr	r2, [pc, #28]	; (800b010 <sensor_network_init+0xac>)
 800aff2:	4908      	ldr	r1, [pc, #32]	; (800b014 <sensor_network_init+0xb0>)
 800aff4:	480a      	ldr	r0, [pc, #40]	; (800b020 <sensor_network_init+0xbc>)
 800aff6:	f7ff faf9 	bl	800a5ec <console_printf>
}
 800affa:	bd38      	pop	{r3, r4, r5, pc}
 800affc:	08018018 	.word	0x08018018
 800b000:	08017fa0 	.word	0x08017fa0
 800b004:	20000214 	.word	0x20000214
 800b008:	08017f2c 	.word	0x08017f2c
 800b00c:	20000528 	.word	0x20000528
 800b010:	08017fa8 	.word	0x08017fa8
 800b014:	08017ff8 	.word	0x08017ff8
 800b018:	08017fb0 	.word	0x08017fb0
 800b01c:	08017fd0 	.word	0x08017fd0
 800b020:	08017fc0 	.word	0x08017fc0

0800b024 <sensor_network_register_interface>:

int sensor_network_register_interface(const struct sensor_network_interface *iface) {
 800b024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    //  Register the Network Interface (e.g. BC95-G, ESP8266, nRF24L01) for the Sensor Network.
    assert(iface);
 800b026:	2800      	cmp	r0, #0
 800b028:	d033      	beq.n	800b092 <sensor_network_register_interface+0x6e>
 800b02a:	4603      	mov	r3, r0
    uint8_t i = iface->iface_type;  assert(i >= 0 && i < MAX_INTERFACE_TYPES);
 800b02c:	7802      	ldrb	r2, [r0, #0]
 800b02e:	2a01      	cmp	r2, #1
 800b030:	d835      	bhi.n	800b09e <sensor_network_register_interface+0x7a>
    assert(iface->network_device);  assert(iface->server_endpoint_size);  assert(iface->register_transport_func);
 800b032:	6841      	ldr	r1, [r0, #4]
 800b034:	2900      	cmp	r1, #0
 800b036:	d038      	beq.n	800b0aa <sensor_network_register_interface+0x86>
 800b038:	7a01      	ldrb	r1, [r0, #8]
 800b03a:	2900      	cmp	r1, #0
 800b03c:	d03b      	beq.n	800b0b6 <sensor_network_register_interface+0x92>
 800b03e:	68c0      	ldr	r0, [r0, #12]
 800b040:	2800      	cmp	r0, #0
 800b042:	d03e      	beq.n	800b0c2 <sensor_network_register_interface+0x9e>
    assert(iface->server_endpoint_size <= MAX_ENDPOINT_SIZE);     //  Need to increase MAX_ENDPOINT_SIZE.
 800b044:	2910      	cmp	r1, #16
 800b046:	d842      	bhi.n	800b0ce <sensor_network_register_interface+0xaa>
    assert(sensor_network_interfaces[i].network_device == NULL);  //  Interface already registered.
 800b048:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 800b04c:	0088      	lsls	r0, r1, #2
 800b04e:	4926      	ldr	r1, [pc, #152]	; (800b0e8 <sensor_network_register_interface+0xc4>)
 800b050:	4401      	add	r1, r0
 800b052:	6849      	ldr	r1, [r1, #4]
 800b054:	2900      	cmp	r1, #0
 800b056:	d140      	bne.n	800b0da <sensor_network_register_interface+0xb6>
    memcpy(&sensor_network_interfaces[i], iface, sizeof(struct sensor_network_interface));  //  Copy the interface.
 800b058:	4d23      	ldr	r5, [pc, #140]	; (800b0e8 <sensor_network_register_interface+0xc4>)
 800b05a:	0091      	lsls	r1, r2, #2
 800b05c:	4411      	add	r1, r2
 800b05e:	008c      	lsls	r4, r1, #2
 800b060:	1929      	adds	r1, r5, r4
 800b062:	6818      	ldr	r0, [r3, #0]
 800b064:	f8d3 c004 	ldr.w	ip, [r3, #4]
 800b068:	689f      	ldr	r7, [r3, #8]
 800b06a:	68de      	ldr	r6, [r3, #12]
 800b06c:	5128      	str	r0, [r5, r4]
 800b06e:	f8c1 c004 	str.w	ip, [r1, #4]
 800b072:	608f      	str	r7, [r1, #8]
 800b074:	60ce      	str	r6, [r1, #12]
 800b076:	6918      	ldr	r0, [r3, #16]
 800b078:	6108      	str	r0, [r1, #16]
    sensor_network_interfaces[i].transport_registered = 0;        //  We defer the registration of the transport till first use.
 800b07a:	2400      	movs	r4, #0
 800b07c:	740c      	strb	r4, [r1, #16]
    console_printf("%s%s %s\n", _net, sensor_network_shortname[i], sensor_network_interfaces[i].network_device);
 800b07e:	684b      	ldr	r3, [r1, #4]
 800b080:	491a      	ldr	r1, [pc, #104]	; (800b0ec <sensor_network_register_interface+0xc8>)
 800b082:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b086:	491a      	ldr	r1, [pc, #104]	; (800b0f0 <sensor_network_register_interface+0xcc>)
 800b088:	481a      	ldr	r0, [pc, #104]	; (800b0f4 <sensor_network_register_interface+0xd0>)
 800b08a:	f7ff faaf 	bl	800a5ec <console_printf>
    return 0;
}
 800b08e:	4620      	mov	r0, r4
 800b090:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert(iface);
 800b092:	2300      	movs	r3, #0
 800b094:	461a      	mov	r2, r3
 800b096:	4619      	mov	r1, r3
 800b098:	4618      	mov	r0, r3
 800b09a:	f001 fa9b 	bl	800c5d4 <__assert_func>
    uint8_t i = iface->iface_type;  assert(i >= 0 && i < MAX_INTERFACE_TYPES);
 800b09e:	2300      	movs	r3, #0
 800b0a0:	461a      	mov	r2, r3
 800b0a2:	4619      	mov	r1, r3
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	f001 fa95 	bl	800c5d4 <__assert_func>
    assert(iface->network_device);  assert(iface->server_endpoint_size);  assert(iface->register_transport_func);
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	461a      	mov	r2, r3
 800b0ae:	4619      	mov	r1, r3
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	f001 fa8f 	bl	800c5d4 <__assert_func>
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	461a      	mov	r2, r3
 800b0ba:	4619      	mov	r1, r3
 800b0bc:	4618      	mov	r0, r3
 800b0be:	f001 fa89 	bl	800c5d4 <__assert_func>
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	461a      	mov	r2, r3
 800b0c6:	4619      	mov	r1, r3
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	f001 fa83 	bl	800c5d4 <__assert_func>
    assert(iface->server_endpoint_size <= MAX_ENDPOINT_SIZE);     //  Need to increase MAX_ENDPOINT_SIZE.
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	461a      	mov	r2, r3
 800b0d2:	4619      	mov	r1, r3
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	f001 fa7d 	bl	800c5d4 <__assert_func>
    assert(sensor_network_interfaces[i].network_device == NULL);  //  Interface already registered.
 800b0da:	2300      	movs	r3, #0
 800b0dc:	461a      	mov	r2, r3
 800b0de:	4619      	mov	r1, r3
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	f001 fa77 	bl	800c5d4 <__assert_func>
 800b0e6:	bf00      	nop
 800b0e8:	200004fc 	.word	0x200004fc
 800b0ec:	0801800c 	.word	0x0801800c
 800b0f0:	08017ff8 	.word	0x08017ff8
 800b0f4:	08018000 	.word	0x08018000

0800b0f8 <oc_buffer_tx>:
    assert(rc == 0);
}

static void
oc_buffer_tx(struct os_event *ev)
{
 800b0f8:	b508      	push	{r3, lr}
    struct os_mbuf *m;

    while ((m = os_mqueue_get(&oc_outq)) != NULL) {
 800b0fa:	e002      	b.n	800b102 <oc_buffer_tx+0xa>
                                    oc_events[RI_TO_DTLS_EVENT], m);
                }
            } else
#endif
            {
                oc_send_buffer(m);
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	f000 fc4b 	bl	800b998 <oc_send_buffer>
    while ((m = os_mqueue_get(&oc_outq)) != NULL) {
 800b102:	4808      	ldr	r0, [pc, #32]	; (800b124 <oc_buffer_tx+0x2c>)
 800b104:	f001 fe35 	bl	800cd72 <os_mqueue_get>
 800b108:	4603      	mov	r3, r0
 800b10a:	b148      	cbz	r0, 800b120 <oc_buffer_tx+0x28>
        STAILQ_NEXT(OS_MBUF_PKTHDR(m), omp_next) = NULL;
 800b10c:	2200      	movs	r2, #0
 800b10e:	615a      	str	r2, [r3, #20]
        if (OC_MBUF_ENDPOINT(m)->ep.oe_flags & OC_ENDPOINT_MULTICAST) {
 800b110:	7e1a      	ldrb	r2, [r3, #24]
 800b112:	f012 0f08 	tst.w	r2, #8
 800b116:	d0f1      	beq.n	800b0fc <oc_buffer_tx+0x4>
            oc_send_multicast_message(m);
 800b118:	4618      	mov	r0, r3
 800b11a:	f000 fc4d 	bl	800b9b8 <oc_send_multicast_message>
 800b11e:	e7f0      	b.n	800b102 <oc_buffer_tx+0xa>
            }
#ifdef OC_CLIENT
        }
#endif
    }
}
 800b120:	bd08      	pop	{r3, pc}
 800b122:	bf00      	nop
 800b124:	20000580 	.word	0x20000580

0800b128 <oc_buffer_rx>:

static void
oc_buffer_rx(struct os_event *ev)
{
 800b128:	b500      	push	{lr}
 800b12a:	b083      	sub	sp, #12
    struct os_mbuf *m;
#if defined(OC_SECURITY)
    uint8_t b;
#endif

    while ((m = os_mqueue_get(&oc_inq)) != NULL) {
 800b12c:	4808      	ldr	r0, [pc, #32]	; (800b150 <oc_buffer_rx+0x28>)
 800b12e:	f001 fe20 	bl	800cd72 <os_mqueue_get>
 800b132:	9001      	str	r0, [sp, #4]
 800b134:	b140      	cbz	r0, 800b148 <oc_buffer_rx+0x20>
            oc_process_post(&oc_dtls_handler, oc_events[UDP_TO_DTLS_EVENT], m);
        } else {
            coap_receive(m);
        }
#else
        coap_receive(&m);
 800b136:	a801      	add	r0, sp, #4
 800b138:	f000 fcae 	bl	800ba98 <__wrap_coap_receive>
#endif
        if (m) {
 800b13c:	9801      	ldr	r0, [sp, #4]
 800b13e:	2800      	cmp	r0, #0
 800b140:	d0f4      	beq.n	800b12c <oc_buffer_rx+0x4>
            os_mbuf_free_chain(m);
 800b142:	f001 fe8b 	bl	800ce5c <os_mbuf_free_chain>
 800b146:	e7f1      	b.n	800b12c <oc_buffer_rx+0x4>
        }
    }
}
 800b148:	b003      	add	sp, #12
 800b14a:	f85d fb04 	ldr.w	pc, [sp], #4
 800b14e:	bf00      	nop
 800b150:	20000568 	.word	0x20000568

0800b154 <oc_allocate_mbuf>:
{
 800b154:	b570      	push	{r4, r5, r6, lr}
};

static inline int
oc_endpoint_size(struct oc_endpoint *oe)
{
    assert(oc_transports[oe->ep.oe_type]);
 800b156:	7803      	ldrb	r3, [r0, #0]
 800b158:	f003 0307 	and.w	r3, r3, #7
 800b15c:	4a0c      	ldr	r2, [pc, #48]	; (800b190 <oc_allocate_mbuf+0x3c>)
 800b15e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b162:	b183      	cbz	r3, 800b186 <oc_allocate_mbuf+0x32>
 800b164:	4604      	mov	r4, r0
    return oc_transports[oe->ep.oe_type]->ot_ep_size(oe);
 800b166:	685b      	ldr	r3, [r3, #4]
 800b168:	4798      	blx	r3
 800b16a:	4606      	mov	r6, r0
    m = os_msys_get_pkthdr(0, ep_size);
 800b16c:	b281      	uxth	r1, r0
 800b16e:	2000      	movs	r0, #0
 800b170:	f002 f90c 	bl	800d38c <os_msys_get_pkthdr>
    if (!m) {
 800b174:	4605      	mov	r5, r0
 800b176:	b120      	cbz	r0, 800b182 <oc_allocate_mbuf+0x2e>
    memcpy(OC_MBUF_ENDPOINT(m), oe, ep_size);
 800b178:	4632      	mov	r2, r6
 800b17a:	4621      	mov	r1, r4
 800b17c:	3018      	adds	r0, #24
 800b17e:	f002 feed 	bl	800df5c <memcpy>
}
 800b182:	4628      	mov	r0, r5
 800b184:	bd70      	pop	{r4, r5, r6, pc}
    assert(oc_transports[oe->ep.oe_type]);
 800b186:	461a      	mov	r2, r3
 800b188:	4619      	mov	r1, r3
 800b18a:	4618      	mov	r0, r3
 800b18c:	f001 fa22 	bl	800c5d4 <__assert_func>
 800b190:	20003818 	.word	0x20003818

0800b194 <oc_send_message>:
{
 800b194:	b510      	push	{r4, lr}
 800b196:	4604      	mov	r4, r0
    rc = os_mqueue_put(&oc_outq, oc_evq_get(), m);
 800b198:	f000 fbd6 	bl	800b948 <oc_evq_get>
 800b19c:	4622      	mov	r2, r4
 800b19e:	4601      	mov	r1, r0
 800b1a0:	4805      	ldr	r0, [pc, #20]	; (800b1b8 <oc_send_message+0x24>)
 800b1a2:	f001 fdf9 	bl	800cd98 <os_mqueue_put>
    assert(rc == 0);
 800b1a6:	b900      	cbnz	r0, 800b1aa <oc_send_message+0x16>
}
 800b1a8:	bd10      	pop	{r4, pc}
    assert(rc == 0);
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	461a      	mov	r2, r3
 800b1ae:	4619      	mov	r1, r3
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	f001 fa0f 	bl	800c5d4 <__assert_func>
 800b1b6:	bf00      	nop
 800b1b8:	20000580 	.word	0x20000580

0800b1bc <oc_buffer_init>:

void
oc_buffer_init(void)
{
 800b1bc:	b508      	push	{r3, lr}
    os_mqueue_init(&oc_inq, oc_buffer_rx, NULL);
 800b1be:	2200      	movs	r2, #0
 800b1c0:	4904      	ldr	r1, [pc, #16]	; (800b1d4 <oc_buffer_init+0x18>)
 800b1c2:	4805      	ldr	r0, [pc, #20]	; (800b1d8 <oc_buffer_init+0x1c>)
 800b1c4:	f001 fdcc 	bl	800cd60 <os_mqueue_init>
    os_mqueue_init(&oc_outq, oc_buffer_tx, NULL);
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	4904      	ldr	r1, [pc, #16]	; (800b1dc <oc_buffer_init+0x20>)
 800b1cc:	4804      	ldr	r0, [pc, #16]	; (800b1e0 <oc_buffer_init+0x24>)
 800b1ce:	f001 fdc7 	bl	800cd60 <os_mqueue_init>
}
 800b1d2:	bd08      	pop	{r3, pc}
 800b1d4:	0800b129 	.word	0x0800b129
 800b1d8:	20000568 	.word	0x20000568
 800b1dc:	0800b0f9 	.word	0x0800b0f9
 800b1e0:	20000580 	.word	0x20000580

0800b1e4 <oc_rep_init>:
  return (uint16_t)err;
}

void
oc_rep_init(void)
{
 800b1e4:	b500      	push	{lr}
 800b1e6:	b083      	sub	sp, #12
    os_mempool_init(&oc_rep_objects, EST_NUM_REP_OBJECTS,
 800b1e8:	4b05      	ldr	r3, [pc, #20]	; (800b200 <oc_rep_init+0x1c>)
 800b1ea:	9300      	str	r3, [sp, #0]
 800b1ec:	4b05      	ldr	r3, [pc, #20]	; (800b204 <oc_rep_init+0x20>)
 800b1ee:	2218      	movs	r2, #24
 800b1f0:	2102      	movs	r1, #2
 800b1f2:	4805      	ldr	r0, [pc, #20]	; (800b208 <oc_rep_init+0x24>)
 800b1f4:	f002 f80e 	bl	800d214 <os_mempool_init>
                    sizeof(oc_rep_t), oc_rep_objects_area, "oc_rep_o");
}
 800b1f8:	b003      	add	sp, #12
 800b1fa:	f85d fb04 	ldr.w	pc, [sp], #4
 800b1fe:	bf00      	nop
 800b200:	08018054 	.word	0x08018054
 800b204:	200005b4 	.word	0x200005b4
 800b208:	20000598 	.word	0x20000598

0800b20c <free_client_cb>:
}

#ifdef OC_CLIENT
static void
free_client_cb(oc_client_cb_t *cb)
{
 800b20c:	b510      	push	{r4, lr}
 800b20e:	4604      	mov	r4, r0
    os_callout_stop(&cb->callout);
 800b210:	3004      	adds	r0, #4
 800b212:	f001 fb6b 	bl	800c8ec <os_callout_stop>
    oc_free_string(&cb->uri);
 800b216:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800b21a:	f000 fc24 	bl	800ba66 <oc_free_string>
    SLIST_REMOVE(&oc_client_cbs, cb, oc_client_cb, next);
 800b21e:	4b09      	ldr	r3, [pc, #36]	; (800b244 <free_client_cb+0x38>)
 800b220:	681a      	ldr	r2, [r3, #0]
 800b222:	42a2      	cmp	r2, r4
 800b224:	d103      	bne.n	800b22e <free_client_cb+0x22>
 800b226:	6812      	ldr	r2, [r2, #0]
 800b228:	601a      	str	r2, [r3, #0]
 800b22a:	e005      	b.n	800b238 <free_client_cb+0x2c>
 800b22c:	461a      	mov	r2, r3
 800b22e:	6813      	ldr	r3, [r2, #0]
 800b230:	42a3      	cmp	r3, r4
 800b232:	d1fb      	bne.n	800b22c <free_client_cb+0x20>
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	6013      	str	r3, [r2, #0]
    os_memblock_put(&oc_client_cb_pool, cb);
 800b238:	4621      	mov	r1, r4
 800b23a:	4803      	ldr	r0, [pc, #12]	; (800b248 <free_client_cb+0x3c>)
 800b23c:	f002 f81c 	bl	800d278 <os_memblock_put>
}
 800b240:	bd10      	pop	{r4, pc}
 800b242:	bf00      	nop
 800b244:	200006c8 	.word	0x200006c8
 800b248:	200006ac 	.word	0x200006ac

0800b24c <oc_ri_remove_cb>:
    return NULL;
}

static void
oc_ri_remove_cb(struct os_event *ev)
{
 800b24c:	b508      	push	{r3, lr}
    struct oc_client_cb *cb;

    cb = ev->ev_arg;

    free_client_cb(cb);
 800b24e:	6880      	ldr	r0, [r0, #8]
 800b250:	f7ff ffdc 	bl	800b20c <free_client_cb>
}
 800b254:	bd08      	pop	{r3, pc}
	...

0800b258 <oc_ri_mem_init>:
{
 800b258:	b500      	push	{lr}
 800b25a:	b083      	sub	sp, #12
    os_mempool_init(&oc_client_cb_pool, MAX_NUM_CONCURRENT_REQUESTS,
 800b25c:	4b07      	ldr	r3, [pc, #28]	; (800b27c <oc_ri_mem_init+0x24>)
 800b25e:	9300      	str	r3, [sp, #0]
 800b260:	4b07      	ldr	r3, [pc, #28]	; (800b280 <oc_ri_mem_init+0x28>)
 800b262:	2264      	movs	r2, #100	; 0x64
 800b264:	2102      	movs	r1, #2
 800b266:	4807      	ldr	r0, [pc, #28]	; (800b284 <oc_ri_mem_init+0x2c>)
 800b268:	f001 ffd4 	bl	800d214 <os_mempool_init>
    oc_rep_init();
 800b26c:	f7ff ffba 	bl	800b1e4 <oc_rep_init>
    oc_buffer_init();
 800b270:	f7ff ffa4 	bl	800b1bc <oc_buffer_init>
}
 800b274:	b003      	add	sp, #12
 800b276:	f85d fb04 	ldr.w	pc, [sp], #4
 800b27a:	bf00      	nop
 800b27c:	08018060 	.word	0x08018060
 800b280:	200005e4 	.word	0x200005e4
 800b284:	200006ac 	.word	0x200006ac

0800b288 <oc_ri_remove_client_cb_by_mid>:
{
 800b288:	b508      	push	{r3, lr}
    SLIST_FOREACH(cb, &oc_client_cbs, next) {
 800b28a:	4b06      	ldr	r3, [pc, #24]	; (800b2a4 <oc_ri_remove_client_cb_by_mid+0x1c>)
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	b123      	cbz	r3, 800b29a <oc_ri_remove_client_cb_by_mid+0x12>
        if (cb->mid == mid) {
 800b290:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 800b292:	4282      	cmp	r2, r0
 800b294:	d001      	beq.n	800b29a <oc_ri_remove_client_cb_by_mid+0x12>
    SLIST_FOREACH(cb, &oc_client_cbs, next) {
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	e7f9      	b.n	800b28e <oc_ri_remove_client_cb_by_mid+0x6>
    if (cb) {
 800b29a:	b113      	cbz	r3, 800b2a2 <oc_ri_remove_client_cb_by_mid+0x1a>
        free_client_cb(cb);
 800b29c:	4618      	mov	r0, r3
 800b29e:	f7ff ffb5 	bl	800b20c <free_client_cb>
}
 800b2a2:	bd08      	pop	{r3, pc}
 800b2a4:	200006c8 	.word	0x200006c8

0800b2a8 <oc_ri_alloc_client_cb>:

oc_client_cb_t *
oc_ri_alloc_client_cb(const char *uri, oc_server_handle_t *server,
                      oc_method_t method, void *handler, oc_qos_t qos)
{
 800b2a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2ac:	4680      	mov	r8, r0
 800b2ae:	460e      	mov	r6, r1
 800b2b0:	4617      	mov	r7, r2
 800b2b2:	461d      	mov	r5, r3
    oc_client_cb_t *cb;

    cb = os_memblock_get(&oc_client_cb_pool);
 800b2b4:	4823      	ldr	r0, [pc, #140]	; (800b344 <oc_ri_alloc_client_cb+0x9c>)
 800b2b6:	f001 ffb7 	bl	800d228 <os_memblock_get>
    if (!cb) {
 800b2ba:	4604      	mov	r4, r0
 800b2bc:	2800      	cmp	r0, #0
 800b2be:	d03e      	beq.n	800b33e <oc_ri_alloc_client_cb+0x96>
        return NULL;
    }
    cb->mid = coap_get_mid();
 800b2c0:	f000 f932 	bl	800b528 <coap_get_mid>
 800b2c4:	86e0      	strh	r0, [r4, #54]	; 0x36
    oc_new_string(&cb->uri, uri);
 800b2c6:	4641      	mov	r1, r8
 800b2c8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800b2cc:	f000 fbb5 	bl	800ba3a <oc_new_string>
    cb->method = method;
 800b2d0:	f884 7061 	strb.w	r7, [r4, #97]	; 0x61
    cb->qos = qos;
 800b2d4:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800b2d8:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    cb->handler = handler;
 800b2dc:	6525      	str	r5, [r4, #80]	; 0x50
    cb->token_len = 8;
 800b2de:	2308      	movs	r3, #8
 800b2e0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    int i = 0;
 800b2e4:	2500      	movs	r5, #0
    uint16_t r;
    while (i < cb->token_len) {
 800b2e6:	e005      	b.n	800b2f4 <oc_ri_alloc_client_cb+0x4c>
        r = oc_random_rand();
 800b2e8:	f000 fba2 	bl	800ba30 <oc_random_rand>
        memcpy(cb->token + i, &r, sizeof(r));
 800b2ec:	f104 032c 	add.w	r3, r4, #44	; 0x2c
 800b2f0:	5358      	strh	r0, [r3, r5]
        i += sizeof(r);
 800b2f2:	3502      	adds	r5, #2
    while (i < cb->token_len) {
 800b2f4:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800b2f8:	42ab      	cmp	r3, r5
 800b2fa:	dcf5      	bgt.n	800b2e8 <oc_ri_alloc_client_cb+0x40>
    }
    cb->discovery = false;
 800b2fc:	2300      	movs	r3, #0
 800b2fe:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
    cb->timestamp = oc_clock_time();
 800b302:	f000 fb91 	bl	800ba28 <oc_clock_time>
 800b306:	65e0      	str	r0, [r4, #92]	; 0x5c
    cb->observe_seq = -1;
 800b308:	f04f 33ff 	mov.w	r3, #4294967295
 800b30c:	65a3      	str	r3, [r4, #88]	; 0x58
    memcpy(&cb->server, server, sizeof(oc_server_handle_t));
 800b30e:	6831      	ldr	r1, [r6, #0]
 800b310:	6872      	ldr	r2, [r6, #4]
 800b312:	68b5      	ldr	r5, [r6, #8]
 800b314:	68f0      	ldr	r0, [r6, #12]
 800b316:	63a1      	str	r1, [r4, #56]	; 0x38
 800b318:	63e2      	str	r2, [r4, #60]	; 0x3c
 800b31a:	6425      	str	r5, [r4, #64]	; 0x40
 800b31c:	6460      	str	r0, [r4, #68]	; 0x44
 800b31e:	6931      	ldr	r1, [r6, #16]
 800b320:	6972      	ldr	r2, [r6, #20]
 800b322:	64a1      	str	r1, [r4, #72]	; 0x48
 800b324:	64e2      	str	r2, [r4, #76]	; 0x4c

    os_callout_init(&cb->callout, oc_evq_get(), oc_ri_remove_cb, cb);
 800b326:	f000 fb0f 	bl	800b948 <oc_evq_get>
 800b32a:	4623      	mov	r3, r4
 800b32c:	4a06      	ldr	r2, [pc, #24]	; (800b348 <oc_ri_alloc_client_cb+0xa0>)
 800b32e:	4601      	mov	r1, r0
 800b330:	1d20      	adds	r0, r4, #4
 800b332:	f001 facd 	bl	800c8d0 <os_callout_init>

    SLIST_INSERT_HEAD(&oc_client_cbs, cb, next);
 800b336:	4b05      	ldr	r3, [pc, #20]	; (800b34c <oc_ri_alloc_client_cb+0xa4>)
 800b338:	681a      	ldr	r2, [r3, #0]
 800b33a:	6022      	str	r2, [r4, #0]
 800b33c:	601c      	str	r4, [r3, #0]
    return cb;
}
 800b33e:	4620      	mov	r0, r4
 800b340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b344:	200006ac 	.word	0x200006ac
 800b348:	0800b24d 	.word	0x0800b24d
 800b34c:	200006c8 	.word	0x200006c8

0800b350 <coap_log_2>:
/*---------------------------------------------------------------------------*/
/*- Local helper functions --------------------------------------------------*/
/*---------------------------------------------------------------------------*/
static uint16_t
coap_log_2(uint16_t value)
{
 800b350:	4602      	mov	r2, r0
    uint16_t result = 0;
 800b352:	2000      	movs	r0, #0
 800b354:	e000      	b.n	800b358 <coap_log_2+0x8>

    do {
        value = value >> 1;
        result++;
 800b356:	4618      	mov	r0, r3
 800b358:	1c43      	adds	r3, r0, #1
 800b35a:	b29b      	uxth	r3, r3
    } while (value);
 800b35c:	0852      	lsrs	r2, r2, #1
 800b35e:	d1fa      	bne.n	800b356 <coap_log_2+0x6>

    return (result - 1);
}
 800b360:	4770      	bx	lr

0800b362 <coap_option_nibble>:
}
/*---------------------------------------------------------------------------*/
static uint8_t
coap_option_nibble(unsigned int value)
{
    if (value < 13) {
 800b362:	280c      	cmp	r0, #12
 800b364:	d904      	bls.n	800b370 <coap_option_nibble+0xe>
        return value;
    } else if (value <= 0xFF + 13) {
 800b366:	f5b0 7f86 	cmp.w	r0, #268	; 0x10c
 800b36a:	d803      	bhi.n	800b374 <coap_option_nibble+0x12>
        return 13;
 800b36c:	200d      	movs	r0, #13
 800b36e:	4770      	bx	lr
        return value;
 800b370:	b2c0      	uxtb	r0, r0
 800b372:	4770      	bx	lr
    } else {
        return 14;
 800b374:	200e      	movs	r0, #14
    }
}
 800b376:	4770      	bx	lr

0800b378 <coap_append_opt_hdr>:
/*---------------------------------------------------------------------------*/

static int
coap_append_opt_hdr(struct os_mbuf *m, unsigned int delta, size_t length)
{
 800b378:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b37a:	b083      	sub	sp, #12
 800b37c:	4606      	mov	r6, r0
 800b37e:	460d      	mov	r5, r1
 800b380:	4614      	mov	r4, r2
    uint8_t buffer[4];
    size_t written = 0;

    buffer[0] = coap_option_nibble(delta) << 4 | coap_option_nibble(length);
 800b382:	4608      	mov	r0, r1
 800b384:	f7ff ffed 	bl	800b362 <coap_option_nibble>
 800b388:	0107      	lsls	r7, r0, #4
 800b38a:	4620      	mov	r0, r4
 800b38c:	f7ff ffe9 	bl	800b362 <coap_option_nibble>
 800b390:	b240      	sxtb	r0, r0
 800b392:	4338      	orrs	r0, r7
 800b394:	f88d 0004 	strb.w	r0, [sp, #4]

    if (delta > 268) {
 800b398:	f5b5 7f86 	cmp.w	r5, #268	; 0x10c
 800b39c:	d914      	bls.n	800b3c8 <coap_append_opt_hdr+0x50>
        buffer[++written] = ((delta - 269) >> 8) & 0xff;
 800b39e:	f2a5 130d 	subw	r3, r5, #269	; 0x10d
 800b3a2:	0a1b      	lsrs	r3, r3, #8
 800b3a4:	f88d 3005 	strb.w	r3, [sp, #5]
        buffer[++written] = (delta - 269) & 0xff;
 800b3a8:	3d0d      	subs	r5, #13
 800b3aa:	f88d 5006 	strb.w	r5, [sp, #6]
 800b3ae:	2202      	movs	r2, #2
    } else if (delta > 12) {
        buffer[++written] = (delta - 13);
    }

    if (length > 268) {
 800b3b0:	f5b4 7f86 	cmp.w	r4, #268	; 0x10c
 800b3b4:	d811      	bhi.n	800b3da <coap_append_opt_hdr+0x62>
        buffer[++written] = ((length - 269) >> 8) & 0xff;
        buffer[++written] = (length - 269) & 0xff;
    } else if (length > 12) {
 800b3b6:	2c0c      	cmp	r4, #12
 800b3b8:	d91c      	bls.n	800b3f4 <coap_append_opt_hdr+0x7c>
        buffer[++written] = (length - 13);
 800b3ba:	3201      	adds	r2, #1
 800b3bc:	3c0d      	subs	r4, #13
 800b3be:	ab02      	add	r3, sp, #8
 800b3c0:	4413      	add	r3, r2
 800b3c2:	f803 4c04 	strb.w	r4, [r3, #-4]
 800b3c6:	e015      	b.n	800b3f4 <coap_append_opt_hdr+0x7c>
    } else if (delta > 12) {
 800b3c8:	2d0c      	cmp	r5, #12
 800b3ca:	d904      	bls.n	800b3d6 <coap_append_opt_hdr+0x5e>
        buffer[++written] = (delta - 13);
 800b3cc:	3d0d      	subs	r5, #13
 800b3ce:	f88d 5005 	strb.w	r5, [sp, #5]
 800b3d2:	2201      	movs	r2, #1
 800b3d4:	e7ec      	b.n	800b3b0 <coap_append_opt_hdr+0x38>
    size_t written = 0;
 800b3d6:	2200      	movs	r2, #0
 800b3d8:	e7ea      	b.n	800b3b0 <coap_append_opt_hdr+0x38>
        buffer[++written] = ((length - 269) >> 8) & 0xff;
 800b3da:	f2a4 130d 	subw	r3, r4, #269	; 0x10d
 800b3de:	0a1b      	lsrs	r3, r3, #8
 800b3e0:	a902      	add	r1, sp, #8
 800b3e2:	4411      	add	r1, r2
 800b3e4:	f801 3c03 	strb.w	r3, [r1, #-3]
        buffer[++written] = (length - 269) & 0xff;
 800b3e8:	3202      	adds	r2, #2
 800b3ea:	3c0d      	subs	r4, #13
 800b3ec:	ab02      	add	r3, sp, #8
 800b3ee:	4413      	add	r3, r2
 800b3f0:	f803 4c04 	strb.w	r4, [r3, #-4]
    }

    return os_mbuf_append(m, buffer, written + 1);
 800b3f4:	3201      	adds	r2, #1
 800b3f6:	b292      	uxth	r2, r2
 800b3f8:	a901      	add	r1, sp, #4
 800b3fa:	4630      	mov	r0, r6
 800b3fc:	f001 fd4a 	bl	800ce94 <os_mbuf_append>
}
 800b400:	b003      	add	sp, #12
 800b402:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b404 <coap_append_array_opt>:
/*---------------------------------------------------------------------------*/
static int
coap_append_array_opt(struct os_mbuf *m,
                      unsigned int number, unsigned int current_number,
                      uint8_t *array, size_t length, char split_char)
{
 800b404:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b408:	4682      	mov	sl, r0
 800b40a:	468b      	mov	fp, r1
 800b40c:	4611      	mov	r1, r2
 800b40e:	461e      	mov	r6, r3
 800b410:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800b412:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
    uint8_t *part_end = NULL;
    size_t blk;

    OC_LOG(DEBUG, "ARRAY type %u, len %zu\n", number, length);

    if (split_char != '\0') {
 800b416:	f1b9 0f00 	cmp.w	r9, #0
 800b41a:	d027      	beq.n	800b46c <coap_append_array_opt+0x68>
    uint8_t *part_start = array;
 800b41c:	4698      	mov	r8, r3
        for (j = 0; j <= length + 1; ++j) {
 800b41e:	2400      	movs	r4, #0
 800b420:	e015      	b.n	800b44e <coap_append_array_opt+0x4a>
            if (array[j] == split_char || j == length) {
                part_end = array + j;
                blk = part_end - part_start;
 800b422:	eba5 0508 	sub.w	r5, r5, r8

                rc = coap_append_opt_hdr(m, number - current_number, blk);
 800b426:	462a      	mov	r2, r5
 800b428:	ebab 0101 	sub.w	r1, fp, r1
 800b42c:	4650      	mov	r0, sl
 800b42e:	f7ff ffa3 	bl	800b378 <coap_append_opt_hdr>
                if (rc) {
 800b432:	4603      	mov	r3, r0
 800b434:	b9b8      	cbnz	r0, 800b466 <coap_append_array_opt+0x62>
                    return rc;
                }
                rc = os_mbuf_append(m, part_start, blk);
 800b436:	b2aa      	uxth	r2, r5
 800b438:	4641      	mov	r1, r8
 800b43a:	4650      	mov	r0, sl
 800b43c:	f001 fd2a 	bl	800ce94 <os_mbuf_append>
                if (rc) {
 800b440:	4603      	mov	r3, r0
 800b442:	b980      	cbnz	r0, 800b466 <coap_append_array_opt+0x62>
                }

                OC_LOG(DEBUG, "OPTION type %u, delta %u, len %zu\n", number,
                    number - current_number, (int)blk);

                ++j; /* skip the splitter */
 800b444:	3401      	adds	r4, #1
                current_number = number;
                part_start = array + j;
 800b446:	eb06 0804 	add.w	r8, r6, r4
                current_number = number;
 800b44a:	4659      	mov	r1, fp
        for (j = 0; j <= length + 1; ++j) {
 800b44c:	3401      	adds	r4, #1
 800b44e:	1c7b      	adds	r3, r7, #1
 800b450:	4622      	mov	r2, r4
 800b452:	42a3      	cmp	r3, r4
 800b454:	d306      	bcc.n	800b464 <coap_append_array_opt+0x60>
            if (array[j] == split_char || j == length) {
 800b456:	1935      	adds	r5, r6, r4
 800b458:	5d33      	ldrb	r3, [r6, r4]
 800b45a:	454b      	cmp	r3, r9
 800b45c:	d0e1      	beq.n	800b422 <coap_append_array_opt+0x1e>
 800b45e:	42ba      	cmp	r2, r7
 800b460:	d1f4      	bne.n	800b44c <coap_append_array_opt+0x48>
 800b462:	e7de      	b.n	800b422 <coap_append_array_opt+0x1e>

        OC_LOG(DEBUG, "OPTION type %u, delta %u, len %zu\n", number,
            number - current_number, length);
    }

    return 0;
 800b464:	2300      	movs	r3, #0
}
 800b466:	4618      	mov	r0, r3
 800b468:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rc = coap_append_opt_hdr(m, number - current_number, length);
 800b46c:	463a      	mov	r2, r7
 800b46e:	ebab 0101 	sub.w	r1, fp, r1
 800b472:	f7ff ff81 	bl	800b378 <coap_append_opt_hdr>
        if (rc) {
 800b476:	4603      	mov	r3, r0
 800b478:	2800      	cmp	r0, #0
 800b47a:	d1f4      	bne.n	800b466 <coap_append_array_opt+0x62>
        rc = os_mbuf_append(m, array, length);
 800b47c:	b2ba      	uxth	r2, r7
 800b47e:	4631      	mov	r1, r6
 800b480:	4650      	mov	r0, sl
 800b482:	f001 fd07 	bl	800ce94 <os_mbuf_append>
 800b486:	4603      	mov	r3, r0
 800b488:	e7ed      	b.n	800b466 <coap_append_array_opt+0x62>

0800b48a <coap_append_int_opt>:
{
 800b48a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b48e:	b085      	sub	sp, #20
 800b490:	9001      	str	r0, [sp, #4]
 800b492:	4610      	mov	r0, r2
 800b494:	461c      	mov	r4, r3
    if (0xFF000000 & value) {
 800b496:	f013 4b7f 	ands.w	fp, r3, #4278190080	; 0xff000000
 800b49a:	d13b      	bne.n	800b514 <coap_append_int_opt+0x8a>
    size_t i = 0;
 800b49c:	f04f 0800 	mov.w	r8, #0
    if (0xFFFF0000 & value) {
 800b4a0:	0c25      	lsrs	r5, r4, #16
 800b4a2:	042d      	lsls	r5, r5, #16
 800b4a4:	2d00      	cmp	r5, #0
 800b4a6:	d038      	beq.n	800b51a <coap_append_int_opt+0x90>
        ++i;
 800b4a8:	f108 0701 	add.w	r7, r8, #1
    if (0xFFFFFF00 & value) {
 800b4ac:	f034 0aff 	bics.w	sl, r4, #255	; 0xff
 800b4b0:	d035      	beq.n	800b51e <coap_append_int_opt+0x94>
        ++i;
 800b4b2:	1c7e      	adds	r6, r7, #1
    if (0xFFFFFFFF & value) {
 800b4b4:	b3ac      	cbz	r4, 800b522 <coap_append_int_opt+0x98>
        ++i;
 800b4b6:	f106 0901 	add.w	r9, r6, #1
    rc = coap_append_opt_hdr(m, number - current_number, i);
 800b4ba:	464a      	mov	r2, r9
 800b4bc:	1a09      	subs	r1, r1, r0
 800b4be:	9801      	ldr	r0, [sp, #4]
 800b4c0:	f7ff ff5a 	bl	800b378 <coap_append_opt_hdr>
    if (rc) {
 800b4c4:	4603      	mov	r3, r0
 800b4c6:	bb08      	cbnz	r0, 800b50c <coap_append_int_opt+0x82>
    if (0xFF000000 & value) {
 800b4c8:	f1bb 0f00 	cmp.w	fp, #0
 800b4cc:	d002      	beq.n	800b4d4 <coap_append_int_opt+0x4a>
        buffer[i++] = (uint8_t)(value >> 24);
 800b4ce:	0e23      	lsrs	r3, r4, #24
 800b4d0:	f88d 300c 	strb.w	r3, [sp, #12]
    if (0xFFFF0000 & value) {
 800b4d4:	b12d      	cbz	r5, 800b4e2 <coap_append_int_opt+0x58>
        buffer[i++] = (uint8_t)(value >> 16);
 800b4d6:	f3c4 4307 	ubfx	r3, r4, #16, #8
 800b4da:	aa04      	add	r2, sp, #16
 800b4dc:	4490      	add	r8, r2
 800b4de:	f808 3c04 	strb.w	r3, [r8, #-4]
    if (0xFFFFFF00 & value) {
 800b4e2:	f1ba 0f00 	cmp.w	sl, #0
 800b4e6:	d005      	beq.n	800b4f4 <coap_append_int_opt+0x6a>
        buffer[i++] = (uint8_t)(value >> 8);
 800b4e8:	f3c4 2307 	ubfx	r3, r4, #8, #8
 800b4ec:	aa04      	add	r2, sp, #16
 800b4ee:	4417      	add	r7, r2
 800b4f0:	f807 3c04 	strb.w	r3, [r7, #-4]
    if (0xFFFFFFFF & value) {
 800b4f4:	b11c      	cbz	r4, 800b4fe <coap_append_int_opt+0x74>
        buffer[i++] = (uint8_t)(value);
 800b4f6:	ab04      	add	r3, sp, #16
 800b4f8:	441e      	add	r6, r3
 800b4fa:	f806 4c04 	strb.w	r4, [r6, #-4]
    return os_mbuf_append(m, buffer, i);
 800b4fe:	fa1f f289 	uxth.w	r2, r9
 800b502:	a903      	add	r1, sp, #12
 800b504:	9801      	ldr	r0, [sp, #4]
 800b506:	f001 fcc5 	bl	800ce94 <os_mbuf_append>
 800b50a:	4603      	mov	r3, r0
}
 800b50c:	4618      	mov	r0, r3
 800b50e:	b005      	add	sp, #20
 800b510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ++i;
 800b514:	f04f 0801 	mov.w	r8, #1
 800b518:	e7c2      	b.n	800b4a0 <coap_append_int_opt+0x16>
 800b51a:	4647      	mov	r7, r8
 800b51c:	e7c6      	b.n	800b4ac <coap_append_int_opt+0x22>
 800b51e:	463e      	mov	r6, r7
 800b520:	e7c8      	b.n	800b4b4 <coap_append_int_opt+0x2a>
 800b522:	46b1      	mov	r9, r6
 800b524:	e7c9      	b.n	800b4ba <coap_append_int_opt+0x30>
	...

0800b528 <coap_get_mid>:
}
/*---------------------------------------------------------------------------*/
uint16_t
coap_get_mid(void)
{
    return ++current_mid;
 800b528:	4b02      	ldr	r3, [pc, #8]	; (800b534 <coap_get_mid+0xc>)
 800b52a:	8818      	ldrh	r0, [r3, #0]
 800b52c:	3001      	adds	r0, #1
 800b52e:	b280      	uxth	r0, r0
 800b530:	8018      	strh	r0, [r3, #0]
}
 800b532:	4770      	bx	lr
 800b534:	200006cc 	.word	0x200006cc

0800b538 <coap_init_message>:
/*---------------------------------------------------------------------------*/
void
coap_init_message(coap_packet_t *pkt, coap_message_type_t type,
                  uint8_t code, uint16_t mid)
{
 800b538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b53a:	4604      	mov	r4, r0
 800b53c:	460f      	mov	r7, r1
 800b53e:	4616      	mov	r6, r2
 800b540:	461d      	mov	r5, r3
    /* Important thing */
    memset(pkt, 0, sizeof(coap_packet_t));
 800b542:	226c      	movs	r2, #108	; 0x6c
 800b544:	2100      	movs	r1, #0
 800b546:	f002 fd16 	bl	800df76 <memset>

    pkt->type = type;
 800b54a:	7067      	strb	r7, [r4, #1]
    pkt->code = code;
 800b54c:	70a6      	strb	r6, [r4, #2]
    pkt->mid = mid;
 800b54e:	80a5      	strh	r5, [r4, #4]
}
 800b550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b554 <coap_serialize_message>:

/*---------------------------------------------------------------------------*/

int
coap_serialize_message(coap_packet_t *pkt, struct os_mbuf *m)
{
 800b554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b558:	b082      	sub	sp, #8
 800b55a:	4604      	mov	r4, r0
 800b55c:	460d      	mov	r5, r1
    uint32_t u32;
    int tcp_hdr;
    int len, data_len;

    /* Initialize */
    pkt->version = 1;
 800b55e:	2301      	movs	r3, #1
 800b560:	7003      	strb	r3, [r0, #0]
 * Whether transport uses TCP-style headers or not.
 */
static inline int
oc_endpoint_use_tcp(struct oc_endpoint *oe)
{
    return oc_transports[oe->ep.oe_type]->ot_flags & OC_TRANSPORT_USE_TCP;
 800b562:	7e0b      	ldrb	r3, [r1, #24]
 800b564:	f003 0307 	and.w	r3, r3, #7
 800b568:	4aaf      	ldr	r2, [pc, #700]	; (800b828 <coap_serialize_message+0x2d4>)
 800b56a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b56e:	781e      	ldrb	r6, [r3, #0]
 800b570:	f006 0601 	and.w	r6, r6, #1

    /*
     * Move data pointer, leave enough space to insert coap header and
     * token before options.
     */
    m->om_data += (sizeof(struct coap_tcp_hdr32) + pkt->token_len);
 800b574:	7983      	ldrb	r3, [r0, #6]
 800b576:	1d9a      	adds	r2, r3, #6
 800b578:	680b      	ldr	r3, [r1, #0]
 800b57a:	4413      	add	r3, r2
 800b57c:	600b      	str	r3, [r1, #0]
    COAP_SERIALIZE_BYTE_OPT(pkt, m, COAP_OPTION_ETAG, etag, "ETag");
    COAP_SERIALIZE_INT_OPT(pkt, m, COAP_OPTION_IF_NONE_MATCH,
        content_format - pkt-> content_format /* hack to get a zero field */,
                           "If-None-Match");
#endif
    COAP_SERIALIZE_INT_OPT(pkt, m, COAP_OPTION_OBSERVE, observe, "Observe");
 800b57e:	7bc3      	ldrb	r3, [r0, #15]
 800b580:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b584:	d177      	bne.n	800b676 <coap_serialize_message+0x122>
    current_number = 0;
 800b586:	2700      	movs	r7, #0
    COAP_SERIALIZE_INT_OPT(pkt, m, COAP_OPTION_URI_PORT, uri_port,
                              "Uri-Port");
    COAP_SERIALIZE_STRING_OPT(pkt, m, COAP_OPTION_LOCATION_PATH,
                              location_path, '/', "Location-Path");
#endif
    COAP_SERIALIZE_STRING_OPT(pkt, m, COAP_OPTION_URI_PATH, uri_path, '/',
 800b588:	7c23      	ldrb	r3, [r4, #16]
 800b58a:	f013 0f08 	tst.w	r3, #8
 800b58e:	d17c      	bne.n	800b68a <coap_serialize_message+0x136>
                              "Uri-Path");

    COAP_SERIALIZE_INT_OPT(pkt, m, COAP_OPTION_CONTENT_FORMAT, content_format,
 800b590:	7c23      	ldrb	r3, [r4, #16]
 800b592:	f013 0f10 	tst.w	r3, #16
 800b596:	f040 8086 	bne.w	800b6a6 <coap_serialize_message+0x152>
                           "Content-Format");
#if 0
    COAP_SERIALIZE_INT_OPT(pkt, m, COAP_OPTION_MAX_AGE, max_age, "Max-Age");
#endif
    COAP_SERIALIZE_STRING_OPT(pkt, m, COAP_OPTION_URI_QUERY, uri_query, '&',
 800b59a:	f994 3010 	ldrsb.w	r3, [r4, #16]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	f2c0 808b 	blt.w	800b6ba <coap_serialize_message+0x166>
                              "Uri-Query");
    COAP_SERIALIZE_INT_OPT(pkt, m, COAP_OPTION_ACCEPT, accept, "Accept");
 800b5a4:	7c63      	ldrb	r3, [r4, #17]
 800b5a6:	f013 0f02 	tst.w	r3, #2
 800b5aa:	f040 8094 	bne.w	800b6d6 <coap_serialize_message+0x182>
#if 0
    COAP_SERIALIZE_STRING_OPT(pkt, m, COAP_OPTION_LOCATION_QUERY,
                              location_query, '&', "Location-Query");
#endif
    COAP_SERIALIZE_BLOCK_OPT(pkt, m, COAP_OPTION_BLOCK2, block2, "Block2");
 800b5ae:	f994 3011 	ldrsb.w	r3, [r4, #17]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	f2c0 8098 	blt.w	800b6e8 <coap_serialize_message+0x194>
    COAP_SERIALIZE_BLOCK_OPT(pkt, m, COAP_OPTION_BLOCK1, block1, "Block1");
 800b5b8:	7ca3      	ldrb	r3, [r4, #18]
 800b5ba:	f013 0f08 	tst.w	r3, #8
 800b5be:	d019      	beq.n	800b5f4 <coap_serialize_message+0xa0>
 800b5c0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800b5c2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800b5c6:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800b5ca:	b10b      	cbz	r3, 800b5d0 <coap_serialize_message+0x7c>
 800b5cc:	f048 0808 	orr.w	r8, r8, #8
 800b5d0:	f8b4 004a 	ldrh.w	r0, [r4, #74]	; 0x4a
 800b5d4:	0900      	lsrs	r0, r0, #4
 800b5d6:	f7ff febb 	bl	800b350 <coap_log_2>
 800b5da:	f000 030f 	and.w	r3, r0, #15
 800b5de:	ea43 0308 	orr.w	r3, r3, r8
 800b5e2:	463a      	mov	r2, r7
 800b5e4:	211b      	movs	r1, #27
 800b5e6:	4628      	mov	r0, r5
 800b5e8:	f7ff ff4f 	bl	800b48a <coap_append_int_opt>
 800b5ec:	2800      	cmp	r0, #0
 800b5ee:	f040 80a5 	bne.w	800b73c <coap_serialize_message+0x1e8>
 800b5f2:	271b      	movs	r7, #27
    COAP_SERIALIZE_INT_OPT(pkt, m, COAP_OPTION_SIZE2, size2, "Size2");
 800b5f4:	7ca3      	ldrb	r3, [r4, #18]
 800b5f6:	f013 0f10 	tst.w	r3, #16
 800b5fa:	f040 808d 	bne.w	800b718 <coap_serialize_message+0x1c4>
    COAP_SERIALIZE_STRING_OPT(pkt, m, COAP_OPTION_PROXY_URI, proxy_uri, '\0',
                              "Proxy-Uri");
    COAP_SERIALIZE_STRING_OPT(pkt, m, COAP_OPTION_PROXY_SCHEME, proxy_scheme,
                              '\0', "Proxy-Scheme");
#endif
    COAP_SERIALIZE_INT_OPT(pkt, m, COAP_OPTION_SIZE1, size1, "Size1");
 800b5fe:	7da3      	ldrb	r3, [r4, #22]
 800b600:	f013 0f10 	tst.w	r3, #16
 800b604:	f040 8091 	bne.w	800b72a <coap_serialize_message+0x1d6>

    /* Payload marker */
    if (pkt->payload_len) {
 800b608:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	f040 80a0 	bne.w	800b752 <coap_serialize_message+0x1fe>
        if (os_mbuf_append(m, "\xff", 1)) {
            goto err_mem;
        }
    }
    data_len = OS_MBUF_PKTLEN(m) + pkt->payload_len;
 800b612:	8a2f      	ldrh	r7, [r5, #16]
 800b614:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800b618:	441f      	add	r7, r3

    /*
     * Set header fields, aka CoAP header alignment nightmare.
     */
    if (!tcp_hdr) {
 800b61a:	2e00      	cmp	r6, #0
 800b61c:	f000 80a1 	beq.w	800b762 <coap_serialize_message+0x20e>
        cuh->code = pkt->code;
        u16 = htons(pkt->mid);
        memcpy(&cuh->id, &u16, sizeof(u16));
        memcpy(cuh + 1, pkt->token, pkt->token_len);
    } else {
        if (data_len < 13) {
 800b620:	2f0c      	cmp	r7, #12
 800b622:	f340 80cf 	ble.w	800b7c4 <coap_serialize_message+0x270>
            cth0 = (struct coap_tcp_hdr0 *)m->om_data;
            cth0->data_len = data_len;
            cth0->token_len = pkt->token_len;
            cth0->code = pkt->code;
            memcpy(cth0 + 1, pkt->token, pkt->token_len);
        } else if (data_len < 269) {
 800b626:	f5b7 7f86 	cmp.w	r7, #268	; 0x10c
 800b62a:	f340 80e2 	ble.w	800b7f2 <coap_serialize_message+0x29e>
            cth8->type = COAP_TCP_TYPE8;
            cth8->token_len = pkt->token_len;
            cth8->data_len = data_len - COAP_TCP_LENGTH8_OFF;
            cth8->code = pkt->code;
            memcpy(cth8 + 1, pkt->token, pkt->token_len);
        } else if (data_len < 65805) {
 800b62e:	4b7f      	ldr	r3, [pc, #508]	; (800b82c <coap_serialize_message+0x2d8>)
 800b630:	429f      	cmp	r7, r3
 800b632:	f300 80ff 	bgt.w	800b834 <coap_serialize_message+0x2e0>
            len = sizeof(struct coap_tcp_hdr16) + pkt->token_len;
 800b636:	79a1      	ldrb	r1, [r4, #6]
            os_mbuf_prepend(m, len);
 800b638:	3104      	adds	r1, #4
 800b63a:	4628      	mov	r0, r5
 800b63c:	f001 fd2c 	bl	800d098 <os_mbuf_prepend>
            cth16 = (struct coap_tcp_hdr16 *)m->om_data;
 800b640:	6828      	ldr	r0, [r5, #0]
            cth16->type = COAP_TCP_TYPE16;
 800b642:	7803      	ldrb	r3, [r0, #0]
 800b644:	220e      	movs	r2, #14
 800b646:	f362 1307 	bfi	r3, r2, #4, #4
 800b64a:	7003      	strb	r3, [r0, #0]
            cth16->token_len = pkt->token_len;
 800b64c:	79a2      	ldrb	r2, [r4, #6]
 800b64e:	b2db      	uxtb	r3, r3
 800b650:	f362 0303 	bfi	r3, r2, #0, #4
 800b654:	7003      	strb	r3, [r0, #0]
            u16 = htons(data_len - COAP_TCP_LENGTH16_OFF);
 800b656:	f2a7 170d 	subw	r7, r7, #269	; 0x10d
 800b65a:	f3c7 2307 	ubfx	r3, r7, #8, #8
 800b65e:	ea43 2707 	orr.w	r7, r3, r7, lsl #8
            memcpy(&cth16->data_len, &u16, sizeof(u16));
 800b662:	f8a0 7001 	strh.w	r7, [r0, #1]
            cth16->code = pkt->code;
 800b666:	78a3      	ldrb	r3, [r4, #2]
 800b668:	70c3      	strb	r3, [r0, #3]
            memcpy(cth16 + 1, pkt->token, pkt->token_len);
 800b66a:	79a2      	ldrb	r2, [r4, #6]
 800b66c:	1de1      	adds	r1, r4, #7
 800b66e:	3004      	adds	r0, #4
 800b670:	f002 fc74 	bl	800df5c <memcpy>
 800b674:	e096      	b.n	800b7a4 <coap_serialize_message+0x250>
    COAP_SERIALIZE_INT_OPT(pkt, m, COAP_OPTION_OBSERVE, observe, "Observe");
 800b676:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800b678:	2200      	movs	r2, #0
 800b67a:	2106      	movs	r1, #6
 800b67c:	4628      	mov	r0, r5
 800b67e:	f7ff ff04 	bl	800b48a <coap_append_int_opt>
 800b682:	2800      	cmp	r0, #0
 800b684:	d15a      	bne.n	800b73c <coap_serialize_message+0x1e8>
 800b686:	2706      	movs	r7, #6
 800b688:	e77e      	b.n	800b588 <coap_serialize_message+0x34>
    COAP_SERIALIZE_STRING_OPT(pkt, m, COAP_OPTION_URI_PATH, uri_path, '/',
 800b68a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800b68c:	222f      	movs	r2, #47	; 0x2f
 800b68e:	9201      	str	r2, [sp, #4]
 800b690:	9300      	str	r3, [sp, #0]
 800b692:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b694:	463a      	mov	r2, r7
 800b696:	210b      	movs	r1, #11
 800b698:	4628      	mov	r0, r5
 800b69a:	f7ff feb3 	bl	800b404 <coap_append_array_opt>
 800b69e:	2800      	cmp	r0, #0
 800b6a0:	d14c      	bne.n	800b73c <coap_serialize_message+0x1e8>
 800b6a2:	270b      	movs	r7, #11
 800b6a4:	e774      	b.n	800b590 <coap_serialize_message+0x3c>
    COAP_SERIALIZE_INT_OPT(pkt, m, COAP_OPTION_CONTENT_FORMAT, content_format,
 800b6a6:	8b23      	ldrh	r3, [r4, #24]
 800b6a8:	463a      	mov	r2, r7
 800b6aa:	210c      	movs	r1, #12
 800b6ac:	4628      	mov	r0, r5
 800b6ae:	f7ff feec 	bl	800b48a <coap_append_int_opt>
 800b6b2:	2800      	cmp	r0, #0
 800b6b4:	d142      	bne.n	800b73c <coap_serialize_message+0x1e8>
 800b6b6:	270c      	movs	r7, #12
 800b6b8:	e76f      	b.n	800b59a <coap_serialize_message+0x46>
    COAP_SERIALIZE_STRING_OPT(pkt, m, COAP_OPTION_URI_QUERY, uri_query, '&',
 800b6ba:	f8b4 3058 	ldrh.w	r3, [r4, #88]	; 0x58
 800b6be:	2226      	movs	r2, #38	; 0x26
 800b6c0:	9201      	str	r2, [sp, #4]
 800b6c2:	9300      	str	r3, [sp, #0]
 800b6c4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800b6c6:	463a      	mov	r2, r7
 800b6c8:	210f      	movs	r1, #15
 800b6ca:	4628      	mov	r0, r5
 800b6cc:	f7ff fe9a 	bl	800b404 <coap_append_array_opt>
 800b6d0:	bba0      	cbnz	r0, 800b73c <coap_serialize_message+0x1e8>
 800b6d2:	270f      	movs	r7, #15
 800b6d4:	e766      	b.n	800b5a4 <coap_serialize_message+0x50>
    COAP_SERIALIZE_INT_OPT(pkt, m, COAP_OPTION_ACCEPT, accept, "Accept");
 800b6d6:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 800b6d8:	463a      	mov	r2, r7
 800b6da:	2111      	movs	r1, #17
 800b6dc:	4628      	mov	r0, r5
 800b6de:	f7ff fed4 	bl	800b48a <coap_append_int_opt>
 800b6e2:	bb58      	cbnz	r0, 800b73c <coap_serialize_message+0x1e8>
 800b6e4:	2711      	movs	r7, #17
 800b6e6:	e762      	b.n	800b5ae <coap_serialize_message+0x5a>
    COAP_SERIALIZE_BLOCK_OPT(pkt, m, COAP_OPTION_BLOCK2, block2, "Block2");
 800b6e8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b6ea:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800b6ee:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800b6f2:	b10b      	cbz	r3, 800b6f8 <coap_serialize_message+0x1a4>
 800b6f4:	f048 0808 	orr.w	r8, r8, #8
 800b6f8:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
 800b6fa:	0900      	lsrs	r0, r0, #4
 800b6fc:	f7ff fe28 	bl	800b350 <coap_log_2>
 800b700:	f000 030f 	and.w	r3, r0, #15
 800b704:	ea43 0308 	orr.w	r3, r3, r8
 800b708:	463a      	mov	r2, r7
 800b70a:	2117      	movs	r1, #23
 800b70c:	4628      	mov	r0, r5
 800b70e:	f7ff febc 	bl	800b48a <coap_append_int_opt>
 800b712:	b998      	cbnz	r0, 800b73c <coap_serialize_message+0x1e8>
 800b714:	2717      	movs	r7, #23
 800b716:	e74f      	b.n	800b5b8 <coap_serialize_message+0x64>
    COAP_SERIALIZE_INT_OPT(pkt, m, COAP_OPTION_SIZE2, size2, "Size2");
 800b718:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800b71a:	463a      	mov	r2, r7
 800b71c:	211c      	movs	r1, #28
 800b71e:	4628      	mov	r0, r5
 800b720:	f7ff feb3 	bl	800b48a <coap_append_int_opt>
 800b724:	b950      	cbnz	r0, 800b73c <coap_serialize_message+0x1e8>
 800b726:	271c      	movs	r7, #28
 800b728:	e769      	b.n	800b5fe <coap_serialize_message+0xaa>
    COAP_SERIALIZE_INT_OPT(pkt, m, COAP_OPTION_SIZE1, size1, "Size1");
 800b72a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800b72c:	463a      	mov	r2, r7
 800b72e:	213c      	movs	r1, #60	; 0x3c
 800b730:	4628      	mov	r0, r5
 800b732:	f7ff feaa 	bl	800b48a <coap_append_int_opt>
 800b736:	2800      	cmp	r0, #0
 800b738:	f43f af66 	beq.w	800b608 <coap_serialize_message+0xb4>
        OS_MBUF_PKTLEN(m), OS_MBUF_PKTLEN(m) - pkt->payload_len,
        pkt->payload_len);

    return 0;
err_mem:
    if (pkt->payload_m) {
 800b73c:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800b73e:	2800      	cmp	r0, #0
 800b740:	f000 80ac 	beq.w	800b89c <coap_serialize_message+0x348>
        os_mbuf_free_chain(pkt->payload_m);
 800b744:	f001 fb8a 	bl	800ce5c <os_mbuf_free_chain>
    }
    STATS_INC(coap_stats, oerr);
    return -1;
 800b748:	f04f 30ff 	mov.w	r0, #4294967295
}
 800b74c:	b002      	add	sp, #8
 800b74e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (os_mbuf_append(m, "\xff", 1)) {
 800b752:	2201      	movs	r2, #1
 800b754:	4936      	ldr	r1, [pc, #216]	; (800b830 <coap_serialize_message+0x2dc>)
 800b756:	4628      	mov	r0, r5
 800b758:	f001 fb9c 	bl	800ce94 <os_mbuf_append>
 800b75c:	2800      	cmp	r0, #0
 800b75e:	d1ed      	bne.n	800b73c <coap_serialize_message+0x1e8>
 800b760:	e757      	b.n	800b612 <coap_serialize_message+0xbe>
        len = sizeof(struct coap_udp_hdr) + pkt->token_len;
 800b762:	79a1      	ldrb	r1, [r4, #6]
        os_mbuf_prepend(m, len);
 800b764:	3104      	adds	r1, #4
 800b766:	4628      	mov	r0, r5
 800b768:	f001 fc96 	bl	800d098 <os_mbuf_prepend>
        cuh = (struct coap_udp_hdr *)m->om_data;
 800b76c:	6828      	ldr	r0, [r5, #0]
        cuh->version = pkt->version;
 800b76e:	7822      	ldrb	r2, [r4, #0]
 800b770:	7803      	ldrb	r3, [r0, #0]
 800b772:	f362 1387 	bfi	r3, r2, #6, #2
 800b776:	7003      	strb	r3, [r0, #0]
        cuh->type = pkt->type;
 800b778:	7862      	ldrb	r2, [r4, #1]
 800b77a:	b2db      	uxtb	r3, r3
 800b77c:	f362 1305 	bfi	r3, r2, #4, #2
 800b780:	7003      	strb	r3, [r0, #0]
        cuh->token_len = pkt->token_len;
 800b782:	79a2      	ldrb	r2, [r4, #6]
 800b784:	b2db      	uxtb	r3, r3
 800b786:	f362 0303 	bfi	r3, r2, #0, #4
 800b78a:	7003      	strb	r3, [r0, #0]
        cuh->code = pkt->code;
 800b78c:	78a3      	ldrb	r3, [r4, #2]
 800b78e:	7043      	strb	r3, [r0, #1]
        u16 = htons(pkt->mid);
 800b790:	88a2      	ldrh	r2, [r4, #4]
 800b792:	0213      	lsls	r3, r2, #8
 800b794:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
        memcpy(&cuh->id, &u16, sizeof(u16));
 800b798:	8043      	strh	r3, [r0, #2]
        memcpy(cuh + 1, pkt->token, pkt->token_len);
 800b79a:	79a2      	ldrb	r2, [r4, #6]
 800b79c:	1de1      	adds	r1, r4, #7
 800b79e:	3004      	adds	r0, #4
 800b7a0:	f002 fbdc 	bl	800df5c <memcpy>
    if (pkt->payload_m) {
 800b7a4:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800b7a6:	2800      	cmp	r0, #0
 800b7a8:	d076      	beq.n	800b898 <coap_serialize_message+0x344>
        assert(pkt->payload_len <= OS_MBUF_PKTLEN(pkt->payload_m));
 800b7aa:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800b7ae:	8a01      	ldrh	r1, [r0, #16]
 800b7b0:	428b      	cmp	r3, r1
 800b7b2:	d867      	bhi.n	800b884 <coap_serialize_message+0x330>
        if (pkt->payload_len < OS_MBUF_PKTLEN(pkt->payload_m)) {
 800b7b4:	428b      	cmp	r3, r1
 800b7b6:	d36b      	bcc.n	800b890 <coap_serialize_message+0x33c>
        os_mbuf_concat(m, pkt->payload_m);
 800b7b8:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800b7ba:	4628      	mov	r0, r5
 800b7bc:	f001 fccb 	bl	800d156 <os_mbuf_concat>
    return 0;
 800b7c0:	2000      	movs	r0, #0
 800b7c2:	e7c3      	b.n	800b74c <coap_serialize_message+0x1f8>
            len = sizeof(struct coap_tcp_hdr0) + pkt->token_len;
 800b7c4:	79a1      	ldrb	r1, [r4, #6]
            os_mbuf_prepend(m, len);
 800b7c6:	3102      	adds	r1, #2
 800b7c8:	4628      	mov	r0, r5
 800b7ca:	f001 fc65 	bl	800d098 <os_mbuf_prepend>
            cth0 = (struct coap_tcp_hdr0 *)m->om_data;
 800b7ce:	6828      	ldr	r0, [r5, #0]
            cth0->data_len = data_len;
 800b7d0:	7803      	ldrb	r3, [r0, #0]
 800b7d2:	f367 1307 	bfi	r3, r7, #4, #4
 800b7d6:	7003      	strb	r3, [r0, #0]
            cth0->token_len = pkt->token_len;
 800b7d8:	79a2      	ldrb	r2, [r4, #6]
 800b7da:	b2db      	uxtb	r3, r3
 800b7dc:	f362 0303 	bfi	r3, r2, #0, #4
 800b7e0:	7003      	strb	r3, [r0, #0]
            cth0->code = pkt->code;
 800b7e2:	78a3      	ldrb	r3, [r4, #2]
 800b7e4:	7043      	strb	r3, [r0, #1]
            memcpy(cth0 + 1, pkt->token, pkt->token_len);
 800b7e6:	79a2      	ldrb	r2, [r4, #6]
 800b7e8:	1de1      	adds	r1, r4, #7
 800b7ea:	3002      	adds	r0, #2
 800b7ec:	f002 fbb6 	bl	800df5c <memcpy>
 800b7f0:	e7d8      	b.n	800b7a4 <coap_serialize_message+0x250>
            len = sizeof(struct coap_tcp_hdr8) + pkt->token_len;
 800b7f2:	79a1      	ldrb	r1, [r4, #6]
            os_mbuf_prepend(m, len);
 800b7f4:	3103      	adds	r1, #3
 800b7f6:	4628      	mov	r0, r5
 800b7f8:	f001 fc4e 	bl	800d098 <os_mbuf_prepend>
            cth8 = (struct coap_tcp_hdr8 *)m->om_data;
 800b7fc:	6828      	ldr	r0, [r5, #0]
            cth8->type = COAP_TCP_TYPE8;
 800b7fe:	7803      	ldrb	r3, [r0, #0]
 800b800:	220d      	movs	r2, #13
 800b802:	f362 1307 	bfi	r3, r2, #4, #4
 800b806:	7003      	strb	r3, [r0, #0]
            cth8->token_len = pkt->token_len;
 800b808:	79a2      	ldrb	r2, [r4, #6]
 800b80a:	b2db      	uxtb	r3, r3
 800b80c:	f362 0303 	bfi	r3, r2, #0, #4
 800b810:	7003      	strb	r3, [r0, #0]
            cth8->data_len = data_len - COAP_TCP_LENGTH8_OFF;
 800b812:	3f0d      	subs	r7, #13
 800b814:	7047      	strb	r7, [r0, #1]
            cth8->code = pkt->code;
 800b816:	78a3      	ldrb	r3, [r4, #2]
 800b818:	7083      	strb	r3, [r0, #2]
            memcpy(cth8 + 1, pkt->token, pkt->token_len);
 800b81a:	79a2      	ldrb	r2, [r4, #6]
 800b81c:	1de1      	adds	r1, r4, #7
 800b81e:	3003      	adds	r0, #3
 800b820:	f002 fb9c 	bl	800df5c <memcpy>
 800b824:	e7be      	b.n	800b7a4 <coap_serialize_message+0x250>
 800b826:	bf00      	nop
 800b828:	20003818 	.word	0x20003818
 800b82c:	0001010c 	.word	0x0001010c
 800b830:	0801806c 	.word	0x0801806c
            len = sizeof(struct coap_tcp_hdr32) + pkt->token_len;
 800b834:	79a1      	ldrb	r1, [r4, #6]
            os_mbuf_prepend(m, len);
 800b836:	3106      	adds	r1, #6
 800b838:	4628      	mov	r0, r5
 800b83a:	f001 fc2d 	bl	800d098 <os_mbuf_prepend>
            cth32 = (struct coap_tcp_hdr32 *)m->om_data;
 800b83e:	6828      	ldr	r0, [r5, #0]
            cth32->type = COAP_TCP_TYPE32;
 800b840:	7803      	ldrb	r3, [r0, #0]
 800b842:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 800b846:	7003      	strb	r3, [r0, #0]
            cth32->token_len = pkt->token_len;
 800b848:	79a2      	ldrb	r2, [r4, #6]
 800b84a:	b2db      	uxtb	r3, r3
 800b84c:	f362 0303 	bfi	r3, r2, #0, #4
 800b850:	7003      	strb	r3, [r0, #0]
            u32 = htonl(data_len - COAP_TCP_LENGTH32_OFF);
 800b852:	f5a7 3780 	sub.w	r7, r7, #65536	; 0x10000
 800b856:	f2a7 170d 	subw	r7, r7, #269	; 0x10d
 800b85a:	123b      	asrs	r3, r7, #8
 800b85c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b860:	ea43 6317 	orr.w	r3, r3, r7, lsr #24
 800b864:	023a      	lsls	r2, r7, #8
 800b866:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 800b86a:	4313      	orrs	r3, r2
 800b86c:	ea43 6707 	orr.w	r7, r3, r7, lsl #24
            memcpy(&cth32->data_len, &u32, sizeof(u32));
 800b870:	f8c0 7001 	str.w	r7, [r0, #1]
            cth32->code = pkt->code;
 800b874:	78a3      	ldrb	r3, [r4, #2]
 800b876:	7143      	strb	r3, [r0, #5]
            memcpy(cth32 + 1, pkt->token, pkt->token_len);
 800b878:	79a2      	ldrb	r2, [r4, #6]
 800b87a:	1de1      	adds	r1, r4, #7
 800b87c:	3006      	adds	r0, #6
 800b87e:	f002 fb6d 	bl	800df5c <memcpy>
 800b882:	e78f      	b.n	800b7a4 <coap_serialize_message+0x250>
        assert(pkt->payload_len <= OS_MBUF_PKTLEN(pkt->payload_m));
 800b884:	2300      	movs	r3, #0
 800b886:	461a      	mov	r2, r3
 800b888:	4619      	mov	r1, r3
 800b88a:	4618      	mov	r0, r3
 800b88c:	f000 fea2 	bl	800c5d4 <__assert_func>
            os_mbuf_adj(pkt->payload_m,
 800b890:	1ac9      	subs	r1, r1, r3
 800b892:	f001 fbaf 	bl	800cff4 <os_mbuf_adj>
 800b896:	e78f      	b.n	800b7b8 <coap_serialize_message+0x264>
    return 0;
 800b898:	2000      	movs	r0, #0
 800b89a:	e757      	b.n	800b74c <coap_serialize_message+0x1f8>
    return -1;
 800b89c:	f04f 30ff 	mov.w	r0, #4294967295
 800b8a0:	e754      	b.n	800b74c <coap_serialize_message+0x1f8>
 800b8a2:	bf00      	nop

0800b8a4 <coap_send_message>:
/*---------------------------------------------------------------------------*/
void
coap_send_message(struct os_mbuf *m, int dup)
{
 800b8a4:	b508      	push	{r3, lr}
 800b8a6:	4603      	mov	r3, r0
    OC_LOG(INFO, "coap_send_message(): (%u) %s\n", OS_MBUF_PKTLEN(m),
      dup ? "dup" : "");

    STATS_INC(coap_stats, oframe);

    if (dup) {
 800b8a8:	b119      	cbz	r1, 800b8b2 <coap_send_message+0xe>
        m = os_mbuf_dup(m);
 800b8aa:	f001 fb47 	bl	800cf3c <os_mbuf_dup>
        if (!m) {
 800b8ae:	4603      	mov	r3, r0
 800b8b0:	b110      	cbz	r0, 800b8b8 <coap_send_message+0x14>
            STATS_INC(coap_stats, oerr);
            return;
        }
    }
    oc_send_message(m);
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	f7ff fc6e 	bl	800b194 <oc_send_message>
}
 800b8b8:	bd08      	pop	{r3, pc}

0800b8ba <coap_set_token>:
    }
}
/*---------------------------------------------------------------------------*/
int
coap_set_token(coap_packet_t *pkt, const uint8_t *token, size_t token_len)
{
 800b8ba:	b510      	push	{r4, lr}
    pkt->token_len = MIN(COAP_TOKEN_LEN, token_len);
 800b8bc:	2a08      	cmp	r2, #8
 800b8be:	bf28      	it	cs
 800b8c0:	2208      	movcs	r2, #8
 800b8c2:	b2d4      	uxtb	r4, r2
 800b8c4:	7184      	strb	r4, [r0, #6]
    memcpy(pkt->token, token, pkt->token_len);
 800b8c6:	4622      	mov	r2, r4
 800b8c8:	3007      	adds	r0, #7
 800b8ca:	f002 fb47 	bl	800df5c <memcpy>

    return pkt->token_len;
}
 800b8ce:	4620      	mov	r0, r4
 800b8d0:	bd10      	pop	{r4, pc}

0800b8d2 <coap_set_header_content_format>:
}
#endif
int
coap_set_header_content_format(coap_packet_t *pkt, unsigned int format)
{
    pkt->content_format = format;
 800b8d2:	8301      	strh	r1, [r0, #24]
    SET_OPTION(pkt, COAP_OPTION_CONTENT_FORMAT);
 800b8d4:	7c03      	ldrb	r3, [r0, #16]
 800b8d6:	f043 0310 	orr.w	r3, r3, #16
 800b8da:	7403      	strb	r3, [r0, #16]
    return 1;
}
 800b8dc:	2001      	movs	r0, #1
 800b8de:	4770      	bx	lr

0800b8e0 <coap_set_header_accept>:

#ifdef OC_CLIENT
int
coap_set_header_accept(coap_packet_t *pkt, unsigned int accept)
{
    pkt->accept = accept;
 800b8e0:	8681      	strh	r1, [r0, #52]	; 0x34
    SET_OPTION(pkt, COAP_OPTION_ACCEPT);
 800b8e2:	7c43      	ldrb	r3, [r0, #17]
 800b8e4:	f043 0302 	orr.w	r3, r3, #2
 800b8e8:	7443      	strb	r3, [r0, #17]
    return 1;
}
 800b8ea:	2001      	movs	r0, #1
 800b8ec:	4770      	bx	lr

0800b8ee <coap_set_header_uri_path>:
    return maxlen;
}
#ifdef OC_CLIENT
int
coap_set_header_uri_path(coap_packet_t *pkt, const char *path)
{
 800b8ee:	b510      	push	{r4, lr}
 800b8f0:	4604      	mov	r4, r0
    while (path[0] == '/') {
 800b8f2:	e000      	b.n	800b8f6 <coap_set_header_uri_path+0x8>
        ++path;
 800b8f4:	3101      	adds	r1, #1
    while (path[0] == '/') {
 800b8f6:	780b      	ldrb	r3, [r1, #0]
 800b8f8:	2b2f      	cmp	r3, #47	; 0x2f
 800b8fa:	d0fb      	beq.n	800b8f4 <coap_set_header_uri_path+0x6>
    }
    pkt->uri_path = (char *)path;
 800b8fc:	62e1      	str	r1, [r4, #44]	; 0x2c
    pkt->uri_path_len = strlen(path);
 800b8fe:	4608      	mov	r0, r1
 800b900:	f002 fb73 	bl	800dfea <strlen>
 800b904:	b280      	uxth	r0, r0
 800b906:	8560      	strh	r0, [r4, #42]	; 0x2a

    SET_OPTION(pkt, COAP_OPTION_URI_PATH);
 800b908:	7c23      	ldrb	r3, [r4, #16]
 800b90a:	f043 0308 	orr.w	r3, r3, #8
 800b90e:	7423      	strb	r3, [r4, #16]
    return pkt->uri_path_len;
}
 800b910:	bd10      	pop	{r4, pc}

0800b912 <coap_set_header_uri_query>:
    return maxlen;
}
#ifdef OC_CLIENT
int
coap_set_header_uri_query(coap_packet_t *pkt, const char *query)
{
 800b912:	b510      	push	{r4, lr}
 800b914:	4604      	mov	r4, r0
    while (query[0] == '?') {
 800b916:	e000      	b.n	800b91a <coap_set_header_uri_query+0x8>
        ++query;
 800b918:	3101      	adds	r1, #1
    while (query[0] == '?') {
 800b91a:	780b      	ldrb	r3, [r1, #0]
 800b91c:	2b3f      	cmp	r3, #63	; 0x3f
 800b91e:	d0fb      	beq.n	800b918 <coap_set_header_uri_query+0x6>
    }
    pkt->uri_query = (char *)query;
 800b920:	65e1      	str	r1, [r4, #92]	; 0x5c
    pkt->uri_query_len = strlen(query);
 800b922:	4608      	mov	r0, r1
 800b924:	f002 fb61 	bl	800dfea <strlen>
 800b928:	b280      	uxth	r0, r0
 800b92a:	f8a4 0058 	strh.w	r0, [r4, #88]	; 0x58

    SET_OPTION(pkt, COAP_OPTION_URI_QUERY);
 800b92e:	7c23      	ldrb	r3, [r4, #16]
 800b930:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b934:	7423      	strb	r3, [r4, #16]
    return pkt->uri_query_len;
}
 800b936:	bd10      	pop	{r4, pc}

0800b938 <coap_set_header_observe>:
}

int
coap_set_header_observe(coap_packet_t *pkt, uint32_t observe)
{
    pkt->observe = observe;
 800b938:	6301      	str	r1, [r0, #48]	; 0x30
    SET_OPTION(pkt, COAP_OPTION_OBSERVE);
 800b93a:	7bc3      	ldrb	r3, [r0, #15]
 800b93c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b940:	73c3      	strb	r3, [r0, #15]
    return 1;
}
 800b942:	2001      	movs	r0, #1
 800b944:	4770      	bx	lr
	...

0800b948 <oc_evq_get>:

struct os_eventq *
oc_evq_get(void)
{
    return oc_evq;
}
 800b948:	4b01      	ldr	r3, [pc, #4]	; (800b950 <oc_evq_get+0x8>)
 800b94a:	6818      	ldr	r0, [r3, #0]
 800b94c:	4770      	bx	lr
 800b94e:	bf00      	nop
 800b950:	200006d0 	.word	0x200006d0

0800b954 <oc_evq_set>:

void
oc_evq_set(struct os_eventq *evq)
{
    oc_evq = evq;
 800b954:	4b01      	ldr	r3, [pc, #4]	; (800b95c <oc_evq_set+0x8>)
 800b956:	6018      	str	r0, [r3, #0]
}
 800b958:	4770      	bx	lr
 800b95a:	bf00      	nop
 800b95c:	200006d0 	.word	0x200006d0

0800b960 <oc_transport_register>:

int8_t
oc_transport_register(const struct oc_transport *ot)
{
    int i;
    int first = -1;
 800b960:	f04f 31ff 	mov.w	r1, #4294967295

    for (i = 0; i < OC_TRANSPORT_MAX; i++) {
 800b964:	2300      	movs	r3, #0
 800b966:	e000      	b.n	800b96a <oc_transport_register+0xa>
 800b968:	3301      	adds	r3, #1
 800b96a:	2b07      	cmp	r3, #7
 800b96c:	dc0d      	bgt.n	800b98a <oc_transport_register+0x2a>
        if (oc_transports[i] == ot) {
 800b96e:	4a09      	ldr	r2, [pc, #36]	; (800b994 <oc_transport_register+0x34>)
 800b970:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b974:	4282      	cmp	r2, r0
 800b976:	d00a      	beq.n	800b98e <oc_transport_register+0x2e>
            return -1;
        }
        if (oc_transports[i] == NULL && first < 0) {
 800b978:	2a00      	cmp	r2, #0
 800b97a:	d1f5      	bne.n	800b968 <oc_transport_register+0x8>
 800b97c:	2900      	cmp	r1, #0
 800b97e:	daf3      	bge.n	800b968 <oc_transport_register+0x8>
            oc_transports[i] = ot;
 800b980:	4a04      	ldr	r2, [pc, #16]	; (800b994 <oc_transport_register+0x34>)
 800b982:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
            first = i;
 800b986:	4619      	mov	r1, r3
 800b988:	e7ee      	b.n	800b968 <oc_transport_register+0x8>
        }
    }
    return first;
 800b98a:	b248      	sxtb	r0, r1
 800b98c:	4770      	bx	lr
            return -1;
 800b98e:	f04f 30ff 	mov.w	r0, #4294967295
}
 800b992:	4770      	bx	lr
 800b994:	20003818 	.word	0x20003818

0800b998 <oc_send_buffer>:
    }
}

void
oc_send_buffer(struct os_mbuf *m)
{
 800b998:	b508      	push	{r3, lr}
    struct oc_endpoint *oe;
    const struct oc_transport *ot;

    oe = OC_MBUF_ENDPOINT(m);

    ot = oc_transports[oe->ep.oe_type];
 800b99a:	7e03      	ldrb	r3, [r0, #24]
 800b99c:	f003 0307 	and.w	r3, r3, #7
 800b9a0:	4a04      	ldr	r2, [pc, #16]	; (800b9b4 <oc_send_buffer+0x1c>)
 800b9a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    if (ot) {
 800b9a6:	b113      	cbz	r3, 800b9ae <oc_send_buffer+0x16>
        ot->ot_tx_ucast(m);
 800b9a8:	68db      	ldr	r3, [r3, #12]
 800b9aa:	4798      	blx	r3
    } else {
        OC_LOG(ERROR, "Unknown transport option %u\n", oe->ep.oe_type);
        os_mbuf_free_chain(m);
    }
}
 800b9ac:	bd08      	pop	{r3, pc}
        os_mbuf_free_chain(m);
 800b9ae:	f001 fa55 	bl	800ce5c <os_mbuf_free_chain>
}
 800b9b2:	e7fb      	b.n	800b9ac <oc_send_buffer+0x14>
 800b9b4:	20003818 	.word	0x20003818

0800b9b8 <oc_send_multicast_message>:
/*
 * Send on all the transports.
 */
void
oc_send_multicast_message(struct os_mbuf *m)
{
 800b9b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9bc:	4607      	mov	r7, r0
    const struct oc_transport *ot;
    const struct oc_transport *prev = NULL;
    struct os_mbuf *n;
    int i;

    for (i = 0; i < OC_TRANSPORT_MAX; i++) {
 800b9be:	2400      	movs	r4, #0
    const struct oc_transport *prev = NULL;
 800b9c0:	4626      	mov	r6, r4
    for (i = 0; i < OC_TRANSPORT_MAX; i++) {
 800b9c2:	e002      	b.n	800b9ca <oc_send_multicast_message+0x12>
 800b9c4:	4635      	mov	r5, r6
 800b9c6:	3401      	adds	r4, #1
 800b9c8:	462e      	mov	r6, r5
 800b9ca:	2c07      	cmp	r4, #7
 800b9cc:	dc12      	bgt.n	800b9f4 <oc_send_multicast_message+0x3c>
        if (!oc_transports[i]) {
 800b9ce:	4b0c      	ldr	r3, [pc, #48]	; (800ba00 <oc_send_multicast_message+0x48>)
 800b9d0:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
 800b9d4:	2d00      	cmp	r5, #0
 800b9d6:	d0f5      	beq.n	800b9c4 <oc_send_multicast_message+0xc>
            continue;
        }

        ot = oc_transports[i];
        if (prev) {
 800b9d8:	2e00      	cmp	r6, #0
 800b9da:	d0f4      	beq.n	800b9c6 <oc_send_multicast_message+0xe>
            n = os_mbuf_dup(m);
 800b9dc:	4638      	mov	r0, r7
 800b9de:	f001 faad 	bl	800cf3c <os_mbuf_dup>
 800b9e2:	4680      	mov	r8, r0
            prev->ot_tx_mcast(m);
 800b9e4:	6933      	ldr	r3, [r6, #16]
 800b9e6:	4638      	mov	r0, r7
 800b9e8:	4798      	blx	r3
            if (!n) {
 800b9ea:	f1b8 0f00 	cmp.w	r8, #0
 800b9ee:	d005      	beq.n	800b9fc <oc_send_multicast_message+0x44>
                return;
            }
            m = n;
 800b9f0:	4647      	mov	r7, r8
 800b9f2:	e7e8      	b.n	800b9c6 <oc_send_multicast_message+0xe>
        }
        prev = ot;
    }
    if (prev) {
 800b9f4:	b116      	cbz	r6, 800b9fc <oc_send_multicast_message+0x44>
        prev->ot_tx_mcast(m);
 800b9f6:	6933      	ldr	r3, [r6, #16]
 800b9f8:	4638      	mov	r0, r7
 800b9fa:	4798      	blx	r3
    }
}
 800b9fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba00:	20003818 	.word	0x20003818

0800ba04 <oc_init>:
    return rc;
}

void
oc_init(void)
{
 800ba04:	b508      	push	{r3, lr}
    SYSINIT_ASSERT_ACTIVE();
 800ba06:	4b07      	ldr	r3, [pc, #28]	; (800ba24 <oc_init+0x20>)
 800ba08:	781b      	ldrb	r3, [r3, #0]
 800ba0a:	b133      	cbz	r3, 800ba1a <oc_init+0x16>
    oc_ri_mem_init();
 800ba0c:	f7ff fc24 	bl	800b258 <oc_ri_mem_init>
    oc_evq_set(os_eventq_dflt_get());
 800ba10:	f001 f9a2 	bl	800cd58 <os_eventq_dflt_get>
 800ba14:	f7ff ff9e 	bl	800b954 <oc_evq_set>
}
 800ba18:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
 800ba1a:	461a      	mov	r2, r3
 800ba1c:	4619      	mov	r1, r3
 800ba1e:	4618      	mov	r0, r3
 800ba20:	f000 fdd8 	bl	800c5d4 <__assert_func>
 800ba24:	20003838 	.word	0x20003838

0800ba28 <oc_clock_time>:
void oc_clock_init(void)
{
    /* in mynewt clock is initialized elsewhere */
}
oc_clock_time_t oc_clock_time(void)
{
 800ba28:	b508      	push	{r3, lr}
    return os_time_get();
 800ba2a:	f002 f8cf 	bl	800dbcc <os_time_get>
}
 800ba2e:	bd08      	pop	{r3, pc}

0800ba30 <oc_random_rand>:
{
    srand(seed);
}

unsigned short oc_random_rand(void)
{
 800ba30:	b508      	push	{r3, lr}
}

#define RAND_MAX 0x7fffffff
__extern_inline int rand(void)
{
	return (int)lrand48();
 800ba32:	f002 f997 	bl	800dd64 <lrand48>
    return rand();
}
 800ba36:	b280      	uxth	r0, r0
 800ba38:	bd08      	pop	{r3, pc}

0800ba3a <oc_new_string>:
#include "oic/port/mynewt/config.h"
#include "oic/oc_helpers.h"

void
oc_new_string(oc_string_t *os, const char str[])
{
 800ba3a:	b570      	push	{r4, r5, r6, lr}
 800ba3c:	4605      	mov	r5, r0
 800ba3e:	460e      	mov	r6, r1
    int len = strlen(str);
 800ba40:	4608      	mov	r0, r1
 800ba42:	f002 fad2 	bl	800dfea <strlen>
 800ba46:	4604      	mov	r4, r0

    os->os_str = malloc(len + 1);
 800ba48:	3001      	adds	r0, #1
 800ba4a:	f002 fa17 	bl	800de7c <malloc>
 800ba4e:	6068      	str	r0, [r5, #4]
    if (os->os_str) {
 800ba50:	b140      	cbz	r0, 800ba64 <oc_new_string+0x2a>
        os->os_sz = len + 1;
 800ba52:	1c63      	adds	r3, r4, #1
 800ba54:	802b      	strh	r3, [r5, #0]
        memcpy(os->os_str, str, len);
 800ba56:	4622      	mov	r2, r4
 800ba58:	4631      	mov	r1, r6
 800ba5a:	f002 fa7f 	bl	800df5c <memcpy>
        os->os_str[len] = '\0';
 800ba5e:	686b      	ldr	r3, [r5, #4]
 800ba60:	2200      	movs	r2, #0
 800ba62:	551a      	strb	r2, [r3, r4]
    }
}
 800ba64:	bd70      	pop	{r4, r5, r6, pc}

0800ba66 <oc_free_string>:
    }
}

void
oc_free_string(oc_string_t *os)
{
 800ba66:	b510      	push	{r4, lr}
 800ba68:	4604      	mov	r4, r0
    free(os->os_str);
 800ba6a:	6840      	ldr	r0, [r0, #4]
 800ba6c:	f002 fa3c 	bl	800dee8 <free>
    os->os_sz = 0;
 800ba70:	2300      	movs	r3, #0
 800ba72:	8023      	strh	r3, [r4, #0]
}
 800ba74:	bd10      	pop	{r4, pc}

0800ba76 <sysinit_dflt_panic_cb>:
#include "os/mynewt.h"

static void
sysinit_dflt_panic_cb(const char *file, int line, const char *func,
                      const char *expr, const char *msg)
{
 800ba76:	b508      	push	{r3, lr}
    if (msg != NULL) {
        fprintf(stderr, "sysinit failure: %s\n", msg);
    }
#endif

    __assert_func(file, line, func, expr);
 800ba78:	f000 fdac 	bl	800c5d4 <__assert_func>

0800ba7c <sysinit_start>:
}

void
sysinit_start(void)
{
    sysinit_active = 1;
 800ba7c:	4b01      	ldr	r3, [pc, #4]	; (800ba84 <sysinit_start+0x8>)
 800ba7e:	2201      	movs	r2, #1
 800ba80:	701a      	strb	r2, [r3, #0]
}
 800ba82:	4770      	bx	lr
 800ba84:	20003838 	.word	0x20003838

0800ba88 <sysinit_end>:

void
sysinit_end(void)
{
    sysinit_active = 0;
 800ba88:	4b01      	ldr	r3, [pc, #4]	; (800ba90 <sysinit_end+0x8>)
 800ba8a:	2200      	movs	r2, #0
 800ba8c:	701a      	strb	r2, [r3, #0]
}
 800ba8e:	4770      	bx	lr
 800ba90:	20003838 	.word	0x20003838

0800ba94 <power_standby_wakeup>:
int network_has_transmitted = 0;

int power_standby_wakeup(void) {
    //  Return 1 if we have been woken up from Deep Sleep Standby Mode, 0 otherwise.
    return 0;
}
 800ba94:	2000      	movs	r0, #0
 800ba96:	4770      	bx	lr

0800ba98 <__wrap_coap_receive>:
}

///////////////////////////////////////////////////////////////////////////////
//  Other Functions

int __wrap_coap_receive(/* struct os_mbuf **mp */) {
 800ba98:	b508      	push	{r3, lr}
    //  We override the default coap_receive() with an empty function so that we will 
    //  NOT link in any modules for receiving and parsing CoAP requests, to save ROM space.
    //  We only need to transmit CoAP requests.  The overriding is done via the Linker Flag
    //  "-Wl,-wrap,coap_receive" in apps/my_sensor_app/pkg.yml
    console_printf("coap_receive NOT IMPLEMENTED\n");
 800ba9a:	4803      	ldr	r0, [pc, #12]	; (800baa8 <__wrap_coap_receive+0x10>)
 800ba9c:	f7fe fda6 	bl	800a5ec <console_printf>
    return -1;
}
 800baa0:	f04f 30ff 	mov.w	r0, #4294967295
 800baa4:	bd08      	pop	{r3, pc}
 800baa6:	bf00      	nop
 800baa8:	08018070 	.word	0x08018070

0800baac <_fini>:
//  Other Functions

//  Dummy destructor for global C++ objects, since our program never terminates.  
//  From https://arobenko.gitbooks.io/bare_metal_cpp/content/compiler_output/static.html.
void* __dso_handle = NULL;
void _fini(void) { }
 800baac:	4770      	bx	lr
	...

0800bab0 <json_encode_object_start>:
    (__e)->je_write((__e)->je_arg, "]", sizeof("]")-1);


int
json_encode_object_start(struct json_encoder *encoder)
{
 800bab0:	b510      	push	{r4, lr}
 800bab2:	4604      	mov	r4, r0
    if (encoder->je_wr_commas) {
 800bab4:	7a03      	ldrb	r3, [r0, #8]
 800bab6:	f013 0f01 	tst.w	r3, #1
 800baba:	d008      	beq.n	800bace <json_encode_object_start+0x1e>
        encoder->je_write(encoder->je_arg, ",", sizeof(",")-1);
 800babc:	6803      	ldr	r3, [r0, #0]
 800babe:	2201      	movs	r2, #1
 800bac0:	4908      	ldr	r1, [pc, #32]	; (800bae4 <json_encode_object_start+0x34>)
 800bac2:	6840      	ldr	r0, [r0, #4]
 800bac4:	4798      	blx	r3
        encoder->je_wr_commas = 0;
 800bac6:	7a23      	ldrb	r3, [r4, #8]
 800bac8:	f36f 0300 	bfc	r3, #0, #1
 800bacc:	7223      	strb	r3, [r4, #8]
    }
    JSON_ENCODE_OBJECT_START(encoder);
 800bace:	6823      	ldr	r3, [r4, #0]
 800bad0:	2201      	movs	r2, #1
 800bad2:	4905      	ldr	r1, [pc, #20]	; (800bae8 <json_encode_object_start+0x38>)
 800bad4:	6860      	ldr	r0, [r4, #4]
 800bad6:	4798      	blx	r3
    encoder->je_wr_commas = 0;
 800bad8:	7a23      	ldrb	r3, [r4, #8]
 800bada:	f36f 0300 	bfc	r3, #0, #1
 800bade:	7223      	strb	r3, [r4, #8]

    return (0);
}
 800bae0:	2000      	movs	r0, #0
 800bae2:	bd10      	pop	{r4, pc}
 800bae4:	08017ea4 	.word	0x08017ea4
 800bae8:	08018090 	.word	0x08018090

0800baec <json_encode_object_key>:
    return (rc);
}

int
json_encode_object_key(struct json_encoder *encoder, char *key)
{
 800baec:	b570      	push	{r4, r5, r6, lr}
 800baee:	4604      	mov	r4, r0
 800baf0:	460d      	mov	r5, r1
    if (encoder->je_wr_commas) {
 800baf2:	7a03      	ldrb	r3, [r0, #8]
 800baf4:	f013 0f01 	tst.w	r3, #1
 800baf8:	d008      	beq.n	800bb0c <json_encode_object_key+0x20>
        encoder->je_write(encoder->je_arg, ",", sizeof(",")-1);
 800bafa:	6803      	ldr	r3, [r0, #0]
 800bafc:	2201      	movs	r2, #1
 800bafe:	490d      	ldr	r1, [pc, #52]	; (800bb34 <json_encode_object_key+0x48>)
 800bb00:	6840      	ldr	r0, [r0, #4]
 800bb02:	4798      	blx	r3
        encoder->je_wr_commas = 0;
 800bb04:	7a23      	ldrb	r3, [r4, #8]
 800bb06:	f36f 0300 	bfc	r3, #0, #1
 800bb0a:	7223      	strb	r3, [r4, #8]
    }

    /* Write the key entry */
    encoder->je_write(encoder->je_arg, "\"", sizeof("\"")-1);
 800bb0c:	6823      	ldr	r3, [r4, #0]
 800bb0e:	2201      	movs	r2, #1
 800bb10:	4909      	ldr	r1, [pc, #36]	; (800bb38 <json_encode_object_key+0x4c>)
 800bb12:	6860      	ldr	r0, [r4, #4]
 800bb14:	4798      	blx	r3
    encoder->je_write(encoder->je_arg, key, strlen(key));
 800bb16:	6826      	ldr	r6, [r4, #0]
 800bb18:	4628      	mov	r0, r5
 800bb1a:	f002 fa66 	bl	800dfea <strlen>
 800bb1e:	4602      	mov	r2, r0
 800bb20:	4629      	mov	r1, r5
 800bb22:	6860      	ldr	r0, [r4, #4]
 800bb24:	47b0      	blx	r6
    encoder->je_write(encoder->je_arg, "\": ", sizeof("\": ")-1);
 800bb26:	6823      	ldr	r3, [r4, #0]
 800bb28:	2203      	movs	r2, #3
 800bb2a:	4904      	ldr	r1, [pc, #16]	; (800bb3c <json_encode_object_key+0x50>)
 800bb2c:	6860      	ldr	r0, [r4, #4]
 800bb2e:	4798      	blx	r3

    return (0);
}
 800bb30:	2000      	movs	r0, #0
 800bb32:	bd70      	pop	{r4, r5, r6, pc}
 800bb34:	08017ea4 	.word	0x08017ea4
 800bb38:	08017ea8 	.word	0x08017ea8
 800bb3c:	08017eac 	.word	0x08017eac

0800bb40 <json_encode_object_entry>:

int
json_encode_object_entry(struct json_encoder *encoder, char *key,
        struct json_value *val)
{
 800bb40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb42:	4604      	mov	r4, r0
 800bb44:	460d      	mov	r5, r1
 800bb46:	4616      	mov	r6, r2
    int rc;

    if (encoder->je_wr_commas) {
 800bb48:	7a03      	ldrb	r3, [r0, #8]
 800bb4a:	f013 0f01 	tst.w	r3, #1
 800bb4e:	d008      	beq.n	800bb62 <json_encode_object_entry+0x22>
        encoder->je_write(encoder->je_arg, ",", sizeof(",")-1);
 800bb50:	6803      	ldr	r3, [r0, #0]
 800bb52:	2201      	movs	r2, #1
 800bb54:	4912      	ldr	r1, [pc, #72]	; (800bba0 <json_encode_object_entry+0x60>)
 800bb56:	6840      	ldr	r0, [r0, #4]
 800bb58:	4798      	blx	r3
        encoder->je_wr_commas = 0;
 800bb5a:	7a23      	ldrb	r3, [r4, #8]
 800bb5c:	f36f 0300 	bfc	r3, #0, #1
 800bb60:	7223      	strb	r3, [r4, #8]
    }
    /* Write the key entry */
    encoder->je_write(encoder->je_arg, "\"", sizeof("\"")-1);
 800bb62:	6823      	ldr	r3, [r4, #0]
 800bb64:	2201      	movs	r2, #1
 800bb66:	490f      	ldr	r1, [pc, #60]	; (800bba4 <json_encode_object_entry+0x64>)
 800bb68:	6860      	ldr	r0, [r4, #4]
 800bb6a:	4798      	blx	r3
    encoder->je_write(encoder->je_arg, key, strlen(key));
 800bb6c:	6827      	ldr	r7, [r4, #0]
 800bb6e:	4628      	mov	r0, r5
 800bb70:	f002 fa3b 	bl	800dfea <strlen>
 800bb74:	4602      	mov	r2, r0
 800bb76:	4629      	mov	r1, r5
 800bb78:	6860      	ldr	r0, [r4, #4]
 800bb7a:	47b8      	blx	r7
    encoder->je_write(encoder->je_arg, "\": ", sizeof("\": ")-1);
 800bb7c:	6823      	ldr	r3, [r4, #0]
 800bb7e:	2203      	movs	r2, #3
 800bb80:	4909      	ldr	r1, [pc, #36]	; (800bba8 <json_encode_object_entry+0x68>)
 800bb82:	6860      	ldr	r0, [r4, #4]
 800bb84:	4798      	blx	r3

    rc = json_encode_value(encoder, val);
 800bb86:	4631      	mov	r1, r6
 800bb88:	4620      	mov	r0, r4
 800bb8a:	f000 f80f 	bl	800bbac <json_encode_value>
    if (rc != 0) {
 800bb8e:	4602      	mov	r2, r0
 800bb90:	b918      	cbnz	r0, 800bb9a <json_encode_object_entry+0x5a>
        goto err;
    }
    encoder->je_wr_commas = 1;
 800bb92:	7a23      	ldrb	r3, [r4, #8]
 800bb94:	f043 0301 	orr.w	r3, r3, #1
 800bb98:	7223      	strb	r3, [r4, #8]

    return (0);
err:
    return (rc);
}
 800bb9a:	4610      	mov	r0, r2
 800bb9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb9e:	bf00      	nop
 800bba0:	08017ea4 	.word	0x08017ea4
 800bba4:	08017ea8 	.word	0x08017ea8
 800bba8:	08017eac 	.word	0x08017eac

0800bbac <json_encode_value>:
{
 800bbac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbae:	4605      	mov	r5, r0
 800bbb0:	460c      	mov	r4, r1
    switch (jv->jv_type) {
 800bbb2:	784b      	ldrb	r3, [r1, #1]
 800bbb4:	2b05      	cmp	r3, #5
 800bbb6:	f200 80d4 	bhi.w	800bd62 <json_encode_value+0x1b6>
 800bbba:	e8df f013 	tbh	[pc, r3, lsl #1]
 800bbbe:	0006      	.short	0x0006
 800bbc0:	0029001a 	.word	0x0029001a
 800bbc4:	008f0038 	.word	0x008f0038
 800bbc8:	00b4      	.short	0x00b4
            len = sprintf(encoder->je_encode_buf, "%s",
 800bbca:	f100 0609 	add.w	r6, r0, #9
                    jv->jv_val.u > 0 ? "true" : "false");
 800bbce:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
            len = sprintf(encoder->je_encode_buf, "%s",
 800bbd2:	4313      	orrs	r3, r2
 800bbd4:	d10b      	bne.n	800bbee <json_encode_value+0x42>
 800bbd6:	4a64      	ldr	r2, [pc, #400]	; (800bd68 <json_encode_value+0x1bc>)
 800bbd8:	4964      	ldr	r1, [pc, #400]	; (800bd6c <json_encode_value+0x1c0>)
 800bbda:	4630      	mov	r0, r6
 800bbdc:	f002 f9e7 	bl	800dfae <sprintf>
            encoder->je_write(encoder->je_arg, encoder->je_encode_buf, len);
 800bbe0:	682b      	ldr	r3, [r5, #0]
 800bbe2:	4602      	mov	r2, r0
 800bbe4:	4631      	mov	r1, r6
 800bbe6:	6868      	ldr	r0, [r5, #4]
 800bbe8:	4798      	blx	r3
    return (0);
 800bbea:	2300      	movs	r3, #0
            break;
 800bbec:	e074      	b.n	800bcd8 <json_encode_value+0x12c>
            len = sprintf(encoder->je_encode_buf, "%s",
 800bbee:	4a60      	ldr	r2, [pc, #384]	; (800bd70 <json_encode_value+0x1c4>)
 800bbf0:	e7f2      	b.n	800bbd8 <json_encode_value+0x2c>
            len = sprintf(encoder->je_encode_buf, "%llu",
 800bbf2:	f100 0609 	add.w	r6, r0, #9
 800bbf6:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 800bbfa:	495e      	ldr	r1, [pc, #376]	; (800bd74 <json_encode_value+0x1c8>)
 800bbfc:	4630      	mov	r0, r6
 800bbfe:	f002 f9d6 	bl	800dfae <sprintf>
            encoder->je_write(encoder->je_arg, encoder->je_encode_buf, len);
 800bc02:	682b      	ldr	r3, [r5, #0]
 800bc04:	4602      	mov	r2, r0
 800bc06:	4631      	mov	r1, r6
 800bc08:	6868      	ldr	r0, [r5, #4]
 800bc0a:	4798      	blx	r3
    return (0);
 800bc0c:	2300      	movs	r3, #0
            break;
 800bc0e:	e063      	b.n	800bcd8 <json_encode_value+0x12c>
            len = sprintf(encoder->je_encode_buf, "%lld",
 800bc10:	f100 0609 	add.w	r6, r0, #9
 800bc14:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 800bc18:	4957      	ldr	r1, [pc, #348]	; (800bd78 <json_encode_value+0x1cc>)
 800bc1a:	4630      	mov	r0, r6
 800bc1c:	f002 f9c7 	bl	800dfae <sprintf>
            encoder->je_write(encoder->je_arg, encoder->je_encode_buf, len);
 800bc20:	682b      	ldr	r3, [r5, #0]
 800bc22:	4602      	mov	r2, r0
 800bc24:	4631      	mov	r1, r6
 800bc26:	6868      	ldr	r0, [r5, #4]
 800bc28:	4798      	blx	r3
    return (0);
 800bc2a:	2300      	movs	r3, #0
            break;
 800bc2c:	e054      	b.n	800bcd8 <json_encode_value+0x12c>
            encoder->je_write(encoder->je_arg, "\"", sizeof("\"")-1);
 800bc2e:	6803      	ldr	r3, [r0, #0]
 800bc30:	2201      	movs	r2, #1
 800bc32:	4952      	ldr	r1, [pc, #328]	; (800bd7c <json_encode_value+0x1d0>)
 800bc34:	6840      	ldr	r0, [r0, #4]
 800bc36:	4798      	blx	r3
            for (i = 0; i < jv->jv_len; i++) {
 800bc38:	2600      	movs	r6, #0
 800bc3a:	e01a      	b.n	800bc72 <json_encode_value+0xc6>
                switch (jv->jv_val.str[i]) {
 800bc3c:	2b22      	cmp	r3, #34	; 0x22
 800bc3e:	d00c      	beq.n	800bc5a <json_encode_value+0xae>
 800bc40:	d807      	bhi.n	800bc52 <json_encode_value+0xa6>
 800bc42:	2b0d      	cmp	r3, #13
 800bc44:	d125      	bne.n	800bc92 <json_encode_value+0xe6>
                        encoder->je_write(encoder->je_arg, "\\r",
 800bc46:	682b      	ldr	r3, [r5, #0]
 800bc48:	2202      	movs	r2, #2
 800bc4a:	494d      	ldr	r1, [pc, #308]	; (800bd80 <json_encode_value+0x1d4>)
 800bc4c:	6868      	ldr	r0, [r5, #4]
 800bc4e:	4798      	blx	r3
                        break;
 800bc50:	e00e      	b.n	800bc70 <json_encode_value+0xc4>
                switch (jv->jv_val.str[i]) {
 800bc52:	2b2f      	cmp	r3, #47	; 0x2f
 800bc54:	d001      	beq.n	800bc5a <json_encode_value+0xae>
 800bc56:	2b5c      	cmp	r3, #92	; 0x5c
 800bc58:	d11b      	bne.n	800bc92 <json_encode_value+0xe6>
                        encoder->je_write(encoder->je_arg, "\\",
 800bc5a:	682b      	ldr	r3, [r5, #0]
 800bc5c:	2201      	movs	r2, #1
 800bc5e:	4949      	ldr	r1, [pc, #292]	; (800bd84 <json_encode_value+0x1d8>)
 800bc60:	6868      	ldr	r0, [r5, #4]
 800bc62:	4798      	blx	r3
                        encoder->je_write(encoder->je_arg,
 800bc64:	682b      	ldr	r3, [r5, #0]
                                (char *) &jv->jv_val.str[i], 1);
 800bc66:	68a1      	ldr	r1, [r4, #8]
                        encoder->je_write(encoder->je_arg,
 800bc68:	2201      	movs	r2, #1
 800bc6a:	4439      	add	r1, r7
 800bc6c:	6868      	ldr	r0, [r5, #4]
 800bc6e:	4798      	blx	r3
            for (i = 0; i < jv->jv_len; i++) {
 800bc70:	3601      	adds	r6, #1
 800bc72:	8863      	ldrh	r3, [r4, #2]
 800bc74:	42b3      	cmp	r3, r6
 800bc76:	dd29      	ble.n	800bccc <json_encode_value+0x120>
                switch (jv->jv_val.str[i]) {
 800bc78:	68a3      	ldr	r3, [r4, #8]
 800bc7a:	4637      	mov	r7, r6
 800bc7c:	1999      	adds	r1, r3, r6
 800bc7e:	5d9b      	ldrb	r3, [r3, r6]
 800bc80:	2b0c      	cmp	r3, #12
 800bc82:	d017      	beq.n	800bcb4 <json_encode_value+0x108>
 800bc84:	d8da      	bhi.n	800bc3c <json_encode_value+0x90>
 800bc86:	2b09      	cmp	r3, #9
 800bc88:	d008      	beq.n	800bc9c <json_encode_value+0xf0>
 800bc8a:	2b0a      	cmp	r3, #10
 800bc8c:	d00c      	beq.n	800bca8 <json_encode_value+0xfc>
 800bc8e:	2b08      	cmp	r3, #8
 800bc90:	d016      	beq.n	800bcc0 <json_encode_value+0x114>
                        encoder->je_write(encoder->je_arg,
 800bc92:	682b      	ldr	r3, [r5, #0]
 800bc94:	2201      	movs	r2, #1
 800bc96:	6868      	ldr	r0, [r5, #4]
 800bc98:	4798      	blx	r3
                        break;
 800bc9a:	e7e9      	b.n	800bc70 <json_encode_value+0xc4>
                        encoder->je_write(encoder->je_arg, "\\t",
 800bc9c:	682b      	ldr	r3, [r5, #0]
 800bc9e:	2202      	movs	r2, #2
 800bca0:	4939      	ldr	r1, [pc, #228]	; (800bd88 <json_encode_value+0x1dc>)
 800bca2:	6868      	ldr	r0, [r5, #4]
 800bca4:	4798      	blx	r3
                        break;
 800bca6:	e7e3      	b.n	800bc70 <json_encode_value+0xc4>
                        encoder->je_write(encoder->je_arg, "\\n",
 800bca8:	682b      	ldr	r3, [r5, #0]
 800bcaa:	2202      	movs	r2, #2
 800bcac:	4937      	ldr	r1, [pc, #220]	; (800bd8c <json_encode_value+0x1e0>)
 800bcae:	6868      	ldr	r0, [r5, #4]
 800bcb0:	4798      	blx	r3
                        break;
 800bcb2:	e7dd      	b.n	800bc70 <json_encode_value+0xc4>
                        encoder->je_write(encoder->je_arg, "\\f",
 800bcb4:	682b      	ldr	r3, [r5, #0]
 800bcb6:	2202      	movs	r2, #2
 800bcb8:	4935      	ldr	r1, [pc, #212]	; (800bd90 <json_encode_value+0x1e4>)
 800bcba:	6868      	ldr	r0, [r5, #4]
 800bcbc:	4798      	blx	r3
                        break;
 800bcbe:	e7d7      	b.n	800bc70 <json_encode_value+0xc4>
                        encoder->je_write(encoder->je_arg, "\\b",
 800bcc0:	682b      	ldr	r3, [r5, #0]
 800bcc2:	2202      	movs	r2, #2
 800bcc4:	4933      	ldr	r1, [pc, #204]	; (800bd94 <json_encode_value+0x1e8>)
 800bcc6:	6868      	ldr	r0, [r5, #4]
 800bcc8:	4798      	blx	r3
                        break;
 800bcca:	e7d1      	b.n	800bc70 <json_encode_value+0xc4>
            encoder->je_write(encoder->je_arg, "\"", sizeof("\"")-1);
 800bccc:	682b      	ldr	r3, [r5, #0]
 800bcce:	2201      	movs	r2, #1
 800bcd0:	492a      	ldr	r1, [pc, #168]	; (800bd7c <json_encode_value+0x1d0>)
 800bcd2:	6868      	ldr	r0, [r5, #4]
 800bcd4:	4798      	blx	r3
    return (0);
 800bcd6:	2300      	movs	r3, #0
}
 800bcd8:	4618      	mov	r0, r3
 800bcda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            JSON_ENCODE_ARRAY_START(encoder);
 800bcdc:	6803      	ldr	r3, [r0, #0]
 800bcde:	2201      	movs	r2, #1
 800bce0:	492d      	ldr	r1, [pc, #180]	; (800bd98 <json_encode_value+0x1ec>)
 800bce2:	6840      	ldr	r0, [r0, #4]
 800bce4:	4798      	blx	r3
            for (i = 0; i < jv->jv_len; i++) {
 800bce6:	2600      	movs	r6, #0
 800bce8:	e000      	b.n	800bcec <json_encode_value+0x140>
 800bcea:	3601      	adds	r6, #1
 800bcec:	8863      	ldrh	r3, [r4, #2]
 800bcee:	42b3      	cmp	r3, r6
 800bcf0:	dd12      	ble.n	800bd18 <json_encode_value+0x16c>
                rc = json_encode_value(encoder, jv->jv_val.composite.values[i]);
 800bcf2:	68e3      	ldr	r3, [r4, #12]
 800bcf4:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800bcf8:	4628      	mov	r0, r5
 800bcfa:	f7ff ff57 	bl	800bbac <json_encode_value>
                if (rc != 0) {
 800bcfe:	4603      	mov	r3, r0
 800bd00:	2800      	cmp	r0, #0
 800bd02:	d1e9      	bne.n	800bcd8 <json_encode_value+0x12c>
                if (i != jv->jv_len - 1) {
 800bd04:	8863      	ldrh	r3, [r4, #2]
 800bd06:	3b01      	subs	r3, #1
 800bd08:	42b3      	cmp	r3, r6
 800bd0a:	d0ee      	beq.n	800bcea <json_encode_value+0x13e>
                    encoder->je_write(encoder->je_arg, ",", sizeof(",")-1);
 800bd0c:	682b      	ldr	r3, [r5, #0]
 800bd0e:	2201      	movs	r2, #1
 800bd10:	4922      	ldr	r1, [pc, #136]	; (800bd9c <json_encode_value+0x1f0>)
 800bd12:	6868      	ldr	r0, [r5, #4]
 800bd14:	4798      	blx	r3
 800bd16:	e7e8      	b.n	800bcea <json_encode_value+0x13e>
            JSON_ENCODE_ARRAY_END(encoder);
 800bd18:	682b      	ldr	r3, [r5, #0]
 800bd1a:	2201      	movs	r2, #1
 800bd1c:	4920      	ldr	r1, [pc, #128]	; (800bda0 <json_encode_value+0x1f4>)
 800bd1e:	6868      	ldr	r0, [r5, #4]
 800bd20:	4798      	blx	r3
    return (0);
 800bd22:	2300      	movs	r3, #0
            break;
 800bd24:	e7d8      	b.n	800bcd8 <json_encode_value+0x12c>
            JSON_ENCODE_OBJECT_START(encoder);
 800bd26:	6803      	ldr	r3, [r0, #0]
 800bd28:	2201      	movs	r2, #1
 800bd2a:	491e      	ldr	r1, [pc, #120]	; (800bda4 <json_encode_value+0x1f8>)
 800bd2c:	6840      	ldr	r0, [r0, #4]
 800bd2e:	4798      	blx	r3
            for (i = 0; i < jv->jv_len; i++) {
 800bd30:	2600      	movs	r6, #0
 800bd32:	8863      	ldrh	r3, [r4, #2]
 800bd34:	42b3      	cmp	r3, r6
 800bd36:	dd0d      	ble.n	800bd54 <json_encode_value+0x1a8>
                        jv->jv_val.composite.keys[i],
 800bd38:	68a3      	ldr	r3, [r4, #8]
                        jv->jv_val.composite.values[i]);
 800bd3a:	68e2      	ldr	r2, [r4, #12]
                rc = json_encode_object_entry(encoder,
 800bd3c:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 800bd40:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800bd44:	4628      	mov	r0, r5
 800bd46:	f7ff fefb 	bl	800bb40 <json_encode_object_entry>
                if (rc != 0) {
 800bd4a:	4603      	mov	r3, r0
 800bd4c:	2800      	cmp	r0, #0
 800bd4e:	d1c3      	bne.n	800bcd8 <json_encode_value+0x12c>
            for (i = 0; i < jv->jv_len; i++) {
 800bd50:	3601      	adds	r6, #1
 800bd52:	e7ee      	b.n	800bd32 <json_encode_value+0x186>
            JSON_ENCODE_OBJECT_END(encoder);
 800bd54:	682b      	ldr	r3, [r5, #0]
 800bd56:	2201      	movs	r2, #1
 800bd58:	4913      	ldr	r1, [pc, #76]	; (800bda8 <json_encode_value+0x1fc>)
 800bd5a:	6868      	ldr	r0, [r5, #4]
 800bd5c:	4798      	blx	r3
    return (0);
 800bd5e:	2300      	movs	r3, #0
            break;
 800bd60:	e7ba      	b.n	800bcd8 <json_encode_value+0x12c>
            rc = -1;
 800bd62:	f04f 33ff 	mov.w	r3, #4294967295
 800bd66:	e7b7      	b.n	800bcd8 <json_encode_value+0x12c>
 800bd68:	0801809c 	.word	0x0801809c
 800bd6c:	08018814 	.word	0x08018814
 800bd70:	08018094 	.word	0x08018094
 800bd74:	080180a4 	.word	0x080180a4
 800bd78:	080180ac 	.word	0x080180ac
 800bd7c:	08017ea8 	.word	0x08017ea8
 800bd80:	080180bc 	.word	0x080180bc
 800bd84:	080180b4 	.word	0x080180b4
 800bd88:	080180b8 	.word	0x080180b8
 800bd8c:	080180c0 	.word	0x080180c0
 800bd90:	080180c4 	.word	0x080180c4
 800bd94:	080180c8 	.word	0x080180c8
 800bd98:	080180cc 	.word	0x080180cc
 800bd9c:	08017ea4 	.word	0x08017ea4
 800bda0:	080180d0 	.word	0x080180d0
 800bda4:	08018090 	.word	0x08018090
 800bda8:	080180d4 	.word	0x080180d4

0800bdac <json_encode_object_finish>:

int
json_encode_object_finish(struct json_encoder *encoder)
{
 800bdac:	b510      	push	{r4, lr}
 800bdae:	4604      	mov	r4, r0
    JSON_ENCODE_OBJECT_END(encoder);
 800bdb0:	6803      	ldr	r3, [r0, #0]
 800bdb2:	2201      	movs	r2, #1
 800bdb4:	4904      	ldr	r1, [pc, #16]	; (800bdc8 <json_encode_object_finish+0x1c>)
 800bdb6:	6840      	ldr	r0, [r0, #4]
 800bdb8:	4798      	blx	r3
    /* Useful in case of nested objects. */
    encoder->je_wr_commas = 1;
 800bdba:	7a23      	ldrb	r3, [r4, #8]
 800bdbc:	f043 0301 	orr.w	r3, r3, #1
 800bdc0:	7223      	strb	r3, [r4, #8]

    return (0);
}
 800bdc2:	2000      	movs	r0, #0
 800bdc4:	bd10      	pop	{r4, pc}
 800bdc6:	bf00      	nop
 800bdc8:	080180d4 	.word	0x080180d4

0800bdcc <json_encode_array_name>:

int
json_encode_array_name(struct json_encoder *encoder, char *name)
{
 800bdcc:	b508      	push	{r3, lr}
    return json_encode_object_key(encoder, name);
 800bdce:	f7ff fe8d 	bl	800baec <json_encode_object_key>
}
 800bdd2:	bd08      	pop	{r3, pc}

0800bdd4 <json_encode_array_start>:

int
json_encode_array_start(struct json_encoder *encoder)
{
 800bdd4:	b510      	push	{r4, lr}
 800bdd6:	4604      	mov	r4, r0
    JSON_ENCODE_ARRAY_START(encoder);
 800bdd8:	6803      	ldr	r3, [r0, #0]
 800bdda:	2201      	movs	r2, #1
 800bddc:	4904      	ldr	r1, [pc, #16]	; (800bdf0 <json_encode_array_start+0x1c>)
 800bdde:	6840      	ldr	r0, [r0, #4]
 800bde0:	4798      	blx	r3
    encoder->je_wr_commas = 0;
 800bde2:	7a23      	ldrb	r3, [r4, #8]
 800bde4:	f36f 0300 	bfc	r3, #0, #1
 800bde8:	7223      	strb	r3, [r4, #8]

    return (0);
}
 800bdea:	2000      	movs	r0, #0
 800bdec:	bd10      	pop	{r4, pc}
 800bdee:	bf00      	nop
 800bdf0:	080180cc 	.word	0x080180cc

0800bdf4 <json_encode_array_finish>:
}


int
json_encode_array_finish(struct json_encoder *encoder)
{
 800bdf4:	b508      	push	{r3, lr}
    encoder->je_wr_commas = 1;
 800bdf6:	7a03      	ldrb	r3, [r0, #8]
 800bdf8:	f043 0301 	orr.w	r3, r3, #1
 800bdfc:	7203      	strb	r3, [r0, #8]
    JSON_ENCODE_ARRAY_END(encoder);
 800bdfe:	6803      	ldr	r3, [r0, #0]
 800be00:	2201      	movs	r2, #1
 800be02:	4902      	ldr	r1, [pc, #8]	; (800be0c <json_encode_array_finish+0x18>)
 800be04:	6840      	ldr	r0, [r0, #4]
 800be06:	4798      	blx	r3

    return (0);
}
 800be08:	2000      	movs	r0, #0
 800be0a:	bd08      	pop	{r3, pc}
 800be0c:	080180d0 	.word	0x080180d0

0800be10 <hal_bsp_hw_id_len>:

int
hal_bsp_hw_id_len(void)
{
    return STM32_HW_ID_LEN;
}
 800be10:	200c      	movs	r0, #12
 800be12:	4770      	bx	lr

0800be14 <hal_bsp_hw_id>:

int
hal_bsp_hw_id(uint8_t *id, int max_len)
{
 800be14:	b510      	push	{r4, lr}
    int cnt;

    cnt = min(STM32_HW_ID_LEN, max_len);
 800be16:	290c      	cmp	r1, #12
 800be18:	bfa8      	it	ge
 800be1a:	210c      	movge	r1, #12
 800be1c:	460c      	mov	r4, r1
    memcpy(id, (void *)UID_BASE, cnt);
 800be1e:	460a      	mov	r2, r1
 800be20:	4902      	ldr	r1, [pc, #8]	; (800be2c <hal_bsp_hw_id+0x18>)
 800be22:	f002 f89b 	bl	800df5c <memcpy>

    return cnt;
}
 800be26:	4620      	mov	r0, r4
 800be28:	bd10      	pop	{r4, pc}
 800be2a:	bf00      	nop
 800be2c:	1fff7590 	.word	0x1fff7590

0800be30 <sensor_mgr_remove>:
}

static void
sensor_mgr_remove(struct sensor *sensor)
{
    SLIST_REMOVE(&sensor_mgr.mgr_sensor_list, sensor, sensor, s_next);
 800be30:	4b08      	ldr	r3, [pc, #32]	; (800be54 <sensor_mgr_remove+0x24>)
 800be32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800be34:	4282      	cmp	r2, r0
 800be36:	d104      	bne.n	800be42 <sensor_mgr_remove+0x12>
 800be38:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800be3c:	631a      	str	r2, [r3, #48]	; 0x30
 800be3e:	4770      	bx	lr
 800be40:	461a      	mov	r2, r3
 800be42:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 800be46:	4283      	cmp	r3, r0
 800be48:	d1fa      	bne.n	800be40 <sensor_mgr_remove+0x10>
 800be4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800be4e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 800be52:	4770      	bx	lr
 800be54:	20003840 	.word	0x20003840

0800be58 <sensor_mgr_insert>:

static void
sensor_mgr_insert(struct sensor *sensor)
{
 800be58:	b410      	push	{r4}
    struct sensor *cursor, *prev;

    prev = cursor = NULL;
    if (!sensor->s_poll_rate) {
 800be5a:	6a03      	ldr	r3, [r0, #32]
 800be5c:	b993      	cbnz	r3, 800be84 <sensor_mgr_insert+0x2c>
        SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
 800be5e:	4b15      	ldr	r3, [pc, #84]	; (800beb4 <sensor_mgr_insert+0x5c>)
 800be60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    prev = cursor = NULL;
 800be62:	2100      	movs	r1, #0
        SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
 800be64:	e002      	b.n	800be6c <sensor_mgr_insert+0x14>
            prev = cursor;
 800be66:	4619      	mov	r1, r3
        SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
 800be68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d1fa      	bne.n	800be66 <sensor_mgr_insert+0xe>

        prev = cursor;
    }

insert:
    if (prev == NULL) {
 800be70:	b1c9      	cbz	r1, 800bea6 <sensor_mgr_insert+0x4e>
        SLIST_INSERT_HEAD(&sensor_mgr.mgr_sensor_list, sensor, s_next);
    } else {
        SLIST_INSERT_AFTER(prev, sensor, s_next);
 800be72:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 800be76:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
 800be7a:	f8c1 0080 	str.w	r0, [r1, #128]	; 0x80
    }
}
 800be7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800be82:	4770      	bx	lr
    SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
 800be84:	4b0b      	ldr	r3, [pc, #44]	; (800beb4 <sensor_mgr_insert+0x5c>)
 800be86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    prev = cursor = NULL;
 800be88:	2100      	movs	r1, #0
    SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d0f0      	beq.n	800be70 <sensor_mgr_insert+0x18>
        if (!cursor->s_poll_rate) {
 800be8e:	6a1a      	ldr	r2, [r3, #32]
 800be90:	2a00      	cmp	r2, #0
 800be92:	d0ed      	beq.n	800be70 <sensor_mgr_insert+0x18>
        if (OS_TIME_TICK_LT(sensor->s_next_run, cursor->s_next_run)) {
 800be94:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800be96:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800be98:	1b12      	subs	r2, r2, r4
 800be9a:	2a00      	cmp	r2, #0
 800be9c:	dbe8      	blt.n	800be70 <sensor_mgr_insert+0x18>
        prev = cursor;
 800be9e:	4619      	mov	r1, r3
    SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
 800bea0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bea4:	e7f1      	b.n	800be8a <sensor_mgr_insert+0x32>
        SLIST_INSERT_HEAD(&sensor_mgr.mgr_sensor_list, sensor, s_next);
 800bea6:	4b03      	ldr	r3, [pc, #12]	; (800beb4 <sensor_mgr_insert+0x5c>)
 800bea8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800beaa:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
 800beae:	6318      	str	r0, [r3, #48]	; 0x30
 800beb0:	e7e5      	b.n	800be7e <sensor_mgr_insert+0x26>
 800beb2:	bf00      	nop
 800beb4:	20003840 	.word	0x20003840

0800beb8 <sensor_type_traits_empty>:
}

static uint8_t
sensor_type_traits_empty(struct sensor *sensor)
{
    return SLIST_EMPTY(&sensor->s_type_traits_list);
 800beb8:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
}
 800beba:	fab0 f080 	clz	r0, r0
 800bebe:	0940      	lsrs	r0, r0, #5
 800bec0:	4770      	bx	lr
	...

0800bec4 <sensor_mgr_evq_set>:
}

static void
sensor_mgr_evq_set(struct os_eventq *evq)
{
    sensor_mgr.mgr_eventq = evq;
 800bec4:	4b01      	ldr	r3, [pc, #4]	; (800becc <sensor_mgr_evq_set+0x8>)
 800bec6:	62d8      	str	r0, [r3, #44]	; 0x2c
}
 800bec8:	4770      	bx	lr
 800beca:	bf00      	nop
 800becc:	20003840 	.word	0x20003840

0800bed0 <sensor_mgr_match_bytype>:
 *
 * @return 1 if matches, 0 if it doesn't match.
 */
int
sensor_mgr_match_bytype(struct sensor *sensor, void *arg)
{
 800bed0:	e92d 0830 	stmdb	sp!, {r4, r5, fp}
     * sensor, and type is the bitmask we're searching for. We also look at
     * the mask as the driver might be configured to work in a mode where only
     * some of the sensors are supported but not all. Compare the three,
     * and if there is a match, return 1. If it is not supported, return 0.
     */
    return (*type & sensor->s_types & sensor->s_mask) ? 1 : 0;
 800bed4:	e9d1 2300 	ldrd	r2, r3, [r1]
 800bed8:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
 800bedc:	ea02 0b04 	and.w	fp, r2, r4
 800bee0:	ea03 0c05 	and.w	ip, r3, r5
 800bee4:	e9d0 0106 	ldrd	r0, r1, [r0, #24]
 800bee8:	ea0b 0200 	and.w	r2, fp, r0
 800beec:	ea0c 0301 	and.w	r3, ip, r1
 800bef0:	4313      	orrs	r3, r2
}
 800bef2:	bf14      	ite	ne
 800bef4:	2001      	movne	r0, #1
 800bef6:	2000      	moveq	r0, #0
 800bef8:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
 800befc:	4770      	bx	lr

0800befe <sensor_read_data_func>:
}

static int
sensor_read_data_func(struct sensor *sensor, void *arg, void *data,
                      sensor_type_t type)
{
 800befe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bf02:	b083      	sub	sp, #12
 800bf04:	4605      	mov	r5, r0
 800bf06:	4689      	mov	r9, r1
 800bf08:	4690      	mov	r8, r2
 800bf0a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
    struct sensor_listener *listener;
    struct sensor_read_ctx *ctx;

    ctx = (struct sensor_read_ctx *) arg;

    if ((uint8_t)(uintptr_t)(ctx->user_arg) != SENSOR_IGN_LISTENER) {
 800bf0e:	790b      	ldrb	r3, [r1, #4]
 800bf10:	2b01      	cmp	r3, #1
 800bf12:	d013      	beq.n	800bf3c <sensor_read_data_func+0x3e>
        /* Notify all listeners first */
        SLIST_FOREACH(listener, &sensor->s_listener_list, sl_next) {
 800bf14:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
 800bf16:	e000      	b.n	800bf1a <sensor_read_data_func+0x1c>
 800bf18:	6924      	ldr	r4, [r4, #16]
 800bf1a:	b17c      	cbz	r4, 800bf3c <sensor_read_data_func+0x3e>
            if (listener->sl_sensor_type & type) {
 800bf1c:	e9d4 0100 	ldrd	r0, r1, [r4]
 800bf20:	ea00 0206 	and.w	r2, r0, r6
 800bf24:	ea01 0307 	and.w	r3, r1, r7
 800bf28:	4313      	orrs	r3, r2
 800bf2a:	d0f5      	beq.n	800bf18 <sensor_read_data_func+0x1a>
                listener->sl_func(sensor, listener->sl_arg, data, type);
 800bf2c:	68a3      	ldr	r3, [r4, #8]
 800bf2e:	68e1      	ldr	r1, [r4, #12]
 800bf30:	e9cd 6700 	strd	r6, r7, [sp]
 800bf34:	4642      	mov	r2, r8
 800bf36:	4628      	mov	r0, r5
 800bf38:	4798      	blx	r3
 800bf3a:	e7ed      	b.n	800bf18 <sensor_read_data_func+0x1a>
            }
        }
    }

    /* Call data function */
    if (ctx->user_func != NULL) {
 800bf3c:	f8d9 3000 	ldr.w	r3, [r9]
 800bf40:	b14b      	cbz	r3, 800bf56 <sensor_read_data_func+0x58>
        return (ctx->user_func(sensor, ctx->user_arg, data, type));
 800bf42:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800bf46:	e9cd 6700 	strd	r6, r7, [sp]
 800bf4a:	4642      	mov	r2, r8
 800bf4c:	4628      	mov	r0, r5
 800bf4e:	4798      	blx	r3
    }

    return (0);
}
 800bf50:	b003      	add	sp, #12
 800bf52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return (0);
 800bf56:	2000      	movs	r0, #0
 800bf58:	e7fa      	b.n	800bf50 <sensor_read_data_func+0x52>

0800bf5a <sensor_mgr_match_bydevname>:
{
 800bf5a:	b508      	push	{r3, lr}
    if (!strcmp(sensor->s_dev->od_name, devname)) {
 800bf5c:	6803      	ldr	r3, [r0, #0]
 800bf5e:	69d8      	ldr	r0, [r3, #28]
 800bf60:	f002 f835 	bl	800dfce <strcmp>
 800bf64:	b108      	cbz	r0, 800bf6a <sensor_mgr_match_bydevname+0x10>
    return (0);
 800bf66:	2000      	movs	r0, #0
}
 800bf68:	bd08      	pop	{r3, pc}
        return (1);
 800bf6a:	2001      	movs	r0, #1
 800bf6c:	e7fc      	b.n	800bf68 <sensor_mgr_match_bydevname+0xe>
	...

0800bf70 <sensor_base_ts_update_event>:
{
 800bf70:	b530      	push	{r4, r5, lr}
 800bf72:	b087      	sub	sp, #28
    ticks = os_time_get();
 800bf74:	f001 fe2a 	bl	800dbcc <os_time_get>
 800bf78:	4604      	mov	r4, r0
    rc = os_gettimeofday(&ostv, &ostz);
 800bf7a:	a901      	add	r1, sp, #4
 800bf7c:	a802      	add	r0, sp, #8
 800bf7e:	f001 fe5f 	bl	800dc40 <os_gettimeofday>
    if (rc) {
 800bf82:	b148      	cbz	r0, 800bf98 <sensor_base_ts_update_event+0x28>
        ticks += OS_TICKS_PER_SEC * 600;
 800bf84:	f504 2412 	add.w	r4, r4, #598016	; 0x92000
 800bf88:	f504 64f8 	add.w	r4, r4, #1984	; 0x7c0
    os_callout_reset(&st_up_osco, ticks);
 800bf8c:	4621      	mov	r1, r4
 800bf8e:	480a      	ldr	r0, [pc, #40]	; (800bfb8 <sensor_base_ts_update_event+0x48>)
 800bf90:	f000 fcca 	bl	800c928 <os_callout_reset>
}
 800bf94:	b007      	add	sp, #28
 800bf96:	bd30      	pop	{r4, r5, pc}
    ticks += OS_TICKS_PER_SEC * 2000;
 800bf98:	f504 14f4 	add.w	r4, r4, #1998848	; 0x1e8000
 800bf9c:	f504 6490 	add.w	r4, r4, #1152	; 0x480
    sensor_base_ts.st_ostv = ostv;
 800bfa0:	4d06      	ldr	r5, [pc, #24]	; (800bfbc <sensor_base_ts_update_event+0x4c>)
 800bfa2:	ab06      	add	r3, sp, #24
 800bfa4:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800bfa8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    sensor_base_ts.st_ostz = ostz;
 800bfac:	9b01      	ldr	r3, [sp, #4]
 800bfae:	612b      	str	r3, [r5, #16]
    sensor_base_ts.st_cputime = os_cputime_get32();
 800bfb0:	f000 fd44 	bl	800ca3c <os_cputime_get32>
 800bfb4:	6168      	str	r0, [r5, #20]
 800bfb6:	e7e9      	b.n	800bf8c <sensor_base_ts_update_event+0x1c>
 800bfb8:	20003874 	.word	0x20003874
 800bfbc:	20003898 	.word	0x20003898

0800bfc0 <sensor_up_timestamp>:
    assert(rc == 0);
}

static void
sensor_up_timestamp(struct sensor *sensor)
{
 800bfc0:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
 800bfc4:	4604      	mov	r4, r0
    uint32_t curr_ts_ticks;
    uint32_t ts;

    curr_ts_ticks = os_cputime_get32();
 800bfc6:	f000 fd39 	bl	800ca3c <os_cputime_get32>

    ts = os_cputime_ticks_to_usecs(curr_ts_ticks -
 800bfca:	4a0e      	ldr	r2, [pc, #56]	; (800c004 <sensor_up_timestamp+0x44>)
 800bfcc:	6955      	ldr	r5, [r2, #20]
 800bfce:	1b43      	subs	r3, r0, r5
             sensor_base_ts.st_cputime);

    /* Updating cputime */
    sensor_base_ts.st_cputime = sensor->s_sts.st_cputime = curr_ts_ticks;
 800bfd0:	6460      	str	r0, [r4, #68]	; 0x44
 800bfd2:	6150      	str	r0, [r2, #20]

    /* Updating seconds */
    sensor_base_ts.st_ostv.tv_sec  = sensor_base_ts.st_ostv.tv_sec + (ts +
 800bfd4:	e9d2 0100 	ldrd	r0, r1, [r2]
        sensor_base_ts.st_ostv.tv_usec)/1000000;
 800bfd8:	6895      	ldr	r5, [r2, #8]
    sensor_base_ts.st_ostv.tv_sec  = sensor_base_ts.st_ostv.tv_sec + (ts +
 800bfda:	441d      	add	r5, r3
        sensor_base_ts.st_ostv.tv_usec)/1000000;
 800bfdc:	4b0a      	ldr	r3, [pc, #40]	; (800c008 <sensor_up_timestamp+0x48>)
 800bfde:	fba3 c305 	umull	ip, r3, r3, r5
 800bfe2:	0c9b      	lsrs	r3, r3, #18
    sensor_base_ts.st_ostv.tv_sec  = sensor_base_ts.st_ostv.tv_sec + (ts +
 800bfe4:	eb10 0b03 	adds.w	fp, r0, r3
 800bfe8:	f141 0c00 	adc.w	ip, r1, #0
 800bfec:	e9c2 bc00 	strd	fp, ip, [r2]
    sensor->s_sts.st_ostv.tv_sec = sensor_base_ts.st_ostv.tv_sec;
 800bff0:	e9c4 bc0c 	strd	fp, ip, [r4, #48]	; 0x30

    /* Updating Micro seconds */
    sensor_base_ts.st_ostv.tv_usec  =
        (sensor_base_ts.st_ostv.tv_usec + ts)%1000000;
 800bff4:	4905      	ldr	r1, [pc, #20]	; (800c00c <sensor_up_timestamp+0x4c>)
 800bff6:	fb01 5113 	mls	r1, r1, r3, r5
    sensor_base_ts.st_ostv.tv_usec  =
 800bffa:	6091      	str	r1, [r2, #8]
    sensor->s_sts.st_ostv.tv_usec = sensor_base_ts.st_ostv.tv_usec;
 800bffc:	63a1      	str	r1, [r4, #56]	; 0x38

}
 800bffe:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
 800c002:	bf00      	nop
 800c004:	20003898 	.word	0x20003898
 800c008:	431bde83 	.word	0x431bde83
 800c00c:	000f4240 	.word	0x000f4240

0800c010 <sensor_mgr_lock>:
{
 800c010:	b508      	push	{r3, lr}
    rc = os_mutex_pend(&sensor_mgr.mgr_lock, OS_TIMEOUT_NEVER);
 800c012:	f04f 31ff 	mov.w	r1, #4294967295
 800c016:	4804      	ldr	r0, [pc, #16]	; (800c028 <sensor_mgr_lock+0x18>)
 800c018:	f001 fa4c 	bl	800d4b4 <os_mutex_pend>
    if (rc == 0 || rc == OS_NOT_STARTED) {
 800c01c:	b108      	cbz	r0, 800c022 <sensor_mgr_lock+0x12>
 800c01e:	2809      	cmp	r0, #9
 800c020:	d000      	beq.n	800c024 <sensor_mgr_lock+0x14>
}
 800c022:	bd08      	pop	{r3, pc}
        return (0);
 800c024:	2000      	movs	r0, #0
 800c026:	e7fc      	b.n	800c022 <sensor_mgr_lock+0x12>
 800c028:	20003840 	.word	0x20003840

0800c02c <sensor_mgr_unlock>:
{
 800c02c:	b508      	push	{r3, lr}
    (void) os_mutex_release(&sensor_mgr.mgr_lock);
 800c02e:	4802      	ldr	r0, [pc, #8]	; (800c038 <sensor_mgr_unlock+0xc>)
 800c030:	f001 f9e4 	bl	800d3fc <os_mutex_release>
}
 800c034:	bd08      	pop	{r3, pc}
 800c036:	bf00      	nop
 800c038:	20003840 	.word	0x20003840

0800c03c <sensor_mgr_evq_get>:
}
 800c03c:	4b01      	ldr	r3, [pc, #4]	; (800c044 <sensor_mgr_evq_get+0x8>)
 800c03e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800c040:	4770      	bx	lr
 800c042:	bf00      	nop
 800c044:	20003840 	.word	0x20003840

0800c048 <sensor_mgr_init>:
{
 800c048:	b570      	push	{r4, r5, r6, lr}
 800c04a:	b088      	sub	sp, #32
    sensor_mgr_evq_set(os_eventq_dflt_get());
 800c04c:	f000 fe84 	bl	800cd58 <os_eventq_dflt_get>
 800c050:	f7ff ff38 	bl	800bec4 <sensor_mgr_evq_set>
    rc = os_mempool_init(&sensor_notify_evt_pool,
 800c054:	4b1d      	ldr	r3, [pc, #116]	; (800c0cc <sensor_mgr_init+0x84>)
 800c056:	9300      	str	r3, [sp, #0]
 800c058:	4b1d      	ldr	r3, [pc, #116]	; (800c0d0 <sensor_mgr_init+0x88>)
 800c05a:	2218      	movs	r2, #24
 800c05c:	2105      	movs	r1, #5
 800c05e:	481d      	ldr	r0, [pc, #116]	; (800c0d4 <sensor_mgr_init+0x8c>)
 800c060:	f001 f8d8 	bl	800d214 <os_mempool_init>
    assert(rc == OS_OK);
 800c064:	bb58      	cbnz	r0, 800c0be <sensor_mgr_init+0x76>
    os_callout_init(&sensor_mgr.mgr_wakeup_callout, sensor_mgr_evq_get(),
 800c066:	f7ff ffe9 	bl	800c03c <sensor_mgr_evq_get>
 800c06a:	4e1b      	ldr	r6, [pc, #108]	; (800c0d8 <sensor_mgr_init+0x90>)
 800c06c:	2300      	movs	r3, #0
 800c06e:	4a1b      	ldr	r2, [pc, #108]	; (800c0dc <sensor_mgr_init+0x94>)
 800c070:	4601      	mov	r1, r0
 800c072:	4630      	mov	r0, r6
 800c074:	f000 fc2c 	bl	800c8d0 <os_callout_init>
    os_gettimeofday(&ostv, &ostz);
 800c078:	ad04      	add	r5, sp, #16
 800c07a:	a903      	add	r1, sp, #12
 800c07c:	4628      	mov	r0, r5
 800c07e:	f001 fddf 	bl	800dc40 <os_gettimeofday>
    sensor_base_ts.st_ostv = ostv;
 800c082:	4c17      	ldr	r4, [pc, #92]	; (800c0e0 <sensor_mgr_init+0x98>)
 800c084:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800c088:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    sensor_base_ts.st_ostz = ostz;
 800c08c:	9b03      	ldr	r3, [sp, #12]
 800c08e:	6123      	str	r3, [r4, #16]
    sensor_base_ts.st_cputime = os_cputime_get32();
 800c090:	f000 fcd4 	bl	800ca3c <os_cputime_get32>
 800c094:	6160      	str	r0, [r4, #20]
    os_callout_init(&st_up_osco, sensor_mgr_evq_get(),
 800c096:	f7ff ffd1 	bl	800c03c <sensor_mgr_evq_get>
 800c09a:	4c12      	ldr	r4, [pc, #72]	; (800c0e4 <sensor_mgr_init+0x9c>)
 800c09c:	2300      	movs	r3, #0
 800c09e:	4a12      	ldr	r2, [pc, #72]	; (800c0e8 <sensor_mgr_init+0xa0>)
 800c0a0:	4601      	mov	r1, r0
 800c0a2:	4620      	mov	r0, r4
 800c0a4:	f000 fc14 	bl	800c8d0 <os_callout_init>
    os_callout_reset(&st_up_osco, OS_TICKS_PER_SEC);
 800c0a8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800c0ac:	4620      	mov	r0, r4
 800c0ae:	f000 fc3b 	bl	800c928 <os_callout_reset>
    os_mutex_init(&sensor_mgr.mgr_lock);
 800c0b2:	f1a6 000c 	sub.w	r0, r6, #12
 800c0b6:	f001 f997 	bl	800d3e8 <os_mutex_init>
}
 800c0ba:	b008      	add	sp, #32
 800c0bc:	bd70      	pop	{r4, r5, r6, pc}
    assert(rc == OS_OK);
 800c0be:	2300      	movs	r3, #0
 800c0c0:	461a      	mov	r2, r3
 800c0c2:	4619      	mov	r1, r3
 800c0c4:	4618      	mov	r0, r3
 800c0c6:	f000 fa85 	bl	800c5d4 <__assert_func>
 800c0ca:	bf00      	nop
 800c0cc:	080180d8 	.word	0x080180d8
 800c0d0:	200006dc 	.word	0x200006dc
 800c0d4:	20000754 	.word	0x20000754
 800c0d8:	2000384c 	.word	0x2000384c
 800c0dc:	0800c3a1 	.word	0x0800c3a1
 800c0e0:	20003898 	.word	0x20003898
 800c0e4:	20003874 	.word	0x20003874
 800c0e8:	0800bf71 	.word	0x0800bf71

0800c0ec <sensor_mgr_find_next>:
{
 800c0ec:	b570      	push	{r4, r5, r6, lr}
 800c0ee:	4605      	mov	r5, r0
 800c0f0:	460e      	mov	r6, r1
 800c0f2:	4614      	mov	r4, r2
    rc = sensor_mgr_lock();
 800c0f4:	f7ff ff8c 	bl	800c010 <sensor_mgr_lock>
    if (rc != 0) {
 800c0f8:	b988      	cbnz	r0, 800c11e <sensor_mgr_find_next+0x32>
    if (cursor == NULL) {
 800c0fa:	b14c      	cbz	r4, 800c110 <sensor_mgr_find_next+0x24>
        cursor = SLIST_NEXT(prev_cursor, s_next);
 800c0fc:	f8d4 4080 	ldr.w	r4, [r4, #128]	; 0x80
    while (cursor != NULL) {
 800c100:	b14c      	cbz	r4, 800c116 <sensor_mgr_find_next+0x2a>
        if (compare_func(cursor, arg)) {
 800c102:	4631      	mov	r1, r6
 800c104:	4620      	mov	r0, r4
 800c106:	47a8      	blx	r5
 800c108:	b928      	cbnz	r0, 800c116 <sensor_mgr_find_next+0x2a>
        cursor = SLIST_NEXT(cursor, s_next);
 800c10a:	f8d4 4080 	ldr.w	r4, [r4, #128]	; 0x80
 800c10e:	e7f7      	b.n	800c100 <sensor_mgr_find_next+0x14>
        cursor = SLIST_FIRST(&sensor_mgr.mgr_sensor_list);
 800c110:	4b04      	ldr	r3, [pc, #16]	; (800c124 <sensor_mgr_find_next+0x38>)
 800c112:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 800c114:	e7f4      	b.n	800c100 <sensor_mgr_find_next+0x14>
    sensor_mgr_unlock();
 800c116:	f7ff ff89 	bl	800c02c <sensor_mgr_unlock>
}
 800c11a:	4620      	mov	r0, r4
 800c11c:	bd70      	pop	{r4, r5, r6, pc}
    cursor = NULL;
 800c11e:	2400      	movs	r4, #0
    return (cursor);
 800c120:	e7fb      	b.n	800c11a <sensor_mgr_find_next+0x2e>
 800c122:	bf00      	nop
 800c124:	20003840 	.word	0x20003840

0800c128 <sensor_mgr_find_next_bydevname>:
{
 800c128:	b508      	push	{r3, lr}
    return (sensor_mgr_find_next(sensor_mgr_match_bydevname, (char *)devname,
 800c12a:	460a      	mov	r2, r1
 800c12c:	4601      	mov	r1, r0
 800c12e:	4802      	ldr	r0, [pc, #8]	; (800c138 <sensor_mgr_find_next_bydevname+0x10>)
 800c130:	f7ff ffdc 	bl	800c0ec <sensor_mgr_find_next>
}
 800c134:	bd08      	pop	{r3, pc}
 800c136:	bf00      	nop
 800c138:	0800bf5b 	.word	0x0800bf5b

0800c13c <sensor_pkg_init>:
{
 800c13c:	b508      	push	{r3, lr}
    sensor_mgr_init();
 800c13e:	f7ff ff83 	bl	800c048 <sensor_mgr_init>
}
 800c142:	bd08      	pop	{r3, pc}

0800c144 <sensor_lock>:
{
 800c144:	b508      	push	{r3, lr}
    rc = os_mutex_pend(&sensor->s_lock, OS_TIMEOUT_NEVER);
 800c146:	f04f 31ff 	mov.w	r1, #4294967295
 800c14a:	3004      	adds	r0, #4
 800c14c:	f001 f9b2 	bl	800d4b4 <os_mutex_pend>
    if (rc == 0 || rc == OS_NOT_STARTED) {
 800c150:	b108      	cbz	r0, 800c156 <sensor_lock+0x12>
 800c152:	2809      	cmp	r0, #9
 800c154:	d000      	beq.n	800c158 <sensor_lock+0x14>
}
 800c156:	bd08      	pop	{r3, pc}
        return (0);
 800c158:	2000      	movs	r0, #0
 800c15a:	e7fc      	b.n	800c156 <sensor_lock+0x12>

0800c15c <sensor_unlock>:
{
 800c15c:	b508      	push	{r3, lr}
    os_mutex_release(&sensor->s_lock);
 800c15e:	3004      	adds	r0, #4
 800c160:	f001 f94c 	bl	800d3fc <os_mutex_release>
}
 800c164:	bd08      	pop	{r3, pc}

0800c166 <sensor_update_poll_rate>:
{
 800c166:	b538      	push	{r3, r4, r5, lr}
 800c168:	4604      	mov	r4, r0
 800c16a:	460d      	mov	r5, r1
    sensor_lock(sensor);
 800c16c:	f7ff ffea 	bl	800c144 <sensor_lock>
    sensor->s_poll_rate = poll_rate;
 800c170:	6225      	str	r5, [r4, #32]
    sensor_unlock(sensor);
 800c172:	4620      	mov	r0, r4
 800c174:	f7ff fff2 	bl	800c15c <sensor_unlock>
}
 800c178:	bd38      	pop	{r3, r4, r5, pc}

0800c17a <sensor_update_nextrun>:
{
 800c17a:	b530      	push	{r4, r5, lr}
 800c17c:	b083      	sub	sp, #12
 800c17e:	4604      	mov	r4, r0
 800c180:	460d      	mov	r5, r1
    os_time_ms_to_ticks(sensor->s_poll_rate, &sensor_ticks);
 800c182:	a901      	add	r1, sp, #4
 800c184:	6a00      	ldr	r0, [r0, #32]
 800c186:	f001 fd77 	bl	800dc78 <os_time_ms_to_ticks>
    sensor_lock(sensor);
 800c18a:	4620      	mov	r0, r4
 800c18c:	f7ff ffda 	bl	800c144 <sensor_lock>
    sensor_mgr_remove(sensor);
 800c190:	4620      	mov	r0, r4
 800c192:	f7ff fe4d 	bl	800be30 <sensor_mgr_remove>
    sensor->s_next_run = sensor_ticks + now;
 800c196:	9b01      	ldr	r3, [sp, #4]
 800c198:	441d      	add	r5, r3
 800c19a:	6265      	str	r5, [r4, #36]	; 0x24
    sensor_mgr_insert(sensor);
 800c19c:	4620      	mov	r0, r4
 800c19e:	f7ff fe5b 	bl	800be58 <sensor_mgr_insert>
    sensor_unlock(sensor);
 800c1a2:	4620      	mov	r0, r4
 800c1a4:	f7ff ffda 	bl	800c15c <sensor_unlock>
}
 800c1a8:	b003      	add	sp, #12
 800c1aa:	bd30      	pop	{r4, r5, pc}

0800c1ac <sensor_calc_nextrun_delta>:
{
 800c1ac:	b538      	push	{r3, r4, r5, lr}
 800c1ae:	4605      	mov	r5, r0
 800c1b0:	460c      	mov	r4, r1
    sensor_lock(sensor);
 800c1b2:	f7ff ffc7 	bl	800c144 <sensor_lock>
    delta = (int32_t)(sensor->s_next_run - now);
 800c1b6:	6a69      	ldr	r1, [r5, #36]	; 0x24
    if (delta < 0) {
 800c1b8:	1b0c      	subs	r4, r1, r4
 800c1ba:	d404      	bmi.n	800c1c6 <sensor_calc_nextrun_delta+0x1a>
    sensor_unlock(sensor);
 800c1bc:	4628      	mov	r0, r5
 800c1be:	f7ff ffcd 	bl	800c15c <sensor_unlock>
}
 800c1c2:	4620      	mov	r0, r4
 800c1c4:	bd38      	pop	{r3, r4, r5, pc}
        sensor_ticks = 0;
 800c1c6:	2400      	movs	r4, #0
 800c1c8:	e7f8      	b.n	800c1bc <sensor_calc_nextrun_delta+0x10>
	...

0800c1cc <sensor_find_min_nextrun_sensor>:
{
 800c1cc:	b570      	push	{r4, r5, r6, lr}
 800c1ce:	4606      	mov	r6, r0
 800c1d0:	460d      	mov	r5, r1
    sensor_mgr_lock();
 800c1d2:	f7ff ff1d 	bl	800c010 <sensor_mgr_lock>
    head = SLIST_FIRST(&sensor_mgr.mgr_sensor_list);
 800c1d6:	4b05      	ldr	r3, [pc, #20]	; (800c1ec <sensor_find_min_nextrun_sensor+0x20>)
 800c1d8:	6b1c      	ldr	r4, [r3, #48]	; 0x30
    *min_nextrun = sensor_calc_nextrun_delta(head, now);
 800c1da:	4631      	mov	r1, r6
 800c1dc:	4620      	mov	r0, r4
 800c1de:	f7ff ffe5 	bl	800c1ac <sensor_calc_nextrun_delta>
 800c1e2:	6028      	str	r0, [r5, #0]
    sensor_mgr_unlock();
 800c1e4:	f7ff ff22 	bl	800c02c <sensor_mgr_unlock>
}
 800c1e8:	4620      	mov	r0, r4
 800c1ea:	bd70      	pop	{r4, r5, r6, pc}
 800c1ec:	20003840 	.word	0x20003840

0800c1f0 <sensor_set_poll_rate_ms>:
{
 800c1f0:	b570      	push	{r4, r5, r6, lr}
 800c1f2:	b082      	sub	sp, #8
 800c1f4:	4604      	mov	r4, r0
 800c1f6:	460d      	mov	r5, r1
    os_callout_stop(&sensor_mgr.mgr_wakeup_callout);
 800c1f8:	4815      	ldr	r0, [pc, #84]	; (800c250 <sensor_set_poll_rate_ms+0x60>)
 800c1fa:	f000 fb77 	bl	800c8ec <os_callout_stop>
    sensor = sensor_mgr_find_next_bydevname(devname, NULL);
 800c1fe:	2100      	movs	r1, #0
 800c200:	4620      	mov	r0, r4
 800c202:	f7ff ff91 	bl	800c128 <sensor_mgr_find_next_bydevname>
    if (!sensor) {
 800c206:	b1f8      	cbz	r0, 800c248 <sensor_set_poll_rate_ms+0x58>
 800c208:	4604      	mov	r4, r0
    sensor_lock(sensor);
 800c20a:	f7ff ff9b 	bl	800c144 <sensor_lock>
    now = os_time_get();
 800c20e:	f001 fcdd 	bl	800dbcc <os_time_get>
 800c212:	4606      	mov	r6, r0
    os_time_ms_to_ticks(poll_rate, &next_wakeup);
 800c214:	a901      	add	r1, sp, #4
 800c216:	4628      	mov	r0, r5
 800c218:	f001 fd2e 	bl	800dc78 <os_time_ms_to_ticks>
    sensor_update_poll_rate(sensor, poll_rate);
 800c21c:	4629      	mov	r1, r5
 800c21e:	4620      	mov	r0, r4
 800c220:	f7ff ffa1 	bl	800c166 <sensor_update_poll_rate>
    sensor_update_nextrun(sensor, now);
 800c224:	4631      	mov	r1, r6
 800c226:	4620      	mov	r0, r4
 800c228:	f7ff ffa7 	bl	800c17a <sensor_update_nextrun>
    sensor_unlock(sensor);
 800c22c:	4620      	mov	r0, r4
 800c22e:	f7ff ff95 	bl	800c15c <sensor_unlock>
    sensor = sensor_find_min_nextrun_sensor(now, &next_wakeup);
 800c232:	a901      	add	r1, sp, #4
 800c234:	4630      	mov	r0, r6
 800c236:	f7ff ffc9 	bl	800c1cc <sensor_find_min_nextrun_sensor>
    os_callout_reset(&sensor_mgr.mgr_wakeup_callout, next_wakeup);
 800c23a:	9901      	ldr	r1, [sp, #4]
 800c23c:	4804      	ldr	r0, [pc, #16]	; (800c250 <sensor_set_poll_rate_ms+0x60>)
 800c23e:	f000 fb73 	bl	800c928 <os_callout_reset>
    return 0;
 800c242:	2000      	movs	r0, #0
}
 800c244:	b002      	add	sp, #8
 800c246:	bd70      	pop	{r4, r5, r6, pc}
    return rc;
 800c248:	f06f 0001 	mvn.w	r0, #1
 800c24c:	e7fa      	b.n	800c244 <sensor_set_poll_rate_ms+0x54>
 800c24e:	bf00      	nop
 800c250:	2000384c 	.word	0x2000384c

0800c254 <sensor_mgr_register>:
{
 800c254:	b538      	push	{r3, r4, r5, lr}
 800c256:	4605      	mov	r5, r0
    rc = sensor_mgr_lock();
 800c258:	f7ff feda 	bl	800c010 <sensor_mgr_lock>
    if (rc != 0) {
 800c25c:	4604      	mov	r4, r0
 800c25e:	b108      	cbz	r0, 800c264 <sensor_mgr_register+0x10>
}
 800c260:	4620      	mov	r0, r4
 800c262:	bd38      	pop	{r3, r4, r5, pc}
    rc = sensor_lock(sensor);
 800c264:	4628      	mov	r0, r5
 800c266:	f7ff ff6d 	bl	800c144 <sensor_lock>
    if (rc != 0) {
 800c26a:	4604      	mov	r4, r0
 800c26c:	2800      	cmp	r0, #0
 800c26e:	d1f7      	bne.n	800c260 <sensor_mgr_register+0xc>
    sensor_mgr_insert(sensor);
 800c270:	4628      	mov	r0, r5
 800c272:	f7ff fdf1 	bl	800be58 <sensor_mgr_insert>
    sensor_unlock(sensor);
 800c276:	4628      	mov	r0, r5
 800c278:	f7ff ff70 	bl	800c15c <sensor_unlock>
    sensor_mgr_unlock();
 800c27c:	f7ff fed6 	bl	800c02c <sensor_mgr_unlock>
    return (0);
 800c280:	e7ee      	b.n	800c260 <sensor_mgr_register+0xc>

0800c282 <sensor_init>:
{
 800c282:	b538      	push	{r3, r4, r5, lr}
 800c284:	4604      	mov	r4, r0
 800c286:	460d      	mov	r5, r1
    memset(sensor, 0, sizeof(*sensor));
 800c288:	2288      	movs	r2, #136	; 0x88
 800c28a:	2100      	movs	r1, #0
 800c28c:	f001 fe73 	bl	800df76 <memset>
    rc = os_mutex_init(&sensor->s_lock);
 800c290:	1d20      	adds	r0, r4, #4
 800c292:	f001 f8a9 	bl	800d3e8 <os_mutex_init>
    if (rc != 0) {
 800c296:	4603      	mov	r3, r0
 800c298:	b900      	cbnz	r0, 800c29c <sensor_init+0x1a>
    sensor->s_dev = dev;
 800c29a:	6025      	str	r5, [r4, #0]
}
 800c29c:	4618      	mov	r0, r3
 800c29e:	bd38      	pop	{r3, r4, r5, pc}

0800c2a0 <sensor_register_listener>:
{
 800c2a0:	b570      	push	{r4, r5, r6, lr}
 800c2a2:	4604      	mov	r4, r0
 800c2a4:	460e      	mov	r6, r1
    rc = sensor_lock(sensor);
 800c2a6:	f7ff ff4d 	bl	800c144 <sensor_lock>
    if (rc != 0) {
 800c2aa:	4605      	mov	r5, r0
 800c2ac:	b108      	cbz	r0, 800c2b2 <sensor_register_listener+0x12>
}
 800c2ae:	4628      	mov	r0, r5
 800c2b0:	bd70      	pop	{r4, r5, r6, pc}
    SLIST_INSERT_HEAD(&sensor->s_listener_list, listener, sl_next);
 800c2b2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800c2b4:	6133      	str	r3, [r6, #16]
 800c2b6:	66e6      	str	r6, [r4, #108]	; 0x6c
    sensor_unlock(sensor);
 800c2b8:	4620      	mov	r0, r4
 800c2ba:	f7ff ff4f 	bl	800c15c <sensor_unlock>
    return (0);
 800c2be:	e7f6      	b.n	800c2ae <sensor_register_listener+0xe>

0800c2c0 <sensor_read>:
 * @return 0 on success, non-zero on failure.
 */
int
sensor_read(struct sensor *sensor, sensor_type_t type,
        sensor_data_func_t data_func, void *arg, uint32_t timeout)
{
 800c2c0:	b530      	push	{r4, r5, lr}
 800c2c2:	b089      	sub	sp, #36	; 0x24
 800c2c4:	4604      	mov	r4, r0
 800c2c6:	e9cd 2304 	strd	r2, r3, [sp, #16]
    struct sensor_read_ctx src;
    int rc;

    rc = sensor_lock(sensor);
 800c2ca:	f7ff ff3b 	bl	800c144 <sensor_lock>
    if (rc) {
 800c2ce:	4605      	mov	r5, r0
 800c2d0:	b9f8      	cbnz	r0, 800c312 <sensor_read+0x52>
        goto err;
    }

    src.user_func = data_func;
 800c2d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c2d4:	9306      	str	r3, [sp, #24]
    src.user_arg = arg;
 800c2d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c2d8:	9307      	str	r3, [sp, #28]

    if (!sensor_mgr_match_bytype(sensor, (void *)&type)) {
 800c2da:	a904      	add	r1, sp, #16
 800c2dc:	4620      	mov	r0, r4
 800c2de:	f7ff fdf7 	bl	800bed0 <sensor_mgr_match_bytype>
 800c2e2:	b1e0      	cbz	r0, 800c31e <sensor_read+0x5e>
        rc = SYS_ENOENT;
        goto err;
    }

    sensor_up_timestamp(sensor);
 800c2e4:	4620      	mov	r0, r4
 800c2e6:	f7ff fe6b 	bl	800bfc0 <sensor_up_timestamp>

    rc = sensor->s_funcs->sd_read(sensor, type, sensor_read_data_func, &src,
 800c2ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c2ec:	6819      	ldr	r1, [r3, #0]
 800c2ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c2f0:	9302      	str	r3, [sp, #8]
 800c2f2:	ab06      	add	r3, sp, #24
 800c2f4:	9301      	str	r3, [sp, #4]
 800c2f6:	4b0b      	ldr	r3, [pc, #44]	; (800c324 <sensor_read+0x64>)
 800c2f8:	9300      	str	r3, [sp, #0]
 800c2fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c2fe:	4620      	mov	r0, r4
 800c300:	4788      	blx	r1
                                  timeout);
    if (rc) {
 800c302:	4605      	mov	r5, r0
 800c304:	b128      	cbz	r0, 800c312 <sensor_read+0x52>
        if (sensor->s_err_fn != NULL) {
 800c306:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800c308:	b11b      	cbz	r3, 800c312 <sensor_read+0x52>
            sensor->s_err_fn(sensor, sensor->s_err_arg, rc);
 800c30a:	4602      	mov	r2, r0
 800c30c:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800c30e:	4620      	mov	r0, r4
 800c310:	4798      	blx	r3
        }
        goto err;
    }

err:
    sensor_unlock(sensor);
 800c312:	4620      	mov	r0, r4
 800c314:	f7ff ff22 	bl	800c15c <sensor_unlock>
    return (rc);
}
 800c318:	4628      	mov	r0, r5
 800c31a:	b009      	add	sp, #36	; 0x24
 800c31c:	bd30      	pop	{r4, r5, pc}
        rc = SYS_ENOENT;
 800c31e:	f06f 0503 	mvn.w	r5, #3
 800c322:	e7f6      	b.n	800c312 <sensor_read+0x52>
 800c324:	0800beff 	.word	0x0800beff

0800c328 <sensor_mgr_poll_bytype>:
{
 800c328:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c32a:	b085      	sub	sp, #20
 800c32c:	4616      	mov	r6, r2
 800c32e:	461f      	mov	r7, r3
 800c330:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (!stt || !stt->stt_polls_left) {
 800c332:	b10c      	cbz	r4, 800c338 <sensor_mgr_poll_bytype+0x10>
 800c334:	8aa3      	ldrh	r3, [r4, #20]
 800c336:	b9cb      	cbnz	r3, 800c36c <sensor_mgr_poll_bytype+0x44>
 800c338:	4632      	mov	r2, r6
 800c33a:	463b      	mov	r3, r7
 800c33c:	4605      	mov	r5, r0
        sensor_read(sensor, type, NULL, NULL, OS_TIMEOUT_NEVER);
 800c33e:	f04f 31ff 	mov.w	r1, #4294967295
 800c342:	9102      	str	r1, [sp, #8]
 800c344:	2100      	movs	r1, #0
 800c346:	9101      	str	r1, [sp, #4]
 800c348:	9100      	str	r1, [sp, #0]
 800c34a:	f7ff ffb9 	bl	800c2c0 <sensor_read>
        sensor_lock(sensor);
 800c34e:	4628      	mov	r0, r5
 800c350:	f7ff fef8 	bl	800c144 <sensor_lock>
        if (stt) {
 800c354:	b12c      	cbz	r4, 800c362 <sensor_mgr_poll_bytype+0x3a>
            if (!stt->stt_polls_left && stt->stt_poll_n) {
 800c356:	8aa3      	ldrh	r3, [r4, #20]
 800c358:	b91b      	cbnz	r3, 800c362 <sensor_mgr_poll_bytype+0x3a>
 800c35a:	8a63      	ldrh	r3, [r4, #18]
 800c35c:	b10b      	cbz	r3, 800c362 <sensor_mgr_poll_bytype+0x3a>
                stt->stt_polls_left--;
 800c35e:	3b01      	subs	r3, #1
 800c360:	82a3      	strh	r3, [r4, #20]
        sensor_unlock(sensor);
 800c362:	4628      	mov	r0, r5
 800c364:	f7ff fefa 	bl	800c15c <sensor_unlock>
}
 800c368:	b005      	add	sp, #20
 800c36a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        stt->stt_polls_left--;
 800c36c:	3b01      	subs	r3, #1
 800c36e:	82a3      	strh	r3, [r4, #20]
}
 800c370:	e7fa      	b.n	800c368 <sensor_mgr_poll_bytype+0x40>

0800c372 <sensor_poll_per_type_trait>:
{
 800c372:	b570      	push	{r4, r5, r6, lr}
 800c374:	b082      	sub	sp, #8
 800c376:	4605      	mov	r5, r0
 800c378:	460e      	mov	r6, r1
    sensor_lock(sensor);
 800c37a:	f7ff fee3 	bl	800c144 <sensor_lock>
    SLIST_FOREACH(stt, &sensor->s_type_traits_list, stt_next) {
 800c37e:	6fec      	ldr	r4, [r5, #124]	; 0x7c
 800c380:	e007      	b.n	800c392 <sensor_poll_per_type_trait+0x20>
        sensor_mgr_poll_bytype(sensor, stt->stt_sensor_type, stt,
 800c382:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c386:	9601      	str	r6, [sp, #4]
 800c388:	9400      	str	r4, [sp, #0]
 800c38a:	4628      	mov	r0, r5
 800c38c:	f7ff ffcc 	bl	800c328 <sensor_mgr_poll_bytype>
    SLIST_FOREACH(stt, &sensor->s_type_traits_list, stt_next) {
 800c390:	6a24      	ldr	r4, [r4, #32]
 800c392:	2c00      	cmp	r4, #0
 800c394:	d1f5      	bne.n	800c382 <sensor_poll_per_type_trait+0x10>
    sensor_unlock(sensor);
 800c396:	4628      	mov	r0, r5
 800c398:	f7ff fee0 	bl	800c15c <sensor_unlock>
}
 800c39c:	b002      	add	sp, #8
 800c39e:	bd70      	pop	{r4, r5, r6, pc}

0800c3a0 <sensor_mgr_wakeup_event>:
{
 800c3a0:	b570      	push	{r4, r5, r6, lr}
 800c3a2:	b084      	sub	sp, #16
    now = os_time_get();
 800c3a4:	f001 fc12 	bl	800dbcc <os_time_get>
 800c3a8:	4605      	mov	r5, r0
    sensor_mgr_lock();
 800c3aa:	f7ff fe31 	bl	800c010 <sensor_mgr_lock>
 800c3ae:	e012      	b.n	800c3d6 <sensor_mgr_wakeup_event+0x36>
            sensor_unlock(cursor);
 800c3b0:	4620      	mov	r0, r4
 800c3b2:	f7ff fed3 	bl	800c15c <sensor_unlock>
            sensor_mgr_unlock();
 800c3b6:	f7ff fe39 	bl	800c02c <sensor_mgr_unlock>
}
 800c3ba:	b004      	add	sp, #16
 800c3bc:	bd70      	pop	{r4, r5, r6, pc}
            sensor_poll_per_type_trait(cursor, now, next_wakeup);
 800c3be:	4632      	mov	r2, r6
 800c3c0:	4629      	mov	r1, r5
 800c3c2:	4620      	mov	r0, r4
 800c3c4:	f7ff ffd5 	bl	800c372 <sensor_poll_per_type_trait>
        sensor_update_nextrun(cursor, now);
 800c3c8:	4629      	mov	r1, r5
 800c3ca:	4620      	mov	r0, r4
 800c3cc:	f7ff fed5 	bl	800c17a <sensor_update_nextrun>
        sensor_unlock(cursor);
 800c3d0:	4620      	mov	r0, r4
 800c3d2:	f7ff fec3 	bl	800c15c <sensor_unlock>
        cursor = sensor_find_min_nextrun_sensor(now, &next_wakeup);
 800c3d6:	a903      	add	r1, sp, #12
 800c3d8:	4628      	mov	r0, r5
 800c3da:	f7ff fef7 	bl	800c1cc <sensor_find_min_nextrun_sensor>
 800c3de:	4604      	mov	r4, r0
        sensor_lock(cursor);
 800c3e0:	f7ff feb0 	bl	800c144 <sensor_lock>
        if (!cursor->s_poll_rate) {
 800c3e4:	6a23      	ldr	r3, [r4, #32]
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d0e2      	beq.n	800c3b0 <sensor_mgr_wakeup_event+0x10>
        if (next_wakeup > 0) {
 800c3ea:	9e03      	ldr	r6, [sp, #12]
 800c3ec:	b96e      	cbnz	r6, 800c40a <sensor_mgr_wakeup_event+0x6a>
        if (sensor_type_traits_empty(cursor)) {
 800c3ee:	4620      	mov	r0, r4
 800c3f0:	f7ff fd62 	bl	800beb8 <sensor_type_traits_empty>
 800c3f4:	2800      	cmp	r0, #0
 800c3f6:	d0e2      	beq.n	800c3be <sensor_mgr_wakeup_event+0x1e>
            sensor_mgr_poll_bytype(cursor, cursor->s_mask, NULL, now);
 800c3f8:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 800c3fc:	9501      	str	r5, [sp, #4]
 800c3fe:	2100      	movs	r1, #0
 800c400:	9100      	str	r1, [sp, #0]
 800c402:	4620      	mov	r0, r4
 800c404:	f7ff ff90 	bl	800c328 <sensor_mgr_poll_bytype>
 800c408:	e7de      	b.n	800c3c8 <sensor_mgr_wakeup_event+0x28>
    sensor_mgr_unlock();
 800c40a:	f7ff fe0f 	bl	800c02c <sensor_mgr_unlock>
    os_callout_reset(&sensor_mgr.mgr_wakeup_callout, next_wakeup);
 800c40e:	9903      	ldr	r1, [sp, #12]
 800c410:	4801      	ldr	r0, [pc, #4]	; (800c418 <sensor_mgr_wakeup_event+0x78>)
 800c412:	f000 fa89 	bl	800c928 <os_callout_reset>
 800c416:	e7d0      	b.n	800c3ba <sensor_mgr_wakeup_event+0x1a>
 800c418:	2000384c 	.word	0x2000384c

0800c41c <timer_handler>:
/* XXX: determine how we will deal with running un-privileged */
uint32_t os_flags = OS_RUN_PRIV;

void
timer_handler(void)
{
 800c41c:	b508      	push	{r3, lr}
    os_time_advance(1);
 800c41e:	2001      	movs	r0, #1
 800c420:	f001 fbda 	bl	800dbd8 <os_time_advance>
}
 800c424:	bd08      	pop	{r3, pc}
	...

0800c428 <os_arch_ctx_sw>:

void
os_arch_ctx_sw(struct os_task *t)
{
 800c428:	b508      	push	{r3, lr}
    os_sched_ctx_sw_hook(t);
 800c42a:	f001 f953 	bl	800d6d4 <os_sched_ctx_sw_hook>

    /* Set PendSV interrupt pending bit to force context switch */
    SCB->ICSR = SCB_ICSR_PENDSVSET_Msk;
 800c42e:	4b02      	ldr	r3, [pc, #8]	; (800c438 <os_arch_ctx_sw+0x10>)
 800c430:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c434:	605a      	str	r2, [r3, #4]
}
 800c436:	bd08      	pop	{r3, pc}
 800c438:	e000ed00 	.word	0xe000ed00

0800c43c <os_arch_save_sr>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c43c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800c440:	b672      	cpsid	i
    uint32_t isr_ctx;

    isr_ctx = __get_PRIMASK();
    __disable_irq();
    return (isr_ctx & 1);
}
 800c442:	f000 0001 	and.w	r0, r0, #1
 800c446:	4770      	bx	lr

0800c448 <os_arch_restore_sr>:

void
os_arch_restore_sr(os_sr_t isr_ctx)
{
    if (!isr_ctx) {
 800c448:	b900      	cbnz	r0, 800c44c <os_arch_restore_sr+0x4>
  __ASM volatile ("cpsie i" : : : "memory");
 800c44a:	b662      	cpsie	i
        __enable_irq();
    }
}
 800c44c:	4770      	bx	lr

0800c44e <os_arch_in_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c44e:	f3ef 8010 	mrs	r0, PRIMASK
{
    uint32_t isr_ctx;

    isr_ctx = __get_PRIMASK();
    return (isr_ctx & 1);
}
 800c452:	f000 0001 	and.w	r0, r0, #1
 800c456:	4770      	bx	lr

0800c458 <os_arch_task_stack_init>:

os_stack_t *
os_arch_task_stack_init(struct os_task *t, os_stack_t *stack_top, int size)
{
 800c458:	b570      	push	{r4, r5, r6, lr}
 800c45a:	4606      	mov	r6, r0
 800c45c:	460d      	mov	r5, r1
    int i;
    os_stack_t *s;
    struct stack_frame *sf;

    /* Get stack frame pointer */
    s = (os_stack_t *) ((uint8_t *) stack_top - sizeof(*sf));
 800c45e:	f1a1 0444 	sub.w	r4, r1, #68	; 0x44

    /* Zero out R1-R3, R12, LR */
    for (i = 9; i < 14; ++i) {
 800c462:	2309      	movs	r3, #9
 800c464:	e003      	b.n	800c46e <os_arch_task_stack_init+0x16>
        s[i] = 0;
 800c466:	2200      	movs	r2, #0
 800c468:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    for (i = 9; i < 14; ++i) {
 800c46c:	3301      	adds	r3, #1
 800c46e:	2b0d      	cmp	r3, #13
 800c470:	ddf9      	ble.n	800c466 <os_arch_task_stack_init+0xe>
    }

    /* Set registers R4 - R11 on stack. */
    os_arch_init_task_stack(s);
 800c472:	4620      	mov	r0, r4
 800c474:	f001 fc0e 	bl	800dc94 <os_arch_init_task_stack>

    /* Set remaining portions of stack frame */
    sf = (struct stack_frame *) s;
    sf->xpsr = INITIAL_xPSR;
 800c478:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c47c:	f845 3c04 	str.w	r3, [r5, #-4]
    sf->pc = (uint32_t)t->t_func;
 800c480:	6973      	ldr	r3, [r6, #20]
 800c482:	f845 3c08 	str.w	r3, [r5, #-8]
    sf->r0 = (uint32_t)t->t_arg;
 800c486:	69b3      	ldr	r3, [r6, #24]
 800c488:	f845 3c20 	str.w	r3, [r5, #-32]
#if MYNEWT_VAL(HARDFLOAT)
    sf->exc_lr = INITIAL_LR;
 800c48c:	f06f 0302 	mvn.w	r3, #2
 800c490:	f845 3c24 	str.w	r3, [r5, #-36]
#endif

    return (s);
}
 800c494:	4620      	mov	r0, r4
 800c496:	bd70      	pop	{r4, r5, r6, pc}

0800c498 <os_arch_init>:

void
os_arch_init(void)
{
 800c498:	b508      	push	{r3, lr}
    /*
     * Trap on divide-by-zero.
     */
    SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
 800c49a:	4a04      	ldr	r2, [pc, #16]	; (800c4ac <os_arch_init+0x14>)
 800c49c:	6953      	ldr	r3, [r2, #20]
 800c49e:	f043 0310 	orr.w	r3, r3, #16
 800c4a2:	6153      	str	r3, [r2, #20]
    os_init_idle_task();
 800c4a4:	f000 f95a 	bl	800c75c <os_init_idle_task>
}
 800c4a8:	bd08      	pop	{r3, pc}
 800c4aa:	bf00      	nop
 800c4ac:	e000ed00 	.word	0xe000ed00

0800c4b0 <os_arch_os_init>:
    SVC_Call(os_arch_init);
}

os_error_t
os_arch_os_init(void)
{
 800c4b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c4b2:	f3ef 8405 	mrs	r4, IPSR
    os_error_t err;
    int i;

    /* Cannot be called within an ISR */
    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
 800c4b6:	b90c      	cbnz	r4, 800c4bc <os_arch_os_init+0xc>
        err = OS_OK;

        /* Drop priority for all interrupts */
        for (i = 0; i < sizeof(NVIC->IP); i++) {
 800c4b8:	2400      	movs	r4, #0
 800c4ba:	e009      	b.n	800c4d0 <os_arch_os_init+0x20>
    err = OS_ERR_IN_ISR;
 800c4bc:	2007      	movs	r0, #7
 800c4be:	e02e      	b.n	800c51e <os_arch_os_init+0x6e>
            NVIC->IP[i] = -1;
 800c4c0:	f104 4560 	add.w	r5, r4, #3758096384	; 0xe0000000
 800c4c4:	f505 4561 	add.w	r5, r5, #57600	; 0xe100
 800c4c8:	26ff      	movs	r6, #255	; 0xff
 800c4ca:	f885 6300 	strb.w	r6, [r5, #768]	; 0x300
        for (i = 0; i < sizeof(NVIC->IP); i++) {
 800c4ce:	3401      	adds	r4, #1
 800c4d0:	2cef      	cmp	r4, #239	; 0xef
 800c4d2:	d9f5      	bls.n	800c4c0 <os_arch_os_init+0x10>
         * Install default interrupt handler for all interrupts except Reset,
         * which'll print out system state at the time of the interrupt, and
         * few other regs which should help in trying to figure out what went
         * wrong.
         */
        for (i = -NVIC_USER_IRQ_OFFSET + 2;
 800c4d4:	f06f 040d 	mvn.w	r4, #13
 800c4d8:	e007      	b.n	800c4ea <os_arch_os_init+0x3a>
             i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
            NVIC_SetVector(i, (uint32_t)os_default_irq_asm);
 800c4da:	b265      	sxtb	r5, r4
  \param [in]   IRQn      Interrupt number
  \param [in]   vector    Address of interrupt handler function
 */
__STATIC_INLINE void __NVIC_SetVector(IRQn_Type IRQn, uint32_t vector)
{
  uint32_t vectors = (uint32_t )SCB->VTOR;
 800c4dc:	4e12      	ldr	r6, [pc, #72]	; (800c528 <os_arch_os_init+0x78>)
 800c4de:	68b6      	ldr	r6, [r6, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 800c4e0:	3510      	adds	r5, #16
 800c4e2:	4f12      	ldr	r7, [pc, #72]	; (800c52c <os_arch_os_init+0x7c>)
 800c4e4:	f846 7025 	str.w	r7, [r6, r5, lsl #2]
             i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
 800c4e8:	3401      	adds	r4, #1
        for (i = -NVIC_USER_IRQ_OFFSET + 2;
 800c4ea:	2c51      	cmp	r4, #81	; 0x51
 800c4ec:	ddf5      	ble.n	800c4da <os_arch_os_init+0x2a>
  uint32_t vectors = (uint32_t )SCB->VTOR;
 800c4ee:	4c0e      	ldr	r4, [pc, #56]	; (800c528 <os_arch_os_init+0x78>)
 800c4f0:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 800c4f2:	4e0f      	ldr	r6, [pc, #60]	; (800c530 <os_arch_os_init+0x80>)
 800c4f4:	62ee      	str	r6, [r5, #44]	; 0x2c
  uint32_t vectors = (uint32_t )SCB->VTOR;
 800c4f6:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 800c4f8:	4e0e      	ldr	r6, [pc, #56]	; (800c534 <os_arch_os_init+0x84>)
 800c4fa:	63ae      	str	r6, [r5, #56]	; 0x38
  uint32_t vectors = (uint32_t )SCB->VTOR;
 800c4fc:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 800c4fe:	4e0e      	ldr	r6, [pc, #56]	; (800c538 <os_arch_os_init+0x88>)
 800c500:	63ee      	str	r6, [r5, #60]	; 0x3c
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c502:	25f0      	movs	r5, #240	; 0xf0
 800c504:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
 800c508:	2510      	movs	r5, #16
 800c50a:	77e5      	strb	r5, [r4, #31]
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 800c50c:	f3ef 8414 	mrs	r4, CONTROL

        /* Set the SVC interrupt to priority 0 (highest configurable) */
        NVIC_SetPriority(SVCall_IRQn, SVC_PRIO);

        /* Check if privileged or not */
        if ((__get_CONTROL() & 1) == 0) {
 800c510:	f014 0f01 	tst.w	r4, #1
 800c514:	d004      	beq.n	800c520 <os_arch_os_init+0x70>
    SVC_Call(os_arch_init);
 800c516:	f8df c024 	ldr.w	ip, [pc, #36]	; 800c53c <os_arch_os_init+0x8c>
 800c51a:	df00      	svc	0
        err = OS_OK;
 800c51c:	2000      	movs	r0, #0
            svc_os_arch_init();
        }
    }

    return err;
}
 800c51e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            os_arch_init();
 800c520:	f7ff ffba 	bl	800c498 <os_arch_init>
        err = OS_OK;
 800c524:	2000      	movs	r0, #0
 800c526:	e7fa      	b.n	800c51e <os_arch_os_init+0x6e>
 800c528:	e000ed00 	.word	0xe000ed00
 800c52c:	0800dd33 	.word	0x0800dd33
 800c530:	0800dc9b 	.word	0x0800dc9b
 800c534:	0800dce1 	.word	0x0800dce1
 800c538:	0800dd27 	.word	0x0800dd27
 800c53c:	0800c499 	.word	0x0800c499

0800c540 <os_arch_start>:

uint32_t
os_arch_start(void)
{
 800c540:	b510      	push	{r4, lr}
    struct os_task *t;

    /* Get the highest priority ready to run to set the current task */
    t = os_sched_next_task();
 800c542:	f001 f9ad 	bl	800d8a0 <os_sched_next_task>
 800c546:	4604      	mov	r4, r0
    os_sched_set_current_task(t);
 800c548:	f001 f8e2 	bl	800d710 <os_sched_set_current_task>

    /* Adjust PSP so it looks like this task just took an exception */
    __set_PSP((uint32_t)t->t_stackptr + offsetof(struct stack_frame, r0));
 800c54c:	6823      	ldr	r3, [r4, #0]
 800c54e:	3324      	adds	r3, #36	; 0x24
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 800c550:	f383 8809 	msr	PSP, r3

    /* Intitialize and start system clock timer */
    os_tick_init(OS_TICKS_PER_SEC, OS_TICK_PRIO);
 800c554:	210e      	movs	r1, #14
 800c556:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800c55a:	f003 ffbd 	bl	80104d8 <os_tick_init>

    /* Mark the OS as started, right before we run our first task */
    g_os_started = 1;
 800c55e:	4b04      	ldr	r3, [pc, #16]	; (800c570 <os_arch_start+0x30>)
 800c560:	2201      	movs	r2, #1
 800c562:	601a      	str	r2, [r3, #0]

    /* Perform context switch */
    os_arch_ctx_sw(t);
 800c564:	4620      	mov	r0, r4
 800c566:	f7ff ff5f 	bl	800c428 <os_arch_ctx_sw>

    return (uint32_t)(t->t_arg);
}
 800c56a:	69a0      	ldr	r0, [r4, #24]
 800c56c:	bd10      	pop	{r4, pc}
 800c56e:	bf00      	nop
 800c570:	20003904 	.word	0x20003904

0800c574 <os_arch_os_start>:
 *
 * @return os_error_t
 */
os_error_t
os_arch_os_start(void)
{
 800c574:	b510      	push	{r4, lr}
     * privileged or un-privileged mode.
     *
     * We switch to using "empty" part of idle task's stack until
     * the svc_os_arch_start() executes SVC, and we will never return.
     */
    os_set_env(g_idle_task.t_stackptr - 1);
 800c576:	4814      	ldr	r0, [pc, #80]	; (800c5c8 <os_arch_os_start+0x54>)
 800c578:	6800      	ldr	r0, [r0, #0]
 800c57a:	3804      	subs	r0, #4
 800c57c:	f001 fb80 	bl	800dc80 <os_set_env>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c580:	f3ef 8405 	mrs	r4, IPSR

    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
 800c584:	b9d4      	cbnz	r4, 800c5bc <os_arch_os_start+0x48>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 800c586:	f3ef 8414 	mrs	r4, CONTROL
         * The following switch statement is really just a sanity check to
         * insure that the os initialization routine was called prior to the
         * os start routine.
         */
        err = OS_OK;
        switch (__get_CONTROL() & 0x03) {
 800c58a:	f004 0403 	and.w	r4, r4, #3
 800c58e:	2c03      	cmp	r4, #3
 800c590:	d808      	bhi.n	800c5a4 <os_arch_os_start+0x30>
 800c592:	e8df f004 	tbb	[pc, r4]
 800c596:	1515      	.short	0x1515
 800c598:	0c02      	.short	0x0c02
        case 0x02:
            /*
             * We are running in Privileged Thread mode w/SP = PSP but we
             * are supposed to be un-privileged.
             */
            if ((os_flags & 1) == OS_RUN_UNPRIV) {
 800c59a:	4c0c      	ldr	r4, [pc, #48]	; (800c5cc <os_arch_os_start+0x58>)
 800c59c:	6824      	ldr	r4, [r4, #0]
 800c59e:	f014 0f01 	tst.w	r4, #1
 800c5a2:	d10f      	bne.n	800c5c4 <os_arch_os_start+0x50>
    SVC_Call(os_arch_start);
 800c5a4:	f8df c028 	ldr.w	ip, [pc, #40]	; 800c5d0 <os_arch_os_start+0x5c>
 800c5a8:	df00      	svc	0
 800c5aa:	2000      	movs	r0, #0
            svc_os_arch_start();
        }
    }

    return err;
}
 800c5ac:	bd10      	pop	{r4, pc}
            if  ((os_flags & 1) == OS_RUN_PRIV) {
 800c5ae:	4c07      	ldr	r4, [pc, #28]	; (800c5cc <os_arch_os_start+0x58>)
 800c5b0:	6824      	ldr	r4, [r4, #0]
 800c5b2:	f014 0f01 	tst.w	r4, #1
 800c5b6:	d1f5      	bne.n	800c5a4 <os_arch_os_start+0x30>
                err = OS_ERR_PRIV;
 800c5b8:	2008      	movs	r0, #8
 800c5ba:	e7f7      	b.n	800c5ac <os_arch_os_start+0x38>
    err = OS_ERR_IN_ISR;
 800c5bc:	2007      	movs	r0, #7
 800c5be:	e7f5      	b.n	800c5ac <os_arch_os_start+0x38>
            err = OS_ERR_PRIV;
 800c5c0:	2008      	movs	r0, #8
 800c5c2:	e7f3      	b.n	800c5ac <os_arch_os_start+0x38>
                err = OS_ERR_PRIV;
 800c5c4:	2008      	movs	r0, #8
 800c5c6:	e7f1      	b.n	800c5ac <os_arch_os_start+0x38>
 800c5c8:	200038b0 	.word	0x200038b0
 800c5cc:	20000770 	.word	0x20000770
 800c5d0:	0800c541 	.word	0x0800c541

0800c5d4 <__assert_func>:
}
#endif

void
__assert_func(const char *file, int line, const char *func, const char *e)
{
 800c5d4:	b508      	push	{r3, lr}
 800c5d6:	4675      	mov	r5, lr
 800c5d8:	4604      	mov	r4, r0
 800c5da:	460e      	mov	r6, r1
#if MYNEWT_VAL(OS_CRASH_LOG)
    struct log_reboot_info lri;
#endif
    int sr;

    OS_ENTER_CRITICAL(sr);
 800c5dc:	f7ff ff2e 	bl	800c43c <os_arch_save_sr>
    (void)sr;
    console_blocking_mode();
 800c5e0:	f7fd ffd9 	bl	800a596 <console_blocking_mode>
    OS_PRINT_ASSERT(file, line, func, e);
 800c5e4:	b18c      	cbz	r4, 800c60a <__assert_func+0x36>
 800c5e6:	4633      	mov	r3, r6
 800c5e8:	4622      	mov	r2, r4
 800c5ea:	4629      	mov	r1, r5
 800c5ec:	4809      	ldr	r0, [pc, #36]	; (800c614 <__assert_func+0x40>)
 800c5ee:	f7fd fffd 	bl	800a5ec <console_printf>

#if MYNEWT_VAL(OS_ASSERT_CB)
    os_assert_cb();
#endif

    if (hal_debugger_connected()) {
 800c5f2:	f003 ff8f 	bl	8010514 <hal_debugger_connected>
 800c5f6:	b100      	cbz	r0, 800c5fa <__assert_func+0x26>
       /*
        * If debugger is attached, breakpoint before the trap.
        */
#if !MYNEWT_VAL(MCU_DEBUG_IGNORE_BKPT)
       asm("bkpt");
 800c5f8:	be00      	bkpt	0x0000
#endif
    }
    SCB->ICSR = SCB_ICSR_NMIPENDSET_Msk;
 800c5fa:	4b07      	ldr	r3, [pc, #28]	; (800c618 <__assert_func+0x44>)
 800c5fc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c600:	605a      	str	r2, [r3, #4]
    asm("isb");
 800c602:	f3bf 8f6f 	isb	sy
    hal_system_reset();
 800c606:	f003 ff8d 	bl	8010524 <hal_system_reset>
    OS_PRINT_ASSERT(file, line, func, e);
 800c60a:	4629      	mov	r1, r5
 800c60c:	4803      	ldr	r0, [pc, #12]	; (800c61c <__assert_func+0x48>)
 800c60e:	f7fd ffed 	bl	800a5ec <console_printf>
 800c612:	e7ee      	b.n	800c5f2 <__assert_func+0x1e>
 800c614:	080180fc 	.word	0x080180fc
 800c618:	e000ed00 	.word	0xe000ed00
 800c61c:	080180ec 	.word	0x080180ec

0800c620 <os_default_irq>:
}

void
os_default_irq(struct trap_frame *tf)
{
 800c620:	b500      	push	{lr}
 800c622:	b083      	sub	sp, #12
 800c624:	4604      	mov	r4, r0
#endif
#if MYNEWT_VAL(OS_CRASH_RESTORE_REGS)
    uint32_t orig_sp;
#endif

    console_blocking_mode();
 800c626:	f7fd ffb6 	bl	800a596 <console_blocking_mode>
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
      SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk, (uint32_t)tf->ef);
 800c62a:	4d1b      	ldr	r5, [pc, #108]	; (800c698 <os_default_irq+0x78>)
 800c62c:	6869      	ldr	r1, [r5, #4]
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
 800c62e:	6822      	ldr	r2, [r4, #0]
 800c630:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800c634:	4819      	ldr	r0, [pc, #100]	; (800c69c <os_default_irq+0x7c>)
 800c636:	f7fd ffd9 	bl	800a5ec <console_printf>
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
      tf->ef->r0, tf->ef->r1, tf->ef->r2, tf->ef->r3);
 800c63a:	6820      	ldr	r0, [r4, #0]
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
 800c63c:	6883      	ldr	r3, [r0, #8]
 800c63e:	6842      	ldr	r2, [r0, #4]
 800c640:	6801      	ldr	r1, [r0, #0]
 800c642:	68c0      	ldr	r0, [r0, #12]
 800c644:	9000      	str	r0, [sp, #0]
 800c646:	4816      	ldr	r0, [pc, #88]	; (800c6a0 <os_default_irq+0x80>)
 800c648:	f7fd ffd0 	bl	800a5ec <console_printf>
    console_printf(" r4:0x%08lx  r5:0x%08lx  r6:0x%08lx  r7:0x%08lx\n",
 800c64c:	6923      	ldr	r3, [r4, #16]
 800c64e:	9300      	str	r3, [sp, #0]
 800c650:	68e3      	ldr	r3, [r4, #12]
 800c652:	68a2      	ldr	r2, [r4, #8]
 800c654:	6861      	ldr	r1, [r4, #4]
 800c656:	4813      	ldr	r0, [pc, #76]	; (800c6a4 <os_default_irq+0x84>)
 800c658:	f7fd ffc8 	bl	800a5ec <console_printf>
      tf->r4, tf->r5, tf->r6, tf->r7);
    console_printf(" r8:0x%08lx  r9:0x%08lx r10:0x%08lx r11:0x%08lx\n",
 800c65c:	6a23      	ldr	r3, [r4, #32]
 800c65e:	9300      	str	r3, [sp, #0]
 800c660:	69e3      	ldr	r3, [r4, #28]
 800c662:	69a2      	ldr	r2, [r4, #24]
 800c664:	6961      	ldr	r1, [r4, #20]
 800c666:	4810      	ldr	r0, [pc, #64]	; (800c6a8 <os_default_irq+0x88>)
 800c668:	f7fd ffc0 	bl	800a5ec <console_printf>
      tf->r8, tf->r9, tf->r10, tf->r11);
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
      tf->ef->r12, tf->ef->lr, tf->ef->pc, tf->ef->psr);
 800c66c:	6820      	ldr	r0, [r4, #0]
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
 800c66e:	6983      	ldr	r3, [r0, #24]
 800c670:	6942      	ldr	r2, [r0, #20]
 800c672:	6901      	ldr	r1, [r0, #16]
 800c674:	69c0      	ldr	r0, [r0, #28]
 800c676:	9000      	str	r0, [sp, #0]
 800c678:	480c      	ldr	r0, [pc, #48]	; (800c6ac <os_default_irq+0x8c>)
 800c67a:	f7fd ffb7 	bl	800a5ec <console_printf>
    console_printf("ICSR:0x%08lx HFSR:0x%08lx CFSR:0x%08lx\n",
 800c67e:	6869      	ldr	r1, [r5, #4]
 800c680:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800c682:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800c684:	480a      	ldr	r0, [pc, #40]	; (800c6b0 <os_default_irq+0x90>)
 800c686:	f7fd ffb1 	bl	800a5ec <console_printf>
      SCB->ICSR, SCB->HFSR, SCB->CFSR);
    console_printf("BFAR:0x%08lx MMFAR:0x%08lx\n", SCB->BFAR, SCB->MMFAR);
 800c68a:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 800c68c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800c68e:	4809      	ldr	r0, [pc, #36]	; (800c6b4 <os_default_irq+0x94>)
 800c690:	f7fd ffac 	bl	800a5ec <console_printf>
            : "r0"
        );
    }
#endif

    hal_system_reset();
 800c694:	f003 ff46 	bl	8010524 <hal_system_reset>
 800c698:	e000ed00 	.word	0xe000ed00
 800c69c:	08018114 	.word	0x08018114
 800c6a0:	08018148 	.word	0x08018148
 800c6a4:	0801817c 	.word	0x0801817c
 800c6a8:	080181b0 	.word	0x080181b0
 800c6ac:	080181e4 	.word	0x080181e4
 800c6b0:	08018218 	.word	0x08018218
 800c6b4:	08018240 	.word	0x08018240

0800c6b8 <os_idle_task>:
 *
 * @param arg unused
 */
void
os_idle_task(void *arg)
{
 800c6b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_time_t sanity_itvl_ticks;

    sanity_itvl_ticks = (MYNEWT_VAL(SANITY_INTERVAL) * OS_TICKS_PER_SEC) / 1000;
    sanity_last = 0;

    hal_watchdog_tickle();
 800c6ba:	f004 fc21 	bl	8010f00 <hal_watchdog_tickle>
    sanity_last = 0;
 800c6be:	2500      	movs	r5, #0
 800c6c0:	e00b      	b.n	800c6da <os_idle_task+0x22>
    while (1) {
        ++g_os_idle_ctr;

        now = os_time_get();
        if (OS_TIME_TICK_GT(now, sanity_last + sanity_itvl_ticks)) {
            os_sanity_run();
 800c6c2:	f000 ff9f 	bl	800d604 <os_sanity_run>
            /* Tickle the watchdog after successfully running sanity */
            hal_watchdog_tickle();
 800c6c6:	f004 fc1b 	bl	8010f00 <hal_watchdog_tickle>
#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
            os_cputime_timer_stop(&os_wdog_monitor);
            os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
            sanity_last = now;
 800c6ca:	4625      	mov	r5, r4
 800c6cc:	e012      	b.n	800c6f4 <os_idle_task+0x3c>
         * as the idle task does not schedule itself.
         */
        iticks = min(iticks, ((sanity_last + sanity_itvl_ticks) - now));

        if (iticks < MIN_IDLE_TICKS) {
            iticks = 0;
 800c6ce:	2000      	movs	r0, #0
        /* Tell the architecture specific support to put the processor to sleep
         * for 'n' ticks.
         */

        os_trace_idle();
        os_tick_idle(iticks);
 800c6d0:	f003 fef4 	bl	80104bc <os_tick_idle>
        OS_EXIT_CRITICAL(sr);
 800c6d4:	4638      	mov	r0, r7
 800c6d6:	f7ff feb7 	bl	800c448 <os_arch_restore_sr>
        ++g_os_idle_ctr;
 800c6da:	4a15      	ldr	r2, [pc, #84]	; (800c730 <os_idle_task+0x78>)
 800c6dc:	6813      	ldr	r3, [r2, #0]
 800c6de:	3301      	adds	r3, #1
 800c6e0:	6013      	str	r3, [r2, #0]
        now = os_time_get();
 800c6e2:	f001 fa73 	bl	800dbcc <os_time_get>
 800c6e6:	4604      	mov	r4, r0
        if (OS_TIME_TICK_GT(now, sanity_last + sanity_itvl_ticks)) {
 800c6e8:	f505 536a 	add.w	r3, r5, #14976	; 0x3a80
 800c6ec:	3318      	adds	r3, #24
 800c6ee:	1ac3      	subs	r3, r0, r3
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	dce6      	bgt.n	800c6c2 <os_idle_task+0xa>
        OS_ENTER_CRITICAL(sr);
 800c6f4:	f7ff fea2 	bl	800c43c <os_arch_save_sr>
 800c6f8:	4607      	mov	r7, r0
        now = os_time_get();
 800c6fa:	f001 fa67 	bl	800dbcc <os_time_get>
 800c6fe:	4606      	mov	r6, r0
        sticks = os_sched_wakeup_ticks(now);
 800c700:	f001 f8ae 	bl	800d860 <os_sched_wakeup_ticks>
 800c704:	4604      	mov	r4, r0
        cticks = os_callout_wakeup_ticks(now);
 800c706:	4630      	mov	r0, r6
 800c708:	f000 f978 	bl	800c9fc <os_callout_wakeup_ticks>
        iticks = min(sticks, cticks);
 800c70c:	42a0      	cmp	r0, r4
 800c70e:	bf28      	it	cs
 800c710:	4620      	movcs	r0, r4
        iticks = min(iticks, ((sanity_last + sanity_itvl_ticks) - now));
 800c712:	f505 536a 	add.w	r3, r5, #14976	; 0x3a80
 800c716:	3318      	adds	r3, #24
 800c718:	1b9b      	subs	r3, r3, r6
 800c71a:	4298      	cmp	r0, r3
 800c71c:	bf28      	it	cs
 800c71e:	4618      	movcs	r0, r3
        if (iticks < MIN_IDLE_TICKS) {
 800c720:	2863      	cmp	r0, #99	; 0x63
 800c722:	d9d4      	bls.n	800c6ce <os_idle_task+0x16>
        } else if (iticks > MAX_IDLE_TICKS) {
 800c724:	4b03      	ldr	r3, [pc, #12]	; (800c734 <os_idle_task+0x7c>)
 800c726:	4298      	cmp	r0, r3
 800c728:	d9d2      	bls.n	800c6d0 <os_idle_task+0x18>
            iticks = MAX_IDLE_TICKS;
 800c72a:	4802      	ldr	r0, [pc, #8]	; (800c734 <os_idle_task+0x7c>)
 800c72c:	e7d0      	b.n	800c6d0 <os_idle_task+0x18>
 800c72e:	bf00      	nop
 800c730:	20003900 	.word	0x20003900
 800c734:	000927c0 	.word	0x000927c0

0800c738 <os_main>:
    return (g_os_started);
}

static void
os_main(void *arg)
{
 800c738:	b508      	push	{r3, lr}
 800c73a:	4603      	mov	r3, r0
    int (*fn)(int argc, char **argv) = arg;

#if !MYNEWT_VAL(SELFTEST)
    fn(0, NULL);
 800c73c:	2100      	movs	r1, #0
 800c73e:	4608      	mov	r0, r1
 800c740:	4798      	blx	r3
    (void)fn;
    while (1) {
        os_eventq_run(os_eventq_dflt_get());
    }
#endif
    assert(0);
 800c742:	2300      	movs	r3, #0
 800c744:	461a      	mov	r2, r3
 800c746:	4619      	mov	r1, r3
 800c748:	4618      	mov	r0, r3
 800c74a:	f7ff ff43 	bl	800c5d4 <__assert_func>
	...

0800c750 <os_started>:
}
 800c750:	4b01      	ldr	r3, [pc, #4]	; (800c758 <os_started+0x8>)
 800c752:	6818      	ldr	r0, [r3, #0]
 800c754:	4770      	bx	lr
 800c756:	bf00      	nop
 800c758:	20003904 	.word	0x20003904

0800c75c <os_init_idle_task>:
}
#endif

void
os_init_idle_task(void)
{
 800c75c:	b500      	push	{lr}
 800c75e:	b085      	sub	sp, #20
    int rc;

    rc = os_task_init(&g_idle_task, "idle", os_idle_task, NULL,
 800c760:	2340      	movs	r3, #64	; 0x40
 800c762:	9303      	str	r3, [sp, #12]
 800c764:	4b15      	ldr	r3, [pc, #84]	; (800c7bc <os_init_idle_task+0x60>)
 800c766:	9302      	str	r3, [sp, #8]
 800c768:	f04f 33ff 	mov.w	r3, #4294967295
 800c76c:	9301      	str	r3, [sp, #4]
 800c76e:	23ff      	movs	r3, #255	; 0xff
 800c770:	9300      	str	r3, [sp, #0]
 800c772:	2300      	movs	r3, #0
 800c774:	4a12      	ldr	r2, [pc, #72]	; (800c7c0 <os_init_idle_task+0x64>)
 800c776:	4913      	ldr	r1, [pc, #76]	; (800c7c4 <os_init_idle_task+0x68>)
 800c778:	4813      	ldr	r0, [pc, #76]	; (800c7c8 <os_init_idle_task+0x6c>)
 800c77a:	f001 f961 	bl	800da40 <os_task_init>
            OS_IDLE_PRIO, OS_WAIT_FOREVER, g_idle_task_stack,
            OS_STACK_ALIGN(OS_IDLE_STACK_SIZE));
    assert(rc == 0);
 800c77e:	b950      	cbnz	r0, 800c796 <os_init_idle_task+0x3a>

    /* Initialize sanity */
    rc = os_sanity_init();
 800c780:	f000 ff76 	bl	800d670 <os_sanity_init>
    assert(rc == 0);
 800c784:	b968      	cbnz	r0, 800c7a2 <os_init_idle_task+0x46>

    rc = hal_watchdog_init(MYNEWT_VAL(WATCHDOG_INTERVAL));
 800c786:	f247 5030 	movw	r0, #30000	; 0x7530
 800c78a:	f004 fb8f 	bl	8010eac <hal_watchdog_init>
    assert(rc == 0);
 800c78e:	b970      	cbnz	r0, 800c7ae <os_init_idle_task+0x52>

#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
    os_cputime_timer_init(&os_wdog_monitor, os_wdog_monitor_tmo, NULL);
    os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
}
 800c790:	b005      	add	sp, #20
 800c792:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
 800c796:	2300      	movs	r3, #0
 800c798:	461a      	mov	r2, r3
 800c79a:	4619      	mov	r1, r3
 800c79c:	4618      	mov	r0, r3
 800c79e:	f7ff ff19 	bl	800c5d4 <__assert_func>
    assert(rc == 0);
 800c7a2:	2300      	movs	r3, #0
 800c7a4:	461a      	mov	r2, r3
 800c7a6:	4619      	mov	r1, r3
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	f7ff ff13 	bl	800c5d4 <__assert_func>
    assert(rc == 0);
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	461a      	mov	r2, r3
 800c7b2:	4619      	mov	r1, r3
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	f7ff ff0d 	bl	800c5d4 <__assert_func>
 800c7ba:	bf00      	nop
 800c7bc:	20000778 	.word	0x20000778
 800c7c0:	0800c6b9 	.word	0x0800c6b9
 800c7c4:	08018264 	.word	0x08018264
 800c7c8:	200038b0 	.word	0x200038b0

0800c7cc <os_init>:

void
os_init(int (*main_fn)(int argc, char **arg))
{
 800c7cc:	b510      	push	{r4, lr}
 800c7ce:	b084      	sub	sp, #16
 800c7d0:	4604      	mov	r4, r0
#if MYNEWT_VAL(RTT)
    memset(&_SEGGER_RTT, 0, sizeof(_SEGGER_RTT));
    SEGGER_RTT_Init();
#endif

    TAILQ_INIT(&g_callout_list);
 800c7d2:	4b24      	ldr	r3, [pc, #144]	; (800c864 <os_init+0x98>)
 800c7d4:	2200      	movs	r2, #0
 800c7d6:	601a      	str	r2, [r3, #0]
 800c7d8:	605b      	str	r3, [r3, #4]
    STAILQ_INIT(&g_os_task_list);
 800c7da:	4b23      	ldr	r3, [pc, #140]	; (800c868 <os_init+0x9c>)
 800c7dc:	601a      	str	r2, [r3, #0]
 800c7de:	605b      	str	r3, [r3, #4]
    os_eventq_init(os_eventq_dflt_get());
 800c7e0:	f000 faba 	bl	800cd58 <os_eventq_dflt_get>
 800c7e4:	f000 fa0e 	bl	800cc04 <os_eventq_init>

    /* Initialize device list. */
    os_dev_reset();
 800c7e8:	f000 fa04 	bl	800cbf4 <os_dev_reset>

    err = os_arch_os_init();
 800c7ec:	f7ff fe60 	bl	800c4b0 <os_arch_os_init>
    assert(err == OS_OK);
 800c7f0:	bb00      	cbnz	r0, 800c834 <os_init+0x68>

    if (main_fn) {
 800c7f2:	b18c      	cbz	r4, 800c818 <os_init+0x4c>
        err = os_task_init(&g_os_main_task, "main", os_main, main_fn,
 800c7f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c7f8:	9303      	str	r3, [sp, #12]
 800c7fa:	4b1c      	ldr	r3, [pc, #112]	; (800c86c <os_init+0xa0>)
 800c7fc:	9302      	str	r3, [sp, #8]
 800c7fe:	f04f 33ff 	mov.w	r3, #4294967295
 800c802:	9301      	str	r3, [sp, #4]
 800c804:	237f      	movs	r3, #127	; 0x7f
 800c806:	9300      	str	r3, [sp, #0]
 800c808:	4623      	mov	r3, r4
 800c80a:	4a19      	ldr	r2, [pc, #100]	; (800c870 <os_init+0xa4>)
 800c80c:	4919      	ldr	r1, [pc, #100]	; (800c874 <os_init+0xa8>)
 800c80e:	481a      	ldr	r0, [pc, #104]	; (800c878 <os_init+0xac>)
 800c810:	f001 f916 	bl	800da40 <os_task_init>
 800c814:	b2c0      	uxtb	r0, r0
                   OS_MAIN_TASK_PRIO,
                   (OS_MAIN_TASK_TIMER_TICKS == 0) ? OS_WAIT_FOREVER : OS_MAIN_TASK_TIMER_TICKS,
                   g_os_main_stack, OS_STACK_ALIGN(OS_MAIN_STACK_SIZE));
        assert(err == 0);
 800c816:	b998      	cbnz	r0, 800c840 <os_init+0x74>
    }

    /* Call bsp related OS initializations */
    hal_bsp_init();
 800c818:	f003 fbb2 	bl	800ff80 <hal_bsp_init>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_PRIMARY);
 800c81c:	2001      	movs	r0, #1
 800c81e:	f000 f985 	bl	800cb2c <os_dev_initialize_all>
 800c822:	b2c0      	uxtb	r0, r0
    assert(err == OS_OK);
 800c824:	b990      	cbnz	r0, 800c84c <os_init+0x80>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_SECONDARY);
 800c826:	2002      	movs	r0, #2
 800c828:	f000 f980 	bl	800cb2c <os_dev_initialize_all>
 800c82c:	b2c0      	uxtb	r0, r0
    assert(err == OS_OK);
 800c82e:	b998      	cbnz	r0, 800c858 <os_init+0x8c>
}
 800c830:	b004      	add	sp, #16
 800c832:	bd10      	pop	{r4, pc}
    assert(err == OS_OK);
 800c834:	2300      	movs	r3, #0
 800c836:	461a      	mov	r2, r3
 800c838:	4619      	mov	r1, r3
 800c83a:	4618      	mov	r0, r3
 800c83c:	f7ff feca 	bl	800c5d4 <__assert_func>
        assert(err == 0);
 800c840:	2300      	movs	r3, #0
 800c842:	461a      	mov	r2, r3
 800c844:	4619      	mov	r1, r3
 800c846:	4618      	mov	r0, r3
 800c848:	f7ff fec4 	bl	800c5d4 <__assert_func>
    assert(err == OS_OK);
 800c84c:	2300      	movs	r3, #0
 800c84e:	461a      	mov	r2, r3
 800c850:	4619      	mov	r1, r3
 800c852:	4618      	mov	r0, r3
 800c854:	f7ff febe 	bl	800c5d4 <__assert_func>
    assert(err == OS_OK);
 800c858:	2300      	movs	r3, #0
 800c85a:	461a      	mov	r2, r3
 800c85c:	4619      	mov	r1, r3
 800c85e:	4618      	mov	r0, r3
 800c860:	f7ff feb8 	bl	800c5d4 <__assert_func>
 800c864:	20003958 	.word	0x20003958
 800c868:	2000397c 	.word	0x2000397c
 800c86c:	20000878 	.word	0x20000878
 800c870:	0800c739 	.word	0x0800c739
 800c874:	0801825c 	.word	0x0801825c
 800c878:	20003908 	.word	0x20003908

0800c87c <os_start>:

void
os_start(void)
{
 800c87c:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_SCHEDULING)
    os_error_t err;

    /* Enable the watchdog prior to starting the OS */
    hal_watchdog_enable();
 800c87e:	f004 fb31 	bl	8010ee4 <hal_watchdog_enable>

    err = os_arch_os_start();
 800c882:	f7ff fe77 	bl	800c574 <os_arch_os_start>
    assert(err == OS_OK);
 800c886:	b900      	cbnz	r0, 800c88a <os_start+0xe>
#else
    assert(0);
#endif
}
 800c888:	bd08      	pop	{r3, pc}
    assert(err == OS_OK);
 800c88a:	2300      	movs	r3, #0
 800c88c:	461a      	mov	r2, r3
 800c88e:	4619      	mov	r1, r3
 800c890:	4618      	mov	r0, r3
 800c892:	f7ff fe9f 	bl	800c5d4 <__assert_func>
	...

0800c898 <os_pkg_init>:
    hal_system_reset();
}

void
os_pkg_init(void)
{
 800c898:	b508      	push	{r3, lr}
    os_error_t err;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
 800c89a:	4b0c      	ldr	r3, [pc, #48]	; (800c8cc <os_pkg_init+0x34>)
 800c89c:	781b      	ldrb	r3, [r3, #0]
 800c89e:	b14b      	cbz	r3, 800c8b4 <os_pkg_init+0x1c>

    err = os_dev_initialize_all(OS_DEV_INIT_KERNEL);
 800c8a0:	2003      	movs	r0, #3
 800c8a2:	f000 f943 	bl	800cb2c <os_dev_initialize_all>
 800c8a6:	b2c0      	uxtb	r0, r0
    assert(err == OS_OK);
 800c8a8:	b948      	cbnz	r0, 800c8be <os_pkg_init+0x26>

    os_mempool_module_init();
 800c8aa:	f000 fcf9 	bl	800d2a0 <os_mempool_module_init>
    os_msys_init();
 800c8ae:	f000 fd81 	bl	800d3b4 <os_msys_init>
}
 800c8b2:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
 800c8b4:	461a      	mov	r2, r3
 800c8b6:	4619      	mov	r1, r3
 800c8b8:	4618      	mov	r0, r3
 800c8ba:	f7ff fe8b 	bl	800c5d4 <__assert_func>
    assert(err == OS_OK);
 800c8be:	2300      	movs	r3, #0
 800c8c0:	461a      	mov	r2, r3
 800c8c2:	4619      	mov	r1, r3
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	f7ff fe85 	bl	800c5d4 <__assert_func>
 800c8ca:	bf00      	nop
 800c8cc:	20003838 	.word	0x20003838

0800c8d0 <os_callout_init>:

struct os_callout_list g_callout_list;

void os_callout_init(struct os_callout *c, struct os_eventq *evq,
                     os_event_fn *ev_cb, void *ev_arg)
{
 800c8d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8d2:	4604      	mov	r4, r0
 800c8d4:	460d      	mov	r5, r1
 800c8d6:	4617      	mov	r7, r2
 800c8d8:	461e      	mov	r6, r3
    os_trace_api_u32x2(OS_TRACE_ID_CALLOUT_INIT, (uint32_t)c, (uint32_t)evq);

    memset(c, 0, sizeof(*c));
 800c8da:	2220      	movs	r2, #32
 800c8dc:	2100      	movs	r1, #0
 800c8de:	f001 fb4a 	bl	800df76 <memset>
    c->c_ev.ev_cb = ev_cb;
 800c8e2:	6067      	str	r7, [r4, #4]
    c->c_ev.ev_arg = ev_arg;
 800c8e4:	60a6      	str	r6, [r4, #8]
    c->c_evq = evq;
 800c8e6:	6125      	str	r5, [r4, #16]

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_INIT);
}
 800c8e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c8ec <os_callout_stop>:

void
os_callout_stop(struct os_callout *c)
{
 800c8ec:	b538      	push	{r3, r4, r5, lr}
 800c8ee:	4604      	mov	r4, r0
    os_sr_t sr;

    os_trace_api_u32(OS_TRACE_ID_CALLOUT_STOP, (uint32_t)c);

    OS_ENTER_CRITICAL(sr);
 800c8f0:	f7ff fda4 	bl	800c43c <os_arch_save_sr>
 800c8f4:	4605      	mov	r5, r0
 * @return 1 if queued, 0 if not queued.
 */
static inline int
os_callout_queued(struct os_callout *c)
{
    return c->c_next.tqe_prev != NULL;
 800c8f6:	69e3      	ldr	r3, [r4, #28]

    if (os_callout_queued(c)) {
 800c8f8:	b13b      	cbz	r3, 800c90a <os_callout_stop+0x1e>
        TAILQ_REMOVE(&g_callout_list, c, c_next);
 800c8fa:	69a2      	ldr	r2, [r4, #24]
 800c8fc:	b172      	cbz	r2, 800c91c <os_callout_stop+0x30>
 800c8fe:	61d3      	str	r3, [r2, #28]
 800c900:	69e3      	ldr	r3, [r4, #28]
 800c902:	69a2      	ldr	r2, [r4, #24]
 800c904:	601a      	str	r2, [r3, #0]
        c->c_next.tqe_prev = NULL;
 800c906:	2300      	movs	r3, #0
 800c908:	61e3      	str	r3, [r4, #28]
    }

    if (c->c_evq) {
 800c90a:	6920      	ldr	r0, [r4, #16]
 800c90c:	b110      	cbz	r0, 800c914 <os_callout_stop+0x28>
        os_eventq_remove(c->c_evq, &c->c_ev);
 800c90e:	4621      	mov	r1, r4
 800c910:	f000 fa02 	bl	800cd18 <os_eventq_remove>
    }

    OS_EXIT_CRITICAL(sr);
 800c914:	4628      	mov	r0, r5
 800c916:	f7ff fd97 	bl	800c448 <os_arch_restore_sr>

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_STOP);
}
 800c91a:	bd38      	pop	{r3, r4, r5, pc}
        TAILQ_REMOVE(&g_callout_list, c, c_next);
 800c91c:	4a01      	ldr	r2, [pc, #4]	; (800c924 <os_callout_stop+0x38>)
 800c91e:	6053      	str	r3, [r2, #4]
 800c920:	e7ee      	b.n	800c900 <os_callout_stop+0x14>
 800c922:	bf00      	nop
 800c924:	20003958 	.word	0x20003958

0800c928 <os_callout_reset>:

int
os_callout_reset(struct os_callout *c, os_time_t ticks)
{
 800c928:	b570      	push	{r4, r5, r6, lr}
    struct os_callout *entry;
    os_sr_t sr;
    int ret;

    /* Ensure this callout has been initialized. */
    assert(c->c_evq != NULL);
 800c92a:	6903      	ldr	r3, [r0, #16]
 800c92c:	b1c3      	cbz	r3, 800c960 <os_callout_reset+0x38>
 800c92e:	4605      	mov	r5, r0
 800c930:	460c      	mov	r4, r1

    os_trace_api_u32x2(OS_TRACE_ID_CALLOUT_RESET, (uint32_t)c, (uint32_t)ticks);

    if (ticks > INT32_MAX) {
 800c932:	2900      	cmp	r1, #0
 800c934:	db2f      	blt.n	800c996 <os_callout_reset+0x6e>
        ret = OS_EINVAL;
        goto err;
    }

    OS_ENTER_CRITICAL(sr);
 800c936:	f7ff fd81 	bl	800c43c <os_arch_save_sr>
 800c93a:	4606      	mov	r6, r0

    os_callout_stop(c);
 800c93c:	4628      	mov	r0, r5
 800c93e:	f7ff ffd5 	bl	800c8ec <os_callout_stop>

    if (ticks == 0) {
 800c942:	b904      	cbnz	r4, 800c946 <os_callout_reset+0x1e>
        ticks = 1;
 800c944:	2401      	movs	r4, #1
    }

    c->c_ticks = os_time_get() + ticks;
 800c946:	f001 f941 	bl	800dbcc <os_time_get>
 800c94a:	4420      	add	r0, r4
 800c94c:	6168      	str	r0, [r5, #20]

    entry = NULL;
    TAILQ_FOREACH(entry, &g_callout_list, c_next) {
 800c94e:	4b13      	ldr	r3, [pc, #76]	; (800c99c <os_callout_reset+0x74>)
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	b153      	cbz	r3, 800c96a <os_callout_reset+0x42>
        if (OS_TIME_TICK_LT(c->c_ticks, entry->c_ticks)) {
 800c954:	695a      	ldr	r2, [r3, #20]
 800c956:	1a82      	subs	r2, r0, r2
 800c958:	2a00      	cmp	r2, #0
 800c95a:	db06      	blt.n	800c96a <os_callout_reset+0x42>
    TAILQ_FOREACH(entry, &g_callout_list, c_next) {
 800c95c:	699b      	ldr	r3, [r3, #24]
 800c95e:	e7f8      	b.n	800c952 <os_callout_reset+0x2a>
    assert(c->c_evq != NULL);
 800c960:	461a      	mov	r2, r3
 800c962:	4619      	mov	r1, r3
 800c964:	4618      	mov	r0, r3
 800c966:	f7ff fe35 	bl	800c5d4 <__assert_func>
            break;
        }
    }

    if (entry) {
 800c96a:	b15b      	cbz	r3, 800c984 <os_callout_reset+0x5c>
        TAILQ_INSERT_BEFORE(entry, c, c_next);
 800c96c:	69da      	ldr	r2, [r3, #28]
 800c96e:	61ea      	str	r2, [r5, #28]
 800c970:	61ab      	str	r3, [r5, #24]
 800c972:	69da      	ldr	r2, [r3, #28]
 800c974:	6015      	str	r5, [r2, #0]
 800c976:	3518      	adds	r5, #24
 800c978:	61dd      	str	r5, [r3, #28]
    } else {
        TAILQ_INSERT_TAIL(&g_callout_list, c, c_next);
    }

    OS_EXIT_CRITICAL(sr);
 800c97a:	4630      	mov	r0, r6
 800c97c:	f7ff fd64 	bl	800c448 <os_arch_restore_sr>

    ret = OS_OK;
 800c980:	2000      	movs	r0, #0

err:
    os_trace_api_ret_u32(OS_TRACE_ID_CALLOUT_RESET, (uint32_t)ret);
    return ret;
}
 800c982:	bd70      	pop	{r4, r5, r6, pc}
        TAILQ_INSERT_TAIL(&g_callout_list, c, c_next);
 800c984:	2300      	movs	r3, #0
 800c986:	61ab      	str	r3, [r5, #24]
 800c988:	4b04      	ldr	r3, [pc, #16]	; (800c99c <os_callout_reset+0x74>)
 800c98a:	685a      	ldr	r2, [r3, #4]
 800c98c:	61ea      	str	r2, [r5, #28]
 800c98e:	6015      	str	r5, [r2, #0]
 800c990:	3518      	adds	r5, #24
 800c992:	605d      	str	r5, [r3, #4]
 800c994:	e7f1      	b.n	800c97a <os_callout_reset+0x52>
        ret = OS_EINVAL;
 800c996:	2002      	movs	r0, #2
    return ret;
 800c998:	e7f3      	b.n	800c982 <os_callout_reset+0x5a>
 800c99a:	bf00      	nop
 800c99c:	20003958 	.word	0x20003958

0800c9a0 <os_callout_tick>:
 * to run, it posts an event for each callout that's ready to run,
 * to the event queue provided to os_callout_init().
 */
void
os_callout_tick(void)
{
 800c9a0:	b538      	push	{r3, r4, r5, lr}
    struct os_callout *c;
    uint32_t now;

    os_trace_api_void(OS_TRACE_ID_CALLOUT_TICK);

    now = os_time_get();
 800c9a2:	f001 f913 	bl	800dbcc <os_time_get>
 800c9a6:	4605      	mov	r5, r0
 800c9a8:	e00f      	b.n	800c9ca <os_callout_tick+0x2a>
    while (1) {
        OS_ENTER_CRITICAL(sr);
        c = TAILQ_FIRST(&g_callout_list);
        if (c) {
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
                TAILQ_REMOVE(&g_callout_list, c, c_next);
 800c9aa:	69e2      	ldr	r2, [r4, #28]
 800c9ac:	4b12      	ldr	r3, [pc, #72]	; (800c9f8 <os_callout_tick+0x58>)
 800c9ae:	605a      	str	r2, [r3, #4]
 800c9b0:	69e3      	ldr	r3, [r4, #28]
 800c9b2:	69a2      	ldr	r2, [r4, #24]
 800c9b4:	601a      	str	r2, [r3, #0]
                c->c_next.tqe_prev = NULL;
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	61e3      	str	r3, [r4, #28]
            } else {
                c = NULL;
            }
        }
        OS_EXIT_CRITICAL(sr);
 800c9ba:	f7ff fd45 	bl	800c448 <os_arch_restore_sr>

        if (c) {
 800c9be:	b1d4      	cbz	r4, 800c9f6 <os_callout_tick+0x56>
            if (c->c_evq) {
 800c9c0:	6920      	ldr	r0, [r4, #16]
 800c9c2:	b9a0      	cbnz	r0, 800c9ee <os_callout_tick+0x4e>
                os_eventq_put(c->c_evq, &c->c_ev);
            } else {
                c->c_ev.ev_cb(&c->c_ev);
 800c9c4:	6863      	ldr	r3, [r4, #4]
 800c9c6:	4620      	mov	r0, r4
 800c9c8:	4798      	blx	r3
        OS_ENTER_CRITICAL(sr);
 800c9ca:	f7ff fd37 	bl	800c43c <os_arch_save_sr>
        c = TAILQ_FIRST(&g_callout_list);
 800c9ce:	4b0a      	ldr	r3, [pc, #40]	; (800c9f8 <os_callout_tick+0x58>)
 800c9d0:	681c      	ldr	r4, [r3, #0]
        if (c) {
 800c9d2:	2c00      	cmp	r4, #0
 800c9d4:	d0f1      	beq.n	800c9ba <os_callout_tick+0x1a>
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
 800c9d6:	6963      	ldr	r3, [r4, #20]
 800c9d8:	1aeb      	subs	r3, r5, r3
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	db05      	blt.n	800c9ea <os_callout_tick+0x4a>
                TAILQ_REMOVE(&g_callout_list, c, c_next);
 800c9de:	69a3      	ldr	r3, [r4, #24]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d0e2      	beq.n	800c9aa <os_callout_tick+0xa>
 800c9e4:	69e2      	ldr	r2, [r4, #28]
 800c9e6:	61da      	str	r2, [r3, #28]
 800c9e8:	e7e2      	b.n	800c9b0 <os_callout_tick+0x10>
                c = NULL;
 800c9ea:	2400      	movs	r4, #0
 800c9ec:	e7e5      	b.n	800c9ba <os_callout_tick+0x1a>
                os_eventq_put(c->c_evq, &c->c_ev);
 800c9ee:	4621      	mov	r1, r4
 800c9f0:	f000 f915 	bl	800cc1e <os_eventq_put>
 800c9f4:	e7e9      	b.n	800c9ca <os_callout_tick+0x2a>
            break;
        }
    }

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_TICK);
}
 800c9f6:	bd38      	pop	{r3, r4, r5, pc}
 800c9f8:	20003958 	.word	0x20003958

0800c9fc <os_callout_wakeup_ticks>:
 *
 * @return Number of ticks to first pending callout
 */
os_time_t
os_callout_wakeup_ticks(os_time_t now)
{
 800c9fc:	b510      	push	{r4, lr}
 800c9fe:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_callout *c;

    OS_ASSERT_CRITICAL();
 800ca00:	f7ff fd25 	bl	800c44e <os_arch_in_critical>
 800ca04:	b130      	cbz	r0, 800ca14 <os_callout_wakeup_ticks+0x18>

    c = TAILQ_FIRST(&g_callout_list);
 800ca06:	4b09      	ldr	r3, [pc, #36]	; (800ca2c <os_callout_wakeup_ticks+0x30>)
 800ca08:	681b      	ldr	r3, [r3, #0]
    if (c != NULL) {
 800ca0a:	b15b      	cbz	r3, 800ca24 <os_callout_wakeup_ticks+0x28>
        if (OS_TIME_TICK_GEQ(c->c_ticks, now)) {
 800ca0c:	6958      	ldr	r0, [r3, #20]
 800ca0e:	1b00      	subs	r0, r0, r4
 800ca10:	d406      	bmi.n	800ca20 <os_callout_wakeup_ticks+0x24>
    } else {
        rt = OS_TIMEOUT_NEVER;
    }

    return (rt);
}
 800ca12:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
 800ca14:	2300      	movs	r3, #0
 800ca16:	461a      	mov	r2, r3
 800ca18:	4619      	mov	r1, r3
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	f7ff fdda 	bl	800c5d4 <__assert_func>
            rt = 0;     /* callout time is in the past */
 800ca20:	2000      	movs	r0, #0
 800ca22:	e7f6      	b.n	800ca12 <os_callout_wakeup_ticks+0x16>
        rt = OS_TIMEOUT_NEVER;
 800ca24:	f04f 30ff 	mov.w	r0, #4294967295
    return (rt);
 800ca28:	e7f3      	b.n	800ca12 <os_callout_wakeup_ticks+0x16>
 800ca2a:	bf00      	nop
 800ca2c:	20003958 	.word	0x20003958

0800ca30 <os_cputime_init>:
struct os_cputime_data g_os_cputime;
#endif

int
os_cputime_init(uint32_t clock_freq)
{
 800ca30:	b508      	push	{r3, lr}

    /* Set the ticks per microsecond. */
#if defined(OS_CPUTIME_FREQ_HIGH)
    g_os_cputime.ticks_per_usec = clock_freq / 1000000U;
#endif
    rc = hal_timer_config(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM), clock_freq);
 800ca32:	4601      	mov	r1, r0
 800ca34:	2000      	movs	r0, #0
 800ca36:	f003 ff6d 	bl	8010914 <hal_timer_config>
    return rc;
}
 800ca3a:	bd08      	pop	{r3, pc}

0800ca3c <os_cputime_get32>:
    hal_timer_stop(timer);
}

uint32_t
os_cputime_get32(void)
{
 800ca3c:	b508      	push	{r3, lr}
    uint32_t cpu_time;

    cpu_time = hal_timer_read(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM));
 800ca3e:	2000      	movs	r0, #0
 800ca40:	f003 ffca 	bl	80109d8 <hal_timer_read>
    return cpu_time;
}
 800ca44:	bd08      	pop	{r3, pc}
	...

0800ca48 <os_dev_add>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_add(struct os_dev *dev)
{
 800ca48:	b430      	push	{r4, r5}
    struct os_dev *cur_dev;
    struct os_dev *prev_dev;

    /* If no devices present, insert into head */
    if (STAILQ_FIRST(&g_os_dev_list) == NULL) {
 800ca4a:	4b15      	ldr	r3, [pc, #84]	; (800caa0 <os_dev_add+0x58>)
 800ca4c:	681d      	ldr	r5, [r3, #0]
 800ca4e:	b115      	cbz	r5, 800ca56 <os_dev_add+0xe>
    /* Add devices to the list, sorted first by stage, then by
     * priority.  Keep sorted in this order for initialization
     * stage.
     */
    prev_dev = NULL;
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
 800ca50:	462b      	mov	r3, r5
    prev_dev = NULL;
 800ca52:	2400      	movs	r4, #0
 800ca54:	e008      	b.n	800ca68 <os_dev_add+0x20>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
 800ca56:	4603      	mov	r3, r0
 800ca58:	f843 5f20 	str.w	r5, [r3, #32]!
 800ca5c:	4a10      	ldr	r2, [pc, #64]	; (800caa0 <os_dev_add+0x58>)
 800ca5e:	6053      	str	r3, [r2, #4]
 800ca60:	6010      	str	r0, [r2, #0]
        return (0);
 800ca62:	e010      	b.n	800ca86 <os_dev_add+0x3e>
        if (dev->od_stage < cur_dev->od_stage ||
            ((dev->od_stage == cur_dev->od_stage) &&
             (dev->od_priority < cur_dev->od_priority))) {
            break;
        }
        prev_dev = cur_dev;
 800ca64:	461c      	mov	r4, r3
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
 800ca66:	6a1b      	ldr	r3, [r3, #32]
 800ca68:	b143      	cbz	r3, 800ca7c <os_dev_add+0x34>
        if (dev->od_stage < cur_dev->od_stage ||
 800ca6a:	7e01      	ldrb	r1, [r0, #24]
 800ca6c:	7e1a      	ldrb	r2, [r3, #24]
 800ca6e:	4291      	cmp	r1, r2
 800ca70:	d304      	bcc.n	800ca7c <os_dev_add+0x34>
 800ca72:	d1f7      	bne.n	800ca64 <os_dev_add+0x1c>
             (dev->od_priority < cur_dev->od_priority))) {
 800ca74:	7e41      	ldrb	r1, [r0, #25]
 800ca76:	7e5a      	ldrb	r2, [r3, #25]
            ((dev->od_stage == cur_dev->od_stage) &&
 800ca78:	4291      	cmp	r1, r2
 800ca7a:	d2f3      	bcs.n	800ca64 <os_dev_add+0x1c>
    }

    if (prev_dev) {
 800ca7c:	b15c      	cbz	r4, 800ca96 <os_dev_add+0x4e>
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
 800ca7e:	6a23      	ldr	r3, [r4, #32]
 800ca80:	6203      	str	r3, [r0, #32]
 800ca82:	b11b      	cbz	r3, 800ca8c <os_dev_add+0x44>
 800ca84:	6220      	str	r0, [r4, #32]
    } else {
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
    }

    return (0);
}
 800ca86:	2000      	movs	r0, #0
 800ca88:	bc30      	pop	{r4, r5}
 800ca8a:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
 800ca8c:	f100 0320 	add.w	r3, r0, #32
 800ca90:	4a03      	ldr	r2, [pc, #12]	; (800caa0 <os_dev_add+0x58>)
 800ca92:	6053      	str	r3, [r2, #4]
 800ca94:	e7f6      	b.n	800ca84 <os_dev_add+0x3c>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
 800ca96:	6205      	str	r5, [r0, #32]
 800ca98:	4b01      	ldr	r3, [pc, #4]	; (800caa0 <os_dev_add+0x58>)
 800ca9a:	6018      	str	r0, [r3, #0]
 800ca9c:	e7f3      	b.n	800ca86 <os_dev_add+0x3e>
 800ca9e:	bf00      	nop
 800caa0:	20001878 	.word	0x20001878

0800caa4 <os_dev_initialize>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_initialize(struct os_dev *dev)
{
 800caa4:	b510      	push	{r4, lr}
 800caa6:	4604      	mov	r4, r0
    int rc;

    rc = dev->od_init(dev, dev->od_init_arg);
 800caa8:	6903      	ldr	r3, [r0, #16]
 800caaa:	6941      	ldr	r1, [r0, #20]
 800caac:	4798      	blx	r3
    if (rc != 0) {
 800caae:	4603      	mov	r3, r0
 800cab0:	b128      	cbz	r0, 800cabe <os_dev_initialize+0x1a>
        if (dev->od_flags & OS_DEV_F_INIT_CRITICAL) {
 800cab2:	7ee2      	ldrb	r2, [r4, #27]
 800cab4:	f012 0f08 	tst.w	r2, #8
 800cab8:	d105      	bne.n	800cac6 <os_dev_initialize+0x22>
            goto err;
        }
    } else {
        dev->od_flags |= OS_DEV_F_STATUS_READY;
    }
    return 0;
 800caba:	2300      	movs	r3, #0
 800cabc:	e003      	b.n	800cac6 <os_dev_initialize+0x22>
        dev->od_flags |= OS_DEV_F_STATUS_READY;
 800cabe:	7ee2      	ldrb	r2, [r4, #27]
 800cac0:	f042 0201 	orr.w	r2, r2, #1
 800cac4:	76e2      	strb	r2, [r4, #27]
err:
    return rc;
}
 800cac6:	4618      	mov	r0, r3
 800cac8:	bd10      	pop	{r4, pc}

0800caca <os_dev_init>:
    dev->od_name = name;
 800caca:	61c1      	str	r1, [r0, #28]
    dev->od_stage = stage;
 800cacc:	7602      	strb	r2, [r0, #24]
    dev->od_priority = priority;
 800cace:	7643      	strb	r3, [r0, #25]
    dev->od_flags = 0;
 800cad0:	2300      	movs	r3, #0
 800cad2:	76c3      	strb	r3, [r0, #27]
    dev->od_open_ref = 0;
 800cad4:	7683      	strb	r3, [r0, #26]
    dev->od_init = od_init;
 800cad6:	9a00      	ldr	r2, [sp, #0]
 800cad8:	6102      	str	r2, [r0, #16]
    dev->od_init_arg = arg;
 800cada:	9a01      	ldr	r2, [sp, #4]
 800cadc:	6142      	str	r2, [r0, #20]
    memset(&dev->od_handlers, 0, sizeof(dev->od_handlers));
 800cade:	6003      	str	r3, [r0, #0]
 800cae0:	6043      	str	r3, [r0, #4]
 800cae2:	6083      	str	r3, [r0, #8]
 800cae4:	60c3      	str	r3, [r0, #12]
}
 800cae6:	4618      	mov	r0, r3
 800cae8:	4770      	bx	lr
	...

0800caec <os_dev_create>:

int
os_dev_create(struct os_dev *dev, const char *name, uint8_t stage,
        uint8_t priority, os_dev_init_func_t od_init, void *arg)
{
 800caec:	b530      	push	{r4, r5, lr}
 800caee:	b083      	sub	sp, #12
 800caf0:	4605      	mov	r5, r0
    int rc;

    rc = os_dev_init(dev, name, stage, priority, od_init, arg);
 800caf2:	9c07      	ldr	r4, [sp, #28]
 800caf4:	9401      	str	r4, [sp, #4]
 800caf6:	9c06      	ldr	r4, [sp, #24]
 800caf8:	9400      	str	r4, [sp, #0]
 800cafa:	f7ff ffe6 	bl	800caca <os_dev_init>
    if (rc != 0) {
 800cafe:	4603      	mov	r3, r0
 800cb00:	b110      	cbz	r0, 800cb08 <os_dev_create+0x1c>
    if (g_os_started) {
        rc = os_dev_initialize(dev);
    }
err:
    return (rc);
}
 800cb02:	4618      	mov	r0, r3
 800cb04:	b003      	add	sp, #12
 800cb06:	bd30      	pop	{r4, r5, pc}
    rc = os_dev_add(dev);
 800cb08:	4628      	mov	r0, r5
 800cb0a:	f7ff ff9d 	bl	800ca48 <os_dev_add>
    if (rc != 0) {
 800cb0e:	4603      	mov	r3, r0
 800cb10:	2800      	cmp	r0, #0
 800cb12:	d1f6      	bne.n	800cb02 <os_dev_create+0x16>
    if (g_os_started) {
 800cb14:	4a04      	ldr	r2, [pc, #16]	; (800cb28 <os_dev_create+0x3c>)
 800cb16:	6812      	ldr	r2, [r2, #0]
 800cb18:	2a00      	cmp	r2, #0
 800cb1a:	d0f2      	beq.n	800cb02 <os_dev_create+0x16>
        rc = os_dev_initialize(dev);
 800cb1c:	4628      	mov	r0, r5
 800cb1e:	f7ff ffc1 	bl	800caa4 <os_dev_initialize>
 800cb22:	4603      	mov	r3, r0
    return (rc);
 800cb24:	e7ed      	b.n	800cb02 <os_dev_create+0x16>
 800cb26:	bf00      	nop
 800cb28:	20003904 	.word	0x20003904

0800cb2c <os_dev_initialize_all>:

int
os_dev_initialize_all(uint8_t stage)
{
 800cb2c:	b538      	push	{r3, r4, r5, lr}
 800cb2e:	4605      	mov	r5, r0
    struct os_dev *dev;
    int rc = 0;

    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
 800cb30:	4b08      	ldr	r3, [pc, #32]	; (800cb54 <os_dev_initialize_all+0x28>)
 800cb32:	681c      	ldr	r4, [r3, #0]
    int rc = 0;
 800cb34:	2200      	movs	r2, #0
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
 800cb36:	e000      	b.n	800cb3a <os_dev_initialize_all+0xe>
 800cb38:	6a24      	ldr	r4, [r4, #32]
 800cb3a:	b144      	cbz	r4, 800cb4e <os_dev_initialize_all+0x22>
        if (dev->od_stage == stage) {
 800cb3c:	7e23      	ldrb	r3, [r4, #24]
 800cb3e:	42ab      	cmp	r3, r5
 800cb40:	d1fa      	bne.n	800cb38 <os_dev_initialize_all+0xc>
            rc = os_dev_initialize(dev);
 800cb42:	4620      	mov	r0, r4
 800cb44:	f7ff ffae 	bl	800caa4 <os_dev_initialize>
            if (rc) {
 800cb48:	4602      	mov	r2, r0
 800cb4a:	2800      	cmp	r0, #0
 800cb4c:	d0f4      	beq.n	800cb38 <os_dev_initialize_all+0xc>
            }
        }
    }

    return (rc);
}
 800cb4e:	4610      	mov	r0, r2
 800cb50:	bd38      	pop	{r3, r4, r5, pc}
 800cb52:	bf00      	nop
 800cb54:	20001878 	.word	0x20001878

0800cb58 <os_dev_lookup>:
    return (rc);
}

struct os_dev *
os_dev_lookup(const char *name)
{
 800cb58:	b538      	push	{r3, r4, r5, lr}
 800cb5a:	4605      	mov	r5, r0
    struct os_dev *dev;

    dev = NULL;
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
 800cb5c:	4b05      	ldr	r3, [pc, #20]	; (800cb74 <os_dev_lookup+0x1c>)
 800cb5e:	681c      	ldr	r4, [r3, #0]
 800cb60:	b134      	cbz	r4, 800cb70 <os_dev_lookup+0x18>
        if (!strcmp(dev->od_name, name)) {
 800cb62:	4629      	mov	r1, r5
 800cb64:	69e0      	ldr	r0, [r4, #28]
 800cb66:	f001 fa32 	bl	800dfce <strcmp>
 800cb6a:	b108      	cbz	r0, 800cb70 <os_dev_lookup+0x18>
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
 800cb6c:	6a24      	ldr	r4, [r4, #32]
 800cb6e:	e7f7      	b.n	800cb60 <os_dev_lookup+0x8>
            break;
        }
    }
    return (dev);
}
 800cb70:	4620      	mov	r0, r4
 800cb72:	bd38      	pop	{r3, r4, r5, pc}
 800cb74:	20001878 	.word	0x20001878

0800cb78 <os_dev_open>:

struct os_dev *
os_dev_open(const char *devname, uint32_t timo, void *arg)
{
 800cb78:	b570      	push	{r4, r5, r6, lr}
 800cb7a:	460d      	mov	r5, r1
 800cb7c:	4616      	mov	r6, r2
    struct os_dev *dev;
    os_sr_t sr;
    int rc;

    dev = os_dev_lookup(devname);
 800cb7e:	f7ff ffeb 	bl	800cb58 <os_dev_lookup>
    if (dev == NULL) {
 800cb82:	4604      	mov	r4, r0
 800cb84:	b1a0      	cbz	r0, 800cbb0 <os_dev_open+0x38>
        return (NULL);
    }

    /* Device is not ready to be opened. */
    if ((dev->od_flags & OS_DEV_F_STATUS_READY) == 0) {
 800cb86:	7ec3      	ldrb	r3, [r0, #27]
 800cb88:	f013 0f01 	tst.w	r3, #1
 800cb8c:	d012      	beq.n	800cbb4 <os_dev_open+0x3c>
        return (NULL);
    }

    if (dev->od_handlers.od_open) {
 800cb8e:	6803      	ldr	r3, [r0, #0]
 800cb90:	b11b      	cbz	r3, 800cb9a <os_dev_open+0x22>
        rc = dev->od_handlers.od_open(dev, timo, arg);
 800cb92:	4632      	mov	r2, r6
 800cb94:	4629      	mov	r1, r5
 800cb96:	4798      	blx	r3
        if (rc != 0) {
 800cb98:	b970      	cbnz	r0, 800cbb8 <os_dev_open+0x40>
            goto err;
        }
    }

    OS_ENTER_CRITICAL(sr);
 800cb9a:	f7ff fc4f 	bl	800c43c <os_arch_save_sr>
    ++dev->od_open_ref;
 800cb9e:	7ea3      	ldrb	r3, [r4, #26]
 800cba0:	3301      	adds	r3, #1
 800cba2:	76a3      	strb	r3, [r4, #26]
    dev->od_flags |= OS_DEV_F_STATUS_OPEN;
 800cba4:	7ee3      	ldrb	r3, [r4, #27]
 800cba6:	f043 0302 	orr.w	r3, r3, #2
 800cbaa:	76e3      	strb	r3, [r4, #27]
    OS_EXIT_CRITICAL(sr);
 800cbac:	f7ff fc4c 	bl	800c448 <os_arch_restore_sr>

    return (dev);
err:
    return (NULL);
}
 800cbb0:	4620      	mov	r0, r4
 800cbb2:	bd70      	pop	{r4, r5, r6, pc}
        return (NULL);
 800cbb4:	2400      	movs	r4, #0
 800cbb6:	e7fb      	b.n	800cbb0 <os_dev_open+0x38>
    return (NULL);
 800cbb8:	2400      	movs	r4, #0
 800cbba:	e7f9      	b.n	800cbb0 <os_dev_open+0x38>

0800cbbc <os_dev_close>:
os_dev_close(struct os_dev *dev)
{
    int rc;
    os_sr_t sr;

    if (dev == NULL) {
 800cbbc:	b1b0      	cbz	r0, 800cbec <os_dev_close+0x30>
{
 800cbbe:	b510      	push	{r4, lr}
 800cbc0:	4604      	mov	r4, r0
        rc = OS_EINVAL;
        goto err;
    }

    if (dev->od_handlers.od_close) {
 800cbc2:	68c3      	ldr	r3, [r0, #12]
 800cbc4:	b113      	cbz	r3, 800cbcc <os_dev_close+0x10>
        rc = dev->od_handlers.od_close(dev);
 800cbc6:	4798      	blx	r3
        if (rc != 0) {
 800cbc8:	4603      	mov	r3, r0
 800cbca:	b968      	cbnz	r0, 800cbe8 <os_dev_close+0x2c>
            goto err;
        }
    }

    OS_ENTER_CRITICAL(sr);
 800cbcc:	f7ff fc36 	bl	800c43c <os_arch_save_sr>
    if (--dev->od_open_ref == 0) {
 800cbd0:	7ea3      	ldrb	r3, [r4, #26]
 800cbd2:	3b01      	subs	r3, #1
 800cbd4:	b2db      	uxtb	r3, r3
 800cbd6:	76a3      	strb	r3, [r4, #26]
 800cbd8:	b91b      	cbnz	r3, 800cbe2 <os_dev_close+0x26>
        dev->od_flags &= ~(OS_DEV_F_STATUS_OPEN | OS_DEV_F_STATUS_SUSPENDED);
 800cbda:	7ee3      	ldrb	r3, [r4, #27]
 800cbdc:	f023 0306 	bic.w	r3, r3, #6
 800cbe0:	76e3      	strb	r3, [r4, #27]
    }
    OS_EXIT_CRITICAL(sr);
 800cbe2:	f7ff fc31 	bl	800c448 <os_arch_restore_sr>

    return (0);
 800cbe6:	2300      	movs	r3, #0
err:
    return (rc);
}
 800cbe8:	4618      	mov	r0, r3
 800cbea:	bd10      	pop	{r4, pc}
        rc = OS_EINVAL;
 800cbec:	2302      	movs	r3, #2
}
 800cbee:	4618      	mov	r0, r3
 800cbf0:	4770      	bx	lr
	...

0800cbf4 <os_dev_reset>:
}

void
os_dev_reset(void)
{
    STAILQ_INIT(&g_os_dev_list);
 800cbf4:	4b02      	ldr	r3, [pc, #8]	; (800cc00 <os_dev_reset+0xc>)
 800cbf6:	2200      	movs	r2, #0
 800cbf8:	601a      	str	r2, [r3, #0]
 800cbfa:	605b      	str	r3, [r3, #4]
}
 800cbfc:	4770      	bx	lr
 800cbfe:	bf00      	nop
 800cc00:	20001878 	.word	0x20001878

0800cc04 <os_eventq_init>:
static struct os_eventq os_eventq_main;

void
os_eventq_init(struct os_eventq *evq)
{
    memset(evq, 0, sizeof(*evq));
 800cc04:	2200      	movs	r2, #0
 800cc06:	6002      	str	r2, [r0, #0]
 800cc08:	6042      	str	r2, [r0, #4]
    STAILQ_INIT(&evq->evq_list);
 800cc0a:	4603      	mov	r3, r0
 800cc0c:	f843 2f08 	str.w	r2, [r3, #8]!
 800cc10:	60c3      	str	r3, [r0, #12]
}
 800cc12:	4770      	bx	lr

0800cc14 <os_eventq_inited>:

int
os_eventq_inited(const struct os_eventq *evq)
{
    return evq->evq_list.stqh_last != NULL;
 800cc14:	68c0      	ldr	r0, [r0, #12]
}
 800cc16:	3000      	adds	r0, #0
 800cc18:	bf18      	it	ne
 800cc1a:	2001      	movne	r0, #1
 800cc1c:	4770      	bx	lr

0800cc1e <os_eventq_put>:

void
os_eventq_put(struct os_eventq *evq, struct os_event *ev)
{
 800cc1e:	b570      	push	{r4, r5, r6, lr}
    int resched;
    os_sr_t sr;

    assert(evq != NULL && os_eventq_inited(evq));
 800cc20:	b1f0      	cbz	r0, 800cc60 <os_eventq_put+0x42>
 800cc22:	460c      	mov	r4, r1
 800cc24:	4605      	mov	r5, r0
 800cc26:	f7ff fff5 	bl	800cc14 <os_eventq_inited>
 800cc2a:	b1c8      	cbz	r0, 800cc60 <os_eventq_put+0x42>

    os_trace_api_u32x2(OS_TRACE_ID_EVENTQ_PUT, (uint32_t)evq, (uint32_t)ev);

    OS_ENTER_CRITICAL(sr);
 800cc2c:	f7ff fc06 	bl	800c43c <os_arch_save_sr>
 800cc30:	4606      	mov	r6, r0

    /* Do not queue if already queued */
    if (OS_EVENT_QUEUED(ev)) {
 800cc32:	7823      	ldrb	r3, [r4, #0]
 800cc34:	b9d3      	cbnz	r3, 800cc6c <os_eventq_put+0x4e>
        os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
        return;
    }

    /* Queue the event */
    ev->ev_queued = 1;
 800cc36:	2301      	movs	r3, #1
 800cc38:	7023      	strb	r3, [r4, #0]
    STAILQ_INSERT_TAIL(&evq->evq_list, ev, ev_next);
 800cc3a:	2300      	movs	r3, #0
 800cc3c:	60e3      	str	r3, [r4, #12]
 800cc3e:	68eb      	ldr	r3, [r5, #12]
 800cc40:	601c      	str	r4, [r3, #0]
 800cc42:	340c      	adds	r4, #12
 800cc44:	60ec      	str	r4, [r5, #12]

    resched = 0;
    if (evq->evq_task) {
 800cc46:	6868      	ldr	r0, [r5, #4]
 800cc48:	b1b8      	cbz	r0, 800cc7a <os_eventq_put+0x5c>
        /* If task waiting on event, wake it up.
         * Check if task is sleeping, because another event
         * queue may have woken this task up beforehand.
         */
        if (evq->evq_task->t_state == OS_TASK_SLEEP) {
 800cc4a:	7b03      	ldrb	r3, [r0, #12]
 800cc4c:	2b02      	cmp	r3, #2
 800cc4e:	d010      	beq.n	800cc72 <os_eventq_put+0x54>
    resched = 0;
 800cc50:	2400      	movs	r4, #0
            resched = 1;
        }
        /* Either way, NULL out the task, because the task will
         * be awake upon exit of this function.
         */
        evq->evq_task = NULL;
 800cc52:	2300      	movs	r3, #0
 800cc54:	606b      	str	r3, [r5, #4]
    }

    OS_EXIT_CRITICAL(sr);
 800cc56:	4630      	mov	r0, r6
 800cc58:	f7ff fbf6 	bl	800c448 <os_arch_restore_sr>

    if (resched) {
 800cc5c:	b97c      	cbnz	r4, 800cc7e <os_eventq_put+0x60>
        os_sched(NULL);
    }

    os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
}
 800cc5e:	bd70      	pop	{r4, r5, r6, pc}
    assert(evq != NULL && os_eventq_inited(evq));
 800cc60:	2300      	movs	r3, #0
 800cc62:	461a      	mov	r2, r3
 800cc64:	4619      	mov	r1, r3
 800cc66:	4618      	mov	r0, r3
 800cc68:	f7ff fcb4 	bl	800c5d4 <__assert_func>
        OS_EXIT_CRITICAL(sr);
 800cc6c:	f7ff fbec 	bl	800c448 <os_arch_restore_sr>
 800cc70:	e7f5      	b.n	800cc5e <os_eventq_put+0x40>
            os_sched_wakeup(evq->evq_task);
 800cc72:	f000 fd9b 	bl	800d7ac <os_sched_wakeup>
            resched = 1;
 800cc76:	2401      	movs	r4, #1
 800cc78:	e7eb      	b.n	800cc52 <os_eventq_put+0x34>
    resched = 0;
 800cc7a:	2400      	movs	r4, #0
 800cc7c:	e7eb      	b.n	800cc56 <os_eventq_put+0x38>
        os_sched(NULL);
 800cc7e:	2000      	movs	r0, #0
 800cc80:	f000 fe14 	bl	800d8ac <os_sched>
 800cc84:	e7eb      	b.n	800cc5e <os_eventq_put+0x40>

0800cc86 <os_eventq_get>:
    return ev;
}

struct os_event *
os_eventq_get(struct os_eventq *evq)
{
 800cc86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc88:	4605      	mov	r5, r0
    os_sr_t sr;
    struct os_task *t;

    os_trace_api_u32(OS_TRACE_ID_EVENTQ_GET, (uint32_t)evq);

    t = os_sched_get_current_task();
 800cc8a:	f000 fd3b 	bl	800d704 <os_sched_get_current_task>
 800cc8e:	4604      	mov	r4, r0
    if (evq->evq_owner != t) {
 800cc90:	682b      	ldr	r3, [r5, #0]
 800cc92:	4283      	cmp	r3, r0
 800cc94:	d001      	beq.n	800cc9a <os_eventq_get+0x14>
        if (evq->evq_owner == NULL) {
 800cc96:	b9db      	cbnz	r3, 800ccd0 <os_eventq_get+0x4a>
            evq->evq_owner = t;
 800cc98:	6028      	str	r0, [r5, #0]
             * by another.
             */
            assert(0);
        }
    }
    OS_ENTER_CRITICAL(sr);
 800cc9a:	f7ff fbcf 	bl	800c43c <os_arch_save_sr>
 800cc9e:	4607      	mov	r7, r0
pull_one:
    ev = STAILQ_FIRST(&evq->evq_list);
 800cca0:	68ae      	ldr	r6, [r5, #8]
    if (ev) {
 800cca2:	b9de      	cbnz	r6, 800ccdc <os_eventq_get+0x56>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
        ev->ev_queued = 0;
        t->t_flags &= ~OS_TASK_FLAG_EVQ_WAIT;
    } else {
        evq->evq_task = t;
 800cca4:	606c      	str	r4, [r5, #4]
        os_sched_sleep(evq->evq_task, OS_TIMEOUT_NEVER);
 800cca6:	f04f 31ff 	mov.w	r1, #4294967295
 800ccaa:	4620      	mov	r0, r4
 800ccac:	f000 fd36 	bl	800d71c <os_sched_sleep>
        t->t_flags |= OS_TASK_FLAG_EVQ_WAIT;
 800ccb0:	7b63      	ldrb	r3, [r4, #13]
 800ccb2:	f043 0308 	orr.w	r3, r3, #8
 800ccb6:	7363      	strb	r3, [r4, #13]
        OS_EXIT_CRITICAL(sr);
 800ccb8:	4638      	mov	r0, r7
 800ccba:	f7ff fbc5 	bl	800c448 <os_arch_restore_sr>

        os_sched(NULL);
 800ccbe:	2000      	movs	r0, #0
 800ccc0:	f000 fdf4 	bl	800d8ac <os_sched>

        OS_ENTER_CRITICAL(sr);
 800ccc4:	f7ff fbba 	bl	800c43c <os_arch_save_sr>
 800ccc8:	4607      	mov	r7, r0
        evq->evq_task = NULL;
 800ccca:	2300      	movs	r3, #0
 800cccc:	606b      	str	r3, [r5, #4]
        goto pull_one;
 800ccce:	e7e7      	b.n	800cca0 <os_eventq_get+0x1a>
            assert(0);
 800ccd0:	2300      	movs	r3, #0
 800ccd2:	461a      	mov	r2, r3
 800ccd4:	4619      	mov	r1, r3
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	f7ff fc7c 	bl	800c5d4 <__assert_func>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
 800ccdc:	68f3      	ldr	r3, [r6, #12]
 800ccde:	60ab      	str	r3, [r5, #8]
 800cce0:	b153      	cbz	r3, 800ccf8 <os_eventq_get+0x72>
        ev->ev_queued = 0;
 800cce2:	2300      	movs	r3, #0
 800cce4:	7033      	strb	r3, [r6, #0]
        t->t_flags &= ~OS_TASK_FLAG_EVQ_WAIT;
 800cce6:	7b63      	ldrb	r3, [r4, #13]
 800cce8:	f023 0308 	bic.w	r3, r3, #8
 800ccec:	7363      	strb	r3, [r4, #13]
    }
    OS_EXIT_CRITICAL(sr);
 800ccee:	4638      	mov	r0, r7
 800ccf0:	f7ff fbaa 	bl	800c448 <os_arch_restore_sr>
#if MYNEWT_VAL(OS_EVENTQ_DEBUG)
    evq->evq_prev = ev;
#endif

    return (ev);
}
 800ccf4:	4630      	mov	r0, r6
 800ccf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
 800ccf8:	f105 0308 	add.w	r3, r5, #8
 800ccfc:	60eb      	str	r3, [r5, #12]
 800ccfe:	e7f0      	b.n	800cce2 <os_eventq_get+0x5c>

0800cd00 <os_eventq_run>:
}
#endif

void
os_eventq_run(struct os_eventq *evq)
{
 800cd00:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_EVENTQ_MONITOR)
    struct os_eventq_mon *mon;
    uint32_t ticks;
#endif

    ev = os_eventq_get(evq);
 800cd02:	f7ff ffc0 	bl	800cc86 <os_eventq_get>
    assert(ev->ev_cb != NULL);
 800cd06:	6843      	ldr	r3, [r0, #4]
 800cd08:	b10b      	cbz	r3, 800cd0e <os_eventq_run+0xe>
#if MYNEWT_VAL(OS_EVENTQ_MONITOR)
    ticks = os_cputime_get32();
#endif
    ev->ev_cb(ev);
 800cd0a:	4798      	blx	r3
        if (ticks > mon->em_max) {
            mon->em_max = ticks;
        }
    }
#endif
}
 800cd0c:	bd08      	pop	{r3, pc}
    assert(ev->ev_cb != NULL);
 800cd0e:	461a      	mov	r2, r3
 800cd10:	4619      	mov	r1, r3
 800cd12:	4618      	mov	r0, r3
 800cd14:	f7ff fc5e 	bl	800c5d4 <__assert_func>

0800cd18 <os_eventq_remove>:
    return (ev);
}

void
os_eventq_remove(struct os_eventq *evq, struct os_event *ev)
{
 800cd18:	b538      	push	{r3, r4, r5, lr}
 800cd1a:	4605      	mov	r5, r0
 800cd1c:	460c      	mov	r4, r1
    os_sr_t sr;

    os_trace_api_u32x2(OS_TRACE_ID_EVENTQ_REMOVE, (uint32_t)evq, (uint32_t)ev);

    OS_ENTER_CRITICAL(sr);
 800cd1e:	f7ff fb8d 	bl	800c43c <os_arch_save_sr>
    if (OS_EVENT_QUEUED(ev)) {
 800cd22:	7823      	ldrb	r3, [r4, #0]
 800cd24:	b183      	cbz	r3, 800cd48 <os_eventq_remove+0x30>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
 800cd26:	68aa      	ldr	r2, [r5, #8]
 800cd28:	42a2      	cmp	r2, r4
 800cd2a:	d107      	bne.n	800cd3c <os_eventq_remove+0x24>
 800cd2c:	68d3      	ldr	r3, [r2, #12]
 800cd2e:	60ab      	str	r3, [r5, #8]
 800cd30:	b953      	cbnz	r3, 800cd48 <os_eventq_remove+0x30>
 800cd32:	f105 0308 	add.w	r3, r5, #8
 800cd36:	60eb      	str	r3, [r5, #12]
 800cd38:	e006      	b.n	800cd48 <os_eventq_remove+0x30>
 800cd3a:	461a      	mov	r2, r3
 800cd3c:	68d3      	ldr	r3, [r2, #12]
 800cd3e:	42a3      	cmp	r3, r4
 800cd40:	d1fb      	bne.n	800cd3a <os_eventq_remove+0x22>
 800cd42:	68db      	ldr	r3, [r3, #12]
 800cd44:	60d3      	str	r3, [r2, #12]
 800cd46:	b123      	cbz	r3, 800cd52 <os_eventq_remove+0x3a>
    }
    ev->ev_queued = 0;
 800cd48:	2300      	movs	r3, #0
 800cd4a:	7023      	strb	r3, [r4, #0]
    OS_EXIT_CRITICAL(sr);
 800cd4c:	f7ff fb7c 	bl	800c448 <os_arch_restore_sr>

    os_trace_api_ret(OS_TRACE_ID_EVENTQ_REMOVE);
}
 800cd50:	bd38      	pop	{r3, r4, r5, pc}
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
 800cd52:	320c      	adds	r2, #12
 800cd54:	60ea      	str	r2, [r5, #12]
 800cd56:	e7f7      	b.n	800cd48 <os_eventq_remove+0x30>

0800cd58 <os_eventq_dflt_get>:

struct os_eventq *
os_eventq_dflt_get(void)
{
    return &os_eventq_main;
}
 800cd58:	4800      	ldr	r0, [pc, #0]	; (800cd5c <os_eventq_dflt_get+0x4>)
 800cd5a:	4770      	bx	lr
 800cd5c:	20001880 	.word	0x20001880

0800cd60 <os_mqueue_init>:
#endif
#include "os/mynewt.h"

int
os_mqueue_init(struct os_mqueue *mq, os_event_fn *ev_cb, void *arg)
{
 800cd60:	4603      	mov	r3, r0
    struct os_event *ev;

    STAILQ_INIT(&mq->mq_head);
 800cd62:	2000      	movs	r0, #0
 800cd64:	6018      	str	r0, [r3, #0]
 800cd66:	605b      	str	r3, [r3, #4]

    ev = &mq->mq_ev;
    memset(ev, 0, sizeof(*ev));
 800cd68:	6098      	str	r0, [r3, #8]
 800cd6a:	6158      	str	r0, [r3, #20]
    ev->ev_cb = ev_cb;
 800cd6c:	60d9      	str	r1, [r3, #12]
    ev->ev_arg = arg;
 800cd6e:	611a      	str	r2, [r3, #16]

    return (0);
}
 800cd70:	4770      	bx	lr

0800cd72 <os_mqueue_get>:

struct os_mbuf *
os_mqueue_get(struct os_mqueue *mq)
{
 800cd72:	b538      	push	{r3, r4, r5, lr}
 800cd74:	4605      	mov	r5, r0
    struct os_mbuf_pkthdr *mp;
    struct os_mbuf *m;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
 800cd76:	f7ff fb61 	bl	800c43c <os_arch_save_sr>
    mp = STAILQ_FIRST(&mq->mq_head);
 800cd7a:	682c      	ldr	r4, [r5, #0]
    if (mp) {
 800cd7c:	b114      	cbz	r4, 800cd84 <os_mqueue_get+0x12>
        STAILQ_REMOVE_HEAD(&mq->mq_head, omp_next);
 800cd7e:	6863      	ldr	r3, [r4, #4]
 800cd80:	602b      	str	r3, [r5, #0]
 800cd82:	b12b      	cbz	r3, 800cd90 <os_mqueue_get+0x1e>
    }
    OS_EXIT_CRITICAL(sr);
 800cd84:	f7ff fb60 	bl	800c448 <os_arch_restore_sr>

    if (mp) {
 800cd88:	b124      	cbz	r4, 800cd94 <os_mqueue_get+0x22>
        m = OS_MBUF_PKTHDR_TO_MBUF(mp);
 800cd8a:	f1a4 0010 	sub.w	r0, r4, #16
    } else {
        m = NULL;
    }

    return (m);
}
 800cd8e:	bd38      	pop	{r3, r4, r5, pc}
        STAILQ_REMOVE_HEAD(&mq->mq_head, omp_next);
 800cd90:	606d      	str	r5, [r5, #4]
 800cd92:	e7f7      	b.n	800cd84 <os_mqueue_get+0x12>
        m = NULL;
 800cd94:	2000      	movs	r0, #0
    return (m);
 800cd96:	e7fa      	b.n	800cd8e <os_mqueue_get+0x1c>

0800cd98 <os_mqueue_put>:

int
os_mqueue_put(struct os_mqueue *mq, struct os_eventq *evq, struct os_mbuf *m)
{
 800cd98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    struct os_mbuf_pkthdr *mp;
    os_sr_t sr;
    int rc;

    /* Can only place the head of a chained mbuf on the queue. */
    if (!OS_MBUF_IS_PKTHDR(m)) {
 800cd9a:	7953      	ldrb	r3, [r2, #5]
 800cd9c:	2b07      	cmp	r3, #7
 800cd9e:	d916      	bls.n	800cdce <os_mqueue_put+0x36>
 800cda0:	4614      	mov	r4, r2
 800cda2:	460e      	mov	r6, r1
 800cda4:	4605      	mov	r5, r0
        rc = OS_EINVAL;
        goto err;
    }

    mp = OS_MBUF_PKTHDR(m);
 800cda6:	f102 0710 	add.w	r7, r2, #16

    OS_ENTER_CRITICAL(sr);
 800cdaa:	f7ff fb47 	bl	800c43c <os_arch_save_sr>
    STAILQ_INSERT_TAIL(&mq->mq_head, mp, omp_next);
 800cdae:	2300      	movs	r3, #0
 800cdb0:	f844 3f14 	str.w	r3, [r4, #20]!
 800cdb4:	686b      	ldr	r3, [r5, #4]
 800cdb6:	601f      	str	r7, [r3, #0]
 800cdb8:	606c      	str	r4, [r5, #4]
    OS_EXIT_CRITICAL(sr);
 800cdba:	f7ff fb45 	bl	800c448 <os_arch_restore_sr>

    /* Only post an event to the queue if its specified */
    if (evq) {
 800cdbe:	b146      	cbz	r6, 800cdd2 <os_mqueue_put+0x3a>
        os_eventq_put(evq, &mq->mq_ev);
 800cdc0:	f105 0108 	add.w	r1, r5, #8
 800cdc4:	4630      	mov	r0, r6
 800cdc6:	f7ff ff2a 	bl	800cc1e <os_eventq_put>
    }

    return (0);
 800cdca:	2000      	movs	r0, #0
 800cdcc:	e000      	b.n	800cdd0 <os_mqueue_put+0x38>
err:
    return (rc);
 800cdce:	2002      	movs	r0, #2
}
 800cdd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return (0);
 800cdd2:	2000      	movs	r0, #0
 800cdd4:	e7fc      	b.n	800cdd0 <os_mqueue_put+0x38>

0800cdd6 <os_mbuf_pool_init>:

int
os_mbuf_pool_init(struct os_mbuf_pool *omp, struct os_mempool *mp,
                  uint16_t buf_len, uint16_t nbufs)
{
    omp->omp_databuf_len = buf_len - sizeof(struct os_mbuf);
 800cdd6:	3a10      	subs	r2, #16
 800cdd8:	8002      	strh	r2, [r0, #0]
    omp->omp_pool = mp;
 800cdda:	6041      	str	r1, [r0, #4]

    return (0);
}
 800cddc:	2000      	movs	r0, #0
 800cdde:	4770      	bx	lr

0800cde0 <os_mbuf_get>:

struct os_mbuf *
os_mbuf_get(struct os_mbuf_pool *omp, uint16_t leadingspace)
{
 800cde0:	b538      	push	{r3, r4, r5, lr}
    struct os_mbuf *om;

    os_trace_api_u32x2(OS_TRACE_ID_MBUF_GET, (uint32_t)omp,
                       (uint32_t)leadingspace);

    if (leadingspace > omp->omp_databuf_len) {
 800cde2:	8803      	ldrh	r3, [r0, #0]
 800cde4:	428b      	cmp	r3, r1
 800cde6:	d312      	bcc.n	800ce0e <os_mbuf_get+0x2e>
 800cde8:	460d      	mov	r5, r1
 800cdea:	4604      	mov	r4, r0
        om = NULL;
        goto done;
    }

    om = os_memblock_get(omp->omp_pool);
 800cdec:	6840      	ldr	r0, [r0, #4]
 800cdee:	f000 fa1b 	bl	800d228 <os_memblock_get>
    if (!om) {
 800cdf2:	4603      	mov	r3, r0
 800cdf4:	b148      	cbz	r0, 800ce0a <os_mbuf_get+0x2a>
        goto done;
    }

    SLIST_NEXT(om, om_next) = NULL;
 800cdf6:	2200      	movs	r2, #0
 800cdf8:	60c2      	str	r2, [r0, #12]
    om->om_flags = 0;
 800cdfa:	7102      	strb	r2, [r0, #4]
    om->om_pkthdr_len = 0;
 800cdfc:	7142      	strb	r2, [r0, #5]
    om->om_len = 0;
 800cdfe:	80c2      	strh	r2, [r0, #6]
    om->om_data = (&om->om_databuf[0] + leadingspace);
 800ce00:	f100 0110 	add.w	r1, r0, #16
 800ce04:	4429      	add	r1, r5
 800ce06:	6001      	str	r1, [r0, #0]
    om->om_omp = omp;
 800ce08:	6084      	str	r4, [r0, #8]

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_GET, (uint32_t)om);
    return om;
}
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	bd38      	pop	{r3, r4, r5, pc}
        om = NULL;
 800ce0e:	2300      	movs	r3, #0
    return om;
 800ce10:	e7fb      	b.n	800ce0a <os_mbuf_get+0x2a>

0800ce12 <os_mbuf_get_pkthdr>:

struct os_mbuf *
os_mbuf_get_pkthdr(struct os_mbuf_pool *omp, uint8_t user_pkthdr_len)
{
 800ce12:	b538      	push	{r3, r4, r5, lr}

    os_trace_api_u32x2(OS_TRACE_ID_MBUF_GET_PKTHDR, (uint32_t)omp,
                       (uint32_t)user_pkthdr_len);

    /* User packet header must fit inside mbuf */
    pkthdr_len = user_pkthdr_len + sizeof(struct os_mbuf_pkthdr);
 800ce14:	f101 0508 	add.w	r5, r1, #8
    if ((pkthdr_len > omp->omp_databuf_len) || (pkthdr_len > 255)) {
 800ce18:	8803      	ldrh	r3, [r0, #0]
 800ce1a:	42ab      	cmp	r3, r5
 800ce1c:	d310      	bcc.n	800ce40 <os_mbuf_get_pkthdr+0x2e>
 800ce1e:	2dff      	cmp	r5, #255	; 0xff
 800ce20:	d810      	bhi.n	800ce44 <os_mbuf_get_pkthdr+0x32>
        om = NULL;
        goto done;
    }

    om = os_mbuf_get(omp, 0);
 800ce22:	2100      	movs	r1, #0
 800ce24:	f7ff ffdc 	bl	800cde0 <os_mbuf_get>
    if (om) {
 800ce28:	4603      	mov	r3, r0
 800ce2a:	b138      	cbz	r0, 800ce3c <os_mbuf_get_pkthdr+0x2a>
        om->om_pkthdr_len = pkthdr_len;
 800ce2c:	715d      	strb	r5, [r3, #5]
        om->om_data += pkthdr_len;
 800ce2e:	6802      	ldr	r2, [r0, #0]
 800ce30:	4415      	add	r5, r2
 800ce32:	6005      	str	r5, [r0, #0]

        pkthdr = OS_MBUF_PKTHDR(om);
        pkthdr->omp_len = 0;
 800ce34:	2200      	movs	r2, #0
 800ce36:	8202      	strh	r2, [r0, #16]
        pkthdr->omp_flags = 0;
 800ce38:	8242      	strh	r2, [r0, #18]
        STAILQ_NEXT(pkthdr, omp_next) = NULL;
 800ce3a:	6142      	str	r2, [r0, #20]
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_GET_PKTHDR, (uint32_t)om);
    return om;
}
 800ce3c:	4618      	mov	r0, r3
 800ce3e:	bd38      	pop	{r3, r4, r5, pc}
        om = NULL;
 800ce40:	2300      	movs	r3, #0
 800ce42:	e7fb      	b.n	800ce3c <os_mbuf_get_pkthdr+0x2a>
 800ce44:	2300      	movs	r3, #0
    return om;
 800ce46:	e7f9      	b.n	800ce3c <os_mbuf_get_pkthdr+0x2a>

0800ce48 <os_mbuf_free>:

int
os_mbuf_free(struct os_mbuf *om)
{
 800ce48:	b508      	push	{r3, lr}
    int rc;

    os_trace_api_u32(OS_TRACE_ID_MBUF_FREE, (uint32_t)om);

    if (om->om_omp != NULL) {
 800ce4a:	6883      	ldr	r3, [r0, #8]
 800ce4c:	b123      	cbz	r3, 800ce58 <os_mbuf_free+0x10>
 800ce4e:	4601      	mov	r1, r0
        rc = os_memblock_put(om->om_omp->omp_pool, om);
 800ce50:	6858      	ldr	r0, [r3, #4]
 800ce52:	f000 fa11 	bl	800d278 <os_memblock_put>
    rc = 0;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_FREE, (uint32_t)rc);
    return (rc);
}
 800ce56:	bd08      	pop	{r3, pc}
    rc = 0;
 800ce58:	2000      	movs	r0, #0
    return (rc);
 800ce5a:	e7fc      	b.n	800ce56 <os_mbuf_free+0xe>

0800ce5c <os_mbuf_free_chain>:

int
os_mbuf_free_chain(struct os_mbuf *om)
{
 800ce5c:	4603      	mov	r3, r0
    struct os_mbuf *next;
    int rc;

    os_trace_api_u32(OS_TRACE_ID_MBUF_FREE_CHAIN, (uint32_t)om);

    while (om != NULL) {
 800ce5e:	b160      	cbz	r0, 800ce7a <os_mbuf_free_chain+0x1e>
{
 800ce60:	b510      	push	{r4, lr}
        next = SLIST_NEXT(om, om_next);
 800ce62:	68dc      	ldr	r4, [r3, #12]

        rc = os_mbuf_free(om);
 800ce64:	4618      	mov	r0, r3
 800ce66:	f7ff ffef 	bl	800ce48 <os_mbuf_free>
        if (rc != 0) {
            goto done;
        }

        om = next;
 800ce6a:	4623      	mov	r3, r4
        if (rc != 0) {
 800ce6c:	4602      	mov	r2, r0
 800ce6e:	b910      	cbnz	r0, 800ce76 <os_mbuf_free_chain+0x1a>
    while (om != NULL) {
 800ce70:	2c00      	cmp	r4, #0
 800ce72:	d1f6      	bne.n	800ce62 <os_mbuf_free_chain+0x6>
    }

    rc = 0;
 800ce74:	2200      	movs	r2, #0

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_FREE_CHAIN, (uint32_t)rc);
    return (rc);
}
 800ce76:	4610      	mov	r0, r2
 800ce78:	bd10      	pop	{r4, pc}
    rc = 0;
 800ce7a:	2200      	movs	r2, #0
}
 800ce7c:	4610      	mov	r0, r2
 800ce7e:	4770      	bx	lr

0800ce80 <os_mbuf_len>:
uint16_t
os_mbuf_len(const struct os_mbuf *om)
{
    uint16_t len;

    len = 0;
 800ce80:	2300      	movs	r3, #0
    while (om != NULL) {
 800ce82:	e003      	b.n	800ce8c <os_mbuf_len+0xc>
        len += om->om_len;
 800ce84:	88c2      	ldrh	r2, [r0, #6]
 800ce86:	4413      	add	r3, r2
 800ce88:	b29b      	uxth	r3, r3
        om = SLIST_NEXT(om, om_next);
 800ce8a:	68c0      	ldr	r0, [r0, #12]
    while (om != NULL) {
 800ce8c:	2800      	cmp	r0, #0
 800ce8e:	d1f9      	bne.n	800ce84 <os_mbuf_len+0x4>
    }

    return len;
}
 800ce90:	4618      	mov	r0, r3
 800ce92:	4770      	bx	lr

0800ce94 <os_mbuf_append>:

int
os_mbuf_append(struct os_mbuf *om, const void *data,  uint16_t len)
{
 800ce94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    struct os_mbuf *new;
    int remainder;
    int space;
    int rc;

    if (om == NULL) {
 800ce98:	2800      	cmp	r0, #0
 800ce9a:	d04d      	beq.n	800cf38 <os_mbuf_append+0xa4>
 800ce9c:	460f      	mov	r7, r1
 800ce9e:	4691      	mov	r9, r2
 800cea0:	4682      	mov	sl, r0
        rc = OS_EINVAL;
        goto err;
    }

    omp = om->om_omp;
 800cea2:	f8d0 8008 	ldr.w	r8, [r0, #8]

    /* Scroll to last mbuf in the chain */
    last = om;
 800cea6:	4605      	mov	r5, r0
    while (SLIST_NEXT(last, om_next) != NULL) {
 800cea8:	e000      	b.n	800ceac <os_mbuf_append+0x18>
        last = SLIST_NEXT(last, om_next);
 800ceaa:	461d      	mov	r5, r3
    while (SLIST_NEXT(last, om_next) != NULL) {
 800ceac:	68eb      	ldr	r3, [r5, #12]
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d1fb      	bne.n	800ceaa <os_mbuf_append+0x16>
    }

    remainder = len;
 800ceb2:	464e      	mov	r6, r9
static inline uint16_t
_os_mbuf_trailingspace(struct os_mbuf *om)
{
    struct os_mbuf_pool *omp;

    omp = om->om_omp;
 800ceb4:	68ab      	ldr	r3, [r5, #8]

    return (&om->om_databuf[0] + omp->omp_databuf_len) -
 800ceb6:	f105 0410 	add.w	r4, r5, #16
 800ceba:	881b      	ldrh	r3, [r3, #0]
 800cebc:	441c      	add	r4, r3
      (om->om_data + om->om_len);
 800cebe:	6828      	ldr	r0, [r5, #0]
 800cec0:	88eb      	ldrh	r3, [r5, #6]
 800cec2:	4418      	add	r0, r3
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
 800cec4:	1a24      	subs	r4, r4, r0
 800cec6:	b2a4      	uxth	r4, r4
    space = OS_MBUF_TRAILINGSPACE(last);

    /* If room in current mbuf, copy the first part of the data into the
     * remaining space in that mbuf.
     */
    if (space > 0) {
 800cec8:	b164      	cbz	r4, 800cee4 <os_mbuf_append+0x50>
        if (space > remainder) {
 800ceca:	454c      	cmp	r4, r9
 800cecc:	dd00      	ble.n	800ced0 <os_mbuf_append+0x3c>
            space = remainder;
 800cece:	464c      	mov	r4, r9
        }

        memcpy(OS_MBUF_DATA(last, uint8_t *) + last->om_len , data, space);
 800ced0:	4622      	mov	r2, r4
 800ced2:	4639      	mov	r1, r7
 800ced4:	f001 f842 	bl	800df5c <memcpy>

        last->om_len += space;
 800ced8:	88eb      	ldrh	r3, [r5, #6]
 800ceda:	4423      	add	r3, r4
 800cedc:	80eb      	strh	r3, [r5, #6]
        data += space;
 800cede:	4427      	add	r7, r4
        remainder -= space;
 800cee0:	eba9 0604 	sub.w	r6, r9, r4
    }

    /* Take the remaining data, and keep allocating new mbufs and copying
     * data into it, until data is exhausted.
     */
    while (remainder > 0) {
 800cee4:	2e00      	cmp	r6, #0
 800cee6:	dd16      	ble.n	800cf16 <os_mbuf_append+0x82>
        new = os_mbuf_get(omp, 0);
 800cee8:	2100      	movs	r1, #0
 800ceea:	4640      	mov	r0, r8
 800ceec:	f7ff ff78 	bl	800cde0 <os_mbuf_get>
        if (!new) {
 800cef0:	4604      	mov	r4, r0
 800cef2:	b180      	cbz	r0, 800cf16 <os_mbuf_append+0x82>
            break;
        }

        new->om_len = min(omp->omp_databuf_len, remainder);
 800cef4:	f8b8 2000 	ldrh.w	r2, [r8]
 800cef8:	42b2      	cmp	r2, r6
 800cefa:	bfa8      	it	ge
 800cefc:	4632      	movge	r2, r6
 800cefe:	b292      	uxth	r2, r2
 800cf00:	80c2      	strh	r2, [r0, #6]
        memcpy(OS_MBUF_DATA(new, void *), data, new->om_len);
 800cf02:	4639      	mov	r1, r7
 800cf04:	6800      	ldr	r0, [r0, #0]
 800cf06:	f001 f829 	bl	800df5c <memcpy>
        data += new->om_len;
 800cf0a:	88e3      	ldrh	r3, [r4, #6]
 800cf0c:	441f      	add	r7, r3
        remainder -= new->om_len;
 800cf0e:	1af6      	subs	r6, r6, r3
        SLIST_NEXT(last, om_next) = new;
 800cf10:	60ec      	str	r4, [r5, #12]
        last = new;
 800cf12:	4625      	mov	r5, r4
 800cf14:	e7e6      	b.n	800cee4 <os_mbuf_append+0x50>
    }

    /* Adjust the packet header length in the buffer */
    if (OS_MBUF_IS_PKTHDR(om)) {
 800cf16:	f89a 3005 	ldrb.w	r3, [sl, #5]
 800cf1a:	2b07      	cmp	r3, #7
 800cf1c:	d907      	bls.n	800cf2e <os_mbuf_append+0x9a>
        OS_MBUF_PKTHDR(om)->omp_len += len - remainder;
 800cf1e:	eba9 0906 	sub.w	r9, r9, r6
 800cf22:	f8ba 3010 	ldrh.w	r3, [sl, #16]
 800cf26:	fa13 f989 	uxtah	r9, r3, r9
 800cf2a:	f8aa 9010 	strh.w	r9, [sl, #16]
    }

    if (remainder != 0) {
 800cf2e:	b106      	cbz	r6, 800cf32 <os_mbuf_append+0x9e>
        rc = OS_ENOMEM;
 800cf30:	2601      	movs	r6, #1


    return (0);
err:
    return (rc);
}
 800cf32:	4630      	mov	r0, r6
 800cf34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        rc = OS_EINVAL;
 800cf38:	2602      	movs	r6, #2
 800cf3a:	e7fa      	b.n	800cf32 <os_mbuf_append+0x9e>

0800cf3c <os_mbuf_dup>:
    return 0;
}

struct os_mbuf *
os_mbuf_dup(struct os_mbuf *om)
{
 800cf3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf40:	4604      	mov	r4, r0
    struct os_mbuf_pool *omp;
    struct os_mbuf *head;
    struct os_mbuf *copy;

    omp = om->om_omp;
 800cf42:	f8d0 8008 	ldr.w	r8, [r0, #8]

    head = NULL;
    copy = NULL;
 800cf46:	2700      	movs	r7, #0
    head = NULL;
 800cf48:	463e      	mov	r6, r7

    for (; om != NULL; om = SLIST_NEXT(om, om_next)) {
 800cf4a:	e017      	b.n	800cf7c <os_mbuf_dup+0x40>
    startoff = 0;
 800cf4c:	2100      	movs	r1, #0
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
 800cf4e:	4623      	mov	r3, r4
 800cf50:	f853 2b10 	ldr.w	r2, [r3], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
 800cf54:	440b      	add	r3, r1
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
 800cf56:	1ad3      	subs	r3, r2, r3
        if (head) {
            SLIST_NEXT(copy, om_next) = os_mbuf_get(omp,
 800cf58:	b299      	uxth	r1, r3
 800cf5a:	4640      	mov	r0, r8
 800cf5c:	f7ff ff40 	bl	800cde0 <os_mbuf_get>
 800cf60:	4605      	mov	r5, r0
 800cf62:	60f8      	str	r0, [r7, #12]
                    OS_MBUF_LEADINGSPACE(om));
            if (!SLIST_NEXT(copy, om_next)) {
 800cf64:	b188      	cbz	r0, 800cf8a <os_mbuf_dup+0x4e>
            if (OS_MBUF_IS_PKTHDR(om)) {
                _os_mbuf_copypkthdr(head, om);
            }
            copy = head;
        }
        copy->om_flags = om->om_flags;
 800cf66:	7923      	ldrb	r3, [r4, #4]
 800cf68:	712b      	strb	r3, [r5, #4]
        copy->om_len = om->om_len;
 800cf6a:	88e3      	ldrh	r3, [r4, #6]
 800cf6c:	80eb      	strh	r3, [r5, #6]
        memcpy(OS_MBUF_DATA(copy, uint8_t *), OS_MBUF_DATA(om, uint8_t *),
 800cf6e:	88e2      	ldrh	r2, [r4, #6]
 800cf70:	6821      	ldr	r1, [r4, #0]
 800cf72:	6828      	ldr	r0, [r5, #0]
 800cf74:	f000 fff2 	bl	800df5c <memcpy>
    for (; om != NULL; om = SLIST_NEXT(om, om_next)) {
 800cf78:	68e4      	ldr	r4, [r4, #12]
 800cf7a:	462f      	mov	r7, r5
 800cf7c:	b14c      	cbz	r4, 800cf92 <os_mbuf_dup+0x56>
        if (head) {
 800cf7e:	b15e      	cbz	r6, 800cf98 <os_mbuf_dup+0x5c>
    if (OS_MBUF_IS_PKTHDR(om)) {
 800cf80:	7963      	ldrb	r3, [r4, #5]
 800cf82:	2b07      	cmp	r3, #7
 800cf84:	d9e2      	bls.n	800cf4c <os_mbuf_dup+0x10>
        startoff = om->om_pkthdr_len;
 800cf86:	b299      	uxth	r1, r3
 800cf88:	e7e1      	b.n	800cf4e <os_mbuf_dup+0x12>
                os_mbuf_free_chain(head);
 800cf8a:	4630      	mov	r0, r6
 800cf8c:	f7ff ff66 	bl	800ce5c <os_mbuf_free_chain>
                om->om_len);
    }

    return (head);
err:
    return (NULL);
 800cf90:	462e      	mov	r6, r5
}
 800cf92:	4630      	mov	r0, r6
 800cf94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (OS_MBUF_IS_PKTHDR(om)) {
 800cf98:	7963      	ldrb	r3, [r4, #5]
 800cf9a:	2b07      	cmp	r3, #7
 800cf9c:	d911      	bls.n	800cfc2 <os_mbuf_dup+0x86>
        startoff = om->om_pkthdr_len;
 800cf9e:	b299      	uxth	r1, r3
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
 800cfa0:	4623      	mov	r3, r4
 800cfa2:	f853 2b10 	ldr.w	r2, [r3], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
 800cfa6:	440b      	add	r3, r1
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
 800cfa8:	1ad3      	subs	r3, r2, r3
            head = os_mbuf_get(omp, OS_MBUF_LEADINGSPACE(om));
 800cfaa:	b299      	uxth	r1, r3
 800cfac:	4640      	mov	r0, r8
 800cfae:	f7ff ff17 	bl	800cde0 <os_mbuf_get>
            if (!head) {
 800cfb2:	4606      	mov	r6, r0
 800cfb4:	2800      	cmp	r0, #0
 800cfb6:	d0ec      	beq.n	800cf92 <os_mbuf_dup+0x56>
            if (OS_MBUF_IS_PKTHDR(om)) {
 800cfb8:	7963      	ldrb	r3, [r4, #5]
 800cfba:	2b07      	cmp	r3, #7
 800cfbc:	d803      	bhi.n	800cfc6 <os_mbuf_dup+0x8a>
            copy = head;
 800cfbe:	4605      	mov	r5, r0
 800cfc0:	e7d1      	b.n	800cf66 <os_mbuf_dup+0x2a>
    startoff = 0;
 800cfc2:	2100      	movs	r1, #0
 800cfc4:	e7ec      	b.n	800cfa0 <os_mbuf_dup+0x64>
    assert(new_buf->om_len == 0);
 800cfc6:	88c3      	ldrh	r3, [r0, #6]
 800cfc8:	b973      	cbnz	r3, 800cfe8 <os_mbuf_dup+0xac>
    memcpy(&new_buf->om_databuf[0], &old_buf->om_databuf[0],
 800cfca:	f100 0510 	add.w	r5, r0, #16
 800cfce:	7962      	ldrb	r2, [r4, #5]
 800cfd0:	f104 0110 	add.w	r1, r4, #16
 800cfd4:	4628      	mov	r0, r5
 800cfd6:	f000 ffc1 	bl	800df5c <memcpy>
    new_buf->om_pkthdr_len = old_buf->om_pkthdr_len;
 800cfda:	7963      	ldrb	r3, [r4, #5]
 800cfdc:	7173      	strb	r3, [r6, #5]
    new_buf->om_data = new_buf->om_databuf + old_buf->om_pkthdr_len;
 800cfde:	7963      	ldrb	r3, [r4, #5]
 800cfe0:	441d      	add	r5, r3
 800cfe2:	6035      	str	r5, [r6, #0]
            copy = head;
 800cfe4:	4635      	mov	r5, r6
 800cfe6:	e7be      	b.n	800cf66 <os_mbuf_dup+0x2a>
    assert(new_buf->om_len == 0);
 800cfe8:	2300      	movs	r3, #0
 800cfea:	461a      	mov	r2, r3
 800cfec:	4619      	mov	r1, r3
 800cfee:	4618      	mov	r0, r3
 800cff0:	f7ff faf0 	bl	800c5d4 <__assert_func>

0800cff4 <os_mbuf_adj>:
{
    int len = req_len;
    struct os_mbuf *m;
    int count;

    if ((m = mp) == NULL)
 800cff4:	2800      	cmp	r0, #0
 800cff6:	d04e      	beq.n	800d096 <os_mbuf_adj+0xa2>
{
 800cff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cffa:	4604      	mov	r4, r0
        return;
    if (len >= 0) {
 800cffc:	2900      	cmp	r1, #0
 800cffe:	db1c      	blt.n	800d03a <os_mbuf_adj+0x46>
    if ((m = mp) == NULL)
 800d000:	4603      	mov	r3, r0
    int len = req_len;
 800d002:	460a      	mov	r2, r1
 800d004:	e005      	b.n	800d012 <os_mbuf_adj+0x1e>
            if (m->om_len <= len) {
                len -= m->om_len;
                m->om_len = 0;
                m = SLIST_NEXT(m, om_next);
            } else {
                m->om_len -= len;
 800d006:	1a80      	subs	r0, r0, r2
 800d008:	80d8      	strh	r0, [r3, #6]
                m->om_data += len;
 800d00a:	6818      	ldr	r0, [r3, #0]
 800d00c:	4402      	add	r2, r0
 800d00e:	601a      	str	r2, [r3, #0]
                len = 0;
 800d010:	2200      	movs	r2, #0
        while (m != NULL && len > 0) {
 800d012:	b14b      	cbz	r3, 800d028 <os_mbuf_adj+0x34>
 800d014:	2a00      	cmp	r2, #0
 800d016:	dd07      	ble.n	800d028 <os_mbuf_adj+0x34>
            if (m->om_len <= len) {
 800d018:	88d8      	ldrh	r0, [r3, #6]
 800d01a:	4290      	cmp	r0, r2
 800d01c:	dcf3      	bgt.n	800d006 <os_mbuf_adj+0x12>
                len -= m->om_len;
 800d01e:	1a12      	subs	r2, r2, r0
                m->om_len = 0;
 800d020:	2000      	movs	r0, #0
 800d022:	80d8      	strh	r0, [r3, #6]
                m = SLIST_NEXT(m, om_next);
 800d024:	68db      	ldr	r3, [r3, #12]
 800d026:	e7f4      	b.n	800d012 <os_mbuf_adj+0x1e>
            }
        }
        if (OS_MBUF_IS_PKTHDR(mp))
 800d028:	7963      	ldrb	r3, [r4, #5]
 800d02a:	2b07      	cmp	r3, #7
 800d02c:	d904      	bls.n	800d038 <os_mbuf_adj+0x44>
            OS_MBUF_PKTHDR(mp)->omp_len -= (req_len - len);
 800d02e:	1a52      	subs	r2, r2, r1
 800d030:	8a21      	ldrh	r1, [r4, #16]
 800d032:	fa11 f282 	uxtah	r2, r1, r2
 800d036:	8222      	strh	r2, [r4, #16]
                break;
            }
            count -= m->om_len;
        }
    }
}
 800d038:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        len = -len;
 800d03a:	424f      	negs	r7, r1
        count = 0;
 800d03c:	2200      	movs	r2, #0
 800d03e:	e000      	b.n	800d042 <os_mbuf_adj+0x4e>
            m = SLIST_NEXT(m, om_next);
 800d040:	4628      	mov	r0, r5
            count += m->om_len;
 800d042:	88c3      	ldrh	r3, [r0, #6]
 800d044:	441a      	add	r2, r3
            if (SLIST_NEXT(m, om_next) == (struct os_mbuf *)0)
 800d046:	68c5      	ldr	r5, [r0, #12]
 800d048:	2d00      	cmp	r5, #0
 800d04a:	d1f9      	bne.n	800d040 <os_mbuf_adj+0x4c>
        if (m->om_len >= len) {
 800d04c:	42bb      	cmp	r3, r7
 800d04e:	db09      	blt.n	800d064 <os_mbuf_adj+0x70>
            m->om_len -= len;
 800d050:	b2bf      	uxth	r7, r7
 800d052:	1bdb      	subs	r3, r3, r7
 800d054:	80c3      	strh	r3, [r0, #6]
            if (OS_MBUF_IS_PKTHDR(mp))
 800d056:	7963      	ldrb	r3, [r4, #5]
 800d058:	2b07      	cmp	r3, #7
 800d05a:	d9ed      	bls.n	800d038 <os_mbuf_adj+0x44>
                OS_MBUF_PKTHDR(mp)->omp_len -= len;
 800d05c:	8a23      	ldrh	r3, [r4, #16]
 800d05e:	1bdf      	subs	r7, r3, r7
 800d060:	8227      	strh	r7, [r4, #16]
 800d062:	e7e9      	b.n	800d038 <os_mbuf_adj+0x44>
        if (count < 0)
 800d064:	188a      	adds	r2, r1, r2
 800d066:	d40b      	bmi.n	800d080 <os_mbuf_adj+0x8c>
        if (OS_MBUF_IS_PKTHDR(m))
 800d068:	7963      	ldrb	r3, [r4, #5]
 800d06a:	2b07      	cmp	r3, #7
 800d06c:	d900      	bls.n	800d070 <os_mbuf_adj+0x7c>
            OS_MBUF_PKTHDR(m)->omp_len = count;
 800d06e:	8222      	strh	r2, [r4, #16]
        for (; m; m = SLIST_NEXT(m, om_next)) {
 800d070:	2c00      	cmp	r4, #0
 800d072:	d0e1      	beq.n	800d038 <os_mbuf_adj+0x44>
            if (m->om_len >= count) {
 800d074:	88e3      	ldrh	r3, [r4, #6]
 800d076:	4293      	cmp	r3, r2
 800d078:	da04      	bge.n	800d084 <os_mbuf_adj+0x90>
            count -= m->om_len;
 800d07a:	1ad2      	subs	r2, r2, r3
        for (; m; m = SLIST_NEXT(m, om_next)) {
 800d07c:	68e4      	ldr	r4, [r4, #12]
 800d07e:	e7f7      	b.n	800d070 <os_mbuf_adj+0x7c>
            count = 0;
 800d080:	2200      	movs	r2, #0
 800d082:	e7f1      	b.n	800d068 <os_mbuf_adj+0x74>
                m->om_len = count;
 800d084:	80e2      	strh	r2, [r4, #6]
                if (SLIST_NEXT(m, om_next) != NULL) {
 800d086:	68e0      	ldr	r0, [r4, #12]
 800d088:	2800      	cmp	r0, #0
 800d08a:	d0d5      	beq.n	800d038 <os_mbuf_adj+0x44>
                    os_mbuf_free_chain(SLIST_NEXT(m, om_next));
 800d08c:	f7ff fee6 	bl	800ce5c <os_mbuf_free_chain>
                    SLIST_NEXT(m, om_next) = NULL;
 800d090:	2300      	movs	r3, #0
 800d092:	60e3      	str	r3, [r4, #12]
 800d094:	e7d0      	b.n	800d038 <os_mbuf_adj+0x44>
 800d096:	4770      	bx	lr

0800d098 <os_mbuf_prepend>:
    }
}

struct os_mbuf *
os_mbuf_prepend(struct os_mbuf *om, int len)
{
 800d098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d09a:	4604      	mov	r4, r0
 800d09c:	460e      	mov	r6, r1
 800d09e:	e019      	b.n	800d0d4 <os_mbuf_prepend+0x3c>
 800d0a0:	2000      	movs	r0, #0
 800d0a2:	e01b      	b.n	800d0dc <os_mbuf_prepend+0x44>
        /* The current head didn't have enough space; allocate a new head. */
        if (OS_MBUF_IS_PKTHDR(om)) {
            p = os_mbuf_get_pkthdr(om->om_omp,
                om->om_pkthdr_len - sizeof (struct os_mbuf_pkthdr));
        } else {
            p = os_mbuf_get(om->om_omp, 0);
 800d0a4:	2100      	movs	r1, #0
 800d0a6:	68a0      	ldr	r0, [r4, #8]
 800d0a8:	f7ff fe9a 	bl	800cde0 <os_mbuf_get>
 800d0ac:	4605      	mov	r5, r0
        }
        if (p == NULL) {
 800d0ae:	2d00      	cmp	r5, #0
 800d0b0:	d033      	beq.n	800d11a <os_mbuf_prepend+0x82>
            os_mbuf_free_chain(om);
            om = NULL;
            break;
        }

        if (OS_MBUF_IS_PKTHDR(om)) {
 800d0b2:	7963      	ldrb	r3, [r4, #5]
 800d0b4:	2b07      	cmp	r3, #7
 800d0b6:	d836      	bhi.n	800d126 <os_mbuf_prepend+0x8e>
    omp = om->om_omp;
 800d0b8:	68aa      	ldr	r2, [r5, #8]
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
 800d0ba:	f105 0310 	add.w	r3, r5, #16
 800d0be:	8812      	ldrh	r2, [r2, #0]
 800d0c0:	4413      	add	r3, r2
      (om->om_data + om->om_len);
 800d0c2:	6829      	ldr	r1, [r5, #0]
 800d0c4:	88ea      	ldrh	r2, [r5, #6]
 800d0c6:	440a      	add	r2, r1
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
 800d0c8:	1a9b      	subs	r3, r3, r2
        }

        /* Move the new head's data pointer to the end so that data can be
         * prepended.
         */
        p->om_data += OS_MBUF_TRAILINGSPACE(p);
 800d0ca:	fa11 f383 	uxtah	r3, r1, r3
 800d0ce:	602b      	str	r3, [r5, #0]

        SLIST_NEXT(p, om_next) = om;
 800d0d0:	60ec      	str	r4, [r5, #12]
        om = p;
 800d0d2:	462c      	mov	r4, r5
    if (OS_MBUF_IS_PKTHDR(om)) {
 800d0d4:	7961      	ldrb	r1, [r4, #5]
 800d0d6:	2907      	cmp	r1, #7
 800d0d8:	d9e2      	bls.n	800d0a0 <os_mbuf_prepend+0x8>
        startoff = om->om_pkthdr_len;
 800d0da:	b288      	uxth	r0, r1
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
 800d0dc:	4623      	mov	r3, r4
 800d0de:	f853 2b10 	ldr.w	r2, [r3], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
 800d0e2:	4403      	add	r3, r0
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
 800d0e4:	1ad3      	subs	r3, r2, r3
 800d0e6:	b29b      	uxth	r3, r3
        leading = min(len, OS_MBUF_LEADINGSPACE(om));
 800d0e8:	429e      	cmp	r6, r3
 800d0ea:	da00      	bge.n	800d0ee <os_mbuf_prepend+0x56>
 800d0ec:	4633      	mov	r3, r6
        om->om_data -= leading;
 800d0ee:	1ad2      	subs	r2, r2, r3
 800d0f0:	6022      	str	r2, [r4, #0]
        om->om_len += leading;
 800d0f2:	b298      	uxth	r0, r3
 800d0f4:	88e2      	ldrh	r2, [r4, #6]
 800d0f6:	4402      	add	r2, r0
 800d0f8:	80e2      	strh	r2, [r4, #6]
        if (OS_MBUF_IS_PKTHDR(om)) {
 800d0fa:	2907      	cmp	r1, #7
 800d0fc:	d902      	bls.n	800d104 <os_mbuf_prepend+0x6c>
            OS_MBUF_PKTHDR(om)->omp_len += leading;
 800d0fe:	8a22      	ldrh	r2, [r4, #16]
 800d100:	4410      	add	r0, r2
 800d102:	8220      	strh	r0, [r4, #16]
        if (len == 0) {
 800d104:	1af6      	subs	r6, r6, r3
 800d106:	d00c      	beq.n	800d122 <os_mbuf_prepend+0x8a>
        if (OS_MBUF_IS_PKTHDR(om)) {
 800d108:	2907      	cmp	r1, #7
 800d10a:	d9cb      	bls.n	800d0a4 <os_mbuf_prepend+0xc>
            p = os_mbuf_get_pkthdr(om->om_omp,
 800d10c:	3908      	subs	r1, #8
 800d10e:	b2c9      	uxtb	r1, r1
 800d110:	68a0      	ldr	r0, [r4, #8]
 800d112:	f7ff fe7e 	bl	800ce12 <os_mbuf_get_pkthdr>
 800d116:	4605      	mov	r5, r0
 800d118:	e7c9      	b.n	800d0ae <os_mbuf_prepend+0x16>
            os_mbuf_free_chain(om);
 800d11a:	4620      	mov	r0, r4
 800d11c:	f7ff fe9e 	bl	800ce5c <os_mbuf_free_chain>
            om = NULL;
 800d120:	462c      	mov	r4, r5
    }

    return om;
}
 800d122:	4620      	mov	r0, r4
 800d124:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert(new_buf->om_len == 0);
 800d126:	88eb      	ldrh	r3, [r5, #6]
 800d128:	b97b      	cbnz	r3, 800d14a <os_mbuf_prepend+0xb2>
    memcpy(&new_buf->om_databuf[0], &old_buf->om_databuf[0],
 800d12a:	f105 0710 	add.w	r7, r5, #16
 800d12e:	7962      	ldrb	r2, [r4, #5]
 800d130:	f104 0110 	add.w	r1, r4, #16
 800d134:	4638      	mov	r0, r7
 800d136:	f000 ff11 	bl	800df5c <memcpy>
    new_buf->om_pkthdr_len = old_buf->om_pkthdr_len;
 800d13a:	7963      	ldrb	r3, [r4, #5]
 800d13c:	716b      	strb	r3, [r5, #5]
    new_buf->om_data = new_buf->om_databuf + old_buf->om_pkthdr_len;
 800d13e:	7963      	ldrb	r3, [r4, #5]
 800d140:	441f      	add	r7, r3
 800d142:	602f      	str	r7, [r5, #0]
            om->om_pkthdr_len = 0;
 800d144:	2300      	movs	r3, #0
 800d146:	7163      	strb	r3, [r4, #5]
 800d148:	e7b6      	b.n	800d0b8 <os_mbuf_prepend+0x20>
    assert(new_buf->om_len == 0);
 800d14a:	2300      	movs	r3, #0
 800d14c:	461a      	mov	r2, r3
 800d14e:	4619      	mov	r1, r3
 800d150:	4618      	mov	r0, r3
 800d152:	f7ff fa3f 	bl	800c5d4 <__assert_func>

0800d156 <os_mbuf_concat>:
{
    struct os_mbuf *next;
    struct os_mbuf *cur;

    /* Point 'cur' to the last buffer in the first chain. */
    cur = first;
 800d156:	4602      	mov	r2, r0
 800d158:	e000      	b.n	800d15c <os_mbuf_concat+0x6>
        next = SLIST_NEXT(cur, om_next);
        if (next == NULL) {
            break;
        }

        cur = next;
 800d15a:	461a      	mov	r2, r3
        next = SLIST_NEXT(cur, om_next);
 800d15c:	68d3      	ldr	r3, [r2, #12]
        if (next == NULL) {
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d1fb      	bne.n	800d15a <os_mbuf_concat+0x4>
    }

    /* Attach the second chain to the end of the first. */
    SLIST_NEXT(cur, om_next) = second;
 800d162:	60d1      	str	r1, [r2, #12]

    /* If the first chain has a packet header, calculate the length of the
     * second chain and add it to the header length.
     */
    if (OS_MBUF_IS_PKTHDR(first)) {
 800d164:	7943      	ldrb	r3, [r0, #5]
 800d166:	2b07      	cmp	r3, #7
 800d168:	d915      	bls.n	800d196 <os_mbuf_concat+0x40>
        if (OS_MBUF_IS_PKTHDR(second)) {
 800d16a:	794b      	ldrb	r3, [r1, #5]
 800d16c:	2b07      	cmp	r3, #7
 800d16e:	d80e      	bhi.n	800d18e <os_mbuf_concat+0x38>
            OS_MBUF_PKTHDR(first)->omp_len += OS_MBUF_PKTHDR(second)->omp_len;
        } else {
            for (cur = second; cur != NULL; cur = SLIST_NEXT(cur, om_next)) {
 800d170:	460b      	mov	r3, r1
 800d172:	b181      	cbz	r1, 800d196 <os_mbuf_concat+0x40>
{
 800d174:	b410      	push	{r4}
                OS_MBUF_PKTHDR(first)->omp_len += cur->om_len;
 800d176:	88da      	ldrh	r2, [r3, #6]
 800d178:	8a04      	ldrh	r4, [r0, #16]
 800d17a:	4422      	add	r2, r4
 800d17c:	8202      	strh	r2, [r0, #16]
            for (cur = second; cur != NULL; cur = SLIST_NEXT(cur, om_next)) {
 800d17e:	68db      	ldr	r3, [r3, #12]
 800d180:	2b00      	cmp	r3, #0
 800d182:	d1f8      	bne.n	800d176 <os_mbuf_concat+0x20>
            }
        }
    }

    second->om_pkthdr_len = 0;
 800d184:	2300      	movs	r3, #0
 800d186:	714b      	strb	r3, [r1, #5]
}
 800d188:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d18c:	4770      	bx	lr
            OS_MBUF_PKTHDR(first)->omp_len += OS_MBUF_PKTHDR(second)->omp_len;
 800d18e:	8a0b      	ldrh	r3, [r1, #16]
 800d190:	8a02      	ldrh	r2, [r0, #16]
 800d192:	4413      	add	r3, r2
 800d194:	8203      	strh	r3, [r0, #16]
    second->om_pkthdr_len = 0;
 800d196:	2300      	movs	r3, #0
 800d198:	714b      	strb	r3, [r1, #5]
 800d19a:	4770      	bx	lr

0800d19c <os_mempool_init_internal>:
    int i;
    uint8_t *block_addr;
    struct os_memblock *block_ptr;

    /* Check for valid parameters */
    if (!mp || (block_size == 0)) {
 800d19c:	2800      	cmp	r0, #0
 800d19e:	d031      	beq.n	800d204 <os_mempool_init_internal+0x68>
{
 800d1a0:	b430      	push	{r4, r5}
 800d1a2:	4604      	mov	r4, r0
    if (!mp || (block_size == 0)) {
 800d1a4:	2a00      	cmp	r2, #0
 800d1a6:	d02f      	beq.n	800d208 <os_mempool_init_internal+0x6c>
        return OS_INVALID_PARM;
    }

    if ((!membuf) && (blocks != 0)) {
 800d1a8:	b1bb      	cbz	r3, 800d1da <os_mempool_init_internal+0x3e>
        return OS_INVALID_PARM;
    }

    if (membuf != NULL) {
 800d1aa:	b113      	cbz	r3, 800d1b2 <os_mempool_init_internal+0x16>
        /* Blocks need to be sized properly and memory buffer should be
         * aligned
         */
        if (((uint32_t)membuf & (OS_ALIGNMENT - 1)) != 0) {
 800d1ac:	f013 0f03 	tst.w	r3, #3
 800d1b0:	d12c      	bne.n	800d20c <os_mempool_init_internal+0x70>
            return OS_MEM_NOT_ALIGNED;
        }
    }

    /* Initialize the memory pool structure */
    mp->mp_block_size = block_size;
 800d1b2:	6022      	str	r2, [r4, #0]
    mp->mp_num_free = blocks;
 800d1b4:	80e1      	strh	r1, [r4, #6]
    mp->mp_min_free = blocks;
 800d1b6:	8121      	strh	r1, [r4, #8]
    mp->mp_flags = flags;
 800d1b8:	f89d 000c 	ldrb.w	r0, [sp, #12]
 800d1bc:	72a0      	strb	r0, [r4, #10]
    mp->mp_num_blocks = blocks;
 800d1be:	80a1      	strh	r1, [r4, #4]
    mp->mp_membuf_addr = (uint32_t)membuf;
 800d1c0:	60e3      	str	r3, [r4, #12]
    mp->name = name;
 800d1c2:	9802      	ldr	r0, [sp, #8]
 800d1c4:	61a0      	str	r0, [r4, #24]
    SLIST_FIRST(mp) = membuf;
 800d1c6:	6163      	str	r3, [r4, #20]

    if (blocks > 0) {
 800d1c8:	b199      	cbz	r1, 800d1f2 <os_mempool_init_internal+0x56>
        os_mempool_poison(mp, membuf);
        os_mempool_guard(mp, membuf);
        true_block_size = OS_MEMPOOL_TRUE_BLOCK_SIZE(mp);
 800d1ca:	f012 0f03 	tst.w	r2, #3
 800d1ce:	d002      	beq.n	800d1d6 <os_mempool_init_internal+0x3a>
 800d1d0:	f022 0203 	bic.w	r2, r2, #3
 800d1d4:	3204      	adds	r2, #4

        /* Chain the memory blocks to the free list */
        block_addr = (uint8_t *)membuf;
        block_ptr = (struct os_memblock *)block_addr;
        for (i = 1; i < blocks; i++) {
 800d1d6:	2001      	movs	r0, #1
 800d1d8:	e007      	b.n	800d1ea <os_mempool_init_internal+0x4e>
    if ((!membuf) && (blocks != 0)) {
 800d1da:	2900      	cmp	r1, #0
 800d1dc:	d0e5      	beq.n	800d1aa <os_mempool_init_internal+0xe>
        return OS_INVALID_PARM;
 800d1de:	2003      	movs	r0, #3
 800d1e0:	e00e      	b.n	800d200 <os_mempool_init_internal+0x64>
            block_addr += true_block_size;
 800d1e2:	189d      	adds	r5, r3, r2
            os_mempool_poison(mp, block_addr);
            os_mempool_guard(mp, block_addr);
            SLIST_NEXT(block_ptr, mb_next) = (struct os_memblock *)block_addr;
 800d1e4:	601d      	str	r5, [r3, #0]
        for (i = 1; i < blocks; i++) {
 800d1e6:	3001      	adds	r0, #1
            block_addr += true_block_size;
 800d1e8:	462b      	mov	r3, r5
        for (i = 1; i < blocks; i++) {
 800d1ea:	4281      	cmp	r1, r0
 800d1ec:	dcf9      	bgt.n	800d1e2 <os_mempool_init_internal+0x46>
            block_ptr = (struct os_memblock *)block_addr;
        }

        /* Last one in the list should be NULL */
        SLIST_NEXT(block_ptr, mb_next) = NULL;
 800d1ee:	2200      	movs	r2, #0
 800d1f0:	601a      	str	r2, [r3, #0]
    }

    STAILQ_INSERT_TAIL(&g_os_mempool_list, mp, mp_list);
 800d1f2:	2000      	movs	r0, #0
 800d1f4:	6120      	str	r0, [r4, #16]
 800d1f6:	4b06      	ldr	r3, [pc, #24]	; (800d210 <os_mempool_init_internal+0x74>)
 800d1f8:	685a      	ldr	r2, [r3, #4]
 800d1fa:	6014      	str	r4, [r2, #0]
 800d1fc:	3410      	adds	r4, #16
 800d1fe:	605c      	str	r4, [r3, #4]

    return OS_OK;
}
 800d200:	bc30      	pop	{r4, r5}
 800d202:	4770      	bx	lr
        return OS_INVALID_PARM;
 800d204:	2003      	movs	r0, #3
}
 800d206:	4770      	bx	lr
        return OS_INVALID_PARM;
 800d208:	2003      	movs	r0, #3
 800d20a:	e7f9      	b.n	800d200 <os_mempool_init_internal+0x64>
            return OS_MEM_NOT_ALIGNED;
 800d20c:	2004      	movs	r0, #4
 800d20e:	e7f7      	b.n	800d200 <os_mempool_init_internal+0x64>
 800d210:	20003960 	.word	0x20003960

0800d214 <os_mempool_init>:

os_error_t
os_mempool_init(struct os_mempool *mp, uint16_t blocks, uint32_t block_size,
                void *membuf, char *name)
{
 800d214:	b510      	push	{r4, lr}
 800d216:	b082      	sub	sp, #8
    return os_mempool_init_internal(mp, blocks, block_size, membuf, name, 0);
 800d218:	2400      	movs	r4, #0
 800d21a:	9401      	str	r4, [sp, #4]
 800d21c:	9c04      	ldr	r4, [sp, #16]
 800d21e:	9400      	str	r4, [sp, #0]
 800d220:	f7ff ffbc 	bl	800d19c <os_mempool_init_internal>
}
 800d224:	b002      	add	sp, #8
 800d226:	bd10      	pop	{r4, pc}

0800d228 <os_memblock_get>:
    return 1;
}

void *
os_memblock_get(struct os_mempool *mp)
{
 800d228:	b538      	push	{r3, r4, r5, lr}

    os_trace_api_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)mp);

    /* Check to make sure they passed in a memory pool (or something) */
    block = NULL;
    if (mp) {
 800d22a:	b1a0      	cbz	r0, 800d256 <os_memblock_get+0x2e>
 800d22c:	4604      	mov	r4, r0
        OS_ENTER_CRITICAL(sr);
 800d22e:	f7ff f905 	bl	800c43c <os_arch_save_sr>
        /* Check for any free */
        if (mp->mp_num_free) {
 800d232:	88e3      	ldrh	r3, [r4, #6]
 800d234:	b153      	cbz	r3, 800d24c <os_memblock_get+0x24>
            /* Get a free block */
            block = SLIST_FIRST(mp);
 800d236:	6965      	ldr	r5, [r4, #20]

            /* Set new free list head */
            SLIST_FIRST(mp) = SLIST_NEXT(block, mb_next);
 800d238:	682a      	ldr	r2, [r5, #0]
 800d23a:	6162      	str	r2, [r4, #20]

            /* Decrement number free by 1 */
            mp->mp_num_free--;
 800d23c:	3b01      	subs	r3, #1
 800d23e:	b29b      	uxth	r3, r3
 800d240:	80e3      	strh	r3, [r4, #6]
            if (mp->mp_min_free > mp->mp_num_free) {
 800d242:	8922      	ldrh	r2, [r4, #8]
 800d244:	4293      	cmp	r3, r2
 800d246:	d202      	bcs.n	800d24e <os_memblock_get+0x26>
                mp->mp_min_free = mp->mp_num_free;
 800d248:	8123      	strh	r3, [r4, #8]
 800d24a:	e000      	b.n	800d24e <os_memblock_get+0x26>
    block = NULL;
 800d24c:	2500      	movs	r5, #0
            }
        }
        OS_EXIT_CRITICAL(sr);
 800d24e:	f7ff f8fb 	bl	800c448 <os_arch_restore_sr>
    }

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)block);

    return (void *)block;
}
 800d252:	4628      	mov	r0, r5
 800d254:	bd38      	pop	{r3, r4, r5, pc}
    block = NULL;
 800d256:	2500      	movs	r5, #0
    return (void *)block;
 800d258:	e7fb      	b.n	800d252 <os_memblock_get+0x2a>

0800d25a <os_memblock_put_from_cb>:

os_error_t
os_memblock_put_from_cb(struct os_mempool *mp, void *block_addr)
{
 800d25a:	b538      	push	{r3, r4, r5, lr}
 800d25c:	4604      	mov	r4, r0
 800d25e:	460d      	mov	r5, r1

    os_mempool_guard_check(mp, block_addr);
    os_mempool_poison(mp, block_addr);

    block = (struct os_memblock *)block_addr;
    OS_ENTER_CRITICAL(sr);
 800d260:	f7ff f8ec 	bl	800c43c <os_arch_save_sr>

    /* Chain current free list pointer to this block; make this block head */
    SLIST_NEXT(block, mb_next) = SLIST_FIRST(mp);
 800d264:	6963      	ldr	r3, [r4, #20]
 800d266:	602b      	str	r3, [r5, #0]
    SLIST_FIRST(mp) = block;
 800d268:	6165      	str	r5, [r4, #20]

    /* XXX: Should we check that the number free <= number blocks? */
    /* Increment number free */
    mp->mp_num_free++;
 800d26a:	88e3      	ldrh	r3, [r4, #6]
 800d26c:	3301      	adds	r3, #1
 800d26e:	80e3      	strh	r3, [r4, #6]

    OS_EXIT_CRITICAL(sr);
 800d270:	f7ff f8ea 	bl	800c448 <os_arch_restore_sr>

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT_FROM_CB, (uint32_t)OS_OK);

    return OS_OK;
}
 800d274:	2000      	movs	r0, #0
 800d276:	bd38      	pop	{r3, r4, r5, pc}

0800d278 <os_memblock_put>:

    os_trace_api_u32x2(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)mp,
                       (uint32_t)block_addr);

    /* Make sure parameters are valid */
    if ((mp == NULL) || (block_addr == NULL)) {
 800d278:	b168      	cbz	r0, 800d296 <os_memblock_put+0x1e>
{
 800d27a:	b508      	push	{r3, lr}
    if ((mp == NULL) || (block_addr == NULL)) {
 800d27c:	b169      	cbz	r1, 800d29a <os_memblock_put+0x22>
    }
#endif
    /* If this is an extended mempool with a put callback, call the callback
     * instead of freeing the block directly.
     */
    if (mp->mp_flags & OS_MEMPOOL_F_EXT) {
 800d27e:	7a83      	ldrb	r3, [r0, #10]
 800d280:	f013 0f01 	tst.w	r3, #1
 800d284:	d004      	beq.n	800d290 <os_memblock_put+0x18>
        mpe = (struct os_mempool_ext *)mp;
        if (mpe->mpe_put_cb != NULL) {
 800d286:	69c3      	ldr	r3, [r0, #28]
 800d288:	b113      	cbz	r3, 800d290 <os_memblock_put+0x18>
            ret = mpe->mpe_put_cb(mpe, block_addr, mpe->mpe_put_arg);
 800d28a:	6a02      	ldr	r2, [r0, #32]
 800d28c:	4798      	blx	r3
    ret = os_memblock_put_from_cb(mp, block_addr);

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)ret);
    return ret;
}
 800d28e:	bd08      	pop	{r3, pc}
    ret = os_memblock_put_from_cb(mp, block_addr);
 800d290:	f7ff ffe3 	bl	800d25a <os_memblock_put_from_cb>
 800d294:	e7fb      	b.n	800d28e <os_memblock_put+0x16>
        ret = OS_INVALID_PARM;
 800d296:	2003      	movs	r0, #3
}
 800d298:	4770      	bx	lr
        ret = OS_INVALID_PARM;
 800d29a:	2003      	movs	r0, #3
 800d29c:	e7f7      	b.n	800d28e <os_memblock_put+0x16>
	...

0800d2a0 <os_mempool_module_init>:
}

void
os_mempool_module_init(void)
{
    STAILQ_INIT(&g_os_mempool_list);
 800d2a0:	4b02      	ldr	r3, [pc, #8]	; (800d2ac <os_mempool_module_init+0xc>)
 800d2a2:	2200      	movs	r2, #0
 800d2a4:	601a      	str	r2, [r3, #0]
 800d2a6:	605b      	str	r3, [r3, #4]
}
 800d2a8:	4770      	bx	lr
 800d2aa:	bf00      	nop
 800d2ac:	20003960 	.word	0x20003960

0800d2b0 <os_msys_find_biggest_pool>:

static struct os_mbuf_pool *
os_msys_find_biggest_pool(void)
{
    /* Mempools are sorted by the blocksize, so just return last one */
    return STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
 800d2b0:	4b02      	ldr	r3, [pc, #8]	; (800d2bc <os_msys_find_biggest_pool+0xc>)
 800d2b2:	6818      	ldr	r0, [r3, #0]
 800d2b4:	b108      	cbz	r0, 800d2ba <os_msys_find_biggest_pool+0xa>
 800d2b6:	6858      	ldr	r0, [r3, #4]
 800d2b8:	3808      	subs	r0, #8
}
 800d2ba:	4770      	bx	lr
 800d2bc:	2000022c 	.word	0x2000022c

0800d2c0 <os_msys_find_pool>:
os_msys_find_pool(uint16_t dsize)
{
    struct os_mbuf_pool *pool;

    pool = NULL;
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
 800d2c0:	4b09      	ldr	r3, [pc, #36]	; (800d2e8 <os_msys_find_pool+0x28>)
 800d2c2:	6819      	ldr	r1, [r3, #0]
 800d2c4:	460b      	mov	r3, r1
 800d2c6:	b123      	cbz	r3, 800d2d2 <os_msys_find_pool+0x12>
        if (dsize <= pool->omp_databuf_len) {
 800d2c8:	881a      	ldrh	r2, [r3, #0]
 800d2ca:	4282      	cmp	r2, r0
 800d2cc:	d201      	bcs.n	800d2d2 <os_msys_find_pool+0x12>
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
 800d2ce:	689b      	ldr	r3, [r3, #8]
 800d2d0:	e7f9      	b.n	800d2c6 <os_msys_find_pool+0x6>
            break;
        }
    }

    if (!pool) {
 800d2d2:	b10b      	cbz	r3, 800d2d8 <os_msys_find_pool+0x18>
        pool = STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
    }

    return (pool);
}
 800d2d4:	4618      	mov	r0, r3
 800d2d6:	4770      	bx	lr
        pool = STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
 800d2d8:	b119      	cbz	r1, 800d2e2 <os_msys_find_pool+0x22>
 800d2da:	4b03      	ldr	r3, [pc, #12]	; (800d2e8 <os_msys_find_pool+0x28>)
 800d2dc:	685b      	ldr	r3, [r3, #4]
 800d2de:	3b08      	subs	r3, #8
 800d2e0:	e7f8      	b.n	800d2d4 <os_msys_find_pool+0x14>
 800d2e2:	460b      	mov	r3, r1
    return (pool);
 800d2e4:	e7f6      	b.n	800d2d4 <os_msys_find_pool+0x14>
 800d2e6:	bf00      	nop
 800d2e8:	2000022c 	.word	0x2000022c

0800d2ec <os_msys_register>:
{
 800d2ec:	b430      	push	{r4, r5}
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
 800d2ee:	4b11      	ldr	r3, [pc, #68]	; (800d334 <os_msys_register+0x48>)
 800d2f0:	681d      	ldr	r5, [r3, #0]
 800d2f2:	462b      	mov	r3, r5
    prev = NULL;
 800d2f4:	2400      	movs	r4, #0
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
 800d2f6:	b133      	cbz	r3, 800d306 <os_msys_register+0x1a>
        if (new_pool->omp_databuf_len < pool->omp_databuf_len) {
 800d2f8:	8801      	ldrh	r1, [r0, #0]
 800d2fa:	881a      	ldrh	r2, [r3, #0]
 800d2fc:	4291      	cmp	r1, r2
 800d2fe:	d302      	bcc.n	800d306 <os_msys_register+0x1a>
        prev = pool;
 800d300:	461c      	mov	r4, r3
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
 800d302:	689b      	ldr	r3, [r3, #8]
 800d304:	e7f7      	b.n	800d2f6 <os_msys_register+0xa>
    if (prev) {
 800d306:	b15c      	cbz	r4, 800d320 <os_msys_register+0x34>
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
 800d308:	68a3      	ldr	r3, [r4, #8]
 800d30a:	6083      	str	r3, [r0, #8]
 800d30c:	b11b      	cbz	r3, 800d316 <os_msys_register+0x2a>
 800d30e:	60a0      	str	r0, [r4, #8]
}
 800d310:	2000      	movs	r0, #0
 800d312:	bc30      	pop	{r4, r5}
 800d314:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
 800d316:	f100 0308 	add.w	r3, r0, #8
 800d31a:	4a06      	ldr	r2, [pc, #24]	; (800d334 <os_msys_register+0x48>)
 800d31c:	6053      	str	r3, [r2, #4]
 800d31e:	e7f6      	b.n	800d30e <os_msys_register+0x22>
        STAILQ_INSERT_HEAD(&g_msys_pool_list, new_pool, omp_next);
 800d320:	6085      	str	r5, [r0, #8]
 800d322:	b115      	cbz	r5, 800d32a <os_msys_register+0x3e>
 800d324:	4b03      	ldr	r3, [pc, #12]	; (800d334 <os_msys_register+0x48>)
 800d326:	6018      	str	r0, [r3, #0]
 800d328:	e7f2      	b.n	800d310 <os_msys_register+0x24>
 800d32a:	f100 0308 	add.w	r3, r0, #8
 800d32e:	4a01      	ldr	r2, [pc, #4]	; (800d334 <os_msys_register+0x48>)
 800d330:	6053      	str	r3, [r2, #4]
 800d332:	e7f7      	b.n	800d324 <os_msys_register+0x38>
 800d334:	2000022c 	.word	0x2000022c

0800d338 <os_msys_init_once>:

static void
os_msys_init_once(void *data, struct os_mempool *mempool,
                  struct os_mbuf_pool *mbuf_pool,
                  int block_count, int block_size, char *name)
{
 800d338:	b530      	push	{r4, r5, lr}
 800d33a:	b083      	sub	sp, #12
 800d33c:	4614      	mov	r4, r2
    int rc;

    rc = mem_init_mbuf_pool(data, mempool, mbuf_pool, block_count, block_size,
 800d33e:	9d07      	ldr	r5, [sp, #28]
 800d340:	9501      	str	r5, [sp, #4]
 800d342:	9d06      	ldr	r5, [sp, #24]
 800d344:	9500      	str	r5, [sp, #0]
 800d346:	f002 fa8c 	bl	800f862 <mem_init_mbuf_pool>
                            name);
    SYSINIT_PANIC_ASSERT(rc == 0);
 800d34a:	b138      	cbz	r0, 800d35c <os_msys_init_once+0x24>
 800d34c:	2000      	movs	r0, #0
 800d34e:	9000      	str	r0, [sp, #0]
 800d350:	4b09      	ldr	r3, [pc, #36]	; (800d378 <os_msys_init_once+0x40>)
 800d352:	681d      	ldr	r5, [r3, #0]
 800d354:	4603      	mov	r3, r0
 800d356:	4602      	mov	r2, r0
 800d358:	4601      	mov	r1, r0
 800d35a:	47a8      	blx	r5

    rc = os_msys_register(mbuf_pool);
 800d35c:	4620      	mov	r0, r4
 800d35e:	f7ff ffc5 	bl	800d2ec <os_msys_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
 800d362:	b138      	cbz	r0, 800d374 <os_msys_init_once+0x3c>
 800d364:	2000      	movs	r0, #0
 800d366:	9000      	str	r0, [sp, #0]
 800d368:	4b03      	ldr	r3, [pc, #12]	; (800d378 <os_msys_init_once+0x40>)
 800d36a:	681c      	ldr	r4, [r3, #0]
 800d36c:	4603      	mov	r3, r0
 800d36e:	4602      	mov	r2, r0
 800d370:	4601      	mov	r1, r0
 800d372:	47a0      	blx	r4
}
 800d374:	b003      	add	sp, #12
 800d376:	bd30      	pop	{r4, r5, pc}
 800d378:	20000228 	.word	0x20000228

0800d37c <os_msys_reset>:
    STAILQ_INIT(&g_msys_pool_list);
 800d37c:	4b02      	ldr	r3, [pc, #8]	; (800d388 <os_msys_reset+0xc>)
 800d37e:	2200      	movs	r2, #0
 800d380:	601a      	str	r2, [r3, #0]
 800d382:	605b      	str	r3, [r3, #4]
}
 800d384:	4770      	bx	lr
 800d386:	bf00      	nop
 800d388:	2000022c 	.word	0x2000022c

0800d38c <os_msys_get_pkthdr>:
{
 800d38c:	b510      	push	{r4, lr}
 800d38e:	460c      	mov	r4, r1
    if (dsize == 0) {
 800d390:	b930      	cbnz	r0, 800d3a0 <os_msys_get_pkthdr+0x14>
        pool = os_msys_find_biggest_pool();
 800d392:	f7ff ff8d 	bl	800d2b0 <os_msys_find_biggest_pool>
    if (!pool) {
 800d396:	b158      	cbz	r0, 800d3b0 <os_msys_get_pkthdr+0x24>
    m = os_mbuf_get_pkthdr(pool, user_hdr_len);
 800d398:	b2e1      	uxtb	r1, r4
 800d39a:	f7ff fd3a 	bl	800ce12 <os_mbuf_get_pkthdr>
}
 800d39e:	bd10      	pop	{r4, pc}
 800d3a0:	f101 0308 	add.w	r3, r1, #8
 800d3a4:	b29b      	uxth	r3, r3
        pool = os_msys_find_pool(dsize + total_pkthdr_len);
 800d3a6:	4403      	add	r3, r0
 800d3a8:	b298      	uxth	r0, r3
 800d3aa:	f7ff ff89 	bl	800d2c0 <os_msys_find_pool>
 800d3ae:	e7f2      	b.n	800d396 <os_msys_get_pkthdr+0xa>
    return (NULL);
 800d3b0:	2000      	movs	r0, #0
 800d3b2:	e7f4      	b.n	800d39e <os_msys_get_pkthdr+0x12>

0800d3b4 <os_msys_init>:

void
os_msys_init(void)
{
 800d3b4:	b500      	push	{lr}
 800d3b6:	b083      	sub	sp, #12
    int rc;

    os_msys_reset();
 800d3b8:	f7ff ffe0 	bl	800d37c <os_msys_reset>

    (void)os_msys_init_once;
    (void)rc;

#if MYNEWT_VAL(MSYS_1_BLOCK_COUNT) > 0
    os_msys_init_once(os_msys_1_data,
 800d3bc:	4b06      	ldr	r3, [pc, #24]	; (800d3d8 <os_msys_init+0x24>)
 800d3be:	9301      	str	r3, [sp, #4]
 800d3c0:	f44f 7392 	mov.w	r3, #292	; 0x124
 800d3c4:	9300      	str	r3, [sp, #0]
 800d3c6:	230c      	movs	r3, #12
 800d3c8:	4a04      	ldr	r2, [pc, #16]	; (800d3dc <os_msys_init+0x28>)
 800d3ca:	4905      	ldr	r1, [pc, #20]	; (800d3e0 <os_msys_init+0x2c>)
 800d3cc:	4805      	ldr	r0, [pc, #20]	; (800d3e4 <os_msys_init+0x30>)
 800d3ce:	f7ff ffb3 	bl	800d338 <os_msys_init_once>
    os_msys_sc.sc_checkin_itvl =
        OS_TICKS_PER_SEC * MYNEWT_VAL(MSYS_SANITY_TIMEOUT) / 1000;
    rc = os_sanity_check_register(&os_msys_sc);
    SYSINIT_PANIC_ASSERT(rc == 0);
#endif
}
 800d3d2:	b003      	add	sp, #12
 800d3d4:	f85d fb04 	ldr.w	pc, [sp], #4
 800d3d8:	0801826c 	.word	0x0801826c
 800d3dc:	20002640 	.word	0x20002640
 800d3e0:	2000264c 	.word	0x2000264c
 800d3e4:	20001890 	.word	0x20001890

0800d3e8 <os_mutex_init>:
os_error_t
os_mutex_init(struct os_mutex *mu)
{
    os_error_t ret;

    if (!mu) {
 800d3e8:	4603      	mov	r3, r0
 800d3ea:	b128      	cbz	r0, 800d3f8 <os_mutex_init+0x10>
    }

    os_trace_api_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)mu);

    /* Initialize to 0 */
    mu->mu_prio = 0;
 800d3ec:	2000      	movs	r0, #0
 800d3ee:	7158      	strb	r0, [r3, #5]
    mu->mu_level = 0;
 800d3f0:	80d8      	strh	r0, [r3, #6]
    mu->mu_owner = NULL;
 800d3f2:	6098      	str	r0, [r3, #8]
    SLIST_FIRST(&mu->mu_head) = NULL;
 800d3f4:	6018      	str	r0, [r3, #0]
 800d3f6:	4770      	bx	lr
        ret = OS_INVALID_PARM;
 800d3f8:	2003      	movs	r0, #3
    ret = OS_OK;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)ret);
    return ret;
}
 800d3fa:	4770      	bx	lr

0800d3fc <os_mutex_release>:

os_error_t
os_mutex_release(struct os_mutex *mu)
{
 800d3fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)mu);

    /* Check if OS is started */
    if (!g_os_started) {
 800d3fe:	4b2c      	ldr	r3, [pc, #176]	; (800d4b0 <os_mutex_release+0xb4>)
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	2b00      	cmp	r3, #0
 800d404:	d04d      	beq.n	800d4a2 <os_mutex_release+0xa6>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
 800d406:	2800      	cmp	r0, #0
 800d408:	d04d      	beq.n	800d4a6 <os_mutex_release+0xaa>
 800d40a:	4604      	mov	r4, r0
        ret = OS_INVALID_PARM;
        goto done;
    }

    /* We better own this mutex! */
    current = os_sched_get_current_task();
 800d40c:	f000 f97a 	bl	800d704 <os_sched_get_current_task>
 800d410:	4605      	mov	r5, r0
    if ((mu->mu_level == 0) || (mu->mu_owner != current)) {
 800d412:	88e3      	ldrh	r3, [r4, #6]
 800d414:	2b00      	cmp	r3, #0
 800d416:	d048      	beq.n	800d4aa <os_mutex_release+0xae>
 800d418:	68a2      	ldr	r2, [r4, #8]
 800d41a:	4282      	cmp	r2, r0
 800d41c:	d001      	beq.n	800d422 <os_mutex_release+0x26>
        ret = OS_BAD_MUTEX;
 800d41e:	2005      	movs	r0, #5
 800d420:	e040      	b.n	800d4a4 <os_mutex_release+0xa8>
        goto done;
    }

    /* Don't release if nested, just decrement nesting level */
    if (mu->mu_level != 1) {
 800d422:	2b01      	cmp	r3, #1
 800d424:	d003      	beq.n	800d42e <os_mutex_release+0x32>
        --mu->mu_level;
 800d426:	3b01      	subs	r3, #1
 800d428:	80e3      	strh	r3, [r4, #6]
        ret = OS_OK;
 800d42a:	2000      	movs	r0, #0
        goto done;
 800d42c:	e03a      	b.n	800d4a4 <os_mutex_release+0xa8>
    }

    OS_ENTER_CRITICAL(sr);
 800d42e:	f7ff f805 	bl	800c43c <os_arch_save_sr>
 800d432:	4607      	mov	r7, r0

    /* Decrement nesting level (this effectively sets nesting level to 0) */
    --mu->mu_level;
 800d434:	88e3      	ldrh	r3, [r4, #6]
 800d436:	3b01      	subs	r3, #1
 800d438:	80e3      	strh	r3, [r4, #6]

    /* Restore owner task's priority; resort list if different  */
    if (current->t_prio != mu->mu_prio) {
 800d43a:	7aea      	ldrb	r2, [r5, #11]
 800d43c:	7963      	ldrb	r3, [r4, #5]
 800d43e:	429a      	cmp	r2, r3
 800d440:	d11e      	bne.n	800d480 <os_mutex_release+0x84>
        current->t_prio = mu->mu_prio;
        os_sched_resort(current);
    }

    /* Check if tasks are waiting for the mutex */
    rdy = SLIST_FIRST(&mu->mu_head);
 800d442:	6826      	ldr	r6, [r4, #0]
    if (rdy) {
 800d444:	b146      	cbz	r6, 800d458 <os_mutex_release+0x5c>
        /* There is one waiting. Wake it up */
        assert(rdy->t_obj);
 800d446:	69f3      	ldr	r3, [r6, #28]
 800d448:	b1fb      	cbz	r3, 800d48a <os_mutex_release+0x8e>
        os_sched_wakeup(rdy);
 800d44a:	4630      	mov	r0, r6
 800d44c:	f000 f9ae 	bl	800d7ac <os_sched_wakeup>

        /* Set mutex internals */
        mu->mu_level = 1;
 800d450:	2301      	movs	r3, #1
 800d452:	80e3      	strh	r3, [r4, #6]
        mu->mu_prio = rdy->t_prio;
 800d454:	7af3      	ldrb	r3, [r6, #11]
 800d456:	7163      	strb	r3, [r4, #5]
    }

    /* Set new owner of mutex (or NULL if not owned) */
    mu->mu_owner = rdy;
 800d458:	60a6      	str	r6, [r4, #8]
    if (rdy) {
 800d45a:	b116      	cbz	r6, 800d462 <os_mutex_release+0x66>
        rdy->t_lockcnt++;
 800d45c:	7bb3      	ldrb	r3, [r6, #14]
 800d45e:	3301      	adds	r3, #1
 800d460:	73b3      	strb	r3, [r6, #14]
    }
    --current->t_lockcnt;
 800d462:	7bab      	ldrb	r3, [r5, #14]
 800d464:	3b01      	subs	r3, #1
 800d466:	73ab      	strb	r3, [r5, #14]

    /* Do we need to re-schedule? */
    resched = 0;
    rdy = os_sched_next_task();
 800d468:	f000 fa1a 	bl	800d8a0 <os_sched_next_task>
 800d46c:	4604      	mov	r4, r0
    if (rdy != current) {
 800d46e:	4285      	cmp	r5, r0
 800d470:	d010      	beq.n	800d494 <os_mutex_release+0x98>
        resched = 1;
 800d472:	2501      	movs	r5, #1
    }
    OS_EXIT_CRITICAL(sr);
 800d474:	4638      	mov	r0, r7
 800d476:	f7fe ffe7 	bl	800c448 <os_arch_restore_sr>

    /* Re-schedule if needed */
    if (resched) {
 800d47a:	b96d      	cbnz	r5, 800d498 <os_mutex_release+0x9c>
        os_sched(rdy);
    }

    ret = OS_OK;
 800d47c:	2000      	movs	r0, #0
 800d47e:	e011      	b.n	800d4a4 <os_mutex_release+0xa8>
        current->t_prio = mu->mu_prio;
 800d480:	72eb      	strb	r3, [r5, #11]
        os_sched_resort(current);
 800d482:	4628      	mov	r0, r5
 800d484:	f000 fa24 	bl	800d8d0 <os_sched_resort>
 800d488:	e7db      	b.n	800d442 <os_mutex_release+0x46>
        assert(rdy->t_obj);
 800d48a:	461a      	mov	r2, r3
 800d48c:	4619      	mov	r1, r3
 800d48e:	4618      	mov	r0, r3
 800d490:	f7ff f8a0 	bl	800c5d4 <__assert_func>
    resched = 0;
 800d494:	2500      	movs	r5, #0
 800d496:	e7ed      	b.n	800d474 <os_mutex_release+0x78>
        os_sched(rdy);
 800d498:	4620      	mov	r0, r4
 800d49a:	f000 fa07 	bl	800d8ac <os_sched>
    ret = OS_OK;
 800d49e:	2000      	movs	r0, #0
 800d4a0:	e000      	b.n	800d4a4 <os_mutex_release+0xa8>
        ret = OS_NOT_STARTED;
 800d4a2:	2009      	movs	r0, #9

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)ret);
    return ret;
}
 800d4a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ret = OS_INVALID_PARM;
 800d4a6:	2003      	movs	r0, #3
 800d4a8:	e7fc      	b.n	800d4a4 <os_mutex_release+0xa8>
        ret = OS_BAD_MUTEX;
 800d4aa:	2005      	movs	r0, #5
 800d4ac:	e7fa      	b.n	800d4a4 <os_mutex_release+0xa8>
 800d4ae:	bf00      	nop
 800d4b0:	20003904 	.word	0x20003904

0800d4b4 <os_mutex_pend>:
    struct os_task *last;

    os_trace_api_u32x2(OS_TRACE_ID_MUTEX_PEND, (uint32_t)mu, (uint32_t)timeout);

    /* OS must be started when calling this function */
    if (!g_os_started) {
 800d4b4:	4b36      	ldr	r3, [pc, #216]	; (800d590 <os_mutex_pend+0xdc>)
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d065      	beq.n	800d588 <os_mutex_pend+0xd4>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
 800d4bc:	2800      	cmp	r0, #0
 800d4be:	d065      	beq.n	800d58c <os_mutex_pend+0xd8>
{
 800d4c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4c4:	460f      	mov	r7, r1
 800d4c6:	4604      	mov	r4, r0
        ret = OS_INVALID_PARM;
        goto done;
    }

    OS_ENTER_CRITICAL(sr);
 800d4c8:	f7fe ffb8 	bl	800c43c <os_arch_save_sr>
 800d4cc:	4680      	mov	r8, r0

    /* Is this owned? */
    current = os_sched_get_current_task();
 800d4ce:	f000 f919 	bl	800d704 <os_sched_get_current_task>
 800d4d2:	4605      	mov	r5, r0
    if (mu->mu_level == 0) {
 800d4d4:	88e3      	ldrh	r3, [r4, #6]
 800d4d6:	b19b      	cbz	r3, 800d500 <os_mutex_pend+0x4c>
        ret = OS_OK;
        goto done;
    }

    /* Are we owner? */
    if (mu->mu_owner == current) {
 800d4d8:	68a2      	ldr	r2, [r4, #8]
 800d4da:	4282      	cmp	r2, r0
 800d4dc:	d01e      	beq.n	800d51c <os_mutex_pend+0x68>
        ret = OS_OK;
        goto done;
    }

    /* Mutex is not owned by us. If timeout is 0, return immediately */
    if (timeout == 0) {
 800d4de:	b327      	cbz	r7, 800d52a <os_mutex_pend+0x76>
        ret = OS_TIMEOUT;
        goto done;
    }

    /* Change priority of owner if needed */
    if (mu->mu_owner->t_prio > current->t_prio) {
 800d4e0:	7ad1      	ldrb	r1, [r2, #11]
 800d4e2:	7ac3      	ldrb	r3, [r0, #11]
 800d4e4:	4299      	cmp	r1, r3
 800d4e6:	d825      	bhi.n	800d534 <os_mutex_pend+0x80>
        os_sched_resort(mu->mu_owner);
    }

    /* Link current task to tasks waiting for mutex */
    last = NULL;
    if (!SLIST_EMPTY(&mu->mu_head)) {
 800d4e8:	6821      	ldr	r1, [r4, #0]
 800d4ea:	b369      	cbz	r1, 800d548 <os_mutex_pend+0x94>
        /* Insert in priority order */
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
 800d4ec:	460b      	mov	r3, r1
    last = NULL;
 800d4ee:	2600      	movs	r6, #0
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
 800d4f0:	b32b      	cbz	r3, 800d53e <os_mutex_pend+0x8a>
            if (current->t_prio < entry->t_prio) {
 800d4f2:	7ae8      	ldrb	r0, [r5, #11]
 800d4f4:	7ada      	ldrb	r2, [r3, #11]
 800d4f6:	4290      	cmp	r0, r2
 800d4f8:	d321      	bcc.n	800d53e <os_mutex_pend+0x8a>
                break;
            }
            last = entry;
 800d4fa:	461e      	mov	r6, r3
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
 800d4fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d4fe:	e7f7      	b.n	800d4f0 <os_mutex_pend+0x3c>
        mu->mu_owner = current;
 800d500:	60a0      	str	r0, [r4, #8]
        mu->mu_prio  = current->t_prio;
 800d502:	7ac3      	ldrb	r3, [r0, #11]
 800d504:	7163      	strb	r3, [r4, #5]
        current->t_lockcnt++;
 800d506:	7b83      	ldrb	r3, [r0, #14]
 800d508:	3301      	adds	r3, #1
 800d50a:	7383      	strb	r3, [r0, #14]
        mu->mu_level = 1;
 800d50c:	2301      	movs	r3, #1
 800d50e:	80e3      	strh	r3, [r4, #6]
        OS_EXIT_CRITICAL(sr);
 800d510:	4640      	mov	r0, r8
 800d512:	f7fe ff99 	bl	800c448 <os_arch_restore_sr>
        ret = OS_OK;
 800d516:	2000      	movs	r0, #0
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_PEND, (uint32_t)ret);
    return ret;
}
 800d518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ++mu->mu_level;
 800d51c:	3301      	adds	r3, #1
 800d51e:	80e3      	strh	r3, [r4, #6]
        OS_EXIT_CRITICAL(sr);
 800d520:	4640      	mov	r0, r8
 800d522:	f7fe ff91 	bl	800c448 <os_arch_restore_sr>
        ret = OS_OK;
 800d526:	2000      	movs	r0, #0
        goto done;
 800d528:	e7f6      	b.n	800d518 <os_mutex_pend+0x64>
        OS_EXIT_CRITICAL(sr);
 800d52a:	4640      	mov	r0, r8
 800d52c:	f7fe ff8c 	bl	800c448 <os_arch_restore_sr>
        ret = OS_TIMEOUT;
 800d530:	2006      	movs	r0, #6
        goto done;
 800d532:	e7f1      	b.n	800d518 <os_mutex_pend+0x64>
        mu->mu_owner->t_prio = current->t_prio;
 800d534:	72d3      	strb	r3, [r2, #11]
        os_sched_resort(mu->mu_owner);
 800d536:	68a0      	ldr	r0, [r4, #8]
 800d538:	f000 f9ca 	bl	800d8d0 <os_sched_resort>
 800d53c:	e7d4      	b.n	800d4e8 <os_mutex_pend+0x34>
    if (last) {
 800d53e:	b11e      	cbz	r6, 800d548 <os_mutex_pend+0x94>
        SLIST_INSERT_AFTER(last, current, t_obj_list);
 800d540:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 800d542:	64eb      	str	r3, [r5, #76]	; 0x4c
 800d544:	64f5      	str	r5, [r6, #76]	; 0x4c
 800d546:	e001      	b.n	800d54c <os_mutex_pend+0x98>
        SLIST_INSERT_HEAD(&mu->mu_head, current, t_obj_list);
 800d548:	64e9      	str	r1, [r5, #76]	; 0x4c
 800d54a:	6025      	str	r5, [r4, #0]
    current->t_obj = mu;
 800d54c:	61ec      	str	r4, [r5, #28]
    current->t_flags |= OS_TASK_FLAG_MUTEX_WAIT;
 800d54e:	7b6b      	ldrb	r3, [r5, #13]
 800d550:	f043 0304 	orr.w	r3, r3, #4
 800d554:	736b      	strb	r3, [r5, #13]
    os_sched_sleep(current, timeout);
 800d556:	4639      	mov	r1, r7
 800d558:	4628      	mov	r0, r5
 800d55a:	f000 f8df 	bl	800d71c <os_sched_sleep>
    OS_EXIT_CRITICAL(sr);
 800d55e:	4640      	mov	r0, r8
 800d560:	f7fe ff72 	bl	800c448 <os_arch_restore_sr>
    os_sched(NULL);
 800d564:	2000      	movs	r0, #0
 800d566:	f000 f9a1 	bl	800d8ac <os_sched>
    OS_ENTER_CRITICAL(sr);
 800d56a:	f7fe ff67 	bl	800c43c <os_arch_save_sr>
    current->t_flags &= ~OS_TASK_FLAG_MUTEX_WAIT;
 800d56e:	7b6b      	ldrb	r3, [r5, #13]
 800d570:	f023 0304 	bic.w	r3, r3, #4
 800d574:	736b      	strb	r3, [r5, #13]
    OS_EXIT_CRITICAL(sr);
 800d576:	f7fe ff67 	bl	800c448 <os_arch_restore_sr>
    if (mu->mu_owner == current) {
 800d57a:	68a3      	ldr	r3, [r4, #8]
 800d57c:	42ab      	cmp	r3, r5
 800d57e:	d001      	beq.n	800d584 <os_mutex_pend+0xd0>
        ret = OS_TIMEOUT;
 800d580:	2006      	movs	r0, #6
 800d582:	e7c9      	b.n	800d518 <os_mutex_pend+0x64>
        ret = OS_OK;
 800d584:	2000      	movs	r0, #0
 800d586:	e7c7      	b.n	800d518 <os_mutex_pend+0x64>
        ret = OS_NOT_STARTED;
 800d588:	2009      	movs	r0, #9
 800d58a:	4770      	bx	lr
        ret = OS_INVALID_PARM;
 800d58c:	2003      	movs	r0, #3
}
 800d58e:	4770      	bx	lr
 800d590:	20003904 	.word	0x20003904

0800d594 <os_sanity_check_list_lock>:
 *
 * @return 0 on success, error code on failure.
 */
static int
os_sanity_check_list_lock(void)
{
 800d594:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
 800d596:	4b05      	ldr	r3, [pc, #20]	; (800d5ac <os_sanity_check_list_lock+0x18>)
 800d598:	6818      	ldr	r0, [r3, #0]
 800d59a:	b900      	cbnz	r0, 800d59e <os_sanity_check_list_lock+0xa>
    }

    return (0);
err:
    return (rc);
}
 800d59c:	bd08      	pop	{r3, pc}
    rc = os_mutex_pend(&g_os_sanity_check_mu, OS_WAIT_FOREVER);
 800d59e:	f04f 31ff 	mov.w	r1, #4294967295
 800d5a2:	4803      	ldr	r0, [pc, #12]	; (800d5b0 <os_sanity_check_list_lock+0x1c>)
 800d5a4:	f7ff ff86 	bl	800d4b4 <os_mutex_pend>
err:
 800d5a8:	e7f8      	b.n	800d59c <os_sanity_check_list_lock+0x8>
 800d5aa:	bf00      	nop
 800d5ac:	20003904 	.word	0x20003904
 800d5b0:	20003968 	.word	0x20003968

0800d5b4 <os_sanity_check_list_unlock>:
 *
 * @return 0 on success, error code on failure
 */
static int
os_sanity_check_list_unlock(void)
{
 800d5b4:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
 800d5b6:	4b04      	ldr	r3, [pc, #16]	; (800d5c8 <os_sanity_check_list_unlock+0x14>)
 800d5b8:	6818      	ldr	r0, [r3, #0]
 800d5ba:	b900      	cbnz	r0, 800d5be <os_sanity_check_list_unlock+0xa>
    }

    return (0);
err:
    return (rc);
}
 800d5bc:	bd08      	pop	{r3, pc}
    rc = os_mutex_release(&g_os_sanity_check_mu);
 800d5be:	4803      	ldr	r0, [pc, #12]	; (800d5cc <os_sanity_check_list_unlock+0x18>)
 800d5c0:	f7ff ff1c 	bl	800d3fc <os_mutex_release>
err:
 800d5c4:	e7fa      	b.n	800d5bc <os_sanity_check_list_unlock+0x8>
 800d5c6:	bf00      	nop
 800d5c8:	20003904 	.word	0x20003904
 800d5cc:	20003968 	.word	0x20003968

0800d5d0 <os_sanity_check_init>:
    memset(sc, 0, sizeof(*sc));
 800d5d0:	2300      	movs	r3, #0
 800d5d2:	6003      	str	r3, [r0, #0]
 800d5d4:	6043      	str	r3, [r0, #4]
 800d5d6:	6083      	str	r3, [r0, #8]
 800d5d8:	60c3      	str	r3, [r0, #12]
 800d5da:	6103      	str	r3, [r0, #16]
}
 800d5dc:	4618      	mov	r0, r3
 800d5de:	4770      	bx	lr

0800d5e0 <os_sanity_check_register>:
}


int
os_sanity_check_register(struct os_sanity_check *sc)
{
 800d5e0:	b510      	push	{r4, lr}
 800d5e2:	4604      	mov	r4, r0
    int rc;

    rc = os_sanity_check_list_lock();
 800d5e4:	f7ff ffd6 	bl	800d594 <os_sanity_check_list_lock>
    if (rc != OS_OK) {
 800d5e8:	4603      	mov	r3, r0
 800d5ea:	b108      	cbz	r0, 800d5f0 <os_sanity_check_register+0x10>
    }

    return (0);
err:
    return (rc);
}
 800d5ec:	4618      	mov	r0, r3
 800d5ee:	bd10      	pop	{r4, pc}
    SLIST_INSERT_HEAD(&g_os_sanity_check_list, sc, sc_next);
 800d5f0:	4b03      	ldr	r3, [pc, #12]	; (800d600 <os_sanity_check_register+0x20>)
 800d5f2:	681a      	ldr	r2, [r3, #0]
 800d5f4:	6122      	str	r2, [r4, #16]
 800d5f6:	601c      	str	r4, [r3, #0]
    rc = os_sanity_check_list_unlock();
 800d5f8:	f7ff ffdc 	bl	800d5b4 <os_sanity_check_list_unlock>
 800d5fc:	4603      	mov	r3, r0
err:
 800d5fe:	e7f5      	b.n	800d5ec <os_sanity_check_register+0xc>
 800d600:	20002668 	.word	0x20002668

0800d604 <os_sanity_run>:
 * Goes through the sanity check list, and performs sanity checks.  If any of
 * these checks failed, or tasks have not checked in, it resets the processor.
 */
void
os_sanity_run(void)
{
 800d604:	b510      	push	{r4, lr}
    struct os_sanity_check *sc;
    int rc;

    rc = os_sanity_check_list_lock();
 800d606:	f7ff ffc5 	bl	800d594 <os_sanity_check_list_lock>
    if (rc != 0) {
 800d60a:	b910      	cbnz	r0, 800d612 <os_sanity_run+0xe>
        assert(0);
    }

    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
 800d60c:	4b17      	ldr	r3, [pc, #92]	; (800d66c <os_sanity_run+0x68>)
 800d60e:	681c      	ldr	r4, [r3, #0]
 800d610:	e00e      	b.n	800d630 <os_sanity_run+0x2c>
        assert(0);
 800d612:	2300      	movs	r3, #0
 800d614:	461a      	mov	r2, r3
 800d616:	4619      	mov	r1, r3
 800d618:	4618      	mov	r0, r3
 800d61a:	f7fe ffdb 	bl	800c5d4 <__assert_func>
                sc->sc_checkin_last = os_time_get();
                continue;
            }
        }

        if (OS_TIME_TICK_GT(os_time_get(),
 800d61e:	f000 fad5 	bl	800dbcc <os_time_get>
 800d622:	6823      	ldr	r3, [r4, #0]
 800d624:	6862      	ldr	r2, [r4, #4]
 800d626:	4413      	add	r3, r2
 800d628:	1ac3      	subs	r3, r0, r3
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	dc0d      	bgt.n	800d64a <os_sanity_run+0x46>
    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
 800d62e:	6924      	ldr	r4, [r4, #16]
 800d630:	b18c      	cbz	r4, 800d656 <os_sanity_run+0x52>
        if (sc->sc_func) {
 800d632:	68a3      	ldr	r3, [r4, #8]
 800d634:	2b00      	cmp	r3, #0
 800d636:	d0f2      	beq.n	800d61e <os_sanity_run+0x1a>
            rc = sc->sc_func(sc, sc->sc_arg);
 800d638:	68e1      	ldr	r1, [r4, #12]
 800d63a:	4620      	mov	r0, r4
 800d63c:	4798      	blx	r3
            if (rc == OS_OK) {
 800d63e:	2800      	cmp	r0, #0
 800d640:	d1ed      	bne.n	800d61e <os_sanity_run+0x1a>
                sc->sc_checkin_last = os_time_get();
 800d642:	f000 fac3 	bl	800dbcc <os_time_get>
 800d646:	6020      	str	r0, [r4, #0]
                continue;
 800d648:	e7f1      	b.n	800d62e <os_sanity_run+0x2a>
                    sc->sc_checkin_last + sc->sc_checkin_itvl)) {
            assert(0);
 800d64a:	2300      	movs	r3, #0
 800d64c:	461a      	mov	r2, r3
 800d64e:	4619      	mov	r1, r3
 800d650:	4618      	mov	r0, r3
 800d652:	f7fe ffbf 	bl	800c5d4 <__assert_func>
        }
    }

    rc = os_sanity_check_list_unlock();
 800d656:	f7ff ffad 	bl	800d5b4 <os_sanity_check_list_unlock>
    if (rc != 0) {
 800d65a:	b900      	cbnz	r0, 800d65e <os_sanity_run+0x5a>
        assert(0);
    }
}
 800d65c:	bd10      	pop	{r4, pc}
        assert(0);
 800d65e:	2300      	movs	r3, #0
 800d660:	461a      	mov	r2, r3
 800d662:	4619      	mov	r1, r3
 800d664:	4618      	mov	r0, r3
 800d666:	f7fe ffb5 	bl	800c5d4 <__assert_func>
 800d66a:	bf00      	nop
 800d66c:	20002668 	.word	0x20002668

0800d670 <os_sanity_init>:

int
os_sanity_init(void)
{
 800d670:	b508      	push	{r3, lr}
    int rc;

    rc = os_mutex_init(&g_os_sanity_check_mu);
 800d672:	4802      	ldr	r0, [pc, #8]	; (800d67c <os_sanity_init+0xc>)
 800d674:	f7ff feb8 	bl	800d3e8 <os_mutex_init>
    }

    return (0);
err:
    return (rc);
}
 800d678:	bd08      	pop	{r3, pc}
 800d67a:	bf00      	nop
 800d67c:	20003968 	.word	0x20003968

0800d680 <os_sched_insert>:
{
    struct os_task *entry;
    os_sr_t sr;
    os_error_t rc;

    if (t->t_state != OS_TASK_READY) {
 800d680:	7b03      	ldrb	r3, [r0, #12]
 800d682:	2b01      	cmp	r3, #1
 800d684:	d001      	beq.n	800d68a <os_sched_insert+0xa>
    }
    OS_EXIT_CRITICAL(sr);

    return (0);
err:
    return (rc);
 800d686:	2002      	movs	r0, #2
}
 800d688:	4770      	bx	lr
{
 800d68a:	b510      	push	{r4, lr}
 800d68c:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
 800d68e:	f7fe fed5 	bl	800c43c <os_arch_save_sr>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
 800d692:	4b0f      	ldr	r3, [pc, #60]	; (800d6d0 <os_sched_insert+0x50>)
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	b12b      	cbz	r3, 800d6a4 <os_sched_insert+0x24>
        if (t->t_prio < entry->t_prio) {
 800d698:	7ae1      	ldrb	r1, [r4, #11]
 800d69a:	7ada      	ldrb	r2, [r3, #11]
 800d69c:	4291      	cmp	r1, r2
 800d69e:	d301      	bcc.n	800d6a4 <os_sched_insert+0x24>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
 800d6a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d6a2:	e7f8      	b.n	800d696 <os_sched_insert+0x16>
    if (entry) {
 800d6a4:	b153      	cbz	r3, 800d6bc <os_sched_insert+0x3c>
        TAILQ_INSERT_BEFORE(entry, (struct os_task *) t, t_os_list);
 800d6a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d6a8:	64a2      	str	r2, [r4, #72]	; 0x48
 800d6aa:	6463      	str	r3, [r4, #68]	; 0x44
 800d6ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d6ae:	6014      	str	r4, [r2, #0]
 800d6b0:	3444      	adds	r4, #68	; 0x44
 800d6b2:	649c      	str	r4, [r3, #72]	; 0x48
    OS_EXIT_CRITICAL(sr);
 800d6b4:	f7fe fec8 	bl	800c448 <os_arch_restore_sr>
    return (0);
 800d6b8:	2000      	movs	r0, #0
}
 800d6ba:	bd10      	pop	{r4, pc}
        TAILQ_INSERT_TAIL(&g_os_run_list, (struct os_task *) t, t_os_list);
 800d6bc:	2300      	movs	r3, #0
 800d6be:	6463      	str	r3, [r4, #68]	; 0x44
 800d6c0:	4b03      	ldr	r3, [pc, #12]	; (800d6d0 <os_sched_insert+0x50>)
 800d6c2:	685a      	ldr	r2, [r3, #4]
 800d6c4:	64a2      	str	r2, [r4, #72]	; 0x48
 800d6c6:	6014      	str	r4, [r2, #0]
 800d6c8:	3444      	adds	r4, #68	; 0x44
 800d6ca:	605c      	str	r4, [r3, #4]
 800d6cc:	e7f2      	b.n	800d6b4 <os_sched_insert+0x34>
 800d6ce:	bf00      	nop
 800d6d0:	20000234 	.word	0x20000234

0800d6d4 <os_sched_ctx_sw_hook>:

void
os_sched_ctx_sw_hook(struct os_task *next_t)
{
 800d6d4:	b410      	push	{r4}
    top = g_current_task->t_stacktop - g_current_task->t_stacksize;
    for (i = 0; i < MYNEWT_VAL(OS_CTX_SW_STACK_GUARD); i++) {
        assert(top[i] == OS_STACK_PATTERN);
    }
#endif
    next_t->t_ctx_sw_cnt++;
 800d6d6:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800d6d8:	3301      	adds	r3, #1
 800d6da:	63c3      	str	r3, [r0, #60]	; 0x3c
    g_current_task->t_run_time += g_os_time - g_os_last_ctx_sw_time;
 800d6dc:	4b06      	ldr	r3, [pc, #24]	; (800d6f8 <os_sched_ctx_sw_hook+0x24>)
 800d6de:	681c      	ldr	r4, [r3, #0]
 800d6e0:	4b06      	ldr	r3, [pc, #24]	; (800d6fc <os_sched_ctx_sw_hook+0x28>)
 800d6e2:	6818      	ldr	r0, [r3, #0]
 800d6e4:	4906      	ldr	r1, [pc, #24]	; (800d700 <os_sched_ctx_sw_hook+0x2c>)
 800d6e6:	680b      	ldr	r3, [r1, #0]
 800d6e8:	1ac2      	subs	r2, r0, r3
 800d6ea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d6ec:	4413      	add	r3, r2
 800d6ee:	63a3      	str	r3, [r4, #56]	; 0x38
    g_os_last_ctx_sw_time = g_os_time;
 800d6f0:	6008      	str	r0, [r1, #0]
}
 800d6f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d6f6:	4770      	bx	lr
 800d6f8:	20003974 	.word	0x20003974
 800d6fc:	20003988 	.word	0x20003988
 800d700:	20003978 	.word	0x20003978

0800d704 <os_sched_get_current_task>:

struct os_task *
os_sched_get_current_task(void)
{
    return (g_current_task);
}
 800d704:	4b01      	ldr	r3, [pc, #4]	; (800d70c <os_sched_get_current_task+0x8>)
 800d706:	6818      	ldr	r0, [r3, #0]
 800d708:	4770      	bx	lr
 800d70a:	bf00      	nop
 800d70c:	20003974 	.word	0x20003974

0800d710 <os_sched_set_current_task>:
 * @param t Pointer to currently running task.
 */
void
os_sched_set_current_task(struct os_task *t)
{
    g_current_task = t;
 800d710:	4b01      	ldr	r3, [pc, #4]	; (800d718 <os_sched_set_current_task+0x8>)
 800d712:	6018      	str	r0, [r3, #0]
}
 800d714:	4770      	bx	lr
 800d716:	bf00      	nop
 800d718:	20003974 	.word	0x20003974

0800d71c <os_sched_sleep>:
 * NOTE: must be called with interrupts disabled! This function does not call
 * the scheduler
 */
int
os_sched_sleep(struct os_task *t, os_time_t nticks)
{
 800d71c:	b538      	push	{r3, r4, r5, lr}
 800d71e:	4604      	mov	r4, r0
 800d720:	460d      	mov	r5, r1
    struct os_task *entry;

    entry = NULL;

    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
 800d722:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800d724:	b1d3      	cbz	r3, 800d75c <os_sched_sleep+0x40>
 800d726:	6c82      	ldr	r2, [r0, #72]	; 0x48
 800d728:	649a      	str	r2, [r3, #72]	; 0x48
 800d72a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d72c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800d72e:	601a      	str	r2, [r3, #0]
    t->t_state = OS_TASK_SLEEP;
 800d730:	2302      	movs	r3, #2
 800d732:	7323      	strb	r3, [r4, #12]
    t->t_next_wakeup = os_time_get() + nticks;
 800d734:	f000 fa4a 	bl	800dbcc <os_time_get>
 800d738:	4428      	add	r0, r5
 800d73a:	6360      	str	r0, [r4, #52]	; 0x34
    if (nticks == OS_TIMEOUT_NEVER) {
 800d73c:	f1b5 3fff 	cmp.w	r5, #4294967295
 800d740:	d010      	beq.n	800d764 <os_sched_sleep+0x48>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
    } else {
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
 800d742:	4b18      	ldr	r3, [pc, #96]	; (800d7a4 <os_sched_sleep+0x88>)
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	b1d3      	cbz	r3, 800d77e <os_sched_sleep+0x62>
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
 800d748:	7b5a      	ldrb	r2, [r3, #13]
 800d74a:	f012 0f01 	tst.w	r2, #1
 800d74e:	d116      	bne.n	800d77e <os_sched_sleep+0x62>
                    OS_TIME_TICK_GT(entry->t_next_wakeup, t->t_next_wakeup)) {
 800d750:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d752:	1a12      	subs	r2, r2, r0
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
 800d754:	2a00      	cmp	r2, #0
 800d756:	dc12      	bgt.n	800d77e <os_sched_sleep+0x62>
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
 800d758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d75a:	e7f4      	b.n	800d746 <os_sched_sleep+0x2a>
    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
 800d75c:	6c82      	ldr	r2, [r0, #72]	; 0x48
 800d75e:	4b12      	ldr	r3, [pc, #72]	; (800d7a8 <os_sched_sleep+0x8c>)
 800d760:	605a      	str	r2, [r3, #4]
 800d762:	e7e2      	b.n	800d72a <os_sched_sleep+0xe>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
 800d764:	7b63      	ldrb	r3, [r4, #13]
 800d766:	f043 0301 	orr.w	r3, r3, #1
 800d76a:	7363      	strb	r3, [r4, #13]
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
 800d76c:	2300      	movs	r3, #0
 800d76e:	6463      	str	r3, [r4, #68]	; 0x44
 800d770:	4b0c      	ldr	r3, [pc, #48]	; (800d7a4 <os_sched_sleep+0x88>)
 800d772:	685a      	ldr	r2, [r3, #4]
 800d774:	64a2      	str	r2, [r4, #72]	; 0x48
 800d776:	6014      	str	r4, [r2, #0]
 800d778:	3444      	adds	r4, #68	; 0x44
 800d77a:	605c      	str	r4, [r3, #4]
 800d77c:	e007      	b.n	800d78e <os_sched_sleep+0x72>
                break;
            }
        }
        if (entry) {
 800d77e:	b143      	cbz	r3, 800d792 <os_sched_sleep+0x76>
            TAILQ_INSERT_BEFORE(entry, t, t_os_list);
 800d780:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d782:	64a2      	str	r2, [r4, #72]	; 0x48
 800d784:	6463      	str	r3, [r4, #68]	; 0x44
 800d786:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d788:	6014      	str	r4, [r2, #0]
 800d78a:	3444      	adds	r4, #68	; 0x44
 800d78c:	649c      	str	r4, [r3, #72]	; 0x48
        }
    }

    os_trace_task_stop_ready(t, OS_TASK_SLEEP);
    return (0);
}
 800d78e:	2000      	movs	r0, #0
 800d790:	bd38      	pop	{r3, r4, r5, pc}
            TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
 800d792:	2300      	movs	r3, #0
 800d794:	6463      	str	r3, [r4, #68]	; 0x44
 800d796:	4b03      	ldr	r3, [pc, #12]	; (800d7a4 <os_sched_sleep+0x88>)
 800d798:	685a      	ldr	r2, [r3, #4]
 800d79a:	64a2      	str	r2, [r4, #72]	; 0x48
 800d79c:	6014      	str	r4, [r2, #0]
 800d79e:	3444      	adds	r4, #68	; 0x44
 800d7a0:	605c      	str	r4, [r3, #4]
 800d7a2:	e7f4      	b.n	800d78e <os_sched_sleep+0x72>
 800d7a4:	2000023c 	.word	0x2000023c
 800d7a8:	20000234 	.word	0x20000234

0800d7ac <os_sched_wakeup>:
 *
 * NOTE: This function must be called with interrupts disabled.
 */
int
os_sched_wakeup(struct os_task *t)
{
 800d7ac:	b508      	push	{r3, lr}
    struct os_task_obj *os_obj;

    assert(t->t_state == OS_TASK_SLEEP);
 800d7ae:	7b03      	ldrb	r3, [r0, #12]
 800d7b0:	2b02      	cmp	r3, #2
 800d7b2:	d108      	bne.n	800d7c6 <os_sched_wakeup+0x1a>

    /* Remove self from object list if waiting on one */
    if (t->t_obj) {
 800d7b4:	69c3      	ldr	r3, [r0, #28]
 800d7b6:	b1db      	cbz	r3, 800d7f0 <os_sched_wakeup+0x44>
        os_obj = (struct os_task_obj *)t->t_obj;
        assert(!SLIST_EMPTY(&os_obj->obj_head));
 800d7b8:	681a      	ldr	r2, [r3, #0]
 800d7ba:	b152      	cbz	r2, 800d7d2 <os_sched_wakeup+0x26>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
 800d7bc:	4282      	cmp	r2, r0
 800d7be:	d10f      	bne.n	800d7e0 <os_sched_wakeup+0x34>
 800d7c0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800d7c2:	601a      	str	r2, [r3, #0]
 800d7c4:	e011      	b.n	800d7ea <os_sched_wakeup+0x3e>
    assert(t->t_state == OS_TASK_SLEEP);
 800d7c6:	2300      	movs	r3, #0
 800d7c8:	461a      	mov	r2, r3
 800d7ca:	4619      	mov	r1, r3
 800d7cc:	4618      	mov	r0, r3
 800d7ce:	f7fe ff01 	bl	800c5d4 <__assert_func>
        assert(!SLIST_EMPTY(&os_obj->obj_head));
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	461a      	mov	r2, r3
 800d7d6:	4619      	mov	r1, r3
 800d7d8:	4618      	mov	r0, r3
 800d7da:	f7fe fefb 	bl	800c5d4 <__assert_func>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
 800d7de:	461a      	mov	r2, r3
 800d7e0:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800d7e2:	4283      	cmp	r3, r0
 800d7e4:	d1fb      	bne.n	800d7de <os_sched_wakeup+0x32>
 800d7e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d7e8:	64d3      	str	r3, [r2, #76]	; 0x4c
        SLIST_NEXT(t, t_obj_list) = NULL;
 800d7ea:	2300      	movs	r3, #0
 800d7ec:	64c3      	str	r3, [r0, #76]	; 0x4c
        t->t_obj = NULL;
 800d7ee:	61c3      	str	r3, [r0, #28]
    }

    /* Remove task from sleep list */
    t->t_state = OS_TASK_READY;
 800d7f0:	2301      	movs	r3, #1
 800d7f2:	7303      	strb	r3, [r0, #12]
    t->t_next_wakeup = 0;
 800d7f4:	2300      	movs	r3, #0
 800d7f6:	6343      	str	r3, [r0, #52]	; 0x34
    t->t_flags &= ~OS_TASK_FLAG_NO_TIMEOUT;
 800d7f8:	7b43      	ldrb	r3, [r0, #13]
 800d7fa:	f023 0301 	bic.w	r3, r3, #1
 800d7fe:	7343      	strb	r3, [r0, #13]
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
 800d800:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800d802:	b143      	cbz	r3, 800d816 <os_sched_wakeup+0x6a>
 800d804:	6c82      	ldr	r2, [r0, #72]	; 0x48
 800d806:	649a      	str	r2, [r3, #72]	; 0x48
 800d808:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800d80a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d80c:	601a      	str	r2, [r3, #0]
    os_sched_insert(t);
 800d80e:	f7ff ff37 	bl	800d680 <os_sched_insert>

    os_trace_task_start_ready(t);

    return (0);
}
 800d812:	2000      	movs	r0, #0
 800d814:	bd08      	pop	{r3, pc}
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
 800d816:	6c82      	ldr	r2, [r0, #72]	; 0x48
 800d818:	4b01      	ldr	r3, [pc, #4]	; (800d820 <os_sched_wakeup+0x74>)
 800d81a:	605a      	str	r2, [r3, #4]
 800d81c:	e7f4      	b.n	800d808 <os_sched_wakeup+0x5c>
 800d81e:	bf00      	nop
 800d820:	2000023c 	.word	0x2000023c

0800d824 <os_sched_os_timer_exp>:
 * removed from the sleep list and added to the run list.
 *
 */
void
os_sched_os_timer_exp(void)
{
 800d824:	b570      	push	{r4, r5, r6, lr}
    struct os_task *t;
    struct os_task *next;
    os_time_t now;
    os_sr_t sr;

    now = os_time_get();
 800d826:	f000 f9d1 	bl	800dbcc <os_time_get>
 800d82a:	4605      	mov	r5, r0

    OS_ENTER_CRITICAL(sr);
 800d82c:	f7fe fe06 	bl	800c43c <os_arch_save_sr>
 800d830:	4606      	mov	r6, r0

    /*
     * Wakeup any tasks that have their sleep timer expired
     */
    t = TAILQ_FIRST(&g_os_sleep_list);
 800d832:	4b0a      	ldr	r3, [pc, #40]	; (800d85c <os_sched_os_timer_exp+0x38>)
 800d834:	6818      	ldr	r0, [r3, #0]
    while (t) {
 800d836:	b160      	cbz	r0, 800d852 <os_sched_os_timer_exp+0x2e>
        /* If task waiting forever, do not check next wakeup time */
        if (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT) {
 800d838:	7b43      	ldrb	r3, [r0, #13]
 800d83a:	f013 0f01 	tst.w	r3, #1
 800d83e:	d108      	bne.n	800d852 <os_sched_os_timer_exp+0x2e>
            break;
        }
        next = TAILQ_NEXT(t, t_os_list);
 800d840:	6c44      	ldr	r4, [r0, #68]	; 0x44
        if (OS_TIME_TICK_GEQ(now, t->t_next_wakeup)) {
 800d842:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800d844:	1aeb      	subs	r3, r5, r3
 800d846:	2b00      	cmp	r3, #0
 800d848:	db03      	blt.n	800d852 <os_sched_os_timer_exp+0x2e>
            os_sched_wakeup(t);
 800d84a:	f7ff ffaf 	bl	800d7ac <os_sched_wakeup>
        } else {
            break;
        }
        t = next;
 800d84e:	4620      	mov	r0, r4
 800d850:	e7f1      	b.n	800d836 <os_sched_os_timer_exp+0x12>
    }

    OS_EXIT_CRITICAL(sr);
 800d852:	4630      	mov	r0, r6
 800d854:	f7fe fdf8 	bl	800c448 <os_arch_restore_sr>
}
 800d858:	bd70      	pop	{r4, r5, r6, pc}
 800d85a:	bf00      	nop
 800d85c:	2000023c 	.word	0x2000023c

0800d860 <os_sched_wakeup_ticks>:
 * Return the number of ticks until the first sleep timer expires.If there are
 * no such tasks then return OS_TIMEOUT_NEVER instead.
 */
os_time_t
os_sched_wakeup_ticks(os_time_t now)
{
 800d860:	b510      	push	{r4, lr}
 800d862:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_task *t;

    OS_ASSERT_CRITICAL();
 800d864:	f7fe fdf3 	bl	800c44e <os_arch_in_critical>
 800d868:	b150      	cbz	r0, 800d880 <os_sched_wakeup_ticks+0x20>

    t = TAILQ_FIRST(&g_os_sleep_list);
 800d86a:	4b0c      	ldr	r3, [pc, #48]	; (800d89c <os_sched_wakeup_ticks+0x3c>)
 800d86c:	681b      	ldr	r3, [r3, #0]
    if (t == NULL || (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT)) {
 800d86e:	b17b      	cbz	r3, 800d890 <os_sched_wakeup_ticks+0x30>
 800d870:	7b5a      	ldrb	r2, [r3, #13]
 800d872:	f012 0f01 	tst.w	r2, #1
 800d876:	d10e      	bne.n	800d896 <os_sched_wakeup_ticks+0x36>
        rt = OS_TIMEOUT_NEVER;
    } else if (OS_TIME_TICK_GEQ(t->t_next_wakeup, now)) {
 800d878:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800d87a:	1b00      	subs	r0, r0, r4
 800d87c:	d406      	bmi.n	800d88c <os_sched_wakeup_ticks+0x2c>
        rt = t->t_next_wakeup - now;
    } else {
        rt = 0;     /* wakeup time was in the past */
    }
    return (rt);
}
 800d87e:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
 800d880:	2300      	movs	r3, #0
 800d882:	461a      	mov	r2, r3
 800d884:	4619      	mov	r1, r3
 800d886:	4618      	mov	r0, r3
 800d888:	f7fe fea4 	bl	800c5d4 <__assert_func>
        rt = 0;     /* wakeup time was in the past */
 800d88c:	2000      	movs	r0, #0
 800d88e:	e7f6      	b.n	800d87e <os_sched_wakeup_ticks+0x1e>
        rt = OS_TIMEOUT_NEVER;
 800d890:	f04f 30ff 	mov.w	r0, #4294967295
 800d894:	e7f3      	b.n	800d87e <os_sched_wakeup_ticks+0x1e>
 800d896:	f04f 30ff 	mov.w	r0, #4294967295
    return (rt);
 800d89a:	e7f0      	b.n	800d87e <os_sched_wakeup_ticks+0x1e>
 800d89c:	2000023c 	.word	0x2000023c

0800d8a0 <os_sched_next_task>:
 */
struct os_task *
os_sched_next_task(void)
{
    return (TAILQ_FIRST(&g_os_run_list));
}
 800d8a0:	4b01      	ldr	r3, [pc, #4]	; (800d8a8 <os_sched_next_task+0x8>)
 800d8a2:	6818      	ldr	r0, [r3, #0]
 800d8a4:	4770      	bx	lr
 800d8a6:	bf00      	nop
 800d8a8:	20000234 	.word	0x20000234

0800d8ac <os_sched>:
{
 800d8ac:	b538      	push	{r3, r4, r5, lr}
 800d8ae:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
 800d8b0:	f7fe fdc4 	bl	800c43c <os_arch_save_sr>
 800d8b4:	4605      	mov	r5, r0
    if (!next_t) {
 800d8b6:	b134      	cbz	r4, 800d8c6 <os_sched+0x1a>
    os_arch_ctx_sw(next_t);
 800d8b8:	4620      	mov	r0, r4
 800d8ba:	f7fe fdb5 	bl	800c428 <os_arch_ctx_sw>
    OS_EXIT_CRITICAL(sr);
 800d8be:	4628      	mov	r0, r5
 800d8c0:	f7fe fdc2 	bl	800c448 <os_arch_restore_sr>
}
 800d8c4:	bd38      	pop	{r3, r4, r5, pc}
        next_t = os_sched_next_task();
 800d8c6:	f7ff ffeb 	bl	800d8a0 <os_sched_next_task>
 800d8ca:	4604      	mov	r4, r0
 800d8cc:	e7f4      	b.n	800d8b8 <os_sched+0xc>
	...

0800d8d0 <os_sched_resort>:
 * NOTE: this function expects interrupts to be disabled so they
 * are not disabled here.
 */
void
os_sched_resort(struct os_task *t)
{
 800d8d0:	b508      	push	{r3, lr}
    if (t->t_state == OS_TASK_READY) {
 800d8d2:	7b03      	ldrb	r3, [r0, #12]
 800d8d4:	2b01      	cmp	r3, #1
 800d8d6:	d000      	beq.n	800d8da <os_sched_resort+0xa>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
        os_sched_insert(t);
    }
}
 800d8d8:	bd08      	pop	{r3, pc}
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
 800d8da:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800d8dc:	b13b      	cbz	r3, 800d8ee <os_sched_resort+0x1e>
 800d8de:	6c82      	ldr	r2, [r0, #72]	; 0x48
 800d8e0:	649a      	str	r2, [r3, #72]	; 0x48
 800d8e2:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800d8e4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d8e6:	601a      	str	r2, [r3, #0]
        os_sched_insert(t);
 800d8e8:	f7ff feca 	bl	800d680 <os_sched_insert>
}
 800d8ec:	e7f4      	b.n	800d8d8 <os_sched_resort+0x8>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
 800d8ee:	6c82      	ldr	r2, [r0, #72]	; 0x48
 800d8f0:	4b01      	ldr	r3, [pc, #4]	; (800d8f8 <os_sched_resort+0x28>)
 800d8f2:	605a      	str	r2, [r3, #4]
 800d8f4:	e7f5      	b.n	800d8e2 <os_sched_resort+0x12>
 800d8f6:	bf00      	nop
 800d8f8:	20000234 	.word	0x20000234

0800d8fc <os_sem_init>:
{
    os_error_t ret;

    os_trace_api_u32x2(OS_TRACE_ID_SEM_INIT, (uint32_t)sem, (uint32_t)tokens);

    if (!sem) {
 800d8fc:	4603      	mov	r3, r0
 800d8fe:	b118      	cbz	r0, 800d908 <os_sem_init+0xc>
        ret = OS_INVALID_PARM;
        goto done;
    }

    sem->sem_tokens = tokens;
 800d900:	80c1      	strh	r1, [r0, #6]
    SLIST_FIRST(&sem->sem_head) = NULL;
 800d902:	2000      	movs	r0, #0
 800d904:	6018      	str	r0, [r3, #0]
 800d906:	4770      	bx	lr
        ret = OS_INVALID_PARM;
 800d908:	2003      	movs	r0, #3
    ret = OS_OK;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_INIT, (uint32_t)ret);
    return ret;
}
 800d90a:	4770      	bx	lr

0800d90c <os_sem_release>:

os_error_t
os_sem_release(struct os_sem *sem)
{
 800d90c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_SEM_RELEASE, (uint32_t)sem);

    /* OS must be started to release semaphores */
    if (!g_os_started) {
 800d90e:	4b17      	ldr	r3, [pc, #92]	; (800d96c <os_sem_release+0x60>)
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	b33b      	cbz	r3, 800d964 <os_sem_release+0x58>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid semaphore */
    if (!sem) {
 800d914:	b340      	cbz	r0, 800d968 <os_sem_release+0x5c>
 800d916:	4604      	mov	r4, r0
        goto done;
    }

    /* Get current task */
    resched = 0;
    current = os_sched_get_current_task();
 800d918:	f7ff fef4 	bl	800d704 <os_sched_get_current_task>
 800d91c:	4607      	mov	r7, r0

    OS_ENTER_CRITICAL(sr);
 800d91e:	f7fe fd8d 	bl	800c43c <os_arch_save_sr>
 800d922:	4606      	mov	r6, r0

    /* Check if tasks are waiting for the semaphore */
    rdy = SLIST_FIRST(&sem->sem_head);
 800d924:	6825      	ldr	r5, [r4, #0]
    if (rdy) {
 800d926:	b165      	cbz	r5, 800d942 <os_sem_release+0x36>
        /* Clear flag that we are waiting on the semaphore; wake up task */
        rdy->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
 800d928:	7b6b      	ldrb	r3, [r5, #13]
 800d92a:	f023 0302 	bic.w	r3, r3, #2
 800d92e:	736b      	strb	r3, [r5, #13]
        os_sched_wakeup(rdy);
 800d930:	4628      	mov	r0, r5
 800d932:	f7ff ff3b 	bl	800d7ac <os_sched_wakeup>

        /* Schedule if waiting task higher priority */
        if (current->t_prio > rdy->t_prio) {
 800d936:	7afa      	ldrb	r2, [r7, #11]
 800d938:	7aeb      	ldrb	r3, [r5, #11]
 800d93a:	429a      	cmp	r2, r3
 800d93c:	d80b      	bhi.n	800d956 <os_sem_release+0x4a>
    resched = 0;
 800d93e:	2400      	movs	r4, #0
 800d940:	e003      	b.n	800d94a <os_sem_release+0x3e>
            resched = 1;
        }
    } else {
        /* Add to the number of tokens */
        sem->sem_tokens++;
 800d942:	88e3      	ldrh	r3, [r4, #6]
 800d944:	3301      	adds	r3, #1
 800d946:	80e3      	strh	r3, [r4, #6]
    resched = 0;
 800d948:	2400      	movs	r4, #0
    }

    OS_EXIT_CRITICAL(sr);
 800d94a:	4630      	mov	r0, r6
 800d94c:	f7fe fd7c 	bl	800c448 <os_arch_restore_sr>

    /* Re-schedule if needed */
    if (resched) {
 800d950:	b91c      	cbnz	r4, 800d95a <os_sem_release+0x4e>
        os_sched(rdy);
    }

    ret = OS_OK;
 800d952:	2000      	movs	r0, #0

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_RELEASE, (uint32_t)ret);
    return ret;
}
 800d954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            resched = 1;
 800d956:	2401      	movs	r4, #1
 800d958:	e7f7      	b.n	800d94a <os_sem_release+0x3e>
        os_sched(rdy);
 800d95a:	4628      	mov	r0, r5
 800d95c:	f7ff ffa6 	bl	800d8ac <os_sched>
    ret = OS_OK;
 800d960:	2000      	movs	r0, #0
 800d962:	e7f7      	b.n	800d954 <os_sem_release+0x48>
        ret = OS_NOT_STARTED;
 800d964:	2009      	movs	r0, #9
 800d966:	e7f5      	b.n	800d954 <os_sem_release+0x48>
        ret = OS_INVALID_PARM;
 800d968:	2003      	movs	r0, #3
 800d96a:	e7f3      	b.n	800d954 <os_sem_release+0x48>
 800d96c:	20003904 	.word	0x20003904

0800d970 <os_sem_pend>:

os_error_t
os_sem_pend(struct os_sem *sem, os_time_t timeout)
{
 800d970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32x2(OS_TRACE_ID_SEM_PEND, (uint32_t)sem, (uint32_t)timeout);

    /* Check if OS is started */
    if (!g_os_started) {
 800d972:	4b2c      	ldr	r3, [pc, #176]	; (800da24 <os_sem_pend+0xb4>)
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	2b00      	cmp	r3, #0
 800d978:	d04f      	beq.n	800da1a <os_sem_pend+0xaa>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid semaphore */
    if (!sem) {
 800d97a:	2800      	cmp	r0, #0
 800d97c:	d04f      	beq.n	800da1e <os_sem_pend+0xae>
 800d97e:	460d      	mov	r5, r1
 800d980:	4604      	mov	r4, r0
        goto done;
    }

    /* Assume we dont have to put task to sleep; get current task */
    sched = 0;
    current = os_sched_get_current_task();
 800d982:	f7ff febf 	bl	800d704 <os_sched_get_current_task>
 800d986:	4606      	mov	r6, r0

    OS_ENTER_CRITICAL(sr);
 800d988:	f7fe fd58 	bl	800c43c <os_arch_save_sr>
 800d98c:	4607      	mov	r7, r0

    /*
     * If there is a token available, take it. If no token, either return
     * with error if timeout was 0 or put this task to sleep.
     */
    if (sem->sem_tokens != 0) {
 800d98e:	88e3      	ldrh	r3, [r4, #6]
 800d990:	b14b      	cbz	r3, 800d9a6 <os_sem_pend+0x36>
        sem->sem_tokens--;
 800d992:	3b01      	subs	r3, #1
 800d994:	80e3      	strh	r3, [r4, #6]
        ret = OS_OK;
 800d996:	2400      	movs	r4, #0
    sched = 0;
 800d998:	4625      	mov	r5, r4
        /* We will put this task to sleep */
        sched = 1;
        os_sched_sleep(current, timeout);
    }

    OS_EXIT_CRITICAL(sr);
 800d99a:	4638      	mov	r0, r7
 800d99c:	f7fe fd54 	bl	800c448 <os_arch_restore_sr>

    if (sched) {
 800d9a0:	bb45      	cbnz	r5, 800d9f4 <os_sem_pend+0x84>
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_PEND, (uint32_t)ret);
    return ret;
}
 800d9a2:	4620      	mov	r0, r4
 800d9a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if (timeout == 0) {
 800d9a6:	b315      	cbz	r5, 800d9ee <os_sem_pend+0x7e>
        current->t_obj = sem;
 800d9a8:	61f4      	str	r4, [r6, #28]
        current->t_flags |= OS_TASK_FLAG_SEM_WAIT;
 800d9aa:	7b73      	ldrb	r3, [r6, #13]
 800d9ac:	f043 0302 	orr.w	r3, r3, #2
 800d9b0:	7373      	strb	r3, [r6, #13]
        if (!SLIST_EMPTY(&sem->sem_head)) {
 800d9b2:	f8d4 c000 	ldr.w	ip, [r4]
 800d9b6:	f1bc 0f00 	cmp.w	ip, #0
 800d9ba:	d00e      	beq.n	800d9da <os_sem_pend+0x6a>
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
 800d9bc:	4663      	mov	r3, ip
        last = NULL;
 800d9be:	2000      	movs	r0, #0
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
 800d9c0:	b133      	cbz	r3, 800d9d0 <os_sem_pend+0x60>
                if (current->t_prio < entry->t_prio) {
 800d9c2:	7af1      	ldrb	r1, [r6, #11]
 800d9c4:	7ada      	ldrb	r2, [r3, #11]
 800d9c6:	4291      	cmp	r1, r2
 800d9c8:	d302      	bcc.n	800d9d0 <os_sem_pend+0x60>
                last = entry;
 800d9ca:	4618      	mov	r0, r3
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
 800d9cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d9ce:	e7f7      	b.n	800d9c0 <os_sem_pend+0x50>
        if (last) {
 800d9d0:	b118      	cbz	r0, 800d9da <os_sem_pend+0x6a>
            SLIST_INSERT_AFTER(last, current, t_obj_list);
 800d9d2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800d9d4:	64f3      	str	r3, [r6, #76]	; 0x4c
 800d9d6:	64c6      	str	r6, [r0, #76]	; 0x4c
 800d9d8:	e002      	b.n	800d9e0 <os_sem_pend+0x70>
            SLIST_INSERT_HEAD(&sem->sem_head, current, t_obj_list);
 800d9da:	f8c6 c04c 	str.w	ip, [r6, #76]	; 0x4c
 800d9de:	6026      	str	r6, [r4, #0]
        os_sched_sleep(current, timeout);
 800d9e0:	4629      	mov	r1, r5
 800d9e2:	4630      	mov	r0, r6
 800d9e4:	f7ff fe9a 	bl	800d71c <os_sched_sleep>
        ret = OS_OK;
 800d9e8:	2400      	movs	r4, #0
        sched = 1;
 800d9ea:	2501      	movs	r5, #1
 800d9ec:	e7d5      	b.n	800d99a <os_sem_pend+0x2a>
        ret = OS_TIMEOUT;
 800d9ee:	2406      	movs	r4, #6
    sched = 0;
 800d9f0:	2500      	movs	r5, #0
 800d9f2:	e7d2      	b.n	800d99a <os_sem_pend+0x2a>
        os_sched(NULL);
 800d9f4:	2000      	movs	r0, #0
 800d9f6:	f7ff ff59 	bl	800d8ac <os_sched>
        if (current->t_flags & OS_TASK_FLAG_SEM_WAIT) {
 800d9fa:	7b73      	ldrb	r3, [r6, #13]
 800d9fc:	f013 0f02 	tst.w	r3, #2
 800da00:	d101      	bne.n	800da06 <os_sem_pend+0x96>
            ret = OS_OK;
 800da02:	2400      	movs	r4, #0
 800da04:	e7cd      	b.n	800d9a2 <os_sem_pend+0x32>
            OS_ENTER_CRITICAL(sr);
 800da06:	f7fe fd19 	bl	800c43c <os_arch_save_sr>
            current->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
 800da0a:	7b73      	ldrb	r3, [r6, #13]
 800da0c:	f023 0302 	bic.w	r3, r3, #2
 800da10:	7373      	strb	r3, [r6, #13]
            OS_EXIT_CRITICAL(sr);
 800da12:	f7fe fd19 	bl	800c448 <os_arch_restore_sr>
            ret = OS_TIMEOUT;
 800da16:	2406      	movs	r4, #6
 800da18:	e7c3      	b.n	800d9a2 <os_sem_pend+0x32>
        ret = OS_NOT_STARTED;
 800da1a:	2409      	movs	r4, #9
 800da1c:	e7c1      	b.n	800d9a2 <os_sem_pend+0x32>
        ret = OS_INVALID_PARM;
 800da1e:	2403      	movs	r4, #3
 800da20:	e7bf      	b.n	800d9a2 <os_sem_pend+0x32>
 800da22:	bf00      	nop
 800da24:	20003904 	.word	0x20003904

0800da28 <_clear_stack>:
static void
_clear_stack(os_stack_t *stack_bottom, int size)
{
    int i;

    for (i = 0; i < size; i++) {
 800da28:	2300      	movs	r3, #0
 800da2a:	e003      	b.n	800da34 <_clear_stack+0xc>
        stack_bottom[i] = OS_STACK_PATTERN;
 800da2c:	4a03      	ldr	r2, [pc, #12]	; (800da3c <_clear_stack+0x14>)
 800da2e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    for (i = 0; i < size; i++) {
 800da32:	3301      	adds	r3, #1
 800da34:	428b      	cmp	r3, r1
 800da36:	dbf9      	blt.n	800da2c <_clear_stack+0x4>
    }
}
 800da38:	4770      	bx	lr
 800da3a:	bf00      	nop
 800da3c:	deadbeef 	.word	0xdeadbeef

0800da40 <os_task_init>:

int
os_task_init(struct os_task *t, const char *name, os_task_func_t func,
        void *arg, uint8_t prio, os_time_t sanity_itvl,
        os_stack_t *stack_bottom, uint16_t stack_size)
{
 800da40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da44:	4604      	mov	r4, r0
 800da46:	460f      	mov	r7, r1
 800da48:	4690      	mov	r8, r2
 800da4a:	461d      	mov	r5, r3
 800da4c:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
    struct os_sanity_check *sc;
    int rc;
    struct os_task *task;

    memset(t, 0, sizeof(*t));
 800da50:	2250      	movs	r2, #80	; 0x50
 800da52:	2100      	movs	r1, #0
 800da54:	f000 fa8f 	bl	800df76 <memset>

    t->t_func = func;
 800da58:	f8c4 8014 	str.w	r8, [r4, #20]
    t->t_arg = arg;
 800da5c:	61a5      	str	r5, [r4, #24]
    OS_ENTER_CRITICAL(sr);
 800da5e:	f7fe fced 	bl	800c43c <os_arch_save_sr>
    rc = g_task_id;
 800da62:	4b2b      	ldr	r3, [pc, #172]	; (800db10 <os_task_init+0xd0>)
 800da64:	781d      	ldrb	r5, [r3, #0]
    g_task_id++;
 800da66:	1c6a      	adds	r2, r5, #1
 800da68:	701a      	strb	r2, [r3, #0]
    OS_EXIT_CRITICAL(sr);
 800da6a:	f7fe fced 	bl	800c448 <os_arch_restore_sr>

    t->t_taskid = os_task_next_id();
 800da6e:	72a5      	strb	r5, [r4, #10]
    t->t_prio = prio;
 800da70:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800da74:	72e3      	strb	r3, [r4, #11]

    t->t_state = OS_TASK_READY;
 800da76:	2301      	movs	r3, #1
 800da78:	7323      	strb	r3, [r4, #12]
    t->t_name = name;
 800da7a:	6127      	str	r7, [r4, #16]
    t->t_next_wakeup = 0;
 800da7c:	2300      	movs	r3, #0
 800da7e:	6363      	str	r3, [r4, #52]	; 0x34

    rc = os_sanity_check_init(&t->t_sanity_check);
 800da80:	f104 0720 	add.w	r7, r4, #32
 800da84:	4638      	mov	r0, r7
 800da86:	f7ff fda3 	bl	800d5d0 <os_sanity_check_init>
    if (rc != OS_OK) {
 800da8a:	4605      	mov	r5, r0
 800da8c:	2800      	cmp	r0, #0
 800da8e:	d132      	bne.n	800daf6 <os_task_init+0xb6>
        goto err;
    }

    if (sanity_itvl != OS_WAIT_FOREVER) {
 800da90:	9b07      	ldr	r3, [sp, #28]
 800da92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da96:	d005      	beq.n	800daa4 <os_task_init+0x64>
        sc = (struct os_sanity_check *) &t->t_sanity_check;
        sc->sc_checkin_itvl = sanity_itvl;
 800da98:	6263      	str	r3, [r4, #36]	; 0x24

        rc = os_sanity_check_register(sc);
 800da9a:	4638      	mov	r0, r7
 800da9c:	f7ff fda0 	bl	800d5e0 <os_sanity_check_register>
        if (rc != OS_OK) {
 800daa0:	4605      	mov	r5, r0
 800daa2:	bb40      	cbnz	r0, 800daf6 <os_task_init+0xb6>
            goto err;
        }
    }

    _clear_stack(stack_bottom, stack_size);
 800daa4:	4631      	mov	r1, r6
 800daa6:	9808      	ldr	r0, [sp, #32]
 800daa8:	f7ff ffbe 	bl	800da28 <_clear_stack>
    t->t_stacktop = &stack_bottom[stack_size];
 800daac:	9b08      	ldr	r3, [sp, #32]
 800daae:	eb03 0186 	add.w	r1, r3, r6, lsl #2
 800dab2:	6061      	str	r1, [r4, #4]
    t->t_stacksize = stack_size;
 800dab4:	8126      	strh	r6, [r4, #8]
    t->t_stackptr = os_arch_task_stack_init(t, t->t_stacktop,
 800dab6:	4632      	mov	r2, r6
 800dab8:	4620      	mov	r0, r4
 800daba:	f7fe fccd 	bl	800c458 <os_arch_task_stack_init>
 800dabe:	6020      	str	r0, [r4, #0]
            t->t_stacksize);

    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
 800dac0:	4b14      	ldr	r3, [pc, #80]	; (800db14 <os_task_init+0xd4>)
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	b15b      	cbz	r3, 800dade <os_task_init+0x9e>
        assert(t->t_prio != task->t_prio);
 800dac6:	7ae1      	ldrb	r1, [r4, #11]
 800dac8:	7ada      	ldrb	r2, [r3, #11]
 800daca:	4291      	cmp	r1, r2
 800dacc:	d001      	beq.n	800dad2 <os_task_init+0x92>
    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
 800dace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dad0:	e7f8      	b.n	800dac4 <os_task_init+0x84>
        assert(t->t_prio != task->t_prio);
 800dad2:	2300      	movs	r3, #0
 800dad4:	461a      	mov	r2, r3
 800dad6:	4619      	mov	r1, r3
 800dad8:	4618      	mov	r0, r3
 800dada:	f7fe fd7b 	bl	800c5d4 <__assert_func>
    }

    /* insert this task into the task list */
    STAILQ_INSERT_TAIL(&g_os_task_list, t, t_os_task_list);
 800dade:	6423      	str	r3, [r4, #64]	; 0x40
 800dae0:	4b0c      	ldr	r3, [pc, #48]	; (800db14 <os_task_init+0xd4>)
 800dae2:	685a      	ldr	r2, [r3, #4]
 800dae4:	6014      	str	r4, [r2, #0]
 800dae6:	f104 0240 	add.w	r2, r4, #64	; 0x40
 800daea:	605a      	str	r2, [r3, #4]

    /* insert this task into the scheduler list */
    rc = os_sched_insert(t);
 800daec:	4620      	mov	r0, r4
 800daee:	f7ff fdc7 	bl	800d680 <os_sched_insert>
 800daf2:	4605      	mov	r5, r0
    if (rc != OS_OK) {
 800daf4:	b110      	cbz	r0, 800dafc <os_task_init+0xbc>
    }

    return (0);
err:
    return (rc);
}
 800daf6:	4628      	mov	r0, r5
 800daf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (os_started()) {
 800dafc:	f7fe fe28 	bl	800c750 <os_started>
 800db00:	b908      	cbnz	r0, 800db06 <os_task_init+0xc6>
    return (0);
 800db02:	4605      	mov	r5, r0
 800db04:	e7f7      	b.n	800daf6 <os_task_init+0xb6>
        os_sched(NULL);
 800db06:	2000      	movs	r0, #0
 800db08:	f7ff fed0 	bl	800d8ac <os_sched>
 800db0c:	e7f3      	b.n	800daf6 <os_task_init+0xb6>
 800db0e:	bf00      	nop
 800db10:	20003984 	.word	0x20003984
 800db14:	2000397c 	.word	0x2000397c

0800db18 <os_deltatime>:
} basetod;

static void
os_deltatime(os_time_t delta, const struct os_timeval *base,
    struct os_timeval *result)
{
 800db18:	e92d 0870 	stmdb	sp!, {r4, r5, r6, fp}
 800db1c:	460e      	mov	r6, r1
    struct os_timeval tvdelta;

    tvdelta.tv_sec = delta / OS_TICKS_PER_SEC;
 800db1e:	4c12      	ldr	r4, [pc, #72]	; (800db68 <os_deltatime+0x50>)
 800db20:	fba4 3400 	umull	r3, r4, r4, r0
 800db24:	09a4      	lsrs	r4, r4, #6
    tvdelta.tv_usec = (delta % OS_TICKS_PER_SEC) * OS_USEC_PER_TICK;
 800db26:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 800db2a:	fb05 0314 	mls	r3, r5, r4, r0
    os_timeradd(base, &tvdelta, result);
 800db2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800db32:	eb10 0b04 	adds.w	fp, r0, r4
 800db36:	f141 0c00 	adc.w	ip, r1, #0
 800db3a:	e9c2 bc00 	strd	fp, ip, [r2]
 800db3e:	68b4      	ldr	r4, [r6, #8]
 800db40:	fb05 4303 	mla	r3, r5, r3, r4
 800db44:	6093      	str	r3, [r2, #8]
 800db46:	4c09      	ldr	r4, [pc, #36]	; (800db6c <os_deltatime+0x54>)
 800db48:	42a3      	cmp	r3, r4
 800db4a:	dd0a      	ble.n	800db62 <os_deltatime+0x4a>
 800db4c:	f11b 0001 	adds.w	r0, fp, #1
 800db50:	f14c 0100 	adc.w	r1, ip, #0
 800db54:	e9c2 0100 	strd	r0, r1, [r2]
 800db58:	f5a3 2374 	sub.w	r3, r3, #999424	; 0xf4000
 800db5c:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 800db60:	6093      	str	r3, [r2, #8]
}
 800db62:	e8bd 0870 	ldmia.w	sp!, {r4, r5, r6, fp}
 800db66:	4770      	bx	lr
 800db68:	10624dd3 	.word	0x10624dd3
 800db6c:	000f423f 	.word	0x000f423f

0800db70 <os_time_tick>:
}

#if MYNEWT_VAL(OS_SCHEDULING)
static void
os_time_tick(int ticks)
{
 800db70:	b570      	push	{r4, r5, r6, lr}
    os_sr_t sr;
    os_time_t delta, prev_os_time;

    assert(ticks >= 0);
 800db72:	1e04      	subs	r4, r0, #0
 800db74:	db0d      	blt.n	800db92 <os_time_tick+0x22>

    OS_ENTER_CRITICAL(sr);
 800db76:	f7fe fc61 	bl	800c43c <os_arch_save_sr>
 800db7a:	4605      	mov	r5, r0
    prev_os_time = g_os_time;
 800db7c:	4a11      	ldr	r2, [pc, #68]	; (800dbc4 <os_time_tick+0x54>)
 800db7e:	6813      	ldr	r3, [r2, #0]
    g_os_time += ticks;
 800db80:	18e0      	adds	r0, r4, r3
 800db82:	6010      	str	r0, [r2, #0]

    /*
     * Update 'basetod' when 'g_os_time' crosses the 0x00000000 and
     * 0x80000000 thresholds.
     */
    if ((prev_os_time ^ g_os_time) >> 31) {
 800db84:	ea90 0f03 	teq	r0, r3
 800db88:	d409      	bmi.n	800db9e <os_time_tick+0x2e>
        delta = g_os_time - basetod.ostime;
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
        os_deltatime(delta, &basetod.utctime, &basetod.utctime);
        basetod.ostime = g_os_time;
    }
    OS_EXIT_CRITICAL(sr);
 800db8a:	4628      	mov	r0, r5
 800db8c:	f7fe fc5c 	bl	800c448 <os_arch_restore_sr>
}
 800db90:	bd70      	pop	{r4, r5, r6, pc}
    assert(ticks >= 0);
 800db92:	2300      	movs	r3, #0
 800db94:	461a      	mov	r2, r3
 800db96:	4619      	mov	r1, r3
 800db98:	4618      	mov	r0, r3
 800db9a:	f7fe fd1b 	bl	800c5d4 <__assert_func>
        delta = g_os_time - basetod.ostime;
 800db9e:	4e0a      	ldr	r6, [pc, #40]	; (800dbc8 <os_time_tick+0x58>)
 800dba0:	4631      	mov	r1, r6
 800dba2:	f851 4b08 	ldr.w	r4, [r1], #8
 800dba6:	1b04      	subs	r4, r0, r4
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
 800dba8:	460a      	mov	r2, r1
 800dbaa:	4620      	mov	r0, r4
 800dbac:	f7ff ffb4 	bl	800db18 <os_deltatime>
        os_deltatime(delta, &basetod.utctime, &basetod.utctime);
 800dbb0:	f106 0118 	add.w	r1, r6, #24
 800dbb4:	460a      	mov	r2, r1
 800dbb6:	4620      	mov	r0, r4
 800dbb8:	f7ff ffae 	bl	800db18 <os_deltatime>
        basetod.ostime = g_os_time;
 800dbbc:	4b01      	ldr	r3, [pc, #4]	; (800dbc4 <os_time_tick+0x54>)
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	6033      	str	r3, [r6, #0]
 800dbc2:	e7e2      	b.n	800db8a <os_time_tick+0x1a>
 800dbc4:	20003988 	.word	0x20003988
 800dbc8:	20002670 	.word	0x20002670

0800dbcc <os_time_get>:
}
 800dbcc:	4b01      	ldr	r3, [pc, #4]	; (800dbd4 <os_time_get+0x8>)
 800dbce:	6818      	ldr	r0, [r3, #0]
 800dbd0:	4770      	bx	lr
 800dbd2:	bf00      	nop
 800dbd4:	20003988 	.word	0x20003988

0800dbd8 <os_time_advance>:

void
os_time_advance(int ticks)
{
 800dbd8:	b510      	push	{r4, lr}
    assert(ticks >= 0);
 800dbda:	1e04      	subs	r4, r0, #0
 800dbdc:	db09      	blt.n	800dbf2 <os_time_advance+0x1a>

    if (ticks > 0) {
 800dbde:	2c00      	cmp	r4, #0
 800dbe0:	dd06      	ble.n	800dbf0 <os_time_advance+0x18>
        if (!os_started()) {
 800dbe2:	f7fe fdb5 	bl	800c750 <os_started>
 800dbe6:	b950      	cbnz	r0, 800dbfe <os_time_advance+0x26>
            g_os_time += ticks;
 800dbe8:	4a0a      	ldr	r2, [pc, #40]	; (800dc14 <os_time_advance+0x3c>)
 800dbea:	6813      	ldr	r3, [r2, #0]
 800dbec:	441c      	add	r4, r3
 800dbee:	6014      	str	r4, [r2, #0]
            os_callout_tick();
            os_sched_os_timer_exp();
            os_sched(NULL);
        }
    }
}
 800dbf0:	bd10      	pop	{r4, pc}
    assert(ticks >= 0);
 800dbf2:	2300      	movs	r3, #0
 800dbf4:	461a      	mov	r2, r3
 800dbf6:	4619      	mov	r1, r3
 800dbf8:	4618      	mov	r0, r3
 800dbfa:	f7fe fceb 	bl	800c5d4 <__assert_func>
            os_time_tick(ticks);
 800dbfe:	4620      	mov	r0, r4
 800dc00:	f7ff ffb6 	bl	800db70 <os_time_tick>
            os_callout_tick();
 800dc04:	f7fe fecc 	bl	800c9a0 <os_callout_tick>
            os_sched_os_timer_exp();
 800dc08:	f7ff fe0c 	bl	800d824 <os_sched_os_timer_exp>
            os_sched(NULL);
 800dc0c:	2000      	movs	r0, #0
 800dc0e:	f7ff fe4d 	bl	800d8ac <os_sched>
}
 800dc12:	e7ed      	b.n	800dbf0 <os_time_advance+0x18>
 800dc14:	20003988 	.word	0x20003988

0800dc18 <os_time_delay>:
void
os_time_delay(os_time_t osticks)
{
    os_sr_t sr;

    if (osticks > 0) {
 800dc18:	b900      	cbnz	r0, 800dc1c <os_time_delay+0x4>
 800dc1a:	4770      	bx	lr
{
 800dc1c:	b538      	push	{r3, r4, r5, lr}
 800dc1e:	4604      	mov	r4, r0
        OS_ENTER_CRITICAL(sr);
 800dc20:	f7fe fc0c 	bl	800c43c <os_arch_save_sr>
 800dc24:	4605      	mov	r5, r0
        os_sched_sleep(os_sched_get_current_task(), (os_time_t)osticks);
 800dc26:	f7ff fd6d 	bl	800d704 <os_sched_get_current_task>
 800dc2a:	4621      	mov	r1, r4
 800dc2c:	f7ff fd76 	bl	800d71c <os_sched_sleep>
        OS_EXIT_CRITICAL(sr);
 800dc30:	4628      	mov	r0, r5
 800dc32:	f7fe fc09 	bl	800c448 <os_arch_restore_sr>
        os_sched(NULL);
 800dc36:	2000      	movs	r0, #0
 800dc38:	f7ff fe38 	bl	800d8ac <os_sched>
    }
}
 800dc3c:	bd38      	pop	{r3, r4, r5, pc}
	...

0800dc40 <os_gettimeofday>:
    return (0);
}

int
os_gettimeofday(struct os_timeval *tv, struct os_timezone *tz)
{
 800dc40:	b570      	push	{r4, r5, r6, lr}
 800dc42:	4605      	mov	r5, r0
 800dc44:	460c      	mov	r4, r1
    os_sr_t sr;
    os_time_t delta;

    OS_ENTER_CRITICAL(sr);
 800dc46:	f7fe fbf9 	bl	800c43c <os_arch_save_sr>
 800dc4a:	4606      	mov	r6, r0
    if (tv != NULL) {
 800dc4c:	b145      	cbz	r5, 800dc60 <os_gettimeofday+0x20>
        delta = os_time_get() - basetod.ostime;
 800dc4e:	f7ff ffbd 	bl	800dbcc <os_time_get>
 800dc52:	4908      	ldr	r1, [pc, #32]	; (800dc74 <os_gettimeofday+0x34>)
 800dc54:	f851 3b18 	ldr.w	r3, [r1], #24
        os_deltatime(delta, &basetod.utctime, tv);
 800dc58:	462a      	mov	r2, r5
 800dc5a:	1ac0      	subs	r0, r0, r3
 800dc5c:	f7ff ff5c 	bl	800db18 <os_deltatime>
    }

    if (tz != NULL) {
 800dc60:	b114      	cbz	r4, 800dc68 <os_gettimeofday+0x28>
        *tz = basetod.timezone;
 800dc62:	4b04      	ldr	r3, [pc, #16]	; (800dc74 <os_gettimeofday+0x34>)
 800dc64:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800dc66:	6020      	str	r0, [r4, #0]
    }
    OS_EXIT_CRITICAL(sr);
 800dc68:	4630      	mov	r0, r6
 800dc6a:	f7fe fbed 	bl	800c448 <os_arch_restore_sr>

    return (0);
}
 800dc6e:	2000      	movs	r0, #0
 800dc70:	bd70      	pop	{r4, r5, r6, pc}
 800dc72:	bf00      	nop
 800dc74:	20002670 	.word	0x20002670

0800dc78 <os_time_ms_to_ticks>:
os_time_ms_to_ticks(uint32_t ms, os_time_t *out_ticks)
{
    uint64_t ticks;

#if OS_TICKS_PER_SEC == 1000
    *out_ticks = ms;
 800dc78:	6008      	str	r0, [r1, #0]
        return OS_EINVAL;
    }

    *out_ticks = ticks;
    return 0;
}
 800dc7a:	2000      	movs	r0, #0
 800dc7c:	4770      	bx	lr
	...

0800dc80 <os_set_env>:
        .global os_set_env
os_set_env:
        .fnstart
        .cantunwind

        MSR     PSP,R0
 800dc80:	f380 8809 	msr	PSP, r0
        LDR     R0,=os_flags
 800dc84:	4832      	ldr	r0, [pc, #200]	; (800dd50 <os_default_irq_asm+0x1e>)
        LDRB    R0,[R0]
 800dc86:	7800      	ldrb	r0, [r0, #0]
        ADDS    R0, R0, #2
 800dc88:	3002      	adds	r0, #2
        MSR     CONTROL,R0
 800dc8a:	f380 8814 	msr	CONTROL, r0
        ISB
 800dc8e:	f3bf 8f6f 	isb	sy
        BX      LR
 800dc92:	4770      	bx	lr

0800dc94 <os_arch_init_task_stack>:
        .type   os_arch_init_task_stack, %function
        .global os_arch_init_task_stack
os_arch_init_task_stack:
        .fnstart

        STMIA   R0,{R4-R11}
 800dc94:	e880 0ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp}
        BX      LR
 800dc98:	4770      	bx	lr

0800dc9a <SVC_Handler>:
        PUSH    {R4,LR}
        BL      os_trace_isr_enter
        POP     {R4,LR}
#endif

        MRS     R0,PSP                  /* Read PSP */
 800dc9a:	f3ef 8009 	mrs	r0, PSP
        LDR     R1,[R0,#24]             /* Read Saved PC from Stack */
 800dc9e:	6981      	ldr	r1, [r0, #24]
        LDRB    R1,[R1,#-2]             /* Load SVC Number */
 800dca0:	f811 1c02 	ldrb.w	r1, [r1, #-2]
        CBNZ    R1,SVC_User
 800dca4:	b951      	cbnz	r1, 800dcbc <SVC_User>

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
 800dca6:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
 800dcaa:	b510      	push	{r4, lr}
        BLX     R12                     /* Call SVC Function */
 800dcac:	47e0      	blx	ip
        POP     {R4,LR}                 /* Restore EXC_RETURN */
 800dcae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

        MRS     R12,PSP                 /* Read PSP */
 800dcb2:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R2}             /* Store return values */
 800dcb6:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR                      /* Return from interrupt */
 800dcba:	4770      	bx	lr

0800dcbc <SVC_User>:

        /*------------------- User SVC ------------------------------*/
SVC_User:
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
 800dcbc:	b510      	push	{r4, lr}
        LDR     R2,=SVC_Count
 800dcbe:	4a25      	ldr	r2, [pc, #148]	; (800dd54 <os_default_irq_asm+0x22>)
        LDR     R2,[R2]
 800dcc0:	6812      	ldr	r2, [r2, #0]
        CMP     R1,R2
 800dcc2:	4291      	cmp	r1, r2
        BHI     SVC_Done                /* Overflow */
 800dcc4:	d809      	bhi.n	800dcda <SVC_Done>

        LDR     R4,=SVC_Table-4
 800dcc6:	4c24      	ldr	r4, [pc, #144]	; (800dd58 <os_default_irq_asm+0x26>)
        LDR     R4,[R4,R1,LSL #2]       /* Load SVC Function Address */
 800dcc8:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
 800dccc:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        BLX     R4                      /* Call SVC Function */
 800dcd0:	47a0      	blx	r4

        MRS     R12,PSP
 800dcd2:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R3}             /* Function return values */
 800dcd6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

0800dcda <SVC_Done>:
SVC_Done:
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
 800dcda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR                      /* Return from interrupt */
 800dcde:	4770      	bx	lr

0800dce0 <PendSV_Handler>:
        .global PendSV_Handler
PendSV_Handler:
        .fnstart
        .cantunwind

        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
 800dce0:	4b1e      	ldr	r3, [pc, #120]	; (800dd5c <os_default_irq_asm+0x2a>)
        LDR     R2,[R3]                 /* Store in R2 */
 800dce2:	681a      	ldr	r2, [r3, #0]
        LDR     R3,=g_current_task      /* Get current task */
 800dce4:	4b1e      	ldr	r3, [pc, #120]	; (800dd60 <os_default_irq_asm+0x2e>)
        LDR     R1,[R3]                 /* Current task in R1 */
 800dce6:	6819      	ldr	r1, [r3, #0]
        CMP     R1,R2
 800dce8:	4291      	cmp	r1, r2
        IT      EQ
 800dcea:	bf08      	it	eq
        BXEQ    LR                      /* RETI, no task switch */
 800dcec:	4770      	bxeq	lr

        MRS     R12,PSP                 /* Read PSP */
 800dcee:	f3ef 8c09 	mrs	ip, PSP
#if MYNEWT_VAL(HARDFLOAT)
        TST     LR,#0x10                /* is it extended frame? */
 800dcf2:	f01e 0f10 	tst.w	lr, #16
        IT      EQ
 800dcf6:	bf08      	it	eq
        VSTMDBEQ R12!,{S16-S31}         /* yes; push the regs */
 800dcf8:	ed2c 8a10 	vstmdbeq	ip!, {s16-s31}
        STMDB   R12!,{R4-R11,LR}        /* Save Old context */
 800dcfc:	e92c 4ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#else
        STMDB   R12!,{R4-R11}           /* Save Old context */
#endif
        STR     R12,[R1,#0]             /* Update stack pointer in current task */
 800dd00:	f8c1 c000 	str.w	ip, [r1]
        STR     R2,[R3]                 /* g_current_task = highest ready */
 800dd04:	601a      	str	r2, [r3, #0]

        LDR     R12,[R2,#0]             /* get stack pointer of task we will start */
 800dd06:	f8d2 c000 	ldr.w	ip, [r2]
#if MYNEWT_VAL(HARDFLOAT)
        LDMIA   R12!,{R4-R11,LR}        /* Restore New Context */
 800dd0a:	e8bc 4ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        TST     LR,#0x10                /* is it extended frame? */
 800dd0e:	f01e 0f10 	tst.w	lr, #16
        ITTE    EQ
 800dd12:	bf06      	itte	eq
        VLDMIAEQ R12!,{S16-S31}         /* yes; pull the regs */
 800dd14:	ecbc 8a10 	vldmiaeq	ip!, {s16-s31}
        MVNEQ   LR,#~0xFFFFFFED         /* BX treats it as extended */
 800dd18:	f06f 0e12 	mvneq.w	lr, #18
        MVNNE   LR,#~0xFFFFFFFD         /* BX treats is as basic frame */
 800dd1c:	f06f 0e02 	mvnne.w	lr, #2
#else
        LDMIA   R12!,{R4-R11}           /* Restore New Context */
#endif
        MSR     PSP,R12                 /* Write PSP */
 800dd20:	f38c 8809 	msr	PSP, ip
        MOV     R0, R2
        BL      os_trace_task_start_exec
        POP     {R4,LR}
#endif

        BX      LR                      /* Return to Thread Mode */
 800dd24:	4770      	bx	lr

0800dd26 <SysTick_Handler>:
        .global SysTick_Handler
SysTick_Handler:
        .fnstart
        .cantunwind

        PUSH    {R4,LR}                 /* Save EXC_RETURN */
 800dd26:	b510      	push	{r4, lr}
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_enter
#endif
        BL      timer_handler
 800dd28:	f7fe fb78 	bl	800c41c <timer_handler>
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
 800dd2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR
 800dd30:	4770      	bx	lr

0800dd32 <os_default_irq_asm>:

        /*
         * LR = 0xfffffff9 if we were using MSP as SP
         * LR = 0xfffffffd if we were using PSP as SP
         */
        TST     LR,#4
 800dd32:	f01e 0f04 	tst.w	lr, #4
        ITE     EQ
 800dd36:	bf0c      	ite	eq
        MRSEQ   R3,MSP
 800dd38:	f3ef 8308 	mrseq	r3, MSP
        MRSNE   R3,PSP
 800dd3c:	f3ef 8309 	mrsne	r3, PSP
        PUSH    {R3-R11,LR}
 800dd40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        MOV     R0, SP
 800dd44:	4668      	mov	r0, sp
        BL      os_default_irq
 800dd46:	f7fe fc6b 	bl	800c620 <os_default_irq>
        POP     {R3-R11,LR}                 /* Restore EXC_RETURN */
 800dd4a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR
 800dd4e:	4770      	bx	lr
        LDR     R0,=os_flags
 800dd50:	20000770 	.word	0x20000770
        LDR     R2,=SVC_Count
 800dd54:	00000000 	.word	0x00000000
        LDR     R4,=SVC_Table-4
 800dd58:	fffffffc 	.word	0xfffffffc
        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
 800dd5c:	20000234 	.word	0x20000234
        LDR     R3,=g_current_task      /* Get current task */
 800dd60:	20003974 	.word	0x20003974

0800dd64 <lrand48>:
#include <stdint.h>

extern unsigned short __rand48_seed[3];	/* Common with mrand48.c, srand48.c */

long lrand48(void)
{
 800dd64:	b508      	push	{r3, lr}
	return (uint32_t) jrand48(__rand48_seed) >> 1;
 800dd66:	4802      	ldr	r0, [pc, #8]	; (800dd70 <lrand48+0xc>)
 800dd68:	f000 fc3e 	bl	800e5e8 <jrand48>
}
 800dd6c:	0840      	lsrs	r0, r0, #1
 800dd6e:	bd08      	pop	{r3, pc}
 800dd70:	2000398c 	.word	0x2000398c

0800dd74 <malloc_lock_nop>:
    },
    &__malloc_head,
    &__malloc_head
};

static bool malloc_lock_nop() {return true;}
 800dd74:	2001      	movs	r0, #1
 800dd76:	4770      	bx	lr

0800dd78 <malloc_unlock_nop>:
static void malloc_unlock_nop() {}
 800dd78:	4770      	bx	lr

0800dd7a <__malloc_from_block>:
static void *__malloc_from_block(struct free_arena_header *fp, size_t size)
{
    size_t fsize;
    struct free_arena_header *nfp, *na, *fpn, *fpp;

    fsize = fp->a.size;
 800dd7a:	6842      	ldr	r2, [r0, #4]

    /* We need the 2* to account for the larger requirements of a
       free block */
    if (fsize >= size + 2 * sizeof(struct arena_header)) {
 800dd7c:	f101 0320 	add.w	r3, r1, #32
 800dd80:	4293      	cmp	r3, r2
 800dd82:	d907      	bls.n	800dd94 <__malloc_from_block+0x1a>
        nfp->next_free = fpn = fp->next_free;
        nfp->prev_free = fpp = fp->prev_free;
        fpn->prev_free = nfp;
        fpp->next_free = nfp;
    } else {
        fp->a.type = ARENA_TYPE_USED; /* Allocate the whole block */
 800dd84:	2300      	movs	r3, #0
 800dd86:	6003      	str	r3, [r0, #0]
    ap = ah->prev_free;
 800dd88:	6942      	ldr	r2, [r0, #20]
    an = ah->next_free;
 800dd8a:	6903      	ldr	r3, [r0, #16]
    ap->next_free = an;
 800dd8c:	6113      	str	r3, [r2, #16]
    an->prev_free = ap;
 800dd8e:	615a      	str	r2, [r3, #20]
        remove_from_free_chain(fp);
    }

    return (void *)(&fp->a + 1);
}
 800dd90:	3010      	adds	r0, #16
 800dd92:	4770      	bx	lr
{
 800dd94:	b430      	push	{r4, r5}
        nfp = (struct free_arena_header *)((char *)fp + size);
 800dd96:	1843      	adds	r3, r0, r1
        na = fp->a.next;
 800dd98:	6884      	ldr	r4, [r0, #8]
        nfp->a.type = ARENA_TYPE_FREE;
 800dd9a:	2501      	movs	r5, #1
 800dd9c:	5045      	str	r5, [r0, r1]
        nfp->a.size = fsize - size;
 800dd9e:	1a52      	subs	r2, r2, r1
 800dda0:	605a      	str	r2, [r3, #4]
        fp->a.type = ARENA_TYPE_USED;
 800dda2:	2200      	movs	r2, #0
 800dda4:	6002      	str	r2, [r0, #0]
        fp->a.size = size;
 800dda6:	6041      	str	r1, [r0, #4]
        nfp->a.prev = fp;
 800dda8:	60d8      	str	r0, [r3, #12]
        nfp->a.next = na;
 800ddaa:	609c      	str	r4, [r3, #8]
        na->a.prev = nfp;
 800ddac:	60e3      	str	r3, [r4, #12]
        fp->a.next = nfp;
 800ddae:	6083      	str	r3, [r0, #8]
        nfp->next_free = fpn = fp->next_free;
 800ddb0:	6901      	ldr	r1, [r0, #16]
 800ddb2:	6119      	str	r1, [r3, #16]
        nfp->prev_free = fpp = fp->prev_free;
 800ddb4:	6942      	ldr	r2, [r0, #20]
 800ddb6:	615a      	str	r2, [r3, #20]
        fpn->prev_free = nfp;
 800ddb8:	614b      	str	r3, [r1, #20]
        fpp->next_free = nfp;
 800ddba:	6113      	str	r3, [r2, #16]
}
 800ddbc:	3010      	adds	r0, #16
 800ddbe:	bc30      	pop	{r4, r5}
 800ddc0:	4770      	bx	lr
	...

0800ddc4 <__free_block>:

static struct free_arena_header *__free_block(struct free_arena_header *ah)
{
 800ddc4:	b410      	push	{r4}
 800ddc6:	4603      	mov	r3, r0
    struct free_arena_header *pah, *nah;

    pah = ah->a.prev;
 800ddc8:	68c0      	ldr	r0, [r0, #12]
    nah = ah->a.next;
 800ddca:	6899      	ldr	r1, [r3, #8]
    if (pah->a.type == ARENA_TYPE_FREE &&
 800ddcc:	6802      	ldr	r2, [r0, #0]
 800ddce:	2a01      	cmp	r2, #1
 800ddd0:	d00f      	beq.n	800ddf2 <__free_block+0x2e>

        ah = pah;
        pah = ah->a.prev;
    } else {
        /* Need to add this block to the free chain */
        ah->a.type = ARENA_TYPE_FREE;
 800ddd2:	2201      	movs	r2, #1
 800ddd4:	601a      	str	r2, [r3, #0]

        ah->next_free = __malloc_head.next_free;
 800ddd6:	4a14      	ldr	r2, [pc, #80]	; (800de28 <__free_block+0x64>)
 800ddd8:	6910      	ldr	r0, [r2, #16]
 800ddda:	6118      	str	r0, [r3, #16]
        ah->prev_free = &__malloc_head;
 800dddc:	615a      	str	r2, [r3, #20]
        __malloc_head.next_free = ah;
 800ddde:	6113      	str	r3, [r2, #16]
        ah->next_free->prev_free = ah;
 800dde0:	691a      	ldr	r2, [r3, #16]
 800dde2:	6153      	str	r3, [r2, #20]
 800dde4:	4618      	mov	r0, r3
    }

    /* In either of the previous cases, we might be able to merge
       with the subsequent block... */
    if (nah->a.type == ARENA_TYPE_FREE &&
 800dde6:	680b      	ldr	r3, [r1, #0]
 800dde8:	2b01      	cmp	r3, #1
 800ddea:	d00c      	beq.n	800de06 <__free_block+0x42>
        remove_from_chains(nah);
    }

    /* Return the block that contains the called block */
    return ah;
}
 800ddec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ddf0:	4770      	bx	lr
        (char *)pah + pah->a.size == (char *)ah) {
 800ddf2:	6842      	ldr	r2, [r0, #4]
 800ddf4:	1884      	adds	r4, r0, r2
    if (pah->a.type == ARENA_TYPE_FREE &&
 800ddf6:	429c      	cmp	r4, r3
 800ddf8:	d1eb      	bne.n	800ddd2 <__free_block+0xe>
        pah->a.size += ah->a.size;
 800ddfa:	685b      	ldr	r3, [r3, #4]
 800ddfc:	441a      	add	r2, r3
 800ddfe:	6042      	str	r2, [r0, #4]
        pah->a.next = nah;
 800de00:	6081      	str	r1, [r0, #8]
        nah->a.prev = pah;
 800de02:	60c8      	str	r0, [r1, #12]
        pah = ah->a.prev;
 800de04:	e7ef      	b.n	800dde6 <__free_block+0x22>
        (char *)ah + ah->a.size == (char *)nah) {
 800de06:	6843      	ldr	r3, [r0, #4]
 800de08:	18c2      	adds	r2, r0, r3
    if (nah->a.type == ARENA_TYPE_FREE &&
 800de0a:	428a      	cmp	r2, r1
 800de0c:	d1ee      	bne.n	800ddec <__free_block+0x28>
        ah->a.size += nah->a.size;
 800de0e:	684a      	ldr	r2, [r1, #4]
 800de10:	4413      	add	r3, r2
 800de12:	6043      	str	r3, [r0, #4]
    ap = ah->prev_free;
 800de14:	694a      	ldr	r2, [r1, #20]
    an = ah->next_free;
 800de16:	690b      	ldr	r3, [r1, #16]
    ap->next_free = an;
 800de18:	6113      	str	r3, [r2, #16]
    an->prev_free = ap;
 800de1a:	615a      	str	r2, [r3, #20]
    ap = ah->a.prev;
 800de1c:	68ca      	ldr	r2, [r1, #12]
    an = ah->a.next;
 800de1e:	688b      	ldr	r3, [r1, #8]
    ap->a.next = an;
 800de20:	6093      	str	r3, [r2, #8]
    an->a.prev = ap;
 800de22:	60da      	str	r2, [r3, #12]
    return ah;
 800de24:	e7e2      	b.n	800ddec <__free_block+0x28>
 800de26:	bf00      	nop
 800de28:	20000244 	.word	0x20000244

0800de2c <add_malloc_block>:
void add_malloc_block(void *buf, size_t size)
{
    struct free_arena_header *fp = buf;
    struct free_arena_header *pah;

    if (size < sizeof(struct free_arena_header))
 800de2c:	2917      	cmp	r1, #23
 800de2e:	d91e      	bls.n	800de6e <add_malloc_block+0x42>
{
 800de30:	b510      	push	{r4, lr}
 800de32:	4604      	mov	r4, r0
        return; // Too small.

    /* Insert the block into the management chains.  We need to set
       up the size and the main block list pointer, the rest of
       the work is logically identical to free(). */
    fp->a.type = ARENA_TYPE_FREE;
 800de34:	2301      	movs	r3, #1
 800de36:	6003      	str	r3, [r0, #0]
    fp->a.size = size;
 800de38:	6041      	str	r1, [r0, #4]

    if (!malloc_lock())
 800de3a:	4b0d      	ldr	r3, [pc, #52]	; (800de70 <add_malloc_block+0x44>)
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	4798      	blx	r3
 800de40:	b1a0      	cbz	r0, 800de6c <add_malloc_block+0x40>

    /* We need to insert this into the main block list in the proper
       place -- this list is required to be sorted.  Since we most likely
       get memory assignments in ascending order, search backwards for
       the proper place. */
    for (pah = __malloc_head.a.prev; pah->a.type != ARENA_TYPE_HEAD;
 800de42:	4b0c      	ldr	r3, [pc, #48]	; (800de74 <add_malloc_block+0x48>)
 800de44:	68db      	ldr	r3, [r3, #12]
 800de46:	681a      	ldr	r2, [r3, #0]
 800de48:	2a02      	cmp	r2, #2
 800de4a:	d003      	beq.n	800de54 <add_malloc_block+0x28>
         pah = pah->a.prev) {
        if (pah < fp)
 800de4c:	42a3      	cmp	r3, r4
 800de4e:	d301      	bcc.n	800de54 <add_malloc_block+0x28>
         pah = pah->a.prev) {
 800de50:	68db      	ldr	r3, [r3, #12]
 800de52:	e7f8      	b.n	800de46 <add_malloc_block+0x1a>
            break;
    }

    /* Now pah points to the node that should be the predecessor of
       the new node */
    fp->a.next = pah->a.next;
 800de54:	689a      	ldr	r2, [r3, #8]
 800de56:	60a2      	str	r2, [r4, #8]
    fp->a.prev = pah;
 800de58:	60e3      	str	r3, [r4, #12]
    pah->a.next = fp;
 800de5a:	609c      	str	r4, [r3, #8]
    fp->a.next->a.prev = fp;
 800de5c:	68a3      	ldr	r3, [r4, #8]
 800de5e:	60dc      	str	r4, [r3, #12]

    /* Insert into the free chain and coalesce with adjacent blocks */
    fp = __free_block(fp);
 800de60:	4620      	mov	r0, r4
 800de62:	f7ff ffaf 	bl	800ddc4 <__free_block>

    malloc_unlock();
 800de66:	4b04      	ldr	r3, [pc, #16]	; (800de78 <add_malloc_block+0x4c>)
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	4798      	blx	r3
}
 800de6c:	bd10      	pop	{r4, pc}
 800de6e:	4770      	bx	lr
 800de70:	2000025c 	.word	0x2000025c
 800de74:	20000244 	.word	0x20000244
 800de78:	20000260 	.word	0x20000260

0800de7c <malloc>:
{
 800de7c:	b538      	push	{r3, r4, r5, lr}
    if (size == 0 || size > (SIZE_MAX - sizeof(struct arena_header))) {
 800de7e:	1e43      	subs	r3, r0, #1
 800de80:	f113 0f12 	cmn.w	r3, #18
 800de84:	d826      	bhi.n	800ded4 <malloc+0x58>
    size = (size + 2 * sizeof(struct arena_header) - 1) & ARENA_SIZE_MASK;
 800de86:	f100 041f 	add.w	r4, r0, #31
 800de8a:	f024 040f 	bic.w	r4, r4, #15
    if (!malloc_lock())
 800de8e:	4b13      	ldr	r3, [pc, #76]	; (800dedc <malloc+0x60>)
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	4798      	blx	r3
 800de94:	b300      	cbz	r0, 800ded8 <malloc+0x5c>
    void *result = NULL;
 800de96:	2500      	movs	r5, #0
 800de98:	e00d      	b.n	800deb6 <malloc+0x3a>
            result = __malloc_from_block(fp, size);
 800de9a:	4621      	mov	r1, r4
 800de9c:	f7ff ff6d 	bl	800dd7a <__malloc_from_block>
 800dea0:	4605      	mov	r5, r0
    if (result == NULL) {
 800dea2:	b995      	cbnz	r5, 800deca <malloc+0x4e>
        more_mem = _sbrk(size);
 800dea4:	4620      	mov	r0, r4
 800dea6:	f003 f833 	bl	8010f10 <_sbrk>
        if (more_mem != (void *)-1) {
 800deaa:	f1b0 3fff 	cmp.w	r0, #4294967295
 800deae:	d00c      	beq.n	800deca <malloc+0x4e>
            add_malloc_block(more_mem, size);
 800deb0:	4621      	mov	r1, r4
 800deb2:	f7ff ffbb 	bl	800de2c <add_malloc_block>
    for (fp = __malloc_head.next_free; fp->a.type != ARENA_TYPE_HEAD;
 800deb6:	4b0a      	ldr	r3, [pc, #40]	; (800dee0 <malloc+0x64>)
 800deb8:	6918      	ldr	r0, [r3, #16]
 800deba:	6803      	ldr	r3, [r0, #0]
 800debc:	2b02      	cmp	r3, #2
 800debe:	d0f0      	beq.n	800dea2 <malloc+0x26>
        if (fp->a.size >= size) {
 800dec0:	6843      	ldr	r3, [r0, #4]
 800dec2:	42a3      	cmp	r3, r4
 800dec4:	d2e9      	bcs.n	800de9a <malloc+0x1e>
         fp = fp->next_free) {
 800dec6:	6900      	ldr	r0, [r0, #16]
 800dec8:	e7f7      	b.n	800deba <malloc+0x3e>
    malloc_unlock();
 800deca:	4b06      	ldr	r3, [pc, #24]	; (800dee4 <malloc+0x68>)
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	4798      	blx	r3
}
 800ded0:	4628      	mov	r0, r5
 800ded2:	bd38      	pop	{r3, r4, r5, pc}
        return NULL;
 800ded4:	2500      	movs	r5, #0
 800ded6:	e7fb      	b.n	800ded0 <malloc+0x54>
        return NULL;
 800ded8:	2500      	movs	r5, #0
 800deda:	e7f9      	b.n	800ded0 <malloc+0x54>
 800dedc:	2000025c 	.word	0x2000025c
 800dee0:	20000244 	.word	0x20000244
 800dee4:	20000260 	.word	0x20000260

0800dee8 <free>:

void free(void *ptr)
{
    struct free_arena_header *ah;

    if (!ptr)
 800dee8:	b170      	cbz	r0, 800df08 <free+0x20>
{
 800deea:	b510      	push	{r4, lr}
        return;

    ah = (struct free_arena_header *)
 800deec:	f1a0 0410 	sub.w	r4, r0, #16

#ifdef DEBUG_MALLOC
    assert(ah->a.type == ARENA_TYPE_USED);
#endif

    if (!malloc_lock())
 800def0:	4b06      	ldr	r3, [pc, #24]	; (800df0c <free+0x24>)
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	4798      	blx	r3
 800def6:	b900      	cbnz	r0, 800defa <free+0x12>
        return;

    /* Merge into adjacent free blocks */
    ah = __free_block(ah);
    malloc_unlock();
}
 800def8:	bd10      	pop	{r4, pc}
    ah = __free_block(ah);
 800defa:	4620      	mov	r0, r4
 800defc:	f7ff ff62 	bl	800ddc4 <__free_block>
    malloc_unlock();
 800df00:	4b03      	ldr	r3, [pc, #12]	; (800df10 <free+0x28>)
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	4798      	blx	r3
 800df06:	e7f7      	b.n	800def8 <free+0x10>
 800df08:	4770      	bx	lr
 800df0a:	bf00      	nop
 800df0c:	2000025c 	.word	0x2000025c
 800df10:	20000260 	.word	0x20000260

0800df14 <memcmp>:
int memcmp(const void *s1, const void *s2, size_t n)
{
    int d = 0;

#if defined(ARCH_cortex_m3) || defined(ARCH_cortex_m4) || defined(ARCH_cortex_m7)
    asm (".syntax unified                   \n"
 800df14:	b470      	push	{r4, r5, r6}
 800df16:	f04f 0500 	mov.w	r5, #0
 800df1a:	f022 0603 	bic.w	r6, r2, #3
 800df1e:	e005      	b.n	800df2c <test1>

0800df20 <loop1>:
 800df20:	5943      	ldr	r3, [r0, r5]
 800df22:	594c      	ldr	r4, [r1, r5]
 800df24:	42a3      	cmp	r3, r4
 800df26:	d104      	bne.n	800df32 <res1>
 800df28:	f105 0504 	add.w	r5, r5, #4

0800df2c <test1>:
 800df2c:	42b5      	cmp	r5, r6
 800df2e:	d1f7      	bne.n	800df20 <loop1>
 800df30:	e00d      	b.n	800df4e <test2>

0800df32 <res1>:
 800df32:	ba1b      	rev	r3, r3
 800df34:	ba24      	rev	r4, r4
 800df36:	1b1b      	subs	r3, r3, r4
 800df38:	bf8c      	ite	hi
 800df3a:	2301      	movhi	r3, #1
 800df3c:	f04f 33ff 	movls.w	r3, #4294967295
 800df40:	e009      	b.n	800df56 <done>

0800df42 <loop2>:
 800df42:	5d43      	ldrb	r3, [r0, r5]
 800df44:	5d4c      	ldrb	r4, [r1, r5]
 800df46:	1b1b      	subs	r3, r3, r4
 800df48:	d105      	bne.n	800df56 <done>
 800df4a:	f105 0501 	add.w	r5, r5, #1

0800df4e <test2>:
 800df4e:	4295      	cmp	r5, r2
 800df50:	d1f7      	bne.n	800df42 <loop2>
 800df52:	f04f 0300 	mov.w	r3, #0

0800df56 <done>:
 800df56:	4618      	mov	r0, r3
 800df58:	bc70      	pop	{r4, r5, r6}
			break;
	}
#endif

	return d;
}
 800df5a:	4770      	bx	lr

0800df5c <memcpy>:
#if defined(__ARM_FEATURE_UNALIGNED)
        /*
         * We can speed up a bit by moving 32-bit words if unaligned access is
         * supported (e.g. Cortex-M3/4/7/33).
         */
        asm (".syntax unified           \n"
 800df5c:	e001      	b.n	800df62 <test1>

0800df5e <loop1>:
 800df5e:	588b      	ldr	r3, [r1, r2]
 800df60:	5083      	str	r3, [r0, r2]

0800df62 <test1>:
 800df62:	3a04      	subs	r2, #4
 800df64:	d5fb      	bpl.n	800df5e <loop1>
 800df66:	f102 0204 	add.w	r2, r2, #4
             "       bpl  loop1         \n"
             "       add  r2, #4        \n"
            );
#endif

        asm (".syntax unified           \n"
 800df6a:	e001      	b.n	800df70 <test2>

0800df6c <loop2>:
 800df6c:	5c8b      	ldrb	r3, [r1, r2]
 800df6e:	5483      	strb	r3, [r0, r2]

0800df70 <test2>:
 800df70:	3a01      	subs	r2, #1
 800df72:	d5fb      	bpl.n	800df6c <loop2>
		*q++ = *p++;
	}
#endif

	return dst;
}
 800df74:	4770      	bx	lr

0800df76 <memset>:
#if defined(__arm__)
#include <mcu/cmsis_nvic.h>
#endif

void *memset(void *dst, int c, size_t n)
{
 800df76:	b430      	push	{r4, r5}
	asm volatile ("cld ; rep ; stosq ; movl %3,%%ecx ; rep ; stosb"
		      :"+c" (nq), "+D" (q)
		      : "a" ((unsigned char)c * 0x0101010101010101U),
			"r" ((uint32_t) n & 7));
#elif defined(__arm__)
    asm volatile (".syntax unified                          \n"
 800df78:	4605      	mov	r5, r0
 800df7a:	b2c9      	uxtb	r1, r1
 800df7c:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 800df80:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800df84:	18ab      	adds	r3, r5, r2
 800df86:	2403      	movs	r4, #3
 800df88:	4023      	ands	r3, r4
 800df8a:	1ad3      	subs	r3, r2, r3
 800df8c:	d40b      	bmi.n	800dfa6 <memset+0x30>
 800df8e:	e001      	b.n	800df94 <memset+0x1e>
 800df90:	3a01      	subs	r2, #1
 800df92:	54a9      	strb	r1, [r5, r2]
 800df94:	429a      	cmp	r2, r3
 800df96:	d1fb      	bne.n	800df90 <memset+0x1a>
 800df98:	e000      	b.n	800df9c <memset+0x26>
 800df9a:	50a9      	str	r1, [r5, r2]
 800df9c:	3a04      	subs	r2, #4
 800df9e:	d5fc      	bpl.n	800df9a <memset+0x24>
 800dfa0:	3204      	adds	r2, #4
 800dfa2:	e000      	b.n	800dfa6 <memset+0x30>
 800dfa4:	54a9      	strb	r1, [r5, r2]
 800dfa6:	3a01      	subs	r2, #1
 800dfa8:	d5fc      	bpl.n	800dfa4 <memset+0x2e>
		*q++ = c;
	}
#endif

	return dst;
}
 800dfaa:	bc30      	pop	{r4, r5}
 800dfac:	4770      	bx	lr

0800dfae <sprintf>:
#include <stdio.h>
#include <unistd.h>
#include <stdint.h>

int sprintf(char *buffer, const char *format, ...)
{
 800dfae:	b40e      	push	{r1, r2, r3}
 800dfb0:	b500      	push	{lr}
 800dfb2:	b082      	sub	sp, #8
 800dfb4:	ab03      	add	r3, sp, #12
 800dfb6:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list ap;
	int rv;

	va_start(ap, format);
 800dfba:	9301      	str	r3, [sp, #4]
	rv = vsnprintf(buffer, SIZE_MAX/2, format, ap);
 800dfbc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800dfc0:	f000 faea 	bl	800e598 <vsnprintf>
	va_end(ap);

	return rv;
}
 800dfc4:	b002      	add	sp, #8
 800dfc6:	f85d eb04 	ldr.w	lr, [sp], #4
 800dfca:	b003      	add	sp, #12
 800dfcc:	4770      	bx	lr

0800dfce <strcmp>:
 */

#include <string.h>

int strcmp(const char *s1, const char *s2)
{
 800dfce:	b430      	push	{r4, r5}
 800dfd0:	4602      	mov	r2, r0
	const unsigned char *c2 = (const unsigned char *)s2;
	unsigned char ch;
	int d = 0;

	while (1) {
		d = (int)(ch = *c1++) - (int)*c2++;
 800dfd2:	1c55      	adds	r5, r2, #1
 800dfd4:	7813      	ldrb	r3, [r2, #0]
 800dfd6:	1c4c      	adds	r4, r1, #1
 800dfd8:	7808      	ldrb	r0, [r1, #0]
		if (d || !ch)
 800dfda:	1a18      	subs	r0, r3, r0
 800dfdc:	d103      	bne.n	800dfe6 <strcmp+0x18>
		d = (int)(ch = *c1++) - (int)*c2++;
 800dfde:	462a      	mov	r2, r5
 800dfe0:	4621      	mov	r1, r4
		if (d || !ch)
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d1f5      	bne.n	800dfd2 <strcmp+0x4>
			break;
	}

	return d;
}
 800dfe6:	bc30      	pop	{r4, r5}
 800dfe8:	4770      	bx	lr

0800dfea <strlen>:

#include <string.h>

size_t strlen(const char *s)
{
	const char *ss = s;
 800dfea:	4603      	mov	r3, r0
	while (*ss)
 800dfec:	e000      	b.n	800dff0 <strlen+0x6>
		ss++;
 800dfee:	3301      	adds	r3, #1
	while (*ss)
 800dff0:	781a      	ldrb	r2, [r3, #0]
 800dff2:	2a00      	cmp	r2, #0
 800dff4:	d1fb      	bne.n	800dfee <strlen+0x4>
	return ss - s;
}
 800dff6:	1a18      	subs	r0, r3, r0
 800dff8:	4770      	bx	lr

0800dffa <strncpy>:
 */

#include <string.h>

char *strncpy(char *dst, const char *src, size_t n)
{
 800dffa:	b570      	push	{r4, r5, r6, lr}
 800dffc:	4606      	mov	r6, r0
	char *q = dst;
	const char *p = src;
	char ch;

	while (n) {
 800dffe:	b14a      	cbz	r2, 800e014 <strncpy+0x1a>
		n--;
 800e000:	3a01      	subs	r2, #1
		*q++ = ch = *p++;
 800e002:	1c4d      	adds	r5, r1, #1
 800e004:	780b      	ldrb	r3, [r1, #0]
 800e006:	1c44      	adds	r4, r0, #1
 800e008:	7003      	strb	r3, [r0, #0]
		if (!ch)
 800e00a:	b113      	cbz	r3, 800e012 <strncpy+0x18>
		*q++ = ch = *p++;
 800e00c:	4629      	mov	r1, r5
 800e00e:	4620      	mov	r0, r4
 800e010:	e7f5      	b.n	800dffe <strncpy+0x4>
 800e012:	4620      	mov	r0, r4
			break;
	}

	/* The specs say strncpy() fills the entire buffer with NUL.  Sigh. */
	memset(q, 0, n);
 800e014:	2100      	movs	r1, #0
 800e016:	f7ff ffae 	bl	800df76 <memset>

	return dst;
}
 800e01a:	4630      	mov	r0, r6
 800e01c:	bd70      	pop	{r4, r5, r6, pc}

0800e01e <ui2a>:
    char base;  /**<  number base (e.g.: 8, 10, 16) */
    char *bf;           /**<  Buffer to output */
};

static void ui2a(unsigned long long int num, struct param *p)
{
 800e01e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e022:	b082      	sub	sp, #8
 800e024:	e9cd 0100 	strd	r0, r1, [sp]
 800e028:	4691      	mov	r9, r2
    int n = 0;
    unsigned long long int d = 1;
    char *bf = p->bf;
 800e02a:	f8d2 8004 	ldr.w	r8, [r2, #4]
    unsigned long long int d = 1;
 800e02e:	2401      	movs	r4, #1
 800e030:	2500      	movs	r5, #0
    while (num / d >= p->base)
 800e032:	e004      	b.n	800e03e <ui2a+0x20>
        d *= p->base;
 800e034:	fb06 f305 	mul.w	r3, r6, r5
 800e038:	fba4 4506 	umull	r4, r5, r4, r6
 800e03c:	441d      	add	r5, r3
    while (num / d >= p->base)
 800e03e:	4622      	mov	r2, r4
 800e040:	462b      	mov	r3, r5
 800e042:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e046:	f007 fcb1 	bl	80159ac <__aeabi_uldivmod>
 800e04a:	f899 6003 	ldrb.w	r6, [r9, #3]
 800e04e:	2700      	movs	r7, #0
 800e050:	42b9      	cmp	r1, r7
 800e052:	bf08      	it	eq
 800e054:	42b0      	cmpeq	r0, r6
 800e056:	d2ed      	bcs.n	800e034 <ui2a+0x16>
    int n = 0;
 800e058:	f04f 0a00 	mov.w	sl, #0
 800e05c:	e007      	b.n	800e06e <ui2a+0x50>
    while (d != 0) {
        unsigned long long  dgt = num / d;
        num %= d;
        d /= p->base;
        if (n || dgt > 0 || d == 0) {
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
 800e05e:	2330      	movs	r3, #48	; 0x30
 800e060:	441e      	add	r6, r3
 800e062:	f888 6000 	strb.w	r6, [r8]
            ++n;
 800e066:	f10a 0a01 	add.w	sl, sl, #1
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
 800e06a:	f108 0801 	add.w	r8, r8, #1
    while (d != 0) {
 800e06e:	ea54 0305 	orrs.w	r3, r4, r5
 800e072:	d02e      	beq.n	800e0d2 <ui2a+0xb4>
        unsigned long long  dgt = num / d;
 800e074:	4622      	mov	r2, r4
 800e076:	462b      	mov	r3, r5
 800e078:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e07c:	f007 fc96 	bl	80159ac <__aeabi_uldivmod>
 800e080:	4606      	mov	r6, r0
 800e082:	460f      	mov	r7, r1
        num %= d;
 800e084:	4622      	mov	r2, r4
 800e086:	462b      	mov	r3, r5
 800e088:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e08c:	f007 fc8e 	bl	80159ac <__aeabi_uldivmod>
 800e090:	e9cd 2300 	strd	r2, r3, [sp]
        d /= p->base;
 800e094:	f899 2003 	ldrb.w	r2, [r9, #3]
 800e098:	2300      	movs	r3, #0
 800e09a:	4620      	mov	r0, r4
 800e09c:	4629      	mov	r1, r5
 800e09e:	f007 fc85 	bl	80159ac <__aeabi_uldivmod>
 800e0a2:	4604      	mov	r4, r0
 800e0a4:	460d      	mov	r5, r1
        if (n || dgt > 0 || d == 0) {
 800e0a6:	f1ba 0f00 	cmp.w	sl, #0
 800e0aa:	d105      	bne.n	800e0b8 <ui2a+0x9a>
 800e0ac:	ea56 0307 	orrs.w	r3, r6, r7
 800e0b0:	d102      	bne.n	800e0b8 <ui2a+0x9a>
 800e0b2:	ea54 0305 	orrs.w	r3, r4, r5
 800e0b6:	d1da      	bne.n	800e06e <ui2a+0x50>
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
 800e0b8:	2f00      	cmp	r7, #0
 800e0ba:	bf08      	it	eq
 800e0bc:	2e0a      	cmpeq	r6, #10
 800e0be:	d3ce      	bcc.n	800e05e <ui2a+0x40>
 800e0c0:	f899 3002 	ldrb.w	r3, [r9, #2]
 800e0c4:	f013 0f04 	tst.w	r3, #4
 800e0c8:	d001      	beq.n	800e0ce <ui2a+0xb0>
 800e0ca:	2337      	movs	r3, #55	; 0x37
 800e0cc:	e7c8      	b.n	800e060 <ui2a+0x42>
 800e0ce:	2357      	movs	r3, #87	; 0x57
 800e0d0:	e7c6      	b.n	800e060 <ui2a+0x42>
        }
    }
    *bf = 0;
 800e0d2:	2300      	movs	r3, #0
 800e0d4:	f888 3000 	strb.w	r3, [r8]
}
 800e0d8:	b002      	add	sp, #8
 800e0da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800e0de <i2a>:

static void i2a(long long int num, struct param *p)
{
 800e0de:	b508      	push	{r3, lr}
    if (num < 0) {
 800e0e0:	2800      	cmp	r0, #0
 800e0e2:	f171 0300 	sbcs.w	r3, r1, #0
 800e0e6:	db02      	blt.n	800e0ee <i2a+0x10>
        num = -num;
        p->sign = 1;
    }
    ui2a(num, p);
 800e0e8:	f7ff ff99 	bl	800e01e <ui2a>
}
 800e0ec:	bd08      	pop	{r3, pc}
        num = -num;
 800e0ee:	4240      	negs	r0, r0
 800e0f0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
        p->sign = 1;
 800e0f4:	7893      	ldrb	r3, [r2, #2]
 800e0f6:	f043 0301 	orr.w	r3, r3, #1
 800e0fa:	7093      	strb	r3, [r2, #2]
 800e0fc:	e7f4      	b.n	800e0e8 <i2a+0xa>

0800e0fe <a2d>:

static int a2d(char ch)
{
    if (ch >= '0' && ch <= '9')
 800e0fe:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800e102:	b2db      	uxtb	r3, r3
 800e104:	2b09      	cmp	r3, #9
 800e106:	d90b      	bls.n	800e120 <a2d+0x22>
        return ch - '0';
    else if (ch >= 'a' && ch <= 'f')
 800e108:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800e10c:	b2db      	uxtb	r3, r3
 800e10e:	2b05      	cmp	r3, #5
 800e110:	d908      	bls.n	800e124 <a2d+0x26>
        return ch - 'a' + 10;
    else if (ch >= 'A' && ch <= 'F')
 800e112:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800e116:	b2db      	uxtb	r3, r3
 800e118:	2b05      	cmp	r3, #5
 800e11a:	d805      	bhi.n	800e128 <a2d+0x2a>
        return ch - 'A' + 10;
 800e11c:	3837      	subs	r0, #55	; 0x37
 800e11e:	4770      	bx	lr
        return ch - '0';
 800e120:	3830      	subs	r0, #48	; 0x30
 800e122:	4770      	bx	lr
        return ch - 'a' + 10;
 800e124:	3857      	subs	r0, #87	; 0x57
 800e126:	4770      	bx	lr
    else
        return -1;
 800e128:	f04f 30ff 	mov.w	r0, #4294967295
}
 800e12c:	4770      	bx	lr

0800e12e <a2i>:

static char a2i(char ch, const char **src, int base, unsigned char *nump)
{
 800e12e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e132:	4605      	mov	r5, r0
 800e134:	4688      	mov	r8, r1
 800e136:	4617      	mov	r7, r2
 800e138:	4699      	mov	r9, r3
    const char *p = *src;
 800e13a:	680c      	ldr	r4, [r1, #0]
    int num = 0;
 800e13c:	2600      	movs	r6, #0
    int digit;
    while ((digit = a2d(ch)) >= 0) {
 800e13e:	4628      	mov	r0, r5
 800e140:	f7ff ffdd 	bl	800e0fe <a2d>
 800e144:	2800      	cmp	r0, #0
 800e146:	db06      	blt.n	800e156 <a2i+0x28>
        if (digit > base)
 800e148:	42b8      	cmp	r0, r7
 800e14a:	dc04      	bgt.n	800e156 <a2i+0x28>
            break;
        num = num * base + digit;
 800e14c:	fb07 0606 	mla	r6, r7, r6, r0
        ch = *p++;
 800e150:	7825      	ldrb	r5, [r4, #0]
 800e152:	3401      	adds	r4, #1
 800e154:	e7f3      	b.n	800e13e <a2i+0x10>
    }
    *src = p;
 800e156:	f8c8 4000 	str.w	r4, [r8]
    *nump = num;
 800e15a:	f889 6000 	strb.w	r6, [r9]
    return ch;
}
 800e15e:	4628      	mov	r0, r5
 800e160:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800e164 <putf>:

static int putf(FILE *putp, char c)
{
 800e164:	b500      	push	{lr}
 800e166:	b083      	sub	sp, #12
	return fwrite(s, 1, strlen(s), stdout) + fwrite("\n", 1, 1, stdout);
}

__extern_inline int fputc(int c, FILE *f)
{
	unsigned char ch = c;
 800e168:	f88d 1007 	strb.w	r1, [sp, #7]
    if (stream->vmt->write == NULL) return 0;
 800e16c:	6803      	ldr	r3, [r0, #0]
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	b14b      	cbz	r3, 800e186 <putf+0x22>
    return stream->vmt->write(stream, (char*)buf, size*nmemb) / size;
 800e172:	2201      	movs	r2, #1
 800e174:	f10d 0107 	add.w	r1, sp, #7
 800e178:	4798      	blx	r3
	return fwrite(&ch, 1, 1, f) == 1 ? ch : EOF;
 800e17a:	2801      	cmp	r0, #1
 800e17c:	d005      	beq.n	800e18a <putf+0x26>
    if (fputc(c, putp) == EOF)
        return 0;
 800e17e:	2000      	movs	r0, #0
    else
        return 1;
}
 800e180:	b003      	add	sp, #12
 800e182:	f85d fb04 	ldr.w	pc, [sp], #4
        return 0;
 800e186:	2000      	movs	r0, #0
 800e188:	e7fa      	b.n	800e180 <putf+0x1c>
        return 1;
 800e18a:	2001      	movs	r0, #1
 800e18c:	e7f8      	b.n	800e180 <putf+0x1c>
	...

0800e190 <putchw>:

static unsigned putchw(FILE *putp, struct param *p)
{
 800e190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e194:	4606      	mov	r6, r0
 800e196:	460f      	mov	r7, r1
    unsigned written = 0;
    char ch;
    int n = p->width;
 800e198:	780c      	ldrb	r4, [r1, #0]
    char *bf = p->bf;
 800e19a:	684b      	ldr	r3, [r1, #4]

    /* Number of filling characters */
    while (*bf++ && n > 0)
 800e19c:	e001      	b.n	800e1a2 <putchw+0x12>
        n--;
 800e19e:	3c01      	subs	r4, #1
    while (*bf++ && n > 0)
 800e1a0:	4613      	mov	r3, r2
 800e1a2:	1c5a      	adds	r2, r3, #1
 800e1a4:	781b      	ldrb	r3, [r3, #0]
 800e1a6:	b10b      	cbz	r3, 800e1ac <putchw+0x1c>
 800e1a8:	2c00      	cmp	r4, #0
 800e1aa:	dcf8      	bgt.n	800e19e <putchw+0xe>
    if (p->sign)
 800e1ac:	78bb      	ldrb	r3, [r7, #2]
 800e1ae:	f013 0f01 	tst.w	r3, #1
 800e1b2:	d000      	beq.n	800e1b6 <putchw+0x26>
        n--;
 800e1b4:	3c01      	subs	r4, #1
    if (p->alt && p->base == 16)
 800e1b6:	887b      	ldrh	r3, [r7, #2]
 800e1b8:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
 800e1bc:	b29b      	uxth	r3, r3
 800e1be:	f241 0202 	movw	r2, #4098	; 0x1002
 800e1c2:	4293      	cmp	r3, r2
 800e1c4:	d01c      	beq.n	800e200 <putchw+0x70>
        n -= 2;
    else if (p->alt && p->base == 8)
 800e1c6:	f640 0202 	movw	r2, #2050	; 0x802
 800e1ca:	4293      	cmp	r3, r2
 800e1cc:	d01a      	beq.n	800e204 <putchw+0x74>
        n--;

    /* Unless left-aligned, fill with space, before alternate or sign */
    if (!p->lz && !p->left) {
 800e1ce:	683b      	ldr	r3, [r7, #0]
 800e1d0:	4d35      	ldr	r5, [pc, #212]	; (800e2a8 <putchw+0x118>)
 800e1d2:	401d      	ands	r5, r3
 800e1d4:	b1f5      	cbz	r5, 800e214 <putchw+0x84>
    unsigned written = 0;
 800e1d6:	2500      	movs	r5, #0
        while (n-- > 0)
            written += putf(putp, ' ');
    }

    /* print sign */
    if (p->sign)
 800e1d8:	78bb      	ldrb	r3, [r7, #2]
 800e1da:	f013 0f01 	tst.w	r3, #1
 800e1de:	d11f      	bne.n	800e220 <putchw+0x90>
        written += putf(putp, '-');

    /* Alternate */
    if (p->alt && p->base == 16) {
 800e1e0:	887b      	ldrh	r3, [r7, #2]
 800e1e2:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
 800e1e6:	b29b      	uxth	r3, r3
 800e1e8:	f241 0202 	movw	r2, #4098	; 0x1002
 800e1ec:	4293      	cmp	r3, r2
 800e1ee:	d01d      	beq.n	800e22c <putchw+0x9c>
        written += putf(putp, '0');
        written += putf(putp, (p->uc ? 'X' : 'x'));
    } else if (p->alt && p->base == 8) {
 800e1f0:	f640 0202 	movw	r2, #2050	; 0x802
 800e1f4:	4293      	cmp	r3, r2
 800e1f6:	d02a      	beq.n	800e24e <putchw+0xbe>
        written += putf(putp, '0');
    }

    /* Fill with zeros, after alternate or sign */
    if (p->lz) {
 800e1f8:	787b      	ldrb	r3, [r7, #1]
 800e1fa:	bba3      	cbnz	r3, 800e266 <putchw+0xd6>
        while (n-- > 0)
            written += putf(putp, '0');
    }

    /* Put actual buffer */
    bf = p->bf;
 800e1fc:	687b      	ldr	r3, [r7, #4]
    while ((ch = *bf++))
 800e1fe:	e03d      	b.n	800e27c <putchw+0xec>
        n -= 2;
 800e200:	3c02      	subs	r4, #2
 800e202:	e7e4      	b.n	800e1ce <putchw+0x3e>
        n--;
 800e204:	3c01      	subs	r4, #1
 800e206:	e7e2      	b.n	800e1ce <putchw+0x3e>
            written += putf(putp, ' ');
 800e208:	2120      	movs	r1, #32
 800e20a:	4630      	mov	r0, r6
 800e20c:	f7ff ffaa 	bl	800e164 <putf>
 800e210:	4405      	add	r5, r0
        while (n-- > 0)
 800e212:	4644      	mov	r4, r8
 800e214:	f104 38ff 	add.w	r8, r4, #4294967295
 800e218:	2c00      	cmp	r4, #0
 800e21a:	dcf5      	bgt.n	800e208 <putchw+0x78>
 800e21c:	4644      	mov	r4, r8
 800e21e:	e7db      	b.n	800e1d8 <putchw+0x48>
        written += putf(putp, '-');
 800e220:	212d      	movs	r1, #45	; 0x2d
 800e222:	4630      	mov	r0, r6
 800e224:	f7ff ff9e 	bl	800e164 <putf>
 800e228:	4405      	add	r5, r0
 800e22a:	e7d9      	b.n	800e1e0 <putchw+0x50>
        written += putf(putp, '0');
 800e22c:	2130      	movs	r1, #48	; 0x30
 800e22e:	4630      	mov	r0, r6
 800e230:	f7ff ff98 	bl	800e164 <putf>
 800e234:	4405      	add	r5, r0
        written += putf(putp, (p->uc ? 'X' : 'x'));
 800e236:	78bb      	ldrb	r3, [r7, #2]
 800e238:	f013 0f04 	tst.w	r3, #4
 800e23c:	d005      	beq.n	800e24a <putchw+0xba>
 800e23e:	2158      	movs	r1, #88	; 0x58
 800e240:	4630      	mov	r0, r6
 800e242:	f7ff ff8f 	bl	800e164 <putf>
 800e246:	4405      	add	r5, r0
 800e248:	e7d6      	b.n	800e1f8 <putchw+0x68>
 800e24a:	2178      	movs	r1, #120	; 0x78
 800e24c:	e7f8      	b.n	800e240 <putchw+0xb0>
        written += putf(putp, '0');
 800e24e:	2130      	movs	r1, #48	; 0x30
 800e250:	4630      	mov	r0, r6
 800e252:	f7ff ff87 	bl	800e164 <putf>
 800e256:	4405      	add	r5, r0
 800e258:	e7ce      	b.n	800e1f8 <putchw+0x68>
            written += putf(putp, '0');
 800e25a:	2130      	movs	r1, #48	; 0x30
 800e25c:	4630      	mov	r0, r6
 800e25e:	f7ff ff81 	bl	800e164 <putf>
 800e262:	4405      	add	r5, r0
        while (n-- > 0)
 800e264:	4644      	mov	r4, r8
 800e266:	f104 38ff 	add.w	r8, r4, #4294967295
 800e26a:	2c00      	cmp	r4, #0
 800e26c:	dcf5      	bgt.n	800e25a <putchw+0xca>
 800e26e:	4644      	mov	r4, r8
 800e270:	e7c4      	b.n	800e1fc <putchw+0x6c>
        written += putf(putp, ch);
 800e272:	4630      	mov	r0, r6
 800e274:	f7ff ff76 	bl	800e164 <putf>
 800e278:	4405      	add	r5, r0
    while ((ch = *bf++))
 800e27a:	4643      	mov	r3, r8
 800e27c:	f103 0801 	add.w	r8, r3, #1
 800e280:	7819      	ldrb	r1, [r3, #0]
 800e282:	2900      	cmp	r1, #0
 800e284:	d1f5      	bne.n	800e272 <putchw+0xe2>

    /* If left-aligned, pad the end with spaces. */
    if (p->left) {
 800e286:	78bb      	ldrb	r3, [r7, #2]
 800e288:	f013 0f08 	tst.w	r3, #8
 800e28c:	d106      	bne.n	800e29c <putchw+0x10c>
 800e28e:	e008      	b.n	800e2a2 <putchw+0x112>
        while (n-- > 0)
            written += putf(putp, ' ');
 800e290:	2120      	movs	r1, #32
 800e292:	4630      	mov	r0, r6
 800e294:	f7ff ff66 	bl	800e164 <putf>
 800e298:	4405      	add	r5, r0
        while (n-- > 0)
 800e29a:	463c      	mov	r4, r7
 800e29c:	1e67      	subs	r7, r4, #1
 800e29e:	2c00      	cmp	r4, #0
 800e2a0:	dcf6      	bgt.n	800e290 <putchw+0x100>
    }
    
    return written;
}
 800e2a2:	4628      	mov	r0, r5
 800e2a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2a8:	0008ff00 	.word	0x0008ff00

0800e2ac <intarg>:
static unsigned long long
intarg(int lng, int sign, va_list *va)
{
    unsigned long long val;

    switch (lng) {
 800e2ac:	b160      	cbz	r0, 800e2c8 <intarg+0x1c>
 800e2ae:	2801      	cmp	r0, #1
 800e2b0:	d017      	beq.n	800e2e2 <intarg+0x36>
        }
        break;

    case 2:
    default:
        if (sign) {
 800e2b2:	bb19      	cbnz	r1, 800e2fc <intarg+0x50>
            val = va_arg(*va, long long);
        } else {
            val = va_arg(*va, unsigned long long);
 800e2b4:	6813      	ldr	r3, [r2, #0]
 800e2b6:	3307      	adds	r3, #7
 800e2b8:	f023 0307 	bic.w	r3, r3, #7
 800e2bc:	f103 0108 	add.w	r1, r3, #8
 800e2c0:	6011      	str	r1, [r2, #0]
 800e2c2:	e9d3 0100 	ldrd	r0, r1, [r3]
        }
        break;
    }

    return val;
}
 800e2c6:	4770      	bx	lr
        if (sign) {
 800e2c8:	b129      	cbz	r1, 800e2d6 <intarg+0x2a>
            val = va_arg(*va, int);
 800e2ca:	6813      	ldr	r3, [r2, #0]
 800e2cc:	1d19      	adds	r1, r3, #4
 800e2ce:	6011      	str	r1, [r2, #0]
 800e2d0:	6818      	ldr	r0, [r3, #0]
 800e2d2:	17c1      	asrs	r1, r0, #31
 800e2d4:	4770      	bx	lr
            val = va_arg(*va, unsigned int);
 800e2d6:	6813      	ldr	r3, [r2, #0]
 800e2d8:	1d19      	adds	r1, r3, #4
 800e2da:	6011      	str	r1, [r2, #0]
 800e2dc:	6818      	ldr	r0, [r3, #0]
 800e2de:	2100      	movs	r1, #0
 800e2e0:	4770      	bx	lr
        if (sign) {
 800e2e2:	b129      	cbz	r1, 800e2f0 <intarg+0x44>
            val = va_arg(*va, long);
 800e2e4:	6813      	ldr	r3, [r2, #0]
 800e2e6:	1d19      	adds	r1, r3, #4
 800e2e8:	6011      	str	r1, [r2, #0]
 800e2ea:	6818      	ldr	r0, [r3, #0]
 800e2ec:	17c1      	asrs	r1, r0, #31
 800e2ee:	4770      	bx	lr
            val = va_arg(*va, unsigned long);
 800e2f0:	6813      	ldr	r3, [r2, #0]
 800e2f2:	1d19      	adds	r1, r3, #4
 800e2f4:	6011      	str	r1, [r2, #0]
 800e2f6:	6818      	ldr	r0, [r3, #0]
 800e2f8:	2100      	movs	r1, #0
 800e2fa:	4770      	bx	lr
            val = va_arg(*va, long long);
 800e2fc:	6813      	ldr	r3, [r2, #0]
 800e2fe:	3307      	adds	r3, #7
 800e300:	f023 0307 	bic.w	r3, r3, #7
 800e304:	f103 0108 	add.w	r1, r3, #8
 800e308:	6011      	str	r1, [r2, #0]
 800e30a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e30e:	4770      	bx	lr

0800e310 <tfp_format>:

size_t tfp_format(FILE *putp, const char *fmt, va_list va)
{
 800e310:	b570      	push	{r4, r5, r6, lr}
 800e312:	b08a      	sub	sp, #40	; 0x28
 800e314:	4605      	mov	r5, r0
 800e316:	9101      	str	r1, [sp, #4]
 800e318:	9200      	str	r2, [sp, #0]
    double d;
    int n;
#endif
    int i;

    p.bf = bf;
 800e31a:	ab02      	add	r3, sp, #8
 800e31c:	9309      	str	r3, [sp, #36]	; 0x24
    size_t written = 0;
 800e31e:	2400      	movs	r4, #0

    while ((ch = *(fmt++))) {
 800e320:	9b01      	ldr	r3, [sp, #4]
 800e322:	1c5a      	adds	r2, r3, #1
 800e324:	9201      	str	r2, [sp, #4]
 800e326:	7819      	ldrb	r1, [r3, #0]
 800e328:	2900      	cmp	r1, #0
 800e32a:	f000 811c 	beq.w	800e566 <tfp_format+0x256>
        if (ch != '%') {
 800e32e:	2925      	cmp	r1, #37	; 0x25
 800e330:	d004      	beq.n	800e33c <tfp_format+0x2c>
            written += putf(putp, ch);
 800e332:	4628      	mov	r0, r5
 800e334:	f7ff ff16 	bl	800e164 <putf>
 800e338:	4404      	add	r4, r0
 800e33a:	e7f1      	b.n	800e320 <tfp_format+0x10>
        } else {
            /* Init parameter struct */
            p.lz = 0;
 800e33c:	2200      	movs	r2, #0
 800e33e:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
            p.alt = 0;
 800e342:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
            p.width = 0;
 800e346:	f88d 2020 	strb.w	r2, [sp, #32]
            p.sign = 0;
            p.left = 0;
            p.uc = 0;
 800e34a:	f003 03f4 	and.w	r3, r3, #244	; 0xf4
 800e34e:	f362 0382 	bfi	r3, r2, #2, #1
 800e352:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
            lng = 0;

            /* Flags */
            while ((ch = *(fmt++))) {
 800e356:	9b01      	ldr	r3, [sp, #4]
 800e358:	1c5a      	adds	r2, r3, #1
 800e35a:	9201      	str	r2, [sp, #4]
 800e35c:	7818      	ldrb	r0, [r3, #0]
 800e35e:	b128      	cbz	r0, 800e36c <tfp_format+0x5c>
                switch (ch) {
 800e360:	282d      	cmp	r0, #45	; 0x2d
 800e362:	d04e      	beq.n	800e402 <tfp_format+0xf2>
 800e364:	2830      	cmp	r0, #48	; 0x30
 800e366:	d03c      	beq.n	800e3e2 <tfp_format+0xd2>
 800e368:	2823      	cmp	r0, #35	; 0x23
 800e36a:	d043      	beq.n	800e3f4 <tfp_format+0xe4>
                }
                break;
            }

            /* Width */
            if (ch == '*') {
 800e36c:	282a      	cmp	r0, #42	; 0x2a
 800e36e:	d052      	beq.n	800e416 <tfp_format+0x106>
                    p.width = UCHAR_MAX;
                } else if (i > 0) {
                    p.width = i;
                }
                ch = *(fmt++);
            } else if (ch >= '0' && ch <= '9') {
 800e370:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800e374:	b2db      	uxtb	r3, r3
 800e376:	2b09      	cmp	r3, #9
 800e378:	d961      	bls.n	800e43e <tfp_format+0x12e>
                ch = a2i(ch, &fmt, 10, &(p.width));
            }
            if (ch == 'l') {
 800e37a:	286c      	cmp	r0, #108	; 0x6c
 800e37c:	d065      	beq.n	800e44a <tfp_format+0x13a>
            lng = 0;
 800e37e:	2600      	movs	r6, #0
                    ch = *(fmt++);
                    lng = 2;
                }
            }

            if (ch == 'z') {
 800e380:	287a      	cmp	r0, #122	; 0x7a
 800e382:	d06f      	beq.n	800e464 <tfp_format+0x154>
                ch = *(fmt++);
            }

            switch (ch) {
 800e384:	2869      	cmp	r0, #105	; 0x69
 800e386:	f000 808e 	beq.w	800e4a6 <tfp_format+0x196>
 800e38a:	d970      	bls.n	800e46e <tfp_format+0x15e>
 800e38c:	2873      	cmp	r0, #115	; 0x73
 800e38e:	f000 80dd 	beq.w	800e54c <tfp_format+0x23c>
 800e392:	f200 8099 	bhi.w	800e4c8 <tfp_format+0x1b8>
 800e396:	286f      	cmp	r0, #111	; 0x6f
 800e398:	f000 80c7 	beq.w	800e52a <tfp_format+0x21a>
 800e39c:	2870      	cmp	r0, #112	; 0x70
 800e39e:	d1bf      	bne.n	800e320 <tfp_format+0x10>
                p.base = 8;
                ui2a(intarg(lng, 0, &va), &p);
                written += putchw(putp, &p);
                break;
            case 'p':
                v = va_arg(va, void *);
 800e3a0:	9b00      	ldr	r3, [sp, #0]
 800e3a2:	1d1a      	adds	r2, r3, #4
 800e3a4:	9200      	str	r2, [sp, #0]
 800e3a6:	6818      	ldr	r0, [r3, #0]
                p.base = 16;
 800e3a8:	2310      	movs	r3, #16
 800e3aa:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a((uintptr_t)v, &p);
 800e3ae:	aa08      	add	r2, sp, #32
 800e3b0:	2100      	movs	r1, #0
 800e3b2:	f7ff fe34 	bl	800e01e <ui2a>
                p.width = 2 * sizeof(void*);
 800e3b6:	2308      	movs	r3, #8
 800e3b8:	f88d 3020 	strb.w	r3, [sp, #32]
                p.lz = 1;
 800e3bc:	2301      	movs	r3, #1
 800e3be:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                written += putf(putp, '0');
 800e3c2:	2130      	movs	r1, #48	; 0x30
 800e3c4:	4628      	mov	r0, r5
 800e3c6:	f7ff fecd 	bl	800e164 <putf>
 800e3ca:	4404      	add	r4, r0
                written += putf(putp, 'x');
 800e3cc:	2178      	movs	r1, #120	; 0x78
 800e3ce:	4628      	mov	r0, r5
 800e3d0:	f7ff fec8 	bl	800e164 <putf>
 800e3d4:	4404      	add	r4, r0
                written += putchw(putp, &p);
 800e3d6:	a908      	add	r1, sp, #32
 800e3d8:	4628      	mov	r0, r5
 800e3da:	f7ff fed9 	bl	800e190 <putchw>
 800e3de:	4404      	add	r4, r0
                break;
 800e3e0:	e79e      	b.n	800e320 <tfp_format+0x10>
                    if (!p.left) {
 800e3e2:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
 800e3e6:	f013 0f08 	tst.w	r3, #8
 800e3ea:	d1b4      	bne.n	800e356 <tfp_format+0x46>
                        p.lz = 1;
 800e3ec:	2301      	movs	r3, #1
 800e3ee:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                    continue;
 800e3f2:	e7b0      	b.n	800e356 <tfp_format+0x46>
                    p.alt = 1;
 800e3f4:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
 800e3f8:	f043 0302 	orr.w	r3, r3, #2
 800e3fc:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                    continue;
 800e400:	e7a9      	b.n	800e356 <tfp_format+0x46>
                    p.left = 1;
 800e402:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
 800e406:	f043 0308 	orr.w	r3, r3, #8
 800e40a:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                    p.lz = 0;
 800e40e:	2300      	movs	r3, #0
 800e410:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                    continue;
 800e414:	e79f      	b.n	800e356 <tfp_format+0x46>
                i = intarg(0, 1, &va);
 800e416:	466a      	mov	r2, sp
 800e418:	2101      	movs	r1, #1
 800e41a:	2000      	movs	r0, #0
 800e41c:	f7ff ff46 	bl	800e2ac <intarg>
                if (i > UCHAR_MAX) {
 800e420:	28ff      	cmp	r0, #255	; 0xff
 800e422:	dd07      	ble.n	800e434 <tfp_format+0x124>
                    p.width = UCHAR_MAX;
 800e424:	23ff      	movs	r3, #255	; 0xff
 800e426:	f88d 3020 	strb.w	r3, [sp, #32]
                ch = *(fmt++);
 800e42a:	9b01      	ldr	r3, [sp, #4]
 800e42c:	1c5a      	adds	r2, r3, #1
 800e42e:	9201      	str	r2, [sp, #4]
 800e430:	7818      	ldrb	r0, [r3, #0]
 800e432:	e7a2      	b.n	800e37a <tfp_format+0x6a>
                } else if (i > 0) {
 800e434:	2800      	cmp	r0, #0
 800e436:	ddf8      	ble.n	800e42a <tfp_format+0x11a>
                    p.width = i;
 800e438:	f88d 0020 	strb.w	r0, [sp, #32]
 800e43c:	e7f5      	b.n	800e42a <tfp_format+0x11a>
                ch = a2i(ch, &fmt, 10, &(p.width));
 800e43e:	ab08      	add	r3, sp, #32
 800e440:	220a      	movs	r2, #10
 800e442:	a901      	add	r1, sp, #4
 800e444:	f7ff fe73 	bl	800e12e <a2i>
 800e448:	e797      	b.n	800e37a <tfp_format+0x6a>
                ch = *(fmt++);
 800e44a:	9b01      	ldr	r3, [sp, #4]
 800e44c:	1c5a      	adds	r2, r3, #1
 800e44e:	9201      	str	r2, [sp, #4]
 800e450:	7818      	ldrb	r0, [r3, #0]
                if (ch == 'l') {
 800e452:	286c      	cmp	r0, #108	; 0x6c
 800e454:	d001      	beq.n	800e45a <tfp_format+0x14a>
                lng = 1;
 800e456:	2601      	movs	r6, #1
 800e458:	e792      	b.n	800e380 <tfp_format+0x70>
                    ch = *(fmt++);
 800e45a:	1c9a      	adds	r2, r3, #2
 800e45c:	9201      	str	r2, [sp, #4]
 800e45e:	7858      	ldrb	r0, [r3, #1]
                    lng = 2;
 800e460:	2602      	movs	r6, #2
 800e462:	e78d      	b.n	800e380 <tfp_format+0x70>
                ch = *(fmt++);
 800e464:	9b01      	ldr	r3, [sp, #4]
 800e466:	1c5a      	adds	r2, r3, #1
 800e468:	9201      	str	r2, [sp, #4]
 800e46a:	7818      	ldrb	r0, [r3, #0]
 800e46c:	e78a      	b.n	800e384 <tfp_format+0x74>
            switch (ch) {
 800e46e:	2858      	cmp	r0, #88	; 0x58
 800e470:	d040      	beq.n	800e4f4 <tfp_format+0x1e4>
 800e472:	d80a      	bhi.n	800e48a <tfp_format+0x17a>
 800e474:	2800      	cmp	r0, #0
 800e476:	d076      	beq.n	800e566 <tfp_format+0x256>
 800e478:	2825      	cmp	r0, #37	; 0x25
 800e47a:	f47f af51 	bne.w	800e320 <tfp_format+0x10>
                /* Output the decimal part. */
                written += putchw(putp, &p);
                break;
#endif
            case '%':
                written += putf(putp, ch);
 800e47e:	4601      	mov	r1, r0
 800e480:	4628      	mov	r0, r5
 800e482:	f7ff fe6f 	bl	800e164 <putf>
 800e486:	4404      	add	r4, r0
                break;
 800e488:	e74a      	b.n	800e320 <tfp_format+0x10>
            switch (ch) {
 800e48a:	2863      	cmp	r0, #99	; 0x63
 800e48c:	d108      	bne.n	800e4a0 <tfp_format+0x190>
                written += putf(putp, (char)(va_arg(va, int)));
 800e48e:	9b00      	ldr	r3, [sp, #0]
 800e490:	1d1a      	adds	r2, r3, #4
 800e492:	9200      	str	r2, [sp, #0]
 800e494:	7819      	ldrb	r1, [r3, #0]
 800e496:	4628      	mov	r0, r5
 800e498:	f7ff fe64 	bl	800e164 <putf>
 800e49c:	4404      	add	r4, r0
                break;
 800e49e:	e73f      	b.n	800e320 <tfp_format+0x10>
            switch (ch) {
 800e4a0:	2864      	cmp	r0, #100	; 0x64
 800e4a2:	f47f af3d 	bne.w	800e320 <tfp_format+0x10>
                p.base = 10;
 800e4a6:	230a      	movs	r3, #10
 800e4a8:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                i2a(intarg(lng, 1, &va), &p);
 800e4ac:	466a      	mov	r2, sp
 800e4ae:	2101      	movs	r1, #1
 800e4b0:	4630      	mov	r0, r6
 800e4b2:	f7ff fefb 	bl	800e2ac <intarg>
 800e4b6:	aa08      	add	r2, sp, #32
 800e4b8:	f7ff fe11 	bl	800e0de <i2a>
                written += putchw(putp, &p);
 800e4bc:	a908      	add	r1, sp, #32
 800e4be:	4628      	mov	r0, r5
 800e4c0:	f7ff fe66 	bl	800e190 <putchw>
 800e4c4:	4404      	add	r4, r0
                break;
 800e4c6:	e72b      	b.n	800e320 <tfp_format+0x10>
            switch (ch) {
 800e4c8:	2875      	cmp	r0, #117	; 0x75
 800e4ca:	d110      	bne.n	800e4ee <tfp_format+0x1de>
                p.base = 10;
 800e4cc:	230a      	movs	r3, #10
 800e4ce:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a(intarg(lng, 0, &va), &p);
 800e4d2:	466a      	mov	r2, sp
 800e4d4:	2100      	movs	r1, #0
 800e4d6:	4630      	mov	r0, r6
 800e4d8:	f7ff fee8 	bl	800e2ac <intarg>
 800e4dc:	aa08      	add	r2, sp, #32
 800e4de:	f7ff fd9e 	bl	800e01e <ui2a>
                written += putchw(putp, &p);
 800e4e2:	a908      	add	r1, sp, #32
 800e4e4:	4628      	mov	r0, r5
 800e4e6:	f7ff fe53 	bl	800e190 <putchw>
 800e4ea:	4404      	add	r4, r0
                break;
 800e4ec:	e718      	b.n	800e320 <tfp_format+0x10>
            switch (ch) {
 800e4ee:	2878      	cmp	r0, #120	; 0x78
 800e4f0:	f47f af16 	bne.w	800e320 <tfp_format+0x10>
                p.base = 16;
 800e4f4:	2310      	movs	r3, #16
 800e4f6:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                p.uc = (ch == 'X');
 800e4fa:	2858      	cmp	r0, #88	; 0x58
 800e4fc:	bf14      	ite	ne
 800e4fe:	2300      	movne	r3, #0
 800e500:	2301      	moveq	r3, #1
 800e502:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
 800e506:	f363 0282 	bfi	r2, r3, #2, #1
 800e50a:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
                ui2a(intarg(lng, 0, &va), &p);
 800e50e:	466a      	mov	r2, sp
 800e510:	2100      	movs	r1, #0
 800e512:	4630      	mov	r0, r6
 800e514:	f7ff feca 	bl	800e2ac <intarg>
 800e518:	aa08      	add	r2, sp, #32
 800e51a:	f7ff fd80 	bl	800e01e <ui2a>
                written += putchw(putp, &p);
 800e51e:	a908      	add	r1, sp, #32
 800e520:	4628      	mov	r0, r5
 800e522:	f7ff fe35 	bl	800e190 <putchw>
 800e526:	4404      	add	r4, r0
                break;
 800e528:	e6fa      	b.n	800e320 <tfp_format+0x10>
                p.base = 8;
 800e52a:	2308      	movs	r3, #8
 800e52c:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a(intarg(lng, 0, &va), &p);
 800e530:	466a      	mov	r2, sp
 800e532:	2100      	movs	r1, #0
 800e534:	4630      	mov	r0, r6
 800e536:	f7ff feb9 	bl	800e2ac <intarg>
 800e53a:	aa08      	add	r2, sp, #32
 800e53c:	f7ff fd6f 	bl	800e01e <ui2a>
                written += putchw(putp, &p);
 800e540:	a908      	add	r1, sp, #32
 800e542:	4628      	mov	r0, r5
 800e544:	f7ff fe24 	bl	800e190 <putchw>
 800e548:	4404      	add	r4, r0
                break;
 800e54a:	e6e9      	b.n	800e320 <tfp_format+0x10>
                p.bf = va_arg(va, char *);
 800e54c:	9b00      	ldr	r3, [sp, #0]
 800e54e:	1d1a      	adds	r2, r3, #4
 800e550:	9200      	str	r2, [sp, #0]
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	9309      	str	r3, [sp, #36]	; 0x24
                written += putchw(putp, &p);
 800e556:	a908      	add	r1, sp, #32
 800e558:	4628      	mov	r0, r5
 800e55a:	f7ff fe19 	bl	800e190 <putchw>
 800e55e:	4404      	add	r4, r0
                p.bf = bf;
 800e560:	ab02      	add	r3, sp, #8
 800e562:	9309      	str	r3, [sp, #36]	; 0x24
                break;
 800e564:	e6dc      	b.n	800e320 <tfp_format+0x10>
        }
    }
 abort:;
 
 return written;
}
 800e566:	4620      	mov	r0, r4
 800e568:	b00a      	add	sp, #40	; 0x28
 800e56a:	bd70      	pop	{r4, r5, r6, pc}

0800e56c <vfprintf>:

int vfprintf(FILE *f, const char *fmt, va_list va)
{
 800e56c:	b508      	push	{r3, lr}
    return tfp_format(f, fmt, va);
 800e56e:	f7ff fecf 	bl	800e310 <tfp_format>
}
 800e572:	bd08      	pop	{r3, pc}

0800e574 <printf>:
    va_end(va);
    return rv;
}

int printf(const char *fmt, ...)
{
 800e574:	b40f      	push	{r0, r1, r2, r3}
 800e576:	b500      	push	{lr}
 800e578:	b083      	sub	sp, #12
 800e57a:	aa04      	add	r2, sp, #16
 800e57c:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list va;
    va_start(va, fmt);
 800e580:	9201      	str	r2, [sp, #4]
    int rv = vfprintf(stdout, fmt, va);
 800e582:	4b04      	ldr	r3, [pc, #16]	; (800e594 <printf+0x20>)
 800e584:	6818      	ldr	r0, [r3, #0]
 800e586:	f7ff fff1 	bl	800e56c <vfprintf>
    va_end(va);
    return rv;
}
 800e58a:	b003      	add	sp, #12
 800e58c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e590:	b004      	add	sp, #16
 800e592:	4770      	bx	lr
 800e594:	0801827c 	.word	0x0801827c

0800e598 <vsnprintf>:

int vsnprintf(char *str, size_t size, const char *fmt, va_list va)
{
 800e598:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e59a:	b085      	sub	sp, #20
 800e59c:	4605      	mov	r5, r0
 800e59e:	460c      	mov	r4, r1
 800e5a0:	4616      	mov	r6, r2
 800e5a2:	461f      	mov	r7, r3
    struct MemFile state;
    FILE *f = fmemopen_w(&state, str, size);
 800e5a4:	460a      	mov	r2, r1
 800e5a6:	4601      	mov	r1, r0
 800e5a8:	4668      	mov	r0, sp
 800e5aa:	f000 f861 	bl	800e670 <fmemopen_w>
    tfp_format(f, fmt, va);
 800e5ae:	463a      	mov	r2, r7
 800e5b0:	4631      	mov	r1, r6
 800e5b2:	f7ff fead 	bl	800e310 <tfp_format>
    if (size > 0) {
 800e5b6:	b12c      	cbz	r4, 800e5c4 <vsnprintf+0x2c>
        if (state.bytes_written < size) {
 800e5b8:	9b02      	ldr	r3, [sp, #8]
 800e5ba:	42a3      	cmp	r3, r4
 800e5bc:	d305      	bcc.n	800e5ca <vsnprintf+0x32>
            *(state.buffer) = '\0';
        } else {
            str[size - 1] = '\0';
 800e5be:	3c01      	subs	r4, #1
 800e5c0:	2300      	movs	r3, #0
 800e5c2:	552b      	strb	r3, [r5, r4]
        }
    }
    return state.bytes_written;
}
 800e5c4:	9802      	ldr	r0, [sp, #8]
 800e5c6:	b005      	add	sp, #20
 800e5c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
            *(state.buffer) = '\0';
 800e5ca:	9b01      	ldr	r3, [sp, #4]
 800e5cc:	2200      	movs	r2, #0
 800e5ce:	701a      	strb	r2, [r3, #0]
 800e5d0:	e7f8      	b.n	800e5c4 <vsnprintf+0x2c>
	...

0800e5d4 <vprintf>:

#include <stdio.h>
#include <stdarg.h>

int vprintf(const char *format, va_list ap)
{
 800e5d4:	b508      	push	{r3, lr}
	return vfprintf(stdout, format, ap);
 800e5d6:	460a      	mov	r2, r1
 800e5d8:	4601      	mov	r1, r0
 800e5da:	4b02      	ldr	r3, [pc, #8]	; (800e5e4 <vprintf+0x10>)
 800e5dc:	6818      	ldr	r0, [r3, #0]
 800e5de:	f7ff ffc5 	bl	800e56c <vfprintf>
}
 800e5e2:	bd08      	pop	{r3, pc}
 800e5e4:	0801827c 	.word	0x0801827c

0800e5e8 <jrand48>:

#include <stdlib.h>
#include <stdint.h>

long jrand48(unsigned short xsubi[3])
{
 800e5e8:	e92d 08f0 	stmdb	sp!, {r4, r5, r6, r7, fp}
 800e5ec:	4601      	mov	r1, r0
	uint64_t x;

	/* The xsubi[] array is littleendian by spec */
	x = (uint64_t) (uint16_t) xsubi[0] +
 800e5ee:	f8b0 b000 	ldrh.w	fp, [r0]
 800e5f2:	f04f 0c00 	mov.w	ip, #0
	    ((uint64_t) (uint16_t) xsubi[1] << 16) +
 800e5f6:	8846      	ldrh	r6, [r0, #2]
 800e5f8:	0c35      	lsrs	r5, r6, #16
 800e5fa:	0434      	lsls	r4, r6, #16
	x = (uint64_t) (uint16_t) xsubi[0] +
 800e5fc:	eb1b 0204 	adds.w	r2, fp, r4
 800e600:	eb4c 0305 	adc.w	r3, ip, r5
	    ((uint64_t) (uint16_t) xsubi[2] << 32);
 800e604:	2400      	movs	r4, #0
 800e606:	8885      	ldrh	r5, [r0, #4]
	x = (uint64_t) (uint16_t) xsubi[0] +
 800e608:	1916      	adds	r6, r2, r4
 800e60a:	eb43 0705 	adc.w	r7, r3, r5

	x = (0x5deece66dULL * x) + 0xb;
 800e60e:	4c0b      	ldr	r4, [pc, #44]	; (800e63c <jrand48+0x54>)
 800e610:	2005      	movs	r0, #5
 800e612:	fb00 f006 	mul.w	r0, r0, r6
 800e616:	fb04 0007 	mla	r0, r4, r7, r0
 800e61a:	fba6 2304 	umull	r2, r3, r6, r4
 800e61e:	4403      	add	r3, r0
 800e620:	f112 040b 	adds.w	r4, r2, #11
 800e624:	f143 0500 	adc.w	r5, r3, #0

	xsubi[0] = (unsigned short)(uint16_t) x;
 800e628:	800c      	strh	r4, [r1, #0]
	xsubi[1] = (unsigned short)(uint16_t) (x >> 16);
 800e62a:	0c20      	lsrs	r0, r4, #16
 800e62c:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800e630:	8048      	strh	r0, [r1, #2]
	xsubi[2] = (unsigned short)(uint16_t) (x >> 32);
 800e632:	808d      	strh	r5, [r1, #4]

	return (long)(int32_t) (x >> 16);
}
 800e634:	e8bd 08f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp}
 800e638:	4770      	bx	lr
 800e63a:	bf00      	nop
 800e63c:	deece66d 	.word	0xdeece66d

0800e640 <memfile_write>:
#include <stdio.h>

size_t memfile_write(FILE *instance, const char *bp, size_t n)
{
 800e640:	b430      	push	{r4, r5}
    struct MemFile *f = (struct MemFile*)instance;
    size_t i = 0;
 800e642:	2500      	movs	r5, #0
    
    while (n--)
 800e644:	e000      	b.n	800e648 <memfile_write+0x8>
    {
        f->bytes_written++;
        if (f->bytes_written <= f->size)
        {
            *f->buffer++ = *bp++;
 800e646:	4622      	mov	r2, r4
    while (n--)
 800e648:	1e54      	subs	r4, r2, #1
 800e64a:	b16a      	cbz	r2, 800e668 <memfile_write+0x28>
        f->bytes_written++;
 800e64c:	6883      	ldr	r3, [r0, #8]
 800e64e:	3301      	adds	r3, #1
 800e650:	6083      	str	r3, [r0, #8]
        if (f->bytes_written <= f->size)
 800e652:	68c2      	ldr	r2, [r0, #12]
 800e654:	4293      	cmp	r3, r2
 800e656:	d8f6      	bhi.n	800e646 <memfile_write+0x6>
            *f->buffer++ = *bp++;
 800e658:	6843      	ldr	r3, [r0, #4]
 800e65a:	1c5a      	adds	r2, r3, #1
 800e65c:	6042      	str	r2, [r0, #4]
 800e65e:	780a      	ldrb	r2, [r1, #0]
 800e660:	701a      	strb	r2, [r3, #0]
            i++;
 800e662:	3501      	adds	r5, #1
            *f->buffer++ = *bp++;
 800e664:	3101      	adds	r1, #1
 800e666:	e7ee      	b.n	800e646 <memfile_write+0x6>
        }
    }
    
    return i;
}
 800e668:	4628      	mov	r0, r5
 800e66a:	bc30      	pop	{r4, r5}
 800e66c:	4770      	bx	lr
	...

0800e670 <fmemopen_w>:
    &memfile_write,
    NULL
};

FILE *fmemopen_w(struct MemFile* storage, char *buffer, size_t size)
{
 800e670:	b410      	push	{r4}
    storage->file.vmt = &MemFile_methods;
 800e672:	4c04      	ldr	r4, [pc, #16]	; (800e684 <fmemopen_w+0x14>)
 800e674:	6004      	str	r4, [r0, #0]
    storage->buffer = buffer;
 800e676:	6041      	str	r1, [r0, #4]
    storage->bytes_written = 0;
 800e678:	2100      	movs	r1, #0
 800e67a:	6081      	str	r1, [r0, #8]
    storage->size = size;
 800e67c:	60c2      	str	r2, [r0, #12]
    return (FILE*)storage;
}
 800e67e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e682:	4770      	bx	lr
 800e684:	08018274 	.word	0x08018274

0800e688 <stdin_read>:

static size_t
stdin_read(FILE *fp, char *bp, size_t n)
{
    return 0;
}
 800e688:	2000      	movs	r0, #0
 800e68a:	4770      	bx	lr

0800e68c <stdout_write>:

static size_t
stdout_write(FILE *fp, const char *bp, size_t n)
{
 800e68c:	b510      	push	{r4, lr}
 800e68e:	4608      	mov	r0, r1
 800e690:	4614      	mov	r4, r2
    console_write(bp, n);
 800e692:	4611      	mov	r1, r2
 800e694:	f7fb ff70 	bl	800a578 <console_write>
    return n;
}
 800e698:	4620      	mov	r0, r4
 800e69a:	bd10      	pop	{r4, pc}

0800e69c <_ZL13nibble_to_hexh>:

/// Given n=0..15, return '0'..'F'.
static char nibble_to_hex(uint8_t n) {
    return (n < 10)
        ? '0' + n
        : 'A' + n - 10;
 800e69c:	2809      	cmp	r0, #9
 800e69e:	d902      	bls.n	800e6a6 <_ZL13nibble_to_hexh+0xa>
 800e6a0:	3037      	adds	r0, #55	; 0x37
 800e6a2:	b2c0      	uxtb	r0, r0
 800e6a4:	4770      	bx	lr
        : 'A' + n - 10;
 800e6a6:	3030      	adds	r0, #48	; 0x30
 800e6a8:	b2c0      	uxtb	r0, r0
 800e6aa:	4770      	bx	lr

0800e6ac <_ZL11get_commandP8gps_l70r9CommandId>:
static const char *get_command(struct gps_l70r *dev, enum CommandId id) {
 800e6ac:	b508      	push	{r3, lr}
    assert(id < (sizeof(COMMANDS) / sizeof(COMMANDS[0])));  //  Invalid id
 800e6ae:	2902      	cmp	r1, #2
 800e6b0:	d806      	bhi.n	800e6c0 <_ZL11get_commandP8gps_l70r9CommandId+0x14>
    const char *cmd = COMMANDS[id];
 800e6b2:	4b06      	ldr	r3, [pc, #24]	; (800e6cc <_ZL11get_commandP8gps_l70r9CommandId+0x20>)
 800e6b4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    dev->last_error = id;  //  Set command ID as the last error.
 800e6b8:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
}
 800e6bc:	4618      	mov	r0, r3
 800e6be:	bd08      	pop	{r3, pc}
    assert(id < (sizeof(COMMANDS) / sizeof(COMMANDS[0])));  //  Invalid id
 800e6c0:	2300      	movs	r3, #0
 800e6c2:	461a      	mov	r2, r3
 800e6c4:	4619      	mov	r1, r3
 800e6c6:	4618      	mov	r0, r3
 800e6c8:	f7fd ff84 	bl	800c5d4 <__assert_func>
 800e6cc:	080182b8 	.word	0x080182b8

0800e6d0 <_ZL16compute_checksumPKh>:
static const char *compute_checksum(const uint8_t *buf) {
 800e6d0:	b538      	push	{r3, r4, r5, lr}
    assert(buf);
 800e6d2:	b148      	cbz	r0, 800e6e8 <_ZL16compute_checksumPKh+0x18>
 800e6d4:	4603      	mov	r3, r0
    if (buf[0] == '$') { buf++; }
 800e6d6:	7802      	ldrb	r2, [r0, #0]
 800e6d8:	2a24      	cmp	r2, #36	; 0x24
 800e6da:	d00b      	beq.n	800e6f4 <_ZL16compute_checksumPKh+0x24>
static const char *compute_checksum(const uint8_t *buf) {
 800e6dc:	2400      	movs	r4, #0
        if (*buf == 0) { break; }
 800e6de:	781a      	ldrb	r2, [r3, #0]
 800e6e0:	b152      	cbz	r2, 800e6f8 <_ZL16compute_checksumPKh+0x28>
        checksum = checksum ^ *buf;
 800e6e2:	4054      	eors	r4, r2
        buf++;
 800e6e4:	3301      	adds	r3, #1
        if (*buf == 0) { break; }
 800e6e6:	e7fa      	b.n	800e6de <_ZL16compute_checksumPKh+0xe>
    assert(buf);
 800e6e8:	2300      	movs	r3, #0
 800e6ea:	461a      	mov	r2, r3
 800e6ec:	4619      	mov	r1, r3
 800e6ee:	4618      	mov	r0, r3
 800e6f0:	f7fd ff70 	bl	800c5d4 <__assert_func>
    if (buf[0] == '$') { buf++; }
 800e6f4:	3301      	adds	r3, #1
 800e6f6:	e7f1      	b.n	800e6dc <_ZL16compute_checksumPKh+0xc>
    checksum_str[0] = nibble_to_hex(checksum >> 4);
 800e6f8:	0920      	lsrs	r0, r4, #4
 800e6fa:	f7ff ffcf 	bl	800e69c <_ZL13nibble_to_hexh>
 800e6fe:	4d05      	ldr	r5, [pc, #20]	; (800e714 <_ZL16compute_checksumPKh+0x44>)
 800e700:	7028      	strb	r0, [r5, #0]
    checksum_str[1] = nibble_to_hex(checksum & 0xf);
 800e702:	f004 000f 	and.w	r0, r4, #15
 800e706:	f7ff ffc9 	bl	800e69c <_ZL13nibble_to_hexh>
 800e70a:	7068      	strb	r0, [r5, #1]
    checksum_str[2] = 0;
 800e70c:	2300      	movs	r3, #0
 800e70e:	70ab      	strb	r3, [r5, #2]
}
 800e710:	4628      	mov	r0, r5
 800e712:	bd38      	pop	{r3, r4, r5, pc}
 800e714:	20002aa0 	.word	0x20002aa0

0800e718 <_ZL14gps_l70r_closeP6os_dev>:
static int gps_l70r_close(struct os_dev *dev0) {
 800e718:	b510      	push	{r4, lr}
 800e71a:	4604      	mov	r4, r0
    console_printf("]\n");  // console_flush();  ////
 800e71c:	4805      	ldr	r0, [pc, #20]	; (800e734 <_ZL14gps_l70r_closeP6os_dev+0x1c>)
 800e71e:	f7fb ff65 	bl	800a5ec <console_printf>
    assert(dev0);
 800e722:	b10c      	cbz	r4, 800e728 <_ZL14gps_l70r_closeP6os_dev+0x10>
}
 800e724:	2000      	movs	r0, #0
 800e726:	bd10      	pop	{r4, pc}
    assert(dev0);
 800e728:	2300      	movs	r3, #0
 800e72a:	461a      	mov	r2, r3
 800e72c:	4619      	mov	r1, r3
 800e72e:	4618      	mov	r0, r3
 800e730:	f7fd ff50 	bl	800c5d4 <__assert_func>
 800e734:	0801829c 	.word	0x0801829c

0800e738 <_ZL8rx_eventPv>:
static void rx_event(void *drv) {
 800e738:	b508      	push	{r3, lr}
    os_callout_reset(&rx_callout, 0);  //  Trigger the callout
 800e73a:	2100      	movs	r1, #0
 800e73c:	4801      	ldr	r0, [pc, #4]	; (800e744 <_ZL8rx_eventPv+0xc>)
 800e73e:	f7fe f8f3 	bl	800c928 <os_callout_reset>
}
 800e742:	bd08      	pop	{r3, pc}
 800e744:	200026a0 	.word	0x200026a0

0800e748 <_ZL13internal_initPcmS_mS_mb>:
    char *parserbuf, uint32_t parserbuf_size, bool debug) {
 800e748:	b530      	push	{r4, r5, lr}
 800e74a:	b083      	sub	sp, #12
    serial.init(txbuf, txbuf_size, rxbuf, rxbuf_size);
 800e74c:	4c08      	ldr	r4, [pc, #32]	; (800e770 <_ZL13internal_initPcmS_mS_mb+0x28>)
 800e74e:	2500      	movs	r5, #0
 800e750:	9501      	str	r5, [sp, #4]
 800e752:	9300      	str	r3, [sp, #0]
 800e754:	4613      	mov	r3, r2
 800e756:	460a      	mov	r2, r1
 800e758:	4601      	mov	r1, r0
 800e75a:	4620      	mov	r0, r4
 800e75c:	f004 ff2c 	bl	80135b8 <_ZN14BufferedSerial4initEPcmS0_mPKc>
    serial.baud(9600);
 800e760:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 800e764:	4620      	mov	r0, r4
 800e766:	f005 f821 	bl	80137ac <_ZN14BufferedSerial4baudEm>
}
 800e76a:	b003      	add	sp, #12
 800e76c:	bd30      	pop	{r4, r5, pc}
 800e76e:	bf00      	nop
 800e770:	20002a50 	.word	0x20002a50

0800e774 <_ZL18internal_configurei>:
static void internal_configure(int uart) {
 800e774:	b508      	push	{r3, lr}
    serial.configure(uart);
 800e776:	4601      	mov	r1, r0
 800e778:	4801      	ldr	r0, [pc, #4]	; (800e780 <_ZL18internal_configurei+0xc>)
 800e77a:	f004 ff3d 	bl	80135f8 <_ZN14BufferedSerial9configureEi>
}
 800e77e:	bd08      	pop	{r3, pc}
 800e780:	20002a50 	.word	0x20002a50

0800e784 <_ZL15internal_attachPFvPvES_>:
static void internal_attach(void (*func)(void *), void *arg) {
 800e784:	b508      	push	{r3, lr}
    serial.attach(func, arg);
 800e786:	2300      	movs	r3, #0
 800e788:	460a      	mov	r2, r1
 800e78a:	4601      	mov	r1, r0
 800e78c:	4801      	ldr	r0, [pc, #4]	; (800e794 <_ZL15internal_attachPFvPvES_+0x10>)
 800e78e:	f005 f800 	bl	8013792 <_ZN14BufferedSerial6attachEPFvPvES0_i>
}
 800e792:	bd08      	pop	{r3, pc}
 800e794:	20002a50 	.word	0x20002a50

0800e798 <_ZL13gps_l70r_openP6os_devmPv>:
static int gps_l70r_open(struct os_dev *dev0, uint32_t timeout, void *arg) {
 800e798:	b510      	push	{r4, lr}
 800e79a:	b084      	sub	sp, #16
    if (!first_open) { console_printf("[\n"); return 0; }  ////
 800e79c:	4b16      	ldr	r3, [pc, #88]	; (800e7f8 <_ZL13gps_l70r_openP6os_devmPv+0x60>)
 800e79e:	781b      	ldrb	r3, [r3, #0]
 800e7a0:	b1fb      	cbz	r3, 800e7e2 <_ZL13gps_l70r_openP6os_devmPv+0x4a>
 800e7a2:	4604      	mov	r4, r0
    first_open = false;
 800e7a4:	4b14      	ldr	r3, [pc, #80]	; (800e7f8 <_ZL13gps_l70r_openP6os_devmPv+0x60>)
 800e7a6:	2200      	movs	r2, #0
 800e7a8:	701a      	strb	r2, [r3, #0]
    console_printf("[\n");  ////
 800e7aa:	4814      	ldr	r0, [pc, #80]	; (800e7fc <_ZL13gps_l70r_openP6os_devmPv+0x64>)
 800e7ac:	f7fb ff1e 	bl	800a5ec <console_printf>
    assert(dev0);
 800e7b0:	b1dc      	cbz	r4, 800e7ea <_ZL13gps_l70r_openP6os_devmPv+0x52>
    internal_init(
 800e7b2:	2300      	movs	r3, #0
 800e7b4:	9302      	str	r3, [sp, #8]
 800e7b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e7ba:	9301      	str	r3, [sp, #4]
 800e7bc:	4a10      	ldr	r2, [pc, #64]	; (800e800 <_ZL13gps_l70r_openP6os_devmPv+0x68>)
 800e7be:	9200      	str	r2, [sp, #0]
 800e7c0:	4a10      	ldr	r2, [pc, #64]	; (800e804 <_ZL13gps_l70r_openP6os_devmPv+0x6c>)
 800e7c2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800e7c6:	4810      	ldr	r0, [pc, #64]	; (800e808 <_ZL13gps_l70r_openP6os_devmPv+0x70>)
 800e7c8:	f7ff ffbe 	bl	800e748 <_ZL13internal_initPcmS_mS_mb>
    internal_configure(cfg->uart);         //  Configure the UART port.  0 means UART2, 1 means UART1.
 800e7cc:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 800e7d0:	f7ff ffd0 	bl	800e774 <_ZL18internal_configurei>
    internal_attach(&rx_event, dev);    //  Set the callback for GPS_L70R events.
 800e7d4:	4621      	mov	r1, r4
 800e7d6:	480d      	ldr	r0, [pc, #52]	; (800e80c <_ZL13gps_l70r_openP6os_devmPv+0x74>)
 800e7d8:	f7ff ffd4 	bl	800e784 <_ZL15internal_attachPFvPvES_>
}
 800e7dc:	2000      	movs	r0, #0
 800e7de:	b004      	add	sp, #16
 800e7e0:	bd10      	pop	{r4, pc}
    if (!first_open) { console_printf("[\n"); return 0; }  ////
 800e7e2:	4806      	ldr	r0, [pc, #24]	; (800e7fc <_ZL13gps_l70r_openP6os_devmPv+0x64>)
 800e7e4:	f7fb ff02 	bl	800a5ec <console_printf>
 800e7e8:	e7f8      	b.n	800e7dc <_ZL13gps_l70r_openP6os_devmPv+0x44>
    assert(dev0);
 800e7ea:	2300      	movs	r3, #0
 800e7ec:	461a      	mov	r2, r3
 800e7ee:	4619      	mov	r1, r3
 800e7f0:	4618      	mov	r0, r3
 800e7f2:	f7fd feef 	bl	800c5d4 <__assert_func>
 800e7f6:	bf00      	nop
 800e7f8:	20000270 	.word	0x20000270
 800e7fc:	08018298 	.word	0x08018298
 800e800:	20002950 	.word	0x20002950
 800e804:	200026c0 	.word	0x200026c0
 800e808:	200027c0 	.word	0x200027c0
 800e80c:	0800e739 	.word	0x0800e739

0800e810 <_ZL11rx_callbackP8os_event>:
static void rx_callback(struct os_event *ev) {
 800e810:	b508      	push	{r3, lr}
    while (serial.readable()) {
 800e812:	4810      	ldr	r0, [pc, #64]	; (800e854 <_ZL11rx_callbackP8os_event+0x44>)
 800e814:	f004 fef2 	bl	80135fc <_ZN14BufferedSerial8readableEv>
 800e818:	b140      	cbz	r0, 800e82c <_ZL11rx_callbackP8os_event+0x1c>
        int ch = serial.getc(0);  //  Note: this will block if there is nothing to read.
 800e81a:	2100      	movs	r1, #0
 800e81c:	480d      	ldr	r0, [pc, #52]	; (800e854 <_ZL11rx_callbackP8os_event+0x44>)
 800e81e:	f004 fef3 	bl	8013608 <_ZN14BufferedSerial5fgetcEi>
        gps_parser.encode(ch);  //  Parse the GPS data.
 800e822:	b2c1      	uxtb	r1, r0
 800e824:	480c      	ldr	r0, [pc, #48]	; (800e858 <_ZL11rx_callbackP8os_event+0x48>)
 800e826:	f000 ffb7 	bl	800f798 <_ZN11TinyGPSPlus6encodeEc>
    while (serial.readable()) {
 800e82a:	e7f2      	b.n	800e812 <_ZL11rx_callbackP8os_event+0x2>
struct TinyGPSInteger
{
   friend class TinyGPSPlus;
public:
   bool isValid() const    { return valid; }
   bool isUpdated() const  { return updated; }
 800e82c:	4b0a      	ldr	r3, [pc, #40]	; (800e858 <_ZL11rx_callbackP8os_event+0x48>)
 800e82e:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
    if (gps_parser.satellites.isUpdated()) {
 800e832:	b173      	cbz	r3, 800e852 <_ZL11rx_callbackP8os_event+0x42>
   uint32_t age() const    { return valid ? millis() - lastCommitTime : (uint32_t)ULONG_MAX; }
   uint32_t value()        { updated = false; return val; }
 800e834:	4b08      	ldr	r3, [pc, #32]	; (800e858 <_ZL11rx_callbackP8os_event+0x48>)
 800e836:	2200      	movs	r2, #0
 800e838:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
 800e83c:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
        if (sat != lastSat) {
 800e840:	4b06      	ldr	r3, [pc, #24]	; (800e85c <_ZL11rx_callbackP8os_event+0x4c>)
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	428b      	cmp	r3, r1
 800e846:	d004      	beq.n	800e852 <_ZL11rx_callbackP8os_event+0x42>
            lastSat = sat;
 800e848:	4b04      	ldr	r3, [pc, #16]	; (800e85c <_ZL11rx_callbackP8os_event+0x4c>)
 800e84a:	6019      	str	r1, [r3, #0]
            console_printf("GPS satellites: %ld\n", sat); // console_flush(); ////
 800e84c:	4804      	ldr	r0, [pc, #16]	; (800e860 <_ZL11rx_callbackP8os_event+0x50>)
 800e84e:	f7fb fecd 	bl	800a5ec <console_printf>
}
 800e852:	bd08      	pop	{r3, pc}
 800e854:	20002a50 	.word	0x20002a50
 800e858:	20002ae4 	.word	0x20002ae4
 800e85c:	20002a9c 	.word	0x20002a9c
 800e860:	08018280 	.word	0x08018280

0800e864 <_ZL16send_raw_commandP8gps_l70rPKc>:
static bool send_raw_command(struct gps_l70r *dev, const char *cmd) {
 800e864:	b538      	push	{r3, r4, r5, lr}
    assert(dev);  assert(cmd);  assert(strlen(cmd) + 16 < sizeof(raw_buf));
 800e866:	2800      	cmp	r0, #0
 800e868:	d035      	beq.n	800e8d6 <_ZL16send_raw_commandP8gps_l70rPKc+0x72>
 800e86a:	460d      	mov	r5, r1
 800e86c:	2900      	cmp	r1, #0
 800e86e:	d038      	beq.n	800e8e2 <_ZL16send_raw_commandP8gps_l70rPKc+0x7e>
 800e870:	4608      	mov	r0, r1
 800e872:	f7ff fbba 	bl	800dfea <strlen>
 800e876:	3010      	adds	r0, #16
 800e878:	283f      	cmp	r0, #63	; 0x3f
 800e87a:	d838      	bhi.n	800e8ee <_ZL16send_raw_commandP8gps_l70rPKc+0x8a>
    sprintf(raw_buf,
 800e87c:	4c1f      	ldr	r4, [pc, #124]	; (800e8fc <_ZL16send_raw_commandP8gps_l70rPKc+0x98>)
 800e87e:	462a      	mov	r2, r5
 800e880:	491f      	ldr	r1, [pc, #124]	; (800e900 <_ZL16send_raw_commandP8gps_l70rPKc+0x9c>)
 800e882:	4620      	mov	r0, r4
 800e884:	f7ff fb93 	bl	800dfae <sprintf>
    const char *checksum = compute_checksum((const uint8_t *) raw_buf);  //  Compute the checksum based on the above fields
 800e888:	4620      	mov	r0, r4
 800e88a:	f7ff ff21 	bl	800e6d0 <_ZL16compute_checksumPKh>
 800e88e:	4605      	mov	r5, r0
    strcat(raw_buf, "*");
 800e890:	4620      	mov	r0, r4
 800e892:	f7ff fbaa 	bl	800dfea <strlen>
 800e896:	4b1b      	ldr	r3, [pc, #108]	; (800e904 <_ZL16send_raw_commandP8gps_l70rPKc+0xa0>)
 800e898:	881b      	ldrh	r3, [r3, #0]
 800e89a:	5223      	strh	r3, [r4, r0]
    strcat(raw_buf, checksum);
 800e89c:	4629      	mov	r1, r5
 800e89e:	4620      	mov	r0, r4
 800e8a0:	f003 f9b9 	bl	8011c16 <strcat>
    strcat(raw_buf, "\r\n");
 800e8a4:	4620      	mov	r0, r4
 800e8a6:	f7ff fba0 	bl	800dfea <strlen>
 800e8aa:	1822      	adds	r2, r4, r0
 800e8ac:	4b16      	ldr	r3, [pc, #88]	; (800e908 <_ZL16send_raw_commandP8gps_l70rPKc+0xa4>)
 800e8ae:	8819      	ldrh	r1, [r3, #0]
 800e8b0:	789b      	ldrb	r3, [r3, #2]
 800e8b2:	5221      	strh	r1, [r4, r0]
 800e8b4:	7093      	strb	r3, [r2, #2]
    console_printf("GPS> %s", raw_buf);
 800e8b6:	4621      	mov	r1, r4
 800e8b8:	4814      	ldr	r0, [pc, #80]	; (800e90c <_ZL16send_raw_commandP8gps_l70rPKc+0xa8>)
 800e8ba:	f7fb fe97 	bl	800a5ec <console_printf>
    bool res = serial.write(raw_buf, strlen(raw_buf));
 800e8be:	4620      	mov	r0, r4
 800e8c0:	f7ff fb93 	bl	800dfea <strlen>
 800e8c4:	4602      	mov	r2, r0
 800e8c6:	4621      	mov	r1, r4
 800e8c8:	4811      	ldr	r0, [pc, #68]	; (800e910 <_ZL16send_raw_commandP8gps_l70rPKc+0xac>)
 800e8ca:	f004 ff42 	bl	8013752 <_ZN14BufferedSerial5writeEPKvj>
}
 800e8ce:	3000      	adds	r0, #0
 800e8d0:	bf18      	it	ne
 800e8d2:	2001      	movne	r0, #1
 800e8d4:	bd38      	pop	{r3, r4, r5, pc}
    assert(dev);  assert(cmd);  assert(strlen(cmd) + 16 < sizeof(raw_buf));
 800e8d6:	2300      	movs	r3, #0
 800e8d8:	461a      	mov	r2, r3
 800e8da:	4619      	mov	r1, r3
 800e8dc:	4618      	mov	r0, r3
 800e8de:	f7fd fe79 	bl	800c5d4 <__assert_func>
 800e8e2:	2300      	movs	r3, #0
 800e8e4:	461a      	mov	r2, r3
 800e8e6:	4619      	mov	r1, r3
 800e8e8:	4618      	mov	r0, r3
 800e8ea:	f7fd fe73 	bl	800c5d4 <__assert_func>
 800e8ee:	2300      	movs	r3, #0
 800e8f0:	461a      	mov	r2, r3
 800e8f2:	4619      	mov	r1, r3
 800e8f4:	4618      	mov	r0, r3
 800e8f6:	f7fd fe6d 	bl	800c5d4 <__assert_func>
 800e8fa:	bf00      	nop
 800e8fc:	20002aa4 	.word	0x20002aa4
 800e900:	080182a0 	.word	0x080182a0
 800e904:	080182a8 	.word	0x080182a8
 800e908:	080182ac 	.word	0x080182ac
 800e90c:	080182b0 	.word	0x080182b0
 800e910:	20002a50 	.word	0x20002a50

0800e914 <_ZL12send_commandP8gps_l70r9CommandId>:
static bool send_command(struct gps_l70r *dev, enum CommandId id) {
 800e914:	b510      	push	{r4, lr}
    assert(dev);
 800e916:	b138      	cbz	r0, 800e928 <_ZL12send_commandP8gps_l70r9CommandId+0x14>
 800e918:	4604      	mov	r4, r0
    const char *cmd = get_command(dev, id);
 800e91a:	f7ff fec7 	bl	800e6ac <_ZL11get_commandP8gps_l70r9CommandId>
    bool res = send_raw_command(dev, cmd);
 800e91e:	4601      	mov	r1, r0
 800e920:	4620      	mov	r0, r4
 800e922:	f7ff ff9f 	bl	800e864 <_ZL16send_raw_commandP8gps_l70rPKc>
}
 800e926:	bd10      	pop	{r4, pc}
    assert(dev);
 800e928:	2300      	movs	r3, #0
 800e92a:	461a      	mov	r2, r3
 800e92c:	4619      	mov	r1, r3
 800e92e:	4618      	mov	r0, r3
 800e930:	f7fd fe50 	bl	800c5d4 <__assert_func>

0800e934 <_Z41__static_initialization_and_destruction_0ii>:
 800e934:	2801      	cmp	r0, #1
 800e936:	d000      	beq.n	800e93a <_Z41__static_initialization_and_destruction_0ii+0x6>
 800e938:	4770      	bx	lr
 800e93a:	b508      	push	{r3, lr}
 800e93c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e940:	4299      	cmp	r1, r3
 800e942:	d000      	beq.n	800e946 <_Z41__static_initialization_and_destruction_0ii+0x12>
 800e944:	bd08      	pop	{r3, pc}
TinyGPSPlus gps_parser;  //  Shared with sensor.cpp
 800e946:	4802      	ldr	r0, [pc, #8]	; (800e950 <_Z41__static_initialization_and_destruction_0ii+0x1c>)
 800e948:	f000 fc3b 	bl	800f1c2 <_ZN11TinyGPSPlusC1Ev>
 800e94c:	e7fa      	b.n	800e944 <_Z41__static_initialization_and_destruction_0ii+0x10>
 800e94e:	bf00      	nop
 800e950:	20002ae4 	.word	0x20002ae4

0800e954 <gps_l70r_init>:
    if (!arg || !dev0) { rc = SYS_ENODEV; goto err; }
 800e954:	b181      	cbz	r1, 800e978 <gps_l70r_init+0x24>
 800e956:	b190      	cbz	r0, 800e97e <gps_l70r_init+0x2a>
int gps_l70r_init(struct os_dev *dev0, void *arg) {
 800e958:	b510      	push	{r4, lr}
 800e95a:	4604      	mov	r4, r0
    rc = gps_l70r_sensor_init(dev, arg);  assert(rc == 0);
 800e95c:	f000 f902 	bl	800eb64 <gps_l70r_sensor_init>
 800e960:	b920      	cbnz	r0, 800e96c <gps_l70r_init+0x18>
    OS_DEV_SETHANDLERS(dev0, gps_l70r_open, gps_l70r_close);
 800e962:	4a09      	ldr	r2, [pc, #36]	; (800e988 <gps_l70r_init+0x34>)
 800e964:	6022      	str	r2, [r4, #0]
 800e966:	4a09      	ldr	r2, [pc, #36]	; (800e98c <gps_l70r_init+0x38>)
 800e968:	60e2      	str	r2, [r4, #12]
}
 800e96a:	bd10      	pop	{r4, pc}
    rc = gps_l70r_sensor_init(dev, arg);  assert(rc == 0);
 800e96c:	2300      	movs	r3, #0
 800e96e:	461a      	mov	r2, r3
 800e970:	4619      	mov	r1, r3
 800e972:	4618      	mov	r0, r3
 800e974:	f7fd fe2e 	bl	800c5d4 <__assert_func>
    return rc;
 800e978:	f06f 0308 	mvn.w	r3, #8
 800e97c:	e001      	b.n	800e982 <gps_l70r_init+0x2e>
 800e97e:	f06f 0308 	mvn.w	r3, #8
}
 800e982:	4618      	mov	r0, r3
 800e984:	4770      	bx	lr
 800e986:	bf00      	nop
 800e988:	0800e799 	.word	0x0800e799
 800e98c:	0800e719 	.word	0x0800e719

0800e990 <gps_l70r_default_cfg>:
int gps_l70r_default_cfg(struct gps_l70r_cfg *cfg) {
 800e990:	b508      	push	{r3, lr}
    memset(cfg, 0, sizeof(struct gps_l70r_cfg));  //  Zero the entire object.
 800e992:	2200      	movs	r2, #0
 800e994:	6002      	str	r2, [r0, #0]
 800e996:	6042      	str	r2, [r0, #4]
 800e998:	60c2      	str	r2, [r0, #12]
    cfg->uart = MYNEWT_VAL(GPS_L70R_UART);  //  0 for UART2, 1 for UART1.
 800e99a:	6082      	str	r2, [r0, #8]
    int rc = gps_l70r_sensor_default_cfg(cfg);  assert(rc == 0);
 800e99c:	f000 f916 	bl	800ebcc <gps_l70r_sensor_default_cfg>
 800e9a0:	b908      	cbnz	r0, 800e9a6 <gps_l70r_default_cfg+0x16>
}
 800e9a2:	2000      	movs	r0, #0
 800e9a4:	bd08      	pop	{r3, pc}
    int rc = gps_l70r_sensor_default_cfg(cfg);  assert(rc == 0);
 800e9a6:	2300      	movs	r3, #0
 800e9a8:	461a      	mov	r2, r3
 800e9aa:	4619      	mov	r1, r3
 800e9ac:	4618      	mov	r0, r3
 800e9ae:	f7fd fe11 	bl	800c5d4 <__assert_func>

0800e9b2 <gps_l70r_config>:
int gps_l70r_config(struct gps_l70r *drv, struct gps_l70r_cfg *cfg) {
 800e9b2:	b538      	push	{r3, r4, r5, lr}
 800e9b4:	4604      	mov	r4, r0
    drv_cfg->uart = cfg->uart;    
 800e9b6:	6888      	ldr	r0, [r1, #8]
 800e9b8:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
    assert(drv_cfg->uart == MYNEWT_VAL(GPS_L70R_UART));
 800e9bc:	b948      	cbnz	r0, 800e9d2 <gps_l70r_config+0x20>
 800e9be:	460d      	mov	r5, r1
    internal_configure(drv_cfg->uart);
 800e9c0:	f7ff fed8 	bl	800e774 <_ZL18internal_configurei>
    int rc = gps_l70r_sensor_config(drv, cfg);  assert(rc == 0);
 800e9c4:	4629      	mov	r1, r5
 800e9c6:	4620      	mov	r0, r4
 800e9c8:	f000 f907 	bl	800ebda <gps_l70r_sensor_config>
 800e9cc:	b938      	cbnz	r0, 800e9de <gps_l70r_config+0x2c>
}
 800e9ce:	2000      	movs	r0, #0
 800e9d0:	bd38      	pop	{r3, r4, r5, pc}
    assert(drv_cfg->uart == MYNEWT_VAL(GPS_L70R_UART));
 800e9d2:	2300      	movs	r3, #0
 800e9d4:	461a      	mov	r2, r3
 800e9d6:	4619      	mov	r1, r3
 800e9d8:	4618      	mov	r0, r3
 800e9da:	f7fd fdfb 	bl	800c5d4 <__assert_func>
    int rc = gps_l70r_sensor_config(drv, cfg);  assert(rc == 0);
 800e9de:	2300      	movs	r3, #0
 800e9e0:	461a      	mov	r2, r3
 800e9e2:	4619      	mov	r1, r3
 800e9e4:	4618      	mov	r0, r3
 800e9e6:	f7fd fdf5 	bl	800c5d4 <__assert_func>
	...

0800e9ec <gps_l70r_connect>:
int gps_l70r_connect(struct gps_l70r *dev) {
 800e9ec:	b538      	push	{r3, r4, r5, lr}
 800e9ee:	4605      	mov	r5, r0
    serial.prime();  //  Start transmitting and receiving on UART port
 800e9f0:	4c07      	ldr	r4, [pc, #28]	; (800ea10 <gps_l70r_connect+0x24>)
 800e9f2:	4620      	mov	r0, r4
 800e9f4:	f004 fe82 	bl	80136fc <_ZN14BufferedSerial5primeEv>
    serial.write("\r\n\r\n", 4);
 800e9f8:	2204      	movs	r2, #4
 800e9fa:	4906      	ldr	r1, [pc, #24]	; (800ea14 <gps_l70r_connect+0x28>)
 800e9fc:	4620      	mov	r0, r4
 800e9fe:	f004 fea8 	bl	8013752 <_ZN14BufferedSerial5writeEPKvj>
    send_command(dev, EASY_QUERY);  //  Get EASY status
 800ea02:	2101      	movs	r1, #1
 800ea04:	4628      	mov	r0, r5
 800ea06:	f7ff ff85 	bl	800e914 <_ZL12send_commandP8gps_l70r9CommandId>
}
 800ea0a:	2000      	movs	r0, #0
 800ea0c:	bd38      	pop	{r3, r4, r5, pc}
 800ea0e:	bf00      	nop
 800ea10:	20002a50 	.word	0x20002a50
 800ea14:	080182c4 	.word	0x080182c4

0800ea18 <gps_l70r_start>:
int gps_l70r_start(void) {
 800ea18:	b510      	push	{r4, lr}
    os_callout_init(&rx_callout, os_eventq_dflt_get(), rx_callback, NULL);
 800ea1a:	f7fe f99d 	bl	800cd58 <os_eventq_dflt_get>
 800ea1e:	2300      	movs	r3, #0
 800ea20:	4a16      	ldr	r2, [pc, #88]	; (800ea7c <gps_l70r_start+0x64>)
 800ea22:	4601      	mov	r1, r0
 800ea24:	4816      	ldr	r0, [pc, #88]	; (800ea80 <gps_l70r_start+0x68>)
 800ea26:	f7fd ff53 	bl	800c8d0 <os_callout_init>
    hal_gpio_init_out(MYNEWT_VAL(GPS_L70R_ENABLE_PIN), 0);
 800ea2a:	2100      	movs	r1, #0
 800ea2c:	2001      	movs	r0, #1
 800ea2e:	f001 fcfd 	bl	801042c <hal_gpio_init_out>
        struct gps_l70r *dev = (struct gps_l70r *) os_dev_open(device_name, OS_TIMEOUT_NEVER, NULL);  //  GPS_L70R_DEVICE is "gps_l70r_0"
 800ea32:	2200      	movs	r2, #0
 800ea34:	f04f 31ff 	mov.w	r1, #4294967295
 800ea38:	4812      	ldr	r0, [pc, #72]	; (800ea84 <gps_l70r_start+0x6c>)
 800ea3a:	f7fe f89d 	bl	800cb78 <os_dev_open>
        assert(dev != NULL);
 800ea3e:	b180      	cbz	r0, 800ea62 <gps_l70r_start+0x4a>
 800ea40:	4604      	mov	r4, r0
        if (!power_standby_wakeup()) {
 800ea42:	f7fd f827 	bl	800ba94 <power_standby_wakeup>
 800ea46:	b918      	cbnz	r0, 800ea50 <gps_l70r_start+0x38>
            int rc = gps_l70r_connect(dev);
 800ea48:	4620      	mov	r0, r4
 800ea4a:	f7ff ffcf 	bl	800e9ec <gps_l70r_connect>
            assert(rc == 0);
 800ea4e:	b970      	cbnz	r0, 800ea6e <gps_l70r_start+0x56>
        os_dev_close((struct os_dev *) dev);
 800ea50:	4620      	mov	r0, r4
 800ea52:	f7fe f8b3 	bl	800cbbc <os_dev_close>
    hal_gpio_init_out(LED_BLINK_PIN, 1);
 800ea56:	2101      	movs	r1, #1
 800ea58:	200f      	movs	r0, #15
 800ea5a:	f001 fce7 	bl	801042c <hal_gpio_init_out>
}
 800ea5e:	2000      	movs	r0, #0
 800ea60:	bd10      	pop	{r4, pc}
        assert(dev != NULL);
 800ea62:	2300      	movs	r3, #0
 800ea64:	461a      	mov	r2, r3
 800ea66:	4619      	mov	r1, r3
 800ea68:	4618      	mov	r0, r3
 800ea6a:	f7fd fdb3 	bl	800c5d4 <__assert_func>
            assert(rc == 0);
 800ea6e:	2300      	movs	r3, #0
 800ea70:	461a      	mov	r2, r3
 800ea72:	4619      	mov	r1, r3
 800ea74:	4618      	mov	r0, r3
 800ea76:	f7fd fdad 	bl	800c5d4 <__assert_func>
 800ea7a:	bf00      	nop
 800ea7c:	0800e811 	.word	0x0800e811
 800ea80:	200026a0 	.word	0x200026a0
 800ea84:	080182cc 	.word	0x080182cc

0800ea88 <_GLOBAL__sub_I_gps_parser>:
 800ea88:	b508      	push	{r3, lr}
 800ea8a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ea8e:	2001      	movs	r0, #1
 800ea90:	f7ff ff50 	bl	800e934 <_Z41__static_initialization_and_destruction_0ii>
 800ea94:	bd08      	pop	{r3, pc}

0800ea96 <_ZL26gps_l70r_sensor_get_configP6sensor13sensor_type_tP10sensor_cfg>:

static int gps_l70r_sensor_get_config(struct sensor *sensor, sensor_type_t type,
    struct sensor_cfg *cfg) {
    //  Return the type of the sensor value returned by the sensor.
    int rc;
    if (!(type & SENSOR_TYPE_GEOLOCATION)) {
 800ea96:	f002 6000 	and.w	r0, r2, #134217728	; 0x8000000
 800ea9a:	2100      	movs	r1, #0
 800ea9c:	ea50 0301 	orrs.w	r3, r0, r1
 800eaa0:	d004      	beq.n	800eaac <_ZL26gps_l70r_sensor_get_configP6sensor13sensor_type_tP10sensor_cfg+0x16>
        rc = SYS_EINVAL;
        goto err;
    }
    cfg->sc_valtype = SENSOR_VALUE_TYPE_FLOAT_TRIPLET;  //  We return 3 floats: latitude, longitude, altitude
 800eaa2:	9b00      	ldr	r3, [sp, #0]
 800eaa4:	2204      	movs	r2, #4
 800eaa6:	701a      	strb	r2, [r3, #0]
    return (0);
 800eaa8:	2000      	movs	r0, #0
 800eaaa:	4770      	bx	lr
err:
    return (rc);
 800eaac:	f06f 0001 	mvn.w	r0, #1
}
 800eab0:	4770      	bx	lr
	...

0800eab4 <_ZL20gps_l70r_sensor_readP6sensor13sensor_type_tPFiS0_PvS2_S1_ES2_m>:
    sensor_data_func_t data_func, void *data_arg, uint32_t timeout) {
 800eab4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eab6:	b08b      	sub	sp, #44	; 0x2c
 800eab8:	9d10      	ldr	r5, [sp, #64]	; 0x40
    if (!(type & SENSOR_TYPE_GEOLOCATION)) { rc = SYS_EINVAL; goto err; }
 800eaba:	f002 6600 	and.w	r6, r2, #134217728	; 0x8000000
 800eabe:	2700      	movs	r7, #0
 800eac0:	ea56 0307 	orrs.w	r3, r6, r7
 800eac4:	d044      	beq.n	800eb50 <_ZL20gps_l70r_sensor_readP6sensor13sensor_type_tPFiS0_PvS2_S1_ES2_m+0x9c>
 800eac6:	4604      	mov	r4, r0
    memset(sensor_data, 0, sizeof(struct sensor_geolocation_data));  //  Init all fields to 0
 800eac8:	2300      	movs	r3, #0
 800eaca:	9303      	str	r3, [sp, #12]
 800eacc:	9304      	str	r3, [sp, #16]
 800eace:	9305      	str	r3, [sp, #20]
 800ead0:	9306      	str	r3, [sp, #24]
 800ead2:	9307      	str	r3, [sp, #28]
 800ead4:	9308      	str	r3, [sp, #32]
 800ead6:	f8cd 3023 	str.w	r3, [sp, #35]	; 0x23
   bool isValid() const    { return valid; }
 800eada:	4b20      	ldr	r3, [pc, #128]	; (800eb5c <_ZL20gps_l70r_sensor_readP6sensor13sensor_type_tPFiS0_PvS2_S1_ES2_m+0xa8>)
 800eadc:	781b      	ldrb	r3, [r3, #0]
    if (gps_parser.location.isValid()) {  //  If we have parsed a valid latitude / longtude
 800eade:	bb03      	cbnz	r3, 800eb22 <_ZL20gps_l70r_sensor_readP6sensor13sensor_type_tPFiS0_PvS2_S1_ES2_m+0x6e>
   bool isValid() const    { return valid; }
 800eae0:	4b1e      	ldr	r3, [pc, #120]	; (800eb5c <_ZL20gps_l70r_sensor_readP6sensor13sensor_type_tPFiS0_PvS2_S1_ES2_m+0xa8>)
 800eae2:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    if (gps_parser.altitude.isValid()) {  //  If we have parsed a valid altitude
 800eae6:	b183      	cbz	r3, 800eb0a <_ZL20gps_l70r_sensor_readP6sensor13sensor_type_tPFiS0_PvS2_S1_ES2_m+0x56>
   int32_t value()         { updated = false; return val; }
 800eae8:	4b1c      	ldr	r3, [pc, #112]	; (800eb5c <_ZL20gps_l70r_sensor_readP6sensor13sensor_type_tPFiS0_PvS2_S1_ES2_m+0xa8>)
 800eaea:	2200      	movs	r2, #0
 800eaec:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
   double deg()      { return value() / 100.0; }
};

struct TinyGPSAltitude : TinyGPSDecimal
{
   double meters()       { return value() / 100.0; }
 800eaf0:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800eaf4:	f006 fc8e 	bl	8015414 <__aeabi_i2d>
 800eaf8:	2200      	movs	r2, #0
 800eafa:	4b19      	ldr	r3, [pc, #100]	; (800eb60 <_ZL20gps_l70r_sensor_readP6sensor13sensor_type_tPFiS0_PvS2_S1_ES2_m+0xac>)
 800eafc:	f006 fe1e 	bl	801573c <__aeabi_ddiv>
        sensor_data->sgd_altitude           = gps_parser.altitude.meters();
 800eb00:	9007      	str	r0, [sp, #28]
 800eb02:	9108      	str	r1, [sp, #32]
        sensor_data->sgd_altitude_is_valid  = 1;
 800eb04:	2301      	movs	r3, #1
 800eb06:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    if (data_func) {  //  Call the Listener Function to process the sensor data.
 800eb0a:	b325      	cbz	r5, 800eb56 <_ZL20gps_l70r_sensor_readP6sensor13sensor_type_tPFiS0_PvS2_S1_ES2_m+0xa2>
        rc = data_func(sensor, data_arg, sensor_data, SENSOR_TYPE_GEOLOCATION);
 800eb0c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800eb10:	2300      	movs	r3, #0
 800eb12:	e9cd 2300 	strd	r2, r3, [sp]
 800eb16:	aa03      	add	r2, sp, #12
 800eb18:	9911      	ldr	r1, [sp, #68]	; 0x44
 800eb1a:	4620      	mov	r0, r4
 800eb1c:	47a8      	blx	r5
}
 800eb1e:	b00b      	add	sp, #44	; 0x2c
 800eb20:	bdf0      	pop	{r4, r5, r6, r7, pc}
        sensor_data->sgd_latitude           = gps_parser.location.lat();
 800eb22:	4e0e      	ldr	r6, [pc, #56]	; (800eb5c <_ZL20gps_l70r_sensor_readP6sensor13sensor_type_tPFiS0_PvS2_S1_ES2_m+0xa8>)
 800eb24:	4630      	mov	r0, r6
 800eb26:	f000 fc47 	bl	800f3b8 <_ZN15TinyGPSLocation3latEv>
 800eb2a:	ec51 0b10 	vmov	r0, r1, d0
 800eb2e:	ed8d 0a03 	vstr	s0, [sp, #12]
 800eb32:	9104      	str	r1, [sp, #16]
        sensor_data->sgd_longitude          = gps_parser.location.lng();
 800eb34:	4630      	mov	r0, r6
 800eb36:	f000 fc63 	bl	800f400 <_ZN15TinyGPSLocation3lngEv>
 800eb3a:	ec51 0b10 	vmov	r0, r1, d0
 800eb3e:	ed8d 0a05 	vstr	s0, [sp, #20]
 800eb42:	9106      	str	r1, [sp, #24]
        sensor_data->sgd_latitude_is_valid  = 1;
 800eb44:	2301      	movs	r3, #1
 800eb46:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        sensor_data->sgd_longitude_is_valid = 1;
 800eb4a:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 800eb4e:	e7c7      	b.n	800eae0 <_ZL20gps_l70r_sensor_readP6sensor13sensor_type_tPFiS0_PvS2_S1_ES2_m+0x2c>
    if (!(type & SENSOR_TYPE_GEOLOCATION)) { rc = SYS_EINVAL; goto err; }
 800eb50:	f06f 0001 	mvn.w	r0, #1
 800eb54:	e7e3      	b.n	800eb1e <_ZL20gps_l70r_sensor_readP6sensor13sensor_type_tPFiS0_PvS2_S1_ES2_m+0x6a>
    return 0;
 800eb56:	2000      	movs	r0, #0
 800eb58:	e7e1      	b.n	800eb1e <_ZL20gps_l70r_sensor_readP6sensor13sensor_type_tPFiS0_PvS2_S1_ES2_m+0x6a>
 800eb5a:	bf00      	nop
 800eb5c:	20002ae4 	.word	0x20002ae4
 800eb60:	40590000 	.word	0x40590000

0800eb64 <gps_l70r_sensor_init>:
int gps_l70r_sensor_init(struct gps_l70r *dev, void *arg) {
 800eb64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!arg || !dev) { rc = SYS_ENODEV; goto err; }
 800eb66:	b349      	cbz	r1, 800ebbc <gps_l70r_sensor_init+0x58>
 800eb68:	460d      	mov	r5, r1
 800eb6a:	b350      	cbz	r0, 800ebc2 <gps_l70r_sensor_init+0x5e>
 800eb6c:	4604      	mov	r4, r0
    rc = gps_l70r_default_cfg(&dev->cfg);
 800eb6e:	30b0      	adds	r0, #176	; 0xb0
 800eb70:	f7ff ff0e 	bl	800e990 <gps_l70r_default_cfg>
    if (rc) { goto err; }
 800eb74:	4603      	mov	r3, r0
 800eb76:	b108      	cbz	r0, 800eb7c <gps_l70r_sensor_init+0x18>
}
 800eb78:	4618      	mov	r0, r3
 800eb7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    sensor = &dev->sensor;
 800eb7c:	f104 0628 	add.w	r6, r4, #40	; 0x28
    rc = sensor_init(sensor, (struct os_dev *) dev);
 800eb80:	4621      	mov	r1, r4
 800eb82:	4630      	mov	r0, r6
 800eb84:	f7fd fb7d 	bl	800c282 <sensor_init>
    if (rc != 0) { goto err; }
 800eb88:	4603      	mov	r3, r0
 800eb8a:	2800      	cmp	r0, #0
 800eb8c:	d1f4      	bne.n	800eb78 <gps_l70r_sensor_init+0x14>
 */
static inline int
sensor_set_driver(struct sensor *sensor, sensor_type_t type,
        struct sensor_driver *driver)
{
    sensor->s_funcs = driver;
 800eb8e:	4b0e      	ldr	r3, [pc, #56]	; (800ebc8 <gps_l70r_sensor_init+0x64>)
 800eb90:	6523      	str	r3, [r4, #80]	; 0x50
    sensor->s_types = type;
 800eb92:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800eb96:	2300      	movs	r3, #0
 800eb98:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
 * @param s_itf The interface type to set
 */
static inline int
sensor_set_interface(struct sensor *sensor, struct sensor_itf *s_itf)
{
    memcpy(&sensor->s_itf, s_itf, sizeof(*s_itf));
 800eb9c:	682a      	ldr	r2, [r5, #0]
 800eb9e:	686f      	ldr	r7, [r5, #4]
 800eba0:	68a8      	ldr	r0, [r5, #8]
 800eba2:	68e9      	ldr	r1, [r5, #12]
 800eba4:	6722      	str	r2, [r4, #112]	; 0x70
 800eba6:	6767      	str	r7, [r4, #116]	; 0x74
 800eba8:	67a0      	str	r0, [r4, #120]	; 0x78
 800ebaa:	67e1      	str	r1, [r4, #124]	; 0x7c
 800ebac:	692a      	ldr	r2, [r5, #16]
 800ebae:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
    rc = sensor_mgr_register(sensor);
 800ebb2:	4630      	mov	r0, r6
 800ebb4:	f7fd fb4e 	bl	800c254 <sensor_mgr_register>
 800ebb8:	4603      	mov	r3, r0
err:
 800ebba:	e7dd      	b.n	800eb78 <gps_l70r_sensor_init+0x14>
    if (!arg || !dev) { rc = SYS_ENODEV; goto err; }
 800ebbc:	f06f 0308 	mvn.w	r3, #8
 800ebc0:	e7da      	b.n	800eb78 <gps_l70r_sensor_init+0x14>
 800ebc2:	f06f 0308 	mvn.w	r3, #8
 800ebc6:	e7d7      	b.n	800eb78 <gps_l70r_sensor_init+0x14>
 800ebc8:	080182ec 	.word	0x080182ec

0800ebcc <gps_l70r_sensor_default_cfg>:

int gps_l70r_sensor_default_cfg(struct gps_l70r_cfg *cfg) {
    //  Copy the default sensor config into cfg.  Returns 0.
    cfg->bc_s_mask = SENSOR_TYPE_ALL;  //  Return all sensor values
 800ebcc:	f04f 32ff 	mov.w	r2, #4294967295
 800ebd0:	2300      	movs	r3, #0
 800ebd2:	e9c0 2300 	strd	r2, r3, [r0]
    return 0;
}
 800ebd6:	2000      	movs	r0, #0
 800ebd8:	4770      	bx	lr

0800ebda <gps_l70r_sensor_config>:
 * @param Sensor device gps_l70r structure
 * @param Sensor device gps_l70r_cfg config
 *
 * @return 0 on success, and non-zero error code on failure
 */
int gps_l70r_sensor_config(struct gps_l70r *dev, struct gps_l70r_cfg *cfg) {
 800ebda:	b508      	push	{r3, lr}
    struct sensor_itf *itf;
    int rc;
    itf = SENSOR_GET_ITF(&(dev->sensor)); assert(itf);
 800ebdc:	f110 0f70 	cmn.w	r0, #112	; 0x70
 800ebe0:	d009      	beq.n	800ebf6 <gps_l70r_sensor_config+0x1c>
    rc = sensor_set_type_mask(&(dev->sensor),  cfg->bc_s_mask);
 800ebe2:	e9d1 2300 	ldrd	r2, r3, [r1]
    sensor->s_mask = mask;
 800ebe6:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
    if (rc) { goto err; }

    dev->cfg.bc_s_mask = cfg->bc_s_mask;
 800ebea:	e9d1 2300 	ldrd	r2, r3, [r1]
 800ebee:	e9c0 232c 	strd	r2, r3, [r0, #176]	; 0xb0
    return 0;
err:
    return (rc);
}
 800ebf2:	2000      	movs	r0, #0
 800ebf4:	bd08      	pop	{r3, pc}
    itf = SENSOR_GET_ITF(&(dev->sensor)); assert(itf);
 800ebf6:	2300      	movs	r3, #0
 800ebf8:	461a      	mov	r2, r3
 800ebfa:	4619      	mov	r1, r3
 800ebfc:	4618      	mov	r0, r3
 800ebfe:	f7fd fce9 	bl	800c5d4 <__assert_func>
	...

0800ec04 <hmac_prng_init>:
static struct tc_hmac_prng_struct prng;  //  TinyCrypt HMAC PRNG.
static uint8_t hw_id[12];  //  Hardware ID is 12 bytes for STM32
static int hw_id_len;      //  Actual length of hardware ID
static uint8_t seed[32];   //  Seed must be >= 32 bytes long

void hmac_prng_init(void) {
 800ec04:	b530      	push	{r4, r5, lr}
 800ec06:	b085      	sub	sp, #20
#define ENTROPY
#ifdef ENTROPY
    //  Use the internal temperature sensor as a source of entropy (noise) for the generator.
    int rawtemp;
    //  Open the temp_stm32 internal temperature sensor driver.  Assumes already started with "stm32f1_adc_create();  temp_stm32_create();""
    struct temp_stm32 *dev = (struct temp_stm32 *) os_dev_open(MYNEWT_VAL(TEMP_STM32_DEVICE), OS_TIMEOUT_NEVER, NULL);  assert(dev);
 800ec08:	2200      	movs	r2, #0
 800ec0a:	f04f 31ff 	mov.w	r1, #4294967295
 800ec0e:	4836      	ldr	r0, [pc, #216]	; (800ece8 <hmac_prng_init+0xe4>)
 800ec10:	f7fd ffb2 	bl	800cb78 <os_dev_open>
 800ec14:	2800      	cmp	r0, #0
 800ec16:	d043      	beq.n	800eca0 <hmac_prng_init+0x9c>
 800ec18:	4604      	mov	r4, r0

    //  Fetch 32 bytes of temperature noise into the seed array.
    rc = temp_stm32_get_raw_temperature(dev, sizeof(seed) * 2, &rawtemp, seed); assert(rc == 0);
 800ec1a:	4b34      	ldr	r3, [pc, #208]	; (800ecec <hmac_prng_init+0xe8>)
 800ec1c:	aa03      	add	r2, sp, #12
 800ec1e:	2140      	movs	r1, #64	; 0x40
 800ec20:	f000 fa1a 	bl	800f058 <temp_stm32_get_raw_temperature>
 800ec24:	2800      	cmp	r0, #0
 800ec26:	d141      	bne.n	800ecac <hmac_prng_init+0xa8>
    os_dev_close((struct os_dev *) dev);  //  Close the driver.
 800ec28:	4620      	mov	r0, r4
 800ec2a:	f7fd ffc7 	bl	800cbbc <os_dev_close>
#endif  //  ENTROPY

    //  Fetch the hardware ID.  This is unique across all microcontrollers.  
    hw_id_len = hal_bsp_hw_id_len();     //  Fetch the length, i.e. 12
 800ec2e:	f7fd f8ef 	bl	800be10 <hal_bsp_hw_id_len>
 800ec32:	4b2f      	ldr	r3, [pc, #188]	; (800ecf0 <hmac_prng_init+0xec>)
 800ec34:	6018      	str	r0, [r3, #0]
    assert(hw_id_len >= sizeof(hw_id));  //  Hardware ID too short.
 800ec36:	280b      	cmp	r0, #11
 800ec38:	d93e      	bls.n	800ecb8 <hmac_prng_init+0xb4>
    hw_id_len = hal_bsp_hw_id(hw_id, sizeof(hw_id));  assert(hw_id_len > 0);  //  Get the hardware ID.
 800ec3a:	210c      	movs	r1, #12
 800ec3c:	482d      	ldr	r0, [pc, #180]	; (800ecf4 <hmac_prng_init+0xf0>)
 800ec3e:	f7fd f8e9 	bl	800be14 <hal_bsp_hw_id>
 800ec42:	4b2b      	ldr	r3, [pc, #172]	; (800ecf0 <hmac_prng_init+0xec>)
 800ec44:	6018      	str	r0, [r3, #0]
 800ec46:	2800      	cmp	r0, #0
 800ec48:	dd3c      	ble.n	800ecc4 <hmac_prng_init+0xc0>

    //  Personalise the random number generator with the hardware ID.
    //  TinyCrypt uses the hardware ID to prevent generating similar random numbers across microcontrollers.
    console_printf("RND personalise with hw id "); console_dump(hw_id, hw_id_len); console_printf("\n"); console_flush(); ////
 800ec4a:	482b      	ldr	r0, [pc, #172]	; (800ecf8 <hmac_prng_init+0xf4>)
 800ec4c:	f7fb fcce 	bl	800a5ec <console_printf>
 800ec50:	4d27      	ldr	r5, [pc, #156]	; (800ecf0 <hmac_prng_init+0xec>)
 800ec52:	4c28      	ldr	r4, [pc, #160]	; (800ecf4 <hmac_prng_init+0xf0>)
 800ec54:	6829      	ldr	r1, [r5, #0]
 800ec56:	4620      	mov	r0, r4
 800ec58:	f7fb fc58 	bl	800a50c <console_dump>
 800ec5c:	4827      	ldr	r0, [pc, #156]	; (800ecfc <hmac_prng_init+0xf8>)
 800ec5e:	f7fb fcc5 	bl	800a5ec <console_printf>
 800ec62:	f7fb fbb3 	bl	800a3cc <console_flush>
    rc = tc_hmac_prng_init(&prng, hw_id, hw_id_len);  assert(rc);
 800ec66:	682a      	ldr	r2, [r5, #0]
 800ec68:	4621      	mov	r1, r4
 800ec6a:	4825      	ldr	r0, [pc, #148]	; (800ed00 <hmac_prng_init+0xfc>)
 800ec6c:	f000 fea1 	bl	800f9b2 <tc_hmac_prng_init>
 800ec70:	b370      	cbz	r0, 800ecd0 <hmac_prng_init+0xcc>

#ifdef ENTROPY
    console_printf("RND seed with temp entropy "); console_dump(seed, sizeof(seed)); console_printf("\n"); console_flush(); ////
 800ec72:	4824      	ldr	r0, [pc, #144]	; (800ed04 <hmac_prng_init+0x100>)
 800ec74:	f7fb fcba 	bl	800a5ec <console_printf>
 800ec78:	4c1c      	ldr	r4, [pc, #112]	; (800ecec <hmac_prng_init+0xe8>)
 800ec7a:	2120      	movs	r1, #32
 800ec7c:	4620      	mov	r0, r4
 800ec7e:	f7fb fc45 	bl	800a50c <console_dump>
 800ec82:	481e      	ldr	r0, [pc, #120]	; (800ecfc <hmac_prng_init+0xf8>)
 800ec84:	f7fb fcb2 	bl	800a5ec <console_printf>
 800ec88:	f7fb fba0 	bl	800a3cc <console_flush>
#else
    console_printf("NO ENTROPY\n");
#endif  //  ENTROPY

    //  Use the temperature entropy data to seed the generator.  Seed must be >= 32 bytes long.
    rc = tc_hmac_prng_reseed(&prng, seed, sizeof(seed), NULL, 0);
 800ec8c:	2300      	movs	r3, #0
 800ec8e:	9300      	str	r3, [sp, #0]
 800ec90:	2220      	movs	r2, #32
 800ec92:	4621      	mov	r1, r4
 800ec94:	481a      	ldr	r0, [pc, #104]	; (800ed00 <hmac_prng_init+0xfc>)
 800ec96:	f000 feb2 	bl	800f9fe <tc_hmac_prng_reseed>
    assert(rc);
 800ec9a:	b1f8      	cbz	r0, 800ecdc <hmac_prng_init+0xd8>
}
 800ec9c:	b005      	add	sp, #20
 800ec9e:	bd30      	pop	{r4, r5, pc}
    struct temp_stm32 *dev = (struct temp_stm32 *) os_dev_open(MYNEWT_VAL(TEMP_STM32_DEVICE), OS_TIMEOUT_NEVER, NULL);  assert(dev);
 800eca0:	2300      	movs	r3, #0
 800eca2:	461a      	mov	r2, r3
 800eca4:	4619      	mov	r1, r3
 800eca6:	4618      	mov	r0, r3
 800eca8:	f7fd fc94 	bl	800c5d4 <__assert_func>
    rc = temp_stm32_get_raw_temperature(dev, sizeof(seed) * 2, &rawtemp, seed); assert(rc == 0);
 800ecac:	2300      	movs	r3, #0
 800ecae:	461a      	mov	r2, r3
 800ecb0:	4619      	mov	r1, r3
 800ecb2:	4618      	mov	r0, r3
 800ecb4:	f7fd fc8e 	bl	800c5d4 <__assert_func>
    assert(hw_id_len >= sizeof(hw_id));  //  Hardware ID too short.
 800ecb8:	2300      	movs	r3, #0
 800ecba:	461a      	mov	r2, r3
 800ecbc:	4619      	mov	r1, r3
 800ecbe:	4618      	mov	r0, r3
 800ecc0:	f7fd fc88 	bl	800c5d4 <__assert_func>
    hw_id_len = hal_bsp_hw_id(hw_id, sizeof(hw_id));  assert(hw_id_len > 0);  //  Get the hardware ID.
 800ecc4:	2300      	movs	r3, #0
 800ecc6:	461a      	mov	r2, r3
 800ecc8:	4619      	mov	r1, r3
 800ecca:	4618      	mov	r0, r3
 800eccc:	f7fd fc82 	bl	800c5d4 <__assert_func>
    rc = tc_hmac_prng_init(&prng, hw_id, hw_id_len);  assert(rc);
 800ecd0:	2300      	movs	r3, #0
 800ecd2:	461a      	mov	r2, r3
 800ecd4:	4619      	mov	r1, r3
 800ecd6:	4618      	mov	r0, r3
 800ecd8:	f7fd fc7c 	bl	800c5d4 <__assert_func>
    assert(rc);
 800ecdc:	2300      	movs	r3, #0
 800ecde:	461a      	mov	r2, r3
 800ece0:	4619      	mov	r1, r3
 800ece2:	4618      	mov	r0, r3
 800ece4:	f7fd fc76 	bl	800c5d4 <__assert_func>
 800ece8:	08018314 	.word	0x08018314
 800ecec:	20002d08 	.word	0x20002d08
 800ecf0:	20002bc8 	.word	0x20002bc8
 800ecf4:	20002bbc 	.word	0x20002bbc
 800ecf8:	08018324 	.word	0x08018324
 800ecfc:	080185b4 	.word	0x080185b4
 800ed00:	20002bd0 	.word	0x20002bd0
 800ed04:	08018340 	.word	0x08018340

0800ed08 <hmac_prng_generate>:

int hmac_prng_generate(uint8_t *rnd, unsigned int rndlen) {
 800ed08:	b508      	push	{r3, lr}
    //  Generate a random number of length rndlen bytes and save to rnd.  Return 0 if successful.
    int rc;
    //  Call TinyCrypt to generate the random number.
    rc = tc_hmac_prng_generate(rnd, rndlen, &prng);  assert(rc);
 800ed0a:	4a06      	ldr	r2, [pc, #24]	; (800ed24 <hmac_prng_generate+0x1c>)
 800ed0c:	f000 fe99 	bl	800fa42 <tc_hmac_prng_generate>
 800ed10:	b108      	cbz	r0, 800ed16 <hmac_prng_generate+0xe>
    return 0;
}
 800ed12:	2000      	movs	r0, #0
 800ed14:	bd08      	pop	{r3, pc}
    rc = tc_hmac_prng_generate(rnd, rndlen, &prng);  assert(rc);
 800ed16:	2300      	movs	r3, #0
 800ed18:	461a      	mov	r2, r3
 800ed1a:	4619      	mov	r1, r3
 800ed1c:	4618      	mov	r0, r3
 800ed1e:	f7fd fc59 	bl	800c5d4 <__assert_func>
 800ed22:	bf00      	nop
 800ed24:	20002bd0 	.word	0x20002bd0

0800ed28 <json_helper_set_array>:
#include <sensor_coap/sensor_coap.h>
#include <mynewt_rust/json_helper.h>

//  Assume we are writing an object now.  Write the key name and start a child array.
//  {a:b --> {a:b, key:[
void json_helper_set_array(void *object, const char *key) {
 800ed28:	b510      	push	{r4, lr}
    assert(key);
 800ed2a:	b139      	cbz	r1, 800ed3c <json_helper_set_array+0x14>
    //  console_printf("json_helper_set_array: %s\n", key); ////
    json_rep_set_array_k(object, (char *) key);
 800ed2c:	4c06      	ldr	r4, [pc, #24]	; (800ed48 <json_helper_set_array+0x20>)
 800ed2e:	4620      	mov	r0, r4
 800ed30:	f7fd f84c 	bl	800bdcc <json_encode_array_name>
 800ed34:	4620      	mov	r0, r4
 800ed36:	f7fd f84d 	bl	800bdd4 <json_encode_array_start>
}
 800ed3a:	bd10      	pop	{r4, pc}
    assert(key);
 800ed3c:	2300      	movs	r3, #0
 800ed3e:	461a      	mov	r2, r3
 800ed40:	4619      	mov	r1, r3
 800ed42:	4618      	mov	r0, r3
 800ed44:	f7fd fc46 	bl	800c5d4 <__assert_func>
 800ed48:	200037b8 	.word	0x200037b8

0800ed4c <json_helper_close_array>:

//  End the child array and resume writing the parent object.
//  {a:b, key:[... --> {a:b, key:[...]
void json_helper_close_array(void *object, const char *key) {
 800ed4c:	b508      	push	{r3, lr}
    assert(key);
 800ed4e:	b119      	cbz	r1, 800ed58 <json_helper_close_array+0xc>
    json_rep_close_array(object, key);
 800ed50:	4804      	ldr	r0, [pc, #16]	; (800ed64 <json_helper_close_array+0x18>)
 800ed52:	f7fd f84f 	bl	800bdf4 <json_encode_array_finish>
}
 800ed56:	bd08      	pop	{r3, pc}
    assert(key);
 800ed58:	2300      	movs	r3, #0
 800ed5a:	461a      	mov	r2, r3
 800ed5c:	4619      	mov	r1, r3
 800ed5e:	4618      	mov	r0, r3
 800ed60:	f7fd fc38 	bl	800c5d4 <__assert_func>
 800ed64:	200037b8 	.word	0x200037b8

0800ed68 <json_helper_object_array_start_item>:

//  Assume we have called set_array.  Start an array item, assumed to be an object.
//  [... --> [...,
void json_helper_object_array_start_item(const char *key) {
 800ed68:	b508      	push	{r3, lr}
    assert(key);
 800ed6a:	b118      	cbz	r0, 800ed74 <json_helper_object_array_start_item+0xc>
    //  console_printf("json_helper_object_array_start_item: %s\n", key); ////
    json_rep_object_array_start_item(key);
 800ed6c:	4804      	ldr	r0, [pc, #16]	; (800ed80 <json_helper_object_array_start_item+0x18>)
 800ed6e:	f7fc fe9f 	bl	800bab0 <json_encode_object_start>
}
 800ed72:	bd08      	pop	{r3, pc}
    assert(key);
 800ed74:	2300      	movs	r3, #0
 800ed76:	461a      	mov	r2, r3
 800ed78:	4619      	mov	r1, r3
 800ed7a:	4618      	mov	r0, r3
 800ed7c:	f7fd fc2a 	bl	800c5d4 <__assert_func>
 800ed80:	200037b8 	.word	0x200037b8

0800ed84 <json_helper_object_array_end_item>:

//  End an array item, assumed to be an object.
//  [... --> [...,
void json_helper_object_array_end_item(const char *key) {
 800ed84:	b508      	push	{r3, lr}
    assert(key);
 800ed86:	b118      	cbz	r0, 800ed90 <json_helper_object_array_end_item+0xc>
    json_rep_object_array_end_item(key);
 800ed88:	4804      	ldr	r0, [pc, #16]	; (800ed9c <json_helper_object_array_end_item+0x18>)
 800ed8a:	f7fd f80f 	bl	800bdac <json_encode_object_finish>
}
 800ed8e:	bd08      	pop	{r3, pc}
    assert(key);
 800ed90:	2300      	movs	r3, #0
 800ed92:	461a      	mov	r2, r3
 800ed94:	4619      	mov	r1, r3
 800ed96:	4618      	mov	r0, r3
 800ed98:	f7fd fc1c 	bl	800c5d4 <__assert_func>
 800ed9c:	200037b8 	.word	0x200037b8

0800eda0 <json_helper_set_int>:

//  Encode a value into JSON: int, unsigned int, float, text, ...
void json_helper_set_int(void *object, const char *key, uint64_t value) {
 800eda0:	b538      	push	{r3, r4, r5, lr}
    assert(key);
 800eda2:	b159      	cbz	r1, 800edbc <json_helper_set_int+0x1c>
 800eda4:	4614      	mov	r4, r2
 800eda6:	461d      	mov	r5, r3
    //  console_printf("json_helper_set_int: %s\n", key); ////
    json_rep_set_int_k(object, (char *) key, value);
 800eda8:	4b07      	ldr	r3, [pc, #28]	; (800edc8 <json_helper_set_int+0x28>)
 800edaa:	2202      	movs	r2, #2
 800edac:	705a      	strb	r2, [r3, #1]
 800edae:	e9c3 4502 	strd	r4, r5, [r3, #8]
 800edb2:	461a      	mov	r2, r3
 800edb4:	4805      	ldr	r0, [pc, #20]	; (800edcc <json_helper_set_int+0x2c>)
 800edb6:	f7fc fec3 	bl	800bb40 <json_encode_object_entry>
}
 800edba:	bd38      	pop	{r3, r4, r5, pc}
    assert(key);
 800edbc:	2300      	movs	r3, #0
 800edbe:	461a      	mov	r2, r3
 800edc0:	4619      	mov	r1, r3
 800edc2:	4618      	mov	r0, r3
 800edc4:	f7fd fc06 	bl	800c5d4 <__assert_func>
 800edc8:	20003808 	.word	0x20003808
 800edcc:	200037b8 	.word	0x200037b8

0800edd0 <json_helper_set_float>:
void json_helper_set_uint(void *object, const char *key, uint64_t value) {
    assert(key);
    json_rep_set_uint_k(object, (char *) key, value);
}

void json_helper_set_float(void *object, const char *key, float value) {
 800edd0:	b508      	push	{r3, lr}
    assert(key);
 800edd2:	b151      	cbz	r1, 800edea <json_helper_set_float+0x1a>
 800edd4:	460b      	mov	r3, r1
    json_rep_set_float_k(object, (char *) key, value);
 800edd6:	4a08      	ldr	r2, [pc, #32]	; (800edf8 <json_helper_set_float+0x28>)
 800edd8:	2106      	movs	r1, #6
 800edda:	7051      	strb	r1, [r2, #1]
 800eddc:	ed82 0a02 	vstr	s0, [r2, #8]
 800ede0:	4619      	mov	r1, r3
 800ede2:	4806      	ldr	r0, [pc, #24]	; (800edfc <json_helper_set_float+0x2c>)
 800ede4:	f7fb fe66 	bl	800aab4 <json_encode_object_entry_ext>
}
 800ede8:	bd08      	pop	{r3, pc}
    assert(key);
 800edea:	2300      	movs	r3, #0
 800edec:	461a      	mov	r2, r3
 800edee:	4619      	mov	r1, r3
 800edf0:	4618      	mov	r0, r3
 800edf2:	f7fd fbef 	bl	800c5d4 <__assert_func>
 800edf6:	bf00      	nop
 800edf8:	20003808 	.word	0x20003808
 800edfc:	200037b8 	.word	0x200037b8

0800ee00 <json_helper_set_text_string>:

void json_helper_set_text_string(void *object, const char *key, const char *value) {
 800ee00:	b570      	push	{r4, r5, r6, lr}
    assert(key);
 800ee02:	b181      	cbz	r1, 800ee26 <json_helper_set_text_string+0x26>
 800ee04:	4615      	mov	r5, r2
 800ee06:	460e      	mov	r6, r1
    assert(value);
 800ee08:	b19a      	cbz	r2, 800ee32 <json_helper_set_text_string+0x32>
    //  console_printf("json_helper_set_text_string: %s\n", key); ////
    json_rep_set_text_string_k(object, (char *) key, value);
 800ee0a:	4c0d      	ldr	r4, [pc, #52]	; (800ee40 <json_helper_set_text_string+0x40>)
 800ee0c:	2303      	movs	r3, #3
 800ee0e:	7063      	strb	r3, [r4, #1]
 800ee10:	4610      	mov	r0, r2
 800ee12:	f7ff f8ea 	bl	800dfea <strlen>
 800ee16:	8060      	strh	r0, [r4, #2]
 800ee18:	60a5      	str	r5, [r4, #8]
 800ee1a:	4622      	mov	r2, r4
 800ee1c:	4631      	mov	r1, r6
 800ee1e:	4809      	ldr	r0, [pc, #36]	; (800ee44 <json_helper_set_text_string+0x44>)
 800ee20:	f7fc fe8e 	bl	800bb40 <json_encode_object_entry>
}
 800ee24:	bd70      	pop	{r4, r5, r6, pc}
    assert(key);
 800ee26:	2300      	movs	r3, #0
 800ee28:	461a      	mov	r2, r3
 800ee2a:	4619      	mov	r1, r3
 800ee2c:	4618      	mov	r0, r3
 800ee2e:	f7fd fbd1 	bl	800c5d4 <__assert_func>
    assert(value);
 800ee32:	2300      	movs	r3, #0
 800ee34:	461a      	mov	r2, r3
 800ee36:	4619      	mov	r1, r3
 800ee38:	4618      	mov	r0, r3
 800ee3a:	f7fd fbcb 	bl	800c5d4 <__assert_func>
 800ee3e:	bf00      	nop
 800ee40:	20003808 	.word	0x20003808
 800ee44:	200037b8 	.word	0x200037b8

0800ee48 <rust_sysinit>:
#include <mynewt_rust/mynewt_rust.h>
#include <mynewt_rust/sensor_helper.h>
#include <mynewt_rust/json_helper.h>

///  Initialise the Mynewt system.  Start the Mynewt drivers and libraries.  Equivalent to `sysinit()` macro in C.
void rust_sysinit() {
 800ee48:	b508      	push	{r3, lr}
    sysinit();
 800ee4a:	f7fc fe17 	bl	800ba7c <sysinit_start>
 800ee4e:	f000 fd20 	bl	800f892 <sysinit_app>
 800ee52:	f7fc fe19 	bl	800ba88 <sysinit_end>
}
 800ee56:	bd08      	pop	{r3, pc}

0800ee58 <get_temp_raw_data>:
#include <custom_sensor/custom_sensor.h>
#include <mynewt_rust/sensor_helper.h>

///  Interpret `sensor_data` as a `sensor_temp_raw_data` struct that contains raw temp.
///  Copy the sensor data into `dest`.  Return 0 if successful.
int get_temp_raw_data(void *sensor_data, struct sensor_temp_raw_data *dest) {
 800ee58:	b508      	push	{r3, lr}
    assert(sensor_data); assert(dest);
 800ee5a:	b130      	cbz	r0, 800ee6a <get_temp_raw_data+0x12>
 800ee5c:	b159      	cbz	r1, 800ee76 <get_temp_raw_data+0x1e>
    struct sensor_temp_raw_data *src = (struct sensor_temp_raw_data *) sensor_data;
    memcpy(dest, src, sizeof(struct sensor_temp_raw_data));
 800ee5e:	6802      	ldr	r2, [r0, #0]
 800ee60:	600a      	str	r2, [r1, #0]
 800ee62:	7903      	ldrb	r3, [r0, #4]
 800ee64:	710b      	strb	r3, [r1, #4]
    return 0;
}
 800ee66:	2000      	movs	r0, #0
 800ee68:	bd08      	pop	{r3, pc}
    assert(sensor_data); assert(dest);
 800ee6a:	2300      	movs	r3, #0
 800ee6c:	461a      	mov	r2, r3
 800ee6e:	4619      	mov	r1, r3
 800ee70:	4618      	mov	r0, r3
 800ee72:	f7fd fbaf 	bl	800c5d4 <__assert_func>
 800ee76:	2300      	movs	r3, #0
 800ee78:	461a      	mov	r2, r3
 800ee7a:	4619      	mov	r1, r3
 800ee7c:	4618      	mov	r0, r3
 800ee7e:	f7fd fba9 	bl	800c5d4 <__assert_func>

0800ee82 <get_geolocation_data>:
    return 0;
}

///  Interpret `sensor_data` as a `sensor_geolocation_data` struct that contains geolocation.
///  Copy the sensor data into `dest`.  Return 0 if successful.
int get_geolocation_data(void *sensor_data, struct sensor_geolocation_data *dest) {
 800ee82:	b538      	push	{r3, r4, r5, lr}
    assert(sensor_data); assert(dest);
 800ee84:	b198      	cbz	r0, 800eeae <get_geolocation_data+0x2c>
 800ee86:	4603      	mov	r3, r0
 800ee88:	b1b9      	cbz	r1, 800eeba <get_geolocation_data+0x38>
    struct sensor_geolocation_data *src = (struct sensor_geolocation_data *) sensor_data;
    memcpy(dest, src, sizeof(struct sensor_geolocation_data));
 800ee8a:	6800      	ldr	r0, [r0, #0]
 800ee8c:	685a      	ldr	r2, [r3, #4]
 800ee8e:	689d      	ldr	r5, [r3, #8]
 800ee90:	68dc      	ldr	r4, [r3, #12]
 800ee92:	6008      	str	r0, [r1, #0]
 800ee94:	604a      	str	r2, [r1, #4]
 800ee96:	608d      	str	r5, [r1, #8]
 800ee98:	60cc      	str	r4, [r1, #12]
 800ee9a:	6918      	ldr	r0, [r3, #16]
 800ee9c:	695a      	ldr	r2, [r3, #20]
 800ee9e:	6108      	str	r0, [r1, #16]
 800eea0:	614a      	str	r2, [r1, #20]
 800eea2:	8b1a      	ldrh	r2, [r3, #24]
 800eea4:	7e9b      	ldrb	r3, [r3, #26]
 800eea6:	830a      	strh	r2, [r1, #24]
 800eea8:	768b      	strb	r3, [r1, #26]
    return 0;
}
 800eeaa:	2000      	movs	r0, #0
 800eeac:	bd38      	pop	{r3, r4, r5, pc}
    assert(sensor_data); assert(dest);
 800eeae:	2300      	movs	r3, #0
 800eeb0:	461a      	mov	r2, r3
 800eeb2:	4619      	mov	r1, r3
 800eeb4:	4618      	mov	r0, r3
 800eeb6:	f7fd fb8d 	bl	800c5d4 <__assert_func>
 800eeba:	2300      	movs	r3, #0
 800eebc:	461a      	mov	r2, r3
 800eebe:	4619      	mov	r1, r3
 800eec0:	4618      	mov	r0, r3
 800eec2:	f7fd fb87 	bl	800c5d4 <__assert_func>

0800eec6 <temp_stm32_sensor_get_config>:

static int temp_stm32_sensor_get_config(struct sensor *sensor, sensor_type_t type,
    struct sensor_cfg *cfg) {
    //  Return the type of the sensor value returned by the sensor.
    int rc;
    if (!(type & TEMP_SENSOR_TYPE)) {
 800eec6:	f002 6080 	and.w	r0, r2, #67108864	; 0x4000000
 800eeca:	2100      	movs	r1, #0
 800eecc:	ea50 0301 	orrs.w	r3, r0, r1
 800eed0:	d004      	beq.n	800eedc <temp_stm32_sensor_get_config+0x16>
        rc = SYS_EINVAL;
        goto err;
    }
    cfg->sc_valtype = TEMP_SENSOR_VALUE_TYPE;  //  We return float (computed values) or int (raw values).
 800eed2:	9b00      	ldr	r3, [sp, #0]
 800eed4:	2201      	movs	r2, #1
 800eed6:	701a      	strb	r2, [r3, #0]
    return (0);
 800eed8:	2000      	movs	r0, #0
 800eeda:	4770      	bx	lr
err:
    return (rc);
 800eedc:	f06f 0001 	mvn.w	r0, #1
}
 800eee0:	4770      	bx	lr

0800eee2 <temp_stm32_close>:
    if (dev->adc) {
 800eee2:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
 800eee6:	b14b      	cbz	r3, 800eefc <temp_stm32_close+0x1a>
static int temp_stm32_close(struct os_dev *dev0) {
 800eee8:	b510      	push	{r4, lr}
 800eeea:	4604      	mov	r4, r0
        os_dev_close((struct os_dev *) dev->adc);
 800eeec:	4618      	mov	r0, r3
 800eeee:	f7fd fe65 	bl	800cbbc <os_dev_close>
        dev->adc = NULL;
 800eef2:	2300      	movs	r3, #0
 800eef4:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
}
 800eef8:	2000      	movs	r0, #0
 800eefa:	bd10      	pop	{r4, pc}
 800eefc:	2000      	movs	r0, #0
 800eefe:	4770      	bx	lr

0800ef00 <temp_stm32_open>:
static int temp_stm32_open(struct os_dev *dev0, uint32_t timeout, void *arg) {
 800ef00:	b510      	push	{r4, lr}
    dev = (struct temp_stm32 *) dev0;  assert(dev);  
 800ef02:	b308      	cbz	r0, 800ef48 <temp_stm32_open+0x48>
 800ef04:	4604      	mov	r4, r0
    cfg = &dev->cfg; assert(cfg); assert(cfg->adc_channel);  assert(cfg->adc_channel_cfg);  assert(cfg->adc_dev_name);
 800ef06:	f110 0fb0 	cmn.w	r0, #176	; 0xb0
 800ef0a:	d023      	beq.n	800ef54 <temp_stm32_open+0x54>
 800ef0c:	f890 30bc 	ldrb.w	r3, [r0, #188]	; 0xbc
 800ef10:	b333      	cbz	r3, 800ef60 <temp_stm32_open+0x60>
 800ef12:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
 800ef16:	b343      	cbz	r3, 800ef6a <temp_stm32_open+0x6a>
 800ef18:	f8d0 00b8 	ldr.w	r0, [r0, #184]	; 0xb8
 800ef1c:	b350      	cbz	r0, 800ef74 <temp_stm32_open+0x74>
    dev->adc = (struct adc_dev *) os_dev_open(cfg->adc_dev_name, timeout, cfg->adc_open_arg);
 800ef1e:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
 800ef22:	f7fd fe29 	bl	800cb78 <os_dev_open>
 800ef26:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
    assert(dev->adc);
 800ef2a:	b348      	cbz	r0, 800ef80 <temp_stm32_open+0x80>
    console_printf("ADC open\n");  ////
 800ef2c:	481d      	ldr	r0, [pc, #116]	; (800efa4 <temp_stm32_open+0xa4>)
 800ef2e:	f7fb fb5d 	bl	800a5ec <console_printf>
    rc = adc_chan_config(dev->adc, cfg->adc_channel, cfg->adc_channel_cfg);
 800ef32:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 800ef36:	f894 10bc 	ldrb.w	r1, [r4, #188]	; 0xbc
 800ef3a:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
 800ef3e:	f001 f865 	bl	801000c <adc_chan_config>
    if (rc) { 
 800ef42:	bb18      	cbnz	r0, 800ef8c <temp_stm32_open+0x8c>
}
 800ef44:	2000      	movs	r0, #0
 800ef46:	bd10      	pop	{r4, pc}
    dev = (struct temp_stm32 *) dev0;  assert(dev);  
 800ef48:	2300      	movs	r3, #0
 800ef4a:	461a      	mov	r2, r3
 800ef4c:	4619      	mov	r1, r3
 800ef4e:	4618      	mov	r0, r3
 800ef50:	f7fd fb40 	bl	800c5d4 <__assert_func>
    cfg = &dev->cfg; assert(cfg); assert(cfg->adc_channel);  assert(cfg->adc_channel_cfg);  assert(cfg->adc_dev_name);
 800ef54:	2300      	movs	r3, #0
 800ef56:	461a      	mov	r2, r3
 800ef58:	4619      	mov	r1, r3
 800ef5a:	4618      	mov	r0, r3
 800ef5c:	f7fd fb3a 	bl	800c5d4 <__assert_func>
 800ef60:	461a      	mov	r2, r3
 800ef62:	4619      	mov	r1, r3
 800ef64:	4618      	mov	r0, r3
 800ef66:	f7fd fb35 	bl	800c5d4 <__assert_func>
 800ef6a:	461a      	mov	r2, r3
 800ef6c:	4619      	mov	r1, r3
 800ef6e:	4618      	mov	r0, r3
 800ef70:	f7fd fb30 	bl	800c5d4 <__assert_func>
 800ef74:	2300      	movs	r3, #0
 800ef76:	461a      	mov	r2, r3
 800ef78:	4619      	mov	r1, r3
 800ef7a:	4618      	mov	r0, r3
 800ef7c:	f7fd fb2a 	bl	800c5d4 <__assert_func>
    assert(dev->adc);
 800ef80:	2300      	movs	r3, #0
 800ef82:	461a      	mov	r2, r3
 800ef84:	4619      	mov	r1, r3
 800ef86:	4618      	mov	r0, r3
 800ef88:	f7fd fb24 	bl	800c5d4 <__assert_func>
        if (dev->adc) { os_dev_close((struct os_dev *) dev->adc); }
 800ef8c:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
 800ef90:	b108      	cbz	r0, 800ef96 <temp_stm32_open+0x96>
 800ef92:	f7fd fe13 	bl	800cbbc <os_dev_close>
    assert(rc == 0);
 800ef96:	2300      	movs	r3, #0
 800ef98:	461a      	mov	r2, r3
 800ef9a:	4619      	mov	r1, r3
 800ef9c:	4618      	mov	r0, r3
 800ef9e:	f7fd fb19 	bl	800c5d4 <__assert_func>
 800efa2:	bf00      	nop
 800efa4:	080183a8 	.word	0x080183a8

0800efa8 <temp_stm32_default_cfg>:
int temp_stm32_default_cfg(struct temp_stm32_cfg *cfg) {
 800efa8:	b430      	push	{r4, r5}
 800efaa:	4603      	mov	r3, r0
    memset(cfg, 0, sizeof(struct temp_stm32_cfg));  //  Zero the entire object.
 800efac:	2000      	movs	r0, #0
 800efae:	60d8      	str	r0, [r3, #12]
    cfg->bc_s_mask       = SENSOR_TYPE_ALL;         //  Return all sensor values, i.e. temperature.
 800efb0:	f04f 34ff 	mov.w	r4, #4294967295
 800efb4:	2500      	movs	r5, #0
 800efb6:	e9c3 4500 	strd	r4, r5, [r3]
    cfg->adc_dev_name    = STM32L4_ADC1_DEVICE;     //  For STM32L4: adc1
 800efba:	4a04      	ldr	r2, [pc, #16]	; (800efcc <temp_stm32_default_cfg+0x24>)
 800efbc:	609a      	str	r2, [r3, #8]
    cfg->adc_channel     = MYNEWT_ADC_CHANNEL_TEMPSENSOR;
 800efbe:	2211      	movs	r2, #17
 800efc0:	731a      	strb	r2, [r3, #12]
    cfg->adc_open_arg    = NULL;
 800efc2:	6118      	str	r0, [r3, #16]
    cfg->adc_channel_cfg = &temp_channel_config;    //  Configure the temperature channel.
 800efc4:	4a02      	ldr	r2, [pc, #8]	; (800efd0 <temp_stm32_default_cfg+0x28>)
 800efc6:	615a      	str	r2, [r3, #20]
}
 800efc8:	bc30      	pop	{r4, r5}
 800efca:	4770      	bx	lr
 800efcc:	08018384 	.word	0x08018384
 800efd0:	20000274 	.word	0x20000274

0800efd4 <temp_stm32_init>:
int temp_stm32_init(struct os_dev *dev0, void *arg) {
 800efd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!arg || !dev0) { rc = SYS_ENODEV; goto err; }
 800efd6:	b391      	cbz	r1, 800f03e <temp_stm32_init+0x6a>
 800efd8:	460d      	mov	r5, r1
 800efda:	b398      	cbz	r0, 800f044 <temp_stm32_init+0x70>
 800efdc:	4604      	mov	r4, r0
    dev->adc = NULL;
 800efde:	2300      	movs	r3, #0
 800efe0:	f8c0 30cc 	str.w	r3, [r0, #204]	; 0xcc
    rc = temp_stm32_default_cfg(&dev->cfg);
 800efe4:	30b0      	adds	r0, #176	; 0xb0
 800efe6:	f7ff ffdf 	bl	800efa8 <temp_stm32_default_cfg>
    if (rc) { goto err; }
 800efea:	4603      	mov	r3, r0
 800efec:	b108      	cbz	r0, 800eff2 <temp_stm32_init+0x1e>
}
 800efee:	4618      	mov	r0, r3
 800eff0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    sensor = &dev->sensor;
 800eff2:	f104 0628 	add.w	r6, r4, #40	; 0x28
    rc = sensor_init(sensor, dev0);
 800eff6:	4621      	mov	r1, r4
 800eff8:	4630      	mov	r0, r6
 800effa:	f7fd f942 	bl	800c282 <sensor_init>
    if (rc != 0) { goto err; }
 800effe:	4603      	mov	r3, r0
 800f000:	2800      	cmp	r0, #0
 800f002:	d1f4      	bne.n	800efee <temp_stm32_init+0x1a>
    sensor->s_funcs = driver;
 800f004:	4b11      	ldr	r3, [pc, #68]	; (800f04c <temp_stm32_init+0x78>)
 800f006:	6523      	str	r3, [r4, #80]	; 0x50
    sensor->s_types = type;
 800f008:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800f00c:	2300      	movs	r3, #0
 800f00e:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
    memcpy(&sensor->s_itf, s_itf, sizeof(*s_itf));
 800f012:	682a      	ldr	r2, [r5, #0]
 800f014:	686f      	ldr	r7, [r5, #4]
 800f016:	68a8      	ldr	r0, [r5, #8]
 800f018:	68e9      	ldr	r1, [r5, #12]
 800f01a:	6722      	str	r2, [r4, #112]	; 0x70
 800f01c:	6767      	str	r7, [r4, #116]	; 0x74
 800f01e:	67a0      	str	r0, [r4, #120]	; 0x78
 800f020:	67e1      	str	r1, [r4, #124]	; 0x7c
 800f022:	692a      	ldr	r2, [r5, #16]
 800f024:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
    rc = sensor_mgr_register(sensor);
 800f028:	4630      	mov	r0, r6
 800f02a:	f7fd f913 	bl	800c254 <sensor_mgr_register>
    if (rc != 0) { goto err; }
 800f02e:	4603      	mov	r3, r0
 800f030:	2800      	cmp	r0, #0
 800f032:	d1dc      	bne.n	800efee <temp_stm32_init+0x1a>
    OS_DEV_SETHANDLERS(dev0, temp_stm32_open, temp_stm32_close);
 800f034:	4a06      	ldr	r2, [pc, #24]	; (800f050 <temp_stm32_init+0x7c>)
 800f036:	6022      	str	r2, [r4, #0]
 800f038:	4a06      	ldr	r2, [pc, #24]	; (800f054 <temp_stm32_init+0x80>)
 800f03a:	60e2      	str	r2, [r4, #12]
    return (0);
 800f03c:	e7d7      	b.n	800efee <temp_stm32_init+0x1a>
    if (!arg || !dev0) { rc = SYS_ENODEV; goto err; }
 800f03e:	f06f 0308 	mvn.w	r3, #8
 800f042:	e7d4      	b.n	800efee <temp_stm32_init+0x1a>
 800f044:	f06f 0308 	mvn.w	r3, #8
 800f048:	e7d1      	b.n	800efee <temp_stm32_init+0x1a>
 800f04a:	bf00      	nop
 800f04c:	0801835c 	.word	0x0801835c
 800f050:	0800ef01 	.word	0x0800ef01
 800f054:	0800eee3 	.word	0x0800eee3

0800f058 <temp_stm32_get_raw_temperature>:
int temp_stm32_get_raw_temperature(struct temp_stm32 *dev, int num_readings, int *temp_sum, uint8_t *temp_diff) {
 800f058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f05c:	b082      	sub	sp, #8
 800f05e:	4680      	mov	r8, r0
 800f060:	4689      	mov	r9, r1
 800f062:	4617      	mov	r7, r2
 800f064:	469a      	mov	sl, r3
    console_printf("STM read int temp sensor\n");  ////
 800f066:	482b      	ldr	r0, [pc, #172]	; (800f114 <temp_stm32_get_raw_temperature+0xbc>)
 800f068:	f7fb fac0 	bl	800a5ec <console_printf>
    assert(dev->adc);  assert(temp_sum);
 800f06c:	f8d8 30cc 	ldr.w	r3, [r8, #204]	; 0xcc
 800f070:	b12b      	cbz	r3, 800f07e <temp_stm32_get_raw_temperature+0x26>
 800f072:	b14f      	cbz	r7, 800f088 <temp_stm32_get_raw_temperature+0x30>
    *temp_sum = 0;
 800f074:	2500      	movs	r5, #0
 800f076:	603d      	str	r5, [r7, #0]
    uint8_t lastdiff = 0;  //  Delta between current raw temperature and previous raw temperature
 800f078:	462e      	mov	r6, r5
    int lasttemp = 0;      //  Previous raw temperature
 800f07a:	462c      	mov	r4, r5
    for (i = 0; i < num_readings; i++) {  //  For each sample to be read...
 800f07c:	e01c      	b.n	800f0b8 <temp_stm32_get_raw_temperature+0x60>
    assert(dev->adc);  assert(temp_sum);
 800f07e:	461a      	mov	r2, r3
 800f080:	4619      	mov	r1, r3
 800f082:	4618      	mov	r0, r3
 800f084:	f7fd faa6 	bl	800c5d4 <__assert_func>
 800f088:	2300      	movs	r3, #0
 800f08a:	461a      	mov	r2, r3
 800f08c:	4619      	mov	r1, r3
 800f08e:	4618      	mov	r0, r3
 800f090:	f7fd faa0 	bl	800c5d4 <__assert_func>
        assert(rc == 0);
 800f094:	2300      	movs	r3, #0
 800f096:	461a      	mov	r2, r3
 800f098:	4619      	mov	r1, r3
 800f09a:	4618      	mov	r0, r3
 800f09c:	f7fd fa9a 	bl	800c5d4 <__assert_func>
        assert(rawtemp > 0);  //  If equals 0, it means we haven't sampled any values.  Check the above note.
 800f0a0:	2300      	movs	r3, #0
 800f0a2:	461a      	mov	r2, r3
 800f0a4:	4619      	mov	r1, r3
 800f0a6:	4618      	mov	r0, r3
 800f0a8:	f7fd fa94 	bl	800c5d4 <__assert_func>
        *temp_sum += rawtemp;  //  Accumulate the raw temperature.
 800f0ac:	6839      	ldr	r1, [r7, #0]
 800f0ae:	9c01      	ldr	r4, [sp, #4]
 800f0b0:	4421      	add	r1, r4
 800f0b2:	6039      	str	r1, [r7, #0]
    for (i = 0; i < num_readings; i++) {  //  For each sample to be read...
 800f0b4:	3501      	adds	r5, #1
        lastdiff = diff;
 800f0b6:	4616      	mov	r6, r2
    for (i = 0; i < num_readings; i++) {  //  For each sample to be read...
 800f0b8:	454d      	cmp	r5, r9
 800f0ba:	da26      	bge.n	800f10a <temp_stm32_get_raw_temperature+0xb2>
        rawtemp = -1;
 800f0bc:	aa02      	add	r2, sp, #8
 800f0be:	f04f 33ff 	mov.w	r3, #4294967295
 800f0c2:	f842 3d04 	str.w	r3, [r2, #-4]!
        rc = adc_read_channel(dev->adc, 0, &rawtemp);  //  Channel number is not used
 800f0c6:	f8d8 00cc 	ldr.w	r0, [r8, #204]	; 0xcc
 * @return 0 on success, non-zero error code on failure
 */
static inline int
adc_read_channel(struct adc_dev *dev, uint8_t ch, int *result)
{
    return (dev->ad_funcs->af_read_channel(dev, ch, result));
 800f0ca:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800f0cc:	689b      	ldr	r3, [r3, #8]
 800f0ce:	2100      	movs	r1, #0
 800f0d0:	4798      	blx	r3
        assert(rc == 0);
 800f0d2:	2800      	cmp	r0, #0
 800f0d4:	d1de      	bne.n	800f094 <temp_stm32_get_raw_temperature+0x3c>
        assert(rawtemp > 0);  //  If equals 0, it means we haven't sampled any values.  Check the above note.
 800f0d6:	9a01      	ldr	r2, [sp, #4]
 800f0d8:	2a00      	cmp	r2, #0
 800f0da:	dde1      	ble.n	800f0a0 <temp_stm32_get_raw_temperature+0x48>
        uint8_t diff = (rawtemp - lasttemp) & 0xf;  //  Delta between this and last reading, keeping lower 4 bits.
 800f0dc:	b2d2      	uxtb	r2, r2
 800f0de:	b2e4      	uxtb	r4, r4
 800f0e0:	1b12      	subs	r2, r2, r4
 800f0e2:	f002 020f 	and.w	r2, r2, #15
        if (i % 2 == 1) {
 800f0e6:	2d00      	cmp	r5, #0
 800f0e8:	f005 0301 	and.w	r3, r5, #1
 800f0ec:	bfb8      	it	lt
 800f0ee:	425b      	neglt	r3, r3
 800f0f0:	2b01      	cmp	r3, #1
 800f0f2:	d1db      	bne.n	800f0ac <temp_stm32_get_raw_temperature+0x54>
            uint8_t i2 = i >> 1;  //  i2 is (i / 2)
 800f0f4:	106b      	asrs	r3, r5, #1
            uint8_t b = diff + (lastdiff << 4);    //  Combine current delta (4 bits) and previous delta (4 bits) to make 8 bits.
 800f0f6:	eb02 1606 	add.w	r6, r2, r6, lsl #4
 800f0fa:	b2f6      	uxtb	r6, r6
            if (temp_diff) { temp_diff[i2] = b; }  //  Save the combined delta into temp_diff as entropy.
 800f0fc:	f1ba 0f00 	cmp.w	sl, #0
 800f100:	d0d4      	beq.n	800f0ac <temp_stm32_get_raw_temperature+0x54>
 800f102:	b2db      	uxtb	r3, r3
 800f104:	f80a 6003 	strb.w	r6, [sl, r3]
 800f108:	e7d0      	b.n	800f0ac <temp_stm32_get_raw_temperature+0x54>
}
 800f10a:	2000      	movs	r0, #0
 800f10c:	b002      	add	sp, #8
 800f10e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f112:	bf00      	nop
 800f114:	0801838c 	.word	0x0801838c

0800f118 <temp_stm32_sensor_read>:
    sensor_data_func_t data_func, void *data_arg, uint32_t timeout) {
 800f118:	b570      	push	{r4, r5, r6, lr}
 800f11a:	b086      	sub	sp, #24
    if (!(type & TEMP_SENSOR_TYPE)) { rc = SYS_EINVAL; goto err; }
 800f11c:	f002 6480 	and.w	r4, r2, #67108864	; 0x4000000
 800f120:	2500      	movs	r5, #0
 800f122:	ea54 0305 	orrs.w	r3, r4, r5
 800f126:	d035      	beq.n	800f194 <temp_stm32_sensor_read+0x7c>
 800f128:	4604      	mov	r4, r0
    dev = (struct temp_stm32 *) SENSOR_GET_DEVICE(sensor); assert(dev);
 800f12a:	6805      	ldr	r5, [r0, #0]
 800f12c:	b165      	cbz	r5, 800f148 <temp_stm32_sensor_read+0x30>
    rawtemp = -1;
 800f12e:	f04f 33ff 	mov.w	r3, #4294967295
 800f132:	9303      	str	r3, [sp, #12]
        rc = temp_stm32_open((struct os_dev *) dev, 0, NULL);
 800f134:	2200      	movs	r2, #0
 800f136:	4611      	mov	r1, r2
 800f138:	4628      	mov	r0, r5
 800f13a:	f7ff fee1 	bl	800ef00 <temp_stm32_open>
        if (rc) { goto err; }
 800f13e:	4606      	mov	r6, r0
 800f140:	b140      	cbz	r0, 800f154 <temp_stm32_sensor_read+0x3c>
}
 800f142:	4630      	mov	r0, r6
 800f144:	b006      	add	sp, #24
 800f146:	bd70      	pop	{r4, r5, r6, pc}
    dev = (struct temp_stm32 *) SENSOR_GET_DEVICE(sensor); assert(dev);
 800f148:	2300      	movs	r3, #0
 800f14a:	461a      	mov	r2, r3
 800f14c:	4619      	mov	r1, r3
 800f14e:	4618      	mov	r0, r3
 800f150:	f7fd fa40 	bl	800c5d4 <__assert_func>
        rc = temp_stm32_get_raw_temperature(dev, 1, &rawtemp, NULL);
 800f154:	2300      	movs	r3, #0
 800f156:	aa03      	add	r2, sp, #12
 800f158:	2101      	movs	r1, #1
 800f15a:	4628      	mov	r0, r5
 800f15c:	f7ff ff7c 	bl	800f058 <temp_stm32_get_raw_temperature>
 800f160:	4606      	mov	r6, r0
        temp_stm32_close((struct os_dev *) dev);
 800f162:	4628      	mov	r0, r5
 800f164:	f7ff febd 	bl	800eee2 <temp_stm32_close>
    if (rc) { goto err; }  //  console_printf("rawtemp: %d\n", rawtemp);  ////
 800f168:	2e00      	cmp	r6, #0
 800f16a:	d1ea      	bne.n	800f142 <temp_stm32_sensor_read+0x2a>
    temp_data->strd_temp_raw = rawtemp;  //  rawtemp must be between 0 and 4,095 (based on 12-bit ADC)
 800f16c:	9b03      	ldr	r3, [sp, #12]
 800f16e:	9304      	str	r3, [sp, #16]
    temp_data->strd_temp_raw_is_valid = 1;
 800f170:	2301      	movs	r3, #1
 800f172:	f88d 3014 	strb.w	r3, [sp, #20]
    if (data_func) {  //  Call the Listener Function to process the sensor data.
 800f176:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d0e2      	beq.n	800f142 <temp_stm32_sensor_read+0x2a>
        rc = data_func(sensor, data_arg, temp_data, TEMP_SENSOR_TYPE);
 800f17c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800f180:	2300      	movs	r3, #0
 800f182:	e9cd 2300 	strd	r2, r3, [sp]
 800f186:	aa04      	add	r2, sp, #16
 800f188:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f18a:	4620      	mov	r0, r4
 800f18c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f18e:	4798      	blx	r3
 800f190:	4606      	mov	r6, r0
 800f192:	e7d6      	b.n	800f142 <temp_stm32_sensor_read+0x2a>
    if (!(type & TEMP_SENSOR_TYPE)) { rc = SYS_EINVAL; goto err; }
 800f194:	f06f 0601 	mvn.w	r6, #1
 800f198:	e7d3      	b.n	800f142 <temp_stm32_sensor_read+0x2a>

0800f19a <temp_stm32_config>:
 * @param Sensor device temp_stm32 structure
 * @param Sensor device temp_stm32_cfg config
 *
 * @return 0 on success, and non-zero error code on failure
 */
int temp_stm32_config(struct temp_stm32 *dev, struct temp_stm32_cfg *cfg) {
 800f19a:	b508      	push	{r3, lr}
    struct sensor_itf *itf;
    int rc;
    itf = SENSOR_GET_ITF(&(dev->sensor)); assert(itf);
 800f19c:	f110 0f70 	cmn.w	r0, #112	; 0x70
 800f1a0:	d009      	beq.n	800f1b6 <temp_stm32_config+0x1c>
    rc = sensor_set_type_mask(&(dev->sensor),  cfg->bc_s_mask);
 800f1a2:	e9d1 2300 	ldrd	r2, r3, [r1]
    sensor->s_mask = mask;
 800f1a6:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
    if (rc) { goto err; }

    dev->cfg.bc_s_mask = cfg->bc_s_mask;
 800f1aa:	e9d1 2300 	ldrd	r2, r3, [r1]
 800f1ae:	e9c0 232c 	strd	r2, r3, [r0, #176]	; 0xb0
    return 0;
err:
    return (rc);
}
 800f1b2:	2000      	movs	r0, #0
 800f1b4:	bd08      	pop	{r3, pc}
    itf = SENSOR_GET_ITF(&(dev->sensor)); assert(itf);
 800f1b6:	2300      	movs	r3, #0
 800f1b8:	461a      	mov	r2, r3
 800f1ba:	4619      	mov	r1, r3
 800f1bc:	4618      	mov	r0, r3
 800f1be:	f7fd fa09 	bl	800c5d4 <__assert_func>

0800f1c2 <_ZN11TinyGPSPlusC1Ev>:
   TinyGPSLocation() : valid(false), updated(false)
 800f1c2:	2200      	movs	r2, #0
 800f1c4:	7002      	strb	r2, [r0, #0]
 800f1c6:	7042      	strb	r2, [r0, #1]
   RawDegrees() : deg(0), billionths(0), negative(false)
 800f1c8:	8082      	strh	r2, [r0, #4]
 800f1ca:	6082      	str	r2, [r0, #8]
 800f1cc:	7302      	strb	r2, [r0, #12]
 800f1ce:	8202      	strh	r2, [r0, #16]
 800f1d0:	6142      	str	r2, [r0, #20]
 800f1d2:	7602      	strb	r2, [r0, #24]
 800f1d4:	8382      	strh	r2, [r0, #28]
 800f1d6:	6202      	str	r2, [r0, #32]
 800f1d8:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 800f1dc:	8502      	strh	r2, [r0, #40]	; 0x28
 800f1de:	62c2      	str	r2, [r0, #44]	; 0x2c
 800f1e0:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
   TinyGPSDate() : valid(false), updated(false), date(0)
 800f1e4:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
 800f1e8:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
 800f1ec:	63c2      	str	r2, [r0, #60]	; 0x3c
   TinyGPSTime() : valid(false), updated(false), time(0)
 800f1ee:	f880 2048 	strb.w	r2, [r0, #72]	; 0x48
 800f1f2:	f880 2049 	strb.w	r2, [r0, #73]	; 0x49
 800f1f6:	64c2      	str	r2, [r0, #76]	; 0x4c
   TinyGPSDecimal() : valid(false), updated(false), val(0)
 800f1f8:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
 800f1fc:	f880 2059 	strb.w	r2, [r0, #89]	; 0x59
 800f200:	6602      	str	r2, [r0, #96]	; 0x60
 800f202:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
 800f206:	f880 2069 	strb.w	r2, [r0, #105]	; 0x69
 800f20a:	6702      	str	r2, [r0, #112]	; 0x70
 800f20c:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
 800f210:	f880 2079 	strb.w	r2, [r0, #121]	; 0x79
 800f214:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
   TinyGPSInteger() : valid(false), updated(false), val(0)
 800f218:	f880 2088 	strb.w	r2, [r0, #136]	; 0x88
 800f21c:	f880 2089 	strb.w	r2, [r0, #137]	; 0x89
 800f220:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
   TinyGPSDecimal() : valid(false), updated(false), val(0)
 800f224:	f880 2098 	strb.w	r2, [r0, #152]	; 0x98
 800f228:	f880 2099 	strb.w	r2, [r0, #153]	; 0x99
 800f22c:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
  ,  customElts(0)
  ,  customCandidates(0)
  ,  encodedCharCount(0)
  ,  sentencesWithFixCount(0)
  ,  failedChecksumCount(0)
  ,  passedChecksumCount(0)
 800f230:	f880 20a8 	strb.w	r2, [r0, #168]	; 0xa8
 800f234:	f880 20a9 	strb.w	r2, [r0, #169]	; 0xa9
 800f238:	2102      	movs	r1, #2
 800f23a:	f880 10b9 	strb.w	r1, [r0, #185]	; 0xb9
 800f23e:	f880 20ba 	strb.w	r2, [r0, #186]	; 0xba
 800f242:	f880 20bb 	strb.w	r2, [r0, #187]	; 0xbb
 800f246:	f880 20bc 	strb.w	r2, [r0, #188]	; 0xbc
 800f24a:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
 800f24e:	f8c0 20c4 	str.w	r2, [r0, #196]	; 0xc4
 800f252:	f8c0 20c8 	str.w	r2, [r0, #200]	; 0xc8
 800f256:	f8c0 20cc 	str.w	r2, [r0, #204]	; 0xcc
 800f25a:	f8c0 20d0 	str.w	r2, [r0, #208]	; 0xd0
 800f25e:	f8c0 20d4 	str.w	r2, [r0, #212]	; 0xd4
{
  term[0] = '\0';
 800f262:	f880 20aa 	strb.w	r2, [r0, #170]	; 0xaa
}
 800f266:	4770      	bx	lr

0800f268 <_ZN11TinyGPSPlus7fromHexEc>:
//
// internal utilities
//
int TinyGPSPlus::fromHex(char a)
{
  if (a >= 'A' && a <= 'F')
 800f268:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
 800f26c:	b2db      	uxtb	r3, r3
 800f26e:	2b05      	cmp	r3, #5
 800f270:	d907      	bls.n	800f282 <_ZN11TinyGPSPlus7fromHexEc+0x1a>
    return a - 'A' + 10;
  else if (a >= 'a' && a <= 'f')
 800f272:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
 800f276:	b2db      	uxtb	r3, r3
 800f278:	2b05      	cmp	r3, #5
 800f27a:	d905      	bls.n	800f288 <_ZN11TinyGPSPlus7fromHexEc+0x20>
    return a - 'a' + 10;
  else
    return a - '0';
 800f27c:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
}
 800f280:	4770      	bx	lr
    return a - 'A' + 10;
 800f282:	f1a1 0037 	sub.w	r0, r1, #55	; 0x37
 800f286:	4770      	bx	lr
    return a - 'a' + 10;
 800f288:	f1a1 0057 	sub.w	r0, r1, #87	; 0x57
 800f28c:	4770      	bx	lr

0800f28e <_ZN11TinyGPSPlus12parseDecimalEPKc>:

// static
// Parse a (potentially negative) number with up to 2 decimal digits -xxxx.yy
int32_t TinyGPSPlus::parseDecimal(const char *term)
{
 800f28e:	b538      	push	{r3, r4, r5, lr}
 800f290:	4604      	mov	r4, r0
  bool negative = *term == '-';
 800f292:	7805      	ldrb	r5, [r0, #0]
  if (negative) ++term;
 800f294:	2d2d      	cmp	r5, #45	; 0x2d
 800f296:	d00c      	beq.n	800f2b2 <_ZN11TinyGPSPlus12parseDecimalEPKc+0x24>
  int32_t ret = 100 * (int32_t)atol(term);
 800f298:	4620      	mov	r0, r4
 800f29a:	f002 fcb4 	bl	8011c06 <atol>
 800f29e:	2364      	movs	r3, #100	; 0x64
 800f2a0:	fb03 f000 	mul.w	r0, r3, r0
  while (isdigit(*term)) ++term;
 800f2a4:	7823      	ldrb	r3, [r4, #0]
 800f2a6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800f2aa:	2a09      	cmp	r2, #9
 800f2ac:	d803      	bhi.n	800f2b6 <_ZN11TinyGPSPlus12parseDecimalEPKc+0x28>
 800f2ae:	3401      	adds	r4, #1
 800f2b0:	e7f8      	b.n	800f2a4 <_ZN11TinyGPSPlus12parseDecimalEPKc+0x16>
  if (negative) ++term;
 800f2b2:	3401      	adds	r4, #1
 800f2b4:	e7f0      	b.n	800f298 <_ZN11TinyGPSPlus12parseDecimalEPKc+0xa>
  if (*term == '.' && isdigit(term[1]))
 800f2b6:	2b2e      	cmp	r3, #46	; 0x2e
 800f2b8:	d002      	beq.n	800f2c0 <_ZN11TinyGPSPlus12parseDecimalEPKc+0x32>
  {
    ret += 10 * (term[1] - '0');
    if (isdigit(term[2]))
      ret += term[2] - '0';
  }
  return negative ? -ret : ret;
 800f2ba:	2d2d      	cmp	r5, #45	; 0x2d
 800f2bc:	d010      	beq.n	800f2e0 <_ZN11TinyGPSPlus12parseDecimalEPKc+0x52>
}
 800f2be:	bd38      	pop	{r3, r4, r5, pc}
  if (*term == '.' && isdigit(term[1]))
 800f2c0:	7863      	ldrb	r3, [r4, #1]
 800f2c2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800f2c6:	2a09      	cmp	r2, #9
 800f2c8:	d8f7      	bhi.n	800f2ba <_ZN11TinyGPSPlus12parseDecimalEPKc+0x2c>
    ret += 10 * (term[1] - '0');
 800f2ca:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 800f2ce:	005a      	lsls	r2, r3, #1
 800f2d0:	4410      	add	r0, r2
    if (isdigit(term[2]))
 800f2d2:	78a3      	ldrb	r3, [r4, #2]
 800f2d4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800f2d8:	2a09      	cmp	r2, #9
 800f2da:	d8ee      	bhi.n	800f2ba <_ZN11TinyGPSPlus12parseDecimalEPKc+0x2c>
      ret += term[2] - '0';
 800f2dc:	4410      	add	r0, r2
 800f2de:	e7ec      	b.n	800f2ba <_ZN11TinyGPSPlus12parseDecimalEPKc+0x2c>
  return negative ? -ret : ret;
 800f2e0:	4240      	negs	r0, r0
 800f2e2:	e7ec      	b.n	800f2be <_ZN11TinyGPSPlus12parseDecimalEPKc+0x30>

0800f2e4 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees>:

// static
// Parse degrees in that funny NMEA format DDMM.MMMM
void TinyGPSPlus::parseDegrees(const char *term, RawDegrees &deg)
{
 800f2e4:	b538      	push	{r3, r4, r5, lr}
 800f2e6:	4604      	mov	r4, r0
 800f2e8:	460d      	mov	r5, r1
  uint32_t leftOfDecimal = (uint32_t)atol(term);
 800f2ea:	f002 fc8c 	bl	8011c06 <atol>
  uint16_t minutes = (uint16_t)(leftOfDecimal % 100);
 800f2ee:	4a18      	ldr	r2, [pc, #96]	; (800f350 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x6c>)
 800f2f0:	fba2 3200 	umull	r3, r2, r2, r0
 800f2f4:	0953      	lsrs	r3, r2, #5
 800f2f6:	2164      	movs	r1, #100	; 0x64
 800f2f8:	fb01 0313 	mls	r3, r1, r3, r0
  uint32_t multiplier = 10000000UL;
  uint32_t tenMillionthsOfMinutes = minutes * multiplier;
 800f2fc:	b299      	uxth	r1, r3
 800f2fe:	4b15      	ldr	r3, [pc, #84]	; (800f354 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x70>)
 800f300:	fb03 f301 	mul.w	r3, r3, r1

  deg.deg = (int16_t)(leftOfDecimal / 100);
 800f304:	f3c2 124f 	ubfx	r2, r2, #5, #16
 800f308:	802a      	strh	r2, [r5, #0]

  while (isdigit(*term))
 800f30a:	7822      	ldrb	r2, [r4, #0]
 800f30c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800f310:	2909      	cmp	r1, #9
 800f312:	d801      	bhi.n	800f318 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x34>
    ++term;
 800f314:	3401      	adds	r4, #1
  while (isdigit(*term))
 800f316:	e7f8      	b.n	800f30a <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x26>

  if (*term == '.')
 800f318:	2a2e      	cmp	r2, #46	; 0x2e
 800f31a:	d00a      	beq.n	800f332 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x4e>
    {
      multiplier /= 10;
      tenMillionthsOfMinutes += (*term - '0') * multiplier;
    }

  deg.billionths = (5 * tenMillionthsOfMinutes + 1) / 3;
 800f31c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800f320:	3301      	adds	r3, #1
 800f322:	4a0d      	ldr	r2, [pc, #52]	; (800f358 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x74>)
 800f324:	fba2 2303 	umull	r2, r3, r2, r3
 800f328:	085b      	lsrs	r3, r3, #1
 800f32a:	606b      	str	r3, [r5, #4]
  deg.negative = false;
 800f32c:	2300      	movs	r3, #0
 800f32e:	722b      	strb	r3, [r5, #8]
}
 800f330:	bd38      	pop	{r3, r4, r5, pc}
  uint32_t multiplier = 10000000UL;
 800f332:	4908      	ldr	r1, [pc, #32]	; (800f354 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x70>)
    while (isdigit(*++term))
 800f334:	f814 2f01 	ldrb.w	r2, [r4, #1]!
 800f338:	f1a2 0030 	sub.w	r0, r2, #48	; 0x30
 800f33c:	2809      	cmp	r0, #9
 800f33e:	d8ed      	bhi.n	800f31c <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x38>
      multiplier /= 10;
 800f340:	4806      	ldr	r0, [pc, #24]	; (800f35c <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x78>)
 800f342:	fba0 0101 	umull	r0, r1, r0, r1
 800f346:	08c9      	lsrs	r1, r1, #3
      tenMillionthsOfMinutes += (*term - '0') * multiplier;
 800f348:	3a30      	subs	r2, #48	; 0x30
 800f34a:	fb01 3302 	mla	r3, r1, r2, r3
    while (isdigit(*++term))
 800f34e:	e7f1      	b.n	800f334 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x50>
 800f350:	51eb851f 	.word	0x51eb851f
 800f354:	00989680 	.word	0x00989680
 800f358:	aaaaaaab 	.word	0xaaaaaaab
 800f35c:	cccccccd 	.word	0xcccccccd

0800f360 <_ZN15TinyGPSLocation6commitEv>:
  int direction = (int)((course + 11.25f) / 22.5f);
  return directions[direction % 16];
}

void TinyGPSLocation::commit()
{
 800f360:	b510      	push	{r4, lr}
 800f362:	4604      	mov	r4, r0
   rawLatData = rawNewLatData;
 800f364:	4603      	mov	r3, r0
 800f366:	f853 0f1c 	ldr.w	r0, [r3, #28]!
 800f36a:	6859      	ldr	r1, [r3, #4]
 800f36c:	6060      	str	r0, [r4, #4]
 800f36e:	60a1      	str	r1, [r4, #8]
 800f370:	7a1b      	ldrb	r3, [r3, #8]
 800f372:	7323      	strb	r3, [r4, #12]
   rawLngData = rawNewLngData;
 800f374:	4623      	mov	r3, r4
 800f376:	f853 0f28 	ldr.w	r0, [r3, #40]!
 800f37a:	6859      	ldr	r1, [r3, #4]
 800f37c:	6120      	str	r0, [r4, #16]
 800f37e:	6161      	str	r1, [r4, #20]
 800f380:	7a1b      	ldrb	r3, [r3, #8]
 800f382:	7623      	strb	r3, [r4, #24]
   lastCommitTime = millis();
 800f384:	f7fe fc22 	bl	800dbcc <os_time_get>
 800f388:	6360      	str	r0, [r4, #52]	; 0x34
   valid = updated = true;
 800f38a:	2301      	movs	r3, #1
 800f38c:	7063      	strb	r3, [r4, #1]
 800f38e:	7023      	strb	r3, [r4, #0]
}
 800f390:	bd10      	pop	{r4, pc}

0800f392 <_ZN15TinyGPSLocation11setLatitudeEPKc>:

void TinyGPSLocation::setLatitude(const char *term)
{
 800f392:	b508      	push	{r3, lr}
 800f394:	460b      	mov	r3, r1
   TinyGPSPlus::parseDegrees(term, rawNewLatData);
 800f396:	f100 011c 	add.w	r1, r0, #28
 800f39a:	4618      	mov	r0, r3
 800f39c:	f7ff ffa2 	bl	800f2e4 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees>
}
 800f3a0:	bd08      	pop	{r3, pc}

0800f3a2 <_ZN15TinyGPSLocation12setLongitudeEPKc>:

void TinyGPSLocation::setLongitude(const char *term)
{
 800f3a2:	b508      	push	{r3, lr}
 800f3a4:	460b      	mov	r3, r1
   TinyGPSPlus::parseDegrees(term, rawNewLngData);
 800f3a6:	f100 0128 	add.w	r1, r0, #40	; 0x28
 800f3aa:	4618      	mov	r0, r3
 800f3ac:	f7ff ff9a 	bl	800f2e4 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees>
}
 800f3b0:	bd08      	pop	{r3, pc}
 800f3b2:	0000      	movs	r0, r0
 800f3b4:	0000      	movs	r0, r0
	...

0800f3b8 <_ZN15TinyGPSLocation3latEv>:

double TinyGPSLocation::lat()
{
 800f3b8:	b5d0      	push	{r4, r6, r7, lr}
 800f3ba:	4604      	mov	r4, r0
   updated = false;
 800f3bc:	2300      	movs	r3, #0
 800f3be:	7043      	strb	r3, [r0, #1]
   double ret = rawLatData.deg + rawLatData.billionths / 1000000000.0;
 800f3c0:	8880      	ldrh	r0, [r0, #4]
 800f3c2:	f006 f827 	bl	8015414 <__aeabi_i2d>
 800f3c6:	4606      	mov	r6, r0
 800f3c8:	460f      	mov	r7, r1
 800f3ca:	68a0      	ldr	r0, [r4, #8]
 800f3cc:	f006 f812 	bl	80153f4 <__aeabi_ui2d>
 800f3d0:	a309      	add	r3, pc, #36	; (adr r3, 800f3f8 <_ZN15TinyGPSLocation3latEv+0x40>)
 800f3d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3d6:	f006 f9b1 	bl	801573c <__aeabi_ddiv>
 800f3da:	4602      	mov	r2, r0
 800f3dc:	460b      	mov	r3, r1
 800f3de:	4630      	mov	r0, r6
 800f3e0:	4639      	mov	r1, r7
 800f3e2:	f005 fecb 	bl	801517c <__adddf3>
   return rawLatData.negative ? -ret : ret;
 800f3e6:	7b23      	ldrb	r3, [r4, #12]
 800f3e8:	b113      	cbz	r3, 800f3f0 <_ZN15TinyGPSLocation3latEv+0x38>
 800f3ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f3ee:	4619      	mov	r1, r3
}
 800f3f0:	ec41 0b10 	vmov	d0, r0, r1
 800f3f4:	bdd0      	pop	{r4, r6, r7, pc}
 800f3f6:	bf00      	nop
 800f3f8:	00000000 	.word	0x00000000
 800f3fc:	41cdcd65 	.word	0x41cdcd65

0800f400 <_ZN15TinyGPSLocation3lngEv>:

double TinyGPSLocation::lng()
{
 800f400:	b5d0      	push	{r4, r6, r7, lr}
 800f402:	4604      	mov	r4, r0
   updated = false;
 800f404:	2300      	movs	r3, #0
 800f406:	7043      	strb	r3, [r0, #1]
   double ret = rawLngData.deg + rawLngData.billionths / 1000000000.0;
 800f408:	8a00      	ldrh	r0, [r0, #16]
 800f40a:	f006 f803 	bl	8015414 <__aeabi_i2d>
 800f40e:	4606      	mov	r6, r0
 800f410:	460f      	mov	r7, r1
 800f412:	6960      	ldr	r0, [r4, #20]
 800f414:	f005 ffee 	bl	80153f4 <__aeabi_ui2d>
 800f418:	a309      	add	r3, pc, #36	; (adr r3, 800f440 <_ZN15TinyGPSLocation3lngEv+0x40>)
 800f41a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f41e:	f006 f98d 	bl	801573c <__aeabi_ddiv>
 800f422:	4602      	mov	r2, r0
 800f424:	460b      	mov	r3, r1
 800f426:	4630      	mov	r0, r6
 800f428:	4639      	mov	r1, r7
 800f42a:	f005 fea7 	bl	801517c <__adddf3>
   return rawLngData.negative ? -ret : ret;
 800f42e:	7e23      	ldrb	r3, [r4, #24]
 800f430:	b113      	cbz	r3, 800f438 <_ZN15TinyGPSLocation3lngEv+0x38>
 800f432:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f436:	4619      	mov	r1, r3
}
 800f438:	ec41 0b10 	vmov	d0, r0, r1
 800f43c:	bdd0      	pop	{r4, r6, r7, pc}
 800f43e:	bf00      	nop
 800f440:	00000000 	.word	0x00000000
 800f444:	41cdcd65 	.word	0x41cdcd65

0800f448 <_ZN11TinyGPSDate6commitEv>:

void TinyGPSDate::commit()
{
 800f448:	b510      	push	{r4, lr}
 800f44a:	4604      	mov	r4, r0
   date = newDate;
 800f44c:	6883      	ldr	r3, [r0, #8]
 800f44e:	6043      	str	r3, [r0, #4]
   lastCommitTime = millis();
 800f450:	f7fe fbbc 	bl	800dbcc <os_time_get>
 800f454:	60e0      	str	r0, [r4, #12]
   valid = updated = true;
 800f456:	2301      	movs	r3, #1
 800f458:	7063      	strb	r3, [r4, #1]
 800f45a:	7023      	strb	r3, [r4, #0]
}
 800f45c:	bd10      	pop	{r4, pc}

0800f45e <_ZN11TinyGPSTime6commitEv>:

void TinyGPSTime::commit()
{
 800f45e:	b510      	push	{r4, lr}
 800f460:	4604      	mov	r4, r0
   time = newTime;
 800f462:	6883      	ldr	r3, [r0, #8]
 800f464:	6043      	str	r3, [r0, #4]
   lastCommitTime = millis();
 800f466:	f7fe fbb1 	bl	800dbcc <os_time_get>
 800f46a:	60e0      	str	r0, [r4, #12]
   valid = updated = true;
 800f46c:	2301      	movs	r3, #1
 800f46e:	7063      	strb	r3, [r4, #1]
 800f470:	7023      	strb	r3, [r4, #0]
}
 800f472:	bd10      	pop	{r4, pc}

0800f474 <_ZN11TinyGPSTime7setTimeEPKc>:

void TinyGPSTime::setTime(const char *term)
{
 800f474:	b510      	push	{r4, lr}
 800f476:	4604      	mov	r4, r0
   newTime = (uint32_t)TinyGPSPlus::parseDecimal(term);
 800f478:	4608      	mov	r0, r1
 800f47a:	f7ff ff08 	bl	800f28e <_ZN11TinyGPSPlus12parseDecimalEPKc>
 800f47e:	60a0      	str	r0, [r4, #8]
}
 800f480:	bd10      	pop	{r4, pc}

0800f482 <_ZN11TinyGPSDate7setDateEPKc>:

void TinyGPSDate::setDate(const char *term)
{
 800f482:	b510      	push	{r4, lr}
 800f484:	4604      	mov	r4, r0
   newDate = atol(term);
 800f486:	4608      	mov	r0, r1
 800f488:	f002 fbbd 	bl	8011c06 <atol>
 800f48c:	60a0      	str	r0, [r4, #8]
}
 800f48e:	bd10      	pop	{r4, pc}

0800f490 <_ZN14TinyGPSDecimal6commitEv>:
   updated = false;
   return time % 100;
}

void TinyGPSDecimal::commit()
{
 800f490:	b510      	push	{r4, lr}
 800f492:	4604      	mov	r4, r0
   val = newval;
 800f494:	68c3      	ldr	r3, [r0, #12]
 800f496:	6083      	str	r3, [r0, #8]
   lastCommitTime = millis();
 800f498:	f7fe fb98 	bl	800dbcc <os_time_get>
 800f49c:	6060      	str	r0, [r4, #4]
   valid = updated = true;
 800f49e:	2301      	movs	r3, #1
 800f4a0:	7063      	strb	r3, [r4, #1]
 800f4a2:	7023      	strb	r3, [r4, #0]
}
 800f4a4:	bd10      	pop	{r4, pc}

0800f4a6 <_ZN14TinyGPSDecimal3setEPKc>:

void TinyGPSDecimal::set(const char *term)
{
 800f4a6:	b510      	push	{r4, lr}
 800f4a8:	4604      	mov	r4, r0
   newval = TinyGPSPlus::parseDecimal(term);
 800f4aa:	4608      	mov	r0, r1
 800f4ac:	f7ff feef 	bl	800f28e <_ZN11TinyGPSPlus12parseDecimalEPKc>
 800f4b0:	60e0      	str	r0, [r4, #12]
}
 800f4b2:	bd10      	pop	{r4, pc}

0800f4b4 <_ZN14TinyGPSInteger6commitEv>:

void TinyGPSInteger::commit()
{
 800f4b4:	b510      	push	{r4, lr}
 800f4b6:	4604      	mov	r4, r0
   val = newval;
 800f4b8:	68c3      	ldr	r3, [r0, #12]
 800f4ba:	6083      	str	r3, [r0, #8]
   lastCommitTime = millis();
 800f4bc:	f7fe fb86 	bl	800dbcc <os_time_get>
 800f4c0:	6060      	str	r0, [r4, #4]
   valid = updated = true;
 800f4c2:	2301      	movs	r3, #1
 800f4c4:	7063      	strb	r3, [r4, #1]
 800f4c6:	7023      	strb	r3, [r4, #0]
}
 800f4c8:	bd10      	pop	{r4, pc}

0800f4ca <_ZN14TinyGPSInteger3setEPKc>:

void TinyGPSInteger::set(const char *term)
{
 800f4ca:	b510      	push	{r4, lr}
 800f4cc:	4604      	mov	r4, r0
   newval = atol(term);
 800f4ce:	4608      	mov	r0, r1
 800f4d0:	f002 fb99 	bl	8011c06 <atol>
 800f4d4:	60e0      	str	r0, [r4, #12]
}
 800f4d6:	bd10      	pop	{r4, pc}

0800f4d8 <_ZN13TinyGPSCustom6commitEv>:
   // Insert this item into the GPS tree
   gps.insertCustom(this, _sentenceName, _termNumber);
}

void TinyGPSCustom::commit()
{
 800f4d8:	b510      	push	{r4, lr}
 800f4da:	4604      	mov	r4, r0
   strcpy(this->buffer, this->stagingBuffer);
 800f4dc:	4601      	mov	r1, r0
 800f4de:	3010      	adds	r0, #16
 800f4e0:	f002 fba4 	bl	8011c2c <strcpy>
   lastCommitTime = millis();
 800f4e4:	f7fe fb72 	bl	800dbcc <os_time_get>
 800f4e8:	6220      	str	r0, [r4, #32]
   valid = updated = true;
 800f4ea:	2301      	movs	r3, #1
 800f4ec:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
 800f4f0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 800f4f4:	bd10      	pop	{r4, pc}

0800f4f6 <_ZN13TinyGPSCustom3setEPKc>:

void TinyGPSCustom::set(const char *term)
{
 800f4f6:	b508      	push	{r3, lr}
   strncpy(this->stagingBuffer, term, sizeof(this->stagingBuffer));
 800f4f8:	2210      	movs	r2, #16
 800f4fa:	f7fe fd7e 	bl	800dffa <strncpy>
}
 800f4fe:	bd08      	pop	{r3, pc}

0800f500 <_ZN11TinyGPSPlus16endOfTermHandlerEv>:
{
 800f500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f502:	4604      	mov	r4, r0
  if (isChecksumTerm)
 800f504:	f890 60a9 	ldrb.w	r6, [r0, #169]	; 0xa9
 800f508:	2e00      	cmp	r6, #0
 800f50a:	d06a      	beq.n	800f5e2 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xe2>
    byte checksum = 16 * fromHex(term[0]) + fromHex(term[1]);
 800f50c:	f890 10aa 	ldrb.w	r1, [r0, #170]	; 0xaa
 800f510:	f7ff feaa 	bl	800f268 <_ZN11TinyGPSPlus7fromHexEc>
 800f514:	0100      	lsls	r0, r0, #4
 800f516:	b2c5      	uxtb	r5, r0
 800f518:	f894 10ab 	ldrb.w	r1, [r4, #171]	; 0xab
 800f51c:	4620      	mov	r0, r4
 800f51e:	f7ff fea3 	bl	800f268 <_ZN11TinyGPSPlus7fromHexEc>
 800f522:	fa55 f080 	uxtab	r0, r5, r0
 800f526:	b2c0      	uxtb	r0, r0
    if (checksum == parity)
 800f528:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
 800f52c:	4283      	cmp	r3, r0
 800f52e:	d007      	beq.n	800f540 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x40>
      ++failedChecksumCount;
 800f530:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
 800f534:	3301      	adds	r3, #1
 800f536:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
    return false;
 800f53a:	2600      	movs	r6, #0
}
 800f53c:	4630      	mov	r0, r6
 800f53e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      passedChecksumCount++;
 800f540:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
 800f544:	3301      	adds	r3, #1
 800f546:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
      if (sentenceHasFix)
 800f54a:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
 800f54e:	b123      	cbz	r3, 800f55a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x5a>
        ++sentencesWithFixCount;
 800f550:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 800f554:	3301      	adds	r3, #1
 800f556:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
      switch(curSentenceType)
 800f55a:	f894 30b9 	ldrb.w	r3, [r4, #185]	; 0xb9
 800f55e:	b1c3      	cbz	r3, 800f592 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x92>
 800f560:	2b01      	cmp	r3, #1
 800f562:	d125      	bne.n	800f5b0 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xb0>
        date.commit();
 800f564:	f104 0038 	add.w	r0, r4, #56	; 0x38
 800f568:	f7ff ff6e 	bl	800f448 <_ZN11TinyGPSDate6commitEv>
        time.commit();
 800f56c:	f104 0048 	add.w	r0, r4, #72	; 0x48
 800f570:	f7ff ff75 	bl	800f45e <_ZN11TinyGPSTime6commitEv>
        if (sentenceHasFix)
 800f574:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
 800f578:	b1d3      	cbz	r3, 800f5b0 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xb0>
           location.commit();
 800f57a:	4620      	mov	r0, r4
 800f57c:	f7ff fef0 	bl	800f360 <_ZN15TinyGPSLocation6commitEv>
           speed.commit();
 800f580:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f584:	f7ff ff84 	bl	800f490 <_ZN14TinyGPSDecimal6commitEv>
           course.commit();
 800f588:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800f58c:	f7ff ff80 	bl	800f490 <_ZN14TinyGPSDecimal6commitEv>
 800f590:	e00e      	b.n	800f5b0 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xb0>
        time.commit();
 800f592:	f104 0048 	add.w	r0, r4, #72	; 0x48
 800f596:	f7ff ff62 	bl	800f45e <_ZN11TinyGPSTime6commitEv>
        if (sentenceHasFix)
 800f59a:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
 800f59e:	b9c3      	cbnz	r3, 800f5d2 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd2>
        satellites.commit();
 800f5a0:	f104 0088 	add.w	r0, r4, #136	; 0x88
 800f5a4:	f7ff ff86 	bl	800f4b4 <_ZN14TinyGPSInteger6commitEv>
        hdop.commit();
 800f5a8:	f104 0098 	add.w	r0, r4, #152	; 0x98
 800f5ac:	f7ff ff70 	bl	800f490 <_ZN14TinyGPSDecimal6commitEv>
      for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0; p = p->next)
 800f5b0:	f8d4 50c4 	ldr.w	r5, [r4, #196]	; 0xc4
 800f5b4:	2d00      	cmp	r5, #0
 800f5b6:	d0c1      	beq.n	800f53c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x3c>
 800f5b8:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 800f5bc:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800f5be:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 800f5c0:	f7fe fd05 	bl	800dfce <strcmp>
 800f5c4:	2800      	cmp	r0, #0
 800f5c6:	d1b9      	bne.n	800f53c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x3c>
         p->commit();
 800f5c8:	4628      	mov	r0, r5
 800f5ca:	f7ff ff85 	bl	800f4d8 <_ZN13TinyGPSCustom6commitEv>
      for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0; p = p->next)
 800f5ce:	6b2d      	ldr	r5, [r5, #48]	; 0x30
 800f5d0:	e7f0      	b.n	800f5b4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xb4>
          location.commit();
 800f5d2:	4620      	mov	r0, r4
 800f5d4:	f7ff fec4 	bl	800f360 <_ZN15TinyGPSLocation6commitEv>
          altitude.commit();
 800f5d8:	f104 0078 	add.w	r0, r4, #120	; 0x78
 800f5dc:	f7ff ff58 	bl	800f490 <_ZN14TinyGPSDecimal6commitEv>
 800f5e0:	e7de      	b.n	800f5a0 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xa0>
  if (curTermNumber == 0)
 800f5e2:	f890 30ba 	ldrb.w	r3, [r0, #186]	; 0xba
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d13f      	bne.n	800f66a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x16a>
    if (!strcmp(term, _GPRMCterm) || !strcmp(term, _GNRMCterm))
 800f5ea:	f100 07aa 	add.w	r7, r0, #170	; 0xaa
 800f5ee:	4966      	ldr	r1, [pc, #408]	; (800f788 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x288>)
 800f5f0:	4638      	mov	r0, r7
 800f5f2:	f7fe fcec 	bl	800dfce <strcmp>
 800f5f6:	b120      	cbz	r0, 800f602 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x102>
 800f5f8:	4964      	ldr	r1, [pc, #400]	; (800f78c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x28c>)
 800f5fa:	4638      	mov	r0, r7
 800f5fc:	f7fe fce7 	bl	800dfce <strcmp>
 800f600:	b998      	cbnz	r0, 800f62a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x12a>
      curSentenceType = GPS_SENTENCE_GPRMC;
 800f602:	2301      	movs	r3, #1
 800f604:	f884 30b9 	strb.w	r3, [r4, #185]	; 0xb9
    for (customCandidates = customElts; customCandidates != NULL && strcmp(customCandidates->sentenceName, term) < 0; customCandidates = customCandidates->next);
 800f608:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 800f60c:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
 800f610:	f8d4 50c4 	ldr.w	r5, [r4, #196]	; 0xc4
 800f614:	b1dd      	cbz	r5, 800f64e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x14e>
 800f616:	4639      	mov	r1, r7
 800f618:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 800f61a:	f7fe fcd8 	bl	800dfce <strcmp>
 800f61e:	2800      	cmp	r0, #0
 800f620:	da15      	bge.n	800f64e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x14e>
 800f622:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800f624:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
 800f628:	e7f2      	b.n	800f610 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x110>
    else if (!strcmp(term, _GPGGAterm) || !strcmp(term, _GNGGAterm))
 800f62a:	4959      	ldr	r1, [pc, #356]	; (800f790 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x290>)
 800f62c:	4638      	mov	r0, r7
 800f62e:	f7fe fcce 	bl	800dfce <strcmp>
 800f632:	b120      	cbz	r0, 800f63e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x13e>
 800f634:	4957      	ldr	r1, [pc, #348]	; (800f794 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x294>)
 800f636:	4638      	mov	r0, r7
 800f638:	f7fe fcc9 	bl	800dfce <strcmp>
 800f63c:	b918      	cbnz	r0, 800f646 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x146>
      curSentenceType = GPS_SENTENCE_GPGGA;
 800f63e:	2300      	movs	r3, #0
 800f640:	f884 30b9 	strb.w	r3, [r4, #185]	; 0xb9
 800f644:	e7e0      	b.n	800f608 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x108>
      curSentenceType = GPS_SENTENCE_OTHER;
 800f646:	2302      	movs	r3, #2
 800f648:	f884 30b9 	strb.w	r3, [r4, #185]	; 0xb9
 800f64c:	e7dc      	b.n	800f608 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x108>
    if (customCandidates != NULL && strcmp(customCandidates->sentenceName, term) > 0)
 800f64e:	2d00      	cmp	r5, #0
 800f650:	f43f af74 	beq.w	800f53c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x3c>
 800f654:	4639      	mov	r1, r7
 800f656:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 800f658:	f7fe fcb9 	bl	800dfce <strcmp>
 800f65c:	2800      	cmp	r0, #0
 800f65e:	f77f af6d 	ble.w	800f53c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x3c>
       customCandidates = NULL;
 800f662:	2300      	movs	r3, #0
 800f664:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
 800f668:	e768      	b.n	800f53c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x3c>
  if (curSentenceType != GPS_SENTENCE_OTHER && term[0])
 800f66a:	f890 20b9 	ldrb.w	r2, [r0, #185]	; 0xb9
 800f66e:	2a02      	cmp	r2, #2
 800f670:	d023      	beq.n	800f6ba <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1ba>
 800f672:	f890 10aa 	ldrb.w	r1, [r0, #170]	; 0xaa
 800f676:	b301      	cbz	r1, 800f6ba <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1ba>
    switch(COMBINE(curSentenceType, curTermNumber))
 800f678:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800f67c:	3b01      	subs	r3, #1
 800f67e:	2b28      	cmp	r3, #40	; 0x28
 800f680:	d81b      	bhi.n	800f6ba <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1ba>
 800f682:	e8df f003 	tbb	[pc, r3]
 800f686:	2415      	.short	0x2415
 800f688:	4e353029 	.word	0x4e353029
 800f68c:	1a615b55 	.word	0x1a615b55
 800f690:	1a1a1a1a 	.word	0x1a1a1a1a
 800f694:	1a1a1a1a 	.word	0x1a1a1a1a
 800f698:	1a1a1a1a 	.word	0x1a1a1a1a
 800f69c:	1a1a1a1a 	.word	0x1a1a1a1a
 800f6a0:	1a1a1a1a 	.word	0x1a1a1a1a
 800f6a4:	1d151a1a 	.word	0x1d151a1a
 800f6a8:	35302924 	.word	0x35302924
 800f6ac:	423c      	.short	0x423c
 800f6ae:	48          	.byte	0x48
 800f6af:	00          	.byte	0x00
      time.setTime(term);
 800f6b0:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
 800f6b4:	3048      	adds	r0, #72	; 0x48
 800f6b6:	f7ff fedd 	bl	800f474 <_ZN11TinyGPSTime7setTimeEPKc>
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
 800f6ba:	f8d4 50c4 	ldr.w	r5, [r4, #196]	; 0xc4
 800f6be:	e04a      	b.n	800f756 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x256>
      sentenceHasFix = term[0] == 'A';
 800f6c0:	2941      	cmp	r1, #65	; 0x41
 800f6c2:	bf14      	ite	ne
 800f6c4:	2100      	movne	r1, #0
 800f6c6:	2101      	moveq	r1, #1
 800f6c8:	f880 10bc 	strb.w	r1, [r0, #188]	; 0xbc
      break;
 800f6cc:	e7f5      	b.n	800f6ba <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1ba>
      location.setLatitude(term);
 800f6ce:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
 800f6d2:	f7ff fe5e 	bl	800f392 <_ZN15TinyGPSLocation11setLatitudeEPKc>
      break;
 800f6d6:	e7f0      	b.n	800f6ba <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1ba>
      location.rawNewLatData.negative = term[0] == 'S';
 800f6d8:	2953      	cmp	r1, #83	; 0x53
 800f6da:	bf14      	ite	ne
 800f6dc:	2100      	movne	r1, #0
 800f6de:	2101      	moveq	r1, #1
 800f6e0:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
      break;
 800f6e4:	e7e9      	b.n	800f6ba <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1ba>
      location.setLongitude(term);
 800f6e6:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
 800f6ea:	f7ff fe5a 	bl	800f3a2 <_ZN15TinyGPSLocation12setLongitudeEPKc>
      break;
 800f6ee:	e7e4      	b.n	800f6ba <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1ba>
      location.rawNewLngData.negative = term[0] == 'W';
 800f6f0:	2957      	cmp	r1, #87	; 0x57
 800f6f2:	bf14      	ite	ne
 800f6f4:	2100      	movne	r1, #0
 800f6f6:	2101      	moveq	r1, #1
 800f6f8:	f880 1030 	strb.w	r1, [r0, #48]	; 0x30
      break;
 800f6fc:	e7dd      	b.n	800f6ba <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1ba>
      speed.set(term);
 800f6fe:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
 800f702:	3058      	adds	r0, #88	; 0x58
 800f704:	f7ff fecf 	bl	800f4a6 <_ZN14TinyGPSDecimal3setEPKc>
      break;
 800f708:	e7d7      	b.n	800f6ba <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1ba>
      course.set(term);
 800f70a:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
 800f70e:	3068      	adds	r0, #104	; 0x68
 800f710:	f7ff fec9 	bl	800f4a6 <_ZN14TinyGPSDecimal3setEPKc>
      break;
 800f714:	e7d1      	b.n	800f6ba <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1ba>
      date.setDate(term);
 800f716:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
 800f71a:	3038      	adds	r0, #56	; 0x38
 800f71c:	f7ff feb1 	bl	800f482 <_ZN11TinyGPSDate7setDateEPKc>
      break;
 800f720:	e7cb      	b.n	800f6ba <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1ba>
      sentenceHasFix = term[0] > '0';
 800f722:	2930      	cmp	r1, #48	; 0x30
 800f724:	bf94      	ite	ls
 800f726:	2100      	movls	r1, #0
 800f728:	2101      	movhi	r1, #1
 800f72a:	f880 10bc 	strb.w	r1, [r0, #188]	; 0xbc
      break;
 800f72e:	e7c4      	b.n	800f6ba <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1ba>
      satellites.set(term);
 800f730:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
 800f734:	3088      	adds	r0, #136	; 0x88
 800f736:	f7ff fec8 	bl	800f4ca <_ZN14TinyGPSInteger3setEPKc>
      break;
 800f73a:	e7be      	b.n	800f6ba <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1ba>
      hdop.set(term);
 800f73c:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
 800f740:	3098      	adds	r0, #152	; 0x98
 800f742:	f7ff feb0 	bl	800f4a6 <_ZN14TinyGPSDecimal3setEPKc>
      break;
 800f746:	e7b8      	b.n	800f6ba <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1ba>
      altitude.set(term);
 800f748:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
 800f74c:	3078      	adds	r0, #120	; 0x78
 800f74e:	f7ff feaa 	bl	800f4a6 <_ZN14TinyGPSDecimal3setEPKc>
      break;
 800f752:	e7b2      	b.n	800f6ba <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1ba>
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
 800f754:	6b2d      	ldr	r5, [r5, #48]	; 0x30
 800f756:	2d00      	cmp	r5, #0
 800f758:	f43f aef0 	beq.w	800f53c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x3c>
 800f75c:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 800f760:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800f762:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 800f764:	f7fe fc33 	bl	800dfce <strcmp>
 800f768:	2800      	cmp	r0, #0
 800f76a:	f47f aee7 	bne.w	800f53c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x3c>
 800f76e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800f770:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
 800f774:	429a      	cmp	r2, r3
 800f776:	f73f aee1 	bgt.w	800f53c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x3c>
    if (p->termNumber == curTermNumber)
 800f77a:	d1eb      	bne.n	800f754 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x254>
         p->set(term);
 800f77c:	f104 01aa 	add.w	r1, r4, #170	; 0xaa
 800f780:	4628      	mov	r0, r5
 800f782:	f7ff feb8 	bl	800f4f6 <_ZN13TinyGPSCustom3setEPKc>
 800f786:	e7e5      	b.n	800f754 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x254>
 800f788:	080183b4 	.word	0x080183b4
 800f78c:	080183bc 	.word	0x080183bc
 800f790:	080183c4 	.word	0x080183c4
 800f794:	080183cc 	.word	0x080183cc

0800f798 <_ZN11TinyGPSPlus6encodeEc>:
{
 800f798:	b538      	push	{r3, r4, r5, lr}
 800f79a:	4604      	mov	r4, r0
  ++encodedCharCount;
 800f79c:	f8d0 20c8 	ldr.w	r2, [r0, #200]	; 0xc8
 800f7a0:	3201      	adds	r2, #1
 800f7a2:	f8c0 20c8 	str.w	r2, [r0, #200]	; 0xc8
  switch(c)
 800f7a6:	f1a1 020a 	sub.w	r2, r1, #10
 800f7aa:	2a22      	cmp	r2, #34	; 0x22
 800f7ac:	d844      	bhi.n	800f838 <_ZN11TinyGPSPlus6encodeEc+0xa0>
 800f7ae:	e8df f002 	tbb	[pc, r2]
 800f7b2:	4317      	.short	0x4317
 800f7b4:	43431743 	.word	0x43431743
 800f7b8:	43434343 	.word	0x43434343
 800f7bc:	43434343 	.word	0x43434343
 800f7c0:	43434343 	.word	0x43434343
 800f7c4:	43434343 	.word	0x43434343
 800f7c8:	43434343 	.word	0x43434343
 800f7cc:	43434334 	.word	0x43434334
 800f7d0:	43174343 	.word	0x43174343
 800f7d4:	12          	.byte	0x12
 800f7d5:	00          	.byte	0x00
    parity ^= (uint8_t)c;
 800f7d6:	f890 20a8 	ldrb.w	r2, [r0, #168]	; 0xa8
 800f7da:	404a      	eors	r2, r1
 800f7dc:	f880 20a8 	strb.w	r2, [r0, #168]	; 0xa8
 800f7e0:	460d      	mov	r5, r1
      if (curTermOffset < sizeof(term))
 800f7e2:	f894 30bb 	ldrb.w	r3, [r4, #187]	; 0xbb
 800f7e6:	2b0e      	cmp	r3, #14
 800f7e8:	d90f      	bls.n	800f80a <_ZN11TinyGPSPlus6encodeEc+0x72>
      bool isValidSentence = false;
 800f7ea:	2000      	movs	r0, #0
      ++curTermNumber;
 800f7ec:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
 800f7f0:	3301      	adds	r3, #1
 800f7f2:	f884 30ba 	strb.w	r3, [r4, #186]	; 0xba
      curTermOffset = 0;
 800f7f6:	2300      	movs	r3, #0
 800f7f8:	f884 30bb 	strb.w	r3, [r4, #187]	; 0xbb
      isChecksumTerm = c == '*';
 800f7fc:	2d2a      	cmp	r5, #42	; 0x2a
 800f7fe:	bf14      	ite	ne
 800f800:	2100      	movne	r1, #0
 800f802:	2101      	moveq	r1, #1
 800f804:	f884 10a9 	strb.w	r1, [r4, #169]	; 0xa9
}
 800f808:	bd38      	pop	{r3, r4, r5, pc}
        term[curTermOffset] = 0;
 800f80a:	4423      	add	r3, r4
 800f80c:	2200      	movs	r2, #0
 800f80e:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
        isValidSentence = endOfTermHandler();
 800f812:	4620      	mov	r0, r4
 800f814:	f7ff fe74 	bl	800f500 <_ZN11TinyGPSPlus16endOfTermHandlerEv>
 800f818:	e7e8      	b.n	800f7ec <_ZN11TinyGPSPlus6encodeEc+0x54>
    curTermNumber = curTermOffset = 0;
 800f81a:	2000      	movs	r0, #0
 800f81c:	f884 00bb 	strb.w	r0, [r4, #187]	; 0xbb
 800f820:	f884 00ba 	strb.w	r0, [r4, #186]	; 0xba
    parity = 0;
 800f824:	f884 00a8 	strb.w	r0, [r4, #168]	; 0xa8
    curSentenceType = GPS_SENTENCE_OTHER;
 800f828:	2202      	movs	r2, #2
 800f82a:	f884 20b9 	strb.w	r2, [r4, #185]	; 0xb9
    isChecksumTerm = false;
 800f82e:	f884 00a9 	strb.w	r0, [r4, #169]	; 0xa9
    sentenceHasFix = false;
 800f832:	f884 00bc 	strb.w	r0, [r4, #188]	; 0xbc
    return false;
 800f836:	e7e7      	b.n	800f808 <_ZN11TinyGPSPlus6encodeEc+0x70>
    if (curTermOffset < sizeof(term) - 1)
 800f838:	f890 20bb 	ldrb.w	r2, [r0, #187]	; 0xbb
 800f83c:	2a0d      	cmp	r2, #13
 800f83e:	d805      	bhi.n	800f84c <_ZN11TinyGPSPlus6encodeEc+0xb4>
      term[curTermOffset++] = c;
 800f840:	1c50      	adds	r0, r2, #1
 800f842:	f884 00bb 	strb.w	r0, [r4, #187]	; 0xbb
 800f846:	4422      	add	r2, r4
 800f848:	f882 10aa 	strb.w	r1, [r2, #170]	; 0xaa
    if (!isChecksumTerm)
 800f84c:	f894 00a9 	ldrb.w	r0, [r4, #169]	; 0xa9
 800f850:	b928      	cbnz	r0, 800f85e <_ZN11TinyGPSPlus6encodeEc+0xc6>
      parity ^= c;
 800f852:	f894 20a8 	ldrb.w	r2, [r4, #168]	; 0xa8
 800f856:	4051      	eors	r1, r2
 800f858:	f884 10a8 	strb.w	r1, [r4, #168]	; 0xa8
 800f85c:	e7d4      	b.n	800f808 <_ZN11TinyGPSPlus6encodeEc+0x70>
    return false;
 800f85e:	2000      	movs	r0, #0
 800f860:	e7d2      	b.n	800f808 <_ZN11TinyGPSPlus6encodeEc+0x70>

0800f862 <mem_init_mbuf_pool>:

int
mem_init_mbuf_pool(void *mem, struct os_mempool *mempool,
                   struct os_mbuf_pool *mbuf_pool, int num_blocks,
                   int block_size, char *name)
{
 800f862:	b570      	push	{r4, r5, r6, lr}
 800f864:	b082      	sub	sp, #8
 800f866:	460c      	mov	r4, r1
 800f868:	4616      	mov	r6, r2
    int rc;

    rc = os_mempool_init(mempool, num_blocks, block_size, mem, name);
 800f86a:	b29d      	uxth	r5, r3
 800f86c:	9b07      	ldr	r3, [sp, #28]
 800f86e:	9300      	str	r3, [sp, #0]
 800f870:	4603      	mov	r3, r0
 800f872:	9a06      	ldr	r2, [sp, #24]
 800f874:	4629      	mov	r1, r5
 800f876:	4620      	mov	r0, r4
 800f878:	f7fd fccc 	bl	800d214 <os_mempool_init>
    if (rc != 0) {
 800f87c:	b108      	cbz	r0, 800f882 <mem_init_mbuf_pool+0x20>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
 800f87e:	b002      	add	sp, #8
 800f880:	bd70      	pop	{r4, r5, r6, pc}
    rc = os_mbuf_pool_init(mbuf_pool, mempool, block_size, num_blocks);
 800f882:	462b      	mov	r3, r5
 800f884:	9a06      	ldr	r2, [sp, #24]
 800f886:	b292      	uxth	r2, r2
 800f888:	4621      	mov	r1, r4
 800f88a:	4630      	mov	r0, r6
 800f88c:	f7fd faa3 	bl	800cdd6 <os_mbuf_pool_init>
 800f890:	e7f5      	b.n	800f87e <mem_init_mbuf_pool+0x1c>

0800f892 <sysinit_app>:
void init_sensor_coap(void);
void gps_l70r_create(void);

void
sysinit_app(void)
{
 800f892:	b508      	push	{r3, lr}
    /*** Stage 0 */
    /* 0.0: os_pkg_init (kernel/os) */
    os_pkg_init();
 800f894:	f7fd f800 	bl	800c898 <os_pkg_init>

    /*** Stage 2 */
    /* 2.0: flash_map_init (sys/flash_map) */
    flash_map_init();
 800f898:	f004 f8be 	bl	8013a18 <flash_map_init>

    /*** Stage 20 */
    /* 20.0: console_pkg_init (libs/semihosting_console) */
    console_pkg_init();
 800f89c:	f7fa fe80 	bl	800a5a0 <console_pkg_init>

    /*** Stage 100 */
    /* 100.0: mfg_init (sys/mfg) */
    mfg_init();
 800f8a0:	f004 fa00 	bl	8013ca4 <mfg_init>
    /* 100.1: modlog_init (sys/log/modlog) */
    modlog_init();
 800f8a4:	f004 f8f0 	bl	8013a88 <modlog_init>

    /*** Stage 300 */
    /* 300.0: oc_init (net/oic) */
    oc_init();
 800f8a8:	f7fc f8ac 	bl	800ba04 <oc_init>

    /*** Stage 301 */
    /* 301.0: oc_register_gatt (net/oic) */
    oc_register_gatt();
 800f8ac:	f004 f83e 	bl	801392c <oc_register_gatt>
    /* 301.1: oc_register_ip4 (net/oic) */
    oc_register_ip4();
 800f8b0:	f004 f83d 	bl	801392e <oc_register_ip4>
    /* 301.2: oc_register_ip6 (net/oic) */
    oc_register_ip6();
 800f8b4:	f004 f83c 	bl	8013930 <oc_register_ip6>
    /* 301.3: oc_register_lora (net/oic) */
    oc_register_lora();
 800f8b8:	f004 f83b 	bl	8013932 <oc_register_lora>
    /* 301.4: oc_register_serial (net/oic) */
    oc_register_serial();
 800f8bc:	f004 f83a 	bl	8013934 <oc_register_serial>

    /*** Stage 500 */
    /* 500.0: sensor_dev_create (hw/sensor/creator) */
    sensor_dev_create();
 800f8c0:	f002 f9a0 	bl	8011c04 <sensor_dev_create>

    /*** Stage 501 */
    /* 501.0: sensor_pkg_init (hw/sensor) */
    sensor_pkg_init();
 800f8c4:	f7fc fc3a 	bl	800c13c <sensor_pkg_init>

    /*** Stage 610 */
    /* 610.0: stm32l4_adc_create (libs/adc_stm32l4) */
    stm32l4_adc_create();
 800f8c8:	f002 fa46 	bl	8011d58 <stm32l4_adc_create>

    /*** Stage 620 */
    /* 620.0: temp_stm32_create (libs/temp_stm32) */
    temp_stm32_create();
 800f8cc:	f004 f800 	bl	80138d0 <temp_stm32_create>

    /*** Stage 630 */
    /* 630.0: hmac_prng_init (libs/hmac_prng) */
    hmac_prng_init();
 800f8d0:	f7ff f998 	bl	800ec04 <hmac_prng_init>

    /*** Stage 640 */
    /* 640.0: sensor_network_init (libs/sensor_network) */
    sensor_network_init();
 800f8d4:	f7fb fb46 	bl	800af64 <sensor_network_init>

    /*** Stage 650 */
    /* 650.0: bc95g_create (libs/bc95g) */
    bc95g_create();
 800f8d8:	f002 fe7a 	bl	80125d0 <bc95g_create>

    /*** Stage 660 */
    /* 660.0: init_sensor_coap (libs/sensor_coap) */
    init_sensor_coap();
 800f8dc:	f7fa ff42 	bl	800a764 <init_sensor_coap>

    /*** Stage 700 */
    /* 700.0: gps_l70r_create (libs/gps_l70r) */
    gps_l70r_create();
 800f8e0:	f003 ff9e 	bl	8013820 <gps_l70r_create>
}
 800f8e4:	bd08      	pop	{r3, pc}

0800f8e6 <update>:

/*
 * Assumes: prng != NULL, e != NULL, len >= 0.
 */
static void update(TCHmacPrng_t prng, const uint8_t *e, unsigned int len)
{
 800f8e6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f8ea:	b083      	sub	sp, #12
 800f8ec:	4604      	mov	r4, r0
 800f8ee:	4688      	mov	r8, r1
 800f8f0:	4691      	mov	r9, r2
	const uint8_t separator0 = 0x00;
 800f8f2:	2300      	movs	r3, #0
 800f8f4:	f88d 3007 	strb.w	r3, [sp, #7]
	const uint8_t separator1 = 0x01;
 800f8f8:	2701      	movs	r7, #1
 800f8fa:	f88d 7006 	strb.w	r7, [sp, #6]

	/* use current state, e and separator 0 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
 800f8fe:	f000 f958 	bl	800fbb2 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
 800f902:	f504 7588 	add.w	r5, r4, #272	; 0x110
 800f906:	2220      	movs	r2, #32
 800f908:	4629      	mov	r1, r5
 800f90a:	4620      	mov	r0, r4
 800f90c:	f000 f960 	bl	800fbd0 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator0, sizeof(separator0));
 800f910:	463a      	mov	r2, r7
 800f912:	f10d 0107 	add.w	r1, sp, #7
 800f916:	4620      	mov	r0, r4
 800f918:	f000 f95a 	bl	800fbd0 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, e, len);
 800f91c:	464a      	mov	r2, r9
 800f91e:	4641      	mov	r1, r8
 800f920:	4620      	mov	r0, r4
 800f922:	f000 f955 	bl	800fbd0 <tc_hmac_update>
	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
 800f926:	f104 06f0 	add.w	r6, r4, #240	; 0xf0
 800f92a:	4622      	mov	r2, r4
 800f92c:	2120      	movs	r1, #32
 800f92e:	4630      	mov	r0, r6
 800f930:	f000 f956 	bl	800fbe0 <tc_hmac_final>
	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
 800f934:	2220      	movs	r2, #32
 800f936:	4631      	mov	r1, r6
 800f938:	4620      	mov	r0, r4
 800f93a:	f000 f8f5 	bl	800fb28 <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
 800f93e:	4620      	mov	r0, r4
 800f940:	f000 f937 	bl	800fbb2 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
 800f944:	2220      	movs	r2, #32
 800f946:	4629      	mov	r1, r5
 800f948:	4620      	mov	r0, r4
 800f94a:	f000 f941 	bl	800fbd0 <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
 800f94e:	4622      	mov	r2, r4
 800f950:	2120      	movs	r1, #32
 800f952:	4628      	mov	r0, r5
 800f954:	f000 f944 	bl	800fbe0 <tc_hmac_final>

	/* use current state, e and separator 1 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
 800f958:	4620      	mov	r0, r4
 800f95a:	f000 f92a 	bl	800fbb2 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
 800f95e:	2220      	movs	r2, #32
 800f960:	4629      	mov	r1, r5
 800f962:	4620      	mov	r0, r4
 800f964:	f000 f934 	bl	800fbd0 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator1, sizeof(separator1));
 800f968:	463a      	mov	r2, r7
 800f96a:	f10d 0106 	add.w	r1, sp, #6
 800f96e:	4620      	mov	r0, r4
 800f970:	f000 f92e 	bl	800fbd0 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, e, len);
 800f974:	464a      	mov	r2, r9
 800f976:	4641      	mov	r1, r8
 800f978:	4620      	mov	r0, r4
 800f97a:	f000 f929 	bl	800fbd0 <tc_hmac_update>
	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
 800f97e:	4622      	mov	r2, r4
 800f980:	2120      	movs	r1, #32
 800f982:	4630      	mov	r0, r6
 800f984:	f000 f92c 	bl	800fbe0 <tc_hmac_final>
	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
 800f988:	2220      	movs	r2, #32
 800f98a:	4631      	mov	r1, r6
 800f98c:	4620      	mov	r0, r4
 800f98e:	f000 f8cb 	bl	800fb28 <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
 800f992:	4620      	mov	r0, r4
 800f994:	f000 f90d 	bl	800fbb2 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
 800f998:	2220      	movs	r2, #32
 800f99a:	4629      	mov	r1, r5
 800f99c:	4620      	mov	r0, r4
 800f99e:	f000 f917 	bl	800fbd0 <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
 800f9a2:	4622      	mov	r2, r4
 800f9a4:	2120      	movs	r1, #32
 800f9a6:	4628      	mov	r0, r5
 800f9a8:	f000 f91a 	bl	800fbe0 <tc_hmac_final>
}
 800f9ac:	b003      	add	sp, #12
 800f9ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800f9b2 <tc_hmac_prng_init>:
		      const uint8_t *personalization,
		      unsigned int plen)
{

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
 800f9b2:	b300      	cbz	r0, 800f9f6 <tc_hmac_prng_init+0x44>
{
 800f9b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9b6:	4604      	mov	r4, r0
	    personalization == (uint8_t *) 0 ||
 800f9b8:	b1f9      	cbz	r1, 800f9fa <tc_hmac_prng_init+0x48>
 800f9ba:	4616      	mov	r6, r2
 800f9bc:	460d      	mov	r5, r1
	    plen > MAX_PLEN) {
		return TC_CRYPTO_FAIL;
	}

	/* put the generator into a known state: */
	_set(prng->key, 0x00, sizeof(prng->key));
 800f9be:	f100 07f0 	add.w	r7, r0, #240	; 0xf0
 800f9c2:	2220      	movs	r2, #32
 800f9c4:	2100      	movs	r1, #0
 800f9c6:	4638      	mov	r0, r7
 800f9c8:	f000 f88e 	bl	800fae8 <_set>
	_set(prng->v, 0x01, sizeof(prng->v));
 800f9cc:	2220      	movs	r2, #32
 800f9ce:	2101      	movs	r1, #1
 800f9d0:	f504 7088 	add.w	r0, r4, #272	; 0x110
 800f9d4:	f000 f888 	bl	800fae8 <_set>
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
 800f9d8:	2220      	movs	r2, #32
 800f9da:	4639      	mov	r1, r7
 800f9dc:	4620      	mov	r0, r4
 800f9de:	f000 f8a3 	bl	800fb28 <tc_hmac_set_key>
	/* update assumes SOME key has been configured into HMAC */

	update(prng, personalization, plen);
 800f9e2:	4632      	mov	r2, r6
 800f9e4:	4629      	mov	r1, r5
 800f9e6:	4620      	mov	r0, r4
 800f9e8:	f7ff ff7d 	bl	800f8e6 <update>

	/* force a reseed before allowing tc_hmac_prng_generate to succeed: */
	prng->countdown = 0;
 800f9ec:	2300      	movs	r3, #0
 800f9ee:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130

	return TC_CRYPTO_SUCCESS;
 800f9f2:	2001      	movs	r0, #1
}
 800f9f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
 800f9f6:	2000      	movs	r0, #0
}
 800f9f8:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
 800f9fa:	2000      	movs	r0, #0
 800f9fc:	e7fa      	b.n	800f9f4 <tc_hmac_prng_init+0x42>

0800f9fe <tc_hmac_prng_reseed>:
			const uint8_t *additional_input,
			unsigned int additionallen)
{

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
 800f9fe:	b1d0      	cbz	r0, 800fa36 <tc_hmac_prng_reseed+0x38>
{
 800fa00:	b538      	push	{r3, r4, r5, lr}
 800fa02:	4605      	mov	r5, r0
	if (prng == (TCHmacPrng_t) 0 ||
 800fa04:	b1c9      	cbz	r1, 800fa3a <tc_hmac_prng_reseed+0x3c>
	    seed == (const uint8_t *) 0 ||
	    seedlen < MIN_SLEN ||
 800fa06:	2a1f      	cmp	r2, #31
 800fa08:	d919      	bls.n	800fa3e <tc_hmac_prng_reseed+0x40>
 800fa0a:	461c      	mov	r4, r3
	    seedlen > MAX_SLEN) {
		return TC_CRYPTO_FAIL;
	}

	if (additional_input != (const uint8_t *) 0) {
 800fa0c:	b183      	cbz	r3, 800fa30 <tc_hmac_prng_reseed+0x32>
		/*
		 * Abort if additional_input is provided but has inappropriate
		 * length
		 */
		if (additionallen == 0 ||
 800fa0e:	9b04      	ldr	r3, [sp, #16]
 800fa10:	b90b      	cbnz	r3, 800fa16 <tc_hmac_prng_reseed+0x18>
		    additionallen > MAX_ALEN) {
			return TC_CRYPTO_FAIL;
 800fa12:	2000      	movs	r0, #0
 800fa14:	e014      	b.n	800fa40 <tc_hmac_prng_reseed+0x42>
		} else {
		/* call update for the seed and additional_input */
		update(prng, seed, seedlen);
 800fa16:	f7ff ff66 	bl	800f8e6 <update>
		update(prng, additional_input, additionallen);
 800fa1a:	9a04      	ldr	r2, [sp, #16]
 800fa1c:	4621      	mov	r1, r4
 800fa1e:	4628      	mov	r0, r5
 800fa20:	f7ff ff61 	bl	800f8e6 <update>
		/* call update only for the seed */
		update(prng, seed, seedlen);
	}

	/* ... and enable hmac_prng_generate */
	prng->countdown = MAX_GENS;
 800fa24:	f04f 33ff 	mov.w	r3, #4294967295
 800fa28:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130

	return TC_CRYPTO_SUCCESS;
 800fa2c:	2001      	movs	r0, #1
 800fa2e:	e007      	b.n	800fa40 <tc_hmac_prng_reseed+0x42>
		update(prng, seed, seedlen);
 800fa30:	f7ff ff59 	bl	800f8e6 <update>
 800fa34:	e7f6      	b.n	800fa24 <tc_hmac_prng_reseed+0x26>
		return TC_CRYPTO_FAIL;
 800fa36:	2000      	movs	r0, #0
}
 800fa38:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
 800fa3a:	2000      	movs	r0, #0
 800fa3c:	e000      	b.n	800fa40 <tc_hmac_prng_reseed+0x42>
 800fa3e:	2000      	movs	r0, #0
}
 800fa40:	bd38      	pop	{r3, r4, r5, pc}

0800fa42 <tc_hmac_prng_generate>:
int tc_hmac_prng_generate(uint8_t *out, unsigned int outlen, TCHmacPrng_t prng)
{
	unsigned int bufferlen;

	/* input sanity check: */
	if (out == (uint8_t *) 0 ||
 800fa42:	b3c8      	cbz	r0, 800fab8 <tc_hmac_prng_generate+0x76>
{
 800fa44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa48:	460c      	mov	r4, r1
 800fa4a:	4615      	mov	r5, r2
 800fa4c:	4607      	mov	r7, r0
	if (out == (uint8_t *) 0 ||
 800fa4e:	b3aa      	cbz	r2, 800fabc <tc_hmac_prng_generate+0x7a>
	    prng == (TCHmacPrng_t) 0 ||
 800fa50:	b3b1      	cbz	r1, 800fac0 <tc_hmac_prng_generate+0x7e>
	    outlen == 0 ||
 800fa52:	f5b1 2f00 	cmp.w	r1, #524288	; 0x80000
 800fa56:	d836      	bhi.n	800fac6 <tc_hmac_prng_generate+0x84>
	    outlen > MAX_OUT) {
		return TC_CRYPTO_FAIL;
	} else if (prng->countdown == 0) {
 800fa58:	f8d2 3130 	ldr.w	r3, [r2, #304]	; 0x130
 800fa5c:	b3ab      	cbz	r3, 800faca <tc_hmac_prng_generate+0x88>
		return TC_HMAC_PRNG_RESEED_REQ;
	}

	prng->countdown--;
 800fa5e:	3b01      	subs	r3, #1
 800fa60:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

	while (outlen != 0) {
 800fa64:	e01e      	b.n	800faa4 <tc_hmac_prng_generate+0x62>
		/* operate HMAC in OFB mode to create "random" outputs */
		(void)tc_hmac_init(&prng->h);
 800fa66:	4628      	mov	r0, r5
 800fa68:	f000 f8a3 	bl	800fbb2 <tc_hmac_init>
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
 800fa6c:	f505 7688 	add.w	r6, r5, #272	; 0x110
 800fa70:	2220      	movs	r2, #32
 800fa72:	4631      	mov	r1, r6
 800fa74:	4628      	mov	r0, r5
 800fa76:	f000 f8ab 	bl	800fbd0 <tc_hmac_update>
		(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
 800fa7a:	462a      	mov	r2, r5
 800fa7c:	2120      	movs	r1, #32
 800fa7e:	4630      	mov	r0, r6
 800fa80:	f000 f8ae 	bl	800fbe0 <tc_hmac_final>

		bufferlen = (TC_SHA256_DIGEST_SIZE > outlen) ?
 800fa84:	46a0      	mov	r8, r4
 800fa86:	2c20      	cmp	r4, #32
 800fa88:	bf28      	it	cs
 800fa8a:	f04f 0820 	movcs.w	r8, #32
			outlen : TC_SHA256_DIGEST_SIZE;
		(void)_copy(out, bufferlen, prng->v, bufferlen);
 800fa8e:	4643      	mov	r3, r8
 800fa90:	4632      	mov	r2, r6
 800fa92:	4641      	mov	r1, r8
 800fa94:	4638      	mov	r0, r7
 800fa96:	f000 f81b 	bl	800fad0 <_copy>

		out += bufferlen;
 800fa9a:	4447      	add	r7, r8
		outlen = (outlen > TC_SHA256_DIGEST_SIZE) ?
			(outlen - TC_SHA256_DIGEST_SIZE) : 0;
 800fa9c:	2c20      	cmp	r4, #32
 800fa9e:	bf38      	it	cc
 800faa0:	2420      	movcc	r4, #32
		outlen = (outlen > TC_SHA256_DIGEST_SIZE) ?
 800faa2:	3c20      	subs	r4, #32
	while (outlen != 0) {
 800faa4:	2c00      	cmp	r4, #0
 800faa6:	d1de      	bne.n	800fa66 <tc_hmac_prng_generate+0x24>
	}

	/* block future PRNG compromises from revealing past state */
	update(prng, prng->v, TC_SHA256_DIGEST_SIZE);
 800faa8:	2220      	movs	r2, #32
 800faaa:	f505 7188 	add.w	r1, r5, #272	; 0x110
 800faae:	4628      	mov	r0, r5
 800fab0:	f7ff ff19 	bl	800f8e6 <update>

	return TC_CRYPTO_SUCCESS;
 800fab4:	2001      	movs	r0, #1
 800fab6:	e004      	b.n	800fac2 <tc_hmac_prng_generate+0x80>
		return TC_CRYPTO_FAIL;
 800fab8:	2000      	movs	r0, #0
}
 800faba:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
 800fabc:	2000      	movs	r0, #0
 800fabe:	e000      	b.n	800fac2 <tc_hmac_prng_generate+0x80>
 800fac0:	2000      	movs	r0, #0
}
 800fac2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TC_CRYPTO_FAIL;
 800fac6:	2000      	movs	r0, #0
 800fac8:	e7fb      	b.n	800fac2 <tc_hmac_prng_generate+0x80>
		return TC_HMAC_PRNG_RESEED_REQ;
 800faca:	f04f 30ff 	mov.w	r0, #4294967295
 800face:	e7f8      	b.n	800fac2 <tc_hmac_prng_generate+0x80>

0800fad0 <_copy>:
#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
	if (from_len <= to_len) {
 800fad0:	428b      	cmp	r3, r1
 800fad2:	d901      	bls.n	800fad8 <_copy+0x8>
		(void)memcpy(to, from, from_len);
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
 800fad4:	2000      	movs	r0, #0
	}
}
 800fad6:	4770      	bx	lr
{
 800fad8:	b510      	push	{r4, lr}
 800fada:	461c      	mov	r4, r3
 800fadc:	4611      	mov	r1, r2
		(void)memcpy(to, from, from_len);
 800fade:	461a      	mov	r2, r3
 800fae0:	f7fe fa3c 	bl	800df5c <memcpy>
		return from_len;
 800fae4:	4620      	mov	r0, r4
}
 800fae6:	bd10      	pop	{r4, pc}

0800fae8 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
 800fae8:	b508      	push	{r3, lr}
	(void)memset(to, val, len);
 800faea:	f7fe fa44 	bl	800df76 <memset>
}
 800faee:	bd08      	pop	{r3, pc}

0800faf0 <rekey>:
#include <tinycrypt/hmac.h>
#include <tinycrypt/constants.h>
#include <tinycrypt/utils.h>

static void rekey(uint8_t *key, const uint8_t *new_key, unsigned int key_size)
{
 800faf0:	b430      	push	{r4, r5}
	const uint8_t inner_pad = (uint8_t) 0x36;
	const uint8_t outer_pad = (uint8_t) 0x5c;
	unsigned int i;

	for (i = 0; i < key_size; ++i) {
 800faf2:	2300      	movs	r3, #0
 800faf4:	e00a      	b.n	800fb0c <rekey+0x1c>
		key[i] = inner_pad ^ new_key[i];
 800faf6:	5ccc      	ldrb	r4, [r1, r3]
 800faf8:	f084 0436 	eor.w	r4, r4, #54	; 0x36
 800fafc:	54c4      	strb	r4, [r0, r3]
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
 800fafe:	5ccc      	ldrb	r4, [r1, r3]
 800fb00:	f103 0540 	add.w	r5, r3, #64	; 0x40
 800fb04:	f084 045c 	eor.w	r4, r4, #92	; 0x5c
 800fb08:	5544      	strb	r4, [r0, r5]
	for (i = 0; i < key_size; ++i) {
 800fb0a:	3301      	adds	r3, #1
 800fb0c:	4293      	cmp	r3, r2
 800fb0e:	d3f2      	bcc.n	800faf6 <rekey+0x6>
 800fb10:	e006      	b.n	800fb20 <rekey+0x30>
	}
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
 800fb12:	2236      	movs	r2, #54	; 0x36
 800fb14:	54c2      	strb	r2, [r0, r3]
 800fb16:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800fb1a:	215c      	movs	r1, #92	; 0x5c
 800fb1c:	5481      	strb	r1, [r0, r2]
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
 800fb1e:	3301      	adds	r3, #1
 800fb20:	2b3f      	cmp	r3, #63	; 0x3f
 800fb22:	d9f6      	bls.n	800fb12 <rekey+0x22>
	}
}
 800fb24:	bc30      	pop	{r4, r5}
 800fb26:	4770      	bx	lr

0800fb28 <tc_hmac_set_key>:
int tc_hmac_set_key(TCHmacState_t ctx, const uint8_t *key,
		    unsigned int key_size)
{

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0 ||
 800fb28:	b3d0      	cbz	r0, 800fba0 <tc_hmac_set_key+0x78>
{
 800fb2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb2e:	b0bc      	sub	sp, #240	; 0xf0
 800fb30:	af00      	add	r7, sp, #0
 800fb32:	4606      	mov	r6, r0
	if (ctx == (TCHmacState_t) 0 ||
 800fb34:	b3b1      	cbz	r1, 800fba4 <tc_hmac_set_key+0x7c>
	    key == (const uint8_t *) 0 ||
 800fb36:	b3ba      	cbz	r2, 800fba8 <tc_hmac_set_key+0x80>
 800fb38:	4614      	mov	r4, r2
 800fb3a:	460d      	mov	r5, r1
	    key_size == 0) {
		return TC_CRYPTO_FAIL;
	}

	const uint8_t dummy_key[key_size];
 800fb3c:	1dd3      	adds	r3, r2, #7
 800fb3e:	f023 0307 	bic.w	r3, r3, #7
 800fb42:	ebad 0d03 	sub.w	sp, sp, r3
 800fb46:	46e8      	mov	r8, sp
	struct tc_hmac_state_struct dummy_state;

	if (key_size <= TC_SHA256_BLOCK_SIZE) {
 800fb48:	2a40      	cmp	r2, #64	; 0x40
 800fb4a:	d914      	bls.n	800fb76 <tc_hmac_set_key+0x4e>
				      &dummy_state.hash_state);

		/* Actual code for when key_size <= TC_SHA256_BLOCK_SIZE: */
		rekey(ctx->key, key, key_size);
	} else {
		(void)tc_sha256_init(&ctx->hash_state);
 800fb4c:	f000 f94a 	bl	800fde4 <tc_sha256_init>
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
 800fb50:	4622      	mov	r2, r4
 800fb52:	4629      	mov	r1, r5
 800fb54:	4630      	mov	r0, r6
 800fb56:	f000 f973 	bl	800fe40 <tc_sha256_update>
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
 800fb5a:	f106 0490 	add.w	r4, r6, #144	; 0x90
 800fb5e:	4631      	mov	r1, r6
 800fb60:	4620      	mov	r0, r4
 800fb62:	f000 f998 	bl	800fe96 <tc_sha256_final>
				      &ctx->hash_state);
		rekey(ctx->key,
 800fb66:	2220      	movs	r2, #32
 800fb68:	4621      	mov	r1, r4
 800fb6a:	f106 0070 	add.w	r0, r6, #112	; 0x70
 800fb6e:	f7ff ffbf 	bl	800faf0 <rekey>
		      &ctx->key[TC_SHA256_DIGEST_SIZE],
		      TC_SHA256_DIGEST_SIZE);
	}

	return TC_CRYPTO_SUCCESS;
 800fb72:	2001      	movs	r0, #1
 800fb74:	e019      	b.n	800fbaa <tc_hmac_set_key+0x82>
		(void)tc_sha256_init(&dummy_state.hash_state);
 800fb76:	4638      	mov	r0, r7
 800fb78:	f000 f934 	bl	800fde4 <tc_sha256_init>
		(void)tc_sha256_update(&dummy_state.hash_state,
 800fb7c:	4622      	mov	r2, r4
 800fb7e:	4641      	mov	r1, r8
 800fb80:	4638      	mov	r0, r7
 800fb82:	f000 f95d 	bl	800fe40 <tc_sha256_update>
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
 800fb86:	4639      	mov	r1, r7
 800fb88:	f107 0090 	add.w	r0, r7, #144	; 0x90
 800fb8c:	f000 f983 	bl	800fe96 <tc_sha256_final>
		rekey(ctx->key, key, key_size);
 800fb90:	4622      	mov	r2, r4
 800fb92:	4629      	mov	r1, r5
 800fb94:	f106 0070 	add.w	r0, r6, #112	; 0x70
 800fb98:	f7ff ffaa 	bl	800faf0 <rekey>
	return TC_CRYPTO_SUCCESS;
 800fb9c:	2001      	movs	r0, #1
 800fb9e:	e004      	b.n	800fbaa <tc_hmac_set_key+0x82>
		return TC_CRYPTO_FAIL;
 800fba0:	2000      	movs	r0, #0
}
 800fba2:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
 800fba4:	2000      	movs	r0, #0
 800fba6:	e000      	b.n	800fbaa <tc_hmac_set_key+0x82>
 800fba8:	2000      	movs	r0, #0
}
 800fbaa:	37f0      	adds	r7, #240	; 0xf0
 800fbac:	46bd      	mov	sp, r7
 800fbae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800fbb2 <tc_hmac_init>:

int tc_hmac_init(TCHmacState_t ctx)
{

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
 800fbb2:	b158      	cbz	r0, 800fbcc <tc_hmac_init+0x1a>
{
 800fbb4:	b510      	push	{r4, lr}
 800fbb6:	4604      	mov	r4, r0
		return TC_CRYPTO_FAIL;
	}

  (void) tc_sha256_init(&ctx->hash_state);
 800fbb8:	f000 f914 	bl	800fde4 <tc_sha256_init>
  (void) tc_sha256_update(&ctx->hash_state, ctx->key, TC_SHA256_BLOCK_SIZE);
 800fbbc:	2240      	movs	r2, #64	; 0x40
 800fbbe:	f104 0170 	add.w	r1, r4, #112	; 0x70
 800fbc2:	4620      	mov	r0, r4
 800fbc4:	f000 f93c 	bl	800fe40 <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
 800fbc8:	2001      	movs	r0, #1
}
 800fbca:	bd10      	pop	{r4, pc}
		return TC_CRYPTO_FAIL;
 800fbcc:	2000      	movs	r0, #0
}
 800fbce:	4770      	bx	lr

0800fbd0 <tc_hmac_update>:
		   const void *data,
		   unsigned int data_length)
{

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
 800fbd0:	b120      	cbz	r0, 800fbdc <tc_hmac_update+0xc>
{
 800fbd2:	b508      	push	{r3, lr}
		return TC_CRYPTO_FAIL;
	}

	(void)tc_sha256_update(&ctx->hash_state, data, data_length);
 800fbd4:	f000 f934 	bl	800fe40 <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
 800fbd8:	2001      	movs	r0, #1
}
 800fbda:	bd08      	pop	{r3, pc}
		return TC_CRYPTO_FAIL;
 800fbdc:	2000      	movs	r0, #0
}
 800fbde:	4770      	bx	lr

0800fbe0 <tc_hmac_final>:

int tc_hmac_final(uint8_t *tag, unsigned int taglen, TCHmacState_t ctx)
{

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
 800fbe0:	b318      	cbz	r0, 800fc2a <tc_hmac_final+0x4a>
{
 800fbe2:	b538      	push	{r3, r4, r5, lr}
 800fbe4:	4605      	mov	r5, r0
	if (tag == (uint8_t *) 0 ||
 800fbe6:	2920      	cmp	r1, #32
 800fbe8:	d001      	beq.n	800fbee <tc_hmac_final+0xe>
	    taglen != TC_SHA256_DIGEST_SIZE ||
	    ctx == (TCHmacState_t) 0) {
		return TC_CRYPTO_FAIL;
 800fbea:	2000      	movs	r0, #0

	/* destroy the current state */
	_set(ctx, 0, sizeof(*ctx));

	return TC_CRYPTO_SUCCESS;
}
 800fbec:	bd38      	pop	{r3, r4, r5, pc}
	    taglen != TC_SHA256_DIGEST_SIZE ||
 800fbee:	b1f2      	cbz	r2, 800fc2e <tc_hmac_final+0x4e>
 800fbf0:	4614      	mov	r4, r2
	(void) tc_sha256_final(tag, &ctx->hash_state);
 800fbf2:	4611      	mov	r1, r2
 800fbf4:	f000 f94f 	bl	800fe96 <tc_sha256_final>
	(void)tc_sha256_init(&ctx->hash_state);
 800fbf8:	4620      	mov	r0, r4
 800fbfa:	f000 f8f3 	bl	800fde4 <tc_sha256_init>
	(void)tc_sha256_update(&ctx->hash_state,
 800fbfe:	2240      	movs	r2, #64	; 0x40
 800fc00:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
 800fc04:	4620      	mov	r0, r4
 800fc06:	f000 f91b 	bl	800fe40 <tc_sha256_update>
	(void)tc_sha256_update(&ctx->hash_state, tag, TC_SHA256_DIGEST_SIZE);
 800fc0a:	2220      	movs	r2, #32
 800fc0c:	4629      	mov	r1, r5
 800fc0e:	4620      	mov	r0, r4
 800fc10:	f000 f916 	bl	800fe40 <tc_sha256_update>
	(void)tc_sha256_final(tag, &ctx->hash_state);
 800fc14:	4621      	mov	r1, r4
 800fc16:	4628      	mov	r0, r5
 800fc18:	f000 f93d 	bl	800fe96 <tc_sha256_final>
	_set(ctx, 0, sizeof(*ctx));
 800fc1c:	22f0      	movs	r2, #240	; 0xf0
 800fc1e:	2100      	movs	r1, #0
 800fc20:	4620      	mov	r0, r4
 800fc22:	f7ff ff61 	bl	800fae8 <_set>
	return TC_CRYPTO_SUCCESS;
 800fc26:	2001      	movs	r0, #1
 800fc28:	e7e0      	b.n	800fbec <tc_hmac_final+0xc>
		return TC_CRYPTO_FAIL;
 800fc2a:	2000      	movs	r0, #0
}
 800fc2c:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
 800fc2e:	2000      	movs	r0, #0
 800fc30:	e7dc      	b.n	800fbec <tc_hmac_final+0xc>
	...

0800fc34 <compress>:
	n |= ((unsigned int)(*((*c)++)));
	return n;
}

static void compress(unsigned int *iv, const uint8_t *data)
{
 800fc34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc38:	b09b      	sub	sp, #108	; 0x6c
	unsigned int t1, t2;
	unsigned int work_space[16];
	unsigned int n;
	unsigned int i;

	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
 800fc3a:	6806      	ldr	r6, [r0, #0]
 800fc3c:	9603      	str	r6, [sp, #12]
 800fc3e:	6843      	ldr	r3, [r0, #4]
 800fc40:	9304      	str	r3, [sp, #16]
 800fc42:	6882      	ldr	r2, [r0, #8]
 800fc44:	9205      	str	r2, [sp, #20]
 800fc46:	68c7      	ldr	r7, [r0, #12]
 800fc48:	9706      	str	r7, [sp, #24]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
 800fc4a:	6905      	ldr	r5, [r0, #16]
 800fc4c:	9507      	str	r5, [sp, #28]
 800fc4e:	6944      	ldr	r4, [r0, #20]
 800fc50:	9401      	str	r4, [sp, #4]
 800fc52:	6984      	ldr	r4, [r0, #24]
 800fc54:	9402      	str	r4, [sp, #8]
 800fc56:	69c4      	ldr	r4, [r0, #28]
 800fc58:	9408      	str	r4, [sp, #32]
 800fc5a:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800fc5e:	f8dd 9004 	ldr.w	r9, [sp, #4]
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
 800fc62:	46ba      	mov	sl, r7
 800fc64:	4694      	mov	ip, r2
 800fc66:	469e      	mov	lr, r3

	for (i = 0; i < 16; ++i) {
 800fc68:	2700      	movs	r7, #0
 800fc6a:	e03a      	b.n	800fce2 <compress+0xae>
	n = (((unsigned int)(*((*c)++))) << 24);
 800fc6c:	780a      	ldrb	r2, [r1, #0]
	n |= ((unsigned int)(*((*c)++)) << 16);
 800fc6e:	784b      	ldrb	r3, [r1, #1]
 800fc70:	041b      	lsls	r3, r3, #16
 800fc72:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
	n |= ((unsigned int)(*((*c)++)) << 8);
 800fc76:	788a      	ldrb	r2, [r1, #2]
 800fc78:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	n |= ((unsigned int)(*((*c)++)));
 800fc7c:	78ca      	ldrb	r2, [r1, #3]
 800fc7e:	4313      	orrs	r3, r2
		n = BigEndian(&data);
		t1 = work_space[i] = n;
 800fc80:	aa1a      	add	r2, sp, #104	; 0x68
 800fc82:	eb02 0287 	add.w	r2, r2, r7, lsl #2
 800fc86:	f842 3c40 	str.w	r3, [r2, #-64]
	return (((a) >> n) | ((a) << (32 - n)));
 800fc8a:	ea4f 22f5 	mov.w	r2, r5, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
 800fc8e:	ea82 12b5 	eor.w	r2, r2, r5, ror #6
 800fc92:	ea82 6275 	eor.w	r2, r2, r5, ror #25
 800fc96:	4414      	add	r4, r2
 800fc98:	ea05 0209 	and.w	r2, r5, r9
 800fc9c:	ea28 0b05 	bic.w	fp, r8, r5
 800fca0:	ea82 020b 	eor.w	r2, r2, fp
 800fca4:	4414      	add	r4, r2
 800fca6:	4a4e      	ldr	r2, [pc, #312]	; (800fde0 <compress+0x1ac>)
 800fca8:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800fcac:	4414      	add	r4, r2
 800fcae:	4423      	add	r3, r4
	return (((a) >> n) | ((a) << (32 - n)));
 800fcb0:	ea4f 3276 	mov.w	r2, r6, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
 800fcb4:	ea82 02b6 	eor.w	r2, r2, r6, ror #2
 800fcb8:	ea82 52b6 	eor.w	r2, r2, r6, ror #22
 800fcbc:	ea8e 040c 	eor.w	r4, lr, ip
 800fcc0:	4034      	ands	r4, r6
 800fcc2:	ea0e 0b0c 	and.w	fp, lr, ip
 800fcc6:	ea84 040b 	eor.w	r4, r4, fp
 800fcca:	4422      	add	r2, r4
	for (i = 0; i < 16; ++i) {
 800fccc:	3701      	adds	r7, #1
	n |= ((unsigned int)(*((*c)++)));
 800fcce:	3104      	adds	r1, #4
		h = g; g = f; f = e; e = d + t1;
 800fcd0:	4644      	mov	r4, r8
 800fcd2:	46c8      	mov	r8, r9
 800fcd4:	46a9      	mov	r9, r5
 800fcd6:	eb0a 0503 	add.w	r5, sl, r3
		d = c; c = b; b = a; a = t1 + t2;
 800fcda:	46e2      	mov	sl, ip
 800fcdc:	46f4      	mov	ip, lr
 800fcde:	46b6      	mov	lr, r6
 800fce0:	189e      	adds	r6, r3, r2
	for (i = 0; i < 16; ++i) {
 800fce2:	2f0f      	cmp	r7, #15
 800fce4:	d9c2      	bls.n	800fc6c <compress+0x38>
 800fce6:	9009      	str	r0, [sp, #36]	; 0x24
 800fce8:	e05b      	b.n	800fda2 <compress+0x16e>
	}

	for ( ; i < 64; ++i) {
		s0 = work_space[(i+1)&0x0f];
 800fcea:	1c79      	adds	r1, r7, #1
 800fcec:	f001 030f 	and.w	r3, r1, #15
 800fcf0:	aa1a      	add	r2, sp, #104	; 0x68
 800fcf2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fcf6:	f853 3c40 	ldr.w	r3, [r3, #-64]
	return (((a) >> n) | ((a) << (32 - n)));
 800fcfa:	ea4f 42b3 	mov.w	r2, r3, ror #18
		s0 = sigma0(s0);
 800fcfe:	ea82 12f3 	eor.w	r2, r2, r3, ror #7
 800fd02:	ea82 02d3 	eor.w	r2, r2, r3, lsr #3
		s1 = work_space[(i+14)&0x0f];
 800fd06:	f107 030e 	add.w	r3, r7, #14
 800fd0a:	f003 030f 	and.w	r3, r3, #15
 800fd0e:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
 800fd12:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 800fd16:	f853 bc40 	ldr.w	fp, [r3, #-64]
	return (((a) >> n) | ((a) << (32 - n)));
 800fd1a:	ea4f 43fb 	mov.w	r3, fp, ror #19
		s1 = sigma1(s1);
 800fd1e:	ea83 437b 	eor.w	r3, r3, fp, ror #17
 800fd22:	ea83 239b 	eor.w	r3, r3, fp, lsr #10

		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
 800fd26:	f007 0b0f 	and.w	fp, r7, #15
 800fd2a:	441a      	add	r2, r3
 800fd2c:	f107 0309 	add.w	r3, r7, #9
 800fd30:	f003 030f 	and.w	r3, r3, #15
 800fd34:	a81a      	add	r0, sp, #104	; 0x68
 800fd36:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800fd3a:	f853 3c40 	ldr.w	r3, [r3, #-64]
 800fd3e:	441a      	add	r2, r3
 800fd40:	eb00 0b8b 	add.w	fp, r0, fp, lsl #2
 800fd44:	f85b 3c40 	ldr.w	r3, [fp, #-64]
 800fd48:	441a      	add	r2, r3
 800fd4a:	f84b 2c40 	str.w	r2, [fp, #-64]
	return (((a) >> n) | ((a) << (32 - n)));
 800fd4e:	ea4f 23f5 	mov.w	r3, r5, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
 800fd52:	ea83 13b5 	eor.w	r3, r3, r5, ror #6
 800fd56:	ea83 6375 	eor.w	r3, r3, r5, ror #25
 800fd5a:	4423      	add	r3, r4
 800fd5c:	ea05 0409 	and.w	r4, r5, r9
 800fd60:	ea28 0b05 	bic.w	fp, r8, r5
 800fd64:	ea84 040b 	eor.w	r4, r4, fp
 800fd68:	4423      	add	r3, r4
 800fd6a:	4c1d      	ldr	r4, [pc, #116]	; (800fde0 <compress+0x1ac>)
 800fd6c:	f854 4027 	ldr.w	r4, [r4, r7, lsl #2]
 800fd70:	4423      	add	r3, r4
 800fd72:	4413      	add	r3, r2
	return (((a) >> n) | ((a) << (32 - n)));
 800fd74:	ea4f 3276 	mov.w	r2, r6, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
 800fd78:	ea82 02b6 	eor.w	r2, r2, r6, ror #2
 800fd7c:	ea82 54b6 	eor.w	r4, r2, r6, ror #22
 800fd80:	ea8e 020c 	eor.w	r2, lr, ip
 800fd84:	4032      	ands	r2, r6
 800fd86:	ea0e 070c 	and.w	r7, lr, ip
 800fd8a:	407a      	eors	r2, r7
 800fd8c:	4422      	add	r2, r4
	for ( ; i < 64; ++i) {
 800fd8e:	460f      	mov	r7, r1
		h = g; g = f; f = e; e = d + t1;
 800fd90:	4644      	mov	r4, r8
 800fd92:	46c8      	mov	r8, r9
 800fd94:	46a9      	mov	r9, r5
 800fd96:	eb0a 0503 	add.w	r5, sl, r3
		d = c; c = b; b = a; a = t1 + t2;
 800fd9a:	46e2      	mov	sl, ip
 800fd9c:	46f4      	mov	ip, lr
 800fd9e:	46b6      	mov	lr, r6
 800fda0:	189e      	adds	r6, r3, r2
	for ( ; i < 64; ++i) {
 800fda2:	2f3f      	cmp	r7, #63	; 0x3f
 800fda4:	d9a1      	bls.n	800fcea <compress+0xb6>
 800fda6:	9809      	ldr	r0, [sp, #36]	; 0x24
	}

	iv[0] += a; iv[1] += b; iv[2] += c; iv[3] += d;
 800fda8:	9b03      	ldr	r3, [sp, #12]
 800fdaa:	441e      	add	r6, r3
 800fdac:	6006      	str	r6, [r0, #0]
 800fdae:	9b04      	ldr	r3, [sp, #16]
 800fdb0:	4473      	add	r3, lr
 800fdb2:	6043      	str	r3, [r0, #4]
 800fdb4:	9b05      	ldr	r3, [sp, #20]
 800fdb6:	4463      	add	r3, ip
 800fdb8:	6083      	str	r3, [r0, #8]
 800fdba:	9b06      	ldr	r3, [sp, #24]
 800fdbc:	4453      	add	r3, sl
 800fdbe:	60c3      	str	r3, [r0, #12]
	iv[4] += e; iv[5] += f; iv[6] += g; iv[7] += h;
 800fdc0:	9b07      	ldr	r3, [sp, #28]
 800fdc2:	441d      	add	r5, r3
 800fdc4:	6105      	str	r5, [r0, #16]
 800fdc6:	9b01      	ldr	r3, [sp, #4]
 800fdc8:	444b      	add	r3, r9
 800fdca:	6143      	str	r3, [r0, #20]
 800fdcc:	9b02      	ldr	r3, [sp, #8]
 800fdce:	4443      	add	r3, r8
 800fdd0:	6183      	str	r3, [r0, #24]
 800fdd2:	9b08      	ldr	r3, [sp, #32]
 800fdd4:	441c      	add	r4, r3
 800fdd6:	61c4      	str	r4, [r0, #28]
}
 800fdd8:	b01b      	add	sp, #108	; 0x6c
 800fdda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdde:	bf00      	nop
 800fde0:	080183d4 	.word	0x080183d4

0800fde4 <tc_sha256_init>:
	if (s == (TCSha256State_t) 0) {
 800fde4:	b1e0      	cbz	r0, 800fe20 <tc_sha256_init+0x3c>
{
 800fde6:	b510      	push	{r4, lr}
 800fde8:	4604      	mov	r4, r0
	_set((uint8_t *) s, 0x00, sizeof(*s));
 800fdea:	2270      	movs	r2, #112	; 0x70
 800fdec:	2100      	movs	r1, #0
 800fdee:	f7ff fe7b 	bl	800fae8 <_set>
	s->iv[0] = 0x6a09e667;
 800fdf2:	4b0c      	ldr	r3, [pc, #48]	; (800fe24 <tc_sha256_init+0x40>)
 800fdf4:	6023      	str	r3, [r4, #0]
	s->iv[1] = 0xbb67ae85;
 800fdf6:	4b0c      	ldr	r3, [pc, #48]	; (800fe28 <tc_sha256_init+0x44>)
 800fdf8:	6063      	str	r3, [r4, #4]
	s->iv[2] = 0x3c6ef372;
 800fdfa:	4b0c      	ldr	r3, [pc, #48]	; (800fe2c <tc_sha256_init+0x48>)
 800fdfc:	60a3      	str	r3, [r4, #8]
	s->iv[3] = 0xa54ff53a;
 800fdfe:	4b0c      	ldr	r3, [pc, #48]	; (800fe30 <tc_sha256_init+0x4c>)
 800fe00:	60e3      	str	r3, [r4, #12]
	s->iv[4] = 0x510e527f;
 800fe02:	4b0c      	ldr	r3, [pc, #48]	; (800fe34 <tc_sha256_init+0x50>)
 800fe04:	6123      	str	r3, [r4, #16]
	s->iv[5] = 0x9b05688c;
 800fe06:	4b0c      	ldr	r3, [pc, #48]	; (800fe38 <tc_sha256_init+0x54>)
 800fe08:	6163      	str	r3, [r4, #20]
	s->iv[6] = 0x1f83d9ab;
 800fe0a:	4b0c      	ldr	r3, [pc, #48]	; (800fe3c <tc_sha256_init+0x58>)
 800fe0c:	61a3      	str	r3, [r4, #24]
	s->iv[7] = 0x5be0cd19;
 800fe0e:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
 800fe12:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
 800fe16:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
 800fe1a:	61e3      	str	r3, [r4, #28]
	return TC_CRYPTO_SUCCESS;
 800fe1c:	2001      	movs	r0, #1
}
 800fe1e:	bd10      	pop	{r4, pc}
		return TC_CRYPTO_FAIL;
 800fe20:	2000      	movs	r0, #0
}
 800fe22:	4770      	bx	lr
 800fe24:	6a09e667 	.word	0x6a09e667
 800fe28:	bb67ae85 	.word	0xbb67ae85
 800fe2c:	3c6ef372 	.word	0x3c6ef372
 800fe30:	a54ff53a 	.word	0xa54ff53a
 800fe34:	510e527f 	.word	0x510e527f
 800fe38:	9b05688c 	.word	0x9b05688c
 800fe3c:	1f83d9ab 	.word	0x1f83d9ab

0800fe40 <tc_sha256_update>:
	if (s == (TCSha256State_t) 0 ||
 800fe40:	b328      	cbz	r0, 800fe8e <tc_sha256_update+0x4e>
{
 800fe42:	b570      	push	{r4, r5, r6, lr}
 800fe44:	4604      	mov	r4, r0
	if (s == (TCSha256State_t) 0 ||
 800fe46:	b321      	cbz	r1, 800fe92 <tc_sha256_update+0x52>
	} else if (datalen == 0) {
 800fe48:	b91a      	cbnz	r2, 800fe52 <tc_sha256_update+0x12>
		return TC_CRYPTO_SUCCESS;
 800fe4a:	2001      	movs	r0, #1
 800fe4c:	e01e      	b.n	800fe8c <tc_sha256_update+0x4c>
{
 800fe4e:	462a      	mov	r2, r5
 800fe50:	4631      	mov	r1, r6
	while (datalen-- > 0) {
 800fe52:	1e55      	subs	r5, r2, #1
 800fe54:	b1ca      	cbz	r2, 800fe8a <tc_sha256_update+0x4a>
		s->leftover[s->leftover_offset++] = *(data++);
 800fe56:	1c4e      	adds	r6, r1, #1
 800fe58:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800fe5a:	1c5a      	adds	r2, r3, #1
 800fe5c:	66a2      	str	r2, [r4, #104]	; 0x68
 800fe5e:	7809      	ldrb	r1, [r1, #0]
 800fe60:	4423      	add	r3, r4
 800fe62:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
 800fe66:	2a3f      	cmp	r2, #63	; 0x3f
 800fe68:	d9f1      	bls.n	800fe4e <tc_sha256_update+0xe>
			compress(s->iv, s->leftover);
 800fe6a:	f104 0128 	add.w	r1, r4, #40	; 0x28
 800fe6e:	4620      	mov	r0, r4
 800fe70:	f7ff fee0 	bl	800fc34 <compress>
			s->leftover_offset = 0;
 800fe74:	2300      	movs	r3, #0
 800fe76:	66a3      	str	r3, [r4, #104]	; 0x68
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
 800fe78:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 800fe7c:	f512 7000 	adds.w	r0, r2, #512	; 0x200
 800fe80:	f143 0100 	adc.w	r1, r3, #0
 800fe84:	e9c4 0108 	strd	r0, r1, [r4, #32]
 800fe88:	e7e1      	b.n	800fe4e <tc_sha256_update+0xe>
	return TC_CRYPTO_SUCCESS;
 800fe8a:	2001      	movs	r0, #1
}
 800fe8c:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
 800fe8e:	2000      	movs	r0, #0
}
 800fe90:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
 800fe92:	2000      	movs	r0, #0
 800fe94:	e7fa      	b.n	800fe8c <tc_sha256_update+0x4c>

0800fe96 <tc_sha256_final>:
	if (digest == (uint8_t *) 0 ||
 800fe96:	2800      	cmp	r0, #0
 800fe98:	d065      	beq.n	800ff66 <tc_sha256_final+0xd0>
{
 800fe9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe9c:	460d      	mov	r5, r1
 800fe9e:	4604      	mov	r4, r0
	if (digest == (uint8_t *) 0 ||
 800fea0:	2900      	cmp	r1, #0
 800fea2:	d062      	beq.n	800ff6a <tc_sha256_final+0xd4>
	s->bits_hashed += (s->leftover_offset << 3);
 800fea4:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800fea6:	00c8      	lsls	r0, r1, #3
 800fea8:	e9d5 2308 	ldrd	r2, r3, [r5, #32]
 800feac:	1816      	adds	r6, r2, r0
 800feae:	f143 0700 	adc.w	r7, r3, #0
 800feb2:	e9c5 6708 	strd	r6, r7, [r5, #32]
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
 800feb6:	1c48      	adds	r0, r1, #1
 800feb8:	66a8      	str	r0, [r5, #104]	; 0x68
 800feba:	4429      	add	r1, r5
 800febc:	2380      	movs	r3, #128	; 0x80
 800febe:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
 800fec2:	2838      	cmp	r0, #56	; 0x38
 800fec4:	d82a      	bhi.n	800ff1c <tc_sha256_final+0x86>
	_set(s->leftover + s->leftover_offset, 0x00,
 800fec6:	f105 0628 	add.w	r6, r5, #40	; 0x28
 800feca:	6ea8      	ldr	r0, [r5, #104]	; 0x68
 800fecc:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
 800fed0:	2100      	movs	r1, #0
 800fed2:	4430      	add	r0, r6
 800fed4:	f7ff fe08 	bl	800fae8 <_set>
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
 800fed8:	6a2a      	ldr	r2, [r5, #32]
 800feda:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800fedc:	f885 2067 	strb.w	r2, [r5, #103]	; 0x67
	s->leftover[sizeof(s->leftover) - 2] = (uint8_t)(s->bits_hashed >> 8);
 800fee0:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800fee4:	f885 1066 	strb.w	r1, [r5, #102]	; 0x66
	s->leftover[sizeof(s->leftover) - 3] = (uint8_t)(s->bits_hashed >> 16);
 800fee8:	f3c2 4107 	ubfx	r1, r2, #16, #8
 800feec:	f885 1065 	strb.w	r1, [r5, #101]	; 0x65
	s->leftover[sizeof(s->leftover) - 4] = (uint8_t)(s->bits_hashed >> 24);
 800fef0:	0e12      	lsrs	r2, r2, #24
 800fef2:	f885 2064 	strb.w	r2, [r5, #100]	; 0x64
	s->leftover[sizeof(s->leftover) - 5] = (uint8_t)(s->bits_hashed >> 32);
 800fef6:	f885 3063 	strb.w	r3, [r5, #99]	; 0x63
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
 800fefa:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800fefe:	f885 2062 	strb.w	r2, [r5, #98]	; 0x62
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
 800ff02:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800ff06:	f885 2061 	strb.w	r2, [r5, #97]	; 0x61
	s->leftover[sizeof(s->leftover) - 8] = (uint8_t)(s->bits_hashed >> 56);
 800ff0a:	0e1b      	lsrs	r3, r3, #24
 800ff0c:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
	compress(s->iv, s->leftover);
 800ff10:	4631      	mov	r1, r6
 800ff12:	4628      	mov	r0, r5
 800ff14:	f7ff fe8e 	bl	800fc34 <compress>
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
 800ff18:	2200      	movs	r2, #0
 800ff1a:	e01b      	b.n	800ff54 <tc_sha256_final+0xbe>
		_set(s->leftover + s->leftover_offset, 0x00,
 800ff1c:	f105 0628 	add.w	r6, r5, #40	; 0x28
 800ff20:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
 800ff24:	2100      	movs	r1, #0
 800ff26:	4430      	add	r0, r6
 800ff28:	f7ff fdde 	bl	800fae8 <_set>
		compress(s->iv, s->leftover);
 800ff2c:	4631      	mov	r1, r6
 800ff2e:	4628      	mov	r0, r5
 800ff30:	f7ff fe80 	bl	800fc34 <compress>
		s->leftover_offset = 0;
 800ff34:	2300      	movs	r3, #0
 800ff36:	66ab      	str	r3, [r5, #104]	; 0x68
 800ff38:	e7c5      	b.n	800fec6 <tc_sha256_final+0x30>
		unsigned int t = *((unsigned int *) &s->iv[i]);
 800ff3a:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
		*digest++ = (uint8_t)(t >> 24);
 800ff3e:	0e19      	lsrs	r1, r3, #24
 800ff40:	7021      	strb	r1, [r4, #0]
		*digest++ = (uint8_t)(t >> 16);
 800ff42:	f3c3 4107 	ubfx	r1, r3, #16, #8
 800ff46:	7061      	strb	r1, [r4, #1]
		*digest++ = (uint8_t)(t >> 8);
 800ff48:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800ff4c:	70a1      	strb	r1, [r4, #2]
		*digest++ = (uint8_t)(t);
 800ff4e:	70e3      	strb	r3, [r4, #3]
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
 800ff50:	3201      	adds	r2, #1
		*digest++ = (uint8_t)(t);
 800ff52:	3404      	adds	r4, #4
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
 800ff54:	2a07      	cmp	r2, #7
 800ff56:	d9f0      	bls.n	800ff3a <tc_sha256_final+0xa4>
	_set(s, 0, sizeof(*s));
 800ff58:	2270      	movs	r2, #112	; 0x70
 800ff5a:	2100      	movs	r1, #0
 800ff5c:	4628      	mov	r0, r5
 800ff5e:	f7ff fdc3 	bl	800fae8 <_set>
	return TC_CRYPTO_SUCCESS;
 800ff62:	2001      	movs	r0, #1
}
 800ff64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
 800ff66:	2000      	movs	r0, #0
}
 800ff68:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
 800ff6a:	2000      	movs	r0, #0
 800ff6c:	e7fa      	b.n	800ff64 <tc_sha256_final+0xce>
	...

0800ff70 <hal_bsp_flash_dev>:
hal_bsp_flash_dev(uint8_t id)
{
    /*
     * Internal flash mapped to id 0.
     */
    if (id != 0) {
 800ff70:	b908      	cbnz	r0, 800ff76 <hal_bsp_flash_dev+0x6>
        return NULL;
    }
    return &stm32_flash_dev;
 800ff72:	4802      	ldr	r0, [pc, #8]	; (800ff7c <hal_bsp_flash_dev+0xc>)
}
 800ff74:	4770      	bx	lr
        return NULL;
 800ff76:	2000      	movs	r0, #0
 800ff78:	4770      	bx	lr
 800ff7a:	bf00      	nop
 800ff7c:	0801850c 	.word	0x0801850c

0800ff80 <hal_bsp_init>:
    return dump_cfg;
}

void
hal_bsp_init(void)
{
 800ff80:	b500      	push	{lr}
 800ff82:	b083      	sub	sp, #12
    int rc;

    (void)rc;

#if MYNEWT_VAL(UART_0)
    rc = os_dev_create((struct os_dev *) &hal_uart0, "uart0",
 800ff84:	4b19      	ldr	r3, [pc, #100]	; (800ffec <hal_bsp_init+0x6c>)
 800ff86:	9301      	str	r3, [sp, #4]
 800ff88:	4b19      	ldr	r3, [pc, #100]	; (800fff0 <hal_bsp_init+0x70>)
 800ff8a:	9300      	str	r3, [sp, #0]
 800ff8c:	2300      	movs	r3, #0
 800ff8e:	2201      	movs	r2, #1
 800ff90:	4918      	ldr	r1, [pc, #96]	; (800fff4 <hal_bsp_init+0x74>)
 800ff92:	4819      	ldr	r0, [pc, #100]	; (800fff8 <hal_bsp_init+0x78>)
 800ff94:	f7fc fdaa 	bl	800caec <os_dev_create>
      OS_DEV_INIT_PRIMARY, 0, uart_hal_init, (void *)&uart0_cfg);
    assert(rc == 0);
 800ff98:	b9b0      	cbnz	r0, 800ffc8 <hal_bsp_init+0x48>
      OS_DEV_INIT_PRIMARY, 0, uart_hal_init, (void *)&uart1_cfg);
    assert(rc == 0);
#endif

#if MYNEWT_VAL(UART_2)
    rc = os_dev_create((struct os_dev *) &hal_uart2, "uart2",
 800ff9a:	4b18      	ldr	r3, [pc, #96]	; (800fffc <hal_bsp_init+0x7c>)
 800ff9c:	9301      	str	r3, [sp, #4]
 800ff9e:	4b14      	ldr	r3, [pc, #80]	; (800fff0 <hal_bsp_init+0x70>)
 800ffa0:	9300      	str	r3, [sp, #0]
 800ffa2:	2300      	movs	r3, #0
 800ffa4:	2201      	movs	r2, #1
 800ffa6:	4916      	ldr	r1, [pc, #88]	; (8010000 <hal_bsp_init+0x80>)
 800ffa8:	4816      	ldr	r0, [pc, #88]	; (8010004 <hal_bsp_init+0x84>)
 800ffaa:	f7fc fd9f 	bl	800caec <os_dev_create>
      OS_DEV_INIT_PRIMARY, 0, uart_hal_init, (void *)&uart2_cfg);
    assert(rc == 0);
 800ffae:	b988      	cbnz	r0, 800ffd4 <hal_bsp_init+0x54>
#endif

#if MYNEWT_VAL(TIMER_0)
    hal_timer_init(0, TIM2);
 800ffb0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800ffb4:	2000      	movs	r0, #0
 800ffb6:	f000 fc13 	bl	80107e0 <hal_timer_init>
    rc = hal_spi_init(0, &spi0_cfg, HAL_SPI_TYPE_MASTER);
    assert(rc == 0);
#endif

#if (MYNEWT_VAL(OS_CPUTIME_TIMER_NUM) >= 0)
    rc = os_cputime_init(MYNEWT_VAL(OS_CPUTIME_FREQ));
 800ffba:	4813      	ldr	r0, [pc, #76]	; (8010008 <hal_bsp_init+0x88>)
 800ffbc:	f7fc fd38 	bl	800ca30 <os_cputime_init>
    assert(rc == 0);
 800ffc0:	b970      	cbnz	r0, 800ffe0 <hal_bsp_init+0x60>

#if MYNEWT_VAL(I2C_2)
    rc = hal_i2c_init(2, &i2c_cfg2);
    assert(rc == 0);
#endif
}
 800ffc2:	b003      	add	sp, #12
 800ffc4:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
 800ffc8:	2300      	movs	r3, #0
 800ffca:	461a      	mov	r2, r3
 800ffcc:	4619      	mov	r1, r3
 800ffce:	4618      	mov	r0, r3
 800ffd0:	f7fc fb00 	bl	800c5d4 <__assert_func>
    assert(rc == 0);
 800ffd4:	2300      	movs	r3, #0
 800ffd6:	461a      	mov	r2, r3
 800ffd8:	4619      	mov	r1, r3
 800ffda:	4618      	mov	r0, r3
 800ffdc:	f7fc fafa 	bl	800c5d4 <__assert_func>
    assert(rc == 0);
 800ffe0:	2300      	movs	r3, #0
 800ffe2:	461a      	mov	r2, r3
 800ffe4:	4619      	mov	r1, r3
 800ffe6:	4618      	mov	r0, r3
 800ffe8:	f7fc faf4 	bl	800c5d4 <__assert_func>
 800ffec:	080184e4 	.word	0x080184e4
 800fff0:	08010171 	.word	0x08010171
 800fff4:	080184d4 	.word	0x080184d4
 800fff8:	20002d28 	.word	0x20002d28
 800fffc:	080184f8 	.word	0x080184f8
 8010000:	080184dc 	.word	0x080184dc
 8010004:	20002d64 	.word	0x20002d64
 8010008:	000f4240 	.word	0x000f4240

0801000c <adc_chan_config>:
 *
 * @return 0 on success, non-zero error code on failure.
 */
int
adc_chan_config(struct adc_dev *dev, uint8_t cnum, void *data)
{
 801000c:	b510      	push	{r4, lr}
    assert(dev->ad_funcs->af_configure_channel != NULL);
 801000e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	b123      	cbz	r3, 801001e <adc_chan_config+0x12>

    if (cnum >= dev->ad_chan_count) {
 8010014:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8010016:	42a1      	cmp	r1, r4
 8010018:	da06      	bge.n	8010028 <adc_chan_config+0x1c>
        return (EINVAL);
    }

    return (dev->ad_funcs->af_configure_channel(dev, cnum, data));
 801001a:	4798      	blx	r3
}
 801001c:	bd10      	pop	{r4, pc}
    assert(dev->ad_funcs->af_configure_channel != NULL);
 801001e:	461a      	mov	r2, r3
 8010020:	4619      	mov	r1, r3
 8010022:	4618      	mov	r0, r3
 8010024:	f7fc fad6 	bl	800c5d4 <__assert_func>
        return (EINVAL);
 8010028:	2016      	movs	r0, #22
 801002a:	e7f7      	b.n	801001c <adc_chan_config+0x10>

0801002c <uart_hal_blocking_tx>:
    hal_uart_start_rx(uart_hal_dev_get_id(dev));
}

static void
uart_hal_blocking_tx(struct uart_dev *dev, uint8_t byte)
{
 801002c:	b508      	push	{r3, lr}
    assert(dev->ud_priv);
 801002e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8010030:	b118      	cbz	r0, 801003a <uart_hal_blocking_tx+0xe>

    hal_uart_blocking_tx(uart_hal_dev_get_id(dev), byte);
 8010032:	3801      	subs	r0, #1
 8010034:	f000 fe10 	bl	8010c58 <hal_uart_blocking_tx>
}
 8010038:	bd08      	pop	{r3, pc}
    assert(dev->ud_priv);
 801003a:	2300      	movs	r3, #0
 801003c:	461a      	mov	r2, r3
 801003e:	4619      	mov	r1, r3
 8010040:	4618      	mov	r0, r3
 8010042:	f7fc fac7 	bl	800c5d4 <__assert_func>

08010046 <uart_hal_start_rx>:
{
 8010046:	b508      	push	{r3, lr}
    assert(dev->ud_priv);
 8010048:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801004a:	b118      	cbz	r0, 8010054 <uart_hal_start_rx+0xe>
    hal_uart_start_rx(uart_hal_dev_get_id(dev));
 801004c:	3801      	subs	r0, #1
 801004e:	f000 fdb5 	bl	8010bbc <hal_uart_start_rx>
}
 8010052:	bd08      	pop	{r3, pc}
    assert(dev->ud_priv);
 8010054:	2300      	movs	r3, #0
 8010056:	461a      	mov	r2, r3
 8010058:	4619      	mov	r1, r3
 801005a:	4618      	mov	r0, r3
 801005c:	f7fc faba 	bl	800c5d4 <__assert_func>

08010060 <uart_hal_start_tx>:
{
 8010060:	b508      	push	{r3, lr}
    assert(dev->ud_priv);
 8010062:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8010064:	b118      	cbz	r0, 801006e <uart_hal_start_tx+0xe>
    hal_uart_start_tx(uart_hal_dev_get_id(dev));
 8010066:	3801      	subs	r0, #1
 8010068:	f000 fdd6 	bl	8010c18 <hal_uart_start_tx>
}
 801006c:	bd08      	pop	{r3, pc}
    assert(dev->ud_priv);
 801006e:	2300      	movs	r3, #0
 8010070:	461a      	mov	r2, r3
 8010072:	4619      	mov	r1, r3
 8010074:	4618      	mov	r0, r3
 8010076:	f7fc faad 	bl	800c5d4 <__assert_func>

0801007a <uart_hal_resume>:
    return OS_OK;
}

static int
uart_hal_resume(struct os_dev *odev)
{
 801007a:	b530      	push	{r4, r5, lr}
 801007c:	b083      	sub	sp, #12
    return (intptr_t)(dev->ud_priv) - 1;
 801007e:	6b84      	ldr	r4, [r0, #56]	; 0x38
    struct uart_dev *dev = (struct uart_dev *)odev;
    struct uart_conf_port *ucp = &dev->ud_conf_port;
    int rc;

    rc = hal_uart_config(uart_hal_dev_get_id(dev), ucp->uc_speed,
 8010080:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8010082:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
 8010086:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
                         ucp->uc_databits, ucp->uc_stopbits,
                         (enum hal_uart_parity)ucp->uc_parity,
 801008a:	f890 5036 	ldrb.w	r5, [r0, #54]	; 0x36
                         (enum hal_uart_flow_ctl)ucp->uc_flow_ctl);
 801008e:	f890 0037 	ldrb.w	r0, [r0, #55]	; 0x37
    rc = hal_uart_config(uart_hal_dev_get_id(dev), ucp->uc_speed,
 8010092:	9001      	str	r0, [sp, #4]
 8010094:	9500      	str	r5, [sp, #0]
 8010096:	1e60      	subs	r0, r4, #1
 8010098:	f000 fdfa 	bl	8010c90 <hal_uart_config>
    if (rc) {
 801009c:	4603      	mov	r3, r0
 801009e:	b910      	cbnz	r0, 80100a6 <uart_hal_resume+0x2c>
        return OS_EINVAL;
    }

    return OS_OK;
}
 80100a0:	4618      	mov	r0, r3
 80100a2:	b003      	add	sp, #12
 80100a4:	bd30      	pop	{r4, r5, pc}
        return OS_EINVAL;
 80100a6:	2302      	movs	r3, #2
 80100a8:	e7fa      	b.n	80100a0 <uart_hal_resume+0x26>

080100aa <uart_hal_suspend>:
{
 80100aa:	b570      	push	{r4, r5, r6, lr}
 80100ac:	4606      	mov	r6, r0
 80100ae:	460c      	mov	r4, r1
 80100b0:	4615      	mov	r5, r2
    if (OS_TIME_TICK_GT(suspend_at, os_time_get()) || !force) {
 80100b2:	f7fd fd8b 	bl	800dbcc <os_time_get>
 80100b6:	1a20      	subs	r0, r4, r0
 80100b8:	2800      	cmp	r0, #0
 80100ba:	dc08      	bgt.n	80100ce <uart_hal_suspend+0x24>
 80100bc:	b155      	cbz	r5, 80100d4 <uart_hal_suspend+0x2a>
    return (intptr_t)(dev->ud_priv) - 1;
 80100be:	6bb0      	ldr	r0, [r6, #56]	; 0x38
    rc = hal_uart_close(uart_hal_dev_get_id(dev));
 80100c0:	3801      	subs	r0, #1
 80100c2:	f000 fed9 	bl	8010e78 <hal_uart_close>
    if (rc) {
 80100c6:	4603      	mov	r3, r0
 80100c8:	b110      	cbz	r0, 80100d0 <uart_hal_suspend+0x26>
        return OS_EINVAL;
 80100ca:	2302      	movs	r3, #2
 80100cc:	e000      	b.n	80100d0 <uart_hal_suspend+0x26>
        return OS_EINVAL;
 80100ce:	2302      	movs	r3, #2
}
 80100d0:	4618      	mov	r0, r3
 80100d2:	bd70      	pop	{r4, r5, r6, pc}
        return OS_EINVAL;
 80100d4:	2302      	movs	r3, #2
 80100d6:	e7fb      	b.n	80100d0 <uart_hal_suspend+0x26>

080100d8 <uart_hal_close>:
{
 80100d8:	b508      	push	{r3, lr}
    return (intptr_t)(dev->ud_priv) - 1;
 80100da:	6b80      	ldr	r0, [r0, #56]	; 0x38
    rc = hal_uart_close(uart_hal_dev_get_id(dev));
 80100dc:	3801      	subs	r0, #1
 80100de:	f000 fecb 	bl	8010e78 <hal_uart_close>
    if (rc) {
 80100e2:	4603      	mov	r3, r0
 80100e4:	b908      	cbnz	r0, 80100ea <uart_hal_close+0x12>
}
 80100e6:	4618      	mov	r0, r3
 80100e8:	bd08      	pop	{r3, pc}
        return OS_EINVAL;
 80100ea:	2302      	movs	r3, #2
 80100ec:	e7fb      	b.n	80100e6 <uart_hal_close+0xe>

080100ee <uart_hal_open>:
{
 80100ee:	b530      	push	{r4, r5, lr}
 80100f0:	b083      	sub	sp, #12
 80100f2:	4605      	mov	r5, r0
    assert(dev->ud_priv);
 80100f4:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80100f6:	2800      	cmp	r0, #0
 80100f8:	d02c      	beq.n	8010154 <uart_hal_open+0x66>
 80100fa:	4614      	mov	r4, r2
    if (!uc) {
 80100fc:	2a00      	cmp	r2, #0
 80100fe:	d02f      	beq.n	8010160 <uart_hal_open+0x72>
    if (odev->od_flags & OS_DEV_F_STATUS_OPEN) {
 8010100:	7eeb      	ldrb	r3, [r5, #27]
 8010102:	f013 0f02 	tst.w	r3, #2
 8010106:	d12d      	bne.n	8010164 <uart_hal_open+0x76>
    dev->ud_conf_port.uc_databits = uc->uc_databits;
 8010108:	7913      	ldrb	r3, [r2, #4]
 801010a:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
    dev->ud_conf_port.uc_flow_ctl = uc->uc_flow_ctl;
 801010e:	79d3      	ldrb	r3, [r2, #7]
 8010110:	f885 3037 	strb.w	r3, [r5, #55]	; 0x37
    dev->ud_conf_port.uc_parity = uc->uc_parity;
 8010114:	7993      	ldrb	r3, [r2, #6]
 8010116:	f885 3036 	strb.w	r3, [r5, #54]	; 0x36
    dev->ud_conf_port.uc_speed = uc->uc_speed;
 801011a:	6813      	ldr	r3, [r2, #0]
 801011c:	632b      	str	r3, [r5, #48]	; 0x30
    dev->ud_conf_port.uc_stopbits = uc->uc_stopbits;
 801011e:	7953      	ldrb	r3, [r2, #5]
 8010120:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
    rc = hal_uart_init_cbs(uart_hal_dev_get_id(dev), uc->uc_tx_char, uc->uc_tx_done,
 8010124:	6953      	ldr	r3, [r2, #20]
 8010126:	9300      	str	r3, [sp, #0]
 8010128:	68d3      	ldr	r3, [r2, #12]
 801012a:	6912      	ldr	r2, [r2, #16]
 801012c:	68a1      	ldr	r1, [r4, #8]
 801012e:	3801      	subs	r0, #1
 8010130:	f000 fd22 	bl	8010b78 <hal_uart_init_cbs>
    if (rc) {
 8010134:	b9d0      	cbnz	r0, 801016c <uart_hal_open+0x7e>
    return (intptr_t)(dev->ud_priv) - 1;
 8010136:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    rc = hal_uart_config(uart_hal_dev_get_id(dev), uc->uc_speed, uc->uc_databits,
 8010138:	6821      	ldr	r1, [r4, #0]
 801013a:	7922      	ldrb	r2, [r4, #4]
 801013c:	7963      	ldrb	r3, [r4, #5]
      uc->uc_stopbits, (enum hal_uart_parity)uc->uc_parity, (enum hal_uart_flow_ctl)uc->uc_flow_ctl);
 801013e:	79a5      	ldrb	r5, [r4, #6]
 8010140:	79e4      	ldrb	r4, [r4, #7]
    rc = hal_uart_config(uart_hal_dev_get_id(dev), uc->uc_speed, uc->uc_databits,
 8010142:	9401      	str	r4, [sp, #4]
 8010144:	9500      	str	r5, [sp, #0]
 8010146:	3801      	subs	r0, #1
 8010148:	f000 fda2 	bl	8010c90 <hal_uart_config>
    if (rc) {
 801014c:	4603      	mov	r3, r0
 801014e:	b150      	cbz	r0, 8010166 <uart_hal_open+0x78>
        return OS_EINVAL;
 8010150:	2302      	movs	r3, #2
 8010152:	e008      	b.n	8010166 <uart_hal_open+0x78>
    assert(dev->ud_priv);
 8010154:	2300      	movs	r3, #0
 8010156:	461a      	mov	r2, r3
 8010158:	4619      	mov	r1, r3
 801015a:	4618      	mov	r0, r3
 801015c:	f7fc fa3a 	bl	800c5d4 <__assert_func>
        return OS_EINVAL;
 8010160:	2302      	movs	r3, #2
 8010162:	e000      	b.n	8010166 <uart_hal_open+0x78>
        return OS_EBUSY;
 8010164:	230b      	movs	r3, #11
}
 8010166:	4618      	mov	r0, r3
 8010168:	b003      	add	sp, #12
 801016a:	bd30      	pop	{r4, r5, pc}
        return OS_EINVAL;
 801016c:	2302      	movs	r3, #2
 801016e:	e7fa      	b.n	8010166 <uart_hal_open+0x78>

08010170 <uart_hal_init>:
/*
 * Arg points to BSP specific UART configuration.
 */
int
uart_hal_init(struct os_dev *odev, void *arg)
{
 8010170:	b570      	push	{r4, r5, r6, lr}
 8010172:	4604      	mov	r4, r0
 8010174:	460e      	mov	r6, r1
    struct uart_dev *dev;
    char ch;

    dev = (struct uart_dev *)odev;

    ch = odev->od_name[strlen(odev->od_name) - 1];
 8010176:	69c5      	ldr	r5, [r0, #28]
 8010178:	4628      	mov	r0, r5
 801017a:	f7fd ff36 	bl	800dfea <strlen>
 801017e:	3801      	subs	r0, #1
 8010180:	5c28      	ldrb	r0, [r5, r0]
    if (!isdigit((int) ch)) {
 8010182:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8010186:	2b09      	cmp	r3, #9
 8010188:	d816      	bhi.n	80101b8 <uart_hal_init+0x48>
    dev->ud_priv = (void *)((intptr_t)(id + 1));
 801018a:	f1a0 032f 	sub.w	r3, r0, #47	; 0x2f
 801018e:	63a3      	str	r3, [r4, #56]	; 0x38
        return OS_EINVAL;
    }
    uart_hal_dev_set_id(dev, ch - '0');

    OS_DEV_SETHANDLERS(odev, uart_hal_open, uart_hal_close);
 8010190:	4b0a      	ldr	r3, [pc, #40]	; (80101bc <uart_hal_init+0x4c>)
 8010192:	6023      	str	r3, [r4, #0]
 8010194:	4b0a      	ldr	r3, [pc, #40]	; (80101c0 <uart_hal_init+0x50>)
 8010196:	60e3      	str	r3, [r4, #12]
    odev->od_handlers.od_suspend = uart_hal_suspend;
 8010198:	4b0a      	ldr	r3, [pc, #40]	; (80101c4 <uart_hal_init+0x54>)
 801019a:	6063      	str	r3, [r4, #4]
    odev->od_handlers.od_resume = uart_hal_resume;
 801019c:	4b0a      	ldr	r3, [pc, #40]	; (80101c8 <uart_hal_init+0x58>)
 801019e:	60a3      	str	r3, [r4, #8]

    dev->ud_funcs.uf_start_tx = uart_hal_start_tx;
 80101a0:	4b0a      	ldr	r3, [pc, #40]	; (80101cc <uart_hal_init+0x5c>)
 80101a2:	6263      	str	r3, [r4, #36]	; 0x24
    dev->ud_funcs.uf_start_rx = uart_hal_start_rx;
 80101a4:	4b0a      	ldr	r3, [pc, #40]	; (80101d0 <uart_hal_init+0x60>)
 80101a6:	62a3      	str	r3, [r4, #40]	; 0x28
    dev->ud_funcs.uf_blocking_tx = uart_hal_blocking_tx;
 80101a8:	4b0a      	ldr	r3, [pc, #40]	; (80101d4 <uart_hal_init+0x64>)
 80101aa:	62e3      	str	r3, [r4, #44]	; 0x2c

    hal_uart_init(uart_hal_dev_get_id(dev), arg);
 80101ac:	4631      	mov	r1, r6
 80101ae:	3830      	subs	r0, #48	; 0x30
 80101b0:	f000 fe52 	bl	8010e58 <hal_uart_init>

    return OS_OK;
 80101b4:	2000      	movs	r0, #0
}
 80101b6:	bd70      	pop	{r4, r5, r6, pc}
        return OS_EINVAL;
 80101b8:	2002      	movs	r0, #2
 80101ba:	e7fc      	b.n	80101b6 <uart_hal_init+0x46>
 80101bc:	080100ef 	.word	0x080100ef
 80101c0:	080100d9 	.word	0x080100d9
 80101c4:	080100ab 	.word	0x080100ab
 80101c8:	0801007b 	.word	0x0801007b
 80101cc:	08010061 	.word	0x08010061
 80101d0:	08010047 	.word	0x08010047
 80101d4:	0801002d 	.word	0x0801002d

080101d8 <stm32_flash_sector_info>:
        uint32_t *address, uint32_t *sz)
{
    (void)dev;

#if FLASH_IS_LINEAR
    *address = dev->hf_base_addr + _FLASH_SECTOR_SIZE * idx;
 80101d8:	6840      	ldr	r0, [r0, #4]
 80101da:	eb00 21c1 	add.w	r1, r0, r1, lsl #11
 80101de:	6011      	str	r1, [r2, #0]
    *sz = _FLASH_SECTOR_SIZE;
 80101e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80101e4:	601a      	str	r2, [r3, #0]
    *address = stm32_flash_sectors[idx];
    *sz = stm32_flash_sectors[idx + 1] - stm32_flash_sectors[idx];
#endif

    return 0;
}
 80101e6:	2000      	movs	r0, #0
 80101e8:	4770      	bx	lr

080101ea <stm32_flash_init>:

static int
stm32_flash_init(const struct hal_flash *dev)
{
 80101ea:	b508      	push	{r3, lr}
    (void)dev;
    STM32_HAL_FLASH_INIT();
 80101ec:	f000 fedc 	bl	8010fa8 <HAL_FLASH_Unlock>
    return 0;
}
 80101f0:	2000      	movs	r0, #0
 80101f2:	bd08      	pop	{r3, pc}

080101f4 <stm32_flash_erase_sector>:
{
 80101f4:	b508      	push	{r3, lr}
    return stm32_mcu_flash_erase_sector(dev, sector_address);
 80101f6:	f001 fae8 	bl	80117ca <stm32_mcu_flash_erase_sector>
}
 80101fa:	bd08      	pop	{r3, pc}

080101fc <stm32_flash_read>:
{
 80101fc:	b508      	push	{r3, lr}
 80101fe:	4610      	mov	r0, r2
    memcpy(dst, (void *)address, num_bytes);
 8010200:	461a      	mov	r2, r3
 8010202:	f7fd feab 	bl	800df5c <memcpy>
}
 8010206:	2000      	movs	r0, #0
 8010208:	bd08      	pop	{r3, pc}

0801020a <stm32_flash_write_linear>:
{
 801020a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801020e:	b083      	sub	sp, #12
 8010210:	4683      	mov	fp, r0
 8010212:	460f      	mov	r7, r1
 8010214:	4692      	mov	sl, r2
 8010216:	461e      	mov	r6, r3
    align = dev->hf_align;
 8010218:	f8d0 9010 	ldr.w	r9, [r0, #16]
    num_words = ((num_bytes - 1) >> 3) + 1;
 801021c:	f103 38ff 	add.w	r8, r3, #4294967295
 8010220:	ea4f 08d8 	mov.w	r8, r8, lsr #3
 8010224:	f108 0801 	add.w	r8, r8, #1
    for (i = 0; i < num_words; i++) {
 8010228:	2500      	movs	r5, #0
 801022a:	e013      	b.n	8010254 <stm32_flash_write_linear+0x4a>
            memcpy(&val, &((uint8_t *)src)[i * align], align);
 801022c:	4622      	mov	r2, r4
 801022e:	fb05 a104 	mla	r1, r5, r4, sl
 8010232:	4668      	mov	r0, sp
 8010234:	f7fd fe92 	bl	800df5c <memcpy>
        rc = HAL_FLASH_Program(FLASH_PROGRAM_TYPE, address, val);
 8010238:	e9dd 2300 	ldrd	r2, r3, [sp]
 801023c:	4639      	mov	r1, r7
 801023e:	2000      	movs	r0, #0
 8010240:	f000 ff10 	bl	8011064 <HAL_FLASH_Program>
 8010244:	4603      	mov	r3, r0
        if (rc != HAL_OK) {
 8010246:	b9e8      	cbnz	r0, 8010284 <stm32_flash_write_linear+0x7a>
        address += align;
 8010248:	4427      	add	r7, r4
        num_bytes -= align;
 801024a:	1b36      	subs	r6, r6, r4
        if (!(i % 32)) {
 801024c:	f015 0f1f 	tst.w	r5, #31
 8010250:	d014      	beq.n	801027c <stm32_flash_write_linear+0x72>
    for (i = 0; i < num_words; i++) {
 8010252:	3501      	adds	r5, #1
 8010254:	4545      	cmp	r5, r8
 8010256:	d214      	bcs.n	8010282 <stm32_flash_write_linear+0x78>
        if (num_bytes < align) {
 8010258:	fa5f f489 	uxtb.w	r4, r9
 801025c:	42b4      	cmp	r4, r6
 801025e:	d9e5      	bls.n	801022c <stm32_flash_write_linear+0x22>
            memcpy(&val, &((uint8_t *)src)[i * align], num_bytes);
 8010260:	4632      	mov	r2, r6
 8010262:	fb05 a104 	mla	r1, r5, r4, sl
 8010266:	4668      	mov	r0, sp
 8010268:	f7fd fe78 	bl	800df5c <memcpy>
            memset((uint32_t *)&val + num_bytes, dev->hf_erased_val, align - num_bytes);
 801026c:	1ba2      	subs	r2, r4, r6
 801026e:	f89b 1014 	ldrb.w	r1, [fp, #20]
 8010272:	eb0d 0086 	add.w	r0, sp, r6, lsl #2
 8010276:	f7fd fe7e 	bl	800df76 <memset>
 801027a:	e7dd      	b.n	8010238 <stm32_flash_write_linear+0x2e>
            hal_watchdog_tickle();
 801027c:	f000 fe40 	bl	8010f00 <hal_watchdog_tickle>
 8010280:	e7e7      	b.n	8010252 <stm32_flash_write_linear+0x48>
    return 0;
 8010282:	2300      	movs	r3, #0
}
 8010284:	4618      	mov	r0, r3
 8010286:	b003      	add	sp, #12
 8010288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801028c <stm32_flash_write>:
    if (!num_bytes) {
 801028c:	b11b      	cbz	r3, 8010296 <stm32_flash_write+0xa>
{
 801028e:	b510      	push	{r4, lr}
    return stm32_flash_write_linear(dev, address, src, num_bytes);
 8010290:	f7ff ffbb 	bl	801020a <stm32_flash_write_linear>
}
 8010294:	bd10      	pop	{r4, pc}
        return -1;
 8010296:	f04f 30ff 	mov.w	r0, #4294967295
}
 801029a:	4770      	bx	lr

0801029c <hal_gpio_clk_enable>:
 *
 * @param port_idx
 */
static void
hal_gpio_clk_enable(uint32_t port_idx)
{
 801029c:	b500      	push	{lr}
 801029e:	b089      	sub	sp, #36	; 0x24
    switch (port_idx) {
 80102a0:	2807      	cmp	r0, #7
 80102a2:	d85f      	bhi.n	8010364 <hal_gpio_clk_enable+0xc8>
 80102a4:	e8df f000 	tbb	[pc, r0]
 80102a8:	271c1104 	.word	0x271c1104
 80102ac:	53483d32 	.word	0x53483d32
#if defined GPIOA_BASE
    case 0:
        __HAL_RCC_GPIOA_CLK_ENABLE();
 80102b0:	4b2f      	ldr	r3, [pc, #188]	; (8010370 <hal_gpio_clk_enable+0xd4>)
 80102b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80102b4:	f042 0201 	orr.w	r2, r2, #1
 80102b8:	64da      	str	r2, [r3, #76]	; 0x4c
 80102ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80102bc:	f003 0301 	and.w	r3, r3, #1
 80102c0:	9300      	str	r3, [sp, #0]
 80102c2:	9b00      	ldr	r3, [sp, #0]
#endif
    default:
        assert(0);
        break;
    }
}
 80102c4:	b009      	add	sp, #36	; 0x24
 80102c6:	f85d fb04 	ldr.w	pc, [sp], #4
        __HAL_RCC_GPIOB_CLK_ENABLE();
 80102ca:	4b29      	ldr	r3, [pc, #164]	; (8010370 <hal_gpio_clk_enable+0xd4>)
 80102cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80102ce:	f042 0202 	orr.w	r2, r2, #2
 80102d2:	64da      	str	r2, [r3, #76]	; 0x4c
 80102d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80102d6:	f003 0302 	and.w	r3, r3, #2
 80102da:	9301      	str	r3, [sp, #4]
 80102dc:	9b01      	ldr	r3, [sp, #4]
        break;
 80102de:	e7f1      	b.n	80102c4 <hal_gpio_clk_enable+0x28>
        __HAL_RCC_GPIOC_CLK_ENABLE();
 80102e0:	4b23      	ldr	r3, [pc, #140]	; (8010370 <hal_gpio_clk_enable+0xd4>)
 80102e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80102e4:	f042 0204 	orr.w	r2, r2, #4
 80102e8:	64da      	str	r2, [r3, #76]	; 0x4c
 80102ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80102ec:	f003 0304 	and.w	r3, r3, #4
 80102f0:	9302      	str	r3, [sp, #8]
 80102f2:	9b02      	ldr	r3, [sp, #8]
        break;
 80102f4:	e7e6      	b.n	80102c4 <hal_gpio_clk_enable+0x28>
        __HAL_RCC_GPIOD_CLK_ENABLE();
 80102f6:	4b1e      	ldr	r3, [pc, #120]	; (8010370 <hal_gpio_clk_enable+0xd4>)
 80102f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80102fa:	f042 0208 	orr.w	r2, r2, #8
 80102fe:	64da      	str	r2, [r3, #76]	; 0x4c
 8010300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010302:	f003 0308 	and.w	r3, r3, #8
 8010306:	9303      	str	r3, [sp, #12]
 8010308:	9b03      	ldr	r3, [sp, #12]
        break;
 801030a:	e7db      	b.n	80102c4 <hal_gpio_clk_enable+0x28>
        __HAL_RCC_GPIOE_CLK_ENABLE();
 801030c:	4b18      	ldr	r3, [pc, #96]	; (8010370 <hal_gpio_clk_enable+0xd4>)
 801030e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010310:	f042 0210 	orr.w	r2, r2, #16
 8010314:	64da      	str	r2, [r3, #76]	; 0x4c
 8010316:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010318:	f003 0310 	and.w	r3, r3, #16
 801031c:	9304      	str	r3, [sp, #16]
 801031e:	9b04      	ldr	r3, [sp, #16]
        break;
 8010320:	e7d0      	b.n	80102c4 <hal_gpio_clk_enable+0x28>
        __HAL_RCC_GPIOF_CLK_ENABLE();
 8010322:	4b13      	ldr	r3, [pc, #76]	; (8010370 <hal_gpio_clk_enable+0xd4>)
 8010324:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010326:	f042 0220 	orr.w	r2, r2, #32
 801032a:	64da      	str	r2, [r3, #76]	; 0x4c
 801032c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801032e:	f003 0320 	and.w	r3, r3, #32
 8010332:	9305      	str	r3, [sp, #20]
 8010334:	9b05      	ldr	r3, [sp, #20]
        break;
 8010336:	e7c5      	b.n	80102c4 <hal_gpio_clk_enable+0x28>
        __HAL_RCC_GPIOG_CLK_ENABLE();
 8010338:	4b0d      	ldr	r3, [pc, #52]	; (8010370 <hal_gpio_clk_enable+0xd4>)
 801033a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801033c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010340:	64da      	str	r2, [r3, #76]	; 0x4c
 8010342:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010348:	9306      	str	r3, [sp, #24]
 801034a:	9b06      	ldr	r3, [sp, #24]
        break;
 801034c:	e7ba      	b.n	80102c4 <hal_gpio_clk_enable+0x28>
        __HAL_RCC_GPIOH_CLK_ENABLE();
 801034e:	4b08      	ldr	r3, [pc, #32]	; (8010370 <hal_gpio_clk_enable+0xd4>)
 8010350:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010352:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8010356:	64da      	str	r2, [r3, #76]	; 0x4c
 8010358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801035a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801035e:	9307      	str	r3, [sp, #28]
 8010360:	9b07      	ldr	r3, [sp, #28]
        break;
 8010362:	e7af      	b.n	80102c4 <hal_gpio_clk_enable+0x28>
        assert(0);
 8010364:	2300      	movs	r3, #0
 8010366:	461a      	mov	r2, r3
 8010368:	4619      	mov	r1, r3
 801036a:	4618      	mov	r0, r3
 801036c:	f7fc f932 	bl	800c5d4 <__assert_func>
 8010370:	40021000 	.word	0x40021000

08010374 <hal_gpio_init_stm>:
 *
 * @return int
 */
int
hal_gpio_init_stm(int pin, GPIO_InitTypeDef *cfg)
{
 8010374:	b538      	push	{r3, r4, r5, lr}
    int port;
    uint32_t mcu_pin_mask;

    /* Is this a valid pin? */
    port = MCU_GPIO_PIN_PORT(pin);
 8010376:	f3c0 1503 	ubfx	r5, r0, #4, #4
    if (port >= HAL_GPIO_PORT_COUNT) {
 801037a:	2d07      	cmp	r5, #7
 801037c:	dc11      	bgt.n	80103a2 <hal_gpio_init_stm+0x2e>
 801037e:	460c      	mov	r4, r1
        return -1;
    }

    mcu_pin_mask = GPIO_MASK(pin);
 8010380:	f000 000f 	and.w	r0, r0, #15
 8010384:	2301      	movs	r3, #1
 8010386:	fa03 f000 	lsl.w	r0, r3, r0
    cfg->Pin = mcu_pin_mask;
 801038a:	6008      	str	r0, [r1, #0]

    /* Enable the GPIO clock */
    hal_gpio_clk_enable(port);
 801038c:	4628      	mov	r0, r5
 801038e:	f7ff ff85 	bl	801029c <hal_gpio_clk_enable>

    /* Initialize pin as an input, setting proper mode */
    HAL_GPIO_Init(portmap[port], cfg);
 8010392:	4621      	mov	r1, r4
 8010394:	4b04      	ldr	r3, [pc, #16]	; (80103a8 <hal_gpio_init_stm+0x34>)
 8010396:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801039a:	f000 ffa1 	bl	80112e0 <HAL_GPIO_Init>

    return 0;
 801039e:	2000      	movs	r0, #0
}
 80103a0:	bd38      	pop	{r3, r4, r5, pc}
        return -1;
 80103a2:	f04f 30ff 	mov.w	r0, #4294967295
 80103a6:	e7fb      	b.n	80103a0 <hal_gpio_init_stm+0x2c>
 80103a8:	08018540 	.word	0x08018540

080103ac <hal_gpio_deinit_stm>:
 *
 * @return int
 */
int
hal_gpio_deinit_stm(int pin, GPIO_InitTypeDef *cfg)
{
 80103ac:	b510      	push	{r4, lr}
    int port;
    uint32_t mcu_pin_mask;

    /* Is this a valid pin? */
    port = MCU_GPIO_PIN_PORT(pin);
 80103ae:	f3c0 1403 	ubfx	r4, r0, #4, #4
    if (port >= HAL_GPIO_PORT_COUNT) {
 80103b2:	2c07      	cmp	r4, #7
 80103b4:	dc0d      	bgt.n	80103d2 <hal_gpio_deinit_stm+0x26>
 80103b6:	460a      	mov	r2, r1
        return -1;
    }

    mcu_pin_mask = GPIO_MASK(pin);
 80103b8:	f000 000f 	and.w	r0, r0, #15
 80103bc:	2301      	movs	r3, #1
 80103be:	fa03 f100 	lsl.w	r1, r3, r0
    cfg->Pin = mcu_pin_mask;
 80103c2:	6011      	str	r1, [r2, #0]

    /* Initialize pin as an input, setting proper mode */
    HAL_GPIO_DeInit(portmap[port], cfg->Pin);
 80103c4:	4b04      	ldr	r3, [pc, #16]	; (80103d8 <hal_gpio_deinit_stm+0x2c>)
 80103c6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80103ca:	f001 f873 	bl	80114b4 <HAL_GPIO_DeInit>

    return 0;
 80103ce:	2000      	movs	r0, #0
}
 80103d0:	bd10      	pop	{r4, pc}
        return -1;
 80103d2:	f04f 30ff 	mov.w	r0, #4294967295
 80103d6:	e7fb      	b.n	80103d0 <hal_gpio_deinit_stm+0x24>
 80103d8:	08018540 	.word	0x08018540

080103dc <hal_gpio_init_af>:
 *
 * Configure the specified pin for AF.
 */
int
hal_gpio_init_af(int pin, uint8_t af_type, enum hal_gpio_pull pull, uint8_t od)
{
 80103dc:	b500      	push	{lr}
 80103de:	b087      	sub	sp, #28
    GPIO_InitTypeDef gpio;

    if (!od) {
 80103e0:	b15b      	cbz	r3, 80103fa <hal_gpio_init_af+0x1e>
        gpio.Mode = GPIO_MODE_AF_PP;
    } else {
        gpio.Mode = GPIO_MODE_AF_OD;
 80103e2:	2312      	movs	r3, #18
 80103e4:	9302      	str	r3, [sp, #8]
    }
    gpio.Pull = pull;
 80103e6:	9203      	str	r2, [sp, #12]
#if defined(GPIO_SPEED_FREQ_VERY_HIGH)
    gpio.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80103e8:	2303      	movs	r3, #3
 80103ea:	9304      	str	r3, [sp, #16]
    gpio.Speed = GPIO_SPEED_HIGH;
#else
    gpio.Speed = GPIO_SPEED_FREQ_HIGH;
#endif
#if !MYNEWT_VAL(MCU_STM32F1)
    gpio.Alternate = af_type;
 80103ec:	9105      	str	r1, [sp, #20]
#endif

    return hal_gpio_init_stm(pin, &gpio);
 80103ee:	a901      	add	r1, sp, #4
 80103f0:	f7ff ffc0 	bl	8010374 <hal_gpio_init_stm>
}
 80103f4:	b007      	add	sp, #28
 80103f6:	f85d fb04 	ldr.w	pc, [sp], #4
        gpio.Mode = GPIO_MODE_AF_PP;
 80103fa:	2302      	movs	r3, #2
 80103fc:	9302      	str	r3, [sp, #8]
 80103fe:	e7f2      	b.n	80103e6 <hal_gpio_init_af+0xa>

08010400 <hal_gpio_write>:
 *
 * @param pin Pin to set
 * @param val Value to set pin (0:low 1:high)
 */
void hal_gpio_write(int pin, int val)
{
 8010400:	b510      	push	{r4, lr}
    int port;
    uint32_t mcu_pin_mask;
    GPIO_PinState state;

    port = MCU_GPIO_PIN_PORT(pin);
 8010402:	f3c0 1403 	ubfx	r4, r0, #4, #4
    mcu_pin_mask = GPIO_MASK(pin);
 8010406:	f000 000f 	and.w	r0, r0, #15
 801040a:	2301      	movs	r3, #1
 801040c:	fa03 f000 	lsl.w	r0, r3, r0

    if (val) {
 8010410:	b939      	cbnz	r1, 8010422 <hal_gpio_write+0x22>
        state = GPIO_PIN_SET;
    } else {
        state = GPIO_PIN_RESET;
 8010412:	2200      	movs	r2, #0
    }

    HAL_GPIO_WritePin(portmap[port], mcu_pin_mask, state);
 8010414:	b281      	uxth	r1, r0
 8010416:	4b04      	ldr	r3, [pc, #16]	; (8010428 <hal_gpio_write+0x28>)
 8010418:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801041c:	f001 f8e1 	bl	80115e2 <HAL_GPIO_WritePin>
}
 8010420:	bd10      	pop	{r4, pc}
        state = GPIO_PIN_SET;
 8010422:	461a      	mov	r2, r3
 8010424:	e7f6      	b.n	8010414 <hal_gpio_write+0x14>
 8010426:	bf00      	nop
 8010428:	08018540 	.word	0x08018540

0801042c <hal_gpio_init_out>:
{
 801042c:	b570      	push	{r4, r5, r6, lr}
 801042e:	b086      	sub	sp, #24
    port = MCU_GPIO_PIN_PORT(pin);
 8010430:	f3c0 1503 	ubfx	r5, r0, #4, #4
    if (port >= HAL_GPIO_PORT_COUNT) {
 8010434:	2d07      	cmp	r5, #7
 8010436:	dc1d      	bgt.n	8010474 <hal_gpio_init_out+0x48>
 8010438:	460e      	mov	r6, r1
 801043a:	4604      	mov	r4, r0
    hal_gpio_clk_enable(port);
 801043c:	4628      	mov	r0, r5
 801043e:	f7ff ff2d 	bl	801029c <hal_gpio_clk_enable>
    hal_gpio_write(pin, val);
 8010442:	4631      	mov	r1, r6
 8010444:	4620      	mov	r0, r4
 8010446:	f7ff ffdb 	bl	8010400 <hal_gpio_write>
    cfg.Pin = GPIO_MASK(pin);
 801044a:	f004 000f 	and.w	r0, r4, #15
 801044e:	2301      	movs	r3, #1
 8010450:	fa03 f000 	lsl.w	r0, r3, r0
 8010454:	9001      	str	r0, [sp, #4]
    cfg.Mode = GPIO_MODE_OUTPUT_PP;
 8010456:	9302      	str	r3, [sp, #8]
    cfg.Pull = GPIO_NOPULL;
 8010458:	2400      	movs	r4, #0
 801045a:	9403      	str	r4, [sp, #12]
    cfg.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801045c:	2303      	movs	r3, #3
 801045e:	9304      	str	r3, [sp, #16]
    cfg.Alternate = 0;
 8010460:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(portmap[port], &cfg);
 8010462:	a901      	add	r1, sp, #4
 8010464:	4b05      	ldr	r3, [pc, #20]	; (801047c <hal_gpio_init_out+0x50>)
 8010466:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801046a:	f000 ff39 	bl	80112e0 <HAL_GPIO_Init>
    return 0;
 801046e:	4620      	mov	r0, r4
}
 8010470:	b006      	add	sp, #24
 8010472:	bd70      	pop	{r4, r5, r6, pc}
        return -1;
 8010474:	f04f 30ff 	mov.w	r0, #4294967295
 8010478:	e7fa      	b.n	8010470 <hal_gpio_init_out+0x44>
 801047a:	bf00      	nop
 801047c:	08018540 	.word	0x08018540

08010480 <hal_gpio_read>:
 * @param pin Pin number to read
 *
 * @return int 0: low, 1: high
 */
int hal_gpio_read(int pin)
{
 8010480:	b508      	push	{r3, lr}
    int port;
    uint32_t mcu_pin_mask;

    port = MCU_GPIO_PIN_PORT(pin);
 8010482:	f3c0 1203 	ubfx	r2, r0, #4, #4
    mcu_pin_mask = GPIO_MASK(pin);
 8010486:	f000 000f 	and.w	r0, r0, #15
 801048a:	2101      	movs	r1, #1
 801048c:	4081      	lsls	r1, r0
    return HAL_GPIO_ReadPin(portmap[port], mcu_pin_mask);
 801048e:	b289      	uxth	r1, r1
 8010490:	4b02      	ldr	r3, [pc, #8]	; (801049c <hal_gpio_read+0x1c>)
 8010492:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8010496:	f001 f89d 	bl	80115d4 <HAL_GPIO_ReadPin>
}
 801049a:	bd08      	pop	{r3, pc}
 801049c:	08018540 	.word	0x08018540

080104a0 <hal_gpio_toggle>:
 * @param pin Pin number to toggle
 *
 * @return current pin state int 0: low 1 : high
 */
int hal_gpio_toggle(int pin)
{
 80104a0:	b538      	push	{r3, r4, r5, lr}
 80104a2:	4605      	mov	r5, r0
    int pin_state = (hal_gpio_read(pin) != 1);
 80104a4:	f7ff ffec 	bl	8010480 <hal_gpio_read>
 80104a8:	f110 34ff 	adds.w	r4, r0, #4294967295
 80104ac:	bf18      	it	ne
 80104ae:	2401      	movne	r4, #1
    hal_gpio_write(pin, pin_state);
 80104b0:	4621      	mov	r1, r4
 80104b2:	4628      	mov	r0, r5
 80104b4:	f7ff ffa4 	bl	8010400 <hal_gpio_write>
    return pin_state;
}
 80104b8:	4620      	mov	r0, r4
 80104ba:	bd38      	pop	{r3, r4, r5, pc}

080104bc <os_tick_idle>:
/*
 * XXX implement tickless mode.
 */
void
os_tick_idle(os_time_t ticks)
{
 80104bc:	b508      	push	{r3, lr}
    OS_ASSERT_CRITICAL();
 80104be:	f7fb ffc6 	bl	800c44e <os_arch_in_critical>
 80104c2:	b118      	cbz	r0, 80104cc <os_tick_idle+0x10>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80104c4:	f3bf 8f4f 	dsb	sy
    __DSB();
    __WFI();
 80104c8:	bf30      	wfi
}
 80104ca:	bd08      	pop	{r3, pc}
    OS_ASSERT_CRITICAL();
 80104cc:	2300      	movs	r3, #0
 80104ce:	461a      	mov	r2, r3
 80104d0:	4619      	mov	r1, r3
 80104d2:	4618      	mov	r0, r3
 80104d4:	f7fc f87e 	bl	800c5d4 <__assert_func>

080104d8 <os_tick_init>:
void
os_tick_init(uint32_t os_ticks_per_sec, int prio)
{
    uint32_t reload_val;

    reload_val = ((uint64_t)SystemCoreClock / os_ticks_per_sec) - 1;
 80104d8:	4b0b      	ldr	r3, [pc, #44]	; (8010508 <os_tick_init+0x30>)
 80104da:	681b      	ldr	r3, [r3, #0]
 80104dc:	fbb3 f0f0 	udiv	r0, r3, r0
 80104e0:	3801      	subs	r0, #1

    /* Set the system time ticker up */
    SysTick->LOAD = reload_val;
 80104e2:	4b0a      	ldr	r3, [pc, #40]	; (801050c <os_tick_init+0x34>)
 80104e4:	6058      	str	r0, [r3, #4]
    SysTick->VAL = 0;
 80104e6:	2200      	movs	r2, #0
 80104e8:	609a      	str	r2, [r3, #8]
    SysTick->CTRL = 0x0007;
 80104ea:	2207      	movs	r2, #7
 80104ec:	601a      	str	r2, [r3, #0]
 80104ee:	0109      	lsls	r1, r1, #4
 80104f0:	b2c9      	uxtb	r1, r1
 80104f2:	f503 634f 	add.w	r3, r3, #3312	; 0xcf0
 80104f6:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23

    /*
     * Keep clocking debug even when CPU is sleeping, stopped or in standby.
     */
#if !MYNEWT_VAL(MCU_STM32F0)
    DBGMCU->CR |= (DBGMCU_CR_DBG_SLEEP | DBGMCU_CR_DBG_STOP | DBGMCU_CR_DBG_STANDBY);
 80104fa:	4a05      	ldr	r2, [pc, #20]	; (8010510 <os_tick_init+0x38>)
 80104fc:	6853      	ldr	r3, [r2, #4]
 80104fe:	f043 0307 	orr.w	r3, r3, #7
 8010502:	6053      	str	r3, [r2, #4]
#else
    DBGMCU->CR |= (DBGMCU_CR_DBG_STOP | DBGMCU_CR_DBG_STANDBY);
#endif
}
 8010504:	4770      	bx	lr
 8010506:	bf00      	nop
 8010508:	20000188 	.word	0x20000188
 801050c:	e000e010 	.word	0xe000e010
 8010510:	e0042000 	.word	0xe0042000

08010514 <hal_debugger_connected>:
hal_debugger_connected(void)
{
#if (__CORTEX_M == 0)
    return 0;
#else
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
 8010514:	4b02      	ldr	r3, [pc, #8]	; (8010520 <hal_debugger_connected+0xc>)
 8010516:	6818      	ldr	r0, [r3, #0]
#endif
}
 8010518:	f000 0001 	and.w	r0, r0, #1
 801051c:	4770      	bx	lr
 801051e:	bf00      	nop
 8010520:	e000edf0 	.word	0xe000edf0

08010524 <hal_system_reset>:
{
 8010524:	b508      	push	{r3, lr}
        if (hal_debugger_connected()) {
 8010526:	f7ff fff5 	bl	8010514 <hal_debugger_connected>
 801052a:	b100      	cbz	r0, 801052e <hal_system_reset+0xa>
            asm("bkpt");
 801052c:	be00      	bkpt	0x0000
 801052e:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8010532:	4905      	ldr	r1, [pc, #20]	; (8010548 <hal_system_reset+0x24>)
 8010534:	68ca      	ldr	r2, [r1, #12]
 8010536:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 801053a:	4b04      	ldr	r3, [pc, #16]	; (801054c <hal_system_reset+0x28>)
 801053c:	4313      	orrs	r3, r2
 801053e:	60cb      	str	r3, [r1, #12]
 8010540:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8010544:	bf00      	nop
 8010546:	e7fd      	b.n	8010544 <hal_system_reset+0x20>
 8010548:	e000ed00 	.word	0xe000ed00
 801054c:	05fa0004 	.word	0x05fa0004

08010550 <HAL_GetTick>:

uint32_t
HAL_GetTick(void)
{
 8010550:	b508      	push	{r3, lr}
    return os_time_get();
 8010552:	f7fd fb3b 	bl	800dbcc <os_time_get>
}
 8010556:	bd08      	pop	{r3, pc}

08010558 <stm32_tmr_reg_irq>:
  if ((int32_t)(IRQn) >= 0)
 8010558:	2800      	cmp	r0, #0
 801055a:	db17      	blt.n	801058c <stm32_tmr_reg_irq+0x34>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801055c:	f100 4360 	add.w	r3, r0, #3758096384	; 0xe0000000
 8010560:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8010564:	22f0      	movs	r2, #240	; 0xf0
 8010566:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  uint32_t vectors = (uint32_t )SCB->VTOR;
 801056a:	4b0c      	ldr	r3, [pc, #48]	; (801059c <stm32_tmr_reg_irq+0x44>)
 801056c:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 801056e:	f100 0210 	add.w	r2, r0, #16
 8010572:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  if ((int32_t)(IRQn) >= 0)
 8010576:	2800      	cmp	r0, #0
 8010578:	db07      	blt.n	801058a <stm32_tmr_reg_irq+0x32>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801057a:	f000 021f 	and.w	r2, r0, #31
 801057e:	0940      	lsrs	r0, r0, #5
 8010580:	2301      	movs	r3, #1
 8010582:	4093      	lsls	r3, r2
 8010584:	4a06      	ldr	r2, [pc, #24]	; (80105a0 <stm32_tmr_reg_irq+0x48>)
 8010586:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
stm32_tmr_reg_irq(IRQn_Type irqn, uint32_t func)
{
    NVIC_SetPriority(irqn, (1 << __NVIC_PRIO_BITS) - 1);
    NVIC_SetVector(irqn, func);
    NVIC_EnableIRQ(irqn);
}
 801058a:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801058c:	f000 020f 	and.w	r2, r0, #15
 8010590:	4b04      	ldr	r3, [pc, #16]	; (80105a4 <stm32_tmr_reg_irq+0x4c>)
 8010592:	4413      	add	r3, r2
 8010594:	22f0      	movs	r2, #240	; 0xf0
 8010596:	761a      	strb	r2, [r3, #24]
 8010598:	e7e7      	b.n	801056a <stm32_tmr_reg_irq+0x12>
 801059a:	bf00      	nop
 801059c:	e000ed00 	.word	0xe000ed00
 80105a0:	e000e100 	.word	0xe000e100
 80105a4:	e000ecfc 	.word	0xe000ecfc

080105a8 <hal_timer_cnt>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80105a8:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80105ac:	b672      	cpsid	i
{
    uint32_t cnt;
    int sr;

    __HAL_DISABLE_INTERRUPTS(sr);
    if (tmr->sht_regs->SR & TIM_SR_UIF) {
 80105ae:	6803      	ldr	r3, [r0, #0]
 80105b0:	6919      	ldr	r1, [r3, #16]
 80105b2:	f011 0f01 	tst.w	r1, #1
 80105b6:	d007      	beq.n	80105c8 <hal_timer_cnt+0x20>
        /*
         * Just overflowed
         */
        tmr->sht_oflow += STM32_OFLOW_VALUE;
 80105b8:	6841      	ldr	r1, [r0, #4]
 80105ba:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
 80105be:	6041      	str	r1, [r0, #4]
        tmr->sht_regs->SR &= ~TIM_SR_UIF;
 80105c0:	6919      	ldr	r1, [r3, #16]
 80105c2:	f021 0101 	bic.w	r1, r1, #1
 80105c6:	6119      	str	r1, [r3, #16]
    }
    cnt = tmr->sht_oflow + tmr->sht_regs->CNT;
 80105c8:	6843      	ldr	r3, [r0, #4]
 80105ca:	6801      	ldr	r1, [r0, #0]
 80105cc:	6a48      	ldr	r0, [r1, #36]	; 0x24
 80105ce:	4418      	add	r0, r3
    __HAL_ENABLE_INTERRUPTS(sr);
 80105d0:	b902      	cbnz	r2, 80105d4 <hal_timer_cnt+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
 80105d2:	b662      	cpsie	i

    return cnt;
}
 80105d4:	4770      	bx	lr
	...

080105d8 <stm32_hw_setup>:
{
 80105d8:	b530      	push	{r4, r5, lr}
 80105da:	b089      	sub	sp, #36	; 0x24
    switch (num) {
 80105dc:	b9d8      	cbnz	r0, 8010616 <stm32_hw_setup+0x3e>
 80105de:	460c      	mov	r4, r1
        func = (uint32_t)stm32_tmr0_irq;
 80105e0:	4d4e      	ldr	r5, [pc, #312]	; (801071c <stm32_hw_setup+0x144>)
    if (regs == TIM1) {
 80105e2:	4b4f      	ldr	r3, [pc, #316]	; (8010720 <stm32_hw_setup+0x148>)
 80105e4:	4299      	cmp	r1, r3
 80105e6:	d01c      	beq.n	8010622 <stm32_hw_setup+0x4a>
    if (regs == TIM2) {
 80105e8:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 80105ec:	d028      	beq.n	8010640 <stm32_hw_setup+0x68>
    if (regs == TIM3) {
 80105ee:	4b4d      	ldr	r3, [pc, #308]	; (8010724 <stm32_hw_setup+0x14c>)
 80105f0:	429c      	cmp	r4, r3
 80105f2:	d034      	beq.n	801065e <stm32_hw_setup+0x86>
    if (regs == TIM4) {
 80105f4:	4b4c      	ldr	r3, [pc, #304]	; (8010728 <stm32_hw_setup+0x150>)
 80105f6:	429c      	cmp	r4, r3
 80105f8:	d040      	beq.n	801067c <stm32_hw_setup+0xa4>
    if (regs == TIM8) {
 80105fa:	4b4c      	ldr	r3, [pc, #304]	; (801072c <stm32_hw_setup+0x154>)
 80105fc:	429c      	cmp	r4, r3
 80105fe:	d04c      	beq.n	801069a <stm32_hw_setup+0xc2>
    if (regs == TIM15) {
 8010600:	4b4b      	ldr	r3, [pc, #300]	; (8010730 <stm32_hw_setup+0x158>)
 8010602:	429c      	cmp	r4, r3
 8010604:	d05c      	beq.n	80106c0 <stm32_hw_setup+0xe8>
    if (regs == TIM16) {
 8010606:	4b4b      	ldr	r3, [pc, #300]	; (8010734 <stm32_hw_setup+0x15c>)
 8010608:	429c      	cmp	r4, r3
 801060a:	d068      	beq.n	80106de <stm32_hw_setup+0x106>
    if (regs == TIM17) {
 801060c:	4b4a      	ldr	r3, [pc, #296]	; (8010738 <stm32_hw_setup+0x160>)
 801060e:	429c      	cmp	r4, r3
 8010610:	d074      	beq.n	80106fc <stm32_hw_setup+0x124>
}
 8010612:	b009      	add	sp, #36	; 0x24
 8010614:	bd30      	pop	{r4, r5, pc}
        assert(0);
 8010616:	2300      	movs	r3, #0
 8010618:	461a      	mov	r2, r3
 801061a:	4619      	mov	r1, r3
 801061c:	4618      	mov	r0, r3
 801061e:	f7fb ffd9 	bl	800c5d4 <__assert_func>
        stm32_tmr_reg_irq(TIM1_UP_TIM16_IRQn, func);
 8010622:	4629      	mov	r1, r5
 8010624:	2019      	movs	r0, #25
 8010626:	f7ff ff97 	bl	8010558 <stm32_tmr_reg_irq>
        __HAL_RCC_TIM1_CLK_ENABLE();
 801062a:	4b44      	ldr	r3, [pc, #272]	; (801073c <stm32_hw_setup+0x164>)
 801062c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 801062e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010632:	661a      	str	r2, [r3, #96]	; 0x60
 8010634:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010636:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801063a:	9300      	str	r3, [sp, #0]
 801063c:	9b00      	ldr	r3, [sp, #0]
 801063e:	e7d3      	b.n	80105e8 <stm32_hw_setup+0x10>
        stm32_tmr_reg_irq(TIM2_IRQn, func);
 8010640:	4629      	mov	r1, r5
 8010642:	201c      	movs	r0, #28
 8010644:	f7ff ff88 	bl	8010558 <stm32_tmr_reg_irq>
        __HAL_RCC_TIM2_CLK_ENABLE();
 8010648:	4b3c      	ldr	r3, [pc, #240]	; (801073c <stm32_hw_setup+0x164>)
 801064a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801064c:	f042 0201 	orr.w	r2, r2, #1
 8010650:	659a      	str	r2, [r3, #88]	; 0x58
 8010652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010654:	f003 0301 	and.w	r3, r3, #1
 8010658:	9301      	str	r3, [sp, #4]
 801065a:	9b01      	ldr	r3, [sp, #4]
 801065c:	e7c7      	b.n	80105ee <stm32_hw_setup+0x16>
        stm32_tmr_reg_irq(TIM3_IRQn, func);
 801065e:	4629      	mov	r1, r5
 8010660:	201d      	movs	r0, #29
 8010662:	f7ff ff79 	bl	8010558 <stm32_tmr_reg_irq>
        __HAL_RCC_TIM3_CLK_ENABLE();
 8010666:	4b35      	ldr	r3, [pc, #212]	; (801073c <stm32_hw_setup+0x164>)
 8010668:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801066a:	f042 0202 	orr.w	r2, r2, #2
 801066e:	659a      	str	r2, [r3, #88]	; 0x58
 8010670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010672:	f003 0302 	and.w	r3, r3, #2
 8010676:	9302      	str	r3, [sp, #8]
 8010678:	9b02      	ldr	r3, [sp, #8]
 801067a:	e7bb      	b.n	80105f4 <stm32_hw_setup+0x1c>
        stm32_tmr_reg_irq(TIM4_IRQn, func);
 801067c:	4629      	mov	r1, r5
 801067e:	201e      	movs	r0, #30
 8010680:	f7ff ff6a 	bl	8010558 <stm32_tmr_reg_irq>
        __HAL_RCC_TIM4_CLK_ENABLE();
 8010684:	4b2d      	ldr	r3, [pc, #180]	; (801073c <stm32_hw_setup+0x164>)
 8010686:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010688:	f042 0204 	orr.w	r2, r2, #4
 801068c:	659a      	str	r2, [r3, #88]	; 0x58
 801068e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010690:	f003 0304 	and.w	r3, r3, #4
 8010694:	9303      	str	r3, [sp, #12]
 8010696:	9b03      	ldr	r3, [sp, #12]
 8010698:	e7af      	b.n	80105fa <stm32_hw_setup+0x22>
        stm32_tmr_reg_irq(TIM8_CC_IRQn, func);
 801069a:	4629      	mov	r1, r5
 801069c:	202e      	movs	r0, #46	; 0x2e
 801069e:	f7ff ff5b 	bl	8010558 <stm32_tmr_reg_irq>
        stm32_tmr_reg_irq(TIM8_UP_IRQn, func);
 80106a2:	4629      	mov	r1, r5
 80106a4:	202c      	movs	r0, #44	; 0x2c
 80106a6:	f7ff ff57 	bl	8010558 <stm32_tmr_reg_irq>
        __HAL_RCC_TIM8_CLK_ENABLE();
 80106aa:	4b24      	ldr	r3, [pc, #144]	; (801073c <stm32_hw_setup+0x164>)
 80106ac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80106ae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80106b2:	661a      	str	r2, [r3, #96]	; 0x60
 80106b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80106b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80106ba:	9304      	str	r3, [sp, #16]
 80106bc:	9b04      	ldr	r3, [sp, #16]
 80106be:	e79f      	b.n	8010600 <stm32_hw_setup+0x28>
        stm32_tmr_reg_irq(TIM1_BRK_TIM15_IRQn, func);
 80106c0:	4629      	mov	r1, r5
 80106c2:	2018      	movs	r0, #24
 80106c4:	f7ff ff48 	bl	8010558 <stm32_tmr_reg_irq>
        __HAL_RCC_TIM15_CLK_ENABLE();
 80106c8:	4b1c      	ldr	r3, [pc, #112]	; (801073c <stm32_hw_setup+0x164>)
 80106ca:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80106cc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80106d0:	661a      	str	r2, [r3, #96]	; 0x60
 80106d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80106d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80106d8:	9305      	str	r3, [sp, #20]
 80106da:	9b05      	ldr	r3, [sp, #20]
 80106dc:	e793      	b.n	8010606 <stm32_hw_setup+0x2e>
        stm32_tmr_reg_irq(TIM1_UP_TIM16_IRQn, func);
 80106de:	4629      	mov	r1, r5
 80106e0:	2019      	movs	r0, #25
 80106e2:	f7ff ff39 	bl	8010558 <stm32_tmr_reg_irq>
        __HAL_RCC_TIM16_CLK_ENABLE();
 80106e6:	4b15      	ldr	r3, [pc, #84]	; (801073c <stm32_hw_setup+0x164>)
 80106e8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80106ea:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80106ee:	661a      	str	r2, [r3, #96]	; 0x60
 80106f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80106f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80106f6:	9306      	str	r3, [sp, #24]
 80106f8:	9b06      	ldr	r3, [sp, #24]
 80106fa:	e787      	b.n	801060c <stm32_hw_setup+0x34>
        stm32_tmr_reg_irq(TIM1_TRG_COM_TIM17_IRQn, func);
 80106fc:	4629      	mov	r1, r5
 80106fe:	201a      	movs	r0, #26
 8010700:	f7ff ff2a 	bl	8010558 <stm32_tmr_reg_irq>
        __HAL_RCC_TIM17_CLK_ENABLE();
 8010704:	4b0d      	ldr	r3, [pc, #52]	; (801073c <stm32_hw_setup+0x164>)
 8010706:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8010708:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 801070c:	661a      	str	r2, [r3, #96]	; 0x60
 801070e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010710:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010714:	9307      	str	r3, [sp, #28]
 8010716:	9b07      	ldr	r3, [sp, #28]
}
 8010718:	e77b      	b.n	8010612 <stm32_hw_setup+0x3a>
 801071a:	bf00      	nop
 801071c:	080107d1 	.word	0x080107d1
 8010720:	40012c00 	.word	0x40012c00
 8010724:	40000400 	.word	0x40000400
 8010728:	40000800 	.word	0x40000800
 801072c:	40013400 	.word	0x40013400
 8010730:	40014000 	.word	0x40014000
 8010734:	40014400 	.word	0x40014400
 8010738:	40014800 	.word	0x40014800
 801073c:	40021000 	.word	0x40021000

08010740 <stm32_tmr_cbs>:
{
 8010740:	b538      	push	{r3, r4, r5, lr}
 8010742:	4605      	mov	r5, r0
    while ((ht = TAILQ_FIRST(&tmr->sht_timers)) != NULL) {
 8010744:	e009      	b.n	801075a <stm32_tmr_cbs+0x1a>
            TAILQ_REMOVE(&tmr->sht_timers, ht, link);
 8010746:	6963      	ldr	r3, [r4, #20]
 8010748:	60eb      	str	r3, [r5, #12]
 801074a:	6963      	ldr	r3, [r4, #20]
 801074c:	6922      	ldr	r2, [r4, #16]
 801074e:	601a      	str	r2, [r3, #0]
            ht->link.tqe_prev = NULL;
 8010750:	2300      	movs	r3, #0
 8010752:	6163      	str	r3, [r4, #20]
            ht->cb_func(ht->cb_arg);
 8010754:	6863      	ldr	r3, [r4, #4]
 8010756:	68a0      	ldr	r0, [r4, #8]
 8010758:	4798      	blx	r3
    while ((ht = TAILQ_FIRST(&tmr->sht_timers)) != NULL) {
 801075a:	68ac      	ldr	r4, [r5, #8]
 801075c:	b164      	cbz	r4, 8010778 <stm32_tmr_cbs+0x38>
        cnt = hal_timer_cnt(tmr);
 801075e:	4628      	mov	r0, r5
 8010760:	f7ff ff22 	bl	80105a8 <hal_timer_cnt>
        if (((int32_t)(cnt - ht->expiry)) >= 0) {
 8010764:	68e3      	ldr	r3, [r4, #12]
 8010766:	1ac0      	subs	r0, r0, r3
 8010768:	2800      	cmp	r0, #0
 801076a:	db05      	blt.n	8010778 <stm32_tmr_cbs+0x38>
            TAILQ_REMOVE(&tmr->sht_timers, ht, link);
 801076c:	6923      	ldr	r3, [r4, #16]
 801076e:	2b00      	cmp	r3, #0
 8010770:	d0e9      	beq.n	8010746 <stm32_tmr_cbs+0x6>
 8010772:	6962      	ldr	r2, [r4, #20]
 8010774:	615a      	str	r2, [r3, #20]
 8010776:	e7e8      	b.n	801074a <stm32_tmr_cbs+0xa>
    ht = TAILQ_FIRST(&tmr->sht_timers);
 8010778:	68ab      	ldr	r3, [r5, #8]
    if (ht) {
 801077a:	b11b      	cbz	r3, 8010784 <stm32_tmr_cbs+0x44>
        tmr->sht_regs->CCR1 = ht->expiry;
 801077c:	682a      	ldr	r2, [r5, #0]
 801077e:	68db      	ldr	r3, [r3, #12]
 8010780:	6353      	str	r3, [r2, #52]	; 0x34
}
 8010782:	bd38      	pop	{r3, r4, r5, pc}
        TIM_CCxChannelCmd(tmr->sht_regs, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8010784:	2200      	movs	r2, #0
 8010786:	4611      	mov	r1, r2
 8010788:	6828      	ldr	r0, [r5, #0]
 801078a:	f001 f80d 	bl	80117a8 <TIM_CCxChannelCmd>
        tmr->sht_regs->DIER &= ~TIM_DIER_CC1IE;
 801078e:	682a      	ldr	r2, [r5, #0]
 8010790:	68d3      	ldr	r3, [r2, #12]
 8010792:	f023 0302 	bic.w	r3, r3, #2
 8010796:	60d3      	str	r3, [r2, #12]
}
 8010798:	e7f3      	b.n	8010782 <stm32_tmr_cbs+0x42>

0801079a <stm32_tmr_irq>:
{
 801079a:	b538      	push	{r3, r4, r5, lr}
 801079c:	4605      	mov	r5, r0
    sr = tmr->sht_regs->SR;
 801079e:	6803      	ldr	r3, [r0, #0]
 80107a0:	691b      	ldr	r3, [r3, #16]
    if (sr & TIM_SR_UIF) {
 80107a2:	f013 0f01 	tst.w	r3, #1
 80107a6:	d00b      	beq.n	80107c0 <stm32_tmr_irq+0x26>
        tmr->sht_oflow += STM32_OFLOW_VALUE;
 80107a8:	6842      	ldr	r2, [r0, #4]
 80107aa:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 80107ae:	6042      	str	r2, [r0, #4]
        clr |= TIM_SR_UIF;
 80107b0:	2401      	movs	r4, #1
    if (sr & TIM_SR_CC1IF) {
 80107b2:	f013 0f02 	tst.w	r3, #2
 80107b6:	d105      	bne.n	80107c4 <stm32_tmr_irq+0x2a>
    tmr->sht_regs->SR = ~clr;
 80107b8:	682b      	ldr	r3, [r5, #0]
 80107ba:	43e4      	mvns	r4, r4
 80107bc:	611c      	str	r4, [r3, #16]
}
 80107be:	bd38      	pop	{r3, r4, r5, pc}
    uint32_t clr = 0;
 80107c0:	2400      	movs	r4, #0
 80107c2:	e7f6      	b.n	80107b2 <stm32_tmr_irq+0x18>
        clr |= TIM_SR_CC1IF;
 80107c4:	f044 0402 	orr.w	r4, r4, #2
        stm32_tmr_cbs(tmr);
 80107c8:	4628      	mov	r0, r5
 80107ca:	f7ff ffb9 	bl	8010740 <stm32_tmr_cbs>
 80107ce:	e7f3      	b.n	80107b8 <stm32_tmr_irq+0x1e>

080107d0 <stm32_tmr0_irq>:
{
 80107d0:	b508      	push	{r3, lr}
    stm32_tmr_irq(&stm32_tmr0);
 80107d2:	4802      	ldr	r0, [pc, #8]	; (80107dc <stm32_tmr0_irq+0xc>)
 80107d4:	f7ff ffe1 	bl	801079a <stm32_tmr_irq>
}
 80107d8:	bd08      	pop	{r3, pc}
 80107da:	bf00      	nop
 80107dc:	20003994 	.word	0x20003994

080107e0 <hal_timer_init>:
    if (num >= STM32_HAL_TIMER_MAX || !(tmr = stm32_tmr_devs[num]) ||
 80107e0:	2802      	cmp	r0, #2
 80107e2:	dc78      	bgt.n	80108d6 <hal_timer_init+0xf6>
 80107e4:	4b42      	ldr	r3, [pc, #264]	; (80108f0 <hal_timer_init+0x110>)
 80107e6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d076      	beq.n	80108dc <hal_timer_init+0xfc>
 80107ee:	2900      	cmp	r1, #0
 80107f0:	d077      	beq.n	80108e2 <hal_timer_init+0x102>
    regs = tmr->sht_regs = (TIM_TypeDef *)cfg;
 80107f2:	6019      	str	r1, [r3, #0]
    if (!IS_TIM_CC1_INSTANCE(regs)) {
 80107f4:	4b3f      	ldr	r3, [pc, #252]	; (80108f4 <hal_timer_init+0x114>)
 80107f6:	4299      	cmp	r1, r3
 80107f8:	d01e      	beq.n	8010838 <hal_timer_init+0x58>
 80107fa:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 80107fe:	d01b      	beq.n	8010838 <hal_timer_init+0x58>
 8010800:	f5a3 3394 	sub.w	r3, r3, #75776	; 0x12800
 8010804:	4299      	cmp	r1, r3
 8010806:	d017      	beq.n	8010838 <hal_timer_init+0x58>
 8010808:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801080c:	4299      	cmp	r1, r3
 801080e:	d013      	beq.n	8010838 <hal_timer_init+0x58>
 8010810:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010814:	4299      	cmp	r1, r3
 8010816:	d00f      	beq.n	8010838 <hal_timer_init+0x58>
 8010818:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 801081c:	4299      	cmp	r1, r3
 801081e:	d00b      	beq.n	8010838 <hal_timer_init+0x58>
 8010820:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8010824:	4299      	cmp	r1, r3
 8010826:	d007      	beq.n	8010838 <hal_timer_init+0x58>
 8010828:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801082c:	4299      	cmp	r1, r3
 801082e:	d003      	beq.n	8010838 <hal_timer_init+0x58>
 8010830:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010834:	4299      	cmp	r1, r3
 8010836:	d157      	bne.n	80108e8 <hal_timer_init+0x108>
{
 8010838:	b510      	push	{r4, lr}
 801083a:	460c      	mov	r4, r1
    stm32_hw_setup(num, regs);
 801083c:	f7ff fecc 	bl	80105d8 <stm32_hw_setup>
    if (regs == TIM1) {
 8010840:	4b2c      	ldr	r3, [pc, #176]	; (80108f4 <hal_timer_init+0x114>)
 8010842:	429c      	cmp	r4, r3
 8010844:	d016      	beq.n	8010874 <hal_timer_init+0x94>
    if (regs == TIM2) {
 8010846:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 801084a:	d019      	beq.n	8010880 <hal_timer_init+0xa0>
    if (regs == TIM3) {
 801084c:	4b2a      	ldr	r3, [pc, #168]	; (80108f8 <hal_timer_init+0x118>)
 801084e:	429c      	cmp	r4, r3
 8010850:	d01c      	beq.n	801088c <hal_timer_init+0xac>
    if (regs == TIM4) {
 8010852:	4b2a      	ldr	r3, [pc, #168]	; (80108fc <hal_timer_init+0x11c>)
 8010854:	429c      	cmp	r4, r3
 8010856:	d01f      	beq.n	8010898 <hal_timer_init+0xb8>
    if (regs == TIM8) {
 8010858:	4b29      	ldr	r3, [pc, #164]	; (8010900 <hal_timer_init+0x120>)
 801085a:	429c      	cmp	r4, r3
 801085c:	d022      	beq.n	80108a4 <hal_timer_init+0xc4>
    if (regs == TIM15) {
 801085e:	4b29      	ldr	r3, [pc, #164]	; (8010904 <hal_timer_init+0x124>)
 8010860:	429c      	cmp	r4, r3
 8010862:	d025      	beq.n	80108b0 <hal_timer_init+0xd0>
    if (regs == TIM16) {
 8010864:	4b28      	ldr	r3, [pc, #160]	; (8010908 <hal_timer_init+0x128>)
 8010866:	429c      	cmp	r4, r3
 8010868:	d028      	beq.n	80108bc <hal_timer_init+0xdc>
    if (regs == TIM17) {
 801086a:	4b28      	ldr	r3, [pc, #160]	; (801090c <hal_timer_init+0x12c>)
 801086c:	429c      	cmp	r4, r3
 801086e:	d02b      	beq.n	80108c8 <hal_timer_init+0xe8>
    return 0;
 8010870:	2000      	movs	r0, #0
}
 8010872:	bd10      	pop	{r4, pc}
        __HAL_DBGMCU_FREEZE_TIM1();
 8010874:	4a26      	ldr	r2, [pc, #152]	; (8010910 <hal_timer_init+0x130>)
 8010876:	6913      	ldr	r3, [r2, #16]
 8010878:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801087c:	6113      	str	r3, [r2, #16]
 801087e:	e7e2      	b.n	8010846 <hal_timer_init+0x66>
        __HAL_DBGMCU_FREEZE_TIM2();
 8010880:	4a23      	ldr	r2, [pc, #140]	; (8010910 <hal_timer_init+0x130>)
 8010882:	6893      	ldr	r3, [r2, #8]
 8010884:	f043 0301 	orr.w	r3, r3, #1
 8010888:	6093      	str	r3, [r2, #8]
 801088a:	e7df      	b.n	801084c <hal_timer_init+0x6c>
        __HAL_DBGMCU_FREEZE_TIM3();
 801088c:	4a20      	ldr	r2, [pc, #128]	; (8010910 <hal_timer_init+0x130>)
 801088e:	6893      	ldr	r3, [r2, #8]
 8010890:	f043 0302 	orr.w	r3, r3, #2
 8010894:	6093      	str	r3, [r2, #8]
 8010896:	e7dc      	b.n	8010852 <hal_timer_init+0x72>
        __HAL_DBGMCU_FREEZE_TIM4();
 8010898:	4a1d      	ldr	r2, [pc, #116]	; (8010910 <hal_timer_init+0x130>)
 801089a:	6893      	ldr	r3, [r2, #8]
 801089c:	f043 0304 	orr.w	r3, r3, #4
 80108a0:	6093      	str	r3, [r2, #8]
 80108a2:	e7d9      	b.n	8010858 <hal_timer_init+0x78>
        __HAL_DBGMCU_FREEZE_TIM8();
 80108a4:	4a1a      	ldr	r2, [pc, #104]	; (8010910 <hal_timer_init+0x130>)
 80108a6:	6913      	ldr	r3, [r2, #16]
 80108a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80108ac:	6113      	str	r3, [r2, #16]
 80108ae:	e7d6      	b.n	801085e <hal_timer_init+0x7e>
        __HAL_DBGMCU_FREEZE_TIM15();
 80108b0:	4a17      	ldr	r2, [pc, #92]	; (8010910 <hal_timer_init+0x130>)
 80108b2:	6913      	ldr	r3, [r2, #16]
 80108b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80108b8:	6113      	str	r3, [r2, #16]
 80108ba:	e7d3      	b.n	8010864 <hal_timer_init+0x84>
        __HAL_DBGMCU_FREEZE_TIM16();
 80108bc:	4a14      	ldr	r2, [pc, #80]	; (8010910 <hal_timer_init+0x130>)
 80108be:	6913      	ldr	r3, [r2, #16]
 80108c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80108c4:	6113      	str	r3, [r2, #16]
 80108c6:	e7d0      	b.n	801086a <hal_timer_init+0x8a>
        __HAL_DBGMCU_FREEZE_TIM17();
 80108c8:	4a11      	ldr	r2, [pc, #68]	; (8010910 <hal_timer_init+0x130>)
 80108ca:	6913      	ldr	r3, [r2, #16]
 80108cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80108d0:	6113      	str	r3, [r2, #16]
    return 0;
 80108d2:	2000      	movs	r0, #0
 80108d4:	e7cd      	b.n	8010872 <hal_timer_init+0x92>
        return -1;
 80108d6:	f04f 30ff 	mov.w	r0, #4294967295
 80108da:	4770      	bx	lr
 80108dc:	f04f 30ff 	mov.w	r0, #4294967295
 80108e0:	4770      	bx	lr
 80108e2:	f04f 30ff 	mov.w	r0, #4294967295
 80108e6:	4770      	bx	lr
        return -1;
 80108e8:	f04f 30ff 	mov.w	r0, #4294967295
}
 80108ec:	4770      	bx	lr
 80108ee:	bf00      	nop
 80108f0:	08018560 	.word	0x08018560
 80108f4:	40012c00 	.word	0x40012c00
 80108f8:	40000400 	.word	0x40000400
 80108fc:	40000800 	.word	0x40000800
 8010900:	40013400 	.word	0x40013400
 8010904:	40014000 	.word	0x40014000
 8010908:	40014400 	.word	0x40014400
 801090c:	40014800 	.word	0x40014800
 8010910:	e0042000 	.word	0xe0042000

08010914 <hal_timer_config>:
    if (num >= STM32_HAL_TIMER_MAX || !(tmr = stm32_tmr_devs[num])) {
 8010914:	2802      	cmp	r0, #2
 8010916:	dc4e      	bgt.n	80109b6 <hal_timer_config+0xa2>
{
 8010918:	b530      	push	{r4, r5, lr}
 801091a:	b087      	sub	sp, #28
    if (num >= STM32_HAL_TIMER_MAX || !(tmr = stm32_tmr_devs[num])) {
 801091c:	4b2c      	ldr	r3, [pc, #176]	; (80109d0 <hal_timer_config+0xbc>)
 801091e:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 8010922:	2d00      	cmp	r5, #0
 8010924:	d04a      	beq.n	80109bc <hal_timer_config+0xa8>
    if (!IS_TIM_CC1_INSTANCE(tmr->sht_regs)) {
 8010926:	6828      	ldr	r0, [r5, #0]
 8010928:	4b2a      	ldr	r3, [pc, #168]	; (80109d4 <hal_timer_config+0xc0>)
 801092a:	4298      	cmp	r0, r3
 801092c:	d01e      	beq.n	801096c <hal_timer_config+0x58>
 801092e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8010932:	d01b      	beq.n	801096c <hal_timer_config+0x58>
 8010934:	f5a3 3394 	sub.w	r3, r3, #75776	; 0x12800
 8010938:	4298      	cmp	r0, r3
 801093a:	d017      	beq.n	801096c <hal_timer_config+0x58>
 801093c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010940:	4298      	cmp	r0, r3
 8010942:	d013      	beq.n	801096c <hal_timer_config+0x58>
 8010944:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010948:	4298      	cmp	r0, r3
 801094a:	d00f      	beq.n	801096c <hal_timer_config+0x58>
 801094c:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 8010950:	4298      	cmp	r0, r3
 8010952:	d00b      	beq.n	801096c <hal_timer_config+0x58>
 8010954:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8010958:	4298      	cmp	r0, r3
 801095a:	d007      	beq.n	801096c <hal_timer_config+0x58>
 801095c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010960:	4298      	cmp	r0, r3
 8010962:	d003      	beq.n	801096c <hal_timer_config+0x58>
 8010964:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010968:	4298      	cmp	r0, r3
 801096a:	d12a      	bne.n	80109c2 <hal_timer_config+0xae>
 801096c:	460c      	mov	r4, r1
    prescaler = stm32_hal_timer_get_freq(tmr->sht_regs) / freq_hz;
 801096e:	f000 ff51 	bl	8011814 <stm32_hal_timer_get_freq>
 8010972:	fbb0 f0f4 	udiv	r0, r0, r4
    if (prescaler > 0xffff) {
 8010976:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 801097a:	d225      	bcs.n	80109c8 <hal_timer_config+0xb4>
    memset(&init, 0, sizeof(init));
 801097c:	2400      	movs	r4, #0
 801097e:	9401      	str	r4, [sp, #4]
 8010980:	9403      	str	r4, [sp, #12]
 8010982:	9404      	str	r4, [sp, #16]
 8010984:	9405      	str	r4, [sp, #20]
    init.Period = 0xffff;
 8010986:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801098a:	9302      	str	r3, [sp, #8]
    init.Prescaler = prescaler;
 801098c:	9000      	str	r0, [sp, #0]
    tmr->sht_regs->CR1 = TIM_CR1_URS;
 801098e:	682b      	ldr	r3, [r5, #0]
 8010990:	2204      	movs	r2, #4
 8010992:	601a      	str	r2, [r3, #0]
    tmr->sht_regs->DIER = TIM_DIER_UIE;
 8010994:	682b      	ldr	r3, [r5, #0]
 8010996:	2201      	movs	r2, #1
 8010998:	60da      	str	r2, [r3, #12]
    TIM_Base_SetConfig(tmr->sht_regs, &init);
 801099a:	4669      	mov	r1, sp
 801099c:	6828      	ldr	r0, [r5, #0]
 801099e:	f000 fe9f 	bl	80116e0 <TIM_Base_SetConfig>
    tmr->sht_regs->SR = 0;
 80109a2:	682b      	ldr	r3, [r5, #0]
 80109a4:	611c      	str	r4, [r3, #16]
    tmr->sht_regs->CR1 |= TIM_CR1_CEN;
 80109a6:	682a      	ldr	r2, [r5, #0]
 80109a8:	6813      	ldr	r3, [r2, #0]
 80109aa:	f043 0301 	orr.w	r3, r3, #1
 80109ae:	6013      	str	r3, [r2, #0]
    return 0;
 80109b0:	4620      	mov	r0, r4
}
 80109b2:	b007      	add	sp, #28
 80109b4:	bd30      	pop	{r4, r5, pc}
        return -1;
 80109b6:	f04f 30ff 	mov.w	r0, #4294967295
}
 80109ba:	4770      	bx	lr
        return -1;
 80109bc:	f04f 30ff 	mov.w	r0, #4294967295
 80109c0:	e7f7      	b.n	80109b2 <hal_timer_config+0x9e>
        return -1;
 80109c2:	f04f 30ff 	mov.w	r0, #4294967295
 80109c6:	e7f4      	b.n	80109b2 <hal_timer_config+0x9e>
        return -1;
 80109c8:	f04f 30ff 	mov.w	r0, #4294967295
 80109cc:	e7f1      	b.n	80109b2 <hal_timer_config+0x9e>
 80109ce:	bf00      	nop
 80109d0:	08018560 	.word	0x08018560
 80109d4:	40012c00 	.word	0x40012c00

080109d8 <hal_timer_read>:
uint32_t
hal_timer_read(int num)
{
    struct stm32_hal_tmr *tmr;

    if (num >= STM32_HAL_TIMER_MAX || !(tmr = stm32_tmr_devs[num])) {
 80109d8:	2802      	cmp	r0, #2
 80109da:	dc07      	bgt.n	80109ec <hal_timer_read+0x14>
{
 80109dc:	b508      	push	{r3, lr}
    if (num >= STM32_HAL_TIMER_MAX || !(tmr = stm32_tmr_devs[num])) {
 80109de:	4b06      	ldr	r3, [pc, #24]	; (80109f8 <hal_timer_read+0x20>)
 80109e0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80109e4:	b128      	cbz	r0, 80109f2 <hal_timer_read+0x1a>
        return -1;
    }
    return hal_timer_cnt(tmr);
 80109e6:	f7ff fddf 	bl	80105a8 <hal_timer_cnt>
}
 80109ea:	bd08      	pop	{r3, pc}
        return -1;
 80109ec:	f04f 30ff 	mov.w	r0, #4294967295
}
 80109f0:	4770      	bx	lr
        return -1;
 80109f2:	f04f 30ff 	mov.w	r0, #4294967295
 80109f6:	e7f8      	b.n	80109ea <hal_timer_read+0x12>
 80109f8:	08018560 	.word	0x08018560

080109fc <uart_irq_handler>:
    return 0;
}

static void
uart_irq_handler(int num)
{
 80109fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t cr1;
    int data;
    int rc;

    ui = &uart_irqs[num];
    ++ui->ui_cnt;
 80109fe:	4a28      	ldr	r2, [pc, #160]	; (8010aa0 <uart_irq_handler+0xa4>)
 8010a00:	eb02 01c0 	add.w	r1, r2, r0, lsl #3
 8010a04:	684b      	ldr	r3, [r1, #4]
 8010a06:	3301      	adds	r3, #1
 8010a08:	604b      	str	r3, [r1, #4]
    u = ui->ui_uart;
 8010a0a:	f852 4030 	ldr.w	r4, [r2, r0, lsl #3]
    regs = u->u_regs;
 8010a0e:	6825      	ldr	r5, [r4, #0]

    isr = STATUS(regs);
 8010a10:	69ee      	ldr	r6, [r5, #28]
    if (isr & RXNE) {
 8010a12:	f016 0f20 	tst.w	r6, #32
 8010a16:	d007      	beq.n	8010a28 <uart_irq_handler+0x2c>
        data = RXDR(regs);
 8010a18:	8caf      	ldrh	r7, [r5, #36]	; 0x24
        rc = u->u_rx_func(u->u_func_arg, data);
 8010a1a:	68a3      	ldr	r3, [r4, #8]
 8010a1c:	b2ff      	uxtb	r7, r7
 8010a1e:	4639      	mov	r1, r7
 8010a20:	6960      	ldr	r0, [r4, #20]
 8010a22:	4798      	blx	r3
        if (rc < 0) {
 8010a24:	2800      	cmp	r0, #0
 8010a26:	db27      	blt.n	8010a78 <uart_irq_handler+0x7c>
            regs->CR1 &= ~USART_CR1_RXNEIE;
            u->u_rx_data = data;
            u->u_rx_stall = 1;
        }
    }
    if (isr & (TXE | TC)) {
 8010a28:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 8010a2c:	d01c      	beq.n	8010a68 <uart_irq_handler+0x6c>
        cr1 = regs->CR1;
 8010a2e:	682f      	ldr	r7, [r5, #0]
        if (isr & TXE) {
 8010a30:	f016 0f80 	tst.w	r6, #128	; 0x80
 8010a34:	d006      	beq.n	8010a44 <uart_irq_handler+0x48>
            data = u->u_tx_func(u->u_func_arg);
 8010a36:	68e3      	ldr	r3, [r4, #12]
 8010a38:	6960      	ldr	r0, [r4, #20]
 8010a3a:	4798      	blx	r3
            if (data < 0) {
 8010a3c:	2800      	cmp	r0, #0
 8010a3e:	db25      	blt.n	8010a8c <uart_irq_handler+0x90>
                cr1 &= ~USART_CR1_TXEIE;
                cr1 |= USART_CR1_TCIE;
                u->u_tx_end = 1;
            } else {
                TXDR(regs) = data;
 8010a40:	b280      	uxth	r0, r0
 8010a42:	8528      	strh	r0, [r5, #40]	; 0x28
            }
        }
        if (u->u_tx_end == 1 && isr & TC) {
 8010a44:	7923      	ldrb	r3, [r4, #4]
 8010a46:	f013 0f04 	tst.w	r3, #4
 8010a4a:	d00c      	beq.n	8010a66 <uart_irq_handler+0x6a>
 8010a4c:	f016 0f40 	tst.w	r6, #64	; 0x40
 8010a50:	d009      	beq.n	8010a66 <uart_irq_handler+0x6a>
            if (u->u_tx_done) {
 8010a52:	6923      	ldr	r3, [r4, #16]
 8010a54:	b10b      	cbz	r3, 8010a5a <uart_irq_handler+0x5e>
                u->u_tx_done(u->u_func_arg);
 8010a56:	6960      	ldr	r0, [r4, #20]
 8010a58:	4798      	blx	r3
            }
            u->u_tx_end = 0;
 8010a5a:	7923      	ldrb	r3, [r4, #4]
 8010a5c:	f36f 0382 	bfc	r3, #2, #1
 8010a60:	7123      	strb	r3, [r4, #4]
            cr1 &= ~USART_CR1_TCIE;
 8010a62:	f027 0740 	bic.w	r7, r7, #64	; 0x40
        }
        regs->CR1 = cr1;
 8010a66:	602f      	str	r7, [r5, #0]
    }
#if !MYNEWT_VAL(STM32_HAL_UART_HAS_SR)
    /* clear overrun */
    if (isr & USART_ISR_ORE) {
 8010a68:	f016 0f08 	tst.w	r6, #8
 8010a6c:	d003      	beq.n	8010a76 <uart_irq_handler+0x7a>
        regs->ICR |= USART_ICR_ORECF;
 8010a6e:	6a2b      	ldr	r3, [r5, #32]
 8010a70:	f043 0308 	orr.w	r3, r3, #8
 8010a74:	622b      	str	r3, [r5, #32]
    }
#endif
}
 8010a76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            regs->CR1 &= ~USART_CR1_RXNEIE;
 8010a78:	682b      	ldr	r3, [r5, #0]
 8010a7a:	f023 0320 	bic.w	r3, r3, #32
 8010a7e:	602b      	str	r3, [r5, #0]
            u->u_rx_data = data;
 8010a80:	7167      	strb	r7, [r4, #5]
            u->u_rx_stall = 1;
 8010a82:	7923      	ldrb	r3, [r4, #4]
 8010a84:	f043 0302 	orr.w	r3, r3, #2
 8010a88:	7123      	strb	r3, [r4, #4]
 8010a8a:	e7cd      	b.n	8010a28 <uart_irq_handler+0x2c>
                cr1 &= ~USART_CR1_TXEIE;
 8010a8c:	f027 0780 	bic.w	r7, r7, #128	; 0x80
                cr1 |= USART_CR1_TCIE;
 8010a90:	f047 0740 	orr.w	r7, r7, #64	; 0x40
                u->u_tx_end = 1;
 8010a94:	7923      	ldrb	r3, [r4, #4]
 8010a96:	f043 0304 	orr.w	r3, r3, #4
 8010a9a:	7123      	strb	r3, [r4, #4]
 8010a9c:	e7d2      	b.n	8010a44 <uart_irq_handler+0x48>
 8010a9e:	bf00      	nop
 8010aa0:	20002da0 	.word	0x20002da0

08010aa4 <uart_irq1>:
    while (!(STATUS(regs) & TC));
}

static void
uart_irq1(void)
{
 8010aa4:	b508      	push	{r3, lr}
    uart_irq_handler(0);
 8010aa6:	2000      	movs	r0, #0
 8010aa8:	f7ff ffa8 	bl	80109fc <uart_irq_handler>
}
 8010aac:	bd08      	pop	{r3, pc}

08010aae <uart_irq2>:

static void
uart_irq2(void)
{
 8010aae:	b508      	push	{r3, lr}
    uart_irq_handler(1);
 8010ab0:	2001      	movs	r0, #1
 8010ab2:	f7ff ffa3 	bl	80109fc <uart_irq_handler>

}
 8010ab6:	bd08      	pop	{r3, pc}

08010ab8 <uart_irq3>:

#ifdef USART3_BASE
static void
uart_irq3(void)
{
 8010ab8:	b508      	push	{r3, lr}
    uart_irq_handler(2);
 8010aba:	2002      	movs	r0, #2
 8010abc:	f7ff ff9e 	bl	80109fc <uart_irq_handler>
}
 8010ac0:	bd08      	pop	{r3, pc}

08010ac2 <uart_irq4>:
#endif

#ifdef UART4_BASE
static void
uart_irq4(void)
{
 8010ac2:	b508      	push	{r3, lr}
    uart_irq_handler(3);
 8010ac4:	2003      	movs	r0, #3
 8010ac6:	f7ff ff99 	bl	80109fc <uart_irq_handler>
}
 8010aca:	bd08      	pop	{r3, pc}

08010acc <uart_irq5>:
#endif

#ifdef UART5_BASE
static void
uart_irq5(void)
{
 8010acc:	b508      	push	{r3, lr}
    uart_irq_handler(4);
 8010ace:	2004      	movs	r0, #4
 8010ad0:	f7ff ff94 	bl	80109fc <uart_irq_handler>
}
 8010ad4:	bd08      	pop	{r3, pc}
	...

08010ad8 <hal_uart_set_nvic>:
}
#endif

static void
hal_uart_set_nvic(IRQn_Type irqn, struct hal_uart *uart)
{
 8010ad8:	b508      	push	{r3, lr}
    uint32_t isr;
    struct hal_uart_irq *ui = NULL;

    switch (irqn) {
 8010ada:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
 8010ade:	2b10      	cmp	r3, #16
 8010ae0:	d82b      	bhi.n	8010b3a <hal_uart_set_nvic+0x62>
 8010ae2:	e8df f003 	tbb	[pc, r3]
 8010ae6:	1e09      	.short	0x1e09
 8010ae8:	2a2a2a21 	.word	0x2a2a2a21
 8010aec:	2a2a2a2a 	.word	0x2a2a2a2a
 8010af0:	2a2a2a2a 	.word	0x2a2a2a2a
 8010af4:	242a      	.short	0x242a
 8010af6:	27          	.byte	0x27
 8010af7:	00          	.byte	0x00
    case USART1_IRQn:
        isr = (uint32_t)&uart_irq1;
 8010af8:	4a13      	ldr	r2, [pc, #76]	; (8010b48 <hal_uart_set_nvic+0x70>)
        ui = &uart_irqs[0];
 8010afa:	4b14      	ldr	r3, [pc, #80]	; (8010b4c <hal_uart_set_nvic+0x74>)
    default:
        assert(0);
        break;
    }

    if (ui) {
 8010afc:	b183      	cbz	r3, 8010b20 <hal_uart_set_nvic+0x48>
        ui->ui_uart = uart;
 8010afe:	6019      	str	r1, [r3, #0]
  uint32_t vectors = (uint32_t )SCB->VTOR;
 8010b00:	4b13      	ldr	r3, [pc, #76]	; (8010b50 <hal_uart_set_nvic+0x78>)
 8010b02:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 8010b04:	f100 0110 	add.w	r1, r0, #16
 8010b08:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
  if ((int32_t)(IRQn) >= 0)
 8010b0c:	2800      	cmp	r0, #0
 8010b0e:	db07      	blt.n	8010b20 <hal_uart_set_nvic+0x48>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8010b10:	f000 021f 	and.w	r2, r0, #31
 8010b14:	0940      	lsrs	r0, r0, #5
 8010b16:	2301      	movs	r3, #1
 8010b18:	4093      	lsls	r3, r2
 8010b1a:	4a0e      	ldr	r2, [pc, #56]	; (8010b54 <hal_uart_set_nvic+0x7c>)
 8010b1c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]

        NVIC_SetVector(irqn, isr);
        NVIC_EnableIRQ(irqn);
    }
}
 8010b20:	bd08      	pop	{r3, pc}
        isr = (uint32_t)&uart_irq2;
 8010b22:	4a0d      	ldr	r2, [pc, #52]	; (8010b58 <hal_uart_set_nvic+0x80>)
        ui = &uart_irqs[1];
 8010b24:	4b0d      	ldr	r3, [pc, #52]	; (8010b5c <hal_uart_set_nvic+0x84>)
        break;
 8010b26:	e7e9      	b.n	8010afc <hal_uart_set_nvic+0x24>
        isr = (uint32_t)&uart_irq3;
 8010b28:	4a0d      	ldr	r2, [pc, #52]	; (8010b60 <hal_uart_set_nvic+0x88>)
        ui = &uart_irqs[2];
 8010b2a:	4b0e      	ldr	r3, [pc, #56]	; (8010b64 <hal_uart_set_nvic+0x8c>)
        break;
 8010b2c:	e7e6      	b.n	8010afc <hal_uart_set_nvic+0x24>
        isr = (uint32_t)&uart_irq4;
 8010b2e:	4a0e      	ldr	r2, [pc, #56]	; (8010b68 <hal_uart_set_nvic+0x90>)
        ui = &uart_irqs[3];
 8010b30:	4b0e      	ldr	r3, [pc, #56]	; (8010b6c <hal_uart_set_nvic+0x94>)
        break;
 8010b32:	e7e3      	b.n	8010afc <hal_uart_set_nvic+0x24>
        isr = (uint32_t)&uart_irq5;
 8010b34:	4a0e      	ldr	r2, [pc, #56]	; (8010b70 <hal_uart_set_nvic+0x98>)
        ui = &uart_irqs[4];
 8010b36:	4b0f      	ldr	r3, [pc, #60]	; (8010b74 <hal_uart_set_nvic+0x9c>)
        break;
 8010b38:	e7e0      	b.n	8010afc <hal_uart_set_nvic+0x24>
        assert(0);
 8010b3a:	2300      	movs	r3, #0
 8010b3c:	461a      	mov	r2, r3
 8010b3e:	4619      	mov	r1, r3
 8010b40:	4618      	mov	r0, r3
 8010b42:	f7fb fd47 	bl	800c5d4 <__assert_func>
 8010b46:	bf00      	nop
 8010b48:	08010aa5 	.word	0x08010aa5
 8010b4c:	20002da0 	.word	0x20002da0
 8010b50:	e000ed00 	.word	0xe000ed00
 8010b54:	e000e100 	.word	0xe000e100
 8010b58:	08010aaf 	.word	0x08010aaf
 8010b5c:	20002da8 	.word	0x20002da8
 8010b60:	08010ab9 	.word	0x08010ab9
 8010b64:	20002db0 	.word	0x20002db0
 8010b68:	08010ac3 	.word	0x08010ac3
 8010b6c:	20002db8 	.word	0x20002db8
 8010b70:	08010acd 	.word	0x08010acd
 8010b74:	20002dc0 	.word	0x20002dc0

08010b78 <hal_uart_init_cbs>:
    if (port >= UART_CNT || u->u_open) {
 8010b78:	2802      	cmp	r0, #2
 8010b7a:	dc16      	bgt.n	8010baa <hal_uart_init_cbs+0x32>
{
 8010b7c:	b4f0      	push	{r4, r5, r6, r7}
    if (port >= UART_CNT || u->u_open) {
 8010b7e:	ebc0 04c0 	rsb	r4, r0, r0, lsl #3
 8010b82:	00a5      	lsls	r5, r4, #2
 8010b84:	4c0c      	ldr	r4, [pc, #48]	; (8010bb8 <hal_uart_init_cbs+0x40>)
 8010b86:	442c      	add	r4, r5
 8010b88:	7924      	ldrb	r4, [r4, #4]
 8010b8a:	f014 0f01 	tst.w	r4, #1
 8010b8e:	d10f      	bne.n	8010bb0 <hal_uart_init_cbs+0x38>
    u->u_rx_func = rx_func;
 8010b90:	4e09      	ldr	r6, [pc, #36]	; (8010bb8 <hal_uart_init_cbs+0x40>)
 8010b92:	00c5      	lsls	r5, r0, #3
 8010b94:	1a2f      	subs	r7, r5, r0
 8010b96:	00bc      	lsls	r4, r7, #2
 8010b98:	4434      	add	r4, r6
 8010b9a:	60a3      	str	r3, [r4, #8]
    u->u_tx_func = tx_func;
 8010b9c:	60e1      	str	r1, [r4, #12]
    u->u_tx_done = tx_done;
 8010b9e:	6122      	str	r2, [r4, #16]
    u->u_func_arg = arg;
 8010ba0:	9b04      	ldr	r3, [sp, #16]
 8010ba2:	6163      	str	r3, [r4, #20]
    return 0;
 8010ba4:	2000      	movs	r0, #0
}
 8010ba6:	bcf0      	pop	{r4, r5, r6, r7}
 8010ba8:	4770      	bx	lr
        return -1;
 8010baa:	f04f 30ff 	mov.w	r0, #4294967295
}
 8010bae:	4770      	bx	lr
        return -1;
 8010bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8010bb4:	e7f7      	b.n	8010ba6 <hal_uart_init_cbs+0x2e>
 8010bb6:	bf00      	nop
 8010bb8:	20002dc8 	.word	0x20002dc8

08010bbc <hal_uart_start_rx>:
{
 8010bbc:	b538      	push	{r3, r4, r5, lr}
    if (u->u_rx_stall) {
 8010bbe:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 8010bc2:	009a      	lsls	r2, r3, #2
 8010bc4:	4b13      	ldr	r3, [pc, #76]	; (8010c14 <hal_uart_start_rx+0x58>)
 8010bc6:	4413      	add	r3, r2
 8010bc8:	791b      	ldrb	r3, [r3, #4]
 8010bca:	f013 0f02 	tst.w	r3, #2
 8010bce:	d01f      	beq.n	8010c10 <hal_uart_start_rx+0x54>
 8010bd0:	4604      	mov	r4, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010bd2:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010bd6:	b672      	cpsid	i
        rc = u->u_rx_func(u->u_func_arg, u->u_rx_data);
 8010bd8:	00c2      	lsls	r2, r0, #3
 8010bda:	1a12      	subs	r2, r2, r0
 8010bdc:	0091      	lsls	r1, r2, #2
 8010bde:	4b0d      	ldr	r3, [pc, #52]	; (8010c14 <hal_uart_start_rx+0x58>)
 8010be0:	440b      	add	r3, r1
 8010be2:	689a      	ldr	r2, [r3, #8]
 8010be4:	7959      	ldrb	r1, [r3, #5]
 8010be6:	6958      	ldr	r0, [r3, #20]
 8010be8:	4790      	blx	r2
        if (rc == 0) {
 8010bea:	b978      	cbnz	r0, 8010c0c <hal_uart_start_rx+0x50>
            u->u_rx_stall = 0;
 8010bec:	4a09      	ldr	r2, [pc, #36]	; (8010c14 <hal_uart_start_rx+0x58>)
 8010bee:	00e0      	lsls	r0, r4, #3
 8010bf0:	1b01      	subs	r1, r0, r4
 8010bf2:	008b      	lsls	r3, r1, #2
 8010bf4:	4413      	add	r3, r2
 8010bf6:	7919      	ldrb	r1, [r3, #4]
 8010bf8:	f36f 0141 	bfc	r1, #1, #1
 8010bfc:	7119      	strb	r1, [r3, #4]
            u->u_regs->CR1 |= USART_CR1_RXNEIE;
 8010bfe:	1b04      	subs	r4, r0, r4
 8010c00:	00a3      	lsls	r3, r4, #2
 8010c02:	58d2      	ldr	r2, [r2, r3]
 8010c04:	6813      	ldr	r3, [r2, #0]
 8010c06:	f043 0320 	orr.w	r3, r3, #32
 8010c0a:	6013      	str	r3, [r2, #0]
        __HAL_ENABLE_INTERRUPTS(sr);
 8010c0c:	b905      	cbnz	r5, 8010c10 <hal_uart_start_rx+0x54>
  __ASM volatile ("cpsie i" : : : "memory");
 8010c0e:	b662      	cpsie	i
}
 8010c10:	bd38      	pop	{r3, r4, r5, pc}
 8010c12:	bf00      	nop
 8010c14:	20002dc8 	.word	0x20002dc8

08010c18 <hal_uart_start_tx>:
{
 8010c18:	b470      	push	{r4, r5, r6}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010c1a:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010c1e:	b672      	cpsid	i
    u->u_regs->CR1 &= ~USART_CR1_TCIE;
 8010c20:	4b0c      	ldr	r3, [pc, #48]	; (8010c54 <hal_uart_start_tx+0x3c>)
 8010c22:	00c2      	lsls	r2, r0, #3
 8010c24:	1a14      	subs	r4, r2, r0
 8010c26:	00a1      	lsls	r1, r4, #2
 8010c28:	585e      	ldr	r6, [r3, r1]
 8010c2a:	6834      	ldr	r4, [r6, #0]
 8010c2c:	f024 0440 	bic.w	r4, r4, #64	; 0x40
 8010c30:	6034      	str	r4, [r6, #0]
    u->u_regs->CR1 |= USART_CR1_TXEIE;
 8010c32:	585c      	ldr	r4, [r3, r1]
 8010c34:	6821      	ldr	r1, [r4, #0]
 8010c36:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8010c3a:	6021      	str	r1, [r4, #0]
    u->u_tx_end = 0;
 8010c3c:	1a10      	subs	r0, r2, r0
 8010c3e:	0082      	lsls	r2, r0, #2
 8010c40:	4413      	add	r3, r2
 8010c42:	791a      	ldrb	r2, [r3, #4]
 8010c44:	f36f 0282 	bfc	r2, #2, #1
 8010c48:	711a      	strb	r2, [r3, #4]
    __HAL_ENABLE_INTERRUPTS(sr);
 8010c4a:	b905      	cbnz	r5, 8010c4e <hal_uart_start_tx+0x36>
  __ASM volatile ("cpsie i" : : : "memory");
 8010c4c:	b662      	cpsie	i
}
 8010c4e:	bc70      	pop	{r4, r5, r6}
 8010c50:	4770      	bx	lr
 8010c52:	bf00      	nop
 8010c54:	20002dc8 	.word	0x20002dc8

08010c58 <hal_uart_blocking_tx>:
    if (port >= UART_CNT || !u->u_open) {
 8010c58:	2802      	cmp	r0, #2
 8010c5a:	dc15      	bgt.n	8010c88 <hal_uart_blocking_tx+0x30>
 8010c5c:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 8010c60:	009a      	lsls	r2, r3, #2
 8010c62:	4b0a      	ldr	r3, [pc, #40]	; (8010c8c <hal_uart_blocking_tx+0x34>)
 8010c64:	4413      	add	r3, r2
 8010c66:	791b      	ldrb	r3, [r3, #4]
 8010c68:	f013 0f01 	tst.w	r3, #1
 8010c6c:	d00c      	beq.n	8010c88 <hal_uart_blocking_tx+0x30>
    regs = u->u_regs;
 8010c6e:	4613      	mov	r3, r2
 8010c70:	4a06      	ldr	r2, [pc, #24]	; (8010c8c <hal_uart_blocking_tx+0x34>)
 8010c72:	58d3      	ldr	r3, [r2, r3]
    while (!(STATUS(regs) & TXE));
 8010c74:	69da      	ldr	r2, [r3, #28]
 8010c76:	f012 0f80 	tst.w	r2, #128	; 0x80
 8010c7a:	d0fb      	beq.n	8010c74 <hal_uart_blocking_tx+0x1c>
    TXDR(regs) = data;
 8010c7c:	b289      	uxth	r1, r1
 8010c7e:	8519      	strh	r1, [r3, #40]	; 0x28
    while (!(STATUS(regs) & TC));
 8010c80:	69da      	ldr	r2, [r3, #28]
 8010c82:	f012 0f40 	tst.w	r2, #64	; 0x40
 8010c86:	d0fb      	beq.n	8010c80 <hal_uart_blocking_tx+0x28>
}
 8010c88:	4770      	bx	lr
 8010c8a:	bf00      	nop
 8010c8c:	20002dc8 	.word	0x20002dc8

08010c90 <hal_uart_config>:

int
hal_uart_config(int port, int32_t baudrate, uint8_t databits, uint8_t stopbits,
  enum hal_uart_parity parity, enum hal_uart_flow_ctl flow_ctl)
{
 8010c90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c94:	f89d c028 	ldrb.w	ip, [sp, #40]	; 0x28
 8010c98:	f89d b02c 	ldrb.w	fp, [sp, #44]	; 0x2c
    uint32_t cr1, cr2, cr3;
#if MYNEWT_VAL(MCU_STM32F1)
    GPIO_InitTypeDef gpio;
#endif

    if (port >= UART_CNT) {
 8010c9c:	2802      	cmp	r0, #2
 8010c9e:	f300 80c9 	bgt.w	8010e34 <hal_uart_config+0x1a4>
        return -1;
    }

    u = &uarts[port];
 8010ca2:	00c4      	lsls	r4, r0, #3
 8010ca4:	1a24      	subs	r4, r4, r0
 8010ca6:	00a5      	lsls	r5, r4, #2
 8010ca8:	4f67      	ldr	r7, [pc, #412]	; (8010e48 <hal_uart_config+0x1b8>)
 8010caa:	442f      	add	r7, r5
    if (u->u_open) {
 8010cac:	793c      	ldrb	r4, [r7, #4]
 8010cae:	f014 0f01 	tst.w	r4, #1
 8010cb2:	f040 80c2 	bne.w	8010e3a <hal_uart_config+0x1aa>
 8010cb6:	468a      	mov	sl, r1
 8010cb8:	4604      	mov	r4, r0
        return -1;
    }
    cfg = u->u_cfg;
 8010cba:	69bd      	ldr	r5, [r7, #24]
    assert(cfg);
 8010cbc:	2d00      	cmp	r5, #0
 8010cbe:	f000 8082 	beq.w	8010dc6 <hal_uart_config+0x136>
     * pin config
     * UART config
     * nvic config
     * enable uart
     */
    cr1 = cfg->suc_uart->CR1;
 8010cc2:	6829      	ldr	r1, [r5, #0]
 8010cc4:	f8d1 e000 	ldr.w	lr, [r1]
    cr2 = cfg->suc_uart->CR2;
 8010cc8:	6848      	ldr	r0, [r1, #4]
    cr3 = cfg->suc_uart->CR3;
 8010cca:	6889      	ldr	r1, [r1, #8]

    cr1 &= ~(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_RE);
#if !MYNEWT_VAL(MCU_STM32F1)
    cr1 &= ~(USART_CR1_OVER8);
 8010ccc:	4e5f      	ldr	r6, [pc, #380]	; (8010e4c <hal_uart_config+0x1bc>)
 8010cce:	ea0e 0606 	and.w	r6, lr, r6
#endif
    cr2 &= ~(USART_CR2_STOP);
 8010cd2:	f420 5840 	bic.w	r8, r0, #12288	; 0x3000
    cr3 &= ~(USART_CR3_RTSE | USART_CR3_CTSE);
 8010cd6:	f421 7940 	bic.w	r9, r1, #768	; 0x300

    switch (databits) {
 8010cda:	2a08      	cmp	r2, #8
 8010cdc:	d003      	beq.n	8010ce6 <hal_uart_config+0x56>
 8010cde:	2a09      	cmp	r2, #9
 8010ce0:	d177      	bne.n	8010dd2 <hal_uart_config+0x142>
    case 8:
        cr1 |= UART_WORDLENGTH_8B;
        break;
    case 9:
        cr1 |= UART_WORDLENGTH_9B;
 8010ce2:	f446 5680 	orr.w	r6, r6, #4096	; 0x1000
    default:
        assert(0);
        return -1;
    }

    switch (stopbits) {
 8010ce6:	2b01      	cmp	r3, #1
 8010ce8:	d004      	beq.n	8010cf4 <hal_uart_config+0x64>
 8010cea:	2b02      	cmp	r3, #2
 8010cec:	f040 80a8 	bne.w	8010e40 <hal_uart_config+0x1b0>
    case 1:
        cr2 |= UART_STOPBITS_1;
        break;
    case 2:
        cr2 |= UART_STOPBITS_2;
 8010cf0:	f448 5800 	orr.w	r8, r8, #8192	; 0x2000
        break;
    default:
        return -1;
    }

    switch (parity) {
 8010cf4:	f1bc 0f01 	cmp.w	ip, #1
 8010cf8:	d071      	beq.n	8010dde <hal_uart_config+0x14e>
 8010cfa:	f1bc 0f02 	cmp.w	ip, #2
 8010cfe:	d071      	beq.n	8010de4 <hal_uart_config+0x154>
    case HAL_UART_PARITY_EVEN:
        cr1 |= UART_PARITY_EVEN;
        break;
    }

    switch (flow_ctl) {
 8010d00:	f1bb 0f01 	cmp.w	fp, #1
 8010d04:	d109      	bne.n	8010d1a <hal_uart_config+0x8a>
    case HAL_UART_FLOW_CTL_NONE:
        cr3 |= UART_HWCONTROL_NONE;
        break;
    case HAL_UART_FLOW_CTL_RTS_CTS:
        cr3 |= UART_HWCONTROL_RTS_CTS;
 8010d06:	f449 7940 	orr.w	r9, r9, #768	; 0x300
        if (cfg->suc_pin_rts < 0 || cfg->suc_pin_cts < 0) {
 8010d0a:	f995 300e 	ldrsb.w	r3, [r5, #14]
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	db6b      	blt.n	8010dea <hal_uart_config+0x15a>
 8010d12:	f995 300f 	ldrsb.w	r3, [r5, #15]
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	db67      	blt.n	8010dea <hal_uart_config+0x15a>
        }
        break;
    }

#if !MYNEWT_VAL(MCU_STM32F1)
    cr1 |= (UART_MODE_RX | UART_MODE_TX | UART_OVERSAMPLING_16);
 8010d1a:	f046 060c 	orr.w	r6, r6, #12
#else
    cr1 |= (UART_MODE_TX_RX | UART_OVERSAMPLING_16);
#endif

    *cfg->suc_rcc_reg |= cfg->suc_rcc_dev;
 8010d1e:	686a      	ldr	r2, [r5, #4]
 8010d20:	6813      	ldr	r3, [r2, #0]
 8010d22:	68a9      	ldr	r1, [r5, #8]
 8010d24:	430b      	orrs	r3, r1
 8010d26:	6013      	str	r3, [r2, #0]

#if !MYNEWT_VAL(MCU_STM32F1)
    hal_gpio_init_af(cfg->suc_pin_tx, cfg->suc_pin_af, 0, 0);
 8010d28:	2300      	movs	r3, #0
 8010d2a:	461a      	mov	r2, r3
 8010d2c:	7c29      	ldrb	r1, [r5, #16]
 8010d2e:	f995 000c 	ldrsb.w	r0, [r5, #12]
 8010d32:	f7ff fb53 	bl	80103dc <hal_gpio_init_af>
    hal_gpio_init_af(cfg->suc_pin_rx, cfg->suc_pin_af, 0, 0);
 8010d36:	2300      	movs	r3, #0
 8010d38:	461a      	mov	r2, r3
 8010d3a:	7c29      	ldrb	r1, [r5, #16]
 8010d3c:	f995 000d 	ldrsb.w	r0, [r5, #13]
 8010d40:	f7ff fb4c 	bl	80103dc <hal_gpio_init_af>
    if (flow_ctl == HAL_UART_FLOW_CTL_RTS_CTS) {
 8010d44:	f1bb 0f01 	cmp.w	fp, #1
 8010d48:	d055      	beq.n	8010df6 <hal_uart_config+0x166>
    }
#endif

    ////  Patch at line 468 of hal_uart.c
#if MYNEWT_VAL(UART_2_SWAP_TXRX)
    if (cfg->suc_uart == USART3) { cr2 |= USART_CR2_SWAP; } //// Swap TX/RX so that USART3 behaves like LPUART1
 8010d4a:	6828      	ldr	r0, [r5, #0]
 8010d4c:	4b40      	ldr	r3, [pc, #256]	; (8010e50 <hal_uart_config+0x1c0>)
 8010d4e:	4298      	cmp	r0, r3
 8010d50:	d060      	beq.n	8010e14 <hal_uart_config+0x184>
#endif  //  UART_2_SWAP_TXRX

    u->u_regs = cfg->suc_uart;
 8010d52:	493d      	ldr	r1, [pc, #244]	; (8010e48 <hal_uart_config+0x1b8>)
 8010d54:	00e2      	lsls	r2, r4, #3
 8010d56:	1b12      	subs	r2, r2, r4
 8010d58:	0093      	lsls	r3, r2, #2
 8010d5a:	50c8      	str	r0, [r1, r3]
    u->u_regs->CR3 = cr3;
 8010d5c:	f8c0 9008 	str.w	r9, [r0, #8]
    u->u_regs->CR2 = cr2;
 8010d60:	58ca      	ldr	r2, [r1, r3]
 8010d62:	f8c2 8004 	str.w	r8, [r2, #4]
    u->u_regs->CR1 = cr1;
 8010d66:	58cb      	ldr	r3, [r1, r3]
 8010d68:	601e      	str	r6, [r3, #0]
#ifdef USART6_BASE
    if (cfg->suc_uart == USART1 || cfg->suc_uart == USART6) {
#else
    if (cfg->suc_uart == USART1) {
 8010d6a:	682a      	ldr	r2, [r5, #0]
 8010d6c:	4b39      	ldr	r3, [pc, #228]	; (8010e54 <hal_uart_config+0x1c4>)
 8010d6e:	429a      	cmp	r2, r3
 8010d70:	d053      	beq.n	8010e1a <hal_uart_config+0x18a>
#else
        u->u_regs->BRR = BAUD(HAL_RCC_GetPCLK2Freq(), baudrate);
#endif

    } else {
        u->u_regs->BRR = BAUD(HAL_RCC_GetPCLK1Freq(), baudrate);
 8010d72:	f000 fc73 	bl	801165c <HAL_RCC_GetPCLK1Freq>
 8010d76:	eb00 005a 	add.w	r0, r0, sl, lsr #1
 8010d7a:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
 8010d7e:	0093      	lsls	r3, r2, #2
 8010d80:	4a31      	ldr	r2, [pc, #196]	; (8010e48 <hal_uart_config+0x1b8>)
 8010d82:	58d3      	ldr	r3, [r2, r3]
 8010d84:	fbb0 f0fa 	udiv	r0, r0, sl
 8010d88:	60d8      	str	r0, [r3, #12]
    }

    (void)RXDR(u->u_regs);
 8010d8a:	4e2f      	ldr	r6, [pc, #188]	; (8010e48 <hal_uart_config+0x1b8>)
 8010d8c:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8010d90:	eba8 0304 	sub.w	r3, r8, r4
 8010d94:	ea4f 0983 	mov.w	r9, r3, lsl #2
 8010d98:	f856 3009 	ldr.w	r3, [r6, r9]
 8010d9c:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
    (void)STATUS(u->u_regs);
 8010d9e:	69db      	ldr	r3, [r3, #28]
    hal_uart_set_nvic(cfg->suc_irqn, u);
 8010da0:	4639      	mov	r1, r7
 8010da2:	f995 0011 	ldrsb.w	r0, [r5, #17]
 8010da6:	f7ff fe97 	bl	8010ad8 <hal_uart_set_nvic>

    u->u_regs->CR1 |= (USART_CR1_RXNEIE | USART_CR1_UE);
 8010daa:	f856 2009 	ldr.w	r2, [r6, r9]
 8010dae:	6813      	ldr	r3, [r2, #0]
 8010db0:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 8010db4:	6013      	str	r3, [r2, #0]
    u->u_open = 1;
 8010db6:	444e      	add	r6, r9
 8010db8:	7933      	ldrb	r3, [r6, #4]
 8010dba:	f043 0301 	orr.w	r3, r3, #1
 8010dbe:	7133      	strb	r3, [r6, #4]

    return 0;
 8010dc0:	2000      	movs	r0, #0
}
 8010dc2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    assert(cfg);
 8010dc6:	2300      	movs	r3, #0
 8010dc8:	461a      	mov	r2, r3
 8010dca:	4619      	mov	r1, r3
 8010dcc:	4618      	mov	r0, r3
 8010dce:	f7fb fc01 	bl	800c5d4 <__assert_func>
        assert(0);
 8010dd2:	2300      	movs	r3, #0
 8010dd4:	461a      	mov	r2, r3
 8010dd6:	4619      	mov	r1, r3
 8010dd8:	4618      	mov	r0, r3
 8010dda:	f7fb fbfb 	bl	800c5d4 <__assert_func>
        cr1 |= UART_PARITY_ODD;
 8010dde:	f446 66c0 	orr.w	r6, r6, #1536	; 0x600
        break;
 8010de2:	e78d      	b.n	8010d00 <hal_uart_config+0x70>
        cr1 |= UART_PARITY_EVEN;
 8010de4:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
        break;
 8010de8:	e78a      	b.n	8010d00 <hal_uart_config+0x70>
            assert(0);
 8010dea:	2300      	movs	r3, #0
 8010dec:	461a      	mov	r2, r3
 8010dee:	4619      	mov	r1, r3
 8010df0:	4618      	mov	r0, r3
 8010df2:	f7fb fbef 	bl	800c5d4 <__assert_func>
        hal_gpio_init_af(cfg->suc_pin_rts, cfg->suc_pin_af, 0, 0);
 8010df6:	2300      	movs	r3, #0
 8010df8:	461a      	mov	r2, r3
 8010dfa:	7c29      	ldrb	r1, [r5, #16]
 8010dfc:	f995 000e 	ldrsb.w	r0, [r5, #14]
 8010e00:	f7ff faec 	bl	80103dc <hal_gpio_init_af>
        hal_gpio_init_af(cfg->suc_pin_cts, cfg->suc_pin_af, 0, 0);
 8010e04:	2300      	movs	r3, #0
 8010e06:	461a      	mov	r2, r3
 8010e08:	7c29      	ldrb	r1, [r5, #16]
 8010e0a:	f995 000f 	ldrsb.w	r0, [r5, #15]
 8010e0e:	f7ff fae5 	bl	80103dc <hal_gpio_init_af>
 8010e12:	e79a      	b.n	8010d4a <hal_uart_config+0xba>
    if (cfg->suc_uart == USART3) { cr2 |= USART_CR2_SWAP; } //// Swap TX/RX so that USART3 behaves like LPUART1
 8010e14:	f448 4800 	orr.w	r8, r8, #32768	; 0x8000
 8010e18:	e79b      	b.n	8010d52 <hal_uart_config+0xc2>
        u->u_regs->BRR = BAUD(HAL_RCC_GetPCLK2Freq(), baudrate);
 8010e1a:	f000 fc31 	bl	8011680 <HAL_RCC_GetPCLK2Freq>
 8010e1e:	eb00 005a 	add.w	r0, r0, sl, lsr #1
 8010e22:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
 8010e26:	0093      	lsls	r3, r2, #2
 8010e28:	4a07      	ldr	r2, [pc, #28]	; (8010e48 <hal_uart_config+0x1b8>)
 8010e2a:	58d3      	ldr	r3, [r2, r3]
 8010e2c:	fbb0 f0fa 	udiv	r0, r0, sl
 8010e30:	60d8      	str	r0, [r3, #12]
 8010e32:	e7aa      	b.n	8010d8a <hal_uart_config+0xfa>
        return -1;
 8010e34:	f04f 30ff 	mov.w	r0, #4294967295
 8010e38:	e7c3      	b.n	8010dc2 <hal_uart_config+0x132>
        return -1;
 8010e3a:	f04f 30ff 	mov.w	r0, #4294967295
 8010e3e:	e7c0      	b.n	8010dc2 <hal_uart_config+0x132>
        return -1;
 8010e40:	f04f 30ff 	mov.w	r0, #4294967295
 8010e44:	e7bd      	b.n	8010dc2 <hal_uart_config+0x132>
 8010e46:	bf00      	nop
 8010e48:	20002dc8 	.word	0x20002dc8
 8010e4c:	efff69fb 	.word	0xefff69fb
 8010e50:	40004800 	.word	0x40004800
 8010e54:	40013800 	.word	0x40013800

08010e58 <hal_uart_init>:
int
hal_uart_init(int port, void *arg)
{
    struct hal_uart *u;

    if (port >= UART_CNT) {
 8010e58:	2802      	cmp	r0, #2
 8010e5a:	dc07      	bgt.n	8010e6c <hal_uart_init+0x14>
        return -1;
    }
    u = &uarts[port];
    u->u_cfg = (const struct stm32_uart_cfg *)arg;
 8010e5c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8010e60:	0082      	lsls	r2, r0, #2
 8010e62:	4b04      	ldr	r3, [pc, #16]	; (8010e74 <hal_uart_init+0x1c>)
 8010e64:	4413      	add	r3, r2
 8010e66:	6199      	str	r1, [r3, #24]

    return 0;
 8010e68:	2000      	movs	r0, #0
 8010e6a:	4770      	bx	lr
        return -1;
 8010e6c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8010e70:	4770      	bx	lr
 8010e72:	bf00      	nop
 8010e74:	20002dc8 	.word	0x20002dc8

08010e78 <hal_uart_close>:
int
hal_uart_close(int port)
{
    struct hal_uart *u;

    if (port >= UART_CNT) {
 8010e78:	2802      	cmp	r0, #2
 8010e7a:	dc11      	bgt.n	8010ea0 <hal_uart_close+0x28>
{
 8010e7c:	b410      	push	{r4}
        return -1;
    }
    u = &uarts[port];

    u->u_open = 0;
 8010e7e:	490a      	ldr	r1, [pc, #40]	; (8010ea8 <hal_uart_close+0x30>)
 8010e80:	00c3      	lsls	r3, r0, #3
 8010e82:	1a1c      	subs	r4, r3, r0
 8010e84:	00a2      	lsls	r2, r4, #2
 8010e86:	440a      	add	r2, r1
 8010e88:	7914      	ldrb	r4, [r2, #4]
 8010e8a:	f36f 0400 	bfc	r4, #0, #1
 8010e8e:	7114      	strb	r4, [r2, #4]
    u->u_regs->CR1 = 0;
 8010e90:	1a18      	subs	r0, r3, r0
 8010e92:	0083      	lsls	r3, r0, #2
 8010e94:	58cb      	ldr	r3, [r1, r3]
 8010e96:	2000      	movs	r0, #0
 8010e98:	6018      	str	r0, [r3, #0]

    return 0;
}
 8010e9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010e9e:	4770      	bx	lr
        return -1;
 8010ea0:	f04f 30ff 	mov.w	r0, #4294967295
}
 8010ea4:	4770      	bx	lr
 8010ea6:	bf00      	nop
 8010ea8:	20002dc8 	.word	0x20002dc8

08010eac <hal_watchdog_init>:
{
    uint32_t reload;

    /* Max prescaler is 256 */
    reload = 32768 / 256;
    reload = (reload * expire_msecs) / 1000;
 8010eac:	01c0      	lsls	r0, r0, #7
 8010eae:	4b0a      	ldr	r3, [pc, #40]	; (8010ed8 <hal_watchdog_init+0x2c>)
 8010eb0:	fba3 3000 	umull	r3, r0, r3, r0
 8010eb4:	0980      	lsrs	r0, r0, #6

    /* Check to make sure we are not trying a reload value that is too large */
    if (reload > IWDG_RLR_RL) {
 8010eb6:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8010eba:	d20a      	bcs.n	8010ed2 <hal_watchdog_init+0x26>
        return -1;
    }

    g_wdt_cfg.Instance = IWDG;
 8010ebc:	4b07      	ldr	r3, [pc, #28]	; (8010edc <hal_watchdog_init+0x30>)
 8010ebe:	4a08      	ldr	r2, [pc, #32]	; (8010ee0 <hal_watchdog_init+0x34>)
 8010ec0:	601a      	str	r2, [r3, #0]
    g_wdt_cfg.Init.Prescaler = IWDG_PRESCALER_256;
 8010ec2:	2206      	movs	r2, #6
 8010ec4:	605a      	str	r2, [r3, #4]
    g_wdt_cfg.Init.Reload = reload;
 8010ec6:	6098      	str	r0, [r3, #8]
    STM32_HAL_WATCHDOG_CUSTOM_INIT(&g_wdt_cfg);
 8010ec8:	f640 72ff 	movw	r2, #4095	; 0xfff
 8010ecc:	60da      	str	r2, [r3, #12]

    return 0;
 8010ece:	2000      	movs	r0, #0
 8010ed0:	4770      	bx	lr
        return -1;
 8010ed2:	f04f 30ff 	mov.w	r0, #4294967295
}
 8010ed6:	4770      	bx	lr
 8010ed8:	10624dd3 	.word	0x10624dd3
 8010edc:	200039a4 	.word	0x200039a4
 8010ee0:	40003000 	.word	0x40003000

08010ee4 <hal_watchdog_enable>:

void
hal_watchdog_enable(void)
{
 8010ee4:	b508      	push	{r3, lr}
    __HAL_DBGMCU_FREEZE_IWDG();
 8010ee6:	4a04      	ldr	r2, [pc, #16]	; (8010ef8 <hal_watchdog_enable+0x14>)
 8010ee8:	6893      	ldr	r3, [r2, #8]
 8010eea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8010eee:	6093      	str	r3, [r2, #8]
    HAL_IWDG_Init(&g_wdt_cfg);
 8010ef0:	4802      	ldr	r0, [pc, #8]	; (8010efc <hal_watchdog_enable+0x18>)
 8010ef2:	f000 fb7b 	bl	80115ec <HAL_IWDG_Init>
}
 8010ef6:	bd08      	pop	{r3, pc}
 8010ef8:	e0042000 	.word	0xe0042000
 8010efc:	200039a4 	.word	0x200039a4

08010f00 <hal_watchdog_tickle>:

void
hal_watchdog_tickle(void)
{
 8010f00:	b508      	push	{r3, lr}
    HAL_IWDG_Refresh(&g_wdt_cfg);
 8010f02:	4802      	ldr	r0, [pc, #8]	; (8010f0c <hal_watchdog_tickle+0xc>)
 8010f04:	f000 fb9e 	bl	8011644 <HAL_IWDG_Refresh>
}
 8010f08:	bd08      	pop	{r3, pc}
 8010f0a:	bf00      	nop
 8010f0c:	200039a4 	.word	0x200039a4

08010f10 <_sbrk>:
{
    static char *brk = &__HeapBase;

    void *prev_brk;

    if (incr < 0) {
 8010f10:	1e03      	subs	r3, r0, #0
 8010f12:	db09      	blt.n	8010f28 <_sbrk+0x18>
            prev_brk = brk;
            brk -= incr;
        }
    } else {
        /* Allocating memory from the heap. */
        if (&__HeapLimit - brk >= incr) {
 8010f14:	4a0c      	ldr	r2, [pc, #48]	; (8010f48 <_sbrk+0x38>)
 8010f16:	6810      	ldr	r0, [r2, #0]
 8010f18:	4a0c      	ldr	r2, [pc, #48]	; (8010f4c <_sbrk+0x3c>)
 8010f1a:	1a12      	subs	r2, r2, r0
 8010f1c:	429a      	cmp	r2, r3
 8010f1e:	db0f      	blt.n	8010f40 <_sbrk+0x30>
            prev_brk = brk;
            brk += incr;
 8010f20:	4403      	add	r3, r0
 8010f22:	4a09      	ldr	r2, [pc, #36]	; (8010f48 <_sbrk+0x38>)
 8010f24:	6013      	str	r3, [r2, #0]
 8010f26:	4770      	bx	lr
        if (brk - incr < &__HeapBase) {
 8010f28:	4a07      	ldr	r2, [pc, #28]	; (8010f48 <_sbrk+0x38>)
 8010f2a:	6810      	ldr	r0, [r2, #0]
 8010f2c:	4403      	add	r3, r0
 8010f2e:	4a08      	ldr	r2, [pc, #32]	; (8010f50 <_sbrk+0x40>)
 8010f30:	4293      	cmp	r3, r2
 8010f32:	d302      	bcc.n	8010f3a <_sbrk+0x2a>
            brk -= incr;
 8010f34:	4a04      	ldr	r2, [pc, #16]	; (8010f48 <_sbrk+0x38>)
 8010f36:	6013      	str	r3, [r2, #0]
 8010f38:	4770      	bx	lr
            prev_brk = (void *)-1;
 8010f3a:	f04f 30ff 	mov.w	r0, #4294967295
 8010f3e:	4770      	bx	lr
        } else {
            prev_brk = (void *)-1;
 8010f40:	f04f 30ff 	mov.w	r0, #4294967295
        }
    }

    return prev_brk;
}
 8010f44:	4770      	bx	lr
 8010f46:	bf00      	nop
 8010f48:	2000028c 	.word	0x2000028c
 8010f4c:	20018000 	.word	0x20018000
 8010f50:	200039c0 	.word	0x200039c0

08010f54 <FLASH_Program_DoubleWord>:
  * @param  Address: specifies the address to be programmed.
  * @param  Data: specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8010f54:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8010f56:	4c06      	ldr	r4, [pc, #24]	; (8010f70 <FLASH_Program_DoubleWord+0x1c>)
 8010f58:	6961      	ldr	r1, [r4, #20]
 8010f5a:	f041 0101 	orr.w	r1, r1, #1
 8010f5e:	6161      	str	r1, [r4, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8010f60:	6002      	str	r2, [r0, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8010f62:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8010f66:	6043      	str	r3, [r0, #4]
}
 8010f68:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010f6c:	4770      	bx	lr
 8010f6e:	bf00      	nop
 8010f70:	40022000 	.word	0x40022000

08010f74 <FLASH_Program_Fast>:
  * @param  Address: specifies the address to be programmed.
  * @param  DataAddress: specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8010f74:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8010f76:	4a0b      	ldr	r2, [pc, #44]	; (8010fa4 <FLASH_Program_Fast+0x30>)
 8010f78:	6953      	ldr	r3, [r2, #20]
 8010f7a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8010f7e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010f80:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010f84:	b672      	cpsid	i
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8010f86:	2340      	movs	r3, #64	; 0x40
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8010f88:	f851 2b04 	ldr.w	r2, [r1], #4
 8010f8c:	f840 2b04 	str.w	r2, [r0], #4
    dest_addr++;
    src_addr++;
    row_index--;
 8010f90:	3b01      	subs	r3, #1
  } while (row_index != 0U);
 8010f92:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8010f96:	d1f7      	bne.n	8010f88 <FLASH_Program_Fast+0x14>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010f98:	f384 8810 	msr	PRIMASK, r4

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8010f9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010fa0:	4770      	bx	lr
 8010fa2:	bf00      	nop
 8010fa4:	40022000 	.word	0x40022000

08010fa8 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8010fa8:	4b09      	ldr	r3, [pc, #36]	; (8010fd0 <HAL_FLASH_Unlock+0x28>)
 8010faa:	695b      	ldr	r3, [r3, #20]
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	db01      	blt.n	8010fb4 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 8010fb0:	2000      	movs	r0, #0
 8010fb2:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8010fb4:	4b06      	ldr	r3, [pc, #24]	; (8010fd0 <HAL_FLASH_Unlock+0x28>)
 8010fb6:	4a07      	ldr	r2, [pc, #28]	; (8010fd4 <HAL_FLASH_Unlock+0x2c>)
 8010fb8:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8010fba:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8010fbe:	609a      	str	r2, [r3, #8]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8010fc0:	695b      	ldr	r3, [r3, #20]
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	db01      	blt.n	8010fca <HAL_FLASH_Unlock+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 8010fc6:	2000      	movs	r0, #0
 8010fc8:	4770      	bx	lr
      status = HAL_ERROR;
 8010fca:	2001      	movs	r0, #1
}
 8010fcc:	4770      	bx	lr
 8010fce:	bf00      	nop
 8010fd0:	40022000 	.word	0x40022000
 8010fd4:	45670123 	.word	0x45670123

08010fd8 <FLASH_WaitForLastOperation>:
{
 8010fd8:	b538      	push	{r3, r4, r5, lr}
 8010fda:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8010fdc:	f7ff fab8 	bl	8010550 <HAL_GetTick>
 8010fe0:	4605      	mov	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8010fe2:	4b1e      	ldr	r3, [pc, #120]	; (801105c <FLASH_WaitForLastOperation+0x84>)
 8010fe4:	691b      	ldr	r3, [r3, #16]
 8010fe6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8010fea:	d009      	beq.n	8011000 <FLASH_WaitForLastOperation+0x28>
    if(Timeout != HAL_MAX_DELAY)
 8010fec:	f1b4 3fff 	cmp.w	r4, #4294967295
 8010ff0:	d0f7      	beq.n	8010fe2 <FLASH_WaitForLastOperation+0xa>
      if((HAL_GetTick() - tickstart) >= Timeout)
 8010ff2:	f7ff faad 	bl	8010550 <HAL_GetTick>
 8010ff6:	1b40      	subs	r0, r0, r5
 8010ff8:	42a0      	cmp	r0, r4
 8010ffa:	d3f2      	bcc.n	8010fe2 <FLASH_WaitForLastOperation+0xa>
        return HAL_TIMEOUT;
 8010ffc:	2003      	movs	r0, #3
 8010ffe:	e027      	b.n	8011050 <FLASH_WaitForLastOperation+0x78>
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8011000:	4a16      	ldr	r2, [pc, #88]	; (801105c <FLASH_WaitForLastOperation+0x84>)
 8011002:	6913      	ldr	r3, [r2, #16]
 8011004:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 8011008:	f023 0305 	bic.w	r3, r3, #5
 801100c:	041b      	lsls	r3, r3, #16
 801100e:	0c1b      	lsrs	r3, r3, #16
  error |= (FLASH->ECCR & FLASH_FLAG_ECCD);
 8011010:	6992      	ldr	r2, [r2, #24]
 8011012:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
  if(error != 0u)
 8011016:	4313      	orrs	r3, r2
 8011018:	d011      	beq.n	801103e <FLASH_WaitForLastOperation+0x66>
    pFlash.ErrorCode |= error;
 801101a:	4911      	ldr	r1, [pc, #68]	; (8011060 <FLASH_WaitForLastOperation+0x88>)
 801101c:	684a      	ldr	r2, [r1, #4]
 801101e:	431a      	orrs	r2, r3
 8011020:	604a      	str	r2, [r1, #4]
    __HAL_FLASH_CLEAR_FLAG(error);
 8011022:	f013 4240 	ands.w	r2, r3, #3221225472	; 0xc0000000
 8011026:	d003      	beq.n	8011030 <FLASH_WaitForLastOperation+0x58>
 8011028:	490c      	ldr	r1, [pc, #48]	; (801105c <FLASH_WaitForLastOperation+0x84>)
 801102a:	6988      	ldr	r0, [r1, #24]
 801102c:	4302      	orrs	r2, r0
 801102e:	618a      	str	r2, [r1, #24]
 8011030:	f033 4340 	bics.w	r3, r3, #3221225472	; 0xc0000000
 8011034:	d00d      	beq.n	8011052 <FLASH_WaitForLastOperation+0x7a>
 8011036:	4a09      	ldr	r2, [pc, #36]	; (801105c <FLASH_WaitForLastOperation+0x84>)
 8011038:	6113      	str	r3, [r2, #16]
    return HAL_ERROR;
 801103a:	2001      	movs	r0, #1
 801103c:	e008      	b.n	8011050 <FLASH_WaitForLastOperation+0x78>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 801103e:	4b07      	ldr	r3, [pc, #28]	; (801105c <FLASH_WaitForLastOperation+0x84>)
 8011040:	691b      	ldr	r3, [r3, #16]
 8011042:	f013 0f01 	tst.w	r3, #1
 8011046:	d006      	beq.n	8011056 <FLASH_WaitForLastOperation+0x7e>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8011048:	4b04      	ldr	r3, [pc, #16]	; (801105c <FLASH_WaitForLastOperation+0x84>)
 801104a:	2201      	movs	r2, #1
 801104c:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 801104e:	2000      	movs	r0, #0
}
 8011050:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8011052:	2001      	movs	r0, #1
 8011054:	e7fc      	b.n	8011050 <FLASH_WaitForLastOperation+0x78>
  return HAL_OK;
 8011056:	2000      	movs	r0, #0
 8011058:	e7fa      	b.n	8011050 <FLASH_WaitForLastOperation+0x78>
 801105a:	bf00      	nop
 801105c:	40022000 	.word	0x40022000
 8011060:	20000290 	.word	0x20000290

08011064 <HAL_FLASH_Program>:
{
 8011064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 8011068:	4c28      	ldr	r4, [pc, #160]	; (801110c <HAL_FLASH_Program+0xa8>)
 801106a:	7824      	ldrb	r4, [r4, #0]
 801106c:	2c01      	cmp	r4, #1
 801106e:	d04a      	beq.n	8011106 <HAL_FLASH_Program+0xa2>
 8011070:	4698      	mov	r8, r3
 8011072:	4617      	mov	r7, r2
 8011074:	460d      	mov	r5, r1
 8011076:	4604      	mov	r4, r0
 8011078:	4b24      	ldr	r3, [pc, #144]	; (801110c <HAL_FLASH_Program+0xa8>)
 801107a:	2201      	movs	r2, #1
 801107c:	701a      	strb	r2, [r3, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801107e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8011082:	f7ff ffa9 	bl	8010fd8 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8011086:	4606      	mov	r6, r0
 8011088:	bb08      	cbnz	r0, 80110ce <HAL_FLASH_Program+0x6a>
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801108a:	4b20      	ldr	r3, [pc, #128]	; (801110c <HAL_FLASH_Program+0xa8>)
 801108c:	2200      	movs	r2, #0
 801108e:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8011090:	4b1f      	ldr	r3, [pc, #124]	; (8011110 <HAL_FLASH_Program+0xac>)
 8011092:	681b      	ldr	r3, [r3, #0]
 8011094:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8011098:	d01f      	beq.n	80110da <HAL_FLASH_Program+0x76>
      __HAL_FLASH_DATA_CACHE_DISABLE();
 801109a:	4a1d      	ldr	r2, [pc, #116]	; (8011110 <HAL_FLASH_Program+0xac>)
 801109c:	6813      	ldr	r3, [r2, #0]
 801109e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80110a2:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80110a4:	4b19      	ldr	r3, [pc, #100]	; (801110c <HAL_FLASH_Program+0xa8>)
 80110a6:	2202      	movs	r2, #2
 80110a8:	771a      	strb	r2, [r3, #28]
    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80110aa:	b1d4      	cbz	r4, 80110e2 <HAL_FLASH_Program+0x7e>
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 80110ac:	1e63      	subs	r3, r4, #1
 80110ae:	2b01      	cmp	r3, #1
 80110b0:	d91e      	bls.n	80110f0 <HAL_FLASH_Program+0x8c>
  uint32_t prog_bit = 0;
 80110b2:	2400      	movs	r4, #0
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80110b4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80110b8:	f7ff ff8e 	bl	8010fd8 <FLASH_WaitForLastOperation>
 80110bc:	4606      	mov	r6, r0
    if (prog_bit != 0U)
 80110be:	b124      	cbz	r4, 80110ca <HAL_FLASH_Program+0x66>
      CLEAR_BIT(FLASH->CR, prog_bit);
 80110c0:	4a13      	ldr	r2, [pc, #76]	; (8011110 <HAL_FLASH_Program+0xac>)
 80110c2:	6953      	ldr	r3, [r2, #20]
 80110c4:	ea23 0404 	bic.w	r4, r3, r4
 80110c8:	6154      	str	r4, [r2, #20]
    FLASH_FlushCaches();
 80110ca:	f000 f85d 	bl	8011188 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 80110ce:	4b0f      	ldr	r3, [pc, #60]	; (801110c <HAL_FLASH_Program+0xa8>)
 80110d0:	2200      	movs	r2, #0
 80110d2:	701a      	strb	r2, [r3, #0]
}
 80110d4:	4630      	mov	r0, r6
 80110d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80110da:	4b0c      	ldr	r3, [pc, #48]	; (801110c <HAL_FLASH_Program+0xa8>)
 80110dc:	2200      	movs	r2, #0
 80110de:	771a      	strb	r2, [r3, #28]
 80110e0:	e7e3      	b.n	80110aa <HAL_FLASH_Program+0x46>
      FLASH_Program_DoubleWord(Address, Data);
 80110e2:	463a      	mov	r2, r7
 80110e4:	4643      	mov	r3, r8
 80110e6:	4628      	mov	r0, r5
 80110e8:	f7ff ff34 	bl	8010f54 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 80110ec:	2401      	movs	r4, #1
 80110ee:	e7e1      	b.n	80110b4 <HAL_FLASH_Program+0x50>
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80110f0:	4639      	mov	r1, r7
 80110f2:	4628      	mov	r0, r5
 80110f4:	f7ff ff3e 	bl	8010f74 <FLASH_Program_Fast>
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 80110f8:	2c02      	cmp	r4, #2
 80110fa:	d001      	beq.n	8011100 <HAL_FLASH_Program+0x9c>
  uint32_t prog_bit = 0;
 80110fc:	2400      	movs	r4, #0
 80110fe:	e7d9      	b.n	80110b4 <HAL_FLASH_Program+0x50>
        prog_bit = FLASH_CR_FSTPG;
 8011100:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 8011104:	e7d6      	b.n	80110b4 <HAL_FLASH_Program+0x50>
  __HAL_LOCK(&pFlash);
 8011106:	2602      	movs	r6, #2
 8011108:	e7e4      	b.n	80110d4 <HAL_FLASH_Program+0x70>
 801110a:	bf00      	nop
 801110c:	20000290 	.word	0x20000290
 8011110:	40022000 	.word	0x40022000

08011114 <FLASH_MassErase>:
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8011114:	f010 0f01 	tst.w	r0, #1
 8011118:	d004      	beq.n	8011124 <FLASH_MassErase+0x10>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 801111a:	4a09      	ldr	r2, [pc, #36]	; (8011140 <FLASH_MassErase+0x2c>)
 801111c:	6953      	ldr	r3, [r2, #20]
 801111e:	f043 0304 	orr.w	r3, r3, #4
 8011122:	6153      	str	r3, [r2, #20]

#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 8011124:	f010 0f02 	tst.w	r0, #2
 8011128:	d004      	beq.n	8011134 <FLASH_MassErase+0x20>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 801112a:	4a05      	ldr	r2, [pc, #20]	; (8011140 <FLASH_MassErase+0x2c>)
 801112c:	6953      	ldr	r3, [r2, #20]
 801112e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011132:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8011134:	4a02      	ldr	r2, [pc, #8]	; (8011140 <FLASH_MassErase+0x2c>)
 8011136:	6953      	ldr	r3, [r2, #20]
 8011138:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801113c:	6153      	str	r3, [r2, #20]
}
 801113e:	4770      	bx	lr
 8011140:	40022000 	.word	0x40022000

08011144 <FLASH_PageErase>:
  else
#endif
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 8011144:	f011 0f01 	tst.w	r1, #1
 8011148:	d116      	bne.n	8011178 <FLASH_PageErase+0x34>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 801114a:	4a0e      	ldr	r2, [pc, #56]	; (8011184 <FLASH_PageErase+0x40>)
 801114c:	6953      	ldr	r3, [r2, #20]
 801114e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8011152:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8011154:	4b0b      	ldr	r3, [pc, #44]	; (8011184 <FLASH_PageErase+0x40>)
 8011156:	695a      	ldr	r2, [r3, #20]
 8011158:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 801115c:	00c0      	lsls	r0, r0, #3
 801115e:	f400 60ff 	and.w	r0, r0, #2040	; 0x7f8
 8011162:	4310      	orrs	r0, r2
 8011164:	6158      	str	r0, [r3, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8011166:	695a      	ldr	r2, [r3, #20]
 8011168:	f042 0202 	orr.w	r2, r2, #2
 801116c:	615a      	str	r2, [r3, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 801116e:	695a      	ldr	r2, [r3, #20]
 8011170:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8011174:	615a      	str	r2, [r3, #20]
}
 8011176:	4770      	bx	lr
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8011178:	4a02      	ldr	r2, [pc, #8]	; (8011184 <FLASH_PageErase+0x40>)
 801117a:	6953      	ldr	r3, [r2, #20]
 801117c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011180:	6153      	str	r3, [r2, #20]
 8011182:	e7e7      	b.n	8011154 <FLASH_PageErase+0x10>
 8011184:	40022000 	.word	0x40022000

08011188 <FLASH_FlushCaches>:
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8011188:	4b14      	ldr	r3, [pc, #80]	; (80111dc <FLASH_FlushCaches+0x54>)
 801118a:	7f1b      	ldrb	r3, [r3, #28]
 801118c:	b2db      	uxtb	r3, r3

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 801118e:	2b01      	cmp	r3, #1
 8011190:	d001      	beq.n	8011196 <FLASH_FlushCaches+0xe>
 8011192:	2b03      	cmp	r3, #3
 8011194:	d10c      	bne.n	80111b0 <FLASH_FlushCaches+0x28>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8011196:	4a12      	ldr	r2, [pc, #72]	; (80111e0 <FLASH_FlushCaches+0x58>)
 8011198:	6811      	ldr	r1, [r2, #0]
 801119a:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 801119e:	6011      	str	r1, [r2, #0]
 80111a0:	6811      	ldr	r1, [r2, #0]
 80111a2:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 80111a6:	6011      	str	r1, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80111a8:	6811      	ldr	r1, [r2, #0]
 80111aa:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 80111ae:	6011      	str	r1, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 80111b0:	3b02      	subs	r3, #2
 80111b2:	b2db      	uxtb	r3, r3
 80111b4:	2b01      	cmp	r3, #1
 80111b6:	d903      	bls.n	80111c0 <FLASH_FlushCaches+0x38>
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80111b8:	4b08      	ldr	r3, [pc, #32]	; (80111dc <FLASH_FlushCaches+0x54>)
 80111ba:	2200      	movs	r2, #0
 80111bc:	771a      	strb	r2, [r3, #28]
}
 80111be:	4770      	bx	lr
    __HAL_FLASH_DATA_CACHE_RESET();
 80111c0:	4b07      	ldr	r3, [pc, #28]	; (80111e0 <FLASH_FlushCaches+0x58>)
 80111c2:	681a      	ldr	r2, [r3, #0]
 80111c4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80111c8:	601a      	str	r2, [r3, #0]
 80111ca:	681a      	ldr	r2, [r3, #0]
 80111cc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80111d0:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80111d2:	681a      	ldr	r2, [r3, #0]
 80111d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80111d8:	601a      	str	r2, [r3, #0]
 80111da:	e7ed      	b.n	80111b8 <FLASH_FlushCaches+0x30>
 80111dc:	20000290 	.word	0x20000290
 80111e0:	40022000 	.word	0x40022000

080111e4 <HAL_FLASHEx_Erase>:
{
 80111e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 80111e6:	4b3c      	ldr	r3, [pc, #240]	; (80112d8 <HAL_FLASHEx_Erase+0xf4>)
 80111e8:	781b      	ldrb	r3, [r3, #0]
 80111ea:	2b01      	cmp	r3, #1
 80111ec:	d071      	beq.n	80112d2 <HAL_FLASHEx_Erase+0xee>
 80111ee:	460e      	mov	r6, r1
 80111f0:	4604      	mov	r4, r0
 80111f2:	4b39      	ldr	r3, [pc, #228]	; (80112d8 <HAL_FLASHEx_Erase+0xf4>)
 80111f4:	2201      	movs	r2, #1
 80111f6:	701a      	strb	r2, [r3, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80111f8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80111fc:	f7ff feec 	bl	8010fd8 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8011200:	4607      	mov	r7, r0
 8011202:	2800      	cmp	r0, #0
 8011204:	d160      	bne.n	80112c8 <HAL_FLASHEx_Erase+0xe4>
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8011206:	4b34      	ldr	r3, [pc, #208]	; (80112d8 <HAL_FLASHEx_Erase+0xf4>)
 8011208:	2200      	movs	r2, #0
 801120a:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 801120c:	4b33      	ldr	r3, [pc, #204]	; (80112dc <HAL_FLASHEx_Erase+0xf8>)
 801120e:	681b      	ldr	r3, [r3, #0]
 8011210:	f413 7f00 	tst.w	r3, #512	; 0x200
 8011214:	d033      	beq.n	801127e <HAL_FLASHEx_Erase+0x9a>
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8011216:	4b31      	ldr	r3, [pc, #196]	; (80112dc <HAL_FLASHEx_Erase+0xf8>)
 8011218:	681a      	ldr	r2, [r3, #0]
 801121a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 801121e:	601a      	str	r2, [r3, #0]
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8011220:	681b      	ldr	r3, [r3, #0]
 8011222:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8011226:	d026      	beq.n	8011276 <HAL_FLASHEx_Erase+0x92>
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8011228:	4a2c      	ldr	r2, [pc, #176]	; (80112dc <HAL_FLASHEx_Erase+0xf8>)
 801122a:	6813      	ldr	r3, [r2, #0]
 801122c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8011230:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8011232:	4b29      	ldr	r3, [pc, #164]	; (80112d8 <HAL_FLASHEx_Erase+0xf4>)
 8011234:	2203      	movs	r2, #3
 8011236:	771a      	strb	r2, [r3, #28]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8011238:	6823      	ldr	r3, [r4, #0]
 801123a:	2b01      	cmp	r3, #1
 801123c:	d031      	beq.n	80112a2 <HAL_FLASHEx_Erase+0xbe>
      *PageError = 0xFFFFFFFFU;
 801123e:	f04f 33ff 	mov.w	r3, #4294967295
 8011242:	6033      	str	r3, [r6, #0]
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8011244:	68a5      	ldr	r5, [r4, #8]
 8011246:	68a3      	ldr	r3, [r4, #8]
 8011248:	68e2      	ldr	r2, [r4, #12]
 801124a:	4413      	add	r3, r2
 801124c:	42ab      	cmp	r3, r5
 801124e:	d939      	bls.n	80112c4 <HAL_FLASHEx_Erase+0xe0>
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8011250:	6861      	ldr	r1, [r4, #4]
 8011252:	4628      	mov	r0, r5
 8011254:	f7ff ff76 	bl	8011144 <FLASH_PageErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011258:	f24c 3050 	movw	r0, #50000	; 0xc350
 801125c:	f7ff febc 	bl	8010fd8 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8011260:	4a1e      	ldr	r2, [pc, #120]	; (80112dc <HAL_FLASHEx_Erase+0xf8>)
 8011262:	6953      	ldr	r3, [r2, #20]
 8011264:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8011268:	f023 0302 	bic.w	r3, r3, #2
 801126c:	6153      	str	r3, [r2, #20]
        if (status != HAL_OK)
 801126e:	4607      	mov	r7, r0
 8011270:	bb38      	cbnz	r0, 80112c2 <HAL_FLASHEx_Erase+0xde>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8011272:	3501      	adds	r5, #1
 8011274:	e7e7      	b.n	8011246 <HAL_FLASHEx_Erase+0x62>
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8011276:	4b18      	ldr	r3, [pc, #96]	; (80112d8 <HAL_FLASHEx_Erase+0xf4>)
 8011278:	2201      	movs	r2, #1
 801127a:	771a      	strb	r2, [r3, #28]
 801127c:	e7dc      	b.n	8011238 <HAL_FLASHEx_Erase+0x54>
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 801127e:	4b17      	ldr	r3, [pc, #92]	; (80112dc <HAL_FLASHEx_Erase+0xf8>)
 8011280:	681b      	ldr	r3, [r3, #0]
 8011282:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8011286:	d008      	beq.n	801129a <HAL_FLASHEx_Erase+0xb6>
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8011288:	4a14      	ldr	r2, [pc, #80]	; (80112dc <HAL_FLASHEx_Erase+0xf8>)
 801128a:	6813      	ldr	r3, [r2, #0]
 801128c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8011290:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8011292:	4b11      	ldr	r3, [pc, #68]	; (80112d8 <HAL_FLASHEx_Erase+0xf4>)
 8011294:	2202      	movs	r2, #2
 8011296:	771a      	strb	r2, [r3, #28]
 8011298:	e7ce      	b.n	8011238 <HAL_FLASHEx_Erase+0x54>
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 801129a:	4b0f      	ldr	r3, [pc, #60]	; (80112d8 <HAL_FLASHEx_Erase+0xf4>)
 801129c:	2200      	movs	r2, #0
 801129e:	771a      	strb	r2, [r3, #28]
 80112a0:	e7ca      	b.n	8011238 <HAL_FLASHEx_Erase+0x54>
      FLASH_MassErase(pEraseInit->Banks);
 80112a2:	6860      	ldr	r0, [r4, #4]
 80112a4:	f7ff ff36 	bl	8011114 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80112a8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80112ac:	f7ff fe94 	bl	8010fd8 <FLASH_WaitForLastOperation>
 80112b0:	4607      	mov	r7, r0
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 80112b2:	4a0a      	ldr	r2, [pc, #40]	; (80112dc <HAL_FLASHEx_Erase+0xf8>)
 80112b4:	6953      	ldr	r3, [r2, #20]
 80112b6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80112ba:	f023 0304 	bic.w	r3, r3, #4
 80112be:	6153      	str	r3, [r2, #20]
 80112c0:	e000      	b.n	80112c4 <HAL_FLASHEx_Erase+0xe0>
          *PageError = page_index;
 80112c2:	6035      	str	r5, [r6, #0]
    FLASH_FlushCaches();
 80112c4:	f7ff ff60 	bl	8011188 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 80112c8:	4b03      	ldr	r3, [pc, #12]	; (80112d8 <HAL_FLASHEx_Erase+0xf4>)
 80112ca:	2200      	movs	r2, #0
 80112cc:	701a      	strb	r2, [r3, #0]
}
 80112ce:	4638      	mov	r0, r7
 80112d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 80112d2:	2702      	movs	r7, #2
 80112d4:	e7fb      	b.n	80112ce <HAL_FLASHEx_Erase+0xea>
 80112d6:	bf00      	nop
 80112d8:	20000290 	.word	0x20000290
 80112dc:	40022000 	.word	0x40022000

080112e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80112e0:	b4f0      	push	{r4, r5, r6, r7}
 80112e2:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
 80112e4:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80112e6:	e041      	b.n	801136c <HAL_GPIO_Init+0x8c>

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80112e8:	f8d0 c02c 	ldr.w	ip, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80112ec:	ea2c 0c04 	bic.w	ip, ip, r4
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80112f0:	f3c6 04c0 	ubfx	r4, r6, #3, #1
 80112f4:	409c      	lsls	r4, r3
 80112f6:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->ASCR = temp;
 80112fa:	62c4      	str	r4, [r0, #44]	; 0x2c
 80112fc:	e086      	b.n	801140c <HAL_GPIO_Init+0x12c>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80112fe:	2406      	movs	r4, #6
 8011300:	e000      	b.n	8011304 <HAL_GPIO_Init+0x24>
 8011302:	2400      	movs	r4, #0
 8011304:	40b4      	lsls	r4, r6
 8011306:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8011308:	3502      	adds	r5, #2
 801130a:	4e66      	ldr	r6, [pc, #408]	; (80114a4 <HAL_GPIO_Init+0x1c4>)
 801130c:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8011310:	4c65      	ldr	r4, [pc, #404]	; (80114a8 <HAL_GPIO_Init+0x1c8>)
 8011312:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8011314:	43d4      	mvns	r4, r2
 8011316:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 801131a:	684f      	ldr	r7, [r1, #4]
 801131c:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8011320:	d001      	beq.n	8011326 <HAL_GPIO_Init+0x46>
        {
          temp |= iocurrent;
 8011322:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->IMR1 = temp;
 8011326:	4d60      	ldr	r5, [pc, #384]	; (80114a8 <HAL_GPIO_Init+0x1c8>)
 8011328:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR1;
 801132a:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 801132c:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8011330:	684f      	ldr	r7, [r1, #4]
 8011332:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8011336:	d001      	beq.n	801133c <HAL_GPIO_Init+0x5c>
        {
          temp |= iocurrent;
 8011338:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 801133c:	4d5a      	ldr	r5, [pc, #360]	; (80114a8 <HAL_GPIO_Init+0x1c8>)
 801133e:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8011340:	68ad      	ldr	r5, [r5, #8]
        temp &= ~(iocurrent);
 8011342:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8011346:	684f      	ldr	r7, [r1, #4]
 8011348:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 801134c:	d001      	beq.n	8011352 <HAL_GPIO_Init+0x72>
        {
          temp |= iocurrent;
 801134e:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8011352:	4d55      	ldr	r5, [pc, #340]	; (80114a8 <HAL_GPIO_Init+0x1c8>)
 8011354:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR1;
 8011356:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 8011358:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 801135a:	684e      	ldr	r6, [r1, #4]
 801135c:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8011360:	d001      	beq.n	8011366 <HAL_GPIO_Init+0x86>
        {
          temp |= iocurrent;
 8011362:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR1 = temp;
 8011366:	4a50      	ldr	r2, [pc, #320]	; (80114a8 <HAL_GPIO_Init+0x1c8>)
 8011368:	60d4      	str	r4, [r2, #12]
      }
    }

    position++;
 801136a:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 801136c:	680a      	ldr	r2, [r1, #0]
 801136e:	fa32 f403 	lsrs.w	r4, r2, r3
 8011372:	f000 8093 	beq.w	801149c <HAL_GPIO_Init+0x1bc>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8011376:	2401      	movs	r4, #1
 8011378:	409c      	lsls	r4, r3
    if (iocurrent != 0x00u)
 801137a:	4022      	ands	r2, r4
 801137c:	d0f5      	beq.n	801136a <HAL_GPIO_Init+0x8a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 801137e:	684d      	ldr	r5, [r1, #4]
 8011380:	2d02      	cmp	r5, #2
 8011382:	d001      	beq.n	8011388 <HAL_GPIO_Init+0xa8>
 8011384:	2d12      	cmp	r5, #18
 8011386:	d110      	bne.n	80113aa <HAL_GPIO_Init+0xca>
        temp = GPIOx->AFR[position >> 3u];
 8011388:	08de      	lsrs	r6, r3, #3
 801138a:	3608      	adds	r6, #8
 801138c:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8011390:	f003 0507 	and.w	r5, r3, #7
 8011394:	00af      	lsls	r7, r5, #2
 8011396:	250f      	movs	r5, #15
 8011398:	40bd      	lsls	r5, r7
 801139a:	ea2c 0c05 	bic.w	ip, ip, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 801139e:	690d      	ldr	r5, [r1, #16]
 80113a0:	40bd      	lsls	r5, r7
 80113a2:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3u] = temp;
 80113a6:	f840 5026 	str.w	r5, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 80113aa:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80113ac:	005f      	lsls	r7, r3, #1
 80113ae:	2503      	movs	r5, #3
 80113b0:	40bd      	lsls	r5, r7
 80113b2:	43ed      	mvns	r5, r5
 80113b4:	ea05 0c06 	and.w	ip, r5, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80113b8:	684e      	ldr	r6, [r1, #4]
 80113ba:	f006 0603 	and.w	r6, r6, #3
 80113be:	40be      	lsls	r6, r7
 80113c0:	ea46 060c 	orr.w	r6, r6, ip
      GPIOx->MODER = temp;
 80113c4:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80113c6:	684e      	ldr	r6, [r1, #4]
 80113c8:	f106 3cff 	add.w	ip, r6, #4294967295
 80113cc:	f1bc 0f01 	cmp.w	ip, #1
 80113d0:	d903      	bls.n	80113da <HAL_GPIO_Init+0xfa>
 80113d2:	2e11      	cmp	r6, #17
 80113d4:	d001      	beq.n	80113da <HAL_GPIO_Init+0xfa>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80113d6:	2e12      	cmp	r6, #18
 80113d8:	d111      	bne.n	80113fe <HAL_GPIO_Init+0x11e>
        temp = GPIOx->OSPEEDR;
 80113da:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80113dc:	ea05 0c06 	and.w	ip, r5, r6
        temp |= (GPIO_Init->Speed << (position * 2u));
 80113e0:	68ce      	ldr	r6, [r1, #12]
 80113e2:	40be      	lsls	r6, r7
 80113e4:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->OSPEEDR = temp;
 80113e8:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 80113ea:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80113ec:	ea26 0c04 	bic.w	ip, r6, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80113f0:	684e      	ldr	r6, [r1, #4]
 80113f2:	f3c6 1600 	ubfx	r6, r6, #4, #1
 80113f6:	409e      	lsls	r6, r3
 80113f8:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->OTYPER = temp;
 80113fc:	6046      	str	r6, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80113fe:	684e      	ldr	r6, [r1, #4]
 8011400:	f006 0c03 	and.w	ip, r6, #3
 8011404:	f1bc 0f03 	cmp.w	ip, #3
 8011408:	f43f af6e 	beq.w	80112e8 <HAL_GPIO_Init+0x8>
      temp = GPIOx->PUPDR;
 801140c:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 801140e:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8011410:	688c      	ldr	r4, [r1, #8]
 8011412:	40bc      	lsls	r4, r7
 8011414:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8011416:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8011418:	684c      	ldr	r4, [r1, #4]
 801141a:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 801141e:	d0a4      	beq.n	801136a <HAL_GPIO_Init+0x8a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8011420:	4c22      	ldr	r4, [pc, #136]	; (80114ac <HAL_GPIO_Init+0x1cc>)
 8011422:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8011424:	f045 0501 	orr.w	r5, r5, #1
 8011428:	6625      	str	r5, [r4, #96]	; 0x60
 801142a:	6e24      	ldr	r4, [r4, #96]	; 0x60
 801142c:	f004 0401 	and.w	r4, r4, #1
 8011430:	9401      	str	r4, [sp, #4]
 8011432:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8011434:	089d      	lsrs	r5, r3, #2
 8011436:	1cae      	adds	r6, r5, #2
 8011438:	4c1a      	ldr	r4, [pc, #104]	; (80114a4 <HAL_GPIO_Init+0x1c4>)
 801143a:	f854 7026 	ldr.w	r7, [r4, r6, lsl #2]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 801143e:	f003 0403 	and.w	r4, r3, #3
 8011442:	00a6      	lsls	r6, r4, #2
 8011444:	240f      	movs	r4, #15
 8011446:	40b4      	lsls	r4, r6
 8011448:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 801144c:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8011450:	f43f af57 	beq.w	8011302 <HAL_GPIO_Init+0x22>
 8011454:	4c16      	ldr	r4, [pc, #88]	; (80114b0 <HAL_GPIO_Init+0x1d0>)
 8011456:	42a0      	cmp	r0, r4
 8011458:	d016      	beq.n	8011488 <HAL_GPIO_Init+0x1a8>
 801145a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 801145e:	42a0      	cmp	r0, r4
 8011460:	d014      	beq.n	801148c <HAL_GPIO_Init+0x1ac>
 8011462:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8011466:	42a0      	cmp	r0, r4
 8011468:	d012      	beq.n	8011490 <HAL_GPIO_Init+0x1b0>
 801146a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 801146e:	42a0      	cmp	r0, r4
 8011470:	d010      	beq.n	8011494 <HAL_GPIO_Init+0x1b4>
 8011472:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8011476:	42a0      	cmp	r0, r4
 8011478:	d00e      	beq.n	8011498 <HAL_GPIO_Init+0x1b8>
 801147a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 801147e:	42a0      	cmp	r0, r4
 8011480:	f43f af3d 	beq.w	80112fe <HAL_GPIO_Init+0x1e>
 8011484:	2407      	movs	r4, #7
 8011486:	e73d      	b.n	8011304 <HAL_GPIO_Init+0x24>
 8011488:	2401      	movs	r4, #1
 801148a:	e73b      	b.n	8011304 <HAL_GPIO_Init+0x24>
 801148c:	2402      	movs	r4, #2
 801148e:	e739      	b.n	8011304 <HAL_GPIO_Init+0x24>
 8011490:	2403      	movs	r4, #3
 8011492:	e737      	b.n	8011304 <HAL_GPIO_Init+0x24>
 8011494:	2404      	movs	r4, #4
 8011496:	e735      	b.n	8011304 <HAL_GPIO_Init+0x24>
 8011498:	2405      	movs	r4, #5
 801149a:	e733      	b.n	8011304 <HAL_GPIO_Init+0x24>
  }
}
 801149c:	b002      	add	sp, #8
 801149e:	bcf0      	pop	{r4, r5, r6, r7}
 80114a0:	4770      	bx	lr
 80114a2:	bf00      	nop
 80114a4:	40010000 	.word	0x40010000
 80114a8:	40010400 	.word	0x40010400
 80114ac:	40021000 	.word	0x40021000
 80114b0:	48000400 	.word	0x48000400

080114b4 <HAL_GPIO_DeInit>:
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00u;
 80114b4:	2200      	movs	r2, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80114b6:	fa31 f302 	lsrs.w	r3, r1, r2
 80114ba:	f000 8083 	beq.w	80115c4 <HAL_GPIO_DeInit+0x110>
{
 80114be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80114c0:	e02f      	b.n	8011522 <HAL_GPIO_DeInit+0x6e>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80114c2:	2606      	movs	r6, #6
 80114c4:	e000      	b.n	80114c8 <HAL_GPIO_DeInit+0x14>
 80114c6:	2600      	movs	r6, #0
 80114c8:	fa06 f404 	lsl.w	r4, r6, r4
 80114cc:	42ac      	cmp	r4, r5
 80114ce:	d060      	beq.n	8011592 <HAL_GPIO_DeInit+0xde>
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80114d0:	6805      	ldr	r5, [r0, #0]
 80114d2:	0054      	lsls	r4, r2, #1
 80114d4:	2603      	movs	r6, #3
 80114d6:	fa06 f404 	lsl.w	r4, r6, r4
 80114da:	4325      	orrs	r5, r4
 80114dc:	6005      	str	r5, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80114de:	fa22 f506 	lsr.w	r5, r2, r6
 80114e2:	3508      	adds	r5, #8
 80114e4:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
 80114e8:	f002 0707 	and.w	r7, r2, #7
 80114ec:	ea4f 0c87 	mov.w	ip, r7, lsl #2
 80114f0:	270f      	movs	r7, #15
 80114f2:	fa07 f70c 	lsl.w	r7, r7, ip
 80114f6:	ea26 0607 	bic.w	r6, r6, r7
 80114fa:	f840 6025 	str.w	r6, [r0, r5, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80114fe:	6885      	ldr	r5, [r0, #8]
 8011500:	43e4      	mvns	r4, r4
 8011502:	4025      	ands	r5, r4
 8011504:	6085      	str	r5, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8011506:	6845      	ldr	r5, [r0, #4]
 8011508:	43db      	mvns	r3, r3
 801150a:	401d      	ands	r5, r3
 801150c:	6045      	str	r5, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 801150e:	68c5      	ldr	r5, [r0, #12]
 8011510:	402c      	ands	r4, r5
 8011512:	60c4      	str	r4, [r0, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8011514:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8011516:	4023      	ands	r3, r4
 8011518:	62c3      	str	r3, [r0, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 801151a:	3201      	adds	r2, #1
  while ((GPIO_Pin >> position) != 0x00u)
 801151c:	fa31 f302 	lsrs.w	r3, r1, r2
 8011520:	d04f      	beq.n	80115c2 <HAL_GPIO_DeInit+0x10e>
    iocurrent = (GPIO_Pin) & (1uL << position);
 8011522:	2301      	movs	r3, #1
 8011524:	4093      	lsls	r3, r2
    if (iocurrent != 0x00u)
 8011526:	ea13 0e01 	ands.w	lr, r3, r1
 801152a:	d0f6      	beq.n	801151a <HAL_GPIO_DeInit+0x66>
      tmp = SYSCFG->EXTICR[position >> 2u];
 801152c:	0897      	lsrs	r7, r2, #2
 801152e:	1cbd      	adds	r5, r7, #2
 8011530:	4c25      	ldr	r4, [pc, #148]	; (80115c8 <HAL_GPIO_DeInit+0x114>)
 8011532:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8011536:	f002 0403 	and.w	r4, r2, #3
 801153a:	00a4      	lsls	r4, r4, #2
 801153c:	260f      	movs	r6, #15
 801153e:	fa06 fc04 	lsl.w	ip, r6, r4
 8011542:	ea0c 0505 	and.w	r5, ip, r5
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8011546:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 801154a:	d0bc      	beq.n	80114c6 <HAL_GPIO_DeInit+0x12>
 801154c:	4e1f      	ldr	r6, [pc, #124]	; (80115cc <HAL_GPIO_DeInit+0x118>)
 801154e:	42b0      	cmp	r0, r6
 8011550:	d015      	beq.n	801157e <HAL_GPIO_DeInit+0xca>
 8011552:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8011556:	42b0      	cmp	r0, r6
 8011558:	d013      	beq.n	8011582 <HAL_GPIO_DeInit+0xce>
 801155a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 801155e:	42b0      	cmp	r0, r6
 8011560:	d011      	beq.n	8011586 <HAL_GPIO_DeInit+0xd2>
 8011562:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8011566:	42b0      	cmp	r0, r6
 8011568:	d00f      	beq.n	801158a <HAL_GPIO_DeInit+0xd6>
 801156a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 801156e:	42b0      	cmp	r0, r6
 8011570:	d00d      	beq.n	801158e <HAL_GPIO_DeInit+0xda>
 8011572:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8011576:	42b0      	cmp	r0, r6
 8011578:	d0a3      	beq.n	80114c2 <HAL_GPIO_DeInit+0xe>
 801157a:	2607      	movs	r6, #7
 801157c:	e7a4      	b.n	80114c8 <HAL_GPIO_DeInit+0x14>
 801157e:	2601      	movs	r6, #1
 8011580:	e7a2      	b.n	80114c8 <HAL_GPIO_DeInit+0x14>
 8011582:	2602      	movs	r6, #2
 8011584:	e7a0      	b.n	80114c8 <HAL_GPIO_DeInit+0x14>
 8011586:	2603      	movs	r6, #3
 8011588:	e79e      	b.n	80114c8 <HAL_GPIO_DeInit+0x14>
 801158a:	2604      	movs	r6, #4
 801158c:	e79c      	b.n	80114c8 <HAL_GPIO_DeInit+0x14>
 801158e:	2605      	movs	r6, #5
 8011590:	e79a      	b.n	80114c8 <HAL_GPIO_DeInit+0x14>
        EXTI->IMR1 &= ~(iocurrent);
 8011592:	4c0f      	ldr	r4, [pc, #60]	; (80115d0 <HAL_GPIO_DeInit+0x11c>)
 8011594:	6826      	ldr	r6, [r4, #0]
 8011596:	ea6f 050e 	mvn.w	r5, lr
 801159a:	402e      	ands	r6, r5
 801159c:	6026      	str	r6, [r4, #0]
        EXTI->EMR1 &= ~(iocurrent);
 801159e:	6866      	ldr	r6, [r4, #4]
 80115a0:	402e      	ands	r6, r5
 80115a2:	6066      	str	r6, [r4, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 80115a4:	68a6      	ldr	r6, [r4, #8]
 80115a6:	402e      	ands	r6, r5
 80115a8:	60a6      	str	r6, [r4, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 80115aa:	68e6      	ldr	r6, [r4, #12]
 80115ac:	4035      	ands	r5, r6
 80115ae:	60e5      	str	r5, [r4, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80115b0:	4d05      	ldr	r5, [pc, #20]	; (80115c8 <HAL_GPIO_DeInit+0x114>)
 80115b2:	1cbc      	adds	r4, r7, #2
 80115b4:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
 80115b8:	ea26 060c 	bic.w	r6, r6, ip
 80115bc:	f845 6024 	str.w	r6, [r5, r4, lsl #2]
 80115c0:	e786      	b.n	80114d0 <HAL_GPIO_DeInit+0x1c>
  }
}
 80115c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80115c4:	4770      	bx	lr
 80115c6:	bf00      	nop
 80115c8:	40010000 	.word	0x40010000
 80115cc:	48000400 	.word	0x48000400
 80115d0:	40010400 	.word	0x40010400

080115d4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80115d4:	6903      	ldr	r3, [r0, #16]
 80115d6:	4219      	tst	r1, r3
 80115d8:	d101      	bne.n	80115de <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80115da:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 80115dc:	4770      	bx	lr
    bitstatus = GPIO_PIN_SET;
 80115de:	2001      	movs	r0, #1
 80115e0:	4770      	bx	lr

080115e2 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80115e2:	b90a      	cbnz	r2, 80115e8 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80115e4:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80115e6:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80115e8:	6181      	str	r1, [r0, #24]
 80115ea:	4770      	bx	lr

080115ec <HAL_IWDG_Init>:
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80115ec:	b340      	cbz	r0, 8011640 <HAL_IWDG_Init+0x54>
{
 80115ee:	b538      	push	{r3, r4, r5, lr}
 80115f0:	4604      	mov	r4, r0
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automaticaly */
  __HAL_IWDG_START(hiwdg);
 80115f2:	6803      	ldr	r3, [r0, #0]
 80115f4:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80115f8:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80115fa:	6803      	ldr	r3, [r0, #0]
 80115fc:	f245 5255 	movw	r2, #21845	; 0x5555
 8011600:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8011602:	6803      	ldr	r3, [r0, #0]
 8011604:	6842      	ldr	r2, [r0, #4]
 8011606:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8011608:	6803      	ldr	r3, [r0, #0]
 801160a:	6882      	ldr	r2, [r0, #8]
 801160c:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 801160e:	f7fe ff9f 	bl	8010550 <HAL_GetTick>
 8011612:	4605      	mov	r5, r0

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 8011614:	6823      	ldr	r3, [r4, #0]
 8011616:	68da      	ldr	r2, [r3, #12]
 8011618:	b132      	cbz	r2, 8011628 <HAL_IWDG_Init+0x3c>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 801161a:	f7fe ff99 	bl	8010550 <HAL_GetTick>
 801161e:	1b40      	subs	r0, r0, r5
 8011620:	2830      	cmp	r0, #48	; 0x30
 8011622:	d9f7      	bls.n	8011614 <HAL_IWDG_Init+0x28>
    {
      return HAL_TIMEOUT;
 8011624:	2003      	movs	r0, #3
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
  }

  /* Return function status */
  return HAL_OK;
}
 8011626:	bd38      	pop	{r3, r4, r5, pc}
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8011628:	6919      	ldr	r1, [r3, #16]
 801162a:	68e2      	ldr	r2, [r4, #12]
 801162c:	4291      	cmp	r1, r2
 801162e:	d002      	beq.n	8011636 <HAL_IWDG_Init+0x4a>
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8011630:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 8011632:	2000      	movs	r0, #0
 8011634:	e7f7      	b.n	8011626 <HAL_IWDG_Init+0x3a>
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8011636:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 801163a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 801163c:	2000      	movs	r0, #0
 801163e:	e7f2      	b.n	8011626 <HAL_IWDG_Init+0x3a>
    return HAL_ERROR;
 8011640:	2001      	movs	r0, #1
}
 8011642:	4770      	bx	lr

08011644 <HAL_IWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8011644:	6803      	ldr	r3, [r0, #0]
 8011646:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 801164a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 801164c:	2000      	movs	r0, #0
 801164e:	4770      	bx	lr

08011650 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8011650:	4b01      	ldr	r3, [pc, #4]	; (8011658 <HAL_RCC_GetHCLKFreq+0x8>)
 8011652:	6818      	ldr	r0, [r3, #0]
 8011654:	4770      	bx	lr
 8011656:	bf00      	nop
 8011658:	20000188 	.word	0x20000188

0801165c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801165c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 801165e:	f7ff fff7 	bl	8011650 <HAL_RCC_GetHCLKFreq>
 8011662:	4b05      	ldr	r3, [pc, #20]	; (8011678 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8011664:	689b      	ldr	r3, [r3, #8]
 8011666:	f3c3 2302 	ubfx	r3, r3, #8, #3
 801166a:	4a04      	ldr	r2, [pc, #16]	; (801167c <HAL_RCC_GetPCLK1Freq+0x20>)
 801166c:	5cd3      	ldrb	r3, [r2, r3]
 801166e:	f003 031f 	and.w	r3, r3, #31
}
 8011672:	40d8      	lsrs	r0, r3
 8011674:	bd08      	pop	{r3, pc}
 8011676:	bf00      	nop
 8011678:	40021000 	.word	0x40021000
 801167c:	08015cb0 	.word	0x08015cb0

08011680 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8011680:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8011682:	f7ff ffe5 	bl	8011650 <HAL_RCC_GetHCLKFreq>
 8011686:	4b05      	ldr	r3, [pc, #20]	; (801169c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8011688:	689b      	ldr	r3, [r3, #8]
 801168a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 801168e:	4a04      	ldr	r2, [pc, #16]	; (80116a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8011690:	5cd3      	ldrb	r3, [r2, r3]
 8011692:	f003 031f 	and.w	r3, r3, #31
}
 8011696:	40d8      	lsrs	r0, r3
 8011698:	bd08      	pop	{r3, pc}
 801169a:	bf00      	nop
 801169c:	40021000 	.word	0x40021000
 80116a0:	08015cb0 	.word	0x08015cb0

080116a4 <HAL_RCC_GetClockConfig>:
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80116a4:	230f      	movs	r3, #15
 80116a6:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80116a8:	4b0b      	ldr	r3, [pc, #44]	; (80116d8 <HAL_RCC_GetClockConfig+0x34>)
 80116aa:	689a      	ldr	r2, [r3, #8]
 80116ac:	f002 0203 	and.w	r2, r2, #3
 80116b0:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80116b2:	689a      	ldr	r2, [r3, #8]
 80116b4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80116b8:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80116ba:	689a      	ldr	r2, [r3, #8]
 80116bc:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80116c0:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80116c2:	689b      	ldr	r3, [r3, #8]
 80116c4:	08db      	lsrs	r3, r3, #3
 80116c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80116ca:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80116cc:	4b03      	ldr	r3, [pc, #12]	; (80116dc <HAL_RCC_GetClockConfig+0x38>)
 80116ce:	681b      	ldr	r3, [r3, #0]
 80116d0:	f003 0307 	and.w	r3, r3, #7
 80116d4:	600b      	str	r3, [r1, #0]
}
 80116d6:	4770      	bx	lr
 80116d8:	40021000 	.word	0x40021000
 80116dc:	40022000 	.word	0x40022000

080116e0 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80116e0:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80116e2:	4a30      	ldr	r2, [pc, #192]	; (80117a4 <TIM_Base_SetConfig+0xc4>)
 80116e4:	4290      	cmp	r0, r2
 80116e6:	d012      	beq.n	801170e <TIM_Base_SetConfig+0x2e>
 80116e8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80116ec:	d00f      	beq.n	801170e <TIM_Base_SetConfig+0x2e>
 80116ee:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80116f2:	4290      	cmp	r0, r2
 80116f4:	d00b      	beq.n	801170e <TIM_Base_SetConfig+0x2e>
 80116f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80116fa:	4290      	cmp	r0, r2
 80116fc:	d007      	beq.n	801170e <TIM_Base_SetConfig+0x2e>
 80116fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011702:	4290      	cmp	r0, r2
 8011704:	d003      	beq.n	801170e <TIM_Base_SetConfig+0x2e>
 8011706:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 801170a:	4290      	cmp	r0, r2
 801170c:	d103      	bne.n	8011716 <TIM_Base_SetConfig+0x36>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801170e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8011712:	684a      	ldr	r2, [r1, #4]
 8011714:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8011716:	4a23      	ldr	r2, [pc, #140]	; (80117a4 <TIM_Base_SetConfig+0xc4>)
 8011718:	4290      	cmp	r0, r2
 801171a:	d01e      	beq.n	801175a <TIM_Base_SetConfig+0x7a>
 801171c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8011720:	d01b      	beq.n	801175a <TIM_Base_SetConfig+0x7a>
 8011722:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8011726:	4290      	cmp	r0, r2
 8011728:	d017      	beq.n	801175a <TIM_Base_SetConfig+0x7a>
 801172a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801172e:	4290      	cmp	r0, r2
 8011730:	d013      	beq.n	801175a <TIM_Base_SetConfig+0x7a>
 8011732:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011736:	4290      	cmp	r0, r2
 8011738:	d00f      	beq.n	801175a <TIM_Base_SetConfig+0x7a>
 801173a:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 801173e:	4290      	cmp	r0, r2
 8011740:	d00b      	beq.n	801175a <TIM_Base_SetConfig+0x7a>
 8011742:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8011746:	4290      	cmp	r0, r2
 8011748:	d007      	beq.n	801175a <TIM_Base_SetConfig+0x7a>
 801174a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801174e:	4290      	cmp	r0, r2
 8011750:	d003      	beq.n	801175a <TIM_Base_SetConfig+0x7a>
 8011752:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011756:	4290      	cmp	r0, r2
 8011758:	d103      	bne.n	8011762 <TIM_Base_SetConfig+0x82>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801175a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801175e:	68ca      	ldr	r2, [r1, #12]
 8011760:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8011762:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011766:	694a      	ldr	r2, [r1, #20]
 8011768:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 801176a:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801176c:	688b      	ldr	r3, [r1, #8]
 801176e:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8011770:	680b      	ldr	r3, [r1, #0]
 8011772:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8011774:	4b0b      	ldr	r3, [pc, #44]	; (80117a4 <TIM_Base_SetConfig+0xc4>)
 8011776:	4298      	cmp	r0, r3
 8011778:	d00f      	beq.n	801179a <TIM_Base_SetConfig+0xba>
 801177a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801177e:	4298      	cmp	r0, r3
 8011780:	d00b      	beq.n	801179a <TIM_Base_SetConfig+0xba>
 8011782:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8011786:	4298      	cmp	r0, r3
 8011788:	d007      	beq.n	801179a <TIM_Base_SetConfig+0xba>
 801178a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801178e:	4298      	cmp	r0, r3
 8011790:	d003      	beq.n	801179a <TIM_Base_SetConfig+0xba>
 8011792:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011796:	4298      	cmp	r0, r3
 8011798:	d101      	bne.n	801179e <TIM_Base_SetConfig+0xbe>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801179a:	690b      	ldr	r3, [r1, #16]
 801179c:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801179e:	2301      	movs	r3, #1
 80117a0:	6143      	str	r3, [r0, #20]
}
 80117a2:	4770      	bx	lr
 80117a4:	40012c00 	.word	0x40012c00

080117a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80117a8:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80117aa:	f001 011f 	and.w	r1, r1, #31
 80117ae:	2301      	movs	r3, #1
 80117b0:	fa03 f401 	lsl.w	r4, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80117b4:	6a03      	ldr	r3, [r0, #32]
 80117b6:	ea23 0304 	bic.w	r3, r3, r4
 80117ba:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80117bc:	6a03      	ldr	r3, [r0, #32]
 80117be:	408a      	lsls	r2, r1
 80117c0:	4313      	orrs	r3, r2
 80117c2:	6203      	str	r3, [r0, #32]
}
 80117c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80117c8:	4770      	bx	lr

080117ca <stm32_mcu_flash_erase_sector>:
    uint32_t PageError;
    HAL_StatusTypeDef rc;

    (void)PageError;

    if (!(sector_address & (_FLASH_SECTOR_SIZE - 1))) {
 80117ca:	f3c1 030a 	ubfx	r3, r1, #0, #11
 80117ce:	b9d3      	cbnz	r3, 8011806 <stm32_mcu_flash_erase_sector+0x3c>
{
 80117d0:	b500      	push	{lr}
 80117d2:	b087      	sub	sp, #28
        eraseinit.TypeErase = FLASH_TYPEERASE_PAGES;
 80117d4:	9302      	str	r3, [sp, #8]
#ifdef FLASH_BANK_2
        if ((sector_address - dev->hf_base_addr) < (_FLASH_SIZE / 2)) {
 80117d6:	6843      	ldr	r3, [r0, #4]
 80117d8:	1acb      	subs	r3, r1, r3
 80117da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80117de:	d20f      	bcs.n	8011800 <stm32_mcu_flash_erase_sector+0x36>
            eraseinit.Banks = FLASH_BANK_1;
 80117e0:	2301      	movs	r3, #1
 80117e2:	9303      	str	r3, [sp, #12]
            eraseinit.Banks = FLASH_BANK_2;
        }
#else
        eraseinit.Banks = FLASH_BANK_1;
#endif
        eraseinit.Page = (sector_address - dev->hf_base_addr) / FLASH_PAGE_SIZE;
 80117e4:	6843      	ldr	r3, [r0, #4]
 80117e6:	1ac9      	subs	r1, r1, r3
 80117e8:	0ac9      	lsrs	r1, r1, #11
 80117ea:	9104      	str	r1, [sp, #16]
        eraseinit.NbPages = 1;
 80117ec:	2301      	movs	r3, #1
 80117ee:	9305      	str	r3, [sp, #20]
        rc = HAL_FLASHEx_Erase(&eraseinit, &PageError);
 80117f0:	a901      	add	r1, sp, #4
 80117f2:	a802      	add	r0, sp, #8
 80117f4:	f7ff fcf6 	bl	80111e4 <HAL_FLASHEx_Erase>
        if (rc == HAL_OK) {
 80117f8:	b940      	cbnz	r0, 801180c <stm32_mcu_flash_erase_sector+0x42>
            return 0;
        }
    }

    return -1;
}
 80117fa:	b007      	add	sp, #28
 80117fc:	f85d fb04 	ldr.w	pc, [sp], #4
            eraseinit.Banks = FLASH_BANK_2;
 8011800:	2302      	movs	r3, #2
 8011802:	9303      	str	r3, [sp, #12]
 8011804:	e7ee      	b.n	80117e4 <stm32_mcu_flash_erase_sector+0x1a>
    return -1;
 8011806:	f04f 30ff 	mov.w	r0, #4294967295
}
 801180a:	4770      	bx	lr
    return -1;
 801180c:	f04f 30ff 	mov.w	r0, #4294967295
 8011810:	e7f3      	b.n	80117fa <stm32_mcu_flash_erase_sector+0x30>
	...

08011814 <stm32_hal_timer_get_freq>:
 * of a timer.
 */

uint32_t
stm32_hal_timer_get_freq(void *regs)
{
 8011814:	b510      	push	{r4, lr}
 8011816:	b086      	sub	sp, #24
 8011818:	4604      	mov	r4, r0
    RCC_ClkInitTypeDef clocks;
    uint32_t fl;
    uint32_t freq;

    HAL_RCC_GetClockConfig(&clocks, &fl);
 801181a:	4669      	mov	r1, sp
 801181c:	a801      	add	r0, sp, #4
 801181e:	f7ff ff41 	bl	80116a4 <HAL_RCC_GetClockConfig>

    /*
     * Assuming RCC_DCKCFGR->TIMPRE is 0.
     * There's just APB2 timers here.
     */
    switch ((uintptr_t)regs) {
 8011822:	4b18      	ldr	r3, [pc, #96]	; (8011884 <stm32_hal_timer_get_freq+0x70>)
 8011824:	429c      	cmp	r4, r3
 8011826:	d01e      	beq.n	8011866 <stm32_hal_timer_get_freq+0x52>
 8011828:	d80d      	bhi.n	8011846 <stm32_hal_timer_get_freq+0x32>
 801182a:	f5a3 3394 	sub.w	r3, r3, #75776	; 0x12800
 801182e:	429c      	cmp	r4, r3
 8011830:	d020      	beq.n	8011874 <stm32_hal_timer_get_freq+0x60>
 8011832:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011836:	429c      	cmp	r4, r3
 8011838:	d01c      	beq.n	8011874 <stm32_hal_timer_get_freq+0x60>
 801183a:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 801183e:	d019      	beq.n	8011874 <stm32_hal_timer_get_freq+0x60>
        if (clocks.APB1CLKDivider) {
            freq *= 2;
        }
        break;
    default:
        return 0;
 8011840:	2000      	movs	r0, #0
    }
    return freq;
}
 8011842:	b006      	add	sp, #24
 8011844:	bd10      	pop	{r4, pc}
    switch ((uintptr_t)regs) {
 8011846:	4b10      	ldr	r3, [pc, #64]	; (8011888 <stm32_hal_timer_get_freq+0x74>)
 8011848:	429c      	cmp	r4, r3
 801184a:	d00c      	beq.n	8011866 <stm32_hal_timer_get_freq+0x52>
 801184c:	d907      	bls.n	801185e <stm32_hal_timer_get_freq+0x4a>
 801184e:	4b0f      	ldr	r3, [pc, #60]	; (801188c <stm32_hal_timer_get_freq+0x78>)
 8011850:	429c      	cmp	r4, r3
 8011852:	d008      	beq.n	8011866 <stm32_hal_timer_get_freq+0x52>
 8011854:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011858:	429c      	cmp	r4, r3
 801185a:	d1f1      	bne.n	8011840 <stm32_hal_timer_get_freq+0x2c>
 801185c:	e003      	b.n	8011866 <stm32_hal_timer_get_freq+0x52>
 801185e:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
 8011862:	429c      	cmp	r4, r3
 8011864:	d1ec      	bne.n	8011840 <stm32_hal_timer_get_freq+0x2c>
        freq = HAL_RCC_GetPCLK2Freq();
 8011866:	f7ff ff0b 	bl	8011680 <HAL_RCC_GetPCLK2Freq>
        if (clocks.APB2CLKDivider) {
 801186a:	9b05      	ldr	r3, [sp, #20]
 801186c:	2b00      	cmp	r3, #0
 801186e:	d0e8      	beq.n	8011842 <stm32_hal_timer_get_freq+0x2e>
            freq *= 2;
 8011870:	0040      	lsls	r0, r0, #1
 8011872:	e7e6      	b.n	8011842 <stm32_hal_timer_get_freq+0x2e>
        freq = HAL_RCC_GetPCLK1Freq();
 8011874:	f7ff fef2 	bl	801165c <HAL_RCC_GetPCLK1Freq>
        if (clocks.APB1CLKDivider) {
 8011878:	9b04      	ldr	r3, [sp, #16]
 801187a:	2b00      	cmp	r3, #0
 801187c:	d0e1      	beq.n	8011842 <stm32_hal_timer_get_freq+0x2e>
            freq *= 2;
 801187e:	0040      	lsls	r0, r0, #1
 8011880:	e7df      	b.n	8011842 <stm32_hal_timer_get_freq+0x2e>
 8011882:	bf00      	nop
 8011884:	40012c00 	.word	0x40012c00
 8011888:	40014000 	.word	0x40014000
 801188c:	40014400 	.word	0x40014400

08011890 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8011890:	b470      	push	{r4, r5, r6}
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8011892:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8011894:	f004 051c 	and.w	r5, r4, #28
 8011898:	6c06      	ldr	r6, [r0, #64]	; 0x40
 801189a:	2401      	movs	r4, #1
 801189c:	40ac      	lsls	r4, r5
 801189e:	6074      	str	r4, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80118a0:	6804      	ldr	r4, [r0, #0]
 80118a2:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80118a4:	6883      	ldr	r3, [r0, #8]
 80118a6:	2b10      	cmp	r3, #16
 80118a8:	d005      	beq.n	80118b6 <DMA_SetConfig+0x26>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80118aa:	6803      	ldr	r3, [r0, #0]
 80118ac:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80118ae:	6803      	ldr	r3, [r0, #0]
 80118b0:	60da      	str	r2, [r3, #12]
  }
}
 80118b2:	bc70      	pop	{r4, r5, r6}
 80118b4:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 80118b6:	6803      	ldr	r3, [r0, #0]
 80118b8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 80118ba:	6803      	ldr	r3, [r0, #0]
 80118bc:	60d9      	str	r1, [r3, #12]
 80118be:	e7f8      	b.n	80118b2 <DMA_SetConfig+0x22>

080118c0 <HAL_DMA_Init>:
  if(hdma == NULL)
 80118c0:	2800      	cmp	r0, #0
 80118c2:	d069      	beq.n	8011998 <HAL_DMA_Init+0xd8>
{
 80118c4:	b410      	push	{r4}
 80118c6:	4603      	mov	r3, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80118c8:	6801      	ldr	r1, [r0, #0]
 80118ca:	4a34      	ldr	r2, [pc, #208]	; (801199c <HAL_DMA_Init+0xdc>)
 80118cc:	4291      	cmp	r1, r2
 80118ce:	d845      	bhi.n	801195c <HAL_DMA_Init+0x9c>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80118d0:	4a33      	ldr	r2, [pc, #204]	; (80119a0 <HAL_DMA_Init+0xe0>)
 80118d2:	440a      	add	r2, r1
 80118d4:	4933      	ldr	r1, [pc, #204]	; (80119a4 <HAL_DMA_Init+0xe4>)
 80118d6:	fba1 1202 	umull	r1, r2, r1, r2
 80118da:	0912      	lsrs	r2, r2, #4
 80118dc:	0092      	lsls	r2, r2, #2
 80118de:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80118e0:	4a31      	ldr	r2, [pc, #196]	; (80119a8 <HAL_DMA_Init+0xe8>)
 80118e2:	6402      	str	r2, [r0, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 80118e4:	2202      	movs	r2, #2
 80118e6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  tmp = hdma->Instance->CCR;
 80118ea:	6818      	ldr	r0, [r3, #0]
 80118ec:	6801      	ldr	r1, [r0, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80118ee:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 80118f2:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmp |=  hdma->Init.Direction        |
 80118f6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80118f8:	68dc      	ldr	r4, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80118fa:	4322      	orrs	r2, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80118fc:	691c      	ldr	r4, [r3, #16]
 80118fe:	4322      	orrs	r2, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8011900:	695c      	ldr	r4, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8011902:	4322      	orrs	r2, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8011904:	699c      	ldr	r4, [r3, #24]
 8011906:	4322      	orrs	r2, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8011908:	69dc      	ldr	r4, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801190a:	4322      	orrs	r2, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 801190c:	6a1c      	ldr	r4, [r3, #32]
 801190e:	4322      	orrs	r2, r4
  tmp |=  hdma->Init.Direction        |
 8011910:	430a      	orrs	r2, r1
  hdma->Instance->CCR = tmp;
 8011912:	6002      	str	r2, [r0, #0]
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8011914:	689a      	ldr	r2, [r3, #8]
 8011916:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 801191a:	d015      	beq.n	8011948 <HAL_DMA_Init+0x88>
    if (DMA1 == hdma->DmaBaseAddress)
 801191c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 801191e:	4a22      	ldr	r2, [pc, #136]	; (80119a8 <HAL_DMA_Init+0xe8>)
 8011920:	4291      	cmp	r1, r2
 8011922:	d026      	beq.n	8011972 <HAL_DMA_Init+0xb2>
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8011924:	4a21      	ldr	r2, [pc, #132]	; (80119ac <HAL_DMA_Init+0xec>)
 8011926:	6811      	ldr	r1, [r2, #0]
 8011928:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801192a:	f000 041c 	and.w	r4, r0, #28
 801192e:	200f      	movs	r0, #15
 8011930:	40a0      	lsls	r0, r4
 8011932:	ea21 0100 	bic.w	r1, r1, r0
 8011936:	6011      	str	r1, [r2, #0]
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8011938:	6811      	ldr	r1, [r2, #0]
 801193a:	6858      	ldr	r0, [r3, #4]
 801193c:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 801193e:	f004 041c 	and.w	r4, r4, #28
 8011942:	40a0      	lsls	r0, r4
 8011944:	4301      	orrs	r1, r0
 8011946:	6011      	str	r1, [r2, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8011948:	2000      	movs	r0, #0
 801194a:	63d8      	str	r0, [r3, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 801194c:	2201      	movs	r2, #1
 801194e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  hdma->Lock = HAL_UNLOCKED;
 8011952:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
}
 8011956:	f85d 4b04 	ldr.w	r4, [sp], #4
 801195a:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 801195c:	4a14      	ldr	r2, [pc, #80]	; (80119b0 <HAL_DMA_Init+0xf0>)
 801195e:	440a      	add	r2, r1
 8011960:	4910      	ldr	r1, [pc, #64]	; (80119a4 <HAL_DMA_Init+0xe4>)
 8011962:	fba1 1202 	umull	r1, r2, r1, r2
 8011966:	0912      	lsrs	r2, r2, #4
 8011968:	0092      	lsls	r2, r2, #2
 801196a:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 801196c:	4a11      	ldr	r2, [pc, #68]	; (80119b4 <HAL_DMA_Init+0xf4>)
 801196e:	6402      	str	r2, [r0, #64]	; 0x40
 8011970:	e7b8      	b.n	80118e4 <HAL_DMA_Init+0x24>
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8011972:	32a8      	adds	r2, #168	; 0xa8
 8011974:	6811      	ldr	r1, [r2, #0]
 8011976:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8011978:	f000 041c 	and.w	r4, r0, #28
 801197c:	200f      	movs	r0, #15
 801197e:	40a0      	lsls	r0, r4
 8011980:	ea21 0100 	bic.w	r1, r1, r0
 8011984:	6011      	str	r1, [r2, #0]
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8011986:	6811      	ldr	r1, [r2, #0]
 8011988:	6858      	ldr	r0, [r3, #4]
 801198a:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 801198c:	f004 041c 	and.w	r4, r4, #28
 8011990:	40a0      	lsls	r0, r4
 8011992:	4301      	orrs	r1, r0
 8011994:	6011      	str	r1, [r2, #0]
 8011996:	e7d7      	b.n	8011948 <HAL_DMA_Init+0x88>
    return HAL_ERROR;
 8011998:	2001      	movs	r0, #1
}
 801199a:	4770      	bx	lr
 801199c:	40020407 	.word	0x40020407
 80119a0:	bffdfff8 	.word	0xbffdfff8
 80119a4:	cccccccd 	.word	0xcccccccd
 80119a8:	40020000 	.word	0x40020000
 80119ac:	400204a8 	.word	0x400204a8
 80119b0:	bffdfbf8 	.word	0xbffdfbf8
 80119b4:	40020400 	.word	0x40020400

080119b8 <HAL_DMA_DeInit>:
  if (NULL == hdma )
 80119b8:	2800      	cmp	r0, #0
 80119ba:	d04f      	beq.n	8011a5c <HAL_DMA_DeInit+0xa4>
{
 80119bc:	b410      	push	{r4}
 80119be:	4603      	mov	r3, r0
  __HAL_DMA_DISABLE(hdma);
 80119c0:	6801      	ldr	r1, [r0, #0]
 80119c2:	680a      	ldr	r2, [r1, #0]
 80119c4:	f022 0201 	bic.w	r2, r2, #1
 80119c8:	600a      	str	r2, [r1, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80119ca:	6801      	ldr	r1, [r0, #0]
 80119cc:	4a24      	ldr	r2, [pc, #144]	; (8011a60 <HAL_DMA_DeInit+0xa8>)
 80119ce:	4291      	cmp	r1, r2
 80119d0:	d82e      	bhi.n	8011a30 <HAL_DMA_DeInit+0x78>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80119d2:	4a24      	ldr	r2, [pc, #144]	; (8011a64 <HAL_DMA_DeInit+0xac>)
 80119d4:	440a      	add	r2, r1
 80119d6:	4924      	ldr	r1, [pc, #144]	; (8011a68 <HAL_DMA_DeInit+0xb0>)
 80119d8:	fba1 1202 	umull	r1, r2, r1, r2
 80119dc:	0912      	lsrs	r2, r2, #4
 80119de:	0092      	lsls	r2, r2, #2
 80119e0:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80119e2:	4a22      	ldr	r2, [pc, #136]	; (8011a6c <HAL_DMA_DeInit+0xb4>)
 80119e4:	6402      	str	r2, [r0, #64]	; 0x40
  hdma->Instance->CCR = 0U;
 80119e6:	681a      	ldr	r2, [r3, #0]
 80119e8:	2100      	movs	r1, #0
 80119ea:	6011      	str	r1, [r2, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80119ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80119ee:	f002 011c 	and.w	r1, r2, #28
 80119f2:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80119f4:	2201      	movs	r2, #1
 80119f6:	408a      	lsls	r2, r1
 80119f8:	6042      	str	r2, [r0, #4]
  if (DMA1 == hdma->DmaBaseAddress)
 80119fa:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80119fc:	4a1b      	ldr	r2, [pc, #108]	; (8011a6c <HAL_DMA_DeInit+0xb4>)
 80119fe:	4291      	cmp	r1, r2
 8011a00:	d021      	beq.n	8011a46 <HAL_DMA_DeInit+0x8e>
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8011a02:	4c1b      	ldr	r4, [pc, #108]	; (8011a70 <HAL_DMA_DeInit+0xb8>)
 8011a04:	6822      	ldr	r2, [r4, #0]
 8011a06:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8011a08:	f001 001c 	and.w	r0, r1, #28
 8011a0c:	210f      	movs	r1, #15
 8011a0e:	4081      	lsls	r1, r0
 8011a10:	ea22 0201 	bic.w	r2, r2, r1
 8011a14:	6022      	str	r2, [r4, #0]
  hdma->XferCpltCallback = NULL;
 8011a16:	2000      	movs	r0, #0
 8011a18:	62d8      	str	r0, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8011a1a:	6318      	str	r0, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8011a1c:	6358      	str	r0, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8011a1e:	6398      	str	r0, [r3, #56]	; 0x38
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8011a20:	63d8      	str	r0, [r3, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_RESET;
 8011a22:	f883 0025 	strb.w	r0, [r3, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 8011a26:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
}
 8011a2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011a2e:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8011a30:	4a10      	ldr	r2, [pc, #64]	; (8011a74 <HAL_DMA_DeInit+0xbc>)
 8011a32:	440a      	add	r2, r1
 8011a34:	490c      	ldr	r1, [pc, #48]	; (8011a68 <HAL_DMA_DeInit+0xb0>)
 8011a36:	fba1 1202 	umull	r1, r2, r1, r2
 8011a3a:	0912      	lsrs	r2, r2, #4
 8011a3c:	0092      	lsls	r2, r2, #2
 8011a3e:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8011a40:	4a0d      	ldr	r2, [pc, #52]	; (8011a78 <HAL_DMA_DeInit+0xc0>)
 8011a42:	6402      	str	r2, [r0, #64]	; 0x40
 8011a44:	e7cf      	b.n	80119e6 <HAL_DMA_DeInit+0x2e>
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8011a46:	4c0d      	ldr	r4, [pc, #52]	; (8011a7c <HAL_DMA_DeInit+0xc4>)
 8011a48:	6822      	ldr	r2, [r4, #0]
 8011a4a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8011a4c:	f001 001c 	and.w	r0, r1, #28
 8011a50:	210f      	movs	r1, #15
 8011a52:	4081      	lsls	r1, r0
 8011a54:	ea22 0201 	bic.w	r2, r2, r1
 8011a58:	6022      	str	r2, [r4, #0]
 8011a5a:	e7dc      	b.n	8011a16 <HAL_DMA_DeInit+0x5e>
    return HAL_ERROR;
 8011a5c:	2001      	movs	r0, #1
}
 8011a5e:	4770      	bx	lr
 8011a60:	40020407 	.word	0x40020407
 8011a64:	bffdfff8 	.word	0xbffdfff8
 8011a68:	cccccccd 	.word	0xcccccccd
 8011a6c:	40020000 	.word	0x40020000
 8011a70:	400204a8 	.word	0x400204a8
 8011a74:	bffdfbf8 	.word	0xbffdfbf8
 8011a78:	40020400 	.word	0x40020400
 8011a7c:	400200a8 	.word	0x400200a8

08011a80 <HAL_DMA_Start_IT>:
{
 8011a80:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hdma);
 8011a82:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 8011a86:	2c01      	cmp	r4, #1
 8011a88:	d033      	beq.n	8011af2 <HAL_DMA_Start_IT+0x72>
 8011a8a:	2401      	movs	r4, #1
 8011a8c:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  if(HAL_DMA_STATE_READY == hdma->State)
 8011a90:	f890 4025 	ldrb.w	r4, [r0, #37]	; 0x25
 8011a94:	b2e4      	uxtb	r4, r4
 8011a96:	2c01      	cmp	r4, #1
 8011a98:	d004      	beq.n	8011aa4 <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma);
 8011a9a:	2300      	movs	r3, #0
 8011a9c:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    status = HAL_BUSY;
 8011aa0:	2002      	movs	r0, #2
}
 8011aa2:	bd38      	pop	{r3, r4, r5, pc}
 8011aa4:	4604      	mov	r4, r0
    hdma->State = HAL_DMA_STATE_BUSY;
 8011aa6:	2002      	movs	r0, #2
 8011aa8:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8011aac:	2000      	movs	r0, #0
 8011aae:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8011ab0:	6825      	ldr	r5, [r4, #0]
 8011ab2:	6828      	ldr	r0, [r5, #0]
 8011ab4:	f020 0001 	bic.w	r0, r0, #1
 8011ab8:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8011aba:	4620      	mov	r0, r4
 8011abc:	f7ff fee8 	bl	8011890 <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback )
 8011ac0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011ac2:	b15b      	cbz	r3, 8011adc <HAL_DMA_Start_IT+0x5c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8011ac4:	6822      	ldr	r2, [r4, #0]
 8011ac6:	6813      	ldr	r3, [r2, #0]
 8011ac8:	f043 030e 	orr.w	r3, r3, #14
 8011acc:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8011ace:	6822      	ldr	r2, [r4, #0]
 8011ad0:	6813      	ldr	r3, [r2, #0]
 8011ad2:	f043 0301 	orr.w	r3, r3, #1
 8011ad6:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8011ad8:	2000      	movs	r0, #0
 8011ada:	e7e2      	b.n	8011aa2 <HAL_DMA_Start_IT+0x22>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8011adc:	6822      	ldr	r2, [r4, #0]
 8011ade:	6813      	ldr	r3, [r2, #0]
 8011ae0:	f023 0304 	bic.w	r3, r3, #4
 8011ae4:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8011ae6:	6822      	ldr	r2, [r4, #0]
 8011ae8:	6813      	ldr	r3, [r2, #0]
 8011aea:	f043 030a 	orr.w	r3, r3, #10
 8011aee:	6013      	str	r3, [r2, #0]
 8011af0:	e7ed      	b.n	8011ace <HAL_DMA_Start_IT+0x4e>
  __HAL_LOCK(hdma);
 8011af2:	2002      	movs	r0, #2
 8011af4:	e7d5      	b.n	8011aa2 <HAL_DMA_Start_IT+0x22>

08011af6 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8011af6:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8011afa:	b2db      	uxtb	r3, r3
 8011afc:	2b02      	cmp	r3, #2
 8011afe:	d006      	beq.n	8011b0e <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8011b00:	2304      	movs	r3, #4
 8011b02:	63c3      	str	r3, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8011b04:	2300      	movs	r3, #0
 8011b06:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 8011b0a:	2001      	movs	r0, #1
 8011b0c:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8011b0e:	6802      	ldr	r2, [r0, #0]
 8011b10:	6813      	ldr	r3, [r2, #0]
 8011b12:	f023 030e 	bic.w	r3, r3, #14
 8011b16:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8011b18:	6802      	ldr	r2, [r0, #0]
 8011b1a:	6813      	ldr	r3, [r2, #0]
 8011b1c:	f023 0301 	bic.w	r3, r3, #1
 8011b20:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8011b22:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8011b24:	f003 031c 	and.w	r3, r3, #28
 8011b28:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8011b2a:	2201      	movs	r2, #1
 8011b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8011b30:	604b      	str	r3, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8011b32:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8011b36:	2300      	movs	r3, #0
 8011b38:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    return status;
 8011b3c:	4618      	mov	r0, r3
}
 8011b3e:	4770      	bx	lr

08011b40 <HAL_DMA_IRQHandler>:
{
 8011b40:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8011b42:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8011b44:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8011b46:	6804      	ldr	r4, [r0, #0]
 8011b48:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8011b4a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8011b4c:	f003 031c 	and.w	r3, r3, #28
 8011b50:	2204      	movs	r2, #4
 8011b52:	409a      	lsls	r2, r3
 8011b54:	420a      	tst	r2, r1
 8011b56:	d015      	beq.n	8011b84 <HAL_DMA_IRQHandler+0x44>
 8011b58:	f015 0f04 	tst.w	r5, #4
 8011b5c:	d012      	beq.n	8011b84 <HAL_DMA_IRQHandler+0x44>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8011b5e:	6823      	ldr	r3, [r4, #0]
 8011b60:	f013 0f20 	tst.w	r3, #32
 8011b64:	d103      	bne.n	8011b6e <HAL_DMA_IRQHandler+0x2e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8011b66:	6823      	ldr	r3, [r4, #0]
 8011b68:	f023 0304 	bic.w	r3, r3, #4
 8011b6c:	6023      	str	r3, [r4, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8011b6e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8011b70:	f003 021c 	and.w	r2, r3, #28
 8011b74:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8011b76:	2304      	movs	r3, #4
 8011b78:	4093      	lsls	r3, r2
 8011b7a:	604b      	str	r3, [r1, #4]
      if(hdma->XferHalfCpltCallback != NULL)
 8011b7c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8011b7e:	b103      	cbz	r3, 8011b82 <HAL_DMA_IRQHandler+0x42>
        hdma->XferHalfCpltCallback(hdma);
 8011b80:	4798      	blx	r3
}
 8011b82:	bd38      	pop	{r3, r4, r5, pc}
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8011b84:	2202      	movs	r2, #2
 8011b86:	409a      	lsls	r2, r3
 8011b88:	420a      	tst	r2, r1
 8011b8a:	d01c      	beq.n	8011bc6 <HAL_DMA_IRQHandler+0x86>
 8011b8c:	f015 0f02 	tst.w	r5, #2
 8011b90:	d019      	beq.n	8011bc6 <HAL_DMA_IRQHandler+0x86>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8011b92:	6823      	ldr	r3, [r4, #0]
 8011b94:	f013 0f20 	tst.w	r3, #32
 8011b98:	d106      	bne.n	8011ba8 <HAL_DMA_IRQHandler+0x68>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8011b9a:	6823      	ldr	r3, [r4, #0]
 8011b9c:	f023 030a 	bic.w	r3, r3, #10
 8011ba0:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8011ba2:	2301      	movs	r3, #1
 8011ba4:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8011ba8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8011baa:	f003 021c 	and.w	r2, r3, #28
 8011bae:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8011bb0:	2302      	movs	r3, #2
 8011bb2:	4093      	lsls	r3, r2
 8011bb4:	604b      	str	r3, [r1, #4]
    __HAL_UNLOCK(hdma);
 8011bb6:	2300      	movs	r3, #0
 8011bb8:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if(hdma->XferCpltCallback != NULL)
 8011bbc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	d0df      	beq.n	8011b82 <HAL_DMA_IRQHandler+0x42>
      hdma->XferCpltCallback(hdma);
 8011bc2:	4798      	blx	r3
 8011bc4:	e7dd      	b.n	8011b82 <HAL_DMA_IRQHandler+0x42>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8011bc6:	2208      	movs	r2, #8
 8011bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8011bcc:	420b      	tst	r3, r1
 8011bce:	d0d8      	beq.n	8011b82 <HAL_DMA_IRQHandler+0x42>
 8011bd0:	f015 0f08 	tst.w	r5, #8
 8011bd4:	d0d5      	beq.n	8011b82 <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8011bd6:	6823      	ldr	r3, [r4, #0]
 8011bd8:	f023 030e 	bic.w	r3, r3, #14
 8011bdc:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8011bde:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8011be0:	f003 031c 	and.w	r3, r3, #28
 8011be4:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8011be6:	2201      	movs	r2, #1
 8011be8:	fa02 f303 	lsl.w	r3, r2, r3
 8011bec:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8011bee:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8011bf0:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8011bf4:	2300      	movs	r3, #0
 8011bf6:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8011bfa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	d0c0      	beq.n	8011b82 <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 8011c00:	4798      	blx	r3
  return;
 8011c02:	e7be      	b.n	8011b82 <HAL_DMA_IRQHandler+0x42>

08011c04 <sensor_dev_create>:
    assert(rc == 0);

    rc = config_icp10114_sensor();
    assert(rc == 0);
#endif
}
 8011c04:	4770      	bx	lr

08011c06 <atol>:
#include <inttypes.h>
#include <stdlib.h>
#include <stdio.h>

TYPE NAME(const char *nptr)
{
 8011c06:	b508      	push	{r3, lr}
	return (TYPE) strntoumax(nptr, (char **)NULL, 10, ~(size_t) 0);
 8011c08:	f04f 33ff 	mov.w	r3, #4294967295
 8011c0c:	220a      	movs	r2, #10
 8011c0e:	2100      	movs	r1, #0
 8011c10:	f000 f814 	bl	8011c3c <strntoumax>
}
 8011c14:	bd08      	pop	{r3, pc}

08011c16 <strcat>:
 */

#include <string.h>

char *strcat(char *dst, const char *src)
{
 8011c16:	b538      	push	{r3, r4, r5, lr}
 8011c18:	4604      	mov	r4, r0
 8011c1a:	460d      	mov	r5, r1
	strcpy(strchr(dst, '\0'), src);
 8011c1c:	f7fc f9e5 	bl	800dfea <strlen>
 8011c20:	4629      	mov	r1, r5
 8011c22:	4420      	add	r0, r4
 8011c24:	f000 f802 	bl	8011c2c <strcpy>
	return dst;
}
 8011c28:	4620      	mov	r0, r4
 8011c2a:	bd38      	pop	{r3, r4, r5, pc}

08011c2c <strcpy>:

#include <string.h>

char *strcpy(char *dst, const char *src)
{
	char *q = dst;
 8011c2c:	4603      	mov	r3, r0
	const char *p = src;
	char ch;

	do {
		*q++ = ch = *p++;
 8011c2e:	780a      	ldrb	r2, [r1, #0]
 8011c30:	701a      	strb	r2, [r3, #0]
 8011c32:	3301      	adds	r3, #1
 8011c34:	3101      	adds	r1, #1
	} while (ch);
 8011c36:	2a00      	cmp	r2, #0
 8011c38:	d1f9      	bne.n	8011c2e <strcpy+0x2>

	return dst;
}
 8011c3a:	4770      	bx	lr

08011c3c <strntoumax>:
		return -1;
	}
}

uintmax_t strntoumax(const char *nptr, char **endptr, int base, size_t n)
{
 8011c3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011c40:	4605      	mov	r5, r0
 8011c42:	468c      	mov	ip, r1
	int minus = 0;
	uintmax_t v = 0;
	int d;

	while (n && isspace((unsigned char)*nptr)) {
 8011c44:	e001      	b.n	8011c4a <strntoumax+0xe>
		nptr++;
 8011c46:	3501      	adds	r5, #1
		n--;
 8011c48:	3b01      	subs	r3, #1
	while (n && isspace((unsigned char)*nptr)) {
 8011c4a:	b143      	cbz	r3, 8011c5e <strntoumax+0x22>
 8011c4c:	7828      	ldrb	r0, [r5, #0]
	return __c < 0x20;
}

__extern_inline int isspace(int __c)
{
	return __c == ' ' || __c == '\n' || __c == '\t' || __c == '\r';
 8011c4e:	2820      	cmp	r0, #32
 8011c50:	d0f9      	beq.n	8011c46 <strntoumax+0xa>
 8011c52:	280a      	cmp	r0, #10
 8011c54:	d0f7      	beq.n	8011c46 <strntoumax+0xa>
 8011c56:	2809      	cmp	r0, #9
 8011c58:	d0f5      	beq.n	8011c46 <strntoumax+0xa>
 8011c5a:	280d      	cmp	r0, #13
 8011c5c:	d0f3      	beq.n	8011c46 <strntoumax+0xa>
	}

	/* Single optional + or - */
	if (n) {
 8011c5e:	b1a3      	cbz	r3, 8011c8a <strntoumax+0x4e>
		char c = *nptr;
 8011c60:	f895 e000 	ldrb.w	lr, [r5]
		if (c == '-' || c == '+') {
 8011c64:	f1be 0f2d 	cmp.w	lr, #45	; 0x2d
 8011c68:	d005      	beq.n	8011c76 <strntoumax+0x3a>
 8011c6a:	f1be 0f2b 	cmp.w	lr, #43	; 0x2b
 8011c6e:	d002      	beq.n	8011c76 <strntoumax+0x3a>
	int minus = 0;
 8011c70:	f04f 0e00 	mov.w	lr, #0
 8011c74:	e00b      	b.n	8011c8e <strntoumax+0x52>
			minus = (c == '-');
 8011c76:	f1be 0f2d 	cmp.w	lr, #45	; 0x2d
 8011c7a:	bf14      	ite	ne
 8011c7c:	f04f 0e00 	movne.w	lr, #0
 8011c80:	f04f 0e01 	moveq.w	lr, #1
			nptr++;
 8011c84:	3501      	adds	r5, #1
			n--;
 8011c86:	3b01      	subs	r3, #1
 8011c88:	e001      	b.n	8011c8e <strntoumax+0x52>
	int minus = 0;
 8011c8a:	f04f 0e00 	mov.w	lr, #0
		}
	}

	if (base == 0) {
 8011c8e:	b9ba      	cbnz	r2, 8011cc0 <strntoumax+0x84>
		if (n >= 2 && nptr[0] == '0' &&
 8011c90:	2b01      	cmp	r3, #1
 8011c92:	d902      	bls.n	8011c9a <strntoumax+0x5e>
 8011c94:	782a      	ldrb	r2, [r5, #0]
 8011c96:	2a30      	cmp	r2, #48	; 0x30
 8011c98:	d005      	beq.n	8011ca6 <strntoumax+0x6a>
		    (nptr[1] == 'x' || nptr[1] == 'X')) {
			n -= 2;
			nptr += 2;
			base = 16;
		} else if (n >= 1 && nptr[0] == '0') {
 8011c9a:	b32b      	cbz	r3, 8011ce8 <strntoumax+0xac>
 8011c9c:	782a      	ldrb	r2, [r5, #0]
 8011c9e:	2a30      	cmp	r2, #48	; 0x30
 8011ca0:	d00a      	beq.n	8011cb8 <strntoumax+0x7c>
			n--;
			nptr++;
			base = 8;
		} else {
			base = 10;
 8011ca2:	220a      	movs	r2, #10
 8011ca4:	e00e      	b.n	8011cc4 <strntoumax+0x88>
		    (nptr[1] == 'x' || nptr[1] == 'X')) {
 8011ca6:	786a      	ldrb	r2, [r5, #1]
		if (n >= 2 && nptr[0] == '0' &&
 8011ca8:	2a78      	cmp	r2, #120	; 0x78
 8011caa:	d001      	beq.n	8011cb0 <strntoumax+0x74>
		    (nptr[1] == 'x' || nptr[1] == 'X')) {
 8011cac:	2a58      	cmp	r2, #88	; 0x58
 8011cae:	d1f4      	bne.n	8011c9a <strntoumax+0x5e>
			n -= 2;
 8011cb0:	3b02      	subs	r3, #2
			nptr += 2;
 8011cb2:	3502      	adds	r5, #2
			base = 16;
 8011cb4:	2210      	movs	r2, #16
 8011cb6:	e005      	b.n	8011cc4 <strntoumax+0x88>
			n--;
 8011cb8:	3b01      	subs	r3, #1
			nptr++;
 8011cba:	3501      	adds	r5, #1
			base = 8;
 8011cbc:	2208      	movs	r2, #8
 8011cbe:	e001      	b.n	8011cc4 <strntoumax+0x88>
		}
	} else if (base == 16) {
 8011cc0:	2a10      	cmp	r2, #16
 8011cc2:	d004      	beq.n	8011cce <strntoumax+0x92>
			base = 10;
 8011cc4:	f04f 0800 	mov.w	r8, #0
 8011cc8:	f04f 0900 	mov.w	r9, #0
 8011ccc:	e025      	b.n	8011d1a <strntoumax+0xde>
		if (n >= 2 && nptr[0] == '0' &&
 8011cce:	2b01      	cmp	r3, #1
 8011cd0:	d9f8      	bls.n	8011cc4 <strntoumax+0x88>
 8011cd2:	7829      	ldrb	r1, [r5, #0]
 8011cd4:	2930      	cmp	r1, #48	; 0x30
 8011cd6:	d1f5      	bne.n	8011cc4 <strntoumax+0x88>
		    (nptr[1] == 'x' || nptr[1] == 'X')) {
 8011cd8:	7869      	ldrb	r1, [r5, #1]
		if (n >= 2 && nptr[0] == '0' &&
 8011cda:	2978      	cmp	r1, #120	; 0x78
 8011cdc:	d001      	beq.n	8011ce2 <strntoumax+0xa6>
		    (nptr[1] == 'x' || nptr[1] == 'X')) {
 8011cde:	2958      	cmp	r1, #88	; 0x58
 8011ce0:	d1f0      	bne.n	8011cc4 <strntoumax+0x88>
			n -= 2;
 8011ce2:	3b02      	subs	r3, #2
			nptr += 2;
 8011ce4:	3502      	adds	r5, #2
 8011ce6:	e7ed      	b.n	8011cc4 <strntoumax+0x88>
			base = 10;
 8011ce8:	220a      	movs	r2, #10
 8011cea:	e7eb      	b.n	8011cc4 <strntoumax+0x88>
	} else if (ch >= 'A' && ch <= 'Z') {
 8011cec:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8011cf0:	2e19      	cmp	r6, #25
 8011cf2:	d81a      	bhi.n	8011d2a <strntoumax+0xee>
		return ch - 'A' + 10;
 8011cf4:	3c37      	subs	r4, #55	; 0x37
		}
	}

	while (n && (d = digitval(*nptr)) >= 0 && d < base) {
 8011cf6:	2c00      	cmp	r4, #0
 8011cf8:	db1d      	blt.n	8011d36 <strntoumax+0xfa>
 8011cfa:	42a2      	cmp	r2, r4
 8011cfc:	dd1b      	ble.n	8011d36 <strntoumax+0xfa>
		v = v * base + d;
 8011cfe:	fb02 f109 	mul.w	r1, r2, r9
 8011d02:	17d7      	asrs	r7, r2, #31
 8011d04:	fb08 1607 	mla	r6, r8, r7, r1
 8011d08:	fba2 0108 	umull	r0, r1, r2, r8
 8011d0c:	4431      	add	r1, r6
 8011d0e:	eb10 0804 	adds.w	r8, r0, r4
 8011d12:	eb41 79e4 	adc.w	r9, r1, r4, asr #31
		n--;
 8011d16:	3b01      	subs	r3, #1
		nptr++;
 8011d18:	3501      	adds	r5, #1
	while (n && (d = digitval(*nptr)) >= 0 && d < base) {
 8011d1a:	b163      	cbz	r3, 8011d36 <strntoumax+0xfa>
 8011d1c:	782c      	ldrb	r4, [r5, #0]
	if (ch >= '0' && ch <= '9') {
 8011d1e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8011d22:	2e09      	cmp	r6, #9
 8011d24:	d8e2      	bhi.n	8011cec <strntoumax+0xb0>
		return ch - '0';
 8011d26:	4634      	mov	r4, r6
 8011d28:	e7e5      	b.n	8011cf6 <strntoumax+0xba>
	} else if (ch >= 'a' && ch <= 'z') {
 8011d2a:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8011d2e:	2e19      	cmp	r6, #25
 8011d30:	d801      	bhi.n	8011d36 <strntoumax+0xfa>
		return ch - 'a' + 10;
 8011d32:	3c57      	subs	r4, #87	; 0x57
 8011d34:	e7df      	b.n	8011cf6 <strntoumax+0xba>
	}

	if (endptr)
 8011d36:	f1bc 0f00 	cmp.w	ip, #0
 8011d3a:	d001      	beq.n	8011d40 <strntoumax+0x104>
		*endptr = (char *)nptr;
 8011d3c:	f8cc 5000 	str.w	r5, [ip]

	return minus ? -v : v;
 8011d40:	f1be 0f00 	cmp.w	lr, #0
 8011d44:	d003      	beq.n	8011d4e <strntoumax+0x112>
 8011d46:	f1d8 0800 	rsbs	r8, r8, #0
 8011d4a:	eb69 0949 	sbc.w	r9, r9, r9, lsl #1
}
 8011d4e:	4640      	mov	r0, r8
 8011d50:	4649      	mov	r1, r9
 8011d52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08011d58 <stm32l4_adc_create>:

///////////////////////////////////////////////////////////////////////////////
//  Generic Device Creator Code

//  Create the device instance and configure it. Called by sysinit() during startup, defined in pkg.yml.
void DEVICE_CREATE(void) {
 8011d58:	b500      	push	{lr}
 8011d5a:	b083      	sub	sp, #12
    console_printf("ADC create " DEVICE_NAME "\n");
 8011d5c:	480b      	ldr	r0, [pc, #44]	; (8011d8c <stm32l4_adc_create+0x34>)
 8011d5e:	f7f8 fc45 	bl	800a5ec <console_printf>

    int rc = os_dev_create((struct os_dev *) &DEVICE_INSTANCE, DEVICE_NAME,
 8011d62:	4b0b      	ldr	r3, [pc, #44]	; (8011d90 <stm32l4_adc_create+0x38>)
 8011d64:	9301      	str	r3, [sp, #4]
 8011d66:	4b0b      	ldr	r3, [pc, #44]	; (8011d94 <stm32l4_adc_create+0x3c>)
 8011d68:	9300      	str	r3, [sp, #0]
 8011d6a:	2300      	movs	r3, #0
 8011d6c:	2201      	movs	r2, #1
 8011d6e:	490a      	ldr	r1, [pc, #40]	; (8011d98 <stm32l4_adc_create+0x40>)
 8011d70:	480a      	ldr	r0, [pc, #40]	; (8011d9c <stm32l4_adc_create+0x44>)
 8011d72:	f7fa febb 	bl	800caec <os_dev_create>
        OS_DEV_INIT_PRIMARY, 0,  //  For BSP: OS_DEV_INIT_KERNEL, OS_DEV_INIT_PRIO_DEFAULT,
        DEVICE_INIT, (void *) &DEVICE_ITF);
    assert(rc == 0);
 8011d76:	b910      	cbnz	r0, 8011d7e <stm32l4_adc_create+0x26>
}
 8011d78:	b003      	add	sp, #12
 8011d7a:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
 8011d7e:	2300      	movs	r3, #0
 8011d80:	461a      	mov	r2, r3
 8011d82:	4619      	mov	r1, r3
 8011d84:	4618      	mov	r0, r3
 8011d86:	f7fa fc25 	bl	800c5d4 <__assert_func>
 8011d8a:	bf00      	nop
 8011d8c:	0801856c 	.word	0x0801856c
 8011d90:	200002b0 	.word	0x200002b0
 8011d94:	08012541 	.word	0x08012541
 8011d98:	08018384 	.word	0x08018384
 8011d9c:	20002e90 	.word	0x20002e90

08011da0 <stm32l4_adc_size_buffer>:
 * @return Length of buffer in bytes
 */
static int
stm32l4_adc_size_buffer(struct adc_dev *dev, int chans, int samples)
{
    return (sizeof(uint32_t) * chans * samples);
 8011da0:	fb02 f201 	mul.w	r2, r2, r1
}
 8011da4:	0090      	lsls	r0, r2, #2
 8011da6:	4770      	bx	lr

08011da8 <stm32l4_resolve_dma_handle_idx>:
{
 8011da8:	b508      	push	{r3, lr}
    assert(hdma);
 8011daa:	b130      	cbz	r0, 8011dba <stm32l4_resolve_dma_handle_idx+0x12>
    return ((stream_addr & 0xFF) - ((uintptr_t)DMA2_Channel1_BASE & 0xFF))/0x18;
 8011dac:	7800      	ldrb	r0, [r0, #0]
 8011dae:	3808      	subs	r0, #8
 8011db0:	4b05      	ldr	r3, [pc, #20]	; (8011dc8 <stm32l4_resolve_dma_handle_idx+0x20>)
 8011db2:	fba3 3000 	umull	r3, r0, r3, r0
}
 8011db6:	0900      	lsrs	r0, r0, #4
 8011db8:	bd08      	pop	{r3, pc}
    assert(hdma);
 8011dba:	2300      	movs	r3, #0
 8011dbc:	461a      	mov	r2, r3
 8011dbe:	4619      	mov	r1, r3
 8011dc0:	4618      	mov	r0, r3
 8011dc2:	f7fa fc07 	bl	800c5d4 <__assert_func>
 8011dc6:	bf00      	nop
 8011dc8:	aaaaaaab 	.word	0xaaaaaaab

08011dcc <stm32l4_adc_read_buffer>:
{
 8011dcc:	b508      	push	{r3, lr}
    assert(off < buf_len);
 8011dce:	4293      	cmp	r3, r2
 8011dd0:	da05      	bge.n	8011dde <stm32l4_adc_read_buffer+0x12>
    *result = *((uint32_t *)buf + off);
 8011dd2:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8011dd6:	9b02      	ldr	r3, [sp, #8]
 8011dd8:	601a      	str	r2, [r3, #0]
}
 8011dda:	2000      	movs	r0, #0
 8011ddc:	bd08      	pop	{r3, pc}
    assert(off < buf_len);
 8011dde:	2300      	movs	r3, #0
 8011de0:	461a      	mov	r2, r3
 8011de2:	4619      	mov	r1, r3
 8011de4:	4618      	mov	r0, r3
 8011de6:	f7fa fbf5 	bl	800c5d4 <__assert_func>

08011dea <stm32l4_adc_set_buffer>:
{
 8011dea:	b510      	push	{r4, lr}
    assert(dev != NULL && buf1 != NULL);
 8011dec:	b138      	cbz	r0, 8011dfe <stm32l4_adc_set_buffer+0x14>
 8011dee:	b131      	cbz	r1, 8011dfe <stm32l4_adc_set_buffer+0x14>
    buflen /= sizeof(uint32_t);
 8011df0:	089b      	lsrs	r3, r3, #2
    cfg  = (struct stm32l4_adc_dev_cfg *)dev->ad_dev.od_init_arg;
 8011df2:	6940      	ldr	r0, [r0, #20]
    cfg->primarybuf = buf1;
 8011df4:	6081      	str	r1, [r0, #8]
    cfg->secondarybuf = buf2;
 8011df6:	60c2      	str	r2, [r0, #12]
    cfg->buflen = buflen;
 8011df8:	6103      	str	r3, [r0, #16]
}
 8011dfa:	2000      	movs	r0, #0
 8011dfc:	bd10      	pop	{r4, pc}
    assert(dev != NULL && buf1 != NULL);
 8011dfe:	2300      	movs	r3, #0
 8011e00:	461a      	mov	r2, r3
 8011e02:	4619      	mov	r1, r3
 8011e04:	4618      	mov	r0, r3
 8011e06:	f7fa fbe5 	bl	800c5d4 <__assert_func>
	...

08011e0c <stm32l4_resolve_adc_gpio>:
{
 8011e0c:	b508      	push	{r3, lr}
    assert(adc);
 8011e0e:	b168      	cbz	r0, 8011e2c <stm32l4_resolve_adc_gpio+0x20>
    uintptr_t adc_addr = (uintptr_t)adc->Instance;
 8011e10:	6803      	ldr	r3, [r0, #0]
    switch (adc_addr) {
 8011e12:	4831      	ldr	r0, [pc, #196]	; (8011ed8 <stm32l4_resolve_adc_gpio+0xcc>)
 8011e14:	4283      	cmp	r3, r0
 8011e16:	d00f      	beq.n	8011e38 <stm32l4_resolve_adc_gpio+0x2c>
 8011e18:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8011e1c:	4283      	cmp	r3, r0
 8011e1e:	d024      	beq.n	8011e6a <stm32l4_resolve_adc_gpio+0x5e>
 8011e20:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
 8011e24:	4283      	cmp	r3, r0
 8011e26:	d007      	beq.n	8011e38 <stm32l4_resolve_adc_gpio+0x2c>
            return rc;
 8011e28:	2002      	movs	r0, #2
 8011e2a:	e050      	b.n	8011ece <stm32l4_resolve_adc_gpio+0xc2>
    assert(adc);
 8011e2c:	2300      	movs	r3, #0
 8011e2e:	461a      	mov	r2, r3
 8011e30:	4619      	mov	r1, r3
 8011e32:	4618      	mov	r0, r3
 8011e34:	f7fa fbce 	bl	800c5d4 <__assert_func>
            switch(cnum) {
 8011e38:	1f0b      	subs	r3, r1, #4
 8011e3a:	2b0b      	cmp	r3, #11
 8011e3c:	d815      	bhi.n	8011e6a <stm32l4_resolve_adc_gpio+0x5e>
 8011e3e:	e8df f003 	tbb	[pc, r3]
 8011e42:	3e06      	.short	0x3e06
 8011e44:	0e0c0a08 	.word	0x0e0c0a08
 8011e48:	14141414 	.word	0x14141414
 8011e4c:	1210      	.short	0x1210
                    pin = ADC12_CH4_PIN;
 8011e4e:	2304      	movs	r3, #4
 8011e50:	e036      	b.n	8011ec0 <stm32l4_resolve_adc_gpio+0xb4>
                    pin = ADC12_CH6_PIN;
 8011e52:	2306      	movs	r3, #6
                    goto done;
 8011e54:	e034      	b.n	8011ec0 <stm32l4_resolve_adc_gpio+0xb4>
                    pin = ADC12_CH7_PIN;
 8011e56:	2307      	movs	r3, #7
                    goto done;
 8011e58:	e032      	b.n	8011ec0 <stm32l4_resolve_adc_gpio+0xb4>
                    pin = ADC12_CH8_PIN;
 8011e5a:	2310      	movs	r3, #16
                    goto done;
 8011e5c:	e030      	b.n	8011ec0 <stm32l4_resolve_adc_gpio+0xb4>
                    pin = ADC12_CH9_PIN;
 8011e5e:	2311      	movs	r3, #17
                    goto done;
 8011e60:	e02e      	b.n	8011ec0 <stm32l4_resolve_adc_gpio+0xb4>
                    pin = ADC12_CH14_PIN;
 8011e62:	2324      	movs	r3, #36	; 0x24
                    goto done;
 8011e64:	e02c      	b.n	8011ec0 <stm32l4_resolve_adc_gpio+0xb4>
                    pin = ADC12_CH15_PIN;
 8011e66:	2325      	movs	r3, #37	; 0x25
                    goto done;
 8011e68:	e02a      	b.n	8011ec0 <stm32l4_resolve_adc_gpio+0xb4>
            switch(cnum) {
 8011e6a:	290f      	cmp	r1, #15
 8011e6c:	d832      	bhi.n	8011ed4 <stm32l4_resolve_adc_gpio+0xc8>
 8011e6e:	e8df f001 	tbb	[pc, r1]
 8011e72:	2f08      	.short	0x2f08
 8011e74:	100e0c0a 	.word	0x100e0c0a
 8011e78:	18161412 	.word	0x18161412
 8011e7c:	201e1c1a 	.word	0x201e1c1a
 8011e80:	2422      	.short	0x2422
                    pin = ADC123_CH0_PIN;
 8011e82:	2300      	movs	r3, #0
 8011e84:	e01c      	b.n	8011ec0 <stm32l4_resolve_adc_gpio+0xb4>
                    pin = ADC123_CH2_PIN;
 8011e86:	2302      	movs	r3, #2
                    goto done;
 8011e88:	e01a      	b.n	8011ec0 <stm32l4_resolve_adc_gpio+0xb4>
                    pin = ADC123_CH3_PIN;
 8011e8a:	2303      	movs	r3, #3
                    goto done;
 8011e8c:	e018      	b.n	8011ec0 <stm32l4_resolve_adc_gpio+0xb4>
                    pin = ADC3_CH4_PIN;
 8011e8e:	2356      	movs	r3, #86	; 0x56
                    goto done;
 8011e90:	e016      	b.n	8011ec0 <stm32l4_resolve_adc_gpio+0xb4>
                    pin = ADC3_CH5_PIN;
 8011e92:	2357      	movs	r3, #87	; 0x57
                    goto done;
 8011e94:	e014      	b.n	8011ec0 <stm32l4_resolve_adc_gpio+0xb4>
                    pin = ADC3_CH6_PIN;
 8011e96:	2358      	movs	r3, #88	; 0x58
                    goto done;
 8011e98:	e012      	b.n	8011ec0 <stm32l4_resolve_adc_gpio+0xb4>
                    pin = ADC3_CH7_PIN;
 8011e9a:	2359      	movs	r3, #89	; 0x59
                    goto done;
 8011e9c:	e010      	b.n	8011ec0 <stm32l4_resolve_adc_gpio+0xb4>
                    pin = ADC3_CH8_PIN;
 8011e9e:	235a      	movs	r3, #90	; 0x5a
                    goto done;
 8011ea0:	e00e      	b.n	8011ec0 <stm32l4_resolve_adc_gpio+0xb4>
                    pin = ADC3_CH9_PIN;
 8011ea2:	2353      	movs	r3, #83	; 0x53
                    goto done;
 8011ea4:	e00c      	b.n	8011ec0 <stm32l4_resolve_adc_gpio+0xb4>
                    pin = ADC123_CH10_PIN;
 8011ea6:	2320      	movs	r3, #32
                    goto done;
 8011ea8:	e00a      	b.n	8011ec0 <stm32l4_resolve_adc_gpio+0xb4>
                    pin = ADC123_CH11_PIN;
 8011eaa:	2321      	movs	r3, #33	; 0x21
                    goto done;
 8011eac:	e008      	b.n	8011ec0 <stm32l4_resolve_adc_gpio+0xb4>
                    pin = ADC123_CH12_PIN;
 8011eae:	2322      	movs	r3, #34	; 0x22
                    goto done;
 8011eb0:	e006      	b.n	8011ec0 <stm32l4_resolve_adc_gpio+0xb4>
                    pin = ADC123_CH13_PIN;
 8011eb2:	2323      	movs	r3, #35	; 0x23
                    goto done;
 8011eb4:	e004      	b.n	8011ec0 <stm32l4_resolve_adc_gpio+0xb4>
                    pin = ADC3_CH14_PIN;
 8011eb6:	2354      	movs	r3, #84	; 0x54
                    goto done;
 8011eb8:	e002      	b.n	8011ec0 <stm32l4_resolve_adc_gpio+0xb4>
                    pin = ADC3_CH15_PIN;
 8011eba:	2355      	movs	r3, #85	; 0x55
                    goto done;
 8011ebc:	e000      	b.n	8011ec0 <stm32l4_resolve_adc_gpio+0xb4>
                    pin = ADC12_CH5_PIN;
 8011ebe:	2305      	movs	r3, #5
    *gpio = (GPIO_InitTypeDef) {
 8011ec0:	2000      	movs	r0, #0
 8011ec2:	6090      	str	r0, [r2, #8]
 8011ec4:	60d0      	str	r0, [r2, #12]
 8011ec6:	6013      	str	r3, [r2, #0]
 8011ec8:	2103      	movs	r1, #3
 8011eca:	6051      	str	r1, [r2, #4]
 8011ecc:	6113      	str	r3, [r2, #16]
}
 8011ece:	bd08      	pop	{r3, pc}
                    pin = ADC123_CH1_PIN;
 8011ed0:	2301      	movs	r3, #1
 8011ed2:	e7f5      	b.n	8011ec0 <stm32l4_resolve_adc_gpio+0xb4>
            return rc;
 8011ed4:	2002      	movs	r0, #2
 8011ed6:	e7fa      	b.n	8011ece <stm32l4_resolve_adc_gpio+0xc2>
 8011ed8:	50040100 	.word	0x50040100

08011edc <stm32l4_adc_clk_disable>:
{
 8011edc:	b508      	push	{r3, lr}
    assert(hadc);
 8011ede:	b188      	cbz	r0, 8011f04 <stm32l4_adc_clk_disable+0x28>
    uintptr_t adc_addr = (uintptr_t)hadc->Instance;
 8011ee0:	6803      	ldr	r3, [r0, #0]
    switch (adc_addr) {
 8011ee2:	4a16      	ldr	r2, [pc, #88]	; (8011f3c <stm32l4_adc_clk_disable+0x60>)
 8011ee4:	4293      	cmp	r3, r2
 8011ee6:	d01c      	beq.n	8011f22 <stm32l4_adc_clk_disable+0x46>
 8011ee8:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8011eec:	4293      	cmp	r3, r2
 8011eee:	d01e      	beq.n	8011f2e <stm32l4_adc_clk_disable+0x52>
 8011ef0:	f5a2 7200 	sub.w	r2, r2, #512	; 0x200
 8011ef4:	4293      	cmp	r3, r2
 8011ef6:	d00b      	beq.n	8011f10 <stm32l4_adc_clk_disable+0x34>
            assert(0);
 8011ef8:	2300      	movs	r3, #0
 8011efa:	461a      	mov	r2, r3
 8011efc:	4619      	mov	r1, r3
 8011efe:	4618      	mov	r0, r3
 8011f00:	f7fa fb68 	bl	800c5d4 <__assert_func>
    assert(hadc);
 8011f04:	2300      	movs	r3, #0
 8011f06:	461a      	mov	r2, r3
 8011f08:	4619      	mov	r1, r3
 8011f0a:	4618      	mov	r0, r3
 8011f0c:	f7fa fb62 	bl	800c5d4 <__assert_func>
            __HAL_RCC_ADC_CLK_DISABLE();
 8011f10:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8011f14:	f5a2 32f8 	sub.w	r2, r2, #126976	; 0x1f000
 8011f18:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8011f1a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011f1e:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8011f20:	bd08      	pop	{r3, pc}
            __HAL_RCC_ADC_CLK_DISABLE();
 8011f22:	4a07      	ldr	r2, [pc, #28]	; (8011f40 <stm32l4_adc_clk_disable+0x64>)
 8011f24:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8011f26:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011f2a:	64d3      	str	r3, [r2, #76]	; 0x4c
            break;
 8011f2c:	e7f8      	b.n	8011f20 <stm32l4_adc_clk_disable+0x44>
            __HAL_RCC_ADC_CLK_DISABLE();
 8011f2e:	4a04      	ldr	r2, [pc, #16]	; (8011f40 <stm32l4_adc_clk_disable+0x64>)
 8011f30:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8011f32:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011f36:	64d3      	str	r3, [r2, #76]	; 0x4c
            break;
 8011f38:	e7f2      	b.n	8011f20 <stm32l4_adc_clk_disable+0x44>
 8011f3a:	bf00      	nop
 8011f3c:	50040100 	.word	0x50040100
 8011f40:	40021000 	.word	0x40021000

08011f44 <stm32l4_resolve_adc_dma_irq>:
{
 8011f44:	b508      	push	{r3, lr}
    assert(hdma);
 8011f46:	b198      	cbz	r0, 8011f70 <stm32l4_resolve_adc_dma_irq+0x2c>
    uintptr_t stream_addr = (uintptr_t)hdma->Instance;
 8011f48:	6803      	ldr	r3, [r0, #0]
    switch(stream_addr) {
 8011f4a:	4a18      	ldr	r2, [pc, #96]	; (8011fac <stm32l4_resolve_adc_dma_irq+0x68>)
 8011f4c:	4293      	cmp	r3, r2
 8011f4e:	d022      	beq.n	8011f96 <stm32l4_resolve_adc_dma_irq+0x52>
 8011f50:	d814      	bhi.n	8011f7c <stm32l4_resolve_adc_dma_irq+0x38>
 8011f52:	3a28      	subs	r2, #40	; 0x28
 8011f54:	4293      	cmp	r3, r2
 8011f56:	d026      	beq.n	8011fa6 <stm32l4_resolve_adc_dma_irq+0x62>
 8011f58:	3214      	adds	r2, #20
 8011f5a:	4293      	cmp	r3, r2
 8011f5c:	d019      	beq.n	8011f92 <stm32l4_resolve_adc_dma_irq+0x4e>
 8011f5e:	3a28      	subs	r2, #40	; 0x28
 8011f60:	4293      	cmp	r3, r2
 8011f62:	d01e      	beq.n	8011fa2 <stm32l4_resolve_adc_dma_irq+0x5e>
            assert(0);
 8011f64:	2300      	movs	r3, #0
 8011f66:	461a      	mov	r2, r3
 8011f68:	4619      	mov	r1, r3
 8011f6a:	4618      	mov	r0, r3
 8011f6c:	f7fa fb32 	bl	800c5d4 <__assert_func>
    assert(hdma);
 8011f70:	2300      	movs	r3, #0
 8011f72:	461a      	mov	r2, r3
 8011f74:	4619      	mov	r1, r3
 8011f76:	4618      	mov	r0, r3
 8011f78:	f7fa fb2c 	bl	800c5d4 <__assert_func>
    switch(stream_addr) {
 8011f7c:	4a0c      	ldr	r2, [pc, #48]	; (8011fb0 <stm32l4_resolve_adc_dma_irq+0x6c>)
 8011f7e:	4293      	cmp	r3, r2
 8011f80:	d00b      	beq.n	8011f9a <stm32l4_resolve_adc_dma_irq+0x56>
 8011f82:	3214      	adds	r2, #20
 8011f84:	4293      	cmp	r3, r2
 8011f86:	d00a      	beq.n	8011f9e <stm32l4_resolve_adc_dma_irq+0x5a>
 8011f88:	3a28      	subs	r2, #40	; 0x28
 8011f8a:	4293      	cmp	r3, r2
 8011f8c:	d1ea      	bne.n	8011f64 <stm32l4_resolve_adc_dma_irq+0x20>
            return DMA2_Channel5_IRQn;
 8011f8e:	203c      	movs	r0, #60	; 0x3c
 8011f90:	e000      	b.n	8011f94 <stm32l4_resolve_adc_dma_irq+0x50>
            return DMA2_Channel3_IRQn;
 8011f92:	203a      	movs	r0, #58	; 0x3a
}
 8011f94:	bd08      	pop	{r3, pc}
            return DMA2_Channel4_IRQn;
 8011f96:	203b      	movs	r0, #59	; 0x3b
 8011f98:	e7fc      	b.n	8011f94 <stm32l4_resolve_adc_dma_irq+0x50>
            return DMA2_Channel6_IRQn;
 8011f9a:	2044      	movs	r0, #68	; 0x44
 8011f9c:	e7fa      	b.n	8011f94 <stm32l4_resolve_adc_dma_irq+0x50>
            return DMA2_Channel7_IRQn;
 8011f9e:	2045      	movs	r0, #69	; 0x45
 8011fa0:	e7f8      	b.n	8011f94 <stm32l4_resolve_adc_dma_irq+0x50>
            return DMA2_Channel1_IRQn;
 8011fa2:	2038      	movs	r0, #56	; 0x38
 8011fa4:	e7f6      	b.n	8011f94 <stm32l4_resolve_adc_dma_irq+0x50>
            return DMA2_Channel2_IRQn;
 8011fa6:	2039      	movs	r0, #57	; 0x39
 8011fa8:	e7f4      	b.n	8011f94 <stm32l4_resolve_adc_dma_irq+0x50>
 8011faa:	bf00      	nop
 8011fac:	40020444 	.word	0x40020444
 8011fb0:	4002046c 	.word	0x4002046c

08011fb4 <stm32l4_adc_clk_enable>:
{
 8011fb4:	b500      	push	{lr}
 8011fb6:	b085      	sub	sp, #20
    assert(hadc);
 8011fb8:	b188      	cbz	r0, 8011fde <stm32l4_adc_clk_enable+0x2a>
    uintptr_t adc_addr = (uintptr_t)hadc->Instance;
 8011fba:	6803      	ldr	r3, [r0, #0]
    switch (adc_addr) {
 8011fbc:	4a1c      	ldr	r2, [pc, #112]	; (8012030 <stm32l4_adc_clk_enable+0x7c>)
 8011fbe:	4293      	cmp	r3, r2
 8011fc0:	d020      	beq.n	8012004 <stm32l4_adc_clk_enable+0x50>
 8011fc2:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8011fc6:	4293      	cmp	r3, r2
 8011fc8:	d027      	beq.n	801201a <stm32l4_adc_clk_enable+0x66>
 8011fca:	f5a2 7200 	sub.w	r2, r2, #512	; 0x200
 8011fce:	4293      	cmp	r3, r2
 8011fd0:	d00b      	beq.n	8011fea <stm32l4_adc_clk_enable+0x36>
            assert(0);
 8011fd2:	2300      	movs	r3, #0
 8011fd4:	461a      	mov	r2, r3
 8011fd6:	4619      	mov	r1, r3
 8011fd8:	4618      	mov	r0, r3
 8011fda:	f7fa fafb 	bl	800c5d4 <__assert_func>
    assert(hadc);
 8011fde:	2300      	movs	r3, #0
 8011fe0:	461a      	mov	r2, r3
 8011fe2:	4619      	mov	r1, r3
 8011fe4:	4618      	mov	r0, r3
 8011fe6:	f7fa faf5 	bl	800c5d4 <__assert_func>
            __HAL_RCC_ADC_CLK_ENABLE();
 8011fea:	4b12      	ldr	r3, [pc, #72]	; (8012034 <stm32l4_adc_clk_enable+0x80>)
 8011fec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011fee:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8011ff2:	64da      	str	r2, [r3, #76]	; 0x4c
 8011ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011ff6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011ffa:	9301      	str	r3, [sp, #4]
 8011ffc:	9b01      	ldr	r3, [sp, #4]
}
 8011ffe:	b005      	add	sp, #20
 8012000:	f85d fb04 	ldr.w	pc, [sp], #4
            __HAL_RCC_ADC_CLK_ENABLE();
 8012004:	4b0b      	ldr	r3, [pc, #44]	; (8012034 <stm32l4_adc_clk_enable+0x80>)
 8012006:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012008:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801200c:	64da      	str	r2, [r3, #76]	; 0x4c
 801200e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012010:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012014:	9302      	str	r3, [sp, #8]
 8012016:	9b02      	ldr	r3, [sp, #8]
            break;
 8012018:	e7f1      	b.n	8011ffe <stm32l4_adc_clk_enable+0x4a>
            __HAL_RCC_ADC_CLK_ENABLE();
 801201a:	4b06      	ldr	r3, [pc, #24]	; (8012034 <stm32l4_adc_clk_enable+0x80>)
 801201c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801201e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8012022:	64da      	str	r2, [r3, #76]	; 0x4c
 8012024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012026:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801202a:	9303      	str	r3, [sp, #12]
 801202c:	9b03      	ldr	r3, [sp, #12]
            break;
 801202e:	e7e6      	b.n	8011ffe <stm32l4_adc_clk_enable+0x4a>
 8012030:	50040100 	.word	0x50040100
 8012034:	40021000 	.word	0x40021000

08012038 <dma2_stream7_irq_handler>:
{
 8012038:	b508      	push	{r3, lr}
    HAL_DMA_IRQHandler(dma_handle[7]);
 801203a:	4b02      	ldr	r3, [pc, #8]	; (8012044 <dma2_stream7_irq_handler+0xc>)
 801203c:	69d8      	ldr	r0, [r3, #28]
 801203e:	f7ff fd7f 	bl	8011b40 <HAL_DMA_IRQHandler>
}
 8012042:	bd08      	pop	{r3, pc}
 8012044:	20002eec 	.word	0x20002eec

08012048 <dma2_stream6_irq_handler>:
{
 8012048:	b508      	push	{r3, lr}
    HAL_DMA_IRQHandler(dma_handle[6]);
 801204a:	4b02      	ldr	r3, [pc, #8]	; (8012054 <dma2_stream6_irq_handler+0xc>)
 801204c:	6998      	ldr	r0, [r3, #24]
 801204e:	f7ff fd77 	bl	8011b40 <HAL_DMA_IRQHandler>
}
 8012052:	bd08      	pop	{r3, pc}
 8012054:	20002eec 	.word	0x20002eec

08012058 <dma2_stream5_irq_handler>:
{
 8012058:	b508      	push	{r3, lr}
    HAL_DMA_IRQHandler(dma_handle[5]);
 801205a:	4b02      	ldr	r3, [pc, #8]	; (8012064 <dma2_stream5_irq_handler+0xc>)
 801205c:	6958      	ldr	r0, [r3, #20]
 801205e:	f7ff fd6f 	bl	8011b40 <HAL_DMA_IRQHandler>
}
 8012062:	bd08      	pop	{r3, pc}
 8012064:	20002eec 	.word	0x20002eec

08012068 <dma2_stream4_irq_handler>:
{
 8012068:	b508      	push	{r3, lr}
    HAL_DMA_IRQHandler(dma_handle[4]);
 801206a:	4b02      	ldr	r3, [pc, #8]	; (8012074 <dma2_stream4_irq_handler+0xc>)
 801206c:	6918      	ldr	r0, [r3, #16]
 801206e:	f7ff fd67 	bl	8011b40 <HAL_DMA_IRQHandler>
}
 8012072:	bd08      	pop	{r3, pc}
 8012074:	20002eec 	.word	0x20002eec

08012078 <dma2_stream3_irq_handler>:
{
 8012078:	b508      	push	{r3, lr}
    HAL_DMA_IRQHandler(dma_handle[3]);
 801207a:	4b02      	ldr	r3, [pc, #8]	; (8012084 <dma2_stream3_irq_handler+0xc>)
 801207c:	68d8      	ldr	r0, [r3, #12]
 801207e:	f7ff fd5f 	bl	8011b40 <HAL_DMA_IRQHandler>
}
 8012082:	bd08      	pop	{r3, pc}
 8012084:	20002eec 	.word	0x20002eec

08012088 <dma2_stream2_irq_handler>:
{
 8012088:	b508      	push	{r3, lr}
    HAL_DMA_IRQHandler(dma_handle[2]);
 801208a:	4b02      	ldr	r3, [pc, #8]	; (8012094 <dma2_stream2_irq_handler+0xc>)
 801208c:	6898      	ldr	r0, [r3, #8]
 801208e:	f7ff fd57 	bl	8011b40 <HAL_DMA_IRQHandler>
}
 8012092:	bd08      	pop	{r3, pc}
 8012094:	20002eec 	.word	0x20002eec

08012098 <dma2_stream1_irq_handler>:
{
 8012098:	b508      	push	{r3, lr}
    HAL_DMA_IRQHandler(dma_handle[1]);
 801209a:	4b02      	ldr	r3, [pc, #8]	; (80120a4 <dma2_stream1_irq_handler+0xc>)
 801209c:	6858      	ldr	r0, [r3, #4]
 801209e:	f7ff fd4f 	bl	8011b40 <HAL_DMA_IRQHandler>
}
 80120a2:	bd08      	pop	{r3, pc}
 80120a4:	20002eec 	.word	0x20002eec

080120a8 <stm32l4_adc_sample>:
{
 80120a8:	b508      	push	{r3, lr}
    assert(dev);
 80120aa:	b140      	cbz	r0, 80120be <stm32l4_adc_sample+0x16>
    cfg  = (struct stm32l4_adc_dev_cfg *)dev->ad_dev.od_init_arg;
 80120ac:	6943      	ldr	r3, [r0, #20]
    if (HAL_ADC_Start_DMA(hadc, cfg->primarybuf, cfg->buflen) != HAL_OK) {
 80120ae:	691a      	ldr	r2, [r3, #16]
 80120b0:	6899      	ldr	r1, [r3, #8]
 80120b2:	6958      	ldr	r0, [r3, #20]
 80120b4:	f002 fec6 	bl	8014e44 <HAL_ADC_Start_DMA>
 80120b8:	b938      	cbnz	r0, 80120ca <stm32l4_adc_sample+0x22>
    rc = OS_OK;
 80120ba:	2000      	movs	r0, #0
}
 80120bc:	bd08      	pop	{r3, pc}
    assert(dev);
 80120be:	2300      	movs	r3, #0
 80120c0:	461a      	mov	r2, r3
 80120c2:	4619      	mov	r1, r3
 80120c4:	4618      	mov	r0, r3
 80120c6:	f7fa fa85 	bl	800c5d4 <__assert_func>
        ++stm32l4_adc_stats.adc_dma_start_error;
 80120ca:	4a03      	ldr	r2, [pc, #12]	; (80120d8 <stm32l4_adc_sample+0x30>)
 80120cc:	8953      	ldrh	r3, [r2, #10]
 80120ce:	3301      	adds	r3, #1
 80120d0:	8153      	strh	r3, [r2, #10]
    rc = OS_EINVAL;
 80120d2:	2002      	movs	r0, #2
        goto err;
 80120d4:	e7f2      	b.n	80120bc <stm32l4_adc_sample+0x14>
 80120d6:	bf00      	nop
 80120d8:	20002f00 	.word	0x20002f00

080120dc <stm32l4_adc_release_buffer>:
{
 80120dc:	b508      	push	{r3, lr}
    assert(dev);
 80120de:	b128      	cbz	r0, 80120ec <stm32l4_adc_release_buffer+0x10>
    cfg  = (struct stm32l4_adc_dev_cfg *)dev->ad_dev.od_init_arg;
 80120e0:	6943      	ldr	r3, [r0, #20]
    HAL_ADC_Stop_DMA(hadc);
 80120e2:	6958      	ldr	r0, [r3, #20]
 80120e4:	f002 ff9e 	bl	8015024 <HAL_ADC_Stop_DMA>
}
 80120e8:	2000      	movs	r0, #0
 80120ea:	bd08      	pop	{r3, pc}
    assert(dev);
 80120ec:	2300      	movs	r3, #0
 80120ee:	461a      	mov	r2, r3
 80120f0:	4619      	mov	r1, r3
 80120f2:	4618      	mov	r0, r3
 80120f4:	f7fa fa6e 	bl	800c5d4 <__assert_func>

080120f8 <stm32l4_adc_read_channel>:
{
 80120f8:	b538      	push	{r3, r4, r5, lr}
    assert(dev != NULL && result != NULL);
 80120fa:	b1e0      	cbz	r0, 8012136 <stm32l4_adc_read_channel+0x3e>
 80120fc:	4615      	mov	r5, r2
 80120fe:	b1d2      	cbz	r2, 8012136 <stm32l4_adc_read_channel+0x3e>
    cfg  = (struct stm32l4_adc_dev_cfg *)dev->ad_dev.od_init_arg;
 8012100:	6943      	ldr	r3, [r0, #20]
    hadc = cfg->sac_adc_handle;
 8012102:	695c      	ldr	r4, [r3, #20]
    assert(hadc);
 8012104:	b1ec      	cbz	r4, 8012142 <stm32l4_adc_read_channel+0x4a>
    while (HAL_ADCEx_Calibration_Start(hadc, ADC_SINGLE_ENDED) != HAL_OK) {}
 8012106:	217f      	movs	r1, #127	; 0x7f
 8012108:	4620      	mov	r0, r4
 801210a:	f002 ffcc 	bl	80150a6 <HAL_ADCEx_Calibration_Start>
 801210e:	2800      	cmp	r0, #0
 8012110:	d1f9      	bne.n	8012106 <stm32l4_adc_read_channel+0xe>
    HAL_ADC_Start(hadc);
 8012112:	4620      	mov	r0, r4
 8012114:	f002 fe1a 	bl	8014d4c <HAL_ADC_Start>
    HAL_StatusTypeDef rc = HAL_ADC_PollForConversion(hadc, 10 * 1000);  //  Wait up to 10 seconds.  TODO: Yield to task scheduler while waiting.
 8012118:	f242 7110 	movw	r1, #10000	; 0x2710
 801211c:	4620      	mov	r0, r4
 801211e:	f002 fa21 	bl	8014564 <HAL_ADC_PollForConversion>
    assert(rc == HAL_OK);
 8012122:	b9a0      	cbnz	r0, 801214e <stm32l4_adc_read_channel+0x56>
    val = HAL_ADC_GetValue(hadc);
 8012124:	4620      	mov	r0, r4
 8012126:	f002 faa3 	bl	8014670 <HAL_ADC_GetValue>
    *result = val;
 801212a:	6028      	str	r0, [r5, #0]
    HAL_ADC_Stop(hadc);
 801212c:	4620      	mov	r0, r4
 801212e:	f002 ff54 	bl	8014fda <HAL_ADC_Stop>
}
 8012132:	2000      	movs	r0, #0
 8012134:	bd38      	pop	{r3, r4, r5, pc}
    assert(dev != NULL && result != NULL);
 8012136:	2300      	movs	r3, #0
 8012138:	461a      	mov	r2, r3
 801213a:	4619      	mov	r1, r3
 801213c:	4618      	mov	r0, r3
 801213e:	f7fa fa49 	bl	800c5d4 <__assert_func>
    assert(hadc);
 8012142:	2300      	movs	r3, #0
 8012144:	461a      	mov	r2, r3
 8012146:	4619      	mov	r1, r3
 8012148:	4618      	mov	r0, r3
 801214a:	f7fa fa43 	bl	800c5d4 <__assert_func>
    assert(rc == HAL_OK);
 801214e:	2300      	movs	r3, #0
 8012150:	461a      	mov	r2, r3
 8012152:	4619      	mov	r1, r3
 8012154:	4618      	mov	r0, r3
 8012156:	f7fa fa3d 	bl	800c5d4 <__assert_func>

0801215a <stm32l4_adc_configure_channel>:
{
 801215a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801215e:	b087      	sub	sp, #28
    if (dev == NULL) {
 8012160:	b388      	cbz	r0, 80121c6 <stm32l4_adc_configure_channel+0x6c>
 8012162:	4605      	mov	r5, r0
 8012164:	460c      	mov	r4, r1
    cfg  = (struct stm32l4_adc_dev_cfg *)dev->ad_dev.od_init_arg;
 8012166:	6943      	ldr	r3, [r0, #20]
    hadc = cfg->sac_adc_handle;
 8012168:	695f      	ldr	r7, [r3, #20]
    chan_cfg = &((struct adc_chan_config *)cfg->sac_chans)[cnum];
 801216a:	f8d3 8004 	ldr.w	r8, [r3, #4]
 801216e:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 8012172:	005e      	lsls	r6, r3, #1
 8012174:	eb08 0906 	add.w	r9, r8, r6
    if ((HAL_ADC_ConfigChannel(hadc, cfgdata)) != HAL_OK) {
 8012178:	4611      	mov	r1, r2
 801217a:	4638      	mov	r0, r7
 801217c:	f002 fad2 	bl	8014724 <HAL_ADC_ConfigChannel>
 8012180:	bb30      	cbnz	r0, 80121d0 <stm32l4_adc_configure_channel+0x76>
    dev->ad_chans[cnum].c_res = chan_cfg->c_res;
 8012182:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8012184:	4433      	add	r3, r6
 8012186:	f899 2002 	ldrb.w	r2, [r9, #2]
 801218a:	709a      	strb	r2, [r3, #2]
    dev->ad_chans[cnum].c_refmv = chan_cfg->c_refmv;
 801218c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801218e:	f838 2006 	ldrh.w	r2, [r8, r6]
 8012192:	539a      	strh	r2, [r3, r6]
    dev->ad_chans[cnum].c_configured = 1;
 8012194:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8012196:	4433      	add	r3, r6
 8012198:	2201      	movs	r2, #1
 801219a:	70da      	strb	r2, [r3, #3]
    dev->ad_chans[cnum].c_cnum = cnum;
 801219c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801219e:	441e      	add	r6, r3
 80121a0:	7134      	strb	r4, [r6, #4]
    if (cnum != MYNEWT_ADC_CHANNEL_TEMPSENSOR && 
 80121a2:	2c11      	cmp	r4, #17
 80121a4:	d016      	beq.n	80121d4 <stm32l4_adc_configure_channel+0x7a>
 80121a6:	b1bc      	cbz	r4, 80121d8 <stm32l4_adc_configure_channel+0x7e>
        cnum != MYNEWT_ADC_CHANNEL_VREFINT &&
 80121a8:	2c12      	cmp	r4, #18
 80121aa:	d017      	beq.n	80121dc <stm32l4_adc_configure_channel+0x82>
        if (stm32l4_resolve_adc_gpio(hadc, cnum, &gpio_td)) {
 80121ac:	aa01      	add	r2, sp, #4
 80121ae:	4621      	mov	r1, r4
 80121b0:	4638      	mov	r0, r7
 80121b2:	f7ff fe2b 	bl	8011e0c <stm32l4_resolve_adc_gpio>
 80121b6:	4604      	mov	r4, r0
 80121b8:	b990      	cbnz	r0, 80121e0 <stm32l4_adc_configure_channel+0x86>
        hal_gpio_init_stm(gpio_td.Pin, &gpio_td);
 80121ba:	a906      	add	r1, sp, #24
 80121bc:	f851 0d14 	ldr.w	r0, [r1, #-20]!
 80121c0:	f7fe f8d8 	bl	8010374 <hal_gpio_init_stm>
 80121c4:	e000      	b.n	80121c8 <stm32l4_adc_configure_channel+0x6e>
    return (rc);
 80121c6:	2402      	movs	r4, #2
}
 80121c8:	4620      	mov	r0, r4
 80121ca:	b007      	add	sp, #28
 80121cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return (rc);
 80121d0:	2402      	movs	r4, #2
 80121d2:	e7f9      	b.n	80121c8 <stm32l4_adc_configure_channel+0x6e>
    return (OS_OK);
 80121d4:	2400      	movs	r4, #0
 80121d6:	e7f7      	b.n	80121c8 <stm32l4_adc_configure_channel+0x6e>
 80121d8:	2400      	movs	r4, #0
 80121da:	e7f5      	b.n	80121c8 <stm32l4_adc_configure_channel+0x6e>
 80121dc:	2400      	movs	r4, #0
 80121de:	e7f3      	b.n	80121c8 <stm32l4_adc_configure_channel+0x6e>
    return (rc);
 80121e0:	2402      	movs	r4, #2
 80121e2:	e7f1      	b.n	80121c8 <stm32l4_adc_configure_channel+0x6e>

080121e4 <stm32l4_adc_uninit>:
{
 80121e4:	b570      	push	{r4, r5, r6, lr}
 80121e6:	b086      	sub	sp, #24
    assert(dev);
 80121e8:	b388      	cbz	r0, 801224e <stm32l4_adc_uninit+0x6a>
    cfg  = (struct stm32l4_adc_dev_cfg *)dev->ad_dev.od_init_arg;
 80121ea:	6942      	ldr	r2, [r0, #20]
    hadc = cfg->sac_adc_handle;
 80121ec:	6956      	ldr	r6, [r2, #20]
    hdma = hadc->DMA_Handle;
 80121ee:	6cf4      	ldr	r4, [r6, #76]	; 0x4c
    cnum = dev->ad_chans->c_cnum;
 80121f0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80121f2:	791d      	ldrb	r5, [r3, #4]
    if (hdma) {
 80121f4:	b144      	cbz	r4, 8012208 <stm32l4_adc_uninit+0x24>
        __HAL_RCC_DMA2_CLK_DISABLE();
 80121f6:	4a1f      	ldr	r2, [pc, #124]	; (8012274 <stm32l4_adc_uninit+0x90>)
 80121f8:	6c93      	ldr	r3, [r2, #72]	; 0x48
 80121fa:	f023 0302 	bic.w	r3, r3, #2
 80121fe:	6493      	str	r3, [r2, #72]	; 0x48
        if (HAL_DMA_DeInit(hdma) != HAL_OK) {
 8012200:	4620      	mov	r0, r4
 8012202:	f7ff fbd9 	bl	80119b8 <HAL_DMA_DeInit>
 8012206:	bb40      	cbnz	r0, 801225a <stm32l4_adc_uninit+0x76>
    stm32l4_adc_clk_disable(hadc);
 8012208:	4630      	mov	r0, r6
 801220a:	f7ff fe67 	bl	8011edc <stm32l4_adc_clk_disable>
    if (hdma) {
 801220e:	b18c      	cbz	r4, 8012234 <stm32l4_adc_uninit+0x50>
        NVIC_DisableIRQ(stm32l4_resolve_adc_dma_irq(hdma));
 8012210:	4620      	mov	r0, r4
 8012212:	f7ff fe97 	bl	8011f44 <stm32l4_resolve_adc_dma_irq>
  if ((int32_t)(IRQn) >= 0)
 8012216:	2800      	cmp	r0, #0
 8012218:	db0c      	blt.n	8012234 <stm32l4_adc_uninit+0x50>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801221a:	f000 021f 	and.w	r2, r0, #31
 801221e:	0940      	lsrs	r0, r0, #5
 8012220:	2301      	movs	r3, #1
 8012222:	4093      	lsls	r3, r2
 8012224:	3020      	adds	r0, #32
 8012226:	4a14      	ldr	r2, [pc, #80]	; (8012278 <stm32l4_adc_uninit+0x94>)
 8012228:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 801222c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8012230:	f3bf 8f6f 	isb	sy
    if (cnum != MYNEWT_ADC_CHANNEL_TEMPSENSOR && 
 8012234:	2d11      	cmp	r5, #17
 8012236:	d008      	beq.n	801224a <stm32l4_adc_uninit+0x66>
 8012238:	b13d      	cbz	r5, 801224a <stm32l4_adc_uninit+0x66>
        cnum != MYNEWT_ADC_CHANNEL_VREFINT &&
 801223a:	2d12      	cmp	r5, #18
 801223c:	d005      	beq.n	801224a <stm32l4_adc_uninit+0x66>
        if (stm32l4_resolve_adc_gpio(hadc, cnum, &gpio_td)) {
 801223e:	aa01      	add	r2, sp, #4
 8012240:	4629      	mov	r1, r5
 8012242:	4630      	mov	r0, r6
 8012244:	f7ff fde2 	bl	8011e0c <stm32l4_resolve_adc_gpio>
 8012248:	b168      	cbz	r0, 8012266 <stm32l4_adc_uninit+0x82>
}
 801224a:	b006      	add	sp, #24
 801224c:	bd70      	pop	{r4, r5, r6, pc}
    assert(dev);
 801224e:	2300      	movs	r3, #0
 8012250:	461a      	mov	r2, r3
 8012252:	4619      	mov	r1, r3
 8012254:	4618      	mov	r0, r3
 8012256:	f7fa f9bd 	bl	800c5d4 <__assert_func>
            assert(0);
 801225a:	2300      	movs	r3, #0
 801225c:	461a      	mov	r2, r3
 801225e:	4619      	mov	r1, r3
 8012260:	4618      	mov	r0, r3
 8012262:	f7fa f9b7 	bl	800c5d4 <__assert_func>
        if (hal_gpio_deinit_stm(gpio_td.Pin, &gpio_td)) {
 8012266:	a906      	add	r1, sp, #24
 8012268:	f851 0d14 	ldr.w	r0, [r1, #-20]!
 801226c:	f7fe f89e 	bl	80103ac <hal_gpio_deinit_stm>
    return;
 8012270:	e7eb      	b.n	801224a <stm32l4_adc_uninit+0x66>
 8012272:	bf00      	nop
 8012274:	40021000 	.word	0x40021000
 8012278:	e000e100 	.word	0xe000e100

0801227c <stm32l4_adc_close>:
{
 801227c:	b510      	push	{r4, lr}
 801227e:	4604      	mov	r4, r0
    stm32l4_adc_uninit(dev);
 8012280:	f7ff ffb0 	bl	80121e4 <stm32l4_adc_uninit>
    if (os_started()) {
 8012284:	f7fa fa64 	bl	800c750 <os_started>
 8012288:	b908      	cbnz	r0, 801228e <stm32l4_adc_close+0x12>
}
 801228a:	2000      	movs	r0, #0
 801228c:	bd10      	pop	{r4, pc}
        os_mutex_release(&dev->ad_lock);
 801228e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8012292:	f7fb f8b3 	bl	800d3fc <os_mutex_release>
 8012296:	e7f8      	b.n	801228a <stm32l4_adc_close+0xe>

08012298 <stm32l4_resolve_adc_dma_irq_handler>:
{
 8012298:	b508      	push	{r3, lr}
    assert(hdma);
 801229a:	b198      	cbz	r0, 80122c4 <stm32l4_resolve_adc_dma_irq_handler+0x2c>
    switch((uintptr_t)hdma->Instance) {
 801229c:	6803      	ldr	r3, [r0, #0]
 801229e:	4a18      	ldr	r2, [pc, #96]	; (8012300 <stm32l4_resolve_adc_dma_irq_handler+0x68>)
 80122a0:	4293      	cmp	r3, r2
 80122a2:	d026      	beq.n	80122f2 <stm32l4_resolve_adc_dma_irq_handler+0x5a>
 80122a4:	d814      	bhi.n	80122d0 <stm32l4_resolve_adc_dma_irq_handler+0x38>
 80122a6:	3a28      	subs	r2, #40	; 0x28
 80122a8:	4293      	cmp	r3, r2
 80122aa:	d01e      	beq.n	80122ea <stm32l4_resolve_adc_dma_irq_handler+0x52>
 80122ac:	3214      	adds	r2, #20
 80122ae:	4293      	cmp	r3, r2
 80122b0:	d01d      	beq.n	80122ee <stm32l4_resolve_adc_dma_irq_handler+0x56>
 80122b2:	3a28      	subs	r2, #40	; 0x28
 80122b4:	4293      	cmp	r3, r2
 80122b6:	d016      	beq.n	80122e6 <stm32l4_resolve_adc_dma_irq_handler+0x4e>
            assert(0);
 80122b8:	2300      	movs	r3, #0
 80122ba:	461a      	mov	r2, r3
 80122bc:	4619      	mov	r1, r3
 80122be:	4618      	mov	r0, r3
 80122c0:	f7fa f988 	bl	800c5d4 <__assert_func>
    assert(hdma);
 80122c4:	2300      	movs	r3, #0
 80122c6:	461a      	mov	r2, r3
 80122c8:	4619      	mov	r1, r3
 80122ca:	4618      	mov	r0, r3
 80122cc:	f7fa f982 	bl	800c5d4 <__assert_func>
    switch((uintptr_t)hdma->Instance) {
 80122d0:	4a0c      	ldr	r2, [pc, #48]	; (8012304 <stm32l4_resolve_adc_dma_irq_handler+0x6c>)
 80122d2:	4293      	cmp	r3, r2
 80122d4:	d00f      	beq.n	80122f6 <stm32l4_resolve_adc_dma_irq_handler+0x5e>
 80122d6:	3214      	adds	r2, #20
 80122d8:	4293      	cmp	r3, r2
 80122da:	d00e      	beq.n	80122fa <stm32l4_resolve_adc_dma_irq_handler+0x62>
 80122dc:	3a28      	subs	r2, #40	; 0x28
 80122de:	4293      	cmp	r3, r2
 80122e0:	d1ea      	bne.n	80122b8 <stm32l4_resolve_adc_dma_irq_handler+0x20>
            return (uint32_t)&dma2_stream5_irq_handler;
 80122e2:	4809      	ldr	r0, [pc, #36]	; (8012308 <stm32l4_resolve_adc_dma_irq_handler+0x70>)
 80122e4:	e000      	b.n	80122e8 <stm32l4_resolve_adc_dma_irq_handler+0x50>
            return (uint32_t)&dma2_stream1_irq_handler;
 80122e6:	4809      	ldr	r0, [pc, #36]	; (801230c <stm32l4_resolve_adc_dma_irq_handler+0x74>)
}
 80122e8:	bd08      	pop	{r3, pc}
            return (uint32_t)&dma2_stream2_irq_handler;
 80122ea:	4809      	ldr	r0, [pc, #36]	; (8012310 <stm32l4_resolve_adc_dma_irq_handler+0x78>)
 80122ec:	e7fc      	b.n	80122e8 <stm32l4_resolve_adc_dma_irq_handler+0x50>
            return (uint32_t)&dma2_stream3_irq_handler;
 80122ee:	4809      	ldr	r0, [pc, #36]	; (8012314 <stm32l4_resolve_adc_dma_irq_handler+0x7c>)
 80122f0:	e7fa      	b.n	80122e8 <stm32l4_resolve_adc_dma_irq_handler+0x50>
            return (uint32_t)&dma2_stream4_irq_handler;
 80122f2:	4809      	ldr	r0, [pc, #36]	; (8012318 <stm32l4_resolve_adc_dma_irq_handler+0x80>)
 80122f4:	e7f8      	b.n	80122e8 <stm32l4_resolve_adc_dma_irq_handler+0x50>
            return (uint32_t)&dma2_stream6_irq_handler;
 80122f6:	4809      	ldr	r0, [pc, #36]	; (801231c <stm32l4_resolve_adc_dma_irq_handler+0x84>)
 80122f8:	e7f6      	b.n	80122e8 <stm32l4_resolve_adc_dma_irq_handler+0x50>
            return (uint32_t)&dma2_stream7_irq_handler;
 80122fa:	4809      	ldr	r0, [pc, #36]	; (8012320 <stm32l4_resolve_adc_dma_irq_handler+0x88>)
 80122fc:	e7f4      	b.n	80122e8 <stm32l4_resolve_adc_dma_irq_handler+0x50>
 80122fe:	bf00      	nop
 8012300:	40020444 	.word	0x40020444
 8012304:	4002046c 	.word	0x4002046c
 8012308:	08012059 	.word	0x08012059
 801230c:	08012099 	.word	0x08012099
 8012310:	08012089 	.word	0x08012089
 8012314:	08012079 	.word	0x08012079
 8012318:	08012069 	.word	0x08012069
 801231c:	08012049 	.word	0x08012049
 8012320:	08012039 	.word	0x08012039

08012324 <stm32l4_adc_dma_init>:
{
 8012324:	b530      	push	{r4, r5, lr}
 8012326:	b083      	sub	sp, #12
    assert(hadc);
 8012328:	2800      	cmp	r0, #0
 801232a:	d040      	beq.n	80123ae <stm32l4_adc_dma_init+0x8a>
    hdma = hadc->DMA_Handle;
 801232c:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
    stm32l4_adc_clk_enable(hadc);
 801232e:	f7ff fe41 	bl	8011fb4 <stm32l4_adc_clk_enable>
    if (hdma) {
 8012332:	2c00      	cmp	r4, #0
 8012334:	d039      	beq.n	80123aa <stm32l4_adc_dma_init+0x86>
        __HAL_RCC_DMA2_CLK_ENABLE();
 8012336:	4b24      	ldr	r3, [pc, #144]	; (80123c8 <stm32l4_adc_dma_init+0xa4>)
 8012338:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801233a:	f042 0202 	orr.w	r2, r2, #2
 801233e:	649a      	str	r2, [r3, #72]	; 0x48
 8012340:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012342:	f003 0302 	and.w	r3, r3, #2
 8012346:	9301      	str	r3, [sp, #4]
 8012348:	9b01      	ldr	r3, [sp, #4]
        HAL_DMA_Init(hdma);
 801234a:	4620      	mov	r0, r4
 801234c:	f7ff fab8 	bl	80118c0 <HAL_DMA_Init>
        dma_handle[stm32l4_resolve_dma_handle_idx(hdma)] = hdma;
 8012350:	4620      	mov	r0, r4
 8012352:	f7ff fd29 	bl	8011da8 <stm32l4_resolve_dma_handle_idx>
 8012356:	4b1d      	ldr	r3, [pc, #116]	; (80123cc <stm32l4_adc_dma_init+0xa8>)
 8012358:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
        NVIC_SetPriority(stm32l4_resolve_adc_dma_irq(hdma),
 801235c:	4620      	mov	r0, r4
 801235e:	f7ff fdf1 	bl	8011f44 <stm32l4_resolve_adc_dma_irq>
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8012362:	4b1b      	ldr	r3, [pc, #108]	; (80123d0 <stm32l4_adc_dma_init+0xac>)
 8012364:	68db      	ldr	r3, [r3, #12]
  if ((int32_t)(IRQn) >= 0)
 8012366:	2800      	cmp	r0, #0
 8012368:	db27      	blt.n	80123ba <stm32l4_adc_dma_init+0x96>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801236a:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 801236e:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8012372:	2300      	movs	r3, #0
 8012374:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
        NVIC_SetVector(stm32l4_resolve_adc_dma_irq(hdma),
 8012378:	4620      	mov	r0, r4
 801237a:	f7ff fde3 	bl	8011f44 <stm32l4_resolve_adc_dma_irq>
 801237e:	4605      	mov	r5, r0
 8012380:	4620      	mov	r0, r4
 8012382:	f7ff ff89 	bl	8012298 <stm32l4_resolve_adc_dma_irq_handler>
  uint32_t vectors = (uint32_t )SCB->VTOR;
 8012386:	4b12      	ldr	r3, [pc, #72]	; (80123d0 <stm32l4_adc_dma_init+0xac>)
 8012388:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 801238a:	3510      	adds	r5, #16
 801238c:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
        NVIC_EnableIRQ(stm32l4_resolve_adc_dma_irq(hdma));
 8012390:	4620      	mov	r0, r4
 8012392:	f7ff fdd7 	bl	8011f44 <stm32l4_resolve_adc_dma_irq>
  if ((int32_t)(IRQn) >= 0)
 8012396:	2800      	cmp	r0, #0
 8012398:	db07      	blt.n	80123aa <stm32l4_adc_dma_init+0x86>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801239a:	f000 021f 	and.w	r2, r0, #31
 801239e:	0940      	lsrs	r0, r0, #5
 80123a0:	2301      	movs	r3, #1
 80123a2:	4093      	lsls	r3, r2
 80123a4:	4a0b      	ldr	r2, [pc, #44]	; (80123d4 <stm32l4_adc_dma_init+0xb0>)
 80123a6:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
 80123aa:	b003      	add	sp, #12
 80123ac:	bd30      	pop	{r4, r5, pc}
    assert(hadc);
 80123ae:	2300      	movs	r3, #0
 80123b0:	461a      	mov	r2, r3
 80123b2:	4619      	mov	r1, r3
 80123b4:	4618      	mov	r0, r3
 80123b6:	f7fa f90d 	bl	800c5d4 <__assert_func>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80123ba:	f000 000f 	and.w	r0, r0, #15
 80123be:	4b06      	ldr	r3, [pc, #24]	; (80123d8 <stm32l4_adc_dma_init+0xb4>)
 80123c0:	2200      	movs	r2, #0
 80123c2:	541a      	strb	r2, [r3, r0]
 80123c4:	e7d8      	b.n	8012378 <stm32l4_adc_dma_init+0x54>
 80123c6:	bf00      	nop
 80123c8:	40021000 	.word	0x40021000
 80123cc:	20002eec 	.word	0x20002eec
 80123d0:	e000ed00 	.word	0xe000ed00
 80123d4:	e000e100 	.word	0xe000e100
 80123d8:	e000ed14 	.word	0xe000ed14

080123dc <stm32l4_adc_init>:
{
 80123dc:	b510      	push	{r4, lr}
    assert(dev);
 80123de:	b148      	cbz	r0, 80123f4 <stm32l4_adc_init+0x18>
    adc_config = (struct stm32l4_adc_dev_cfg *)dev->ad_dev.od_init_arg;
 80123e0:	6943      	ldr	r3, [r0, #20]
    hadc = adc_config->sac_adc_handle;
 80123e2:	695c      	ldr	r4, [r3, #20]
    stm32l4_adc_dma_init(hadc);
 80123e4:	4620      	mov	r0, r4
 80123e6:	f7ff ff9d 	bl	8012324 <stm32l4_adc_dma_init>
    if (HAL_ADC_Init(hadc) != HAL_OK) {
 80123ea:	4620      	mov	r0, r4
 80123ec:	f001 ffae 	bl	801434c <HAL_ADC_Init>
 80123f0:	b930      	cbnz	r0, 8012400 <stm32l4_adc_init+0x24>
}
 80123f2:	bd10      	pop	{r4, pc}
    assert(dev);
 80123f4:	2300      	movs	r3, #0
 80123f6:	461a      	mov	r2, r3
 80123f8:	4619      	mov	r1, r3
 80123fa:	4618      	mov	r0, r3
 80123fc:	f7fa f8ea 	bl	800c5d4 <__assert_func>
        assert(0);
 8012400:	2300      	movs	r3, #0
 8012402:	461a      	mov	r2, r3
 8012404:	4619      	mov	r1, r3
 8012406:	4618      	mov	r0, r3
 8012408:	f7fa f8e4 	bl	800c5d4 <__assert_func>

0801240c <stm32l4_adc_open>:
{
 801240c:	b538      	push	{r3, r4, r5, lr}
    assert(odev);
 801240e:	b1b0      	cbz	r0, 801243e <stm32l4_adc_open+0x32>
 8012410:	460d      	mov	r5, r1
 8012412:	4604      	mov	r4, r0
    if (os_started()) {
 8012414:	f7fa f99c 	bl	800c750 <os_started>
 8012418:	b9b8      	cbnz	r0, 801244a <stm32l4_adc_open+0x3e>
    if (odev->od_flags & OS_DEV_F_STATUS_OPEN) {
 801241a:	7ee3      	ldrb	r3, [r4, #27]
 801241c:	f013 0f02 	tst.w	r3, #2
 8012420:	d11b      	bne.n	801245a <stm32l4_adc_open+0x4e>
    stm32l4_adc_init(dev);
 8012422:	4620      	mov	r0, r4
 8012424:	f7ff ffda 	bl	80123dc <stm32l4_adc_init>
    cfg  = (struct stm32l4_adc_dev_cfg *)dev->ad_dev.od_init_arg;
 8012428:	6963      	ldr	r3, [r4, #20]
    hadc = cfg->sac_adc_handle;
 801242a:	695b      	ldr	r3, [r3, #20]
    hdma = hadc->DMA_Handle;
 801242c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
    if (hdma) {
 801242e:	b1d0      	cbz	r0, 8012466 <stm32l4_adc_open+0x5a>
        adc_dma[stm32l4_resolve_dma_handle_idx(hdma)] = dev;
 8012430:	f7ff fcba 	bl	8011da8 <stm32l4_resolve_dma_handle_idx>
 8012434:	4b0d      	ldr	r3, [pc, #52]	; (801246c <stm32l4_adc_open+0x60>)
 8012436:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
    return (OS_OK);
 801243a:	2000      	movs	r0, #0
}
 801243c:	bd38      	pop	{r3, r4, r5, pc}
    assert(odev);
 801243e:	2300      	movs	r3, #0
 8012440:	461a      	mov	r2, r3
 8012442:	4619      	mov	r1, r3
 8012444:	4618      	mov	r0, r3
 8012446:	f7fa f8c5 	bl	800c5d4 <__assert_func>
        rc = os_mutex_pend(&dev->ad_lock, wait);
 801244a:	4629      	mov	r1, r5
 801244c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8012450:	f7fb f830 	bl	800d4b4 <os_mutex_pend>
        if (rc != OS_OK) {
 8012454:	2800      	cmp	r0, #0
 8012456:	d0e0      	beq.n	801241a <stm32l4_adc_open+0xe>
err:
 8012458:	e7f0      	b.n	801243c <stm32l4_adc_open+0x30>
        os_mutex_release(&dev->ad_lock);
 801245a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 801245e:	f7fa ffcd 	bl	800d3fc <os_mutex_release>
        rc = OS_EBUSY;
 8012462:	200b      	movs	r0, #11
        goto err;
 8012464:	e7ea      	b.n	801243c <stm32l4_adc_open+0x30>
    return (OS_OK);
 8012466:	2000      	movs	r0, #0
 8012468:	e7e8      	b.n	801243c <stm32l4_adc_open+0x30>
 801246a:	bf00      	nop
 801246c:	20002ed8 	.word	0x20002ed8

08012470 <HAL_ADC_ErrorCallback>:
{
 8012470:	b508      	push	{r3, lr}
    assert(hadc);
 8012472:	b1a0      	cbz	r0, 801249e <HAL_ADC_ErrorCallback+0x2e>
    ++stm32l4_adc_stats.adc_error;
 8012474:	4a11      	ldr	r2, [pc, #68]	; (80124bc <HAL_ADC_ErrorCallback+0x4c>)
 8012476:	8853      	ldrh	r3, [r2, #2]
 8012478:	3301      	adds	r3, #1
 801247a:	8053      	strh	r3, [r2, #2]
    if (hadc->ErrorCode & HAL_ADC_ERROR_DMA) {
 801247c:	6d83      	ldr	r3, [r0, #88]	; 0x58
 801247e:	f013 0f04 	tst.w	r3, #4
 8012482:	d112      	bne.n	80124aa <HAL_ADC_ErrorCallback+0x3a>
    } else if (hadc->ErrorCode & HAL_ADC_ERROR_OVR) {
 8012484:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8012486:	f013 0f02 	tst.w	r3, #2
 801248a:	d112      	bne.n	80124b2 <HAL_ADC_ErrorCallback+0x42>
    } else if (hadc->ErrorCode & HAL_ADC_ERROR_INTERNAL) {
 801248c:	6d83      	ldr	r3, [r0, #88]	; 0x58
 801248e:	f013 0f01 	tst.w	r3, #1
 8012492:	d00d      	beq.n	80124b0 <HAL_ADC_ErrorCallback+0x40>
        ++stm32l4_adc_stats.adc_internal_error;
 8012494:	4a09      	ldr	r2, [pc, #36]	; (80124bc <HAL_ADC_ErrorCallback+0x4c>)
 8012496:	89d3      	ldrh	r3, [r2, #14]
 8012498:	3301      	adds	r3, #1
 801249a:	81d3      	strh	r3, [r2, #14]
}
 801249c:	e008      	b.n	80124b0 <HAL_ADC_ErrorCallback+0x40>
    assert(hadc);
 801249e:	2300      	movs	r3, #0
 80124a0:	461a      	mov	r2, r3
 80124a2:	4619      	mov	r1, r3
 80124a4:	4618      	mov	r0, r3
 80124a6:	f7fa f895 	bl	800c5d4 <__assert_func>
        ++stm32l4_adc_stats.adc_dma_xfer_failed;
 80124aa:	8893      	ldrh	r3, [r2, #4]
 80124ac:	3301      	adds	r3, #1
 80124ae:	8093      	strh	r3, [r2, #4]
}
 80124b0:	bd08      	pop	{r3, pc}
        ++stm32l4_adc_stats.adc_dma_overrun;
 80124b2:	4a02      	ldr	r2, [pc, #8]	; (80124bc <HAL_ADC_ErrorCallback+0x4c>)
 80124b4:	8993      	ldrh	r3, [r2, #12]
 80124b6:	3301      	adds	r3, #1
 80124b8:	8193      	strh	r3, [r2, #12]
 80124ba:	e7f9      	b.n	80124b0 <HAL_ADC_ErrorCallback+0x40>
 80124bc:	20002f00 	.word	0x20002f00

080124c0 <HAL_ADC_ConvCpltCallback>:
{
 80124c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80124c2:	b083      	sub	sp, #12
    assert(hadc);
 80124c4:	2800      	cmp	r0, #0
 80124c6:	d02a      	beq.n	801251e <HAL_ADC_ConvCpltCallback+0x5e>
 80124c8:	4606      	mov	r6, r0
    hdma = hadc->DMA_Handle;
 80124ca:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
    assert(hdma);
 80124cc:	2800      	cmp	r0, #0
 80124ce:	d02c      	beq.n	801252a <HAL_ADC_ConvCpltCallback+0x6a>
    ++stm32l4_adc_stats.adc_dma_xfer_complete;
 80124d0:	4a19      	ldr	r2, [pc, #100]	; (8012538 <HAL_ADC_ConvCpltCallback+0x78>)
 80124d2:	8913      	ldrh	r3, [r2, #8]
 80124d4:	3301      	adds	r3, #1
 80124d6:	8113      	strh	r3, [r2, #8]
    adc = adc_dma[stm32l4_resolve_dma_handle_idx(hdma)];
 80124d8:	f7ff fc66 	bl	8011da8 <stm32l4_resolve_dma_handle_idx>
 80124dc:	4b17      	ldr	r3, [pc, #92]	; (801253c <HAL_ADC_ConvCpltCallback+0x7c>)
 80124de:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
    cfg  = (struct stm32l4_adc_dev_cfg *)adc->ad_dev.od_init_arg;
 80124e2:	696c      	ldr	r4, [r5, #20]
    buf = cfg->primarybuf;
 80124e4:	68a7      	ldr	r7, [r4, #8]
    if (cfg->secondarybuf) {
 80124e6:	68e1      	ldr	r1, [r4, #12]
 80124e8:	b151      	cbz	r1, 8012500 <HAL_ADC_ConvCpltCallback+0x40>
        cfg->primarybuf = cfg->secondarybuf;
 80124ea:	60a1      	str	r1, [r4, #8]
        cfg->secondarybuf = buf;
 80124ec:	60e7      	str	r7, [r4, #12]
        if (HAL_ADC_Start_DMA(hadc, cfg->primarybuf, cfg->buflen) != HAL_OK) {
 80124ee:	6922      	ldr	r2, [r4, #16]
 80124f0:	4630      	mov	r0, r6
 80124f2:	f002 fca7 	bl	8014e44 <HAL_ADC_Start_DMA>
 80124f6:	b118      	cbz	r0, 8012500 <HAL_ADC_ConvCpltCallback+0x40>
            ++stm32l4_adc_stats.adc_dma_start_error;
 80124f8:	4a0f      	ldr	r2, [pc, #60]	; (8012538 <HAL_ADC_ConvCpltCallback+0x78>)
 80124fa:	8953      	ldrh	r3, [r2, #10]
 80124fc:	3301      	adds	r3, #1
 80124fe:	8153      	strh	r3, [r2, #10]
    rc = adc->ad_event_handler_func(adc, NULL, ADC_EVENT_RESULT, buf,
 8012500:	6c2e      	ldr	r6, [r5, #64]	; 0x40
 8012502:	6923      	ldr	r3, [r4, #16]
 8012504:	9300      	str	r3, [sp, #0]
 8012506:	463b      	mov	r3, r7
 8012508:	2200      	movs	r2, #0
 801250a:	4611      	mov	r1, r2
 801250c:	4628      	mov	r0, r5
 801250e:	47b0      	blx	r6
    if (rc) {
 8012510:	b118      	cbz	r0, 801251a <HAL_ADC_ConvCpltCallback+0x5a>
        ++stm32l4_adc_stats.adc_error;
 8012512:	4a09      	ldr	r2, [pc, #36]	; (8012538 <HAL_ADC_ConvCpltCallback+0x78>)
 8012514:	8853      	ldrh	r3, [r2, #2]
 8012516:	3301      	adds	r3, #1
 8012518:	8053      	strh	r3, [r2, #2]
}
 801251a:	b003      	add	sp, #12
 801251c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert(hadc);
 801251e:	2300      	movs	r3, #0
 8012520:	461a      	mov	r2, r3
 8012522:	4619      	mov	r1, r3
 8012524:	4618      	mov	r0, r3
 8012526:	f7fa f855 	bl	800c5d4 <__assert_func>
    assert(hdma);
 801252a:	2300      	movs	r3, #0
 801252c:	461a      	mov	r2, r3
 801252e:	4619      	mov	r1, r3
 8012530:	4618      	mov	r0, r3
 8012532:	f7fa f84f 	bl	800c5d4 <__assert_func>
 8012536:	bf00      	nop
 8012538:	20002f00 	.word	0x20002f00
 801253c:	20002ed8 	.word	0x20002ed8

08012540 <stm32l4_adc_dev_init>:
 * @param2 stm32l4 ADC device cfg ptr
 * @return OS_OK on success
 */
int
stm32l4_adc_dev_init(struct os_dev *odev, void *arg)
{
 8012540:	b538      	push	{r3, r4, r5, lr}
    struct stm32l4_adc_dev_cfg *sac;
    struct adc_dev *dev;

    sac = (struct stm32l4_adc_dev_cfg *) arg;

    assert(sac != NULL);
 8012542:	b181      	cbz	r1, 8012566 <stm32l4_adc_dev_init+0x26>
 8012544:	4604      	mov	r4, r0
 8012546:	460d      	mov	r5, r1

    dev = (struct adc_dev *)odev;

    os_mutex_init(&dev->ad_lock);
 8012548:	3024      	adds	r0, #36	; 0x24
 801254a:	f7fa ff4d 	bl	800d3e8 <os_mutex_init>

    dev->ad_chans = (void *) sac->sac_chans;
 801254e:	686b      	ldr	r3, [r5, #4]
 8012550:	6363      	str	r3, [r4, #52]	; 0x34
    dev->ad_chan_count = sac->sac_chan_count;
 8012552:	782b      	ldrb	r3, [r5, #0]
 8012554:	63a3      	str	r3, [r4, #56]	; 0x38

    OS_DEV_SETHANDLERS(odev, stm32l4_adc_open, stm32l4_adc_close);
 8012556:	4b07      	ldr	r3, [pc, #28]	; (8012574 <stm32l4_adc_dev_init+0x34>)
 8012558:	6023      	str	r3, [r4, #0]
 801255a:	4b07      	ldr	r3, [pc, #28]	; (8012578 <stm32l4_adc_dev_init+0x38>)
 801255c:	60e3      	str	r3, [r4, #12]

    dev->ad_funcs = &stm32l4_adc_funcs;
 801255e:	4b07      	ldr	r3, [pc, #28]	; (801257c <stm32l4_adc_dev_init+0x3c>)
 8012560:	6323      	str	r3, [r4, #48]	; 0x30

    return (OS_OK);
}
 8012562:	2000      	movs	r0, #0
 8012564:	bd38      	pop	{r3, r4, r5, pc}
    assert(sac != NULL);
 8012566:	2300      	movs	r3, #0
 8012568:	461a      	mov	r2, r3
 801256a:	4619      	mov	r1, r3
 801256c:	4618      	mov	r0, r3
 801256e:	f7fa f831 	bl	800c5d4 <__assert_func>
 8012572:	bf00      	nop
 8012574:	0801240d 	.word	0x0801240d
 8012578:	0801227d 	.word	0x0801227d
 801257c:	08018580 	.word	0x08018580

08012580 <_ZL13config_devicev>:
    rc = config_device();
    assert(rc == 0);
}

//  Device configuration
static int config_device(void) {
 8012580:	b530      	push	{r4, r5, lr}
 8012582:	b085      	sub	sp, #20
    int rc;
    struct os_dev *dev;
    struct DEVICE_CFG cfg;

    //  Fetch the device.
    dev = (struct os_dev *) os_dev_open(DEVICE_NAME, OS_TIMEOUT_NEVER, NULL);
 8012584:	2200      	movs	r2, #0
 8012586:	f04f 31ff 	mov.w	r1, #4294967295
 801258a:	4810      	ldr	r0, [pc, #64]	; (80125cc <_ZL13config_devicev+0x4c>)
 801258c:	f7fa faf4 	bl	800cb78 <os_dev_open>
    assert(dev != NULL);
 8012590:	b178      	cbz	r0, 80125b2 <_ZL13config_devicev+0x32>
 8012592:	4604      	mov	r4, r0

    //  Get the default config for the device.
    rc = DEVICE_CFG_DEFAULT(&cfg);
 8012594:	4668      	mov	r0, sp
 8012596:	f000 fbff 	bl	8012d98 <bc95g_default_cfg>
    assert(rc == 0);
 801259a:	b980      	cbnz	r0, 80125be <_ZL13config_devicev+0x3e>

    //  Copy the default config into the device.
    rc = DEVICE_CFG_FUNC((struct DEVICE_DEV *)dev, &cfg);
 801259c:	4669      	mov	r1, sp
 801259e:	4620      	mov	r0, r4
 80125a0:	f000 fc02 	bl	8012da8 <bc95g_config>
 80125a4:	4605      	mov	r5, r0
    os_dev_close(dev);
 80125a6:	4620      	mov	r0, r4
 80125a8:	f7fa fb08 	bl	800cbbc <os_dev_close>
    return rc;
}
 80125ac:	4628      	mov	r0, r5
 80125ae:	b005      	add	sp, #20
 80125b0:	bd30      	pop	{r4, r5, pc}
    assert(dev != NULL);
 80125b2:	2300      	movs	r3, #0
 80125b4:	461a      	mov	r2, r3
 80125b6:	4619      	mov	r1, r3
 80125b8:	4618      	mov	r0, r3
 80125ba:	f7fa f80b 	bl	800c5d4 <__assert_func>
    assert(rc == 0);
 80125be:	2300      	movs	r3, #0
 80125c0:	461a      	mov	r2, r3
 80125c2:	4619      	mov	r1, r3
 80125c4:	4618      	mov	r0, r3
 80125c6:	f7fa f805 	bl	800c5d4 <__assert_func>
 80125ca:	bf00      	nop
 80125cc:	0801859c 	.word	0x0801859c

080125d0 <bc95g_create>:
void DEVICE_CREATE(void) {
 80125d0:	b500      	push	{lr}
 80125d2:	b083      	sub	sp, #12
    console_printf("%screate " DEVICE_NAME "\n", _nbt);
 80125d4:	4b10      	ldr	r3, [pc, #64]	; (8012618 <bc95g_create+0x48>)
 80125d6:	6819      	ldr	r1, [r3, #0]
 80125d8:	4810      	ldr	r0, [pc, #64]	; (801261c <bc95g_create+0x4c>)
 80125da:	f7f8 f807 	bl	800a5ec <console_printf>
        DEVICE_INIT, (void *) &DEVICE_ITF);
 80125de:	4b10      	ldr	r3, [pc, #64]	; (8012620 <bc95g_create+0x50>)
 80125e0:	9301      	str	r3, [sp, #4]
 80125e2:	4b10      	ldr	r3, [pc, #64]	; (8012624 <bc95g_create+0x54>)
 80125e4:	9300      	str	r3, [sp, #0]
 80125e6:	2300      	movs	r3, #0
 80125e8:	2201      	movs	r2, #1
 80125ea:	490f      	ldr	r1, [pc, #60]	; (8012628 <bc95g_create+0x58>)
 80125ec:	480f      	ldr	r0, [pc, #60]	; (801262c <bc95g_create+0x5c>)
 80125ee:	f7fa fa7d 	bl	800caec <os_dev_create>
    assert(rc == 0);
 80125f2:	b928      	cbnz	r0, 8012600 <bc95g_create+0x30>
    rc = config_device();
 80125f4:	f7ff ffc4 	bl	8012580 <_ZL13config_devicev>
    assert(rc == 0);
 80125f8:	b940      	cbnz	r0, 801260c <bc95g_create+0x3c>
}
 80125fa:	b003      	add	sp, #12
 80125fc:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
 8012600:	2300      	movs	r3, #0
 8012602:	461a      	mov	r2, r3
 8012604:	4619      	mov	r1, r3
 8012606:	4618      	mov	r0, r3
 8012608:	f7f9 ffe4 	bl	800c5d4 <__assert_func>
    assert(rc == 0);
 801260c:	2300      	movs	r3, #0
 801260e:	461a      	mov	r2, r3
 8012610:	4619      	mov	r1, r3
 8012612:	4618      	mov	r0, r3
 8012614:	f7f9 ffde 	bl	800c5d4 <__assert_func>
 8012618:	20000344 	.word	0x20000344
 801261c:	080185a4 	.word	0x080185a4
 8012620:	2000032c 	.word	0x2000032c
 8012624:	08012d59 	.word	0x08012d59
 8012628:	0801859c 	.word	0x0801859c
 801262c:	20002f10 	.word	0x20002f10

08012630 <_ZL16internal_timeoutm>:
    * Allows timeout to be changed between commands
    *
    * @param timeout timeout of the connection
    */
    void setTimeout(int timeout) {
        _timeout = timeout;
 8012630:	4b01      	ldr	r3, [pc, #4]	; (8012638 <_ZL16internal_timeoutm+0x8>)
 8012632:	60d8      	str	r0, [r3, #12]
}

/// Set the response timeout
static void internal_timeout(uint32_t timeout_ms) {
    parser.setTimeout(timeout_ms);
}
 8012634:	4770      	bx	lr
 8012636:	bf00      	nop
 8012638:	200034cc 	.word	0x200034cc

0801263c <_ZL3cfgP5bc95g>:

/////////////////////////////////////////////////////////
//  Device Creation Functions

/// Return the BC95G Config
static bc95g_cfg *cfg(struct bc95g *dev) { return &dev->cfg; }
 801263c:	3024      	adds	r0, #36	; 0x24
 801263e:	4770      	bx	lr

08012640 <_ZL11bc95g_eventPv>:
        if (_cbs[i].callback) {
            _cbs[i].callback(_cbs[i].data);
        }
    }
#endif  //  TODO
}
 8012640:	4770      	bx	lr

08012642 <_ZL13nibble_to_hexh>:

/// Given n=0..15, return '0'..'f'.
static char nibble_to_hex(uint8_t n) {
    return (n < 10)
        ? '0' + n
        : 'a' + n - 10;
 8012642:	2809      	cmp	r0, #9
 8012644:	d902      	bls.n	801264c <_ZL13nibble_to_hexh+0xa>
 8012646:	3057      	adds	r0, #87	; 0x57
 8012648:	b2c0      	uxtb	r0, r0
}
 801264a:	4770      	bx	lr
        : 'a' + n - 10;
 801264c:	3030      	adds	r0, #48	; 0x30
 801264e:	b2c0      	uxtb	r0, r0
 8012650:	4770      	bx	lr
	...

08012654 <_ZL11get_commandP5bc95g9CommandId>:
static const char *get_command(struct bc95g *dev, enum CommandId id) {
 8012654:	b508      	push	{r3, lr}
    assert(id < (sizeof(COMMANDS) / sizeof(COMMANDS[0])));  //  Invalid id
 8012656:	2910      	cmp	r1, #16
 8012658:	d805      	bhi.n	8012666 <_ZL11get_commandP5bc95g9CommandId+0x12>
    const char *cmd = COMMANDS[id];
 801265a:	4b06      	ldr	r3, [pc, #24]	; (8012674 <_ZL11get_commandP5bc95g9CommandId+0x20>)
 801265c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    dev->last_error = id;  //  Set command ID as the last error.
 8012660:	6341      	str	r1, [r0, #52]	; 0x34
}
 8012662:	4618      	mov	r0, r3
 8012664:	bd08      	pop	{r3, pc}
    assert(id < (sizeof(COMMANDS) / sizeof(COMMANDS[0])));  //  Invalid id
 8012666:	2300      	movs	r3, #0
 8012668:	461a      	mov	r2, r3
 801266a:	4619      	mov	r1, r3
 801266c:	4618      	mov	r0, r3
 801266e:	f7f9 ffb1 	bl	800c5d4 <__assert_func>
 8012672:	bf00      	nop
 8012674:	08018640 	.word	0x08018640

08012678 <_ZL18register_transportPKcPvS0_th>:
static int register_transport(const char *network_device, void *server_endpoint, const char *host, uint16_t port, uint8_t server_endpoint_size) {
 8012678:	b510      	push	{r4, lr}
    assert(server_endpoint_size >= sizeof(struct bc95g_server));  //  Server Endpoint too small
 801267a:	f89d 4008 	ldrb.w	r4, [sp, #8]
 801267e:	2c0f      	cmp	r4, #15
 8012680:	d902      	bls.n	8012688 <_ZL18register_transportPKcPvS0_th+0x10>
    int rc = bc95g_register_transport(network_device, (struct bc95g_server *) server_endpoint, host, port);
 8012682:	f000 fd3f 	bl	8013104 <bc95g_register_transport>
}
 8012686:	bd10      	pop	{r4, pc}
    assert(server_endpoint_size >= sizeof(struct bc95g_server));  //  Server Endpoint too small
 8012688:	2300      	movs	r3, #0
 801268a:	461a      	mov	r2, r3
 801268c:	4619      	mov	r1, r3
 801268e:	4618      	mov	r0, r3
 8012690:	f7f9 ffa0 	bl	800c5d4 <__assert_func>

08012694 <_ZL11bc95g_closeP6os_dev>:
static int bc95g_close(struct os_dev *dev0) {
 8012694:	b510      	push	{r4, lr}
 8012696:	4604      	mov	r4, r0
    console_printf("]\n");  console_flush();  ////
 8012698:	4806      	ldr	r0, [pc, #24]	; (80126b4 <_ZL11bc95g_closeP6os_dev+0x20>)
 801269a:	f7f7 ffa7 	bl	800a5ec <console_printf>
 801269e:	f7f7 fe95 	bl	800a3cc <console_flush>
    assert(dev0);
 80126a2:	b10c      	cbz	r4, 80126a8 <_ZL11bc95g_closeP6os_dev+0x14>
}
 80126a4:	2000      	movs	r0, #0
 80126a6:	bd10      	pop	{r4, pc}
    assert(dev0);
 80126a8:	2300      	movs	r3, #0
 80126aa:	461a      	mov	r2, r3
 80126ac:	4619      	mov	r1, r3
 80126ae:	4618      	mov	r0, r3
 80126b0:	f7f9 ff90 	bl	800c5d4 <__assert_func>
 80126b4:	0801829c 	.word	0x0801829c

080126b8 <_ZL13internal_initPcmS_mS_mb>:
    char *parserbuf, uint32_t parserbuf_size, bool debug) {
 80126b8:	b570      	push	{r4, r5, r6, lr}
 80126ba:	b084      	sub	sp, #16
    serial.init(txbuf, txbuf_size, rxbuf, rxbuf_size);
 80126bc:	4c11      	ldr	r4, [pc, #68]	; (8012704 <_ZL13internal_initPcmS_mS_mb+0x4c>)
 80126be:	2500      	movs	r5, #0
 80126c0:	9501      	str	r5, [sp, #4]
 80126c2:	9300      	str	r3, [sp, #0]
 80126c4:	4613      	mov	r3, r2
 80126c6:	460a      	mov	r2, r1
 80126c8:	4601      	mov	r1, r0
 80126ca:	4620      	mov	r0, r4
 80126cc:	f000 ff74 	bl	80135b8 <_ZN14BufferedSerial4initEPcmS0_mPKc>
    parser.init(serial, parserbuf, parserbuf_size);
 80126d0:	4e0d      	ldr	r6, [pc, #52]	; (8012708 <_ZL13internal_initPcmS_mS_mb+0x50>)
 80126d2:	9502      	str	r5, [sp, #8]
 80126d4:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 80126d8:	9301      	str	r3, [sp, #4]
 80126da:	4b0c      	ldr	r3, [pc, #48]	; (801270c <_ZL13internal_initPcmS_mS_mb+0x54>)
 80126dc:	9300      	str	r3, [sp, #0]
 80126de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80126e0:	9a08      	ldr	r2, [sp, #32]
 80126e2:	4621      	mov	r1, r4
 80126e4:	4630      	mov	r0, r6
 80126e6:	f000 fd89 	bl	80131fc <_ZN8ATParser4initER14BufferedSerialPciPKcib>
    packets = 0;
 80126ea:	4b09      	ldr	r3, [pc, #36]	; (8012710 <_ZL13internal_initPcmS_mS_mb+0x58>)
 80126ec:	601d      	str	r5, [r3, #0]
    serial.baud(9600);  //  TODO: Increase the bitrate
 80126ee:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80126f2:	4620      	mov	r0, r4
 80126f4:	f001 f85a 	bl	80137ac <_ZN14BufferedSerial4baudEm>
    * Allows echo to be on or off
    *
    * @param echo 1 for echo and 0 turns it off
    */
    void debugOn(uint8_t on) {
        dbg_on = (on) ? 1 : 0;
 80126f8:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 80126fc:	7633      	strb	r3, [r6, #24]
}
 80126fe:	b004      	add	sp, #16
 8012700:	bd70      	pop	{r4, r5, r6, pc}
 8012702:	bf00      	nop
 8012704:	20003508 	.word	0x20003508
 8012708:	200034cc 	.word	0x200034cc
 801270c:	080182ac 	.word	0x080182ac
 8012710:	20003554 	.word	0x20003554

08012714 <_ZL18internal_configurei>:
static void internal_configure(int uart) {
 8012714:	b508      	push	{r3, lr}
    serial.configure(uart);
 8012716:	4601      	mov	r1, r0
 8012718:	4801      	ldr	r0, [pc, #4]	; (8012720 <_ZL18internal_configurei+0xc>)
 801271a:	f000 ff6d 	bl	80135f8 <_ZN14BufferedSerial9configureEi>
}
 801271e:	bd08      	pop	{r3, pc}
 8012720:	20003508 	.word	0x20003508

08012724 <_ZL15internal_attachPFvPvES_>:
static void internal_attach(void (*func)(void *), void *arg) {
 8012724:	b508      	push	{r3, lr}
    serial.attach(func, arg);
 8012726:	2300      	movs	r3, #0
 8012728:	460a      	mov	r2, r1
 801272a:	4601      	mov	r1, r0
 801272c:	4801      	ldr	r0, [pc, #4]	; (8012734 <_ZL15internal_attachPFvPvES_+0x10>)
 801272e:	f001 f830 	bl	8013792 <_ZN14BufferedSerial6attachEPFvPvES0_i>
}
 8012732:	bd08      	pop	{r3, pc}
 8012734:	20003508 	.word	0x20003508

08012738 <_ZL10bc95g_openP6os_devmPv>:
static int bc95g_open(struct os_dev *dev0, uint32_t timeout, void *arg) {
 8012738:	b510      	push	{r4, lr}
 801273a:	b084      	sub	sp, #16
    if (!first_open) { console_printf("[\n"); return 0; }  ////
 801273c:	4b17      	ldr	r3, [pc, #92]	; (801279c <_ZL10bc95g_openP6os_devmPv+0x64>)
 801273e:	781b      	ldrb	r3, [r3, #0]
 8012740:	b30b      	cbz	r3, 8012786 <_ZL10bc95g_openP6os_devmPv+0x4e>
 8012742:	4604      	mov	r4, r0
    first_open = false;
 8012744:	4b15      	ldr	r3, [pc, #84]	; (801279c <_ZL10bc95g_openP6os_devmPv+0x64>)
 8012746:	2200      	movs	r2, #0
 8012748:	701a      	strb	r2, [r3, #0]
    console_printf("[\n");  ////
 801274a:	4815      	ldr	r0, [pc, #84]	; (80127a0 <_ZL10bc95g_openP6os_devmPv+0x68>)
 801274c:	f7f7 ff4e 	bl	800a5ec <console_printf>
    assert(dev0);
 8012750:	b1ec      	cbz	r4, 801278e <_ZL10bc95g_openP6os_devmPv+0x56>
    memset(cfg->sockets, 0, sizeof(cfg->sockets));
 8012752:	2300      	movs	r3, #0
 8012754:	62a3      	str	r3, [r4, #40]	; 0x28
 8012756:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012758:	6323      	str	r3, [r4, #48]	; 0x30
    internal_init(
 801275a:	9302      	str	r3, [sp, #8]
 801275c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012760:	9301      	str	r3, [sp, #4]
 8012762:	4a10      	ldr	r2, [pc, #64]	; (80127a4 <_ZL10bc95g_openP6os_devmPv+0x6c>)
 8012764:	9200      	str	r2, [sp, #0]
 8012766:	4a10      	ldr	r2, [pc, #64]	; (80127a8 <_ZL10bc95g_openP6os_devmPv+0x70>)
 8012768:	f44f 7161 	mov.w	r1, #900	; 0x384
 801276c:	480f      	ldr	r0, [pc, #60]	; (80127ac <_ZL10bc95g_openP6os_devmPv+0x74>)
 801276e:	f7ff ffa3 	bl	80126b8 <_ZL13internal_initPcmS_mS_mb>
    internal_configure(cfg->uart);         //  Configure the UART port.  0 means UART2, 1 means UART1.
 8012772:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8012774:	f7ff ffce 	bl	8012714 <_ZL18internal_configurei>
    internal_attach(&bc95g_event, dev);    //  Set the callback for BC95G events.
 8012778:	4621      	mov	r1, r4
 801277a:	480d      	ldr	r0, [pc, #52]	; (80127b0 <_ZL10bc95g_openP6os_devmPv+0x78>)
 801277c:	f7ff ffd2 	bl	8012724 <_ZL15internal_attachPFvPvES_>
}
 8012780:	2000      	movs	r0, #0
 8012782:	b004      	add	sp, #16
 8012784:	bd10      	pop	{r4, pc}
    if (!first_open) { console_printf("[\n"); return 0; }  ////
 8012786:	4806      	ldr	r0, [pc, #24]	; (80127a0 <_ZL10bc95g_openP6os_devmPv+0x68>)
 8012788:	f7f7 ff30 	bl	800a5ec <console_printf>
 801278c:	e7f8      	b.n	8012780 <_ZL10bc95g_openP6os_devmPv+0x48>
    assert(dev0);
 801278e:	2300      	movs	r3, #0
 8012790:	461a      	mov	r2, r3
 8012792:	4619      	mov	r1, r3
 8012794:	4618      	mov	r0, r3
 8012796:	f7f9 ff1d 	bl	800c5d4 <__assert_func>
 801279a:	bf00      	nop
 801279c:	20000340 	.word	0x20000340
 80127a0:	08018298 	.word	0x08018298
 80127a4:	200033cc 	.word	0x200033cc
 80127a8:	20002f48 	.word	0x20002f48
 80127ac:	20003048 	.word	0x20003048
 80127b0:	08012641 	.word	0x08012641

080127b4 <_ZL9expect_okP5bc95g>:
static bool expect_ok(struct bc95g *dev) {
 80127b4:	b508      	push	{r3, lr}
    return parser.recv("OK");
 80127b6:	4902      	ldr	r1, [pc, #8]	; (80127c0 <_ZL9expect_okP5bc95g+0xc>)
 80127b8:	4802      	ldr	r0, [pc, #8]	; (80127c4 <_ZL9expect_okP5bc95g+0x10>)
 80127ba:	f000 fec5 	bl	8013548 <_ZN8ATParser4recvEPKcz>
}
 80127be:	bd08      	pop	{r3, pc}
 80127c0:	08018684 	.word	0x08018684
 80127c4:	200034cc 	.word	0x200034cc

080127c8 <_ZL5sleept>:
static bool sleep(uint16_t seconds) {
 80127c8:	b508      	push	{r3, lr}
    os_time_delay(seconds * OS_TICKS_PER_SEC);
 80127ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80127ce:	fb03 f000 	mul.w	r0, r3, r0
 80127d2:	f7fb fa21 	bl	800dc18 <os_time_delay>
}
 80127d6:	2001      	movs	r0, #1
 80127d8:	bd08      	pop	{r3, pc}
	...

080127dc <_ZL11wait_for_okP5bc95g>:
static bool wait_for_ok(struct bc95g *dev) {
 80127dc:	b538      	push	{r3, r4, r5, lr}
        parser.send("AT") &&
 80127de:	491f      	ldr	r1, [pc, #124]	; (801285c <_ZL11wait_for_okP5bc95g+0x80>)
 80127e0:	481f      	ldr	r0, [pc, #124]	; (8012860 <_ZL11wait_for_okP5bc95g+0x84>)
 80127e2:	f000 fea3 	bl	801352c <_ZN8ATParser4sendEPKcz>
 80127e6:	b128      	cbz	r0, 80127f4 <_ZL11wait_for_okP5bc95g+0x18>
        parser.recv("OK")
 80127e8:	491e      	ldr	r1, [pc, #120]	; (8012864 <_ZL11wait_for_okP5bc95g+0x88>)
 80127ea:	481d      	ldr	r0, [pc, #116]	; (8012860 <_ZL11wait_for_okP5bc95g+0x84>)
 80127ec:	f000 feac 	bl	8013548 <_ZN8ATParser4recvEPKcz>
        parser.send("AT") &&
 80127f0:	4605      	mov	r5, r0
 80127f2:	b930      	cbnz	r0, 8012802 <_ZL11wait_for_okP5bc95g+0x26>
        parser.send("\r\nAT") &&
 80127f4:	491c      	ldr	r1, [pc, #112]	; (8012868 <_ZL11wait_for_okP5bc95g+0x8c>)
 80127f6:	481a      	ldr	r0, [pc, #104]	; (8012860 <_ZL11wait_for_okP5bc95g+0x84>)
 80127f8:	f000 fe98 	bl	801352c <_ZN8ATParser4sendEPKcz>
 80127fc:	b928      	cbnz	r0, 801280a <_ZL11wait_for_okP5bc95g+0x2e>
static bool wait_for_ok(struct bc95g *dev) {
 80127fe:	2400      	movs	r4, #0
 8012800:	e015      	b.n	801282e <_ZL11wait_for_okP5bc95g+0x52>
    if (res) { parser.flush(); return true; }
 8012802:	4817      	ldr	r0, [pc, #92]	; (8012860 <_ZL11wait_for_okP5bc95g+0x84>)
 8012804:	f000 fd1e 	bl	8013244 <_ZN8ATParser5flushEv>
 8012808:	e025      	b.n	8012856 <_ZL11wait_for_okP5bc95g+0x7a>
        parser.recv("OK")
 801280a:	4916      	ldr	r1, [pc, #88]	; (8012864 <_ZL11wait_for_okP5bc95g+0x88>)
 801280c:	4814      	ldr	r0, [pc, #80]	; (8012860 <_ZL11wait_for_okP5bc95g+0x84>)
 801280e:	f000 fe9b 	bl	8013548 <_ZN8ATParser4recvEPKcz>
        parser.send("\r\nAT") &&
 8012812:	4605      	mov	r5, r0
 8012814:	2800      	cmp	r0, #0
 8012816:	d0f2      	beq.n	80127fe <_ZL11wait_for_okP5bc95g+0x22>
    if (res) { parser.flush(); return true; }
 8012818:	4811      	ldr	r0, [pc, #68]	; (8012860 <_ZL11wait_for_okP5bc95g+0x84>)
 801281a:	f000 fd13 	bl	8013244 <_ZN8ATParser5flushEv>
 801281e:	e01a      	b.n	8012856 <_ZL11wait_for_okP5bc95g+0x7a>
        console_flush();
 8012820:	f7f7 fdd4 	bl	800a3cc <console_flush>
        sleep(1);
 8012824:	2001      	movs	r0, #1
 8012826:	f7ff ffcf 	bl	80127c8 <_ZL5sleept>
    for (uint8_t i = 0; i < 20; i++) {
 801282a:	3401      	adds	r4, #1
 801282c:	b2e4      	uxtb	r4, r4
 801282e:	2c13      	cmp	r4, #19
 8012830:	d810      	bhi.n	8012854 <_ZL11wait_for_okP5bc95g+0x78>
            parser.send("AT") &&
 8012832:	490a      	ldr	r1, [pc, #40]	; (801285c <_ZL11wait_for_okP5bc95g+0x80>)
 8012834:	480a      	ldr	r0, [pc, #40]	; (8012860 <_ZL11wait_for_okP5bc95g+0x84>)
 8012836:	f000 fe79 	bl	801352c <_ZN8ATParser4sendEPKcz>
 801283a:	2800      	cmp	r0, #0
 801283c:	d0f0      	beq.n	8012820 <_ZL11wait_for_okP5bc95g+0x44>
            parser.recv("OK")
 801283e:	4909      	ldr	r1, [pc, #36]	; (8012864 <_ZL11wait_for_okP5bc95g+0x88>)
 8012840:	4807      	ldr	r0, [pc, #28]	; (8012860 <_ZL11wait_for_okP5bc95g+0x84>)
 8012842:	f000 fe81 	bl	8013548 <_ZN8ATParser4recvEPKcz>
            parser.send("AT") &&
 8012846:	4605      	mov	r5, r0
 8012848:	2800      	cmp	r0, #0
 801284a:	d0e9      	beq.n	8012820 <_ZL11wait_for_okP5bc95g+0x44>
        if (res) { parser.flush(); return true; }        
 801284c:	4804      	ldr	r0, [pc, #16]	; (8012860 <_ZL11wait_for_okP5bc95g+0x84>)
 801284e:	f000 fcf9 	bl	8013244 <_ZN8ATParser5flushEv>
 8012852:	e000      	b.n	8012856 <_ZL11wait_for_okP5bc95g+0x7a>
    return false;  //  Can't get OK after 20 retries, quit.
 8012854:	2500      	movs	r5, #0
}
 8012856:	4628      	mov	r0, r5
 8012858:	bd38      	pop	{r3, r4, r5, pc}
 801285a:	bf00      	nop
 801285c:	080185d4 	.word	0x080185d4
 8012860:	200034cc 	.word	0x200034cc
 8012864:	08018684 	.word	0x08018684
 8012868:	080185d8 	.word	0x080185d8

0801286c <_ZL8send_atpP5bc95g>:
static bool send_atp(struct bc95g *dev) {
 801286c:	b508      	push	{r3, lr}
    return parser.write(ATP, sizeof(ATP) - 1) > 0;
 801286e:	2203      	movs	r2, #3
 8012870:	4904      	ldr	r1, [pc, #16]	; (8012884 <_ZL8send_atpP5bc95g+0x18>)
 8012872:	4805      	ldr	r0, [pc, #20]	; (8012888 <_ZL8send_atpP5bc95g+0x1c>)
 8012874:	f000 fcf3 	bl	801325e <_ZN8ATParser5writeEPKci>
}
 8012878:	2800      	cmp	r0, #0
 801287a:	bfd4      	ite	le
 801287c:	2000      	movle	r0, #0
 801287e:	2001      	movgt	r0, #1
 8012880:	bd08      	pop	{r3, pc}
 8012882:	bf00      	nop
 8012884:	0801863c 	.word	0x0801863c
 8012888:	200034cc 	.word	0x200034cc

0801288c <_ZL12send_commandP5bc95g9CommandId>:
static bool send_command(struct bc95g *dev, enum CommandId id) {
 801288c:	b570      	push	{r4, r5, r6, lr}
 801288e:	4605      	mov	r5, r0
    const char *cmd = get_command(dev, id);
 8012890:	f7ff fee0 	bl	8012654 <_ZL11get_commandP5bc95g9CommandId>
 8012894:	4606      	mov	r6, r0
        send_atp(dev) &&
 8012896:	4628      	mov	r0, r5
 8012898:	f7ff ffe8 	bl	801286c <_ZL8send_atpP5bc95g>
        parser.send(cmd) &&
 801289c:	4604      	mov	r4, r0
 801289e:	b918      	cbnz	r0, 80128a8 <_ZL12send_commandP5bc95g9CommandId+0x1c>
    console_flush();
 80128a0:	f7f7 fd94 	bl	800a3cc <console_flush>
}
 80128a4:	4620      	mov	r0, r4
 80128a6:	bd70      	pop	{r4, r5, r6, pc}
        parser.send(cmd) &&
 80128a8:	4631      	mov	r1, r6
 80128aa:	4805      	ldr	r0, [pc, #20]	; (80128c0 <_ZL12send_commandP5bc95g9CommandId+0x34>)
 80128ac:	f000 fe3e 	bl	801352c <_ZN8ATParser4sendEPKcz>
        send_atp(dev) &&
 80128b0:	4604      	mov	r4, r0
 80128b2:	2800      	cmp	r0, #0
 80128b4:	d0f4      	beq.n	80128a0 <_ZL12send_commandP5bc95g9CommandId+0x14>
        expect_ok(dev)
 80128b6:	4628      	mov	r0, r5
 80128b8:	f7ff ff7c 	bl	80127b4 <_ZL9expect_okP5bc95g>
 80128bc:	4604      	mov	r4, r0
 80128be:	e7ef      	b.n	80128a0 <_ZL12send_commandP5bc95g9CommandId+0x14>
 80128c0:	200034cc 	.word	0x200034cc

080128c4 <_ZL16send_command_intP5bc95g9CommandIdi>:
static bool send_command_int(struct bc95g *dev, enum CommandId id, int arg) {
 80128c4:	b570      	push	{r4, r5, r6, lr}
 80128c6:	4604      	mov	r4, r0
 80128c8:	4616      	mov	r6, r2
    const char *cmd = get_command(dev, id);
 80128ca:	f7ff fec3 	bl	8012654 <_ZL11get_commandP5bc95g9CommandId>
 80128ce:	4605      	mov	r5, r0
        send_atp(dev) &&
 80128d0:	4620      	mov	r0, r4
 80128d2:	f7ff ffcb 	bl	801286c <_ZL8send_atpP5bc95g>
        parser.send(cmd, arg) &&
 80128d6:	4603      	mov	r3, r0
 80128d8:	b908      	cbnz	r0, 80128de <_ZL16send_command_intP5bc95g9CommandIdi+0x1a>
}
 80128da:	4618      	mov	r0, r3
 80128dc:	bd70      	pop	{r4, r5, r6, pc}
        parser.send(cmd, arg) &&
 80128de:	4632      	mov	r2, r6
 80128e0:	4629      	mov	r1, r5
 80128e2:	4805      	ldr	r0, [pc, #20]	; (80128f8 <_ZL16send_command_intP5bc95g9CommandIdi+0x34>)
 80128e4:	f000 fe22 	bl	801352c <_ZN8ATParser4sendEPKcz>
        send_atp(dev) &&
 80128e8:	4603      	mov	r3, r0
 80128ea:	2800      	cmp	r0, #0
 80128ec:	d0f5      	beq.n	80128da <_ZL16send_command_intP5bc95g9CommandIdi+0x16>
        expect_ok(dev)
 80128ee:	4620      	mov	r0, r4
 80128f0:	f7ff ff60 	bl	80127b4 <_ZL9expect_okP5bc95g>
 80128f4:	4603      	mov	r3, r0
 80128f6:	e7f0      	b.n	80128da <_ZL16send_command_intP5bc95g9CommandIdi+0x16>
 80128f8:	200034cc 	.word	0x200034cc

080128fc <_ZL19prepare_to_transmitP5bc95g>:
static bool prepare_to_transmit(struct bc95g *dev) {
 80128fc:	b510      	push	{r4, lr}
 80128fe:	4604      	mov	r4, r0
        wait_for_ok(dev) &&
 8012900:	f7ff ff6c 	bl	80127dc <_ZL11wait_for_okP5bc95g>
        (parser.flush() == 0) &&
 8012904:	4603      	mov	r3, r0
 8012906:	b908      	cbnz	r0, 801290c <_ZL19prepare_to_transmitP5bc95g+0x10>
}
 8012908:	4618      	mov	r0, r3
 801290a:	bd10      	pop	{r4, pc}
        send_command(dev, NCONFIG) &&
 801290c:	2101      	movs	r1, #1
 801290e:	4620      	mov	r0, r4
 8012910:	f7ff ffbc 	bl	801288c <_ZL12send_commandP5bc95g9CommandId>
        wait_for_ok(dev) &&
 8012914:	4603      	mov	r3, r0
 8012916:	2800      	cmp	r0, #0
 8012918:	d0f6      	beq.n	8012908 <_ZL19prepare_to_transmitP5bc95g+0xc>
        send_command(dev, QREGSWT) &&
 801291a:	2102      	movs	r1, #2
 801291c:	4620      	mov	r0, r4
 801291e:	f7ff ffb5 	bl	801288c <_ZL12send_commandP5bc95g9CommandId>
        send_command(dev, NCONFIG) &&
 8012922:	4603      	mov	r3, r0
 8012924:	2800      	cmp	r0, #0
 8012926:	d0ef      	beq.n	8012908 <_ZL19prepare_to_transmitP5bc95g+0xc>
        send_command(dev, NRB) &&
 8012928:	2103      	movs	r1, #3
 801292a:	4620      	mov	r0, r4
 801292c:	f7ff ffae 	bl	801288c <_ZL12send_commandP5bc95g9CommandId>
        send_command(dev, QREGSWT) &&
 8012930:	4603      	mov	r3, r0
 8012932:	2800      	cmp	r0, #0
 8012934:	d0e8      	beq.n	8012908 <_ZL19prepare_to_transmitP5bc95g+0xc>
        parser.send("AT") &&
 8012936:	490d      	ldr	r1, [pc, #52]	; (801296c <_ZL19prepare_to_transmitP5bc95g+0x70>)
 8012938:	480d      	ldr	r0, [pc, #52]	; (8012970 <_ZL19prepare_to_transmitP5bc95g+0x74>)
 801293a:	f000 fdf7 	bl	801352c <_ZN8ATParser4sendEPKcz>
        send_command(dev, NRB) &&
 801293e:	4603      	mov	r3, r0
 8012940:	2800      	cmp	r0, #0
 8012942:	d0e1      	beq.n	8012908 <_ZL19prepare_to_transmitP5bc95g+0xc>
        expect_ok(dev) &&
 8012944:	4620      	mov	r0, r4
 8012946:	f7ff ff35 	bl	80127b4 <_ZL9expect_okP5bc95g>
        parser.send("AT") &&
 801294a:	4603      	mov	r3, r0
 801294c:	2800      	cmp	r0, #0
 801294e:	d0db      	beq.n	8012908 <_ZL19prepare_to_transmitP5bc95g+0xc>
        (parser.flush() == 0) &&
 8012950:	4807      	ldr	r0, [pc, #28]	; (8012970 <_ZL19prepare_to_transmitP5bc95g+0x74>)
 8012952:	f000 fc77 	bl	8013244 <_ZN8ATParser5flushEv>
        expect_ok(dev) &&
 8012956:	b108      	cbz	r0, 801295c <_ZL19prepare_to_transmitP5bc95g+0x60>
        (parser.flush() == 0) &&
 8012958:	2300      	movs	r3, #0
 801295a:	e7d5      	b.n	8012908 <_ZL19prepare_to_transmitP5bc95g+0xc>
        send_command_int(dev, NBAND, MYNEWT_VAL(NBIOT_BAND))
 801295c:	2208      	movs	r2, #8
 801295e:	2104      	movs	r1, #4
 8012960:	4620      	mov	r0, r4
 8012962:	f7ff ffaf 	bl	80128c4 <_ZL16send_command_intP5bc95g9CommandIdi>
 8012966:	4603      	mov	r3, r0
 8012968:	e7ce      	b.n	8012908 <_ZL19prepare_to_transmitP5bc95g+0xc>
 801296a:	bf00      	nop
 801296c:	080185d4 	.word	0x080185d4
 8012970:	200034cc 	.word	0x200034cc

08012974 <_ZL10send_queryP5bc95g9CommandIdPiS2_>:
static bool send_query(struct bc95g *dev, enum CommandId id, int *res1, int *res2) {
 8012974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012978:	b088      	sub	sp, #32
    assert(res1);
 801297a:	b1e2      	cbz	r2, 80129b6 <_ZL10send_queryP5bc95g9CommandIdPiS2_+0x42>
 801297c:	4604      	mov	r4, r0
 801297e:	461d      	mov	r5, r3
 8012980:	4617      	mov	r7, r2
    const char *cmd = get_command(dev, id);
 8012982:	f7ff fe67 	bl	8012654 <_ZL11get_commandP5bc95g9CommandId>
 8012986:	4680      	mov	r8, r0
    char cmd_response[17];  memset(cmd_response, 0, sizeof(cmd_response));
 8012988:	2300      	movs	r3, #0
 801298a:	9303      	str	r3, [sp, #12]
 801298c:	9304      	str	r3, [sp, #16]
 801298e:	9305      	str	r3, [sp, #20]
 8012990:	9306      	str	r3, [sp, #24]
 8012992:	f88d 301c 	strb.w	r3, [sp, #28]
    *res1 = -1; 
 8012996:	f04f 33ff 	mov.w	r3, #4294967295
 801299a:	603b      	str	r3, [r7, #0]
    if (res2) { *res2 = -1; }
 801299c:	b105      	cbz	r5, 80129a0 <_ZL10send_queryP5bc95g9CommandIdPiS2_+0x2c>
 801299e:	602b      	str	r3, [r5, #0]
        send_atp(dev) &&
 80129a0:	4620      	mov	r0, r4
 80129a2:	f7ff ff63 	bl	801286c <_ZL8send_atpP5bc95g>
        ) &&
 80129a6:	4606      	mov	r6, r0
 80129a8:	b958      	cbnz	r0, 80129c2 <_ZL10send_queryP5bc95g9CommandIdPiS2_+0x4e>
    console_flush();
 80129aa:	f7f7 fd0f 	bl	800a3cc <console_flush>
}
 80129ae:	4630      	mov	r0, r6
 80129b0:	b008      	add	sp, #32
 80129b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert(res1);
 80129b6:	2300      	movs	r3, #0
 80129b8:	461a      	mov	r2, r3
 80129ba:	4619      	mov	r1, r3
 80129bc:	4618      	mov	r0, r3
 80129be:	f7f9 fe09 	bl	800c5d4 <__assert_func>
        parser.send(cmd) && (
 80129c2:	4641      	mov	r1, r8
 80129c4:	480f      	ldr	r0, [pc, #60]	; (8012a04 <_ZL10send_queryP5bc95g9CommandIdPiS2_+0x90>)
 80129c6:	f000 fdb1 	bl	801352c <_ZN8ATParser4sendEPKcz>
        send_atp(dev) &&
 80129ca:	4606      	mov	r6, r0
 80129cc:	2800      	cmp	r0, #0
 80129ce:	d0ec      	beq.n	80129aa <_ZL10send_queryP5bc95g9CommandIdPiS2_+0x36>
        ) &&
 80129d0:	b175      	cbz	r5, 80129f0 <_ZL10send_queryP5bc95g9CommandIdPiS2_+0x7c>
            : parser.recv("+%16[^:]:%d,%d", cmd_response, res1, res2)  //  Note: cmd is max 16 chars
 80129d2:	9500      	str	r5, [sp, #0]
 80129d4:	463b      	mov	r3, r7
 80129d6:	aa03      	add	r2, sp, #12
 80129d8:	490b      	ldr	r1, [pc, #44]	; (8012a08 <_ZL10send_queryP5bc95g9CommandIdPiS2_+0x94>)
 80129da:	480a      	ldr	r0, [pc, #40]	; (8012a04 <_ZL10send_queryP5bc95g9CommandIdPiS2_+0x90>)
 80129dc:	f000 fdb4 	bl	8013548 <_ZN8ATParser4recvEPKcz>
            ? parser.recv("+%16[^:]:%d", cmd_response, res1)  //  Note: cmd is max 16 chars
 80129e0:	4606      	mov	r6, r0
 80129e2:	2800      	cmp	r0, #0
 80129e4:	d0e1      	beq.n	80129aa <_ZL10send_queryP5bc95g9CommandIdPiS2_+0x36>
        expect_ok(dev)
 80129e6:	4620      	mov	r0, r4
 80129e8:	f7ff fee4 	bl	80127b4 <_ZL9expect_okP5bc95g>
 80129ec:	4606      	mov	r6, r0
 80129ee:	e7dc      	b.n	80129aa <_ZL10send_queryP5bc95g9CommandIdPiS2_+0x36>
            ? parser.recv("+%16[^:]:%d", cmd_response, res1)  //  Note: cmd is max 16 chars
 80129f0:	463b      	mov	r3, r7
 80129f2:	aa03      	add	r2, sp, #12
 80129f4:	4905      	ldr	r1, [pc, #20]	; (8012a0c <_ZL10send_queryP5bc95g9CommandIdPiS2_+0x98>)
 80129f6:	4803      	ldr	r0, [pc, #12]	; (8012a04 <_ZL10send_queryP5bc95g9CommandIdPiS2_+0x90>)
 80129f8:	f000 fda6 	bl	8013548 <_ZN8ATParser4recvEPKcz>
        parser.send(cmd) && (
 80129fc:	4606      	mov	r6, r0
 80129fe:	2800      	cmp	r0, #0
 8012a00:	d1f1      	bne.n	80129e6 <_ZL10send_queryP5bc95g9CommandIdPiS2_+0x72>
 8012a02:	e7d2      	b.n	80129aa <_ZL10send_queryP5bc95g9CommandIdPiS2_+0x36>
 8012a04:	200034cc 	.word	0x200034cc
 8012a08:	080185c4 	.word	0x080185c4
 8012a0c:	080185b8 	.word	0x080185b8

08012a10 <_ZL15wait_for_attachP5bc95g>:
static bool wait_for_attach(struct bc95g *dev) {
 8012a10:	b530      	push	{r4, r5, lr}
 8012a12:	b083      	sub	sp, #12
 8012a14:	4605      	mov	r5, r0
    for (uint8_t i = 0; i < MAX_ATTACH_RETRIES; i++) {
 8012a16:	2400      	movs	r4, #0
 8012a18:	2c27      	cmp	r4, #39	; 0x27
 8012a1a:	d81e      	bhi.n	8012a5a <_ZL15wait_for_attachP5bc95g+0x4a>
        int state = -1;
 8012a1c:	aa02      	add	r2, sp, #8
 8012a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8012a22:	f842 3d04 	str.w	r3, [r2, #-4]!
        bool res = send_query(dev, CGATT_QUERY, &state, NULL);
 8012a26:	2300      	movs	r3, #0
 8012a28:	210b      	movs	r1, #11
 8012a2a:	4628      	mov	r0, r5
 8012a2c:	f7ff ffa2 	bl	8012974 <_ZL10send_queryP5bc95g9CommandIdPiS2_>
        if (!res) { return false; }  //  If send failed, quit.
 8012a30:	4602      	mov	r2, r0
 8012a32:	b198      	cbz	r0, 8012a5c <_ZL15wait_for_attachP5bc95g+0x4c>
        assert(state >= 0);
 8012a34:	9b01      	ldr	r3, [sp, #4]
 8012a36:	2b00      	cmp	r3, #0
 8012a38:	db09      	blt.n	8012a4e <_ZL15wait_for_attachP5bc95g+0x3e>
        if (state == 1) { return true; }  //  If attached, exit.
 8012a3a:	2b01      	cmp	r3, #1
 8012a3c:	d00e      	beq.n	8012a5c <_ZL15wait_for_attachP5bc95g+0x4c>
        console_flush();
 8012a3e:	f7f7 fcc5 	bl	800a3cc <console_flush>
        sleep(2);
 8012a42:	2002      	movs	r0, #2
 8012a44:	f7ff fec0 	bl	80127c8 <_ZL5sleept>
    for (uint8_t i = 0; i < MAX_ATTACH_RETRIES; i++) {
 8012a48:	3401      	adds	r4, #1
 8012a4a:	b2e4      	uxtb	r4, r4
 8012a4c:	e7e4      	b.n	8012a18 <_ZL15wait_for_attachP5bc95g+0x8>
        assert(state >= 0);
 8012a4e:	2300      	movs	r3, #0
 8012a50:	461a      	mov	r2, r3
 8012a52:	4619      	mov	r1, r3
 8012a54:	4618      	mov	r0, r3
 8012a56:	f7f9 fdbd 	bl	800c5d4 <__assert_func>
    return false;  //  Not attached after retries, quit.
 8012a5a:	2200      	movs	r2, #0
}
 8012a5c:	4610      	mov	r0, r2
 8012a5e:	b003      	add	sp, #12
 8012a60:	bd30      	pop	{r4, r5, pc}
	...

08012a64 <_ZL14send_query_intP5bc95g9CommandIdPi>:
static bool send_query_int(struct bc95g *dev, enum CommandId id, int *result) {
 8012a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    assert(result);
 8012a66:	b182      	cbz	r2, 8012a8a <_ZL14send_query_intP5bc95g9CommandIdPi+0x26>
 8012a68:	4604      	mov	r4, r0
 8012a6a:	4616      	mov	r6, r2
    const char *cmd = get_command(dev, id);
 8012a6c:	f7ff fdf2 	bl	8012654 <_ZL11get_commandP5bc95g9CommandId>
 8012a70:	4607      	mov	r7, r0
    *result = -1;
 8012a72:	f04f 33ff 	mov.w	r3, #4294967295
 8012a76:	6033      	str	r3, [r6, #0]
        send_atp(dev) &&
 8012a78:	4620      	mov	r0, r4
 8012a7a:	f7ff fef7 	bl	801286c <_ZL8send_atpP5bc95g>
        parser.recv("%d", result) &&
 8012a7e:	4605      	mov	r5, r0
 8012a80:	b948      	cbnz	r0, 8012a96 <_ZL14send_query_intP5bc95g9CommandIdPi+0x32>
    console_flush();
 8012a82:	f7f7 fca3 	bl	800a3cc <console_flush>
}
 8012a86:	4628      	mov	r0, r5
 8012a88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert(result);
 8012a8a:	2300      	movs	r3, #0
 8012a8c:	461a      	mov	r2, r3
 8012a8e:	4619      	mov	r1, r3
 8012a90:	4618      	mov	r0, r3
 8012a92:	f7f9 fd9f 	bl	800c5d4 <__assert_func>
        parser.send(cmd) &&
 8012a96:	4639      	mov	r1, r7
 8012a98:	4809      	ldr	r0, [pc, #36]	; (8012ac0 <_ZL14send_query_intP5bc95g9CommandIdPi+0x5c>)
 8012a9a:	f000 fd47 	bl	801352c <_ZN8ATParser4sendEPKcz>
        send_atp(dev) &&
 8012a9e:	4605      	mov	r5, r0
 8012aa0:	2800      	cmp	r0, #0
 8012aa2:	d0ee      	beq.n	8012a82 <_ZL14send_query_intP5bc95g9CommandIdPi+0x1e>
        parser.recv("%d", result) &&
 8012aa4:	4632      	mov	r2, r6
 8012aa6:	4907      	ldr	r1, [pc, #28]	; (8012ac4 <_ZL14send_query_intP5bc95g9CommandIdPi+0x60>)
 8012aa8:	4805      	ldr	r0, [pc, #20]	; (8012ac0 <_ZL14send_query_intP5bc95g9CommandIdPi+0x5c>)
 8012aaa:	f000 fd4d 	bl	8013548 <_ZN8ATParser4recvEPKcz>
        parser.send(cmd) &&
 8012aae:	4605      	mov	r5, r0
 8012ab0:	2800      	cmp	r0, #0
 8012ab2:	d0e6      	beq.n	8012a82 <_ZL14send_query_intP5bc95g9CommandIdPi+0x1e>
        expect_ok(dev)
 8012ab4:	4620      	mov	r0, r4
 8012ab6:	f7ff fe7d 	bl	80127b4 <_ZL9expect_okP5bc95g>
 8012aba:	4605      	mov	r5, r0
 8012abc:	e7e1      	b.n	8012a82 <_ZL14send_query_intP5bc95g9CommandIdPi+0x1e>
 8012abe:	bf00      	nop
 8012ac0:	200034cc 	.word	0x200034cc
 8012ac4:	0801872c 	.word	0x0801872c

08012ac8 <_ZL21wait_for_registrationP5bc95g>:
static bool wait_for_registration(struct bc95g *dev) {
 8012ac8:	b530      	push	{r4, r5, lr}
 8012aca:	b083      	sub	sp, #12
 8012acc:	4605      	mov	r5, r0
    hal_gpio_init_out(LED_BLINK_PIN, 1);
 8012ace:	2101      	movs	r1, #1
 8012ad0:	200f      	movs	r0, #15
 8012ad2:	f7fd fcab 	bl	801042c <hal_gpio_init_out>
    for (uint8_t i = 0; i < MAX_REGISTRATION_RETRIES; i++) {
 8012ad6:	2400      	movs	r4, #0
 8012ad8:	2c27      	cmp	r4, #39	; 0x27
 8012ada:	d822      	bhi.n	8012b22 <_ZL21wait_for_registrationP5bc95g+0x5a>
        int code = -1, status = -1;
 8012adc:	f04f 32ff 	mov.w	r2, #4294967295
 8012ae0:	9200      	str	r2, [sp, #0]
 8012ae2:	ab02      	add	r3, sp, #8
 8012ae4:	f843 2d04 	str.w	r2, [r3, #-4]!
        bool res = send_query(dev, CEREG_QUERY, &code, &status);
 8012ae8:	466a      	mov	r2, sp
 8012aea:	2109      	movs	r1, #9
 8012aec:	4628      	mov	r0, r5
 8012aee:	f7ff ff41 	bl	8012974 <_ZL10send_queryP5bc95g9CommandIdPiS2_>
        if (!res) { return false; }  //  If send failed, quit.
 8012af2:	4602      	mov	r2, r0
 8012af4:	b1b0      	cbz	r0, 8012b24 <_ZL21wait_for_registrationP5bc95g+0x5c>
        assert(status >= 0);
 8012af6:	9b01      	ldr	r3, [sp, #4]
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	db0c      	blt.n	8012b16 <_ZL21wait_for_registrationP5bc95g+0x4e>
        if (status == 1) { return true; }  //  If registered, exit.
 8012afc:	2b01      	cmp	r3, #1
 8012afe:	d011      	beq.n	8012b24 <_ZL21wait_for_registrationP5bc95g+0x5c>
        hal_gpio_toggle(LED_BLINK_PIN);  //  Blink the LED.
 8012b00:	200f      	movs	r0, #15
 8012b02:	f7fd fccd 	bl	80104a0 <hal_gpio_toggle>
        console_flush();
 8012b06:	f7f7 fc61 	bl	800a3cc <console_flush>
        sleep(2);
 8012b0a:	2002      	movs	r0, #2
 8012b0c:	f7ff fe5c 	bl	80127c8 <_ZL5sleept>
    for (uint8_t i = 0; i < MAX_REGISTRATION_RETRIES; i++) {
 8012b10:	3401      	adds	r4, #1
 8012b12:	b2e4      	uxtb	r4, r4
 8012b14:	e7e0      	b.n	8012ad8 <_ZL21wait_for_registrationP5bc95g+0x10>
        assert(status >= 0);
 8012b16:	2300      	movs	r3, #0
 8012b18:	461a      	mov	r2, r3
 8012b1a:	4619      	mov	r1, r3
 8012b1c:	4618      	mov	r0, r3
 8012b1e:	f7f9 fd59 	bl	800c5d4 <__assert_func>
    return false;  //  Not registered after retries, quit.
 8012b22:	2200      	movs	r2, #0
}
 8012b24:	4610      	mov	r0, r2
 8012b26:	b003      	add	sp, #12
 8012b28:	bd30      	pop	{r4, r5, pc}

08012b2a <_ZL17attach_to_networkP5bc95g>:
static bool attach_to_network(struct bc95g *dev) {
 8012b2a:	b510      	push	{r4, lr}
 8012b2c:	4604      	mov	r4, r0
        wait_for_ok(dev) &&
 8012b2e:	f7ff fe55 	bl	80127dc <_ZL11wait_for_okP5bc95g>
        wait_for_attach(dev) &&
 8012b32:	4603      	mov	r3, r0
 8012b34:	b908      	cbnz	r0, 8012b3a <_ZL17attach_to_networkP5bc95g+0x10>
}
 8012b36:	4618      	mov	r0, r3
 8012b38:	bd10      	pop	{r4, pc}
        send_command(dev, CFUN_QUERY) &&
 8012b3a:	2107      	movs	r1, #7
 8012b3c:	4620      	mov	r0, r4
 8012b3e:	f7ff fea5 	bl	801288c <_ZL12send_commandP5bc95g9CommandId>
        wait_for_ok(dev) &&
 8012b42:	4603      	mov	r3, r0
 8012b44:	2800      	cmp	r0, #0
 8012b46:	d0f6      	beq.n	8012b36 <_ZL17attach_to_networkP5bc95g+0xc>
        send_command(dev, CFUN_ENABLE) &&
 8012b48:	2105      	movs	r1, #5
 8012b4a:	4620      	mov	r0, r4
 8012b4c:	f7ff fe9e 	bl	801288c <_ZL12send_commandP5bc95g9CommandId>
        send_command(dev, CFUN_QUERY) &&
 8012b50:	4603      	mov	r3, r0
 8012b52:	2800      	cmp	r0, #0
 8012b54:	d0ef      	beq.n	8012b36 <_ZL17attach_to_networkP5bc95g+0xc>
        send_command(dev, CGATT) &&
 8012b56:	210a      	movs	r1, #10
 8012b58:	4620      	mov	r0, r4
 8012b5a:	f7ff fe97 	bl	801288c <_ZL12send_commandP5bc95g9CommandId>
        send_command(dev, CFUN_ENABLE) &&
 8012b5e:	4603      	mov	r3, r0
 8012b60:	2800      	cmp	r0, #0
 8012b62:	d0e8      	beq.n	8012b36 <_ZL17attach_to_networkP5bc95g+0xc>
        send_command(dev, CEREG) &&
 8012b64:	2108      	movs	r1, #8
 8012b66:	4620      	mov	r0, r4
 8012b68:	f7ff fe90 	bl	801288c <_ZL12send_commandP5bc95g9CommandId>
        send_command(dev, CGATT) &&
 8012b6c:	4603      	mov	r3, r0
 8012b6e:	2800      	cmp	r0, #0
 8012b70:	d0e1      	beq.n	8012b36 <_ZL17attach_to_networkP5bc95g+0xc>
        wait_for_registration(dev) &&
 8012b72:	4620      	mov	r0, r4
 8012b74:	f7ff ffa8 	bl	8012ac8 <_ZL21wait_for_registrationP5bc95g>
        send_command(dev, CEREG) &&
 8012b78:	4603      	mov	r3, r0
 8012b7a:	2800      	cmp	r0, #0
 8012b7c:	d0db      	beq.n	8012b36 <_ZL17attach_to_networkP5bc95g+0xc>
        wait_for_attach(dev) &&
 8012b7e:	4620      	mov	r0, r4
 8012b80:	f7ff ff46 	bl	8012a10 <_ZL15wait_for_attachP5bc95g>
 8012b84:	4603      	mov	r3, r0
 8012b86:	e7d6      	b.n	8012b36 <_ZL17attach_to_networkP5bc95g+0xc>

08012b88 <_ZL8send_hexP5bc95gPKht>:

/// Send the data as hex digits.
static bool send_hex(struct bc95g *dev, const uint8_t *data, uint16_t size) {
 8012b88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012b8a:	b083      	sub	sp, #12
 8012b8c:	460f      	mov	r7, r1
 8012b8e:	4616      	mov	r6, r2
    console_dump(data, size); console_printf("\n");
 8012b90:	4611      	mov	r1, r2
 8012b92:	4638      	mov	r0, r7
 8012b94:	f7f7 fcba 	bl	800a50c <console_dump>
 8012b98:	4810      	ldr	r0, [pc, #64]	; (8012bdc <_ZL8send_hexP5bc95gPKht+0x54>)
 8012b9a:	f7f7 fd27 	bl	800a5ec <console_printf>
    char hex[2];
    for (uint16_t i = 0; i < size; i++) {
 8012b9e:	2400      	movs	r4, #0
 8012ba0:	42b4      	cmp	r4, r6
 8012ba2:	d215      	bcs.n	8012bd0 <_ZL8send_hexP5bc95gPKht+0x48>
        uint8_t b = data[i];
 8012ba4:	5d3d      	ldrb	r5, [r7, r4]
        hex[0] = nibble_to_hex(b >> 4);
 8012ba6:	0928      	lsrs	r0, r5, #4
 8012ba8:	f7ff fd4b 	bl	8012642 <_ZL13nibble_to_hexh>
 8012bac:	f88d 0004 	strb.w	r0, [sp, #4]
        hex[1] = nibble_to_hex(b & 0xf);
 8012bb0:	f005 000f 	and.w	r0, r5, #15
 8012bb4:	f7ff fd45 	bl	8012642 <_ZL13nibble_to_hexh>
 8012bb8:	f88d 0005 	strb.w	r0, [sp, #5]
        int res = parser.write(hex, 2);
 8012bbc:	2202      	movs	r2, #2
 8012bbe:	a901      	add	r1, sp, #4
 8012bc0:	4807      	ldr	r0, [pc, #28]	; (8012be0 <_ZL8send_hexP5bc95gPKht+0x58>)
 8012bc2:	f000 fb4c 	bl	801325e <_ZN8ATParser5writeEPKci>
        if (res <= 0) { return false; }
 8012bc6:	2800      	cmp	r0, #0
 8012bc8:	dd05      	ble.n	8012bd6 <_ZL8send_hexP5bc95gPKht+0x4e>
    for (uint16_t i = 0; i < size; i++) {
 8012bca:	3401      	adds	r4, #1
 8012bcc:	b2a4      	uxth	r4, r4
 8012bce:	e7e7      	b.n	8012ba0 <_ZL8send_hexP5bc95gPKht+0x18>
    }
    return true;
 8012bd0:	2001      	movs	r0, #1
}
 8012bd2:	b003      	add	sp, #12
 8012bd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (res <= 0) { return false; }
 8012bd6:	2000      	movs	r0, #0
 8012bd8:	e7fb      	b.n	8012bd2 <_ZL8send_hexP5bc95gPKht+0x4a>
 8012bda:	bf00      	nop
 8012bdc:	080185b4 	.word	0x080185b4
 8012be0:	200034cc 	.word	0x200034cc

08012be4 <_ZL9send_dataP5bc95gPKhtP7os_mbuf>:

/// Send the `data` buffer if `data` is non-null, or the chain of mbufs.
static bool send_data(struct bc95g *dev, const uint8_t *data, uint16_t length, struct os_mbuf *mbuf) {
 8012be4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012be8:	4680      	mov	r8, r0
 8012bea:	461c      	mov	r4, r3
    if (data && length > 0) {
 8012bec:	b189      	cbz	r1, 8012c12 <_ZL9send_dataP5bc95gPKhtP7os_mbuf+0x2e>
 8012bee:	460b      	mov	r3, r1
 8012bf0:	b17a      	cbz	r2, 8012c12 <_ZL9send_dataP5bc95gPKhtP7os_mbuf+0x2e>
        //  Send the data buffer as hex digits.
        assert(length * 3 < BC95G_TX_BUFFER_SIZE);  //  Need 3 chars per byte
 8012bf2:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8012bf6:	f5b1 7f61 	cmp.w	r1, #900	; 0x384
 8012bfa:	da04      	bge.n	8012c06 <_ZL9send_dataP5bc95gPKhtP7os_mbuf+0x22>
        return send_hex(dev, data, length);
 8012bfc:	4619      	mov	r1, r3
 8012bfe:	f7ff ffc3 	bl	8012b88 <_ZL8send_hexP5bc95gPKht>
 8012c02:	4607      	mov	r7, r0
 8012c04:	e036      	b.n	8012c74 <_ZL9send_dataP5bc95gPKhtP7os_mbuf+0x90>
        assert(length * 3 < BC95G_TX_BUFFER_SIZE);  //  Need 3 chars per byte
 8012c06:	2300      	movs	r3, #0
 8012c08:	461a      	mov	r2, r3
 8012c0a:	4619      	mov	r1, r3
 8012c0c:	4618      	mov	r0, r3
 8012c0e:	f7f9 fce1 	bl	800c5d4 <__assert_func>
    }
    //  Send the mbuf chain.
    assert(mbuf);
 8012c12:	b1e4      	cbz	r4, 8012c4e <_ZL9send_dataP5bc95gPKhtP7os_mbuf+0x6a>
    uint32_t chain_size = OS_MBUF_PKTLEN(mbuf);     //  Length of the mbuf chain.
 8012c14:	f8b4 9010 	ldrh.w	r9, [r4, #16]
    assert(chain_size * 3 < BC95G_TX_BUFFER_SIZE);  //  Need 3 chars per byte
 8012c18:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 8012c1c:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8012c20:	d21b      	bcs.n	8012c5a <_ZL9send_dataP5bc95gPKhtP7os_mbuf+0x76>
    const char *_f = "send mbuf";
    console_printf("%s%s %u...\n", _nbt, _f, (unsigned) chain_size);  console_flush();
 8012c22:	464b      	mov	r3, r9
 8012c24:	4a18      	ldr	r2, [pc, #96]	; (8012c88 <_ZL9send_dataP5bc95gPKhtP7os_mbuf+0xa4>)
 8012c26:	4919      	ldr	r1, [pc, #100]	; (8012c8c <_ZL9send_dataP5bc95gPKhtP7os_mbuf+0xa8>)
 8012c28:	6809      	ldr	r1, [r1, #0]
 8012c2a:	4819      	ldr	r0, [pc, #100]	; (8012c90 <_ZL9send_dataP5bc95gPKhtP7os_mbuf+0xac>)
 8012c2c:	f7f7 fcde 	bl	800a5ec <console_printf>
 8012c30:	f7f7 fbcc 	bl	800a3cc <console_flush>
    struct os_mbuf *m = mbuf;
    bool result = true;
    uint32_t total_size = 0;
 8012c34:	2600      	movs	r6, #0
    while (m) {  //  Send each mbuf in the chain.
 8012c36:	b1b4      	cbz	r4, 8012c66 <_ZL9send_dataP5bc95gPKhtP7os_mbuf+0x82>
        const uint8_t *data = OS_MBUF_DATA(m, const uint8_t *);  //  Fetch the mbuf data.
        uint16_t size = m->om_len;  //  Fetch the size for the single mbuf.
 8012c38:	88e5      	ldrh	r5, [r4, #6]
        bool res = send_hex(dev, data, size);
 8012c3a:	462a      	mov	r2, r5
 8012c3c:	6821      	ldr	r1, [r4, #0]
 8012c3e:	4640      	mov	r0, r8
 8012c40:	f7ff ffa2 	bl	8012b88 <_ZL8send_hexP5bc95gPKht>
        if (!res) { result = false; break; }
 8012c44:	4607      	mov	r7, r0
 8012c46:	b178      	cbz	r0, 8012c68 <_ZL9send_dataP5bc95gPKhtP7os_mbuf+0x84>
        total_size += size;
 8012c48:	442e      	add	r6, r5
        m = m->om_next.sle_next;   //  Fetch next mbuf in the list.
 8012c4a:	68e4      	ldr	r4, [r4, #12]
    while (m) {  //  Send each mbuf in the chain.
 8012c4c:	e7f3      	b.n	8012c36 <_ZL9send_dataP5bc95gPKhtP7os_mbuf+0x52>
    assert(mbuf);
 8012c4e:	2300      	movs	r3, #0
 8012c50:	461a      	mov	r2, r3
 8012c52:	4619      	mov	r1, r3
 8012c54:	4618      	mov	r0, r3
 8012c56:	f7f9 fcbd 	bl	800c5d4 <__assert_func>
    assert(chain_size * 3 < BC95G_TX_BUFFER_SIZE);  //  Need 3 chars per byte
 8012c5a:	2300      	movs	r3, #0
 8012c5c:	461a      	mov	r2, r3
 8012c5e:	4619      	mov	r1, r3
 8012c60:	4618      	mov	r0, r3
 8012c62:	f7f9 fcb7 	bl	800c5d4 <__assert_func>
    bool result = true;
 8012c66:	2701      	movs	r7, #1
    }
    assert(total_size == chain_size);  //  Make sure entire chain was transmitted.
 8012c68:	454e      	cmp	r6, r9
 8012c6a:	d106      	bne.n	8012c7a <_ZL9send_dataP5bc95gPKhtP7os_mbuf+0x96>
    _log(_f, result);
 8012c6c:	4639      	mov	r1, r7
 8012c6e:	4806      	ldr	r0, [pc, #24]	; (8012c88 <_ZL9send_dataP5bc95gPKhtP7os_mbuf+0xa4>)
 8012c70:	f000 fab0 	bl	80131d4 <_log>
    return result;
}
 8012c74:	4638      	mov	r0, r7
 8012c76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    assert(total_size == chain_size);  //  Make sure entire chain was transmitted.
 8012c7a:	2300      	movs	r3, #0
 8012c7c:	461a      	mov	r2, r3
 8012c7e:	4619      	mov	r1, r3
 8012c80:	4618      	mov	r0, r3
 8012c82:	f7f9 fca7 	bl	800c5d4 <__assert_func>
 8012c86:	bf00      	nop
 8012c88:	08018688 	.word	0x08018688
 8012c8c:	20000344 	.word	0x20000344
 8012c90:	08018694 	.word	0x08018694

08012c94 <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf>:

/// Transmit the `data` buffer if `data` is non-null, or the chain of mbufs.  Return number of bytes sent.
static int send_tx_command(struct bc95g *dev, struct bc95g_socket *socket, const char *host, uint16_t port, 
    const uint8_t *data, uint16_t length, uint8_t sequence, struct os_mbuf *mbuf) {
 8012c94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c98:	b086      	sub	sp, #24
 8012c9a:	4606      	mov	r6, r0
 8012c9c:	4617      	mov	r7, r2
 8012c9e:	4698      	mov	r8, r3
 8012ca0:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
    uint16_t local_port = socket->local_port;
 8012ca4:	880d      	ldrh	r5, [r1, #0]
    int local_port_response = -1, length_response = -1;
 8012ca6:	f04f 31ff 	mov.w	r1, #4294967295
 8012caa:	9105      	str	r1, [sp, #20]
 8012cac:	9104      	str	r1, [sp, #16]
#ifdef TRANSMIT_FLAGS
    console_printf("AT> NSOSTF=%d,%s,%d,%s,%d,\n", local_port, host, port, TRANSMIT_FLAGS, length);
 8012cae:	9401      	str	r4, [sp, #4]
 8012cb0:	4922      	ldr	r1, [pc, #136]	; (8012d3c <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf+0xa8>)
 8012cb2:	9100      	str	r1, [sp, #0]
 8012cb4:	4629      	mov	r1, r5
 8012cb6:	4822      	ldr	r0, [pc, #136]	; (8012d40 <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf+0xac>)
 8012cb8:	f7f7 fc98 	bl	800a5ec <console_printf>
#else
    console_printf("AT> NSOST=%d,%s,%d,%d,\n",     local_port, host, port, length);
#endif  //  TRANSMIT_FLAGS
    internal_timeout(BC95G_SEND_TIMEOUT);
 8012cbc:	f242 7010 	movw	r0, #10000	; 0x2710
 8012cc0:	f7ff fcb6 	bl	8012630 <_ZL16internal_timeoutm>
    bool res = (
        send_atp(dev) &&  //  Will pause between commands.
 8012cc4:	4630      	mov	r0, r6
 8012cc6:	f7ff fdd1 	bl	801286c <_ZL8send_atpP5bc95g>
        parser.printf("NSOST=%d,%s,%d,%d,",
            local_port, host, port, length) &&
#endif  //  TRANSMIT_FLAGS
        send_data(dev, data, length, mbuf) &&
        parser.send(",%d", sequence) &&
        parser.recv("%d,%d", &local_port_response, &length_response) &&
 8012cca:	b920      	cbnz	r0, 8012cd6 <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf+0x42>
        parser.recv("OK")
    );
    return res ? length : 0;
 8012ccc:	2300      	movs	r3, #0
}
 8012cce:	4618      	mov	r0, r3
 8012cd0:	b006      	add	sp, #24
 8012cd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        parser.printf("NSOSTF=%d,%s,%d,%s,%d,",
 8012cd6:	9402      	str	r4, [sp, #8]
 8012cd8:	4b18      	ldr	r3, [pc, #96]	; (8012d3c <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf+0xa8>)
 8012cda:	9301      	str	r3, [sp, #4]
 8012cdc:	f8cd 8000 	str.w	r8, [sp]
 8012ce0:	463b      	mov	r3, r7
 8012ce2:	462a      	mov	r2, r5
 8012ce4:	4917      	ldr	r1, [pc, #92]	; (8012d44 <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf+0xb0>)
 8012ce6:	4818      	ldr	r0, [pc, #96]	; (8012d48 <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf+0xb4>)
 8012ce8:	f000 fc12 	bl	8013510 <_ZN8ATParser6printfEPKcz>
        send_atp(dev) &&  //  Will pause between commands.
 8012cec:	4603      	mov	r3, r0
 8012cee:	2800      	cmp	r0, #0
 8012cf0:	d0ed      	beq.n	8012cce <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf+0x3a>
        send_data(dev, data, length, mbuf) &&
 8012cf2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012cf4:	4622      	mov	r2, r4
 8012cf6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8012cf8:	4630      	mov	r0, r6
 8012cfa:	f7ff ff73 	bl	8012be4 <_ZL9send_dataP5bc95gPKhtP7os_mbuf>
            local_port, host, port, TRANSMIT_FLAGS, length) &&
 8012cfe:	b908      	cbnz	r0, 8012d04 <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf+0x70>
    return res ? length : 0;
 8012d00:	2300      	movs	r3, #0
 8012d02:	e7e4      	b.n	8012cce <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf+0x3a>
        parser.send(",%d", sequence) &&
 8012d04:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 8012d08:	4910      	ldr	r1, [pc, #64]	; (8012d4c <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf+0xb8>)
 8012d0a:	480f      	ldr	r0, [pc, #60]	; (8012d48 <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf+0xb4>)
 8012d0c:	f000 fc0e 	bl	801352c <_ZN8ATParser4sendEPKcz>
        send_data(dev, data, length, mbuf) &&
 8012d10:	b908      	cbnz	r0, 8012d16 <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf+0x82>
    return res ? length : 0;
 8012d12:	2300      	movs	r3, #0
 8012d14:	e7db      	b.n	8012cce <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf+0x3a>
        parser.recv("%d,%d", &local_port_response, &length_response) &&
 8012d16:	ab04      	add	r3, sp, #16
 8012d18:	aa05      	add	r2, sp, #20
 8012d1a:	490d      	ldr	r1, [pc, #52]	; (8012d50 <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf+0xbc>)
 8012d1c:	480a      	ldr	r0, [pc, #40]	; (8012d48 <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf+0xb4>)
 8012d1e:	f000 fc13 	bl	8013548 <_ZN8ATParser4recvEPKcz>
        parser.send(",%d", sequence) &&
 8012d22:	b908      	cbnz	r0, 8012d28 <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf+0x94>
    return res ? length : 0;
 8012d24:	2300      	movs	r3, #0
 8012d26:	e7d2      	b.n	8012cce <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf+0x3a>
        parser.recv("OK")
 8012d28:	490a      	ldr	r1, [pc, #40]	; (8012d54 <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf+0xc0>)
 8012d2a:	4807      	ldr	r0, [pc, #28]	; (8012d48 <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf+0xb4>)
 8012d2c:	f000 fc0c 	bl	8013548 <_ZN8ATParser4recvEPKcz>
        parser.recv("%d,%d", &local_port_response, &length_response) &&
 8012d30:	b108      	cbz	r0, 8012d36 <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf+0xa2>
    return res ? length : 0;
 8012d32:	4623      	mov	r3, r4
 8012d34:	e7cb      	b.n	8012cce <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf+0x3a>
 8012d36:	2300      	movs	r3, #0
 8012d38:	e7c9      	b.n	8012cce <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf+0x3a>
 8012d3a:	bf00      	nop
 8012d3c:	08018610 	.word	0x08018610
 8012d40:	080185f4 	.word	0x080185f4
 8012d44:	08018618 	.word	0x08018618
 8012d48:	200034cc 	.word	0x200034cc
 8012d4c:	08018630 	.word	0x08018630
 8012d50:	08018634 	.word	0x08018634
 8012d54:	08018684 	.word	0x08018684

08012d58 <bc95g_init>:
int bc95g_init(struct os_dev *dev0, void *arg) {
 8012d58:	b508      	push	{r3, lr}
    if (!arg || !dev0) { rc = SYS_ENODEV; goto err; }
 8012d5a:	b189      	cbz	r1, 8012d80 <bc95g_init+0x28>
 8012d5c:	b198      	cbz	r0, 8012d86 <bc95g_init+0x2e>
    OS_DEV_SETHANDLERS(dev0, bc95g_open, bc95g_close);
 8012d5e:	4b0b      	ldr	r3, [pc, #44]	; (8012d8c <bc95g_init+0x34>)
 8012d60:	6003      	str	r3, [r0, #0]
 8012d62:	4b0b      	ldr	r3, [pc, #44]	; (8012d90 <bc95g_init+0x38>)
 8012d64:	60c3      	str	r3, [r0, #12]
    rc = sensor_network_register_interface(&network_iface);
 8012d66:	480b      	ldr	r0, [pc, #44]	; (8012d94 <bc95g_init+0x3c>)
 8012d68:	f7f8 f95c 	bl	800b024 <sensor_network_register_interface>
    assert(rc == 0);
 8012d6c:	4603      	mov	r3, r0
 8012d6e:	b908      	cbnz	r0, 8012d74 <bc95g_init+0x1c>
}
 8012d70:	4618      	mov	r0, r3
 8012d72:	bd08      	pop	{r3, pc}
    assert(rc == 0);
 8012d74:	2300      	movs	r3, #0
 8012d76:	461a      	mov	r2, r3
 8012d78:	4619      	mov	r1, r3
 8012d7a:	4618      	mov	r0, r3
 8012d7c:	f7f9 fc2a 	bl	800c5d4 <__assert_func>
    return rc;
 8012d80:	f06f 0308 	mvn.w	r3, #8
 8012d84:	e7f4      	b.n	8012d70 <bc95g_init+0x18>
 8012d86:	f06f 0308 	mvn.w	r3, #8
 8012d8a:	e7f1      	b.n	8012d70 <bc95g_init+0x18>
 8012d8c:	08012739 	.word	0x08012739
 8012d90:	08012695 	.word	0x08012695
 8012d94:	080185e0 	.word	0x080185e0

08012d98 <bc95g_default_cfg>:
    memset(cfg, 0, sizeof(struct bc95g_cfg));  //  Zero the entire object.
 8012d98:	2300      	movs	r3, #0
 8012d9a:	6043      	str	r3, [r0, #4]
 8012d9c:	6083      	str	r3, [r0, #8]
 8012d9e:	60c3      	str	r3, [r0, #12]
    cfg->uart = MYNEWT_VAL(BC95G_UART);  //  0 for UART2, 1 for UART1.
 8012da0:	2202      	movs	r2, #2
 8012da2:	6002      	str	r2, [r0, #0]
}
 8012da4:	4618      	mov	r0, r3
 8012da6:	4770      	bx	lr

08012da8 <bc95g_config>:
int bc95g_config(struct bc95g *drv, struct bc95g_cfg *cfg) {
 8012da8:	b508      	push	{r3, lr}
    drv_cfg->uart = cfg->uart;    
 8012daa:	680b      	ldr	r3, [r1, #0]
 8012dac:	6243      	str	r3, [r0, #36]	; 0x24
    assert(drv_cfg->uart == MYNEWT_VAL(BC95G_UART));
 8012dae:	2b02      	cmp	r3, #2
 8012db0:	d104      	bne.n	8012dbc <bc95g_config+0x14>
    internal_configure(drv_cfg->uart);  //  Configure the UART port.  0 means UART2, 1 means UART1.
 8012db2:	4618      	mov	r0, r3
 8012db4:	f7ff fcae 	bl	8012714 <_ZL18internal_configurei>
}
 8012db8:	2000      	movs	r0, #0
 8012dba:	bd08      	pop	{r3, pc}
    assert(drv_cfg->uart == MYNEWT_VAL(BC95G_UART));
 8012dbc:	2300      	movs	r3, #0
 8012dbe:	461a      	mov	r2, r3
 8012dc0:	4619      	mov	r1, r3
 8012dc2:	4618      	mov	r0, r3
 8012dc4:	f7f9 fc06 	bl	800c5d4 <__assert_func>

08012dc8 <bc95g_connect>:
int bc95g_connect(struct bc95g *dev) {
 8012dc8:	b510      	push	{r4, lr}
 8012dca:	4604      	mov	r4, r0
    internal_timeout(BC95G_CONNECT_TIMEOUT);
 8012dcc:	f242 7010 	movw	r0, #10000	; 0x2710
 8012dd0:	f7ff fc2e 	bl	8012630 <_ZL16internal_timeoutm>
        prepare_to_transmit(dev)
 8012dd4:	4620      	mov	r0, r4
 8012dd6:	f7ff fd91 	bl	80128fc <_ZL19prepare_to_transmitP5bc95g>
    ) ? 0 : dev->last_error;
 8012dda:	b908      	cbnz	r0, 8012de0 <bc95g_connect+0x18>
 8012ddc:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8012dde:	bd10      	pop	{r4, pc}
    ) ? 0 : dev->last_error;
 8012de0:	2000      	movs	r0, #0
 8012de2:	e7fc      	b.n	8012dde <bc95g_connect+0x16>

08012de4 <bc95g_attach>:
int bc95g_attach(struct bc95g *dev) {
 8012de4:	b510      	push	{r4, lr}
 8012de6:	4604      	mov	r4, r0
    internal_timeout(BC95G_CONNECT_TIMEOUT);
 8012de8:	f242 7010 	movw	r0, #10000	; 0x2710
 8012dec:	f7ff fc20 	bl	8012630 <_ZL16internal_timeoutm>
        attach_to_network(dev)
 8012df0:	4620      	mov	r0, r4
 8012df2:	f7ff fe9a 	bl	8012b2a <_ZL17attach_to_networkP5bc95g>
    ) ? 0 : dev->last_error;
 8012df6:	b908      	cbnz	r0, 8012dfc <bc95g_attach+0x18>
 8012df8:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8012dfa:	bd10      	pop	{r4, pc}
    ) ? 0 : dev->last_error;
 8012dfc:	2000      	movs	r0, #0
 8012dfe:	e7fc      	b.n	8012dfa <bc95g_attach+0x16>

08012e00 <bc95g_detach>:
int bc95g_detach(struct bc95g *dev) {
 8012e00:	b510      	push	{r4, lr}
 8012e02:	4604      	mov	r4, r0
    internal_timeout(BC95G_CONNECT_TIMEOUT);
 8012e04:	f242 7010 	movw	r0, #10000	; 0x2710
 8012e08:	f7ff fc12 	bl	8012630 <_ZL16internal_timeoutm>
        send_command(dev, CFUN_DISABLE)
 8012e0c:	2106      	movs	r1, #6
 8012e0e:	4620      	mov	r0, r4
 8012e10:	f7ff fd3c 	bl	801288c <_ZL12send_commandP5bc95g9CommandId>
    ) ? 0 : dev->last_error;
 8012e14:	b908      	cbnz	r0, 8012e1a <bc95g_detach+0x1a>
 8012e16:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8012e18:	bd10      	pop	{r4, pc}
    ) ? 0 : dev->last_error;
 8012e1a:	2000      	movs	r0, #0
 8012e1c:	e7fc      	b.n	8012e18 <bc95g_detach+0x18>

08012e1e <bc95g_socket_open>:
int bc95g_socket_open(struct bc95g *dev, struct bc95g_socket **socket_ptr) {
 8012e1e:	b570      	push	{r4, r5, r6, lr}
 8012e20:	b082      	sub	sp, #8
 8012e22:	4605      	mov	r5, r0
 8012e24:	460e      	mov	r6, r1
    int local_port = 0;
 8012e26:	ac02      	add	r4, sp, #8
 8012e28:	2300      	movs	r3, #0
 8012e2a:	f844 3d04 	str.w	r3, [r4, #-4]!
    internal_timeout(BC95G_MISC_TIMEOUT);
 8012e2e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8012e32:	f7ff fbfd 	bl	8012630 <_ZL16internal_timeoutm>
    bool res = send_query_int(dev, NSOCR, &local_port);
 8012e36:	4622      	mov	r2, r4
 8012e38:	210c      	movs	r1, #12
 8012e3a:	4628      	mov	r0, r5
 8012e3c:	f7ff fe12 	bl	8012a64 <_ZL14send_query_intP5bc95g9CommandIdPi>
    if (!res) { return dev->last_error; }
 8012e40:	b158      	cbz	r0, 8012e5a <bc95g_socket_open+0x3c>
    assert(local_port > 0);
 8012e42:	9c01      	ldr	r4, [sp, #4]
 8012e44:	2c00      	cmp	r4, #0
 8012e46:	dd0a      	ble.n	8012e5e <bc95g_socket_open+0x40>
    bc95g_socket *socket = &cfg(dev)->sockets[0];
 8012e48:	4628      	mov	r0, r5
 8012e4a:	f7ff fbf7 	bl	801263c <_ZL3cfgP5bc95g>
 8012e4e:	1d03      	adds	r3, r0, #4
    socket->local_port = (uint16_t) local_port;
 8012e50:	8084      	strh	r4, [r0, #4]
    *socket_ptr = socket;
 8012e52:	6033      	str	r3, [r6, #0]
    return 0;
 8012e54:	2000      	movs	r0, #0
}
 8012e56:	b002      	add	sp, #8
 8012e58:	bd70      	pop	{r4, r5, r6, pc}
    if (!res) { return dev->last_error; }
 8012e5a:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8012e5c:	e7fb      	b.n	8012e56 <bc95g_socket_open+0x38>
    assert(local_port > 0);
 8012e5e:	2300      	movs	r3, #0
 8012e60:	461a      	mov	r2, r3
 8012e62:	4619      	mov	r1, r3
 8012e64:	4618      	mov	r0, r3
 8012e66:	f7f9 fbb5 	bl	800c5d4 <__assert_func>

08012e6a <bc95g_socket_close>:
int bc95g_socket_close(struct bc95g *dev, struct bc95g_socket *socket) {
 8012e6a:	b538      	push	{r3, r4, r5, lr}
    assert(socket && socket == &cfg(dev)->sockets[0]);
 8012e6c:	b199      	cbz	r1, 8012e96 <bc95g_socket_close+0x2c>
 8012e6e:	4605      	mov	r5, r0
 8012e70:	460c      	mov	r4, r1
 8012e72:	f7ff fbe3 	bl	801263c <_ZL3cfgP5bc95g>
 8012e76:	3004      	adds	r0, #4
 8012e78:	42a0      	cmp	r0, r4
 8012e7a:	d10c      	bne.n	8012e96 <bc95g_socket_close+0x2c>
    internal_timeout(BC95G_MISC_TIMEOUT);
 8012e7c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8012e80:	f7ff fbd6 	bl	8012630 <_ZL16internal_timeoutm>
    int local_port = socket->local_port;
 8012e84:	8822      	ldrh	r2, [r4, #0]
    assert(local_port > 0);
 8012e86:	b162      	cbz	r2, 8012ea2 <bc95g_socket_close+0x38>
    bool res = send_command_int(dev, NSOCL, local_port);
 8012e88:	210e      	movs	r1, #14
 8012e8a:	4628      	mov	r0, r5
 8012e8c:	f7ff fd1a 	bl	80128c4 <_ZL16send_command_intP5bc95g9CommandIdi>
    if (!res) { return dev->last_error; }
 8012e90:	b968      	cbnz	r0, 8012eae <bc95g_socket_close+0x44>
 8012e92:	6b68      	ldr	r0, [r5, #52]	; 0x34
}
 8012e94:	bd38      	pop	{r3, r4, r5, pc}
    assert(socket && socket == &cfg(dev)->sockets[0]);
 8012e96:	2300      	movs	r3, #0
 8012e98:	461a      	mov	r2, r3
 8012e9a:	4619      	mov	r1, r3
 8012e9c:	4618      	mov	r0, r3
 8012e9e:	f7f9 fb99 	bl	800c5d4 <__assert_func>
    assert(local_port > 0);
 8012ea2:	2300      	movs	r3, #0
 8012ea4:	461a      	mov	r2, r3
 8012ea6:	4619      	mov	r1, r3
 8012ea8:	4618      	mov	r0, r3
 8012eaa:	f7f9 fb93 	bl	800c5d4 <__assert_func>
    memset(socket, 0, sizeof(bc95g_socket));
 8012eae:	2000      	movs	r0, #0
 8012eb0:	6020      	str	r0, [r4, #0]
 8012eb2:	6060      	str	r0, [r4, #4]
 8012eb4:	60a0      	str	r0, [r4, #8]
    return 0;
 8012eb6:	e7ed      	b.n	8012e94 <bc95g_socket_close+0x2a>

08012eb8 <bc95g_socket_tx_mbuf>:
int bc95g_socket_tx(struct bc95g *dev, struct bc95g_socket *socket, const char *host, uint16_t port, const uint8_t *data, uint16_t length, uint8_t sequence) {
    //  Transmit the buffer through the socket.  `length` is the number of bytes in `data`.  `sequence` is a running message sequence number 1 to 255.  Return number of bytes transmitted.
    return send_tx_command(dev, socket, host, port, data, length, sequence, NULL);
}

int bc95g_socket_tx_mbuf(struct bc95g *dev, struct bc95g_socket *socket, const char *host, uint16_t port, uint8_t sequence, struct os_mbuf *mbuf) {
 8012eb8:	b530      	push	{r4, r5, lr}
 8012eba:	b085      	sub	sp, #20
 8012ebc:	9c09      	ldr	r4, [sp, #36]	; 0x24
    //  Transmit the chain of mbufs through the socket.  `sequence` is a running message sequence number 1 to 255.  Return number of bytes transmitted.
    uint16_t length = OS_MBUF_PKTLEN(mbuf);  //  Length of the mbuf chain.
 8012ebe:	8a25      	ldrh	r5, [r4, #16]
    return send_tx_command(dev, socket, host, port, NULL, length, sequence, mbuf);
 8012ec0:	9403      	str	r4, [sp, #12]
 8012ec2:	f89d 4020 	ldrb.w	r4, [sp, #32]
 8012ec6:	9402      	str	r4, [sp, #8]
 8012ec8:	9501      	str	r5, [sp, #4]
 8012eca:	2400      	movs	r4, #0
 8012ecc:	9400      	str	r4, [sp, #0]
 8012ece:	f7ff fee1 	bl	8012c94 <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf>
}
 8012ed2:	b005      	add	sp, #20
 8012ed4:	bd30      	pop	{r4, r5, pc}

08012ed6 <_ZL10oc_ep_sizePK11oc_endpoint>:
}

static uint8_t oc_ep_size(const struct oc_endpoint *oe) {
    //  Return the size of the endpoint.  OIC will allocate space to store this endpoint in the transmitted mbuf.
    return sizeof(struct bc95g_endpoint);
}
 8012ed6:	200c      	movs	r0, #12
 8012ed8:	4770      	bx	lr

08012eda <_ZL14oc_ep_has_connPK11oc_endpoint>:

static int oc_ep_has_conn(const struct oc_endpoint *oe) {
    //  Return true if the endpoint is connected.  We always return false.
    //  console_printf("oc_ep_has_conn\n");
    return 0;
}
 8012eda:	2000      	movs	r0, #0
 8012edc:	4770      	bx	lr

08012ede <_ZL7oc_initv>:

static int oc_init(void) {
    //  Init the endpoint.
    //  console_printf("oc_init\n");
    return 0;
}
 8012ede:	2000      	movs	r0, #0
 8012ee0:	4770      	bx	lr

08012ee2 <_ZL11oc_shutdownv>:

static void oc_shutdown(void) {
    //  Shutdown the endpoint.
    //  console_printf("oc_shutdown\n");
}
 8012ee2:	4770      	bx	lr

08012ee4 <_ZL9oc_ep_strPciPK11oc_endpoint>:
static char *oc_ep_str(char *ptr, int maxlen, const struct oc_endpoint *oe) {
 8012ee4:	b510      	push	{r4, lr}
 8012ee6:	4604      	mov	r4, r0
    console_printf("NBT str\n");
 8012ee8:	4806      	ldr	r0, [pc, #24]	; (8012f04 <_ZL9oc_ep_strPciPK11oc_endpoint+0x20>)
 8012eea:	f7f7 fb7f 	bl	800a5ec <console_printf>
    strcpy(ptr, "TODO:oc_ep_str");
 8012eee:	4b06      	ldr	r3, [pc, #24]	; (8012f08 <_ZL9oc_ep_strPciPK11oc_endpoint+0x24>)
 8012ef0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012ef2:	6020      	str	r0, [r4, #0]
 8012ef4:	6061      	str	r1, [r4, #4]
 8012ef6:	60a2      	str	r2, [r4, #8]
 8012ef8:	881a      	ldrh	r2, [r3, #0]
 8012efa:	789b      	ldrb	r3, [r3, #2]
 8012efc:	81a2      	strh	r2, [r4, #12]
 8012efe:	73a3      	strb	r3, [r4, #14]
}
 8012f00:	4620      	mov	r0, r4
 8012f02:	bd10      	pop	{r4, pc}
 8012f04:	08018760 	.word	0x08018760
 8012f08:	0801876c 	.word	0x0801876c

08012f0c <_ZL11oc_tx_ucastP7os_mbuf>:
static void oc_tx_ucast(struct os_mbuf *m) {
 8012f0c:	b530      	push	{r4, r5, lr}
 8012f0e:	b085      	sub	sp, #20
    assert(m);  assert(OS_MBUF_USRHDR_LEN(m) >= sizeof(struct bc95g_endpoint));
 8012f10:	2800      	cmp	r0, #0
 8012f12:	d06c      	beq.n	8012fee <_ZL11oc_tx_ucastP7os_mbuf+0xe2>
 8012f14:	4604      	mov	r4, r0
 8012f16:	7943      	ldrb	r3, [r0, #5]
 8012f18:	3b08      	subs	r3, #8
 8012f1a:	2b0b      	cmp	r3, #11
 8012f1c:	d96d      	bls.n	8012ffa <_ZL11oc_tx_ucastP7os_mbuf+0xee>
    assert(endpoint);  assert(endpoint->host);  assert(endpoint->port);  //  Host and endpoint should be in the endpoint.
 8012f1e:	f110 0f18 	cmn.w	r0, #24
 8012f22:	d070      	beq.n	8013006 <_ZL11oc_tx_ucastP7os_mbuf+0xfa>
 8012f24:	69c1      	ldr	r1, [r0, #28]
 8012f26:	2900      	cmp	r1, #0
 8012f28:	d073      	beq.n	8013012 <_ZL11oc_tx_ucastP7os_mbuf+0x106>
 8012f2a:	8c02      	ldrh	r2, [r0, #32]
 8012f2c:	2a00      	cmp	r2, #0
 8012f2e:	d076      	beq.n	801301e <_ZL11oc_tx_ucastP7os_mbuf+0x112>
    assert(server);  assert(endpoint->host == server->endpoint.host);  assert(endpoint->port == server->endpoint.port);  //  We only support 1 server connection. Must match the message endpoint.
 8012f30:	4b5e      	ldr	r3, [pc, #376]	; (80130ac <_ZL11oc_tx_ucastP7os_mbuf+0x1a0>)
 8012f32:	681b      	ldr	r3, [r3, #0]
 8012f34:	2b00      	cmp	r3, #0
 8012f36:	d078      	beq.n	801302a <_ZL11oc_tx_ucastP7os_mbuf+0x11e>
 8012f38:	6858      	ldr	r0, [r3, #4]
 8012f3a:	4281      	cmp	r1, r0
 8012f3c:	d17a      	bne.n	8013034 <_ZL11oc_tx_ucastP7os_mbuf+0x128>
 8012f3e:	891b      	ldrh	r3, [r3, #8]
 8012f40:	429a      	cmp	r2, r3
 8012f42:	d17d      	bne.n	8013040 <_ZL11oc_tx_ucastP7os_mbuf+0x134>
    assert(network_device);
 8012f44:	4b5a      	ldr	r3, [pc, #360]	; (80130b0 <_ZL11oc_tx_ucastP7os_mbuf+0x1a4>)
 8012f46:	681b      	ldr	r3, [r3, #0]
 8012f48:	2b00      	cmp	r3, #0
 8012f4a:	d07f      	beq.n	801304c <_ZL11oc_tx_ucastP7os_mbuf+0x140>
    sequence++;
 8012f4c:	4a59      	ldr	r2, [pc, #356]	; (80130b4 <_ZL11oc_tx_ucastP7os_mbuf+0x1a8>)
 8012f4e:	7813      	ldrb	r3, [r2, #0]
 8012f50:	3301      	adds	r3, #1
 8012f52:	b2db      	uxtb	r3, r3
 8012f54:	7013      	strb	r3, [r2, #0]
    if (sequence == 0) { sequence = 1; }
 8012f56:	b913      	cbnz	r3, 8012f5e <_ZL11oc_tx_ucastP7os_mbuf+0x52>
 8012f58:	4613      	mov	r3, r2
 8012f5a:	2201      	movs	r2, #1
 8012f5c:	701a      	strb	r2, [r3, #0]
    hal_gpio_toggle(LED_BLINK_PIN);
 8012f5e:	200f      	movs	r0, #15
 8012f60:	f7fd fa9e 	bl	80104a0 <hal_gpio_toggle>
        network_is_busy = 1;  //  Tell the Task Scheduler not to sleep (because it causes dropped UART response)
 8012f64:	4b54      	ldr	r3, [pc, #336]	; (80130b8 <_ZL11oc_tx_ucastP7os_mbuf+0x1ac>)
 8012f66:	2201      	movs	r2, #1
 8012f68:	601a      	str	r2, [r3, #0]
        struct bc95g *dev = (struct bc95g *) os_dev_open(network_device, OS_TIMEOUT_NEVER, NULL);  //  network_device is `bc95g_0`
 8012f6a:	2200      	movs	r2, #0
 8012f6c:	f04f 31ff 	mov.w	r1, #4294967295
 8012f70:	4b4f      	ldr	r3, [pc, #316]	; (80130b0 <_ZL11oc_tx_ucastP7os_mbuf+0x1a4>)
 8012f72:	6818      	ldr	r0, [r3, #0]
 8012f74:	f7f9 fe00 	bl	800cb78 <os_dev_open>
        assert(dev != NULL);
 8012f78:	4605      	mov	r5, r0
 8012f7a:	2800      	cmp	r0, #0
 8012f7c:	d06b      	beq.n	8013056 <_ZL11oc_tx_ucastP7os_mbuf+0x14a>
        console_printf("NBT send udp\n");
 8012f7e:	484f      	ldr	r0, [pc, #316]	; (80130bc <_ZL11oc_tx_ucastP7os_mbuf+0x1b0>)
 8012f80:	f7f7 fb34 	bl	800a5ec <console_printf>
        rc = bc95g_attach(dev);
 8012f84:	4628      	mov	r0, r5
 8012f86:	f7ff ff2d 	bl	8012de4 <bc95g_attach>
        assert(rc == 0);
 8012f8a:	2800      	cmp	r0, #0
 8012f8c:	d169      	bne.n	8013062 <_ZL11oc_tx_ucastP7os_mbuf+0x156>
        bc95g_socket *socket = NULL;
 8012f8e:	a904      	add	r1, sp, #16
 8012f90:	2300      	movs	r3, #0
 8012f92:	f841 3d04 	str.w	r3, [r1, #-4]!
        rc = bc95g_socket_open(dev, &socket);
 8012f96:	4628      	mov	r0, r5
 8012f98:	f7ff ff41 	bl	8012e1e <bc95g_socket_open>
        assert(rc == 0);  assert(socket);
 8012f9c:	2800      	cmp	r0, #0
 8012f9e:	d166      	bne.n	801306e <_ZL11oc_tx_ucastP7os_mbuf+0x162>
 8012fa0:	9903      	ldr	r1, [sp, #12]
 8012fa2:	2900      	cmp	r1, #0
 8012fa4:	d069      	beq.n	801307a <_ZL11oc_tx_ucastP7os_mbuf+0x16e>
        rc = bc95g_socket_tx_mbuf(dev, socket, endpoint->host, endpoint->port, sequence, m);
 8012fa6:	69e2      	ldr	r2, [r4, #28]
 8012fa8:	8c23      	ldrh	r3, [r4, #32]
 8012faa:	4842      	ldr	r0, [pc, #264]	; (80130b4 <_ZL11oc_tx_ucastP7os_mbuf+0x1a8>)
 8012fac:	7800      	ldrb	r0, [r0, #0]
 8012fae:	9401      	str	r4, [sp, #4]
 8012fb0:	9000      	str	r0, [sp, #0]
 8012fb2:	4628      	mov	r0, r5
 8012fb4:	f7ff ff80 	bl	8012eb8 <bc95g_socket_tx_mbuf>
        assert(rc > 0);  //  In case of error, try increasing BC95G_TX_BUFFER_SIZE
 8012fb8:	2800      	cmp	r0, #0
 8012fba:	dd64      	ble.n	8013086 <_ZL11oc_tx_ucastP7os_mbuf+0x17a>
        rc = bc95g_socket_close(dev, socket);
 8012fbc:	9903      	ldr	r1, [sp, #12]
 8012fbe:	4628      	mov	r0, r5
 8012fc0:	f7ff ff53 	bl	8012e6a <bc95g_socket_close>
        assert(rc == 0);
 8012fc4:	2800      	cmp	r0, #0
 8012fc6:	d164      	bne.n	8013092 <_ZL11oc_tx_ucastP7os_mbuf+0x186>
        rc = bc95g_detach(dev);
 8012fc8:	4628      	mov	r0, r5
 8012fca:	f7ff ff19 	bl	8012e00 <bc95g_detach>
        os_dev_close((struct os_dev *) dev);
 8012fce:	4628      	mov	r0, r5
 8012fd0:	f7f9 fdf4 	bl	800cbbc <os_dev_close>
        network_is_busy = 0;  //  Tell the Task Scheduler it's OK to sleep.
 8012fd4:	4b38      	ldr	r3, [pc, #224]	; (80130b8 <_ZL11oc_tx_ucastP7os_mbuf+0x1ac>)
 8012fd6:	2200      	movs	r2, #0
 8012fd8:	601a      	str	r2, [r3, #0]
        network_has_transmitted = 1;
 8012fda:	4b39      	ldr	r3, [pc, #228]	; (80130c0 <_ZL11oc_tx_ucastP7os_mbuf+0x1b4>)
 8012fdc:	2201      	movs	r2, #1
 8012fde:	601a      	str	r2, [r3, #0]
    rc = os_mbuf_free_chain(m);  assert(rc == 0);
 8012fe0:	4620      	mov	r0, r4
 8012fe2:	f7f9 ff3b 	bl	800ce5c <os_mbuf_free_chain>
 8012fe6:	2800      	cmp	r0, #0
 8012fe8:	d159      	bne.n	801309e <_ZL11oc_tx_ucastP7os_mbuf+0x192>
}
 8012fea:	b005      	add	sp, #20
 8012fec:	bd30      	pop	{r4, r5, pc}
    assert(m);  assert(OS_MBUF_USRHDR_LEN(m) >= sizeof(struct bc95g_endpoint));
 8012fee:	2300      	movs	r3, #0
 8012ff0:	461a      	mov	r2, r3
 8012ff2:	4619      	mov	r1, r3
 8012ff4:	4618      	mov	r0, r3
 8012ff6:	f7f9 faed 	bl	800c5d4 <__assert_func>
 8012ffa:	2300      	movs	r3, #0
 8012ffc:	461a      	mov	r2, r3
 8012ffe:	4619      	mov	r1, r3
 8013000:	4618      	mov	r0, r3
 8013002:	f7f9 fae7 	bl	800c5d4 <__assert_func>
    assert(endpoint);  assert(endpoint->host);  assert(endpoint->port);  //  Host and endpoint should be in the endpoint.
 8013006:	2300      	movs	r3, #0
 8013008:	461a      	mov	r2, r3
 801300a:	4619      	mov	r1, r3
 801300c:	4618      	mov	r0, r3
 801300e:	f7f9 fae1 	bl	800c5d4 <__assert_func>
 8013012:	2300      	movs	r3, #0
 8013014:	461a      	mov	r2, r3
 8013016:	4619      	mov	r1, r3
 8013018:	4618      	mov	r0, r3
 801301a:	f7f9 fadb 	bl	800c5d4 <__assert_func>
 801301e:	2300      	movs	r3, #0
 8013020:	461a      	mov	r2, r3
 8013022:	4619      	mov	r1, r3
 8013024:	4618      	mov	r0, r3
 8013026:	f7f9 fad5 	bl	800c5d4 <__assert_func>
    assert(server);  assert(endpoint->host == server->endpoint.host);  assert(endpoint->port == server->endpoint.port);  //  We only support 1 server connection. Must match the message endpoint.
 801302a:	461a      	mov	r2, r3
 801302c:	4619      	mov	r1, r3
 801302e:	4618      	mov	r0, r3
 8013030:	f7f9 fad0 	bl	800c5d4 <__assert_func>
 8013034:	2300      	movs	r3, #0
 8013036:	461a      	mov	r2, r3
 8013038:	4619      	mov	r1, r3
 801303a:	4618      	mov	r0, r3
 801303c:	f7f9 faca 	bl	800c5d4 <__assert_func>
 8013040:	2300      	movs	r3, #0
 8013042:	461a      	mov	r2, r3
 8013044:	4619      	mov	r1, r3
 8013046:	4618      	mov	r0, r3
 8013048:	f7f9 fac4 	bl	800c5d4 <__assert_func>
    assert(network_device);
 801304c:	461a      	mov	r2, r3
 801304e:	4619      	mov	r1, r3
 8013050:	4618      	mov	r0, r3
 8013052:	f7f9 fabf 	bl	800c5d4 <__assert_func>
        assert(dev != NULL);
 8013056:	2300      	movs	r3, #0
 8013058:	461a      	mov	r2, r3
 801305a:	4619      	mov	r1, r3
 801305c:	4618      	mov	r0, r3
 801305e:	f7f9 fab9 	bl	800c5d4 <__assert_func>
        assert(rc == 0);
 8013062:	2300      	movs	r3, #0
 8013064:	461a      	mov	r2, r3
 8013066:	4619      	mov	r1, r3
 8013068:	4618      	mov	r0, r3
 801306a:	f7f9 fab3 	bl	800c5d4 <__assert_func>
        assert(rc == 0);  assert(socket);
 801306e:	2300      	movs	r3, #0
 8013070:	461a      	mov	r2, r3
 8013072:	4619      	mov	r1, r3
 8013074:	4618      	mov	r0, r3
 8013076:	f7f9 faad 	bl	800c5d4 <__assert_func>
 801307a:	2300      	movs	r3, #0
 801307c:	461a      	mov	r2, r3
 801307e:	4619      	mov	r1, r3
 8013080:	4618      	mov	r0, r3
 8013082:	f7f9 faa7 	bl	800c5d4 <__assert_func>
        assert(rc > 0);  //  In case of error, try increasing BC95G_TX_BUFFER_SIZE
 8013086:	2300      	movs	r3, #0
 8013088:	461a      	mov	r2, r3
 801308a:	4619      	mov	r1, r3
 801308c:	4618      	mov	r0, r3
 801308e:	f7f9 faa1 	bl	800c5d4 <__assert_func>
        assert(rc == 0);
 8013092:	2300      	movs	r3, #0
 8013094:	461a      	mov	r2, r3
 8013096:	4619      	mov	r1, r3
 8013098:	4618      	mov	r0, r3
 801309a:	f7f9 fa9b 	bl	800c5d4 <__assert_func>
    rc = os_mbuf_free_chain(m);  assert(rc == 0);
 801309e:	2300      	movs	r3, #0
 80130a0:	461a      	mov	r2, r3
 80130a2:	4619      	mov	r1, r3
 80130a4:	4618      	mov	r0, r3
 80130a6:	f7f9 fa95 	bl	800c5d4 <__assert_func>
 80130aa:	bf00      	nop
 80130ac:	2000355c 	.word	0x2000355c
 80130b0:	20003558 	.word	0x20003558
 80130b4:	20003560 	.word	0x20003560
 80130b8:	200006d8 	.word	0x200006d8
 80130bc:	08018750 	.word	0x08018750
 80130c0:	200006d4 	.word	0x200006d4

080130c4 <init_bc95g_endpoint>:
int init_bc95g_endpoint(struct bc95g_endpoint *endpoint, const char *host, uint16_t port) {
 80130c4:	b410      	push	{r4}
    endpoint->ep.oe_type = transport_id;  //  Populate our transport ID so that OIC will call our functions.
 80130c6:	7803      	ldrb	r3, [r0, #0]
 80130c8:	4c06      	ldr	r4, [pc, #24]	; (80130e4 <init_bc95g_endpoint+0x20>)
 80130ca:	7824      	ldrb	r4, [r4, #0]
 80130cc:	f364 0302 	bfi	r3, r4, #0, #3
    endpoint->ep.oe_flags = 0;
 80130d0:	f36f 03c7 	bfc	r3, #3, #5
 80130d4:	7003      	strb	r3, [r0, #0]
    if (host) { 
 80130d6:	b109      	cbz	r1, 80130dc <init_bc95g_endpoint+0x18>
        endpoint->host = host;
 80130d8:	6041      	str	r1, [r0, #4]
        endpoint->port = port;
 80130da:	8102      	strh	r2, [r0, #8]
}
 80130dc:	2000      	movs	r0, #0
 80130de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80130e2:	4770      	bx	lr
 80130e4:	20000341 	.word	0x20000341

080130e8 <init_bc95g_server>:
int init_bc95g_server(struct bc95g_server *server, const char *host, uint16_t port) {
 80130e8:	b510      	push	{r4, lr}
 80130ea:	4604      	mov	r4, r0
    int rc = init_bc95g_endpoint(&server->endpoint, host, port);  assert(rc == 0);
 80130ec:	f7ff ffea 	bl	80130c4 <init_bc95g_endpoint>
 80130f0:	b910      	cbnz	r0, 80130f8 <init_bc95g_server+0x10>
    server->handle = (struct oc_server_handle *) server;
 80130f2:	60e4      	str	r4, [r4, #12]
}
 80130f4:	2000      	movs	r0, #0
 80130f6:	bd10      	pop	{r4, pc}
    int rc = init_bc95g_endpoint(&server->endpoint, host, port);  assert(rc == 0);
 80130f8:	2300      	movs	r3, #0
 80130fa:	461a      	mov	r2, r3
 80130fc:	4619      	mov	r1, r3
 80130fe:	4618      	mov	r0, r3
 8013100:	f7f9 fa68 	bl	800c5d4 <__assert_func>

08013104 <bc95g_register_transport>:
int bc95g_register_transport(const char *network_device0, struct bc95g_server *server0, const char *host, uint16_t port) {
 8013104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    assert(network_device0);  assert(server0);
 8013108:	b388      	cbz	r0, 801316e <bc95g_register_transport+0x6a>
 801310a:	460c      	mov	r4, r1
 801310c:	4617      	mov	r7, r2
 801310e:	4698      	mov	r8, r3
 8013110:	4605      	mov	r5, r0
 8013112:	b391      	cbz	r1, 801317a <bc95g_register_transport+0x76>
        network_is_busy = 1;  //  Tell the Task Scheduler not to sleep (because it causes dropped UART response)
 8013114:	4b25      	ldr	r3, [pc, #148]	; (80131ac <bc95g_register_transport+0xa8>)
 8013116:	2201      	movs	r2, #1
 8013118:	601a      	str	r2, [r3, #0]
        struct bc95g *dev = (struct bc95g *) os_dev_open(network_device0, OS_TIMEOUT_NEVER, NULL);  //  BC95G_DEVICE is "bc95g_0"
 801311a:	2200      	movs	r2, #0
 801311c:	f04f 31ff 	mov.w	r1, #4294967295
 8013120:	f7f9 fd2a 	bl	800cb78 <os_dev_open>
        assert(dev != NULL);
 8013124:	4606      	mov	r6, r0
 8013126:	b370      	cbz	r0, 8013186 <bc95g_register_transport+0x82>
        transport_id = oc_transport_register(&transport);
 8013128:	4821      	ldr	r0, [pc, #132]	; (80131b0 <bc95g_register_transport+0xac>)
 801312a:	f7f8 fc19 	bl	800b960 <oc_transport_register>
 801312e:	4b21      	ldr	r3, [pc, #132]	; (80131b4 <bc95g_register_transport+0xb0>)
 8013130:	7018      	strb	r0, [r3, #0]
        int rc = init_bc95g_server(server0, host, port);
 8013132:	4642      	mov	r2, r8
 8013134:	4639      	mov	r1, r7
 8013136:	4620      	mov	r0, r4
 8013138:	f7ff ffd6 	bl	80130e8 <init_bc95g_server>
        assert(rc == 0);
 801313c:	bb48      	cbnz	r0, 8013192 <bc95g_register_transport+0x8e>
        if (!power_standby_wakeup()) {
 801313e:	f7f8 fca9 	bl	800ba94 <power_standby_wakeup>
 8013142:	b918      	cbnz	r0, 801314c <bc95g_register_transport+0x48>
            rc = bc95g_connect(dev);
 8013144:	4630      	mov	r0, r6
 8013146:	f7ff fe3f 	bl	8012dc8 <bc95g_connect>
            assert(rc == 0);
 801314a:	bb40      	cbnz	r0, 801319e <bc95g_register_transport+0x9a>
        network_device = network_device0;
 801314c:	4b1a      	ldr	r3, [pc, #104]	; (80131b8 <bc95g_register_transport+0xb4>)
 801314e:	601d      	str	r5, [r3, #0]
        server = server0;
 8013150:	4b1a      	ldr	r3, [pc, #104]	; (80131bc <bc95g_register_transport+0xb8>)
 8013152:	601c      	str	r4, [r3, #0]
        os_dev_close((struct os_dev *) dev);
 8013154:	4630      	mov	r0, r6
 8013156:	f7f9 fd31 	bl	800cbbc <os_dev_close>
        network_is_busy = 0;  //  Tell the Task Scheduler it's OK to sleep.
 801315a:	2400      	movs	r4, #0
 801315c:	4b13      	ldr	r3, [pc, #76]	; (80131ac <bc95g_register_transport+0xa8>)
 801315e:	601c      	str	r4, [r3, #0]
    hal_gpio_init_out(LED_BLINK_PIN, 1);
 8013160:	2101      	movs	r1, #1
 8013162:	200f      	movs	r0, #15
 8013164:	f7fd f962 	bl	801042c <hal_gpio_init_out>
}
 8013168:	4620      	mov	r0, r4
 801316a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert(network_device0);  assert(server0);
 801316e:	2300      	movs	r3, #0
 8013170:	461a      	mov	r2, r3
 8013172:	4619      	mov	r1, r3
 8013174:	4618      	mov	r0, r3
 8013176:	f7f9 fa2d 	bl	800c5d4 <__assert_func>
 801317a:	2300      	movs	r3, #0
 801317c:	461a      	mov	r2, r3
 801317e:	4619      	mov	r1, r3
 8013180:	4618      	mov	r0, r3
 8013182:	f7f9 fa27 	bl	800c5d4 <__assert_func>
        assert(dev != NULL);
 8013186:	2300      	movs	r3, #0
 8013188:	461a      	mov	r2, r3
 801318a:	4619      	mov	r1, r3
 801318c:	4618      	mov	r0, r3
 801318e:	f7f9 fa21 	bl	800c5d4 <__assert_func>
        assert(rc == 0);
 8013192:	2300      	movs	r3, #0
 8013194:	461a      	mov	r2, r3
 8013196:	4619      	mov	r1, r3
 8013198:	4618      	mov	r0, r3
 801319a:	f7f9 fa1b 	bl	800c5d4 <__assert_func>
            assert(rc == 0);
 801319e:	2300      	movs	r3, #0
 80131a0:	461a      	mov	r2, r3
 80131a2:	4619      	mov	r1, r3
 80131a4:	4618      	mov	r0, r3
 80131a6:	f7f9 fa15 	bl	800c5d4 <__assert_func>
 80131aa:	bf00      	nop
 80131ac:	200006d8 	.word	0x200006d8
 80131b0:	0801877c 	.word	0x0801877c
 80131b4:	20000341 	.word	0x20000341
 80131b8:	20003558 	.word	0x20003558
 80131bc:	2000355c 	.word	0x2000355c

080131c0 <_okfailed>:

const char *_nbt = "NBT ";  //  Trailer for console output
int debug_bc95g = 0;

const char *_okfailed(int ok) {
    if (ok) { return " OK\n"; }
 80131c0:	b908      	cbnz	r0, 80131c6 <_okfailed+0x6>
    return " FAILED\n";
 80131c2:	4802      	ldr	r0, [pc, #8]	; (80131cc <_okfailed+0xc>)
}
 80131c4:	4770      	bx	lr
    if (ok) { return " OK\n"; }
 80131c6:	4802      	ldr	r0, [pc, #8]	; (80131d0 <_okfailed+0x10>)
 80131c8:	4770      	bx	lr
 80131ca:	bf00      	nop
 80131cc:	080187b0 	.word	0x080187b0
 80131d0:	080187a8 	.word	0x080187a8

080131d4 <_log>:

void _log(const char *func, int ok) {
 80131d4:	b538      	push	{r3, r4, r5, lr}
 80131d6:	4605      	mov	r5, r0
    console_printf("%s%s%s", _nbt, func, _okfailed(ok));
 80131d8:	4b06      	ldr	r3, [pc, #24]	; (80131f4 <_log+0x20>)
 80131da:	681c      	ldr	r4, [r3, #0]
 80131dc:	4608      	mov	r0, r1
 80131de:	f7ff ffef 	bl	80131c0 <_okfailed>
 80131e2:	4603      	mov	r3, r0
 80131e4:	462a      	mov	r2, r5
 80131e6:	4621      	mov	r1, r4
 80131e8:	4803      	ldr	r0, [pc, #12]	; (80131f8 <_log+0x24>)
 80131ea:	f7f7 f9ff 	bl	800a5ec <console_printf>
    console_flush();
 80131ee:	f7f7 f8ed 	bl	800a3cc <console_flush>
}
 80131f2:	bd38      	pop	{r3, r4, r5, pc}
 80131f4:	20000344 	.word	0x20000344
 80131f8:	080187a0 	.word	0x080187a0

080131fc <_ZN8ATParser4initER14BufferedSerialPciPKcib>:
//  e.g.  debug_if(dbg_on, "AT> %s\r\n", _buffer)
#define debug_if(dbg_on, format, arg) console_printf(format, arg)
//  #define debug_if(dbg_on, format, arg) {}

void ATParser::init(BufferedSerial &serial, char *buffer, int buffer_size, const char *delimiter, int timeout, bool debug)
{
 80131fc:	b510      	push	{r4, lr}
 80131fe:	4604      	mov	r4, r0
 8013200:	9802      	ldr	r0, [sp, #8]
    _serial = &serial;
 8013202:	6021      	str	r1, [r4, #0]
    _buffer = buffer;
 8013204:	6062      	str	r2, [r4, #4]
    _buffer_size = buffer_size; 
 8013206:	60a3      	str	r3, [r4, #8]
        _timeout = timeout;
 8013208:	9b03      	ldr	r3, [sp, #12]
 801320a:	60e3      	str	r3, [r4, #12]
        _delimiter = delimiter;
 801320c:	6120      	str	r0, [r4, #16]
        _delim_size = strlen(delimiter);
 801320e:	f7fa feec 	bl	800dfea <strlen>
 8013212:	6160      	str	r0, [r4, #20]
        dbg_on = (on) ? 1 : 0;
 8013214:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8013218:	7623      	strb	r3, [r4, #24]
    setTimeout(timeout);
    setDelimiter(delimiter);
    debugOn(debug);
    for (int k = 0; k < MAX_OOBS; k++) { _oobs[k].len = 0; }  //  Init the callbacks.
 801321a:	2300      	movs	r3, #0
 801321c:	2b01      	cmp	r3, #1
 801321e:	dc05      	bgt.n	801322c <_ZN8ATParser4initER14BufferedSerialPciPKcib+0x30>
 8013220:	eb04 1203 	add.w	r2, r4, r3, lsl #4
 8013224:	2100      	movs	r1, #0
 8013226:	61d1      	str	r1, [r2, #28]
 8013228:	3301      	adds	r3, #1
 801322a:	e7f7      	b.n	801321c <_ZN8ATParser4initER14BufferedSerialPciPKcib+0x20>
}
 801322c:	bd10      	pop	{r4, pc}

0801322e <_ZN8ATParser4putcEc>:

// getc/putc handling with timeouts
int ATParser::putc(char c)
{
 801322e:	b508      	push	{r3, lr}
    //  TODO: Handle timeout.
    return _serial->putc(c);
 8013230:	6800      	ldr	r0, [r0, #0]
 8013232:	f000 fa7b 	bl	801372c <_ZN14BufferedSerial4putcEi>
}
 8013236:	bd08      	pop	{r3, pc}

08013238 <_ZN8ATParser5fgetcEv>:

int ATParser::getc()
{
 8013238:	b508      	push	{r3, lr}
    //  Return the next received byte.  If no data, block until the timeout.
    return _serial->getc(_timeout);
 801323a:	68c1      	ldr	r1, [r0, #12]
 801323c:	6800      	ldr	r0, [r0, #0]
 801323e:	f000 f9e3 	bl	8013608 <_ZN14BufferedSerial5fgetcEi>
}
 8013242:	bd08      	pop	{r3, pc}

08013244 <_ZN8ATParser5flushEv>:

int ATParser::flush()
{
 8013244:	b510      	push	{r4, lr}
 8013246:	4604      	mov	r4, r0
    while (_serial->readable()) {
 8013248:	6820      	ldr	r0, [r4, #0]
 801324a:	f000 f9d7 	bl	80135fc <_ZN14BufferedSerial8readableEv>
 801324e:	b120      	cbz	r0, 801325a <_ZN8ATParser5flushEv+0x16>
        _serial->getc(0);  //  Do not wait for data to be available.
 8013250:	2100      	movs	r1, #0
 8013252:	6820      	ldr	r0, [r4, #0]
 8013254:	f000 f9d8 	bl	8013608 <_ZN14BufferedSerial5fgetcEi>
    while (_serial->readable()) {
 8013258:	e7f6      	b.n	8013248 <_ZN8ATParser5flushEv+0x4>
    }
    return 0;
}
 801325a:	2000      	movs	r0, #0
 801325c:	bd10      	pop	{r4, pc}

0801325e <_ZN8ATParser5writeEPKci>:


// read/write handling with timeouts
int ATParser::write(const char *data, int size)
{
 801325e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013260:	4607      	mov	r7, r0
 8013262:	460e      	mov	r6, r1
 8013264:	4615      	mov	r5, r2
    int i = 0;
 8013266:	2400      	movs	r4, #0
    for ( ; i < size; i++) {
 8013268:	42ac      	cmp	r4, r5
 801326a:	da09      	bge.n	8013280 <_ZN8ATParser5writeEPKci+0x22>
        if (putc(data[i]) < 0) {
 801326c:	5d31      	ldrb	r1, [r6, r4]
 801326e:	4638      	mov	r0, r7
 8013270:	f7ff ffdd 	bl	801322e <_ZN8ATParser4putcEc>
 8013274:	2800      	cmp	r0, #0
 8013276:	db01      	blt.n	801327c <_ZN8ATParser5writeEPKci+0x1e>
    for ( ; i < size; i++) {
 8013278:	3401      	adds	r4, #1
 801327a:	e7f5      	b.n	8013268 <_ZN8ATParser5writeEPKci+0xa>
            return -1;
 801327c:	f04f 34ff 	mov.w	r4, #4294967295
        }
    }
    return i;
}
 8013280:	4620      	mov	r0, r4
 8013282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013284 <_ZN8ATParser7vprintfEPKcSt9__va_list>:
}


// printf/scanf handling
int ATParser::vprintf(const char *format, va_list args)
{
 8013284:	b538      	push	{r3, r4, r5, lr}
 8013286:	4605      	mov	r5, r0
    if (vsprintf(_buffer, format, args) < 0) {
 8013288:	6840      	ldr	r0, [r0, #4]
 801328a:	f001 ff68 	bl	801515e <vsprintf>
 801328e:	2800      	cmp	r0, #0
 8013290:	db0a      	blt.n	80132a8 <_ZN8ATParser7vprintfEPKcSt9__va_list+0x24>
        return false;
    }
    int i = 0;
 8013292:	2400      	movs	r4, #0
    for ( ; _buffer[i]; i++) {
 8013294:	686b      	ldr	r3, [r5, #4]
 8013296:	5d19      	ldrb	r1, [r3, r4]
 8013298:	b151      	cbz	r1, 80132b0 <_ZN8ATParser7vprintfEPKcSt9__va_list+0x2c>
        if (putc(_buffer[i]) < 0) {
 801329a:	4628      	mov	r0, r5
 801329c:	f7ff ffc7 	bl	801322e <_ZN8ATParser4putcEc>
 80132a0:	2800      	cmp	r0, #0
 80132a2:	db03      	blt.n	80132ac <_ZN8ATParser7vprintfEPKcSt9__va_list+0x28>
    for ( ; _buffer[i]; i++) {
 80132a4:	3401      	adds	r4, #1
 80132a6:	e7f5      	b.n	8013294 <_ZN8ATParser7vprintfEPKcSt9__va_list+0x10>
        return false;
 80132a8:	2400      	movs	r4, #0
 80132aa:	e001      	b.n	80132b0 <_ZN8ATParser7vprintfEPKcSt9__va_list+0x2c>
            return -1;
 80132ac:	f04f 34ff 	mov.w	r4, #4294967295
        }
    }
    return i;
}
 80132b0:	4620      	mov	r0, r4
 80132b2:	bd38      	pop	{r3, r4, r5, pc}

080132b4 <_ZN8ATParser5vsendEPKcSt9__va_list>:
}


// Command parsing with line handling
bool ATParser::vsend(const char *command, va_list args)
{
 80132b4:	b538      	push	{r3, r4, r5, lr}
 80132b6:	4604      	mov	r4, r0
    // Create and send command
    if (vsprintf(_buffer, command, args) < 0) {
 80132b8:	6840      	ldr	r0, [r0, #4]
 80132ba:	f001 ff50 	bl	801515e <vsprintf>
 80132be:	2800      	cmp	r0, #0
 80132c0:	db1b      	blt.n	80132fa <_ZN8ATParser5vsendEPKcSt9__va_list+0x46>
        return false;
    }
    for (int i = 0; _buffer[i]; i++) {
 80132c2:	2500      	movs	r5, #0
 80132c4:	6863      	ldr	r3, [r4, #4]
 80132c6:	5d59      	ldrb	r1, [r3, r5]
 80132c8:	b131      	cbz	r1, 80132d8 <_ZN8ATParser5vsendEPKcSt9__va_list+0x24>
        if (putc(_buffer[i]) < 0) {
 80132ca:	4620      	mov	r0, r4
 80132cc:	f7ff ffaf 	bl	801322e <_ZN8ATParser4putcEc>
 80132d0:	2800      	cmp	r0, #0
 80132d2:	db14      	blt.n	80132fe <_ZN8ATParser5vsendEPKcSt9__va_list+0x4a>
    for (int i = 0; _buffer[i]; i++) {
 80132d4:	3501      	adds	r5, #1
 80132d6:	e7f5      	b.n	80132c4 <_ZN8ATParser5vsendEPKcSt9__va_list+0x10>
            return false;
        }
    }

    // Finish with newline
    for (int i = 0; _delimiter[i]; i++) {
 80132d8:	2500      	movs	r5, #0
 80132da:	6923      	ldr	r3, [r4, #16]
 80132dc:	5d59      	ldrb	r1, [r3, r5]
 80132de:	b131      	cbz	r1, 80132ee <_ZN8ATParser5vsendEPKcSt9__va_list+0x3a>
        if (putc(_delimiter[i]) < 0) {
 80132e0:	4620      	mov	r0, r4
 80132e2:	f7ff ffa4 	bl	801322e <_ZN8ATParser4putcEc>
 80132e6:	2800      	cmp	r0, #0
 80132e8:	db0b      	blt.n	8013302 <_ZN8ATParser5vsendEPKcSt9__va_list+0x4e>
    for (int i = 0; _delimiter[i]; i++) {
 80132ea:	3501      	adds	r5, #1
 80132ec:	e7f5      	b.n	80132da <_ZN8ATParser5vsendEPKcSt9__va_list+0x26>
            return false;
        }
    }

    debug_if(dbg_on, "AT> %s\r\n", _buffer);
 80132ee:	6861      	ldr	r1, [r4, #4]
 80132f0:	4805      	ldr	r0, [pc, #20]	; (8013308 <_ZN8ATParser5vsendEPKcSt9__va_list+0x54>)
 80132f2:	f7f7 f97b 	bl	800a5ec <console_printf>
    return true;
 80132f6:	2001      	movs	r0, #1
 80132f8:	e002      	b.n	8013300 <_ZN8ATParser5vsendEPKcSt9__va_list+0x4c>
        return false;
 80132fa:	2000      	movs	r0, #0
 80132fc:	e000      	b.n	8013300 <_ZN8ATParser5vsendEPKcSt9__va_list+0x4c>
            return false;
 80132fe:	2000      	movs	r0, #0
}
 8013300:	bd38      	pop	{r3, r4, r5, pc}
            return false;
 8013302:	2000      	movs	r0, #0
 8013304:	e7fc      	b.n	8013300 <_ZN8ATParser5vsendEPKcSt9__va_list+0x4c>
 8013306:	bf00      	nop
 8013308:	0801882c 	.word	0x0801882c

0801330c <_ZN8ATParser5vrecvEPKcSt9__va_list>:

bool ATParser::vrecv(const char *response, va_list args)
{
 801330c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013310:	b087      	sub	sp, #28
 8013312:	4605      	mov	r5, r0
 8013314:	460f      	mov	r7, r1
 8013316:	9201      	str	r2, [sp, #4]
    // Iterate through each line in the expected response
    while (response[0]) {
 8013318:	783b      	ldrb	r3, [r7, #0]
 801331a:	2b00      	cmp	r3, #0
 801331c:	f000 80e7 	beq.w	80134ee <_ZN8ATParser5vrecvEPKcSt9__va_list+0x1e2>
        // Since response is const, we need to copy it into our buffer to
        // add the line's null terminator and clobber value-matches with asterisks.
        //
        // We just use the beginning of the buffer to avoid unnecessary allocations.
        int i = 0;
        int offset = 0;
 8013320:	f04f 0800 	mov.w	r8, #0
        int i = 0;
 8013324:	4644      	mov	r4, r8
 8013326:	e004      	b.n	8013332 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x26>
            } else if (response[i] == '%' && response[i+1] != '%' && response[i+1] != '*') {
                _buffer[offset++] = '%';
                _buffer[offset++] = '*';
                i++;
            } else {
                _buffer[offset++] = response[i++];
 8013328:	686b      	ldr	r3, [r5, #4]
 801332a:	f803 6008 	strb.w	r6, [r3, r8]
 801332e:	f108 0801 	add.w	r8, r8, #1
        while (response[i]) {
 8013332:	46a1      	mov	r9, r4
 8013334:	5d3e      	ldrb	r6, [r7, r4]
 8013336:	b1e6      	cbz	r6, 8013372 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x66>
            if (memcmp(&response[i+1-_delim_size], _delimiter, _delim_size) == 0) {
 8013338:	3401      	adds	r4, #1
 801333a:	696a      	ldr	r2, [r5, #20]
 801333c:	1aa0      	subs	r0, r4, r2
 801333e:	6929      	ldr	r1, [r5, #16]
 8013340:	4438      	add	r0, r7
 8013342:	f7fa fde7 	bl	800df14 <memcmp>
 8013346:	b1a0      	cbz	r0, 8013372 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x66>
            } else if (response[i] == '%' && response[i+1] != '%' && response[i+1] != '*') {
 8013348:	2e25      	cmp	r6, #37	; 0x25
 801334a:	d1ed      	bne.n	8013328 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x1c>
 801334c:	44b9      	add	r9, r7
 801334e:	f899 3001 	ldrb.w	r3, [r9, #1]
 8013352:	2b25      	cmp	r3, #37	; 0x25
 8013354:	d0e8      	beq.n	8013328 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x1c>
 8013356:	2b2a      	cmp	r3, #42	; 0x2a
 8013358:	d0e6      	beq.n	8013328 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x1c>
                _buffer[offset++] = '%';
 801335a:	686a      	ldr	r2, [r5, #4]
 801335c:	f108 0301 	add.w	r3, r8, #1
 8013360:	2125      	movs	r1, #37	; 0x25
 8013362:	f802 1008 	strb.w	r1, [r2, r8]
                _buffer[offset++] = '*';
 8013366:	686a      	ldr	r2, [r5, #4]
 8013368:	212a      	movs	r1, #42	; 0x2a
 801336a:	54d1      	strb	r1, [r2, r3]
 801336c:	f108 0802 	add.w	r8, r8, #2
                i++;
 8013370:	e7df      	b.n	8013332 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x26>
        }

        // Scanf has very poor support for catching errors
        // fortunately, we can abuse the %n specifier to determine
        // if the entire string was matched.
        _buffer[offset++] = '%';
 8013372:	686a      	ldr	r2, [r5, #4]
 8013374:	f108 0301 	add.w	r3, r8, #1
 8013378:	2125      	movs	r1, #37	; 0x25
 801337a:	f802 1008 	strb.w	r1, [r2, r8]
        _buffer[offset++] = 'n';
 801337e:	6869      	ldr	r1, [r5, #4]
 8013380:	f108 0202 	add.w	r2, r8, #2
 8013384:	206e      	movs	r0, #110	; 0x6e
 8013386:	54c8      	strb	r0, [r1, r3]
        _buffer[offset++] = 0;
 8013388:	6869      	ldr	r1, [r5, #4]
 801338a:	f108 0603 	add.w	r6, r8, #3
 801338e:	2300      	movs	r3, #0
 8013390:	548b      	strb	r3, [r1, r2]
        // format string that only stores the matched characters (%n).
        // The other reads in the actual matched values.
        //
        // We keep trying the match until we succeed or some other error
        // derails us.
        int j = 0, last_count = -1; char *last_scan = _buffer;
 8013392:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8013396:	469b      	mov	fp, r3

        while (true) {
            // Receive next character
            int c = getc();
 8013398:	4628      	mov	r0, r5
 801339a:	f7ff ff4d 	bl	8013238 <_ZN8ATParser5fgetcEv>
            if (c < 0) {
 801339e:	f1b0 0800 	subs.w	r8, r0, #0
 80133a2:	da0a      	bge.n	80133ba <_ZN8ATParser5vrecvEPKcSt9__va_list+0xae>
                console_printf("AT response mismatch: found \"%s\"\n   expected \"%s\"\n", last_scan, _buffer);  console_flush();
 80133a4:	686a      	ldr	r2, [r5, #4]
 80133a6:	4649      	mov	r1, r9
 80133a8:	4852      	ldr	r0, [pc, #328]	; (80134f4 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x1e8>)
 80133aa:	f7f7 f91f 	bl	800a5ec <console_printf>
 80133ae:	f7f7 f80d 	bl	800a3cc <console_flush>
                ////asm("bkpt");
                return false;
 80133b2:	2000      	movs	r0, #0
            }
        }
    }

    return true;
}
 80133b4:	b007      	add	sp, #28
 80133b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            _buffer[offset + j++] = c;
 80133ba:	686a      	ldr	r2, [r5, #4]
 80133bc:	f10b 0a01 	add.w	sl, fp, #1
 80133c0:	eb0b 0306 	add.w	r3, fp, r6
 80133c4:	f802 8003 	strb.w	r8, [r2, r3]
            _buffer[offset + j] = 0;
 80133c8:	686b      	ldr	r3, [r5, #4]
 80133ca:	eb06 020a 	add.w	r2, r6, sl
 80133ce:	9202      	str	r2, [sp, #8]
 80133d0:	f04f 0900 	mov.w	r9, #0
 80133d4:	f803 9002 	strb.w	r9, [r3, r2]
 80133d8:	e001      	b.n	80133de <_ZN8ATParser5vrecvEPKcSt9__va_list+0xd2>
            for (int k = 0; k < MAX_OOBS; k++) {
 80133da:	f109 0901 	add.w	r9, r9, #1
 80133de:	f1b9 0f01 	cmp.w	r9, #1
 80133e2:	dc20      	bgt.n	8013426 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x11a>
                if (_oobs[k].len == 0) { continue; }  //  Skip empty callbacks.
 80133e4:	eb05 1309 	add.w	r3, r5, r9, lsl #4
 80133e8:	69da      	ldr	r2, [r3, #28]
 80133ea:	2a00      	cmp	r2, #0
 80133ec:	d0f5      	beq.n	80133da <_ZN8ATParser5vrecvEPKcSt9__va_list+0xce>
                if (
 80133ee:	4552      	cmp	r2, sl
 80133f0:	d1f3      	bne.n	80133da <_ZN8ATParser5vrecvEPKcSt9__va_list+0xce>
                    memcmp(_oobs[k].prefix, _buffer+offset, _oobs[k].len) == 0
 80133f2:	6a1b      	ldr	r3, [r3, #32]
 80133f4:	9303      	str	r3, [sp, #12]
 80133f6:	6869      	ldr	r1, [r5, #4]
 80133f8:	4431      	add	r1, r6
 80133fa:	4618      	mov	r0, r3
 80133fc:	f7fa fd8a 	bl	800df14 <memcmp>
                    j == (int) _oobs[k].len && 
 8013400:	2800      	cmp	r0, #0
 8013402:	d1ea      	bne.n	80133da <_ZN8ATParser5vrecvEPKcSt9__va_list+0xce>
                    debug_if(dbg_on, "AT! %s\r\n", _oobs[k].prefix);
 8013404:	9903      	ldr	r1, [sp, #12]
 8013406:	483c      	ldr	r0, [pc, #240]	; (80134f8 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x1ec>)
 8013408:	f7f7 f8f0 	bl	800a5ec <console_printf>
                    _oobs[k].cb(_oobs[k].arg);
 801340c:	f109 0302 	add.w	r3, r9, #2
 8013410:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 8013414:	685a      	ldr	r2, [r3, #4]
 8013416:	6898      	ldr	r0, [r3, #8]
 8013418:	4790      	blx	r2
                    return vrecv(response, args);
 801341a:	9a01      	ldr	r2, [sp, #4]
 801341c:	4639      	mov	r1, r7
 801341e:	4628      	mov	r0, r5
 8013420:	f7ff ff74 	bl	801330c <_ZN8ATParser5vrecvEPKcSt9__va_list>
 8013424:	e7c6      	b.n	80133b4 <_ZN8ATParser5vrecvEPKcSt9__va_list+0xa8>
            int count = -1;
 8013426:	aa06      	add	r2, sp, #24
 8013428:	f04f 33ff 	mov.w	r3, #4294967295
 801342c:	f842 3d04 	str.w	r3, [r2, #-4]!
            sscanf(_buffer+offset, _buffer, &count);
 8013430:	6868      	ldr	r0, [r5, #4]
 8013432:	9603      	str	r6, [sp, #12]
 8013434:	4601      	mov	r1, r0
 8013436:	4430      	add	r0, r6
 8013438:	f001 fe83 	bl	8015142 <sscanf>
            last_count = count; last_scan = _buffer + offset;
 801343c:	9905      	ldr	r1, [sp, #20]
 801343e:	686b      	ldr	r3, [r5, #4]
 8013440:	eb03 0906 	add.w	r9, r3, r6
            if (debug_bc95g && c == '\n' && last_scan[0] != '\n' && last_scan[0] != '\r') {
 8013444:	4a2d      	ldr	r2, [pc, #180]	; (80134fc <_ZN8ATParser5vrecvEPKcSt9__va_list+0x1f0>)
 8013446:	6812      	ldr	r2, [r2, #0]
 8013448:	b112      	cbz	r2, 8013450 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x144>
 801344a:	f1b8 0f0a 	cmp.w	r8, #10
 801344e:	d01c      	beq.n	801348a <_ZN8ATParser5vrecvEPKcSt9__va_list+0x17e>
            if (count == j) {
 8013450:	9b05      	ldr	r3, [sp, #20]
 8013452:	4553      	cmp	r3, sl
 8013454:	d02a      	beq.n	80134ac <_ZN8ATParser5vrecvEPKcSt9__va_list+0x1a0>
            if (j+1 >= _buffer_size - offset ||
 8013456:	f10b 0b02 	add.w	fp, fp, #2
 801345a:	68ab      	ldr	r3, [r5, #8]
 801345c:	1b9b      	subs	r3, r3, r6
 801345e:	459b      	cmp	fp, r3
 8013460:	da09      	bge.n	8013476 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x16a>
                strcmp(&_buffer[offset + j-_delim_size], _delimiter) == 0) {
 8013462:	6868      	ldr	r0, [r5, #4]
 8013464:	696b      	ldr	r3, [r5, #20]
 8013466:	9a02      	ldr	r2, [sp, #8]
 8013468:	1ad3      	subs	r3, r2, r3
 801346a:	6929      	ldr	r1, [r5, #16]
 801346c:	4418      	add	r0, r3
 801346e:	f7fa fdae 	bl	800dfce <strcmp>
            if (j+1 >= _buffer_size - offset ||
 8013472:	2800      	cmp	r0, #0
 8013474:	d136      	bne.n	80134e4 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x1d8>
                if (_buffer[offset] != '\r' && _buffer[offset] != '\n') {  //  Skip blank lines.
 8013476:	686b      	ldr	r3, [r5, #4]
 8013478:	1999      	adds	r1, r3, r6
 801347a:	5d9b      	ldrb	r3, [r3, r6]
 801347c:	2b0d      	cmp	r3, #13
 801347e:	d033      	beq.n	80134e8 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x1dc>
 8013480:	2b0a      	cmp	r3, #10
 8013482:	d129      	bne.n	80134d8 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x1cc>
                j = 0;
 8013484:	f04f 0b00 	mov.w	fp, #0
        }
 8013488:	e786      	b.n	8013398 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x8c>
            if (debug_bc95g && c == '\n' && last_scan[0] != '\n' && last_scan[0] != '\r') {
 801348a:	5d9b      	ldrb	r3, [r3, r6]
 801348c:	2b0a      	cmp	r3, #10
 801348e:	d0df      	beq.n	8013450 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x144>
 8013490:	2b0d      	cmp	r3, #13
 8013492:	d0dd      	beq.n	8013450 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x144>
                if (last_count > 0) { console_printf("  < %d / %s", last_count, last_scan); }
 8013494:	2900      	cmp	r1, #0
 8013496:	dd04      	ble.n	80134a2 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x196>
 8013498:	464a      	mov	r2, r9
 801349a:	4819      	ldr	r0, [pc, #100]	; (8013500 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x1f4>)
 801349c:	f7f7 f8a6 	bl	800a5ec <console_printf>
 80134a0:	e7d6      	b.n	8013450 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x144>
                else { console_printf("  < %s", last_scan); }
 80134a2:	4649      	mov	r1, r9
 80134a4:	4817      	ldr	r0, [pc, #92]	; (8013504 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x1f8>)
 80134a6:	f7f7 f8a1 	bl	800a5ec <console_printf>
 80134aa:	e7d1      	b.n	8013450 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x144>
                debug_if(dbg_on, "AT= %s\r\n", _buffer+offset);
 80134ac:	6869      	ldr	r1, [r5, #4]
 80134ae:	9e03      	ldr	r6, [sp, #12]
 80134b0:	4431      	add	r1, r6
 80134b2:	4815      	ldr	r0, [pc, #84]	; (8013508 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x1fc>)
 80134b4:	f7f7 f89a 	bl	800a5ec <console_printf>
                memcpy(_buffer, response, i);
 80134b8:	4622      	mov	r2, r4
 80134ba:	4639      	mov	r1, r7
 80134bc:	6868      	ldr	r0, [r5, #4]
 80134be:	f7fa fd4d 	bl	800df5c <memcpy>
                _buffer[i] = 0;
 80134c2:	686b      	ldr	r3, [r5, #4]
 80134c4:	2200      	movs	r2, #0
 80134c6:	551a      	strb	r2, [r3, r4]
                vsscanf(_buffer+offset, _buffer, args);
 80134c8:	6868      	ldr	r0, [r5, #4]
 80134ca:	9a01      	ldr	r2, [sp, #4]
 80134cc:	4601      	mov	r1, r0
 80134ce:	4430      	add	r0, r6
 80134d0:	f000 fc34 	bl	8013d3c <vsscanf>
                response += i;
 80134d4:	4427      	add	r7, r4
 80134d6:	e71f      	b.n	8013318 <_ZN8ATParser5vrecvEPKcSt9__va_list+0xc>
                    debug_if(dbg_on, "AT< %s", _buffer+offset);
 80134d8:	480c      	ldr	r0, [pc, #48]	; (801350c <_ZN8ATParser5vrecvEPKcSt9__va_list+0x200>)
 80134da:	f7f7 f887 	bl	800a5ec <console_printf>
                j = 0;
 80134de:	f04f 0b00 	mov.w	fp, #0
 80134e2:	e759      	b.n	8013398 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x8c>
            _buffer[offset + j++] = c;
 80134e4:	46d3      	mov	fp, sl
 80134e6:	e757      	b.n	8013398 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x8c>
                j = 0;
 80134e8:	f04f 0b00 	mov.w	fp, #0
 80134ec:	e754      	b.n	8013398 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x8c>
    return true;
 80134ee:	2001      	movs	r0, #1
 80134f0:	e760      	b.n	80133b4 <_ZN8ATParser5vrecvEPKcSt9__va_list+0xa8>
 80134f2:	bf00      	nop
 80134f4:	080187c4 	.word	0x080187c4
 80134f8:	080187f8 	.word	0x080187f8
 80134fc:	20003564 	.word	0x20003564
 8013500:	08018804 	.word	0x08018804
 8013504:	08018810 	.word	0x08018810
 8013508:	08018818 	.word	0x08018818
 801350c:	08018824 	.word	0x08018824

08013510 <_ZN8ATParser6printfEPKcz>:


// Mapping to vararg functions
int ATParser::printf(const char *format, ...)
{
 8013510:	b40e      	push	{r1, r2, r3}
 8013512:	b500      	push	{lr}
 8013514:	b082      	sub	sp, #8
 8013516:	aa03      	add	r2, sp, #12
 8013518:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list args;
    va_start(args, format);
 801351c:	9201      	str	r2, [sp, #4]
    int res = vprintf(format, args);
 801351e:	f7ff feb1 	bl	8013284 <_ZN8ATParser7vprintfEPKcSt9__va_list>
    va_end(args);
    return res;
}
 8013522:	b002      	add	sp, #8
 8013524:	f85d eb04 	ldr.w	lr, [sp], #4
 8013528:	b003      	add	sp, #12
 801352a:	4770      	bx	lr

0801352c <_ZN8ATParser4sendEPKcz>:
    va_end(args);
    return res;
}

bool ATParser::send(const char *command, ...)
{
 801352c:	b40e      	push	{r1, r2, r3}
 801352e:	b500      	push	{lr}
 8013530:	b082      	sub	sp, #8
 8013532:	aa03      	add	r2, sp, #12
 8013534:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list args;
    va_start(args, command);
 8013538:	9201      	str	r2, [sp, #4]
    bool res = vsend(command, args);
 801353a:	f7ff febb 	bl	80132b4 <_ZN8ATParser5vsendEPKcSt9__va_list>
    va_end(args);
    return res;
}
 801353e:	b002      	add	sp, #8
 8013540:	f85d eb04 	ldr.w	lr, [sp], #4
 8013544:	b003      	add	sp, #12
 8013546:	4770      	bx	lr

08013548 <_ZN8ATParser4recvEPKcz>:

bool ATParser::recv(const char *response, ...)
{
 8013548:	b40e      	push	{r1, r2, r3}
 801354a:	b500      	push	{lr}
 801354c:	b082      	sub	sp, #8
 801354e:	aa03      	add	r2, sp, #12
 8013550:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list args;
    va_start(args, response);
 8013554:	9201      	str	r2, [sp, #4]
    bool res = vrecv(response, args);
 8013556:	f7ff fed9 	bl	801330c <_ZN8ATParser5vrecvEPKcSt9__va_list>
    va_end(args);
    return res;
}
 801355a:	b002      	add	sp, #8
 801355c:	f85d eb04 	ldr.w	lr, [sp], #4
 8013560:	b003      	add	sp, #12
 8013562:	4770      	bx	lr

08013564 <_ZL12uart_tx_donePv>:
    return rc;
}

static void uart_tx_done(void *arg) {
    //  UART driver reports that transmission is complete.  Do nothing.
}
 8013564:	4770      	bx	lr
	...

08013568 <_Z10setup_uartP14BufferedSerial>:

int setup_uart(BufferedSerial *serial) {
 8013568:	b530      	push	{r4, r5, lr}
 801356a:	b083      	sub	sp, #12
    //  Configure the UART port HAL settings.
    int rc;
    int uart = serial->_uart;
 801356c:	6c44      	ldr	r4, [r0, #68]	; 0x44
    uint32_t baud = serial->_baud;
 801356e:	6c85      	ldr	r5, [r0, #72]	; 0x48

    //  Define the UART callbacks.
    rc = hal_uart_init_cbs(uart,
 8013570:	9000      	str	r0, [sp, #0]
 8013572:	4b0e      	ldr	r3, [pc, #56]	; (80135ac <_Z10setup_uartP14BufferedSerial+0x44>)
 8013574:	4a0e      	ldr	r2, [pc, #56]	; (80135b0 <_Z10setup_uartP14BufferedSerial+0x48>)
 8013576:	490f      	ldr	r1, [pc, #60]	; (80135b4 <_Z10setup_uartP14BufferedSerial+0x4c>)
 8013578:	4620      	mov	r0, r4
 801357a:	f7fd fafd 	bl	8010b78 <hal_uart_init_cbs>
        uart_tx_char, uart_tx_done,
        uart_rx_char, serial);
    if (rc != 0) { return rc; }
 801357e:	4603      	mov	r3, r0
 8013580:	b950      	cbnz	r0, 8013598 <_Z10setup_uartP14BufferedSerial+0x30>

    //  Set UART parameters.
    assert(baud != 0);
 8013582:	b165      	cbz	r5, 801359e <_Z10setup_uartP14BufferedSerial+0x36>
    rc = hal_uart_config(uart,
 8013584:	2300      	movs	r3, #0
 8013586:	9301      	str	r3, [sp, #4]
 8013588:	9300      	str	r3, [sp, #0]
 801358a:	2301      	movs	r3, #1
 801358c:	2208      	movs	r2, #8
 801358e:	4629      	mov	r1, r5
 8013590:	4620      	mov	r0, r4
 8013592:	f7fd fb7d 	bl	8010c90 <hal_uart_config>
 8013596:	4603      	mov	r3, r0
        console_printf("-> %lx\n", USART3->CR2); console_flush();
    }
#endif  //  NOTUSED

    return 0;
}
 8013598:	4618      	mov	r0, r3
 801359a:	b003      	add	sp, #12
 801359c:	bd30      	pop	{r4, r5, pc}
    assert(baud != 0);
 801359e:	2300      	movs	r3, #0
 80135a0:	461a      	mov	r2, r3
 80135a2:	4619      	mov	r1, r3
 80135a4:	4618      	mov	r0, r3
 80135a6:	f7f9 f815 	bl	800c5d4 <__assert_func>
 80135aa:	bf00      	nop
 80135ac:	08013695 	.word	0x08013695
 80135b0:	08013565 	.word	0x08013565
 80135b4:	080136e7 	.word	0x080136e7

080135b8 <_ZN14BufferedSerial4initEPcmS0_mPKc>:

void BufferedSerial::init(char *txbuf, uint32_t txbuf_size, char *rxbuf, uint32_t rxbuf_size, const char* name)
{
 80135b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80135ba:	4604      	mov	r4, r0
 80135bc:	461f      	mov	r7, r3
 80135be:	9e06      	ldr	r6, [sp, #24]
    _initialised = 0;
 80135c0:	2500      	movs	r5, #0
 80135c2:	f880 5028 	strb.w	r5, [r0, #40]	; 0x28
    _uart = 0;
 80135c6:	6445      	str	r5, [r0, #68]	; 0x44
    _baud = 0;
 80135c8:	6485      	str	r5, [r0, #72]	; 0x48
    _txbuf_size = txbuf_size;
 80135ca:	6202      	str	r2, [r0, #32]
    _rxbuf_size = rxbuf_size;
 80135cc:	6246      	str	r6, [r0, #36]	; 0x24
    _txbuf.init(txbuf, txbuf_size);
 80135ce:	f000 f8f8 	bl	80137c2 <_ZN10RingBufferIcE4initEPcm>
    _rxbuf.init(rxbuf, rxbuf_size);
 80135d2:	4632      	mov	r2, r6
 80135d4:	4639      	mov	r1, r7
 80135d6:	f104 0010 	add.w	r0, r4, #16
 80135da:	f000 f8f2 	bl	80137c2 <_ZN10RingBufferIcE4initEPcm>
    os_error_t rc = os_sem_init(&_rx_sem, 0);  //  Init to 0 tokens, so caller will block until data is available.
 80135de:	4629      	mov	r1, r5
 80135e0:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80135e4:	f7fa f98a 	bl	800d8fc <os_sem_init>
    assert(rc == OS_OK);
 80135e8:	b900      	cbnz	r0, 80135ec <_ZN14BufferedSerial4initEPcmS0_mPKc+0x34>
}
 80135ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert(rc == OS_OK);
 80135ec:	462b      	mov	r3, r5
 80135ee:	462a      	mov	r2, r5
 80135f0:	4629      	mov	r1, r5
 80135f2:	4628      	mov	r0, r5
 80135f4:	f7f8 ffee 	bl	800c5d4 <__assert_func>

080135f8 <_ZN14BufferedSerial9configureEi>:

void BufferedSerial::configure(int uart) {
    _uart = uart;
 80135f8:	6441      	str	r1, [r0, #68]	; 0x44
}
 80135fa:	4770      	bx	lr

080135fc <_ZN14BufferedSerial8readableEv>:
}

template <class T>
inline uint32_t RingBuffer<T>::available(void)
{
    return (_wloc == _rloc) ? 0 : 1;
 80135fc:	6942      	ldr	r2, [r0, #20]
 80135fe:	6980      	ldr	r0, [r0, #24]

int BufferedSerial::readable(void)
{
    return _rxbuf.available();  // note: look if things are in the buffer
}
 8013600:	1a10      	subs	r0, r2, r0
 8013602:	bf18      	it	ne
 8013604:	2001      	movne	r0, #1
 8013606:	4770      	bx	lr

08013608 <_ZN14BufferedSerial5fgetcEi>:
{
    return 1;   // buffer allows overwriting by design, always true
}

int BufferedSerial::getc(int timeout)
{
 8013608:	b510      	push	{r4, lr}
 801360a:	4604      	mov	r4, r0
    //  If no data available, wait until the timeout for data.
    os_sem_pend(&_rx_sem, timeout * OS_TICKS_PER_SEC / 1000);
 801360c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8013610:	fb03 f101 	mul.w	r1, r3, r1
 8013614:	4b0e      	ldr	r3, [pc, #56]	; (8013650 <_ZN14BufferedSerial5fgetcEi+0x48>)
 8013616:	fb83 2301 	smull	r2, r3, r3, r1
 801361a:	17c9      	asrs	r1, r1, #31
 801361c:	ebc1 11a3 	rsb	r1, r1, r3, asr #6
 8013620:	302c      	adds	r0, #44	; 0x2c
 8013622:	f7fa f9a5 	bl	800d970 <os_sem_pend>
 8013626:	6962      	ldr	r2, [r4, #20]
 8013628:	69a3      	ldr	r3, [r4, #24]
    if (_rxbuf.available()) { return _rxbuf.get(); }
 801362a:	429a      	cmp	r2, r3
 801362c:	d00d      	beq.n	801364a <_ZN14BufferedSerial5fgetcEi+0x42>
    T data_pos = _buf[_rloc++];
 801362e:	6922      	ldr	r2, [r4, #16]
 8013630:	69a3      	ldr	r3, [r4, #24]
 8013632:	1c59      	adds	r1, r3, #1
 8013634:	61a1      	str	r1, [r4, #24]
 8013636:	5cd0      	ldrb	r0, [r2, r3]
    _rloc %= (_size-1);
 8013638:	69a1      	ldr	r1, [r4, #24]
 801363a:	69e3      	ldr	r3, [r4, #28]
 801363c:	3b01      	subs	r3, #1
 801363e:	fbb1 f2f3 	udiv	r2, r1, r3
 8013642:	fb03 1312 	mls	r3, r3, r2, r1
 8013646:	61a3      	str	r3, [r4, #24]
    return -1;
}
 8013648:	bd10      	pop	{r4, pc}
    return -1;
 801364a:	f04f 30ff 	mov.w	r0, #4294967295
 801364e:	e7fb      	b.n	8013648 <_ZN14BufferedSerial5fgetcEi+0x40>
 8013650:	10624dd3 	.word	0x10624dd3

08013654 <_ZN14BufferedSerial5rxIrqEh>:
    }
    return 0;
}

int BufferedSerial::rxIrq(uint8_t byte)
{
 8013654:	b510      	push	{r4, lr}
 8013656:	4604      	mov	r4, r0
    _buf[_wloc++] = data;
 8013658:	6902      	ldr	r2, [r0, #16]
 801365a:	6943      	ldr	r3, [r0, #20]
 801365c:	1c58      	adds	r0, r3, #1
 801365e:	6160      	str	r0, [r4, #20]
 8013660:	54d1      	strb	r1, [r2, r3]
    _wloc %= (_size-1);
 8013662:	6961      	ldr	r1, [r4, #20]
 8013664:	69e3      	ldr	r3, [r4, #28]
 8013666:	3b01      	subs	r3, #1
 8013668:	fbb1 f2f3 	udiv	r2, r1, r3
 801366c:	fb03 1312 	mls	r3, r3, r2, r1
 8013670:	6163      	str	r3, [r4, #20]
    //  UART driver reports incoming byte of data. Return -1 if data was dropped.
    _rxbuf.put(byte);  //  Add to TX buffer.
    os_error_t rc = os_sem_release(&_rx_sem);  //  Signal to semaphore that data is available.
 8013672:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8013676:	f7fa f949 	bl	800d90c <os_sem_release>
    assert(rc == OS_OK);
 801367a:	b928      	cbnz	r0, 8013688 <_ZN14BufferedSerial5rxIrqEh+0x34>
    //  Trigger callback if necessary
    if (_cbs[RxIrq]) { _cbs[RxIrq](_cbs_arg[RxIrq]); }
 801367c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801367e:	b10b      	cbz	r3, 8013684 <_ZN14BufferedSerial5rxIrqEh+0x30>
 8013680:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8013682:	4798      	blx	r3
    return 0;
}
 8013684:	2000      	movs	r0, #0
 8013686:	bd10      	pop	{r4, pc}
    assert(rc == OS_OK);
 8013688:	2300      	movs	r3, #0
 801368a:	461a      	mov	r2, r3
 801368c:	4619      	mov	r1, r3
 801368e:	4618      	mov	r0, r3
 8013690:	f7f8 ffa0 	bl	800c5d4 <__assert_func>

08013694 <_ZL12uart_rx_charPvh>:
static int uart_rx_char(void *arg, uint8_t byte) {
 8013694:	b508      	push	{r3, lr}
    assert(arg != NULL);
 8013696:	b110      	cbz	r0, 801369e <_ZL12uart_rx_charPvh+0xa>
    int rc = serial->rxIrq(byte);
 8013698:	f7ff ffdc 	bl	8013654 <_ZN14BufferedSerial5rxIrqEh>
}
 801369c:	bd08      	pop	{r3, pc}
    assert(arg != NULL);
 801369e:	2300      	movs	r3, #0
 80136a0:	461a      	mov	r2, r3
 80136a2:	4619      	mov	r1, r3
 80136a4:	4618      	mov	r0, r3
 80136a6:	f7f8 ff95 	bl	800c5d4 <__assert_func>

080136aa <_ZN14BufferedSerial5txIrqEv>:

int BufferedSerial::txIrq(void)
{
 80136aa:	b510      	push	{r4, lr}
    return (_wloc == _rloc) ? 0 : 1;
 80136ac:	6842      	ldr	r2, [r0, #4]
 80136ae:	6883      	ldr	r3, [r0, #8]
    //  UART driver asks for more data to send. Return -1 if no more data is available for TX.
    if(_txbuf.available()) {
 80136b0:	429a      	cmp	r2, r3
 80136b2:	d00e      	beq.n	80136d2 <_ZN14BufferedSerial5txIrqEv+0x28>
    T data_pos = _buf[_rloc++];
 80136b4:	6802      	ldr	r2, [r0, #0]
 80136b6:	6883      	ldr	r3, [r0, #8]
 80136b8:	1c59      	adds	r1, r3, #1
 80136ba:	6081      	str	r1, [r0, #8]
 80136bc:	5cd3      	ldrb	r3, [r2, r3]
    _rloc %= (_size-1);
 80136be:	6884      	ldr	r4, [r0, #8]
 80136c0:	68c2      	ldr	r2, [r0, #12]
 80136c2:	3a01      	subs	r2, #1
 80136c4:	fbb4 f1f2 	udiv	r1, r4, r2
 80136c8:	fb02 4211 	mls	r2, r2, r1, r4
 80136cc:	6082      	str	r2, [r0, #8]
        uint8_t byte = _txbuf.get();  //  Get data from TX buffer.
        return byte;
 80136ce:	4618      	mov	r0, r3
    }
    //  Trigger callback if no more data to send.
    if (_cbs[TxIrq]) { _cbs[TxIrq](_cbs_arg[TxIrq]); }
    return -1;
}
 80136d0:	bd10      	pop	{r4, pc}
    if (_cbs[TxIrq]) { _cbs[TxIrq](_cbs_arg[TxIrq]); }
 80136d2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80136d4:	b123      	cbz	r3, 80136e0 <_ZN14BufferedSerial5txIrqEv+0x36>
 80136d6:	6c00      	ldr	r0, [r0, #64]	; 0x40
 80136d8:	4798      	blx	r3
    return -1;
 80136da:	f04f 30ff 	mov.w	r0, #4294967295
 80136de:	e7f7      	b.n	80136d0 <_ZN14BufferedSerial5txIrqEv+0x26>
 80136e0:	f04f 30ff 	mov.w	r0, #4294967295
 80136e4:	e7f4      	b.n	80136d0 <_ZN14BufferedSerial5txIrqEv+0x26>

080136e6 <_ZL12uart_tx_charPv>:
static int uart_tx_char(void *arg) {    
 80136e6:	b508      	push	{r3, lr}
    assert(arg != NULL);
 80136e8:	b110      	cbz	r0, 80136f0 <_ZL12uart_tx_charPv+0xa>
    int byte = serial->txIrq();
 80136ea:	f7ff ffde 	bl	80136aa <_ZN14BufferedSerial5txIrqEv>
}
 80136ee:	bd08      	pop	{r3, pc}
    assert(arg != NULL);
 80136f0:	2300      	movs	r3, #0
 80136f2:	461a      	mov	r2, r3
 80136f4:	4619      	mov	r1, r3
 80136f6:	4618      	mov	r0, r3
 80136f8:	f7f8 ff6c 	bl	800c5d4 <__assert_func>

080136fc <_ZN14BufferedSerial5primeEv>:

void BufferedSerial::prime(void)
{
 80136fc:	b510      	push	{r4, lr}
 80136fe:	4604      	mov	r4, r0
    if (!_initialised) {
 8013700:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8013704:	b943      	cbnz	r3, 8013718 <_ZN14BufferedSerial5primeEv+0x1c>
        //  Configure the UART port on first use.
        _initialised = 1;
 8013706:	2301      	movs	r3, #1
 8013708:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
        int rc = setup_uart(this);
 801370c:	f7ff ff2c 	bl	8013568 <_Z10setup_uartP14BufferedSerial>
        assert(rc == 0);
 8013710:	b930      	cbnz	r0, 8013720 <_ZN14BufferedSerial5primeEv+0x24>
        hal_uart_start_rx(_uart);  //  Start receiving UART data.
 8013712:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8013714:	f7fd fa52 	bl	8010bbc <hal_uart_start_rx>
    }
    hal_uart_start_tx(_uart);  //  Start transmitting UART data in the buffer.  txIrq will retrieve the data from the buffer.
 8013718:	6c60      	ldr	r0, [r4, #68]	; 0x44
 801371a:	f7fd fa7d 	bl	8010c18 <hal_uart_start_tx>
}
 801371e:	bd10      	pop	{r4, pc}
        assert(rc == 0);
 8013720:	2300      	movs	r3, #0
 8013722:	461a      	mov	r2, r3
 8013724:	4619      	mov	r1, r3
 8013726:	4618      	mov	r0, r3
 8013728:	f7f8 ff54 	bl	800c5d4 <__assert_func>

0801372c <_ZN14BufferedSerial4putcEi>:
{
 801372c:	b538      	push	{r3, r4, r5, lr}
 801372e:	460c      	mov	r4, r1
    _buf[_wloc++] = data;
 8013730:	6801      	ldr	r1, [r0, #0]
 8013732:	6842      	ldr	r2, [r0, #4]
 8013734:	1c55      	adds	r5, r2, #1
 8013736:	6045      	str	r5, [r0, #4]
 8013738:	548c      	strb	r4, [r1, r2]
    _wloc %= (_size-1);
 801373a:	6845      	ldr	r5, [r0, #4]
 801373c:	68c2      	ldr	r2, [r0, #12]
 801373e:	3a01      	subs	r2, #1
 8013740:	fbb5 f1f2 	udiv	r1, r5, r2
 8013744:	fb02 5211 	mls	r2, r2, r1, r5
 8013748:	6042      	str	r2, [r0, #4]
    BufferedSerial::prime();
 801374a:	f7ff ffd7 	bl	80136fc <_ZN14BufferedSerial5primeEv>
}
 801374e:	4620      	mov	r0, r4
 8013750:	bd38      	pop	{r3, r4, r5, pc}

08013752 <_ZN14BufferedSerial5writeEPKvj>:
    if (s != NULL && length > 0) {
 8013752:	b1d1      	cbz	r1, 801378a <_ZN14BufferedSerial5writeEPKvj+0x38>
{
 8013754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013756:	460f      	mov	r7, r1
    if (s != NULL && length > 0) {
 8013758:	b1ca      	cbz	r2, 801378e <_ZN14BufferedSerial5writeEPKvj+0x3c>
        const char* end = ptr + length;    
 801375a:	440a      	add	r2, r1
        const char* ptr = (const char*)s;
 801375c:	460c      	mov	r4, r1
        while (ptr != end) {
 801375e:	4294      	cmp	r4, r2
 8013760:	d00f      	beq.n	8013782 <_ZN14BufferedSerial5writeEPKvj+0x30>
            _txbuf = *(ptr++);
 8013762:	7825      	ldrb	r5, [r4, #0]
    _buf[_wloc++] = data;
 8013764:	6801      	ldr	r1, [r0, #0]
 8013766:	6843      	ldr	r3, [r0, #4]
 8013768:	1c5e      	adds	r6, r3, #1
 801376a:	6046      	str	r6, [r0, #4]
 801376c:	54cd      	strb	r5, [r1, r3]
    _wloc %= (_size-1);
 801376e:	6845      	ldr	r5, [r0, #4]
 8013770:	68c3      	ldr	r3, [r0, #12]
 8013772:	3b01      	subs	r3, #1
 8013774:	fbb5 f1f3 	udiv	r1, r5, r3
 8013778:	fb03 5311 	mls	r3, r3, r1, r5
 801377c:	6043      	str	r3, [r0, #4]
 801377e:	3401      	adds	r4, #1
 8013780:	e7ed      	b.n	801375e <_ZN14BufferedSerial5writeEPKvj+0xc>
        BufferedSerial::prime();    
 8013782:	f7ff ffbb 	bl	80136fc <_ZN14BufferedSerial5primeEv>
        return ptr - (const char*)s;
 8013786:	1be0      	subs	r0, r4, r7
}
 8013788:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return 0;
 801378a:	2000      	movs	r0, #0
}
 801378c:	4770      	bx	lr
    return 0;
 801378e:	4610      	mov	r0, r2
 8013790:	e7fa      	b.n	8013788 <_ZN14BufferedSerial5writeEPKvj+0x36>

08013792 <_ZN14BufferedSerial6attachEPFvPvES0_i>:

void BufferedSerial::attach(void (*func)(void *), void *arg, IrqType type)
{
 8013792:	b410      	push	{r4}
    _cbs[type] = func;
 8013794:	f103 040c 	add.w	r4, r3, #12
 8013798:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 801379c:	6061      	str	r1, [r4, #4]
    _cbs_arg[type] = arg;
 801379e:	330e      	adds	r3, #14
 80137a0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80137a4:	6042      	str	r2, [r0, #4]
}
 80137a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80137aa:	4770      	bx	lr

080137ac <_ZN14BufferedSerial4baudEm>:

void BufferedSerial::baud(uint32_t baud0)
{
    _baud = baud0;
 80137ac:	6481      	str	r1, [r0, #72]	; 0x48
}
 80137ae:	4770      	bx	lr

080137b0 <_ZN10RingBufferIcE5clearEv>:
{ 
    return this->_size; 
}

template <class T>
void RingBuffer<T>::clear(void)
 80137b0:	b508      	push	{r3, lr}
{
    _wloc = 0;
 80137b2:	2100      	movs	r1, #0
 80137b4:	6041      	str	r1, [r0, #4]
    _rloc = 0;
 80137b6:	6081      	str	r1, [r0, #8]
    memset(_buf, 0, _size);
 80137b8:	68c2      	ldr	r2, [r0, #12]
 80137ba:	6800      	ldr	r0, [r0, #0]
 80137bc:	f7fa fbdb 	bl	800df76 <memset>
    
    return;
}
 80137c0:	bd08      	pop	{r3, pc}

080137c2 <_ZN10RingBufferIcE4initEPcm>:
void RingBuffer<T>::init(T *buffer, uint32_t size)
 80137c2:	b508      	push	{r3, lr}
    _buf = buffer;
 80137c4:	6001      	str	r1, [r0, #0]
    _size = size;
 80137c6:	60c2      	str	r2, [r0, #12]
    clear();    
 80137c8:	f7ff fff2 	bl	80137b0 <_ZN10RingBufferIcE5clearEv>
}
 80137cc:	bd08      	pop	{r3, pc}
	...

080137d0 <_ZL13config_devicev>:
    rc = config_device();
    assert(rc == 0);
}

//  Device configuration
static int config_device(void) {
 80137d0:	b530      	push	{r4, r5, lr}
 80137d2:	b085      	sub	sp, #20
    int rc;
    struct os_dev *dev;
    struct DEVICE_CFG cfg;

    //  Fetch the device.
    dev = (struct os_dev *) os_dev_open(DEVICE_NAME, OS_TIMEOUT_NEVER, NULL);
 80137d4:	2200      	movs	r2, #0
 80137d6:	f04f 31ff 	mov.w	r1, #4294967295
 80137da:	4810      	ldr	r0, [pc, #64]	; (801381c <_ZL13config_devicev+0x4c>)
 80137dc:	f7f9 f9cc 	bl	800cb78 <os_dev_open>
    assert(dev != NULL);
 80137e0:	b178      	cbz	r0, 8013802 <_ZL13config_devicev+0x32>
 80137e2:	4604      	mov	r4, r0

    //  Get the default config for the device.
    rc = DEVICE_CFG_DEFAULT(&cfg);
 80137e4:	4668      	mov	r0, sp
 80137e6:	f7fb f8d3 	bl	800e990 <gps_l70r_default_cfg>
    assert(rc == 0);
 80137ea:	b980      	cbnz	r0, 801380e <_ZL13config_devicev+0x3e>

    //  Copy the default config into the device.
    rc = DEVICE_CFG_FUNC((struct DEVICE_DEV *)dev, &cfg);
 80137ec:	4669      	mov	r1, sp
 80137ee:	4620      	mov	r0, r4
 80137f0:	f7fb f8df 	bl	800e9b2 <gps_l70r_config>
 80137f4:	4605      	mov	r5, r0
    os_dev_close(dev);
 80137f6:	4620      	mov	r0, r4
 80137f8:	f7f9 f9e0 	bl	800cbbc <os_dev_close>
    return rc;
}
 80137fc:	4628      	mov	r0, r5
 80137fe:	b005      	add	sp, #20
 8013800:	bd30      	pop	{r4, r5, pc}
    assert(dev != NULL);
 8013802:	2300      	movs	r3, #0
 8013804:	461a      	mov	r2, r3
 8013806:	4619      	mov	r1, r3
 8013808:	4618      	mov	r0, r3
 801380a:	f7f8 fee3 	bl	800c5d4 <__assert_func>
    assert(rc == 0);
 801380e:	2300      	movs	r3, #0
 8013810:	461a      	mov	r2, r3
 8013812:	4619      	mov	r1, r3
 8013814:	4618      	mov	r0, r3
 8013816:	f7f8 fedd 	bl	800c5d4 <__assert_func>
 801381a:	bf00      	nop
 801381c:	080182cc 	.word	0x080182cc

08013820 <gps_l70r_create>:
void DEVICE_CREATE(void) {
 8013820:	b500      	push	{lr}
 8013822:	b083      	sub	sp, #12
    console_printf("%screate " DEVICE_NAME "\n", _gps);
 8013824:	4b10      	ldr	r3, [pc, #64]	; (8013868 <gps_l70r_create+0x48>)
 8013826:	6819      	ldr	r1, [r3, #0]
 8013828:	4810      	ldr	r0, [pc, #64]	; (801386c <gps_l70r_create+0x4c>)
 801382a:	f7f6 fedf 	bl	800a5ec <console_printf>
        DEVICE_INIT, (void *) &DEVICE_ITF);
 801382e:	4b10      	ldr	r3, [pc, #64]	; (8013870 <gps_l70r_create+0x50>)
 8013830:	9301      	str	r3, [sp, #4]
 8013832:	4b10      	ldr	r3, [pc, #64]	; (8013874 <gps_l70r_create+0x54>)
 8013834:	9300      	str	r3, [sp, #0]
 8013836:	2300      	movs	r3, #0
 8013838:	2201      	movs	r2, #1
 801383a:	490f      	ldr	r1, [pc, #60]	; (8013878 <gps_l70r_create+0x58>)
 801383c:	480f      	ldr	r0, [pc, #60]	; (801387c <gps_l70r_create+0x5c>)
 801383e:	f7f9 f955 	bl	800caec <os_dev_create>
    assert(rc == 0);
 8013842:	b928      	cbnz	r0, 8013850 <gps_l70r_create+0x30>
    rc = config_device();
 8013844:	f7ff ffc4 	bl	80137d0 <_ZL13config_devicev>
    assert(rc == 0);
 8013848:	b940      	cbnz	r0, 801385c <gps_l70r_create+0x3c>
}
 801384a:	b003      	add	sp, #12
 801384c:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
 8013850:	2300      	movs	r3, #0
 8013852:	461a      	mov	r2, r3
 8013854:	4619      	mov	r1, r3
 8013856:	4618      	mov	r0, r3
 8013858:	f7f8 febc 	bl	800c5d4 <__assert_func>
    assert(rc == 0);
 801385c:	2300      	movs	r3, #0
 801385e:	461a      	mov	r2, r3
 8013860:	4619      	mov	r1, r3
 8013862:	4618      	mov	r0, r3
 8013864:	f7f8 feb6 	bl	800c5d4 <__assert_func>
 8013868:	2000035c 	.word	0x2000035c
 801386c:	08018838 	.word	0x08018838
 8013870:	20000348 	.word	0x20000348
 8013874:	0800e955 	.word	0x0800e955
 8013878:	080182cc 	.word	0x080182cc
 801387c:	20003568 	.word	0x20003568

08013880 <config_device>:

///////////////////////////////////////////////////////////////////////////////
//  Generic Device Creator Code based on repos\apache-mynewt-core\hw\sensor\creator\src\sensor_creator.c

//  Device configuration
static int config_device(void) {
 8013880:	b530      	push	{r4, r5, lr}
 8013882:	b087      	sub	sp, #28
    int rc;
    struct os_dev *dev;
    struct DEVICE_CFG cfg;

    //  Fetch the device.
    dev = (struct os_dev *) os_dev_open(DEVICE_NAME, OS_TIMEOUT_NEVER, NULL);
 8013884:	2200      	movs	r2, #0
 8013886:	f04f 31ff 	mov.w	r1, #4294967295
 801388a:	4810      	ldr	r0, [pc, #64]	; (80138cc <config_device+0x4c>)
 801388c:	f7f9 f974 	bl	800cb78 <os_dev_open>
    assert(dev != NULL);
 8013890:	b178      	cbz	r0, 80138b2 <config_device+0x32>
 8013892:	4604      	mov	r4, r0

    //  Get the default config for the device.
    rc = DEVICE_CFG_DEFAULT(&cfg);
 8013894:	4668      	mov	r0, sp
 8013896:	f7fb fb87 	bl	800efa8 <temp_stm32_default_cfg>
    assert(rc == 0);
 801389a:	b980      	cbnz	r0, 80138be <config_device+0x3e>

    //  Apply the device config.
    rc = DEVICE_CFG_FUNC((struct DEVICE_DEV *)dev, &cfg);
 801389c:	4669      	mov	r1, sp
 801389e:	4620      	mov	r0, r4
 80138a0:	f7fb fc7b 	bl	800f19a <temp_stm32_config>
 80138a4:	4605      	mov	r5, r0
    os_dev_close(dev);
 80138a6:	4620      	mov	r0, r4
 80138a8:	f7f9 f988 	bl	800cbbc <os_dev_close>
    return rc;
}
 80138ac:	4628      	mov	r0, r5
 80138ae:	b007      	add	sp, #28
 80138b0:	bd30      	pop	{r4, r5, pc}
    assert(dev != NULL);
 80138b2:	2300      	movs	r3, #0
 80138b4:	461a      	mov	r2, r3
 80138b6:	4619      	mov	r1, r3
 80138b8:	4618      	mov	r0, r3
 80138ba:	f7f8 fe8b 	bl	800c5d4 <__assert_func>
    assert(rc == 0);
 80138be:	2300      	movs	r3, #0
 80138c0:	461a      	mov	r2, r3
 80138c2:	4619      	mov	r1, r3
 80138c4:	4618      	mov	r0, r3
 80138c6:	f7f8 fe85 	bl	800c5d4 <__assert_func>
 80138ca:	bf00      	nop
 80138cc:	08018314 	.word	0x08018314

080138d0 <temp_stm32_create>:

//  Create the device instance and configure it. Called by sysinit() during startup, defined in pkg.yml.
void DEVICE_CREATE(void) {
 80138d0:	b510      	push	{r4, lr}
 80138d2:	b082      	sub	sp, #8
    console_printf("TMP create %s\n", DEVICE_NAME);
 80138d4:	4c10      	ldr	r4, [pc, #64]	; (8013918 <temp_stm32_create+0x48>)
 80138d6:	4621      	mov	r1, r4
 80138d8:	4810      	ldr	r0, [pc, #64]	; (801391c <temp_stm32_create+0x4c>)
 80138da:	f7f6 fe87 	bl	800a5ec <console_printf>

    //  Create the device.
    int rc = os_dev_create((struct os_dev *) &DEVICE_INSTANCE, DEVICE_NAME,
 80138de:	4b10      	ldr	r3, [pc, #64]	; (8013920 <temp_stm32_create+0x50>)
 80138e0:	9301      	str	r3, [sp, #4]
 80138e2:	4b10      	ldr	r3, [pc, #64]	; (8013924 <temp_stm32_create+0x54>)
 80138e4:	9300      	str	r3, [sp, #0]
 80138e6:	2300      	movs	r3, #0
 80138e8:	2201      	movs	r2, #1
 80138ea:	4621      	mov	r1, r4
 80138ec:	480e      	ldr	r0, [pc, #56]	; (8013928 <temp_stm32_create+0x58>)
 80138ee:	f7f9 f8fd 	bl	800caec <os_dev_create>
        OS_DEV_INIT_PRIMARY, 0, 
        DEVICE_INIT, (void *) &DEVICE_ITF);
    assert(rc == 0);
 80138f2:	b920      	cbnz	r0, 80138fe <temp_stm32_create+0x2e>

    //  Configure the device.
    rc = config_device();
 80138f4:	f7ff ffc4 	bl	8013880 <config_device>
    assert(rc == 0);
 80138f8:	b938      	cbnz	r0, 801390a <temp_stm32_create+0x3a>
}
 80138fa:	b002      	add	sp, #8
 80138fc:	bd10      	pop	{r4, pc}
    assert(rc == 0);
 80138fe:	2300      	movs	r3, #0
 8013900:	461a      	mov	r2, r3
 8013902:	4619      	mov	r1, r3
 8013904:	4618      	mov	r0, r3
 8013906:	f7f8 fe65 	bl	800c5d4 <__assert_func>
    assert(rc == 0);
 801390a:	2300      	movs	r3, #0
 801390c:	461a      	mov	r2, r3
 801390e:	4619      	mov	r1, r3
 8013910:	4618      	mov	r0, r3
 8013912:	f7f8 fe5f 	bl	800c5d4 <__assert_func>
 8013916:	bf00      	nop
 8013918:	08018314 	.word	0x08018314
 801391c:	08018858 	.word	0x08018858
 8013920:	20003630 	.word	0x20003630
 8013924:	0800efd5 	.word	0x0800efd5
 8013928:	20003648 	.word	0x20003648

0801392c <oc_register_gatt>:
oc_register_gatt(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_GATT) == 1)
    oc_gatt_transport_id = oc_transport_register(&oc_gatt_transport);
#endif
}
 801392c:	4770      	bx	lr

0801392e <oc_register_ip4>:
oc_register_ip4(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_IP) == 1) && (MYNEWT_VAL(OC_TRANSPORT_IPV4) == 1)
    oc_ip4_transport_id = oc_transport_register(&oc_ip4_transport);
#endif
}
 801392e:	4770      	bx	lr

08013930 <oc_register_ip6>:
oc_register_ip6(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_IP) == 1) && (MYNEWT_VAL(OC_TRANSPORT_IPV6) == 1)
    oc_ip6_transport_id = oc_transport_register(&oc_ip6_transport);
#endif
}
 8013930:	4770      	bx	lr

08013932 <oc_register_lora>:
oc_register_lora(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_LORA) == 1)
    oc_lora_transport_id = oc_transport_register(&oc_lora_transport);
#endif
}
 8013932:	4770      	bx	lr

08013934 <oc_register_serial>:
oc_register_serial(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_SERIAL) == 1)
    oc_serial_transport_id = oc_transport_register(&oc_serial_transport);
#endif
}
 8013934:	4770      	bx	lr

08013936 <flash_map_read_mfg>:
 * @return                      0 on success; nonzero on failure.
 */
static int
flash_map_read_mfg(int max_areas,
                   struct flash_area *out_areas, int *out_num_areas)
{
 8013936:	b570      	push	{r4, r5, r6, lr}
 8013938:	b086      	sub	sp, #24
 801393a:	4605      	mov	r5, r0
 801393c:	460e      	mov	r6, r1
 801393e:	4614      	mov	r4, r2
    struct mfg_meta_flash_area meta_flash_area;
    struct mfg_reader reader;
    struct flash_area *fap;
    int rc;

    *out_num_areas = 0;
 8013940:	2300      	movs	r3, #0
 8013942:	6013      	str	r3, [r2, #0]

    /* Ensure manufacturing meta region has been located in flash. */
    mfg_init();
 8013944:	f000 f9ae 	bl	8013ca4 <mfg_init>

    mfg_open(&reader);
 8013948:	a801      	add	r0, sp, #4
 801394a:	f000 f9c7 	bl	8013cdc <mfg_open>

    while (1) {
        if (*out_num_areas >= max_areas) {
 801394e:	6823      	ldr	r3, [r4, #0]
 8013950:	42ab      	cmp	r3, r5
 8013952:	da29      	bge.n	80139a8 <flash_map_read_mfg+0x72>
            return -1;
        }

        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_FLASH_AREA);
 8013954:	2102      	movs	r1, #2
 8013956:	a801      	add	r0, sp, #4
 8013958:	f000 f98d 	bl	8013c76 <mfg_seek_next_with_type>
 801395c:	4603      	mov	r3, r0
        switch (rc) {
 801395e:	f110 0f0f 	cmn.w	r0, #15
 8013962:	d003      	beq.n	801396c <flash_map_read_mfg+0x36>
 8013964:	b120      	cbz	r0, 8013970 <flash_map_read_mfg+0x3a>
        fap->fa_off = meta_flash_area.offset;
        fap->fa_size = meta_flash_area.size;

        (*out_num_areas)++;
    }
}
 8013966:	4618      	mov	r0, r3
 8013968:	b006      	add	sp, #24
 801396a:	bd70      	pop	{r4, r5, r6, pc}
            return 0;
 801396c:	2300      	movs	r3, #0
 801396e:	e7fa      	b.n	8013966 <flash_map_read_mfg+0x30>
        rc = mfg_read_tlv_flash_area(&reader, &meta_flash_area);
 8013970:	a903      	add	r1, sp, #12
 8013972:	a801      	add	r0, sp, #4
 8013974:	f000 f98c 	bl	8013c90 <mfg_read_tlv_flash_area>
        if (rc != 0) {
 8013978:	4603      	mov	r3, r0
 801397a:	2800      	cmp	r0, #0
 801397c:	d1f3      	bne.n	8013966 <flash_map_read_mfg+0x30>
        fap = out_areas + *out_num_areas;
 801397e:	6823      	ldr	r3, [r4, #0]
 8013980:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8013984:	009a      	lsls	r2, r3, #2
 8013986:	18b3      	adds	r3, r6, r2
        fap->fa_id = meta_flash_area.area_id;
 8013988:	f89d 100c 	ldrb.w	r1, [sp, #12]
 801398c:	54b1      	strb	r1, [r6, r2]
        fap->fa_device_id = meta_flash_area.device_id;
 801398e:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8013992:	705a      	strb	r2, [r3, #1]
        fap->fa_off = meta_flash_area.offset;
 8013994:	f8dd 200e 	ldr.w	r2, [sp, #14]
 8013998:	605a      	str	r2, [r3, #4]
        fap->fa_size = meta_flash_area.size;
 801399a:	f8dd 2012 	ldr.w	r2, [sp, #18]
 801399e:	609a      	str	r2, [r3, #8]
        (*out_num_areas)++;
 80139a0:	6823      	ldr	r3, [r4, #0]
 80139a2:	3301      	adds	r3, #1
 80139a4:	6023      	str	r3, [r4, #0]
        if (*out_num_areas >= max_areas) {
 80139a6:	e7d2      	b.n	801394e <flash_map_read_mfg+0x18>
            return -1;
 80139a8:	f04f 33ff 	mov.w	r3, #4294967295
 80139ac:	e7db      	b.n	8013966 <flash_map_read_mfg+0x30>
	...

080139b0 <flash_area_open>:
{
 80139b0:	b430      	push	{r4, r5}
    if (flash_map == NULL) {
 80139b2:	4b0d      	ldr	r3, [pc, #52]	; (80139e8 <flash_area_open+0x38>)
 80139b4:	681d      	ldr	r5, [r3, #0]
 80139b6:	b1a5      	cbz	r5, 80139e2 <flash_area_open+0x32>
    for (i = 0; i < flash_map_entries; i++) {
 80139b8:	2300      	movs	r3, #0
 80139ba:	4a0c      	ldr	r2, [pc, #48]	; (80139ec <flash_area_open+0x3c>)
 80139bc:	6812      	ldr	r2, [r2, #0]
 80139be:	429a      	cmp	r2, r3
 80139c0:	dd0b      	ble.n	80139da <flash_area_open+0x2a>
        area = flash_map + i;
 80139c2:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 80139c6:	00a2      	lsls	r2, r4, #2
 80139c8:	18ac      	adds	r4, r5, r2
        if (area->fa_id == id) {
 80139ca:	5caa      	ldrb	r2, [r5, r2]
 80139cc:	4282      	cmp	r2, r0
 80139ce:	d001      	beq.n	80139d4 <flash_area_open+0x24>
    for (i = 0; i < flash_map_entries; i++) {
 80139d0:	3301      	adds	r3, #1
 80139d2:	e7f2      	b.n	80139ba <flash_area_open+0xa>
            *fap = area;
 80139d4:	600c      	str	r4, [r1, #0]
            return 0;
 80139d6:	2000      	movs	r0, #0
 80139d8:	e001      	b.n	80139de <flash_area_open+0x2e>
    return SYS_ENOENT;
 80139da:	f06f 0003 	mvn.w	r0, #3
}
 80139de:	bc30      	pop	{r4, r5}
 80139e0:	4770      	bx	lr
        return SYS_EACCES;
 80139e2:	f06f 0006 	mvn.w	r0, #6
 80139e6:	e7fa      	b.n	80139de <flash_area_open+0x2e>
 80139e8:	200039b4 	.word	0x200039b4
 80139ec:	200039b8 	.word	0x200039b8

080139f0 <flash_area_read>:
{
 80139f0:	b538      	push	{r3, r4, r5, lr}
    if (off > fa->fa_size || off + len > fa->fa_size) {
 80139f2:	6884      	ldr	r4, [r0, #8]
 80139f4:	428c      	cmp	r4, r1
 80139f6:	d308      	bcc.n	8013a0a <flash_area_read+0x1a>
 80139f8:	18cd      	adds	r5, r1, r3
 80139fa:	42ac      	cmp	r4, r5
 80139fc:	d308      	bcc.n	8013a10 <flash_area_read+0x20>
    return hal_flash_read(fa->fa_device_id, fa->fa_off + off, dst, len);
 80139fe:	6844      	ldr	r4, [r0, #4]
 8013a00:	4421      	add	r1, r4
 8013a02:	7840      	ldrb	r0, [r0, #1]
 8013a04:	f000 fc77 	bl	80142f6 <hal_flash_read>
}
 8013a08:	bd38      	pop	{r3, r4, r5, pc}
        return -1;
 8013a0a:	f04f 30ff 	mov.w	r0, #4294967295
 8013a0e:	e7fb      	b.n	8013a08 <flash_area_read+0x18>
 8013a10:	f04f 30ff 	mov.w	r0, #4294967295
 8013a14:	e7f8      	b.n	8013a08 <flash_area_read+0x18>
	...

08013a18 <flash_map_init>:

void
flash_map_init(void)
{
 8013a18:	b510      	push	{r4, lr}
 8013a1a:	b084      	sub	sp, #16

    int num_areas;
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
 8013a1c:	4b14      	ldr	r3, [pc, #80]	; (8013a70 <flash_map_init+0x58>)
 8013a1e:	781b      	ldrb	r3, [r3, #0]
 8013a20:	b303      	cbz	r3, 8013a64 <flash_map_init+0x4c>

    rc = hal_flash_init();
 8013a22:	f000 fc54 	bl	80142ce <hal_flash_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
 8013a26:	b138      	cbz	r0, 8013a38 <flash_map_init+0x20>
 8013a28:	2000      	movs	r0, #0
 8013a2a:	9000      	str	r0, [sp, #0]
 8013a2c:	4b11      	ldr	r3, [pc, #68]	; (8013a74 <flash_map_init+0x5c>)
 8013a2e:	681c      	ldr	r4, [r3, #0]
 8013a30:	4603      	mov	r3, r0
 8013a32:	4602      	mov	r2, r0
 8013a34:	4601      	mov	r1, r0
 8013a36:	47a0      	blx	r4
     *    In particular, a FLASH_AREA_BOOTLOADER entry is required for the boot
     *    MMR, as well as an entry for each extended MMR.
     * 2. If we fail to read the flash map from the MMRs, the system continues
     *    to use the default flash map.
     */
    flash_map = sysflash_map_dflt;
 8013a38:	4b0f      	ldr	r3, [pc, #60]	; (8013a78 <flash_map_init+0x60>)
 8013a3a:	4a10      	ldr	r2, [pc, #64]	; (8013a7c <flash_map_init+0x64>)
 8013a3c:	601a      	str	r2, [r3, #0]
    flash_map_entries = sizeof sysflash_map_dflt / sizeof sysflash_map_dflt[0];
 8013a3e:	4b10      	ldr	r3, [pc, #64]	; (8013a80 <flash_map_init+0x68>)
 8013a40:	2206      	movs	r2, #6
 8013a42:	601a      	str	r2, [r3, #0]

    /* Attempt to read the flash map from the manufacturing meta regions.  On
     * success, use the new flash map instead of the default hardcoded one.
     */
    rc = flash_map_read_mfg(sizeof mfg_areas / sizeof mfg_areas[0],
 8013a44:	aa03      	add	r2, sp, #12
 8013a46:	490f      	ldr	r1, [pc, #60]	; (8013a84 <flash_map_init+0x6c>)
 8013a48:	200a      	movs	r0, #10
 8013a4a:	f7ff ff74 	bl	8013936 <flash_map_read_mfg>
                            mfg_areas, &num_areas);
    if (rc == 0 && num_areas > 0) {
 8013a4e:	b938      	cbnz	r0, 8013a60 <flash_map_init+0x48>
 8013a50:	9b03      	ldr	r3, [sp, #12]
 8013a52:	2b00      	cmp	r3, #0
 8013a54:	dd04      	ble.n	8013a60 <flash_map_init+0x48>
        flash_map = mfg_areas;
 8013a56:	4a08      	ldr	r2, [pc, #32]	; (8013a78 <flash_map_init+0x60>)
 8013a58:	490a      	ldr	r1, [pc, #40]	; (8013a84 <flash_map_init+0x6c>)
 8013a5a:	6011      	str	r1, [r2, #0]
        flash_map_entries = num_areas;
 8013a5c:	4a08      	ldr	r2, [pc, #32]	; (8013a80 <flash_map_init+0x68>)
 8013a5e:	6013      	str	r3, [r2, #0]
    }
}
 8013a60:	b004      	add	sp, #16
 8013a62:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
 8013a64:	461a      	mov	r2, r3
 8013a66:	4619      	mov	r1, r3
 8013a68:	4618      	mov	r0, r3
 8013a6a:	f7f8 fdb3 	bl	800c5d4 <__assert_func>
 8013a6e:	bf00      	nop
 8013a70:	20003838 	.word	0x20003838
 8013a74:	20000228 	.word	0x20000228
 8013a78:	200039b4 	.word	0x200039b4
 8013a7c:	08018868 	.word	0x08018868
 8013a80:	200039b8 	.word	0x200039b8
 8013a84:	20003718 	.word	0x20003718

08013a88 <modlog_init>:

#else /* LOG_FULL */

void
modlog_init(void)
{ }
 8013a88:	4770      	bx	lr
	...

08013a8c <mfg_seek_next_aux>:
 *                                  for reading.
 *                              Other MFG error code on failure.
 */
static int
mfg_seek_next_aux(struct mfg_reader *reader)
{
 8013a8c:	b530      	push	{r4, r5, lr}
 8013a8e:	b083      	sub	sp, #12
    const struct flash_area *fap;
    const struct mfg_mmr *mmr;
    int rc;

    if (reader->mmr_idx >= mfg_num_mmrs) {
 8013a90:	7885      	ldrb	r5, [r0, #2]
 8013a92:	4b21      	ldr	r3, [pc, #132]	; (8013b18 <mfg_seek_next_aux+0x8c>)
 8013a94:	681b      	ldr	r3, [r3, #0]
 8013a96:	429d      	cmp	r5, r3
 8013a98:	da32      	bge.n	8013b00 <mfg_seek_next_aux+0x74>
 8013a9a:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }

    mmr = &mfg_mmrs[reader->mmr_idx];

    rc = flash_area_open(mmr->area_id, &fap);
 8013a9c:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8013aa0:	0093      	lsls	r3, r2, #2
 8013aa2:	a901      	add	r1, sp, #4
 8013aa4:	4a1d      	ldr	r2, [pc, #116]	; (8013b1c <mfg_seek_next_aux+0x90>)
 8013aa6:	5cd0      	ldrb	r0, [r2, r3]
 8013aa8:	f7ff ff82 	bl	80139b0 <flash_area_open>
    if (rc != 0) {
 8013aac:	bb58      	cbnz	r0, 8013b06 <mfg_seek_next_aux+0x7a>
        return SYS_EIO;
    }

    if (reader->offset == 0) {
 8013aae:	6862      	ldr	r2, [r4, #4]
 8013ab0:	b9c2      	cbnz	r2, 8013ae4 <mfg_seek_next_aux+0x58>
        /* First seek; advance to the start of the MMR. */
        reader->offset = mmr->offset;
 8013ab2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013ab6:	00aa      	lsls	r2, r5, #2
 8013ab8:	4b18      	ldr	r3, [pc, #96]	; (8013b1c <mfg_seek_next_aux+0x90>)
 8013aba:	4413      	add	r3, r2
 8013abc:	685b      	ldr	r3, [r3, #4]
 8013abe:	6063      	str	r3, [r4, #4]
    } else {
        /* Follow-up seek; skip the current TLV. */
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
    }

    if (reader->offset >= fap->fa_size - MFG_META_FOOTER_SZ) {
 8013ac0:	6861      	ldr	r1, [r4, #4]
 8013ac2:	9801      	ldr	r0, [sp, #4]
 8013ac4:	6883      	ldr	r3, [r0, #8]
 8013ac6:	3b08      	subs	r3, #8
 8013ac8:	4299      	cmp	r1, r3
 8013aca:	d310      	bcc.n	8013aee <mfg_seek_next_aux+0x62>
        /* Reached end of the MMR; advance to the next MMR if one exists. */
        if (reader->mmr_idx + 1 >= mfg_num_mmrs) {
 8013acc:	78a3      	ldrb	r3, [r4, #2]
 8013ace:	1c59      	adds	r1, r3, #1
 8013ad0:	4a11      	ldr	r2, [pc, #68]	; (8013b18 <mfg_seek_next_aux+0x8c>)
 8013ad2:	6812      	ldr	r2, [r2, #0]
 8013ad4:	4291      	cmp	r1, r2
 8013ad6:	da19      	bge.n	8013b0c <mfg_seek_next_aux+0x80>
            rc = SYS_EDONE;
        } else {
            reader->offset = 0;
 8013ad8:	2200      	movs	r2, #0
 8013ada:	6062      	str	r2, [r4, #4]
            reader->mmr_idx++;
 8013adc:	70a1      	strb	r1, [r4, #2]
            rc = SYS_EAGAIN;
 8013ade:	f06f 0305 	mvn.w	r3, #5
 8013ae2:	e015      	b.n	8013b10 <mfg_seek_next_aux+0x84>
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
 8013ae4:	7863      	ldrb	r3, [r4, #1]
 8013ae6:	4413      	add	r3, r2
 8013ae8:	3302      	adds	r3, #2
 8013aea:	6063      	str	r3, [r4, #4]
 8013aec:	e7e8      	b.n	8013ac0 <mfg_seek_next_aux+0x34>
        }
        goto done;
    }

    /* Read current TLV header. */
    rc = flash_area_read(fap, reader->offset, &reader->cur_tlv,
 8013aee:	2302      	movs	r3, #2
 8013af0:	4622      	mov	r2, r4
 8013af2:	f7ff ff7d 	bl	80139f0 <flash_area_read>
                         MFG_META_TLV_SZ);
    if (rc != 0) {
 8013af6:	4603      	mov	r3, r0
 8013af8:	b150      	cbz	r0, 8013b10 <mfg_seek_next_aux+0x84>
        rc = SYS_EIO;
 8013afa:	f06f 0304 	mvn.w	r3, #4
 8013afe:	e007      	b.n	8013b10 <mfg_seek_next_aux+0x84>
        return SYS_EINVAL;
 8013b00:	f06f 0301 	mvn.w	r3, #1
 8013b04:	e004      	b.n	8013b10 <mfg_seek_next_aux+0x84>
        return SYS_EIO;
 8013b06:	f06f 0304 	mvn.w	r3, #4
 8013b0a:	e001      	b.n	8013b10 <mfg_seek_next_aux+0x84>
            rc = SYS_EDONE;
 8013b0c:	f06f 030e 	mvn.w	r3, #14
    }

done:
    flash_area_close(fap);
    return rc;
}
 8013b10:	4618      	mov	r0, r3
 8013b12:	b003      	add	sp, #12
 8013b14:	bd30      	pop	{r4, r5, pc}
 8013b16:	bf00      	nop
 8013b18:	200037ac 	.word	0x200037ac
 8013b1c:	20003794 	.word	0x20003794

08013b20 <mfg_read_mmr>:
/**
 * Reads an MMR from the end of the specified flash area.
 */
static int
mfg_read_mmr(uint8_t area_id, struct mfg_mmr *out_mmr)
{
 8013b20:	b530      	push	{r4, r5, lr}
 8013b22:	b085      	sub	sp, #20
 8013b24:	4605      	mov	r5, r0
 8013b26:	460c      	mov	r4, r1
    const struct flash_area *fap;
    struct mfg_meta_footer ftr;
    int rc;

    rc = flash_area_open(area_id, &fap);
 8013b28:	a903      	add	r1, sp, #12
 8013b2a:	f7ff ff41 	bl	80139b0 <flash_area_open>
    if (rc != 0) {
 8013b2e:	b9e8      	cbnz	r0, 8013b6c <mfg_read_mmr+0x4c>
        return SYS_EIO;
    }

    /* Read the MMR footer. */
    rc = flash_area_read(fap, fap->fa_size - sizeof ftr, &ftr, sizeof ftr);
 8013b30:	9803      	ldr	r0, [sp, #12]
 8013b32:	6881      	ldr	r1, [r0, #8]
 8013b34:	2308      	movs	r3, #8
 8013b36:	aa01      	add	r2, sp, #4
 8013b38:	3908      	subs	r1, #8
 8013b3a:	f7ff ff59 	bl	80139f0 <flash_area_read>
    flash_area_close(fap);

    if (rc != 0) {
 8013b3e:	4601      	mov	r1, r0
 8013b40:	b9b8      	cbnz	r0, 8013b72 <mfg_read_mmr+0x52>
        return SYS_EIO;
    }

    if (ftr.magic != MFG_META_MAGIC) {
 8013b42:	9a02      	ldr	r2, [sp, #8]
 8013b44:	4b11      	ldr	r3, [pc, #68]	; (8013b8c <mfg_read_mmr+0x6c>)
 8013b46:	429a      	cmp	r2, r3
 8013b48:	d116      	bne.n	8013b78 <mfg_read_mmr+0x58>
        return SYS_ENODEV;
    }

    if (ftr.version != MFG_META_VERSION) {
 8013b4a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8013b4e:	2b02      	cmp	r3, #2
 8013b50:	d115      	bne.n	8013b7e <mfg_read_mmr+0x5e>
        return SYS_ENOTSUP;
    }

    if (ftr.size > fap->fa_size) {
 8013b52:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8013b56:	9b03      	ldr	r3, [sp, #12]
 8013b58:	689b      	ldr	r3, [r3, #8]
 8013b5a:	429a      	cmp	r2, r3
 8013b5c:	d812      	bhi.n	8013b84 <mfg_read_mmr+0x64>
        return SYS_ENODEV;
    }

    *out_mmr = (struct mfg_mmr) {
        .area_id = area_id,
        .offset = fap->fa_size - ftr.size,
 8013b5e:	1a9b      	subs	r3, r3, r2
    *out_mmr = (struct mfg_mmr) {
 8013b60:	7025      	strb	r5, [r4, #0]
 8013b62:	6063      	str	r3, [r4, #4]
 8013b64:	60a2      	str	r2, [r4, #8]
        .size = ftr.size,
    };

    return 0;
}
 8013b66:	4608      	mov	r0, r1
 8013b68:	b005      	add	sp, #20
 8013b6a:	bd30      	pop	{r4, r5, pc}
        return SYS_EIO;
 8013b6c:	f06f 0104 	mvn.w	r1, #4
 8013b70:	e7f9      	b.n	8013b66 <mfg_read_mmr+0x46>
        return SYS_EIO;
 8013b72:	f06f 0104 	mvn.w	r1, #4
 8013b76:	e7f6      	b.n	8013b66 <mfg_read_mmr+0x46>
        return SYS_ENODEV;
 8013b78:	f06f 0108 	mvn.w	r1, #8
 8013b7c:	e7f3      	b.n	8013b66 <mfg_read_mmr+0x46>
        return SYS_ENOTSUP;
 8013b7e:	f06f 010b 	mvn.w	r1, #11
 8013b82:	e7f0      	b.n	8013b66 <mfg_read_mmr+0x46>
        return SYS_ENODEV;
 8013b84:	f06f 0108 	mvn.w	r1, #8
 8013b88:	e7ed      	b.n	8013b66 <mfg_read_mmr+0x46>
 8013b8a:	bf00      	nop
 8013b8c:	3bb2a269 	.word	0x3bb2a269

08013b90 <mfg_read_next_mmr>:
 * Reads an MMR from the end of the specified flash area.  On success, the
 * global MMR list is populated with the result for subsequent reading.
 */
static int
mfg_read_next_mmr(uint8_t area_id)
{
 8013b90:	b508      	push	{r3, lr}
    int rc;
    int i;

    /* Detect if this MMR has already been read. */
    for (i = 0; i < mfg_num_mmrs; i++) {
 8013b92:	2300      	movs	r3, #0
 8013b94:	4a11      	ldr	r2, [pc, #68]	; (8013bdc <mfg_read_next_mmr+0x4c>)
 8013b96:	6812      	ldr	r2, [r2, #0]
 8013b98:	429a      	cmp	r2, r3
 8013b9a:	dd08      	ble.n	8013bae <mfg_read_next_mmr+0x1e>
        if (mfg_mmrs[i].area_id == area_id) {
 8013b9c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8013ba0:	008a      	lsls	r2, r1, #2
 8013ba2:	490f      	ldr	r1, [pc, #60]	; (8013be0 <mfg_read_next_mmr+0x50>)
 8013ba4:	5c8a      	ldrb	r2, [r1, r2]
 8013ba6:	4282      	cmp	r2, r0
 8013ba8:	d011      	beq.n	8013bce <mfg_read_next_mmr+0x3e>
    for (i = 0; i < mfg_num_mmrs; i++) {
 8013baa:	3301      	adds	r3, #1
 8013bac:	e7f2      	b.n	8013b94 <mfg_read_next_mmr+0x4>
            return SYS_EALREADY;
        }
    }

    if (mfg_num_mmrs >= MYNEWT_VAL(MFG_MAX_MMRS)) {
 8013bae:	2a01      	cmp	r2, #1
 8013bb0:	dc11      	bgt.n	8013bd6 <mfg_read_next_mmr+0x46>
        return SYS_ENOMEM;
    }

    rc = mfg_read_mmr(area_id, &mfg_mmrs[mfg_num_mmrs]);
 8013bb2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8013bb6:	0093      	lsls	r3, r2, #2
 8013bb8:	4909      	ldr	r1, [pc, #36]	; (8013be0 <mfg_read_next_mmr+0x50>)
 8013bba:	4419      	add	r1, r3
 8013bbc:	f7ff ffb0 	bl	8013b20 <mfg_read_mmr>
    if (rc != 0) {
 8013bc0:	4603      	mov	r3, r0
 8013bc2:	b930      	cbnz	r0, 8013bd2 <mfg_read_next_mmr+0x42>
        return rc;
    }

    mfg_num_mmrs++;
 8013bc4:	4905      	ldr	r1, [pc, #20]	; (8013bdc <mfg_read_next_mmr+0x4c>)
 8013bc6:	680a      	ldr	r2, [r1, #0]
 8013bc8:	3201      	adds	r2, #1
 8013bca:	600a      	str	r2, [r1, #0]
    return 0;
 8013bcc:	e001      	b.n	8013bd2 <mfg_read_next_mmr+0x42>
            return SYS_EALREADY;
 8013bce:	f06f 030a 	mvn.w	r3, #10
}
 8013bd2:	4618      	mov	r0, r3
 8013bd4:	bd08      	pop	{r3, pc}
        return SYS_ENOMEM;
 8013bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8013bda:	e7fa      	b.n	8013bd2 <mfg_read_next_mmr+0x42>
 8013bdc:	200037ac 	.word	0x200037ac
 8013be0:	20003794 	.word	0x20003794

08013be4 <mfg_open_flash_area>:
{
 8013be4:	b508      	push	{r3, lr}
    assert(reader->mmr_idx < mfg_num_mmrs);
 8013be6:	7883      	ldrb	r3, [r0, #2]
 8013be8:	4a0b      	ldr	r2, [pc, #44]	; (8013c18 <mfg_open_flash_area+0x34>)
 8013bea:	6812      	ldr	r2, [r2, #0]
 8013bec:	4293      	cmp	r3, r2
 8013bee:	da0a      	bge.n	8013c06 <mfg_open_flash_area+0x22>
    rc = flash_area_open(mmr->area_id, fap);
 8013bf0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8013bf4:	009a      	lsls	r2, r3, #2
 8013bf6:	4b09      	ldr	r3, [pc, #36]	; (8013c1c <mfg_open_flash_area+0x38>)
 8013bf8:	5c98      	ldrb	r0, [r3, r2]
 8013bfa:	f7ff fed9 	bl	80139b0 <flash_area_open>
    if (rc != 0) {
 8013bfe:	4603      	mov	r3, r0
 8013c00:	b938      	cbnz	r0, 8013c12 <mfg_open_flash_area+0x2e>
}
 8013c02:	4618      	mov	r0, r3
 8013c04:	bd08      	pop	{r3, pc}
    assert(reader->mmr_idx < mfg_num_mmrs);
 8013c06:	2300      	movs	r3, #0
 8013c08:	461a      	mov	r2, r3
 8013c0a:	4619      	mov	r1, r3
 8013c0c:	4618      	mov	r0, r3
 8013c0e:	f7f8 fce1 	bl	800c5d4 <__assert_func>
        return SYS_EIO;
 8013c12:	f06f 0304 	mvn.w	r3, #4
 8013c16:	e7f4      	b.n	8013c02 <mfg_open_flash_area+0x1e>
 8013c18:	200037ac 	.word	0x200037ac
 8013c1c:	20003794 	.word	0x20003794

08013c20 <mfg_read_tlv_body>:
{
 8013c20:	b570      	push	{r4, r5, r6, lr}
 8013c22:	b082      	sub	sp, #8
 8013c24:	4606      	mov	r6, r0
 8013c26:	460c      	mov	r4, r1
 8013c28:	4615      	mov	r5, r2
    rc = mfg_open_flash_area(reader, &fap);
 8013c2a:	a901      	add	r1, sp, #4
 8013c2c:	f7ff ffda 	bl	8013be4 <mfg_open_flash_area>
    if (rc != 0) {
 8013c30:	4603      	mov	r3, r0
 8013c32:	b110      	cbz	r0, 8013c3a <mfg_read_tlv_body+0x1a>
}
 8013c34:	4618      	mov	r0, r3
 8013c36:	b002      	add	sp, #8
 8013c38:	bd70      	pop	{r4, r5, r6, pc}
    memset(dst, 0, max_size);
 8013c3a:	462a      	mov	r2, r5
 8013c3c:	2100      	movs	r1, #0
 8013c3e:	4620      	mov	r0, r4
 8013c40:	f7fa f999 	bl	800df76 <memset>
    read_sz = min(max_size, reader->cur_tlv.size);
 8013c44:	7873      	ldrb	r3, [r6, #1]
    rc = flash_area_read(fap, reader->offset + MFG_META_TLV_SZ, dst, read_sz);
 8013c46:	6871      	ldr	r1, [r6, #4]
 8013c48:	42ab      	cmp	r3, r5
 8013c4a:	bfa8      	it	ge
 8013c4c:	462b      	movge	r3, r5
 8013c4e:	4622      	mov	r2, r4
 8013c50:	3102      	adds	r1, #2
 8013c52:	9801      	ldr	r0, [sp, #4]
 8013c54:	f7ff fecc 	bl	80139f0 <flash_area_read>
    if (rc != 0) {
 8013c58:	4603      	mov	r3, r0
 8013c5a:	2800      	cmp	r0, #0
 8013c5c:	d0ea      	beq.n	8013c34 <mfg_read_tlv_body+0x14>
        return SYS_EIO;
 8013c5e:	f06f 0304 	mvn.w	r3, #4
 8013c62:	e7e7      	b.n	8013c34 <mfg_read_tlv_body+0x14>

08013c64 <mfg_seek_next>:
{
 8013c64:	b510      	push	{r4, lr}
 8013c66:	4604      	mov	r4, r0
        rc = mfg_seek_next_aux(reader);
 8013c68:	4620      	mov	r0, r4
 8013c6a:	f7ff ff0f 	bl	8013a8c <mfg_seek_next_aux>
    } while (rc == SYS_EAGAIN);
 8013c6e:	f110 0f06 	cmn.w	r0, #6
 8013c72:	d0f9      	beq.n	8013c68 <mfg_seek_next+0x4>
}
 8013c74:	bd10      	pop	{r4, pc}

08013c76 <mfg_seek_next_with_type>:
{
 8013c76:	b538      	push	{r3, r4, r5, lr}
 8013c78:	4604      	mov	r4, r0
 8013c7a:	460d      	mov	r5, r1
        rc = mfg_seek_next(reader);
 8013c7c:	4620      	mov	r0, r4
 8013c7e:	f7ff fff1 	bl	8013c64 <mfg_seek_next>
        if (rc != 0) {
 8013c82:	4602      	mov	r2, r0
 8013c84:	b910      	cbnz	r0, 8013c8c <mfg_seek_next_with_type+0x16>
        if (reader->cur_tlv.type == type) {
 8013c86:	7823      	ldrb	r3, [r4, #0]
 8013c88:	42ab      	cmp	r3, r5
 8013c8a:	d1f7      	bne.n	8013c7c <mfg_seek_next_with_type+0x6>
}
 8013c8c:	4610      	mov	r0, r2
 8013c8e:	bd38      	pop	{r3, r4, r5, pc}

08013c90 <mfg_read_tlv_flash_area>:
{
 8013c90:	b508      	push	{r3, lr}
    return mfg_read_tlv_body(reader, out_mfa, sizeof *out_mfa);
 8013c92:	220a      	movs	r2, #10
 8013c94:	f7ff ffc4 	bl	8013c20 <mfg_read_tlv_body>
}
 8013c98:	bd08      	pop	{r3, pc}

08013c9a <mfg_read_tlv_mmr_ref>:
{
 8013c9a:	b508      	push	{r3, lr}
    return mfg_read_tlv_body(reader, out_mr, sizeof *out_mr);
 8013c9c:	2201      	movs	r2, #1
 8013c9e:	f7ff ffbf 	bl	8013c20 <mfg_read_tlv_body>
}
 8013ca2:	bd08      	pop	{r3, pc}

08013ca4 <mfg_init>:
 * called before any TLVs can be read.  No-op if this function has already
 * executed successfully.
 */
void
mfg_init(void)
{
 8013ca4:	b508      	push	{r3, lr}
    int rc;

    if (mfg_initialized) {
 8013ca6:	4b0b      	ldr	r3, [pc, #44]	; (8013cd4 <mfg_init+0x30>)
 8013ca8:	781b      	ldrb	r3, [r3, #0]
 8013caa:	b94b      	cbnz	r3, 8013cc0 <mfg_init+0x1c>
        return;
    }
    mfg_initialized = true;
 8013cac:	4b09      	ldr	r3, [pc, #36]	; (8013cd4 <mfg_init+0x30>)
 8013cae:	2201      	movs	r2, #1
 8013cb0:	701a      	strb	r2, [r3, #0]

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
 8013cb2:	4b09      	ldr	r3, [pc, #36]	; (8013cd8 <mfg_init+0x34>)
 8013cb4:	781b      	ldrb	r3, [r3, #0]
 8013cb6:	b123      	cbz	r3, 8013cc2 <mfg_init+0x1e>

    /* Read the first MMR from the boot loader area. */
    rc = mfg_read_next_mmr(FLASH_AREA_BOOTLOADER);
 8013cb8:	2000      	movs	r0, #0
 8013cba:	f7ff ff69 	bl	8013b90 <mfg_read_next_mmr>
    if (rc != 0) {
 8013cbe:	b128      	cbz	r0, 8013ccc <mfg_init+0x28>

    return;

err:
    MFG_LOG(ERROR, "failed to read MMRs: rc=%d", rc);
}
 8013cc0:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
 8013cc2:	461a      	mov	r2, r3
 8013cc4:	4619      	mov	r1, r3
 8013cc6:	4618      	mov	r0, r3
 8013cc8:	f7f8 fc84 	bl	800c5d4 <__assert_func>
    rc = mfg_read_mmr_refs();
 8013ccc:	f000 f80e 	bl	8013cec <mfg_read_mmr_refs>
err:
 8013cd0:	e7f6      	b.n	8013cc0 <mfg_init+0x1c>
 8013cd2:	bf00      	nop
 8013cd4:	20003790 	.word	0x20003790
 8013cd8:	20003838 	.word	0x20003838

08013cdc <mfg_open>:
{
 8013cdc:	b510      	push	{r4, lr}
 8013cde:	4604      	mov	r4, r0
    mfg_init();
 8013ce0:	f7ff ffe0 	bl	8013ca4 <mfg_init>
    *out_reader = (struct mfg_reader) { 0 };
 8013ce4:	2300      	movs	r3, #0
 8013ce6:	6023      	str	r3, [r4, #0]
 8013ce8:	6063      	str	r3, [r4, #4]
}
 8013cea:	bd10      	pop	{r4, pc}

08013cec <mfg_read_mmr_refs>:
{
 8013cec:	b500      	push	{lr}
 8013cee:	b085      	sub	sp, #20
    mfg_open(&reader);
 8013cf0:	a801      	add	r0, sp, #4
 8013cf2:	f7ff fff3 	bl	8013cdc <mfg_open>
        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_MMR_REF);
 8013cf6:	2104      	movs	r1, #4
 8013cf8:	eb0d 0001 	add.w	r0, sp, r1
 8013cfc:	f7ff ffbb 	bl	8013c76 <mfg_seek_next_with_type>
 8013d00:	4603      	mov	r3, r0
        switch (rc) {
 8013d02:	f110 0f0f 	cmn.w	r0, #15
 8013d06:	d004      	beq.n	8013d12 <mfg_read_mmr_refs+0x26>
 8013d08:	b128      	cbz	r0, 8013d16 <mfg_read_mmr_refs+0x2a>
}
 8013d0a:	4618      	mov	r0, r3
 8013d0c:	b005      	add	sp, #20
 8013d0e:	f85d fb04 	ldr.w	pc, [sp], #4
            return 0;
 8013d12:	2300      	movs	r3, #0
 8013d14:	e7f9      	b.n	8013d0a <mfg_read_mmr_refs+0x1e>
        rc = mfg_read_tlv_mmr_ref(&reader, &mmr_ref);
 8013d16:	a903      	add	r1, sp, #12
 8013d18:	a801      	add	r0, sp, #4
 8013d1a:	f7ff ffbe 	bl	8013c9a <mfg_read_tlv_mmr_ref>
        if (rc != 0) {
 8013d1e:	4603      	mov	r3, r0
 8013d20:	2800      	cmp	r0, #0
 8013d22:	d1f2      	bne.n	8013d0a <mfg_read_mmr_refs+0x1e>
        rc = mfg_read_next_mmr(mmr_ref.area_id);
 8013d24:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8013d28:	f7ff ff32 	bl	8013b90 <mfg_read_next_mmr>
        if (rc != 0 && rc != SYS_EALREADY) {
 8013d2c:	4603      	mov	r3, r0
 8013d2e:	2800      	cmp	r0, #0
 8013d30:	d0e1      	beq.n	8013cf6 <mfg_read_mmr_refs+0xa>
 8013d32:	f110 0f0b 	cmn.w	r0, #11
 8013d36:	d0de      	beq.n	8013cf6 <mfg_read_mmr_refs+0xa>
 8013d38:	e7e7      	b.n	8013d0a <mfg_read_mmr_refs+0x1e>
	...

08013d3c <vsscanf>:
{
	return (int)(bitmap[bit / LONG_BIT] >> (bit % LONG_BIT)) & 1;
}

int vsscanf(const char *buffer, const char *format, va_list ap)
{
 8013d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d40:	b08f      	sub	sp, #60	; 0x3c
 8013d42:	9002      	str	r0, [sp, #8]
 8013d44:	9203      	str	r2, [sp, #12]
	const char *p = format;
	char ch;
	unsigned char uc;
	const char *q = buffer;
 8013d46:	4605      	mov	r5, r0
	enum bail bail = bail_none;
	int sign;
	int converted = 0;	/* Successful conversions */
	unsigned long matchmap[((1 << CHAR_BIT) + (LONG_BIT - 1)) / LONG_BIT];
	int matchinv = 0;	/* Is match map inverted? */
	unsigned char range_start = 0;
 8013d48:	f04f 0a00 	mov.w	sl, #0
	int matchinv = 0;	/* Is match map inverted? */
 8013d4c:	46d1      	mov	r9, sl
	int converted = 0;	/* Successful conversions */
 8013d4e:	f8cd a000 	str.w	sl, [sp]
	char *sarg = NULL;	/* %s %c or %[ string argument */
 8013d52:	4657      	mov	r7, sl
	} state = st_normal;
 8013d54:	4652      	mov	r2, sl
	enum flags flags = 0;
 8013d56:	46d3      	mov	fp, sl
	unsigned int width = UINT_MAX;
 8013d58:	f04f 34ff 	mov.w	r4, #4294967295
	int rank = rank_int;	/* Default rank */
 8013d5c:	f8cd a004 	str.w	sl, [sp, #4]
 8013d60:	4623      	mov	r3, r4
 8013d62:	4654      	mov	r4, sl
 8013d64:	4698      	mov	r8, r3
	(void)sign;

	while ((ch = *p++) && !bail) {
 8013d66:	e1f6      	b.n	8014156 <vsscanf+0x41a>
		switch (state) {
		case st_normal:
			if (ch == '%') {
 8013d68:	2b25      	cmp	r3, #37	; 0x25
 8013d6a:	f000 8270 	beq.w	801424e <vsscanf+0x512>
 8013d6e:	2b20      	cmp	r3, #32
 8013d70:	d00b      	beq.n	8013d8a <vsscanf+0x4e>
 8013d72:	2b0a      	cmp	r3, #10
 8013d74:	d009      	beq.n	8013d8a <vsscanf+0x4e>
 8013d76:	2b09      	cmp	r3, #9
 8013d78:	d007      	beq.n	8013d8a <vsscanf+0x4e>
 8013d7a:	2b0d      	cmp	r3, #13
 8013d7c:	d005      	beq.n	8013d8a <vsscanf+0x4e>
				rank = rank_int;
				width = UINT_MAX;
			} else if (isspace((unsigned char)ch)) {
				q = skipspace(q);
			} else {
				if (*q == ch)
 8013d7e:	7829      	ldrb	r1, [r5, #0]
 8013d80:	4299      	cmp	r1, r3
 8013d82:	d00c      	beq.n	8013d9e <vsscanf+0x62>
					q++;
				else
					bail = bail_err; /* Match failure */
 8013d84:	2402      	movs	r4, #2
 8013d86:	e1e5      	b.n	8014154 <vsscanf+0x418>
		p++;
 8013d88:	3501      	adds	r5, #1
	while (isspace((unsigned char)*p))
 8013d8a:	782b      	ldrb	r3, [r5, #0]
 8013d8c:	2b20      	cmp	r3, #32
 8013d8e:	d0fb      	beq.n	8013d88 <vsscanf+0x4c>
 8013d90:	2b0a      	cmp	r3, #10
 8013d92:	d0f9      	beq.n	8013d88 <vsscanf+0x4c>
 8013d94:	2b09      	cmp	r3, #9
 8013d96:	d0f7      	beq.n	8013d88 <vsscanf+0x4c>
 8013d98:	2b0d      	cmp	r3, #13
 8013d9a:	d0f5      	beq.n	8013d88 <vsscanf+0x4c>
 8013d9c:	e1da      	b.n	8014154 <vsscanf+0x418>
					q++;
 8013d9e:	3501      	adds	r5, #1
 8013da0:	e1d8      	b.n	8014154 <vsscanf+0x418>
			}
			break;

		case st_flags:
			switch (ch) {
 8013da2:	2b2a      	cmp	r3, #42	; 0x2a
 8013da4:	d00c      	beq.n	8013dc0 <vsscanf+0x84>
 8013da6:	f0c0 825a 	bcc.w	801425e <vsscanf+0x522>
 8013daa:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8013dae:	2a09      	cmp	r2, #9
 8013db0:	f200 8255 	bhi.w	801425e <vsscanf+0x522>
			case '*':
				flags |= FL_SPLAT;
				break;
			case '0'...'9':
				width = (ch - '0');
 8013db4:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
				state = st_width;
				flags |= FL_WIDTH;
 8013db8:	f04b 0b04 	orr.w	fp, fp, #4
				state = st_width;
 8013dbc:	2202      	movs	r2, #2
				break;
 8013dbe:	e1c9      	b.n	8014154 <vsscanf+0x418>
				flags |= FL_SPLAT;
 8013dc0:	f04b 0b01 	orr.w	fp, fp, #1
				break;
 8013dc4:	e1c6      	b.n	8014154 <vsscanf+0x418>
				break;
			}
			break;

		case st_width:
			if (ch >= '0' && ch <= '9') {
 8013dc6:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8013dca:	b2c0      	uxtb	r0, r0
 8013dcc:	2809      	cmp	r0, #9
 8013dce:	f200 8249 	bhi.w	8014264 <vsscanf+0x528>
				width = width * 10 + (ch - '0');
 8013dd2:	eb08 0888 	add.w	r8, r8, r8, lsl #2
 8013dd6:	ea4f 0148 	mov.w	r1, r8, lsl #1
 8013dda:	eb03 0801 	add.w	r8, r3, r1
 8013dde:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
 8013de2:	e1b7      	b.n	8014154 <vsscanf+0x418>
				p--;	/* Process this character again */
			}
			break;

		case st_modifiers:
			switch (ch) {
 8013de4:	f1a3 014c 	sub.w	r1, r3, #76	; 0x4c
 8013de8:	292e      	cmp	r1, #46	; 0x2e
 8013dea:	d83b      	bhi.n	8013e64 <vsscanf+0x128>
 8013dec:	e8df f011 	tbh	[pc, r1, lsl #1]
 8013df0:	003a002f 	.word	0x003a002f
 8013df4:	003a003a 	.word	0x003a003a
 8013df8:	003a003a 	.word	0x003a003a
 8013dfc:	003a003a 	.word	0x003a003a
 8013e00:	003a003a 	.word	0x003a003a
 8013e04:	003a003a 	.word	0x003a003a
 8013e08:	003a003a 	.word	0x003a003a
 8013e0c:	003a003a 	.word	0x003a003a
 8013e10:	003a003a 	.word	0x003a003a
 8013e14:	003a003a 	.word	0x003a003a
 8013e18:	003a003a 	.word	0x003a003a
 8013e1c:	003a003a 	.word	0x003a003a
 8013e20:	003a003a 	.word	0x003a003a
 8013e24:	003a003a 	.word	0x003a003a
 8013e28:	003a0032 	.word	0x003a0032
 8013e2c:	003a002f 	.word	0x003a002f
 8013e30:	003a0036 	.word	0x003a0036
 8013e34:	003a003a 	.word	0x003a003a
 8013e38:	002f003a 	.word	0x002f003a
 8013e3c:	003a003a 	.word	0x003a003a
 8013e40:	003a023d 	.word	0x003a023d
 8013e44:	003a003a 	.word	0x003a003a
 8013e48:	003a003a 	.word	0x003a003a
 8013e4c:	023d      	.short	0x023d
				break;
			case 'l':
				rank++;	/* Longer rank */
				break;
			case 'j':
				rank = INTMAX_RANK;
 8013e4e:	2302      	movs	r3, #2
 8013e50:	9301      	str	r3, [sp, #4]
 8013e52:	e17f      	b.n	8014154 <vsscanf+0x418>
				rank--;	/* Shorter rank */
 8013e54:	9b01      	ldr	r3, [sp, #4]
 8013e56:	3b01      	subs	r3, #1
 8013e58:	9301      	str	r3, [sp, #4]
				break;
 8013e5a:	e17b      	b.n	8014154 <vsscanf+0x418>
				rank++;	/* Longer rank */
 8013e5c:	9b01      	ldr	r3, [sp, #4]
 8013e5e:	3301      	adds	r3, #1
 8013e60:	9301      	str	r3, [sp, #4]
				break;
 8013e62:	e177      	b.n	8014154 <vsscanf+0x418>
				/* Output modifiers - terminal sequences */
				/* Next state will be normal */
				state = st_normal;

				/* Canonicalize rank */
				if (rank < MIN_RANK)
 8013e64:	9a01      	ldr	r2, [sp, #4]
 8013e66:	f112 0f02 	cmn.w	r2, #2
 8013e6a:	db04      	blt.n	8013e76 <vsscanf+0x13a>
					rank = MIN_RANK;
				else if (rank > MAX_RANK)
 8013e6c:	2a02      	cmp	r2, #2
 8013e6e:	dd05      	ble.n	8013e7c <vsscanf+0x140>
					rank = MAX_RANK;
 8013e70:	2202      	movs	r2, #2
 8013e72:	9201      	str	r2, [sp, #4]
 8013e74:	e002      	b.n	8013e7c <vsscanf+0x140>
					rank = MIN_RANK;
 8013e76:	f06f 0201 	mvn.w	r2, #1
 8013e7a:	9201      	str	r2, [sp, #4]

				switch (ch) {
 8013e7c:	3b25      	subs	r3, #37	; 0x25
 8013e7e:	2b53      	cmp	r3, #83	; 0x53
 8013e80:	f200 81f6 	bhi.w	8014270 <vsscanf+0x534>
 8013e84:	e8df f013 	tbh	[pc, r3, lsl #1]
 8013e88:	01f4014e 	.word	0x01f4014e
 8013e8c:	01f401f4 	.word	0x01f401f4
 8013e90:	01f401f4 	.word	0x01f401f4
 8013e94:	01f401f4 	.word	0x01f401f4
 8013e98:	01f401f4 	.word	0x01f401f4
 8013e9c:	01f401f4 	.word	0x01f401f4
 8013ea0:	01f401f4 	.word	0x01f401f4
 8013ea4:	01f401f4 	.word	0x01f401f4
 8013ea8:	01f401f4 	.word	0x01f401f4
 8013eac:	01f401f4 	.word	0x01f401f4
 8013eb0:	01f401f4 	.word	0x01f401f4
 8013eb4:	01f401f4 	.word	0x01f401f4
 8013eb8:	01f401f4 	.word	0x01f401f4
 8013ebc:	01f401f4 	.word	0x01f401f4
 8013ec0:	01f401f4 	.word	0x01f401f4
 8013ec4:	01f401f4 	.word	0x01f401f4
 8013ec8:	01f401f4 	.word	0x01f401f4
 8013ecc:	01f401f4 	.word	0x01f401f4
 8013ed0:	01f401f4 	.word	0x01f401f4
 8013ed4:	01f401f4 	.word	0x01f401f4
 8013ed8:	01f401f4 	.word	0x01f401f4
 8013edc:	007801f4 	.word	0x007801f4
 8013ee0:	01f401f4 	.word	0x01f401f4
 8013ee4:	01f401f4 	.word	0x01f401f4
 8013ee8:	01f401f4 	.word	0x01f401f4
 8013eec:	005a01f4 	.word	0x005a01f4
 8013ef0:	01f401f4 	.word	0x01f401f4
 8013ef4:	01f4013c 	.word	0x01f4013c
 8013ef8:	01f401f4 	.word	0x01f401f4
 8013efc:	01f401f4 	.word	0x01f401f4
 8013f00:	01f401f4 	.word	0x01f401f4
 8013f04:	005400cb 	.word	0x005400cb
 8013f08:	01f401f4 	.word	0x01f401f4
 8013f0c:	01f401f4 	.word	0x01f401f4
 8013f10:	01f4007d 	.word	0x01f4007d
 8013f14:	01f401f4 	.word	0x01f401f4
 8013f18:	005c01f4 	.word	0x005c01f4
 8013f1c:	00780056 	.word	0x00780056
 8013f20:	01f401f4 	.word	0x01f401f4
 8013f24:	01f400f7 	.word	0x01f400f7
 8013f28:	01f40058 	.word	0x01f40058
 8013f2c:	005a01f4 	.word	0x005a01f4
					base = 0;
					sign = 1;
					goto scan_int;

				case 'd':	/* Decimal integer */
					base = 10;
 8013f30:	220a      	movs	r2, #10
					sign = 1;
					goto scan_int;
 8013f32:	e029      	b.n	8013f88 <vsscanf+0x24c>

				case 'o':	/* Octal integer */
					base = 8;
 8013f34:	2208      	movs	r2, #8
					sign = 0;
					goto scan_int;
 8013f36:	e027      	b.n	8013f88 <vsscanf+0x24c>

				case 'u':	/* Unsigned decimal integer */
					base = 10;
 8013f38:	220a      	movs	r2, #10
					sign = 0;
					goto scan_int;
 8013f3a:	e025      	b.n	8013f88 <vsscanf+0x24c>

				case 'x':	/* Hexadecimal integer */
				case 'X':
					base = 16;
 8013f3c:	2210      	movs	r2, #16
					sign = 0;
					goto scan_int;
 8013f3e:	e023      	b.n	8013f88 <vsscanf+0x24c>

				case 'n':	/* # of characters consumed */
					val = (q - buffer);
 8013f40:	9b02      	ldr	r3, [sp, #8]
 8013f42:	1ae8      	subs	r0, r5, r3
 8013f44:	17c1      	asrs	r1, r0, #31
					if (!(flags & FL_SPLAT))
						converted++;
					/* fall through */

				      set_integer:
					if (!(flags & FL_SPLAT)) {
 8013f46:	f01b 0f01 	tst.w	fp, #1
 8013f4a:	f040 8197 	bne.w	801427c <vsscanf+0x540>
						switch (rank) {
 8013f4e:	9b01      	ldr	r3, [sp, #4]
 8013f50:	2b00      	cmp	r3, #0
 8013f52:	d04e      	beq.n	8013ff2 <vsscanf+0x2b6>
 8013f54:	2b00      	cmp	r3, #0
 8013f56:	dd37      	ble.n	8013fc8 <vsscanf+0x28c>
 8013f58:	9a01      	ldr	r2, [sp, #4]
 8013f5a:	2a02      	cmp	r2, #2
 8013f5c:	d057      	beq.n	801400e <vsscanf+0x2d2>
 8013f5e:	db4f      	blt.n	8014000 <vsscanf+0x2c4>
 8013f60:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8013f64:	429a      	cmp	r2, r3
 8013f66:	f040 818b 	bne.w	8014280 <vsscanf+0x544>
							*va_arg(ap,
								unsigned long
								long *) = val;
							break;
						case rank_ptr:
							*va_arg(ap, void **) =
 8013f6a:	9b03      	ldr	r3, [sp, #12]
 8013f6c:	1d1a      	adds	r2, r3, #4
 8013f6e:	9203      	str	r2, [sp, #12]
 8013f70:	681b      	ldr	r3, [r3, #0]
 8013f72:	6018      	str	r0, [r3, #0]
				state = st_normal;
 8013f74:	2200      	movs	r2, #0
								(void *)
								(uintptr_t)val;
							break;
 8013f76:	e0ed      	b.n	8014154 <vsscanf+0x418>
					base = 0;
 8013f78:	2200      	movs	r2, #0
					rank = rank_ptr;
 8013f7a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8013f7e:	9301      	str	r3, [sp, #4]
 8013f80:	e002      	b.n	8013f88 <vsscanf+0x24c>
					base = 0;
 8013f82:	2200      	movs	r2, #0
 8013f84:	e000      	b.n	8013f88 <vsscanf+0x24c>
		p++;
 8013f86:	3501      	adds	r5, #1
	while (isspace((unsigned char)*p))
 8013f88:	782b      	ldrb	r3, [r5, #0]
 8013f8a:	2b20      	cmp	r3, #32
 8013f8c:	d0fb      	beq.n	8013f86 <vsscanf+0x24a>
 8013f8e:	2b0a      	cmp	r3, #10
 8013f90:	d0f9      	beq.n	8013f86 <vsscanf+0x24a>
 8013f92:	2b09      	cmp	r3, #9
 8013f94:	d0f7      	beq.n	8013f86 <vsscanf+0x24a>
 8013f96:	2b0d      	cmp	r3, #13
 8013f98:	d0f5      	beq.n	8013f86 <vsscanf+0x24a>
					if (!*q) {
 8013f9a:	b913      	cbnz	r3, 8013fa2 <vsscanf+0x266>
						bail = bail_eof;
 8013f9c:	2401      	movs	r4, #1
				state = st_normal;
 8013f9e:	2200      	movs	r2, #0
 8013fa0:	e0d8      	b.n	8014154 <vsscanf+0x418>
					val =
 8013fa2:	4643      	mov	r3, r8
 8013fa4:	a90d      	add	r1, sp, #52	; 0x34
 8013fa6:	4628      	mov	r0, r5
 8013fa8:	f7fd fe48 	bl	8011c3c <strntoumax>
					if (qq == q) {
 8013fac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013fae:	42ab      	cmp	r3, r5
 8013fb0:	f000 8161 	beq.w	8014276 <vsscanf+0x53a>
					if (!(flags & FL_SPLAT))
 8013fb4:	f01b 0f01 	tst.w	fp, #1
 8013fb8:	d104      	bne.n	8013fc4 <vsscanf+0x288>
						converted++;
 8013fba:	9a00      	ldr	r2, [sp, #0]
 8013fbc:	3201      	adds	r2, #1
 8013fbe:	9200      	str	r2, [sp, #0]
					q = qq;
 8013fc0:	461d      	mov	r5, r3
 8013fc2:	e7c0      	b.n	8013f46 <vsscanf+0x20a>
 8013fc4:	461d      	mov	r5, r3
 8013fc6:	e7be      	b.n	8013f46 <vsscanf+0x20a>
						switch (rank) {
 8013fc8:	f113 0f02 	cmn.w	r3, #2
 8013fcc:	d00a      	beq.n	8013fe4 <vsscanf+0x2a8>
 8013fce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013fd2:	f040 8155 	bne.w	8014280 <vsscanf+0x544>
							*va_arg(ap,
 8013fd6:	9b03      	ldr	r3, [sp, #12]
 8013fd8:	1d1a      	adds	r2, r3, #4
 8013fda:	9203      	str	r2, [sp, #12]
 8013fdc:	681b      	ldr	r3, [r3, #0]
								*) = val;
 8013fde:	8018      	strh	r0, [r3, #0]
				state = st_normal;
 8013fe0:	2200      	movs	r2, #0
							break;
 8013fe2:	e0b7      	b.n	8014154 <vsscanf+0x418>
							*va_arg(ap,
 8013fe4:	9b03      	ldr	r3, [sp, #12]
 8013fe6:	1d1a      	adds	r2, r3, #4
 8013fe8:	9203      	str	r2, [sp, #12]
 8013fea:	681b      	ldr	r3, [r3, #0]
								= val;
 8013fec:	7018      	strb	r0, [r3, #0]
				state = st_normal;
 8013fee:	2200      	movs	r2, #0
							break;
 8013ff0:	e0b0      	b.n	8014154 <vsscanf+0x418>
							*va_arg(ap,
 8013ff2:	9b03      	ldr	r3, [sp, #12]
 8013ff4:	1d1a      	adds	r2, r3, #4
 8013ff6:	9203      	str	r2, [sp, #12]
 8013ff8:	681b      	ldr	r3, [r3, #0]
							    = val;
 8013ffa:	6018      	str	r0, [r3, #0]
				state = st_normal;
 8013ffc:	2200      	movs	r2, #0
							break;
 8013ffe:	e0a9      	b.n	8014154 <vsscanf+0x418>
							*va_arg(ap,
 8014000:	9b03      	ldr	r3, [sp, #12]
 8014002:	1d1a      	adds	r2, r3, #4
 8014004:	9203      	str	r2, [sp, #12]
 8014006:	681b      	ldr	r3, [r3, #0]
								= val;
 8014008:	6018      	str	r0, [r3, #0]
				state = st_normal;
 801400a:	2200      	movs	r2, #0
							break;
 801400c:	e0a2      	b.n	8014154 <vsscanf+0x418>
							*va_arg(ap,
 801400e:	9b03      	ldr	r3, [sp, #12]
 8014010:	1d1a      	adds	r2, r3, #4
 8014012:	9203      	str	r2, [sp, #12]
 8014014:	681b      	ldr	r3, [r3, #0]
								long *) = val;
 8014016:	e9c3 0100 	strd	r0, r1, [r3]
				state = st_normal;
 801401a:	2200      	movs	r2, #0
							break;
 801401c:	e09a      	b.n	8014154 <vsscanf+0x418>
					}
					break;

				case 'c':	/* Character */
					/* Default width == 1 */
					width = (flags & FL_WIDTH) ? width : 1;
 801401e:	f01b 0f04 	tst.w	fp, #4
 8014022:	d011      	beq.n	8014048 <vsscanf+0x30c>
 8014024:	4643      	mov	r3, r8
					if (flags & FL_SPLAT) {
 8014026:	f01b 0f01 	tst.w	fp, #1
 801402a:	d10f      	bne.n	801404c <vsscanf+0x310>
								bail = bail_eof;
								break;
							}
						}
					} else {
						sarg = va_arg(ap, char *);
 801402c:	9a03      	ldr	r2, [sp, #12]
 801402e:	1d11      	adds	r1, r2, #4
 8014030:	9103      	str	r1, [sp, #12]
 8014032:	6817      	ldr	r7, [r2, #0]
						while (width--) {
 8014034:	f103 38ff 	add.w	r8, r3, #4294967295
 8014038:	b1ab      	cbz	r3, 8014066 <vsscanf+0x32a>
							if (!*q) {
 801403a:	782b      	ldrb	r3, [r5, #0]
 801403c:	b193      	cbz	r3, 8014064 <vsscanf+0x328>
								bail = bail_eof;
								break;
							}
							*sarg++ = *q++;
 801403e:	3501      	adds	r5, #1
 8014040:	703b      	strb	r3, [r7, #0]
 8014042:	3701      	adds	r7, #1
						while (width--) {
 8014044:	4643      	mov	r3, r8
 8014046:	e7f5      	b.n	8014034 <vsscanf+0x2f8>
					width = (flags & FL_WIDTH) ? width : 1;
 8014048:	2301      	movs	r3, #1
 801404a:	e7ec      	b.n	8014026 <vsscanf+0x2ea>
						while (width--) {
 801404c:	f103 38ff 	add.w	r8, r3, #4294967295
 8014050:	b133      	cbz	r3, 8014060 <vsscanf+0x324>
							if (!*q) {
 8014052:	782a      	ldrb	r2, [r5, #0]
						while (width--) {
 8014054:	4643      	mov	r3, r8
							if (!*q) {
 8014056:	2a00      	cmp	r2, #0
 8014058:	d1f8      	bne.n	801404c <vsscanf+0x310>
								bail = bail_eof;
 801405a:	2401      	movs	r4, #1
				state = st_normal;
 801405c:	2200      	movs	r2, #0
 801405e:	e079      	b.n	8014154 <vsscanf+0x418>
 8014060:	2200      	movs	r2, #0
 8014062:	e077      	b.n	8014154 <vsscanf+0x418>
								bail = bail_eof;
 8014064:	2401      	movs	r4, #1
						}
						if (!bail)
 8014066:	2c00      	cmp	r4, #0
 8014068:	f040 810c 	bne.w	8014284 <vsscanf+0x548>
							converted++;
 801406c:	9b00      	ldr	r3, [sp, #0]
 801406e:	3301      	adds	r3, #1
 8014070:	9300      	str	r3, [sp, #0]
				state = st_normal;
 8014072:	2200      	movs	r2, #0
 8014074:	e06e      	b.n	8014154 <vsscanf+0x418>
					}
					break;

				case 's':	/* String */
					uc = 1;	/* Anything nonzero */
					if (flags & FL_SPLAT) {
 8014076:	f01b 0f01 	tst.w	fp, #1
 801407a:	d010      	beq.n	801409e <vsscanf+0x362>
					uc = 1;	/* Anything nonzero */
 801407c:	2301      	movs	r3, #1
 801407e:	4641      	mov	r1, r8
						while (width-- && (uc = *q) &&
 8014080:	1e4a      	subs	r2, r1, #1
 8014082:	b389      	cbz	r1, 80140e8 <vsscanf+0x3ac>
 8014084:	782b      	ldrb	r3, [r5, #0]
 8014086:	b38b      	cbz	r3, 80140ec <vsscanf+0x3b0>
 8014088:	2b20      	cmp	r3, #32
 801408a:	d031      	beq.n	80140f0 <vsscanf+0x3b4>
 801408c:	2b0a      	cmp	r3, #10
 801408e:	d031      	beq.n	80140f4 <vsscanf+0x3b8>
 8014090:	2b09      	cmp	r3, #9
 8014092:	d031      	beq.n	80140f8 <vsscanf+0x3bc>
 8014094:	2b0d      	cmp	r3, #13
 8014096:	d031      	beq.n	80140fc <vsscanf+0x3c0>
						       !isspace(uc)) {
							q++;
 8014098:	3501      	adds	r5, #1
						while (width-- && (uc = *q) &&
 801409a:	4611      	mov	r1, r2
 801409c:	e7f0      	b.n	8014080 <vsscanf+0x344>
						}
					} else {
						char *sp;
						sp = sarg = va_arg(ap, char *);
 801409e:	9b03      	ldr	r3, [sp, #12]
 80140a0:	1d1a      	adds	r2, r3, #4
 80140a2:	9203      	str	r2, [sp, #12]
 80140a4:	681f      	ldr	r7, [r3, #0]
 80140a6:	463a      	mov	r2, r7
						while (width-- && (uc = *q) &&
 80140a8:	4641      	mov	r1, r8
					uc = 1;	/* Anything nonzero */
 80140aa:	2301      	movs	r3, #1
						while (width-- && (uc = *q) &&
 80140ac:	f101 38ff 	add.w	r8, r1, #4294967295
 80140b0:	b171      	cbz	r1, 80140d0 <vsscanf+0x394>
 80140b2:	782b      	ldrb	r3, [r5, #0]
 80140b4:	b163      	cbz	r3, 80140d0 <vsscanf+0x394>
 80140b6:	2b20      	cmp	r3, #32
 80140b8:	d00a      	beq.n	80140d0 <vsscanf+0x394>
 80140ba:	2b0a      	cmp	r3, #10
 80140bc:	d008      	beq.n	80140d0 <vsscanf+0x394>
 80140be:	2b09      	cmp	r3, #9
 80140c0:	d006      	beq.n	80140d0 <vsscanf+0x394>
 80140c2:	2b0d      	cmp	r3, #13
 80140c4:	d004      	beq.n	80140d0 <vsscanf+0x394>
						       !isspace(uc)) {
							*sp++ = uc;
 80140c6:	7013      	strb	r3, [r2, #0]
							q++;
 80140c8:	3501      	adds	r5, #1
						while (width-- && (uc = *q) &&
 80140ca:	4641      	mov	r1, r8
							*sp++ = uc;
 80140cc:	3201      	adds	r2, #1
 80140ce:	e7ed      	b.n	80140ac <vsscanf+0x370>
						}
						if (sarg != sp) {
 80140d0:	42ba      	cmp	r2, r7
 80140d2:	d004      	beq.n	80140de <vsscanf+0x3a2>
							/* Terminate output */
							*sp = '\0';
 80140d4:	2100      	movs	r1, #0
 80140d6:	7011      	strb	r1, [r2, #0]
							converted++;
 80140d8:	9a00      	ldr	r2, [sp, #0]
 80140da:	3201      	adds	r2, #1
 80140dc:	9200      	str	r2, [sp, #0]
						}
					}
					if (!uc)
 80140de:	2b00      	cmp	r3, #0
 80140e0:	f000 80d2 	beq.w	8014288 <vsscanf+0x54c>
				state = st_normal;
 80140e4:	2200      	movs	r2, #0
 80140e6:	e035      	b.n	8014154 <vsscanf+0x418>
						while (width-- && (uc = *q) &&
 80140e8:	4690      	mov	r8, r2
 80140ea:	e7f8      	b.n	80140de <vsscanf+0x3a2>
 80140ec:	4690      	mov	r8, r2
 80140ee:	e7f6      	b.n	80140de <vsscanf+0x3a2>
 80140f0:	4690      	mov	r8, r2
 80140f2:	e7f4      	b.n	80140de <vsscanf+0x3a2>
 80140f4:	4690      	mov	r8, r2
 80140f6:	e7f2      	b.n	80140de <vsscanf+0x3a2>
 80140f8:	4690      	mov	r8, r2
 80140fa:	e7f0      	b.n	80140de <vsscanf+0x3a2>
 80140fc:	4690      	mov	r8, r2
 80140fe:	e7ee      	b.n	80140de <vsscanf+0x3a2>
						bail = bail_eof;
					break;

				case '[':	/* Character range */
					sarg = (flags & FL_SPLAT) ? NULL
						: va_arg(ap, char *);
 8014100:	f01b 0f01 	tst.w	fp, #1
 8014104:	d104      	bne.n	8014110 <vsscanf+0x3d4>
 8014106:	9b03      	ldr	r3, [sp, #12]
 8014108:	1d1a      	adds	r2, r3, #4
 801410a:	9203      	str	r2, [sp, #12]
 801410c:	681f      	ldr	r7, [r3, #0]
 801410e:	e000      	b.n	8014112 <vsscanf+0x3d6>
 8014110:	2700      	movs	r7, #0
					state = st_match_init;
					matchinv = 0;
					memset(matchmap, 0, sizeof matchmap);
 8014112:	2220      	movs	r2, #32
 8014114:	2100      	movs	r1, #0
 8014116:	a805      	add	r0, sp, #20
 8014118:	f7f9 ff2d 	bl	800df76 <memset>
					matchinv = 0;
 801411c:	f04f 0900 	mov.w	r9, #0
					state = st_match_init;
 8014120:	2204      	movs	r2, #4
					break;
 8014122:	e017      	b.n	8014154 <vsscanf+0x418>

				case '%':	/* %% sequence */
					if (*q == '%')
 8014124:	782b      	ldrb	r3, [r5, #0]
 8014126:	2b25      	cmp	r3, #37	; 0x25
 8014128:	d002      	beq.n	8014130 <vsscanf+0x3f4>
						q++;
					else
						bail = bail_err;
 801412a:	2402      	movs	r4, #2
				state = st_normal;
 801412c:	2200      	movs	r2, #0
 801412e:	e011      	b.n	8014154 <vsscanf+0x418>
						q++;
 8014130:	3501      	adds	r5, #1
				state = st_normal;
 8014132:	2200      	movs	r2, #0
 8014134:	e00e      	b.n	8014154 <vsscanf+0x418>
				}
			}
			break;

		case st_match_init:	/* Initial state for %[ match */
			if (ch == '^' && !(flags & FL_INV)) {
 8014136:	2b5e      	cmp	r3, #94	; 0x5e
 8014138:	d028      	beq.n	801418c <vsscanf+0x450>
	bitmap[bit / LONG_BIT] |= 1UL << (bit % LONG_BIT);
 801413a:	0958      	lsrs	r0, r3, #5
 801413c:	a905      	add	r1, sp, #20
 801413e:	f003 031f 	and.w	r3, r3, #31
 8014142:	2201      	movs	r2, #1
 8014144:	fa02 f303 	lsl.w	r3, r2, r3
 8014148:	f851 2020 	ldr.w	r2, [r1, r0, lsl #2]
 801414c:	431a      	orrs	r2, r3
 801414e:	f841 2020 	str.w	r2, [r1, r0, lsl #2]
				matchinv = 1;
			} else {
				set_bit(matchmap, (unsigned char)ch);
				state = st_match;
 8014152:	2205      	movs	r2, #5
 8014154:	4631      	mov	r1, r6
	while ((ch = *p++) && !bail) {
 8014156:	1c4e      	adds	r6, r1, #1
 8014158:	780b      	ldrb	r3, [r1, #0]
 801415a:	2b00      	cmp	r3, #0
 801415c:	f000 809a 	beq.w	8014294 <vsscanf+0x558>
 8014160:	2c00      	cmp	r4, #0
 8014162:	f040 8097 	bne.w	8014294 <vsscanf+0x558>
		switch (state) {
 8014166:	2a06      	cmp	r2, #6
 8014168:	d8f4      	bhi.n	8014154 <vsscanf+0x418>
 801416a:	a001      	add	r0, pc, #4	; (adr r0, 8014170 <vsscanf+0x434>)
 801416c:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8014170:	08013d69 	.word	0x08013d69
 8014174:	08013da3 	.word	0x08013da3
 8014178:	08013dc7 	.word	0x08013dc7
 801417c:	08013de5 	.word	0x08013de5
 8014180:	08014137 	.word	0x08014137
 8014184:	08014199 	.word	0x08014199
 8014188:	080141bd 	.word	0x080141bd
			if (ch == '^' && !(flags & FL_INV)) {
 801418c:	f01b 0f02 	tst.w	fp, #2
 8014190:	d1d3      	bne.n	801413a <vsscanf+0x3fe>
				matchinv = 1;
 8014192:	f04f 0901 	mov.w	r9, #1
 8014196:	e7dd      	b.n	8014154 <vsscanf+0x418>
			}
			break;

		case st_match:	/* Main state for %[ match */
			if (ch == ']') {
 8014198:	2b5d      	cmp	r3, #93	; 0x5d
 801419a:	d02e      	beq.n	80141fa <vsscanf+0x4be>
				state = st_normal;  ////  Added: State should return to normal after matching.
				goto match_run;
			} else if (ch == '-') {
 801419c:	2b2d      	cmp	r3, #45	; 0x2d
 801419e:	d076      	beq.n	801428e <vsscanf+0x552>
	bitmap[bit / LONG_BIT] |= 1UL << (bit % LONG_BIT);
 80141a0:	0958      	lsrs	r0, r3, #5
 80141a2:	a905      	add	r1, sp, #20
 80141a4:	f003 0c1f 	and.w	ip, r3, #31
 80141a8:	2301      	movs	r3, #1
 80141aa:	fa03 fc0c 	lsl.w	ip, r3, ip
 80141ae:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
 80141b2:	ea43 030c 	orr.w	r3, r3, ip
 80141b6:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
 80141ba:	e7cb      	b.n	8014154 <vsscanf+0x418>
				set_bit(matchmap, (unsigned char)ch);
			}
			break;

		case st_match_range:	/* %[ match after - */
			if (ch == ']') {
 80141bc:	2b5d      	cmp	r3, #93	; 0x5d
 80141be:	d001      	beq.n	80141c4 <vsscanf+0x488>
				/* - was last character */
				set_bit(matchmap, (unsigned char)'-');
				goto match_run;
			} else {
				int i;
				for (i = range_start; i < (unsigned char)ch;
 80141c0:	4651      	mov	r1, sl
 80141c2:	e016      	b.n	80141f2 <vsscanf+0x4b6>
	bitmap[bit / LONG_BIT] |= 1UL << (bit % LONG_BIT);
 80141c4:	9b06      	ldr	r3, [sp, #24]
 80141c6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80141ca:	9306      	str	r3, [sp, #24]
				state = st_match;
			}
			break;

		      match_run:	/* Match expression finished */
			qq = q;
 80141cc:	950d      	str	r5, [sp, #52]	; 0x34
			uc = 1;	/* Anything nonzero */
 80141ce:	2001      	movs	r0, #1
 80141d0:	4641      	mov	r1, r8
			while (width && (uc = *q)
 80141d2:	e015      	b.n	8014200 <vsscanf+0x4c4>
	bitmap[bit / LONG_BIT] |= 1UL << (bit % LONG_BIT);
 80141d4:	ea4f 1c51 	mov.w	ip, r1, lsr #5
 80141d8:	a805      	add	r0, sp, #20
 80141da:	f001 0e1f 	and.w	lr, r1, #31
 80141de:	2201      	movs	r2, #1
 80141e0:	fa02 fe0e 	lsl.w	lr, r2, lr
 80141e4:	f850 202c 	ldr.w	r2, [r0, ip, lsl #2]
 80141e8:	ea42 020e 	orr.w	r2, r2, lr
 80141ec:	f840 202c 	str.w	r2, [r0, ip, lsl #2]
				     i++)
 80141f0:	3101      	adds	r1, #1
				for (i = range_start; i < (unsigned char)ch;
 80141f2:	428b      	cmp	r3, r1
 80141f4:	dcee      	bgt.n	80141d4 <vsscanf+0x498>
				state = st_match;
 80141f6:	2205      	movs	r2, #5
 80141f8:	e7ac      	b.n	8014154 <vsscanf+0x418>
				state = st_normal;  ////  Added: State should return to normal after matching.
 80141fa:	2200      	movs	r2, #0
 80141fc:	e7e6      	b.n	80141cc <vsscanf+0x490>
			       && test_bit(matchmap, uc)^matchinv) {
				if (sarg)
					*sarg++ = uc;
				q++;
 80141fe:	3501      	adds	r5, #1
			while (width && (uc = *q)
 8014200:	b1a9      	cbz	r1, 801422e <vsscanf+0x4f2>
 8014202:	7828      	ldrb	r0, [r5, #0]
 8014204:	b198      	cbz	r0, 801422e <vsscanf+0x4f2>
	return (int)(bitmap[bit / LONG_BIT] >> (bit % LONG_BIT)) & 1;
 8014206:	0943      	lsrs	r3, r0, #5
 8014208:	f10d 0c38 	add.w	ip, sp, #56	; 0x38
 801420c:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 8014210:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8014214:	f000 0c1f 	and.w	ip, r0, #31
 8014218:	fa23 f30c 	lsr.w	r3, r3, ip
 801421c:	f003 0301 	and.w	r3, r3, #1
			       && test_bit(matchmap, uc)^matchinv) {
 8014220:	4599      	cmp	r9, r3
 8014222:	d004      	beq.n	801422e <vsscanf+0x4f2>
				if (sarg)
 8014224:	2f00      	cmp	r7, #0
 8014226:	d0ea      	beq.n	80141fe <vsscanf+0x4c2>
					*sarg++ = uc;
 8014228:	7038      	strb	r0, [r7, #0]
 801422a:	3701      	adds	r7, #1
 801422c:	e7e7      	b.n	80141fe <vsscanf+0x4c2>
 801422e:	4688      	mov	r8, r1
			}
			if (q != qq) {   ////  Previously: if (q != qq && sarg) {
 8014230:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014232:	42ab      	cmp	r3, r5
 8014234:	d009      	beq.n	801424a <vsscanf+0x50e>
				if (sarg) {  ////  Added: For "%*...[...]" format, don't bail out.
 8014236:	b127      	cbz	r7, 8014242 <vsscanf+0x506>
					*sarg = '\0';
 8014238:	2300      	movs	r3, #0
 801423a:	703b      	strb	r3, [r7, #0]
					converted++;
 801423c:	9b00      	ldr	r3, [sp, #0]
 801423e:	3301      	adds	r3, #1
 8014240:	9300      	str	r3, [sp, #0]
				}
			} else {
				bail = bail_err;
			}
			if (!uc)
 8014242:	2800      	cmp	r0, #0
 8014244:	d186      	bne.n	8014154 <vsscanf+0x418>
				bail = bail_eof;
 8014246:	2401      	movs	r4, #1
 8014248:	e784      	b.n	8014154 <vsscanf+0x418>
				bail = bail_err;
 801424a:	2402      	movs	r4, #2
 801424c:	e7f9      	b.n	8014242 <vsscanf+0x506>
				state = st_flags;
 801424e:	2201      	movs	r2, #1
				flags = 0;
 8014250:	f04f 0b00 	mov.w	fp, #0
				width = UINT_MAX;
 8014254:	f04f 38ff 	mov.w	r8, #4294967295
				rank = rank_int;
 8014258:	f8cd b004 	str.w	fp, [sp, #4]
 801425c:	e77a      	b.n	8014154 <vsscanf+0x418>
				p--;	/* Process this character again */
 801425e:	460e      	mov	r6, r1
				state = st_modifiers;
 8014260:	2203      	movs	r2, #3
 8014262:	e777      	b.n	8014154 <vsscanf+0x418>
				p--;	/* Process this character again */
 8014264:	460e      	mov	r6, r1
				state = st_modifiers;
 8014266:	2203      	movs	r2, #3
 8014268:	e774      	b.n	8014154 <vsscanf+0x418>
				rank = SIZE_T_RANK;
 801426a:	2301      	movs	r3, #1
 801426c:	9301      	str	r3, [sp, #4]
 801426e:	e771      	b.n	8014154 <vsscanf+0x418>
					bail = bail_err;
 8014270:	2402      	movs	r4, #2
				state = st_normal;
 8014272:	2200      	movs	r2, #0
 8014274:	e76e      	b.n	8014154 <vsscanf+0x418>
						bail = bail_err;
 8014276:	2402      	movs	r4, #2
				state = st_normal;
 8014278:	2200      	movs	r2, #0
 801427a:	e76b      	b.n	8014154 <vsscanf+0x418>
 801427c:	2200      	movs	r2, #0
 801427e:	e769      	b.n	8014154 <vsscanf+0x418>
 8014280:	2200      	movs	r2, #0
 8014282:	e767      	b.n	8014154 <vsscanf+0x418>
 8014284:	2200      	movs	r2, #0
 8014286:	e765      	b.n	8014154 <vsscanf+0x418>
						bail = bail_eof;
 8014288:	2401      	movs	r4, #1
				state = st_normal;
 801428a:	2200      	movs	r2, #0
 801428c:	e762      	b.n	8014154 <vsscanf+0x418>
				range_start = (unsigned char)ch;
 801428e:	469a      	mov	sl, r3
				state = st_match_range;
 8014290:	2206      	movs	r2, #6
 8014292:	e75f      	b.n	8014154 <vsscanf+0x418>
			break;
		}
	}

	if (bail == bail_eof && !converted)
 8014294:	2c01      	cmp	r4, #1
 8014296:	d003      	beq.n	80142a0 <vsscanf+0x564>
		converted = -1;	/* Return EOF (-1) */

	return converted;
}
 8014298:	9800      	ldr	r0, [sp, #0]
 801429a:	b00f      	add	sp, #60	; 0x3c
 801429c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (bail == bail_eof && !converted)
 80142a0:	9b00      	ldr	r3, [sp, #0]
 80142a2:	2b00      	cmp	r3, #0
 80142a4:	d1f8      	bne.n	8014298 <vsscanf+0x55c>
		converted = -1;	/* Return EOF (-1) */
 80142a6:	f04f 33ff 	mov.w	r3, #4294967295
 80142aa:	9300      	str	r3, [sp, #0]
	return converted;
 80142ac:	e7f4      	b.n	8014298 <vsscanf+0x55c>
 80142ae:	bf00      	nop

080142b0 <hal_flash_check_addr>:
}

static int
hal_flash_check_addr(const struct hal_flash *hf, uint32_t addr)
{
    if (addr < hf->hf_base_addr || addr > hf->hf_base_addr + hf->hf_size) {
 80142b0:	6843      	ldr	r3, [r0, #4]
 80142b2:	428b      	cmp	r3, r1
 80142b4:	d808      	bhi.n	80142c8 <hal_flash_check_addr+0x18>
 80142b6:	6882      	ldr	r2, [r0, #8]
 80142b8:	4413      	add	r3, r2
 80142ba:	428b      	cmp	r3, r1
 80142bc:	d301      	bcc.n	80142c2 <hal_flash_check_addr+0x12>
        return SYS_EINVAL;
    }
    return 0;
 80142be:	2000      	movs	r0, #0
}
 80142c0:	4770      	bx	lr
        return SYS_EINVAL;
 80142c2:	f06f 0001 	mvn.w	r0, #1
 80142c6:	4770      	bx	lr
 80142c8:	f06f 0001 	mvn.w	r0, #1
 80142cc:	4770      	bx	lr

080142ce <hal_flash_init>:
{
 80142ce:	b538      	push	{r3, r4, r5, lr}
    int rc = 0;
 80142d0:	2500      	movs	r5, #0
    for (i = 0; ; i++) {
 80142d2:	462c      	mov	r4, r5
 80142d4:	e001      	b.n	80142da <hal_flash_init+0xc>
 80142d6:	3401      	adds	r4, #1
 80142d8:	b2e4      	uxtb	r4, r4
        hf = hal_bsp_flash_dev(i);
 80142da:	4620      	mov	r0, r4
 80142dc:	f7fb fe48 	bl	800ff70 <hal_bsp_flash_dev>
        if (!hf) {
 80142e0:	b138      	cbz	r0, 80142f2 <hal_flash_init+0x24>
        if (hf->hf_itf->hff_init(hf)) {
 80142e2:	6802      	ldr	r2, [r0, #0]
 80142e4:	6952      	ldr	r2, [r2, #20]
 80142e6:	4790      	blx	r2
 80142e8:	2800      	cmp	r0, #0
 80142ea:	d0f4      	beq.n	80142d6 <hal_flash_init+0x8>
            rc = SYS_EIO;
 80142ec:	f06f 0504 	mvn.w	r5, #4
 80142f0:	e7f1      	b.n	80142d6 <hal_flash_init+0x8>
}
 80142f2:	4628      	mov	r0, r5
 80142f4:	bd38      	pop	{r3, r4, r5, pc}

080142f6 <hal_flash_read>:

int
hal_flash_read(uint8_t id, uint32_t address, void *dst, uint32_t num_bytes)
{
 80142f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80142fa:	460d      	mov	r5, r1
 80142fc:	4690      	mov	r8, r2
 80142fe:	461e      	mov	r6, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
 8014300:	f7fb fe36 	bl	800ff70 <hal_bsp_flash_dev>
    if (!hf) {
 8014304:	b1c0      	cbz	r0, 8014338 <hal_flash_read+0x42>
 8014306:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
 8014308:	4629      	mov	r1, r5
 801430a:	f7ff ffd1 	bl	80142b0 <hal_flash_check_addr>
 801430e:	b9b0      	cbnz	r0, 801433e <hal_flash_read+0x48>
      hal_flash_check_addr(hf, address + num_bytes)) {
 8014310:	19a9      	adds	r1, r5, r6
 8014312:	4620      	mov	r0, r4
 8014314:	f7ff ffcc 	bl	80142b0 <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
 8014318:	b9a0      	cbnz	r0, 8014344 <hal_flash_read+0x4e>
        return SYS_EINVAL;
    }

    rc = hf->hf_itf->hff_read(hf, address, dst, num_bytes);
 801431a:	6823      	ldr	r3, [r4, #0]
 801431c:	681f      	ldr	r7, [r3, #0]
 801431e:	4633      	mov	r3, r6
 8014320:	4642      	mov	r2, r8
 8014322:	4629      	mov	r1, r5
 8014324:	4620      	mov	r0, r4
 8014326:	47b8      	blx	r7
    if (rc != 0) {
 8014328:	4603      	mov	r3, r0
 801432a:	b910      	cbnz	r0, 8014332 <hal_flash_read+0x3c>
        return SYS_EIO;
    }

    return 0;
}
 801432c:	4618      	mov	r0, r3
 801432e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EIO;
 8014332:	f06f 0304 	mvn.w	r3, #4
 8014336:	e7f9      	b.n	801432c <hal_flash_read+0x36>
        return SYS_EINVAL;
 8014338:	f06f 0301 	mvn.w	r3, #1
 801433c:	e7f6      	b.n	801432c <hal_flash_read+0x36>
        return SYS_EINVAL;
 801433e:	f06f 0301 	mvn.w	r3, #1
 8014342:	e7f3      	b.n	801432c <hal_flash_read+0x36>
 8014344:	f06f 0301 	mvn.w	r3, #1
 8014348:	e7f0      	b.n	801432c <hal_flash_read+0x36>

0801434a <HAL_ADC_MspInit>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_MspInit must be implemented in the user file.
   */
}
 801434a:	4770      	bx	lr

0801434c <HAL_ADC_Init>:
{
 801434c:	b530      	push	{r4, r5, lr}
 801434e:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 8014350:	2300      	movs	r3, #0
 8014352:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 8014354:	2800      	cmp	r0, #0
 8014356:	f000 80f5 	beq.w	8014544 <HAL_ADC_Init+0x1f8>
 801435a:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 801435c:	6d43      	ldr	r3, [r0, #84]	; 0x54
 801435e:	b303      	cbz	r3, 80143a2 <HAL_ADC_Init+0x56>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8014360:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8014362:	689a      	ldr	r2, [r3, #8]
 8014364:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
 8014368:	d005      	beq.n	8014376 <HAL_ADC_Init+0x2a>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 801436a:	689a      	ldr	r2, [r3, #8]
 801436c:	f022 4220 	bic.w	r2, r2, #2684354560	; 0xa0000000
 8014370:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8014374:	609a      	str	r2, [r3, #8]
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8014376:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8014378:	6893      	ldr	r3, [r2, #8]
 801437a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 801437e:	d11d      	bne.n	80143bc <HAL_ADC_Init+0x70>
  MODIFY_REG(ADCx->CR,
 8014380:	6893      	ldr	r3, [r2, #8]
 8014382:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8014386:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 801438a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801438e:	6093      	str	r3, [r2, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8014390:	4b6d      	ldr	r3, [pc, #436]	; (8014548 <HAL_ADC_Init+0x1fc>)
 8014392:	681b      	ldr	r3, [r3, #0]
 8014394:	099b      	lsrs	r3, r3, #6
 8014396:	4a6d      	ldr	r2, [pc, #436]	; (801454c <HAL_ADC_Init+0x200>)
 8014398:	fba2 2303 	umull	r2, r3, r2, r3
 801439c:	099b      	lsrs	r3, r3, #6
 801439e:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80143a0:	e009      	b.n	80143b6 <HAL_ADC_Init+0x6a>
    HAL_ADC_MspInit(hadc);
 80143a2:	f7ff ffd2 	bl	801434a <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80143a6:	2300      	movs	r3, #0
 80143a8:	65a3      	str	r3, [r4, #88]	; 0x58
    hadc->Lock = HAL_UNLOCKED;
 80143aa:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 80143ae:	e7d7      	b.n	8014360 <HAL_ADC_Init+0x14>
      wait_loop_index--;
 80143b0:	9b01      	ldr	r3, [sp, #4]
 80143b2:	3b01      	subs	r3, #1
 80143b4:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80143b6:	9b01      	ldr	r3, [sp, #4]
 80143b8:	2b00      	cmp	r3, #0
 80143ba:	d1f9      	bne.n	80143b0 <HAL_ADC_Init+0x64>
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80143bc:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80143be:	689a      	ldr	r2, [r3, #8]
 80143c0:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 80143c4:	f040 8089 	bne.w	80144da <HAL_ADC_Init+0x18e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80143c8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80143ca:	f042 0210 	orr.w	r2, r2, #16
 80143ce:	6562      	str	r2, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80143d0:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80143d2:	f042 0201 	orr.w	r2, r2, #1
 80143d6:	65a2      	str	r2, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 80143d8:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80143da:	689a      	ldr	r2, [r3, #8]
 80143dc:	f012 0f04 	tst.w	r2, #4
 80143e0:	d07d      	beq.n	80144de <HAL_ADC_Init+0x192>
 80143e2:	2101      	movs	r1, #1
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80143e4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80143e6:	f012 0f10 	tst.w	r2, #16
 80143ea:	f040 80a4 	bne.w	8014536 <HAL_ADC_Init+0x1ea>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80143ee:	2900      	cmp	r1, #0
 80143f0:	f040 80a1 	bne.w	8014536 <HAL_ADC_Init+0x1ea>
    ADC_STATE_CLR_SET(hadc->State,
 80143f4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80143f6:	f422 7281 	bic.w	r2, r2, #258	; 0x102
 80143fa:	f042 0202 	orr.w	r2, r2, #2
 80143fe:	6562      	str	r2, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8014400:	689b      	ldr	r3, [r3, #8]
 8014402:	f013 0f01 	tst.w	r3, #1
 8014406:	d11b      	bne.n	8014440 <HAL_ADC_Init+0xf4>
 8014408:	4b51      	ldr	r3, [pc, #324]	; (8014550 <HAL_ADC_Init+0x204>)
 801440a:	689b      	ldr	r3, [r3, #8]
 801440c:	f013 0f01 	tst.w	r3, #1
 8014410:	d067      	beq.n	80144e2 <HAL_ADC_Init+0x196>
 8014412:	2101      	movs	r1, #1
 8014414:	4a4f      	ldr	r2, [pc, #316]	; (8014554 <HAL_ADC_Init+0x208>)
 8014416:	6892      	ldr	r2, [r2, #8]
 8014418:	f012 0f01 	tst.w	r2, #1
 801441c:	d063      	beq.n	80144e6 <HAL_ADC_Init+0x19a>
 801441e:	2301      	movs	r3, #1
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8014420:	430b      	orrs	r3, r1
 8014422:	4a4d      	ldr	r2, [pc, #308]	; (8014558 <HAL_ADC_Init+0x20c>)
 8014424:	6892      	ldr	r2, [r2, #8]
 8014426:	f012 0f01 	tst.w	r2, #1
 801442a:	d05e      	beq.n	80144ea <HAL_ADC_Init+0x19e>
 801442c:	2201      	movs	r2, #1
 801442e:	4313      	orrs	r3, r2
 8014430:	d106      	bne.n	8014440 <HAL_ADC_Init+0xf4>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8014432:	6863      	ldr	r3, [r4, #4]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8014434:	4949      	ldr	r1, [pc, #292]	; (801455c <HAL_ADC_Init+0x210>)
 8014436:	688a      	ldr	r2, [r1, #8]
 8014438:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 801443c:	4313      	orrs	r3, r2
 801443e:	608b      	str	r3, [r1, #8]
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8014440:	7e62      	ldrb	r2, [r4, #25]
                hadc->Init.Overrun                                                     |
 8014442:	6b63      	ldr	r3, [r4, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8014444:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                hadc->Init.DataAlign                                                   |
 8014448:	68e2      	ldr	r2, [r4, #12]
                hadc->Init.Overrun                                                     |
 801444a:	4313      	orrs	r3, r2
                hadc->Init.Resolution                                                  |
 801444c:	68a2      	ldr	r2, [r4, #8]
                hadc->Init.DataAlign                                                   |
 801444e:	4313      	orrs	r3, r2
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8014450:	f894 2020 	ldrb.w	r2, [r4, #32]
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8014454:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8014458:	2a01      	cmp	r2, #1
 801445a:	d048      	beq.n	80144ee <HAL_ADC_Init+0x1a2>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 801445c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 801445e:	b122      	cbz	r2, 801446a <HAL_ADC_Init+0x11e>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8014460:	f402 7270 	and.w	r2, r2, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8014464:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8014466:	430a      	orrs	r2, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8014468:	4313      	orrs	r3, r2
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 801446a:	6821      	ldr	r1, [r4, #0]
 801446c:	68cd      	ldr	r5, [r1, #12]
 801446e:	4a3c      	ldr	r2, [pc, #240]	; (8014560 <HAL_ADC_Init+0x214>)
 8014470:	402a      	ands	r2, r5
 8014472:	4313      	orrs	r3, r2
 8014474:	60cb      	str	r3, [r1, #12]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8014476:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8014478:	689a      	ldr	r2, [r3, #8]
 801447a:	f012 0f04 	tst.w	r2, #4
 801447e:	d03b      	beq.n	80144f8 <HAL_ADC_Init+0x1ac>
 8014480:	2101      	movs	r1, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8014482:	689a      	ldr	r2, [r3, #8]
 8014484:	f012 0f08 	tst.w	r2, #8
 8014488:	d038      	beq.n	80144fc <HAL_ADC_Init+0x1b0>
 801448a:	2201      	movs	r2, #1
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 801448c:	b9b1      	cbnz	r1, 80144bc <HAL_ADC_Init+0x170>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 801448e:	b9aa      	cbnz	r2, 80144bc <HAL_ADC_Init+0x170>
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8014490:	7e21      	ldrb	r1, [r4, #24]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8014492:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 8014496:	0052      	lsls	r2, r2, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8014498:	ea42 3181 	orr.w	r1, r2, r1, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 801449c:	68da      	ldr	r2, [r3, #12]
 801449e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80144a2:	f022 0202 	bic.w	r2, r2, #2
 80144a6:	430a      	orrs	r2, r1
 80144a8:	60da      	str	r2, [r3, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 80144aa:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80144ae:	2b01      	cmp	r3, #1
 80144b0:	d026      	beq.n	8014500 <HAL_ADC_Init+0x1b4>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80144b2:	6822      	ldr	r2, [r4, #0]
 80144b4:	6913      	ldr	r3, [r2, #16]
 80144b6:	f023 0301 	bic.w	r3, r3, #1
 80144ba:	6113      	str	r3, [r2, #16]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80144bc:	6923      	ldr	r3, [r4, #16]
 80144be:	2b01      	cmp	r3, #1
 80144c0:	d030      	beq.n	8014524 <HAL_ADC_Init+0x1d8>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80144c2:	6822      	ldr	r2, [r4, #0]
 80144c4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80144c6:	f023 030f 	bic.w	r3, r3, #15
 80144ca:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80144cc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80144ce:	f023 0303 	bic.w	r3, r3, #3
 80144d2:	f043 0301 	orr.w	r3, r3, #1
 80144d6:	6563      	str	r3, [r4, #84]	; 0x54
 80144d8:	e032      	b.n	8014540 <HAL_ADC_Init+0x1f4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80144da:	2000      	movs	r0, #0
 80144dc:	e77d      	b.n	80143da <HAL_ADC_Init+0x8e>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80144de:	2100      	movs	r1, #0
 80144e0:	e780      	b.n	80143e4 <HAL_ADC_Init+0x98>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80144e2:	2100      	movs	r1, #0
 80144e4:	e796      	b.n	8014414 <HAL_ADC_Init+0xc8>
 80144e6:	2300      	movs	r3, #0
 80144e8:	e79a      	b.n	8014420 <HAL_ADC_Init+0xd4>
 80144ea:	2200      	movs	r2, #0
 80144ec:	e79f      	b.n	801442e <HAL_ADC_Init+0xe2>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80144ee:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80144f0:	3a01      	subs	r2, #1
 80144f2:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 80144f6:	e7b1      	b.n	801445c <HAL_ADC_Init+0x110>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80144f8:	2100      	movs	r1, #0
 80144fa:	e7c2      	b.n	8014482 <HAL_ADC_Init+0x136>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80144fc:	2200      	movs	r2, #0
 80144fe:	e7c5      	b.n	801448c <HAL_ADC_Init+0x140>
        MODIFY_REG(hadc->Instance->CFGR2,
 8014500:	6821      	ldr	r1, [r4, #0]
 8014502:	690b      	ldr	r3, [r1, #16]
 8014504:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8014508:	f023 0304 	bic.w	r3, r3, #4
 801450c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 801450e:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8014510:	432a      	orrs	r2, r5
 8014512:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8014514:	432a      	orrs	r2, r5
 8014516:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8014518:	432a      	orrs	r2, r5
 801451a:	4313      	orrs	r3, r2
 801451c:	f043 0301 	orr.w	r3, r3, #1
 8014520:	610b      	str	r3, [r1, #16]
 8014522:	e7cb      	b.n	80144bc <HAL_ADC_Init+0x170>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8014524:	6821      	ldr	r1, [r4, #0]
 8014526:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8014528:	f023 030f 	bic.w	r3, r3, #15
 801452c:	69e2      	ldr	r2, [r4, #28]
 801452e:	3a01      	subs	r2, #1
 8014530:	4313      	orrs	r3, r2
 8014532:	630b      	str	r3, [r1, #48]	; 0x30
 8014534:	e7ca      	b.n	80144cc <HAL_ADC_Init+0x180>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8014536:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8014538:	f043 0310 	orr.w	r3, r3, #16
 801453c:	6563      	str	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 801453e:	2001      	movs	r0, #1
}
 8014540:	b003      	add	sp, #12
 8014542:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8014544:	2001      	movs	r0, #1
 8014546:	e7fb      	b.n	8014540 <HAL_ADC_Init+0x1f4>
 8014548:	20000188 	.word	0x20000188
 801454c:	053e2d63 	.word	0x053e2d63
 8014550:	50040000 	.word	0x50040000
 8014554:	50040100 	.word	0x50040100
 8014558:	50040200 	.word	0x50040200
 801455c:	50040300 	.word	0x50040300
 8014560:	fff0c007 	.word	0xfff0c007

08014564 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8014564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8014568:	4b3f      	ldr	r3, [pc, #252]	; (8014668 <HAL_ADC_PollForConversion+0x104>)
 801456a:	689f      	ldr	r7, [r3, #8]
 801456c:	f007 071f 	and.w	r7, r7, #31

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8014570:	6943      	ldr	r3, [r0, #20]
 8014572:	2b08      	cmp	r3, #8
 8014574:	d03b      	beq.n	80145ee <HAL_ADC_PollForConversion+0x8a>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8014576:	b157      	cbz	r7, 801458e <HAL_ADC_PollForConversion+0x2a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8014578:	2f05      	cmp	r7, #5
 801457a:	d008      	beq.n	801458e <HAL_ADC_PollForConversion+0x2a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 801457c:	2f09      	cmp	r7, #9
 801457e:	d006      	beq.n	801458e <HAL_ADC_PollForConversion+0x2a>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8014580:	4b39      	ldr	r3, [pc, #228]	; (8014668 <HAL_ADC_PollForConversion+0x104>)
 8014582:	689b      	ldr	r3, [r3, #8]
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8014584:	f413 4f60 	tst.w	r3, #57344	; 0xe000
 8014588:	d12b      	bne.n	80145e2 <HAL_ADC_PollForConversion+0x7e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
        return HAL_ERROR;
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 801458a:	2604      	movs	r6, #4
 801458c:	e005      	b.n	801459a <HAL_ADC_PollForConversion+0x36>
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 801458e:	6803      	ldr	r3, [r0, #0]
 8014590:	68db      	ldr	r3, [r3, #12]
 8014592:	f013 0f01 	tst.w	r3, #1
 8014596:	d11d      	bne.n	80145d4 <HAL_ADC_PollForConversion+0x70>
        tmp_Flag_End = (ADC_FLAG_EOC);
 8014598:	2604      	movs	r6, #4
 801459a:	460d      	mov	r5, r1
 801459c:	4604      	mov	r4, r0
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 801459e:	f7fb ffd7 	bl	8010550 <HAL_GetTick>
 80145a2:	4680      	mov	r8, r0

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80145a4:	6823      	ldr	r3, [r4, #0]
 80145a6:	681a      	ldr	r2, [r3, #0]
 80145a8:	4232      	tst	r2, r6
 80145aa:	d122      	bne.n	80145f2 <HAL_ADC_PollForConversion+0x8e>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80145ac:	f1b5 3fff 	cmp.w	r5, #4294967295
 80145b0:	d0f8      	beq.n	80145a4 <HAL_ADC_PollForConversion+0x40>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80145b2:	f7fb ffcd 	bl	8010550 <HAL_GetTick>
 80145b6:	eba0 0008 	sub.w	r0, r0, r8
 80145ba:	42a8      	cmp	r0, r5
 80145bc:	d801      	bhi.n	80145c2 <HAL_ADC_PollForConversion+0x5e>
 80145be:	2d00      	cmp	r5, #0
 80145c0:	d1f0      	bne.n	80145a4 <HAL_ADC_PollForConversion+0x40>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80145c2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80145c4:	f043 0304 	orr.w	r3, r3, #4
 80145c8:	6563      	str	r3, [r4, #84]	; 0x54

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80145ca:	2300      	movs	r3, #0
 80145cc:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

        return HAL_TIMEOUT;
 80145d0:	2003      	movs	r0, #3
 80145d2:	e004      	b.n	80145de <HAL_ADC_PollForConversion+0x7a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80145d4:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80145d6:	f043 0320 	orr.w	r3, r3, #32
 80145da:	6543      	str	r3, [r0, #84]	; 0x54
        return HAL_ERROR;
 80145dc:	2001      	movs	r0, #1
    }
  }

  /* Return function status */
  return HAL_OK;
}
 80145de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80145e2:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80145e4:	f043 0320 	orr.w	r3, r3, #32
 80145e8:	6543      	str	r3, [r0, #84]	; 0x54
        return HAL_ERROR;
 80145ea:	2001      	movs	r0, #1
 80145ec:	e7f7      	b.n	80145de <HAL_ADC_PollForConversion+0x7a>
    tmp_Flag_End = ADC_FLAG_EOS;
 80145ee:	2608      	movs	r6, #8
 80145f0:	e7d3      	b.n	801459a <HAL_ADC_PollForConversion+0x36>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80145f2:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80145f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80145f8:	6562      	str	r2, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80145fa:	68da      	ldr	r2, [r3, #12]
 80145fc:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8014600:	d111      	bne.n	8014626 <HAL_ADC_PollForConversion+0xc2>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8014602:	7e62      	ldrb	r2, [r4, #25]
 8014604:	b97a      	cbnz	r2, 8014626 <HAL_ADC_PollForConversion+0xc2>
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8014606:	681a      	ldr	r2, [r3, #0]
 8014608:	f012 0f08 	tst.w	r2, #8
 801460c:	d00b      	beq.n	8014626 <HAL_ADC_PollForConversion+0xc2>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 801460e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8014610:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8014614:	6562      	str	r2, [r4, #84]	; 0x54
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8014616:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8014618:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 801461c:	d103      	bne.n	8014626 <HAL_ADC_PollForConversion+0xc2>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 801461e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8014620:	f042 0201 	orr.w	r2, r2, #1
 8014624:	6562      	str	r2, [r4, #84]	; 0x54
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8014626:	4a11      	ldr	r2, [pc, #68]	; (801466c <HAL_ADC_PollForConversion+0x108>)
 8014628:	4293      	cmp	r3, r2
 801462a:	d009      	beq.n	8014640 <HAL_ADC_PollForConversion+0xdc>
 801462c:	461a      	mov	r2, r3
 801462e:	4293      	cmp	r3, r2
 8014630:	d009      	beq.n	8014646 <HAL_ADC_PollForConversion+0xe2>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8014632:	b147      	cbz	r7, 8014646 <HAL_ADC_PollForConversion+0xe2>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8014634:	2f05      	cmp	r7, #5
 8014636:	d006      	beq.n	8014646 <HAL_ADC_PollForConversion+0xe2>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8014638:	2f09      	cmp	r7, #9
 801463a:	d004      	beq.n	8014646 <HAL_ADC_PollForConversion+0xe2>
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 801463c:	68d2      	ldr	r2, [r2, #12]
 801463e:	e003      	b.n	8014648 <HAL_ADC_PollForConversion+0xe4>
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8014640:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8014644:	e7f3      	b.n	801462e <HAL_ADC_PollForConversion+0xca>
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8014646:	68da      	ldr	r2, [r3, #12]
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8014648:	2e08      	cmp	r6, #8
 801464a:	d006      	beq.n	801465a <HAL_ADC_PollForConversion+0xf6>
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 801464c:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8014650:	d107      	bne.n	8014662 <HAL_ADC_PollForConversion+0xfe>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8014652:	220c      	movs	r2, #12
 8014654:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8014656:	2000      	movs	r0, #0
 8014658:	e7c1      	b.n	80145de <HAL_ADC_PollForConversion+0x7a>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 801465a:	2208      	movs	r2, #8
 801465c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 801465e:	2000      	movs	r0, #0
 8014660:	e7bd      	b.n	80145de <HAL_ADC_PollForConversion+0x7a>
 8014662:	2000      	movs	r0, #0
 8014664:	e7bb      	b.n	80145de <HAL_ADC_PollForConversion+0x7a>
 8014666:	bf00      	nop
 8014668:	50040300 	.word	0x50040300
 801466c:	50040100 	.word	0x50040100

08014670 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8014670:	6803      	ldr	r3, [r0, #0]
 8014672:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8014674:	4770      	bx	lr

08014676 <HAL_ADC_ConvHalfCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8014676:	4770      	bx	lr

08014678 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8014678:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 801467a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801467c:	f7ff fffb 	bl	8014676 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8014680:	bd08      	pop	{r3, pc}

08014682 <ADC_DMAConvCplt>:
{
 8014682:	b508      	push	{r3, lr}
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8014684:	6a83      	ldr	r3, [r0, #40]	; 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8014686:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8014688:	f012 0f50 	tst.w	r2, #80	; 0x50
 801468c:	d131      	bne.n	80146f2 <ADC_DMAConvCplt+0x70>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 801468e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8014690:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8014694:	655a      	str	r2, [r3, #84]	; 0x54
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8014696:	681a      	ldr	r2, [r3, #0]
 8014698:	6811      	ldr	r1, [r2, #0]
 801469a:	f011 0f08 	tst.w	r1, #8
 801469e:	d014      	beq.n	80146ca <ADC_DMAConvCplt+0x48>
 80146a0:	68d1      	ldr	r1, [r2, #12]
 80146a2:	f411 6f40 	tst.w	r1, #3072	; 0xc00
 80146a6:	d120      	bne.n	80146ea <ADC_DMAConvCplt+0x68>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80146a8:	68d2      	ldr	r2, [r2, #12]
 80146aa:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 80146ae:	d11c      	bne.n	80146ea <ADC_DMAConvCplt+0x68>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80146b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80146b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80146b6:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80146b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80146ba:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 80146be:	d114      	bne.n	80146ea <ADC_DMAConvCplt+0x68>
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80146c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80146c2:	f042 0201 	orr.w	r2, r2, #1
 80146c6:	655a      	str	r2, [r3, #84]	; 0x54
 80146c8:	e00f      	b.n	80146ea <ADC_DMAConvCplt+0x68>
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80146ca:	68d2      	ldr	r2, [r2, #12]
 80146cc:	f012 0f02 	tst.w	r2, #2
 80146d0:	d10b      	bne.n	80146ea <ADC_DMAConvCplt+0x68>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80146d2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80146d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80146d8:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80146da:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80146dc:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 80146e0:	d103      	bne.n	80146ea <ADC_DMAConvCplt+0x68>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80146e2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80146e4:	f042 0201 	orr.w	r2, r2, #1
 80146e8:	655a      	str	r2, [r3, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 80146ea:	4618      	mov	r0, r3
 80146ec:	f7fd fee8 	bl	80124c0 <HAL_ADC_ConvCpltCallback>
}
 80146f0:	bd08      	pop	{r3, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80146f2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80146f4:	f012 0f10 	tst.w	r2, #16
 80146f8:	d103      	bne.n	8014702 <ADC_DMAConvCplt+0x80>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80146fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80146fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80146fe:	4798      	blx	r3
}
 8014700:	e7f6      	b.n	80146f0 <ADC_DMAConvCplt+0x6e>
      HAL_ADC_ErrorCallback(hadc);
 8014702:	4618      	mov	r0, r3
 8014704:	f7fd feb4 	bl	8012470 <HAL_ADC_ErrorCallback>
 8014708:	e7f2      	b.n	80146f0 <ADC_DMAConvCplt+0x6e>

0801470a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 801470a:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801470c:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 801470e:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8014710:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014714:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8014716:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8014718:	f043 0304 	orr.w	r3, r3, #4
 801471c:	6583      	str	r3, [r0, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 801471e:	f7fd fea7 	bl	8012470 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8014722:	bd08      	pop	{r3, pc}

08014724 <HAL_ADC_ConfigChannel>:
{
 8014724:	b4f0      	push	{r4, r5, r6, r7}
 8014726:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0;
 8014728:	2200      	movs	r2, #0
 801472a:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 801472c:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 8014730:	2a01      	cmp	r2, #1
 8014732:	f000 8239 	beq.w	8014ba8 <HAL_ADC_ConfigChannel+0x484>
 8014736:	4603      	mov	r3, r0
 8014738:	2201      	movs	r2, #1
 801473a:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 801473e:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8014740:	6892      	ldr	r2, [r2, #8]
 8014742:	f012 0f04 	tst.w	r2, #4
 8014746:	d00a      	beq.n	801475e <HAL_ADC_ConfigChannel+0x3a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8014748:	6d42      	ldr	r2, [r0, #84]	; 0x54
 801474a:	f042 0220 	orr.w	r2, r2, #32
 801474e:	6542      	str	r2, [r0, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8014750:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8014752:	2200      	movs	r2, #0
 8014754:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8014758:	b002      	add	sp, #8
 801475a:	bcf0      	pop	{r4, r5, r6, r7}
 801475c:	4770      	bx	lr
    if (sConfig->Rank <= 5U)
 801475e:	684a      	ldr	r2, [r1, #4]
 8014760:	2a05      	cmp	r2, #5
 8014762:	d809      	bhi.n	8014778 <HAL_ADC_ConfigChannel+0x54>
      switch (sConfig->Rank)
 8014764:	3a02      	subs	r2, #2
 8014766:	2a03      	cmp	r2, #3
 8014768:	f200 808e 	bhi.w	8014888 <HAL_ADC_ConfigChannel+0x164>
 801476c:	e8df f002 	tbb	[pc, r2]
 8014770:	88858202 	.word	0x88858202
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 8014774:	220c      	movs	r2, #12
 8014776:	604a      	str	r2, [r1, #4]
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8014778:	681e      	ldr	r6, [r3, #0]
 801477a:	684d      	ldr	r5, [r1, #4]
 801477c:	680c      	ldr	r4, [r1, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 801477e:	3630      	adds	r6, #48	; 0x30
 8014780:	0a2a      	lsrs	r2, r5, #8
 8014782:	0092      	lsls	r2, r2, #2
 8014784:	f002 020c 	and.w	r2, r2, #12
  MODIFY_REG(*preg,
 8014788:	58b0      	ldr	r0, [r6, r2]
 801478a:	f005 051f 	and.w	r5, r5, #31
 801478e:	271f      	movs	r7, #31
 8014790:	40af      	lsls	r7, r5
 8014792:	ea20 0007 	bic.w	r0, r0, r7
 8014796:	f3c4 6484 	ubfx	r4, r4, #26, #5
 801479a:	40ac      	lsls	r4, r5
 801479c:	4320      	orrs	r0, r4
 801479e:	50b0      	str	r0, [r6, r2]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80147a0:	681a      	ldr	r2, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80147a2:	6890      	ldr	r0, [r2, #8]
 80147a4:	f010 0f04 	tst.w	r0, #4
 80147a8:	d071      	beq.n	801488e <HAL_ADC_ConfigChannel+0x16a>
 80147aa:	2001      	movs	r0, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80147ac:	6894      	ldr	r4, [r2, #8]
 80147ae:	f014 0f08 	tst.w	r4, #8
 80147b2:	d06e      	beq.n	8014892 <HAL_ADC_ConfigChannel+0x16e>
 80147b4:	2401      	movs	r4, #1
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80147b6:	bb50      	cbnz	r0, 801480e <HAL_ADC_ConfigChannel+0xea>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80147b8:	bb4c      	cbnz	r4, 801480e <HAL_ADC_ConfigChannel+0xea>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80147ba:	680e      	ldr	r6, [r1, #0]
 80147bc:	688d      	ldr	r5, [r1, #8]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80147be:	3214      	adds	r2, #20
 80147c0:	0e70      	lsrs	r0, r6, #25
 80147c2:	0080      	lsls	r0, r0, #2
 80147c4:	f000 0004 	and.w	r0, r0, #4
  MODIFY_REG(*preg,
 80147c8:	5814      	ldr	r4, [r2, r0]
 80147ca:	f3c6 5604 	ubfx	r6, r6, #20, #5
 80147ce:	2707      	movs	r7, #7
 80147d0:	40b7      	lsls	r7, r6
 80147d2:	ea24 0407 	bic.w	r4, r4, r7
 80147d6:	40b5      	lsls	r5, r6
 80147d8:	432c      	orrs	r4, r5
 80147da:	5014      	str	r4, [r2, r0]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80147dc:	694c      	ldr	r4, [r1, #20]
 80147de:	6818      	ldr	r0, [r3, #0]
 80147e0:	68c2      	ldr	r2, [r0, #12]
 80147e2:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 80147e6:	0052      	lsls	r2, r2, #1
 80147e8:	fa04 f202 	lsl.w	r2, r4, r2
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80147ec:	690d      	ldr	r5, [r1, #16]
 80147ee:	2d04      	cmp	r5, #4
 80147f0:	d051      	beq.n	8014896 <HAL_ADC_ConfigChannel+0x172>
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80147f2:	680e      	ldr	r6, [r1, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80147f4:	3060      	adds	r0, #96	; 0x60
  MODIFY_REG(*preg,
 80147f6:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
 80147fa:	4cae      	ldr	r4, [pc, #696]	; (8014ab4 <HAL_ADC_ConfigChannel+0x390>)
 80147fc:	403c      	ands	r4, r7
 80147fe:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 8014802:	4332      	orrs	r2, r6
 8014804:	4314      	orrs	r4, r2
 8014806:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 801480a:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 801480e:	6818      	ldr	r0, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8014810:	6882      	ldr	r2, [r0, #8]
 8014812:	f012 0f01 	tst.w	r2, #1
 8014816:	d116      	bne.n	8014846 <HAL_ADC_ConfigChannel+0x122>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8014818:	680a      	ldr	r2, [r1, #0]
 801481a:	68cd      	ldr	r5, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 801481c:	f8d0 40b0 	ldr.w	r4, [r0, #176]	; 0xb0
 8014820:	f3c2 0612 	ubfx	r6, r2, #0, #19
 8014824:	ea24 0406 	bic.w	r4, r4, r6
 8014828:	f005 0618 	and.w	r6, r5, #24
 801482c:	4da2      	ldr	r5, [pc, #648]	; (8014ab8 <HAL_ADC_ConfigChannel+0x394>)
 801482e:	40f5      	lsrs	r5, r6
 8014830:	402a      	ands	r2, r5
 8014832:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8014836:	4322      	orrs	r2, r4
 8014838:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 801483c:	68c8      	ldr	r0, [r1, #12]
 801483e:	4a9f      	ldr	r2, [pc, #636]	; (8014abc <HAL_ADC_ConfigChannel+0x398>)
 8014840:	4290      	cmp	r0, r2
 8014842:	f000 808f 	beq.w	8014964 <HAL_ADC_ConfigChannel+0x240>
    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8014846:	680a      	ldr	r2, [r1, #0]
 8014848:	499d      	ldr	r1, [pc, #628]	; (8014ac0 <HAL_ADC_ConfigChannel+0x39c>)
 801484a:	420a      	tst	r2, r1
 801484c:	f000 81a8 	beq.w	8014ba0 <HAL_ADC_ConfigChannel+0x47c>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8014850:	499c      	ldr	r1, [pc, #624]	; (8014ac4 <HAL_ADC_ConfigChannel+0x3a0>)
 8014852:	6889      	ldr	r1, [r1, #8]
 8014854:	f001 74e0 	and.w	r4, r1, #29360128	; 0x1c00000
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8014858:	489b      	ldr	r0, [pc, #620]	; (8014ac8 <HAL_ADC_ConfigChannel+0x3a4>)
 801485a:	4282      	cmp	r2, r0
 801485c:	f000 814b 	beq.w	8014af6 <HAL_ADC_ConfigChannel+0x3d2>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8014860:	489a      	ldr	r0, [pc, #616]	; (8014acc <HAL_ADC_ConfigChannel+0x3a8>)
 8014862:	4282      	cmp	r2, r0
 8014864:	f000 8171 	beq.w	8014b4a <HAL_ADC_ConfigChannel+0x426>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8014868:	4899      	ldr	r0, [pc, #612]	; (8014ad0 <HAL_ADC_ConfigChannel+0x3ac>)
 801486a:	4282      	cmp	r2, r0
 801486c:	f000 8185 	beq.w	8014b7a <HAL_ADC_ConfigChannel+0x456>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8014870:	2000      	movs	r0, #0
 8014872:	e76e      	b.n	8014752 <HAL_ADC_ConfigChannel+0x2e>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 8014874:	2212      	movs	r2, #18
 8014876:	604a      	str	r2, [r1, #4]
 8014878:	e77e      	b.n	8014778 <HAL_ADC_ConfigChannel+0x54>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 801487a:	2218      	movs	r2, #24
 801487c:	604a      	str	r2, [r1, #4]
 801487e:	e77b      	b.n	8014778 <HAL_ADC_ConfigChannel+0x54>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 8014880:	f44f 7280 	mov.w	r2, #256	; 0x100
 8014884:	604a      	str	r2, [r1, #4]
 8014886:	e777      	b.n	8014778 <HAL_ADC_ConfigChannel+0x54>
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 8014888:	2206      	movs	r2, #6
 801488a:	604a      	str	r2, [r1, #4]
 801488c:	e774      	b.n	8014778 <HAL_ADC_ConfigChannel+0x54>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 801488e:	2000      	movs	r0, #0
 8014890:	e78c      	b.n	80147ac <HAL_ADC_ConfigChannel+0x88>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8014892:	2400      	movs	r4, #0
 8014894:	e78f      	b.n	80147b6 <HAL_ADC_ConfigChannel+0x92>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8014896:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8014898:	6e04      	ldr	r4, [r0, #96]	; 0x60
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 801489a:	f3c4 6484 	ubfx	r4, r4, #26, #5
 801489e:	680a      	ldr	r2, [r1, #0]
 80148a0:	f3c2 0512 	ubfx	r5, r2, #0, #19
 80148a4:	bb7d      	cbnz	r5, 8014906 <HAL_ADC_ConfigChannel+0x1e2>
 80148a6:	f3c2 6284 	ubfx	r2, r2, #26, #5
 80148aa:	4294      	cmp	r4, r2
 80148ac:	d033      	beq.n	8014916 <HAL_ADC_ConfigChannel+0x1f2>
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80148ae:	681c      	ldr	r4, [r3, #0]
 80148b0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80148b2:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80148b4:	f3c0 6084 	ubfx	r0, r0, #26, #5
 80148b8:	680a      	ldr	r2, [r1, #0]
 80148ba:	f3c2 0512 	ubfx	r5, r2, #0, #19
 80148be:	bb7d      	cbnz	r5, 8014920 <HAL_ADC_ConfigChannel+0x1fc>
 80148c0:	f3c2 6284 	ubfx	r2, r2, #26, #5
 80148c4:	4290      	cmp	r0, r2
 80148c6:	d033      	beq.n	8014930 <HAL_ADC_ConfigChannel+0x20c>
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80148c8:	681c      	ldr	r4, [r3, #0]
 80148ca:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80148cc:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80148ce:	f3c0 6084 	ubfx	r0, r0, #26, #5
 80148d2:	680a      	ldr	r2, [r1, #0]
 80148d4:	f3c2 0512 	ubfx	r5, r2, #0, #19
 80148d8:	bb7d      	cbnz	r5, 801493a <HAL_ADC_ConfigChannel+0x216>
 80148da:	f3c2 6284 	ubfx	r2, r2, #26, #5
 80148de:	4290      	cmp	r0, r2
 80148e0:	d033      	beq.n	801494a <HAL_ADC_ConfigChannel+0x226>
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80148e2:	681c      	ldr	r4, [r3, #0]
 80148e4:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80148e6:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80148e8:	f3c0 6084 	ubfx	r0, r0, #26, #5
 80148ec:	680a      	ldr	r2, [r1, #0]
 80148ee:	f3c2 0512 	ubfx	r5, r2, #0, #19
 80148f2:	bb7d      	cbnz	r5, 8014954 <HAL_ADC_ConfigChannel+0x230>
 80148f4:	f3c2 6284 	ubfx	r2, r2, #26, #5
 80148f8:	4290      	cmp	r0, r2
 80148fa:	d188      	bne.n	801480e <HAL_ADC_ConfigChannel+0xea>
  MODIFY_REG(*preg,
 80148fc:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80148fe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8014902:	66e2      	str	r2, [r4, #108]	; 0x6c
 8014904:	e783      	b.n	801480e <HAL_ADC_ConfigChannel+0xea>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8014906:	fa92 f2a2 	rbit	r2, r2
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 801490a:	b112      	cbz	r2, 8014912 <HAL_ADC_ConfigChannel+0x1ee>
  {
    return 32U;
  }
  return __builtin_clz(value);
 801490c:	fab2 f282 	clz	r2, r2
 8014910:	e7cb      	b.n	80148aa <HAL_ADC_ConfigChannel+0x186>
    return 32U;
 8014912:	2220      	movs	r2, #32
 8014914:	e7c9      	b.n	80148aa <HAL_ADC_ConfigChannel+0x186>
 8014916:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8014918:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 801491c:	6602      	str	r2, [r0, #96]	; 0x60
 801491e:	e7c6      	b.n	80148ae <HAL_ADC_ConfigChannel+0x18a>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8014920:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8014924:	b112      	cbz	r2, 801492c <HAL_ADC_ConfigChannel+0x208>
  return __builtin_clz(value);
 8014926:	fab2 f282 	clz	r2, r2
 801492a:	e7cb      	b.n	80148c4 <HAL_ADC_ConfigChannel+0x1a0>
    return 32U;
 801492c:	2220      	movs	r2, #32
 801492e:	e7c9      	b.n	80148c4 <HAL_ADC_ConfigChannel+0x1a0>
 8014930:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014932:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8014936:	6662      	str	r2, [r4, #100]	; 0x64
 8014938:	e7c6      	b.n	80148c8 <HAL_ADC_ConfigChannel+0x1a4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801493a:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 801493e:	b112      	cbz	r2, 8014946 <HAL_ADC_ConfigChannel+0x222>
  return __builtin_clz(value);
 8014940:	fab2 f282 	clz	r2, r2
 8014944:	e7cb      	b.n	80148de <HAL_ADC_ConfigChannel+0x1ba>
    return 32U;
 8014946:	2220      	movs	r2, #32
 8014948:	e7c9      	b.n	80148de <HAL_ADC_ConfigChannel+0x1ba>
 801494a:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 801494c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8014950:	66a2      	str	r2, [r4, #104]	; 0x68
 8014952:	e7c6      	b.n	80148e2 <HAL_ADC_ConfigChannel+0x1be>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8014954:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8014958:	b112      	cbz	r2, 8014960 <HAL_ADC_ConfigChannel+0x23c>
  return __builtin_clz(value);
 801495a:	fab2 f282 	clz	r2, r2
 801495e:	e7cb      	b.n	80148f8 <HAL_ADC_ConfigChannel+0x1d4>
    return 32U;
 8014960:	2220      	movs	r2, #32
 8014962:	e7c9      	b.n	80148f8 <HAL_ADC_ConfigChannel+0x1d4>
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8014964:	681d      	ldr	r5, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8014966:	680a      	ldr	r2, [r1, #0]
 8014968:	f3c2 0612 	ubfx	r6, r2, #0, #19
 801496c:	2e00      	cmp	r6, #0
 801496e:	d135      	bne.n	80149dc <HAL_ADC_ConfigChannel+0x2b8>
 8014970:	0e90      	lsrs	r0, r2, #26
 8014972:	3001      	adds	r0, #1
 8014974:	f000 001f 	and.w	r0, r0, #31
 8014978:	2809      	cmp	r0, #9
 801497a:	bf8c      	ite	hi
 801497c:	2000      	movhi	r0, #0
 801497e:	2001      	movls	r0, #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8014980:	2800      	cmp	r0, #0
 8014982:	d062      	beq.n	8014a4a <HAL_ADC_ConfigChannel+0x326>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8014984:	2e00      	cmp	r6, #0
 8014986:	d138      	bne.n	80149fa <HAL_ADC_ConfigChannel+0x2d6>
 8014988:	0e94      	lsrs	r4, r2, #26
 801498a:	3401      	adds	r4, #1
 801498c:	06a4      	lsls	r4, r4, #26
 801498e:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8014992:	2e00      	cmp	r6, #0
 8014994:	d13d      	bne.n	8014a12 <HAL_ADC_ConfigChannel+0x2ee>
 8014996:	0e90      	lsrs	r0, r2, #26
 8014998:	3001      	adds	r0, #1
 801499a:	f000 071f 	and.w	r7, r0, #31
 801499e:	2001      	movs	r0, #1
 80149a0:	40b8      	lsls	r0, r7
 80149a2:	4304      	orrs	r4, r0
 80149a4:	2e00      	cmp	r6, #0
 80149a6:	d142      	bne.n	8014a2e <HAL_ADC_ConfigChannel+0x30a>
 80149a8:	0e92      	lsrs	r2, r2, #26
 80149aa:	3201      	adds	r2, #1
 80149ac:	f002 021f 	and.w	r2, r2, #31
 80149b0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80149b4:	0512      	lsls	r2, r2, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80149b6:	4322      	orrs	r2, r4
 80149b8:	688c      	ldr	r4, [r1, #8]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80149ba:	3514      	adds	r5, #20
 80149bc:	0e50      	lsrs	r0, r2, #25
 80149be:	0080      	lsls	r0, r0, #2
 80149c0:	f000 0004 	and.w	r0, r0, #4
  MODIFY_REG(*preg,
 80149c4:	582e      	ldr	r6, [r5, r0]
 80149c6:	f3c2 5204 	ubfx	r2, r2, #20, #5
 80149ca:	2707      	movs	r7, #7
 80149cc:	4097      	lsls	r7, r2
 80149ce:	ea26 0607 	bic.w	r6, r6, r7
 80149d2:	fa04 f202 	lsl.w	r2, r4, r2
 80149d6:	4332      	orrs	r2, r6
 80149d8:	502a      	str	r2, [r5, r0]
 80149da:	e734      	b.n	8014846 <HAL_ADC_ConfigChannel+0x122>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80149dc:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 80149e0:	b148      	cbz	r0, 80149f6 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 80149e2:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80149e6:	3001      	adds	r0, #1
 80149e8:	f000 001f 	and.w	r0, r0, #31
 80149ec:	2809      	cmp	r0, #9
 80149ee:	bf8c      	ite	hi
 80149f0:	2000      	movhi	r0, #0
 80149f2:	2001      	movls	r0, #1
 80149f4:	e7c4      	b.n	8014980 <HAL_ADC_ConfigChannel+0x25c>
    return 32U;
 80149f6:	2020      	movs	r0, #32
 80149f8:	e7f5      	b.n	80149e6 <HAL_ADC_ConfigChannel+0x2c2>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80149fa:	fa92 f4a2 	rbit	r4, r2
  if (value == 0U)
 80149fe:	b114      	cbz	r4, 8014a06 <HAL_ADC_ConfigChannel+0x2e2>
  return __builtin_clz(value);
 8014a00:	fab4 f484 	clz	r4, r4
 8014a04:	e000      	b.n	8014a08 <HAL_ADC_ConfigChannel+0x2e4>
    return 32U;
 8014a06:	2420      	movs	r4, #32
 8014a08:	3401      	adds	r4, #1
 8014a0a:	06a4      	lsls	r4, r4, #26
 8014a0c:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8014a10:	e7bf      	b.n	8014992 <HAL_ADC_ConfigChannel+0x26e>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8014a12:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 8014a16:	b110      	cbz	r0, 8014a1e <HAL_ADC_ConfigChannel+0x2fa>
  return __builtin_clz(value);
 8014a18:	fab0 f080 	clz	r0, r0
 8014a1c:	e000      	b.n	8014a20 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8014a1e:	2020      	movs	r0, #32
 8014a20:	3001      	adds	r0, #1
 8014a22:	f000 001f 	and.w	r0, r0, #31
 8014a26:	2701      	movs	r7, #1
 8014a28:	fa07 f000 	lsl.w	r0, r7, r0
 8014a2c:	e7b9      	b.n	80149a2 <HAL_ADC_ConfigChannel+0x27e>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8014a2e:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8014a32:	b112      	cbz	r2, 8014a3a <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8014a34:	fab2 f282 	clz	r2, r2
 8014a38:	e000      	b.n	8014a3c <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8014a3a:	2220      	movs	r2, #32
 8014a3c:	3201      	adds	r2, #1
 8014a3e:	f002 021f 	and.w	r2, r2, #31
 8014a42:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8014a46:	0512      	lsls	r2, r2, #20
 8014a48:	e7b5      	b.n	80149b6 <HAL_ADC_ConfigChannel+0x292>
 8014a4a:	b9ce      	cbnz	r6, 8014a80 <HAL_ADC_ConfigChannel+0x35c>
 8014a4c:	0e94      	lsrs	r4, r2, #26
 8014a4e:	3401      	adds	r4, #1
 8014a50:	06a4      	lsls	r4, r4, #26
 8014a52:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8014a56:	b9fe      	cbnz	r6, 8014a98 <HAL_ADC_ConfigChannel+0x374>
 8014a58:	0e90      	lsrs	r0, r2, #26
 8014a5a:	3001      	adds	r0, #1
 8014a5c:	f000 071f 	and.w	r7, r0, #31
 8014a60:	2001      	movs	r0, #1
 8014a62:	40b8      	lsls	r0, r7
 8014a64:	4304      	orrs	r4, r0
 8014a66:	bbae      	cbnz	r6, 8014ad4 <HAL_ADC_ConfigChannel+0x3b0>
 8014a68:	0e90      	lsrs	r0, r2, #26
 8014a6a:	3001      	adds	r0, #1
 8014a6c:	f000 001f 	and.w	r0, r0, #31
 8014a70:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8014a74:	3a1e      	subs	r2, #30
 8014a76:	0512      	lsls	r2, r2, #20
 8014a78:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8014a7c:	4322      	orrs	r2, r4
 8014a7e:	e79b      	b.n	80149b8 <HAL_ADC_ConfigChannel+0x294>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8014a80:	fa92 f4a2 	rbit	r4, r2
  if (value == 0U)
 8014a84:	b114      	cbz	r4, 8014a8c <HAL_ADC_ConfigChannel+0x368>
  return __builtin_clz(value);
 8014a86:	fab4 f484 	clz	r4, r4
 8014a8a:	e000      	b.n	8014a8e <HAL_ADC_ConfigChannel+0x36a>
    return 32U;
 8014a8c:	2420      	movs	r4, #32
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8014a8e:	3401      	adds	r4, #1
 8014a90:	06a4      	lsls	r4, r4, #26
 8014a92:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8014a96:	e7de      	b.n	8014a56 <HAL_ADC_ConfigChannel+0x332>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8014a98:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 8014a9c:	b110      	cbz	r0, 8014aa4 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 8014a9e:	fab0 f080 	clz	r0, r0
 8014aa2:	e000      	b.n	8014aa6 <HAL_ADC_ConfigChannel+0x382>
    return 32U;
 8014aa4:	2020      	movs	r0, #32
 8014aa6:	3001      	adds	r0, #1
 8014aa8:	f000 001f 	and.w	r0, r0, #31
 8014aac:	2701      	movs	r7, #1
 8014aae:	fa07 f000 	lsl.w	r0, r7, r0
 8014ab2:	e7d7      	b.n	8014a64 <HAL_ADC_ConfigChannel+0x340>
 8014ab4:	03fff000 	.word	0x03fff000
 8014ab8:	0007ffff 	.word	0x0007ffff
 8014abc:	407f0000 	.word	0x407f0000
 8014ac0:	80080000 	.word	0x80080000
 8014ac4:	50040300 	.word	0x50040300
 8014ac8:	c7520000 	.word	0xc7520000
 8014acc:	cb840000 	.word	0xcb840000
 8014ad0:	80000001 	.word	0x80000001
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8014ad4:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8014ad8:	b112      	cbz	r2, 8014ae0 <HAL_ADC_ConfigChannel+0x3bc>
  return __builtin_clz(value);
 8014ada:	fab2 f082 	clz	r0, r2
 8014ade:	e000      	b.n	8014ae2 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8014ae0:	2020      	movs	r0, #32
 8014ae2:	3001      	adds	r0, #1
 8014ae4:	f000 001f 	and.w	r0, r0, #31
 8014ae8:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8014aec:	3a1e      	subs	r2, #30
 8014aee:	0512      	lsls	r2, r2, #20
 8014af0:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8014af4:	e7c2      	b.n	8014a7c <HAL_ADC_ConfigChannel+0x358>
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8014af6:	f411 0f00 	tst.w	r1, #8388608	; 0x800000
 8014afa:	f47f aeb1 	bne.w	8014860 <HAL_ADC_ConfigChannel+0x13c>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8014afe:	681a      	ldr	r2, [r3, #0]
 8014b00:	492a      	ldr	r1, [pc, #168]	; (8014bac <HAL_ADC_ConfigChannel+0x488>)
 8014b02:	428a      	cmp	r2, r1
 8014b04:	d005      	beq.n	8014b12 <HAL_ADC_ConfigChannel+0x3ee>
 8014b06:	f501 7100 	add.w	r1, r1, #512	; 0x200
 8014b0a:	428a      	cmp	r2, r1
 8014b0c:	d001      	beq.n	8014b12 <HAL_ADC_ConfigChannel+0x3ee>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8014b0e:	2000      	movs	r0, #0
 8014b10:	e61f      	b.n	8014752 <HAL_ADC_ConfigChannel+0x2e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8014b12:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8014b16:	4926      	ldr	r1, [pc, #152]	; (8014bb0 <HAL_ADC_ConfigChannel+0x48c>)
 8014b18:	688a      	ldr	r2, [r1, #8]
 8014b1a:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8014b1e:	4314      	orrs	r4, r2
 8014b20:	608c      	str	r4, [r1, #8]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8014b22:	4a24      	ldr	r2, [pc, #144]	; (8014bb4 <HAL_ADC_ConfigChannel+0x490>)
 8014b24:	6812      	ldr	r2, [r2, #0]
 8014b26:	0992      	lsrs	r2, r2, #6
 8014b28:	4923      	ldr	r1, [pc, #140]	; (8014bb8 <HAL_ADC_ConfigChannel+0x494>)
 8014b2a:	fba1 1202 	umull	r1, r2, r1, r2
 8014b2e:	0992      	lsrs	r2, r2, #6
 8014b30:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8014b34:	0091      	lsls	r1, r2, #2
 8014b36:	9101      	str	r1, [sp, #4]
          while (wait_loop_index != 0UL)
 8014b38:	e002      	b.n	8014b40 <HAL_ADC_ConfigChannel+0x41c>
            wait_loop_index--;
 8014b3a:	9a01      	ldr	r2, [sp, #4]
 8014b3c:	3a01      	subs	r2, #1
 8014b3e:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8014b40:	9a01      	ldr	r2, [sp, #4]
 8014b42:	2a00      	cmp	r2, #0
 8014b44:	d1f9      	bne.n	8014b3a <HAL_ADC_ConfigChannel+0x416>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8014b46:	2000      	movs	r0, #0
 8014b48:	e603      	b.n	8014752 <HAL_ADC_ConfigChannel+0x2e>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8014b4a:	f011 7f80 	tst.w	r1, #16777216	; 0x1000000
 8014b4e:	f47f ae8b 	bne.w	8014868 <HAL_ADC_ConfigChannel+0x144>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8014b52:	681a      	ldr	r2, [r3, #0]
 8014b54:	4915      	ldr	r1, [pc, #84]	; (8014bac <HAL_ADC_ConfigChannel+0x488>)
 8014b56:	428a      	cmp	r2, r1
 8014b58:	d005      	beq.n	8014b66 <HAL_ADC_ConfigChannel+0x442>
 8014b5a:	f501 7100 	add.w	r1, r1, #512	; 0x200
 8014b5e:	428a      	cmp	r2, r1
 8014b60:	d001      	beq.n	8014b66 <HAL_ADC_ConfigChannel+0x442>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8014b62:	2000      	movs	r0, #0
 8014b64:	e5f5      	b.n	8014752 <HAL_ADC_ConfigChannel+0x2e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8014b66:	f044 7280 	orr.w	r2, r4, #16777216	; 0x1000000
 8014b6a:	4811      	ldr	r0, [pc, #68]	; (8014bb0 <HAL_ADC_ConfigChannel+0x48c>)
 8014b6c:	6881      	ldr	r1, [r0, #8]
 8014b6e:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8014b72:	430a      	orrs	r2, r1
 8014b74:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8014b76:	2000      	movs	r0, #0
 8014b78:	e5eb      	b.n	8014752 <HAL_ADC_ConfigChannel+0x2e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8014b7a:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
 8014b7e:	d111      	bne.n	8014ba4 <HAL_ADC_ConfigChannel+0x480>
        if (ADC_VREFINT_INSTANCE(hadc))
 8014b80:	6819      	ldr	r1, [r3, #0]
 8014b82:	4a0a      	ldr	r2, [pc, #40]	; (8014bac <HAL_ADC_ConfigChannel+0x488>)
 8014b84:	4291      	cmp	r1, r2
 8014b86:	d001      	beq.n	8014b8c <HAL_ADC_ConfigChannel+0x468>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8014b88:	2000      	movs	r0, #0
 8014b8a:	e5e2      	b.n	8014752 <HAL_ADC_ConfigChannel+0x2e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8014b8c:	f444 0280 	orr.w	r2, r4, #4194304	; 0x400000
 8014b90:	4807      	ldr	r0, [pc, #28]	; (8014bb0 <HAL_ADC_ConfigChannel+0x48c>)
 8014b92:	6881      	ldr	r1, [r0, #8]
 8014b94:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8014b98:	430a      	orrs	r2, r1
 8014b9a:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8014b9c:	2000      	movs	r0, #0
 8014b9e:	e5d8      	b.n	8014752 <HAL_ADC_ConfigChannel+0x2e>
 8014ba0:	2000      	movs	r0, #0
 8014ba2:	e5d6      	b.n	8014752 <HAL_ADC_ConfigChannel+0x2e>
 8014ba4:	2000      	movs	r0, #0
 8014ba6:	e5d4      	b.n	8014752 <HAL_ADC_ConfigChannel+0x2e>
  __HAL_LOCK(hadc);
 8014ba8:	2002      	movs	r0, #2
 8014baa:	e5d5      	b.n	8014758 <HAL_ADC_ConfigChannel+0x34>
 8014bac:	50040000 	.word	0x50040000
 8014bb0:	50040300 	.word	0x50040300
 8014bb4:	20000188 	.word	0x20000188
 8014bb8:	053e2d63 	.word	0x053e2d63

08014bbc <ADC_ConversionStop>:
{
 8014bbc:	b570      	push	{r4, r5, r6, lr}
 8014bbe:	4604      	mov	r4, r0
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8014bc0:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8014bc2:	689a      	ldr	r2, [r3, #8]
 8014bc4:	f012 0f04 	tst.w	r2, #4
 8014bc8:	d052      	beq.n	8014c70 <ADC_ConversionStop+0xb4>
 8014bca:	2001      	movs	r0, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8014bcc:	689a      	ldr	r2, [r3, #8]
 8014bce:	f012 0f08 	tst.w	r2, #8
 8014bd2:	d04f      	beq.n	8014c74 <ADC_ConversionStop+0xb8>
 8014bd4:	2201      	movs	r2, #1
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8014bd6:	b908      	cbnz	r0, 8014bdc <ADC_ConversionStop+0x20>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8014bd8:	2a00      	cmp	r2, #0
 8014bda:	d06b      	beq.n	8014cb4 <ADC_ConversionStop+0xf8>
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8014bdc:	68da      	ldr	r2, [r3, #12]
 8014bde:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8014be2:	d004      	beq.n	8014bee <ADC_ConversionStop+0x32>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8014be4:	8b20      	ldrh	r0, [r4, #24]
 8014be6:	f240 1201 	movw	r2, #257	; 0x101
 8014bea:	4290      	cmp	r0, r2
 8014bec:	d04e      	beq.n	8014c8c <ADC_ConversionStop+0xd0>
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8014bee:	2902      	cmp	r1, #2
 8014bf0:	d010      	beq.n	8014c14 <ADC_ConversionStop+0x58>
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8014bf2:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8014bf4:	689a      	ldr	r2, [r3, #8]
 8014bf6:	f012 0f04 	tst.w	r2, #4
 8014bfa:	d00b      	beq.n	8014c14 <ADC_ConversionStop+0x58>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8014bfc:	689a      	ldr	r2, [r3, #8]
 8014bfe:	f012 0f02 	tst.w	r2, #2
 8014c02:	d107      	bne.n	8014c14 <ADC_ConversionStop+0x58>
  MODIFY_REG(ADCx->CR,
 8014c04:	689a      	ldr	r2, [r3, #8]
 8014c06:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8014c0a:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8014c0e:	f042 0210 	orr.w	r2, r2, #16
 8014c12:	609a      	str	r2, [r3, #8]
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8014c14:	2901      	cmp	r1, #1
 8014c16:	d010      	beq.n	8014c3a <ADC_ConversionStop+0x7e>
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8014c18:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8014c1a:	689a      	ldr	r2, [r3, #8]
 8014c1c:	f012 0f08 	tst.w	r2, #8
 8014c20:	d00b      	beq.n	8014c3a <ADC_ConversionStop+0x7e>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8014c22:	689a      	ldr	r2, [r3, #8]
 8014c24:	f012 0f02 	tst.w	r2, #2
 8014c28:	d107      	bne.n	8014c3a <ADC_ConversionStop+0x7e>
  MODIFY_REG(ADCx->CR,
 8014c2a:	689a      	ldr	r2, [r3, #8]
 8014c2c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8014c30:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8014c34:	f042 0220 	orr.w	r2, r2, #32
 8014c38:	609a      	str	r2, [r3, #8]
    switch (conversion_group_reassigned)
 8014c3a:	2902      	cmp	r1, #2
 8014c3c:	d036      	beq.n	8014cac <ADC_ConversionStop+0xf0>
 8014c3e:	2903      	cmp	r1, #3
 8014c40:	d132      	bne.n	8014ca8 <ADC_ConversionStop+0xec>
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8014c42:	250c      	movs	r5, #12
    tickstart = HAL_GetTick();
 8014c44:	f7fb fc84 	bl	8010550 <HAL_GetTick>
 8014c48:	4606      	mov	r6, r0
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8014c4a:	6823      	ldr	r3, [r4, #0]
 8014c4c:	689b      	ldr	r3, [r3, #8]
 8014c4e:	422b      	tst	r3, r5
 8014c50:	d02e      	beq.n	8014cb0 <ADC_ConversionStop+0xf4>
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8014c52:	f7fb fc7d 	bl	8010550 <HAL_GetTick>
 8014c56:	1b80      	subs	r0, r0, r6
 8014c58:	2805      	cmp	r0, #5
 8014c5a:	d9f6      	bls.n	8014c4a <ADC_ConversionStop+0x8e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8014c5c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8014c5e:	f043 0310 	orr.w	r3, r3, #16
 8014c62:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8014c64:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014c66:	f043 0301 	orr.w	r3, r3, #1
 8014c6a:	65a3      	str	r3, [r4, #88]	; 0x58
        return HAL_ERROR;
 8014c6c:	2001      	movs	r0, #1
 8014c6e:	e020      	b.n	8014cb2 <ADC_ConversionStop+0xf6>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8014c70:	2000      	movs	r0, #0
 8014c72:	e7ab      	b.n	8014bcc <ADC_ConversionStop+0x10>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8014c74:	2200      	movs	r2, #0
 8014c76:	e7ae      	b.n	8014bd6 <ADC_ConversionStop+0x1a>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8014c78:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8014c7a:	f043 0310 	orr.w	r3, r3, #16
 8014c7e:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8014c80:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014c82:	f043 0301 	orr.w	r3, r3, #1
 8014c86:	65a3      	str	r3, [r4, #88]	; 0x58
          return HAL_ERROR;
 8014c88:	2001      	movs	r0, #1
 8014c8a:	e012      	b.n	8014cb2 <ADC_ConversionStop+0xf6>
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8014c8c:	2200      	movs	r2, #0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8014c8e:	6819      	ldr	r1, [r3, #0]
 8014c90:	f011 0f40 	tst.w	r1, #64	; 0x40
 8014c94:	d104      	bne.n	8014ca0 <ADC_ConversionStop+0xe4>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8014c96:	4908      	ldr	r1, [pc, #32]	; (8014cb8 <ADC_ConversionStop+0xfc>)
 8014c98:	428a      	cmp	r2, r1
 8014c9a:	d8ed      	bhi.n	8014c78 <ADC_ConversionStop+0xbc>
        Conversion_Timeout_CPU_cycles ++;
 8014c9c:	3201      	adds	r2, #1
 8014c9e:	e7f6      	b.n	8014c8e <ADC_ConversionStop+0xd2>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8014ca0:	2240      	movs	r2, #64	; 0x40
 8014ca2:	601a      	str	r2, [r3, #0]
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8014ca4:	2101      	movs	r1, #1
 8014ca6:	e7a4      	b.n	8014bf2 <ADC_ConversionStop+0x36>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8014ca8:	2504      	movs	r5, #4
        break;
 8014caa:	e7cb      	b.n	8014c44 <ADC_ConversionStop+0x88>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8014cac:	2508      	movs	r5, #8
 8014cae:	e7c9      	b.n	8014c44 <ADC_ConversionStop+0x88>
  return HAL_OK;
 8014cb0:	2000      	movs	r0, #0
}
 8014cb2:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8014cb4:	2000      	movs	r0, #0
 8014cb6:	e7fc      	b.n	8014cb2 <ADC_ConversionStop+0xf6>
 8014cb8:	a33fffff 	.word	0xa33fffff

08014cbc <ADC_Enable>:
{
 8014cbc:	b538      	push	{r3, r4, r5, lr}
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8014cbe:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8014cc0:	689a      	ldr	r2, [r3, #8]
 8014cc2:	f012 0f01 	tst.w	r2, #1
 8014cc6:	d13d      	bne.n	8014d44 <ADC_Enable+0x88>
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8014cc8:	6899      	ldr	r1, [r3, #8]
 8014cca:	4a1f      	ldr	r2, [pc, #124]	; (8014d48 <ADC_Enable+0x8c>)
 8014ccc:	4211      	tst	r1, r2
 8014cce:	d009      	beq.n	8014ce4 <ADC_Enable+0x28>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8014cd0:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8014cd2:	f043 0310 	orr.w	r3, r3, #16
 8014cd6:	6543      	str	r3, [r0, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8014cd8:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8014cda:	f043 0301 	orr.w	r3, r3, #1
 8014cde:	6583      	str	r3, [r0, #88]	; 0x58
      return HAL_ERROR;
 8014ce0:	2001      	movs	r0, #1
 8014ce2:	e030      	b.n	8014d46 <ADC_Enable+0x8a>
 8014ce4:	4604      	mov	r4, r0
  MODIFY_REG(ADCx->CR,
 8014ce6:	689a      	ldr	r2, [r3, #8]
 8014ce8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8014cec:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8014cf0:	f042 0201 	orr.w	r2, r2, #1
 8014cf4:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8014cf6:	f7fb fc2b 	bl	8010550 <HAL_GetTick>
 8014cfa:	4605      	mov	r5, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8014cfc:	e004      	b.n	8014d08 <ADC_Enable+0x4c>
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8014cfe:	f7fb fc27 	bl	8010550 <HAL_GetTick>
 8014d02:	1b40      	subs	r0, r0, r5
 8014d04:	2802      	cmp	r0, #2
 8014d06:	d811      	bhi.n	8014d2c <ADC_Enable+0x70>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8014d08:	6823      	ldr	r3, [r4, #0]
 8014d0a:	681a      	ldr	r2, [r3, #0]
 8014d0c:	f012 0f01 	tst.w	r2, #1
 8014d10:	d116      	bne.n	8014d40 <ADC_Enable+0x84>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8014d12:	689a      	ldr	r2, [r3, #8]
 8014d14:	f012 0f01 	tst.w	r2, #1
 8014d18:	d1f1      	bne.n	8014cfe <ADC_Enable+0x42>
  MODIFY_REG(ADCx->CR,
 8014d1a:	689a      	ldr	r2, [r3, #8]
 8014d1c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8014d20:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8014d24:	f042 0201 	orr.w	r2, r2, #1
 8014d28:	609a      	str	r2, [r3, #8]
 8014d2a:	e7e8      	b.n	8014cfe <ADC_Enable+0x42>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8014d2c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8014d2e:	f043 0310 	orr.w	r3, r3, #16
 8014d32:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8014d34:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014d36:	f043 0301 	orr.w	r3, r3, #1
 8014d3a:	65a3      	str	r3, [r4, #88]	; 0x58
        return HAL_ERROR;
 8014d3c:	2001      	movs	r0, #1
 8014d3e:	e002      	b.n	8014d46 <ADC_Enable+0x8a>
  return HAL_OK;
 8014d40:	2000      	movs	r0, #0
 8014d42:	e000      	b.n	8014d46 <ADC_Enable+0x8a>
 8014d44:	2000      	movs	r0, #0
}
 8014d46:	bd38      	pop	{r3, r4, r5, pc}
 8014d48:	8000003f 	.word	0x8000003f

08014d4c <HAL_ADC_Start>:
{
 8014d4c:	b538      	push	{r3, r4, r5, lr}
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8014d4e:	4b3b      	ldr	r3, [pc, #236]	; (8014e3c <HAL_ADC_Start+0xf0>)
 8014d50:	689d      	ldr	r5, [r3, #8]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8014d52:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8014d54:	689b      	ldr	r3, [r3, #8]
 8014d56:	f013 0f04 	tst.w	r3, #4
 8014d5a:	d16a      	bne.n	8014e32 <HAL_ADC_Start+0xe6>
 8014d5c:	f005 051f 	and.w	r5, r5, #31
    __HAL_LOCK(hadc);
 8014d60:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8014d64:	2b01      	cmp	r3, #1
 8014d66:	d067      	beq.n	8014e38 <HAL_ADC_Start+0xec>
 8014d68:	4604      	mov	r4, r0
 8014d6a:	2301      	movs	r3, #1
 8014d6c:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
    tmp_hal_status = ADC_Enable(hadc);
 8014d70:	f7ff ffa4 	bl	8014cbc <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8014d74:	4603      	mov	r3, r0
 8014d76:	2800      	cmp	r0, #0
 8014d78:	d157      	bne.n	8014e2a <HAL_ADC_Start+0xde>
      ADC_STATE_CLR_SET(hadc->State,
 8014d7a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8014d7c:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8014d80:	f022 0201 	bic.w	r2, r2, #1
 8014d84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8014d88:	6562      	str	r2, [r4, #84]	; 0x54
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8014d8a:	6822      	ldr	r2, [r4, #0]
 8014d8c:	492c      	ldr	r1, [pc, #176]	; (8014e40 <HAL_ADC_Start+0xf4>)
 8014d8e:	428a      	cmp	r2, r1
 8014d90:	d02f      	beq.n	8014df2 <HAL_ADC_Start+0xa6>
 8014d92:	4611      	mov	r1, r2
 8014d94:	428a      	cmp	r2, r1
 8014d96:	d000      	beq.n	8014d9a <HAL_ADC_Start+0x4e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8014d98:	b91d      	cbnz	r5, 8014da2 <HAL_ADC_Start+0x56>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8014d9a:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8014d9c:	f421 1180 	bic.w	r1, r1, #1048576	; 0x100000
 8014da0:	6561      	str	r1, [r4, #84]	; 0x54
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8014da2:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8014da4:	f411 5f80 	tst.w	r1, #4096	; 0x1000
 8014da8:	d026      	beq.n	8014df8 <HAL_ADC_Start+0xac>
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8014daa:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8014dac:	f021 0106 	bic.w	r1, r1, #6
 8014db0:	65a1      	str	r1, [r4, #88]	; 0x58
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8014db2:	211c      	movs	r1, #28
 8014db4:	6011      	str	r1, [r2, #0]
      __HAL_UNLOCK(hadc);
 8014db6:	2200      	movs	r2, #0
 8014db8:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8014dbc:	6821      	ldr	r1, [r4, #0]
 8014dbe:	4a20      	ldr	r2, [pc, #128]	; (8014e40 <HAL_ADC_Start+0xf4>)
 8014dc0:	4291      	cmp	r1, r2
 8014dc2:	d01c      	beq.n	8014dfe <HAL_ADC_Start+0xb2>
 8014dc4:	460a      	mov	r2, r1
 8014dc6:	4291      	cmp	r1, r2
 8014dc8:	d01c      	beq.n	8014e04 <HAL_ADC_Start+0xb8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8014dca:	b1dd      	cbz	r5, 8014e04 <HAL_ADC_Start+0xb8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8014dcc:	2d05      	cmp	r5, #5
 8014dce:	d019      	beq.n	8014e04 <HAL_ADC_Start+0xb8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8014dd0:	2d09      	cmp	r5, #9
 8014dd2:	d017      	beq.n	8014e04 <HAL_ADC_Start+0xb8>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8014dd4:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8014dd6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8014dda:	6561      	str	r1, [r4, #84]	; 0x54
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8014ddc:	68d2      	ldr	r2, [r2, #12]
 8014dde:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8014de2:	d027      	beq.n	8014e34 <HAL_ADC_Start+0xe8>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8014de4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8014de6:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8014dea:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8014dee:	6562      	str	r2, [r4, #84]	; 0x54
 8014df0:	e020      	b.n	8014e34 <HAL_ADC_Start+0xe8>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8014df2:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
 8014df6:	e7cd      	b.n	8014d94 <HAL_ADC_Start+0x48>
        ADC_CLEAR_ERRORCODE(hadc);
 8014df8:	2100      	movs	r1, #0
 8014dfa:	65a1      	str	r1, [r4, #88]	; 0x58
 8014dfc:	e7d9      	b.n	8014db2 <HAL_ADC_Start+0x66>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8014dfe:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8014e02:	e7e0      	b.n	8014dc6 <HAL_ADC_Start+0x7a>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8014e04:	68ca      	ldr	r2, [r1, #12]
 8014e06:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8014e0a:	d005      	beq.n	8014e18 <HAL_ADC_Start+0xcc>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8014e0c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8014e0e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8014e12:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8014e16:	6562      	str	r2, [r4, #84]	; 0x54
  MODIFY_REG(ADCx->CR,
 8014e18:	688a      	ldr	r2, [r1, #8]
 8014e1a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8014e1e:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8014e22:	f042 0204 	orr.w	r2, r2, #4
 8014e26:	608a      	str	r2, [r1, #8]
 8014e28:	e004      	b.n	8014e34 <HAL_ADC_Start+0xe8>
      __HAL_UNLOCK(hadc);
 8014e2a:	2200      	movs	r2, #0
 8014e2c:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
 8014e30:	e000      	b.n	8014e34 <HAL_ADC_Start+0xe8>
    tmp_hal_status = HAL_BUSY;
 8014e32:	2302      	movs	r3, #2
}
 8014e34:	4618      	mov	r0, r3
 8014e36:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_LOCK(hadc);
 8014e38:	2302      	movs	r3, #2
 8014e3a:	e7fb      	b.n	8014e34 <HAL_ADC_Start+0xe8>
 8014e3c:	50040300 	.word	0x50040300
 8014e40:	50040100 	.word	0x50040100

08014e44 <HAL_ADC_Start_DMA>:
{
 8014e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8014e46:	4b3c      	ldr	r3, [pc, #240]	; (8014f38 <HAL_ADC_Start_DMA+0xf4>)
 8014e48:	689d      	ldr	r5, [r3, #8]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8014e4a:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8014e4c:	689b      	ldr	r3, [r3, #8]
 8014e4e:	f013 0f04 	tst.w	r3, #4
 8014e52:	d16b      	bne.n	8014f2c <HAL_ADC_Start_DMA+0xe8>
 8014e54:	f005 051f 	and.w	r5, r5, #31
    __HAL_LOCK(hadc);
 8014e58:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8014e5c:	2b01      	cmp	r3, #1
 8014e5e:	d068      	beq.n	8014f32 <HAL_ADC_Start_DMA+0xee>
 8014e60:	2301      	movs	r3, #1
 8014e62:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8014e66:	b145      	cbz	r5, 8014e7a <HAL_ADC_Start_DMA+0x36>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8014e68:	2d05      	cmp	r5, #5
 8014e6a:	d006      	beq.n	8014e7a <HAL_ADC_Start_DMA+0x36>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8014e6c:	2d09      	cmp	r5, #9
 8014e6e:	d004      	beq.n	8014e7a <HAL_ADC_Start_DMA+0x36>
      __HAL_UNLOCK(hadc);
 8014e70:	2300      	movs	r3, #0
 8014e72:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
      tmp_hal_status = HAL_ERROR;
 8014e76:	2301      	movs	r3, #1
 8014e78:	e059      	b.n	8014f2e <HAL_ADC_Start_DMA+0xea>
 8014e7a:	4617      	mov	r7, r2
 8014e7c:	460e      	mov	r6, r1
 8014e7e:	4604      	mov	r4, r0
      tmp_hal_status = ADC_Enable(hadc);
 8014e80:	f7ff ff1c 	bl	8014cbc <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 8014e84:	4603      	mov	r3, r0
 8014e86:	2800      	cmp	r0, #0
 8014e88:	d14c      	bne.n	8014f24 <HAL_ADC_Start_DMA+0xe0>
        ADC_STATE_CLR_SET(hadc->State,
 8014e8a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8014e8c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8014e90:	f023 0301 	bic.w	r3, r3, #1
 8014e94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014e98:	6563      	str	r3, [r4, #84]	; 0x54
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8014e9a:	6823      	ldr	r3, [r4, #0]
 8014e9c:	4a27      	ldr	r2, [pc, #156]	; (8014f3c <HAL_ADC_Start_DMA+0xf8>)
 8014e9e:	4293      	cmp	r3, r2
 8014ea0:	d03a      	beq.n	8014f18 <HAL_ADC_Start_DMA+0xd4>
 8014ea2:	461a      	mov	r2, r3
 8014ea4:	4293      	cmp	r3, r2
 8014ea6:	d000      	beq.n	8014eaa <HAL_ADC_Start_DMA+0x66>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8014ea8:	b91d      	cbnz	r5, 8014eb2 <HAL_ADC_Start_DMA+0x6e>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8014eaa:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8014eac:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8014eb0:	6563      	str	r3, [r4, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8014eb2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8014eb4:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8014eb8:	d031      	beq.n	8014f1e <HAL_ADC_Start_DMA+0xda>
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8014eba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014ebc:	f023 0306 	bic.w	r3, r3, #6
 8014ec0:	65a3      	str	r3, [r4, #88]	; 0x58
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8014ec2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8014ec4:	4a1e      	ldr	r2, [pc, #120]	; (8014f40 <HAL_ADC_Start_DMA+0xfc>)
 8014ec6:	62da      	str	r2, [r3, #44]	; 0x2c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8014ec8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8014eca:	4a1e      	ldr	r2, [pc, #120]	; (8014f44 <HAL_ADC_Start_DMA+0x100>)
 8014ecc:	631a      	str	r2, [r3, #48]	; 0x30
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8014ece:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8014ed0:	4a1d      	ldr	r2, [pc, #116]	; (8014f48 <HAL_ADC_Start_DMA+0x104>)
 8014ed2:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8014ed4:	6823      	ldr	r3, [r4, #0]
 8014ed6:	221c      	movs	r2, #28
 8014ed8:	601a      	str	r2, [r3, #0]
        __HAL_UNLOCK(hadc);
 8014eda:	2300      	movs	r3, #0
 8014edc:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8014ee0:	6822      	ldr	r2, [r4, #0]
 8014ee2:	6853      	ldr	r3, [r2, #4]
 8014ee4:	f043 0310 	orr.w	r3, r3, #16
 8014ee8:	6053      	str	r3, [r2, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8014eea:	6822      	ldr	r2, [r4, #0]
 8014eec:	68d3      	ldr	r3, [r2, #12]
 8014eee:	f043 0301 	orr.w	r3, r3, #1
 8014ef2:	60d3      	str	r3, [r2, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8014ef4:	6821      	ldr	r1, [r4, #0]
 8014ef6:	463b      	mov	r3, r7
 8014ef8:	4632      	mov	r2, r6
 8014efa:	3140      	adds	r1, #64	; 0x40
 8014efc:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8014efe:	f7fc fdbf 	bl	8011a80 <HAL_DMA_Start_IT>
 8014f02:	4603      	mov	r3, r0
        LL_ADC_REG_StartConversion(hadc->Instance);
 8014f04:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8014f06:	688a      	ldr	r2, [r1, #8]
 8014f08:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8014f0c:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8014f10:	f042 0204 	orr.w	r2, r2, #4
 8014f14:	608a      	str	r2, [r1, #8]
 8014f16:	e00a      	b.n	8014f2e <HAL_ADC_Start_DMA+0xea>
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8014f18:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8014f1c:	e7c2      	b.n	8014ea4 <HAL_ADC_Start_DMA+0x60>
          ADC_CLEAR_ERRORCODE(hadc);
 8014f1e:	2300      	movs	r3, #0
 8014f20:	65a3      	str	r3, [r4, #88]	; 0x58
 8014f22:	e7ce      	b.n	8014ec2 <HAL_ADC_Start_DMA+0x7e>
        __HAL_UNLOCK(hadc);
 8014f24:	2200      	movs	r2, #0
 8014f26:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
 8014f2a:	e000      	b.n	8014f2e <HAL_ADC_Start_DMA+0xea>
    tmp_hal_status = HAL_BUSY;
 8014f2c:	2302      	movs	r3, #2
}
 8014f2e:	4618      	mov	r0, r3
 8014f30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LOCK(hadc);
 8014f32:	2302      	movs	r3, #2
 8014f34:	e7fb      	b.n	8014f2e <HAL_ADC_Start_DMA+0xea>
 8014f36:	bf00      	nop
 8014f38:	50040300 	.word	0x50040300
 8014f3c:	50040100 	.word	0x50040100
 8014f40:	08014683 	.word	0x08014683
 8014f44:	08014679 	.word	0x08014679
 8014f48:	0801470b 	.word	0x0801470b

08014f4c <ADC_Disable>:
{
 8014f4c:	b538      	push	{r3, r4, r5, lr}
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8014f4e:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8014f50:	689a      	ldr	r2, [r3, #8]
 8014f52:	f012 0f02 	tst.w	r2, #2
 8014f56:	d015      	beq.n	8014f84 <ADC_Disable+0x38>
 8014f58:	2101      	movs	r1, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8014f5a:	689a      	ldr	r2, [r3, #8]
 8014f5c:	f012 0f01 	tst.w	r2, #1
 8014f60:	d037      	beq.n	8014fd2 <ADC_Disable+0x86>
      && (tmp_adc_is_disable_on_going == 0UL)
 8014f62:	2900      	cmp	r1, #0
 8014f64:	d137      	bne.n	8014fd6 <ADC_Disable+0x8a>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8014f66:	689a      	ldr	r2, [r3, #8]
 8014f68:	f002 020d 	and.w	r2, r2, #13
 8014f6c:	2a01      	cmp	r2, #1
 8014f6e:	d00b      	beq.n	8014f88 <ADC_Disable+0x3c>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8014f70:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8014f72:	f043 0310 	orr.w	r3, r3, #16
 8014f76:	6543      	str	r3, [r0, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8014f78:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8014f7a:	f043 0301 	orr.w	r3, r3, #1
 8014f7e:	6583      	str	r3, [r0, #88]	; 0x58
      return HAL_ERROR;
 8014f80:	2001      	movs	r0, #1
 8014f82:	e027      	b.n	8014fd4 <ADC_Disable+0x88>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8014f84:	2100      	movs	r1, #0
 8014f86:	e7e8      	b.n	8014f5a <ADC_Disable+0xe>
 8014f88:	4604      	mov	r4, r0
  MODIFY_REG(ADCx->CR,
 8014f8a:	689a      	ldr	r2, [r3, #8]
 8014f8c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8014f90:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8014f94:	f042 0202 	orr.w	r2, r2, #2
 8014f98:	609a      	str	r2, [r3, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8014f9a:	6803      	ldr	r3, [r0, #0]
 8014f9c:	2203      	movs	r2, #3
 8014f9e:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8014fa0:	f7fb fad6 	bl	8010550 <HAL_GetTick>
 8014fa4:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8014fa6:	6823      	ldr	r3, [r4, #0]
 8014fa8:	689b      	ldr	r3, [r3, #8]
 8014faa:	f013 0f01 	tst.w	r3, #1
 8014fae:	d00e      	beq.n	8014fce <ADC_Disable+0x82>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8014fb0:	f7fb face 	bl	8010550 <HAL_GetTick>
 8014fb4:	1b40      	subs	r0, r0, r5
 8014fb6:	2802      	cmp	r0, #2
 8014fb8:	d9f5      	bls.n	8014fa6 <ADC_Disable+0x5a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8014fba:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8014fbc:	f043 0310 	orr.w	r3, r3, #16
 8014fc0:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8014fc2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014fc4:	f043 0301 	orr.w	r3, r3, #1
 8014fc8:	65a3      	str	r3, [r4, #88]	; 0x58
        return HAL_ERROR;
 8014fca:	2001      	movs	r0, #1
 8014fcc:	e002      	b.n	8014fd4 <ADC_Disable+0x88>
  return HAL_OK;
 8014fce:	2000      	movs	r0, #0
 8014fd0:	e000      	b.n	8014fd4 <ADC_Disable+0x88>
 8014fd2:	2000      	movs	r0, #0
}
 8014fd4:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8014fd6:	2000      	movs	r0, #0
 8014fd8:	e7fc      	b.n	8014fd4 <ADC_Disable+0x88>

08014fda <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 8014fda:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8014fde:	2b01      	cmp	r3, #1
 8014fe0:	d01d      	beq.n	801501e <HAL_ADC_Stop+0x44>
{
 8014fe2:	b510      	push	{r4, lr}
 8014fe4:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8014fe6:	2301      	movs	r3, #1
 8014fe8:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8014fec:	2103      	movs	r1, #3
 8014fee:	f7ff fde5 	bl	8014bbc <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8014ff2:	4603      	mov	r3, r0
 8014ff4:	b120      	cbz	r0, 8015000 <HAL_ADC_Stop+0x26>
  __HAL_UNLOCK(hadc);
 8014ff6:	2200      	movs	r2, #0
 8014ff8:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
}
 8014ffc:	4618      	mov	r0, r3
 8014ffe:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 8015000:	4620      	mov	r0, r4
 8015002:	f7ff ffa3 	bl	8014f4c <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8015006:	4603      	mov	r3, r0
 8015008:	2800      	cmp	r0, #0
 801500a:	d1f4      	bne.n	8014ff6 <HAL_ADC_Stop+0x1c>
      ADC_STATE_CLR_SET(hadc->State,
 801500c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 801500e:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8015012:	f022 0201 	bic.w	r2, r2, #1
 8015016:	f042 0201 	orr.w	r2, r2, #1
 801501a:	6562      	str	r2, [r4, #84]	; 0x54
 801501c:	e7eb      	b.n	8014ff6 <HAL_ADC_Stop+0x1c>
  __HAL_LOCK(hadc);
 801501e:	2302      	movs	r3, #2
}
 8015020:	4618      	mov	r0, r3
 8015022:	4770      	bx	lr

08015024 <HAL_ADC_Stop_DMA>:
{
 8015024:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hadc);
 8015026:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 801502a:	2b01      	cmp	r3, #1
 801502c:	d039      	beq.n	80150a2 <HAL_ADC_Stop_DMA+0x7e>
 801502e:	4604      	mov	r4, r0
 8015030:	2301      	movs	r3, #1
 8015032:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8015036:	2103      	movs	r1, #3
 8015038:	f7ff fdc0 	bl	8014bbc <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 801503c:	4605      	mov	r5, r0
 801503e:	b9e8      	cbnz	r0, 801507c <HAL_ADC_Stop_DMA+0x58>
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8015040:	6822      	ldr	r2, [r4, #0]
 8015042:	68d3      	ldr	r3, [r2, #12]
 8015044:	f023 0301 	bic.w	r3, r3, #1
 8015048:	60d3      	str	r3, [r2, #12]
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 801504a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 801504c:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8015050:	b2db      	uxtb	r3, r3
 8015052:	2b02      	cmp	r3, #2
 8015054:	d017      	beq.n	8015086 <HAL_ADC_Stop_DMA+0x62>
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8015056:	6822      	ldr	r2, [r4, #0]
 8015058:	6853      	ldr	r3, [r2, #4]
 801505a:	f023 0310 	bic.w	r3, r3, #16
 801505e:	6053      	str	r3, [r2, #4]
    if (tmp_hal_status == HAL_OK)
 8015060:	b9dd      	cbnz	r5, 801509a <HAL_ADC_Stop_DMA+0x76>
      tmp_hal_status = ADC_Disable(hadc);
 8015062:	4620      	mov	r0, r4
 8015064:	f7ff ff72 	bl	8014f4c <ADC_Disable>
 8015068:	4605      	mov	r5, r0
    if (tmp_hal_status == HAL_OK)
 801506a:	b93d      	cbnz	r5, 801507c <HAL_ADC_Stop_DMA+0x58>
      ADC_STATE_CLR_SET(hadc->State,
 801506c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 801506e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8015072:	f023 0301 	bic.w	r3, r3, #1
 8015076:	f043 0301 	orr.w	r3, r3, #1
 801507a:	6563      	str	r3, [r4, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 801507c:	2300      	movs	r3, #0
 801507e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8015082:	4628      	mov	r0, r5
 8015084:	bd38      	pop	{r3, r4, r5, pc}
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8015086:	f7fc fd36 	bl	8011af6 <HAL_DMA_Abort>
      if (tmp_hal_status != HAL_OK)
 801508a:	4605      	mov	r5, r0
 801508c:	2800      	cmp	r0, #0
 801508e:	d0e2      	beq.n	8015056 <HAL_ADC_Stop_DMA+0x32>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8015090:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8015092:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015096:	6563      	str	r3, [r4, #84]	; 0x54
 8015098:	e7dd      	b.n	8015056 <HAL_ADC_Stop_DMA+0x32>
      (void)ADC_Disable(hadc);
 801509a:	4620      	mov	r0, r4
 801509c:	f7ff ff56 	bl	8014f4c <ADC_Disable>
 80150a0:	e7e3      	b.n	801506a <HAL_ADC_Stop_DMA+0x46>
  __HAL_LOCK(hadc);
 80150a2:	2502      	movs	r5, #2
 80150a4:	e7ed      	b.n	8015082 <HAL_ADC_Stop_DMA+0x5e>

080150a6 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80150a6:	b530      	push	{r4, r5, lr}
 80150a8:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80150aa:	2200      	movs	r2, #0
 80150ac:	9201      	str	r2, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80150ae:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 80150b2:	2a01      	cmp	r2, #1
 80150b4:	d043      	beq.n	801513e <HAL_ADCEx_Calibration_Start+0x98>
 80150b6:	460d      	mov	r5, r1
 80150b8:	4604      	mov	r4, r0
 80150ba:	2301      	movs	r3, #1
 80150bc:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80150c0:	f7ff ff44 	bl	8014f4c <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80150c4:	4602      	mov	r2, r0
 80150c6:	bb80      	cbnz	r0, 801512a <HAL_ADCEx_Calibration_Start+0x84>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80150c8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80150ca:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80150ce:	f023 0302 	bic.w	r3, r3, #2
 80150d2:	f043 0302 	orr.w	r3, r3, #2
 80150d6:	6563      	str	r3, [r4, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80150d8:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80150da:	688b      	ldr	r3, [r1, #8]
 80150dc:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80150e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80150e4:	f005 4580 	and.w	r5, r5, #1073741824	; 0x40000000
 80150e8:	432b      	orrs	r3, r5
 80150ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80150ee:	608b      	str	r3, [r1, #8]

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80150f0:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80150f2:	689b      	ldr	r3, [r3, #8]
 80150f4:	2b00      	cmp	r3, #0
 80150f6:	da11      	bge.n	801511c <HAL_ADCEx_Calibration_Start+0x76>
    {
      wait_loop_index++;
 80150f8:	9b01      	ldr	r3, [sp, #4]
 80150fa:	3301      	adds	r3, #1
 80150fc:	9301      	str	r3, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80150fe:	9b01      	ldr	r3, [sp, #4]
 8015100:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8015104:	d3f4      	bcc.n	80150f0 <HAL_ADCEx_Calibration_Start+0x4a>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8015106:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8015108:	f023 0312 	bic.w	r3, r3, #18
 801510c:	f043 0310 	orr.w	r3, r3, #16
 8015110:	6563      	str	r3, [r4, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8015112:	2300      	movs	r3, #0
 8015114:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

        return HAL_ERROR;
 8015118:	2201      	movs	r2, #1
 801511a:	e00d      	b.n	8015138 <HAL_ADCEx_Calibration_Start+0x92>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 801511c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 801511e:	f023 0303 	bic.w	r3, r3, #3
 8015122:	f043 0301 	orr.w	r3, r3, #1
 8015126:	6563      	str	r3, [r4, #84]	; 0x54
 8015128:	e003      	b.n	8015132 <HAL_ADCEx_Calibration_Start+0x8c>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801512a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 801512c:	f043 0310 	orr.w	r3, r3, #16
 8015130:	6563      	str	r3, [r4, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8015132:	2300      	movs	r3, #0
 8015134:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
 8015138:	4610      	mov	r0, r2
 801513a:	b003      	add	sp, #12
 801513c:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hadc);
 801513e:	2202      	movs	r2, #2
 8015140:	e7fa      	b.n	8015138 <HAL_ADCEx_Calibration_Start+0x92>

08015142 <sscanf>:
 */

#include <stdio.h>

int sscanf(const char *str, const char *format, ...)
{
 8015142:	b40e      	push	{r1, r2, r3}
 8015144:	b500      	push	{lr}
 8015146:	b082      	sub	sp, #8
 8015148:	aa03      	add	r2, sp, #12
 801514a:	f852 1b04 	ldr.w	r1, [r2], #4
	va_list ap;
	int rv;

	va_start(ap, format);
 801514e:	9201      	str	r2, [sp, #4]
	rv = vsscanf(str, format, ap);
 8015150:	f7fe fdf4 	bl	8013d3c <vsscanf>
	va_end(ap);

	return rv;
}
 8015154:	b002      	add	sp, #8
 8015156:	f85d eb04 	ldr.w	lr, [sp], #4
 801515a:	b003      	add	sp, #12
 801515c:	4770      	bx	lr

0801515e <vsprintf>:
#include <stdio.h>
#include <unistd.h>
#include <stdint.h>

int vsprintf(char *buffer, const char *format, va_list ap)
{
 801515e:	b508      	push	{r3, lr}
	return vsnprintf(buffer, SIZE_MAX/2, format, ap);
 8015160:	4613      	mov	r3, r2
 8015162:	460a      	mov	r2, r1
 8015164:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015168:	f7f9 fa16 	bl	800e598 <vsnprintf>
}
 801516c:	bd08      	pop	{r3, pc}
	...

08015170 <__aeabi_drsub>:
 8015170:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8015174:	e002      	b.n	801517c <__adddf3>
 8015176:	bf00      	nop

08015178 <__aeabi_dsub>:
 8015178:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0801517c <__adddf3>:
 801517c:	b530      	push	{r4, r5, lr}
 801517e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8015182:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8015186:	ea94 0f05 	teq	r4, r5
 801518a:	bf08      	it	eq
 801518c:	ea90 0f02 	teqeq	r0, r2
 8015190:	bf1f      	itttt	ne
 8015192:	ea54 0c00 	orrsne.w	ip, r4, r0
 8015196:	ea55 0c02 	orrsne.w	ip, r5, r2
 801519a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 801519e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80151a2:	f000 80e2 	beq.w	801536a <__adddf3+0x1ee>
 80151a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80151aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80151ae:	bfb8      	it	lt
 80151b0:	426d      	neglt	r5, r5
 80151b2:	dd0c      	ble.n	80151ce <__adddf3+0x52>
 80151b4:	442c      	add	r4, r5
 80151b6:	ea80 0202 	eor.w	r2, r0, r2
 80151ba:	ea81 0303 	eor.w	r3, r1, r3
 80151be:	ea82 0000 	eor.w	r0, r2, r0
 80151c2:	ea83 0101 	eor.w	r1, r3, r1
 80151c6:	ea80 0202 	eor.w	r2, r0, r2
 80151ca:	ea81 0303 	eor.w	r3, r1, r3
 80151ce:	2d36      	cmp	r5, #54	; 0x36
 80151d0:	bf88      	it	hi
 80151d2:	bd30      	pophi	{r4, r5, pc}
 80151d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80151d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80151dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80151e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80151e4:	d002      	beq.n	80151ec <__adddf3+0x70>
 80151e6:	4240      	negs	r0, r0
 80151e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80151ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80151f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80151f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80151f8:	d002      	beq.n	8015200 <__adddf3+0x84>
 80151fa:	4252      	negs	r2, r2
 80151fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8015200:	ea94 0f05 	teq	r4, r5
 8015204:	f000 80a7 	beq.w	8015356 <__adddf3+0x1da>
 8015208:	f1a4 0401 	sub.w	r4, r4, #1
 801520c:	f1d5 0e20 	rsbs	lr, r5, #32
 8015210:	db0d      	blt.n	801522e <__adddf3+0xb2>
 8015212:	fa02 fc0e 	lsl.w	ip, r2, lr
 8015216:	fa22 f205 	lsr.w	r2, r2, r5
 801521a:	1880      	adds	r0, r0, r2
 801521c:	f141 0100 	adc.w	r1, r1, #0
 8015220:	fa03 f20e 	lsl.w	r2, r3, lr
 8015224:	1880      	adds	r0, r0, r2
 8015226:	fa43 f305 	asr.w	r3, r3, r5
 801522a:	4159      	adcs	r1, r3
 801522c:	e00e      	b.n	801524c <__adddf3+0xd0>
 801522e:	f1a5 0520 	sub.w	r5, r5, #32
 8015232:	f10e 0e20 	add.w	lr, lr, #32
 8015236:	2a01      	cmp	r2, #1
 8015238:	fa03 fc0e 	lsl.w	ip, r3, lr
 801523c:	bf28      	it	cs
 801523e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8015242:	fa43 f305 	asr.w	r3, r3, r5
 8015246:	18c0      	adds	r0, r0, r3
 8015248:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 801524c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8015250:	d507      	bpl.n	8015262 <__adddf3+0xe6>
 8015252:	f04f 0e00 	mov.w	lr, #0
 8015256:	f1dc 0c00 	rsbs	ip, ip, #0
 801525a:	eb7e 0000 	sbcs.w	r0, lr, r0
 801525e:	eb6e 0101 	sbc.w	r1, lr, r1
 8015262:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8015266:	d31b      	bcc.n	80152a0 <__adddf3+0x124>
 8015268:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 801526c:	d30c      	bcc.n	8015288 <__adddf3+0x10c>
 801526e:	0849      	lsrs	r1, r1, #1
 8015270:	ea5f 0030 	movs.w	r0, r0, rrx
 8015274:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8015278:	f104 0401 	add.w	r4, r4, #1
 801527c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8015280:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8015284:	f080 809a 	bcs.w	80153bc <__adddf3+0x240>
 8015288:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 801528c:	bf08      	it	eq
 801528e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8015292:	f150 0000 	adcs.w	r0, r0, #0
 8015296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 801529a:	ea41 0105 	orr.w	r1, r1, r5
 801529e:	bd30      	pop	{r4, r5, pc}
 80152a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80152a4:	4140      	adcs	r0, r0
 80152a6:	eb41 0101 	adc.w	r1, r1, r1
 80152aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80152ae:	f1a4 0401 	sub.w	r4, r4, #1
 80152b2:	d1e9      	bne.n	8015288 <__adddf3+0x10c>
 80152b4:	f091 0f00 	teq	r1, #0
 80152b8:	bf04      	itt	eq
 80152ba:	4601      	moveq	r1, r0
 80152bc:	2000      	moveq	r0, #0
 80152be:	fab1 f381 	clz	r3, r1
 80152c2:	bf08      	it	eq
 80152c4:	3320      	addeq	r3, #32
 80152c6:	f1a3 030b 	sub.w	r3, r3, #11
 80152ca:	f1b3 0220 	subs.w	r2, r3, #32
 80152ce:	da0c      	bge.n	80152ea <__adddf3+0x16e>
 80152d0:	320c      	adds	r2, #12
 80152d2:	dd08      	ble.n	80152e6 <__adddf3+0x16a>
 80152d4:	f102 0c14 	add.w	ip, r2, #20
 80152d8:	f1c2 020c 	rsb	r2, r2, #12
 80152dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80152e0:	fa21 f102 	lsr.w	r1, r1, r2
 80152e4:	e00c      	b.n	8015300 <__adddf3+0x184>
 80152e6:	f102 0214 	add.w	r2, r2, #20
 80152ea:	bfd8      	it	le
 80152ec:	f1c2 0c20 	rsble	ip, r2, #32
 80152f0:	fa01 f102 	lsl.w	r1, r1, r2
 80152f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80152f8:	bfdc      	itt	le
 80152fa:	ea41 010c 	orrle.w	r1, r1, ip
 80152fe:	4090      	lslle	r0, r2
 8015300:	1ae4      	subs	r4, r4, r3
 8015302:	bfa2      	ittt	ge
 8015304:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8015308:	4329      	orrge	r1, r5
 801530a:	bd30      	popge	{r4, r5, pc}
 801530c:	ea6f 0404 	mvn.w	r4, r4
 8015310:	3c1f      	subs	r4, #31
 8015312:	da1c      	bge.n	801534e <__adddf3+0x1d2>
 8015314:	340c      	adds	r4, #12
 8015316:	dc0e      	bgt.n	8015336 <__adddf3+0x1ba>
 8015318:	f104 0414 	add.w	r4, r4, #20
 801531c:	f1c4 0220 	rsb	r2, r4, #32
 8015320:	fa20 f004 	lsr.w	r0, r0, r4
 8015324:	fa01 f302 	lsl.w	r3, r1, r2
 8015328:	ea40 0003 	orr.w	r0, r0, r3
 801532c:	fa21 f304 	lsr.w	r3, r1, r4
 8015330:	ea45 0103 	orr.w	r1, r5, r3
 8015334:	bd30      	pop	{r4, r5, pc}
 8015336:	f1c4 040c 	rsb	r4, r4, #12
 801533a:	f1c4 0220 	rsb	r2, r4, #32
 801533e:	fa20 f002 	lsr.w	r0, r0, r2
 8015342:	fa01 f304 	lsl.w	r3, r1, r4
 8015346:	ea40 0003 	orr.w	r0, r0, r3
 801534a:	4629      	mov	r1, r5
 801534c:	bd30      	pop	{r4, r5, pc}
 801534e:	fa21 f004 	lsr.w	r0, r1, r4
 8015352:	4629      	mov	r1, r5
 8015354:	bd30      	pop	{r4, r5, pc}
 8015356:	f094 0f00 	teq	r4, #0
 801535a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 801535e:	bf06      	itte	eq
 8015360:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8015364:	3401      	addeq	r4, #1
 8015366:	3d01      	subne	r5, #1
 8015368:	e74e      	b.n	8015208 <__adddf3+0x8c>
 801536a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 801536e:	bf18      	it	ne
 8015370:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8015374:	d029      	beq.n	80153ca <__adddf3+0x24e>
 8015376:	ea94 0f05 	teq	r4, r5
 801537a:	bf08      	it	eq
 801537c:	ea90 0f02 	teqeq	r0, r2
 8015380:	d005      	beq.n	801538e <__adddf3+0x212>
 8015382:	ea54 0c00 	orrs.w	ip, r4, r0
 8015386:	bf04      	itt	eq
 8015388:	4619      	moveq	r1, r3
 801538a:	4610      	moveq	r0, r2
 801538c:	bd30      	pop	{r4, r5, pc}
 801538e:	ea91 0f03 	teq	r1, r3
 8015392:	bf1e      	ittt	ne
 8015394:	2100      	movne	r1, #0
 8015396:	2000      	movne	r0, #0
 8015398:	bd30      	popne	{r4, r5, pc}
 801539a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 801539e:	d105      	bne.n	80153ac <__adddf3+0x230>
 80153a0:	0040      	lsls	r0, r0, #1
 80153a2:	4149      	adcs	r1, r1
 80153a4:	bf28      	it	cs
 80153a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80153aa:	bd30      	pop	{r4, r5, pc}
 80153ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80153b0:	bf3c      	itt	cc
 80153b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80153b6:	bd30      	popcc	{r4, r5, pc}
 80153b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80153bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80153c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80153c4:	f04f 0000 	mov.w	r0, #0
 80153c8:	bd30      	pop	{r4, r5, pc}
 80153ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80153ce:	bf1a      	itte	ne
 80153d0:	4619      	movne	r1, r3
 80153d2:	4610      	movne	r0, r2
 80153d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80153d8:	bf1c      	itt	ne
 80153da:	460b      	movne	r3, r1
 80153dc:	4602      	movne	r2, r0
 80153de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80153e2:	bf06      	itte	eq
 80153e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80153e8:	ea91 0f03 	teqeq	r1, r3
 80153ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80153f0:	bd30      	pop	{r4, r5, pc}
 80153f2:	bf00      	nop

080153f4 <__aeabi_ui2d>:
 80153f4:	f090 0f00 	teq	r0, #0
 80153f8:	bf04      	itt	eq
 80153fa:	2100      	moveq	r1, #0
 80153fc:	4770      	bxeq	lr
 80153fe:	b530      	push	{r4, r5, lr}
 8015400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8015404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8015408:	f04f 0500 	mov.w	r5, #0
 801540c:	f04f 0100 	mov.w	r1, #0
 8015410:	e750      	b.n	80152b4 <__adddf3+0x138>
 8015412:	bf00      	nop

08015414 <__aeabi_i2d>:
 8015414:	f090 0f00 	teq	r0, #0
 8015418:	bf04      	itt	eq
 801541a:	2100      	moveq	r1, #0
 801541c:	4770      	bxeq	lr
 801541e:	b530      	push	{r4, r5, lr}
 8015420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8015424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8015428:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 801542c:	bf48      	it	mi
 801542e:	4240      	negmi	r0, r0
 8015430:	f04f 0100 	mov.w	r1, #0
 8015434:	e73e      	b.n	80152b4 <__adddf3+0x138>
 8015436:	bf00      	nop

08015438 <__aeabi_f2d>:
 8015438:	0042      	lsls	r2, r0, #1
 801543a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 801543e:	ea4f 0131 	mov.w	r1, r1, rrx
 8015442:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8015446:	bf1f      	itttt	ne
 8015448:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 801544c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8015450:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8015454:	4770      	bxne	lr
 8015456:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 801545a:	bf08      	it	eq
 801545c:	4770      	bxeq	lr
 801545e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8015462:	bf04      	itt	eq
 8015464:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8015468:	4770      	bxeq	lr
 801546a:	b530      	push	{r4, r5, lr}
 801546c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8015470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8015474:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8015478:	e71c      	b.n	80152b4 <__adddf3+0x138>
 801547a:	bf00      	nop

0801547c <__aeabi_ul2d>:
 801547c:	ea50 0201 	orrs.w	r2, r0, r1
 8015480:	bf08      	it	eq
 8015482:	4770      	bxeq	lr
 8015484:	b530      	push	{r4, r5, lr}
 8015486:	f04f 0500 	mov.w	r5, #0
 801548a:	e00a      	b.n	80154a2 <__aeabi_l2d+0x16>

0801548c <__aeabi_l2d>:
 801548c:	ea50 0201 	orrs.w	r2, r0, r1
 8015490:	bf08      	it	eq
 8015492:	4770      	bxeq	lr
 8015494:	b530      	push	{r4, r5, lr}
 8015496:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 801549a:	d502      	bpl.n	80154a2 <__aeabi_l2d+0x16>
 801549c:	4240      	negs	r0, r0
 801549e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80154a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80154a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80154aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80154ae:	f43f aed8 	beq.w	8015262 <__adddf3+0xe6>
 80154b2:	f04f 0203 	mov.w	r2, #3
 80154b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80154ba:	bf18      	it	ne
 80154bc:	3203      	addne	r2, #3
 80154be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80154c2:	bf18      	it	ne
 80154c4:	3203      	addne	r2, #3
 80154c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80154ca:	f1c2 0320 	rsb	r3, r2, #32
 80154ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80154d2:	fa20 f002 	lsr.w	r0, r0, r2
 80154d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80154da:	ea40 000e 	orr.w	r0, r0, lr
 80154de:	fa21 f102 	lsr.w	r1, r1, r2
 80154e2:	4414      	add	r4, r2
 80154e4:	e6bd      	b.n	8015262 <__adddf3+0xe6>
 80154e6:	bf00      	nop

080154e8 <__aeabi_dmul>:
 80154e8:	b570      	push	{r4, r5, r6, lr}
 80154ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80154ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80154f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80154f6:	bf1d      	ittte	ne
 80154f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80154fc:	ea94 0f0c 	teqne	r4, ip
 8015500:	ea95 0f0c 	teqne	r5, ip
 8015504:	f000 f8de 	bleq	80156c4 <__aeabi_dmul+0x1dc>
 8015508:	442c      	add	r4, r5
 801550a:	ea81 0603 	eor.w	r6, r1, r3
 801550e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8015512:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8015516:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 801551a:	bf18      	it	ne
 801551c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8015520:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8015524:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015528:	d038      	beq.n	801559c <__aeabi_dmul+0xb4>
 801552a:	fba0 ce02 	umull	ip, lr, r0, r2
 801552e:	f04f 0500 	mov.w	r5, #0
 8015532:	fbe1 e502 	umlal	lr, r5, r1, r2
 8015536:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 801553a:	fbe0 e503 	umlal	lr, r5, r0, r3
 801553e:	f04f 0600 	mov.w	r6, #0
 8015542:	fbe1 5603 	umlal	r5, r6, r1, r3
 8015546:	f09c 0f00 	teq	ip, #0
 801554a:	bf18      	it	ne
 801554c:	f04e 0e01 	orrne.w	lr, lr, #1
 8015550:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8015554:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8015558:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 801555c:	d204      	bcs.n	8015568 <__aeabi_dmul+0x80>
 801555e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8015562:	416d      	adcs	r5, r5
 8015564:	eb46 0606 	adc.w	r6, r6, r6
 8015568:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 801556c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8015570:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8015574:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8015578:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 801557c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8015580:	bf88      	it	hi
 8015582:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8015586:	d81e      	bhi.n	80155c6 <__aeabi_dmul+0xde>
 8015588:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 801558c:	bf08      	it	eq
 801558e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8015592:	f150 0000 	adcs.w	r0, r0, #0
 8015596:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 801559a:	bd70      	pop	{r4, r5, r6, pc}
 801559c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80155a0:	ea46 0101 	orr.w	r1, r6, r1
 80155a4:	ea40 0002 	orr.w	r0, r0, r2
 80155a8:	ea81 0103 	eor.w	r1, r1, r3
 80155ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80155b0:	bfc2      	ittt	gt
 80155b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80155b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80155ba:	bd70      	popgt	{r4, r5, r6, pc}
 80155bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80155c0:	f04f 0e00 	mov.w	lr, #0
 80155c4:	3c01      	subs	r4, #1
 80155c6:	f300 80ab 	bgt.w	8015720 <__aeabi_dmul+0x238>
 80155ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80155ce:	bfde      	ittt	le
 80155d0:	2000      	movle	r0, #0
 80155d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80155d6:	bd70      	pople	{r4, r5, r6, pc}
 80155d8:	f1c4 0400 	rsb	r4, r4, #0
 80155dc:	3c20      	subs	r4, #32
 80155de:	da35      	bge.n	801564c <__aeabi_dmul+0x164>
 80155e0:	340c      	adds	r4, #12
 80155e2:	dc1b      	bgt.n	801561c <__aeabi_dmul+0x134>
 80155e4:	f104 0414 	add.w	r4, r4, #20
 80155e8:	f1c4 0520 	rsb	r5, r4, #32
 80155ec:	fa00 f305 	lsl.w	r3, r0, r5
 80155f0:	fa20 f004 	lsr.w	r0, r0, r4
 80155f4:	fa01 f205 	lsl.w	r2, r1, r5
 80155f8:	ea40 0002 	orr.w	r0, r0, r2
 80155fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8015600:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8015604:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8015608:	fa21 f604 	lsr.w	r6, r1, r4
 801560c:	eb42 0106 	adc.w	r1, r2, r6
 8015610:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8015614:	bf08      	it	eq
 8015616:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 801561a:	bd70      	pop	{r4, r5, r6, pc}
 801561c:	f1c4 040c 	rsb	r4, r4, #12
 8015620:	f1c4 0520 	rsb	r5, r4, #32
 8015624:	fa00 f304 	lsl.w	r3, r0, r4
 8015628:	fa20 f005 	lsr.w	r0, r0, r5
 801562c:	fa01 f204 	lsl.w	r2, r1, r4
 8015630:	ea40 0002 	orr.w	r0, r0, r2
 8015634:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8015638:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 801563c:	f141 0100 	adc.w	r1, r1, #0
 8015640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8015644:	bf08      	it	eq
 8015646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 801564a:	bd70      	pop	{r4, r5, r6, pc}
 801564c:	f1c4 0520 	rsb	r5, r4, #32
 8015650:	fa00 f205 	lsl.w	r2, r0, r5
 8015654:	ea4e 0e02 	orr.w	lr, lr, r2
 8015658:	fa20 f304 	lsr.w	r3, r0, r4
 801565c:	fa01 f205 	lsl.w	r2, r1, r5
 8015660:	ea43 0302 	orr.w	r3, r3, r2
 8015664:	fa21 f004 	lsr.w	r0, r1, r4
 8015668:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 801566c:	fa21 f204 	lsr.w	r2, r1, r4
 8015670:	ea20 0002 	bic.w	r0, r0, r2
 8015674:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8015678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 801567c:	bf08      	it	eq
 801567e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8015682:	bd70      	pop	{r4, r5, r6, pc}
 8015684:	f094 0f00 	teq	r4, #0
 8015688:	d10f      	bne.n	80156aa <__aeabi_dmul+0x1c2>
 801568a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 801568e:	0040      	lsls	r0, r0, #1
 8015690:	eb41 0101 	adc.w	r1, r1, r1
 8015694:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8015698:	bf08      	it	eq
 801569a:	3c01      	subeq	r4, #1
 801569c:	d0f7      	beq.n	801568e <__aeabi_dmul+0x1a6>
 801569e:	ea41 0106 	orr.w	r1, r1, r6
 80156a2:	f095 0f00 	teq	r5, #0
 80156a6:	bf18      	it	ne
 80156a8:	4770      	bxne	lr
 80156aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80156ae:	0052      	lsls	r2, r2, #1
 80156b0:	eb43 0303 	adc.w	r3, r3, r3
 80156b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80156b8:	bf08      	it	eq
 80156ba:	3d01      	subeq	r5, #1
 80156bc:	d0f7      	beq.n	80156ae <__aeabi_dmul+0x1c6>
 80156be:	ea43 0306 	orr.w	r3, r3, r6
 80156c2:	4770      	bx	lr
 80156c4:	ea94 0f0c 	teq	r4, ip
 80156c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80156cc:	bf18      	it	ne
 80156ce:	ea95 0f0c 	teqne	r5, ip
 80156d2:	d00c      	beq.n	80156ee <__aeabi_dmul+0x206>
 80156d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80156d8:	bf18      	it	ne
 80156da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80156de:	d1d1      	bne.n	8015684 <__aeabi_dmul+0x19c>
 80156e0:	ea81 0103 	eor.w	r1, r1, r3
 80156e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80156e8:	f04f 0000 	mov.w	r0, #0
 80156ec:	bd70      	pop	{r4, r5, r6, pc}
 80156ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80156f2:	bf06      	itte	eq
 80156f4:	4610      	moveq	r0, r2
 80156f6:	4619      	moveq	r1, r3
 80156f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80156fc:	d019      	beq.n	8015732 <__aeabi_dmul+0x24a>
 80156fe:	ea94 0f0c 	teq	r4, ip
 8015702:	d102      	bne.n	801570a <__aeabi_dmul+0x222>
 8015704:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8015708:	d113      	bne.n	8015732 <__aeabi_dmul+0x24a>
 801570a:	ea95 0f0c 	teq	r5, ip
 801570e:	d105      	bne.n	801571c <__aeabi_dmul+0x234>
 8015710:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8015714:	bf1c      	itt	ne
 8015716:	4610      	movne	r0, r2
 8015718:	4619      	movne	r1, r3
 801571a:	d10a      	bne.n	8015732 <__aeabi_dmul+0x24a>
 801571c:	ea81 0103 	eor.w	r1, r1, r3
 8015720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8015724:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8015728:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801572c:	f04f 0000 	mov.w	r0, #0
 8015730:	bd70      	pop	{r4, r5, r6, pc}
 8015732:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8015736:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 801573a:	bd70      	pop	{r4, r5, r6, pc}

0801573c <__aeabi_ddiv>:
 801573c:	b570      	push	{r4, r5, r6, lr}
 801573e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8015742:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8015746:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 801574a:	bf1d      	ittte	ne
 801574c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8015750:	ea94 0f0c 	teqne	r4, ip
 8015754:	ea95 0f0c 	teqne	r5, ip
 8015758:	f000 f8a7 	bleq	80158aa <__aeabi_ddiv+0x16e>
 801575c:	eba4 0405 	sub.w	r4, r4, r5
 8015760:	ea81 0e03 	eor.w	lr, r1, r3
 8015764:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8015768:	ea4f 3101 	mov.w	r1, r1, lsl #12
 801576c:	f000 8088 	beq.w	8015880 <__aeabi_ddiv+0x144>
 8015770:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8015774:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8015778:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 801577c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8015780:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8015784:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8015788:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 801578c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8015790:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8015794:	429d      	cmp	r5, r3
 8015796:	bf08      	it	eq
 8015798:	4296      	cmpeq	r6, r2
 801579a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 801579e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80157a2:	d202      	bcs.n	80157aa <__aeabi_ddiv+0x6e>
 80157a4:	085b      	lsrs	r3, r3, #1
 80157a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80157aa:	1ab6      	subs	r6, r6, r2
 80157ac:	eb65 0503 	sbc.w	r5, r5, r3
 80157b0:	085b      	lsrs	r3, r3, #1
 80157b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80157b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80157ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80157be:	ebb6 0e02 	subs.w	lr, r6, r2
 80157c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80157c6:	bf22      	ittt	cs
 80157c8:	1ab6      	subcs	r6, r6, r2
 80157ca:	4675      	movcs	r5, lr
 80157cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80157d0:	085b      	lsrs	r3, r3, #1
 80157d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80157d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80157da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80157de:	bf22      	ittt	cs
 80157e0:	1ab6      	subcs	r6, r6, r2
 80157e2:	4675      	movcs	r5, lr
 80157e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80157e8:	085b      	lsrs	r3, r3, #1
 80157ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80157ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80157f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80157f6:	bf22      	ittt	cs
 80157f8:	1ab6      	subcs	r6, r6, r2
 80157fa:	4675      	movcs	r5, lr
 80157fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8015800:	085b      	lsrs	r3, r3, #1
 8015802:	ea4f 0232 	mov.w	r2, r2, rrx
 8015806:	ebb6 0e02 	subs.w	lr, r6, r2
 801580a:	eb75 0e03 	sbcs.w	lr, r5, r3
 801580e:	bf22      	ittt	cs
 8015810:	1ab6      	subcs	r6, r6, r2
 8015812:	4675      	movcs	r5, lr
 8015814:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8015818:	ea55 0e06 	orrs.w	lr, r5, r6
 801581c:	d018      	beq.n	8015850 <__aeabi_ddiv+0x114>
 801581e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8015822:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8015826:	ea4f 1606 	mov.w	r6, r6, lsl #4
 801582a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 801582e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8015832:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8015836:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 801583a:	d1c0      	bne.n	80157be <__aeabi_ddiv+0x82>
 801583c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8015840:	d10b      	bne.n	801585a <__aeabi_ddiv+0x11e>
 8015842:	ea41 0100 	orr.w	r1, r1, r0
 8015846:	f04f 0000 	mov.w	r0, #0
 801584a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 801584e:	e7b6      	b.n	80157be <__aeabi_ddiv+0x82>
 8015850:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8015854:	bf04      	itt	eq
 8015856:	4301      	orreq	r1, r0
 8015858:	2000      	moveq	r0, #0
 801585a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 801585e:	bf88      	it	hi
 8015860:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8015864:	f63f aeaf 	bhi.w	80155c6 <__aeabi_dmul+0xde>
 8015868:	ebb5 0c03 	subs.w	ip, r5, r3
 801586c:	bf04      	itt	eq
 801586e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8015872:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8015876:	f150 0000 	adcs.w	r0, r0, #0
 801587a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 801587e:	bd70      	pop	{r4, r5, r6, pc}
 8015880:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8015884:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8015888:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 801588c:	bfc2      	ittt	gt
 801588e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8015892:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8015896:	bd70      	popgt	{r4, r5, r6, pc}
 8015898:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 801589c:	f04f 0e00 	mov.w	lr, #0
 80158a0:	3c01      	subs	r4, #1
 80158a2:	e690      	b.n	80155c6 <__aeabi_dmul+0xde>
 80158a4:	ea45 0e06 	orr.w	lr, r5, r6
 80158a8:	e68d      	b.n	80155c6 <__aeabi_dmul+0xde>
 80158aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80158ae:	ea94 0f0c 	teq	r4, ip
 80158b2:	bf08      	it	eq
 80158b4:	ea95 0f0c 	teqeq	r5, ip
 80158b8:	f43f af3b 	beq.w	8015732 <__aeabi_dmul+0x24a>
 80158bc:	ea94 0f0c 	teq	r4, ip
 80158c0:	d10a      	bne.n	80158d8 <__aeabi_ddiv+0x19c>
 80158c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80158c6:	f47f af34 	bne.w	8015732 <__aeabi_dmul+0x24a>
 80158ca:	ea95 0f0c 	teq	r5, ip
 80158ce:	f47f af25 	bne.w	801571c <__aeabi_dmul+0x234>
 80158d2:	4610      	mov	r0, r2
 80158d4:	4619      	mov	r1, r3
 80158d6:	e72c      	b.n	8015732 <__aeabi_dmul+0x24a>
 80158d8:	ea95 0f0c 	teq	r5, ip
 80158dc:	d106      	bne.n	80158ec <__aeabi_ddiv+0x1b0>
 80158de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80158e2:	f43f aefd 	beq.w	80156e0 <__aeabi_dmul+0x1f8>
 80158e6:	4610      	mov	r0, r2
 80158e8:	4619      	mov	r1, r3
 80158ea:	e722      	b.n	8015732 <__aeabi_dmul+0x24a>
 80158ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80158f0:	bf18      	it	ne
 80158f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80158f6:	f47f aec5 	bne.w	8015684 <__aeabi_dmul+0x19c>
 80158fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80158fe:	f47f af0d 	bne.w	801571c <__aeabi_dmul+0x234>
 8015902:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8015906:	f47f aeeb 	bne.w	80156e0 <__aeabi_dmul+0x1f8>
 801590a:	e712      	b.n	8015732 <__aeabi_dmul+0x24a>

0801590c <__aeabi_d2f>:
 801590c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8015910:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8015914:	bf24      	itt	cs
 8015916:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 801591a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 801591e:	d90d      	bls.n	801593c <__aeabi_d2f+0x30>
 8015920:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8015924:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8015928:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 801592c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8015930:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8015934:	bf08      	it	eq
 8015936:	f020 0001 	biceq.w	r0, r0, #1
 801593a:	4770      	bx	lr
 801593c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8015940:	d121      	bne.n	8015986 <__aeabi_d2f+0x7a>
 8015942:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8015946:	bfbc      	itt	lt
 8015948:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 801594c:	4770      	bxlt	lr
 801594e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8015952:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8015956:	f1c2 0218 	rsb	r2, r2, #24
 801595a:	f1c2 0c20 	rsb	ip, r2, #32
 801595e:	fa10 f30c 	lsls.w	r3, r0, ip
 8015962:	fa20 f002 	lsr.w	r0, r0, r2
 8015966:	bf18      	it	ne
 8015968:	f040 0001 	orrne.w	r0, r0, #1
 801596c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8015970:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8015974:	fa03 fc0c 	lsl.w	ip, r3, ip
 8015978:	ea40 000c 	orr.w	r0, r0, ip
 801597c:	fa23 f302 	lsr.w	r3, r3, r2
 8015980:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8015984:	e7cc      	b.n	8015920 <__aeabi_d2f+0x14>
 8015986:	ea7f 5362 	mvns.w	r3, r2, asr #21
 801598a:	d107      	bne.n	801599c <__aeabi_d2f+0x90>
 801598c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8015990:	bf1e      	ittt	ne
 8015992:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8015996:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 801599a:	4770      	bxne	lr
 801599c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80159a0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80159a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80159a8:	4770      	bx	lr
 80159aa:	bf00      	nop

080159ac <__aeabi_uldivmod>:
 80159ac:	b953      	cbnz	r3, 80159c4 <__aeabi_uldivmod+0x18>
 80159ae:	b94a      	cbnz	r2, 80159c4 <__aeabi_uldivmod+0x18>
 80159b0:	2900      	cmp	r1, #0
 80159b2:	bf08      	it	eq
 80159b4:	2800      	cmpeq	r0, #0
 80159b6:	bf1c      	itt	ne
 80159b8:	f04f 31ff 	movne.w	r1, #4294967295
 80159bc:	f04f 30ff 	movne.w	r0, #4294967295
 80159c0:	f000 b972 	b.w	8015ca8 <__aeabi_idiv0>
 80159c4:	f1ad 0c08 	sub.w	ip, sp, #8
 80159c8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80159cc:	f000 f806 	bl	80159dc <__udivmoddi4>
 80159d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80159d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80159d8:	b004      	add	sp, #16
 80159da:	4770      	bx	lr

080159dc <__udivmoddi4>:
 80159dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80159e0:	9e08      	ldr	r6, [sp, #32]
 80159e2:	4604      	mov	r4, r0
 80159e4:	4688      	mov	r8, r1
 80159e6:	2b00      	cmp	r3, #0
 80159e8:	d14b      	bne.n	8015a82 <__udivmoddi4+0xa6>
 80159ea:	428a      	cmp	r2, r1
 80159ec:	4615      	mov	r5, r2
 80159ee:	d967      	bls.n	8015ac0 <__udivmoddi4+0xe4>
 80159f0:	fab2 f282 	clz	r2, r2
 80159f4:	b14a      	cbz	r2, 8015a0a <__udivmoddi4+0x2e>
 80159f6:	f1c2 0720 	rsb	r7, r2, #32
 80159fa:	fa01 f302 	lsl.w	r3, r1, r2
 80159fe:	fa20 f707 	lsr.w	r7, r0, r7
 8015a02:	4095      	lsls	r5, r2
 8015a04:	ea47 0803 	orr.w	r8, r7, r3
 8015a08:	4094      	lsls	r4, r2
 8015a0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8015a0e:	0c23      	lsrs	r3, r4, #16
 8015a10:	fbb8 f7fe 	udiv	r7, r8, lr
 8015a14:	fa1f fc85 	uxth.w	ip, r5
 8015a18:	fb0e 8817 	mls	r8, lr, r7, r8
 8015a1c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8015a20:	fb07 f10c 	mul.w	r1, r7, ip
 8015a24:	4299      	cmp	r1, r3
 8015a26:	d909      	bls.n	8015a3c <__udivmoddi4+0x60>
 8015a28:	18eb      	adds	r3, r5, r3
 8015a2a:	f107 30ff 	add.w	r0, r7, #4294967295
 8015a2e:	f080 811b 	bcs.w	8015c68 <__udivmoddi4+0x28c>
 8015a32:	4299      	cmp	r1, r3
 8015a34:	f240 8118 	bls.w	8015c68 <__udivmoddi4+0x28c>
 8015a38:	3f02      	subs	r7, #2
 8015a3a:	442b      	add	r3, r5
 8015a3c:	1a5b      	subs	r3, r3, r1
 8015a3e:	b2a4      	uxth	r4, r4
 8015a40:	fbb3 f0fe 	udiv	r0, r3, lr
 8015a44:	fb0e 3310 	mls	r3, lr, r0, r3
 8015a48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8015a4c:	fb00 fc0c 	mul.w	ip, r0, ip
 8015a50:	45a4      	cmp	ip, r4
 8015a52:	d909      	bls.n	8015a68 <__udivmoddi4+0x8c>
 8015a54:	192c      	adds	r4, r5, r4
 8015a56:	f100 33ff 	add.w	r3, r0, #4294967295
 8015a5a:	f080 8107 	bcs.w	8015c6c <__udivmoddi4+0x290>
 8015a5e:	45a4      	cmp	ip, r4
 8015a60:	f240 8104 	bls.w	8015c6c <__udivmoddi4+0x290>
 8015a64:	3802      	subs	r0, #2
 8015a66:	442c      	add	r4, r5
 8015a68:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8015a6c:	eba4 040c 	sub.w	r4, r4, ip
 8015a70:	2700      	movs	r7, #0
 8015a72:	b11e      	cbz	r6, 8015a7c <__udivmoddi4+0xa0>
 8015a74:	40d4      	lsrs	r4, r2
 8015a76:	2300      	movs	r3, #0
 8015a78:	e9c6 4300 	strd	r4, r3, [r6]
 8015a7c:	4639      	mov	r1, r7
 8015a7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015a82:	428b      	cmp	r3, r1
 8015a84:	d909      	bls.n	8015a9a <__udivmoddi4+0xbe>
 8015a86:	2e00      	cmp	r6, #0
 8015a88:	f000 80eb 	beq.w	8015c62 <__udivmoddi4+0x286>
 8015a8c:	2700      	movs	r7, #0
 8015a8e:	e9c6 0100 	strd	r0, r1, [r6]
 8015a92:	4638      	mov	r0, r7
 8015a94:	4639      	mov	r1, r7
 8015a96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015a9a:	fab3 f783 	clz	r7, r3
 8015a9e:	2f00      	cmp	r7, #0
 8015aa0:	d147      	bne.n	8015b32 <__udivmoddi4+0x156>
 8015aa2:	428b      	cmp	r3, r1
 8015aa4:	d302      	bcc.n	8015aac <__udivmoddi4+0xd0>
 8015aa6:	4282      	cmp	r2, r0
 8015aa8:	f200 80fa 	bhi.w	8015ca0 <__udivmoddi4+0x2c4>
 8015aac:	1a84      	subs	r4, r0, r2
 8015aae:	eb61 0303 	sbc.w	r3, r1, r3
 8015ab2:	2001      	movs	r0, #1
 8015ab4:	4698      	mov	r8, r3
 8015ab6:	2e00      	cmp	r6, #0
 8015ab8:	d0e0      	beq.n	8015a7c <__udivmoddi4+0xa0>
 8015aba:	e9c6 4800 	strd	r4, r8, [r6]
 8015abe:	e7dd      	b.n	8015a7c <__udivmoddi4+0xa0>
 8015ac0:	b902      	cbnz	r2, 8015ac4 <__udivmoddi4+0xe8>
 8015ac2:	deff      	udf	#255	; 0xff
 8015ac4:	fab2 f282 	clz	r2, r2
 8015ac8:	2a00      	cmp	r2, #0
 8015aca:	f040 808f 	bne.w	8015bec <__udivmoddi4+0x210>
 8015ace:	1b49      	subs	r1, r1, r5
 8015ad0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8015ad4:	fa1f f885 	uxth.w	r8, r5
 8015ad8:	2701      	movs	r7, #1
 8015ada:	fbb1 fcfe 	udiv	ip, r1, lr
 8015ade:	0c23      	lsrs	r3, r4, #16
 8015ae0:	fb0e 111c 	mls	r1, lr, ip, r1
 8015ae4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8015ae8:	fb08 f10c 	mul.w	r1, r8, ip
 8015aec:	4299      	cmp	r1, r3
 8015aee:	d907      	bls.n	8015b00 <__udivmoddi4+0x124>
 8015af0:	18eb      	adds	r3, r5, r3
 8015af2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8015af6:	d202      	bcs.n	8015afe <__udivmoddi4+0x122>
 8015af8:	4299      	cmp	r1, r3
 8015afa:	f200 80cd 	bhi.w	8015c98 <__udivmoddi4+0x2bc>
 8015afe:	4684      	mov	ip, r0
 8015b00:	1a59      	subs	r1, r3, r1
 8015b02:	b2a3      	uxth	r3, r4
 8015b04:	fbb1 f0fe 	udiv	r0, r1, lr
 8015b08:	fb0e 1410 	mls	r4, lr, r0, r1
 8015b0c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8015b10:	fb08 f800 	mul.w	r8, r8, r0
 8015b14:	45a0      	cmp	r8, r4
 8015b16:	d907      	bls.n	8015b28 <__udivmoddi4+0x14c>
 8015b18:	192c      	adds	r4, r5, r4
 8015b1a:	f100 33ff 	add.w	r3, r0, #4294967295
 8015b1e:	d202      	bcs.n	8015b26 <__udivmoddi4+0x14a>
 8015b20:	45a0      	cmp	r8, r4
 8015b22:	f200 80b6 	bhi.w	8015c92 <__udivmoddi4+0x2b6>
 8015b26:	4618      	mov	r0, r3
 8015b28:	eba4 0408 	sub.w	r4, r4, r8
 8015b2c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8015b30:	e79f      	b.n	8015a72 <__udivmoddi4+0x96>
 8015b32:	f1c7 0c20 	rsb	ip, r7, #32
 8015b36:	40bb      	lsls	r3, r7
 8015b38:	fa22 fe0c 	lsr.w	lr, r2, ip
 8015b3c:	ea4e 0e03 	orr.w	lr, lr, r3
 8015b40:	fa01 f407 	lsl.w	r4, r1, r7
 8015b44:	fa20 f50c 	lsr.w	r5, r0, ip
 8015b48:	fa21 f30c 	lsr.w	r3, r1, ip
 8015b4c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8015b50:	4325      	orrs	r5, r4
 8015b52:	fbb3 f9f8 	udiv	r9, r3, r8
 8015b56:	0c2c      	lsrs	r4, r5, #16
 8015b58:	fb08 3319 	mls	r3, r8, r9, r3
 8015b5c:	fa1f fa8e 	uxth.w	sl, lr
 8015b60:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8015b64:	fb09 f40a 	mul.w	r4, r9, sl
 8015b68:	429c      	cmp	r4, r3
 8015b6a:	fa02 f207 	lsl.w	r2, r2, r7
 8015b6e:	fa00 f107 	lsl.w	r1, r0, r7
 8015b72:	d90b      	bls.n	8015b8c <__udivmoddi4+0x1b0>
 8015b74:	eb1e 0303 	adds.w	r3, lr, r3
 8015b78:	f109 30ff 	add.w	r0, r9, #4294967295
 8015b7c:	f080 8087 	bcs.w	8015c8e <__udivmoddi4+0x2b2>
 8015b80:	429c      	cmp	r4, r3
 8015b82:	f240 8084 	bls.w	8015c8e <__udivmoddi4+0x2b2>
 8015b86:	f1a9 0902 	sub.w	r9, r9, #2
 8015b8a:	4473      	add	r3, lr
 8015b8c:	1b1b      	subs	r3, r3, r4
 8015b8e:	b2ad      	uxth	r5, r5
 8015b90:	fbb3 f0f8 	udiv	r0, r3, r8
 8015b94:	fb08 3310 	mls	r3, r8, r0, r3
 8015b98:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8015b9c:	fb00 fa0a 	mul.w	sl, r0, sl
 8015ba0:	45a2      	cmp	sl, r4
 8015ba2:	d908      	bls.n	8015bb6 <__udivmoddi4+0x1da>
 8015ba4:	eb1e 0404 	adds.w	r4, lr, r4
 8015ba8:	f100 33ff 	add.w	r3, r0, #4294967295
 8015bac:	d26b      	bcs.n	8015c86 <__udivmoddi4+0x2aa>
 8015bae:	45a2      	cmp	sl, r4
 8015bb0:	d969      	bls.n	8015c86 <__udivmoddi4+0x2aa>
 8015bb2:	3802      	subs	r0, #2
 8015bb4:	4474      	add	r4, lr
 8015bb6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8015bba:	fba0 8902 	umull	r8, r9, r0, r2
 8015bbe:	eba4 040a 	sub.w	r4, r4, sl
 8015bc2:	454c      	cmp	r4, r9
 8015bc4:	46c2      	mov	sl, r8
 8015bc6:	464b      	mov	r3, r9
 8015bc8:	d354      	bcc.n	8015c74 <__udivmoddi4+0x298>
 8015bca:	d051      	beq.n	8015c70 <__udivmoddi4+0x294>
 8015bcc:	2e00      	cmp	r6, #0
 8015bce:	d069      	beq.n	8015ca4 <__udivmoddi4+0x2c8>
 8015bd0:	ebb1 050a 	subs.w	r5, r1, sl
 8015bd4:	eb64 0403 	sbc.w	r4, r4, r3
 8015bd8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8015bdc:	40fd      	lsrs	r5, r7
 8015bde:	40fc      	lsrs	r4, r7
 8015be0:	ea4c 0505 	orr.w	r5, ip, r5
 8015be4:	e9c6 5400 	strd	r5, r4, [r6]
 8015be8:	2700      	movs	r7, #0
 8015bea:	e747      	b.n	8015a7c <__udivmoddi4+0xa0>
 8015bec:	f1c2 0320 	rsb	r3, r2, #32
 8015bf0:	fa20 f703 	lsr.w	r7, r0, r3
 8015bf4:	4095      	lsls	r5, r2
 8015bf6:	fa01 f002 	lsl.w	r0, r1, r2
 8015bfa:	fa21 f303 	lsr.w	r3, r1, r3
 8015bfe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8015c02:	4338      	orrs	r0, r7
 8015c04:	0c01      	lsrs	r1, r0, #16
 8015c06:	fbb3 f7fe 	udiv	r7, r3, lr
 8015c0a:	fa1f f885 	uxth.w	r8, r5
 8015c0e:	fb0e 3317 	mls	r3, lr, r7, r3
 8015c12:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8015c16:	fb07 f308 	mul.w	r3, r7, r8
 8015c1a:	428b      	cmp	r3, r1
 8015c1c:	fa04 f402 	lsl.w	r4, r4, r2
 8015c20:	d907      	bls.n	8015c32 <__udivmoddi4+0x256>
 8015c22:	1869      	adds	r1, r5, r1
 8015c24:	f107 3cff 	add.w	ip, r7, #4294967295
 8015c28:	d22f      	bcs.n	8015c8a <__udivmoddi4+0x2ae>
 8015c2a:	428b      	cmp	r3, r1
 8015c2c:	d92d      	bls.n	8015c8a <__udivmoddi4+0x2ae>
 8015c2e:	3f02      	subs	r7, #2
 8015c30:	4429      	add	r1, r5
 8015c32:	1acb      	subs	r3, r1, r3
 8015c34:	b281      	uxth	r1, r0
 8015c36:	fbb3 f0fe 	udiv	r0, r3, lr
 8015c3a:	fb0e 3310 	mls	r3, lr, r0, r3
 8015c3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8015c42:	fb00 f308 	mul.w	r3, r0, r8
 8015c46:	428b      	cmp	r3, r1
 8015c48:	d907      	bls.n	8015c5a <__udivmoddi4+0x27e>
 8015c4a:	1869      	adds	r1, r5, r1
 8015c4c:	f100 3cff 	add.w	ip, r0, #4294967295
 8015c50:	d217      	bcs.n	8015c82 <__udivmoddi4+0x2a6>
 8015c52:	428b      	cmp	r3, r1
 8015c54:	d915      	bls.n	8015c82 <__udivmoddi4+0x2a6>
 8015c56:	3802      	subs	r0, #2
 8015c58:	4429      	add	r1, r5
 8015c5a:	1ac9      	subs	r1, r1, r3
 8015c5c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8015c60:	e73b      	b.n	8015ada <__udivmoddi4+0xfe>
 8015c62:	4637      	mov	r7, r6
 8015c64:	4630      	mov	r0, r6
 8015c66:	e709      	b.n	8015a7c <__udivmoddi4+0xa0>
 8015c68:	4607      	mov	r7, r0
 8015c6a:	e6e7      	b.n	8015a3c <__udivmoddi4+0x60>
 8015c6c:	4618      	mov	r0, r3
 8015c6e:	e6fb      	b.n	8015a68 <__udivmoddi4+0x8c>
 8015c70:	4541      	cmp	r1, r8
 8015c72:	d2ab      	bcs.n	8015bcc <__udivmoddi4+0x1f0>
 8015c74:	ebb8 0a02 	subs.w	sl, r8, r2
 8015c78:	eb69 020e 	sbc.w	r2, r9, lr
 8015c7c:	3801      	subs	r0, #1
 8015c7e:	4613      	mov	r3, r2
 8015c80:	e7a4      	b.n	8015bcc <__udivmoddi4+0x1f0>
 8015c82:	4660      	mov	r0, ip
 8015c84:	e7e9      	b.n	8015c5a <__udivmoddi4+0x27e>
 8015c86:	4618      	mov	r0, r3
 8015c88:	e795      	b.n	8015bb6 <__udivmoddi4+0x1da>
 8015c8a:	4667      	mov	r7, ip
 8015c8c:	e7d1      	b.n	8015c32 <__udivmoddi4+0x256>
 8015c8e:	4681      	mov	r9, r0
 8015c90:	e77c      	b.n	8015b8c <__udivmoddi4+0x1b0>
 8015c92:	3802      	subs	r0, #2
 8015c94:	442c      	add	r4, r5
 8015c96:	e747      	b.n	8015b28 <__udivmoddi4+0x14c>
 8015c98:	f1ac 0c02 	sub.w	ip, ip, #2
 8015c9c:	442b      	add	r3, r5
 8015c9e:	e72f      	b.n	8015b00 <__udivmoddi4+0x124>
 8015ca0:	4638      	mov	r0, r7
 8015ca2:	e708      	b.n	8015ab6 <__udivmoddi4+0xda>
 8015ca4:	4637      	mov	r7, r6
 8015ca6:	e6e9      	b.n	8015a7c <__udivmoddi4+0xa0>

08015ca8 <__aeabi_idiv0>:
 8015ca8:	4770      	bx	lr
 8015caa:	bf00      	nop

08015cac <__aeabi_memcpy>:
 8015cac:	f7f8 b956 	b.w	800df5c <memcpy>

08015cb0 <APBPrescTable>:
 8015cb0:	0000 0000 0201 0403 454e 2054 6166 6c69     ........NET fail
 8015cc0:	4d54 2050 6166 6c69 5047 2053 6166 6c69     TMP failGPS fail
 8015cd0:	4547 2054 6166 6c69 5552 204e 6166 6c69     GET failRUN fail
 8015ce0:	6170 696e 2063 6f6e 6c20 636f 610a 2074     panic no loc.at 
 8015cf0:	6c20 6e69 2065 730a 7274 206e 7962 6574      line .strn byte
 8015d00:	7273 7375 5c74 796d 656e 7477 735c 6372     srust\mynewt\src
 8015d10:	655c 636e 646f 6e69 5c67 6f63 7061 635f     \encoding\coap_c
 8015d20:	6e6f 6574 7478 722e 0073 0000 5cf7 0801     ontext.rs....\..
 8015d30:	000a 0000 5d01 0801 0028 0000 00ef 0000     .....]..(.......
 8015d40:	0028 0000 0000 0000 5d44 0801 7361 6573     (.......D]..asse
 8015d50:	7472 6f69 206e 6166 6c69 6465 203a 2860     rtion failed: `(
 8015d60:	656c 7466 3d20 203d 6972 6867 2974 0a60     left == right)`.
 8015d70:	2020 656c 7466 203a 6060 0a2c 7220 6769       left: ``,. rig
 8015d80:	7468 203a 6060 203a 5d4c 0801 002d 0000     ht: ``: L]..-...
 8015d90:	5d79 0801 000c 0000 5d85 0801 0003 0000     y].......]......
 8015da0:	6f6e 6e20 6c75 006c 5da0 0801 0007 0000     no null..]......
 8015db0:	7572 7473 6d5c 6e79 7765 5c74 7273 5c63     rust\mynewt\src\
 8015dc0:	696c 2e62 7372 0000 5db0 0801 0016 0000     lib.rs...]......
 8015dd0:	007a 0000 0009 0000 0000 0000 0000 0000     z...............

08015de0 <str.0>:
 8015de0:	7572 7473 6d5c 6e79 7765 5c74 7273 5c63     rust\mynewt\src\
 8015df0:	696c 2e62 7372 0000 0000 0000 0000 0000     lib.rs..........

08015e00 <str.1>:
 8015e00:	7461 6574 706d 2074 6f74 6120 6464 7720     attempt to add w
 8015e10:	7469 2068 766f 7265 6c66 776f 5e00 0801     ith overflow.^..
 8015e20:	001c 0000 5de0 0801 0016 0000 009a 0000     .....]..........
 8015e30:	002b 0000 6962 2067 7473 6e72 5e34 0801     +...big strn4^..
 8015e40:	0008 0000 5db0 0801 0016 0000 009d 0000     .....]..........
 8015e50:	0011 0000 5db0 0801 0016 0000 0093 0000     .....]..........
 8015e60:	0011 0000 0000 0000 0000 0000 0000 0000     ................

08015e70 <str.2>:
 8015e70:	7461 6574 706d 2074 6f74 7320 6275 7274     attempt to subtr
 8015e80:	6361 2074 6977 6874 6f20 6576 6672 6f6c     act with overflo
 8015e90:	0077 0000 5e70 0801 0021 0000 5de0 0801     w...p^..!....]..
 8015ea0:	0016 0000 0094 0000 0011 0000 5db0 0801     .............]..
 8015eb0:	0016 0000 00c7 0000 0011 0000 6f53 656d     ............Some
 8015ec0:	6f4e 656e 6e29 0800 0004 0000 0004 0000     None)n..........
 8015ed0:	4ba1 0800 5953 5f53 5045 5245 5355 5245     .K..SYS_EPERUSER
 8015ee0:	5953 5f53 4445 4e4f 5345 5359 455f 4552     SYS_EDONESYS_ERE
 8015ef0:	4f4d 4554 4f49 5953 5f53 5545 4b4e 4f4e     MOTEIOSYS_EUNKNO
 8015f00:	4e57 5953 5f53 4e45 544f 5553 5350 5359     WNSYS_ENOTSUPSYS
 8015f10:	455f 4c41 4552 4441 5359 5359 455f 4152     _EALREADYSYS_ERA
 8015f20:	474e 5345 5359 455f 4f4e 4544 5356 5359     NGESYS_ENODEVSYS
 8015f30:	455f 5542 5953 5953 5f53 4145 4343 5345     _EBUSYSYS_EACCES
 8015f40:	5953 5f53 4145 4147 4e49 5953 5f53 4945     SYS_EAGAINSYS_EI
 8015f50:	534f 5359 455f 4f4e 4e45 5354 5359 455f     OSYS_ENOENTSYS_E
 8015f60:	4954 454d 554f 5354 5359 455f 4e49 4156     TIMEOUTSYS_EINVA
 8015f70:	534c 5359 455f 4f4e 454d 534d 5359 455f     LSYS_ENOMEMSYS_E
 8015f80:	4b4f 0000 0000 0000 0000 0000 0000 0000     OK..............

08015f90 <str.0>:
 8015f90:	722f 7375 6374 302f 6533 3565 6235 3162     /rustc/03ee55bb1
 8015fa0:	3863 3263 3733 6639 6164 6662 3836 3365     c8c2379fdabf68e3
 8015fb0:	3630 3831 6236 3933 3430 3434 3666 2f31     06186b390444f61/
 8015fc0:	7273 2f63 696c 6362 726f 2f65 6c73 6369     src/libcore/slic
 8015fd0:	2f65 6f6d 2e64 7372 0000 0000 0000 0000     e/mod.rs........

08015fe0 <str.1>:
 8015fe0:	7461 6574 706d 2074 6f74 6320 6c61 7563     attempt to calcu
 8015ff0:	616c 6574 7420 6568 7220 6d65 6961 646e     late the remaind
 8016000:	7265 7720 7469 2068 2061 6964 6976 6f73     er with a diviso
 8016010:	2072 666f 7a20 7265 006f 0000 5fe0 0801     r of zero...._..
 8016020:	0039 0000 5f90 0801 0048 0000 1454 0000     9...._..H...T...
 8016030:	0013 0000 7461 6574 706d 2074 6f74 6320     ....attempt to c
 8016040:	6572 7461 2065 6e75 6c61 6769 656e 2064     reate unaligned 
 8016050:	6c73 6369 7365 6372 6c2f 6269 6f63 6572     slicesrc/libcore
 8016060:	732f 696c 6563 6d2f 646f 722e 0073 0000     /slice/mod.rs...
 8016070:	6034 0801 0021 0000 6055 0801 0018 0000     4`..!...U`......
 8016080:	1454 0000 0005 0000 7461 6574 706d 2074     T.......attempt 
 8016090:	6f74 6320 6572 7461 2065 6c73 6369 2065     to create slice 
 80160a0:	6f63 6576 6972 676e 6820 6c61 2066 6874     covering half th
 80160b0:	2065 6461 7264 7365 2073 7073 6361 0065     e address space.
 80160c0:	6088 0801 0037 0000 6055 0801 0018 0000     .`..7...U`......
 80160d0:	1455 0000 0005 0000 7361 6573 7472 6f69     U.......assertio
 80160e0:	206e 6166 6c69 6465 203a 2860 656c 7466     n failed: `(left
 80160f0:	3d20 203d 6972 6867 2974 0a60 2020 656c      == right)`.  le
 8016100:	7466 203a 6060 0a2c 7220 6769 7468 203a     ft: ``,. right: 
 8016110:	6060 203a 60d8 0801 002d 0000 6105 0801     ``: .`..-....a..
 8016120:	000c 0000 6111 0801 0003 0000 6564 7473     .....a......dest
 8016130:	6e69 7461 6f69 206e 6e61 2064 6f73 7275     ination and sour
 8016140:	6563 7320 696c 6563 2073 6168 6576 6420     ce slices have d
 8016150:	6669 6566 6572 746e 6c20 6e65 7467 7368     ifferent lengths
 8016160:	612c 0801 0034 0000 6055 0801 0018 0000     ,a..4...U`......
 8016170:	084b 0000 0009 0000 7067 5f73 376c 7230     K.......gps_l70r
 8016180:	305f 0000                                   _0..

08016184 <_ZN3app10gps_sensor10GPS_DEVICE17h5c1dc9ec84221b48E>:
 8016184:	0000 0000 6178 0801 000b 0000 7552 7473     ....xa......Rust
 8016194:	4720 5350 7020 6c6f 0a6c 6f6e 4720 5350      GPS poll.no GPS
 80161a4:	6567 006f 0000 0000 61a4 0801 0004 0000     geo......a......
 80161b4:	6574 706d 735f 6d74 3233 305f 0000 0000     temp_stm32_0....

080161c4 <_ZN3app10app_sensor13SENSOR_DEVICE17h54c19c743b889826E>:
 80161c4:	0000 0000 61b4 0801 000d 0000 7552 7473     .....a......Rust
 80161d4:	5420 504d 7020 6c6f 0a6c 6f6e 5420 504d      TMP poll.no TMP
 80161e4:	0074 0000 0000 0000 61e4 0801 0002 0000     t........a......
 80161f4:	7552 7473 7320 6e65 5f64 6573 736e 726f     Rust send_sensor
 8016204:	645f 7461 0a61 7600 6c61 6575 0073 4f43     _data..values.CO
 8016214:	5041 435f 4e4f 4554 5458 6b00 7965 6176     AP_CONTEXT.keyva
 8016224:	756c 6c65 7461 6b00 7965 6c00 6e6f 0067     luelat.key.long.
 8016234:	6564 6976 6563 7600 6c61 6575 4e00 5445     device.value.NET
 8016244:	7620 6569 2077 6f79 7275 7320 6e65 6f73      view your senso
 8016254:	2072 7461 0a20 7468 7074 3a73 2f2f 6c62     r at .https://bl
 8016264:	6575 702d 6c69 2d6c 6567 6c6f 636f 7461     ue-pill-geolocat
 8016274:	2e65 7061 7370 6f70 2e74 6f63 3f6d 6564     e.appspot.com?de
 8016284:	6976 6563 0a3d 7361 6573 7472 6f69 206e     vice=.assertion 
 8016294:	6166 6c69 6465 203a 6372 3d20 203d 7230     failed: rc == 0r
 80162a4:	7375 5c74 796d 656e 7477 735c 6372 655c     ust\mynewt\src\e
 80162b4:	636e 646f 6e69 5c67 6f63 7061 635f 6e6f     ncoding\coap_con
 80162c4:	6574 7478 722e 0073 628a 0801 0019 0000     text.rs..b......
 80162d4:	62a3 0801 0028 0000 0032 0000 000d 0000     .b..(...2.......
 80162e4:	628a 0801 0019 0000 62a3 0801 0028 0000     .b.......b..(...
 80162f4:	0036 0000 000d 0000 628a 0801 0019 0000     6........b......
 8016304:	62a3 0801 0028 0000 0040 0000 000d 0000     .b..(...@.......
 8016314:	0000 0000 6314 0801 6962 2067 656b 0079     .....c..big key.
 8016324:	631c 0801 0007 0000 62a3 0801 0028 0000     .c.......b..(...
 8016334:	0070 0000 0009 0000 0000 0000               p...........

08016340 <str.0>:
 8016340:	7572 7473 6d5c 6e79 7765 5c74 7273 5c63     rust\mynewt\src\
 8016350:	6e65 6f63 6964 676e 635c 616f 5f70 6f63     encoding\coap_co
 8016360:	746e 7865 2e74 7372 6340 0801 0028 0000     ntext.rs@c..(...
 8016370:	0072 0000 0009 0000 6962 2067 6176 756c     r.......big valu
 8016380:	0065 0000 6378 0801 0009 0000 62a3 0801     e...xc.......b..
 8016390:	0028 0000 007d 0000 0009 0000 6340 0801     (...}.......@c..
 80163a0:	0028 0000 007f 0000 0009 0000 7361 6573     (...........asse
 80163b0:	7472 6f69 206e 6166 6c69 6465 203a 2860     rtion failed: `(
 80163c0:	656c 7466 3d20 203d 6972 6867 2974 0a60     left == right)`.
 80163d0:	2020 656c 7466 203a 6060 0a2c 7220 6769       left: ``,. rig
 80163e0:	7468 203a 6060 203a 63ac 0801 002d 0000     ht: ``: .c..-...
 80163f0:	63d9 0801 000c 0000 63e5 0801 0003 0000     .c.......c......
 8016400:	6e65 2063 6166 6c69 6400 0801 0008 0000     enc fail.d......
 8016410:	62a3 0801 0028 0000 00b0 0000 0009 0000     .b..(...........
 8016420:	4156 554c 5f45 4f4e 5f54 4955 544e 4b4f     VALUE_NOT_UINTOK
 8016430:	6966 646e 7320 6e65 6f73 7372 6e65 6f73     find sensorsenso
 8016440:	2072 7974 6570 7572 7473 6d5c 6e79 7765     r typerust\mynew
 8016450:	5c74 7273 5c63 7768 735c 6e65 6f73 2e72     t\src\hw\sensor.
 8016460:	7372 0000 643b 0801 000b 0000 6446 0801     rs..;d......Fd..
 8016470:	001c 0000 003c 0000 0014 0000 0000 0000     ....<...........
 8016480:	7361 6573 7472 6f69 206e 6166 6c69 6465     assertion failed
 8016490:	203a 2860 656c 7466 3d20 203d 6972 6867     : `(left == righ
 80164a0:	2974 0a60 2020 656c 7466 203a 6060 0a2c     t)`.  left: ``,.
 80164b0:	7220 6769 7468 203a 6060 203a 6480 0801      right: ``: .d..
 80164c0:	002d 0000 64ad 0801 000c 0000 64b9 0801     -....d.......d..
 80164d0:	0003 0000 6567 646f 7461 2061 6166 6c69     ....geodata fail
 80164e0:	64d4 0801 000c 0000 6446 0801 001c 0000     .d......Fd......
 80164f0:	002e 0000 0011 0000 6172 7477 706d 6620     ........rawtmp f
 8016500:	6961 006c 64f8 0801 000b 0000 6446 0801     ail..d......Fd..
 8016510:	001c 0000 0024 0000 0011 0000 6100 7373     ....$........ass
 8016520:	7265 6974 6e6f 6620 6961 656c 3a64 6020     ertion failed: `
 8016530:	6c28 6665 2074 3d21 7220 6769 7468 6029     (left != right)`
 8016540:	200a 6c20 6665 3a74 6020 0000 651d 0801     .  left: `...e..
 8016550:	002d 0000 64ad 0801 000c 0000 64b9 0801     -....d.......d..
 8016560:	0003 0000 6162 2064 6172 7477 706d 0000     ....bad rawtmp..
 8016570:	6564 0801 000a 0000 6446 0801 001c 0000     de......Fd......
 8016580:	0026 0000 0011 0000 0000 0000 0000 0000     &...............

08016590 <str.0>:
 8016590:	7572 7473 6d5c 6e79 7765 5c74 7273 5c63     rust\mynewt\src\
 80165a0:	7768 735c 6e65 6f73 2e72 7372 0000 0000     hw\sensor.rs....

080165b0 <str.1>:
 80165b0:	7461 6574 706d 2074 6f74 6120 6464 7720     attempt to add w
 80165c0:	7469 2068 766f 7265 6c66 776f 65b0 0801     ith overflow.e..
 80165d0:	001c 0000 6590 0801 001c 0000 004b 0000     .....e......K...
 80165e0:	0013 0000 6590 0801 001c 0000 004e 0000     .....e......N...
 80165f0:	001d 0000 6590 0801 001c 0000 0059 0000     .....e......Y...
 8016600:	0038 0000 0000 0000 0000 0000 0000 0000     8...............
 8016610:	6572 2067 696c 0073 6610 0801 0007 0000     reg lis..f......
 8016620:	6446 0801 001c 0000 005d 0000 0012 0000     Fd......].......
 8016630:	696d 7373 6e69 2067 6573 736e 726f 6b20     missing sensor k
 8016640:	7965 0000 6630 0801 0012 0000 6446 0801     ey..0f......Fd..
 8016650:	001c 0000 006f 0000 0005 0000 65b0 0801     ....o........e..
 8016660:	001c 0000 6590 0801 001c 0000 0071 0000     .....e......q...
 8016670:	0013 0000 6590 0801 001c 0000 0073 0000     .....e......s...
 8016680:	001d 0000 6e69 7263 6165 6573 4d20 5841     ....increase MAX
 8016690:	535f 4e45 4f53 5f52 494c 5453 4e45 5245     _SENSOR_LISTENER
 80166a0:	0053 0000 6684 0801 001d 0000 6446 0801     S....f......Fd..
 80166b0:	001c 0000 0079 0000 0005 0000 6590 0801     ....y........e..
 80166c0:	001c 0000 0082 0000 000e 0000 6162 2064     ............bad 
 80166d0:	6573 736e 726f 6120 6772 0000 66cc 0801     sensor arg...f..
 80166e0:	000e 0000 6446 0801 001c 0000 0095 0000     ....Fd..........
 80166f0:	0005 0000 6590 0801 001c 0000 0096 0000     .....e..........
 8016700:	0019 0000 6630 0801 0012 0000 6446 0801     ....0f......Fd..
 8016710:	001c 0000 0097 0000 0005 0000 756e 6c6c     ............null
 8016720:	7320 6e65 6f73 0072 671c 0801 000b 0000      sensor..g......
 8016730:	6446 0801 001c 0000 009b 0000 0005 0000     Fd..............
 8016740:	203a 0000 6740 0801 0000 0000 6740 0801     : ..@g......@g..
 8016750:	0002 0000 7273 2f63 696c 6362 726f 2f65     ....src/libcore/
 8016760:	6572 7573 746c 722e 0073 0000 6754 0801     result.rs...Tg..
 8016770:	0015 0000 03e7 0000 0005 0000 0060 0000     ............`...
 8016780:	7273 2f63 696c 6362 726f 2f65 756e 2f6d     src/libcore/num/
 8016790:	6564 3263 6c66 2f74 6172 6677 2e70 7372     dec2flt/rawfp.rs
 80167a0:	6e69 6564 2078 756f 2074 666f 6220 756f     index out of bou
 80167b0:	646e 3a73 7420 6568 6c20 6e65 6920 2073     nds: the len is 
 80167c0:	3e00 0000 0001 0000 0000 0000 0000 0000     .>..............
 80167d0:	0020 0000 0000 0000 c000 0000 0300 0000      ...............
 80167e0:	2e2e 0000 67e0 0801 0002 0000 0000 0000     .....g..........
 80167f0:	6c61 6572 6461 2079 6f62 7272 776f 6465     already borrowed
 8016800:	2029 6877 6e65 7320 696c 6963 676e 6020     ) when slicing `
 8016810:	ffff ffff 0000 0000 0000 0000 0000 8000     ................
 8016820:	6843 7261 7254 4679 6f72 456d 7272 726f     CharTryFromError
 8016830:	6544 6f63 6564 7455 3166 4536 7272 726f     DecodeUtf16Error
 8016840:	861d 0800 0000 0000 0001 0000 866d 0800     ............m...
 8016850:	6220 7475 7420 6568 6920 646e 7865 6920      but the index i
 8016860:	2073 0000 67a0 0801 0020 0000 6850 0801     s ...g.. ...Ph..
 8016870:	0012 0000 7469 7265 7449 7265 3c20 203d     ....iterIter <= 
 8016880:	2020 2020 7274 6575 6164 6174 616d 746e         truedatamant
 8016890:	6c70 7375 655a 6f72 6f43 7970 696b 646e     plusZeroCopykind
 80168a0:	654c 7373 6f63 6564 7954 6570 6f44 656e     LesscodeTypeDone
 80168b0:	6843 7261 6966 656c 696c 656e 6142 6b63     CharfilelineBack
 80168c0:	6f42 6874 7449 6d65 6174 6c69 654c 7466     BothItemtailLeft
 80168d0:	6177 656b 7264 706f 3875 3278 3869 3278     wakedropu8x2i8x2
 80168e0:	3875 3478 3869 3478 3875 3878 3869 3878     u8x4i8x4u8x8i8x8
 80168f0:	6163 6c6c 6465 6020 704f 6974 6e6f 3a3a     called `Option::
 8016900:	6e75 7277 7061 2928 2060 6e6f 6120 6020     unwrap()` on a `
 8016910:	6f4e 656e 2060 6176 756c 7365 6372 6c2f     None` valuesrc/l
 8016920:	6269 6f63 6572 6f2f 7470 6f69 2e6e 7372     ibcore/option.rs
 8016930:	68f0 0801 002b 0000 691b 0801 0015 0000     .h..+....i......
 8016940:	015b 0000 0015 0000 6780 0801 0000 0000     [........g......
 8016950:	691b 0801 0015 0000 040c 0000 0005 0000     .i..............
 8016960:	7273 2f63 696c 6362 726f 2f65 6c73 6369     src/libcore/slic
 8016970:	2f65 6f6d 2e64 7372 6e69 6564 2078 6f20     e/mod.rsindex  o
 8016980:	7475 6f20 2066 6172 676e 2065 6f66 2072     ut of range for 
 8016990:	6c73 6369 2065 666f 6c20 6e65 7467 2068     slice of length 
 80169a0:	6978 0801 0006 0000 697e 0801 0022 0000     xi......~i.."...
 80169b0:	6960 0801 0018 0000 0a09 0000 0005 0000     `i..............
 80169c0:	6c73 6369 2065 6e69 6564 2078 7473 7261     slice index star
 80169d0:	7374 6120 2074 6220 7475 6520 646e 2073     ts at  but ends 
 80169e0:	7461 0020 69c0 0801 0016 0000 69d6 0801     at ..i.......i..
 80169f0:	000d 0000 6960 0801 0018 0000 0a0f 0000     ....`i..........
 8016a00:	0005 0000 6966 696e 6873 6465 6168 7379     ....finishedhays
 8016a10:	6174 6b63 2820 7962 6574 2073 6e49 6966     tack (bytes Infi
 8016a20:	696e 6574 694d 756e 5273 7761 654e 6167     niteMinusRawNega
 8016a30:	6974 6576 6f50 6973 6974 6576 6e69 6574     tivePositiveinte
 8016a40:	7267 6c61 764f 7265 6c66 776f 6f6c 6163     gralOverflowloca
 8016a50:	6974 6e6f 6f4c 6163 6974 6e6f 6162 6b63     tionLocationback
 8016a60:	7469 7265 6e49 6f74 7449 7265 6573 7261     iterIntoItersear
 8016a70:	6863 7265 6f70 6973 6974 6e6f 7263 7469     cherpositioncrit
 8016a80:	705f 736f 694c 656e 4173 796e 6152 5777     _posLinesAnyRawW
 8016a90:	6b61 7265 6c41 6f6c 4563 7272 6e69 3874     akerAllocErrint8
 8016aa0:	3478 745f 6e55 6170 6b63 6465 7273 2f63     x4_tUnpackedsrc/
 8016ab0:	696c 6362 726f 2f65 7473 2f72 6f6d 2e64     libcore/str/mod.
 8016ac0:	7372 2e5b 2e2e 625d 7479 2065 6e69 6564     rs[...]byte inde
 8016ad0:	2078 6920 2073 756f 2074 666f 6220 756f     x  is out of bou
 8016ae0:	646e 2073 666f 6020 6ac7 0801 000b 0000     nds of `.j......
 8016af0:	6ad2 0801 0016 0000 677c 0801 0001 0000     .j......|g......
 8016b00:	6aac 0801 0016 0000 07e1 0000 0009 0000     .j..............
 8016b10:	6562 6967 206e 3d3c 6520 646e 2820 0000     begin <= end (..
 8016b20:	6b10 0801 000e 0000 687c 0801 0004 0000     .k......|h......
 8016b30:	6800 0801 0010 0000 677c 0801 0001 0000     .h......|g......
 8016b40:	6aac 0801 0016 0000 07e5 0000 0005 0000     .j..............
 8016b50:	6920 2073 6f6e 2074 2061 6863 7261 6220      is not a char b
 8016b60:	756f 646e 7261 3b79 6920 2074 7369 6920     oundary; it is i
 8016b70:	736e 6469 2065 2029 666f 6020 6ac7 0801     nside ) of `.j..
 8016b80:	000b 0000 6b50 0801 0026 0000 6a14 0801     ....Pk..&....j..
 8016b90:	0008 0000 6b76 0801 0006 0000 677c 0801     ....vk......|g..
 8016ba0:	0001 0000 6aac 0801 0016 0000 07f2 0000     .....j..........
 8016bb0:	0005 0000 7830 3030 3130 3230 3330 3430     ....0x0001020304
 8016bc0:	3530 3630 3730 3830 3930 3031 3131 3231     0506070809101112
 8016bd0:	3331 3431 3531 3631 3731 3831 3931 3032     1314151617181920
 8016be0:	3132 3232 3332 3432 3532 3632 3732 3832     2122232425262728
 8016bf0:	3932 3033 3133 3233 3333 3433 3533 3633     2930313233343536
 8016c00:	3733 3833 3933 3034 3134 3234 3334 3434     3738394041424344
 8016c10:	3534 3634 3734 3834 3934 3035 3135 3235     4546474849505152
 8016c20:	3335 3435 3535 3635 3735 3835 3935 3036     5354555657585960
 8016c30:	3136 3236 3336 3436 3536 3636 3736 3836     6162636465666768
 8016c40:	3936 3037 3137 3237 3337 3437 3537 3637     6970717273747576
 8016c50:	3737 3837 3937 3038 3138 3238 3338 3438     7778798081828384
 8016c60:	3538 3638 3738 3838 3938 3039 3139 3239     8586878889909192
 8016c70:	3339 3439 3539 3639 3739 3839 3939 0000     93949596979899..
 8016c80:	861b 0800 000c 0000 0004 0000 8cff 0800     ................
 8016c90:	8f8f 0800 9025 0800 0a2c 202c 0a28 2c28     ....%...,., (.(,
 8016ca0:	0029 0000 8619 0800 0004 0000 0004 0000     )...............
 8016cb0:	9049 0800 904f 0800 9055 0800 0000 0000     I...O...U.......

08016cc0 <str.h>:
 8016cc0:	7273 2f63 696c 6362 726f 2f65 6d66 2f74     src/libcore/fmt/
 8016cd0:	6f6d 2e64 7372 0000 6cc0 0801 0016 0000     mod.rs...l......
 8016ce0:	0448 0000 0028 0000 6cc0 0801 0016 0000     H...(....l......
 8016cf0:	0454 0000 0011 0000 0000 0000 0000 0000     T...............

08016d00 <str.j>:
 8016d00:	7273 2f63 696c 6362 726f 2f65 6e75 6369     src/libcore/unic
 8016d10:	646f 2f65 6f62 6c6f 745f 6972 2e65 7372     ode/bool_trie.rs
 8016d20:	6d00 0801 0020 0000 0027 0000 0019 0000     .m.. ...'.......
 8016d30:	6d00 0801 0020 0000 0028 0000 0020 0000     .m.. ...(... ...
 8016d40:	6d00 0801 0020 0000 002a 0000 0019 0000     .m.. ...*.......
 8016d50:	6d00 0801 0020 0000 002b 0000 0018 0000     .m.. ...+.......
 8016d60:	6d00 0801 0020 0000 002c 0000 0020 0000     .m.. ...,... ...
 8016d70:	0100 0503 0605 0306 0607 0808 1109 1c0a     ................
 8016d80:	190b 140c 120d 160e 040f 0310 1212 0913     ................
 8016d90:	0116 0517 0218 0319 071a 021c 011d 161f     ................
 8016da0:	0320 062b 022c 0b2d 012e 0330 0231 0232      .+.,.-...0.1.2.
 8016db0:	02a9 04aa 08ab 02fa 05fb 04fd 03fe 09ff     ................
 8016dc0:	78ad 8b79 a28d 5730 8b58 908c 1d1c 0edd     .xy...0WX.......
 8016dd0:	4b0f fb4c 2efc 3f2f 5d5c b55f 84e2 8e8d     .KL.../?\]_.....
 8016de0:	9291 b1a9 bbba c6c5 cac9 e4de ffe5 0400     ................
 8016df0:	1211 3129 3734 3b3a 493d 5d4a 8e84 a992     ..)147:;=IJ]....
 8016e00:	b4b1 bbba cac6 cfce e5e4 0400 0e0d 1211     ................
 8016e10:	3129 3a34 453b 4946 5e4a 6564 9184 9d9b     )14:;EFIJ^de....
 8016e20:	cec9 0dcf 2911 4945 6457 8d65 a991 bab4     .....)EIWde.....
 8016e30:	c5bb dfc9 e5e4 04f0 110d 4945 6564 8180     ..........EIde..
 8016e40:	b284 bebc d5bf f0d7 83f1 8685 8b89 988c     ................
 8016e50:	a4a0 a8a6 aca9 beba c5bf cec7 dacf 48db     ...............H
 8016e60:	bd98 c6cd cfce 4e49 574f 5e59 895f 8f8e     ......INOWY^_...
 8016e70:	b6b1 bfb7 c6c1 d7c7 1611 5b17 f65c fef7     ...........[\...
 8016e80:	80ff 6d0d de71 0edf 1f0f 6f6e 1d1c 7d5f     ...mq.....no.._}
 8016e90:	ae7e bbaf fabc 1716 1f1e 4746 4f4e 5a58     ~.........FGNOXZ
 8016ea0:	5e5c 7f7e c5b5 d5d4 f0dc f5f1 7372 748f     \^~.........rs.t
 8016eb0:	9675 c997 2fff 265f 2f2e afa7 bfb7 cfc7     u..../_&./......
 8016ec0:	dfd7 409a 9897 8f30 ff1f ffce 4f4e 5b5a     ...@..0.....NOZ[
 8016ed0:	0807 100f 2f27 efee 6f6e 3d37 423f 9045     ....'/..no7=?BE.
 8016ee0:	fe91 53ff 7567 c9c8 d1d0 d9d8 fee7 00ff     ...Sgu..........
 8016ef0:	5f20 8222 04df 4482 1b08 0604 8111 0eac      _"....D........
 8016f00:	ab80 1e35 8015 03e0 0819 0401 042f 0434     ..5........./.4.
 8016f10:	0307 0701 0706 0a11 0f50 0712 0855 0402     ........P...U...
 8016f20:	0a1c 0309 0308 0307 0302 0303 040c 0305     ................
 8016f30:	060b 0e01 0515 033a 0711 0506 0810 0756     ......:.......V.
 8016f40:	0702 0d15 0450 0343 032d 0401 0611 0c0f     ....P.C.-.......
 8016f50:	043a 251d 060d 204c 046d 256a c880 8205     :..%..L m.j%....
 8016f60:	03b0 061a fd82 5903 1507 170b 1409 140c     .......Y........
 8016f70:	6a0c 0a06 1a06 5906 2b07 4605 2c0a 0c04     .j.....Y.+.F.,..
 8016f80:	0104 3103 2c0b 1a04 0b06 8003 06ac 060a     ...1.,..........
 8016f90:	411f 044c 032d 0874 033c 030f 073c 0838     .AL.-.t.<...<.8.
 8016fa0:	062a ff82 1811 2f08 2d11 2003 2110 800f     *....../.-. .!..
 8016fb0:	048c 9782 0b19 8815 0594 052f 073b 0e02     ........../.;...
 8016fc0:	0918 af80 7431 800c 1ad6 050c ff80 8005     ....1t..........
 8016fd0:	05b6 0c24 c69b d20a 1030 8d84 3703 8109     ..$.....0....7..
 8016fe0:	145c b880 8008 3dba 0435 060a 0838 0846     \......=5...8.F.
 8016ff0:	060c 0b74 031e 045a 0959 8380 1c18 160a     ..t...Z.Y.......
 8017000:	4609 800a 068a a4ab 170c 3104 04a1 da81     .F.........1....
 8017010:	0726 050c 8005 11a5 6d81 7810 2a28 4c06     &........m.x(*.L
 8017020:	8004 048d be80 1b03 0f03 000d 0106 0301     ................
 8017030:	0401 0802 0908 0a02 0b05 1002 1101 1204     ................
 8017040:	1305 1411 1502 1702 1a02 1c02 1d05 2408     ...............$
 8017050:	6a01 6b03 bc02 d102 d402 d50c d609 d702     .j.k............
 8017060:	da02 e001 e805 ee02 f020 f904 0c04 3b27     ........ .....';
 8017070:	4e3e 8f4f 9e9e 069f 0907 3d36 563e d0f3     >NO.......6=>V..
 8017080:	04d1 1814 3736 5756 35bd cfce 12e0 8987     ....67VW.5......
 8017090:	9e8e 0d04 110e 2912 3431 453a 4946 4e4a     .......)14:EFIJN
 80170a0:	644f 5a65 b65c 1bb7 841c 0985 9037 a891     OdeZ\.......7...
 80170b0:	0a07 3e3b 6966 928f 5f6f efee 625a 9b9a     ..;>fi..o_..Zb..
 80170c0:	2827 9d55 a1a0 a4a3 a8a7 baad c4bc 0b06     '(U.............
 80170d0:	150c 3a1d 453f a651 cca7 a0cd 1907 221a     ...:?EQ........"
 80170e0:	c525 04c6 2320 2625 3328 3a38 4a48 504c     %... #%&(38:HJLP
 80170f0:	5553 5856 5c5a 605e 6563 6b66 7873 7f7d     SUVXZ\^`cefksx}.
 8017100:	a48a afaa c0b0 3fd0 7271 5e7b 7b22 0305     .......?qr{^"{..
 8017110:	2d04 6503 0104 2e2f 8280 031d 0f31 041c     .-.e../.....1...
 8017120:	0924 051e 052b 0444 2a0e aa80 2406 2404     $...+.D..*...$.$
 8017130:	2804 3408 010b 9080 3781 1609 080a 9880     .(.4.....7......
 8017140:	0339 0863 3009 0516 0321 051b 4001 0438     9.c..0..!....@8.
 8017150:	054b 042f 070a 0709 2040 0427 090c 0336     K./.....@ '...6.
 8017160:	053a 071a 0c04 5007 3749 0d33 0733 082e     :......PI73.3...
 8017170:	810a 1f26 8180 0828 802a 4ea6 1e04 430f     ..&...(.*..N...C
 8017180:	190e 0a07 4706 2709 7509 3f0b 2a41 3b06     .....G.'.u.?A*.;
 8017190:	0a05 5106 0106 1005 0503 8b80 215f 0848     ...Q........_!H.
 80171a0:	800a 5ea6 4522 0a0b 0d06 3813 0a08 2c36     ...^"E.....8..6,
 80171b0:	1004 c080 643c 0c53 8101 4800 5308 391d     ....<dS....H.S.9
 80171c0:	0781 0a46 031d 4947 0337 080e 060a 0739     ..F...GI7.....9.
 80171d0:	810a 1936 0781 9a83 7566 800b 8ac4 84bc     ..6.....fu......
 80171e0:	8f2f 82d1 a147 82b9 0739 042a 6002 0a26     /...G...9.*..`&.
 80171f0:	0a46 0528 8213 5bb0 4565 2f0b 1110 0240     F.(....[eE./..@.
 8017200:	971e 0ef2 f382 0da5 1f81 8151 898c 6b04     ..........Q....k
 8017210:	0d05 0903 1007 6093 f680 730a 6e08 4617     .......`...s.n.F
 8017220:	9a80 0c14 0957 8019 8187 0347 4285 150f     ....W.....G..B..
 8017230:	5085 872b 80d5 29d7 054b 040a 8302 4411     .P+....)K......D
 8017240:	4b81 063c 0401 0555 341b 8102 2c0e 6404     .K<...U..4...,.d
 8017250:	560c 0d0a 5c03 3d04 1d39 2c0d 0904 0207     .V...\.=9..,....
 8017260:	060e 9a80 d583 0d0b 0a03 7406 590c 0c27     ...........t.Y'.
 8017270:	3804 0a08 2806 1e08 0c52 6704 2903 0a0d     .8...(..R..g.)..
 8017280:	0306 300d 0e60 9285 0000 fbc0 3eef 0000     ...0`........>..
 8017290:	0000 0e00 0000 0000 0000 0000 0000 0000     ................
 80172a0:	0000 fff8 fffb ffff 0007 0000 0000 1400     ................
 80172b0:	21fe 00fe 000c 0000 0002 0000 0000 5000     .!.............P
 80172c0:	201e 0080 000c 4000 0006 0000 0000 1000     . .....@........
 80172d0:	3986 0002 0000 0023 21be 0000 000c fc00     .9....#..!......
 80172e0:	0002 0000 0000 d000 201e 00c0 000c 0000     ......... ......
 80172f0:	0004 0000 0000 4000 2001 0080 0000 0000     .......@. ......
 8017300:	0011 0000 0000 c000 3dc1 0060 000c 0000     .........=`.....
 8017310:	0002 0000 0000 9000 3044 0060 000c 0000     ........D0`.....
 8017320:	0003 0000 0000 5800 201e 0080 000c 0000     .......X. ......
 8017330:	8400 805c 0000 0000 0000 0000 0000 07f2     ..\.............
 8017340:	7f80 0000 0000 0000 0000 0000 0000 1bf2     ................
 8017350:	3f00 0000 0000 0000 0000 0300 0000 02a0     .?..............
 8017360:	0000 0000 0000 7ffe e0df feff ffff 1fff     ................
 8017370:	0040 0000 0000 0000 0000 0000 e000 66fd     @..............f
 8017380:	0000 c300 0001 001e 2064 2000 0000 0000     ........d . ....
 8017390:	0000 e000 0000 0000 0000 001c 0000 001c     ................
 80173a0:	0000 000c 0000 000c 0000 0000 0000 3fb0     ...............?
 80173b0:	fe40 200f 0000 0000 3800 0000 0000 0000     @.. .....8......
 80173c0:	0060 0000 0200 0000 0000 0000 0187 0e04     `...............
 80173d0:	0000 0980 0000 0000 0000 7f40 1fe5 9ff8     ..........@.....
 80173e0:	0000 0000 0000 7fff 000f 0000 0000 17d0     ................
 80173f0:	0004 0000 f800 000f 0003 0000 3b3c 0000     ............<;..
 8017400:	0000 0000 a340 0003 0000 0000 f000 00cf     ....@...........
 8017410:	0000 fff7 21fd 0310 ffff ffff ffff fbff     .....!..........
 8017420:	1000 0000 0000 0000 0000 ffff ffff 0001     ................
 8017430:	0000 0000 8000 0003 0000 0000 0000 8000     ................
 8017440:	0000 0000 ffff ffff 0000 0000 fc00 0000     ................
 8017450:	0000 0600 0000 0000 0000 0000 8000 3ff7     ...............?
 8017460:	0000 c000 0000 0000 0000 0000 0000 0003     ................
 8017470:	0844 0000 0060 0000 0030 0000 ffff 8003     D...`...0.......
 8017480:	0000 0000 3fc0 0000 ff80 0003 0000 0000     .....?..........
 8017490:	0007 0000 0000 13c8 0000 0000 0020 0000     ............ ...
 80174a0:	0000 0000 7e00 0066 1008 0000 0000 1000     .....~f.........
 80174b0:	0000 0000 0000 c19d 0002 0000 3000 0040     .............0@.
 80174c0:	0000 0000 2120 0000 0000 4000 0000 0000     .... !.....@....
 80174d0:	ffff 0000 ffff 0000 0000 0000 0000 0100     ................
 80174e0:	0000 0200 0300 0000 0000 0000 0000 0000     ................
	...
 8017500:	0004 0500 0000 0000 0000 0000 0006 0000     ................
 8017510:	0000 0000 0700 0000 0908 000a 0c0b 0e0d     ................
 8017520:	000f 1000 1211 0000 1413 1615 0000 1817     ................
 8017530:	1a19 001b 001c 0000 001d 0000 0000 0000     ................
 8017540:	1f1e 0020 0000 0000 0021 0022 2423 0025     .. .....!.".#$%.
 8017550:	0000 2600 0000 0000 0000 0000 0000 0000     ...&............
	...
 80175c0:	0000 2700 0028 0000 0000 0000 0000 0000     ...'(...........
 80175d0:	0000 0000 0000 0029 0000 0000 0000 0000     ......).........
	...
 8017608:	0000 002a 0000 0000 0000 0000 0000 0000     ..*.............
 8017618:	0000 0000 2b00 002c 2d00 0000 0000 0000     .....+,..-......
	...
 8017640:	2f2e 0030 0000 0000 0000 0000 0000 0000     ./0.............
	...
 8017658:	0031 0000 0000 0000 0000 0000 0000 0000     1...............
	...
 8017678:	0000 3200 3300 0000 0000 0000 0000 0000     ...2.3..........
	...
 8017698:	3534 0000 3535 3635 0000 0000 0000 0000     45..5556........
	...
 80176e4:	0000 2000 0000 0000 0001 0000 0000 0000     ... ............
 80176f4:	0000 07c0 f06e 0000 0000 8700 0000 0000     ....n...........
 8017704:	0060 0000 0000 0000 00f0 0000 ffc0 0001     `...............
 8017714:	0000 0000 0002 0000 0000 ff00 007f 0000     ................
 8017724:	0000 8000 0003 0000 0000 0678 0007 0000     ..........x.....
 8017734:	ef80 001f 0000 0000 0000 0008 0003 0000     ................
 8017744:	0000 7fc0 1e00 0000 0000 0000 0000 0000     ................
 8017754:	8000 40d3 0000 8000 07f8 0000 0003 0000     ...@............
 8017764:	0000 5800 0001 0080 1fc0 001f 0000 0000     ...X............
 8017774:	0000 ff00 005c 4000 0000 0000 0000 0000     ....\..@........
 8017784:	0000 a5f9 000d 0000 0000 0000 0000 0000     ................
 8017794:	8000 b03c 0001 3000 0000 0000 0000 0000     ..<....0........
 80177a4:	0000 a7f8 0001 0000 0000 0000 0000 0000     ................
 80177b4:	2800 00bf 0000 e000 0fbc 0000 0000 0000     .(..............
 80177c4:	8000 06ff 07fe 0000 0000 79f8 0080 0e7e     ...........y..~.
 80177d4:	0000 0000 fc00 037f 0000 0000 0000 0000     ................
 80177e4:	0000 bf7f 0000 fffc fcff 006d 0000 0000     ..........m.....
 80177f4:	0000 b47e 00bf 0000 0000 0000 0000 00a3     ..~.............
	...
 801780c:	0000 0018 0000 0000 0000 001f 0000 0000     ................
 801781c:	0000 007f 8000 0007 0000 0000 0000 6000     ...............`
	...
 8017834:	c3a0 f807 0fe7 0000 3c00 0000 001c 0000     .........<......
 8017844:	0000 0000 ffff ffff ffff f87f ffff ffff     ................
 8017854:	1fff 0020 0010 f800 fffe 0000 ff7f f9ff     .. .............
 8017864:	07db 0000 0000 007f 0000 0000 07f0 0000     ................
	...
 801787c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 801788c:	ffff 0000 0000 0000 0000 0000 0000 0000     ................
	...
 80178f0:	ffff ffff ffff ffff ffff ffff ffff 0000     ................
	...
 8017920:	03f8 0000 0000 0000 0000 0000 0000 0000     ................
	...
 8017940:	0000 fffe ffff bfff 00b6 0000 0000 0000     ................
 8017950:	0000 07ff 0000 0000 f800 ffff 0000 0001     ................
	...
 8017968:	0000 9fc0 3d9f 0000 0000 0002 0000 ffff     .....=..........
 8017978:	07ff 0000 0000 0000 0000 0000 ffc0 0001     ................
 8017988:	0000 0000 f800 200f 7288 0801 004a 0000     ....... .r..J...
 8017998:	74d8 0801 0200 0000 76d8 0801 0037 0000     .t.......v..7...
 80179a8:	0100 0302 0504 0706 0908 0a08 0c0b 0e0d     ................
 80179b8:	100f 1211 1413 1502 1716 1918 1b1a 1d1c     ................
 80179c8:	1f1e 0220 0202 0202 0202 0202 2102 0202     .. ..........!..
 80179d8:	0202 0202 0202 0202 0202 0202 2322 2524     ............"#$%
 80179e8:	0226 0227 0228 0202 2a29 022b 2d2c 2f2e     &.'.(...)*+.,-./
 80179f8:	0230 3102 0202 3202 0202 0202 0202 0202     0..1...2........
 8017a08:	0233 3402 0202 0202 0202 0202 0202 0202     3..4............
 8017a18:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 8017a28:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 8017a38:	0202 3502 3602 3702 0202 0202 0202 0202     ...5.6.7........
 8017a48:	0238 0239 0202 0202 0202 0202 0202 0202     8.9.............
 8017a58:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 8017a68:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 8017a78:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 8017a88:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 8017a98:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 8017aa8:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 8017ab8:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 8017ac8:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 8017ad8:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 8017ae8:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 8017af8:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 8017b08:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 8017b18:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 8017b28:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 8017b38:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 8017b48:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 8017b58:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 8017b68:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 8017b78:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 8017b88:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 8017b98:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 8017ba8:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 8017bb8:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 8017bc8:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 8017bd8:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 8017be8:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 8017bf8:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 8017c08:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 8017c18:	0202 0202 0202 0202 3a02 3c3b 0202 0202     .........:;<....
 8017c28:	023d 3e02 403f 4241 4443 4645 0202 4702     =..>?@ABCDEF...G
 8017c38:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 8017c48:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 8017c58:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 8017c68:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 8017c78:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 8017c88:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 8017c98:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 8017ca8:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 8017cb8:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 8017cc8:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 8017cd8:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 8017ce8:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 8017cf8:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 8017d08:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 8017d18:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 8017d28:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 8017d38:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 8017d48:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 8017d58:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 8017d68:	0202 0202 0202 0202 0202 0202 0248 0202     ............H...
 8017d78:	0202 0202 0202 0202 0249 0202 0202 023b     ........I.....;.
 8017d88:	0100 0202 0202 0203 0202 0402 0502 0206     ................
 8017d98:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 8017da8:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 8017db8:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 8017dc8:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 8017dd8:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 8017de8:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 8017df8:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 8017e08:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 8017e18:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 8017e28:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 8017e38:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 8017e48:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 8017e58:	0207 0202 0202 0202 0202 0202 0202 0202     ................
 8017e68:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 8017e78:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 8017e88:	0020 0000 3025 6c36 2075 0000 6168 646e      ...%06lu ..hand
 8017e98:	656c 635f 616f 0a70 0000 0000 002c 0000     le_coap.....,...
 8017ea8:	0022 0000 3a22 0020 002d 0000 7325 6425     "...": .-...%s%d
 8017eb8:	252e 3630 0064 0000 454e 2054 6170 6c79     .%06d...NET payl
 8017ec8:	616f 2064 6973 657a 2520 0a64 0000 0000     oad size %d.....

08017ed8 <COAP_HOST>:
 8017ed8:	3031 2e34 3931 2e39 3538 322e 3131 0000     104.199.85.211..

08017ee8 <COAP_URI>:
 8017ee8:	3276 742f 6968 676e 2f73 5649 6952 4342     v2/things/IVRiBC
 8017ef8:	5263 4836 7050 435f 5a63 4649 4f66 465a     cR6HPp_CcZIFfOZF
 8017f08:	7a78 695f 6e7a 3569 6378 4b5f 2d4f 676b     xz_izni5xc_KO-kg
 8017f18:	4153 5932 0038 0000                         SA2Y8...

08017f20 <COLLECTOR_NODE_HW_ID>:
 8017f20:	ff57 066a 7878 5054 2949 6724               W.j.xxTPI)$g

08017f2c <SENSOR_NODE_HW_IDS>:
 8017f2c:	ff38 066d 574e 3634 5825 4308 0201 0403     8.m.NW46%X.C....
 8017f3c:	0605 0807 0a09 020b 0201 0403 0605 0807     ................
 8017f4c:	0a09 030b 0201 0403 0605 0807 0a09 040b     ................
 8017f5c:	0201 0403 0605 0807 0a09 050b 3025 7832     ............%02x
 8017f6c:	0000 0000 346c 3637 0000 0000 7325 6172     ....l476....%sra
 8017f7c:	646e 6d6f 6420 7665 6369 2065 6469 2520     ndom device id %
 8017f8c:	0a73 0000 7325 7768 6469 0020               s...%shwid .

08017f98 <sensor_network_encoding>:
 8017f98:	0032 0000 003c 0000 3025 3031 6c6c 0078     2...<...%010llx.
 8017fa8:	6e20 646f 2065 0000 7325 6573 736e 726f      node ..%ssensor
 8017fb8:	7325 2523 0a64 0000 7325 6f63 6c6c 6365     %s#%d...%scollec
 8017fc8:	6f74 2572 0a73 0000 7325 7473 6e61 6164     tor%s...%sstanda
 8017fd8:	6f6c 656e 7325 000a 454e 2054 656e 7774     lone%s..NET netw
 8017fe8:	726f 206b 6f6e 2074 6572 6461 0a79 0000     ork not ready...
 8017ff8:	454e 2054 0000 0000 7325 7325 2520 0a73     NET ....%s%s %s.
 8018008:	0000 0000                                   ....

0801800c <sensor_network_shortname>:
 801800c:	804c 0801 8050 0801 0000 0000               L...P.......

08018018 <sensor_node_addresses>:
 8018018:	b6f1 b4b5 00b3 0000 b6cd b4b5 00b3 0000     ................
 8018028:	b6a3 b4b5 00b3 0000 b60f b4b5 00b3 0000     ................
 8018038:	b605 b4b5 00b3 0000 454e 2054 7473 7261     ........NET star
 8018048:	0a74 0000 7673 0072 6f63 006c 636f 725f     t...svr.col.oc_r
 8018058:	7065 6f5f 0000 0000 636f 635f 5f6c 6263     ep_o....oc_cl_cb
 8018068:	0073 0000 00ff 0000 6f63 7061 725f 6365     s.......coap_rec
 8018078:	6965 6576 4e20 544f 4920 504d 454c 454d     eive NOT IMPLEME
 8018088:	544e 4445 000a 0000 007b 0000 7274 6575     NTED....{...true
 8018098:	0000 0000 6166 736c 0065 0000 6c25 756c     ....false...%llu
 80180a8:	0000 0000 6c25 646c 0000 0000 005c 0000     ....%lld....\...
 80180b8:	745c 0000 725c 0000 6e5c 0000 665c 0000     \t..\r..\n..\f..
 80180c8:	625c 0000 005b 0000 005d 0000 007d 0000     \b..[...]...}...
 80180d8:	6573 736e 726f 6e5f 746f 6669 655f 7476     sensor_notif_evt
 80180e8:	0073 0000 7341 6573 7472 4020 3020 2578     s...Assert @ 0x%
 80180f8:	0a78 0000 7341 6573 7472 4020 3020 2578     x...Assert @ 0x%
 8018108:	2078 202d 7325 253a 0a64 0000 6e55 6168     x - %s:%d...Unha
 8018118:	646e 656c 2064 6e69 6574 7272 7075 2074     ndled interrupt 
 8018128:	2528 646c 2c29 6520 6378 7065 6974 6e6f     (%ld), exception
 8018138:	7320 2070 7830 3025 6c38 0a78 0000 0000      sp 0x%08lx.....
 8018148:	7220 3a30 7830 3025 6c38 2078 7220 3a31      r0:0x%08lx  r1:
 8018158:	7830 3025 6c38 2078 7220 3a32 7830 3025     0x%08lx  r2:0x%0
 8018168:	6c38 2078 7220 3a33 7830 3025 6c38 0a78     8lx  r3:0x%08lx.
 8018178:	0000 0000 7220 3a34 7830 3025 6c38 2078     .... r4:0x%08lx 
 8018188:	7220 3a35 7830 3025 6c38 2078 7220 3a36      r5:0x%08lx  r6:
 8018198:	7830 3025 6c38 2078 7220 3a37 7830 3025     0x%08lx  r7:0x%0
 80181a8:	6c38 0a78 0000 0000 7220 3a38 7830 3025     8lx..... r8:0x%0
 80181b8:	6c38 2078 7220 3a39 7830 3025 6c38 2078     8lx  r9:0x%08lx 
 80181c8:	3172 3a30 7830 3025 6c38 2078 3172 3a31     r10:0x%08lx r11:
 80181d8:	7830 3025 6c38 0a78 0000 0000 3172 3a32     0x%08lx.....r12:
 80181e8:	7830 3025 6c38 2078 6c20 3a72 7830 3025     0x%08lx  lr:0x%0
 80181f8:	6c38 2078 7020 3a63 7830 3025 6c38 2078     8lx  pc:0x%08lx 
 8018208:	7370 3a72 7830 3025 6c38 0a78 0000 0000     psr:0x%08lx.....
 8018218:	4349 5253 303a 2578 3830 786c 4820 5346     ICSR:0x%08lx HFS
 8018228:	3a52 7830 3025 6c38 2078 4643 5253 303a     R:0x%08lx CFSR:0
 8018238:	2578 3830 786c 000a 4642 5241 303a 2578     x%08lx..BFAR:0x%
 8018248:	3830 786c 4d20 464d 5241 303a 2578 3830     08lx MMFAR:0x%08
 8018258:	786c 000a 616d 6e69 0000 0000 6469 656c     lx..main....idle
 8018268:	0000 0000 736d 7379 315f 0000               ....msys_1..

08018274 <MemFile_methods>:
 8018274:	e641 0800 0000 0000                         A.......

0801827c <stdout>:
 801827c:	0264 2000 5047 2053 6173 6574 6c6c 7469     d.. GPS satellit
 801828c:	7365 203a 6c25 0a64 0000 0000 0a5b 0000     es: %ld.....[...
 801829c:	0a5d 0000 5024 544d 254b 0073 002a 0000     ]...$PMTK%s.*...
 80182ac:	0a0d 0000 5047 3e53 2520 0073               ....GPS> %s.

080182b8 <_ZL8COMMANDS>:
 80182b8:	82c8 0801 82d8 0801 82e0 0801 0a0d 0a0d     ................
 80182c8:	0000 0000 7067 5f73 376c 7230 305f 0000     ....gps_l70r_0..
 80182d8:	3638 2c39 0030 0000 3638 2c39 2c31 6425     869,0...869,1,%d
 80182e8:	0000 0000                                   ....

080182ec <_ZL24g_gps_l70r_sensor_driver>:
 80182ec:	eab5 0800 ea97 0800 0000 0000 0000 0000     ................
	...
 8018314:	6574 706d 735f 6d74 3233 305f 0000 0000     temp_stm32_0....
 8018324:	4e52 2044 6570 7372 6e6f 6c61 7369 2065     RND personalise 
 8018334:	6977 6874 6820 2077 6469 0020 4e52 2044     with hw id .RND 
 8018344:	6573 6465 7720 7469 2068 6574 706d 6520     seed with temp e
 8018354:	746e 6f72 7970 0020                         ntropy .

0801835c <g_temp_stm32_sensor_driver>:
 801835c:	f119 0800 eec7 0800 0000 0000 0000 0000     ................
	...
 8018384:	6461 3163 0000 0000 5453 204d 6572 6461     adc1....STM read
 8018394:	6920 746e 7420 6d65 2070 6573 736e 726f      int temp sensor
 80183a4:	000a 0000 4441 2043 706f 6e65 000a 0000     ....ADC open....
 80183b4:	5047 4d52 0043 0000 4e47 4d52 0043 0000     GPRMC...GNRMC...
 80183c4:	5047 4747 0041 0000 4e47 4747 0041 0000     GPGGA...GNGGA...

080183d4 <k256>:
 80183d4:	2f98 428a 4491 7137 fbcf b5c0 dba5 e9b5     ./.B.D7q........
 80183e4:	c25b 3956 11f1 59f1 82a4 923f 5ed5 ab1c     [.V9...Y..?..^..
 80183f4:	aa98 d807 5b01 1283 85be 2431 7dc3 550c     .....[....1$.}.U
 8018404:	5d74 72be b1fe 80de 06a7 9bdc f174 c19b     t].r........t...
 8018414:	69c1 e49b 4786 efbe 9dc6 0fc1 a1cc 240c     .i...G.........$
 8018424:	2c6f 2de9 84aa 4a74 a9dc 5cb0 88da 76f9     o,.-..tJ...\...v
 8018434:	5152 983e c66d a831 27c8 b003 7fc7 bf59     RQ>.m.1..'....Y.
 8018444:	0bf3 c6e0 9147 d5a7 6351 06ca 2967 1429     ....G...Qc..g)).
 8018454:	0a85 27b7 2138 2e1b 6dfc 4d2c 0d13 5338     ...'8!...m,M..8S
 8018464:	7354 650a 0abb 766a c92e 81c2 2c85 9272     Ts.e..jv.....,r.
 8018474:	e8a1 a2bf 664b a81a 8b70 c24b 51a3 c76c     ....Kf..p.K..Ql.
 8018484:	e819 d192 0624 d699 3585 f40e a070 106a     ....$....5..p.j.
 8018494:	c116 19a4 6c08 1e37 774c 2748 bcb5 34b0     .....l7.LwH'...4
 80184a4:	0cb3 391c aa4a 4ed8 ca4f 5b9c 6ff3 682e     ...9J..NO..[.o.h
 80184b4:	82ee 748f 636f 78a5 7814 84c8 0208 8cc7     ...toc.x.x......
 80184c4:	fffa 90be 6ceb a450 a3f7 bef9 78f2 c671     .....lP......xq.
 80184d4:	6175 7472 0030 0000 6175 7472 0032 0000     uart0...uart2...

080184e4 <uart0_cfg>:
 80184e4:	4400 4000 1058 4002 0000 0002 0302 ffff     .D.@X..@........
 80184f4:	2607 0000                                   .&..

080184f8 <uart2_cfg>:
 80184f8:	4800 4000 1058 4002 0000 0004 1b1a ffff     .H.@X..@........
 8018508:	2707 0000                                   .'..

0801850c <stm32_flash_dev>:
 801850c:	8524 0801 0000 0800 0000 0004 0080 0000     $...............
 801851c:	0008 0000 00ff 0000                         ........

08018524 <stm32_flash_funcs>:
 8018524:	01fd 0801 028d 0801 01f5 0801 01d9 0801     ................
 8018534:	0000 0000 01eb 0801 0000 0000               ............

08018540 <portmap>:
 8018540:	0000 4800 0400 4800 0800 4800 0c00 4800     ...H...H...H...H
 8018550:	1000 4800 1400 4800 1800 4800 1c00 4800     ...H...H...H...H

08018560 <stm32_tmr_devs>:
 8018560:	3994 2000 0000 0000 0000 0000 4441 2043     .9. ........ADC 
 8018570:	7263 6165 6574 6120 6364 0a31 0000 0000     create adc1.....

08018580 <stm32l4_adc_funcs>:
 8018580:	215b 0801 20a9 0801 20f9 0801 1deb 0801     [!... ... ......
 8018590:	20dd 0801 1dcd 0801 1da1 0801 6362 3539     . ..........bc95
 80185a0:	5f67 0030 7325 7263 6165 6574 6220 3963     g_0.%screate bc9
 80185b0:	6735 305f 000a 0000 252b 3631 5e5b 5d3a     5g_0....+%16[^:]
 80185c0:	253a 0064 252b 3631 5e5b 5d3a 253a 2c64     :%d.+%16[^:]:%d,
 80185d0:	6425 0000 5441 0000 0a0d 5441 0000 0000     %d..AT....AT....

080185e0 <_ZL13network_iface>:
 80185e0:	0000 0000 859c 0801 0010 0000 2679 0801     ............y&..
 80185f0:	0000 0000 5441 203e 534e 534f 4654 253d     ....AT> NSOSTF=%
 8018600:	2c64 7325 252c 2c64 7325 252c 2c64 000a     d,%s,%d,%s,%d,..
 8018610:	7830 3032 0030 0000 534e 534f 4654 253d     0x200...NSOSTF=%
 8018620:	2c64 7325 252c 2c64 7325 252c 2c64 0000     d,%s,%d,%s,%d,..
 8018630:	252c 0064 6425 252c 0064 0000               ,%d.%d,%d...

0801863c <_ZL3ATP>:
 801863c:	5441 002b                                   AT+.

08018640 <_ZL8COMMANDS>:
 8018640:	82c8 0801 86a0 0801 86bc 0801 86c8 0801     ................
 8018650:	86cc 0801 86d8 0801 86e0 0801 86e8 0801     ................
 8018660:	86f0 0801 86f8 0801 8700 0801 8708 0801     ................
 8018670:	8710 0801 8724 0801 8730 0801 873c 0801     ....$...0...<...
 8018680:	8744 0801 4b4f 0000 6573 646e 6d20 7562     D...OK..send mbu
 8018690:	0066 0000 7325 7325 2520 2e75 2e2e 000a     f...%s%s %u.....
 80186a0:	434e 4e4f 4946 3d47 5541 4f54 4f43 4e4e     NCONFIG=AUTOCONN
 80186b0:	4345 2c54 4146 534c 0045 0000 5251 4745     ECT,FALSE...QREG
 80186c0:	5753 3d54 0032 0000 524e 0042 424e 4e41     SWT=2...NRB.NBAN
 80186d0:	3d44 6425 0000 0000 4643 4e55 313d 0000     D=%d....CFUN=1..
 80186e0:	4643 4e55 303d 0000 4643 4e55 003f 0000     CFUN=0..CFUN?...
 80186f0:	4543 4552 3d47 0030 4543 4552 3f47 0000     CEREG=0.CEREG?..
 8018700:	4743 5441 3d54 0031 4743 5441 3f54 0000     CGATT=1.CGATT?..
 8018710:	534e 434f 3d52 4744 4152 2c4d 3731 302c     NSOCR=DGRAM,17,0
 8018720:	312c 0000 534e 524f 3d46 2c31 6425 0000     ,1..NSORF=1,%d..
 8018730:	534e 434f 3d4c 6425 0000 0000 4743 4150     NSOCL=%d....CGPA
 8018740:	4444 0052 554e 5345 4154 5354 0000 0000     DDR.NUESTATS....
 8018750:	424e 2054 6573 646e 7520 7064 000a 0000     NBT send udp....
 8018760:	424e 2054 7473 0a72 0000 0000 4f54 4f44     NBT str.....TODO
 8018770:	6f3a 5f63 7065 735f 7274 0000               :oc_ep_str..

0801877c <_ZL9transport>:
 801877c:	0000 0000 2ed7 0801 2edb 0801 2f0d 0801     ............./..
	...
 8018794:	2ee5 0801 2edf 0801 2ee3 0801 7325 7325     ............%s%s
 80187a4:	7325 0000 4f20 0a4b 0000 0000 4620 4941     %s.. OK..... FAI
 80187b4:	454c 0a44 0000 0000 424e 2054 0000 0000     LED.....NBT ....
 80187c4:	5441 7220 7365 6f70 736e 2065 696d 6d73     AT response mism
 80187d4:	7461 6863 203a 6f66 6e75 2064 2522 2273     atch: found "%s"
 80187e4:	200a 2020 7865 6570 7463 6465 2220 7325     .   expected "%s
 80187f4:	0a22 0000 5441 2021 7325 0a0d 0000 0000     "...AT! %s......
 8018804:	2020 203c 6425 2f20 2520 0073 2020 203c       < %d / %s.  < 
 8018814:	7325 0000 5441 203d 7325 0a0d 0000 0000     %s..AT= %s......
 8018824:	5441 203c 7325 0000 5441 203e 7325 0a0d     AT< %s..AT> %s..
 8018834:	0000 0000 7325 7263 6165 6574 6720 7370     ....%screate gps
 8018844:	6c5f 3037 5f72 0a30 0000 0000 5047 2053     _l70r_0.....GPS 
 8018854:	0000 0000 4d54 2050 7263 6165 6574 2520     ....TMP create %
 8018864:	0a73 0000                                   s...

08018868 <sysflash_map_dflt>:
 8018868:	0000 0000 0000 0800 4000 0000 0001 0000     .........@......
 8018878:	4000 0800 0000 0002 0002 0000 0000 0803     .@..............
 8018888:	0000 0000 0003 0000 0010 0803 0000 0000     ................
 8018898:	0010 0000 4000 0802 8000 0000 0011 0000     .....@..........
 80188a8:	c000 0802 4000 0000                         .....@..

c:/stm32bluepill-mynewt-sensor/bin/targets/stm32l4_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf:     file format elf32-littlearm

arm-none-eabi-objdump: section '.rodata' mentioned in a -j option, but not found in any input file
   text	   data	    bss	    dec	    hex	filename
  84136	    480	  14332	  98948	  18284	c:/stm32bluepill-mynewt-sensor/bin/targets/stm32l4_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf
