{
    //  VSCode Debugger Config
    "version": "0.2.0",
    "configurations": [
        {
            "name": "GD32VF103",
            "type": "gdb",
            "request": "launch",
            //  Application Executable to be flashed to Blue Pill before debugging.  Note that the Application ELF image does not contain a valid Image Header.  So we must bypass the Bootloader, shown below.
            "target": "${workspaceRoot}/bin/targets/gd32vf103c-start_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf",
            //  For Bootloader: "target": "${workspaceRoot}/bin/targets/gd32vf103c-start_boot/app/apps/boot_stub/boot_stub.elf",
            "cwd": "${workspaceRoot}",
            "gdbpath": "${workspaceRoot}/xPacks/riscv-none-embed-gcc/8.2.0-3.1/bin/riscv-none-embed-gdb",
            "autorun": [
                //  Before loading the Application, run these gdb commands.
                //  Set timeout for executing openocd commands.
                "set remotetimeout 60",

                //  This indicates that an unrecognized breakpoint location should automatically result in a pending breakpoint being created.
                "set breakpoint pending on",

                //  Launch OpenOCD. Based on https://www.justinmklam.com/posts/2017/10/vscode-debugger-setup/
                "target remote | riscv-openocd/src/openocd -s riscv-openocd/tcl -c \"gdb_port pipe; log_output openocd.log\" -f scripts/gd32vf103/flash-init.ocd -f interface/cmsis-dap.cfg -f scripts/gd32vf103/gd32vf103.ocd -f scripts/gd32vf103/debug.ocd ",

                //  After loading the Application, run these gdb commands.  The Application ELF image does not contain a valid Image Header.
                //  Based on https://github.com/Tencent/TencentOS-tiny/blob/master/doc/RISC-V%20eclipse%20%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.md
                "monitor riscv expose_csrs 3040-3071",
                "monitor reset halt",           //  Restart and halt
                "flushregs",                    //  Flush the register cache

                "break main",                   //  Break at main()
                "break __assert_func",          //  Break for any assert failures
                "break os_default_irq",         //  Break for any unhandled interrupts

                //  If not using the Stub Bootloader boot_stub, we need to bypass the Bootloader and jump to the Application directly:
                "stepi",                    //  Must step before setting PC
                //  "set $pc = Reset_Handler",  //  Prepare to jump to the Application's Reset Handler
                //  "stepi",                    //  Execute the Reset Handler

                //  "thb main",
                //  "continue",
            ]
            //  "valuesFormatting": "parseText"
        },
        {
            //  Cortex Debug Configuration: https://marcelball.ca/projects/cortex-debug/cortex-debug-launch-configurations/
            "name": "OLD GD32VF103",
            "type": "cortex-debug",
            "request": "launch",
            //  OpenOCD path is defined in workspace.code-workspace.
            "servertype": "openocd",
            "cwd": "${workspaceRoot}",
            //  Application Executable to be flashed to Blue Pill before debugging.  Note that the Application ELF image does not contain a valid Image Header.  So we must bypass the Bootloader, shown below.
            "executable": "bin/targets/gd32vf103c-start_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf",
            //  For Bootloader: "executable": "bin/targets/gd32vf103c-start_boot/app/apps/boot_stub/boot_stub.elf",
            "device": "GD32VF103",
            "svdFile": "scripts/STM32F103xx.svd",
            "configFiles": [ 
                //  Tell OpenOCD to open the JTAG connection to MCU
                "scripts/gd32vf103/flash-init.ocd",
                "interface/cmsis-dap.cfg",
                "scripts/gd32vf103/gd32vf103.ocd",
                //  Tell OpenOCD to run our custom debug commands.
                "scripts/gd32vf103/debug.ocd" 
            ],
            "preLaunchCommands": [
                //  Before loading the Application, run these gdb commands.
                //  Set timeout for executing openocd commands.
                "set remotetimeout 60",

                //  This indicates that an unrecognized breakpoint location should automatically result in a pending breakpoint being created.
                "set breakpoint pending on"
            
                //  Display the Arm instruction when hitting breakpoint.
                //  "display/i $pc",

                //  Load Bootloader symbols in case we jump to the Bootloader.
                //  "symbol-file bin/targets/bluepill_boot/app/apps/boot/boot.elf",

                //  Restore Application symbols.
                //  "symbol-file bin/targets/bluepill_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf",
            ],
            "postLaunchCommands": [
                //  After loading the Application, run these gdb commands.  The Application ELF image does not contain a valid Image Header.
                //  If not using the Stub Bootloader boot_stub, we need to bypass the Bootloader and jump to the Application directly:
                //  "stepi",                    //  Must step before setting PC
                //  "set $pc = Reset_Handler",  //  Prepare to jump to the Application's Reset Handler
                //  "stepi",                    //  Execute the Reset Handler
                "break main",                   //  Break at main()
                "break __assert_func",          //  Break for any assert failures
                "break os_default_irq"          //  Break for any unhandled interrupts
            ],
            "preRestartCommands": [
            ],
            "postRestartCommands": [
            ]
        }        
    ]
}
