
/Users/Luppy/mynewt/stm32bluepill-mynewt-sensor/bin/targets/bluepill_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf:     file format elf32-littlearm
/Users/Luppy/mynewt/stm32bluepill-mynewt-sensor/bin/targets/bluepill_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0800112d

Program Header:
0x70000001 off    0x0000e704 vaddr 0x0800e704 paddr 0x0800e704 align 2**2
         filesz 0x00000018 memsz 0x00000018 flags r--
    LOAD off    0x00000000 vaddr 0x08000000 paddr 0x08000000 align 2**16
         filesz 0x0000e71c memsz 0x0000e71c flags rwx
    LOAD off    0x00010110 vaddr 0x20000110 paddr 0x0800e71c align 2**16
         filesz 0x00000114 memsz 0x00000114 flags rw-
    LOAD off    0x00010228 vaddr 0x20000228 paddr 0x0800e830 align 2**16
         filesz 0x00000000 memsz 0x00003a68 flags rw-
    LOAD off    0x00020000 vaddr 0x20000000 paddr 0x20000000 align 2**16
         filesz 0x00000000 memsz 0x0000010c flags rw-
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx
private flags = 5000200: [Version5 EABI] [soft-float ABI]

Sections:
Idx Name               Size      VMA       LMA       File off  Algn  Flags
  0 .imghdr            00000020  08001000  08001000  00001000  2**0  ALLOC
  1 .text              0000d6e4  08001020  08001020  00001020  2**3  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.exidx         00000018  0800e704  0800e704  0000e704  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .vector_relocation 0000010c  20000000  20000000  00020000  2**0  ALLOC
  4 .coredata          00000000  2000010c  2000010c  00010224  2**0  CONTENTS
  5 .data              00000114  20000110  0800e71c  00010110  2**3  CONTENTS, ALLOC, LOAD, DATA
  6 .corebss           00000000  20000224  20000224  00010224  2**0  CONTENTS
  7 .bss               00003a68  20000228  0800e830  00010228  2**3  ALLOC
  8 .ARM.attributes    00000033  00000000  00000000  00010224  2**0  CONTENTS, READONLY
  9 .comment           0000007f  00000000  00000000  00010257  2**0  CONTENTS, READONLY
 10 .svc_table         00000004  00000000  00000000  000102d6  2**0  CONTENTS, READONLY
 11 .debug_line        00048ae2  00000000  00000000  000102da  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_info        0008d567  00000000  00000000  00058dbc  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev      00013296  00000000  00000000  000e6323  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges     00003098  00000000  00000000  000f95c0  2**3  CONTENTS, READONLY, DEBUGGING
 15 .debug_str         0001ab45  00000000  00000000  000fc658  2**0  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges      00015b30  00000000  00000000  001171a0  2**3  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc         00029226  00000000  00000000  0012ccd0  2**0  CONTENTS, READONLY, DEBUGGING
 18 .debug_frame       0000c6d8  00000000  00000000  00155ef8  2**2  CONTENTS, READONLY, DEBUGGING
 19 .debug_macinfo     00000003  00000000  00000000  001625d0  2**0  CONTENTS, READONLY, DEBUGGING
 20 .debug_pubnames    00000b4f  00000000  00000000  001625d3  2**0  CONTENTS, READONLY, DEBUGGING
 21 .debug_pubtypes    00001b34  00000000  00000000  00163122  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
08001000 l    d  .imghdr	00000000 .imghdr
08001020 l    d  .text	00000000 .text
0800e704 l    d  .ARM.exidx	00000000 .ARM.exidx
20000000 l    d  .vector_relocation	00000000 .vector_relocation
2000010c l    d  .coredata	00000000 .coredata
20000110 l    d  .data	00000000 .data
20000224 l    d  .corebss	00000000 .corebss
20000228 l    d  .bss	00000000 .bss
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .svc_table	00000000 .svc_table
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_macinfo	00000000 .debug_macinfo
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_pubtypes	00000000 .debug_pubtypes
00000000 l    df *ABS*	00000000 startup_stm32f103xb.o
f108f85f l       *ABS*	00000000 BootRAM
08001138 l       .text	00000000 LoopCopyDataInit
08001130 l       .text	00000000 CopyDataInit
0800114c l       .text	00000000 LoopFillZerobss
08001146 l       .text	00000000 FillZerobss
0800115c l       .text	00000000 LoopFillZeroCoreBss
08001156 l       .text	00000000 FillZeroCoreBss
08001188 l       .text	00000000 Infinite_Loop
00000000 l    df *ABS*	00000000 system_stm32f1xx.c
00000000 l    df *ABS*	00000000 cmsis_nvic.c
00000000 l    df *ABS*	00000000 start.c
00000000 l    df *ABS*	00000000 mylib.6fgjgbzt-cgu.0
00001c07 l       .debug_str	00000000 
00001d85 l       .debug_str	00000000 
00001d8a l       .debug_str	00000000 
000004ab l       .debug_str	00000000 
00001d8f l       .debug_str	00000000 
00001d9b l       .debug_str	00000000 
00001e1e l       .debug_str	00000000 
0001a198 l       .debug_str	00000000 
00013435 l       .debug_str	00000000 
00001e28 l       .debug_str	00000000 
00002d92 l       .debug_str	00000000 
00001e2c l       .debug_str	00000000 
00001eb2 l       .debug_str	00000000 
0000bdd5 l       .debug_str	00000000 
00001ec1 l       .debug_str	00000000 
00001f36 l       .debug_str	00000000 
0001a576 l       .debug_str	00000000 
00001f61 l       .debug_str	00000000 
00001f68 l       .debug_str	00000000 
00001f74 l       .debug_str	00000000 
00015157 l       .debug_str	00000000 
00001f7c l       .debug_str	00000000 
00001f81 l       .debug_str	00000000 
00001f84 l       .debug_str	00000000 
000111d7 l       .debug_str	00000000 
00001f8d l       .debug_str	00000000 
00001f94 l       .debug_str	00000000 
00001f90 l       .debug_str	00000000 
00001f9a l       .debug_str	00000000 
00013cec l       .debug_str	00000000 
00001fa2 l       .debug_str	00000000 
00001fc7 l       .debug_str	00000000 
00001fad l       .debug_str	00000000 
00001fd0 l       .debug_str	00000000 
00001fef l       .debug_str	00000000 
00005811 l       .debug_str	00000000 
00002016 l       .debug_str	00000000 
00002048 l       .debug_str	00000000 
0000204f l       .debug_str	00000000 
0000208b l       .debug_str	00000000 
0000209e l       .debug_str	00000000 
000020a4 l       .debug_str	00000000 
000020e8 l       .debug_str	00000000 
00010788 l       .debug_str	00000000 
0000f4d4 l       .debug_str	00000000 
000020fe l       .debug_str	00000000 
0000f410 l       .debug_str	00000000 
0000213d l       .debug_str	00000000 
00002146 l       .debug_str	00000000 
0000214a l       .debug_str	00000000 
00002174 l       .debug_str	00000000 
00002179 l       .debug_str	00000000 
000021c1 l       .debug_str	00000000 
000021ca l       .debug_str	00000000 
00002212 l       .debug_str	00000000 
00002221 l       .debug_str	00000000 
00002269 l       .debug_str	00000000 
00003d91 l       .debug_str	00000000 
000022d3 l       .debug_str	00000000 
00019de7 l       .debug_str	00000000 
000022d7 l       .debug_str	00000000 
000022fa l       .debug_str	00000000 
0000234e l       .debug_str	00000000 
00019e75 l       .debug_str	00000000 
000023aa l       .debug_str	00000000 
000023fc l       .debug_str	00000000 
00002476 l       .debug_str	00000000 
00002456 l       .debug_str	00000000 
000022f5 l       .debug_str	00000000 
00002483 l       .debug_str	00000000 
000024eb l       .debug_str	00000000 
00002555 l       .debug_str	00000000 
000025be l       .debug_str	00000000 
00002624 l       .debug_str	00000000 
0000268b l       .debug_str	00000000 
000026f5 l       .debug_str	00000000 
0000275d l       .debug_str	00000000 
000027cc l       .debug_str	00000000 
00002833 l       .debug_str	00000000 
000003b8 l       .debug_str	00000000 
000005f4 l       .debug_str	00000000 
0000057a l       .debug_str	00000000 
0000289f l       .debug_str	00000000 
00002905 l       .debug_str	00000000 
00002948 l       .debug_str	00000000 
0000295e l       .debug_str	00000000 
000029e2 l       .debug_str	00000000 
00002a21 l       .debug_str	00000000 
00002a32 l       .debug_str	00000000 
00002a6d l       .debug_str	00000000 
0000fc6f l       .debug_str	00000000 
00002a7f l       .debug_str	00000000 
00002a81 l       .debug_str	00000000 
00002a93 l       .debug_str	00000000 
0000e2d3 l       .debug_str	00000000 
00011f09 l       .debug_str	00000000 
00001bea l       .debug_str	00000000 
000006a0 l       .debug_str	00000000 
00017093 l       .debug_str	00000000 
00002a99 l       .debug_str	00000000 
00002aa9 l       .debug_str	00000000 
00002abb l       .debug_str	00000000 
000107a8 l       .debug_str	00000000 
00019a24 l       .debug_str	00000000 
00002ac7 l       .debug_str	00000000 
000054e5 l       .debug_str	00000000 
00011d35 l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
000054f9 l       .debug_str	00000000 
00000333 l       .debug_str	00000000 
0000dd50 l       .debug_str	00000000 
0000b5cf l       .debug_str	00000000 
00016fad l       .debug_str	00000000 
00002af1 l       .debug_str	00000000 
00002ad9 l       .debug_str	00000000 
00002acb l       .debug_str	00000000 
00002ae3 l       .debug_str	00000000 
0000063e l       .debug_str	00000000 
00002b47 l       .debug_str	00000000 
00000052 l       .debug_str	00000000 
0000067f l       .debug_str	00000000 
00000685 l       .debug_str	00000000 
0000007b l       .debug_str	00000000 
0000068c l       .debug_str	00000000 
0000069e l       .debug_str	00000000 
00005354 l       .debug_str	00000000 
000006ad l       .debug_str	00000000 
00001231 l       .debug_str	00000000 
000007cf l       .debug_str	00000000 
000006b5 l       .debug_str	00000000 
000006bf l       .debug_str	00000000 
000006e7 l       .debug_str	00000000 
000006c9 l       .debug_str	00000000 
000006ed l       .debug_str	00000000 
00000756 l       .debug_str	00000000 
0000075d l       .debug_str	00000000 
00000765 l       .debug_str	00000000 
00000774 l       .debug_str	00000000 
000007b3 l       .debug_str	00000000 
000007bd l       .debug_str	00000000 
00018192 l       .debug_str	00000000 
000005e8 l       .debug_str	00000000 
000007ca l       .debug_str	00000000 
00000517 l       .debug_str	00000000 
000003dc l       .debug_str	00000000 
0000534f l       .debug_str	00000000 
000003c2 l       .debug_str	00000000 
00001d98 l       .debug_str	00000000 
00000510 l       .debug_str	00000000 
00000446 l       .debug_str	00000000 
0000bab1 l       .debug_str	00000000 
000004d7 l       .debug_str	00000000 
000003d6 l       .debug_str	00000000 
00011732 l       .debug_str	00000000 
00001d91 l       .debug_str	00000000 
0000b784 l       .debug_str	00000000 
00001c31 l       .debug_str	00000000 
00011920 l       .debug_str	00000000 
000007d3 l       .debug_str	00000000 
000007d8 l       .debug_str	00000000 
000007dc l       .debug_str	00000000 
000007e7 l       .debug_str	00000000 
00000802 l       .debug_str	00000000 
000007f2 l       .debug_str	00000000 
00000809 l       .debug_str	00000000 
0001a203 l       .debug_str	00000000 
00000836 l       .debug_str	00000000 
0000083b l       .debug_str	00000000 
0000083f l       .debug_str	00000000 
000013e4 l       .debug_str	00000000 
000121f2 l       .debug_str	00000000 
00000419 l       .debug_str	00000000 
00000568 l       .debug_str	00000000 
000004b5 l       .debug_str	00000000 
000003e8 l       .debug_str	00000000 
00000874 l       .debug_str	00000000 
0000089c l       .debug_str	00000000 
000008f9 l       .debug_str	00000000 
000004a1 l       .debug_str	00000000 
000005d2 l       .debug_str	00000000 
00000596 l       .debug_str	00000000 
0000095e l       .debug_str	00000000 
0000088c l       .debug_str	00000000 
000005da l       .debug_str	00000000 
000005c7 l       .debug_str	00000000 
0000055b l       .debug_str	00000000 
0000038e l       .debug_str	00000000 
00000506 l       .debug_str	00000000 
00000997 l       .debug_str	00000000 
0000097c l       .debug_str	00000000 
00000540 l       .debug_str	00000000 
00000507 l       .debug_str	00000000 
00000401 l       .debug_str	00000000 
00000992 l       .debug_str	00000000 
000009b7 l       .debug_str	00000000 
000003ac l       .debug_str	00000000 
000009cd l       .debug_str	00000000 
000009af l       .debug_str	00000000 
000009e3 l       .debug_str	00000000 
00000a19 l       .debug_str	00000000 
00000a2c l       .debug_str	00000000 
00000a40 l       .debug_str	00000000 
00000a7c l       .debug_str	00000000 
000052ff l       .debug_str	00000000 
00000a8d l       .debug_str	00000000 
0000f283 l       .debug_str	00000000 
00000ac7 l       .debug_str	00000000 
00000aca l       .debug_str	00000000 
00000ace l       .debug_str	00000000 
0000a744 l       .debug_str	00000000 
00016781 l       .debug_str	00000000 
0000204c l       .debug_str	00000000 
00000ad5 l       .debug_str	00000000 
00000ada l       .debug_str	00000000 
00000ae0 l       .debug_str	00000000 
00000ae7 l       .debug_str	00000000 
00013bda l       .debug_str	00000000 
000119c8 l       .debug_str	00000000 
00000aef l       .debug_str	00000000 
00000af8 l       .debug_str	00000000 
00000b55 l       .debug_str	00000000 
0000209f l       .debug_str	00000000 
000149bc l       .debug_str	00000000 
00000d8e l       .debug_str	00000000 
00000b5a l       .debug_str	00000000 
000000e6 l       .debug_str	00000000 
00019c8c l       .debug_str	00000000 
00018ba0 l       .debug_str	00000000 
00002348 l       .debug_str	00000000 
00000b5f l       .debug_str	00000000 
00000b6d l       .debug_str	00000000 
0000dbe5 l       .debug_str	00000000 
00000b77 l       .debug_str	00000000 
00000b7f l       .debug_str	00000000 
00000b87 l       .debug_str	00000000 
00000b8e l       .debug_str	00000000 
00000b9a l       .debug_str	00000000 
00000ba5 l       .debug_str	00000000 
00000bac l       .debug_str	00000000 
00000ced l       .debug_str	00000000 
0000daff l       .debug_str	00000000 
00013095 l       .debug_str	00000000 
00005ea4 l       .debug_str	00000000 
00000bb2 l       .debug_str	00000000 
00000c8a l       .debug_str	00000000 
00000bc1 l       .debug_str	00000000 
00000bc5 l       .debug_str	00000000 
00000bce l       .debug_str	00000000 
00000bda l       .debug_str	00000000 
00000bff l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000c04 l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000c7e l       .debug_str	00000000 
00000c6c l       .debug_str	00000000 
00019d72 l       .debug_str	00000000 
00000c89 l       .debug_str	00000000 
00000c91 l       .debug_str	00000000 
00000ca8 l       .debug_str	00000000 
00000ccc l       .debug_str	00000000 
0000dd5e l       .debug_str	00000000 
00000ce8 l       .debug_str	00000000 
00012f47 l       .debug_str	00000000 
00000cf1 l       .debug_str	00000000 
00000d1a l       .debug_str	00000000 
00000d0a l       .debug_str	00000000 
00000d24 l       .debug_str	00000000 
00000d78 l       .debug_str	00000000 
00001d90 l       .debug_str	00000000 
00000d80 l       .debug_str	00000000 
00000d8a l       .debug_str	00000000 
0000f8ba l       .debug_str	00000000 
00000d94 l       .debug_str	00000000 
00000de6 l       .debug_str	00000000 
00001d86 l       .debug_str	00000000 
00000e42 l       .debug_str	00000000 
00010fc8 l       .debug_str	00000000 
00000e4b l       .debug_str	00000000 
0000dc32 l       .debug_str	00000000 
00000f63 l       .debug_str	00000000 
00000e55 l       .debug_str	00000000 
00000e8c l       .debug_str	00000000 
00000ecb l       .debug_str	00000000 
00000ed2 l       .debug_str	00000000 
00000eda l       .debug_str	00000000 
00000f7b l       .debug_str	00000000 
00000ef1 l       .debug_str	00000000 
00000f19 l       .debug_str	00000000 
00000f3d l       .debug_str	00000000 
00012a0d l       .debug_str	00000000 
00000f42 l       .debug_str	00000000 
00000f4c l       .debug_str	00000000 
00000f55 l       .debug_str	00000000 
000003b7 l       .debug_str	00000000 
000005f3 l       .debug_str	00000000 
00000f5e l       .debug_str	00000000 
00000f84 l       .debug_str	00000000 
00000fb4 l       .debug_str	00000000 
00000f9c l       .debug_str	00000000 
00000fbe l       .debug_str	00000000 
000005d3 l       .debug_str	00000000 
00000fcb l       .debug_str	00000000 
00000fc6 l       .debug_str	00000000 
00000fee l       .debug_str	00000000 
00000fe3 l       .debug_str	00000000 
00001007 l       .debug_str	00000000 
0000102f l       .debug_str	00000000 
00001055 l       .debug_str	00000000 
00013ff3 l       .debug_str	00000000 
000137df l       .debug_str	00000000 
0000105f l       .debug_str	00000000 
00001066 l       .debug_str	00000000 
00001070 l       .debug_str	00000000 
0000106b l       .debug_str	00000000 
00001092 l       .debug_str	00000000 
00001088 l       .debug_str	00000000 
000010aa l       .debug_str	00000000 
000010d2 l       .debug_str	00000000 
000010f7 l       .debug_str	00000000 
00001103 l       .debug_str	00000000 
0000110b l       .debug_str	00000000 
0000112a l       .debug_str	00000000 
00001183 l       .debug_str	00000000 
000011e4 l       .debug_str	00000000 
000011ef l       .debug_str	00000000 
00001235 l       .debug_str	00000000 
00001283 l       .debug_str	00000000 
0000128d l       .debug_str	00000000 
000012c9 l       .debug_str	00000000 
0000130d l       .debug_str	00000000 
00001316 l       .debug_str	00000000 
00001326 l       .debug_str	00000000 
0000132e l       .debug_str	00000000 
00001382 l       .debug_str	00000000 
000013de l       .debug_str	00000000 
000013ea l       .debug_str	00000000 
000013f3 l       .debug_str	00000000 
000013ff l       .debug_str	00000000 
0000140b l       .debug_str	00000000 
00001414 l       .debug_str	00000000 
0000141c l       .debug_str	00000000 
00001424 l       .debug_str	00000000 
00001123 l       .debug_str	00000000 
00001439 l       .debug_str	00000000 
00001461 l       .debug_str	00000000 
00001483 l       .debug_str	00000000 
0000148b l       .debug_str	00000000 
00001494 l       .debug_str	00000000 
00012f08 l       .debug_str	00000000 
000014a2 l       .debug_str	00000000 
000014a9 l       .debug_str	00000000 
000014b9 l       .debug_str	00000000 
000014c2 l       .debug_str	00000000 
000014d0 l       .debug_str	00000000 
000014de l       .debug_str	00000000 
000014ea l       .debug_str	00000000 
0000c9ae l       .debug_str	00000000 
000014f6 l       .debug_str	00000000 
00001505 l       .debug_str	00000000 
0000150d l       .debug_str	00000000 
00001526 l       .debug_str	00000000 
00001537 l       .debug_str	00000000 
00001541 l       .debug_str	00000000 
00001549 l       .debug_str	00000000 
0000157b l       .debug_str	00000000 
00001563 l       .debug_str	00000000 
00001587 l       .debug_str	00000000 
00001417 l       .debug_str	00000000 
000015b8 l       .debug_str	00000000 
000015a0 l       .debug_str	00000000 
000015c3 l       .debug_str	00000000 
000015cc l       .debug_str	00000000 
000015ff l       .debug_str	00000000 
000015e7 l       .debug_str	00000000 
0000160c l       .debug_str	00000000 
00001614 l       .debug_str	00000000 
00001634 l       .debug_str	00000000 
0000164a l       .debug_str	00000000 
00001655 l       .debug_str	00000000 
00001665 l       .debug_str	00000000 
00001669 l       .debug_str	00000000 
00017976 l       .debug_str	00000000 
00001684 l       .debug_str	00000000 
000016ac l       .debug_str	00000000 
000016cf l       .debug_str	00000000 
000016f7 l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00001725 l       .debug_str	00000000 
00012f1b l       .debug_str	00000000 
0000173c l       .debug_str	00000000 
00001744 l       .debug_str	00000000 
0000174d l       .debug_str	00000000 
00001756 l       .debug_str	00000000 
0000175f l       .debug_str	00000000 
00001787 l       .debug_str	00000000 
000017ab l       .debug_str	00000000 
000017d3 l       .debug_str	00000000 
000017fe l       .debug_str	00000000 
00001826 l       .debug_str	00000000 
00001849 l       .debug_str	00000000 
00001852 l       .debug_str	00000000 
00001867 l       .debug_str	00000000 
00001872 l       .debug_str	00000000 
00001879 l       .debug_str	00000000 
000018a1 l       .debug_str	00000000 
000018c3 l       .debug_str	00000000 
000018d2 l       .debug_str	00000000 
000018dd l       .debug_str	00000000 
000018ec l       .debug_str	00000000 
00001901 l       .debug_str	00000000 
00001919 l       .debug_str	00000000 
0000196c l       .debug_str	00000000 
000019c7 l       .debug_str	00000000 
000019dc l       .debug_str	00000000 
000019f5 l       .debug_str	00000000 
00001a1d l       .debug_str	00000000 
0000d5cc l       .debug_str	00000000 
00001a5d l       .debug_str	00000000 
00001a8f l       .debug_str	00000000 
00001a9d l       .debug_str	00000000 
00005348 l       .debug_str	00000000 
000126cb l       .debug_str	00000000 
00001aa1 l       .debug_str	00000000 
00001aaf l       .debug_str	00000000 
00001aed l       .debug_str	00000000 
00012e3c l       .debug_str	00000000 
00001f6f l       .debug_str	00000000 
0001395f l       .debug_str	00000000 
00001afd l       .debug_str	00000000 
0000d5b3 l       .debug_str	00000000 
00005f4a l       .debug_str	00000000 
00001b02 l       .debug_str	00000000 
00001c20 l       .debug_str	00000000 
00001beb l       .debug_str	00000000 
000006a1 l       .debug_str	00000000 
00001b12 l       .debug_str	00000000 
00001b1f l       .debug_str	00000000 
00001b2b l       .debug_str	00000000 
00001b39 l       .debug_str	00000000 
00001b50 l       .debug_str	00000000 
00015f00 l       .debug_str	00000000 
00001b62 l       .debug_str	00000000 
00001b22 l       .debug_str	00000000 
00001b82 l       .debug_str	00000000 
00001b8b l       .debug_str	00000000 
00001b9d l       .debug_str	00000000 
00001bac l       .debug_str	00000000 
00001be6 l       .debug_str	00000000 
00001eb0 l       .debug_str	00000000 
00001bf7 l       .debug_str	00000000 
00001c12 l       .debug_str	00000000 
0000c7dd l       .debug_str	00000000 
00001c2c l       .debug_str	00000000 
00008193 l       .debug_str	00000000 
00001c42 l       .debug_str	00000000 
00001c36 l       .debug_str	00000000 
00001c47 l       .debug_str	00000000 
00001c50 l       .debug_str	00000000 
00001c58 l       .debug_str	00000000 
00002aae l       .debug_str	00000000 
00001c62 l       .debug_str	00000000 
00001ca9 l       .debug_str	00000000 
00001cc7 l       .debug_str	00000000 
00001cd0 l       .debug_str	00000000 
00019a23 l       .debug_str	00000000 
00001cd5 l       .debug_str	00000000 
00001d05 l       .debug_str	00000000 
00010fbd l       .debug_str	00000000 
00001d0e l       .debug_str	00000000 
00001d52 l       .debug_str	00000000 
00001cc8 l       .debug_str	00000000 
00001d6d l       .debug_str	00000000 
00001d76 l       .debug_str	00000000 
00001d80 l       .debug_str	00000000 
0800120a l     F .text	0000003a _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3cd16d96a1ab09b9E
08001244 l     F .text	00000050 _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hbb6268d049e95435E
08001294 l     F .text	0000003a _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc9a0951cf9a1a237E
080012d2 l     F .text	000002d4 _ZN5mylib13listen_sensor16read_temperature17h8d029ed87c61b3dbE
20000118 l     O .data	00000018 _ZN5mylib6mynewt6sensor17LISTENER_INTERNAL17h558a6fa11f6c60d7E
080012ce l     F .text	00000004 _ZN5mylib6mynewt6sensor21null_sensor_data_func17hd8c42d7d02a586efE
20000228 l     O .bss	00000050 _ZN5mylib9send_coap12NETWORK_TASK17had6f3c509df1c5ddE
20000678 l     O .bss	00000001 _ZN5mylib9send_coap16NETWORK_IS_READY17h9c862a27d6aefdb0E.0.0
080015a6 l     F .text	0000011a _ZN5mylib9send_coap17network_task_func17h4cb9c6d5020b51c1E
20000278 l     O .bss	00000400 _ZN5mylib9send_coap18NETWORK_TASK_STACK17hfae71d0c8a5b92e9E
0800d7c3 l     O .text	00000010 str.2
00000000 l    df *ABS*	00000000 cortex-m.o
00000000 l    df *ABS*	00000000 cstr_core.47f33sl1-cgu.0
0001a586 l       .debug_str	00000000 
00004108 l       .debug_str	00000000 
0000410c l       .debug_str	00000000 
00004111 l       .debug_str	00000000 
0000413a l       .debug_str	00000000 
00004145 l       .debug_str	00000000 
0000416a l       .debug_str	00000000 
0000416d l       .debug_str	00000000 
00012ec8 l       .debug_str	00000000 
00013f36 l       .debug_str	00000000 
00001231 l       .debug_str	00000000 
000041cf l       .debug_str	00000000 
0000423f l       .debug_str	00000000 
00004253 l       .debug_str	00000000 
0000426f l       .debug_str	00000000 
000042e0 l       .debug_str	00000000 
000042f0 l       .debug_str	00000000 
0000434f l       .debug_str	00000000 
000042e8 l       .debug_str	00000000 
000043b0 l       .debug_str	00000000 
000043f8 l       .debug_str	00000000 
00004403 l       .debug_str	00000000 
0000444b l       .debug_str	00000000 
00004475 l       .debug_str	00000000 
000044aa l       .debug_str	00000000 
000044e4 l       .debug_str	00000000 
00004562 l       .debug_str	00000000 
0000456c l       .debug_str	00000000 
000045fa l       .debug_str	00000000 
0000464c l       .debug_str	00000000 
00003d91 l       .debug_str	00000000 
000046ac l       .debug_str	00000000 
00004711 l       .debug_str	00000000 
00004741 l       .debug_str	00000000 
0000474a l       .debug_str	00000000 
00004786 l       .debug_str	00000000 
0000479a l       .debug_str	00000000 
00004a54 l       .debug_str	00000000 
00001eb0 l       .debug_str	00000000 
0000479f l       .debug_str	00000000 
000047da l       .debug_str	00000000 
00004808 l       .debug_str	00000000 
00001f70 l       .debug_str	00000000 
0000480f l       .debug_str	00000000 
0000481b l       .debug_str	00000000 
00004825 l       .debug_str	00000000 
0000482f l       .debug_str	00000000 
00004852 l       .debug_str	00000000 
000050fe l       .debug_str	00000000 
000048a7 l       .debug_str	00000000 
00004907 l       .debug_str	00000000 
00004913 l       .debug_str	00000000 
00004963 l       .debug_str	00000000 
000049c6 l       .debug_str	00000000 
000049ce l       .debug_str	00000000 
000049f5 l       .debug_str	00000000 
00004a20 l       .debug_str	00000000 
00012ec2 l       .debug_str	00000000 
00004a41 l       .debug_str	00000000 
00004a48 l       .debug_str	00000000 
00018191 l       .debug_str	00000000 
00001d80 l       .debug_str	00000000 
00004a6a l       .debug_str	00000000 
00004a72 l       .debug_str	00000000 
00004a7d l       .debug_str	00000000 
00004a88 l       .debug_str	00000000 
0000063e l       .debug_str	00000000 
00002afa l       .debug_str	00000000 
00002b52 l       .debug_str	00000000 
00000b87 l       .debug_str	00000000 
00001c2c l       .debug_str	00000000 
000007cf l       .debug_str	00000000 
00002b9f l       .debug_str	00000000 
0000083b l       .debug_str	00000000 
00002348 l       .debug_str	00000000 
00002bab l       .debug_str	00000000 
00004a06 l       .debug_str	00000000 
000049fa l       .debug_str	00000000 
000049c7 l       .debug_str	00000000 
00001c31 l       .debug_str	00000000 
0000f283 l       .debug_str	00000000 
00001d98 l       .debug_str	00000000 
00000ac7 l       .debug_str	00000000 
00000aca l       .debug_str	00000000 
00000ace l       .debug_str	00000000 
0000a744 l       .debug_str	00000000 
00016781 l       .debug_str	00000000 
0000204c l       .debug_str	00000000 
00000ad5 l       .debug_str	00000000 
00000ada l       .debug_str	00000000 
00000ae0 l       .debug_str	00000000 
00000ae7 l       .debug_str	00000000 
00013bda l       .debug_str	00000000 
0000f3d5 l       .debug_str	00000000 
00005f46 l       .debug_str	00000000 
00002bbc l       .debug_str	00000000 
00002bc1 l       .debug_str	00000000 
00002bc7 l       .debug_str	00000000 
00002bcf l       .debug_str	00000000 
000119c8 l       .debug_str	00000000 
00000aef l       .debug_str	00000000 
00002bd8 l       .debug_str	00000000 
00000b55 l       .debug_str	00000000 
000149bc l       .debug_str	00000000 
00000d8e l       .debug_str	00000000 
00000b5a l       .debug_str	00000000 
000000e6 l       .debug_str	00000000 
00019c8c l       .debug_str	00000000 
00018ba0 l       .debug_str	00000000 
00011920 l       .debug_str	00000000 
000007d3 l       .debug_str	00000000 
0001a203 l       .debug_str	00000000 
00000836 l       .debug_str	00000000 
00000b5f l       .debug_str	00000000 
00000b6d l       .debug_str	00000000 
0000dbe5 l       .debug_str	00000000 
00000b77 l       .debug_str	00000000 
00000b7f l       .debug_str	00000000 
00000a2c l       .debug_str	00000000 
00000b8e l       .debug_str	00000000 
00000b9a l       .debug_str	00000000 
00000ba5 l       .debug_str	00000000 
00000bac l       .debug_str	00000000 
00000ced l       .debug_str	00000000 
0000daff l       .debug_str	00000000 
00013095 l       .debug_str	00000000 
00005ea4 l       .debug_str	00000000 
00000bb2 l       .debug_str	00000000 
00000c8a l       .debug_str	00000000 
00000bc1 l       .debug_str	00000000 
00000bc5 l       .debug_str	00000000 
00000bce l       .debug_str	00000000 
00000bda l       .debug_str	00000000 
00000bff l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000c04 l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000c7e l       .debug_str	00000000 
00000c6c l       .debug_str	00000000 
00019d72 l       .debug_str	00000000 
00000c89 l       .debug_str	00000000 
00000c91 l       .debug_str	00000000 
00000ca8 l       .debug_str	00000000 
00000ccc l       .debug_str	00000000 
0000dd5e l       .debug_str	00000000 
00000ce8 l       .debug_str	00000000 
00012f47 l       .debug_str	00000000 
00000cf1 l       .debug_str	00000000 
00000d1a l       .debug_str	00000000 
00000d0a l       .debug_str	00000000 
00002c37 l       .debug_str	00000000 
00002c9e l       .debug_str	00000000 
00002ca7 l       .debug_str	00000000 
00002cbb l       .debug_str	00000000 
00004a81 l       .debug_str	00000000 
00002cc4 l       .debug_str	00000000 
000052ff l       .debug_str	00000000 
00002ccf l       .debug_str	00000000 
00003651 l       .debug_str	00000000 
0001a198 l       .debug_str	00000000 
000196bc l       .debug_str	00000000 
00002cda l       .debug_str	00000000 
00002d6f l       .debug_str	00000000 
00013435 l       .debug_str	00000000 
00001e28 l       .debug_str	00000000 
00002d92 l       .debug_str	00000000 
00002d7b l       .debug_str	00000000 
000178cb l       .debug_str	00000000 
00002d9f l       .debug_str	00000000 
00004a43 l       .debug_str	00000000 
00002da5 l       .debug_str	00000000 
00002e3c l       .debug_str	00000000 
000179ae l       .debug_str	00000000 
000102d0 l       .debug_str	00000000 
00002e62 l       .debug_str	00000000 
00002e4b l       .debug_str	00000000 
00002e48 l       .debug_str	00000000 
00002e4a l       .debug_str	00000000 
00003e0e l       .debug_str	00000000 
0000c281 l       .debug_str	00000000 
00002e70 l       .debug_str	00000000 
00002ea9 l       .debug_str	00000000 
0000599f l       .debug_str	00000000 
00018794 l       .debug_str	00000000 
00002ebf l       .debug_str	00000000 
00002f0a l       .debug_str	00000000 
00001665 l       .debug_str	00000000 
00002f1a l       .debug_str	00000000 
00002f28 l       .debug_str	00000000 
000111d1 l       .debug_str	00000000 
0001791e l       .debug_str	00000000 
00002f2c l       .debug_str	00000000 
00002f73 l       .debug_str	00000000 
00002f7f l       .debug_str	00000000 
00002fd4 l       .debug_str	00000000 
00002fde l       .debug_str	00000000 
00002fe5 l       .debug_str	00000000 
0000300c l       .debug_str	00000000 
0000f450 l       .debug_str	00000000 
00003019 l       .debug_str	00000000 
00003024 l       .debug_str	00000000 
00003028 l       .debug_str	00000000 
00003062 l       .debug_str	00000000 
0001884f l       .debug_str	00000000 
0000f0ea l       .debug_str	00000000 
00010fc8 l       .debug_str	00000000 
00003081 l       .debug_str	00000000 
000030a7 l       .debug_str	00000000 
000030b3 l       .debug_str	00000000 
000030be l       .debug_str	00000000 
00003118 l       .debug_str	00000000 
00003126 l       .debug_str	00000000 
000031c0 l       .debug_str	00000000 
000031d1 l       .debug_str	00000000 
000031f6 l       .debug_str	00000000 
00004567 l       .debug_str	00000000 
00003216 l       .debug_str	00000000 
000032bf l       .debug_str	00000000 
000032d0 l       .debug_str	00000000 
000032d6 l       .debug_str	00000000 
00006022 l       .debug_str	00000000 
00003323 l       .debug_str	00000000 
00003329 l       .debug_str	00000000 
0000337c l       .debug_str	00000000 
00003384 l       .debug_str	00000000 
0000338e l       .debug_str	00000000 
0000343a l       .debug_str	00000000 
00001f61 l       .debug_str	00000000 
00001d91 l       .debug_str	00000000 
00001f6f l       .debug_str	00000000 
00001f68 l       .debug_str	00000000 
00001f74 l       .debug_str	00000000 
00015157 l       .debug_str	00000000 
00001f7c l       .debug_str	00000000 
00001f81 l       .debug_str	00000000 
00001f84 l       .debug_str	00000000 
000111d7 l       .debug_str	00000000 
00001f8d l       .debug_str	00000000 
00001f94 l       .debug_str	00000000 
00001f90 l       .debug_str	00000000 
00001f9a l       .debug_str	00000000 
00013cec l       .debug_str	00000000 
00001fa2 l       .debug_str	00000000 
00001fc7 l       .debug_str	00000000 
00001fad l       .debug_str	00000000 
00001fd0 l       .debug_str	00000000 
00001fef l       .debug_str	00000000 
00005811 l       .debug_str	00000000 
00002016 l       .debug_str	00000000 
00002048 l       .debug_str	00000000 
00008193 l       .debug_str	00000000 
00001c42 l       .debug_str	00000000 
00001cd5 l       .debug_str	00000000 
00001d05 l       .debug_str	00000000 
00005348 l       .debug_str	00000000 
00001c36 l       .debug_str	00000000 
00010fbd l       .debug_str	00000000 
00003473 l       .debug_str	00000000 
00001e1e l       .debug_str	00000000 
000034f6 l       .debug_str	00000000 
00001eb2 l       .debug_str	00000000 
0000bdd5 l       .debug_str	00000000 
0000357c l       .debug_str	00000000 
00001f36 l       .debug_str	00000000 
0001a576 l       .debug_str	00000000 
0000ea06 l       .debug_str	00000000 
000035f1 l       .debug_str	00000000 
000035f9 l       .debug_str	00000000 
00003602 l       .debug_str	00000000 
00001d86 l       .debug_str	00000000 
0000360a l       .debug_str	00000000 
00003bf1 l       .debug_str	00000000 
00003cd9 l       .debug_str	00000000 
0000361b l       .debug_str	00000000 
00003625 l       .debug_str	00000000 
0000364d l       .debug_str	00000000 
0000392c l       .debug_str	00000000 
00003a94 l       .debug_str	00000000 
00003656 l       .debug_str	00000000 
000036b9 l       .debug_str	00000000 
0000372c l       .debug_str	00000000 
000069b4 l       .debug_str	00000000 
0000eb06 l       .debug_str	00000000 
00003777 l       .debug_str	00000000 
0000377d l       .debug_str	00000000 
000037c5 l       .debug_str	00000000 
000037cd l       .debug_str	00000000 
00006743 l       .debug_str	00000000 
00003814 l       .debug_str	00000000 
000038a8 l       .debug_str	00000000 
00003908 l       .debug_str	00000000 
00003996 l       .debug_str	00000000 
0000399a l       .debug_str	00000000 
00003a2c l       .debug_str	00000000 
00003a70 l       .debug_str	00000000 
00003add l       .debug_str	00000000 
00003b56 l       .debug_str	00000000 
00003bca l       .debug_str	00000000 
00003bd3 l       .debug_str	00000000 
00003bdf l       .debug_str	00000000 
00013947 l       .debug_str	00000000 
00003bfa l       .debug_str	00000000 
00003c7a l       .debug_str	00000000 
00003cbe l       .debug_str	00000000 
00003cfd l       .debug_str	00000000 
00003d3f l       .debug_str	00000000 
00011b5d l       .debug_str	00000000 
00003d52 l       .debug_str	00000000 
00003d8a l       .debug_str	00000000 
00016cb5 l       .debug_str	00000000 
000126cb l       .debug_str	00000000 
00003d99 l       .debug_str	00000000 
00003e09 l       .debug_str	00000000 
00003e16 l       .debug_str	00000000 
00003e1c l       .debug_str	00000000 
00003e22 l       .debug_str	00000000 
00003eae l       .debug_str	00000000 
00003ec7 l       .debug_str	00000000 
00003f00 l       .debug_str	00000000 
00003f36 l       .debug_str	00000000 
00003f75 l       .debug_str	00000000 
00003f7c l       .debug_str	00000000 
00003fa5 l       .debug_str	00000000 
00018ce0 l       .debug_str	00000000 
00003fac l       .debug_str	00000000 
00003fb3 l       .debug_str	00000000 
00003fd9 l       .debug_str	00000000 
00003fe0 l       .debug_str	00000000 
00003fe9 l       .debug_str	00000000 
00004013 l       .debug_str	00000000 
0000d153 l       .debug_str	00000000 
00004017 l       .debug_str	00000000 
0000407b l       .debug_str	00000000 
00005f40 l       .debug_str	00000000 
00004085 l       .debug_str	00000000 
000040fe l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 core.4aq1nyye-cgu.0
0000063e l       .debug_str	00000000 
00004a94 l       .debug_str	00000000 
00004aa7 l       .debug_str	00000000 
00001c31 l       .debug_str	00000000 
000119c8 l       .debug_str	00000000 
00004ad8 l       .debug_str	00000000 
00004ae0 l       .debug_str	00000000 
00004ae9 l       .debug_str	00000000 
00004b32 l       .debug_str	00000000 
000007cf l       .debug_str	00000000 
00000a2c l       .debug_str	00000000 
00004af0 l       .debug_str	00000000 
00004b2f l       .debug_str	00000000 
00004b38 l       .debug_str	00000000 
00004b7a l       .debug_str	00000000 
00004b84 l       .debug_str	00000000 
00004bc7 l       .debug_str	00000000 
00004bd1 l       .debug_str	00000000 
00004c14 l       .debug_str	00000000 
00004c1e l       .debug_str	00000000 
00004c61 l       .debug_str	00000000 
00004c6c l       .debug_str	00000000 
00004cb1 l       .debug_str	00000000 
00004cbc l       .debug_str	00000000 
00004d01 l       .debug_str	00000000 
00004d07 l       .debug_str	00000000 
0000083b l       .debug_str	00000000 
000052f5 l       .debug_str	00000000 
00001665 l       .debug_str	00000000 
000052fa l       .debug_str	00000000 
00004d14 l       .debug_str	00000000 
00004d18 l       .debug_str	00000000 
00004d28 l       .debug_str	00000000 
00000b87 l       .debug_str	00000000 
00002a93 l       .debug_str	00000000 
00000aef l       .debug_str	00000000 
00004d6e l       .debug_str	00000000 
00004d83 l       .debug_str	00000000 
00003651 l       .debug_str	00000000 
000035f9 l       .debug_str	00000000 
00003602 l       .debug_str	00000000 
00001f70 l       .debug_str	00000000 
00000bac l       .debug_str	00000000 
00000ced l       .debug_str	00000000 
00001d98 l       .debug_str	00000000 
00001d91 l       .debug_str	00000000 
00019d72 l       .debug_str	00000000 
00000c89 l       .debug_str	00000000 
00000c8a l       .debug_str	00000000 
00001d86 l       .debug_str	00000000 
0001a203 l       .debug_str	00000000 
0000360a l       .debug_str	00000000 
00003bf1 l       .debug_str	00000000 
000059b6 l       .debug_str	00000000 
000149bc l       .debug_str	00000000 
00004d8d l       .debug_str	00000000 
0000bdd5 l       .debug_str	00000000 
0000c281 l       .debug_str	00000000 
000056be l       .debug_str	00000000 
0000361b l       .debug_str	00000000 
00011920 l       .debug_str	00000000 
000007d3 l       .debug_str	00000000 
000000e6 l       .debug_str	00000000 
0000ea42 l       .debug_str	00000000 
00004da5 l       .debug_str	00000000 
00004daa l       .debug_str	00000000 
00004daf l       .debug_str	00000000 
00005496 l       .debug_str	00000000 
00016cb5 l       .debug_str	00000000 
00004db9 l       .debug_str	00000000 
0000d4aa l       .debug_str	00000000 
00004dc4 l       .debug_str	00000000 
00000326 l       .debug_str	00000000 
00005450 l       .debug_str	00000000 
00004dce l       .debug_str	00000000 
00002348 l       .debug_str	00000000 
00005490 l       .debug_str	00000000 
00005470 l       .debug_str	00000000 
00002e62 l       .debug_str	00000000 
000057f8 l       .debug_str	00000000 
00000836 l       .debug_str	00000000 
00005707 l       .debug_str	00000000 
0000364d l       .debug_str	00000000 
00002e48 l       .debug_str	00000000 
00004ddc l       .debug_str	00000000 
00004e54 l       .debug_str	00000000 
00005642 l       .debug_str	00000000 
00005685 l       .debug_str	00000000 
00004e66 l       .debug_str	00000000 
00004eda l       .debug_str	00000000 
0000573e l       .debug_str	00000000 
00005781 l       .debug_str	00000000 
00004eec l       .debug_str	00000000 
00008193 l       .debug_str	00000000 
000127a2 l       .debug_str	00000000 
000196bc l       .debug_str	00000000 
0000582a l       .debug_str	00000000 
000057b2 l       .debug_str	00000000 
00004f60 l       .debug_str	00000000 
00013435 l       .debug_str	00000000 
00004fb8 l       .debug_str	00000000 
00004fc0 l       .debug_str	00000000 
00003fe0 l       .debug_str	00000000 
00000ce8 l       .debug_str	00000000 
00012f47 l       .debug_str	00000000 
00001f6f l       .debug_str	00000000 
00004fc8 l       .debug_str	00000000 
00004fcf l       .debug_str	00000000 
00003fd9 l       .debug_str	00000000 
00004fdb l       .debug_str	00000000 
00004fe5 l       .debug_str	00000000 
00004ff2 l       .debug_str	00000000 
00004fff l       .debug_str	00000000 
000052ff l       .debug_str	00000000 
00005014 l       .debug_str	00000000 
0001954c l       .debug_str	00000000 
0000501d l       .debug_str	00000000 
00005031 l       .debug_str	00000000 
00019686 l       .debug_str	00000000 
00005348 l       .debug_str	00000000 
00005047 l       .debug_str	00000000 
0000504c l       .debug_str	00000000 
0000505e l       .debug_str	00000000 
00005086 l       .debug_str	00000000 
00005090 l       .debug_str	00000000 
000050a0 l       .debug_str	00000000 
000050f9 l       .debug_str	00000000 
00005101 l       .debug_str	00000000 
0000510e l       .debug_str	00000000 
0000511b l       .debug_str	00000000 
00005890 l       .debug_str	00000000 
0000c16d l       .debug_str	00000000 
00005128 l       .debug_str	00000000 
00005155 l       .debug_str	00000000 
00005184 l       .debug_str	00000000 
000051ab l       .debug_str	00000000 
000051ca l       .debug_str	00000000 
000051da l       .debug_str	00000000 
0000a744 l       .debug_str	00000000 
0000520c l       .debug_str	00000000 
0000521b l       .debug_str	00000000 
00005226 l       .debug_str	00000000 
00002cbb l       .debug_str	00000000 
0000dbe5 l       .debug_str	00000000 
00000b77 l       .debug_str	00000000 
00000b7f l       .debug_str	00000000 
00000b8e l       .debug_str	00000000 
00000b9a l       .debug_str	00000000 
0000525b l       .debug_str	00000000 
00005286 l       .debug_str	00000000 
00005266 l       .debug_str	00000000 
0000526c l       .debug_str	00000000 
0000f55a l       .debug_str	00000000 
00005291 l       .debug_str	00000000 
00005296 l       .debug_str	00000000 
000102d0 l       .debug_str	00000000 
00005ea4 l       .debug_str	00000000 
00005e9d l       .debug_str	00000000 
0000529c l       .debug_str	00000000 
00005ecb l       .debug_str	00000000 
00005eff l       .debug_str	00000000 
000052a2 l       .debug_str	00000000 
000052ae l       .debug_str	00000000 
000052e5 l       .debug_str	00000000 
00005ea8 l       .debug_str	00000000 
00005ef5 l       .debug_str	00000000 
000052c6 l       .debug_str	00000000 
000052b3 l       .debug_str	00000000 
000052cc l       .debug_str	00000000 
000052f4 l       .debug_str	00000000 
000052f9 l       .debug_str	00000000 
000052fe l       .debug_str	00000000 
00005304 l       .debug_str	00000000 
0000530c l       .debug_str	00000000 
00005311 l       .debug_str	00000000 
00007709 l       .debug_str	00000000 
0000a700 l       .debug_str	00000000 
00005317 l       .debug_str	00000000 
0000533f l       .debug_str	00000000 
00005321 l       .debug_str	00000000 
00005347 l       .debug_str	00000000 
0000534f l       .debug_str	00000000 
0000534e l       .debug_str	00000000 
000049c7 l       .debug_str	00000000 
00005354 l       .debug_str	00000000 
00005353 l       .debug_str	00000000 
00005358 l       .debug_str	00000000 
00005360 l       .debug_str	00000000 
0000a9ff l       .debug_str	00000000 
00005366 l       .debug_str	00000000 
0000538d l       .debug_str	00000000 
00005371 l       .debug_str	00000000 
0000509a l       .debug_str	00000000 
00005395 l       .debug_str	00000000 
000053b2 l       .debug_str	00000000 
0000539d l       .debug_str	00000000 
000053c1 l       .debug_str	00000000 
000053c5 l       .debug_str	00000000 
000053d2 l       .debug_str	00000000 
000053db l       .debug_str	00000000 
0000b5ef l       .debug_str	00000000 
000053f1 l       .debug_str	00000000 
000053e5 l       .debug_str	00000000 
000053fe l       .debug_str	00000000 
00005406 l       .debug_str	00000000 
00005412 l       .debug_str	00000000 
00005435 l       .debug_str	00000000 
0000541f l       .debug_str	00000000 
00005443 l       .debug_str	00000000 
00005463 l       .debug_str	00000000 
00005483 l       .debug_str	00000000 
0000549e l       .debug_str	00000000 
000054b9 l       .debug_str	00000000 
000054bf l       .debug_str	00000000 
000054c3 l       .debug_str	00000000 
000054d4 l       .debug_str	00000000 
000054c7 l       .debug_str	00000000 
00002ac7 l       .debug_str	00000000 
000054e5 l       .debug_str	00000000 
000054e4 l       .debug_str	00000000 
00001f61 l       .debug_str	00000000 
00001f68 l       .debug_str	00000000 
00001f74 l       .debug_str	00000000 
00016781 l       .debug_str	00000000 
0000204c l       .debug_str	00000000 
00015157 l       .debug_str	00000000 
00001f7c l       .debug_str	00000000 
00001f81 l       .debug_str	00000000 
00001f84 l       .debug_str	00000000 
000111d7 l       .debug_str	00000000 
00000b5a l       .debug_str	00000000 
00019c8c l       .debug_str	00000000 
00000ad5 l       .debug_str	00000000 
00000ada l       .debug_str	00000000 
00000ae0 l       .debug_str	00000000 
00000ae7 l       .debug_str	00000000 
00013bda l       .debug_str	00000000 
00000d8e l       .debug_str	00000000 
00000b6d l       .debug_str	00000000 
00001f8d l       .debug_str	00000000 
00001f94 l       .debug_str	00000000 
00001f90 l       .debug_str	00000000 
00001f9a l       .debug_str	00000000 
00013cec l       .debug_str	00000000 
00018ba0 l       .debug_str	00000000 
00001fa2 l       .debug_str	00000000 
00001fc7 l       .debug_str	00000000 
00001fad l       .debug_str	00000000 
00001fd0 l       .debug_str	00000000 
00001fef l       .debug_str	00000000 
0000dd5e l       .debug_str	00000000 
0000daff l       .debug_str	00000000 
00013095 l       .debug_str	00000000 
00000bb2 l       .debug_str	00000000 
00000bc1 l       .debug_str	00000000 
00000bc5 l       .debug_str	00000000 
00000bce l       .debug_str	00000000 
00000bda l       .debug_str	00000000 
00000bff l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000c04 l       .debug_str	00000000 
0000f283 l       .debug_str	00000000 
00000ac7 l       .debug_str	00000000 
00000aca l       .debug_str	00000000 
00000ace l       .debug_str	00000000 
00000b5f l       .debug_str	00000000 
00000ba5 l       .debug_str	00000000 
00000c91 l       .debug_str	00000000 
00000ca8 l       .debug_str	00000000 
00000ccc l       .debug_str	00000000 
00000d1a l       .debug_str	00000000 
00000d0a l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000c7e l       .debug_str	00000000 
00000c6c l       .debug_str	00000000 
00000cf1 l       .debug_str	00000000 
00005811 l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
000054f9 l       .debug_str	00000000 
000054ea l       .debug_str	00000000 
0000dd50 l       .debug_str	00000000 
0000b5cf l       .debug_str	00000000 
00016fad l       .debug_str	00000000 
00002af1 l       .debug_str	00000000 
00002ae3 l       .debug_str	00000000 
00005517 l       .debug_str	00000000 
0000551d l       .debug_str	00000000 
00005542 l       .debug_str	00000000 
00005522 l       .debug_str	00000000 
0000559b l       .debug_str	00000000 
0000557b l       .debug_str	00000000 
0000b5e1 l       .debug_str	00000000 
000055f2 l       .debug_str	00000000 
000055f7 l       .debug_str	00000000 
000055fd l       .debug_str	00000000 
00005620 l       .debug_str	00000000 
00005602 l       .debug_str	00000000 
0000562b l       .debug_str	00000000 
00005676 l       .debug_str	00000000 
000056a7 l       .debug_str	00000000 
000056f8 l       .debug_str	00000000 
00005727 l       .debug_str	00000000 
00005772 l       .debug_str	00000000 
000057a3 l       .debug_str	00000000 
000057d4 l       .debug_str	00000000 
000057eb l       .debug_str	00000000 
00005804 l       .debug_str	00000000 
0000581b l       .debug_str	00000000 
0000585b l       .debug_str	00000000 
00005849 l       .debug_str	00000000 
00005848 l       .debug_str	00000000 
00005866 l       .debug_str	00000000 
0000586f l       .debug_str	00000000 
0000587c l       .debug_str	00000000 
0000587b l       .debug_str	00000000 
00005884 l       .debug_str	00000000 
000058b1 l       .debug_str	00000000 
0000589c l       .debug_str	00000000 
000058ce l       .debug_str	00000000 
000058da l       .debug_str	00000000 
00005984 l       .debug_str	00000000 
000058e6 l       .debug_str	00000000 
000058ed l       .debug_str	00000000 
000058f6 l       .debug_str	00000000 
00005904 l       .debug_str	00000000 
0000590b l       .debug_str	00000000 
00005913 l       .debug_str	00000000 
0000591a l       .debug_str	00000000 
00005960 l       .debug_str	00000000 
0000593b l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
0000594b l       .debug_str	00000000 
0000596f l       .debug_str	00000000 
0000599f l       .debug_str	00000000 
00005990 l       .debug_str	00000000 
000059aa l       .debug_str	00000000 
0000d41e l       .debug_str	00000000 
000059d3 l       .debug_str	00000000 
000059bc l       .debug_str	00000000 
000059f1 l       .debug_str	00000000 
00005a14 l       .debug_str	00000000 
000059fd l       .debug_str	00000000 
00005a5e l       .debug_str	00000000 
00005a52 l       .debug_str	00000000 
00005095 l       .debug_str	00000000 
00005a7b l       .debug_str	00000000 
00005a64 l       .debug_str	00000000 
00005ac4 l       .debug_str	00000000 
00005aec l       .debug_str	00000000 
00005ad5 l       .debug_str	00000000 
000111d1 l       .debug_str	00000000 
0001791e l       .debug_str	00000000 
00013947 l       .debug_str	00000000 
00005b9b l       .debug_str	00000000 
00005b7d l       .debug_str	00000000 
00005c91 l       .debug_str	00000000 
00005c71 l       .debug_str	00000000 
00005d04 l       .debug_str	00000000 
00005ce4 l       .debug_str	00000000 
0001a0c3 l       .debug_str	00000000 
00005d57 l       .debug_str	00000000 
00005d5b l       .debug_str	00000000 
000128c2 l       .debug_str	00000000 
00012048 l       .debug_str	00000000 
0000416a l       .debug_str	00000000 
00005d5e l       .debug_str	00000000 
00005e24 l       .debug_str	00000000 
00005d62 l       .debug_str	00000000 
00005d61 l       .debug_str	00000000 
00005d67 l       .debug_str	00000000 
00005e72 l       .debug_str	00000000 
0000be74 l       .debug_str	00000000 
00005d85 l       .debug_str	00000000 
00005d73 l       .debug_str	00000000 
00005daa l       .debug_str	00000000 
00005e39 l       .debug_str	00000000 
00005dc8 l       .debug_str	00000000 
00005db6 l       .debug_str	00000000 
00005ded l       .debug_str	00000000 
00005e06 l       .debug_str	00000000 
00005df4 l       .debug_str	00000000 
00005e12 l       .debug_str	00000000 
00005e2a l       .debug_str	00000000 
00005e63 l       .debug_str	00000000 
00005e9c l       .debug_str	00000000 
00005ea7 l       .debug_str	00000000 
00005eca l       .debug_str	00000000 
00005efe l       .debug_str	00000000 
00005f20 l       .debug_str	00000000 
00005f14 l       .debug_str	00000000 
00005f38 l       .debug_str	00000000 
00005f2c l       .debug_str	00000000 
00005f46 l       .debug_str	00000000 
00005f45 l       .debug_str	00000000 
00001231 l       .debug_str	00000000 
0000209f l       .debug_str	00000000 
00005f4a l       .debug_str	00000000 
00005f49 l       .debug_str	00000000 
00005f4f l       .debug_str	00000000 
00005f4e l       .debug_str	00000000 
00005f53 l       .debug_str	00000000 
00005f61 l       .debug_str	00000000 
00005f6b l       .debug_str	00000000 
00005f7a l       .debug_str	00000000 
00005faa l       .debug_str	00000000 
00005fb4 l       .debug_str	00000000 
00005fc4 l       .debug_str	00000000 
00005fd2 l       .debug_str	00000000 
00005fe1 l       .debug_str	00000000 
00005fea l       .debug_str	00000000 
00005ff6 l       .debug_str	00000000 
00002f0a l       .debug_str	00000000 
00002f73 l       .debug_str	00000000 
0000600a l       .debug_str	00000000 
0000601a l       .debug_str	00000000 
00006026 l       .debug_str	00000000 
0000602f l       .debug_str	00000000 
0000603a l       .debug_str	00000000 
00002f7b l       .debug_str	00000000 
00006052 l       .debug_str	00000000 
0000605d l       .debug_str	00000000 
00006094 l       .debug_str	00000000 
0000609d l       .debug_str	00000000 
000060b0 l       .debug_str	00000000 
0000f3d5 l       .debug_str	00000000 
000060b9 l       .debug_str	00000000 
000060c4 l       .debug_str	00000000 
000060f0 l       .debug_str	00000000 
00006195 l       .debug_str	00000000 
000061a4 l       .debug_str	00000000 
000061ca l       .debug_str	00000000 
00006205 l       .debug_str	00000000 
00006216 l       .debug_str	00000000 
0000622c l       .debug_str	00000000 
00006238 l       .debug_str	00000000 
00004907 l       .debug_str	00000000 
00006264 l       .debug_str	00000000 
000062a0 l       .debug_str	00000000 
00006022 l       .debug_str	00000000 
000062b0 l       .debug_str	00000000 
000062bb l       .debug_str	00000000 
000062c9 l       .debug_str	00000000 
000062e9 l       .debug_str	00000000 
0000aad1 l       .debug_str	00000000 
000062f6 l       .debug_str	00000000 
00002d6f l       .debug_str	00000000 
00005fd7 l       .debug_str	00000000 
000062fe l       .debug_str	00000000 
00006335 l       .debug_str	00000000 
00006380 l       .debug_str	00000000 
000063a4 l       .debug_str	00000000 
00002e3c l       .debug_str	00000000 
000063b1 l       .debug_str	00000000 
000063dd l       .debug_str	00000000 
00006427 l       .debug_str	00000000 
00006435 l       .debug_str	00000000 
00003bca l       .debug_str	00000000 
000069b4 l       .debug_str	00000000 
000037c5 l       .debug_str	00000000 
00006462 l       .debug_str	00000000 
00003d3f l       .debug_str	00000000 
00006478 l       .debug_str	00000000 
00006482 l       .debug_str	00000000 
0000648f l       .debug_str	00000000 
000068c4 l       .debug_str	00000000 
0000649c l       .debug_str	00000000 
000064b3 l       .debug_str	00000000 
000064c2 l       .debug_str	00000000 
000064f1 l       .debug_str	00000000 
00001e1e l       .debug_str	00000000 
00001f36 l       .debug_str	00000000 
00006500 l       .debug_str	00000000 
0000653f l       .debug_str	00000000 
00006555 l       .debug_str	00000000 
0000656d l       .debug_str	00000000 
00003997 l       .debug_str	00000000 
00002fd4 l       .debug_str	00000000 
000126cb l       .debug_str	00000000 
00006586 l       .debug_str	00000000 
0000659e l       .debug_str	00000000 
000065b2 l       .debug_str	00000000 
000065c0 l       .debug_str	00000000 
000065df l       .debug_str	00000000 
000065ec l       .debug_str	00000000 
000065fc l       .debug_str	00000000 
0000661b l       .debug_str	00000000 
0000663c l       .debug_str	00000000 
00006665 l       .debug_str	00000000 
00006696 l       .debug_str	00000000 
000066a8 l       .debug_str	00000000 
000066d5 l       .debug_str	00000000 
000066f5 l       .debug_str	00000000 
0000413a l       .debug_str	00000000 
00006736 l       .debug_str	00000000 
00006743 l       .debug_str	00000000 
0000673e l       .debug_str	00000000 
0000674c l       .debug_str	00000000 
0000676f l       .debug_str	00000000 
00006779 l       .debug_str	00000000 
000032bf l       .debug_str	00000000 
000067ab l       .debug_str	00000000 
0000337c l       .debug_str	00000000 
000067d0 l       .debug_str	00000000 
000067df l       .debug_str	00000000 
000067ee l       .debug_str	00000000 
000067f7 l       .debug_str	00000000 
0000680d l       .debug_str	00000000 
00006818 l       .debug_str	00000000 
000050fe l       .debug_str	00000000 
000040fe l       .debug_str	00000000 
00006820 l       .debug_str	00000000 
00006828 l       .debug_str	00000000 
00006836 l       .debug_str	00000000 
00006840 l       .debug_str	00000000 
0000685a l       .debug_str	00000000 
00006868 l       .debug_str	00000000 
00006ace l       .debug_str	00000000 
0001a576 l       .debug_str	00000000 
00006879 l       .debug_str	00000000 
00002048 l       .debug_str	00000000 
000068a3 l       .debug_str	00000000 
000068ac l       .debug_str	00000000 
000068bc l       .debug_str	00000000 
000068c8 l       .debug_str	00000000 
00003f75 l       .debug_str	00000000 
00002ea9 l       .debug_str	00000000 
0000300c l       .debug_str	00000000 
00003062 l       .debug_str	00000000 
000030a7 l       .debug_str	00000000 
00003118 l       .debug_str	00000000 
000031c0 l       .debug_str	00000000 
000068d2 l       .debug_str	00000000 
000145c3 l       .debug_str	00000000 
000068e2 l       .debug_str	00000000 
000068ec l       .debug_str	00000000 
000068fd l       .debug_str	00000000 
0000690a l       .debug_str	00000000 
00004a43 l       .debug_str	00000000 
00006915 l       .debug_str	00000000 
00006920 l       .debug_str	00000000 
00006940 l       .debug_str	00000000 
000005f8 l       .debug_str	00000000 
00004562 l       .debug_str	00000000 
0000695f l       .debug_str	00000000 
00006968 l       .debug_str	00000000 
00011841 l       .debug_str	00000000 
0000697b l       .debug_str	00000000 
000069a4 l       .debug_str	00000000 
000069ae l       .debug_str	00000000 
000069bf l       .debug_str	00000000 
000069cb l       .debug_str	00000000 
000069de l       .debug_str	00000000 
00006540 l       .debug_str	00000000 
00006a1c l       .debug_str	00000000 
00006a38 l       .debug_str	00000000 
00006aaa l       .debug_str	00000000 
00007808 l       .debug_str	00000000 
00006a47 l       .debug_str	00000000 
0000407b l       .debug_str	00000000 
00006a70 l       .debug_str	00000000 
00006a7e l       .debug_str	00000000 
00006a93 l       .debug_str	00000000 
00006aa2 l       .debug_str	00000000 
00006ab9 l       .debug_str	00000000 
00006ac9 l       .debug_str	00000000 
00006ad2 l       .debug_str	00000000 
00006ae1 l       .debug_str	00000000 
00006b08 l       .debug_str	00000000 
00006b14 l       .debug_str	00000000 
00006b27 l       .debug_str	00000000 
00006b38 l       .debug_str	00000000 
00006b45 l       .debug_str	00000000 
00006b55 l       .debug_str	00000000 
00006b6a l       .debug_str	00000000 
00006b77 l       .debug_str	00000000 
00006b9d l       .debug_str	00000000 
00006bab l       .debug_str	00000000 
00006bb4 l       .debug_str	00000000 
00006bd1 l       .debug_str	00000000 
00006bf6 l       .debug_str	00000000 
00006c1c l       .debug_str	00000000 
00006c46 l       .debug_str	00000000 
00006c6e l       .debug_str	00000000 
00006c88 l       .debug_str	00000000 
0000b9c8 l       .debug_str	00000000 
00006c95 l       .debug_str	00000000 
00006cac l       .debug_str	00000000 
00006cc2 l       .debug_str	00000000 
00006cd0 l       .debug_str	00000000 
00006d0e l       .debug_str	00000000 
00006d23 l       .debug_str	00000000 
00006e6d l       .debug_str	00000000 
00012a20 l       .debug_str	00000000 
0000aa89 l       .debug_str	00000000 
00006d31 l       .debug_str	00000000 
00006d41 l       .debug_str	00000000 
00003384 l       .debug_str	00000000 
00006d70 l       .debug_str	00000000 
00006d83 l       .debug_str	00000000 
00006dc6 l       .debug_str	00000000 
00006de0 l       .debug_str	00000000 
00006df2 l       .debug_str	00000000 
00006e12 l       .debug_str	00000000 
00006e1a l       .debug_str	00000000 
00006e48 l       .debug_str	00000000 
00006e64 l       .debug_str	00000000 
00006e7e l       .debug_str	00000000 
00006e93 l       .debug_str	00000000 
00006ea6 l       .debug_str	00000000 
00006eb9 l       .debug_str	00000000 
00006ece l       .debug_str	00000000 
00006ee1 l       .debug_str	00000000 
00006ef4 l       .debug_str	00000000 
00006f1e l       .debug_str	00000000 
00006f2a l       .debug_str	00000000 
00006f8c l       .debug_str	00000000 
00006f95 l       .debug_str	00000000 
00006fa4 l       .debug_str	00000000 
00006fb9 l       .debug_str	00000000 
00006fc6 l       .debug_str	00000000 
00007052 l       .debug_str	00000000 
00007064 l       .debug_str	00000000 
00007070 l       .debug_str	00000000 
000070d2 l       .debug_str	00000000 
0000712c l       .debug_str	00000000 
0000713c l       .debug_str	00000000 
000071be l       .debug_str	00000000 
00007218 l       .debug_str	00000000 
00007278 l       .debug_str	00000000 
000072d8 l       .debug_str	00000000 
00007336 l       .debug_str	00000000 
00007394 l       .debug_str	00000000 
000073a2 l       .debug_str	00000000 
000073ad l       .debug_str	00000000 
000073b8 l       .debug_str	00000000 
000073df l       .debug_str	00000000 
00007407 l       .debug_str	00000000 
00007419 l       .debug_str	00000000 
0000741e l       .debug_str	00000000 
0000743b l       .debug_str	00000000 
00007447 l       .debug_str	00000000 
00007472 l       .debug_str	00000000 
00007479 l       .debug_str	00000000 
00007484 l       .debug_str	00000000 
000074a2 l       .debug_str	00000000 
000074bd l       .debug_str	00000000 
000074d9 l       .debug_str	00000000 
00007525 l       .debug_str	00000000 
00007571 l       .debug_str	00000000 
0001a24a l       .debug_str	00000000 
000075be l       .debug_str	00000000 
000075c7 l       .debug_str	00000000 
000075e3 l       .debug_str	00000000 
00007609 l       .debug_str	00000000 
00007612 l       .debug_str	00000000 
00007658 l       .debug_str	00000000 
0000769e l       .debug_str	00000000 
000076e5 l       .debug_str	00000000 
00007704 l       .debug_str	00000000 
0000eb06 l       .debug_str	00000000 
0000770e l       .debug_str	00000000 
00007718 l       .debug_str	00000000 
00019de7 l       .debug_str	00000000 
00007720 l       .debug_str	00000000 
0000772f l       .debug_str	00000000 
0000774c l       .debug_str	00000000 
00007768 l       .debug_str	00000000 
0000778e l       .debug_str	00000000 
0000779e l       .debug_str	00000000 
000077aa l       .debug_str	00000000 
000077cc l       .debug_str	00000000 
000077dd l       .debug_str	00000000 
000077d8 l       .debug_str	00000000 
000077fc l       .debug_str	00000000 
00019cfd l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
0000781b l       .debug_str	00000000 
00007829 l       .debug_str	00000000 
00007837 l       .debug_str	00000000 
00007854 l       .debug_str	00000000 
0000785a l       .debug_str	00000000 
0000690f l       .debug_str	00000000 
000079cd l       .debug_str	00000000 
00007882 l       .debug_str	00000000 
0000788c l       .debug_str	00000000 
000078ae l       .debug_str	00000000 
000078f3 l       .debug_str	00000000 
0000791d l       .debug_str	00000000 
00007940 l       .debug_str	00000000 
00007960 l       .debug_str	00000000 
00007968 l       .debug_str	00000000 
0000798e l       .debug_str	00000000 
000079ab l       .debug_str	00000000 
000079c5 l       .debug_str	00000000 
000079d1 l       .debug_str	00000000 
000079e2 l       .debug_str	00000000 
000079f1 l       .debug_str	00000000 
00007a02 l       .debug_str	00000000 
00007a1b l       .debug_str	00000000 
00007a3a l       .debug_str	00000000 
00007a4a l       .debug_str	00000000 
00007a5e l       .debug_str	00000000 
00007a69 l       .debug_str	00000000 
00007a74 l       .debug_str	00000000 
00007aa0 l       .debug_str	00000000 
00007ab3 l       .debug_str	00000000 
00007ac6 l       .debug_str	00000000 
00007ada l       .debug_str	00000000 
00007b10 l       .debug_str	00000000 
00007b24 l       .debug_str	00000000 
00007b5a l       .debug_str	00000000 
00007b6e l       .debug_str	00000000 
00007ba4 l       .debug_str	00000000 
00007bb9 l       .debug_str	00000000 
00007bf0 l       .debug_str	00000000 
00007c03 l       .debug_str	00000000 
00007c38 l       .debug_str	00000000 
00007c4c l       .debug_str	00000000 
00007c82 l       .debug_str	00000000 
00007c96 l       .debug_str	00000000 
00007ccc l       .debug_str	00000000 
00007d07 l       .debug_str	00000000 
00007d1b l       .debug_str	00000000 
00007d51 l       .debug_str	00000000 
00007d8c l       .debug_str	00000000 
00007da1 l       .debug_str	00000000 
00007dd8 l       .debug_str	00000000 
00007e14 l       .debug_str	00000000 
00007e20 l       .debug_str	00000000 
00007e7a l       .debug_str	00000000 
00007ee6 l       .debug_str	00000000 
00007f57 l       .debug_str	00000000 
00007fc7 l       .debug_str	00000000 
0000802a l       .debug_str	00000000 
0000803b l       .debug_str	00000000 
000080af l       .debug_str	00000000 
00008118 l       .debug_str	00000000 
0000818f l       .debug_str	00000000 
00008199 l       .debug_str	00000000 
000081a5 l       .debug_str	00000000 
000081c2 l       .debug_str	00000000 
000081e6 l       .debug_str	00000000 
00008206 l       .debug_str	00000000 
00008213 l       .debug_str	00000000 
0000821e l       .debug_str	00000000 
0000822a l       .debug_str	00000000 
00008260 l       .debug_str	00000000 
000082aa l       .debug_str	00000000 
000082cd l       .debug_str	00000000 
000082f8 l       .debug_str	00000000 
00008341 l       .debug_str	00000000 
0000839a l       .debug_str	00000000 
00008405 l       .debug_str	00000000 
00008475 l       .debug_str	00000000 
000084e4 l       .debug_str	00000000 
00008546 l       .debug_str	00000000 
000085b9 l       .debug_str	00000000 
00008621 l       .debug_str	00000000 
00008697 l       .debug_str	00000000 
000086cc l       .debug_str	00000000 
000086db l       .debug_str	00000000 
000086e6 l       .debug_str	00000000 
00008702 l       .debug_str	00000000 
00008725 l       .debug_str	00000000 
00008743 l       .debug_str	00000000 
00008789 l       .debug_str	00000000 
000087ad l       .debug_str	00000000 
000087e7 l       .debug_str	00000000 
0000888a l       .debug_str	00000000 
000088aa l       .debug_str	00000000 
000088ba l       .debug_str	00000000 
000062f2 l       .debug_str	00000000 
000088ca l       .debug_str	00000000 
000088ef l       .debug_str	00000000 
00008914 l       .debug_str	00000000 
00008925 l       .debug_str	00000000 
0000894b l       .debug_str	00000000 
00008971 l       .debug_str	00000000 
00008982 l       .debug_str	00000000 
00008993 l       .debug_str	00000000 
000089b9 l       .debug_str	00000000 
000089df l       .debug_str	00000000 
000089f0 l       .debug_str	00000000 
00008a03 l       .debug_str	00000000 
00008a2b l       .debug_str	00000000 
00008a3e l       .debug_str	00000000 
00008a5d l       .debug_str	00000000 
00008aac l       .debug_str	00000000 
00008b81 l       .debug_str	00000000 
00008b8b l       .debug_str	00000000 
00008bc6 l       .debug_str	00000000 
00008c35 l       .debug_str	00000000 
00008c88 l       .debug_str	00000000 
00008d15 l       .debug_str	00000000 
00008e23 l       .debug_str	00000000 
00008e63 l       .debug_str	00000000 
00008ebb l       .debug_str	00000000 
00008f1d l       .debug_str	00000000 
00008f74 l       .debug_str	00000000 
00008f91 l       .debug_str	00000000 
00008fb3 l       .debug_str	00000000 
00009023 l       .debug_str	00000000 
000090b3 l       .debug_str	00000000 
00009160 l       .debug_str	00000000 
000091f1 l       .debug_str	00000000 
00009242 l       .debug_str	00000000 
000092ce l       .debug_str	00000000 
000092d3 l       .debug_str	00000000 
000092dc l       .debug_str	00000000 
0000936b l       .debug_str	00000000 
0000937a l       .debug_str	00000000 
0000942a l       .debug_str	00000000 
0000945f l       .debug_str	00000000 
000094ca l       .debug_str	00000000 
00009519 l       .debug_str	00000000 
0000953a l       .debug_str	00000000 
000095de l       .debug_str	00000000 
00009666 l       .debug_str	00000000 
000096c0 l       .debug_str	00000000 
0000971f l       .debug_str	00000000 
00009778 l       .debug_str	00000000 
00003d8a l       .debug_str	00000000 
00009800 l       .debug_str	00000000 
0000988b l       .debug_str	00000000 
00009932 l       .debug_str	00000000 
00009967 l       .debug_str	00000000 
000099d2 l       .debug_str	00000000 
00009a21 l       .debug_str	00000000 
00009a42 l       .debug_str	00000000 
00009ae6 l       .debug_str	00000000 
00009b6e l       .debug_str	00000000 
00009bc8 l       .debug_str	00000000 
00009c27 l       .debug_str	00000000 
00009c80 l       .debug_str	00000000 
00009d08 l       .debug_str	00000000 
00009d93 l       .debug_str	00000000 
00009e3a l       .debug_str	00000000 
00009e57 l       .debug_str	00000000 
00009e78 l       .debug_str	00000000 
00009e95 l       .debug_str	00000000 
00009eb6 l       .debug_str	00000000 
00009ed9 l       .debug_str	00000000 
00009efb l       .debug_str	00000000 
00009f1f l       .debug_str	00000000 
00009f42 l       .debug_str	00000000 
00009f66 l       .debug_str	00000000 
00009f89 l       .debug_str	00000000 
00009fae l       .debug_str	00000000 
00009fd2 l       .debug_str	00000000 
00009ff8 l       .debug_str	00000000 
0000a02f l       .debug_str	00000000 
0000a052 l       .debug_str	00000000 
0000a078 l       .debug_str	00000000 
0000a09e l       .debug_str	00000000 
0000a0c3 l       .debug_str	00000000 
0000a0e7 l       .debug_str	00000000 
0000a10e l       .debug_str	00000000 
0000a135 l       .debug_str	00000000 
0000a13c l       .debug_str	00000000 
0000a144 l       .debug_str	00000000 
0000a181 l       .debug_str	00000000 
0000a1a3 l       .debug_str	00000000 
0000a1f0 l       .debug_str	00000000 
0000a2c3 l       .debug_str	00000000 
0000a2f6 l       .debug_str	00000000 
0000a311 l       .debug_str	00000000 
0000a32e l       .debug_str	00000000 
0000a348 l       .debug_str	00000000 
0000a351 l       .debug_str	00000000 
0000a370 l       .debug_str	00000000 
00000d78 l       .debug_str	00000000 
0000a37b l       .debug_str	00000000 
0000a385 l       .debug_str	00000000 
0000a38b l       .debug_str	00000000 
0000a3ae l       .debug_str	00000000 
0000a3f3 l       .debug_str	00000000 
0000a40e l       .debug_str	00000000 
0000a420 l       .debug_str	00000000 
0000a4b0 l       .debug_str	00000000 
0000a4d2 l       .debug_str	00000000 
0000a4f1 l       .debug_str	00000000 
0000a542 l       .debug_str	00000000 
0000a58f l       .debug_str	00000000 
0000a598 l       .debug_str	00000000 
0000a5a2 l       .debug_str	00000000 
0000a5ae l       .debug_str	00000000 
0000a5b9 l       .debug_str	00000000 
0000a5e0 l       .debug_str	00000000 
0000a5ed l       .debug_str	00000000 
0000a602 l       .debug_str	00000000 
0000a611 l       .debug_str	00000000 
0000a61e l       .debug_str	00000000 
0000a62b l       .debug_str	00000000 
0000a678 l       .debug_str	00000000 
0000a682 l       .debug_str	00000000 
0000a696 l       .debug_str	00000000 
0000a6a7 l       .debug_str	00000000 
0000a6b0 l       .debug_str	00000000 
0000a6c2 l       .debug_str	00000000 
0000a6cd l       .debug_str	00000000 
0000a6db l       .debug_str	00000000 
0000a6e2 l       .debug_str	00000000 
0000a6ec l       .debug_str	00000000 
0000a6fa l       .debug_str	00000000 
0000a704 l       .debug_str	00000000 
0000a711 l       .debug_str	00000000 
000043f8 l       .debug_str	00000000 
0000a727 l       .debug_str	00000000 
0000a72b l       .debug_str	00000000 
0000a73e l       .debug_str	00000000 
0000a748 l       .debug_str	00000000 
0000a79d l       .debug_str	00000000 
00003fac l       .debug_str	00000000 
0000a7ab l       .debug_str	00000000 
0000a7b3 l       .debug_str	00000000 
0000a7c8 l       .debug_str	00000000 
0000a7df l       .debug_str	00000000 
0000a804 l       .debug_str	00000000 
0000a813 l       .debug_str	00000000 
0000a830 l       .debug_str	00000000 
0000a83a l       .debug_str	00000000 
0000a848 l       .debug_str	00000000 
0000a859 l       .debug_str	00000000 
0000a866 l       .debug_str	00000000 
0000a86b l       .debug_str	00000000 
0000a876 l       .debug_str	00000000 
0000a87f l       .debug_str	00000000 
0000a8a2 l       .debug_str	00000000 
0000a8c5 l       .debug_str	00000000 
0000a8eb l       .debug_str	00000000 
0000a911 l       .debug_str	00000000 
0000a938 l       .debug_str	00000000 
0000a95f l       .debug_str	00000000 
0000a989 l       .debug_str	00000000 
0000a9b3 l       .debug_str	00000000 
0000a9b9 l       .debug_str	00000000 
0000a9e5 l       .debug_str	00000000 
0000a9f0 l       .debug_str	00000000 
0000a9fb l       .debug_str	00000000 
00012f1c l       .debug_str	00000000 
0000aa08 l       .debug_str	00000000 
0000aa1c l       .debug_str	00000000 
0000aa32 l       .debug_str	00000000 
0000aa3c l       .debug_str	00000000 
0000aa46 l       .debug_str	00000000 
0000aa51 l       .debug_str	00000000 
0000aa5c l       .debug_str	00000000 
0000aa67 l       .debug_str	00000000 
0000aa72 l       .debug_str	00000000 
0000a738 l       .debug_str	00000000 
0000aa7e l       .debug_str	00000000 
0000aa81 l       .debug_str	00000000 
0000aa95 l       .debug_str	00000000 
0000aa9e l       .debug_str	00000000 
0000aaa7 l       .debug_str	00000000 
0000aab0 l       .debug_str	00000000 
0000aabb l       .debug_str	00000000 
0000aac4 l       .debug_str	00000000 
0000aacd l       .debug_str	00000000 
000062ee l       .debug_str	00000000 
0000aad8 l       .debug_str	00000000 
0000aaf3 l       .debug_str	00000000 
0000ab5c l       .debug_str	00000000 
0000abc9 l       .debug_str	00000000 
0000ac32 l       .debug_str	00000000 
0000ac3a l       .debug_str	00000000 
0000ac42 l       .debug_str	00000000 
0000ac4b l       .debug_str	00000000 
0000aca4 l       .debug_str	00000000 
0000ace1 l       .debug_str	00000000 
0000ad3e l       .debug_str	00000000 
0000ae36 l       .debug_str	00000000 
0000ae85 l       .debug_str	00000000 
0000aebe l       .debug_str	00000000 
0000aef3 l       .debug_str	00000000 
0000aefc l       .debug_str	00000000 
0000af29 l       .debug_str	00000000 
0000af32 l       .debug_str	00000000 
0000af3a l       .debug_str	00000000 
0000af57 l       .debug_str	00000000 
0000af7f l       .debug_str	00000000 
0000af9c l       .debug_str	00000000 
0000afa6 l       .debug_str	00000000 
0000afdb l       .debug_str	00000000 
0000afe8 l       .debug_str	00000000 
0000b01b l       .debug_str	00000000 
0000b07f l       .debug_str	00000000 
0000b088 l       .debug_str	00000000 
0000b091 l       .debug_str	00000000 
0000b0c2 l       .debug_str	00000000 
0000b0dc l       .debug_str	00000000 
0000b0fa l       .debug_str	00000000 
0000b1a6 l       .debug_str	00000000 
0000b1e1 l       .debug_str	00000000 
0000b1ea l       .debug_str	00000000 
000021c1 l       .debug_str	00000000 
0000b21f l       .debug_str	00000000 
0000b29a l       .debug_str	00000000 
0000b311 l       .debug_str	00000000 
0000b327 l       .debug_str	00000000 
0000b362 l       .debug_str	00000000 
0000b36c l       .debug_str	00000000 
0000b37b l       .debug_str	00000000 
0000b3ac l       .debug_str	00000000 
0000b3b5 l       .debug_str	00000000 
0000b3d7 l       .debug_str	00000000 
0000b3fe l       .debug_str	00000000 
0000b408 l       .debug_str	00000000 
0000b42a l       .debug_str	00000000 
0000b460 l       .debug_str	00000000 
0000b469 l       .debug_str	00000000 
0000b491 l       .debug_str	00000000 
0000b49c l       .debug_str	00000000 
080018fc l     F .text	00000012 _ZN36_$LT$T$u20$as$u20$core..any..Any$GT$7type_id17h589f04726b9846deE
08001f4a l     F .text	00000102 _ZN4core3fmt3num3imp7fmt_u3217h4a6591ec3ef714beE
08001c98 l     F .text	00000032 _ZN4core3fmt9Formatter12pad_integral12write_prefix17h6c53284d01543c5dE
080018fa l     F .text	00000002 _ZN4core3ptr18real_drop_in_place17h921869e295dffcdcE
00000000 l    df *ABS*	00000000 semihosting_console.c
2000067c l     O .bss	00000004 semihost_mbuf
20000130 l     O .data	00000001 log_enabled
00000000 l    df *ABS*	00000000 console.c
20000680 l     O .bss	00000010 avail_queue
20000690 l     O .bss	0000000c console_write_lock
00000000 l    df *ABS*	00000000 console_fmt.c
00000000 l    df *ABS*	00000000 ticks.c
2000069c l     O .bss	00000001 do_ticks
00000000 l    df *ABS*	00000000 sensor_network.c
08002278 l     F .text	0000000e sensor_network_do_post.part.0
08002278 l     F .text	0000000e get_hardware_id.part.1
2000069d l     O .bss	00000010 device_id
200006ad l     O .bss	00000021 device_id_text
200006ce l     O .bss	0000000c hw_id
200006dc l     O .bss	00000004 hw_id_len
200006e0 l     O .bss	00000020 sensor_network_endpoints
20000700 l     O .bss	00000028 sensor_network_interfaces
20000728 l     O .bss	00000008 sensor_node_address
20000730 l     O .bss	00000037 sensor_node_names_buf
20000134 l     O .data	00000014 sensor_node_names
0800db59 l     O .text	00000012 COAP_HOST
0800db6b l     O .text	00000036 COAP_URI
0800dba1 l     O .text	0000000c COLLECTOR_NODE_HW_ID
0800dbad l     O .text	0000003c SENSOR_NODE_HW_IDS
0800dc10 l     O .text	00000008 sensor_network_encoding
0800dc64 l     O .text	00000008 sensor_network_shortname
0800dc70 l     O .text	00000028 sensor_node_addresses
00000000 l    df *ABS*	00000000 oc_rep.c
080026a0 l     F .text	00000018 _alloc_rep
080026b8 l     F .text	0000000e cbor_value_get_boolean.part.9
080026b8 l     F .text	0000000e cbor_value_copy_text_string.part.14
080026b8 l     F .text	0000000e cbor_value_copy_byte_string.part.13
080026b8 l     F .text	0000000e cbor_value_get_double.part.12
080026b8 l     F .text	0000000e cbor_value_get_int64.part.11
080026c6 l     F .text	00000036 cbor_value_get_double
080026fc l     F .text	00000044 cbor_value_get_int64
08002740 l     F .text	0000036c oc_parse_rep_value
20000768 l     O .bss	00000004 g_outm
2000076c l     O .bss	0000001c oc_rep_objects
20000788 l     O .bss	00000030 oc_rep_objects_area
00000000 l    df *ABS*	00000000 oc_helpers.c
00000000 l    df *ABS*	00000000 sysinit.c
08002d00 l     F .text	00000006 sysinit_dflt_panic_cb
00000000 l    df *ABS*	00000000 cbor_mbuf_reader.c
08002d20 l     F .text	0000001c cbor_mbuf_reader_cpy
08002d3c l     F .text	0000001a cbor_mbuf_reader_get8
08002d56 l     F .text	00000018 cbor_mbuf_reader_cmp
08002d6e l     F .text	0000001c cbor_mbuf_reader_get64
08002d8a l     F .text	00000018 cbor_mbuf_reader_get32
08002da2 l     F .text	0000001e cbor_mbuf_reader_get16
00000000 l    df *ABS*	00000000 cbor_mbuf_writer.c
00000000 l    df *ABS*	00000000 cborencoder.c
08002e40 l     F .text	00000016 append_to_buffer.isra.1
08002e56 l     F .text	00000066 encode_number_no_update
08002ebc l     F .text	00000014 encode_number
08002ed0 l     F .text	00000042 create_container
00000000 l    df *ABS*	00000000 cborparser.c
08002fa0 l     F .text	00000014 is_fixed_type
08002fb4 l     F .text	00000004 iterate_noop
08002fb8 l     F .text	000000f8 preparse_value
080030b0 l     F .text	0000008c extract_number
0800313c l     F .text	0000004a preparse_next_value
08003186 l     F .text	0000004e advance_internal
080031d4 l     F .text	0000000e cbor_value_advance_fixed.part.11
080031d4 l     F .text	0000000e cbor_value_advance.part.13
080031d4 l     F .text	0000000e cbor_value_leave_container.part.12
080031e2 l     F .text	00000170 iterate_string_chunks
080034cc l     F .text	00000070 advance_recursive
00000000 l    df *ABS*	00000000 stm32_hw_id.c
00000000 l    df *ABS*	00000000 sensor.c
0800358c l     F .text	0000004c sensor_mgr_insert
08003604 l     F .text	00000060 sensor_read_data_func
08003664 l     F .text	00000012 sensor_mgr_match_bydevname
08003678 l     F .text	00000050 sensor_base_ts_update_event
080039cc l     F .text	000000e8 sensor_mgr_wakeup_event
080037e8 l     F .text	00000050 sensor_update_nextrun
200007b8 l     O .bss	00000078 sensor_notify_evt_area
20000830 l     O .bss	0000001c sensor_notify_evt_pool
00000000 l    df *ABS*	00000000 os_fault.c
00000000 l    df *ABS*	00000000 os.c
08003c1c l     F .text	00000016 os_main
20000950 l     O .bss	00001000 os_main_stack
20000850 l     O .bss	00000100 g_idle_task_stack
20001950 l     O .bss	00000050 os_main_task
00000000 l    df *ABS*	00000000 os_callout.c
00000000 l    df *ABS*	00000000 os_cputime.c
00000000 l    df *ABS*	00000000 os_dev.c
08003ed2 l     F .text	00000020 os_dev_initialize
200019a0 l     O .bss	00000008 g_os_dev_list
00000000 l    df *ABS*	00000000 os_eventq.c
200019a8 l     O .bss	00000010 os_eventq_main
00000000 l    df *ABS*	00000000 os_mbuf.c
08004188 l     F .text	00000016 _os_mbuf_trailingspace
0800419e l     F .text	00000032 _os_mbuf_copypkthdr
00000000 l    df *ABS*	00000000 os_mempool.c
08004698 l     F .text	0000006c os_mempool_init_internal
00000000 l    df *ABS*	00000000 os_msys.c
080047a4 l     F .text	00000024 os_msys_find_pool
200019b8 l     O .bss	00000db0 os_msys_1_data
20002768 l     O .bss	0000000c os_msys_1_mbuf_pool
20002774 l     O .bss	0000001c os_msys_1_mempool
2000014c l     O .data	00000008 g_msys_pool_list
00000000 l    df *ABS*	00000000 os_mutex.c
00000000 l    df *ABS*	00000000 os_sanity.c
08004a1c l     F .text	0000001c os_sanity_check_list_lock
08004a38 l     F .text	00000018 os_sanity_check_list_unlock
00000000 l    df *ABS*	00000000 os_sched.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
08004df4 l     F .text	0000004c os_deltatime
20002798 l     O .bss	00000030 basetod
00000000 l    df *ABS*	00000000 os_arch_arm.c
00000000 l    df *ABS*	00000000 HAL_CM3.o
08005108 l       .text	00000000 SVC_User
08005126 l       .text	00000000 SVC_Done
00000000 l    df *ABS*	00000000 malloc.c
08005194 l     F .text	00000004 malloc_lock_nop
08005198 l     F .text	00000002 malloc_unlock_nop
0800519c l     F .text	00000074 __free_block
20000164 l     O .data	00000018 __malloc_head
2000017c l     O .data	00000004 malloc_lock
20000180 l     O .data	00000004 malloc_unlock
00000000 l    df *ABS*	00000000 memcmp.c
0800533c l       .text	00000000 test1
08005330 l       .text	00000000 loop1
08005342 l       .text	00000000 res1
0800535e l       .text	00000000 test2
08005366 l       .text	00000000 done
08005352 l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memcpy.c
08005372 l       .text	00000000 test1
0800536e l       .text	00000000 loop1
08005380 l       .text	00000000 test2
0800537c l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 tinyprintf.c
080053f6 l     F .text	000000b2 ui2a
080054a8 l     F .text	00000022 putf
080054cc l     F .text	0000011c putchw
00000000 l    df *ABS*	00000000 vprintf.c
00000000 l    df *ABS*	00000000 memfile.c
00000000 l    df *ABS*	00000000 mynewt.c
08005900 l     F .text	00000004 stdin_read
08005904 l     F .text	00000010 stdout_write
20000184 l     O .data	00000004 _stdin
20000188 l     O .data	00000008 _stdin_methods
00000000 l    df *ABS*	00000000 hmac_prng.c
200027cc l     O .bss	0000000c hw_id
200027d8 l     O .bss	00000004 hw_id_len
200027e0 l     O .bss	00000138 prng
20002918 l     O .bss	00000020 seed
00000000 l    df *ABS*	00000000 mynewt_rust.c
00000000 l    df *ABS*	00000000 sensor_helper.c
00000000 l    df *ABS*	00000000 sensor_coap.c
08005a84 l     F .text	0000000a cbor_cnt_writer
08005a90 l     F .text	0000000c handle_coap_response
08005a9c l     F .text	0000000e json_write_mbuf.part.0
08005a9c l     F .text	0000000e json_rep_finalize.part.2
08005a9c l     F .text	0000000e json_rep_new.part.1
20002938 l     O .bss	00000008 cnt_writer
20002940 l     O .bss	00000004 coap_json_mbuf
20002944 l     O .bss	00000004 oc_c_message
20002948 l     O .bss	0000006c oc_c_request
200029b4 l     O .bss	00000004 oc_c_rsp
200029bc l     O .bss	00000008 oc_sem
200029c4 l     O .bss	00000001 oc_sensor_coap_ready
00000000 l    df *ABS*	00000000 temp_stm32.c
08005d68 l     F .text	0000001c temp_stm32_sensor_get_config
08005d84 l     F .text	00000018 temp_stm32_close
08005d9c l     F .text	00000068 temp_stm32_open
08005f28 l     F .text	00000080 temp_stm32_sensor_read
20000190 l     O .data	0000000c temp_channel_config
0800dea0 l     O .text	00000028 g_temp_stm32_sensor_driver
00000000 l    df *ABS*	00000000 oc_buffer.c
08005fd0 l     F .text	0000002c oc_buffer_tx
08005ffc l     F .text	00000028 oc_buffer_rx
200029c8 l     O .bss	00000018 oc_inq
200029e0 l     O .bss	00000018 oc_outq
00000000 l    df *ABS*	00000000 oc_ri.c
080060b8 l     F .text	00000040 free_client_cb
080060f8 l     F .text	00000006 oc_ri_remove_cb
200029f8 l     O .bss	000000c8 oc_client_cb_area
20002ac0 l     O .bss	0000001c oc_client_cb_pool
20002adc l     O .bss	00000004 oc_client_cbs
00000000 l    df *ABS*	00000000 coap.c
080061e8 l     F .text	00000092 coap_append_opt_hdr
0800627a l     F .text	00000098 coap_append_int_opt
20002ae0 l     O .bss	00000002 current_mid
00000000 l    df *ABS*	00000000 adaptor.c
20002ae4 l     O .bss	00000004 oc_evq
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 random.c
00000000 l    df *ABS*	00000000 mem.c
00000000 l    df *ABS*	00000000 bluepill_my_sensor-sysinit-app.c
00000000 l    df *ABS*	00000000 stub.c
00000000 l    df *ABS*	00000000 hmac_prng.c
080068a2 l     F .text	000000ca update
00000000 l    df *ABS*	00000000 utils.c
00000000 l    df *ABS*	00000000 hmac.c
08006a84 l     F .text	0000003a rekey
00000000 l    df *ABS*	00000000 sha256.c
08006bb0 l     F .text	000001c8 compress
0800df24 l     O .text	00000100 k256
00000000 l    df *ABS*	00000000 hal_bsp.c
08006ef4 l     F .text	00000010 LL_GPIO_AF_DisableRemap_USART2
20002ae8 l     O .bss	0000003c hal_uart0
0800e02c l     O .text	00000018 uart_cfg
00000000 l    df *ABS*	00000000 adc.c
00000000 l    df *ABS*	00000000 uart_hal.c
08006fea l     F .text	0000002c uart_hal_resume
08007016 l     F .text	00000014 uart_hal_close
0800702a l     F .text	00000072 uart_hal_open
0800709c l     F .text	0000000e uart_hal_blocking_tx.part.2
0800709c l     F .text	0000000e uart_hal_start_tx.part.4
0800709c l     F .text	0000000e uart_hal_start_rx.part.3
080070aa l     F .text	00000014 uart_hal_blocking_tx
080070be l     F .text	00000014 uart_hal_start_rx
080070d2 l     F .text	00000014 uart_hal_start_tx
080070e6 l     F .text	00000028 uart_hal_suspend
00000000 l    df *ABS*	00000000 hal_flash.c
08007178 l     F .text	00000012 stm32_flash_sector_info
0800718a l     F .text	0000000a stm32_flash_init
08007194 l     F .text	00000004 stm32_flash_erase_sector
08007198 l     F .text	0000000e stm32_flash_read
080071a8 l     F .text	000000a4 stm32_flash_write
00000000 l    df *ABS*	00000000 hal_os_tick.c
00000000 l    df *ABS*	00000000 hal_spi.c
080072a0 l     F .text	00000098 spi1_irq_handler
08007338 l     F .text	000000c4 spi_ss_isr
20002b24 l     O .bss	00000018 spi_stat
0800e078 l     O .text	00000018 stm32_hal_spis
00000000 l    df *ABS*	00000000 hal_system.c
00000000 l    df *ABS*	00000000 hal_timer.c
08007768 l     F .text	0000002a hal_timer_cnt
08007794 l     F .text	00000080 stm32_tmr0_irq
0800e090 l     O .text	0000000c stm32_tmr_devs
00000000 l    df *ABS*	00000000 hal_uart.c
08007a08 l     F .text	0000008c uart_irq_handler
08007a94 l     F .text	00000006 uart_irq1
08007a9a l     F .text	00000006 uart_irq2
08007aa0 l     F .text	00000006 uart_irq3
20002b3c l     O .bss	00000018 uart_irqs
20002b54 l     O .bss	0000001c uarts
00000000 l    df *ABS*	00000000 hal_watchdog.c
00000000 l    df *ABS*	00000000 sbrk.c
200001b0 l     O .data	00000004 brk.4103
00000000 l    df *ABS*	00000000 stm32_driver_mod_spi.c
08007ed0 l     F .text	0000003c SPI_CheckFlag_BSY.constprop.4
08007f0c l     F .text	00000084 SPI_CloseTx_ISR
08007f90 l     F .text	00000020 SPI_TxISR_8BIT
08007fb0 l     F .text	00000026 SPI_TxISR_16BIT
00000000 l    df *ABS*	00000000 hal_gpio.c
08008068 l     F .text	00000028 ext_irq_handler
08008090 l     F .text	00000014 ext_irq0
080080a4 l     F .text	00000014 ext_irq1
080080b8 l     F .text	00000014 ext_irq2
080080cc l     F .text	00000014 ext_irq3
080080e0 l     F .text	00000014 ext_irq4
080080f4 l     F .text	00000030 ext_irq9_5
08008124 l     F .text	00000020 ext_irq15_10
08008144 l     F .text	0000007c hal_gpio_clk_enable
20002b70 l     O .bss	00000080 gpio_irq_handlers
0800e09c l     O .text	00000014 portmap
00000000 l    df *ABS*	00000000 stm32f1xx_hal_flash.c
080083f8 l     F .text	00000050 FLASH_SetErrorCode
00000000 l    df *ABS*	00000000 stm32f1xx_hal_flash_ex.c
08008560 l     F .text	00000024 FLASH_MassErase.isra.0
00000000 l    df *ABS*	00000000 stm32f1xx_hal_gpio.c
00000000 l    df *ABS*	00000000 stm32f1xx_hal_iwdg.c
00000000 l    df *ABS*	00000000 stm32f1xx_hal_rcc.c
00000000 l    df *ABS*	00000000 stm32f1xx_hal_spi.c
08008e94 l     F .text	0000008c SPI_WaitFlagStateUntilTimeout
08008f20 l     F .text	00000020 SPI_CheckFlag_BSY
08009290 l     F .text	00000010 SPI_DMAAbortOnError
00000000 l    df *ABS*	00000000 stm32f1xx_hal_tim.c
00000000 l    df *ABS*	00000000 hal_flash.c
00000000 l    df *ABS*	00000000 hal_timer_freq.c
00000000 l    df *ABS*	00000000 stm32f1xx_hal_dma.c
00000000 l    df *ABS*	00000000 sensor_creator.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 lrand48.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 jrand48.c
00000000 l    df *ABS*	00000000 creator.c
20002bf0 l     O .bss	0000006c __compound_literal.0
20002c5c l     O .bss	00000048 stm32f1_adc1_dev
200001b4 l     O .data	00000018 adc1_config
200001cc l     O .data	00000030 adc1_handle
00000000 l    df *ABS*	00000000 adc_stm32f1.c
08009698 l     F .text	00000008 stm32f1_adc_size_buffer
080096a0 l     F .text	0000000e stm32f1_adc_release_buffer
080096ae l     F .text	0000000e stm32f1_adc_set_buffer
080096bc l     F .text	00000050 stm32f1_resolve_adc_gpio.part.0
0800970c l     F .text	0000007c stm32f1_adc_configure_channel
08009788 l     F .text	0000000e stm32f1_adc_read_buffer.part.1
08009788 l     F .text	0000000e stm32f1_adc_open.part.4
08009788 l     F .text	0000000e stm32f1_adc_sample.part.3
08009788 l     F .text	0000000e stm32f1_adc_read_channel.part.2
08009796 l     F .text	00000016 stm32f1_adc_read_buffer
080097ac l     F .text	0000004e stm32f1_adc_read_channel
080097fc l     F .text	00000028 stm32f1_adc_sample
08009824 l     F .text	000000bc stm32f1_adc_open
080098e0 l     F .text	00000088 stm32f1_adc_close
20002ca4 l     O .bss	00000010 stm32f1_adc_stats
0800e0d4 l     O .text	0000001c stm32f1_adc_funcs
00000000 l    df *ABS*	00000000 creator.cpp
20002cb4 l     O .bss	000000c4 _ZL7esp8266
200001fc l     O .data	00000014 _ZL18uart_0_itf_esp8266
00000000 l    df *ABS*	00000000 driver.cpp
08009a58 l     F .text	00000002 _ZL13esp8266_eventPv
08009a5a l     F .text	0000000e _ZL18register_transportPKcPvS0_th.part.1
08009a5a l     F .text	0000000e _ZL13esp8266_closeP6os_dev.part.2
08009a68 l     F .text	00000016 _ZL18register_transportPKcPvS0_th
08009a80 l     F .text	0000001c _ZL13esp8266_closeP6os_dev
08009a9c l     F .text	00000094 _ZL12esp8266_openP6os_devmPv
20002d78 l     O .bss	000000d8 _ZL10controller
20002e50 l     O .bss	00000100 _ZL17esp8266_rx_buffer
20002f50 l     O .bss	00000190 _ZL17esp8266_tx_buffer
200030e0 l     O .bss	00000100 _ZL21esp8266_parser_buffer
20000210 l     O .data	00000001 _ZL10first_open
0800e111 l     O .text	00000016 _ZL13WIFI_PASSWORD
0800e12c l     O .text	00000014 _ZL13network_iface
0800e140 l     O .text	00000008 _ZL9WIFI_SSID
00000000 l    df *ABS*	00000000 transport.cpp
08009d18 l     F .text	00000004 _ZL10oc_ep_sizePK11oc_endpoint
08009d1c l     F .text	00000004 _ZL14oc_ep_has_connPK11oc_endpoint
08009d20 l     F .text	00000004 _ZL7oc_initv
08009d24 l     F .text	00000002 _ZL11oc_shutdownv
08009d28 l     F .text	00000020 _ZL9oc_ep_strPciPK11oc_endpoint
08009d48 l     F .text	00000098 _ZL11oc_tx_ucastP7os_mbuf
200031e0 l     O .bss	00000004 _ZL14network_device
200031e4 l     O .bss	00000004 _ZL6server
200031e8 l     O .bss	00000004 _ZL6socket
20000211 l     O .data	00000001 _ZL12transport_id
0800e178 l     O .text	00000024 _ZL9transport
00000000 l    df *ABS*	00000000 util.c
00000000 l    df *ABS*	00000000 Controller.cpp
00000000 l    df *ABS*	00000000 ATParser.cpp
00000000 l    df *ABS*	00000000 BufferedSerial.cpp
0800a6c0 l     F .text	00000002 _ZL12uart_tx_donePv
0800a6c2 l     F .text	0000000e _ZN14BufferedSerial5primeEv.part.0
0800a6c2 l     F .text	0000000e _ZL12uart_rx_charPvh.part.4
0800a6c2 l     F .text	0000000e _ZN14BufferedSerial5rxIrqEh.part.3
0800a6c2 l     F .text	0000000e _ZL12uart_tx_charPv.part.2
0800a78a l     F .text	00000010 _ZL12uart_tx_charPv
0800a884 l     F .text	0000002c _ZL12uart_rx_charPvh
00000000 l    df *ABS*	00000000 MyBuffer.cpp
00000000 l    df *ABS*	00000000 creator.cpp
200032f8 l     O .bss	00000078 _ZL8nrf24l01
00000000 l    df *ABS*	00000000 driver.cpp
0800a93c l     F .text	00000014 _ZL16default_callbackP8os_event
0800a950 l     F .text	00000018 _ZL20nrf24l01_irq_handlerPv
0800a968 l     F .text	0000000e _ZL14nrf24l01_closeP6os_dev.part.1
0800a968 l     F .text	0000000e _ZL18register_transportPKcPvS0_th.part.2
0800a978 l     F .text	00000018 _ZL14nrf24l01_closeP6os_dev
0800a990 l     F .text	00000016 _ZL18register_transportPKcPvS0_th
0800a9a8 l     F .text	00000110 _ZL13nrf24l01_openP6os_devmPv
0800ad68 l     F .text	0000000c _GLOBAL__sub_I_nrf24l01_init
20003370 l     O .bss	0000001c _ZL10controller
2000338c l     O .bss	00000010 _ZL14nrf24l01_event
200033a0 l     O .bss	00000008 _ZL19sensor_node_address
20000218 l     O .data	00000001 _ZL10first_open
0800e3a0 l     O .text	00000014 _ZL13network_iface
00000000 l    df *ABS*	00000000 nRF24L01P.cpp
00000000 l    df *ABS*	00000000 transport.cpp
0800b896 l     F .text	00000004 _ZL10oc_ep_sizePK11oc_endpoint
0800b89a l     F .text	00000004 _ZL14oc_ep_has_connPK11oc_endpoint
0800b89e l     F .text	00000004 _ZL7oc_initv
0800b8a2 l     F .text	00000002 _ZL11oc_shutdownv
0800b8a4 l     F .text	00000020 _ZL9oc_ep_strPciPK11oc_endpoint
0800b8c4 l     F .text	00000130 _ZL11oc_tx_ucastP7os_mbuf
200033a8 l     O .bss	00000004 _ZL14network_device
200033ac l     O .bss	0000000c _ZL18nrf24l01_tx_buffer
200033b8 l     O .bss	00000004 _ZL6server
200033bc l     O .bss	00000001 _ZZL16nrf24l01_tx_mbufP8nrf24l01P7os_mbufE8tx_count
20000219 l     O .data	00000001 _ZL12transport_id
0800e5d4 l     O .text	00000024 _ZL9transport
00000000 l    df *ABS*	00000000 creator.c
200033c0 l     O .bss	00000064 itf_remote_sensor
20003428 l     O .bss	00000438 remote_sensor_dev
00000000 l    df *ABS*	00000000 remote_sensor.c
0800bb3c l     F .text	00000034 sensor_get_config_internal
0800bb70 l     F .text	00000004 sensor_close_internal
0800bb74 l     F .text	00000070 sensor_read_internal
0800bbe4 l     F .text	0000000e save_humid.part.1
0800bbe4 l     F .text	0000000e save_temp_raw.part.4
0800bbe4 l     F .text	0000000e save_temp.part.3
0800bbe4 l     F .text	0000000e save_press.part.2
0800bbf2 l     F .text	00000024 save_humid
0800bc16 l     F .text	00000024 save_press
0800bc3a l     F .text	00000024 save_temp
0800bc5e l     F .text	0000001a save_temp_raw
0800bc78 l     F .text	00000012 sensor_open_internal
0800e60c l     O .text	00000028 g_sensor_driver
0800e634 l     O .text	00000050 sensor_types
00000000 l    df *ABS*	00000000 route_coap.c
0800bd7c l     F .text	00000154 receive_callback
20003860 l     O .bss	0000000c rxData
00000000 l    df *ABS*	00000000 creator.c
2000386c l     O .bss	00000014 adc_1_itf_temp_stm32
20003880 l     O .bss	000000d0 temp_stm32_dev
00000000 l    df *ABS*	00000000 ble_adaptor.c
00000000 l    df *ABS*	00000000 ip4_adaptor.c
00000000 l    df *ABS*	00000000 ip_adaptor.c
00000000 l    df *ABS*	00000000 lora_adaptor.c
00000000 l    df *ABS*	00000000 serial_adaptor.c
00000000 l    df *ABS*	00000000 flash_map.c
20003950 l     O .bss	00000078 mfg_areas.6497
00000000 l    df *ABS*	00000000 modlog.c
00000000 l    df *ABS*	00000000 mfg.c
0800c0a0 l     F .text	000000a4 mfg_read_next_mmr
0800c144 l     F .text	00000064 mfg_read_tlv_body
200039c8 l     O .bss	00000001 mfg_initialized
200039cc l     O .bss	00000018 mfg_mmrs
200039e4 l     O .bss	00000004 mfg_num_mmrs
00000000 l    df *ABS*	00000000 vsscanf.c
0800c2b8 l     F .text	00000020 skipspace
0800c2d8 l     F .text	00000018 set_bit
00000000 l    df *ABS*	00000000 hal_flash.c
0800c6c0 l     F .text	0000001c hal_flash_check_addr
00000000 l    df *ABS*	00000000 stm32f1xx_hal_adc.c
00000000 l    df *ABS*	00000000 stm32f1xx_hal_adc_ex.c
00000000 l    df *ABS*	00000000 stm32f1xx_hal_rcc_ex.c
00000000 l    df *ABS*	00000000 sscanf.c
00000000 l    df *ABS*	00000000 strntoumax.c
00000000 l    df *ABS*	00000000 vsprintf.c
00000000 l    df *ABS*	00000000 _arm_truncdfsf2.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 util.c
00000000 l    df *ABS*	00000000 bluepill_my_sensor-sysflash.c
00000000 l    df *ABS*	00000000 SVC_Table.S
00000000 l       .svc_table	00000000 SVC_End
00000000 l    df *ABS*	00000000 srand48.c
080067f4 g     F .text	0000000a oc_random_rand
08003352 g     F .text	00000060 _cbor_value_decode_int64_internal
08001188  w    F .text	00000002 RTC_Alarm_IRQHandler
080020d4 g     F .text	00000044 console_buffer
08001188  w    F .text	00000002 EXTI2_IRQHandler
0800c744  w    F .text	00000002 HAL_ADC_MspInit
0800d4a0 g     O .text	00000008 APBPrescTable
08002c8c g     F .text	00000014 oc_alloc_string
08002e30 g     F .text	00000010 cbor_mbuf_writer_init
08005044 g     F .text	00000034 os_arch_start
20003c90 g       .bss	00000000 __HeapBase
20003b24 g     O .bss	00000008 g_os_task_list
08003b98 g     F .text	00000084 os_idle_task
080095ec g     F .text	00000010 strcpy
0800c8dc g     F .text	0000000a ADC_DMAHalfConvCplt
08008800 g     F .text	000000e0 HAL_GPIO_DeInit
20003c80 g     O .bss	00000006 __rand48_seed
20003bb8 g     O .bss	0000006c stm32_hal_spi0
00000000 g       .svc_table	00000000 SVC_Count
080058ec g     F .text	00000014 fmemopen_w
08001188  w    F .text	00000002 DebugMon_Handler
08004418 g     F .text	0000004c os_mbuf_copydata
0800a208 g     F .text	000000c0 _ZN7ESP82668sendMBufEiP7os_mbuf
20003b08 g     O .bss	00000008 g_os_mempool_list
08003d74 g     F .text	0000001a os_callout_init
08003d90 g     F .text	0000003c os_callout_stop
08005210 g     F .text	00000050 add_malloc_block
08002318 g     F .text	00000018 register_collector_transport
0800ba90 g     F .text	000000ac remote_sensor_create
0800405c g     F .text	00000056 os_eventq_put
08006728 g     F .text	00000034 oc_transport_register
08006d78 g     F .text	00000058 tc_sha256_init
20000110 g       .data	00000000 __data_start__
0800b004 g     F .text	00000012 _ZN9nRF24L01P14getRfFrequencyEv
08005850 g     F .text	00000024 printf
08003924 g     F .text	000000a8 sensor_read
0800de34 g     O .text	00000004 stdout
0800d0e0 g     F .text	0000000c vsprintf
08008e18 g     F .text	00000020 HAL_RCC_GetPCLK1Freq
08008224 g     F .text	00000024 hal_gpio_write
200039f0 g     O .bss	00000010 links_array
08001188  w    F .text	00000002 TIM1_CC_IRQHandler
08008e38 g     F .text	00000020 HAL_RCC_GetPCLK2Freq
0800e05c g     O .text	0000001c stm32_flash_funcs
0800b4a0 g     F .text	000000a8 _ZN9nRF24L01P12getTxAddressEv
08005aac g     F .text	00000038 json_write_mbuf
08004fb0 g     F .text	00000090 os_arch_os_init
08001188  w    F .text	00000002 HardFault_Handler
20003a00 g     O .bss	00000004 g_err
08007814 g     F .text	00000154 hal_timer_init
0800c228 g     F .text	00000016 mfg_seek_next_with_type
08002f1c g     F .text	0000001c cbor_encode_int
08005078 g     F .text	00000050 os_arch_os_start
0800ae50 g     F .text	0000003c _ZN9nRF24L01P15setTransferSizeEii
08001d9e g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hb2119167a92723afE
08002c58 g     F .text	00000034 oc_new_string
0800688c g     F .text	00000014 __wrap_coap_receive
08005156 g     F .text	0000000c SysTick_Handler
2000010c g       .coredata	00000000 __coredata_end__
080088ec g     F .text	0000000a HAL_GPIO_WritePin
080067c8 g     F .text	00000028 oc_init
08003728 g     F .text	00000010 sensor_mgr_find_next_bydevname
080099dc g     F .text	0000007c esp8266_create
08001188  w    F .text	00000002 PVD_IRQHandler
08002e10 g     F .text	0000001e cbor_mbuf_writer
08004766 g     F .text	0000002c os_memblock_put
08004810 g     F .text	0000001c os_msys_get_pkthdr
0800aeca g     F .text	00000028 _ZN9nRF24L01P11getRegisterEi
20003c88 g     O .bss	00000004 flash_map
0800e71c g       *ABS*	00000000 _sidata
0800512c g     F .text	0000002a PendSV_Handler
200031ec g     O .bss	00000004 debug_vrecv
08001188  w    F .text	00000002 NMI_Handler
0800e71c g       .ARM.exidx	00000000 __exidx_end
08001020 g       .text	00000000 __isr_vector_start
08001188  w    F .text	00000002 EXTI3_IRQHandler
080058c0 g     F .text	0000002a memfile_write
08004f34 g     F .text	00000014 os_arch_ctx_sw
08008c5c g     F .text	00000078 HAL_RCC_GetSysClockFreq
08009b78 g     F .text	00000004 esp8266_config
0800a720 g     F .text	00000034 _ZN14BufferedSerial5fgetcEi
08007110 g     F .text	00000068 uart_hal_init
08007738 g     F .text	00000024 hal_system_reset
08003c40 g     F .text	00000058 os_init_idle_task
20000164 g       .data	00000000 __aeabi_unwind_cpp_pr0
0800253c g     F .text	00000008 get_collector_node_address
08004b64 g     F .text	0000000c os_sched_set_current_task
08001e74 g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$isize$GT$3fmt17hb07848a2f9c4477cE
0800e71c g       .ARM.exidx	00000000 __etext
08005a58 g     F .text	00000018 device_get_name
20000214 g     O .data	00000004 _esp
080088f6 g     F .text	00000042 HAL_IWDG_Init
20000224 g       .corebss	00000000 __corebss_start__
080048a0 g     F .text	000000a0 os_mutex_release
080073fc g     F .text	00000024 stm32_resolve_spi_irq_handler
08004a60 g     F .text	00000020 os_sanity_check_register
08004ec4 g     F .text	00000028 os_time_delay
08009328 g     F .text	00000036 stm32_mcu_flash_erase_sector
20003b38 g     O .bss	0000004c coap_json_encoder
20000228 g       .bss	00000000 _sbss
080045e4 g     F .text	0000007c os_mbuf_copyinto
0800c23e g     F .text	00000006 mfg_read_tlv_flash_area
0800226c g     F .text	0000000c console_get_ticks
080033b2 g     F .text	00000020 cbor_parser_init
0800ad92 g     F .text	0000000a _ZN9nRF24L01P7disableEv
08004560 g     F .text	00000084 os_mbuf_prepend
0800c2f0 g     F .text	000003ce vsscanf
080094b8 g     F .text	00000002 sensor_dev_create
080093ac g     F .text	0000007a HAL_DMA_Start_IT
0800bed0 g     F .text	00000040 remote_sensor_start
08004794 g     F .text	00000010 os_mempool_module_init
0800a33a g     F .text	00000004 _ZN7ESP826610setTimeoutEm
08004f5a g     F .text	0000000a os_arch_in_critical
08002448 g     F .text	00000060 get_hardware_id
08001912 g     F .text	00000008 _ZN4core5panic8Location4file17h94cc6af18de736c4E
08008640 g     F .text	000001c0 HAL_GPIO_Init
0800a33e g     F .text	00000008 _ZN7ESP82666attachEPFvPvES0_
08008938 g     F .text	0000000c HAL_IWDG_Refresh
0800a82a  w    F .text	0000001e _ZN8MyBufferIcE3putEc
08004f2e g     F .text	00000006 timer_handler
08003fa4 g     F .text	00000024 os_dev_lookup
08004b94 g     F .text	00000074 os_sched_sleep
080021c0 g     F .text	00000004 semihosting_console_init
0800536c g     F .text	0000001a memcpy
0800b018 g     F .text	00000068 _ZN9nRF24L01P16setRfOutputPowerEi
08005a26 g     F .text	00000020 get_temp_data
0800c748 g     F .text	0000013c HAL_ADC_PollForConversion
08007e48 g     F .text	00000030 hal_watchdog_init
08005914 g     F .text	000000c4 hmac_prng_init
0800191a g     F .text	00000004 _ZN4core5panic8Location4line17h3ffc63f14d0a6636E
20003b88 g     O .bss	00000010 coap_json_value
08002430 g     F .text	00000016 should_send_to_collector
08003ec4 g     F .text	00000008 os_cputime_init
08001188  w    F .text	00000002 EXTI0_IRQHandler
08001188  w    F .text	00000002 I2C2_EV_IRQHandler
0800d18c g     F .text	00000000 .hidden __aeabi_uldivmod
00000020 g       *ABS*	00000000 _imghdr_size
08004b2c g     F .text	0000002c os_sched_ctx_sw_hook
200039e8 g     O .bss	00000004 console_is_midline
080042b6 g     F .text	00000010 os_mbuf_free
20000110 g     O .data	00000004 SystemCoreClock
0800aeb0 g     F .text	00000008 _ZN9nRF24L01P22disableAutoAcknowledgeEv
08001ce2 g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17heed14ddcd875f85bE
20003a38 g     O .bss	00000034 sensor_mgr
0800bf88 g     F .text	00000002 oc_register_ip6
0800a164 g     F .text	0000003c _ZN7ESP826612getIPAddressEv
08004f64 g     F .text	00000036 os_arch_task_stack_init
080067f0 g     F .text	00000004 oc_clock_time
08005260 g     F .text	00000098 malloc
080066ec g     F .text	00000022 coap_set_header_uri_path
08002056 g     F .text	00000018 _ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17h33b3bbdbc74b88baE
0800bfcc g     F .text	00000024 flash_area_read
080018c4 g     F .text	00000000 __bkpt
0800670e g     F .text	0000000e coap_set_header_observe
08003ab4 g     F .text	0000004c __assert_func
0800ace8 g     F .text	0000002a nrf24l01_receive
0800cb30 g     F .text	0000011c HAL_ADC_Start_DMA
08004cac g     F .text	00000034 os_sched_wakeup_ticks
080021e4 g     F .text	00000048 console_pkg_init
08001188  w    F .text	00000002 UsageFault_Handler
08005874 g     F .text	0000003a vsnprintf
080024c4 g     F .text	00000018 is_standalone_node
20003b00 g     O .bss	00000008 g_callout_list
08006064 g     F .text	00000028 oc_send_message
08001188  w    F .text	00000002 ADC1_2_IRQHandler
080066de g     F .text	0000000e coap_set_header_accept
0800a826 g     F .text	00000004 _ZN14BufferedSerial4baudEm
080055e8 g     F .text	00000264 tfp_format
08006324 g     F .text	0000001a coap_init_message
20005000 g       .bss	00000000 __HeapLimit
20000228 g       .bss	00000000 __bss_start__
0800775c g     F .text	00000004 hal_debugger_connected
08009c94 g     F .text	00000054 esp8266_socket_connect
080088e0 g     F .text	0000000c HAL_GPIO_ReadPin
0800a0d0 g     F .text	00000030 _ZN7ESP82664dhcpEbi
0800a8be  w    F .text	0000000c _ZN8MyBufferIcE4initEPcm
20003c40 g     O .bss	0000001c ext_irq_counts
08009360 g     F .text	0000004c stm32_hal_timer_get_freq
20000110 g       .data	00000000 _sdata
08001188  w    F .text	00000002 SPI1_IRQHandler
080085a8 g     F .text	00000098 HAL_FLASHEx_Erase
0800d1bc g     F .text	000002ce .hidden __udivmoddi4
0800b548 g     F .text	0000001c _ZN9nRF24L01P17getStatusRegisterEv
0800af68 g     F .text	0000003c _ZN9nRF24L01P15setTransmitModeEv
08002544 g     F .text	0000000c get_sensor_node_address
08002398 g     F .text	0000001a init_server_post
0800c900 g     F .text	000000fc HAL_ADC_ConfigChannel
08001188  w    F .text	00000002 TAMPER_IRQHandler
08005a74 g     F .text	00000008 is_null_sensor
0800ad74 g     F .text	00000006 _ZN9nRF24L01PC2Ev
08002560 g     F .text	000000bc sensor_network_init
08005c88 g     F .text	00000048 json_rep_finalize
0800349c g     F .text	00000030 _cbor_value_copy_string
0800a2c8 g     F .text	0000005c _ZN7ESP826615_packet_handlerEv
20003b1c g     O .bss	00000004 g_current_task
08004a80 g     F .text	00000050 os_sanity_run
0800671c g     F .text	0000000c oc_evq_get
08002f7c g     F .text	00000024 cbor_encoder_close_container
08004f48 g     F .text	0000000c os_arch_save_sr
08007e20 g     F .text	00000028 hal_uart_close
08004704 g     F .text	00000012 os_mempool_init
08004eec g     F .text	0000003c os_gettimeofday
20003b2c g     O .bss	00000001 g_task_id
08001a0c g     F .text	00000044 _ZN4core5slice22slice_index_order_fail17h604ca25004a88762E
080059d8 g     F .text	0000001c hmac_prng_generate
200039ec g     O .bss	00000001 g_console_input_ignore
0800e044 g     O .text	00000018 stm32_flash_dev
20003c60 g     O .bss	00000020 pFlash
0800cc90 g     F .text	00000100 HAL_ADC_Init
08007b44 g     F .text	00000028 hal_uart_blocking_tx
0800e704 g       .text	00000000 __exidx_start
0800cf98 g     F .text	00000148 strntoumax
08002330 g     F .text	00000068 sensor_network_init_post
08004ad0 g     F .text	00000010 os_sanity_init
080042f2 g     F .text	00000098 os_mbuf_append
0800c244 g     F .text	00000006 mfg_read_tlv_mmr_ref
080050cc g     F .text	00000014 os_set_env
08006f04 g     F .text	00000010 hal_bsp_flash_dev
0800261c g     F .text	00000084 sensor_network_register_interface
0800de2c g     O .text	00000008 MemFile_methods
20003b10 g     O .bss	0000000c g_os_sanity_check_mu
20003a04 g     O .bss	0000000c g_buf_writer
08001188  w    F .text	00000002 DMA1_Channel4_IRQHandler
08003838 g     F .text	00000088 sensor_set_poll_rate_ms
0800b178 g     F .text	00000058 _ZN9nRF24L01P11setCrcWidthEi
08003904 g     F .text	0000001e sensor_register_listener
0800ac94 g     F .text	00000054 nrf24l01_send
08007e9c g     F .text	00000034 _sbrk
08005e04 g     F .text	0000002c temp_stm32_default_cfg
0800355a g     F .text	00000010 cbor_value_calculate_string_length
080020d0 g     F .text	00000004 disable_buffer
0800724c g     F .text	0000001a os_tick_idle
0800aef4 g     F .text	00000038 _ZN9nRF24L01P7powerUpEv
0800cdc4 g     F .text	000000d0 HAL_ADCEx_Calibration_Start
0800222c g     F .text	00000040 console_printf
2000021c g     O .data	00000004 _nrf
0800215c g     F .text	00000028 console_dump
080024a8 g     F .text	0000001c is_collector_node
0800bcf2 g     F .text	00000016 remote_sensor_default_cfg
2000019c g     O .data	00000014 spi0_cfg
080021e0 g     F .text	00000004 console_blocking_mode
08002056 g     F .text	00000018 _ZN4core3fmt3num3imp54_$LT$impl$u20$core..fmt..Display$u20$for$u20$isize$GT$3fmt17hb41e1f6693cd74c4E
0800b0d4 g     F .text	0000005c _ZN9nRF24L01P14setAirDataRateEi
08008f42  w    F .text	0000007a HAL_SPI_Init
080033d2 g     F .text	0000009a cbor_value_enter_container
080099a0 g     F .text	0000003c stm32f1_adc_dev_init
20000224 g       .corebss	00000000 __corebss_end__
080091bc g     F .text	000000d4 HAL_SPI_IRQHandler
08001208 g     F .text	00000002 _init
0800a8cc g     F .text	00000070 nrf24l01_create
08002af0 g     F .text	00000024 oc_rep_finalize
0800b758 g     F .text	00000022 _ZN9nRF24L01P7flushTxEv
08009c58 g     F .text	0000003c esp8266_socket_open
0800a1a0 g     F .text	00000068 _ZN7ESP82664openEPKciS1_i
08008f40  w    F .text	00000002 HAL_SPI_MspInit
0800b5b0 g     F .text	00000014 _ZN9nRF24L01P12readablePipeEv
0800d0ec g     F .text	0000009e .hidden __aeabi_d2f
08001188  w    F .text	00000002 USART3_IRQHandler
08007268 g     F .text	00000038 os_tick_init
080036c8 g     F .text	0000001c sensor_mgr_lock
08001188  w    F .text	00000002 RTC_IRQHandler
0800a392 g     F .text	00000026 _ZN8ATParser5writeEPKci
20003c90 g       .bss	00000000 _ebss
08002ca0 g     F .text	00000010 oc_free_string
08003c98 g     F .text	00000090 os_init
08001188  w    F .text	00000002 DMA1_Channel7_IRQHandler
0800112c  w    F .text	0000003e Reset_Handler
08009ed4 g     F .text	00000058 _ZN7ESP82664initEPcmS0_mS0_mb
080092a0 g     F .text	00000070 TIM_Base_SetConfig
0800a754 g     F .text	00000036 _ZN14BufferedSerial5txIrqEv
08001188  w    F .text	00000002 CAN1_RX1_IRQHandler
08006a66 g     F .text	0000001a _copy
20003a30 g     O .bss	00000001 sysinit_active
08004254 g     F .text	0000000a os_mbuf_pool_init
08006e28 g     F .text	000000cc tc_sha256_final
08005162 g     F .text	0000001e os_default_irq_asm
08004ce0 g     F .text	0000000c os_sched_next_task
0800ae14 g     F .text	0000003c _ZN9nRF24L01P14setRfFrequencyEi
08004ae0 g     F .text	0000004c os_sched_insert
08005a06 g     F .text	00000020 get_temp_raw_data
0800ad7a g     F .text	00000018 _ZN9nRF24L01P6enableEv
08003dcc g     F .text	00000074 os_callout_reset
0800c24c g     F .text	0000005c mfg_init
0800612c g     F .text	00000018 oc_ri_remove_client_cb_by_mid
0800403c g     F .text	00000010 os_dev_reset
0800356a g     F .text	00000004 hal_bsp_hw_id_len
08001188  w    F .text	00000002 TIM4_IRQHandler
080066d0 g     F .text	0000000e coap_set_header_content_format
0800488c g     F .text	00000014 os_mutex_init
0800b3b4 g     F .text	000000ec _ZN9nRF24L01P12getRxAddressEi
080019c8 g     F .text	00000044 _ZN4core5slice20slice_index_len_fail17hedb5bb240677a6b7E
0800bff0 g     F .text	000000ac flash_map_init
080058b0 g     F .text	00000010 vprintf
08003c34 g     F .text	0000000c os_started
20000000 g       .bss	00000000 _ram_start
08004c70 g     F .text	0000003c os_sched_os_timer_exp
20000000 g       .vector_relocation	00000000 __vector_tbl_reloc__
080084c0 g     F .text	000000a0 HAL_FLASH_Program
08002cc6 g     F .text	00000010 _oc_free_array
08005a7c g     F .text	00000008 is_null_sensor_data
08001188  w    F .text	00000002 I2C1_EV_IRQHandler
0800353c g     F .text	0000001e cbor_value_advance
0800b250 g     F .text	000000c0 _ZN9nRF24L01P12setRxAddressEyii
0800b68c g     F .text	000000aa _ZN9nRF24L01P5writeEiPci
0800a37a g     F .text	00000018 _ZN8ATParser5flushEv
0800241c g     F .text	00000014 is_sensor_node
20000224 g       .data	00000000 __data_end__
08006314 g     F .text	00000010 coap_get_mid
080023b2 g     F .text	0000001a init_collector_post
08001d9e g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$isize$GT$3fmt17h318eab348e5a5d7eE
08006b3a g     F .text	0000001a tc_hmac_init
080018c8 g     F .text	00000032 _ZN9cstr_core4CStr8from_ptr17h8dd780023dafede8E
08001188  w    F .text	00000002 DMA1_Channel6_IRQHandler
20003b30 g     O .bss	00000004 g_os_time
0800b080 g     F .text	00000054 _ZN9nRF24L01P16getRfOutputPowerEv
08007420 g     F .text	00000030 hal_spi_init
08007aa8 g     F .text	0000002c hal_uart_init_cbs
08007e90 g     F .text	0000000c hal_watchdog_tickle
20003c90 g       .bss	00000000 __bss_end__
0800608c g     F .text	0000002c oc_buffer_init
0800425e g     F .text	0000002a os_mbuf_get
0800ad9c g     F .text	00000008 _ZN9nRF24L01P6selectEv
08001188  w    F .text	00000002 TIM3_IRQHandler
08001188  w    F .text	00000002 RCC_IRQHandler
08001188  w    F .text	00000002 TIM1_TRG_COM_IRQHandler
0800ae8c g     F .text	00000024 _ZN9nRF24L01P17disableAllRxPipesEv
080066a0 g     F .text	0000001a coap_send_message
08001188  w    F .text	00000002 DMA1_Channel1_IRQHandler
0800bd08 g     F .text	00000074 remote_sensor_init
08001852 g     F .text	00000072 rust_begin_unwind
08005a70 g     F .text	00000004 null_sensor
08004800 g     F .text	00000010 os_msys_reset
08001188 g       .text	00000002 Default_Handler
08008584 g     F .text	00000024 FLASH_PageErase
080011f4 g     F .text	00000014 _start
080069ea g     F .text	0000007c tc_hmac_prng_generate
0800d490 g     O .text	00000010 AHBPrescTable
0800a79c g     F .text	00000080 _ZN14BufferedSerial5primeEv
08002118 g     F .text	00000042 console_printhex
0800cd90 g     F .text	00000034 HAL_ADC_Stop
0800ac18 g     F .text	0000007c nrf24l01_config
0800846c g     F .text	00000054 FLASH_WaitForLastOperation
0800a642 g     F .text	0000001a _ZN8ATParser4recvEPKcz
080050e0 g     F .text	00000006 os_arch_init_task_stack
0800438a g     F .text	00000072 os_mbuf_dup
08004128 g     F .text	0000001a os_eventq_run
0800b1d0 g     F .text	00000038 _ZN9nRF24L01P15getTransferSizeEi
08001188  w    F .text	00000002 EXTI15_10_IRQHandler
0800ca6c g     F .text	000000c4 HAL_ADC_Start
08006144 g     F .text	000000a4 oc_ri_alloc_client_cb
08002402 g     F .text	00000018 do_collector_post
080069b4 g     F .text	00000036 tc_hmac_prng_reseed
08002aac g     F .text	00000034 oc_rep_new
20003aa8 g     O .bss	00000050 g_idle_task
08008248 g     F .text	0000004c hal_gpio_init_out
08008294 g     F .text	00000020 hal_gpio_read
20000148 g     O .data	00000004 sysinit_panic_cb
08001958 g     F .text	00000040 _ZN4core9panicking18panic_bounds_check17h946762cd0671aec9E
080081f4 g     F .text	00000030 hal_gpio_deinit_stm
08008cd4 g     F .text	00000144 HAL_RCC_ClockConfig
20002790 g     O .bss	00000004 g_os_sanity_check_list
080053d8 g     F .text	0000001e strncpy
08003738 g     F .text	00000098 sensor_pkg_init
08007b10 g     F .text	00000034 hal_uart_start_tx
08004716 g     F .text	00000032 os_memblock_get
08004c08 g     F .text	00000068 os_sched_wakeup
200032f0 g     O .bss	00000004 rx_ptr
08009f2c g     F .text	00000008 _ZN7ESP82669configureEi
080041f0 g     F .text	00000026 os_mqueue_get
0800b208 g     F .text	00000048 _ZN9nRF24L01P21enableAutoAcknowledgeEi
080094ba g     F .text	00000010 os_sem_init
08009f34 g     F .text	0000008c _ZN7ESP82667setEchoEb
08002cd6 g     F .text	0000002a _oc_alloc_string_array
0800696c g     F .text	00000048 tc_hmac_prng_init
080067fe g     F .text	00000032 mem_init_mbuf_pool
0800aeb8 g     F .text	00000012 _ZN9nRF24L01P21disableAutoRetransmitEv
08003b00 g     F .text	00000098 os_default_irq
08009654 g     F .text	00000044 stm32f1_adc_create
0800206e g     F .text	0000000a _ZN4core3fmt3num3imp54_$LT$impl$u20$core..fmt..Display$u20$for$u20$usize$GT$3fmt17h7160b6abac7a3a12E
08007470 g     F .text	00000078 hal_spi_slave_set_def_tx_val
20003b20 g     O .bss	00000004 g_os_last_ctx_sw_time
080094cc g     F .text	00000064 os_sem_release
0800b5c4 g     F .text	000000c8 _ZN9nRF24L01P4readEiPci
0800ad74 g     F .text	00000006 _ZN9nRF24L01PC1Ev
0800a100 g     F .text	00000064 _ZN7ESP82667connectEPKcS1_
08005324 g     F .text	00000048 memcmp
08004f9c g     F .text	00000014 os_arch_init
2000010c g       .coredata	00000000 __coredata_start__
20000224 g       .corebss	00000000 __ecorebss
0800cf7c g     F .text	0000001a sscanf
0800d48c  w    F .text	00000002 .hidden __aeabi_ldiv0
08001188  w    F .text	00000002 EXTI9_5_IRQHandler
08002d08 g     F .text	0000000c sysinit_start
08007968 g     F .text	00000084 hal_timer_config
0800aab8 g     F .text	000000cc nrf24l01_init
08003fc8 g     F .text	00000042 os_dev_open
08001cda g     F .text	00000008 _ZN4core3fmt9Formatter15debug_upper_hex17hd6d96e6aa5cb78d8E
0800206e g     F .text	0000000a _ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17ha7805aa8d849f46cE
08002558 g     F .text	00000008 get_sensor_node_names
0800ab84 g     F .text	00000094 nrf24l01_default_cfg
08009530 g     F .text	000000ac os_sem_pend
08007e78 g     F .text	00000018 hal_watchdog_enable
0800a3b8 g     F .text	00000026 _ZN8ATParser4readEPci
080091b6  w    F .text	00000002 HAL_SPI_TxCpltCallback
08007760 g     F .text	00000004 HAL_GetTick
080066ba g     F .text	00000016 coap_set_token
080024dc g     F .text	00000060 get_device_id
08009968 g     F .text	00000038 HAL_ADC_ErrorCallback
08006024 g     F .text	00000040 oc_allocate_mbuf
08005ae4 g     F .text	00000028 init_sensor_coap
08004216 g     F .text	0000003e os_mqueue_put
080047c8 g     F .text	00000038 os_msys_register
20003af8 g     O .bss	00000004 g_os_idle_ctr
0800bf90 g     F .text	0000003c flash_area_open
0800af2c g     F .text	0000003c _ZN9nRF24L01P14setReceiveModeEv
08001188  w    F .text	00000002 SPI2_IRQHandler
08005b0c g     F .text	00000028 json_rep_reset
200031f0 g     O .bss	00000100 rx_buf
080044fa g     F .text	00000066 os_mbuf_cmpf
20003a10 g     O .bss	00000010 root_map
0800191e g     F .text	0000003a _ZN4core9panicking5panic17h53ca63c6ac6312f8E
08002cb0 g     F .text	00000016 _oc_new_array
08005386 g     F .text	00000010 memset
08001d9e g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$usize$GT$3fmt17h562f60f4fbcc2e1dE
08001188  w    F .text	00000002 MemManage_Handler
08001020 g       .text	00000000 __isr_vector
08001e74 g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u32$GT$3fmt17hc1bd8b99f165c287E
080016c0 g     F .text	00000192 main
08001998 g     F .text	00000030 _ZN4core9panicking9panic_fmt17h6b4d8e87b0965449E
08002184 g     F .text	0000003c console_out_nolock
0800bf10 g     F .text	00000074 temp_stm32_create
08008fbc g     F .text	000001fa HAL_SPI_TransmitReceive
0800204c g     F .text	0000000a _ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17heb4d046d241d78d0E
080059f4 g     F .text	00000012 rust_sysinit
0800675c g     F .text	0000001c oc_send_buffer
08002d14 g     F .text	0000000c sysinit_end
0800c09c g     F .text	00000002 modlog_init
080050e6 g     F .text	00000046 SVC_Handler
0800a6d0 g     F .text	00000040 _ZN14BufferedSerial4initEPcmS0_mPKc
0800d0ec g     F .text	0000009e .hidden __truncdfsf2
0800b736 g     F .text	00000022 _ZN9nRF24L01P7flushRxEv
20003b98 g     O .bss	00000020 oc_transports
08008e58 g     F .text	0000003c HAL_RCC_GetClockConfig
0800c700 g     F .text	00000044 hal_flash_read
0800ce94 g     F .text	000000e8 HAL_RCCEx_GetPeriphCLKFreq
08004180 g     F .text	00000008 os_eventq_dflt_get
080079ec g     F .text	0000001c hal_timer_read
0800bf84 g     F .text	00000002 oc_register_gatt
080040b2 g     F .text	00000076 os_eventq_get
08005fa8 g     F .text	00000026 temp_stm32_config
0800a714 g     F .text	0000000c _ZN14BufferedSerial8readableEv
080042e0 g     F .text	00000012 os_mbuf_len
08004f28 g     F .text	00000006 os_time_ms_to_ticks
200039ed g     O .bss	00000001 g_silence_console
08001188  w    F .text	00000002 DMA1_Channel5_IRQHandler
08003e94 g     F .text	00000030 os_callout_wakeup_ticks
08001188  w    F .text	00000002 EXTI4_IRQHandler
080037d0 g     F .text	00000016 sensor_lock
08009ea4 g     F .text	00000030 _log
08001188  w    F .text	00000002 USB_LP_CAN1_RX0_IRQHandler
20003c8c g     O .bss	00000004 flash_map_entries
08004464 g     F .text	00000096 os_mbuf_adj
08005a46 g     F .text	00000012 sensor_get_device
08001020 g       .imghdr	00000000 __text
08001cd2 g     F .text	00000008 _ZN4core3fmt9Formatter15debug_lower_hex17h6ead2f28bb05b574E
0800c1a8 g     F .text	00000080 mfg_seek_next
080053b4 g     F .text	00000014 strcmp
080036f0 g     F .text	00000038 sensor_mgr_find_next
08004b58 g     F .text	0000000c os_sched_get_current_task
08002f5c g     F .text	00000020 cbor_encoder_create_map
080021c4 g     F .text	0000001c console_write
0800b78c g     F .text	0000010a _ZN9nRF24L01P4initEiiiiiiiiihhyPKyh
080095dc g     F .text	00000010 lrand48
08003570 g     F .text	0000001c hal_bsp_hw_id
0800a81c g     F .text	0000000a _ZN14BufferedSerial6attachEPFvPvES0_i
0800118c g     F .text	00000040 SystemInit
08003ecc g     F .text	00000006 os_cputime_get32
0800b9f4 g     F .text	00000024 init_nrf24l01_server
0800a324 g     F .text	00000016 _Z14packet_handlerPv
0800a3e0 g     F .text	00000050 _ZN8ATParser5vsendEPKcSt9__va_list
0800afd4 g     F .text	00000030 _ZN9nRF24L01P18disableRxInterruptEv
08004142 g     F .text	0000003e os_eventq_remove
080068a0 g     F .text	00000002 _fini
080023cc g     F .text	0000001e sensor_network_do_post
08001188  w    F .text	00000002 USB_HP_CAN1_TX_IRQHandler
08005396 g     F .text	0000001e sprintf
0800a65c g     F .text	00000064 _ZN8ATParser3oobEPKcPFvPvES2_
0800ad12 g     F .text	00000018 nrf24l01_readable_pipe
0800a848 g     F .text	00000016 _ZN14BufferedSerial4putcEi
08004b70 g     F .text	00000024 os_sched
0800b77a g     F .text	00000012 _ZN9nRF24L01P9flushTxRxEv
08006778 g     F .text	00000050 oc_send_multicast_message
08007ad4 g     F .text	0000003c hal_uart_start_rx
08004940 g     F .text	000000dc os_mutex_pend
0800bc8c g     F .text	00000040 remote_sensor_lookup_type
00000000 g       .svc_table	00000000 SVC_Table
08001188  w    F .text	00000002 DMA1_Channel3_IRQHandler
080076d0 g     F .text	00000068 hal_spi_tx_val
20003c24 g     O .bss	00000010 stm32_tmr0
0800afa4 g     F .text	00000030 _ZN9nRF24L01P17enableRxInterruptEv
08009fc0 g     F .text	00000090 _ZN7ESP82665resetEv
08007764 g     F .text	00000004 HAL_InitTick
08006340 g     F .text	0000035e coap_serialize_message
20005000 g       .bss	00000000 __StackTop
08002f38 g     F .text	00000022 cbor_encode_text_string
080041d0 g     F .text	00000020 os_mqueue_init
08001188  w    F .text	00000002 TIM1_UP_IRQHandler
08001d40 g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u8$GT$3fmt17h1d24bfddebe6efa8E
0800a050 g     F .text	00000080 _ZN7ESP82667startupEi
08002078 g     F .text	00000058 console_flush
080074e8 g     F .text	000001e8 hal_spi_config
200029b8 g     O .bss	00000004 oc_content_format
0800a8b0  w    F .text	0000000e _ZN8MyBufferIcE5clearEv
08001e74 g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hc44988ae29d24532E
08001188  w    F .text	00000002 WWDG_IRQHandler
08006abe g     F .text	0000007c tc_hmac_set_key
0800a85e g     F .text	00000024 _ZN14BufferedSerial5rxIrqEh
20003a6c g     O .bss	00000020 st_up_osco
08006dd0 g     F .text	00000058 tc_sha256_update
08003e40 g     F .text	00000054 os_callout_tick
0800e6ac g     O .text	00000048 sysflash_map_dflt
08001d40 g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h33ff4d4021f61f61E
080023ea g     F .text	00000018 do_server_post
08001188  w    F .text	00000002 TIM2_IRQHandler
0800112c g       .text	00000000 __isr_vector_end
08003d28 g     F .text	0000001a os_start
0800a628 g     F .text	0000001a _ZN8ATParser4sendEPKcz
08006a80 g     F .text	00000004 _set
08007450 g     F .text	00000020 hal_spi_enable
08002300 g     F .text	00000018 register_server_transport
08002550 g     F .text	00000008 get_sensor_node_addresses
08007b6c g     F .text	00000298 hal_uart_config
08001ce2 g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u8$GT$3fmt17he275dc913fe9b8e5E
080038c0 g     F .text	0000002a sensor_mgr_register
0800adcc g     F .text	00000048 _ZN9nRF24L01P11setRegisterEii
08005cd0 g     F .text	00000098 do_sensor_post
0800c9fc g     F .text	00000070 ADC_Enable
08001188  w    F .text	00000002 TIM1_BRK_IRQHandler
0800a36c g     F .text	00000006 _ZN8ATParser4putcEc
20005000 g       .imghdr	00000000 _estack
08004660 g     F .text	00000038 os_mbuf_concat
08001188  w    F .text	00000002 EXTI1_IRQHandler
08009ce8 g     F .text	00000030 esp8266_socket_send_mbuf
0800c2a8 g     F .text	00000010 mfg_open
20000154 g     O .data	00000008 g_os_run_list
0800ba18 g     F .text	00000078 nrf24l01_register_transport
20000224 g       .data	00000000 _edata
080011cc g     F .text	00000028 NVIC_Relocate
0800bf86 g     F .text	00000002 oc_register_ip4
0800bccc g     F .text	00000026 remote_sensor_config
08002f12 g     F .text	0000000a cbor_encoder_init
08006830 g     F .text	0000005a sysinit_app
080036e4 g     F .text	0000000c sensor_mgr_unlock
200027c8 g     O .bss	00000004 os_flags
08006100 g     F .text	0000002c oc_ri_mem_init
08008448 g     F .text	00000024 HAL_FLASH_Unlock
08004f54 g     F .text	00000006 os_arch_restore_sr
0800adac g     F .text	00000020 _ZN9nRF24L01P8spiWriteEh
08005e30 g     F .text	0000006c temp_stm32_init
20005000 g       *ABS*	00000000 __StackLimit
20003afc g     O .bss	00000004 g_os_started
0800400a g     F .text	00000030 os_dev_close
08001188  w    F .text	00000002 USART2_IRQHandler
08001e74 g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$usize$GT$3fmt17h27565ff90d14f5eeE
08002288 g     F .text	00000078 sensor_network_register_transport
08008944 g     F .text	00000318 HAL_RCC_OscConfig
0800346c g     F .text	0000002e cbor_value_leave_container
08002c34 g     F .text	00000024 oc_rep_init
0800190e g     F .text	00000004 _ZN4core5panic9PanicInfo8location17h5226165d8771f8a2E
08001020 g     O .text	00000000 g_pfnVectors
08001a50 g     F .text	00000248 _ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E
0800c88c g     F .text	0000004e ADC_DMAConvCplt
080042c6 g     F .text	0000001a os_mbuf_free_chain
20003a20 g     O .bss	00000010 g_encoder
0800482c g     F .text	00000060 os_msys_init
0800b130 g     F .text	00000048 _ZN9nRF24L01P14getAirDataRateEv
08001cca g     F .text	00000008 _ZN4core3fmt9Formatter9alternate17hd09f58cee14df2eeE
08001188  w    F .text	00000002 I2C2_ER_IRQHandler
080043fc g     F .text	0000001c os_mbuf_off
08001188  w    F .text	00000002 DMA1_Channel2_IRQHandler
080082b4 g     F .text	00000024 hal_gpio_irq_enable
08004e40 g     F .text	0000000c os_time_get
0800ad2c g     F .text	0000001c nrf24l01_set_rx_callback
20003a90 g     O .bss	00000018 sensor_base_ts
080035d8 g     F .text	0000002c sensor_mgr_match_bytype
08005b34 g     F .text	00000038 json_rep_new
08004288 g     F .text	0000002e os_mbuf_get_pkthdr
0800d48c  w    F .text	00000002 .hidden __aeabi_idiv0
08002dc0 g     F .text	00000050 cbor_mbuf_reader_init
08009310 g     F .text	00000018 TIM_CCxChannelCmd
080091b8  w    F .text	00000002 HAL_SPI_ErrorCallback
08001188  w    F .text	00000002 CAN1_SCE_IRQHandler
0800c8da  w    F .text	00000002 HAL_ADC_ConvHalfCpltCallback
08001188  w    F .text	00000002 FLASH_IRQHandler
08005b6c g     F .text	0000011c init_sensor_post
08004d10 g     F .text	000000e4 os_task_init
08001d9e g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u32$GT$3fmt17hc8816b6e2fbd78aaE
08001188  w    F .text	00000002 BusFault_Handler
08001188  w    F .text	00000002 USART1_IRQHandler
080053c8 g     F .text	00000010 strlen
08003ef4 g     F .text	00000088 os_dev_create
08004748 g     F .text	0000001e os_memblock_put_from_cb
0800b310 g     F .text	000000a4 _ZN9nRF24L01P12setTxAddressEyi
0800404c g     F .text	00000010 os_eventq_init
08004e4c g     F .text	00000078 os_time_advance
08002ae0 g     F .text	00000010 oc_rep_reset
08009b30 g     F .text	00000034 esp8266_init
08004cec g     F .text	00000024 os_sched_resort
08002b6c g     F .text	000000c8 oc_parse_rep
08006b54 g     F .text	0000000c tc_hmac_update
0800c6dc g     F .text	00000024 hal_flash_init
0800ada4 g     F .text	00000008 _ZN9nRF24L01P8deselectEv
08001188  w    F .text	00000002 I2C1_ER_IRQHandler
0800b564 g     F .text	0000004c _ZN9nRF24L01P8readableEi
08007fd8 g     F .text	00000054 HAL_SPI_QueueTransmit
08009e04 g     F .text	000000a0 esp8266_register_transport
08009de0 g     F .text	00000024 init_esp8266_server
0800c8e6 g     F .text	0000001a ADC_DMAError
080038ea g     F .text	0000001a sensor_init
0800a346 g     F .text	00000026 _ZN8ATParser4initER14BufferedSerialPciPKcib
08006fc8 g     F .text	00000022 adc_chan_config
20003c34 g     O .bss	0000000c g_wdt_cfg
08003f7c g     F .text	00000028 os_dev_initialize_all
08005e9c g     F .text	0000008c temp_stm32_get_raw_temperature
0800802c g     F .text	0000003c HAL_SPI_Transmit_IT_Custom
0800a430 g     F .text	000001f8 _ZN8ATParser5vrecvEPKcSt9__va_list
2000015c g     O .data	00000008 g_os_sleep_list
080095fc g     F .text	00000058 jrand48
0800ad48 g     F .text	00000020 nrf24l01_flush_txrx
08006f14 g     F .text	000000b4 hal_bsp_init
08003d44 g     F .text	00000030 os_pkg_init
080081c0 g     F .text	00000034 hal_gpio_init_stm
08009bc8 g     F .text	00000090 esp8266_connect
08006b60 g     F .text	00000050 tc_hmac_final
08004a50 g     F .text	0000000e os_sanity_check_init
0800e71c g       *ABS*	00000000 __ecoredata
08007e04 g     F .text	0000001c hal_uart_init
08009428 g     F .text	00000090 HAL_DMA_Abort_IT
08002b14 g     F .text	00000058 oc_free_rep
08001188  w    F .text	00000002 USBWakeUp_IRQHandler
0800584c g     F .text	00000004 vfprintf
0800cc4c g     F .text	00000044 ADC_ConversionStop_Disable
0800bf8c g     F .text	00000002 oc_register_serial
0800a372 g     F .text	00000008 _ZN8ATParser5fgetcEv
080082fc g     F .text	000000fc hal_gpio_irq_init
0800a710 g     F .text	00000004 _ZN14BufferedSerial9configureEi
08009b64 g     F .text	00000014 esp8266_default_cfg
080082d8 g     F .text	00000024 hal_gpio_irq_disable
080052f8 g     F .text	0000002c free
0800c88a  w    F .text	00000002 HAL_ADC_ConvCpltCallback
08009b7c g     F .text	0000004a esp8266_set_credentials
0800c884 g     F .text	00000006 HAL_ADC_GetValue
0800bf8a g     F .text	00000002 oc_register_lora



Disassembly of section .text:

08001020 <__isr_vector>:
 8001020:	20005000 	.word	0x20005000
 8001024:	0800112d 	.word	0x0800112d
 8001028:	08001189 	.word	0x08001189
 800102c:	08001189 	.word	0x08001189
 8001030:	08001189 	.word	0x08001189
 8001034:	08001189 	.word	0x08001189
 8001038:	08001189 	.word	0x08001189
	...
 800104c:	080050e7 	.word	0x080050e7
 8001050:	08001189 	.word	0x08001189
 8001054:	00000000 	.word	0x00000000
 8001058:	0800512d 	.word	0x0800512d
 800105c:	08005157 	.word	0x08005157
 8001060:	08001189 	.word	0x08001189
 8001064:	08001189 	.word	0x08001189
 8001068:	08001189 	.word	0x08001189
 800106c:	08001189 	.word	0x08001189
 8001070:	08001189 	.word	0x08001189
 8001074:	08001189 	.word	0x08001189
 8001078:	08001189 	.word	0x08001189
 800107c:	08001189 	.word	0x08001189
 8001080:	08001189 	.word	0x08001189
 8001084:	08001189 	.word	0x08001189
 8001088:	08001189 	.word	0x08001189
 800108c:	08001189 	.word	0x08001189
 8001090:	08001189 	.word	0x08001189
 8001094:	08001189 	.word	0x08001189
 8001098:	08001189 	.word	0x08001189
 800109c:	08001189 	.word	0x08001189
 80010a0:	08001189 	.word	0x08001189
 80010a4:	08001189 	.word	0x08001189
 80010a8:	08001189 	.word	0x08001189
 80010ac:	08001189 	.word	0x08001189
 80010b0:	08001189 	.word	0x08001189
 80010b4:	08001189 	.word	0x08001189
 80010b8:	08001189 	.word	0x08001189
 80010bc:	08001189 	.word	0x08001189
 80010c0:	08001189 	.word	0x08001189
 80010c4:	08001189 	.word	0x08001189
 80010c8:	08001189 	.word	0x08001189
 80010cc:	08001189 	.word	0x08001189
 80010d0:	08001189 	.word	0x08001189
 80010d4:	08001189 	.word	0x08001189
 80010d8:	08001189 	.word	0x08001189
 80010dc:	08001189 	.word	0x08001189
 80010e0:	08001189 	.word	0x08001189
 80010e4:	08001189 	.word	0x08001189
 80010e8:	08001189 	.word	0x08001189
 80010ec:	08001189 	.word	0x08001189
 80010f0:	08001189 	.word	0x08001189
 80010f4:	08001189 	.word	0x08001189
 80010f8:	08001189 	.word	0x08001189
 80010fc:	08001189 	.word	0x08001189
 8001100:	08001189 	.word	0x08001189
 8001104:	08001189 	.word	0x08001189
 8001108:	08001189 	.word	0x08001189
	...
 8001128:	f108f85f 	.word	0xf108f85f

0800112c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800112c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800112e:	e003      	b.n	8001138 <LoopCopyDataInit>

08001130 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001130:	4b0e      	ldr	r3, [pc, #56]	; (800116c <LoopFillZeroCoreBss+0x10>)
  ldr r3, [r3, r1]
 8001132:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001134:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001136:	3104      	adds	r1, #4

08001138 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001138:	480d      	ldr	r0, [pc, #52]	; (8001170 <LoopFillZeroCoreBss+0x14>)
  ldr r3, =_edata
 800113a:	4b0e      	ldr	r3, [pc, #56]	; (8001174 <LoopFillZeroCoreBss+0x18>)
  adds r2, r0, r1
 800113c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800113e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001140:	d3f6      	bcc.n	8001130 <CopyDataInit>

  ldr r2, =_sbss
 8001142:	4a0d      	ldr	r2, [pc, #52]	; (8001178 <LoopFillZeroCoreBss+0x1c>)
  b LoopFillZerobss
 8001144:	e002      	b.n	800114c <LoopFillZerobss>

08001146 <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001146:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001148:	f842 3b04 	str.w	r3, [r2], #4

0800114c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800114c:	4b0b      	ldr	r3, [pc, #44]	; (800117c <LoopFillZeroCoreBss+0x20>)
  cmp r2, r3
 800114e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001150:	d3f9      	bcc.n	8001146 <FillZerobss>

/* Mynewt specific corebss clearing. */
  ldr   r2, =__corebss_start__
 8001152:	4a0b      	ldr	r2, [pc, #44]	; (8001180 <LoopFillZeroCoreBss+0x24>)
  b     LoopFillZeroCoreBss
 8001154:	e002      	b.n	800115c <LoopFillZeroCoreBss>

08001156 <FillZeroCoreBss>:

/* Zero fill the bss segment. */
FillZeroCoreBss:
  movs  r3, #0
 8001156:	2300      	movs	r3, #0
  str   r3, [r2], #4
 8001158:	f842 3b04 	str.w	r3, [r2], #4

0800115c <LoopFillZeroCoreBss>:

LoopFillZeroCoreBss:
  ldr   r3, =__corebss_end__
 800115c:	4b09      	ldr	r3, [pc, #36]	; (8001184 <LoopFillZeroCoreBss+0x28>)
  cmp   r2, r3
 800115e:	429a      	cmp	r2, r3
  bcc   FillZeroCoreBss
 8001160:	d3f9      	bcc.n	8001156 <FillZeroCoreBss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001162:	f000 f813 	bl	800118c <SystemInit>
/* Call libc's entry point.*/
  bl  _start
 8001166:	f000 f845 	bl	80011f4 <_start>
 800116a:	0000      	.short	0x0000
  ldr r3, =_sidata
 800116c:	0800e71c 	.word	0x0800e71c
  ldr r0, =_sdata
 8001170:	20000110 	.word	0x20000110
  ldr r3, =_edata
 8001174:	20000224 	.word	0x20000224
  ldr r2, =_sbss
 8001178:	20000228 	.word	0x20000228
  ldr r3, = _ebss
 800117c:	20003c90 	.word	0x20003c90
  ldr   r2, =__corebss_start__
 8001180:	20000224 	.word	0x20000224
  ldr   r3, =__corebss_end__
 8001184:	20000224 	.word	0x20000224

08001188 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001188:	e7fe      	b.n	8001188 <ADC1_2_IRQHandler>
	...

0800118c <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800118c:	4b0d      	ldr	r3, [pc, #52]	; (80011c4 <SystemInit+0x38>)
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	f042 0201 	orr.w	r2, r2, #1
 8001194:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001196:	6859      	ldr	r1, [r3, #4]
 8001198:	4a0b      	ldr	r2, [pc, #44]	; (80011c8 <SystemInit+0x3c>)
 800119a:	400a      	ands	r2, r1
 800119c:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80011a4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80011a8:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80011b0:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80011b2:	685a      	ldr	r2, [r3, #4]
 80011b4:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80011b8:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80011ba:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80011be:	609a      	str	r2, [r3, #8]
    SystemInit_ExtMemCtl(); 
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Relocate the vector table */
  NVIC_Relocate();
 80011c0:	f000 b804 	b.w	80011cc <NVIC_Relocate>
 80011c4:	40021000 	.word	0x40021000
 80011c8:	f8ff0000 	.word	0xf8ff0000

080011cc <NVIC_Relocate>:
     * designated in the linker script.
     */
    current_location = (uint32_t *)&__isr_vector;
    new_location = (uint32_t *)&__vector_tbl_reloc__;

    if (new_location != current_location) {
 80011cc:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <NVIC_Relocate+0x1c>)
 80011ce:	4907      	ldr	r1, [pc, #28]	; (80011ec <NVIC_Relocate+0x20>)
 80011d0:	428b      	cmp	r3, r1
 80011d2:	d005      	beq.n	80011e0 <NVIC_Relocate+0x14>
 80011d4:	2200      	movs	r2, #0
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
            new_location[i] = current_location[i];
 80011d6:	5888      	ldr	r0, [r1, r2]
 80011d8:	5098      	str	r0, [r3, r2]
 80011da:	3204      	adds	r2, #4
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
 80011dc:	2aec      	cmp	r2, #236	; 0xec
 80011de:	d1fa      	bne.n	80011d6 <NVIC_Relocate+0xa>
    }

    /* Set VTOR except for M0 */
#if ((__CORTEX_M == 0) && (__VTOR_PRESENT == 0))
#else
    SCB->VTOR = (uint32_t)&__vector_tbl_reloc__;
 80011e0:	4a03      	ldr	r2, [pc, #12]	; (80011f0 <NVIC_Relocate+0x24>)
 80011e2:	6093      	str	r3, [r2, #8]
#endif
}
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	20000000 	.word	0x20000000
 80011ec:	08001020 	.word	0x08001020
 80011f0:	e000ed00 	.word	0xe000ed00

080011f4 <_start>:

/*
 * Rudimentary startup function.
 */
void _start(void)
{
 80011f4:	b508      	push	{r3, lr}
    int rc;

    rc = main(0, NULL);
    exit(rc);
#else
    os_init(main);
 80011f6:	4803      	ldr	r0, [pc, #12]	; (8001204 <_start+0x10>)
 80011f8:	f002 fd4e 	bl	8003c98 <os_init>
    os_start();
#endif
}
 80011fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    os_start();
 8001200:	f002 bd92 	b.w	8003d28 <os_start>
 8001204:	080016c1 	.word	0x080016c1

08001208 <_init>:

void
_init(void)
{
}
 8001208:	4770      	bx	lr

0800120a <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3cd16d96a1ab09b9E>:
 800120a:	b5b0      	push	{r4, r5, r7, lr}
 800120c:	6805      	ldr	r5, [r0, #0]
 800120e:	4608      	mov	r0, r1
 8001210:	460c      	mov	r4, r1
 8001212:	f000 fd5e 	bl	8001cd2 <_ZN4core3fmt9Formatter15debug_lower_hex17h6ead2f28bb05b574E>
 8001216:	b128      	cbz	r0, 8001224 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3cd16d96a1ab09b9E+0x1a>
 8001218:	4628      	mov	r0, r5
 800121a:	4621      	mov	r1, r4
 800121c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001220:	f000 bdbd 	b.w	8001d9e <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hb2119167a92723afE>
 8001224:	4620      	mov	r0, r4
 8001226:	f000 fd58 	bl	8001cda <_ZN4core3fmt9Formatter15debug_upper_hex17hd6d96e6aa5cb78d8E>
 800122a:	b128      	cbz	r0, 8001238 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3cd16d96a1ab09b9E+0x2e>
 800122c:	4628      	mov	r0, r5
 800122e:	4621      	mov	r1, r4
 8001230:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001234:	f000 be1e 	b.w	8001e74 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hc44988ae29d24532E>
 8001238:	4628      	mov	r0, r5
 800123a:	4621      	mov	r1, r4
 800123c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001240:	f000 bf09 	b.w	8002056 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17h33b3bbdbc74b88baE>

08001244 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hbb6268d049e95435E>:
 8001244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001248:	b082      	sub	sp, #8
 800124a:	f8d1 8000 	ldr.w	r8, [r1]
 800124e:	460c      	mov	r4, r1
 8001250:	e9d1 6702 	ldrd	r6, r7, [r1, #8]
 8001254:	6805      	ldr	r5, [r0, #0]
 8001256:	4608      	mov	r0, r1
 8001258:	f000 fd37 	bl	8001cca <_ZN4core3fmt9Formatter9alternate17hd09f58cee14df2eeE>
 800125c:	6821      	ldr	r1, [r4, #0]
 800125e:	b148      	cbz	r0, 8001274 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hbb6268d049e95435E+0x30>
 8001260:	f041 0108 	orr.w	r1, r1, #8
 8001264:	6021      	str	r1, [r4, #0]
 8001266:	68a0      	ldr	r0, [r4, #8]
 8001268:	2800      	cmp	r0, #0
 800126a:	bf02      	ittt	eq
 800126c:	2001      	moveq	r0, #1
 800126e:	220a      	moveq	r2, #10
 8001270:	e9c4 0202 	strdeq	r0, r2, [r4, #8]
 8001274:	f041 0004 	orr.w	r0, r1, #4
 8001278:	6020      	str	r0, [r4, #0]
 800127a:	6828      	ldr	r0, [r5, #0]
 800127c:	4621      	mov	r1, r4
 800127e:	9001      	str	r0, [sp, #4]
 8001280:	a801      	add	r0, sp, #4
 8001282:	f000 fd8c 	bl	8001d9e <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hb2119167a92723afE>
 8001286:	e9c4 6702 	strd	r6, r7, [r4, #8]
 800128a:	f8c4 8000 	str.w	r8, [r4]
 800128e:	b002      	add	sp, #8
 8001290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001294 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc9a0951cf9a1a237E>:
 8001294:	b5b0      	push	{r4, r5, r7, lr}
 8001296:	6805      	ldr	r5, [r0, #0]
 8001298:	4608      	mov	r0, r1
 800129a:	460c      	mov	r4, r1
 800129c:	f000 fd19 	bl	8001cd2 <_ZN4core3fmt9Formatter15debug_lower_hex17h6ead2f28bb05b574E>
 80012a0:	b128      	cbz	r0, 80012ae <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc9a0951cf9a1a237E+0x1a>
 80012a2:	4628      	mov	r0, r5
 80012a4:	4621      	mov	r1, r4
 80012a6:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80012aa:	f000 bd1a 	b.w	8001ce2 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17heed14ddcd875f85bE>
 80012ae:	4620      	mov	r0, r4
 80012b0:	f000 fd13 	bl	8001cda <_ZN4core3fmt9Formatter15debug_upper_hex17hd6d96e6aa5cb78d8E>
 80012b4:	b128      	cbz	r0, 80012c2 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hc9a0951cf9a1a237E+0x2e>
 80012b6:	4628      	mov	r0, r5
 80012b8:	4621      	mov	r1, r4
 80012ba:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80012be:	f000 bd3f 	b.w	8001d40 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h33ff4d4021f61f61E>
 80012c2:	4628      	mov	r0, r5
 80012c4:	4621      	mov	r1, r4
 80012c6:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80012ca:	f000 bebf 	b.w	800204c <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17heb4d046d241d78d0E>

080012ce <_ZN5mylib6mynewt6sensor21null_sensor_data_func17hd8c42d7d02a586efE>:
    sl_func: null_sensor_data_func,
    ..fill_zero!(SensorListener)
};

///  Define a dummy sensor data function in case there is none.
extern fn null_sensor_data_func(_sensor: SensorPtr, _arg: SensorArg, _sensor_data: SensorDataPtr, _sensor_type: SensorType) -> i32 { 0 }
 80012ce:	2000      	movs	r0, #0
 80012d0:	4770      	bx	lr

080012d2 <_ZN5mylib13listen_sensor16read_temperature17h8d029ed87c61b3dbE>:
///  This listener function is called by Mynewt every 10 seconds (for local sensors) or when sensor data is received
///  (for Remote Sensors).  Mynewt has fetched the raw or computed temperature value, passed through `sensor_data`.
///  If this is a Sensor Node, we send the sensor data to the Collector Node.
///  If this is a Collector Node or Standalone Node, we send the sensor data to the CoAP server.  
///  Return 0 if we have processed the sensor data successfully.
extern fn read_temperature(sensor: SensorPtr, _arg: SensorArg, sensor_data: SensorDataPtr, sensor_type: SensorType) -> i32 {
 80012d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012d4:	b091      	sub	sp, #68	; 0x44
 80012d6:	4604      	mov	r4, r0
///  Display message `msg` on the Arm Semihosting console (via OpenOCD).
pub fn console_print(msg: &[u8]) {
    let len = msg.len();
    unsafe {
        //  Call the Semihosting Console API, which is unsafe.
        console_buffer(msg.as_ptr(), len as u32);
 80012d8:	f24d 50f4 	movw	r0, #54772	; 0xd5f4
 80012dc:	f6c0 0000 	movt	r0, #2048	; 0x800
 80012e0:	2111      	movs	r1, #17
 80012e2:	4616      	mov	r6, r2
 80012e4:	f000 fef6 	bl	80020d4 <console_buffer>
        console_flush();  //  TODO: Remove this.
 80012e8:	f000 fec6 	bl	8002078 <console_flush>
    console_print(b"read_temperature\n");
    //  Check that the temperature data is valid.
    //  TODO
    if unsafe { is_null_sensor_data(sensor_data) } { return SYS_EINVAL; }  //  Exit if data is missing
 80012ec:	4630      	mov	r0, r6
 80012ee:	f004 fbc5 	bl	8005a7c <is_null_sensor_data>
 80012f2:	b118      	cbz	r0, 80012fc <_ZN5mylib13listen_sensor16read_temperature17h8d029ed87c61b3dbE+0x2a>
 80012f4:	f06f 0001 	mvn.w	r0, #1
            return 0; 
        }            
    }
    //#endif  //  MYNEWT_VAL(SENSOR_COAP)
    0
}
 80012f8:	b011      	add	sp, #68	; 0x44
 80012fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert!(unsafe { !is_null_sensor(sensor) });
 80012fc:	4620      	mov	r0, r4
 80012fe:	f004 fbb9 	bl	8005a74 <is_null_sensor>
 8001302:	2800      	cmp	r0, #0
 8001304:	f040 80c1 	bne.w	800148a <_ZN5mylib13listen_sensor16read_temperature17h8d029ed87c61b3dbE+0x1b8>
 8001308:	e9dd 1016 	ldrd	r1, r0, [sp, #88]	; 0x58
#[allow(unreachable_patterns)]
#[allow(unused_variables)]
fn get_temperature(sensor_data: *const CVoid, sensor_type: SensorType) -> SensorValue {
    let mut return_value = SensorValue::default();
    match sensor_type {                                //  Is this raw or computed temperature?
        SENSOR_TYPE_AMBIENT_TEMPERATURE_RAW => {  //  If this is raw temperature...
 800130c:	f081 6180 	eor.w	r1, r1, #67108864	; 0x4000000
 8001310:	ea41 0700 	orr.w	r7, r1, r0
    let device = unsafe { sensor_get_device(sensor) };
 8001314:	4620      	mov	r0, r4
 8001316:	f004 fb96 	bl	8005a46 <sensor_get_device>
    let device_name_ptr: *const c_char = unsafe { device_get_name(device) };
 800131a:	f004 fb9d 	bl	8005a58 <device_get_name>
    let device_name: &CStr = unsafe { CStr::from_ptr(device_name_ptr) };
 800131e:	f000 fad3 	bl	80018c8 <_ZN9cstr_core4CStr8from_ptr17h8dd780023dafede8E>
 8001322:	4604      	mov	r4, r0
 8001324:	460d      	mov	r5, r1
 8001326:	2000      	movs	r0, #0
        SENSOR_TYPE_AMBIENT_TEMPERATURE_RAW => {  //  If this is raw temperature...
 8001328:	b9c7      	cbnz	r7, 800135c <_ZN5mylib13listen_sensor16read_temperature17h8d029ed87c61b3dbE+0x8a>
 800132a:	a905      	add	r1, sp, #20
            //  Interpret the sensor data as a sensor_temp_raw_data struct that contains raw temp.
            let mut rawtempdata = SensorTempRawData {
 800132c:	f88d 0018 	strb.w	r0, [sp, #24]
 8001330:	9005      	str	r0, [sp, #20]
                strd_temp_raw: 0,
                strd_temp_raw_is_valid: 0,
            };
            let rc = unsafe { get_temp_raw_data(sensor_data, &mut rawtempdata) };
 8001332:	4630      	mov	r0, r6
 8001334:	f004 fb67 	bl	8005a06 <get_temp_raw_data>
            assert!(rc == 0);
 8001338:	2800      	cmp	r0, #0
 800133a:	f040 80b4 	bne.w	80014a6 <_ZN5mylib13listen_sensor16read_temperature17h8d029ed87c61b3dbE+0x1d4>

            //  Check that the raw temperature data is valid.
            if rawtempdata.strd_temp_raw_is_valid == 0 { return return_value; }  //  Exit if data is not valid
 800133e:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8001342:	2800      	cmp	r0, #0
 8001344:	f000 80a8 	beq.w	8001498 <_ZN5mylib13listen_sensor16read_temperature17h8d029ed87c61b3dbE+0x1c6>
        console_buffer(msg.as_ptr(), len as u32);
 8001348:	f24d 60e4 	movw	r0, #55012	; 0xd6e4
 800134c:	2119      	movs	r1, #25
 800134e:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001352:	f000 febf 	bl	80020d4 <console_buffer>
        console_flush();  //  TODO: Remove this.
 8001356:	f000 fe8f 	bl	8002078 <console_flush>
 800135a:	e00e      	b.n	800137a <_ZN5mylib13listen_sensor16read_temperature17h8d029ed87c61b3dbE+0xa8>
 800135c:	a905      	add	r1, sp, #20
            return_value.val = SensorValueType::Uint(rawtempdata.strd_temp_raw);  //  Raw Temperature in integer (0 to 4095)
            console_print(b"TMP listener got rawtmp \n");  // return_value->int_val);
        },
        SENSOR_TYPE_AMBIENT_TEMPERATURE => {      //  If this is computed temperature...
            //  Interpret the sensor data as a sensor_temp_data struct that contains computed temp.
            let mut tempdata = SensorTempData {
 800135e:	f88d 0018 	strb.w	r0, [sp, #24]
 8001362:	9005      	str	r0, [sp, #20]
                std_temp: 0.0,
                std_temp_is_valid: 0,
            };
            let rc = unsafe { get_temp_data(sensor_data, &mut tempdata) };
 8001364:	4630      	mov	r0, r6
 8001366:	f004 fb5e 	bl	8005a26 <get_temp_data>
            assert!(rc == 0);
 800136a:	2800      	cmp	r0, #0
 800136c:	f040 80a2 	bne.w	80014b4 <_ZN5mylib13listen_sensor16read_temperature17h8d029ed87c61b3dbE+0x1e2>

            //  Check that the computed temperature data is valid.
            if tempdata.std_temp_is_valid == 0 { return return_value; }  //  Exit if data is not valid
 8001370:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8001374:	2800      	cmp	r0, #0
 8001376:	f000 808f 	beq.w	8001498 <_ZN5mylib13listen_sensor16read_temperature17h8d029ed87c61b3dbE+0x1c6>
        console_buffer(msg.as_ptr(), len as u32);
 800137a:	f24d 70b1 	movw	r0, #55217	; 0xd7b1
 800137e:	2111      	movs	r1, #17
 8001380:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001384:	f000 fea6 	bl	80020d4 <console_buffer>
        console_flush();  //  TODO: Remove this.
 8001388:	f000 fe76 	bl	8002078 <console_flush>
///  so this function will return without waiting for the message to be transmitted.  
///  Return 0 if successful, SYS_EAGAIN if network is not ready yet.
pub fn send_sensor_data(sensor_val: &SensorValue, sensor_node: &CStr) -> Result<(), i32>  {  //  Returns an error code upon error.
	console_print(b"send_sensor_data\n");
    //  TODO: Remove val
    let mut val = sensor_value{
 800138c:	f24d 76c2 	movw	r6, #55234	; 0xd7c2
 8001390:	2000      	movs	r0, #0
 8001392:	9003      	str	r0, [sp, #12]
 8001394:	f6c0 0600 	movt	r6, #2048	; 0x800
 8001398:	f8ad 0008 	strh.w	r0, [sp, #8]
        val_type: 0,
        int_val: 0,
        float_val: 0.0,
    };
	//  For Sensor Node: Transmit the sensor data to the Collector Node as CBOR.
	if unsafe { should_send_to_collector(&mut val, sensor_node.as_ptr()) } { 
 800139c:	4621      	mov	r1, r4
    let mut val = sensor_value{
 800139e:	9001      	str	r0, [sp, #4]
 80013a0:	4668      	mov	r0, sp
 80013a2:	9600      	str	r6, [sp, #0]
	if unsafe { should_send_to_collector(&mut val, sensor_node.as_ptr()) } { 
 80013a4:	f001 f844 	bl	8002430 <should_send_to_collector>
 80013a8:	b3b0      	cbz	r0, 8001418 <_ZN5mylib13listen_sensor16read_temperature17h8d029ed87c61b3dbE+0x146>
///  to be transmitted.  Return 0 if successful, `SYS_EAGAIN` if network is not ready yet.
///  The CoAP payload needs to be very compact (under 32 bytes) so it will be encoded in CBOR like this:
///  `{ t: 2870 }`
fn send_sensor_data_to_collector(sensor_val: &SensorValue, _node_id: &CStr) -> Result<(), i32>  {  //  Returns an error code upon error.
	////  TODO: if let SensorValueType::None = sensor_val.val { assert!(false); }
    if unsafe { !NETWORK_IS_READY } { return Err(SYS_EAGAIN); }  //  If network is not ready, tell caller (Sensor Listener) to try later.
 80013aa:	f240 6078 	movw	r0, #1656	; 0x678
 80013ae:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80013b2:	7800      	ldrb	r0, [r0, #0]
 80013b4:	2801      	cmp	r0, #1
 80013b6:	d15a      	bne.n	800146e <_ZN5mylib13listen_sensor16read_temperature17h8d029ed87c61b3dbE+0x19c>

    //  Start composing the CoAP Collector message with the sensor data in the payload.  This will 
    //  block other tasks from composing and posting CoAP messages (through a semaphore).
    //  We only have 1 memory buffer for composing CoAP messages so it needs to be locked.
    let rc = unsafe { init_collector_post() };  assert!(rc);
 80013b8:	f000 fffb 	bl	80023b2 <init_collector_post>
 80013bc:	2800      	cmp	r0, #0
 80013be:	f000 80af 	beq.w	8001520 <_ZN5mylib13listen_sensor16read_temperature17h8d029ed87c61b3dbE+0x24e>

    //  Compose the CoAP Payload in CBOR using the `coap!()` macro.
    let _payload = coap!(@cbor {
 80013c2:	f643 2420 	movw	r4, #14880	; 0x3a20
 80013c6:	f643 2510 	movw	r5, #14864	; 0x3a10
 80013ca:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80013ce:	f2c2 0500 	movt	r5, #8192	; 0x2000
 80013d2:	4620      	mov	r0, r4
 80013d4:	4629      	mov	r1, r5
 80013d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013da:	f001 fdbf 	bl	8002f5c <cbor_encoder_create_map>
 80013de:	f24d 61fd 	movw	r1, #55037	; 0xd6fd
 80013e2:	4628      	mov	r0, r5
 80013e4:	f6c0 0100 	movt	r1, #2048	; 0x800
 80013e8:	2201      	movs	r2, #1
 80013ea:	f001 fda5 	bl	8002f38 <cbor_encode_text_string>
 80013ee:	4628      	mov	r0, r5
 80013f0:	f240 42d2 	movw	r2, #1234	; 0x4d2
 80013f4:	2300      	movs	r3, #0
 80013f6:	f001 fd91 	bl	8002f1c <cbor_encode_int>
 80013fa:	4620      	mov	r0, r4
 80013fc:	4629      	mov	r1, r5
 80013fe:	f001 fdbd 	bl	8002f7c <cbor_encoder_close_container>
    });

    //  Post the CoAP Collector message to the CoAP Background Task for transmission.  After posting the
    //  message to the background task, we release a semaphore that unblocks other requests
    //  to compose and post CoAP messages.
    let rc = unsafe { do_collector_post() };  assert!(rc);
 8001402:	f000 fffe 	bl	8002402 <do_collector_post>
 8001406:	2800      	cmp	r0, #0
 8001408:	f000 8091 	beq.w	800152e <_ZN5mylib13listen_sensor16read_temperature17h8d029ed87c61b3dbE+0x25c>
        console_buffer(msg.as_ptr(), len as u32);
 800140c:	f64d 100c 	movw	r0, #55564	; 0xd90c
 8001410:	2121      	movs	r1, #33	; 0x21
 8001412:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001416:	e023      	b.n	8001460 <_ZN5mylib13listen_sensor16read_temperature17h8d029ed87c61b3dbE+0x18e>
    /// assert_eq!(c_str.to_bytes(), b"foo");
    /// ```
    #[inline]
    pub fn to_bytes(&self) -> &[u8] {
        let bytes = self.to_bytes_with_nul();
        &bytes[..bytes.len() - 1]
 8001418:	1e68      	subs	r0, r5, #1
 800141a:	2d00      	cmp	r5, #0
 800141c:	d051      	beq.n	80014c2 <_ZN5mylib13listen_sensor16read_temperature17h8d029ed87c61b3dbE+0x1f0>
    assert_ne!(node_id.to_bytes()[0], 0);
 800141e:	2800      	cmp	r0, #0
 8001420:	d053      	beq.n	80014ca <_ZN5mylib13listen_sensor16read_temperature17h8d029ed87c61b3dbE+0x1f8>
 8001422:	7820      	ldrb	r0, [r4, #0]
 8001424:	2800      	cmp	r0, #0
 8001426:	d059      	beq.n	80014dc <_ZN5mylib13listen_sensor16read_temperature17h8d029ed87c61b3dbE+0x20a>
	if unsafe { !NETWORK_IS_READY } { return Err(SYS_EAGAIN); }  //  If network is not ready, tell caller (Sensor Listener) to try later.
 8001428:	f240 6078 	movw	r0, #1656	; 0x678
 800142c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001430:	7800      	ldrb	r0, [r0, #0]
 8001432:	2801      	cmp	r0, #1
 8001434:	d11b      	bne.n	800146e <_ZN5mylib13listen_sensor16read_temperature17h8d029ed87c61b3dbE+0x19c>
	let device_id = unsafe { get_device_id() };  assert_ne!(device_id, 0 as *const ::cty::c_char);
 8001436:	f001 f851 	bl	80024dc <get_device_id>
 800143a:	2800      	cmp	r0, #0
 800143c:	9004      	str	r0, [sp, #16]
 800143e:	d07d      	beq.n	800153c <_ZN5mylib13listen_sensor16read_temperature17h8d029ed87c61b3dbE+0x26a>
	let rc = unsafe { init_server_post(0 as *const ::cty::c_char) };  assert!(rc);
 8001440:	2000      	movs	r0, #0
 8001442:	f000 ffa9 	bl	8002398 <init_server_post>
 8001446:	2800      	cmp	r0, #0
 8001448:	f000 809f 	beq.w	800158a <_ZN5mylib13listen_sensor16read_temperature17h8d029ed87c61b3dbE+0x2b8>
    let rc = unsafe { do_server_post() };  assert!(rc);
 800144c:	f000 ffcd 	bl	80023ea <do_server_post>
 8001450:	2800      	cmp	r0, #0
 8001452:	f000 80a1 	beq.w	8001598 <_ZN5mylib13listen_sensor16read_temperature17h8d029ed87c61b3dbE+0x2c6>
 8001456:	f64d 0090 	movw	r0, #55440	; 0xd890
 800145a:	214b      	movs	r1, #75	; 0x4b
 800145c:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001460:	f000 fe38 	bl	80020d4 <console_buffer>
 8001464:	f000 fe08 	bl	8002078 <console_flush>
 8001468:	2000      	movs	r0, #0
    if let Err(err) = rc {
 800146a:	b158      	cbz	r0, 8001484 <_ZN5mylib13listen_sensor16read_temperature17h8d029ed87c61b3dbE+0x1b2>
 800146c:	e001      	b.n	8001472 <_ZN5mylib13listen_sensor16read_temperature17h8d029ed87c61b3dbE+0x1a0>
 800146e:	2001      	movs	r0, #1
 8001470:	b140      	cbz	r0, 8001484 <_ZN5mylib13listen_sensor16read_temperature17h8d029ed87c61b3dbE+0x1b2>
 8001472:	f24d 6084 	movw	r0, #54916	; 0xd684
 8001476:	2116      	movs	r1, #22
 8001478:	f6c0 0000 	movt	r0, #2048	; 0x800
 800147c:	f000 fe2a 	bl	80020d4 <console_buffer>
        console_flush();  //  TODO: Remove this.
 8001480:	f000 fdfa 	bl	8002078 <console_flush>
 8001484:	2000      	movs	r0, #0
}
 8001486:	b011      	add	sp, #68	; 0x44
 8001488:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert!(unsafe { !is_null_sensor(sensor) });
 800148a:	f24d 603c 	movw	r0, #54844	; 0xd63c
 800148e:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001492:	f000 fa44 	bl	800191e <_ZN4core9panicking5panic17h53ca63c6ac6312f8E>
 8001496:	defe      	udf	#254	; 0xfe
    if let SensorValueType::None = temp_sensor_value.val { assert!(false); }  //  Invalid type
 8001498:	f24d 606c 	movw	r0, #54892	; 0xd66c
 800149c:	f6c0 0000 	movt	r0, #2048	; 0x800
 80014a0:	f000 fa3d 	bl	800191e <_ZN4core9panicking5panic17h53ca63c6ac6312f8E>
 80014a4:	defe      	udf	#254	; 0xfe
            assert!(rc == 0);
 80014a6:	f24d 60cc 	movw	r0, #54988	; 0xd6cc
 80014aa:	f6c0 0000 	movt	r0, #2048	; 0x800
 80014ae:	f000 fa36 	bl	800191e <_ZN4core9panicking5panic17h53ca63c6ac6312f8E>
 80014b2:	defe      	udf	#254	; 0xfe
            assert!(rc == 0);
 80014b4:	f24d 60b4 	movw	r0, #54964	; 0xd6b4
 80014b8:	f6c0 0000 	movt	r0, #2048	; 0x800
 80014bc:	f000 fa2f 	bl	800191e <_ZN4core9panicking5panic17h53ca63c6ac6312f8E>
 80014c0:	defe      	udf	#254	; 0xfe
 80014c2:	2100      	movs	r1, #0
 80014c4:	f000 fa80 	bl	80019c8 <_ZN4core5slice20slice_index_len_fail17hedb5bb240677a6b7E>
 80014c8:	defe      	udf	#254	; 0xfe
    assert_ne!(node_id.to_bytes()[0], 0);
 80014ca:	f24d 70d4 	movw	r0, #55252	; 0xd7d4
 80014ce:	2100      	movs	r1, #0
 80014d0:	f6c0 0000 	movt	r0, #2048	; 0x800
 80014d4:	2200      	movs	r2, #0
 80014d6:	f000 fa3f 	bl	8001958 <_ZN4core9panicking18panic_bounds_check17h946762cd0671aec9E>
 80014da:	defe      	udf	#254	; 0xfe
 80014dc:	f241 2095 	movw	r0, #4757	; 0x1295
 80014e0:	a910      	add	r1, sp, #64	; 0x40
 80014e2:	f6c0 0000 	movt	r0, #2048	; 0x800
 80014e6:	940f      	str	r4, [sp, #60]	; 0x3c
 80014e8:	900e      	str	r0, [sp, #56]	; 0x38
 80014ea:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80014ee:	a80f      	add	r0, sp, #60	; 0x3c
 80014f0:	900b      	str	r0, [sp, #44]	; 0x2c
 80014f2:	2002      	movs	r0, #2
 80014f4:	900a      	str	r0, [sp, #40]	; 0x28
 80014f6:	a80b      	add	r0, sp, #44	; 0x2c
 80014f8:	9009      	str	r0, [sp, #36]	; 0x24
 80014fa:	2000      	movs	r0, #0
 80014fc:	9610      	str	r6, [sp, #64]	; 0x40
 80014fe:	f64d 012c 	movw	r1, #55340	; 0xd82c
 8001502:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8001506:	2003      	movs	r0, #3
 8001508:	9006      	str	r0, [sp, #24]
 800150a:	f64d 0014 	movw	r0, #55316	; 0xd814
 800150e:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001512:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001516:	9005      	str	r0, [sp, #20]
 8001518:	a805      	add	r0, sp, #20
 800151a:	f000 fa3d 	bl	8001998 <_ZN4core9panicking9panic_fmt17h6b4d8e87b0965449E>
 800151e:	defe      	udf	#254	; 0xfe
    let rc = unsafe { init_collector_post() };  assert!(rc);
 8001520:	f64d 00dc 	movw	r0, #55516	; 0xd8dc
 8001524:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001528:	f000 f9f9 	bl	800191e <_ZN4core9panicking5panic17h53ca63c6ac6312f8E>
 800152c:	defe      	udf	#254	; 0xfe
    let rc = unsafe { do_collector_post() };  assert!(rc);
 800152e:	f64d 00f4 	movw	r0, #55540	; 0xd8f4
 8001532:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001536:	f000 f9f2 	bl	800191e <_ZN4core9panicking5panic17h53ca63c6ac6312f8E>
 800153a:	defe      	udf	#254	; 0xfe
 800153c:	a804      	add	r0, sp, #16
	let device_id = unsafe { get_device_id() };  assert_ne!(device_id, 0 as *const ::cty::c_char);
 800153e:	900f      	str	r0, [sp, #60]	; 0x3c
 8001540:	f241 2045 	movw	r0, #4677	; 0x1245
 8001544:	a910      	add	r1, sp, #64	; 0x40
 8001546:	f6c0 0000 	movt	r0, #2048	; 0x800
 800154a:	900e      	str	r0, [sp, #56]	; 0x38
 800154c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8001550:	a80f      	add	r0, sp, #60	; 0x3c
 8001552:	900b      	str	r0, [sp, #44]	; 0x2c
 8001554:	f24d 5024 	movw	r0, #54564	; 0xd524
 8001558:	f6c0 0000 	movt	r0, #2048	; 0x800
 800155c:	f64d 013c 	movw	r1, #55356	; 0xd83c
 8001560:	9010      	str	r0, [sp, #64]	; 0x40
 8001562:	2002      	movs	r0, #2
 8001564:	900a      	str	r0, [sp, #40]	; 0x28
 8001566:	a80b      	add	r0, sp, #44	; 0x2c
 8001568:	9009      	str	r0, [sp, #36]	; 0x24
 800156a:	2000      	movs	r0, #0
 800156c:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8001570:	2003      	movs	r0, #3
 8001572:	9006      	str	r0, [sp, #24]
 8001574:	f64d 0014 	movw	r0, #55316	; 0xd814
 8001578:	f6c0 0000 	movt	r0, #2048	; 0x800
 800157c:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001580:	9005      	str	r0, [sp, #20]
 8001582:	a805      	add	r0, sp, #20
 8001584:	f000 fa08 	bl	8001998 <_ZN4core9panicking9panic_fmt17h6b4d8e87b0965449E>
 8001588:	defe      	udf	#254	; 0xfe
	let rc = unsafe { init_server_post(0 as *const ::cty::c_char) };  assert!(rc);
 800158a:	f64d 0060 	movw	r0, #55392	; 0xd860
 800158e:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001592:	f000 f9c4 	bl	800191e <_ZN4core9panicking5panic17h53ca63c6ac6312f8E>
 8001596:	defe      	udf	#254	; 0xfe
    let rc = unsafe { do_server_post() };  assert!(rc);
 8001598:	f64d 0078 	movw	r0, #55416	; 0xd878
 800159c:	f6c0 0000 	movt	r0, #2048	; 0x800
 80015a0:	f000 f9bd 	bl	800191e <_ZN4core9panicking5panic17h53ca63c6ac6312f8E>
 80015a4:	defe      	udf	#254	; 0xfe

080015a6 <_ZN5mylib9send_coap17network_task_func17h4cb9c6d5020b51c1E>:
extern "C" fn network_task_func(_arg: *mut ::cty::c_void) {
 80015a6:	b08e      	sub	sp, #56	; 0x38
        console_buffer(msg.as_ptr(), len as u32);
 80015a8:	f24d 60fe 	movw	r0, #55038	; 0xd6fe
 80015ac:	210a      	movs	r1, #10
 80015ae:	f6c0 0000 	movt	r0, #2048	; 0x800
 80015b2:	f000 fd8f 	bl	80020d4 <console_buffer>
        console_flush();  //  TODO: Remove this.
 80015b6:	f000 fd5f 	bl	8002078 <console_flush>
	console_print(b"NET start\n");  assert!(unsafe { !NETWORK_IS_READY });
 80015ba:	f240 6478 	movw	r4, #1656	; 0x678
 80015be:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80015c2:	7820      	ldrb	r0, [r4, #0]
 80015c4:	2801      	cmp	r0, #1
 80015c6:	d026      	beq.n	8001616 <_ZN5mylib9send_coap17network_task_func17h4cb9c6d5020b51c1E+0x70>
	if unsafe { is_standalone_node() } || unsafe { is_collector_node() } {
 80015c8:	f000 ff7c 	bl	80024c4 <is_standalone_node>
 80015cc:	b910      	cbnz	r0, 80015d4 <_ZN5mylib9send_coap17network_task_func17h4cb9c6d5020b51c1E+0x2e>
 80015ce:	f000 ff6b 	bl	80024a8 <is_collector_node>
 80015d2:	b120      	cbz	r0, 80015de <_ZN5mylib9send_coap17network_task_func17h4cb9c6d5020b51c1E+0x38>
		let rc = unsafe { register_server_transport() };  assert_eq!(rc, 0);
 80015d4:	f000 fe94 	bl	8002300 <register_server_transport>
 80015d8:	2800      	cmp	r0, #0
 80015da:	9001      	str	r0, [sp, #4]
 80015dc:	d122      	bne.n	8001624 <_ZN5mylib9send_coap17network_task_func17h4cb9c6d5020b51c1E+0x7e>
	if unsafe { is_collector_node() } || unsafe { is_sensor_node() } {
 80015de:	f000 ff63 	bl	80024a8 <is_collector_node>
 80015e2:	b910      	cbnz	r0, 80015ea <_ZN5mylib9send_coap17network_task_func17h4cb9c6d5020b51c1E+0x44>
 80015e4:	f000 ff1a 	bl	800241c <is_sensor_node>
 80015e8:	b120      	cbz	r0, 80015f4 <_ZN5mylib9send_coap17network_task_func17h4cb9c6d5020b51c1E+0x4e>
		let rc = unsafe { register_collector_transport() };  assert_eq!(rc, 0);
 80015ea:	f000 fe95 	bl	8002318 <register_collector_transport>
 80015ee:	2800      	cmp	r0, #0
 80015f0:	9001      	str	r0, [sp, #4]
 80015f2:	d13e      	bne.n	8001672 <_ZN5mylib9send_coap17network_task_func17h4cb9c6d5020b51c1E+0xcc>
 80015f4:	2001      	movs	r0, #1
	unsafe { NETWORK_IS_READY = true; }  //  Indicate that network is ready.
 80015f6:	7020      	strb	r0, [r4, #0]
 80015f8:	f24d 74a0 	movw	r4, #55200	; 0xd7a0
 80015fc:	f6c0 0400 	movt	r4, #2048	; 0x800
        console_buffer(msg.as_ptr(), len as u32);
 8001600:	4620      	mov	r0, r4
 8001602:	2111      	movs	r1, #17
 8001604:	f000 fd66 	bl	80020d4 <console_buffer>
        console_flush();  //  TODO: Remove this.
 8001608:	f000 fd36 	bl	8002078 <console_flush>
		unsafe { os_time_delay(10 * OS_TICKS_PER_SEC); }                   //  Wait 10 seconds before repeating.
 800160c:	f242 7010 	movw	r0, #10000	; 0x2710
 8001610:	f003 fc58 	bl	8004ec4 <os_time_delay>
	loop {  //  Loop forever...        
 8001614:	e7f4      	b.n	8001600 <_ZN5mylib9send_coap17network_task_func17h4cb9c6d5020b51c1E+0x5a>
	console_print(b"NET start\n");  assert!(unsafe { !NETWORK_IS_READY });
 8001616:	f24d 7068 	movw	r0, #55144	; 0xd768
 800161a:	f6c0 0000 	movt	r0, #2048	; 0x800
 800161e:	f000 f97e 	bl	800191e <_ZN4core9panicking5panic17h53ca63c6ac6312f8E>
 8001622:	defe      	udf	#254	; 0xfe
 8001624:	a801      	add	r0, sp, #4
		let rc = unsafe { register_server_transport() };  assert_eq!(rc, 0);
 8001626:	900c      	str	r0, [sp, #48]	; 0x30
 8001628:	f241 200b 	movw	r0, #4619	; 0x120b
 800162c:	a90d      	add	r1, sp, #52	; 0x34
 800162e:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001632:	900b      	str	r0, [sp, #44]	; 0x2c
 8001634:	e9cd 0109 	strd	r0, r1, [sp, #36]	; 0x24
 8001638:	a80c      	add	r0, sp, #48	; 0x30
 800163a:	9008      	str	r0, [sp, #32]
 800163c:	f24d 5024 	movw	r0, #54564	; 0xd524
 8001640:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001644:	f24d 7180 	movw	r1, #55168	; 0xd780
 8001648:	900d      	str	r0, [sp, #52]	; 0x34
 800164a:	2002      	movs	r0, #2
 800164c:	9007      	str	r0, [sp, #28]
 800164e:	a808      	add	r0, sp, #32
 8001650:	9006      	str	r0, [sp, #24]
 8001652:	2000      	movs	r0, #0
 8001654:	e9cd 0004 	strd	r0, r0, [sp, #16]
 8001658:	2003      	movs	r0, #3
 800165a:	9003      	str	r0, [sp, #12]
 800165c:	f24d 5064 	movw	r0, #54628	; 0xd564
 8001660:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001664:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001668:	9002      	str	r0, [sp, #8]
 800166a:	a802      	add	r0, sp, #8
 800166c:	f000 f994 	bl	8001998 <_ZN4core9panicking9panic_fmt17h6b4d8e87b0965449E>
 8001670:	defe      	udf	#254	; 0xfe
 8001672:	a801      	add	r0, sp, #4
		let rc = unsafe { register_collector_transport() };  assert_eq!(rc, 0);
 8001674:	900c      	str	r0, [sp, #48]	; 0x30
 8001676:	f241 200b 	movw	r0, #4619	; 0x120b
 800167a:	a90d      	add	r1, sp, #52	; 0x34
 800167c:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001680:	900b      	str	r0, [sp, #44]	; 0x2c
 8001682:	e9cd 0109 	strd	r0, r1, [sp, #36]	; 0x24
 8001686:	a80c      	add	r0, sp, #48	; 0x30
 8001688:	9008      	str	r0, [sp, #32]
 800168a:	f24d 5024 	movw	r0, #54564	; 0xd524
 800168e:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001692:	f24d 7190 	movw	r1, #55184	; 0xd790
 8001696:	900d      	str	r0, [sp, #52]	; 0x34
 8001698:	2002      	movs	r0, #2
 800169a:	9007      	str	r0, [sp, #28]
 800169c:	a808      	add	r0, sp, #32
 800169e:	9006      	str	r0, [sp, #24]
 80016a0:	2000      	movs	r0, #0
 80016a2:	e9cd 0004 	strd	r0, r0, [sp, #16]
 80016a6:	2003      	movs	r0, #3
 80016a8:	9003      	str	r0, [sp, #12]
 80016aa:	f24d 5064 	movw	r0, #54628	; 0xd564
 80016ae:	f6c0 0000 	movt	r0, #2048	; 0x800
 80016b2:	f6c0 0100 	movt	r1, #2048	; 0x800
 80016b6:	9002      	str	r0, [sp, #8]
 80016b8:	a802      	add	r0, sp, #8
 80016ba:	f000 f96d 	bl	8001998 <_ZN4core9panicking9panic_fmt17h6b4d8e87b0965449E>
 80016be:	defe      	udf	#254	; 0xfe

080016c0 <main>:
use crate::listen_sensor::*;    //  Import listen_sensor.rs for polling the temperature sensor
use crate::send_coap::*;        //  Import send_coap.rs for sending sensor data

///  main() will be called at Mynewt startup. It replaces the C version of the main() function.
#[no_mangle]                     //  Don't mangle the name "main"
pub extern "C" fn main() -> ! {  //  Declare extern "C" because it will be called by Mynewt
 80016c0:	b092      	sub	sp, #72	; 0x48
    //  Init Mynewt system.
    unsafe { rust_sysinit()  };
 80016c2:	f004 f997 	bl	80059f4 <rust_sysinit>
    unsafe { console_flush() };
 80016c6:	f000 fcd7 	bl	8002078 <console_flush>
        console_buffer(msg.as_ptr(), len as u32);
 80016ca:	f24d 60fe 	movw	r0, #55038	; 0xd6fe
 80016ce:	210a      	movs	r1, #10
 80016d0:	f6c0 0000 	movt	r0, #2048	; 0x800
 80016d4:	240a      	movs	r4, #10
 80016d6:	f000 fcfd 	bl	80020d4 <console_buffer>
        console_flush();  //  TODO: Remove this.
 80016da:	f000 fccd 	bl	8002078 <console_flush>
    let rc = unsafe { os_task_init( //  Create a new task and start it...
 80016de:	f240 2178 	movw	r1, #632	; 0x278
 80016e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80016e6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80016ea:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80016ee:	e9cd 4200 	strd	r4, r2, [sp]
 80016f2:	f241 52a7 	movw	r2, #5543	; 0x15a7
 80016f6:	e9cd 1002 	strd	r1, r0, [sp, #8]
 80016fa:	f240 2028 	movw	r0, #552	; 0x228
 80016fe:	f24d 7108 	movw	r1, #55048	; 0xd708
 8001702:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001706:	f6c0 0100 	movt	r1, #2048	; 0x800
 800170a:	f6c0 0200 	movt	r2, #2048	; 0x800
 800170e:	2300      	movs	r3, #0
 8001710:	2400      	movs	r4, #0
 8001712:	f003 fafd 	bl	8004d10 <os_task_init>
    assert_eq!(rc, 0);
 8001716:	2800      	cmp	r0, #0
    let rc = unsafe { os_task_init( //  Create a new task and start it...
 8001718:	9009      	str	r0, [sp, #36]	; 0x24
    assert_eq!(rc, 0);
 800171a:	d13f      	bne.n	800179c <main+0xdc>
        console_buffer(msg.as_ptr(), len as u32);
 800171c:	f24d 500c 	movw	r0, #54540	; 0xd50c
 8001720:	210a      	movs	r1, #10
 8001722:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001726:	f000 fcd5 	bl	80020d4 <console_buffer>
        console_flush();  //  TODO: Remove this.
 800172a:	f000 fca5 	bl	8002078 <console_flush>
    let rc = unsafe { sensor_set_poll_rate_ms(SENSOR_DEVICE, SENSOR_POLL_TIME) };
 800172e:	f24d 5016 	movw	r0, #54550	; 0xd516
 8001732:	f242 7110 	movw	r1, #10000	; 0x2710
 8001736:	f6c0 0000 	movt	r0, #2048	; 0x800
 800173a:	f002 f87d 	bl	8003838 <sensor_set_poll_rate_ms>
    assert_eq!(rc, 0);
 800173e:	2800      	cmp	r0, #0
    let rc = unsafe { sensor_set_poll_rate_ms(SENSOR_DEVICE, SENSOR_POLL_TIME) };
 8001740:	9009      	str	r0, [sp, #36]	; 0x24
    assert_eq!(rc, 0);
 8001742:	d151      	bne.n	80017e8 <main+0x128>
    let listen_sensor = unsafe { sensor_mgr_find_next_bydevname(SENSOR_DEVICE, null_sensor()) };
 8001744:	f004 f994 	bl	8005a70 <null_sensor>
 8001748:	4601      	mov	r1, r0
 800174a:	f24d 5016 	movw	r0, #54550	; 0xd516
 800174e:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001752:	f001 ffe9 	bl	8003728 <sensor_mgr_find_next_bydevname>
 8001756:	4604      	mov	r4, r0
    assert!(unsafe{ !is_null_sensor(listen_sensor) });
 8001758:	f004 f98c 	bl	8005a74 <is_null_sensor>
 800175c:	2800      	cmp	r0, #0
 800175e:	d16a      	bne.n	8001836 <main+0x176>
    unsafe { assert!(LISTENER_INTERNAL.sl_sensor_type == 0) };  //  Make sure it's not used.
 8001760:	f240 1118 	movw	r1, #280	; 0x118
 8001764:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8001768:	e9d1 0200 	ldrd	r0, r2, [r1]
 800176c:	4310      	orrs	r0, r2
 800176e:	d169      	bne.n	8001844 <main+0x184>
    unsafe { LISTENER_INTERNAL = listener };
 8001770:	f241 23d3 	movw	r3, #4819	; 0x12d3
 8001774:	2000      	movs	r0, #0
 8001776:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800177a:	f04f 0c01 	mov.w	ip, #1
 800177e:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001782:	e9c1 2000 	strd	r2, r0, [r1]
 8001786:	e9c1 3c02 	strd	r3, ip, [r1, #8]
 800178a:	6108      	str	r0, [r1, #16]
    unsafe { sensor_register_listener(sensor, &mut LISTENER_INTERNAL) };
 800178c:	4620      	mov	r0, r4
 800178e:	f002 f8b9 	bl	8003904 <sensor_register_listener>

    //  Main event loop
    loop {                            //  Loop forever...
        unsafe {
            os_eventq_run(            //  Process events...
                os_eventq_dflt_get()  //  From default event queue.
 8001792:	f002 fcf5 	bl	8004180 <os_eventq_dflt_get>
            os_eventq_run(            //  Process events...
 8001796:	f002 fcc7 	bl	8004128 <os_eventq_run>
    loop {                            //  Loop forever...
 800179a:	e7fa      	b.n	8001792 <main+0xd2>
 800179c:	a809      	add	r0, sp, #36	; 0x24
 800179e:	9010      	str	r0, [sp, #64]	; 0x40
 80017a0:	f241 200b 	movw	r0, #4619	; 0x120b
 80017a4:	a911      	add	r1, sp, #68	; 0x44
 80017a6:	f6c0 0000 	movt	r0, #2048	; 0x800
 80017aa:	9008      	str	r0, [sp, #32]
 80017ac:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80017b0:	a810      	add	r0, sp, #64	; 0x40
 80017b2:	9005      	str	r0, [sp, #20]
 80017b4:	f24d 5024 	movw	r0, #54564	; 0xd524
 80017b8:	f6c0 0000 	movt	r0, #2048	; 0x800
 80017bc:	f24d 7128 	movw	r1, #55080	; 0xd728
 80017c0:	9011      	str	r0, [sp, #68]	; 0x44
 80017c2:	2002      	movs	r0, #2
 80017c4:	900f      	str	r0, [sp, #60]	; 0x3c
 80017c6:	a805      	add	r0, sp, #20
 80017c8:	900e      	str	r0, [sp, #56]	; 0x38
 80017ca:	2003      	movs	r0, #3
 80017cc:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
 80017d0:	f6c0 0100 	movt	r1, #2048	; 0x800
 80017d4:	900b      	str	r0, [sp, #44]	; 0x2c
 80017d6:	f24d 5064 	movw	r0, #54628	; 0xd564
 80017da:	f6c0 0000 	movt	r0, #2048	; 0x800
 80017de:	900a      	str	r0, [sp, #40]	; 0x28
 80017e0:	a80a      	add	r0, sp, #40	; 0x28
 80017e2:	f000 f8d9 	bl	8001998 <_ZN4core9panicking9panic_fmt17h6b4d8e87b0965449E>
 80017e6:	defe      	udf	#254	; 0xfe
 80017e8:	a809      	add	r0, sp, #36	; 0x24
    assert_eq!(rc, 0);
 80017ea:	9010      	str	r0, [sp, #64]	; 0x40
 80017ec:	f241 200b 	movw	r0, #4619	; 0x120b
 80017f0:	a911      	add	r1, sp, #68	; 0x44
 80017f2:	f6c0 0000 	movt	r0, #2048	; 0x800
 80017f6:	9008      	str	r0, [sp, #32]
 80017f8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80017fc:	a810      	add	r0, sp, #64	; 0x40
 80017fe:	9005      	str	r0, [sp, #20]
 8001800:	f24d 5024 	movw	r0, #54564	; 0xd524
 8001804:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001808:	f24d 5190 	movw	r1, #54672	; 0xd590
 800180c:	9011      	str	r0, [sp, #68]	; 0x44
 800180e:	2002      	movs	r0, #2
 8001810:	900f      	str	r0, [sp, #60]	; 0x3c
 8001812:	a805      	add	r0, sp, #20
 8001814:	900e      	str	r0, [sp, #56]	; 0x38
 8001816:	2000      	movs	r0, #0
 8001818:	e9cd 000c 	strd	r0, r0, [sp, #48]	; 0x30
 800181c:	2003      	movs	r0, #3
 800181e:	900b      	str	r0, [sp, #44]	; 0x2c
 8001820:	f24d 5064 	movw	r0, #54628	; 0xd564
 8001824:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001828:	f6c0 0100 	movt	r1, #2048	; 0x800
 800182c:	900a      	str	r0, [sp, #40]	; 0x28
 800182e:	a80a      	add	r0, sp, #40	; 0x28
 8001830:	f000 f8b2 	bl	8001998 <_ZN4core9panicking9panic_fmt17h6b4d8e87b0965449E>
 8001834:	defe      	udf	#254	; 0xfe
    assert!(unsafe{ !is_null_sensor(listen_sensor) });
 8001836:	f24d 50dc 	movw	r0, #54748	; 0xd5dc
 800183a:	f6c0 0000 	movt	r0, #2048	; 0x800
 800183e:	f000 f86e 	bl	800191e <_ZN4core9panicking5panic17h53ca63c6ac6312f8E>
 8001842:	defe      	udf	#254	; 0xfe
    unsafe { assert!(LISTENER_INTERNAL.sl_sensor_type == 0) };  //  Make sure it's not used.
 8001844:	f24d 40f4 	movw	r0, #54516	; 0xd4f4
 8001848:	f6c0 0000 	movt	r0, #2048	; 0x800
 800184c:	f000 f867 	bl	800191e <_ZN4core9panicking5panic17h53ca63c6ac6312f8E>
 8001850:	defe      	udf	#254	; 0xfe

08001852 <rust_begin_unwind>:

///  This function is called on panic, like an assertion failure. We display the filename and line number and pause in the debugger. From https://os.phil-opp.com/freestanding-rust-binary/
#[panic_handler]
fn panic(info: &PanicInfo) -> ! {
    //  Display the filename and line number to the Semihosting Console.
    if let Some(location) = info.location() {
 8001852:	f000 f85c 	bl	800190e <_ZN4core5panic9PanicInfo8location17h5226165d8771f8a2E>
 8001856:	b338      	cbz	r0, 80018a8 <rust_begin_unwind+0x56>
 8001858:	4604      	mov	r4, r0
        let file = location.file();
 800185a:	f000 f85a 	bl	8001912 <_ZN4core5panic8Location4file17h94cc6af18de736c4E>
 800185e:	4605      	mov	r5, r0
        let line = location.line();
 8001860:	4620      	mov	r0, r4
        let file = location.file();
 8001862:	460e      	mov	r6, r1
        let line = location.line();
 8001864:	f000 f859 	bl	800191a <_ZN4core5panic8Location4line17h3ffc63f14d0a6636E>
 8001868:	4604      	mov	r4, r0
        console_buffer(msg.as_ptr(), len as u32);
 800186a:	f64d 103f 	movw	r0, #55615	; 0xd93f
 800186e:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001872:	2109      	movs	r1, #9
 8001874:	f000 fc2e 	bl	80020d4 <console_buffer>
        console_flush();  //  TODO: Remove this.
 8001878:	f000 fbfe 	bl	8002078 <console_flush>
        console_print(b"panic at ");
        unsafe { console_buffer(file.as_ptr(), file.len() as u32) }
 800187c:	4628      	mov	r0, r5
 800187e:	4631      	mov	r1, r6
 8001880:	f000 fc28 	bl	80020d4 <console_buffer>
        console_buffer(msg.as_ptr(), len as u32);
 8001884:	f24d 7010 	movw	r0, #55056	; 0xd710
 8001888:	2108      	movs	r1, #8
 800188a:	f6c0 0000 	movt	r0, #2048	; 0x800
 800188e:	f000 fc21 	bl	80020d4 <console_buffer>
        console_flush();  //  TODO: Remove this.
 8001892:	f000 fbf1 	bl	8002078 <console_flush>
        console_print(b" line 0x");
        unsafe { console_printhex(line as u8) }  //  TODO: Print in decimal not hex. Allow more than 255 lines.
 8001896:	b2e0      	uxtb	r0, r4
 8001898:	f000 fc3e 	bl	8002118 <console_printhex>
        console_buffer(msg.as_ptr(), len as u32);
 800189c:	f64d 1048 	movw	r0, #55624	; 0xd948
 80018a0:	2101      	movs	r1, #1
 80018a2:	f6c0 0000 	movt	r0, #2048	; 0x800
 80018a6:	e004      	b.n	80018b2 <rust_begin_unwind+0x60>
 80018a8:	f64d 102d 	movw	r0, #55597	; 0xd92d
 80018ac:	2112      	movs	r1, #18
 80018ae:	f6c0 0000 	movt	r0, #2048	; 0x800
 80018b2:	f000 fc0f 	bl	80020d4 <console_buffer>
 80018b6:	f000 fbdf 	bl	8002078 <console_flush>
 80018ba:	f000 fbdd 	bl	8002078 <console_flush>
        () => unsafe {
            extern "C" {
                fn __bkpt();
            }

            __bkpt();
 80018be:	f000 f801 	bl	80018c4 <__bkpt>
        unsafe { console_flush() }
    }
    //  Pause in the debugger.
    bkpt();
    //  Loop forever so that device won't restart.
    loop {}
 80018c2:	e7fe      	b.n	80018c2 <rust_begin_unwind+0x70>

080018c4 <__bkpt>:
 80018c4:	be00      	bkpt	0x0000
 80018c6:	4770      	bx	lr

080018c8 <_ZN9cstr_core4CStr8from_ptr17h8dd780023dafede8E>:
    pub unsafe fn from_ptr<'a>(ptr: *const c_char) -> &'a CStr {
 80018c8:	2100      	movs	r1, #0
 80018ca:	e004      	b.n	80018d6 <_ZN9cstr_core4CStr8from_ptr17h8dd780023dafede8E+0xe>
    while *p.offset(n as isize) != 0 {
 80018cc:	78d2      	ldrb	r2, [r2, #3]
        n += 1;
 80018ce:	3104      	adds	r1, #4
    while *p.offset(n as isize) != 0 {
 80018d0:	2a00      	cmp	r2, #0
    }
 80018d2:	bf08      	it	eq
 80018d4:	4770      	bxeq	lr
    while *p.offset(n as isize) != 0 {
 80018d6:	5c42      	ldrb	r2, [r0, r1]
 80018d8:	2a00      	cmp	r2, #0
 80018da:	bf04      	itt	eq
 80018dc:	f041 0101 	orreq.w	r1, r1, #1
    }
 80018e0:	4770      	bxeq	lr
    while *p.offset(n as isize) != 0 {
 80018e2:	1842      	adds	r2, r0, r1
 80018e4:	7853      	ldrb	r3, [r2, #1]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	bf04      	itt	eq
 80018ea:	f041 0102 	orreq.w	r1, r1, #2
    }
 80018ee:	4770      	bxeq	lr
    while *p.offset(n as isize) != 0 {
 80018f0:	7893      	ldrb	r3, [r2, #2]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d1ea      	bne.n	80018cc <_ZN9cstr_core4CStr8from_ptr17h8dd780023dafede8E+0x4>
 80018f6:	3103      	adds	r1, #3
    }
 80018f8:	4770      	bx	lr

080018fa <_ZN4core3ptr18real_drop_in_place17h921869e295dffcdcE>:
 80018fa:	4770      	bx	lr

080018fc <_ZN36_$LT$T$u20$as$u20$core..any..Any$GT$7type_id17h589f04726b9846deE>:
 80018fc:	f640 704d 	movw	r0, #3917	; 0xf4d
 8001900:	f240 713c 	movw	r1, #1852	; 0x73c
 8001904:	f2cf 3047 	movt	r0, #62279	; 0xf347
 8001908:	f2cb 21aa 	movt	r1, #45738	; 0xb2aa
 800190c:	4770      	bx	lr

0800190e <_ZN4core5panic9PanicInfo8location17h5226165d8771f8a2E>:
 800190e:	300c      	adds	r0, #12
 8001910:	4770      	bx	lr

08001912 <_ZN4core5panic8Location4file17h94cc6af18de736c4E>:
 8001912:	e9d0 2100 	ldrd	r2, r1, [r0]
 8001916:	4610      	mov	r0, r2
 8001918:	4770      	bx	lr

0800191a <_ZN4core5panic8Location4line17h3ffc63f14d0a6636E>:
 800191a:	6880      	ldr	r0, [r0, #8]
 800191c:	4770      	bx	lr

0800191e <_ZN4core9panicking5panic17h53ca63c6ac6312f8E>:
 800191e:	b08c      	sub	sp, #48	; 0x30
 8001920:	e890 5006 	ldmia.w	r0, {r1, r2, ip, lr}
 8001924:	e9d0 3004 	ldrd	r3, r0, [r0, #16]
 8001928:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800192c:	f64d 124c 	movw	r2, #55628	; 0xd94c
 8001930:	2100      	movs	r1, #0
 8001932:	f6c0 0200 	movt	r2, #2048	; 0x800
 8001936:	9105      	str	r1, [sp, #20]
 8001938:	9204      	str	r2, [sp, #16]
 800193a:	e9cd 1102 	strd	r1, r1, [sp, #8]
 800193e:	2101      	movs	r1, #1
 8001940:	9101      	str	r1, [sp, #4]
 8001942:	a906      	add	r1, sp, #24
 8001944:	9100      	str	r1, [sp, #0]
 8001946:	a908      	add	r1, sp, #32
 8001948:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 800194c:	4668      	mov	r0, sp
 800194e:	e9cd ce08 	strd	ip, lr, [sp, #32]
 8001952:	f000 f821 	bl	8001998 <_ZN4core9panicking9panic_fmt17h6b4d8e87b0965449E>
 8001956:	defe      	udf	#254	; 0xfe

08001958 <_ZN4core9panicking18panic_bounds_check17h946762cd0671aec9E>:
 8001958:	b08c      	sub	sp, #48	; 0x30
 800195a:	4603      	mov	r3, r0
 800195c:	f242 006f 	movw	r0, #8303	; 0x206f
 8001960:	e9cd 1200 	strd	r1, r2, [sp]
 8001964:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001968:	4669      	mov	r1, sp
 800196a:	900b      	str	r0, [sp, #44]	; 0x2c
 800196c:	e9cd 0109 	strd	r0, r1, [sp, #36]	; 0x24
 8001970:	a801      	add	r0, sp, #4
 8001972:	9008      	str	r0, [sp, #32]
 8001974:	2002      	movs	r0, #2
 8001976:	a908      	add	r1, sp, #32
 8001978:	9007      	str	r0, [sp, #28]
 800197a:	9106      	str	r1, [sp, #24]
 800197c:	2100      	movs	r1, #0
 800197e:	9105      	str	r1, [sp, #20]
 8001980:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8001984:	f64d 10d4 	movw	r0, #55764	; 0xd9d4
 8001988:	f6c0 0000 	movt	r0, #2048	; 0x800
 800198c:	4619      	mov	r1, r3
 800198e:	9002      	str	r0, [sp, #8]
 8001990:	a802      	add	r0, sp, #8
 8001992:	f000 f801 	bl	8001998 <_ZN4core9panicking9panic_fmt17h6b4d8e87b0965449E>
 8001996:	defe      	udf	#254	; 0xfe

08001998 <_ZN4core9panicking9panic_fmt17h6b4d8e87b0965449E>:
 8001998:	b088      	sub	sp, #32
 800199a:	e9d1 c300 	ldrd	ip, r3, [r1]
 800199e:	e9d1 2102 	ldrd	r2, r1, [r1, #8]
 80019a2:	9107      	str	r1, [sp, #28]
 80019a4:	e9cd 3205 	strd	r3, r2, [sp, #20]
 80019a8:	e9cd 0c03 	strd	r0, ip, [sp, #12]
 80019ac:	f64d 10b0 	movw	r0, #55728	; 0xd9b0
 80019b0:	f6c0 0000 	movt	r0, #2048	; 0x800
 80019b4:	9002      	str	r0, [sp, #8]
 80019b6:	f64d 104c 	movw	r0, #55628	; 0xd94c
 80019ba:	f6c0 0000 	movt	r0, #2048	; 0x800
 80019be:	9001      	str	r0, [sp, #4]
 80019c0:	a801      	add	r0, sp, #4
 80019c2:	f7ff ff46 	bl	8001852 <rust_begin_unwind>
 80019c6:	defe      	udf	#254	; 0xfe

080019c8 <_ZN4core5slice20slice_index_len_fail17hedb5bb240677a6b7E>:
 80019c8:	b08c      	sub	sp, #48	; 0x30
 80019ca:	e9cd 0100 	strd	r0, r1, [sp]
 80019ce:	f242 006f 	movw	r0, #8303	; 0x206f
 80019d2:	a901      	add	r1, sp, #4
 80019d4:	f6c0 0000 	movt	r0, #2048	; 0x800
 80019d8:	900b      	str	r0, [sp, #44]	; 0x2c
 80019da:	e9cd 0109 	strd	r0, r1, [sp, #36]	; 0x24
 80019de:	4668      	mov	r0, sp
 80019e0:	9008      	str	r0, [sp, #32]
 80019e2:	2002      	movs	r0, #2
 80019e4:	a908      	add	r1, sp, #32
 80019e6:	9007      	str	r0, [sp, #28]
 80019e8:	9106      	str	r1, [sp, #24]
 80019ea:	2100      	movs	r1, #0
 80019ec:	9105      	str	r1, [sp, #20]
 80019ee:	e9cd 0103 	strd	r0, r1, [sp, #12]
 80019f2:	f64d 2024 	movw	r0, #55844	; 0xda24
 80019f6:	f6c0 0000 	movt	r0, #2048	; 0x800
 80019fa:	f64d 2134 	movw	r1, #55860	; 0xda34
 80019fe:	9002      	str	r0, [sp, #8]
 8001a00:	a802      	add	r0, sp, #8
 8001a02:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001a06:	f7ff ffc7 	bl	8001998 <_ZN4core9panicking9panic_fmt17h6b4d8e87b0965449E>
 8001a0a:	defe      	udf	#254	; 0xfe

08001a0c <_ZN4core5slice22slice_index_order_fail17h604ca25004a88762E>:
 8001a0c:	b08c      	sub	sp, #48	; 0x30
 8001a0e:	e9cd 0100 	strd	r0, r1, [sp]
 8001a12:	f242 006f 	movw	r0, #8303	; 0x206f
 8001a16:	a901      	add	r1, sp, #4
 8001a18:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001a1c:	900b      	str	r0, [sp, #44]	; 0x2c
 8001a1e:	e9cd 0109 	strd	r0, r1, [sp, #36]	; 0x24
 8001a22:	4668      	mov	r0, sp
 8001a24:	9008      	str	r0, [sp, #32]
 8001a26:	2002      	movs	r0, #2
 8001a28:	a908      	add	r1, sp, #32
 8001a2a:	9007      	str	r0, [sp, #28]
 8001a2c:	9106      	str	r1, [sp, #24]
 8001a2e:	2100      	movs	r1, #0
 8001a30:	9105      	str	r1, [sp, #20]
 8001a32:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8001a36:	f64d 2068 	movw	r0, #55912	; 0xda68
 8001a3a:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001a3e:	f64d 2178 	movw	r1, #55928	; 0xda78
 8001a42:	9002      	str	r0, [sp, #8]
 8001a44:	a802      	add	r0, sp, #8
 8001a46:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001a4a:	f7ff ffa5 	bl	8001998 <_ZN4core9panicking9panic_fmt17h6b4d8e87b0965449E>
 8001a4e:	defe      	udf	#254	; 0xfe

08001a50 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E>:
 8001a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a54:	b083      	sub	sp, #12
 8001a56:	e9dd 690c 	ldrd	r6, r9, [sp, #48]	; 0x30
 8001a5a:	461f      	mov	r7, r3
 8001a5c:	4692      	mov	sl, r2
 8001a5e:	4604      	mov	r4, r0
 8001a60:	b1c9      	cbz	r1, 8001a96 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x46>
 8001a62:	f8d4 e000 	ldr.w	lr, [r4]
 8001a66:	f04f 082b 	mov.w	r8, #43	; 0x2b
 8001a6a:	f01e 0101 	ands.w	r1, lr, #1
 8001a6e:	bf08      	it	eq
 8001a70:	f44f 1888 	moveq.w	r8, #1114112	; 0x110000
 8001a74:	eb01 0b09 	add.w	fp, r1, r9
 8001a78:	ea5f 714e 	movs.w	r1, lr, lsl #29
 8001a7c:	d514      	bpl.n	8001aa8 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x58>
 8001a7e:	b1bf      	cbz	r7, 8001ab0 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x60>
 8001a80:	1e79      	subs	r1, r7, #1
 8001a82:	f007 0c03 	and.w	ip, r7, #3
 8001a86:	2903      	cmp	r1, #3
 8001a88:	d214      	bcs.n	8001ab4 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x64>
 8001a8a:	2100      	movs	r1, #0
 8001a8c:	4653      	mov	r3, sl
 8001a8e:	f1bc 0f00 	cmp.w	ip, #0
 8001a92:	d136      	bne.n	8001b02 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0xb2>
 8001a94:	e04d      	b.n	8001b32 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0xe2>
 8001a96:	f8d4 e000 	ldr.w	lr, [r4]
 8001a9a:	f109 0b01 	add.w	fp, r9, #1
 8001a9e:	f04f 082d 	mov.w	r8, #45	; 0x2d
 8001aa2:	ea5f 714e 	movs.w	r1, lr, lsl #29
 8001aa6:	d4ea      	bmi.n	8001a7e <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x2e>
 8001aa8:	2700      	movs	r7, #0
 8001aaa:	f04f 0a00 	mov.w	sl, #0
 8001aae:	e044      	b.n	8001b3a <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0xea>
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	e03e      	b.n	8001b32 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0xe2>
 8001ab4:	e9cd 9601 	strd	r9, r6, [sp, #4]
 8001ab8:	ebac 0607 	sub.w	r6, ip, r7
 8001abc:	2100      	movs	r1, #0
 8001abe:	4653      	mov	r3, sl
 8001ac0:	781d      	ldrb	r5, [r3, #0]
 8001ac2:	785a      	ldrb	r2, [r3, #1]
 8001ac4:	7898      	ldrb	r0, [r3, #2]
 8001ac6:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
 8001aca:	f893 9003 	ldrb.w	r9, [r3, #3]
 8001ace:	2d80      	cmp	r5, #128	; 0x80
 8001ad0:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8001ad4:	bf08      	it	eq
 8001ad6:	3101      	addeq	r1, #1
 8001ad8:	2a80      	cmp	r2, #128	; 0x80
 8001ada:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
 8001ade:	bf08      	it	eq
 8001ae0:	3101      	addeq	r1, #1
 8001ae2:	2880      	cmp	r0, #128	; 0x80
 8001ae4:	f009 00c0 	and.w	r0, r9, #192	; 0xc0
 8001ae8:	bf08      	it	eq
 8001aea:	3101      	addeq	r1, #1
 8001aec:	2880      	cmp	r0, #128	; 0x80
 8001aee:	bf08      	it	eq
 8001af0:	3101      	addeq	r1, #1
 8001af2:	3304      	adds	r3, #4
 8001af4:	3604      	adds	r6, #4
 8001af6:	d1e3      	bne.n	8001ac0 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x70>
 8001af8:	e9dd 9601 	ldrd	r9, r6, [sp, #4]
 8001afc:	f1bc 0f00 	cmp.w	ip, #0
 8001b00:	d017      	beq.n	8001b32 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0xe2>
 8001b02:	7818      	ldrb	r0, [r3, #0]
 8001b04:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
 8001b08:	2880      	cmp	r0, #128	; 0x80
 8001b0a:	bf08      	it	eq
 8001b0c:	3101      	addeq	r1, #1
 8001b0e:	f1bc 0f01 	cmp.w	ip, #1
 8001b12:	d00e      	beq.n	8001b32 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0xe2>
 8001b14:	7858      	ldrb	r0, [r3, #1]
 8001b16:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
 8001b1a:	2880      	cmp	r0, #128	; 0x80
 8001b1c:	bf08      	it	eq
 8001b1e:	3101      	addeq	r1, #1
 8001b20:	f1bc 0f02 	cmp.w	ip, #2
 8001b24:	d005      	beq.n	8001b32 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0xe2>
 8001b26:	7898      	ldrb	r0, [r3, #2]
 8001b28:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
 8001b2c:	2880      	cmp	r0, #128	; 0x80
 8001b2e:	bf08      	it	eq
 8001b30:	3101      	addeq	r1, #1
 8001b32:	eb0b 0007 	add.w	r0, fp, r7
 8001b36:	eba0 0b01 	sub.w	fp, r0, r1
 8001b3a:	68a0      	ldr	r0, [r4, #8]
 8001b3c:	2801      	cmp	r0, #1
 8001b3e:	d115      	bne.n	8001b6c <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x11c>
 8001b40:	68e5      	ldr	r5, [r4, #12]
 8001b42:	455d      	cmp	r5, fp
 8001b44:	d912      	bls.n	8001b6c <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x11c>
 8001b46:	ea5f 700e 	movs.w	r0, lr, lsl #28
 8001b4a:	9602      	str	r6, [sp, #8]
 8001b4c:	d423      	bmi.n	8001b96 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x146>
 8001b4e:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 8001b52:	eba5 000b 	sub.w	r0, r5, fp
 8001b56:	2903      	cmp	r1, #3
 8001b58:	bf08      	it	eq
 8001b5a:	2101      	moveq	r1, #1
 8001b5c:	078a      	lsls	r2, r1, #30
 8001b5e:	d036      	beq.n	8001bce <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x17e>
 8001b60:	2902      	cmp	r1, #2
 8001b62:	d036      	beq.n	8001bd2 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x182>
 8001b64:	2100      	movs	r1, #0
 8001b66:	4605      	mov	r5, r0
 8001b68:	9101      	str	r1, [sp, #4]
 8001b6a:	e036      	b.n	8001bda <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x18a>
 8001b6c:	4620      	mov	r0, r4
 8001b6e:	4641      	mov	r1, r8
 8001b70:	4652      	mov	r2, sl
 8001b72:	463b      	mov	r3, r7
 8001b74:	f000 f890 	bl	8001c98 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h6c53284d01543c5dE>
 8001b78:	b120      	cbz	r0, 8001b84 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x134>
 8001b7a:	2601      	movs	r6, #1
 8001b7c:	4630      	mov	r0, r6
 8001b7e:	b003      	add	sp, #12
 8001b80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001b84:	69e1      	ldr	r1, [r4, #28]
 8001b86:	464a      	mov	r2, r9
 8001b88:	69a0      	ldr	r0, [r4, #24]
 8001b8a:	68cb      	ldr	r3, [r1, #12]
 8001b8c:	4631      	mov	r1, r6
 8001b8e:	b003      	add	sp, #12
 8001b90:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b94:	4718      	bx	r3
 8001b96:	2601      	movs	r6, #1
 8001b98:	2030      	movs	r0, #48	; 0x30
 8001b9a:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
 8001b9e:	4641      	mov	r1, r8
 8001ba0:	6060      	str	r0, [r4, #4]
 8001ba2:	4620      	mov	r0, r4
 8001ba4:	4652      	mov	r2, sl
 8001ba6:	463b      	mov	r3, r7
 8001ba8:	f000 f876 	bl	8001c98 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h6c53284d01543c5dE>
 8001bac:	2800      	cmp	r0, #0
 8001bae:	d1e5      	bne.n	8001b7c <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x12c>
 8001bb0:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 8001bb4:	eba5 000b 	sub.w	r0, r5, fp
 8001bb8:	2903      	cmp	r1, #3
 8001bba:	bf08      	it	eq
 8001bbc:	2101      	moveq	r1, #1
 8001bbe:	078a      	lsls	r2, r1, #30
 8001bc0:	d03a      	beq.n	8001c38 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x1e8>
 8001bc2:	2902      	cmp	r1, #2
 8001bc4:	d03b      	beq.n	8001c3e <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x1ee>
 8001bc6:	f04f 0800 	mov.w	r8, #0
 8001bca:	4605      	mov	r5, r0
 8001bcc:	e03b      	b.n	8001c46 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x1f6>
 8001bce:	2500      	movs	r5, #0
 8001bd0:	e002      	b.n	8001bd8 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x188>
 8001bd2:	0845      	lsrs	r5, r0, #1
 8001bd4:	3001      	adds	r0, #1
 8001bd6:	0840      	lsrs	r0, r0, #1
 8001bd8:	9001      	str	r0, [sp, #4]
 8001bda:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8001bde:	3601      	adds	r6, #1
 8001be0:	42ae      	cmp	r6, r5
 8001be2:	d207      	bcs.n	8001bf4 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x1a4>
 8001be4:	6861      	ldr	r1, [r4, #4]
 8001be6:	e9d4 0206 	ldrd	r0, r2, [r4, #24]
 8001bea:	6912      	ldr	r2, [r2, #16]
 8001bec:	4790      	blx	r2
 8001bee:	2800      	cmp	r0, #0
 8001bf0:	d0f5      	beq.n	8001bde <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x18e>
 8001bf2:	e7c2      	b.n	8001b7a <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x12a>
 8001bf4:	4620      	mov	r0, r4
 8001bf6:	4641      	mov	r1, r8
 8001bf8:	4652      	mov	r2, sl
 8001bfa:	463b      	mov	r3, r7
 8001bfc:	f8d4 b004 	ldr.w	fp, [r4, #4]
 8001c00:	f000 f84a 	bl	8001c98 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h6c53284d01543c5dE>
 8001c04:	2800      	cmp	r0, #0
 8001c06:	d1b8      	bne.n	8001b7a <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x12a>
 8001c08:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
 8001c0c:	464a      	mov	r2, r9
 8001c0e:	68cb      	ldr	r3, [r1, #12]
 8001c10:	9902      	ldr	r1, [sp, #8]
 8001c12:	4798      	blx	r3
 8001c14:	2800      	cmp	r0, #0
 8001c16:	d1b0      	bne.n	8001b7a <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x12a>
 8001c18:	e9d4 8406 	ldrd	r8, r4, [r4, #24]
 8001c1c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8001c20:	9d01      	ldr	r5, [sp, #4]
 8001c22:	2601      	movs	r6, #1
 8001c24:	3701      	adds	r7, #1
 8001c26:	42af      	cmp	r7, r5
 8001c28:	d234      	bcs.n	8001c94 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x244>
 8001c2a:	6922      	ldr	r2, [r4, #16]
 8001c2c:	4640      	mov	r0, r8
 8001c2e:	4659      	mov	r1, fp
 8001c30:	4790      	blx	r2
 8001c32:	2800      	cmp	r0, #0
 8001c34:	d0f6      	beq.n	8001c24 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x1d4>
 8001c36:	e7a1      	b.n	8001b7c <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x12c>
 8001c38:	2500      	movs	r5, #0
 8001c3a:	4680      	mov	r8, r0
 8001c3c:	e003      	b.n	8001c46 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x1f6>
 8001c3e:	0845      	lsrs	r5, r0, #1
 8001c40:	3001      	adds	r0, #1
 8001c42:	ea4f 0850 	mov.w	r8, r0, lsr #1
 8001c46:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8001c4a:	3601      	adds	r6, #1
 8001c4c:	42ae      	cmp	r6, r5
 8001c4e:	d207      	bcs.n	8001c60 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x210>
 8001c50:	6861      	ldr	r1, [r4, #4]
 8001c52:	e9d4 0206 	ldrd	r0, r2, [r4, #24]
 8001c56:	6912      	ldr	r2, [r2, #16]
 8001c58:	4790      	blx	r2
 8001c5a:	2800      	cmp	r0, #0
 8001c5c:	d0f5      	beq.n	8001c4a <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x1fa>
 8001c5e:	e78c      	b.n	8001b7a <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x12a>
 8001c60:	f8d4 a004 	ldr.w	sl, [r4, #4]
 8001c64:	464a      	mov	r2, r9
 8001c66:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
 8001c6a:	68cb      	ldr	r3, [r1, #12]
 8001c6c:	9902      	ldr	r1, [sp, #8]
 8001c6e:	4798      	blx	r3
 8001c70:	2800      	cmp	r0, #0
 8001c72:	f47f af82 	bne.w	8001b7a <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x12a>
 8001c76:	e9d4 7406 	ldrd	r7, r4, [r4, #24]
 8001c7a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8001c7e:	2601      	movs	r6, #1
 8001c80:	3501      	adds	r5, #1
 8001c82:	4545      	cmp	r5, r8
 8001c84:	d206      	bcs.n	8001c94 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x244>
 8001c86:	6922      	ldr	r2, [r4, #16]
 8001c88:	4638      	mov	r0, r7
 8001c8a:	4651      	mov	r1, sl
 8001c8c:	4790      	blx	r2
 8001c8e:	2800      	cmp	r0, #0
 8001c90:	d0f6      	beq.n	8001c80 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x230>
 8001c92:	e773      	b.n	8001b7c <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x12c>
 8001c94:	2600      	movs	r6, #0
 8001c96:	e771      	b.n	8001b7c <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x12c>

08001c98 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h6c53284d01543c5dE>:
 8001c98:	b570      	push	{r4, r5, r6, lr}
 8001c9a:	461c      	mov	r4, r3
 8001c9c:	4615      	mov	r5, r2
 8001c9e:	4606      	mov	r6, r0
 8001ca0:	f5b1 1f88 	cmp.w	r1, #1114112	; 0x110000
 8001ca4:	d006      	beq.n	8001cb4 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h6c53284d01543c5dE+0x1c>
 8001ca6:	e9d6 0206 	ldrd	r0, r2, [r6, #24]
 8001caa:	6912      	ldr	r2, [r2, #16]
 8001cac:	4790      	blx	r2
 8001cae:	b108      	cbz	r0, 8001cb4 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h6c53284d01543c5dE+0x1c>
 8001cb0:	2001      	movs	r0, #1
 8001cb2:	bd70      	pop	{r4, r5, r6, pc}
 8001cb4:	b13d      	cbz	r5, 8001cc6 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h6c53284d01543c5dE+0x2e>
 8001cb6:	e9d6 0106 	ldrd	r0, r1, [r6, #24]
 8001cba:	4622      	mov	r2, r4
 8001cbc:	68cb      	ldr	r3, [r1, #12]
 8001cbe:	4629      	mov	r1, r5
 8001cc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001cc4:	4718      	bx	r3
 8001cc6:	2000      	movs	r0, #0
 8001cc8:	bd70      	pop	{r4, r5, r6, pc}

08001cca <_ZN4core3fmt9Formatter9alternate17hd09f58cee14df2eeE>:
 8001cca:	7800      	ldrb	r0, [r0, #0]
 8001ccc:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8001cd0:	4770      	bx	lr

08001cd2 <_ZN4core3fmt9Formatter15debug_lower_hex17h6ead2f28bb05b574E>:
 8001cd2:	7800      	ldrb	r0, [r0, #0]
 8001cd4:	f3c0 1000 	ubfx	r0, r0, #4, #1
 8001cd8:	4770      	bx	lr

08001cda <_ZN4core3fmt9Formatter15debug_upper_hex17hd6d96e6aa5cb78d8E>:
 8001cda:	7800      	ldrb	r0, [r0, #0]
 8001cdc:	f3c0 1040 	ubfx	r0, r0, #5, #1
 8001ce0:	4770      	bx	lr

08001ce2 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17heed14ddcd875f85bE>:
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b0a2      	sub	sp, #136	; 0x88
 8001ce6:	7802      	ldrb	r2, [r0, #0]
 8001ce8:	468c      	mov	ip, r1
 8001cea:	f002 030f 	and.w	r3, r2, #15
 8001cee:	f103 0057 	add.w	r0, r3, #87	; 0x57
 8001cf2:	2b0a      	cmp	r3, #10
 8001cf4:	bf38      	it	cc
 8001cf6:	f103 0030 	addcc.w	r0, r3, #48	; 0x30
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	ebb3 1f12 	cmp.w	r3, r2, lsr #4
 8001d00:	d00b      	beq.n	8001d1a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17heed14ddcd875f85bE+0x38>
 8001d02:	0913      	lsrs	r3, r2, #4
 8001d04:	f103 0157 	add.w	r1, r3, #87	; 0x57
 8001d08:	2aa0      	cmp	r2, #160	; 0xa0
 8001d0a:	bf38      	it	cc
 8001d0c:	f103 0130 	addcc.w	r1, r3, #48	; 0x30
 8001d10:	f88d 1086 	strb.w	r1, [sp, #134]	; 0x86
 8001d14:	227e      	movs	r2, #126	; 0x7e
 8001d16:	2302      	movs	r3, #2
 8001d18:	e001      	b.n	8001d1e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17heed14ddcd875f85bE+0x3c>
 8001d1a:	227f      	movs	r2, #127	; 0x7f
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	f88d 0087 	strb.w	r0, [sp, #135]	; 0x87
 8001d22:	a802      	add	r0, sp, #8
 8001d24:	4410      	add	r0, r2
 8001d26:	f64d 2288 	movw	r2, #55944	; 0xda88
 8001d2a:	e9cd 0300 	strd	r0, r3, [sp]
 8001d2e:	f6c0 0200 	movt	r2, #2048	; 0x800
 8001d32:	4660      	mov	r0, ip
 8001d34:	2101      	movs	r1, #1
 8001d36:	2302      	movs	r3, #2
 8001d38:	f7ff fe8a 	bl	8001a50 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E>
 8001d3c:	b022      	add	sp, #136	; 0x88
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h33ff4d4021f61f61E>:
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b0a2      	sub	sp, #136	; 0x88
 8001d44:	7802      	ldrb	r2, [r0, #0]
 8001d46:	468c      	mov	ip, r1
 8001d48:	f002 030f 	and.w	r3, r2, #15
 8001d4c:	f103 0037 	add.w	r0, r3, #55	; 0x37
 8001d50:	2b0a      	cmp	r3, #10
 8001d52:	bf38      	it	cc
 8001d54:	f103 0030 	addcc.w	r0, r3, #48	; 0x30
 8001d58:	2300      	movs	r3, #0
 8001d5a:	ebb3 1f12 	cmp.w	r3, r2, lsr #4
 8001d5e:	d00b      	beq.n	8001d78 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h33ff4d4021f61f61E+0x38>
 8001d60:	0913      	lsrs	r3, r2, #4
 8001d62:	f103 0137 	add.w	r1, r3, #55	; 0x37
 8001d66:	2aa0      	cmp	r2, #160	; 0xa0
 8001d68:	bf38      	it	cc
 8001d6a:	f103 0130 	addcc.w	r1, r3, #48	; 0x30
 8001d6e:	f88d 1086 	strb.w	r1, [sp, #134]	; 0x86
 8001d72:	227e      	movs	r2, #126	; 0x7e
 8001d74:	2302      	movs	r3, #2
 8001d76:	e001      	b.n	8001d7c <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h33ff4d4021f61f61E+0x3c>
 8001d78:	227f      	movs	r2, #127	; 0x7f
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	f88d 0087 	strb.w	r0, [sp, #135]	; 0x87
 8001d80:	a802      	add	r0, sp, #8
 8001d82:	4410      	add	r0, r2
 8001d84:	f64d 2288 	movw	r2, #55944	; 0xda88
 8001d88:	e9cd 0300 	strd	r0, r3, [sp]
 8001d8c:	f6c0 0200 	movt	r2, #2048	; 0x800
 8001d90:	4660      	mov	r0, ip
 8001d92:	2101      	movs	r1, #1
 8001d94:	2302      	movs	r3, #2
 8001d96:	f7ff fe5b 	bl	8001a50 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E>
 8001d9a:	b022      	add	sp, #136	; 0x88
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hb2119167a92723afE>:
 8001d9e:	b5b0      	push	{r4, r5, r7, lr}
 8001da0:	b0a2      	sub	sp, #136	; 0x88
 8001da2:	6800      	ldr	r0, [r0, #0]
 8001da4:	f10d 0e08 	add.w	lr, sp, #8
 8001da8:	468c      	mov	ip, r1
 8001daa:	2381      	movs	r3, #129	; 0x81
 8001dac:	2100      	movs	r1, #0
 8001dae:	f000 020f 	and.w	r2, r0, #15
 8001db2:	f102 0457 	add.w	r4, r2, #87	; 0x57
 8001db6:	2a0a      	cmp	r2, #10
 8001db8:	bf38      	it	cc
 8001dba:	f102 0430 	addcc.w	r4, r2, #48	; 0x30
 8001dbe:	eb0e 0203 	add.w	r2, lr, r3
 8001dc2:	ebb1 1f10 	cmp.w	r1, r0, lsr #4
 8001dc6:	f802 4c02 	strb.w	r4, [r2, #-2]
 8001dca:	d030      	beq.n	8001e2e <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hb2119167a92723afE+0x90>
 8001dcc:	0904      	lsrs	r4, r0, #4
 8001dce:	f004 040f 	and.w	r4, r4, #15
 8001dd2:	f104 0557 	add.w	r5, r4, #87	; 0x57
 8001dd6:	2c0a      	cmp	r4, #10
 8001dd8:	bf38      	it	cc
 8001dda:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
 8001dde:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
 8001de2:	f802 5c03 	strb.w	r5, [r2, #-3]
 8001de6:	d028      	beq.n	8001e3a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hb2119167a92723afE+0x9c>
 8001de8:	0a04      	lsrs	r4, r0, #8
 8001dea:	f004 040f 	and.w	r4, r4, #15
 8001dee:	f104 0557 	add.w	r5, r4, #87	; 0x57
 8001df2:	2c0a      	cmp	r4, #10
 8001df4:	bf38      	it	cc
 8001df6:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
 8001dfa:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
 8001dfe:	f802 5c04 	strb.w	r5, [r2, #-4]
 8001e02:	d01f      	beq.n	8001e44 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hb2119167a92723afE+0xa6>
 8001e04:	0b04      	lsrs	r4, r0, #12
 8001e06:	3b04      	subs	r3, #4
 8001e08:	f004 040f 	and.w	r4, r4, #15
 8001e0c:	f104 0557 	add.w	r5, r4, #87	; 0x57
 8001e10:	2c0a      	cmp	r4, #10
 8001e12:	bf38      	it	cc
 8001e14:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
 8001e18:	f802 5c05 	strb.w	r5, [r2, #-5]
 8001e1c:	0c02      	lsrs	r2, r0, #16
 8001e1e:	ebb1 4f10 	cmp.w	r1, r0, lsr #16
 8001e22:	4610      	mov	r0, r2
 8001e24:	d1c3      	bne.n	8001dae <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hb2119167a92723afE+0x10>
 8001e26:	1e58      	subs	r0, r3, #1
 8001e28:	2881      	cmp	r0, #129	; 0x81
 8001e2a:	d30f      	bcc.n	8001e4c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hb2119167a92723afE+0xae>
 8001e2c:	e01e      	b.n	8001e6c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hb2119167a92723afE+0xce>
 8001e2e:	1e59      	subs	r1, r3, #1
 8001e30:	1e98      	subs	r0, r3, #2
 8001e32:	460b      	mov	r3, r1
 8001e34:	2881      	cmp	r0, #129	; 0x81
 8001e36:	d309      	bcc.n	8001e4c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hb2119167a92723afE+0xae>
 8001e38:	e018      	b.n	8001e6c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hb2119167a92723afE+0xce>
 8001e3a:	1ed8      	subs	r0, r3, #3
 8001e3c:	3b02      	subs	r3, #2
 8001e3e:	2881      	cmp	r0, #129	; 0x81
 8001e40:	d304      	bcc.n	8001e4c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hb2119167a92723afE+0xae>
 8001e42:	e013      	b.n	8001e6c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hb2119167a92723afE+0xce>
 8001e44:	1f18      	subs	r0, r3, #4
 8001e46:	3b03      	subs	r3, #3
 8001e48:	2881      	cmp	r0, #129	; 0x81
 8001e4a:	d20f      	bcs.n	8001e6c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hb2119167a92723afE+0xce>
 8001e4c:	f1c3 0181 	rsb	r1, r3, #129	; 0x81
 8001e50:	f64d 2288 	movw	r2, #55944	; 0xda88
 8001e54:	4470      	add	r0, lr
 8001e56:	f6c0 0200 	movt	r2, #2048	; 0x800
 8001e5a:	e9cd 0100 	strd	r0, r1, [sp]
 8001e5e:	4660      	mov	r0, ip
 8001e60:	2101      	movs	r1, #1
 8001e62:	2302      	movs	r3, #2
 8001e64:	f7ff fdf4 	bl	8001a50 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E>
 8001e68:	b022      	add	sp, #136	; 0x88
 8001e6a:	bdb0      	pop	{r4, r5, r7, pc}
 8001e6c:	2180      	movs	r1, #128	; 0x80
 8001e6e:	f7ff fdcd 	bl	8001a0c <_ZN4core5slice22slice_index_order_fail17h604ca25004a88762E>
 8001e72:	defe      	udf	#254	; 0xfe

08001e74 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hc44988ae29d24532E>:
 8001e74:	b5b0      	push	{r4, r5, r7, lr}
 8001e76:	b0a2      	sub	sp, #136	; 0x88
 8001e78:	6800      	ldr	r0, [r0, #0]
 8001e7a:	f10d 0e08 	add.w	lr, sp, #8
 8001e7e:	468c      	mov	ip, r1
 8001e80:	2381      	movs	r3, #129	; 0x81
 8001e82:	2100      	movs	r1, #0
 8001e84:	f000 020f 	and.w	r2, r0, #15
 8001e88:	f102 0437 	add.w	r4, r2, #55	; 0x37
 8001e8c:	2a0a      	cmp	r2, #10
 8001e8e:	bf38      	it	cc
 8001e90:	f102 0430 	addcc.w	r4, r2, #48	; 0x30
 8001e94:	eb0e 0203 	add.w	r2, lr, r3
 8001e98:	ebb1 1f10 	cmp.w	r1, r0, lsr #4
 8001e9c:	f802 4c02 	strb.w	r4, [r2, #-2]
 8001ea0:	d030      	beq.n	8001f04 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hc44988ae29d24532E+0x90>
 8001ea2:	0904      	lsrs	r4, r0, #4
 8001ea4:	f004 040f 	and.w	r4, r4, #15
 8001ea8:	f104 0537 	add.w	r5, r4, #55	; 0x37
 8001eac:	2c0a      	cmp	r4, #10
 8001eae:	bf38      	it	cc
 8001eb0:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
 8001eb4:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
 8001eb8:	f802 5c03 	strb.w	r5, [r2, #-3]
 8001ebc:	d028      	beq.n	8001f10 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hc44988ae29d24532E+0x9c>
 8001ebe:	0a04      	lsrs	r4, r0, #8
 8001ec0:	f004 040f 	and.w	r4, r4, #15
 8001ec4:	f104 0537 	add.w	r5, r4, #55	; 0x37
 8001ec8:	2c0a      	cmp	r4, #10
 8001eca:	bf38      	it	cc
 8001ecc:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
 8001ed0:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
 8001ed4:	f802 5c04 	strb.w	r5, [r2, #-4]
 8001ed8:	d01f      	beq.n	8001f1a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hc44988ae29d24532E+0xa6>
 8001eda:	0b04      	lsrs	r4, r0, #12
 8001edc:	3b04      	subs	r3, #4
 8001ede:	f004 040f 	and.w	r4, r4, #15
 8001ee2:	f104 0537 	add.w	r5, r4, #55	; 0x37
 8001ee6:	2c0a      	cmp	r4, #10
 8001ee8:	bf38      	it	cc
 8001eea:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
 8001eee:	f802 5c05 	strb.w	r5, [r2, #-5]
 8001ef2:	0c02      	lsrs	r2, r0, #16
 8001ef4:	ebb1 4f10 	cmp.w	r1, r0, lsr #16
 8001ef8:	4610      	mov	r0, r2
 8001efa:	d1c3      	bne.n	8001e84 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hc44988ae29d24532E+0x10>
 8001efc:	1e58      	subs	r0, r3, #1
 8001efe:	2881      	cmp	r0, #129	; 0x81
 8001f00:	d30f      	bcc.n	8001f22 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hc44988ae29d24532E+0xae>
 8001f02:	e01e      	b.n	8001f42 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hc44988ae29d24532E+0xce>
 8001f04:	1e59      	subs	r1, r3, #1
 8001f06:	1e98      	subs	r0, r3, #2
 8001f08:	460b      	mov	r3, r1
 8001f0a:	2881      	cmp	r0, #129	; 0x81
 8001f0c:	d309      	bcc.n	8001f22 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hc44988ae29d24532E+0xae>
 8001f0e:	e018      	b.n	8001f42 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hc44988ae29d24532E+0xce>
 8001f10:	1ed8      	subs	r0, r3, #3
 8001f12:	3b02      	subs	r3, #2
 8001f14:	2881      	cmp	r0, #129	; 0x81
 8001f16:	d304      	bcc.n	8001f22 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hc44988ae29d24532E+0xae>
 8001f18:	e013      	b.n	8001f42 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hc44988ae29d24532E+0xce>
 8001f1a:	1f18      	subs	r0, r3, #4
 8001f1c:	3b03      	subs	r3, #3
 8001f1e:	2881      	cmp	r0, #129	; 0x81
 8001f20:	d20f      	bcs.n	8001f42 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hc44988ae29d24532E+0xce>
 8001f22:	f1c3 0181 	rsb	r1, r3, #129	; 0x81
 8001f26:	f64d 2288 	movw	r2, #55944	; 0xda88
 8001f2a:	4470      	add	r0, lr
 8001f2c:	f6c0 0200 	movt	r2, #2048	; 0x800
 8001f30:	e9cd 0100 	strd	r0, r1, [sp]
 8001f34:	4660      	mov	r0, ip
 8001f36:	2101      	movs	r1, #1
 8001f38:	2302      	movs	r3, #2
 8001f3a:	f7ff fd89 	bl	8001a50 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E>
 8001f3e:	b022      	add	sp, #136	; 0x88
 8001f40:	bdb0      	pop	{r4, r5, r7, pc}
 8001f42:	2180      	movs	r1, #128	; 0x80
 8001f44:	f7ff fd62 	bl	8001a0c <_ZN4core5slice22slice_index_order_fail17h604ca25004a88762E>
 8001f48:	defe      	udf	#254	; 0xfe

08001f4a <_ZN4core3fmt3num3imp7fmt_u3217h4a6591ec3ef714beE>:
 8001f4a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f4e:	b08f      	sub	sp, #60	; 0x3c
 8001f50:	4617      	mov	r7, r2
 8001f52:	f242 7210 	movw	r2, #10000	; 0x2710
 8001f56:	4290      	cmp	r0, r2
 8001f58:	d346      	bcc.n	8001fe8 <_ZN4core3fmt3num3imp7fmt_u3217h4a6591ec3ef714beE+0x9e>
 8001f5a:	f241 7959 	movw	r9, #5977	; 0x1759
 8001f5e:	f248 5a1f 	movw	sl, #34079	; 0x851f
 8001f62:	f64d 268a 	movw	r6, #55946	; 0xda8a
 8001f66:	f24e 08ff 	movw	r8, #57599	; 0xe0ff
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	f2cd 19b7 	movt	r9, #53687	; 0xd1b7
 8001f70:	f2c5 1aeb 	movt	sl, #20971	; 0x51eb
 8001f74:	f6c0 0600 	movt	r6, #2048	; 0x800
 8001f78:	f04f 0b64 	mov.w	fp, #100	; 0x64
 8001f7c:	f2c0 58f5 	movt	r8, #1525	; 0x5f5
 8001f80:	e9cd 1703 	strd	r1, r7, [sp, #12]
 8001f84:	fba0 4709 	umull	r4, r7, r0, r9
 8001f88:	f10d 0115 	add.w	r1, sp, #21
 8001f8c:	18cd      	adds	r5, r1, r3
 8001f8e:	3b04      	subs	r3, #4
 8001f90:	4540      	cmp	r0, r8
 8001f92:	ea4f 3457 	mov.w	r4, r7, lsr #13
 8001f96:	fb04 0712 	mls	r7, r4, r2, r0
 8001f9a:	4620      	mov	r0, r4
 8001f9c:	fba7 ce0a 	umull	ip, lr, r7, sl
 8001fa0:	ea4f 115e 	mov.w	r1, lr, lsr #5
 8001fa4:	f836 2011 	ldrh.w	r2, [r6, r1, lsl #1]
 8001fa8:	fb01 711b 	mls	r1, r1, fp, r7
 8001fac:	f8a5 2023 	strh.w	r2, [r5, #35]	; 0x23
 8001fb0:	f242 7210 	movw	r2, #10000	; 0x2710
 8001fb4:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 8001fb8:	f8a5 1025 	strh.w	r1, [r5, #37]	; 0x25
 8001fbc:	d8e2      	bhi.n	8001f84 <_ZN4core3fmt3num3imp7fmt_u3217h4a6591ec3ef714beE+0x3a>
 8001fbe:	e9dd 1703 	ldrd	r1, r7, [sp, #12]
 8001fc2:	f103 0227 	add.w	r2, r3, #39	; 0x27
 8001fc6:	4620      	mov	r0, r4
 8001fc8:	2863      	cmp	r0, #99	; 0x63
 8001fca:	dc10      	bgt.n	8001fee <_ZN4core3fmt3num3imp7fmt_u3217h4a6591ec3ef714beE+0xa4>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b09      	cmp	r3, #9
 8001fd0:	dd25      	ble.n	800201e <_ZN4core3fmt3num3imp7fmt_u3217h4a6591ec3ef714beE+0xd4>
 8001fd2:	f64d 208a 	movw	r0, #55946	; 0xda8a
 8001fd6:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001fda:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8001fde:	1e90      	subs	r0, r2, #2
 8001fe0:	f10d 0215 	add.w	r2, sp, #21
 8001fe4:	5213      	strh	r3, [r2, r0]
 8001fe6:	e01f      	b.n	8002028 <_ZN4core3fmt3num3imp7fmt_u3217h4a6591ec3ef714beE+0xde>
 8001fe8:	2227      	movs	r2, #39	; 0x27
 8001fea:	2863      	cmp	r0, #99	; 0x63
 8001fec:	ddee      	ble.n	8001fcc <_ZN4core3fmt3num3imp7fmt_u3217h4a6591ec3ef714beE+0x82>
 8001fee:	f248 531f 	movw	r3, #34079	; 0x851f
 8001ff2:	b286      	uxth	r6, r0
 8001ff4:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 8001ff8:	3a02      	subs	r2, #2
 8001ffa:	fba6 6303 	umull	r6, r3, r6, r3
 8001ffe:	2664      	movs	r6, #100	; 0x64
 8002000:	095b      	lsrs	r3, r3, #5
 8002002:	fb03 0016 	mls	r0, r3, r6, r0
 8002006:	f64d 268a 	movw	r6, #55946	; 0xda8a
 800200a:	f6c0 0600 	movt	r6, #2048	; 0x800
 800200e:	b280      	uxth	r0, r0
 8002010:	f836 0010 	ldrh.w	r0, [r6, r0, lsl #1]
 8002014:	f10d 0615 	add.w	r6, sp, #21
 8002018:	52b0      	strh	r0, [r6, r2]
 800201a:	2b09      	cmp	r3, #9
 800201c:	dcd9      	bgt.n	8001fd2 <_ZN4core3fmt3num3imp7fmt_u3217h4a6591ec3ef714beE+0x88>
 800201e:	1e50      	subs	r0, r2, #1
 8002020:	f10d 0215 	add.w	r2, sp, #21
 8002024:	3330      	adds	r3, #48	; 0x30
 8002026:	5413      	strb	r3, [r2, r0]
 8002028:	f1c0 0327 	rsb	r3, r0, #39	; 0x27
 800202c:	f10d 0215 	add.w	r2, sp, #21
 8002030:	4410      	add	r0, r2
 8002032:	f64d 124c 	movw	r2, #55628	; 0xd94c
 8002036:	e9cd 0300 	strd	r0, r3, [sp]
 800203a:	f6c0 0200 	movt	r2, #2048	; 0x800
 800203e:	4638      	mov	r0, r7
 8002040:	2300      	movs	r3, #0
 8002042:	f7ff fd05 	bl	8001a50 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E>
 8002046:	b00f      	add	sp, #60	; 0x3c
 8002048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800204c <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17heb4d046d241d78d0E>:
 800204c:	7800      	ldrb	r0, [r0, #0]
 800204e:	460a      	mov	r2, r1
 8002050:	2101      	movs	r1, #1
 8002052:	f7ff bf7a 	b.w	8001f4a <_ZN4core3fmt3num3imp7fmt_u3217h4a6591ec3ef714beE>

08002056 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17h33b3bbdbc74b88baE>:
 8002056:	6800      	ldr	r0, [r0, #0]
 8002058:	460a      	mov	r2, r1
 800205a:	2100      	movs	r1, #0
 800205c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8002060:	bfc8      	it	gt
 8002062:	2101      	movgt	r1, #1
 8002064:	2800      	cmp	r0, #0
 8002066:	bf48      	it	mi
 8002068:	4240      	negmi	r0, r0
 800206a:	f7ff bf6e 	b.w	8001f4a <_ZN4core3fmt3num3imp7fmt_u3217h4a6591ec3ef714beE>

0800206e <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17ha7805aa8d849f46cE>:
 800206e:	6800      	ldr	r0, [r0, #0]
 8002070:	460a      	mov	r2, r1
 8002072:	2101      	movs	r1, #1
 8002074:	f7ff bf69 	b.w	8001f4a <_ZN4core3fmt3num3imp7fmt_u3217h4a6591ec3ef714beE>

08002078 <console_flush>:
    return __semihost(SYS_WRITE, args);
}

static struct os_mbuf *semihost_mbuf = NULL;

void console_flush(void) {
 8002078:	b5f0      	push	{r4, r5, r6, r7, lr}
    //  Flush output buffer to the console log.  This will be slow.
    if (!log_enabled) { return; }  //  Skip if log not enabled.
 800207a:	4c12      	ldr	r4, [pc, #72]	; (80020c4 <console_flush+0x4c>)
void console_flush(void) {
 800207c:	b085      	sub	sp, #20
    if (!log_enabled) { return; }  //  Skip if log not enabled.
 800207e:	7822      	ldrb	r2, [r4, #0]
 8002080:	b1ea      	cbz	r2, 80020be <console_flush+0x46>
    if (!semihost_mbuf) { return; }  //  Buffer is empty, nothing to write.
 8002082:	4911      	ldr	r1, [pc, #68]	; (80020c8 <console_flush+0x50>)
 8002084:	680a      	ldr	r2, [r1, #0]
 8002086:	b1d2      	cbz	r2, 80020be <console_flush+0x46>
#endif

static inline int
os_arch_in_isr(void)
{
    return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
 8002088:	4b10      	ldr	r3, [pc, #64]	; (80020cc <console_flush+0x54>)
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (os_arch_in_isr()) { return; }  //  Don't flush if we are called during an interrupt.
 8002090:	b9ab      	cbnz	r3, 80020be <console_flush+0x46>

    //  Swap mbufs first to prevent concurrency problems.
    struct os_mbuf *old = semihost_mbuf;
    semihost_mbuf = NULL;
 8002092:	600b      	str	r3, [r1, #0]
    args[0] = (uint32_t)fh;
 8002094:	2502      	movs	r5, #2
    semihost_mbuf = NULL;
 8002096:	4613      	mov	r3, r2
    __asm( 
 8002098:	2605      	movs	r6, #5
 800209a:	af01      	add	r7, sp, #4

    struct os_mbuf *m = old;
    while (m) {  //  For each mbuf in the chain...
        const unsigned char *data = OS_MBUF_DATA(m, const unsigned char *);  //  Fetch the data.
        int size = m->om_len;                         //  Fetch the size.
        semihost_write(SEMIHOST_HANDLE, data, size);  //  Write the data to Semihosting output.
 800209c:	88d9      	ldrh	r1, [r3, #6]
    if (length == 0) { return 0; }
 800209e:	b141      	cbz	r1, 80020b2 <console_flush+0x3a>
        const unsigned char *data = OS_MBUF_DATA(m, const unsigned char *);  //  Fetch the data.
 80020a0:	6818      	ldr	r0, [r3, #0]
    args[2] = (uint32_t)length;
 80020a2:	9103      	str	r1, [sp, #12]
    if (!log_enabled) return -1;
 80020a4:	7821      	ldrb	r1, [r4, #0]
    args[1] = (uint32_t)buffer;
 80020a6:	e9cd 5001 	strd	r5, r0, [sp, #4]
    if (!log_enabled) return -1;
 80020aa:	b111      	cbz	r1, 80020b2 <console_flush+0x3a>
    __asm( 
 80020ac:	4630      	mov	r0, r6
 80020ae:	4639      	mov	r1, r7
 80020b0:	beab      	bkpt	0x00ab
        m = m->om_next.sle_next;                      //  Fetch next mbuf in the chain.
 80020b2:	68db      	ldr	r3, [r3, #12]
    while (m) {  //  For each mbuf in the chain...
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d1f1      	bne.n	800209c <console_flush+0x24>
    }
    os_mbuf_free_chain(old);  //  Deallocate the old chain.
 80020b8:	4610      	mov	r0, r2
 80020ba:	f002 f904 	bl	80042c6 <os_mbuf_free_chain>
}
 80020be:	b005      	add	sp, #20
 80020c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020c2:	bf00      	nop
 80020c4:	20000130 	.word	0x20000130
 80020c8:	2000067c 	.word	0x2000067c
 80020cc:	e000ed00 	.word	0xe000ed00

080020d0 <disable_buffer>:
void disable_buffer(void) { buffer_enabled = false; console_flush(); }  //  Disable buffering.
 80020d0:	f7ff bfd2 	b.w	8002078 <console_flush>

080020d4 <console_buffer>:

void console_buffer(const char *buffer, unsigned int length) {
    //  Append "length" number of bytes from "buffer" to the output buffer.
    int rc;
    if (!log_enabled) { return; }  //  Skip if log not enabled.
 80020d4:	4b0e      	ldr	r3, [pc, #56]	; (8002110 <console_buffer+0x3c>)
void console_buffer(const char *buffer, unsigned int length) {
 80020d6:	b570      	push	{r4, r5, r6, lr}
    if (!log_enabled) { return; }  //  Skip if log not enabled.
 80020d8:	781b      	ldrb	r3, [r3, #0]
void console_buffer(const char *buffer, unsigned int length) {
 80020da:	4606      	mov	r6, r0
 80020dc:	460d      	mov	r5, r1
    if (!log_enabled) { return; }  //  Skip if log not enabled.
 80020de:	b1b3      	cbz	r3, 800210e <console_buffer+0x3a>
    if (!semihost_mbuf) {  //  Allocate mbuf if not already allocated.
 80020e0:	4c0c      	ldr	r4, [pc, #48]	; (8002114 <console_buffer+0x40>)
 80020e2:	6821      	ldr	r1, [r4, #0]
 80020e4:	b169      	cbz	r1, 8002102 <console_buffer+0x2e>
        semihost_mbuf = os_msys_get_pkthdr(length, 0);
        if (!semihost_mbuf) { return; }  //  If out of memory, quit.
    }
    //  Limit the buffer size.  Quit if too big.
    if (os_mbuf_len(semihost_mbuf) + length >= OUTPUT_BUFFER_SIZE) { return; }
 80020e6:	6820      	ldr	r0, [r4, #0]
 80020e8:	f002 f8fa 	bl	80042e0 <os_mbuf_len>
 80020ec:	4428      	add	r0, r5
 80020ee:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 80020f2:	d20c      	bcs.n	800210e <console_buffer+0x3a>
    //  Append the data to the mbuf chain.  This may increase the numbere of mbufs in the chain.
    rc = os_mbuf_append(semihost_mbuf, buffer, length);
 80020f4:	b2aa      	uxth	r2, r5
 80020f6:	4631      	mov	r1, r6
 80020f8:	6820      	ldr	r0, [r4, #0]
    if (rc) { return; }  //  If out of memory, quit.
}
 80020fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    rc = os_mbuf_append(semihost_mbuf, buffer, length);
 80020fe:	f002 b8f8 	b.w	80042f2 <os_mbuf_append>
        semihost_mbuf = os_msys_get_pkthdr(length, 0);
 8002102:	b2a8      	uxth	r0, r5
 8002104:	f002 fb84 	bl	8004810 <os_msys_get_pkthdr>
 8002108:	6020      	str	r0, [r4, #0]
        if (!semihost_mbuf) { return; }  //  If out of memory, quit.
 800210a:	2800      	cmp	r0, #0
 800210c:	d1eb      	bne.n	80020e6 <console_buffer+0x12>
}
 800210e:	bd70      	pop	{r4, r5, r6, pc}
 8002110:	20000130 	.word	0x20000130
 8002114:	2000067c 	.word	0x2000067c

08002118 <console_printhex>:

void console_printhex(uint8_t v) {
 8002118:	b507      	push	{r0, r1, r2, lr}
    char buffer[MAX_BYTE_LENGTH + 1];
    int size = MAX_BYTE_LENGTH + 1;
    bool prefixByZero = true;
    int length = 0;
    for(uint8_t divisor = 16; divisor >= 1; divisor = divisor / 16) {
        char digit = '0' + (char)(v / divisor);
 800211a:	0902      	lsrs	r2, r0, #4
 800211c:	f102 0330 	add.w	r3, r2, #48	; 0x30
        if (digit > '9') { digit = digit - 10 - '0' + 'a'; }
 8002120:	2b39      	cmp	r3, #57	; 0x39
 8002122:	bf88      	it	hi
 8002124:	f102 0357 	addhi.w	r3, r2, #87	; 0x57
        if (digit > '0' || length > 0 || prefixByZero) {
            if (length < size) {
                buffer[length++] = digit;
            }
        }
        v = v % divisor;
 8002128:	f000 000f 	and.w	r0, r0, #15
                buffer[length++] = digit;
 800212c:	f88d 3004 	strb.w	r3, [sp, #4]
        char digit = '0' + (char)(v / divisor);
 8002130:	f100 0330 	add.w	r3, r0, #48	; 0x30
        if (digit > '9') { digit = digit - 10 - '0' + 'a'; }
 8002134:	2b39      	cmp	r3, #57	; 0x39
 8002136:	bf88      	it	hi
 8002138:	f100 0357 	addhi.w	r3, r0, #87	; 0x57
                buffer[length++] = digit;
 800213c:	f88d 3005 	strb.w	r3, [sp, #5]
    }
    if (length == 0) { buffer[length++] = '0'; };
    if (length < size) buffer[length] = 0;
    buffer[size - 1] = 0;  //  Terminate in case of overflow.
 8002140:	2300      	movs	r3, #0
    console_buffer(buffer, strlen(buffer));
 8002142:	a801      	add	r0, sp, #4
    buffer[size - 1] = 0;  //  Terminate in case of overflow.
 8002144:	f88d 3006 	strb.w	r3, [sp, #6]
    console_buffer(buffer, strlen(buffer));
 8002148:	f003 f93e 	bl	80053c8 <strlen>
 800214c:	4601      	mov	r1, r0
 800214e:	a801      	add	r0, sp, #4
 8002150:	f7ff ffc0 	bl	80020d4 <console_buffer>
}
 8002154:	b003      	add	sp, #12
 8002156:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800215c <console_dump>:
    bool neg; int i, d;
    split_float(f, &neg, &i, &d);      //  Split the float into neg, integer and decimal parts to 2 decimal places
    console_printf("%s%d.%02d", neg ? "-" : "", i, d);   //  Combine the sign, integer and decimal parts
}

void console_dump(const uint8_t *buffer, unsigned int len) {
 800215c:	b570      	push	{r4, r5, r6, lr}
	//  Append "length" number of bytes from "buffer" to the output buffer in hex format.
    if (buffer == NULL || len == 0) { return; }
 800215e:	b128      	cbz	r0, 800216c <console_dump+0x10>
 8002160:	b121      	cbz	r1, 800216c <console_dump+0x10>
 8002162:	4604      	mov	r4, r0
	for (int i = 0; i < len; i++) { console_printhex(buffer[i]); console_buffer(" ", 1); } 
 8002164:	4e06      	ldr	r6, [pc, #24]	; (8002180 <console_dump+0x24>)
 8002166:	1845      	adds	r5, r0, r1
 8002168:	42ac      	cmp	r4, r5
 800216a:	d100      	bne.n	800216e <console_dump+0x12>
}
 800216c:	bd70      	pop	{r4, r5, r6, pc}
	for (int i = 0; i < len; i++) { console_printhex(buffer[i]); console_buffer(" ", 1); } 
 800216e:	f814 0b01 	ldrb.w	r0, [r4], #1
 8002172:	f7ff ffd1 	bl	8002118 <console_printhex>
 8002176:	2101      	movs	r1, #1
 8002178:	4630      	mov	r0, r6
 800217a:	f7ff ffab 	bl	80020d4 <console_buffer>
 800217e:	e7f3      	b.n	8002168 <console_dump+0xc>
 8002180:	0800e5c7 	.word	0x0800e5c7

08002184 <console_out_nolock>:
    //  if (c == '\n') { console_flush(); }  //  If we see a newline, flush the buffer.
}

int console_out_nolock(int character) {
    char c = (char)character;
    if (g_silence_console) { return c; }
 8002184:	4b0c      	ldr	r3, [pc, #48]	; (80021b8 <console_out_nolock+0x34>)
int console_out_nolock(int character) {
 8002186:	b513      	push	{r0, r1, r4, lr}
    if (g_silence_console) { return c; }
 8002188:	7819      	ldrb	r1, [r3, #0]
int console_out_nolock(int character) {
 800218a:	4604      	mov	r4, r0
 800218c:	b2c3      	uxtb	r3, r0
    if (g_silence_console) { return c; }
 800218e:	b119      	cbz	r1, 8002198 <console_out_nolock+0x14>
 8002190:	461c      	mov	r4, r3
    } else {
        console_is_midline = 1;
    }
    semihosting_console_write_ch(c);
    return character;
}
 8002192:	4620      	mov	r0, r4
 8002194:	b002      	add	sp, #8
 8002196:	bd10      	pop	{r4, pc}
    if ('\n' == c) {
 8002198:	2b0a      	cmp	r3, #10
        console_is_midline = 1;
 800219a:	bf18      	it	ne
 800219c:	2101      	movne	r1, #1
 800219e:	4a07      	ldr	r2, [pc, #28]	; (80021bc <console_out_nolock+0x38>)
    if (c == '\r') { return; }  //  Don't display \r.
 80021a0:	2b0d      	cmp	r3, #13
        console_is_midline = 1;
 80021a2:	6011      	str	r1, [r2, #0]
 80021a4:	f88d 3007 	strb.w	r3, [sp, #7]
    if (c == '\r') { return; }  //  Don't display \r.
 80021a8:	d0f3      	beq.n	8002192 <console_out_nolock+0xe>
    console_buffer(&c, 1);  //  Append the char to the output buffer.
 80021aa:	2101      	movs	r1, #1
 80021ac:	f10d 0007 	add.w	r0, sp, #7
 80021b0:	f7ff ff90 	bl	80020d4 <console_buffer>
 80021b4:	e7ed      	b.n	8002192 <console_out_nolock+0xe>
 80021b6:	bf00      	nop
 80021b8:	200039ed 	.word	0x200039ed
 80021bc:	200039e8 	.word	0x200039e8

080021c0 <semihosting_console_init>:

void console_rx_restart(void) {}

int semihosting_console_is_init(void) { return 1; }

int semihosting_console_init(void) { return 0; }
 80021c0:	2000      	movs	r0, #0
 80021c2:	4770      	bx	lr

080021c4 <console_write>:

int console_unlock(void) { return OS_OK; }

int console_out(int c) { return console_out_nolock(c); }

void console_write(const char *str, int cnt) {
 80021c4:	b570      	push	{r4, r5, r6, lr}
 80021c6:	4605      	mov	r5, r0
 80021c8:	460e      	mov	r6, r1
    int i;
    for (i = 0; i < cnt; i++) {
 80021ca:	4604      	mov	r4, r0
 80021cc:	1b63      	subs	r3, r4, r5
 80021ce:	429e      	cmp	r6, r3
 80021d0:	dd05      	ble.n	80021de <console_write+0x1a>
        if (console_out_nolock((int)str[i]) == EOF) { break; }
 80021d2:	f814 0b01 	ldrb.w	r0, [r4], #1
 80021d6:	f7ff ffd5 	bl	8002184 <console_out_nolock>
 80021da:	3001      	adds	r0, #1
 80021dc:	d1f6      	bne.n	80021cc <console_write+0x8>
    }
}
 80021de:	bd70      	pop	{r4, r5, r6, pc}

080021e0 <console_blocking_mode>:

void console_blocking_mode(void) {
    disable_buffer();
 80021e0:	f7ff bf76 	b.w	80020d0 <disable_buffer>

080021e4 <console_pkg_init>:

void console_deinit(void) {}

void console_reinit(void) {}

void console_pkg_init(void) {
 80021e4:	b513      	push	{r0, r1, r4, lr}
    int rc = 0;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
 80021e6:	4b0d      	ldr	r3, [pc, #52]	; (800221c <console_pkg_init+0x38>)
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	b923      	cbnz	r3, 80021f6 <console_pkg_init+0x12>
 80021ec:	461a      	mov	r2, r3
 80021ee:	4619      	mov	r1, r3
 80021f0:	4618      	mov	r0, r3
 80021f2:	f001 fc5f 	bl	8003ab4 <__assert_func>

    os_eventq_init(&avail_queue);
 80021f6:	480a      	ldr	r0, [pc, #40]	; (8002220 <console_pkg_init+0x3c>)
 80021f8:	f001 ff28 	bl	800404c <os_eventq_init>
    os_mutex_init(&console_write_lock);
 80021fc:	4809      	ldr	r0, [pc, #36]	; (8002224 <console_pkg_init+0x40>)
 80021fe:	f002 fb45 	bl	800488c <os_mutex_init>

#if MYNEWT_VAL(CONSOLE_SEMIHOSTING)
    rc = semihosting_console_init();
 8002202:	f7ff ffdd 	bl	80021c0 <semihosting_console_init>
#endif
    SYSINIT_PANIC_ASSERT(rc == 0);
 8002206:	b138      	cbz	r0, 8002218 <console_pkg_init+0x34>
 8002208:	2300      	movs	r3, #0
 800220a:	4a07      	ldr	r2, [pc, #28]	; (8002228 <console_pkg_init+0x44>)
 800220c:	9300      	str	r3, [sp, #0]
 800220e:	6814      	ldr	r4, [r2, #0]
 8002210:	4619      	mov	r1, r3
 8002212:	461a      	mov	r2, r3
 8002214:	4618      	mov	r0, r3
 8002216:	47a0      	blx	r4
}
 8002218:	b002      	add	sp, #8
 800221a:	bd10      	pop	{r4, pc}
 800221c:	20003a30 	.word	0x20003a30
 8002220:	20000680 	.word	0x20000680
 8002224:	20000690 	.word	0x20000690
 8002228:	20000148 	.word	0x20000148

0800222c <console_printf>:
 *                                  unlimited.  This return value is analogous
 *                                  to that of snprintf.
 */
int
console_printf(const char *fmt, ...)
{
 800222c:	b40f      	push	{r0, r1, r2, r3}
 800222e:	b513      	push	{r0, r1, r4, lr}
    va_list args;
    int num_chars;

    num_chars = 0;

    if (console_get_ticks()) {
 8002230:	f000 f81c 	bl	800226c <console_get_ticks>
 8002234:	b140      	cbz	r0, 8002248 <console_printf+0x1c>
        /* Prefix each line with a timestamp. */
        if (!console_is_midline) {
 8002236:	4b0b      	ldr	r3, [pc, #44]	; (8002264 <console_printf+0x38>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	b98b      	cbnz	r3, 8002260 <console_printf+0x34>
            num_chars += printf("%06lu ", (unsigned long)os_time_get());
 800223c:	f002 fe00 	bl	8004e40 <os_time_get>
 8002240:	4601      	mov	r1, r0
 8002242:	4809      	ldr	r0, [pc, #36]	; (8002268 <console_printf+0x3c>)
 8002244:	f003 fb04 	bl	8005850 <printf>
    num_chars = 0;
 8002248:	4604      	mov	r4, r0
        }
    }

    va_start(args, fmt);
 800224a:	a905      	add	r1, sp, #20
    num_chars += vprintf(fmt, args);
 800224c:	9804      	ldr	r0, [sp, #16]
    va_start(args, fmt);
 800224e:	9101      	str	r1, [sp, #4]
    num_chars += vprintf(fmt, args);
 8002250:	f003 fb2e 	bl	80058b0 <vprintf>
    va_end(args);

    return num_chars;
}
 8002254:	4420      	add	r0, r4
 8002256:	b002      	add	sp, #8
 8002258:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800225c:	b004      	add	sp, #16
 800225e:	4770      	bx	lr
    num_chars = 0;
 8002260:	2400      	movs	r4, #0
 8002262:	e7f2      	b.n	800224a <console_printf+0x1e>
 8002264:	200039e8 	.word	0x200039e8
 8002268:	0800db52 	.word	0x0800db52

0800226c <console_get_ticks>:

/* return value of CONSOLE_TICKS */
char console_get_ticks(void)
{
    return do_ticks;
}
 800226c:	4b01      	ldr	r3, [pc, #4]	; (8002274 <console_get_ticks+0x8>)
 800226e:	7818      	ldrb	r0, [r3, #0]
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	2000069c 	.word	0x2000069c

08002278 <get_hardware_id.part.1>:
    bool status = sensor_network_do_post(i);
    assert(status);
    return status;
}

bool sensor_network_do_post(uint8_t iface_type) {
 8002278:	b508      	push	{r3, lr}
    //  Post the CoAP Server or Collector message to the CoAP Background Task for transmission.  After posting the
    //  message to the background task, we release a semaphore that unblocks other requests
    //  to compose and post CoAP messages.
    assert(iface_type >= 0 && iface_type < MAX_INTERFACE_TYPES);
 800227a:	2300      	movs	r3, #0
 800227c:	461a      	mov	r2, r3
 800227e:	4619      	mov	r1, r3
 8002280:	4618      	mov	r0, r3
 8002282:	f001 fc17 	bl	8003ab4 <__assert_func>
	...

08002288 <sensor_network_register_transport>:
    assert(iface_type >= 0 && iface_type < MAX_INTERFACE_TYPES);
 8002288:	2801      	cmp	r0, #1
int sensor_network_register_transport(uint8_t iface_type) {
 800228a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    assert(iface_type >= 0 && iface_type < MAX_INTERFACE_TYPES);
 800228c:	d905      	bls.n	800229a <sensor_network_register_transport+0x12>
 800228e:	2300      	movs	r3, #0
 8002290:	461a      	mov	r2, r3
 8002292:	4619      	mov	r1, r3
 8002294:	4618      	mov	r0, r3
 8002296:	f001 fc0d 	bl	8003ab4 <__assert_func>
    if (iface->transport_registered) { return 0; }  //  Quit if transport already registered and endpoint has been created.
 800229a:	2414      	movs	r4, #20
 800229c:	4b12      	ldr	r3, [pc, #72]	; (80022e8 <sensor_network_register_transport+0x60>)
 800229e:	fb04 3400 	mla	r4, r4, r0, r3
 80022a2:	7c23      	ldrb	r3, [r4, #16]
 80022a4:	b9eb      	cbnz	r3, 80022e2 <sensor_network_register_transport+0x5a>
    void *endpoint = &sensor_network_endpoints[iface_type];
 80022a6:	4e11      	ldr	r6, [pc, #68]	; (80022ec <sensor_network_register_transport+0x64>)
    assert(iface->network_device);  assert(iface->register_transport_func);
 80022a8:	6865      	ldr	r5, [r4, #4]
    void *endpoint = &sensor_network_endpoints[iface_type];
 80022aa:	eb06 1600 	add.w	r6, r6, r0, lsl #4
    assert(iface->network_device);  assert(iface->register_transport_func);
 80022ae:	2d00      	cmp	r5, #0
 80022b0:	d0ed      	beq.n	800228e <sensor_network_register_transport+0x6>
 80022b2:	68e3      	ldr	r3, [r4, #12]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d0ea      	beq.n	800228e <sensor_network_register_transport+0x6>
    console_printf("%s%s %s\n", _net, sensor_network_shortname[iface_type], network_device);
 80022b8:	4a0d      	ldr	r2, [pc, #52]	; (80022f0 <sensor_network_register_transport+0x68>)
 80022ba:	462b      	mov	r3, r5
 80022bc:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 80022c0:	490c      	ldr	r1, [pc, #48]	; (80022f4 <sensor_network_register_transport+0x6c>)
 80022c2:	480d      	ldr	r0, [pc, #52]	; (80022f8 <sensor_network_register_transport+0x70>)
 80022c4:	f7ff ffb2 	bl	800222c <console_printf>
    int rc = iface->register_transport_func(network_device, endpoint, COAP_HOST, MYNEWT_VAL(COAP_PORT), MAX_ENDPOINT_SIZE);
 80022c8:	2310      	movs	r3, #16
 80022ca:	9300      	str	r3, [sp, #0]
 80022cc:	68e7      	ldr	r7, [r4, #12]
 80022ce:	f241 6333 	movw	r3, #5683	; 0x1633
 80022d2:	4a0a      	ldr	r2, [pc, #40]	; (80022fc <sensor_network_register_transport+0x74>)
 80022d4:	4631      	mov	r1, r6
 80022d6:	4628      	mov	r0, r5
 80022d8:	47b8      	blx	r7
    assert(rc == 0);
 80022da:	2800      	cmp	r0, #0
 80022dc:	d1d7      	bne.n	800228e <sensor_network_register_transport+0x6>
    iface->transport_registered = 1;
 80022de:	2301      	movs	r3, #1
 80022e0:	7423      	strb	r3, [r4, #16]
}
 80022e2:	2000      	movs	r0, #0
 80022e4:	b003      	add	sp, #12
 80022e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022e8:	20000700 	.word	0x20000700
 80022ec:	200006e0 	.word	0x200006e0
 80022f0:	0800dc64 	.word	0x0800dc64
 80022f4:	0800dc55 	.word	0x0800dc55
 80022f8:	0800dc5a 	.word	0x0800dc5a
 80022fc:	0800db59 	.word	0x0800db59

08002300 <register_server_transport>:
int register_server_transport(void) {
 8002300:	b508      	push	{r3, lr}
    int rc = sensor_network_register_transport(i);
 8002302:	2000      	movs	r0, #0
 8002304:	f7ff ffc0 	bl	8002288 <sensor_network_register_transport>
    assert(rc == 0);
 8002308:	b128      	cbz	r0, 8002316 <register_server_transport+0x16>
 800230a:	2300      	movs	r3, #0
 800230c:	461a      	mov	r2, r3
 800230e:	4619      	mov	r1, r3
 8002310:	4618      	mov	r0, r3
 8002312:	f001 fbcf 	bl	8003ab4 <__assert_func>
}
 8002316:	bd08      	pop	{r3, pc}

08002318 <register_collector_transport>:
int register_collector_transport(void) {
 8002318:	b508      	push	{r3, lr}
    int rc = sensor_network_register_transport(i);
 800231a:	2001      	movs	r0, #1
 800231c:	f7ff ffb4 	bl	8002288 <sensor_network_register_transport>
    assert(rc == 0);
 8002320:	b128      	cbz	r0, 800232e <register_collector_transport+0x16>
 8002322:	2300      	movs	r3, #0
 8002324:	461a      	mov	r2, r3
 8002326:	4619      	mov	r1, r3
 8002328:	4618      	mov	r0, r3
 800232a:	f001 fbc3 	bl	8003ab4 <__assert_func>
}
 800232e:	bd08      	pop	{r3, pc}

08002330 <sensor_network_init_post>:
bool sensor_network_init_post(uint8_t iface_type, const char *uri) {
 8002330:	b570      	push	{r4, r5, r6, lr}
    if (uri == NULL) { uri = COAP_URI; }
 8002332:	4d15      	ldr	r5, [pc, #84]	; (8002388 <sensor_network_init_post+0x58>)
 8002334:	2900      	cmp	r1, #0
 8002336:	bf18      	it	ne
 8002338:	460d      	movne	r5, r1
    assert(uri);  assert(iface_type >= 0 && iface_type < MAX_INTERFACE_TYPES);
 800233a:	2801      	cmp	r0, #1
 800233c:	d905      	bls.n	800234a <sensor_network_init_post+0x1a>
 800233e:	2300      	movs	r3, #0
 8002340:	461a      	mov	r2, r3
 8002342:	4619      	mov	r1, r3
 8002344:	4618      	mov	r0, r3
 8002346:	f001 fbb5 	bl	8003ab4 <__assert_func>
    assert(iface->network_device);  assert(iface->register_transport_func);
 800234a:	2314      	movs	r3, #20
 800234c:	490f      	ldr	r1, [pc, #60]	; (800238c <sensor_network_init_post+0x5c>)
 800234e:	fb03 1300 	mla	r3, r3, r0, r1
 8002352:	6859      	ldr	r1, [r3, #4]
 8002354:	2900      	cmp	r1, #0
 8002356:	d0f2      	beq.n	800233e <sensor_network_init_post+0xe>
 8002358:	68d9      	ldr	r1, [r3, #12]
 800235a:	2900      	cmp	r1, #0
 800235c:	d0ef      	beq.n	800233e <sensor_network_init_post+0xe>
    void *endpoint = &sensor_network_endpoints[iface_type];
 800235e:	4c0c      	ldr	r4, [pc, #48]	; (8002390 <sensor_network_init_post+0x60>)
    int encoding = sensor_network_encoding[iface_type];
 8002360:	490c      	ldr	r1, [pc, #48]	; (8002394 <sensor_network_init_post+0x64>)
    if (!iface->transport_registered) {
 8002362:	7c1b      	ldrb	r3, [r3, #16]
    void *endpoint = &sensor_network_endpoints[iface_type];
 8002364:	eb04 1400 	add.w	r4, r4, r0, lsl #4
    int encoding = sensor_network_encoding[iface_type];
 8002368:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
    if (!iface->transport_registered) {
 800236c:	b91b      	cbnz	r3, 8002376 <sensor_network_init_post+0x46>
        int rc = sensor_network_register_transport(iface_type);
 800236e:	f7ff ff8b 	bl	8002288 <sensor_network_register_transport>
        assert(rc == 0);
 8002372:	2800      	cmp	r0, #0
 8002374:	d1e3      	bne.n	800233e <sensor_network_init_post+0xe>
    bool status = init_sensor_post(endpoint, uri, encoding);
 8002376:	4632      	mov	r2, r6
 8002378:	4629      	mov	r1, r5
 800237a:	4620      	mov	r0, r4
 800237c:	f003 fbf6 	bl	8005b6c <init_sensor_post>
    assert(status);
 8002380:	2800      	cmp	r0, #0
 8002382:	d0dc      	beq.n	800233e <sensor_network_init_post+0xe>
}
 8002384:	2001      	movs	r0, #1
 8002386:	bd70      	pop	{r4, r5, r6, pc}
 8002388:	0800db6b 	.word	0x0800db6b
 800238c:	20000700 	.word	0x20000700
 8002390:	200006e0 	.word	0x200006e0
 8002394:	0800dc10 	.word	0x0800dc10

08002398 <init_server_post>:
bool init_server_post(const char *uri) {
 8002398:	b508      	push	{r3, lr}
    bool status = sensor_network_init_post(i, uri);
 800239a:	4601      	mov	r1, r0
 800239c:	2000      	movs	r0, #0
 800239e:	f7ff ffc7 	bl	8002330 <sensor_network_init_post>
    assert(status);
 80023a2:	4603      	mov	r3, r0
 80023a4:	b918      	cbnz	r0, 80023ae <init_server_post+0x16>
 80023a6:	4602      	mov	r2, r0
 80023a8:	4601      	mov	r1, r0
 80023aa:	f001 fb83 	bl	8003ab4 <__assert_func>
}
 80023ae:	2001      	movs	r0, #1
 80023b0:	bd08      	pop	{r3, pc}

080023b2 <init_collector_post>:
bool init_collector_post(void) {
 80023b2:	b508      	push	{r3, lr}
    bool status = sensor_network_init_post(i, uri);
 80023b4:	2100      	movs	r1, #0
 80023b6:	2001      	movs	r0, #1
 80023b8:	f7ff ffba 	bl	8002330 <sensor_network_init_post>
    assert(status);
 80023bc:	4603      	mov	r3, r0
 80023be:	b918      	cbnz	r0, 80023c8 <init_collector_post+0x16>
 80023c0:	4602      	mov	r2, r0
 80023c2:	4601      	mov	r1, r0
 80023c4:	f001 fb76 	bl	8003ab4 <__assert_func>
}
 80023c8:	2001      	movs	r0, #1
 80023ca:	bd08      	pop	{r3, pc}

080023cc <sensor_network_do_post>:
    assert(iface_type >= 0 && iface_type < MAX_INTERFACE_TYPES);
 80023cc:	2801      	cmp	r0, #1
bool sensor_network_do_post(uint8_t iface_type) {
 80023ce:	b508      	push	{r3, lr}
    assert(iface_type >= 0 && iface_type < MAX_INTERFACE_TYPES);
 80023d0:	d901      	bls.n	80023d6 <sensor_network_do_post+0xa>
 80023d2:	f7ff ff51 	bl	8002278 <get_hardware_id.part.1>
    bool status = do_sensor_post();
 80023d6:	f003 fc7b 	bl	8005cd0 <do_sensor_post>
    assert(status);
 80023da:	4603      	mov	r3, r0
 80023dc:	b918      	cbnz	r0, 80023e6 <sensor_network_do_post+0x1a>
 80023de:	4602      	mov	r2, r0
 80023e0:	4601      	mov	r1, r0
 80023e2:	f001 fb67 	bl	8003ab4 <__assert_func>
    return status;
}
 80023e6:	2001      	movs	r0, #1
 80023e8:	bd08      	pop	{r3, pc}

080023ea <do_server_post>:
bool do_server_post(void) {    
 80023ea:	b508      	push	{r3, lr}
    bool status = sensor_network_do_post(i);
 80023ec:	2000      	movs	r0, #0
 80023ee:	f7ff ffed 	bl	80023cc <sensor_network_do_post>
    assert(status);
 80023f2:	4603      	mov	r3, r0
 80023f4:	b918      	cbnz	r0, 80023fe <do_server_post+0x14>
 80023f6:	4602      	mov	r2, r0
 80023f8:	4601      	mov	r1, r0
 80023fa:	f001 fb5b 	bl	8003ab4 <__assert_func>
}
 80023fe:	2001      	movs	r0, #1
 8002400:	bd08      	pop	{r3, pc}

08002402 <do_collector_post>:
bool do_collector_post(void) {    
 8002402:	b508      	push	{r3, lr}
    bool status = sensor_network_do_post(i);
 8002404:	2001      	movs	r0, #1
 8002406:	f7ff ffe1 	bl	80023cc <sensor_network_do_post>
    assert(status);
 800240a:	4603      	mov	r3, r0
 800240c:	b918      	cbnz	r0, 8002416 <do_collector_post+0x14>
 800240e:	4602      	mov	r2, r0
 8002410:	4601      	mov	r1, r0
 8002412:	f001 fb4f 	bl	8003ab4 <__assert_func>
}
 8002416:	2001      	movs	r0, #1
 8002418:	bd08      	pop	{r3, pc}
	...

0800241c <is_sensor_node>:
}

bool is_sensor_node(void) {
    //  Return true if this is a Sensor Node.
    //  This is a Sensor Node if the Hardware ID matches one of the Sensor Node Hardware IDs.
    if (sensor_node_address) { return true; }  //  sensor_node_address is set in sensor_network_init().
 800241c:	4b03      	ldr	r3, [pc, #12]	; (800242c <is_sensor_node+0x10>)
 800241e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002422:	4313      	orrs	r3, r2
    return false;
}
 8002424:	bf14      	ite	ne
 8002426:	2001      	movne	r0, #1
 8002428:	2000      	moveq	r0, #0
 800242a:	4770      	bx	lr
 800242c:	20000728 	.word	0x20000728

08002430 <should_send_to_collector>:
    //  Return true if this is a Standalone Node, i.e. not a Collector or Sensor Node.
    if (!is_collector_node() && !is_sensor_node()) { return true; }
    return false;
}

bool should_send_to_collector(struct sensor_value *val, const char *device_name) {
 8002430:	b508      	push	{r3, lr}
    //  Return true if this node should send to a Collector Node instead of CoAP Server.  Which means this must be a Sensor Node.
    assert(val);
 8002432:	4603      	mov	r3, r0
 8002434:	b918      	cbnz	r0, 800243e <should_send_to_collector+0xe>
 8002436:	4602      	mov	r2, r0
 8002438:	4601      	mov	r1, r0
 800243a:	f001 fb3b 	bl	8003ab4 <__assert_func>
    if (is_sensor_node()) { return true; }
    return false;
}
 800243e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    if (is_sensor_node()) { return true; }
 8002442:	f7ff bfeb 	b.w	800241c <is_sensor_node>
	...

08002448 <get_hardware_id>:

/////////////////////////////////////////////////////////
//  Sensor Network Addresses

const uint8_t *get_hardware_id(void) {
 8002448:	b538      	push	{r3, r4, r5, lr}
    //  Return the Hardware ID, which is unique across all microcontrollers.
    if (hw_id_len == 0) {
 800244a:	4c12      	ldr	r4, [pc, #72]	; (8002494 <get_hardware_id+0x4c>)
 800244c:	6825      	ldr	r5, [r4, #0]
 800244e:	b9f5      	cbnz	r5, 800248e <get_hardware_id+0x46>
        hw_id_len = hal_bsp_hw_id_len();     //  Fetch the length, i.e. 12
 8002450:	f001 f88b 	bl	800356a <hal_bsp_hw_id_len>
        assert((unsigned) hw_id_len >= sizeof(hw_id));  //  Hardware ID too short.
 8002454:	280b      	cmp	r0, #11
        hw_id_len = hal_bsp_hw_id_len();     //  Fetch the length, i.e. 12
 8002456:	6020      	str	r0, [r4, #0]
        assert((unsigned) hw_id_len >= sizeof(hw_id));  //  Hardware ID too short.
 8002458:	d801      	bhi.n	800245e <get_hardware_id+0x16>
 800245a:	f7ff ff0d 	bl	8002278 <get_hardware_id.part.1>
        hw_id_len = hal_bsp_hw_id(hw_id, sizeof(hw_id));  assert(hw_id_len > 0);  //  Get the hardware ID.
 800245e:	210c      	movs	r1, #12
 8002460:	480d      	ldr	r0, [pc, #52]	; (8002498 <get_hardware_id+0x50>)
 8002462:	f001 f885 	bl	8003570 <hal_bsp_hw_id>
 8002466:	2800      	cmp	r0, #0
 8002468:	6020      	str	r0, [r4, #0]
 800246a:	dc05      	bgt.n	8002478 <get_hardware_id+0x30>
 800246c:	462b      	mov	r3, r5
 800246e:	462a      	mov	r2, r5
 8002470:	4629      	mov	r1, r5
 8002472:	4628      	mov	r0, r5
 8002474:	f001 fb1e 	bl	8003ab4 <__assert_func>
        console_printf("%shwid ", _net);  console_dump(hw_id, hw_id_len);  console_printf("\n");
 8002478:	4908      	ldr	r1, [pc, #32]	; (800249c <get_hardware_id+0x54>)
 800247a:	4809      	ldr	r0, [pc, #36]	; (80024a0 <get_hardware_id+0x58>)
 800247c:	f7ff fed6 	bl	800222c <console_printf>
 8002480:	4805      	ldr	r0, [pc, #20]	; (8002498 <get_hardware_id+0x50>)
 8002482:	6821      	ldr	r1, [r4, #0]
 8002484:	f7ff fe6a 	bl	800215c <console_dump>
 8002488:	4806      	ldr	r0, [pc, #24]	; (80024a4 <get_hardware_id+0x5c>)
 800248a:	f7ff fecf 	bl	800222c <console_printf>
    }
    return hw_id;
}
 800248e:	4802      	ldr	r0, [pc, #8]	; (8002498 <get_hardware_id+0x50>)
 8002490:	bd38      	pop	{r3, r4, r5, pc}
 8002492:	bf00      	nop
 8002494:	200006dc 	.word	0x200006dc
 8002498:	200006ce 	.word	0x200006ce
 800249c:	0800dc55 	.word	0x0800dc55
 80024a0:	0800dc05 	.word	0x0800dc05
 80024a4:	0800e41f 	.word	0x0800e41f

080024a8 <is_collector_node>:
bool is_collector_node(void) {
 80024a8:	b508      	push	{r3, lr}
    const uint8_t *hardware_id = get_hardware_id();
 80024aa:	f7ff ffcd 	bl	8002448 <get_hardware_id>
    if (memcmp(hardware_id, COLLECTOR_NODE_HW_ID, HARDWARE_ID_LENGTH) == 0) { return true; }
 80024ae:	220c      	movs	r2, #12
 80024b0:	4903      	ldr	r1, [pc, #12]	; (80024c0 <is_collector_node+0x18>)
 80024b2:	f002 ff37 	bl	8005324 <memcmp>
}
 80024b6:	fab0 f080 	clz	r0, r0
 80024ba:	0940      	lsrs	r0, r0, #5
 80024bc:	bd08      	pop	{r3, pc}
 80024be:	bf00      	nop
 80024c0:	0800dba1 	.word	0x0800dba1

080024c4 <is_standalone_node>:
bool is_standalone_node(void) {
 80024c4:	b508      	push	{r3, lr}
    if (!is_collector_node() && !is_sensor_node()) { return true; }
 80024c6:	f7ff ffef 	bl	80024a8 <is_collector_node>
 80024ca:	b928      	cbnz	r0, 80024d8 <is_standalone_node+0x14>
 80024cc:	f7ff ffa6 	bl	800241c <is_sensor_node>
 80024d0:	f080 0001 	eor.w	r0, r0, #1
 80024d4:	b2c0      	uxtb	r0, r0
}
 80024d6:	bd08      	pop	{r3, pc}
    return false;
 80024d8:	2000      	movs	r0, #0
 80024da:	e7fc      	b.n	80024d6 <is_standalone_node+0x12>

080024dc <get_device_id>:

const char *get_device_id(void) {
 80024dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    //  Get the randomly-generated Device ID that will be sent in every CoAP Server message.  Changes upon restart.
    if (device_id_text[0]) { return device_id_text; }
 80024de:	4d12      	ldr	r5, [pc, #72]	; (8002528 <get_device_id+0x4c>)
 80024e0:	782e      	ldrb	r6, [r5, #0]
 80024e2:	b9c6      	cbnz	r6, 8002516 <get_device_id+0x3a>
#if MYNEWT_VAL(ESP8266)  //  If ESP8266 WiFi is enabled...
    //  Create a random device ID based on HMAC pseudorandom number generator e.g. 0xab 0xcd 0xef ...
    int rc = hmac_prng_generate(device_id, DEVICE_ID_LENGTH);  assert(rc == 0);
 80024e4:	2110      	movs	r1, #16
 80024e6:	4811      	ldr	r0, [pc, #68]	; (800252c <get_device_id+0x50>)
 80024e8:	f003 fa76 	bl	80059d8 <hmac_prng_generate>
 80024ec:	4604      	mov	r4, r0
 80024ee:	b9a0      	cbnz	r0, 800251a <get_device_id+0x3e>
    char *s = device_id_text; int i;
    //  Convert to text e.g. abcdef...
    for (i = 0; i < DEVICE_ID_LENGTH; i++) {
        sprintf(s, "%02x", device_id[i]);
 80024f0:	4f0e      	ldr	r7, [pc, #56]	; (800252c <get_device_id+0x50>)
 80024f2:	4e0f      	ldr	r6, [pc, #60]	; (8002530 <get_device_id+0x54>)
 80024f4:	5d3a      	ldrb	r2, [r7, r4]
 80024f6:	eb05 0044 	add.w	r0, r5, r4, lsl #1
 80024fa:	4631      	mov	r1, r6
    for (i = 0; i < DEVICE_ID_LENGTH; i++) {
 80024fc:	3401      	adds	r4, #1
        sprintf(s, "%02x", device_id[i]);
 80024fe:	f002 ff4a 	bl	8005396 <sprintf>
    for (i = 0; i < DEVICE_ID_LENGTH; i++) {
 8002502:	2c10      	cmp	r4, #16
 8002504:	d1f6      	bne.n	80024f4 <get_device_id+0x18>
        s += 2;
    }
    device_id_text[DEVICE_ID_TEXT_LENGTH - 1] = 0;
 8002506:	2300      	movs	r3, #0
    console_printf("%srandom device id %s\n", _net, device_id_text);
 8002508:	4a07      	ldr	r2, [pc, #28]	; (8002528 <get_device_id+0x4c>)
 800250a:	490a      	ldr	r1, [pc, #40]	; (8002534 <get_device_id+0x58>)
 800250c:	480a      	ldr	r0, [pc, #40]	; (8002538 <get_device_id+0x5c>)
    device_id_text[DEVICE_ID_TEXT_LENGTH - 1] = 0;
 800250e:	f885 3020 	strb.w	r3, [r5, #32]
    console_printf("%srandom device id %s\n", _net, device_id_text);
 8002512:	f7ff fe8b 	bl	800222c <console_printf>
#else  //  If ESP8266 WiFi is NOT enabled...
    device_id_text[0] = 0;  //  Don't need device ID since we are transmitting locally.
    device_id[0] = 0;
#endif  //  MYNEWT_VAL(ESP8266)
    return device_id_text;
}
 8002516:	4804      	ldr	r0, [pc, #16]	; (8002528 <get_device_id+0x4c>)
 8002518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    int rc = hmac_prng_generate(device_id, DEVICE_ID_LENGTH);  assert(rc == 0);
 800251a:	4633      	mov	r3, r6
 800251c:	4632      	mov	r2, r6
 800251e:	4631      	mov	r1, r6
 8002520:	4630      	mov	r0, r6
 8002522:	f001 fac7 	bl	8003ab4 <__assert_func>
 8002526:	bf00      	nop
 8002528:	200006ad 	.word	0x200006ad
 800252c:	2000069d 	.word	0x2000069d
 8002530:	0800dbe9 	.word	0x0800dbe9
 8002534:	0800dc55 	.word	0x0800dc55
 8002538:	0800dbee 	.word	0x0800dbee

0800253c <get_collector_node_address>:

//  Return the Collector Node address for this Sensor Network.
unsigned long long get_collector_node_address(void) { return COLLECTOR_NODE_ADDRESS; }
 800253c:	f04f 3078 	mov.w	r0, #2021161080	; 0x78787878
 8002540:	2178      	movs	r1, #120	; 0x78
 8002542:	4770      	bx	lr

08002544 <get_sensor_node_address>:

//  Return the Sensor Node address for this node, if this is a Sensor Node.
unsigned long long get_sensor_node_address(void) { return sensor_node_address; }
 8002544:	4b01      	ldr	r3, [pc, #4]	; (800254c <get_sensor_node_address+0x8>)
 8002546:	e9d3 0100 	ldrd	r0, r1, [r3]
 800254a:	4770      	bx	lr
 800254c:	20000728 	.word	0x20000728

08002550 <get_sensor_node_addresses>:

//  Return the list of Sensor Node addresses for this Sensor Network.
const unsigned long long *get_sensor_node_addresses(void) { return sensor_node_addresses; }
 8002550:	4800      	ldr	r0, [pc, #0]	; (8002554 <get_sensor_node_addresses+0x4>)
 8002552:	4770      	bx	lr
 8002554:	0800dc70 	.word	0x0800dc70

08002558 <get_sensor_node_names>:

//  Return the list of Sensor Node names for this Sensor Network.
const char **get_sensor_node_names(void) { return sensor_node_names; }
 8002558:	4800      	ldr	r0, [pc, #0]	; (800255c <get_sensor_node_names+0x4>)
 800255a:	4770      	bx	lr
 800255c:	20000134 	.word	0x20000134

08002560 <sensor_network_init>:

/////////////////////////////////////////////////////////
//  Sensor Network Configuration

void sensor_network_init(void) {
 8002560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    //  Allocate Sensor Node address for this node.

    //  Set the Sensor Node names for remote_sensor_create().
    for (int i = 0; i < SENSOR_NETWORK_SIZE; i++) {
 8002562:	2400      	movs	r4, #0
 8002564:	4d22      	ldr	r5, [pc, #136]	; (80025f0 <sensor_network_init+0x90>)
        int len = sprintf((char *) sensor_node_names[i], "%010llx", sensor_node_addresses[i]);
 8002566:	4e23      	ldr	r6, [pc, #140]	; (80025f4 <sensor_network_init+0x94>)
 8002568:	4f23      	ldr	r7, [pc, #140]	; (80025f8 <sensor_network_init+0x98>)
 800256a:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 800256e:	4639      	mov	r1, r7
 8002570:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8002574:	f002 ff0f 	bl	8005396 <sprintf>
        assert(len + 1 <= NODE_NAME_LENGTH);
 8002578:	280a      	cmp	r0, #10
 800257a:	d005      	beq.n	8002588 <sensor_network_init+0x28>
 800257c:	2300      	movs	r3, #0
 800257e:	461a      	mov	r2, r3
 8002580:	4619      	mov	r1, r3
 8002582:	4618      	mov	r0, r3
 8002584:	f001 fa96 	bl	8003ab4 <__assert_func>
    for (int i = 0; i < SENSOR_NETWORK_SIZE; i++) {
 8002588:	3401      	adds	r4, #1
 800258a:	2c05      	cmp	r4, #5
 800258c:	d1ed      	bne.n	800256a <sensor_network_init+0xa>
    }
    //  Get Sensor Node address if applicable.
    const uint8_t *hardware_id = get_hardware_id();
 800258e:	f7ff ff5b 	bl	8002448 <get_hardware_id>
    int i;
    for (i = 0; i < SENSOR_NETWORK_SIZE; i++) {
 8002592:	2400      	movs	r4, #0
    const uint8_t *hardware_id = get_hardware_id();
 8002594:	4605      	mov	r5, r0
        if (memcmp(hardware_id, SENSOR_NODE_HW_IDS[i], HARDWARE_ID_LENGTH) == 0) {
 8002596:	260c      	movs	r6, #12
 8002598:	4f18      	ldr	r7, [pc, #96]	; (80025fc <sensor_network_init+0x9c>)
 800259a:	220c      	movs	r2, #12
 800259c:	fb06 7104 	mla	r1, r6, r4, r7
 80025a0:	4628      	mov	r0, r5
 80025a2:	f002 febf 	bl	8005324 <memcmp>
 80025a6:	1c63      	adds	r3, r4, #1
 80025a8:	b9b0      	cbnz	r0, 80025d8 <sensor_network_init+0x78>
            sensor_node_address = sensor_node_addresses[i];
 80025aa:	4a15      	ldr	r2, [pc, #84]	; (8002600 <sensor_network_init+0xa0>)
 80025ac:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
 80025b0:	4a14      	ldr	r2, [pc, #80]	; (8002604 <sensor_network_init+0xa4>)
 80025b2:	e9d4 0100 	ldrd	r0, r1, [r4]
 80025b6:	e9c2 0100 	strd	r0, r1, [r2]
            console_printf("%ssensor%s#%d\n", _net, _node, i + 1);
 80025ba:	4a13      	ldr	r2, [pc, #76]	; (8002608 <sensor_network_init+0xa8>)
 80025bc:	4913      	ldr	r1, [pc, #76]	; (800260c <sensor_network_init+0xac>)
 80025be:	4814      	ldr	r0, [pc, #80]	; (8002610 <sensor_network_init+0xb0>)
 80025c0:	f7ff fe34 	bl	800222c <console_printf>
            break;
        }
    }
    //  Display the type of node.
    if (is_collector_node()) { console_printf("%scollector%s\n", _net, _node); }
 80025c4:	f7ff ff70 	bl	80024a8 <is_collector_node>
 80025c8:	b150      	cbz	r0, 80025e0 <sensor_network_init+0x80>
 80025ca:	4a0f      	ldr	r2, [pc, #60]	; (8002608 <sensor_network_init+0xa8>)
 80025cc:	490f      	ldr	r1, [pc, #60]	; (800260c <sensor_network_init+0xac>)
 80025ce:	4811      	ldr	r0, [pc, #68]	; (8002614 <sensor_network_init+0xb4>)
    else if (is_standalone_node()) { console_printf("%sstandalone%s\n", _net, _node); }
}
 80025d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    else if (is_standalone_node()) { console_printf("%sstandalone%s\n", _net, _node); }
 80025d4:	f7ff be2a 	b.w	800222c <console_printf>
    for (i = 0; i < SENSOR_NETWORK_SIZE; i++) {
 80025d8:	2b05      	cmp	r3, #5
 80025da:	461c      	mov	r4, r3
 80025dc:	d1dd      	bne.n	800259a <sensor_network_init+0x3a>
 80025de:	e7f1      	b.n	80025c4 <sensor_network_init+0x64>
    else if (is_standalone_node()) { console_printf("%sstandalone%s\n", _net, _node); }
 80025e0:	f7ff ff70 	bl	80024c4 <is_standalone_node>
 80025e4:	b118      	cbz	r0, 80025ee <sensor_network_init+0x8e>
 80025e6:	4a08      	ldr	r2, [pc, #32]	; (8002608 <sensor_network_init+0xa8>)
 80025e8:	4908      	ldr	r1, [pc, #32]	; (800260c <sensor_network_init+0xac>)
 80025ea:	480b      	ldr	r0, [pc, #44]	; (8002618 <sensor_network_init+0xb8>)
 80025ec:	e7f0      	b.n	80025d0 <sensor_network_init+0x70>
}
 80025ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80025f0:	0800dc68 	.word	0x0800dc68
 80025f4:	20000134 	.word	0x20000134
 80025f8:	0800dc18 	.word	0x0800dc18
 80025fc:	0800dbad 	.word	0x0800dbad
 8002600:	0800dc70 	.word	0x0800dc70
 8002604:	20000728 	.word	0x20000728
 8002608:	0800dc20 	.word	0x0800dc20
 800260c:	0800dc55 	.word	0x0800dc55
 8002610:	0800dc27 	.word	0x0800dc27
 8002614:	0800dc36 	.word	0x0800dc36
 8002618:	0800dc45 	.word	0x0800dc45

0800261c <sensor_network_register_interface>:

int sensor_network_register_interface(const struct sensor_network_interface *iface) {
 800261c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    //  Register the Network Interface (e.g. ESP8266, nRF24L01) for the Sensor Network.
    assert(iface);
 800261e:	b928      	cbnz	r0, 800262c <sensor_network_register_interface+0x10>
 8002620:	2300      	movs	r3, #0
 8002622:	461a      	mov	r2, r3
 8002624:	4619      	mov	r1, r3
 8002626:	4618      	mov	r0, r3
 8002628:	f001 fa44 	bl	8003ab4 <__assert_func>
    uint8_t i = iface->iface_type;  assert(i >= 0 && i < MAX_INTERFACE_TYPES);
 800262c:	7804      	ldrb	r4, [r0, #0]
 800262e:	2c01      	cmp	r4, #1
 8002630:	d8f6      	bhi.n	8002620 <sensor_network_register_interface+0x4>
    assert(iface->network_device);  assert(iface->server_endpoint_size);  assert(iface->register_transport_func);
 8002632:	6843      	ldr	r3, [r0, #4]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d0f3      	beq.n	8002620 <sensor_network_register_interface+0x4>
 8002638:	7a03      	ldrb	r3, [r0, #8]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d0f0      	beq.n	8002620 <sensor_network_register_interface+0x4>
 800263e:	68c2      	ldr	r2, [r0, #12]
 8002640:	2a00      	cmp	r2, #0
 8002642:	d0ed      	beq.n	8002620 <sensor_network_register_interface+0x4>
    assert(iface->server_endpoint_size <= MAX_ENDPOINT_SIZE);     //  Need to increase MAX_ENDPOINT_SIZE.
 8002644:	2b10      	cmp	r3, #16
 8002646:	d8eb      	bhi.n	8002620 <sensor_network_register_interface+0x4>
    assert(sensor_network_interfaces[i].network_device == NULL);  //  Interface already registered.
 8002648:	2214      	movs	r2, #20
 800264a:	4d11      	ldr	r5, [pc, #68]	; (8002690 <sensor_network_register_interface+0x74>)
 800264c:	fb02 5204 	mla	r2, r2, r4, r5
 8002650:	6851      	ldr	r1, [r2, #4]
 8002652:	2900      	cmp	r1, #0
 8002654:	d1e4      	bne.n	8002620 <sensor_network_register_interface+0x4>
    memcpy(&sensor_network_interfaces[i], iface, sizeof(struct sensor_network_interface));  //  Copy the interface.
 8002656:	4603      	mov	r3, r0
 8002658:	f100 0710 	add.w	r7, r0, #16
 800265c:	4616      	mov	r6, r2
 800265e:	6818      	ldr	r0, [r3, #0]
 8002660:	6859      	ldr	r1, [r3, #4]
 8002662:	3308      	adds	r3, #8
 8002664:	c603      	stmia	r6!, {r0, r1}
 8002666:	42bb      	cmp	r3, r7
 8002668:	4632      	mov	r2, r6
 800266a:	d1f7      	bne.n	800265c <sensor_network_register_interface+0x40>
 800266c:	6818      	ldr	r0, [r3, #0]
    sensor_network_interfaces[i].transport_registered = 0;        //  We defer the registration of the transport till first use.
 800266e:	2314      	movs	r3, #20
 8002670:	fb03 5304 	mla	r3, r3, r4, r5
 8002674:	2500      	movs	r5, #0
    console_printf("%s%s %s\n", _net, sensor_network_shortname[i], sensor_network_interfaces[i].network_device);
 8002676:	4a07      	ldr	r2, [pc, #28]	; (8002694 <sensor_network_register_interface+0x78>)
    memcpy(&sensor_network_interfaces[i], iface, sizeof(struct sensor_network_interface));  //  Copy the interface.
 8002678:	6030      	str	r0, [r6, #0]
    console_printf("%s%s %s\n", _net, sensor_network_shortname[i], sensor_network_interfaces[i].network_device);
 800267a:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
    sensor_network_interfaces[i].transport_registered = 0;        //  We defer the registration of the transport till first use.
 800267e:	741d      	strb	r5, [r3, #16]
    console_printf("%s%s %s\n", _net, sensor_network_shortname[i], sensor_network_interfaces[i].network_device);
 8002680:	4905      	ldr	r1, [pc, #20]	; (8002698 <sensor_network_register_interface+0x7c>)
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	4805      	ldr	r0, [pc, #20]	; (800269c <sensor_network_register_interface+0x80>)
 8002686:	f7ff fdd1 	bl	800222c <console_printf>
    return 0;
}
 800268a:	4628      	mov	r0, r5
 800268c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800268e:	bf00      	nop
 8002690:	20000700 	.word	0x20000700
 8002694:	0800dc64 	.word	0x0800dc64
 8002698:	0800dc55 	.word	0x0800dc55
 800269c:	0800dc5a 	.word	0x0800dc5a

080026a0 <_alloc_rep>:
}

#ifdef OC_CLIENT
static oc_rep_t *
_alloc_rep(void)
{
 80026a0:	b508      	push	{r3, lr}
    oc_rep_t *rep = os_memblock_get(&oc_rep_objects);
 80026a2:	4804      	ldr	r0, [pc, #16]	; (80026b4 <_alloc_rep+0x14>)
 80026a4:	f002 f837 	bl	8004716 <os_memblock_get>

    memset(rep, 0, sizeof(*rep));
 80026a8:	2218      	movs	r2, #24
 80026aa:	2100      	movs	r1, #0
 80026ac:	f002 fe6b 	bl	8005386 <memset>
#ifdef DEBUG
    oc_assert(rep != NULL);
#endif
    return rep;
}
 80026b0:	bd08      	pop	{r3, pc}
 80026b2:	bf00      	nop
 80026b4:	2000076c 	.word	0x2000076c

080026b8 <cbor_value_copy_byte_string.part.13>:
{ return value->type == CborUndefinedType; }

/* Booleans */
CBOR_INLINE_API bool cbor_value_is_boolean(const CborValue *value)
{ return value->type == CborBooleanType; }
CBOR_INLINE_API CborError cbor_value_get_boolean(const CborValue *value, bool *result)
 80026b8:	b508      	push	{r3, lr}
{
    assert(cbor_value_is_boolean(value));
 80026ba:	2300      	movs	r3, #0
 80026bc:	461a      	mov	r2, r3
 80026be:	4619      	mov	r1, r3
 80026c0:	4618      	mov	r0, r3
 80026c2:	f001 f9f7 	bl	8003ab4 <__assert_func>

080026c6 <cbor_value_get_double>:
}

CBOR_INLINE_API bool cbor_value_is_double(const CborValue *value)
{ return value->type == CborDoubleType; }
CBOR_INLINE_API CborError cbor_value_get_double(const CborValue *value, double *result)
{
 80026c6:	b513      	push	{r0, r1, r4, lr}
    assert(cbor_value_is_double(value));
 80026c8:	7b82      	ldrb	r2, [r0, #14]
{
 80026ca:	460c      	mov	r4, r1
    assert(cbor_value_is_double(value));
 80026cc:	2afb      	cmp	r2, #251	; 0xfb
 80026ce:	d001      	beq.n	80026d4 <cbor_value_get_double+0xe>
 80026d0:	f7ff fff2 	bl	80026b8 <cbor_value_copy_byte_string.part.13>
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge);
 80026d4:	7bc3      	ldrb	r3, [r0, #15]
 80026d6:	f013 0301 	ands.w	r3, r3, #1
 80026da:	d104      	bne.n	80026e6 <cbor_value_get_double+0x20>
 80026dc:	461a      	mov	r2, r3
 80026de:	4619      	mov	r1, r3
 80026e0:	4618      	mov	r0, r3
 80026e2:	f001 f9e7 	bl	8003ab4 <__assert_func>
    uint64_t data = _cbor_value_decode_int64_internal(value);
 80026e6:	f000 fe34 	bl	8003352 <_cbor_value_decode_int64_internal>
 80026ea:	ab02      	add	r3, sp, #8
 80026ec:	e963 0102 	strd	r0, r1, [r3, #-8]!
    memcpy(result, &data, sizeof(*result));
 80026f0:	cb03      	ldmia	r3!, {r0, r1}
 80026f2:	6020      	str	r0, [r4, #0]
    return CborNoError;
}
 80026f4:	2000      	movs	r0, #0
    memcpy(result, &data, sizeof(*result));
 80026f6:	6061      	str	r1, [r4, #4]
}
 80026f8:	b002      	add	sp, #8
 80026fa:	bd10      	pop	{r4, pc}

080026fc <cbor_value_get_int64>:
{
 80026fc:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
    assert(cbor_value_is_integer(value));
 8002700:	7b83      	ldrb	r3, [r0, #14]
{
 8002702:	4604      	mov	r4, r0
 8002704:	460d      	mov	r5, r1
    assert(cbor_value_is_integer(value));
 8002706:	b10b      	cbz	r3, 800270c <cbor_value_get_int64+0x10>
 8002708:	f7ff ffd6 	bl	80026b8 <cbor_value_copy_byte_string.part.13>
                _cbor_value_decode_int64_internal(value) : value->extra;
 800270c:	7bc3      	ldrb	r3, [r0, #15]
 800270e:	07da      	lsls	r2, r3, #31
 8002710:	d511      	bpl.n	8002736 <cbor_value_get_int64+0x3a>
 8002712:	f000 fe1e 	bl	8003352 <_cbor_value_decode_int64_internal>
 8002716:	4683      	mov	fp, r0
 8002718:	468c      	mov	ip, r1
    *result = (int64_t) _cbor_value_extract_int64_helper(value);
 800271a:	e9c5 bc00 	strd	fp, ip, [r5]
    if (value->flags & CborIteratorFlag_NegativeInteger)
 800271e:	7be3      	ldrb	r3, [r4, #15]
 8002720:	079b      	lsls	r3, r3, #30
 8002722:	d505      	bpl.n	8002730 <cbor_value_get_int64+0x34>
        *result = -*result - 1;
 8002724:	ea6f 000b 	mvn.w	r0, fp
 8002728:	ea6f 010c 	mvn.w	r1, ip
 800272c:	e9c5 0100 	strd	r0, r1, [r5]
}
 8002730:	2000      	movs	r0, #0
 8002732:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
                _cbor_value_decode_int64_internal(value) : value->extra;
 8002736:	f8b0 b00c 	ldrh.w	fp, [r0, #12]
 800273a:	f04f 0c00 	mov.w	ip, #0
 800273e:	e7ec      	b.n	800271a <cbor_value_get_int64+0x1e>

08002740 <oc_parse_rep_value>:
*/

/* Parse single property */
static void
oc_parse_rep_value(CborValue *value, oc_rep_t **rep, CborError *err)
{
 8002740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002744:	b08b      	sub	sp, #44	; 0x2c
 8002746:	4614      	mov	r4, r2
 8002748:	4606      	mov	r6, r0
 800274a:	460f      	mov	r7, r1
  size_t k, len;
  CborValue map, array;
  *rep = _alloc_rep();
  oc_rep_t *cur = *rep, **prev = 0;
  cur->next = 0;
 800274c:	f04f 0800 	mov.w	r8, #0
  *rep = _alloc_rep();
 8002750:	f7ff ffa6 	bl	80026a0 <_alloc_rep>
  cur->value_object_array = 0;
  /* key */
  *err |= cbor_value_calculate_string_length(value, &len);
 8002754:	a901      	add	r1, sp, #4
  *rep = _alloc_rep();
 8002756:	6038      	str	r0, [r7, #0]
 8002758:	4605      	mov	r5, r0
  cur->next = 0;
 800275a:	f8c0 8004 	str.w	r8, [r0, #4]
  cur->value_object_array = 0;
 800275e:	f8c0 8010 	str.w	r8, [r0, #16]
  *err |= cbor_value_calculate_string_length(value, &len);
 8002762:	4630      	mov	r0, r6
 8002764:	f000 fef9 	bl	800355a <cbor_value_calculate_string_length>
 8002768:	6823      	ldr	r3, [r4, #0]
  len++;
 800276a:	9901      	ldr	r1, [sp, #4]
  *err |= cbor_value_calculate_string_length(value, &len);
 800276c:	4318      	orrs	r0, r3
  len++;
 800276e:	3101      	adds	r1, #1
  *err |= cbor_value_calculate_string_length(value, &len);
 8002770:	6020      	str	r0, [r4, #0]
  oc_alloc_string(&cur->name, len);
 8002772:	f105 0008 	add.w	r0, r5, #8
  len++;
 8002776:	9101      	str	r1, [sp, #4]
  oc_alloc_string(&cur->name, len);
 8002778:	f000 fa88 	bl	8002c8c <oc_alloc_string>
    assert(cbor_value_is_text_string(value));
 800277c:	7bb3      	ldrb	r3, [r6, #14]
  *err |= cbor_value_copy_text_string(value, oc_string(cur->name), &len, NULL);
 800277e:	68e9      	ldr	r1, [r5, #12]
 8002780:	2b60      	cmp	r3, #96	; 0x60
 8002782:	d001      	beq.n	8002788 <oc_parse_rep_value+0x48>
 8002784:	f7ff ff98 	bl	80026b8 <cbor_value_copy_byte_string.part.13>
    return _cbor_value_copy_string(value, buffer, buflen, next);
 8002788:	4643      	mov	r3, r8
 800278a:	aa01      	add	r2, sp, #4
 800278c:	4630      	mov	r0, r6
 800278e:	f000 fe85 	bl	800349c <_cbor_value_copy_string>
 8002792:	6823      	ldr	r3, [r4, #0]
 8002794:	4318      	orrs	r0, r3
 8002796:	6020      	str	r0, [r4, #0]
  *err |= cbor_value_advance(value);
 8002798:	4630      	mov	r0, r6
 800279a:	f000 fecf 	bl	800353c <cbor_value_advance>
 800279e:	6823      	ldr	r3, [r4, #0]
 80027a0:	4318      	orrs	r0, r3
 80027a2:	6020      	str	r0, [r4, #0]
  /* value */
  switch (value->type) {
 80027a4:	7bb3      	ldrb	r3, [r6, #14]
 80027a6:	2b80      	cmp	r3, #128	; 0x80
 80027a8:	f000 8087 	beq.w	80028ba <oc_parse_rep_value+0x17a>
 80027ac:	d811      	bhi.n	80027d2 <oc_parse_rep_value+0x92>
 80027ae:	2b40      	cmp	r3, #64	; 0x40
 80027b0:	d038      	beq.n	8002824 <oc_parse_rep_value+0xe4>
 80027b2:	2b60      	cmp	r3, #96	; 0x60
 80027b4:	d054      	beq.n	8002860 <oc_parse_rep_value+0x120>
 80027b6:	b94b      	cbnz	r3, 80027cc <oc_parse_rep_value+0x8c>
  case CborIntegerType:
    *err |= cbor_value_get_int64(value, &cur->value_int);
 80027b8:	f105 0110 	add.w	r1, r5, #16
 80027bc:	4630      	mov	r0, r6
 80027be:	f7ff ff9d 	bl	80026fc <cbor_value_get_int64>
 80027c2:	6823      	ldr	r3, [r4, #0]
 80027c4:	4318      	orrs	r0, r3
    cur->type = INT;
 80027c6:	2301      	movs	r3, #1
    *err |= cbor_value_get_int64(value, &cur->value_int);
 80027c8:	6020      	str	r0, [r4, #0]
      oc_parse_rep_value(&map, obj, err);
      (*obj)->next = 0;
      obj = &(*obj)->next;
      *err |= cbor_value_advance(&map);
    }
    cur->type = OBJECT;
 80027ca:	702b      	strb	r3, [r5, #0]
    }
    break;
  default:
    break;
  }
}
 80027cc:	b00b      	add	sp, #44	; 0x2c
 80027ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  switch (value->type) {
 80027d2:	2bf5      	cmp	r3, #245	; 0xf5
 80027d4:	d012      	beq.n	80027fc <oc_parse_rep_value+0xbc>
 80027d6:	2bfb      	cmp	r3, #251	; 0xfb
 80027d8:	d01a      	beq.n	8002810 <oc_parse_rep_value+0xd0>
 80027da:	2ba0      	cmp	r3, #160	; 0xa0
 80027dc:	d1f6      	bne.n	80027cc <oc_parse_rep_value+0x8c>
    *err |= cbor_value_enter_container(value, &map);
 80027de:	4630      	mov	r0, r6
 80027e0:	a906      	add	r1, sp, #24
 80027e2:	f000 fdf6 	bl	80033d2 <cbor_value_enter_container>
      (*obj)->next = 0;
 80027e6:	4646      	mov	r6, r8
    *err |= cbor_value_enter_container(value, &map);
 80027e8:	6823      	ldr	r3, [r4, #0]
    oc_rep_t **obj = &cur->value_object; // object points to list of properties
 80027ea:	f105 0710 	add.w	r7, r5, #16
    *err |= cbor_value_enter_container(value, &map);
 80027ee:	4318      	orrs	r0, r3
 80027f0:	6020      	str	r0, [r4, #0]
    while (!cbor_value_at_end(&map)) {
 80027f2:	9b08      	ldr	r3, [sp, #32]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d150      	bne.n	800289a <oc_parse_rep_value+0x15a>
    cur->type = OBJECT;
 80027f8:	2306      	movs	r3, #6
 80027fa:	e7e6      	b.n	80027ca <oc_parse_rep_value+0x8a>
    *result = !!value->extra;
 80027fc:	89b3      	ldrh	r3, [r6, #12]
 80027fe:	3300      	adds	r3, #0
 8002800:	bf18      	it	ne
 8002802:	2301      	movne	r3, #1
 8002804:	742b      	strb	r3, [r5, #16]
    *err |= cbor_value_get_boolean(value, &cur->value_boolean);
 8002806:	6020      	str	r0, [r4, #0]
    cur->type = BOOL;
 8002808:	2303      	movs	r3, #3
 800280a:	e7de      	b.n	80027ca <oc_parse_rep_value+0x8a>
 800280c:	f7ff ff54 	bl	80026b8 <cbor_value_copy_byte_string.part.13>
    *err |= cbor_value_get_double(value, &cur->value_double);
 8002810:	f105 0110 	add.w	r1, r5, #16
 8002814:	4630      	mov	r0, r6
 8002816:	f7ff ff56 	bl	80026c6 <cbor_value_get_double>
 800281a:	6823      	ldr	r3, [r4, #0]
 800281c:	4318      	orrs	r0, r3
 800281e:	6020      	str	r0, [r4, #0]
    cur->type = DOUBLE;
 8002820:	2302      	movs	r3, #2
 8002822:	e7d2      	b.n	80027ca <oc_parse_rep_value+0x8a>
    *err |= cbor_value_calculate_string_length(value, &len);
 8002824:	a901      	add	r1, sp, #4
 8002826:	4630      	mov	r0, r6
 8002828:	f000 fe97 	bl	800355a <cbor_value_calculate_string_length>
 800282c:	6823      	ldr	r3, [r4, #0]
    len++;
 800282e:	9901      	ldr	r1, [sp, #4]
    *err |= cbor_value_calculate_string_length(value, &len);
 8002830:	4318      	orrs	r0, r3
    len++;
 8002832:	3101      	adds	r1, #1
    *err |= cbor_value_calculate_string_length(value, &len);
 8002834:	6020      	str	r0, [r4, #0]
    oc_alloc_string(&cur->value_string, len);
 8002836:	f105 0010 	add.w	r0, r5, #16
    len++;
 800283a:	9101      	str	r1, [sp, #4]
    oc_alloc_string(&cur->value_string, len);
 800283c:	f000 fa26 	bl	8002c8c <oc_alloc_string>
    assert(cbor_value_is_byte_string(value));
 8002840:	7bb3      	ldrb	r3, [r6, #14]
    *err |= cbor_value_copy_byte_string(value,
 8002842:	6969      	ldr	r1, [r5, #20]
 8002844:	2b40      	cmp	r3, #64	; 0x40
 8002846:	d001      	beq.n	800284c <oc_parse_rep_value+0x10c>
 8002848:	f7ff ff36 	bl	80026b8 <cbor_value_copy_byte_string.part.13>
    return _cbor_value_copy_string(value, buffer, buflen, next);
 800284c:	4643      	mov	r3, r8
 800284e:	aa01      	add	r2, sp, #4
 8002850:	4630      	mov	r0, r6
 8002852:	f000 fe23 	bl	800349c <_cbor_value_copy_string>
 8002856:	6823      	ldr	r3, [r4, #0]
 8002858:	4318      	orrs	r0, r3
 800285a:	6020      	str	r0, [r4, #0]
    cur->type = BYTE_STRING;
 800285c:	2304      	movs	r3, #4
 800285e:	e7b4      	b.n	80027ca <oc_parse_rep_value+0x8a>
    *err |= cbor_value_calculate_string_length(value, &len);
 8002860:	a901      	add	r1, sp, #4
 8002862:	4630      	mov	r0, r6
 8002864:	f000 fe79 	bl	800355a <cbor_value_calculate_string_length>
 8002868:	6823      	ldr	r3, [r4, #0]
    len++;
 800286a:	9901      	ldr	r1, [sp, #4]
    *err |= cbor_value_calculate_string_length(value, &len);
 800286c:	4318      	orrs	r0, r3
    len++;
 800286e:	3101      	adds	r1, #1
    *err |= cbor_value_calculate_string_length(value, &len);
 8002870:	6020      	str	r0, [r4, #0]
    oc_alloc_string(&cur->value_string, len);
 8002872:	f105 0010 	add.w	r0, r5, #16
    len++;
 8002876:	9101      	str	r1, [sp, #4]
    oc_alloc_string(&cur->value_string, len);
 8002878:	f000 fa08 	bl	8002c8c <oc_alloc_string>
    assert(cbor_value_is_text_string(value));
 800287c:	7bb3      	ldrb	r3, [r6, #14]
    *err |= cbor_value_copy_text_string(value, oc_string(cur->value_string),
 800287e:	6969      	ldr	r1, [r5, #20]
 8002880:	2b60      	cmp	r3, #96	; 0x60
 8002882:	f47f af7f 	bne.w	8002784 <oc_parse_rep_value+0x44>
    return _cbor_value_copy_string(value, buffer, buflen, next);
 8002886:	4643      	mov	r3, r8
 8002888:	aa01      	add	r2, sp, #4
 800288a:	4630      	mov	r0, r6
 800288c:	f000 fe06 	bl	800349c <_cbor_value_copy_string>
 8002890:	6823      	ldr	r3, [r4, #0]
 8002892:	4318      	orrs	r0, r3
 8002894:	6020      	str	r0, [r4, #0]
    cur->type = STRING;
 8002896:	2305      	movs	r3, #5
 8002898:	e797      	b.n	80027ca <oc_parse_rep_value+0x8a>
      oc_parse_rep_value(&map, obj, err);
 800289a:	4639      	mov	r1, r7
 800289c:	4622      	mov	r2, r4
 800289e:	a806      	add	r0, sp, #24
 80028a0:	f7ff ff4e 	bl	8002740 <oc_parse_rep_value>
      (*obj)->next = 0;
 80028a4:	683b      	ldr	r3, [r7, #0]
      *err |= cbor_value_advance(&map);
 80028a6:	a806      	add	r0, sp, #24
      (*obj)->next = 0;
 80028a8:	605e      	str	r6, [r3, #4]
      obj = &(*obj)->next;
 80028aa:	683f      	ldr	r7, [r7, #0]
      *err |= cbor_value_advance(&map);
 80028ac:	f000 fe46 	bl	800353c <cbor_value_advance>
 80028b0:	6823      	ldr	r3, [r4, #0]
      obj = &(*obj)->next;
 80028b2:	3704      	adds	r7, #4
      *err |= cbor_value_advance(&map);
 80028b4:	4318      	orrs	r0, r3
 80028b6:	6020      	str	r0, [r4, #0]
 80028b8:	e79b      	b.n	80027f2 <oc_parse_rep_value+0xb2>
    *err |= cbor_value_enter_container(value, &array);
 80028ba:	af02      	add	r7, sp, #8
 80028bc:	4639      	mov	r1, r7
 80028be:	4630      	mov	r0, r6
 80028c0:	f000 fd87 	bl	80033d2 <cbor_value_enter_container>
 80028c4:	6823      	ldr	r3, [r4, #0]
    len = 0;
 80028c6:	f8cd 8004 	str.w	r8, [sp, #4]
    *err |= cbor_value_enter_container(value, &array);
 80028ca:	4318      	orrs	r0, r3
 80028cc:	6020      	str	r0, [r4, #0]
    assert(cbor_value_is_array(value));
 80028ce:	7bb3      	ldrb	r3, [r6, #14]
 80028d0:	2b80      	cmp	r3, #128	; 0x80
 80028d2:	d005      	beq.n	80028e0 <oc_parse_rep_value+0x1a0>
 80028d4:	4643      	mov	r3, r8
 80028d6:	4642      	mov	r2, r8
 80028d8:	4641      	mov	r1, r8
 80028da:	4640      	mov	r0, r8
 80028dc:	f001 f8ea 	bl	8003ab4 <__assert_func>
    if (!cbor_value_is_length_known(value))
 80028e0:	7bf3      	ldrb	r3, [r6, #15]
 80028e2:	075a      	lsls	r2, r3, #29
 80028e4:	d405      	bmi.n	80028f2 <oc_parse_rep_value+0x1b2>
                _cbor_value_decode_int64_internal(value) : value->extra;
 80028e6:	07db      	lsls	r3, r3, #31
 80028e8:	d529      	bpl.n	800293e <oc_parse_rep_value+0x1fe>
 80028ea:	4630      	mov	r0, r6
 80028ec:	f000 fd31 	bl	8003352 <_cbor_value_decode_int64_internal>
    *length = v;
 80028f0:	9001      	str	r0, [sp, #4]
    if (len == 0) {
 80028f2:	9b01      	ldr	r3, [sp, #4]
 80028f4:	b933      	cbnz	r3, 8002904 <oc_parse_rep_value+0x1c4>
      CborValue t = array;
 80028f6:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 80028fa:	ae06      	add	r6, sp, #24
 80028fc:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
      while (!cbor_value_at_end(&t)) {
 8002900:	9b08      	ldr	r3, [sp, #32]
 8002902:	b9f3      	cbnz	r3, 8002942 <oc_parse_rep_value+0x202>
{
 8002904:	f04f 0800 	mov.w	r8, #0
        *err |= cbor_value_copy_text_string(
 8002908:	f04f 0b18 	mov.w	fp, #24
{
 800290c:	4646      	mov	r6, r8
          oc_new_string_array(&cur->value_array, len);
 800290e:	f105 0a10 	add.w	sl, r5, #16
    while (!cbor_value_at_end(&array)) {
 8002912:	9b04      	ldr	r3, [sp, #16]
 8002914:	2b00      	cmp	r3, #0
 8002916:	f43f af59 	beq.w	80027cc <oc_parse_rep_value+0x8c>
      switch (array.type) {
 800291a:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800291e:	2b60      	cmp	r3, #96	; 0x60
 8002920:	f000 809f 	beq.w	8002a62 <oc_parse_rep_value+0x322>
 8002924:	d814      	bhi.n	8002950 <oc_parse_rep_value+0x210>
 8002926:	2b00      	cmp	r3, #0
 8002928:	d042      	beq.n	80029b0 <oc_parse_rep_value+0x270>
 800292a:	2b40      	cmp	r3, #64	; 0x40
 800292c:	d079      	beq.n	8002a22 <oc_parse_rep_value+0x2e2>
      *err |= cbor_value_advance(&array);
 800292e:	4638      	mov	r0, r7
 8002930:	f000 fe04 	bl	800353c <cbor_value_advance>
 8002934:	6823      	ldr	r3, [r4, #0]
      k++;
 8002936:	3601      	adds	r6, #1
      *err |= cbor_value_advance(&array);
 8002938:	4318      	orrs	r0, r3
 800293a:	6020      	str	r0, [r4, #0]
 800293c:	e7e9      	b.n	8002912 <oc_parse_rep_value+0x1d2>
                _cbor_value_decode_int64_internal(value) : value->extra;
 800293e:	89b0      	ldrh	r0, [r6, #12]
 8002940:	e7d6      	b.n	80028f0 <oc_parse_rep_value+0x1b0>
        len++;
 8002942:	9b01      	ldr	r3, [sp, #4]
        cbor_value_advance(&t);
 8002944:	4630      	mov	r0, r6
        len++;
 8002946:	3301      	adds	r3, #1
 8002948:	9301      	str	r3, [sp, #4]
        cbor_value_advance(&t);
 800294a:	f000 fdf7 	bl	800353c <cbor_value_advance>
 800294e:	e7d7      	b.n	8002900 <oc_parse_rep_value+0x1c0>
      switch (array.type) {
 8002950:	2bf5      	cmp	r3, #245	; 0xf5
 8002952:	d050      	beq.n	80029f6 <oc_parse_rep_value+0x2b6>
 8002954:	2bfb      	cmp	r3, #251	; 0xfb
 8002956:	d03e      	beq.n	80029d6 <oc_parse_rep_value+0x296>
 8002958:	2ba0      	cmp	r3, #160	; 0xa0
 800295a:	d1e8      	bne.n	800292e <oc_parse_rep_value+0x1ee>
        if (k == 0) {
 800295c:	2e00      	cmp	r6, #0
 800295e:	f040 809a 	bne.w	8002a96 <oc_parse_rep_value+0x356>
          cur->type = OBJECT | ARRAY;
 8002962:	230e      	movs	r3, #14
 8002964:	702b      	strb	r3, [r5, #0]
          cur->value_object_array = _alloc_rep();
 8002966:	f7ff fe9b 	bl	80026a0 <_alloc_rep>
          prev = &cur->value_object_array;
 800296a:	46d0      	mov	r8, sl
          cur->value_object_array = _alloc_rep();
 800296c:	6128      	str	r0, [r5, #16]
        (*prev)->type = OBJECT;
 800296e:	2206      	movs	r2, #6
 8002970:	f8d8 3000 	ldr.w	r3, [r8]
        *err |= cbor_value_enter_container(&array, &map);
 8002974:	a906      	add	r1, sp, #24
        (*prev)->type = OBJECT;
 8002976:	701a      	strb	r2, [r3, #0]
        (*prev)->next = 0;
 8002978:	2200      	movs	r2, #0
 800297a:	605a      	str	r2, [r3, #4]
        oc_rep_t **obj = &(*prev)->value_object;
 800297c:	f8d8 3000 	ldr.w	r3, [r8]
        *err |= cbor_value_enter_container(&array, &map);
 8002980:	4638      	mov	r0, r7
        oc_rep_t **obj = &(*prev)->value_object;
 8002982:	f103 0910 	add.w	r9, r3, #16
        *err |= cbor_value_enter_container(&array, &map);
 8002986:	f000 fd24 	bl	80033d2 <cbor_value_enter_container>
          *err |= cbor_value_advance(&map);
 800298a:	6823      	ldr	r3, [r4, #0]
 800298c:	4318      	orrs	r0, r3
        while (!cbor_value_at_end(&map)) {
 800298e:	9b08      	ldr	r3, [sp, #32]
          *err |= cbor_value_advance(&map);
 8002990:	6020      	str	r0, [r4, #0]
        while (!cbor_value_at_end(&map)) {
 8002992:	2b00      	cmp	r3, #0
 8002994:	d0cb      	beq.n	800292e <oc_parse_rep_value+0x1ee>
          oc_parse_rep_value(&map, obj, err);
 8002996:	4649      	mov	r1, r9
 8002998:	a806      	add	r0, sp, #24
 800299a:	4622      	mov	r2, r4
 800299c:	f7ff fed0 	bl	8002740 <oc_parse_rep_value>
          obj = &(*obj)->next;
 80029a0:	f8d9 3000 	ldr.w	r3, [r9]
          *err |= cbor_value_advance(&map);
 80029a4:	a806      	add	r0, sp, #24
          obj = &(*obj)->next;
 80029a6:	f103 0904 	add.w	r9, r3, #4
          *err |= cbor_value_advance(&map);
 80029aa:	f000 fdc7 	bl	800353c <cbor_value_advance>
 80029ae:	e7ec      	b.n	800298a <oc_parse_rep_value+0x24a>
        if (k == 0) {
 80029b0:	b93e      	cbnz	r6, 80029c2 <oc_parse_rep_value+0x282>
          oc_new_int_array(&cur->value_array, len);
 80029b2:	2208      	movs	r2, #8
 80029b4:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80029b8:	4650      	mov	r0, sl
 80029ba:	f000 f979 	bl	8002cb0 <_oc_new_array>
          cur->type = INT | ARRAY;
 80029be:	2309      	movs	r3, #9
 80029c0:	702b      	strb	r3, [r5, #0]
          cbor_value_get_int64(&array, oc_int_array(cur->value_array) + k);
 80029c2:	6969      	ldr	r1, [r5, #20]
 80029c4:	4638      	mov	r0, r7
 80029c6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80029ca:	f7ff fe97 	bl	80026fc <cbor_value_get_int64>
        *err |=
 80029ce:	6823      	ldr	r3, [r4, #0]
 80029d0:	4318      	orrs	r0, r3
 80029d2:	6020      	str	r0, [r4, #0]
        break;
 80029d4:	e7ab      	b.n	800292e <oc_parse_rep_value+0x1ee>
        if (k == 0) {
 80029d6:	b93e      	cbnz	r6, 80029e8 <oc_parse_rep_value+0x2a8>
          oc_new_double_array(&cur->value_array, len);
 80029d8:	2208      	movs	r2, #8
 80029da:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80029de:	4650      	mov	r0, sl
 80029e0:	f000 f966 	bl	8002cb0 <_oc_new_array>
          cur->type = DOUBLE | ARRAY;
 80029e4:	230a      	movs	r3, #10
 80029e6:	702b      	strb	r3, [r5, #0]
          cbor_value_get_double(&array, oc_double_array(cur->value_array) + k);
 80029e8:	6969      	ldr	r1, [r5, #20]
 80029ea:	4638      	mov	r0, r7
 80029ec:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80029f0:	f7ff fe69 	bl	80026c6 <cbor_value_get_double>
 80029f4:	e7eb      	b.n	80029ce <oc_parse_rep_value+0x28e>
        if (k == 0) {
 80029f6:	b93e      	cbnz	r6, 8002a08 <oc_parse_rep_value+0x2c8>
          oc_new_bool_array(&cur->value_array, len);
 80029f8:	2201      	movs	r2, #1
 80029fa:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80029fe:	4650      	mov	r0, sl
 8002a00:	f000 f956 	bl	8002cb0 <_oc_new_array>
          cur->type = BOOL | ARRAY;
 8002a04:	230b      	movs	r3, #11
 8002a06:	702b      	strb	r3, [r5, #0]
    assert(cbor_value_is_boolean(value));
 8002a08:	f89d 3016 	ldrb.w	r3, [sp, #22]
          cbor_value_get_boolean(&array, oc_bool_array(cur->value_array) + k);
 8002a0c:	696a      	ldr	r2, [r5, #20]
 8002a0e:	2bf5      	cmp	r3, #245	; 0xf5
 8002a10:	f47f aefc 	bne.w	800280c <oc_parse_rep_value+0xcc>
    *result = !!value->extra;
 8002a14:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8002a18:	3300      	adds	r3, #0
 8002a1a:	bf18      	it	ne
 8002a1c:	2301      	movne	r3, #1
 8002a1e:	5593      	strb	r3, [r2, r6]
        break;
 8002a20:	e785      	b.n	800292e <oc_parse_rep_value+0x1ee>
        if (k == 0) {
 8002a22:	b936      	cbnz	r6, 8002a32 <oc_parse_rep_value+0x2f2>
          oc_new_string_array(&cur->value_array, len);
 8002a24:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8002a28:	4650      	mov	r0, sl
 8002a2a:	f000 f954 	bl	8002cd6 <_oc_alloc_string_array>
          cur->type = BYTE_STRING | ARRAY;
 8002a2e:	230c      	movs	r3, #12
 8002a30:	702b      	strb	r3, [r5, #0]
        *err |= cbor_value_calculate_string_length(&array, &len);
 8002a32:	a901      	add	r1, sp, #4
 8002a34:	4638      	mov	r0, r7
 8002a36:	f000 fd90 	bl	800355a <cbor_value_calculate_string_length>
 8002a3a:	6823      	ldr	r3, [r4, #0]
          &array, (uint8_t *)oc_string_array_get_item(cur->value_array, k),
 8002a3c:	6969      	ldr	r1, [r5, #20]
        *err |= cbor_value_calculate_string_length(&array, &len);
 8002a3e:	4318      	orrs	r0, r3
        len++;
 8002a40:	9b01      	ldr	r3, [sp, #4]
        *err |= cbor_value_calculate_string_length(&array, &len);
 8002a42:	6020      	str	r0, [r4, #0]
        len++;
 8002a44:	3301      	adds	r3, #1
 8002a46:	9301      	str	r3, [sp, #4]
    assert(cbor_value_is_byte_string(value));
 8002a48:	f89d 3016 	ldrb.w	r3, [sp, #22]
          &array, (uint8_t *)oc_string_array_get_item(cur->value_array, k),
 8002a4c:	fb0b 1106 	mla	r1, fp, r6, r1
 8002a50:	2b40      	cmp	r3, #64	; 0x40
 8002a52:	f47f aef9 	bne.w	8002848 <oc_parse_rep_value+0x108>
    return _cbor_value_copy_string(value, buffer, buflen, next);
 8002a56:	2300      	movs	r3, #0
 8002a58:	aa01      	add	r2, sp, #4
 8002a5a:	4638      	mov	r0, r7
 8002a5c:	f000 fd1e 	bl	800349c <_cbor_value_copy_string>
 8002a60:	e7b5      	b.n	80029ce <oc_parse_rep_value+0x28e>
        if (k == 0) {
 8002a62:	b936      	cbnz	r6, 8002a72 <oc_parse_rep_value+0x332>
          oc_new_string_array(&cur->value_array, len);
 8002a64:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8002a68:	4650      	mov	r0, sl
 8002a6a:	f000 f934 	bl	8002cd6 <_oc_alloc_string_array>
          cur->type = STRING | ARRAY;
 8002a6e:	230d      	movs	r3, #13
 8002a70:	702b      	strb	r3, [r5, #0]
        *err |= cbor_value_calculate_string_length(&array, &len);
 8002a72:	a901      	add	r1, sp, #4
 8002a74:	4638      	mov	r0, r7
 8002a76:	f000 fd70 	bl	800355a <cbor_value_calculate_string_length>
 8002a7a:	6823      	ldr	r3, [r4, #0]
        *err |= cbor_value_copy_text_string(
 8002a7c:	6969      	ldr	r1, [r5, #20]
        *err |= cbor_value_calculate_string_length(&array, &len);
 8002a7e:	4318      	orrs	r0, r3
        len++;
 8002a80:	9b01      	ldr	r3, [sp, #4]
        *err |= cbor_value_calculate_string_length(&array, &len);
 8002a82:	6020      	str	r0, [r4, #0]
        len++;
 8002a84:	3301      	adds	r3, #1
 8002a86:	9301      	str	r3, [sp, #4]
    assert(cbor_value_is_text_string(value));
 8002a88:	f89d 3016 	ldrb.w	r3, [sp, #22]
        *err |= cbor_value_copy_text_string(
 8002a8c:	fb0b 1106 	mla	r1, fp, r6, r1
 8002a90:	2b60      	cmp	r3, #96	; 0x60
 8002a92:	d0e0      	beq.n	8002a56 <oc_parse_rep_value+0x316>
 8002a94:	e676      	b.n	8002784 <oc_parse_rep_value+0x44>
          (*prev)->next = _alloc_rep();
 8002a96:	f8d8 9000 	ldr.w	r9, [r8]
 8002a9a:	f7ff fe01 	bl	80026a0 <_alloc_rep>
 8002a9e:	f8c9 0004 	str.w	r0, [r9, #4]
          prev = &(*prev)->next;
 8002aa2:	f8d8 3000 	ldr.w	r3, [r8]
 8002aa6:	f103 0804 	add.w	r8, r3, #4
 8002aaa:	e760      	b.n	800296e <oc_parse_rep_value+0x22e>

08002aac <oc_rep_new>:
{
 8002aac:	b538      	push	{r3, r4, r5, lr}
    g_err = CborNoError;
 8002aae:	2500      	movs	r5, #0
 8002ab0:	4b07      	ldr	r3, [pc, #28]	; (8002ad0 <oc_rep_new+0x24>)
    cbor_mbuf_writer_init(&g_buf_writer, m);
 8002ab2:	4c08      	ldr	r4, [pc, #32]	; (8002ad4 <oc_rep_new+0x28>)
    g_err = CborNoError;
 8002ab4:	601d      	str	r5, [r3, #0]
    g_outm = m;
 8002ab6:	4b08      	ldr	r3, [pc, #32]	; (8002ad8 <oc_rep_new+0x2c>)
{
 8002ab8:	4601      	mov	r1, r0
    g_outm = m;
 8002aba:	6018      	str	r0, [r3, #0]
    cbor_mbuf_writer_init(&g_buf_writer, m);
 8002abc:	4620      	mov	r0, r4
 8002abe:	f000 f9b7 	bl	8002e30 <cbor_mbuf_writer_init>
    cbor_encoder_init(&g_encoder, &g_buf_writer.enc, 0);
 8002ac2:	462a      	mov	r2, r5
 8002ac4:	4621      	mov	r1, r4
}
 8002ac6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    cbor_encoder_init(&g_encoder, &g_buf_writer.enc, 0);
 8002aca:	4804      	ldr	r0, [pc, #16]	; (8002adc <oc_rep_new+0x30>)
 8002acc:	f000 ba21 	b.w	8002f12 <cbor_encoder_init>
 8002ad0:	20003a00 	.word	0x20003a00
 8002ad4:	20003a04 	.word	0x20003a04
 8002ad8:	20000768 	.word	0x20000768
 8002adc:	20003a20 	.word	0x20003a20

08002ae0 <oc_rep_reset>:
    memset(&g_encoder, 0, sizeof(g_encoder));
 8002ae0:	2210      	movs	r2, #16
 8002ae2:	2100      	movs	r1, #0
 8002ae4:	4801      	ldr	r0, [pc, #4]	; (8002aec <oc_rep_reset+0xc>)
 8002ae6:	f002 bc4e 	b.w	8005386 <memset>
 8002aea:	bf00      	nop
 8002aec:	20003a20 	.word	0x20003a20

08002af0 <oc_rep_finalize>:
    int size = OS_MBUF_PKTLEN(g_outm);
 8002af0:	4b06      	ldr	r3, [pc, #24]	; (8002b0c <oc_rep_finalize+0x1c>)
{
 8002af2:	b510      	push	{r4, lr}
    int size = OS_MBUF_PKTLEN(g_outm);
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	8a1c      	ldrh	r4, [r3, #16]
    oc_rep_reset();
 8002af8:	f7ff fff2 	bl	8002ae0 <oc_rep_reset>
    if (g_err != CborNoError) {
 8002afc:	4b04      	ldr	r3, [pc, #16]	; (8002b10 <oc_rep_finalize+0x20>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2b00      	cmp	r3, #0
}
 8002b02:	bf0c      	ite	eq
 8002b04:	4620      	moveq	r0, r4
 8002b06:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8002b0a:	bd10      	pop	{r4, pc}
 8002b0c:	20000768 	.word	0x20000768
 8002b10:	20003a00 	.word	0x20003a00

08002b14 <oc_free_rep>:
{
 8002b14:	b510      	push	{r4, lr}
    if (rep == NULL) {
 8002b16:	4604      	mov	r4, r0
 8002b18:	b328      	cbz	r0, 8002b66 <oc_free_rep+0x52>
    oc_free_rep(rep->next);
 8002b1a:	6840      	ldr	r0, [r0, #4]
 8002b1c:	f7ff fffa 	bl	8002b14 <oc_free_rep>
    switch (rep->type) {
 8002b20:	7823      	ldrb	r3, [r4, #0]
 8002b22:	3b04      	subs	r3, #4
 8002b24:	2b0a      	cmp	r3, #10
 8002b26:	d80b      	bhi.n	8002b40 <oc_free_rep+0x2c>
 8002b28:	e8df f003 	tbb	[pc, r3]
 8002b2c:	0a191414 	.word	0x0a191414
 8002b30:	0606060a 	.word	0x0606060a
 8002b34:	0606      	.short	0x0606
 8002b36:	19          	.byte	0x19
 8002b37:	00          	.byte	0x00
        oc_free_string_array(&rep->value_array);
 8002b38:	f104 0010 	add.w	r0, r4, #16
 8002b3c:	f000 f8c3 	bl	8002cc6 <_oc_free_array>
    oc_free_string(&rep->name);
 8002b40:	f104 0008 	add.w	r0, r4, #8
 8002b44:	f000 f8ac 	bl	8002ca0 <oc_free_string>
    os_memblock_put(&oc_rep_objects, rep_value);
 8002b48:	4621      	mov	r1, r4
}
 8002b4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    os_memblock_put(&oc_rep_objects, rep_value);
 8002b4e:	4806      	ldr	r0, [pc, #24]	; (8002b68 <oc_free_rep+0x54>)
 8002b50:	f001 be09 	b.w	8004766 <os_memblock_put>
        oc_free_string(&rep->value_string);
 8002b54:	f104 0010 	add.w	r0, r4, #16
 8002b58:	f000 f8a2 	bl	8002ca0 <oc_free_string>
        break;
 8002b5c:	e7f0      	b.n	8002b40 <oc_free_rep+0x2c>
        oc_free_rep(rep->value_object_array);
 8002b5e:	6920      	ldr	r0, [r4, #16]
 8002b60:	f7ff ffd8 	bl	8002b14 <oc_free_rep>
        break;
 8002b64:	e7ec      	b.n	8002b40 <oc_free_rep+0x2c>
}
 8002b66:	bd10      	pop	{r4, pc}
 8002b68:	2000076c 	.word	0x2000076c

08002b6c <oc_parse_rep>:

uint16_t
oc_parse_rep(struct os_mbuf *m, uint16_t payload_off,
             uint16_t payload_size, oc_rep_t **out_rep)
{
 8002b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
  CborParser parser;
  CborValue root_value, cur_value, map;
  CborError err = CborNoError;
 8002b6e:	2500      	movs	r5, #0
{
 8002b70:	b09b      	sub	sp, #108	; 0x6c
  struct cbor_mbuf_reader br;

  cbor_mbuf_reader_init(&br, m, payload_off);
 8002b72:	460a      	mov	r2, r1
 8002b74:	4601      	mov	r1, r0
 8002b76:	a811      	add	r0, sp, #68	; 0x44
{
 8002b78:	461c      	mov	r4, r3
  CborError err = CborNoError;
 8002b7a:	9501      	str	r5, [sp, #4]
  cbor_mbuf_reader_init(&br, m, payload_off);
 8002b7c:	f000 f920 	bl	8002dc0 <cbor_mbuf_reader_init>
  err |= cbor_parser_init(&br.r, 0, &parser, &root_value);
 8002b80:	ab05      	add	r3, sp, #20
 8002b82:	aa02      	add	r2, sp, #8
 8002b84:	4629      	mov	r1, r5
 8002b86:	a811      	add	r0, sp, #68	; 0x44
 8002b88:	f000 fc13 	bl	80033b2 <cbor_parser_init>
 8002b8c:	9b01      	ldr	r3, [sp, #4]
 8002b8e:	4318      	orrs	r0, r3
  if (cbor_value_is_map(&root_value)) {
 8002b90:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
  err |= cbor_parser_init(&br.r, 0, &parser, &root_value);
 8002b94:	9001      	str	r0, [sp, #4]
  if (cbor_value_is_map(&root_value)) {
 8002b96:	2ba0      	cmp	r3, #160	; 0xa0
 8002b98:	d11f      	bne.n	8002bda <oc_parse_rep+0x6e>
    err |= cbor_value_enter_container(&root_value, &cur_value);
 8002b9a:	a909      	add	r1, sp, #36	; 0x24
 8002b9c:	a805      	add	r0, sp, #20
 8002b9e:	f000 fc18 	bl	80033d2 <cbor_value_enter_container>
 8002ba2:	9b01      	ldr	r3, [sp, #4]
 8002ba4:	ae1a      	add	r6, sp, #104	; 0x68
 8002ba6:	4318      	orrs	r0, r3
 8002ba8:	f846 0d64 	str.w	r0, [r6, #-100]!
    *out_rep = 0;
 8002bac:	6025      	str	r5, [r4, #0]
    oc_rep_t **cur = out_rep;
    while (cbor_value_is_valid(&cur_value)) {
 8002bae:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 8002bb2:	2bff      	cmp	r3, #255	; 0xff
 8002bb4:	d103      	bne.n	8002bbe <oc_parse_rep+0x52>
      err |= cbor_value_advance(&cur_value);
      (*cur)->next = 0;
      cur = &(*cur)->next;
    }
  }
  return (uint16_t)err;
 8002bb6:	f8bd 0004 	ldrh.w	r0, [sp, #4]
}
 8002bba:	b01b      	add	sp, #108	; 0x6c
 8002bbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      oc_parse_rep_value(&cur_value, cur, &err);
 8002bbe:	4621      	mov	r1, r4
 8002bc0:	4632      	mov	r2, r6
 8002bc2:	a809      	add	r0, sp, #36	; 0x24
 8002bc4:	f7ff fdbc 	bl	8002740 <oc_parse_rep_value>
      err |= cbor_value_advance(&cur_value);
 8002bc8:	a809      	add	r0, sp, #36	; 0x24
 8002bca:	f000 fcb7 	bl	800353c <cbor_value_advance>
 8002bce:	9b01      	ldr	r3, [sp, #4]
      cur = &(*cur)->next;
 8002bd0:	6824      	ldr	r4, [r4, #0]
      err |= cbor_value_advance(&cur_value);
 8002bd2:	4318      	orrs	r0, r3
 8002bd4:	9001      	str	r0, [sp, #4]
      cur = &(*cur)->next;
 8002bd6:	3404      	adds	r4, #4
 8002bd8:	e7e9      	b.n	8002bae <oc_parse_rep+0x42>
  } else if (cbor_value_is_array(&root_value)) {
 8002bda:	2b80      	cmp	r3, #128	; 0x80
 8002bdc:	d1eb      	bne.n	8002bb6 <oc_parse_rep+0x4a>
    err |= cbor_value_enter_container(&root_value, &map);
 8002bde:	a90d      	add	r1, sp, #52	; 0x34
 8002be0:	a805      	add	r0, sp, #20
 8002be2:	f000 fbf6 	bl	80033d2 <cbor_value_enter_container>
 8002be6:	9b01      	ldr	r3, [sp, #4]
    err |= cbor_value_enter_container(&map, &cur_value);
 8002be8:	a909      	add	r1, sp, #36	; 0x24
    err |= cbor_value_enter_container(&root_value, &map);
 8002bea:	4318      	orrs	r0, r3
 8002bec:	9001      	str	r0, [sp, #4]
    err |= cbor_value_enter_container(&map, &cur_value);
 8002bee:	a80d      	add	r0, sp, #52	; 0x34
 8002bf0:	f000 fbef 	bl	80033d2 <cbor_value_enter_container>
      (*cur)->type = OBJECT;
 8002bf4:	2706      	movs	r7, #6
    err |= cbor_value_enter_container(&map, &cur_value);
 8002bf6:	9b01      	ldr	r3, [sp, #4]
 8002bf8:	ae1a      	add	r6, sp, #104	; 0x68
 8002bfa:	4318      	orrs	r0, r3
 8002bfc:	f846 0d64 	str.w	r0, [r6, #-100]!
    *out_rep = 0;
 8002c00:	6025      	str	r5, [r4, #0]
    while (cbor_value_is_valid(&cur_value)) {
 8002c02:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 8002c06:	2bff      	cmp	r3, #255	; 0xff
 8002c08:	d0d5      	beq.n	8002bb6 <oc_parse_rep+0x4a>
      *cur = _alloc_rep();
 8002c0a:	f7ff fd49 	bl	80026a0 <_alloc_rep>
      (*cur)->type = OBJECT;
 8002c0e:	4601      	mov	r1, r0
      *cur = _alloc_rep();
 8002c10:	6020      	str	r0, [r4, #0]
      oc_parse_rep_value(&cur_value, &(*cur)->value_object, &err);
 8002c12:	4632      	mov	r2, r6
      (*cur)->type = OBJECT;
 8002c14:	f801 7b10 	strb.w	r7, [r1], #16
      oc_parse_rep_value(&cur_value, &(*cur)->value_object, &err);
 8002c18:	a809      	add	r0, sp, #36	; 0x24
 8002c1a:	f7ff fd91 	bl	8002740 <oc_parse_rep_value>
      err |= cbor_value_advance(&cur_value);
 8002c1e:	a809      	add	r0, sp, #36	; 0x24
 8002c20:	f000 fc8c 	bl	800353c <cbor_value_advance>
 8002c24:	9b01      	ldr	r3, [sp, #4]
 8002c26:	4318      	orrs	r0, r3
      (*cur)->next = 0;
 8002c28:	6823      	ldr	r3, [r4, #0]
      err |= cbor_value_advance(&cur_value);
 8002c2a:	9001      	str	r0, [sp, #4]
      (*cur)->next = 0;
 8002c2c:	605d      	str	r5, [r3, #4]
      cur = &(*cur)->next;
 8002c2e:	6824      	ldr	r4, [r4, #0]
 8002c30:	3404      	adds	r4, #4
 8002c32:	e7e6      	b.n	8002c02 <oc_parse_rep+0x96>

08002c34 <oc_rep_init>:

void
oc_rep_init(void)
{
 8002c34:	b507      	push	{r0, r1, r2, lr}
    os_mempool_init(&oc_rep_objects, EST_NUM_REP_OBJECTS,
 8002c36:	4b05      	ldr	r3, [pc, #20]	; (8002c4c <oc_rep_init+0x18>)
 8002c38:	2218      	movs	r2, #24
 8002c3a:	9300      	str	r3, [sp, #0]
 8002c3c:	2102      	movs	r1, #2
 8002c3e:	4b04      	ldr	r3, [pc, #16]	; (8002c50 <oc_rep_init+0x1c>)
 8002c40:	4804      	ldr	r0, [pc, #16]	; (8002c54 <oc_rep_init+0x20>)
 8002c42:	f001 fd5f 	bl	8004704 <os_mempool_init>
                    sizeof(oc_rep_t), oc_rep_objects_area, "oc_rep_o");
}
 8002c46:	b003      	add	sp, #12
 8002c48:	f85d fb04 	ldr.w	pc, [sp], #4
 8002c4c:	0800dca0 	.word	0x0800dca0
 8002c50:	20000788 	.word	0x20000788
 8002c54:	2000076c 	.word	0x2000076c

08002c58 <oc_new_string>:
#include "oic/port/mynewt/config.h"
#include "oic/oc_helpers.h"

void
oc_new_string(oc_string_t *os, const char str[])
{
 8002c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c5c:	4607      	mov	r7, r0
    int len = strlen(str);
 8002c5e:	4608      	mov	r0, r1
{
 8002c60:	460e      	mov	r6, r1
    int len = strlen(str);
 8002c62:	f002 fbb1 	bl	80053c8 <strlen>

    os->os_str = malloc(len + 1);
 8002c66:	f100 0801 	add.w	r8, r0, #1
    int len = strlen(str);
 8002c6a:	4604      	mov	r4, r0
    os->os_str = malloc(len + 1);
 8002c6c:	4640      	mov	r0, r8
 8002c6e:	f002 faf7 	bl	8005260 <malloc>
 8002c72:	4605      	mov	r5, r0
 8002c74:	6078      	str	r0, [r7, #4]
    if (os->os_str) {
 8002c76:	b138      	cbz	r0, 8002c88 <oc_new_string+0x30>
        os->os_sz = len + 1;
 8002c78:	f8a7 8000 	strh.w	r8, [r7]
        memcpy(os->os_str, str, len);
 8002c7c:	4622      	mov	r2, r4
 8002c7e:	4631      	mov	r1, r6
 8002c80:	f002 fb74 	bl	800536c <memcpy>
        os->os_str[len] = '\0';
 8002c84:	2300      	movs	r3, #0
 8002c86:	552b      	strb	r3, [r5, r4]
    }
}
 8002c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002c8c <oc_alloc_string>:

void
oc_alloc_string(oc_string_t *os, int size)
{
 8002c8c:	b538      	push	{r3, r4, r5, lr}
 8002c8e:	4604      	mov	r4, r0
    os->os_str = malloc(size);
 8002c90:	4608      	mov	r0, r1
{
 8002c92:	460d      	mov	r5, r1
    os->os_str = malloc(size);
 8002c94:	f002 fae4 	bl	8005260 <malloc>
 8002c98:	6060      	str	r0, [r4, #4]
    if (os->os_str) {
 8002c9a:	b100      	cbz	r0, 8002c9e <oc_alloc_string+0x12>
        os->os_sz = size;
 8002c9c:	8025      	strh	r5, [r4, #0]
    }
}
 8002c9e:	bd38      	pop	{r3, r4, r5, pc}

08002ca0 <oc_free_string>:

void
oc_free_string(oc_string_t *os)
{
 8002ca0:	b510      	push	{r4, lr}
 8002ca2:	4604      	mov	r4, r0
    free(os->os_str);
 8002ca4:	6840      	ldr	r0, [r0, #4]
 8002ca6:	f002 fb27 	bl	80052f8 <free>
    os->os_sz = 0;
 8002caa:	2300      	movs	r3, #0
 8002cac:	8023      	strh	r3, [r4, #0]
}
 8002cae:	bd10      	pop	{r4, pc}

08002cb0 <_oc_new_array>:
    concat->os_str[len1 + len2] = '\0';
}

void
_oc_new_array(oc_array_t *oa, uint8_t size, uint8_t elem_size)
{
 8002cb0:	b538      	push	{r3, r4, r5, lr}
    oa->oa_arr.b = malloc(size * elem_size);
 8002cb2:	fb02 f501 	mul.w	r5, r2, r1
{
 8002cb6:	4604      	mov	r4, r0
    oa->oa_arr.b = malloc(size * elem_size);
 8002cb8:	4628      	mov	r0, r5
 8002cba:	f002 fad1 	bl	8005260 <malloc>
 8002cbe:	6060      	str	r0, [r4, #4]
    if (oa->oa_arr.b) {
 8002cc0:	b100      	cbz	r0, 8002cc4 <_oc_new_array+0x14>
        oa->oa_sz = size * elem_size;
 8002cc2:	8025      	strh	r5, [r4, #0]
    }
}
 8002cc4:	bd38      	pop	{r3, r4, r5, pc}

08002cc6 <_oc_free_array>:

void _oc_free_array(oc_array_t *oa)
{
 8002cc6:	b510      	push	{r4, lr}
 8002cc8:	4604      	mov	r4, r0
    free(oa->oa_arr.b);
 8002cca:	6840      	ldr	r0, [r0, #4]
 8002ccc:	f002 fb14 	bl	80052f8 <free>
    oa->oa_sz = 0;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	8023      	strh	r3, [r4, #0]
}
 8002cd4:	bd10      	pop	{r4, pc}

08002cd6 <_oc_alloc_string_array>:

void
_oc_alloc_string_array(oc_string_array_t *osa, uint8_t size)
{
 8002cd6:	b570      	push	{r4, r5, r6, lr}
 8002cd8:	4604      	mov	r4, r0
    int i;
    int pos;

    _oc_new_array(osa, size, STRING_ARRAY_ITEM_MAX_LEN);
 8002cda:	2218      	movs	r2, #24
{
 8002cdc:	460d      	mov	r5, r1
    _oc_new_array(osa, size, STRING_ARRAY_ITEM_MAX_LEN);
 8002cde:	f7ff ffe7 	bl	8002cb0 <_oc_new_array>
    if (osa->oa_arr.s) {
 8002ce2:	6863      	ldr	r3, [r4, #4]
 8002ce4:	b943      	cbnz	r3, 8002cf8 <_oc_alloc_string_array+0x22>
        for (i = 0; i < size; i++) {
            pos = i * STRING_ARRAY_ITEM_MAX_LEN;
            osa->oa_arr.s[pos] = '\0';
        }
    }
}
 8002ce6:	bd70      	pop	{r4, r5, r6, pc}
            osa->oa_arr.s[pos] = '\0';
 8002ce8:	fb02 f003 	mul.w	r0, r2, r3
 8002cec:	6866      	ldr	r6, [r4, #4]
        for (i = 0; i < size; i++) {
 8002cee:	3301      	adds	r3, #1
            osa->oa_arr.s[pos] = '\0';
 8002cf0:	5431      	strb	r1, [r6, r0]
        for (i = 0; i < size; i++) {
 8002cf2:	429d      	cmp	r5, r3
 8002cf4:	dcf8      	bgt.n	8002ce8 <_oc_alloc_string_array+0x12>
 8002cf6:	e7f6      	b.n	8002ce6 <_oc_alloc_string_array+0x10>
 8002cf8:	2300      	movs	r3, #0
            osa->oa_arr.s[pos] = '\0';
 8002cfa:	2218      	movs	r2, #24
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	e7f8      	b.n	8002cf2 <_oc_alloc_string_array+0x1c>

08002d00 <sysinit_dflt_panic_cb>:
#include "os/mynewt.h"

static void
sysinit_dflt_panic_cb(const char *file, int line, const char *func,
                      const char *expr, const char *msg)
{
 8002d00:	b508      	push	{r3, lr}
    if (msg != NULL) {
        fprintf(stderr, "sysinit failure: %s\n", msg);
    }
#endif

    __assert_func(file, line, func, expr);
 8002d02:	f000 fed7 	bl	8003ab4 <__assert_func>
	...

08002d08 <sysinit_start>:
}

void
sysinit_start(void)
{
    sysinit_active = 1;
 8002d08:	2201      	movs	r2, #1
 8002d0a:	4b01      	ldr	r3, [pc, #4]	; (8002d10 <sysinit_start+0x8>)
 8002d0c:	701a      	strb	r2, [r3, #0]
}
 8002d0e:	4770      	bx	lr
 8002d10:	20003a30 	.word	0x20003a30

08002d14 <sysinit_end>:

void
sysinit_end(void)
{
    sysinit_active = 0;
 8002d14:	2200      	movs	r2, #0
 8002d16:	4b01      	ldr	r3, [pc, #4]	; (8002d1c <sysinit_end+0x8>)
 8002d18:	701a      	strb	r2, [r3, #0]
}
 8002d1a:	4770      	bx	lr
 8002d1c:	20003a30 	.word	0x20003a30

08002d20 <cbor_mbuf_reader_cpy>:
}

static uintptr_t
cbor_mbuf_reader_cpy(struct cbor_decoder_reader *d, char *dst, int offset,
                     size_t len)
{
 8002d20:	b538      	push	{r3, r4, r5, lr}
 8002d22:	461d      	mov	r5, r3
    int rc;
    struct cbor_mbuf_reader *cb = (struct cbor_mbuf_reader *) d;

    rc = os_mbuf_copydata(cb->m, offset + cb->init_off, len, dst);
 8002d24:	69c3      	ldr	r3, [r0, #28]
 8002d26:	6a00      	ldr	r0, [r0, #32]
 8002d28:	18d4      	adds	r4, r2, r3
 8002d2a:	460b      	mov	r3, r1
 8002d2c:	462a      	mov	r2, r5
 8002d2e:	4621      	mov	r1, r4
 8002d30:	f001 fb72 	bl	8004418 <os_mbuf_copydata>
    if (rc == 0) {
        return true;
    }
    return false;
}
 8002d34:	fab0 f080 	clz	r0, r0
 8002d38:	0940      	lsrs	r0, r0, #5
 8002d3a:	bd38      	pop	{r3, r4, r5, pc}

08002d3c <cbor_mbuf_reader_get8>:
{
 8002d3c:	b513      	push	{r0, r1, r4, lr}
    os_mbuf_copydata(cb->m, offset + cb->init_off, sizeof(val), &val);
 8002d3e:	69c4      	ldr	r4, [r0, #28]
 8002d40:	f10d 0307 	add.w	r3, sp, #7
 8002d44:	2201      	movs	r2, #1
 8002d46:	4421      	add	r1, r4
 8002d48:	6a00      	ldr	r0, [r0, #32]
 8002d4a:	f001 fb65 	bl	8004418 <os_mbuf_copydata>
}
 8002d4e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8002d52:	b002      	add	sp, #8
 8002d54:	bd10      	pop	{r4, pc}

08002d56 <cbor_mbuf_reader_cmp>:
{
 8002d56:	b510      	push	{r4, lr}
    return os_mbuf_cmpf(cb->m, offset + cb->init_off, buf, len) == 0;
 8002d58:	69c4      	ldr	r4, [r0, #28]
 8002d5a:	6a00      	ldr	r0, [r0, #32]
 8002d5c:	4414      	add	r4, r2
 8002d5e:	460a      	mov	r2, r1
 8002d60:	4621      	mov	r1, r4
 8002d62:	f001 fbca 	bl	80044fa <os_mbuf_cmpf>
}
 8002d66:	fab0 f080 	clz	r0, r0
 8002d6a:	0940      	lsrs	r0, r0, #5
 8002d6c:	bd10      	pop	{r4, pc}

08002d6e <cbor_mbuf_reader_get64>:
{
 8002d6e:	b513      	push	{r0, r1, r4, lr}
    os_mbuf_copydata(cb->m, offset + cb->init_off, sizeof(val), &val);
 8002d70:	69c4      	ldr	r4, [r0, #28]
 8002d72:	466b      	mov	r3, sp
 8002d74:	4421      	add	r1, r4
 8002d76:	2208      	movs	r2, #8
 8002d78:	6a00      	ldr	r0, [r0, #32]
 8002d7a:	f001 fb4d 	bl	8004418 <os_mbuf_copydata>
}
 8002d7e:	9801      	ldr	r0, [sp, #4]
 8002d80:	9900      	ldr	r1, [sp, #0]
 8002d82:	ba00      	rev	r0, r0
 8002d84:	ba09      	rev	r1, r1
 8002d86:	b002      	add	sp, #8
 8002d88:	bd10      	pop	{r4, pc}

08002d8a <cbor_mbuf_reader_get32>:
{
 8002d8a:	b513      	push	{r0, r1, r4, lr}
    os_mbuf_copydata(cb->m, offset + cb->init_off, sizeof(val), &val);
 8002d8c:	69c4      	ldr	r4, [r0, #28]
 8002d8e:	ab01      	add	r3, sp, #4
 8002d90:	2204      	movs	r2, #4
 8002d92:	4421      	add	r1, r4
 8002d94:	6a00      	ldr	r0, [r0, #32]
 8002d96:	f001 fb3f 	bl	8004418 <os_mbuf_copydata>
}
 8002d9a:	9801      	ldr	r0, [sp, #4]
 8002d9c:	ba00      	rev	r0, r0
 8002d9e:	b002      	add	sp, #8
 8002da0:	bd10      	pop	{r4, pc}

08002da2 <cbor_mbuf_reader_get16>:
{
 8002da2:	b513      	push	{r0, r1, r4, lr}
    os_mbuf_copydata(cb->m, offset + cb->init_off, sizeof(val), &val);
 8002da4:	69c4      	ldr	r4, [r0, #28]
 8002da6:	f10d 0306 	add.w	r3, sp, #6
 8002daa:	2202      	movs	r2, #2
 8002dac:	4421      	add	r1, r4
 8002dae:	6a00      	ldr	r0, [r0, #32]
 8002db0:	f001 fb32 	bl	8004418 <os_mbuf_copydata>
    return cbor_ntohs(val);
 8002db4:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8002db8:	ba40      	rev16	r0, r0
}
 8002dba:	b280      	uxth	r0, r0
 8002dbc:	b002      	add	sp, #8
 8002dbe:	bd10      	pop	{r4, pc}

08002dc0 <cbor_mbuf_reader_init>:

void
cbor_mbuf_reader_init(struct cbor_mbuf_reader *cb, struct os_mbuf *m,
                      int initial_offset)
{
 8002dc0:	b508      	push	{r3, lr}
    struct os_mbuf_pkthdr *hdr;

    cb->r.get8 = &cbor_mbuf_reader_get8;
 8002dc2:	4b0d      	ldr	r3, [pc, #52]	; (8002df8 <cbor_mbuf_reader_init+0x38>)
 8002dc4:	6003      	str	r3, [r0, #0]
    cb->r.get16 = &cbor_mbuf_reader_get16;
 8002dc6:	4b0d      	ldr	r3, [pc, #52]	; (8002dfc <cbor_mbuf_reader_init+0x3c>)
 8002dc8:	6043      	str	r3, [r0, #4]
    cb->r.get32 = &cbor_mbuf_reader_get32;
 8002dca:	4b0d      	ldr	r3, [pc, #52]	; (8002e00 <cbor_mbuf_reader_init+0x40>)
 8002dcc:	6083      	str	r3, [r0, #8]
    cb->r.get64 = &cbor_mbuf_reader_get64;
 8002dce:	4b0d      	ldr	r3, [pc, #52]	; (8002e04 <cbor_mbuf_reader_init+0x44>)
 8002dd0:	60c3      	str	r3, [r0, #12]
    cb->r.cmp = &cbor_mbuf_reader_cmp;
 8002dd2:	4b0d      	ldr	r3, [pc, #52]	; (8002e08 <cbor_mbuf_reader_init+0x48>)
 8002dd4:	6103      	str	r3, [r0, #16]
    cb->r.cpy = &cbor_mbuf_reader_cpy;
 8002dd6:	4b0d      	ldr	r3, [pc, #52]	; (8002e0c <cbor_mbuf_reader_init+0x4c>)
 8002dd8:	6143      	str	r3, [r0, #20]

    assert(OS_MBUF_IS_PKTHDR(m));
 8002dda:	794b      	ldrb	r3, [r1, #5]
 8002ddc:	2b07      	cmp	r3, #7
 8002dde:	d805      	bhi.n	8002dec <cbor_mbuf_reader_init+0x2c>
 8002de0:	2300      	movs	r3, #0
 8002de2:	461a      	mov	r2, r3
 8002de4:	4619      	mov	r1, r3
 8002de6:	4618      	mov	r0, r3
 8002de8:	f000 fe64 	bl	8003ab4 <__assert_func>
    hdr = OS_MBUF_PKTHDR(m);
    cb->m = m;
    cb->init_off = initial_offset;
    cb->r.message_size = hdr->omp_len - initial_offset;
 8002dec:	8a0b      	ldrh	r3, [r1, #16]
    cb->init_off = initial_offset;
 8002dee:	e9c0 2107 	strd	r2, r1, [r0, #28]
    cb->r.message_size = hdr->omp_len - initial_offset;
 8002df2:	1a9a      	subs	r2, r3, r2
 8002df4:	6182      	str	r2, [r0, #24]
}
 8002df6:	bd08      	pop	{r3, pc}
 8002df8:	08002d3d 	.word	0x08002d3d
 8002dfc:	08002da3 	.word	0x08002da3
 8002e00:	08002d8b 	.word	0x08002d8b
 8002e04:	08002d6f 	.word	0x08002d6f
 8002e08:	08002d57 	.word	0x08002d57
 8002e0c:	08002d21 	.word	0x08002d21

08002e10 <cbor_mbuf_writer>:
#include <tinycbor/cbor.h>
#include <tinycbor/cbor_mbuf_writer.h>

int
cbor_mbuf_writer(struct cbor_encoder_writer *arg, const char *data, int len)
{
 8002e10:	b538      	push	{r3, r4, r5, lr}
 8002e12:	4604      	mov	r4, r0
 8002e14:	4615      	mov	r5, r2
    int rc;
    struct cbor_mbuf_writer *cb = (struct cbor_mbuf_writer *) arg;

    rc = os_mbuf_append(cb->m, data, len);
 8002e16:	6880      	ldr	r0, [r0, #8]
 8002e18:	b292      	uxth	r2, r2
 8002e1a:	f001 fa6a 	bl	80042f2 <os_mbuf_append>
    if (rc) {
 8002e1e:	b918      	cbnz	r0, 8002e28 <cbor_mbuf_writer+0x18>
        return CborErrorOutOfMemory;
    }
    cb->enc.bytes_written += len;
 8002e20:	6862      	ldr	r2, [r4, #4]
 8002e22:	442a      	add	r2, r5
 8002e24:	6062      	str	r2, [r4, #4]
    return CborNoError;
}
 8002e26:	bd38      	pop	{r3, r4, r5, pc}
        return CborErrorOutOfMemory;
 8002e28:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8002e2c:	e7fb      	b.n	8002e26 <cbor_mbuf_writer+0x16>
	...

08002e30 <cbor_mbuf_writer_init>:

void
cbor_mbuf_writer_init(struct cbor_mbuf_writer *cb, struct os_mbuf *m)
{
    cb->m = m;
    cb->enc.bytes_written = 0;
 8002e30:	2300      	movs	r3, #0
 8002e32:	6043      	str	r3, [r0, #4]
    cb->enc.write = &cbor_mbuf_writer;
 8002e34:	4b01      	ldr	r3, [pc, #4]	; (8002e3c <cbor_mbuf_writer_init+0xc>)
    cb->m = m;
 8002e36:	6081      	str	r1, [r0, #8]
    cb->enc.write = &cbor_mbuf_writer;
 8002e38:	6003      	str	r3, [r0, #0]
}
 8002e3a:	4770      	bx	lr
 8002e3c:	08002e11 	.word	0x08002e11

08002e40 <append_to_buffer.isra.1>:
{
    v = cbor_htonll(v);
    memcpy(where, &v, sizeof(v));
}

static inline CborError append_to_buffer(CborEncoder *encoder, const void *data, size_t len)
 8002e40:	b510      	push	{r4, lr}
{
    assert(encoder->writer);
 8002e42:	4603      	mov	r3, r0
 8002e44:	b918      	cbnz	r0, 8002e4e <append_to_buffer.isra.1+0xe>
 8002e46:	4602      	mov	r2, r0
 8002e48:	4601      	mov	r1, r0
 8002e4a:	f000 fe33 	bl	8003ab4 <__assert_func>
    return encoder->writer->write(encoder->writer, data, len);
 8002e4e:	6803      	ldr	r3, [r0, #0]
}
 8002e50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return encoder->writer->write(encoder->writer, data, len);
 8002e54:	4718      	bx	r3

08002e56 <encode_number_no_update>:
{
    return append_to_buffer(encoder, &byte, 1);
}

static inline CborError encode_number_no_update(CborEncoder *encoder, uint64_t ui, uint8_t shiftedMajorType)
{
 8002e56:	b5df      	push	{r0, r1, r2, r3, r4, r6, r7, lr}
 8002e58:	461f      	mov	r7, r3
 8002e5a:	4616      	mov	r6, r2
    uint64_t buf[2];
    uint8_t *const bufend = (uint8_t *)buf + sizeof(buf);
    uint8_t *bufstart = bufend - 1;
    put64(buf + 1, ui);     /* we probably have a bunch of zeros in the beginning */

    if (ui < Value8Bit) {
 8002e5c:	2f00      	cmp	r7, #0
    v = cbor_htonll(v);
 8002e5e:	ba39      	rev	r1, r7
 8002e60:	ba12      	rev	r2, r2
    if (ui < Value8Bit) {
 8002e62:	bf08      	it	eq
 8002e64:	2e18      	cmpeq	r6, #24
    memcpy(where, &v, sizeof(v));
 8002e66:	e9cd 1202 	strd	r1, r2, [sp, #8]
{
 8002e6a:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8002e6e:	f10d 010f 	add.w	r1, sp, #15
    if (ui < Value8Bit) {
 8002e72:	d20a      	bcs.n	8002e8a <encode_number_no_update+0x34>
        *bufstart += shiftedMajorType;
 8002e74:	eb03 6312 	add.w	r3, r3, r2, lsr #24
 8002e78:	f88d 300f 	strb.w	r3, [sp, #15]
            ++more;
        bufstart -= (size_t)1 << more;
        *bufstart = shiftedMajorType + Value8Bit + more;
    }

    return append_to_buffer(encoder, bufstart, bufend - bufstart);
 8002e7c:	ab04      	add	r3, sp, #16
 8002e7e:	1a5a      	subs	r2, r3, r1
 8002e80:	6800      	ldr	r0, [r0, #0]
 8002e82:	f7ff ffdd 	bl	8002e40 <append_to_buffer.isra.1>
}
 8002e86:	b004      	add	sp, #16
 8002e88:	bdd0      	pop	{r4, r6, r7, pc}
        if (ui > 0xffU)
 8002e8a:	2f00      	cmp	r7, #0
 8002e8c:	bf08      	it	eq
 8002e8e:	f5b6 7f80 	cmpeq.w	r6, #256	; 0x100
 8002e92:	bf2c      	ite	cs
 8002e94:	2401      	movcs	r4, #1
 8002e96:	2400      	movcc	r4, #0
        if (ui > 0xffffU)
 8002e98:	2f00      	cmp	r7, #0
 8002e9a:	bf08      	it	eq
 8002e9c:	f5b6 3f80 	cmpeq.w	r6, #65536	; 0x10000
 8002ea0:	d305      	bcc.n	8002eae <encode_number_no_update+0x58>
        if (ui > 0xffffffffU)
 8002ea2:	2f01      	cmp	r7, #1
 8002ea4:	bf08      	it	eq
 8002ea6:	2e00      	cmpeq	r6, #0
            ++more;
 8002ea8:	bf34      	ite	cc
 8002eaa:	3401      	addcc	r4, #1
            ++more;
 8002eac:	3402      	addcs	r4, #2
        bufstart -= (size_t)1 << more;
 8002eae:	2201      	movs	r2, #1
        *bufstart = shiftedMajorType + Value8Bit + more;
 8002eb0:	3318      	adds	r3, #24
        bufstart -= (size_t)1 << more;
 8002eb2:	40a2      	lsls	r2, r4
 8002eb4:	1a89      	subs	r1, r1, r2
        *bufstart = shiftedMajorType + Value8Bit + more;
 8002eb6:	4423      	add	r3, r4
 8002eb8:	700b      	strb	r3, [r1, #0]
 8002eba:	e7df      	b.n	8002e7c <encode_number_no_update+0x26>

08002ebc <encode_number>:

static inline CborError encode_number(CborEncoder *encoder, uint64_t ui, uint8_t shiftedMajorType)
{
 8002ebc:	b430      	push	{r4, r5}
    ++encoder->added;
 8002ebe:	6881      	ldr	r1, [r0, #8]
{
 8002ec0:	f89d 5008 	ldrb.w	r5, [sp, #8]
    ++encoder->added;
 8002ec4:	3101      	adds	r1, #1
 8002ec6:	6081      	str	r1, [r0, #8]
    return encode_number_no_update(encoder, ui, shiftedMajorType);
 8002ec8:	9502      	str	r5, [sp, #8]
}
 8002eca:	bc30      	pop	{r4, r5}
    return encode_number_no_update(encoder, ui, shiftedMajorType);
 8002ecc:	f7ff bfc3 	b.w	8002e56 <encode_number_no_update>

08002ed0 <create_container>:

#ifdef __GNUC__
__attribute__((noinline))
#endif
static CborError create_container(CborEncoder *encoder, CborEncoder *container, size_t length, uint8_t shiftedMajorType)
{
 8002ed0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    CborError err;
    container->writer = encoder->writer;
    ++encoder->added;
    container->added = 0;
 8002ed2:	2500      	movs	r5, #0
    ++encoder->added;
 8002ed4:	6884      	ldr	r4, [r0, #8]
    container->writer = encoder->writer;
 8002ed6:	6806      	ldr	r6, [r0, #0]
    ++encoder->added;
 8002ed8:	3401      	adds	r4, #1
    container->writer = encoder->writer;
 8002eda:	600e      	str	r6, [r1, #0]
    ++encoder->added;
 8002edc:	6084      	str	r4, [r0, #8]
 8002ede:	f003 0420 	and.w	r4, r3, #32

    cbor_static_assert(((MapType << MajorTypeShift) & CborIteratorFlag_ContainerIsMap) == CborIteratorFlag_ContainerIsMap);
    cbor_static_assert(((ArrayType << MajorTypeShift) & CborIteratorFlag_ContainerIsMap) == 0);
    container->flags = shiftedMajorType & CborIteratorFlag_ContainerIsMap;

    if (length == CborIndefiniteLength) {
 8002ee2:	1c50      	adds	r0, r2, #1
    container->added = 0;
 8002ee4:	608d      	str	r5, [r1, #8]
    container->flags = shiftedMajorType & CborIteratorFlag_ContainerIsMap;
 8002ee6:	60cc      	str	r4, [r1, #12]
    if (length == CborIndefiniteLength) {
 8002ee8:	d10d      	bne.n	8002f06 <create_container+0x36>
        container->flags |= CborIteratorFlag_UnknownLength;
 8002eea:	f044 0404 	orr.w	r4, r4, #4
 8002eee:	60cc      	str	r4, [r1, #12]
        err = append_byte_to_buffer(container, shiftedMajorType + IndefiniteLength);
 8002ef0:	331f      	adds	r3, #31
 8002ef2:	a904      	add	r1, sp, #16
 8002ef4:	f801 3d01 	strb.w	r3, [r1, #-1]!
    return append_to_buffer(encoder, &byte, 1);
 8002ef8:	2201      	movs	r2, #1
 8002efa:	4630      	mov	r0, r6
 8002efc:	f7ff ffa0 	bl	8002e40 <append_to_buffer.isra.1>
    }
    if (err && !isOomError(err))
        return err;

    return CborNoError;
}
 8002f00:	2000      	movs	r0, #0
 8002f02:	b004      	add	sp, #16
 8002f04:	bd70      	pop	{r4, r5, r6, pc}
        err = encode_number_no_update(container, length, shiftedMajorType);
 8002f06:	9300      	str	r3, [sp, #0]
 8002f08:	4608      	mov	r0, r1
 8002f0a:	462b      	mov	r3, r5
 8002f0c:	f7ff ffa3 	bl	8002e56 <encode_number_no_update>
 8002f10:	e7f6      	b.n	8002f00 <create_container+0x30>

08002f12 <cbor_encoder_init>:
    encoder->added = 0;
 8002f12:	2300      	movs	r3, #0
    encoder->writer = writer;
 8002f14:	6001      	str	r1, [r0, #0]
    encoder->flags = flags;
 8002f16:	e9c0 3202 	strd	r3, r2, [r0, #8]
}
 8002f1a:	4770      	bx	lr

08002f1c <cbor_encode_int>:
{
 8002f1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002f1e:	461f      	mov	r7, r3
    uint64_t ui = value >> 63;              /* extend sign to whole length */
 8002f20:	17db      	asrs	r3, r3, #31
 8002f22:	461c      	mov	r4, r3
    return encode_number(encoder, ui, majorType);
 8002f24:	f003 0320 	and.w	r3, r3, #32
 8002f28:	9300      	str	r3, [sp, #0]
 8002f2a:	4062      	eors	r2, r4
 8002f2c:	ea87 0304 	eor.w	r3, r7, r4
 8002f30:	f7ff ffc4 	bl	8002ebc <encode_number>
}
 8002f34:	b003      	add	sp, #12
 8002f36:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002f38 <cbor_encode_text_string>:
    CborError err = encode_number(encoder, length, shiftedMajorType);
 8002f38:	2360      	movs	r3, #96	; 0x60
{
 8002f3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002f3c:	460d      	mov	r5, r1
 8002f3e:	4616      	mov	r6, r2
 8002f40:	4604      	mov	r4, r0
    CborError err = encode_number(encoder, length, shiftedMajorType);
 8002f42:	9300      	str	r3, [sp, #0]
 8002f44:	2300      	movs	r3, #0
 8002f46:	f7ff ffb9 	bl	8002ebc <encode_number>
    return append_to_buffer(encoder, string, length);
 8002f4a:	4632      	mov	r2, r6
 8002f4c:	4629      	mov	r1, r5
 8002f4e:	6820      	ldr	r0, [r4, #0]
}
 8002f50:	b002      	add	sp, #8
 8002f52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return append_to_buffer(encoder, string, length);
 8002f56:	f7ff bf73 	b.w	8002e40 <append_to_buffer.isra.1>
	...

08002f5c <cbor_encoder_create_map>:
 *
 * \sa cbor_encoder_create_array
 */
CborError cbor_encoder_create_map(CborEncoder *encoder, CborEncoder *mapEncoder, size_t length)
{
    if (length != CborIndefiniteLength && length > SIZE_MAX / 2)
 8002f5c:	4b06      	ldr	r3, [pc, #24]	; (8002f78 <cbor_encoder_create_map+0x1c>)
{
 8002f5e:	b410      	push	{r4}
    if (length != CborIndefiniteLength && length > SIZE_MAX / 2)
 8002f60:	f102 4400 	add.w	r4, r2, #2147483648	; 0x80000000
 8002f64:	429c      	cmp	r4, r3
 8002f66:	d903      	bls.n	8002f70 <cbor_encoder_create_map+0x14>
        return CborErrorDataTooLarge;
    return create_container(encoder, mapEncoder, length, MapType << MajorTypeShift);
 8002f68:	23a0      	movs	r3, #160	; 0xa0
}
 8002f6a:	bc10      	pop	{r4}
    return create_container(encoder, mapEncoder, length, MapType << MajorTypeShift);
 8002f6c:	f7ff bfb0 	b.w	8002ed0 <create_container>
}
 8002f70:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002f74:	bc10      	pop	{r4}
 8002f76:	4770      	bx	lr
 8002f78:	7ffffffe 	.word	0x7ffffffe

08002f7c <cbor_encoder_close_container>:
 *
 * \sa cbor_encoder_create_array(), cbor_encoder_create_map()
 */
CborError cbor_encoder_close_container(CborEncoder *encoder, const CborEncoder *containerEncoder)
{
    encoder->writer = containerEncoder->writer;
 8002f7c:	680b      	ldr	r3, [r1, #0]
{
 8002f7e:	b507      	push	{r0, r1, r2, lr}
    encoder->writer = containerEncoder->writer;
 8002f80:	6003      	str	r3, [r0, #0]

    if (containerEncoder->flags & CborIteratorFlag_UnknownLength)
 8002f82:	68c8      	ldr	r0, [r1, #12]
 8002f84:	f010 0004 	ands.w	r0, r0, #4
 8002f88:	d007      	beq.n	8002f9a <cbor_encoder_close_container+0x1e>
 8002f8a:	22ff      	movs	r2, #255	; 0xff
 8002f8c:	a902      	add	r1, sp, #8
 8002f8e:	f801 2d01 	strb.w	r2, [r1, #-1]!
    return append_to_buffer(encoder, &byte, 1);
 8002f92:	4618      	mov	r0, r3
 8002f94:	2201      	movs	r2, #1
 8002f96:	f7ff ff53 	bl	8002e40 <append_to_buffer.isra.1>
        return append_byte_to_buffer(encoder, BreakByte);
    return CborNoError;
}
 8002f9a:	b003      	add	sp, #12
 8002f9c:	f85d fb04 	ldr.w	pc, [sp], #4

08002fa0 <is_fixed_type>:
    return CborNoError;
}

static bool is_fixed_type(uint8_t type)
{
    return type != CborTextStringType && type != CborByteStringType && type != CborArrayType &&
 8002fa0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8002fa4:	2840      	cmp	r0, #64	; 0x40
 8002fa6:	d003      	beq.n	8002fb0 <is_fixed_type+0x10>
 8002fa8:	3880      	subs	r0, #128	; 0x80
 8002faa:	bf18      	it	ne
 8002fac:	2001      	movne	r0, #1
 8002fae:	4770      	bx	lr
 8002fb0:	2000      	movs	r0, #0
           type != CborMapType;
}
 8002fb2:	4770      	bx	lr

08002fb4 <iterate_noop>:
    (void)d;
    (void)dst;
    (void)src_offset;
    (void)len;
    return true;
}
 8002fb4:	2001      	movs	r0, #1
 8002fb6:	4770      	bx	lr

08002fb8 <preparse_value>:
    it->type = CborInvalidType;
 8002fb8:	23ff      	movs	r3, #255	; 0xff
{
 8002fba:	b570      	push	{r4, r5, r6, lr}
    const CborParser *parser = it->parser;
 8002fbc:	6805      	ldr	r5, [r0, #0]
    it->type = CborInvalidType;
 8002fbe:	7383      	strb	r3, [r0, #14]
    if (it->offset == parser->end)
 8002fc0:	6841      	ldr	r1, [r0, #4]
 8002fc2:	686b      	ldr	r3, [r5, #4]
{
 8002fc4:	4604      	mov	r4, r0
    if (it->offset == parser->end)
 8002fc6:	4299      	cmp	r1, r3
 8002fc8:	d102      	bne.n	8002fd0 <preparse_value+0x18>
        return CborErrorUnexpectedEOF;
 8002fca:	f240 1001 	movw	r0, #257	; 0x101
}
 8002fce:	bd70      	pop	{r4, r5, r6, pc}
    uint8_t descriptor = parser->d->get8(parser->d, it->offset);
 8002fd0:	6828      	ldr	r0, [r5, #0]
 8002fd2:	6803      	ldr	r3, [r0, #0]
 8002fd4:	4798      	blx	r3
    it->flags = 0;
 8002fd6:	2300      	movs	r3, #0
    uint8_t type = descriptor & MajorTypeMask;
 8002fd8:	f000 02e0 	and.w	r2, r0, #224	; 0xe0
    it->extra = (descriptor &= SmallValueMask);
 8002fdc:	f000 001f 	and.w	r0, r0, #31
    if (descriptor > Value64Bit) {
 8002fe0:	281b      	cmp	r0, #27
    it->type = type;
 8002fe2:	73a2      	strb	r2, [r4, #14]
    it->flags = 0;
 8002fe4:	73e3      	strb	r3, [r4, #15]
    it->extra = (descriptor &= SmallValueMask);
 8002fe6:	81a0      	strh	r0, [r4, #12]
    if (descriptor > Value64Bit) {
 8002fe8:	d917      	bls.n	800301a <preparse_value+0x62>
        if (unlikely(descriptor != IndefiniteLength))
 8002fea:	281f      	cmp	r0, #31
 8002fec:	d007      	beq.n	8002ffe <preparse_value+0x46>
            return type == CborSimpleType ? CborErrorUnknownType : CborErrorIllegalNumber;
 8002fee:	f240 1005 	movw	r0, #261	; 0x105
 8002ff2:	f240 1303 	movw	r3, #259	; 0x103
 8002ff6:	2ae0      	cmp	r2, #224	; 0xe0
 8002ff8:	bf08      	it	eq
 8002ffa:	4618      	moveq	r0, r3
 8002ffc:	e7e7      	b.n	8002fce <preparse_value+0x16>
        if (likely(!is_fixed_type(type))) {
 8002ffe:	4610      	mov	r0, r2
 8003000:	f7ff ffce 	bl	8002fa0 <is_fixed_type>
 8003004:	b910      	cbnz	r0, 800300c <preparse_value+0x54>
            it->flags |= CborIteratorFlag_UnknownLength;
 8003006:	2304      	movs	r3, #4
 8003008:	73e3      	strb	r3, [r4, #15]
            return CborNoError;
 800300a:	e7e0      	b.n	8002fce <preparse_value+0x16>
        return type == CborSimpleType ? CborErrorUnexpectedBreak : CborErrorIllegalNumber;
 800300c:	2ae0      	cmp	r2, #224	; 0xe0
 800300e:	f240 1005 	movw	r0, #261	; 0x105
 8003012:	bf08      	it	eq
 8003014:	f44f 7081 	moveq.w	r0, #258	; 0x102
 8003018:	e7d9      	b.n	8002fce <preparse_value+0x16>
    size_t bytesNeeded = descriptor < Value8Bit ? 0 : (1 << (descriptor - Value8Bit));
 800301a:	2817      	cmp	r0, #23
 800301c:	bf82      	ittt	hi
 800301e:	2301      	movhi	r3, #1
 8003020:	f1a0 0118 	subhi.w	r1, r0, #24
 8003024:	408b      	lslhi	r3, r1
    if (bytesNeeded + 1 > (size_t)(parser->end - it->offset))
 8003026:	686e      	ldr	r6, [r5, #4]
 8003028:	6861      	ldr	r1, [r4, #4]
 800302a:	3301      	adds	r3, #1
 800302c:	1a76      	subs	r6, r6, r1
 800302e:	42b3      	cmp	r3, r6
 8003030:	d8cb      	bhi.n	8002fca <preparse_value+0x12>
    uint8_t majortype = type >> MajorTypeShift;
 8003032:	0952      	lsrs	r2, r2, #5
    if (majortype == NegativeIntegerType) {
 8003034:	2a01      	cmp	r2, #1
 8003036:	d10c      	bne.n	8003052 <preparse_value+0x9a>
        it->type = CborIntegerType;
 8003038:	f44f 7300 	mov.w	r3, #512	; 0x200
 800303c:	81e3      	strh	r3, [r4, #14]
    if (descriptor < Value8Bit)
 800303e:	2817      	cmp	r0, #23
 8003040:	d91d      	bls.n	800307e <preparse_value+0xc6>
    if (descriptor == Value8Bit)
 8003042:	2818      	cmp	r0, #24
 8003044:	d12a      	bne.n	800309c <preparse_value+0xe4>
        it->extra = parser->d->get8(parser->d, it->offset + 1);
 8003046:	6828      	ldr	r0, [r5, #0]
 8003048:	6803      	ldr	r3, [r0, #0]
        it->extra = parser->d->get16(parser->d, it->offset + 1);
 800304a:	3101      	adds	r1, #1
 800304c:	4798      	blx	r3
 800304e:	81a0      	strh	r0, [r4, #12]
 8003050:	e015      	b.n	800307e <preparse_value+0xc6>
    } else if (majortype == SimpleTypesType) {
 8003052:	2a07      	cmp	r2, #7
 8003054:	d1f3      	bne.n	800303e <preparse_value+0x86>
        switch (descriptor) {
 8003056:	3814      	subs	r0, #20
 8003058:	2807      	cmp	r0, #7
 800305a:	d810      	bhi.n	800307e <preparse_value+0xc6>
 800305c:	e8df f000 	tbb	[pc, r0]
 8003060:	0b0b0b04 	.word	0x0b0b0b04
 8003064:	09090b11 	.word	0x09090b11
            it->extra = false;
 8003068:	2000      	movs	r0, #0
            it->type = CborBooleanType;
 800306a:	23f5      	movs	r3, #245	; 0xf5
            it->extra = false;
 800306c:	81a0      	strh	r0, [r4, #12]
            it->type = CborBooleanType;
 800306e:	73a3      	strb	r3, [r4, #14]
            break;
 8003070:	e7ad      	b.n	8002fce <preparse_value+0x16>
            it->flags |= CborIteratorFlag_IntegerValueTooLarge;
 8003072:	2301      	movs	r3, #1
 8003074:	73e3      	strb	r3, [r4, #15]
            it->type = parser->d->get8(parser->d, it->offset);
 8003076:	6828      	ldr	r0, [r5, #0]
 8003078:	6803      	ldr	r3, [r0, #0]
 800307a:	4798      	blx	r3
 800307c:	73a0      	strb	r0, [r4, #14]
        return CborNoError;
 800307e:	2000      	movs	r0, #0
 8003080:	e7a5      	b.n	8002fce <preparse_value+0x16>
            it->extra = parser->d->get8(parser->d, it->offset + 1);
 8003082:	6828      	ldr	r0, [r5, #0]
 8003084:	3101      	adds	r1, #1
 8003086:	6803      	ldr	r3, [r0, #0]
 8003088:	4798      	blx	r3
 800308a:	b280      	uxth	r0, r0
            if (unlikely(it->extra < 32)) {
 800308c:	281f      	cmp	r0, #31
            it->extra = parser->d->get8(parser->d, it->offset + 1);
 800308e:	81a0      	strh	r0, [r4, #12]
            if (unlikely(it->extra < 32)) {
 8003090:	d8f5      	bhi.n	800307e <preparse_value+0xc6>
                it->type = CborInvalidType;
 8003092:	23ff      	movs	r3, #255	; 0xff
                return CborErrorIllegalSimpleType;
 8003094:	f44f 7083 	mov.w	r0, #262	; 0x106
                it->type = CborInvalidType;
 8003098:	73a3      	strb	r3, [r4, #14]
                return CborErrorIllegalSimpleType;
 800309a:	e798      	b.n	8002fce <preparse_value+0x16>
    else if (descriptor == Value16Bit)
 800309c:	2819      	cmp	r0, #25
 800309e:	d102      	bne.n	80030a6 <preparse_value+0xee>
        it->extra = parser->d->get16(parser->d, it->offset + 1);
 80030a0:	6828      	ldr	r0, [r5, #0]
 80030a2:	6843      	ldr	r3, [r0, #4]
 80030a4:	e7d1      	b.n	800304a <preparse_value+0x92>
        it->flags |= CborIteratorFlag_IntegerValueTooLarge;     /* Value32Bit or Value64Bit */
 80030a6:	7be3      	ldrb	r3, [r4, #15]
 80030a8:	f043 0301 	orr.w	r3, r3, #1
 80030ac:	73e3      	strb	r3, [r4, #15]
 80030ae:	e7e6      	b.n	800307e <preparse_value+0xc6>

080030b0 <extract_number>:
    memcpy(&result, ptr, sizeof(result));
    return cbor_ntohll(result);
}

static inline CborError extract_number(const CborParser *p, int *offset, uint64_t *len)
{
 80030b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030b2:	4607      	mov	r7, r0
    uint8_t additional_information = p->d->get8(p->d, *offset) & SmallValueMask;
 80030b4:	6800      	ldr	r0, [r0, #0]
{
 80030b6:	460e      	mov	r6, r1
    uint8_t additional_information = p->d->get8(p->d, *offset) & SmallValueMask;
 80030b8:	6803      	ldr	r3, [r0, #0]
 80030ba:	6809      	ldr	r1, [r1, #0]
{
 80030bc:	4615      	mov	r5, r2
    uint8_t additional_information = p->d->get8(p->d, *offset) & SmallValueMask;
 80030be:	4798      	blx	r3
    ++*offset;
    *len = 1;
 80030c0:	2201      	movs	r2, #1
 80030c2:	2300      	movs	r3, #0
    ++*offset;
 80030c4:	6831      	ldr	r1, [r6, #0]
    uint8_t additional_information = p->d->get8(p->d, *offset) & SmallValueMask;
 80030c6:	f000 001f 	and.w	r0, r0, #31
    ++*offset;
 80030ca:	3101      	adds	r1, #1
    if (additional_information < Value8Bit) {
 80030cc:	2817      	cmp	r0, #23
    ++*offset;
 80030ce:	6031      	str	r1, [r6, #0]
    *len = 1;
 80030d0:	e9c5 2300 	strd	r2, r3, [r5]
    if (additional_information < Value8Bit) {
 80030d4:	d805      	bhi.n	80030e2 <extract_number+0x32>
        *len = additional_information;
 80030d6:	2100      	movs	r1, #0
 80030d8:	b2c0      	uxtb	r0, r0
 80030da:	e9c5 0100 	strd	r0, r1, [r5]
        *len =  p->d->get32(p->d, *offset);
    } else {
        *len =  p->d->get64(p->d, *offset);
    }
    *offset += bytesNeeded;
    return CborNoError;
 80030de:	2000      	movs	r0, #0
}
 80030e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (unlikely(additional_information > Value64Bit))
 80030e2:	281b      	cmp	r0, #27
 80030e4:	d824      	bhi.n	8003130 <extract_number+0x80>
    size_t bytesNeeded = (size_t)(1 << (additional_information - Value8Bit));
 80030e6:	2401      	movs	r4, #1
    if (unlikely(bytesNeeded > (size_t)(p->end - *offset))) {
 80030e8:	687b      	ldr	r3, [r7, #4]
    size_t bytesNeeded = (size_t)(1 << (additional_information - Value8Bit));
 80030ea:	3818      	subs	r0, #24
 80030ec:	4084      	lsls	r4, r0
    if (unlikely(bytesNeeded > (size_t)(p->end - *offset))) {
 80030ee:	1a5b      	subs	r3, r3, r1
 80030f0:	42a3      	cmp	r3, r4
 80030f2:	d320      	bcc.n	8003136 <extract_number+0x86>
    } else if (bytesNeeded == 1) {
 80030f4:	2c01      	cmp	r4, #1
 80030f6:	6838      	ldr	r0, [r7, #0]
 80030f8:	d106      	bne.n	8003108 <extract_number+0x58>
        *len = p->d->get8(p->d, *offset);
 80030fa:	6803      	ldr	r3, [r0, #0]
 80030fc:	4798      	blx	r3
 80030fe:	b2c0      	uxtb	r0, r0
        *len =  p->d->get16(p->d, *offset);
 8003100:	2100      	movs	r1, #0
        *len =  p->d->get64(p->d, *offset);
 8003102:	e9c5 0100 	strd	r0, r1, [r5]
 8003106:	e00c      	b.n	8003122 <extract_number+0x72>
    } else if (bytesNeeded == 2) {
 8003108:	2c02      	cmp	r4, #2
 800310a:	d103      	bne.n	8003114 <extract_number+0x64>
        *len =  p->d->get16(p->d, *offset);
 800310c:	6843      	ldr	r3, [r0, #4]
 800310e:	4798      	blx	r3
 8003110:	b280      	uxth	r0, r0
 8003112:	e7f5      	b.n	8003100 <extract_number+0x50>
    } else if (bytesNeeded == 4) {
 8003114:	2c04      	cmp	r4, #4
 8003116:	d108      	bne.n	800312a <extract_number+0x7a>
        *len =  p->d->get32(p->d, *offset);
 8003118:	6883      	ldr	r3, [r0, #8]
 800311a:	4798      	blx	r3
 800311c:	2300      	movs	r3, #0
 800311e:	6028      	str	r0, [r5, #0]
 8003120:	606b      	str	r3, [r5, #4]
    *offset += bytesNeeded;
 8003122:	6830      	ldr	r0, [r6, #0]
 8003124:	4420      	add	r0, r4
 8003126:	6030      	str	r0, [r6, #0]
 8003128:	e7d9      	b.n	80030de <extract_number+0x2e>
        *len =  p->d->get64(p->d, *offset);
 800312a:	68c3      	ldr	r3, [r0, #12]
 800312c:	4798      	blx	r3
 800312e:	e7e8      	b.n	8003102 <extract_number+0x52>
        return CborErrorIllegalNumber;
 8003130:	f240 1005 	movw	r0, #261	; 0x105
 8003134:	e7d4      	b.n	80030e0 <extract_number+0x30>
        return CborErrorUnexpectedEOF;
 8003136:	f240 1001 	movw	r0, #257	; 0x101
 800313a:	e7d1      	b.n	80030e0 <extract_number+0x30>

0800313c <preparse_next_value>:
{
 800313c:	b538      	push	{r3, r4, r5, lr}
    if (it->remaining != UINT32_MAX) {
 800313e:	6885      	ldr	r5, [r0, #8]
{
 8003140:	4604      	mov	r4, r0
    if (it->remaining != UINT32_MAX) {
 8003142:	1c6b      	adds	r3, r5, #1
 8003144:	d009      	beq.n	800315a <preparse_next_value+0x1e>
        if (it->type != CborTagType && !--it->remaining) {
 8003146:	7b83      	ldrb	r3, [r0, #14]
 8003148:	2bc0      	cmp	r3, #192	; 0xc0
 800314a:	d017      	beq.n	800317c <preparse_next_value+0x40>
 800314c:	3d01      	subs	r5, #1
 800314e:	6085      	str	r5, [r0, #8]
 8003150:	b9a5      	cbnz	r5, 800317c <preparse_next_value+0x40>
            it->type = CborInvalidType;
 8003152:	23ff      	movs	r3, #255	; 0xff
 8003154:	7383      	strb	r3, [r0, #14]
}
 8003156:	2000      	movs	r0, #0
 8003158:	bd38      	pop	{r3, r4, r5, pc}
    } else if (it->remaining == UINT32_MAX && it->offset != it->parser->end &&
 800315a:	e9d0 3100 	ldrd	r3, r1, [r0]
 800315e:	685a      	ldr	r2, [r3, #4]
 8003160:	4291      	cmp	r1, r2
 8003162:	d00b      	beq.n	800317c <preparse_next_value+0x40>
        it->parser->d->get8(it->parser->d, it->offset) == (uint8_t)BreakByte) {
 8003164:	6818      	ldr	r0, [r3, #0]
 8003166:	6803      	ldr	r3, [r0, #0]
 8003168:	4798      	blx	r3
    } else if (it->remaining == UINT32_MAX && it->offset != it->parser->end &&
 800316a:	28ff      	cmp	r0, #255	; 0xff
 800316c:	d106      	bne.n	800317c <preparse_next_value+0x40>
        ++it->offset;
 800316e:	6863      	ldr	r3, [r4, #4]
        it->type = CborInvalidType;
 8003170:	73a5      	strb	r5, [r4, #14]
        ++it->offset;
 8003172:	3301      	adds	r3, #1
 8003174:	6063      	str	r3, [r4, #4]
        it->remaining = 0;
 8003176:	2300      	movs	r3, #0
 8003178:	60a3      	str	r3, [r4, #8]
 800317a:	e7ec      	b.n	8003156 <preparse_next_value+0x1a>
    return preparse_value(it);
 800317c:	4620      	mov	r0, r4
}
 800317e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return preparse_value(it);
 8003182:	f7ff bf19 	b.w	8002fb8 <preparse_value>

08003186 <advance_internal>:
{
 8003186:	e92d 4817 	stmdb	sp!, {r0, r1, r2, r4, fp, lr}
 800318a:	4604      	mov	r4, r0
    CborError err = extract_number(it->parser, &it->offset,  &length);
 800318c:	1d01      	adds	r1, r0, #4
 800318e:	466a      	mov	r2, sp
 8003190:	6800      	ldr	r0, [r0, #0]
 8003192:	f7ff ff8d 	bl	80030b0 <extract_number>
    assert(err == CborNoError);
 8003196:	b128      	cbz	r0, 80031a4 <advance_internal+0x1e>
 8003198:	2300      	movs	r3, #0
 800319a:	461a      	mov	r2, r3
 800319c:	4619      	mov	r1, r3
 800319e:	4618      	mov	r0, r3
 80031a0:	f000 fc88 	bl	8003ab4 <__assert_func>
    if (it->type == CborByteStringType || it->type == CborTextStringType) {
 80031a4:	7ba3      	ldrb	r3, [r4, #14]
 80031a6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80031aa:	2b40      	cmp	r3, #64	; 0x40
 80031ac:	d10c      	bne.n	80031c8 <advance_internal+0x42>
        assert(length == (size_t)length);
 80031ae:	e9dd bc00 	ldrd	fp, ip, [sp]
 80031b2:	2100      	movs	r1, #0
 80031b4:	458c      	cmp	ip, r1
 80031b6:	bf08      	it	eq
 80031b8:	45db      	cmpeq	fp, fp
 80031ba:	d1ed      	bne.n	8003198 <advance_internal+0x12>
        assert((it->flags & CborIteratorFlag_UnknownLength) == 0);
 80031bc:	7be1      	ldrb	r1, [r4, #15]
 80031be:	074b      	lsls	r3, r1, #29
 80031c0:	d4ea      	bmi.n	8003198 <advance_internal+0x12>
        it->offset += length;
 80031c2:	6863      	ldr	r3, [r4, #4]
 80031c4:	445b      	add	r3, fp
 80031c6:	6063      	str	r3, [r4, #4]
    return preparse_next_value(it);
 80031c8:	4620      	mov	r0, r4
 80031ca:	f7ff ffb7 	bl	800313c <preparse_next_value>
}
 80031ce:	b003      	add	sp, #12
 80031d0:	e8bd 8810 	ldmia.w	sp!, {r4, fp, pc}

080031d4 <cbor_value_advance.part.13>:
CborError cbor_value_advance_fixed(CborValue *it)
 80031d4:	b508      	push	{r3, lr}
    assert(it->type != CborInvalidType);
 80031d6:	2300      	movs	r3, #0
 80031d8:	461a      	mov	r2, r3
 80031da:	4619      	mov	r1, r3
 80031dc:	4618      	mov	r0, r3
 80031de:	f000 fc69 	bl	8003ab4 <__assert_func>

080031e2 <iterate_string_chunks>:

static CborError iterate_string_chunks(const CborValue *value, char *buffer, size_t *buflen,
                                       bool *result, CborValue *next, IterateFunction func)
{
 80031e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031e6:	b089      	sub	sp, #36	; 0x24
 80031e8:	461f      	mov	r7, r3
 80031ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80031ec:	4604      	mov	r4, r0
 80031ee:	9303      	str	r3, [sp, #12]
    assert(cbor_value_is_byte_string(value) || cbor_value_is_text_string(value));
 80031f0:	7b83      	ldrb	r3, [r0, #14]
{
 80031f2:	468b      	mov	fp, r1
    assert(cbor_value_is_byte_string(value) || cbor_value_is_text_string(value));
 80031f4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80031f8:	2b40      	cmp	r3, #64	; 0x40
{
 80031fa:	4692      	mov	sl, r2
    assert(cbor_value_is_byte_string(value) || cbor_value_is_text_string(value));
 80031fc:	d005      	beq.n	800320a <iterate_string_chunks+0x28>
 80031fe:	2300      	movs	r3, #0
 8003200:	461a      	mov	r2, r3
 8003202:	4619      	mov	r1, r3
 8003204:	4618      	mov	r0, r3
 8003206:	f000 fc55 	bl	8003ab4 <__assert_func>

    size_t total;
    CborError err;
    int offset = value->offset;
    if (cbor_value_is_length_known(value)) {
 800320a:	7bc2      	ldrb	r2, [r0, #15]
    int offset = value->offset;
 800320c:	6843      	ldr	r3, [r0, #4]
    if (cbor_value_is_length_known(value)) {
 800320e:	0752      	lsls	r2, r2, #29
    int offset = value->offset;
 8003210:	9305      	str	r3, [sp, #20]
    if (cbor_value_is_length_known(value)) {
 8003212:	d44a      	bmi.n	80032aa <iterate_string_chunks+0xc8>
    CborError err = extract_number(parser, offset, &v);
 8003214:	aa06      	add	r2, sp, #24
 8003216:	a905      	add	r1, sp, #20
 8003218:	6800      	ldr	r0, [r0, #0]
 800321a:	f7ff ff49 	bl	80030b0 <extract_number>
    if (err) {
 800321e:	b9a0      	cbnz	r0, 800324a <iterate_string_chunks+0x68>
    *len = v;
 8003220:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
    if (v != *len)
 8003224:	2300      	movs	r3, #0
 8003226:	4599      	cmp	r9, r3
 8003228:	bf08      	it	eq
 800322a:	45c0      	cmpeq	r8, r8
    *len = v;
 800322c:	4645      	mov	r5, r8
    if (v != *len)
 800322e:	d002      	beq.n	8003236 <iterate_string_chunks+0x54>
        return CborErrorDataTooLarge;
 8003230:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003234:	e009      	b.n	800324a <iterate_string_chunks+0x68>
        /* easy case: fixed length */
        err = extract_length(value->parser, &offset, &total);
        if (err)
            return err;
        if (total > (size_t)(value->parser->end - offset))
 8003236:	f8d4 c000 	ldr.w	ip, [r4]
 800323a:	9a05      	ldr	r2, [sp, #20]
 800323c:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8003240:	1a9b      	subs	r3, r3, r2
 8003242:	4543      	cmp	r3, r8
 8003244:	d204      	bcs.n	8003250 <iterate_string_chunks+0x6e>
            return CborErrorUnexpectedEOF;
 8003246:	f240 1001 	movw	r0, #257	; 0x101
        *next = *value;
        next->offset = offset;
        return preparse_next_value(next);
    }
    return CborNoError;
}
 800324a:	b009      	add	sp, #36	; 0x24
 800324c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (total <= *buflen)
 8003250:	f8da 3000 	ldr.w	r3, [sl]
 8003254:	4543      	cmp	r3, r8
 8003256:	d308      	bcc.n	800326a <iterate_string_chunks+0x88>
            *result = !!func(value->parser->d, buffer, offset, total);
 8003258:	4643      	mov	r3, r8
 800325a:	4659      	mov	r1, fp
 800325c:	f8dc 0000 	ldr.w	r0, [ip]
 8003260:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8003262:	47b0      	blx	r6
 8003264:	3000      	adds	r0, #0
 8003266:	bf18      	it	ne
 8003268:	2001      	movne	r0, #1
        offset += total;
 800326a:	9b05      	ldr	r3, [sp, #20]
            *result = false;
 800326c:	7038      	strb	r0, [r7, #0]
        offset += total;
 800326e:	4443      	add	r3, r8
                ++offset;
 8003270:	9305      	str	r3, [sp, #20]
    if (*result && *buflen > total) {
 8003272:	783b      	ldrb	r3, [r7, #0]
 8003274:	b14b      	cbz	r3, 800328a <iterate_string_chunks+0xa8>
 8003276:	f8da 3000 	ldr.w	r3, [sl]
 800327a:	42ab      	cmp	r3, r5
 800327c:	d905      	bls.n	800328a <iterate_string_chunks+0xa8>
        if(buffer) {
 800327e:	f1bb 0f00 	cmp.w	fp, #0
 8003282:	d002      	beq.n	800328a <iterate_string_chunks+0xa8>
            *(buffer + total) = '\0';
 8003284:	2300      	movs	r3, #0
 8003286:	f80b 3005 	strb.w	r3, [fp, r5]
    if (next) {
 800328a:	9b03      	ldr	r3, [sp, #12]
    *buflen = total;
 800328c:	f8ca 5000 	str.w	r5, [sl]
    if (next) {
 8003290:	2b00      	cmp	r3, #0
 8003292:	d05c      	beq.n	800334e <iterate_string_chunks+0x16c>
        *next = *value;
 8003294:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003298:	9c03      	ldr	r4, [sp, #12]
 800329a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        next->offset = offset;
 800329e:	9b05      	ldr	r3, [sp, #20]
        return preparse_next_value(next);
 80032a0:	4620      	mov	r0, r4
        next->offset = offset;
 80032a2:	6063      	str	r3, [r4, #4]
        return preparse_next_value(next);
 80032a4:	f7ff ff4a 	bl	800313c <preparse_next_value>
 80032a8:	e7cf      	b.n	800324a <iterate_string_chunks+0x68>
        total = 0;
 80032aa:	2500      	movs	r5, #0
        ++offset;
 80032ac:	3301      	adds	r3, #1
 80032ae:	9305      	str	r3, [sp, #20]
        *result = true;
 80032b0:	2301      	movs	r3, #1
                *result = false;
 80032b2:	46a9      	mov	r9, r5
        *result = true;
 80032b4:	703b      	strb	r3, [r7, #0]
            if (offset == value->parser->end)
 80032b6:	6823      	ldr	r3, [r4, #0]
 80032b8:	9905      	ldr	r1, [sp, #20]
 80032ba:	685a      	ldr	r2, [r3, #4]
 80032bc:	428a      	cmp	r2, r1
 80032be:	d0c2      	beq.n	8003246 <iterate_string_chunks+0x64>
            val = value->parser->d->get8(value->parser->d, offset);
 80032c0:	6818      	ldr	r0, [r3, #0]
 80032c2:	6803      	ldr	r3, [r0, #0]
 80032c4:	4798      	blx	r3
            if (val == (uint8_t)BreakByte) {
 80032c6:	28ff      	cmp	r0, #255	; 0xff
 80032c8:	d102      	bne.n	80032d0 <iterate_string_chunks+0xee>
                ++offset;
 80032ca:	9b05      	ldr	r3, [sp, #20]
 80032cc:	3301      	adds	r3, #1
 80032ce:	e7cf      	b.n	8003270 <iterate_string_chunks+0x8e>
            if ((val & MajorTypeMask) != value->type)
 80032d0:	7ba3      	ldrb	r3, [r4, #14]
 80032d2:	f020 001f 	bic.w	r0, r0, #31
 80032d6:	4298      	cmp	r0, r3
 80032d8:	d136      	bne.n	8003348 <iterate_string_chunks+0x166>
    CborError err = extract_number(parser, offset, &v);
 80032da:	aa06      	add	r2, sp, #24
 80032dc:	a905      	add	r1, sp, #20
 80032de:	6820      	ldr	r0, [r4, #0]
 80032e0:	f7ff fee6 	bl	80030b0 <extract_number>
    if (err) {
 80032e4:	2800      	cmp	r0, #0
 80032e6:	d1b0      	bne.n	800324a <iterate_string_chunks+0x68>
    *len = v;
 80032e8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80032ec:	e9cd 2300 	strd	r2, r3, [sp]
    if (v != *len)
 80032f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80032f4:	2300      	movs	r3, #0
 80032f6:	4299      	cmp	r1, r3
 80032f8:	bf08      	it	eq
 80032fa:	4290      	cmpeq	r0, r2
    *len = v;
 80032fc:	f8dd 8000 	ldr.w	r8, [sp]
    if (v != *len)
 8003300:	d196      	bne.n	8003230 <iterate_string_chunks+0x4e>
#endif

static inline bool add_check_overflow(size_t v1, size_t v2, size_t *r)
{
#if ((defined(__GNUC__) && (__GNUC__ >= 5)) && !defined(__INTEL_COMPILER)) || __has_builtin(__builtin_add_overflow)
    return __builtin_add_overflow(v1, v2, r);
 8003302:	eb15 0808 	adds.w	r8, r5, r8
 8003306:	d293      	bcs.n	8003230 <iterate_string_chunks+0x4e>
            if (chunkLen > (size_t)(value->parser->end - offset))
 8003308:	6820      	ldr	r0, [r4, #0]
 800330a:	9a05      	ldr	r2, [sp, #20]
 800330c:	6843      	ldr	r3, [r0, #4]
 800330e:	9900      	ldr	r1, [sp, #0]
 8003310:	1a9b      	subs	r3, r3, r2
 8003312:	428b      	cmp	r3, r1
 8003314:	d397      	bcc.n	8003246 <iterate_string_chunks+0x64>
            if (*result && *buflen >= newTotal)
 8003316:	783b      	ldrb	r3, [r7, #0]
 8003318:	b19b      	cbz	r3, 8003342 <iterate_string_chunks+0x160>
 800331a:	f8da 3000 	ldr.w	r3, [sl]
 800331e:	4543      	cmp	r3, r8
 8003320:	d30f      	bcc.n	8003342 <iterate_string_chunks+0x160>
                *result = !!func(value->parser->d, buffer + total, offset, chunkLen);
 8003322:	eb0b 0105 	add.w	r1, fp, r5
 8003326:	9b00      	ldr	r3, [sp, #0]
 8003328:	6800      	ldr	r0, [r0, #0]
 800332a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800332c:	47a8      	blx	r5
 800332e:	3000      	adds	r0, #0
 8003330:	bf18      	it	ne
 8003332:	2001      	movne	r0, #1
 8003334:	7038      	strb	r0, [r7, #0]
            offset += chunkLen;
 8003336:	9b05      	ldr	r3, [sp, #20]
 8003338:	9a00      	ldr	r2, [sp, #0]
 800333a:	4645      	mov	r5, r8
 800333c:	4413      	add	r3, r2
 800333e:	9305      	str	r3, [sp, #20]
        while (true) {
 8003340:	e7b9      	b.n	80032b6 <iterate_string_chunks+0xd4>
                *result = false;
 8003342:	f887 9000 	strb.w	r9, [r7]
 8003346:	e7f6      	b.n	8003336 <iterate_string_chunks+0x154>
                return CborErrorIllegalType;
 8003348:	f44f 7082 	mov.w	r0, #260	; 0x104
 800334c:	e77d      	b.n	800324a <iterate_string_chunks+0x68>
    return CborNoError;
 800334e:	9803      	ldr	r0, [sp, #12]
 8003350:	e77b      	b.n	800324a <iterate_string_chunks+0x68>

08003352 <_cbor_value_decode_int64_internal>:
{
 8003352:	b570      	push	{r4, r5, r6, lr}
 8003354:	4604      	mov	r4, r0
    uint8_t val = value->parser->d->get8(value->parser->d, value->offset);
 8003356:	6803      	ldr	r3, [r0, #0]
 8003358:	6861      	ldr	r1, [r4, #4]
 800335a:	6818      	ldr	r0, [r3, #0]
 800335c:	6803      	ldr	r3, [r0, #0]
 800335e:	4798      	blx	r3
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge ||
 8003360:	7be3      	ldrb	r3, [r4, #15]
 8003362:	07db      	lsls	r3, r3, #31
 8003364:	d40a      	bmi.n	800337c <_cbor_value_decode_int64_internal+0x2a>
 8003366:	7ba3      	ldrb	r3, [r4, #14]
 8003368:	3306      	adds	r3, #6
 800336a:	b2db      	uxtb	r3, r3
 800336c:	2b01      	cmp	r3, #1
 800336e:	d905      	bls.n	800337c <_cbor_value_decode_int64_internal+0x2a>
 8003370:	2300      	movs	r3, #0
 8003372:	461a      	mov	r2, r3
 8003374:	4619      	mov	r1, r3
 8003376:	4618      	mov	r0, r3
 8003378:	f000 fb9c 	bl	8003ab4 <__assert_func>
 800337c:	f000 031f 	and.w	r3, r0, #31
    assert((val & SmallValueMask) == Value32Bit || (val & SmallValueMask) == Value64Bit);
 8003380:	f1a3 021a 	sub.w	r2, r3, #26
 8003384:	2a01      	cmp	r2, #1
 8003386:	d8f3      	bhi.n	8003370 <_cbor_value_decode_int64_internal+0x1e>
    if ((val & 1) == (Value32Bit & 1))
 8003388:	f010 0501 	ands.w	r5, r0, #1
 800338c:	d009      	beq.n	80033a2 <_cbor_value_decode_int64_internal+0x50>
    assert((val & SmallValueMask) == Value64Bit);
 800338e:	2b1b      	cmp	r3, #27
 8003390:	d1ee      	bne.n	8003370 <_cbor_value_decode_int64_internal+0x1e>
        return value->parser->d->get64(value->parser->d, value->offset + 1);
 8003392:	6823      	ldr	r3, [r4, #0]
 8003394:	6861      	ldr	r1, [r4, #4]
 8003396:	6818      	ldr	r0, [r3, #0]
 8003398:	3101      	adds	r1, #1
 800339a:	68c3      	ldr	r3, [r0, #12]
}
 800339c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return value->parser->d->get64(value->parser->d, value->offset + 1);
 80033a0:	4718      	bx	r3
        return value->parser->d->get32(value->parser->d, value->offset + 1);
 80033a2:	6823      	ldr	r3, [r4, #0]
 80033a4:	6861      	ldr	r1, [r4, #4]
 80033a6:	6818      	ldr	r0, [r3, #0]
 80033a8:	3101      	adds	r1, #1
 80033aa:	6883      	ldr	r3, [r0, #8]
 80033ac:	4798      	blx	r3
}
 80033ae:	4629      	mov	r1, r5
 80033b0:	bd70      	pop	{r4, r5, r6, pc}

080033b2 <cbor_parser_init>:
{
 80033b2:	b410      	push	{r4}
    memset(parser, 0, sizeof(*parser));
 80033b4:	2400      	movs	r4, #0
 80033b6:	6054      	str	r4, [r2, #4]
 80033b8:	6094      	str	r4, [r2, #8]
    parser->d = d;
 80033ba:	6010      	str	r0, [r2, #0]
    parser->end = d->message_size;
 80033bc:	6980      	ldr	r0, [r0, #24]
    parser->flags = flags;
 80033be:	e9c2 0101 	strd	r0, r1, [r2, #4]
    it->offset = 0;
 80033c2:	e9c3 2400 	strd	r2, r4, [r3]
    it->remaining = 1;/* there's one type altogether, usually an array or map */
 80033c6:	2201      	movs	r2, #1
    return preparse_value(it);
 80033c8:	4618      	mov	r0, r3
    it->remaining = 1;/* there's one type altogether, usually an array or map */
 80033ca:	609a      	str	r2, [r3, #8]
}
 80033cc:	bc10      	pop	{r4}
    return preparse_value(it);
 80033ce:	f7ff bdf3 	b.w	8002fb8 <preparse_value>

080033d2 <cbor_value_enter_container>:
{
 80033d2:	b537      	push	{r0, r1, r2, r4, r5, lr}
{ return it->type == CborArrayType || it->type == CborMapType; }
 80033d4:	7b83      	ldrb	r3, [r0, #14]
 80033d6:	4605      	mov	r5, r0
 80033d8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80033dc:	2b80      	cmp	r3, #128	; 0x80
 80033de:	460c      	mov	r4, r1
 80033e0:	d005      	beq.n	80033ee <cbor_value_enter_container+0x1c>
    assert(cbor_value_is_container(it));
 80033e2:	2300      	movs	r3, #0
 80033e4:	461a      	mov	r2, r3
 80033e6:	4619      	mov	r1, r3
 80033e8:	4618      	mov	r0, r3
 80033ea:	f000 fb63 	bl	8003ab4 <__assert_func>
    *recursed = *it;
 80033ee:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 80033f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (it->flags & CborIteratorFlag_UnknownLength) {
 80033f4:	7beb      	ldrb	r3, [r5, #15]
 80033f6:	075b      	lsls	r3, r3, #29
 80033f8:	d512      	bpl.n	8003420 <cbor_value_enter_container+0x4e>
        recursed->remaining = UINT32_MAX;
 80033fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
        ++recursed->offset;
 80033fe:	3101      	adds	r1, #1
        recursed->remaining = UINT32_MAX;
 8003400:	60a3      	str	r3, [r4, #8]
        ++recursed->offset;
 8003402:	6061      	str	r1, [r4, #4]
        err = preparse_value(recursed);
 8003404:	4620      	mov	r0, r4
 8003406:	f7ff fdd7 	bl	8002fb8 <preparse_value>
        if (err != CborErrorUnexpectedBreak)
 800340a:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
 800340e:	d11e      	bne.n	800344e <cbor_value_enter_container+0x7c>
        ++recursed->offset;
 8003410:	6863      	ldr	r3, [r4, #4]
 8003412:	3301      	adds	r3, #1
 8003414:	6063      	str	r3, [r4, #4]
    recursed->type = CborInvalidType;
 8003416:	23ff      	movs	r3, #255	; 0xff
    recursed->remaining = 0;
 8003418:	2000      	movs	r0, #0
    recursed->type = CborInvalidType;
 800341a:	73a3      	strb	r3, [r4, #14]
    recursed->remaining = 0;
 800341c:	60a0      	str	r0, [r4, #8]
    return CborNoError;
 800341e:	e016      	b.n	800344e <cbor_value_enter_container+0x7c>
        err = extract_number(recursed->parser, &recursed->offset, &len);
 8003420:	466a      	mov	r2, sp
 8003422:	1d21      	adds	r1, r4, #4
 8003424:	f7ff fe44 	bl	80030b0 <extract_number>
        assert(err == CborNoError);
 8003428:	2800      	cmp	r0, #0
 800342a:	d1da      	bne.n	80033e2 <cbor_value_enter_container+0x10>
        recursed->remaining = (uint32_t)len;
 800342c:	e9dd 2300 	ldrd	r2, r3, [sp]
        if (recursed->remaining != len || len == UINT32_MAX) {
 8003430:	2100      	movs	r1, #0
 8003432:	428b      	cmp	r3, r1
 8003434:	bf08      	it	eq
 8003436:	4292      	cmpeq	r2, r2
        recursed->remaining = (uint32_t)len;
 8003438:	60a2      	str	r2, [r4, #8]
        if (recursed->remaining != len || len == UINT32_MAX) {
 800343a:	d104      	bne.n	8003446 <cbor_value_enter_container+0x74>
 800343c:	2b00      	cmp	r3, #0
 800343e:	bf08      	it	eq
 8003440:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 8003444:	d105      	bne.n	8003452 <cbor_value_enter_container+0x80>
            return CborErrorDataTooLarge;
 8003446:	f44f 6080 	mov.w	r0, #1024	; 0x400
            recursed->offset = it->offset;
 800344a:	686b      	ldr	r3, [r5, #4]
 800344c:	6063      	str	r3, [r4, #4]
}
 800344e:	b003      	add	sp, #12
 8003450:	bd30      	pop	{r4, r5, pc}
        if (recursed->type == CborMapType) {
 8003452:	7ba1      	ldrb	r1, [r4, #14]
 8003454:	29a0      	cmp	r1, #160	; 0xa0
 8003456:	d103      	bne.n	8003460 <cbor_value_enter_container+0x8e>
            if (recursed->remaining > UINT32_MAX / 2) {
 8003458:	2a00      	cmp	r2, #0
 800345a:	dbf4      	blt.n	8003446 <cbor_value_enter_container+0x74>
            recursed->remaining *= 2;
 800345c:	0051      	lsls	r1, r2, #1
 800345e:	60a1      	str	r1, [r4, #8]
        if (len != 0)
 8003460:	4313      	orrs	r3, r2
 8003462:	d0d8      	beq.n	8003416 <cbor_value_enter_container+0x44>
            return preparse_value(recursed);
 8003464:	4620      	mov	r0, r4
 8003466:	f7ff fda7 	bl	8002fb8 <preparse_value>
 800346a:	e7f0      	b.n	800344e <cbor_value_enter_container+0x7c>

0800346c <cbor_value_leave_container>:
{
 800346c:	b508      	push	{r3, lr}
 800346e:	7b83      	ldrb	r3, [r0, #14]
 8003470:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8003474:	2b80      	cmp	r3, #128	; 0x80
 8003476:	d001      	beq.n	800347c <cbor_value_leave_container+0x10>
 8003478:	f7ff feac 	bl	80031d4 <cbor_value_advance.part.13>
    assert(recursed->type == CborInvalidType);
 800347c:	7b8b      	ldrb	r3, [r1, #14]
 800347e:	2bff      	cmp	r3, #255	; 0xff
 8003480:	d005      	beq.n	800348e <cbor_value_leave_container+0x22>
 8003482:	2300      	movs	r3, #0
 8003484:	461a      	mov	r2, r3
 8003486:	4619      	mov	r1, r3
 8003488:	4618      	mov	r0, r3
 800348a:	f000 fb13 	bl	8003ab4 <__assert_func>
    it->offset = recursed->offset;
 800348e:	684b      	ldr	r3, [r1, #4]
 8003490:	6043      	str	r3, [r0, #4]
}
 8003492:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return preparse_next_value(it);
 8003496:	f7ff be51 	b.w	800313c <preparse_next_value>
	...

0800349c <_cbor_value_copy_string>:
 * \sa cbor_value_dup_text_string(), cbor_value_copy_text_string(), cbor_value_get_string_length(), cbor_value_calculate_string_length()
 */

CborError _cbor_value_copy_string(const CborValue *value, void *buffer,
                                 size_t *buflen, CborValue *next)
{
 800349c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    bool copied_all;
    CborError err = iterate_string_chunks(value, (char*)buffer, buflen, &copied_all, next,
 800349e:	b189      	cbz	r1, 80034c4 <_cbor_value_copy_string+0x28>
                                          buffer ? (IterateFunction) value->parser->d->cpy : iterate_noop);
 80034a0:	6804      	ldr	r4, [r0, #0]
    CborError err = iterate_string_chunks(value, (char*)buffer, buflen, &copied_all, next,
 80034a2:	6824      	ldr	r4, [r4, #0]
 80034a4:	6964      	ldr	r4, [r4, #20]
 80034a6:	e9cd 3400 	strd	r3, r4, [sp]
 80034aa:	f10d 030f 	add.w	r3, sp, #15
 80034ae:	f7ff fe98 	bl	80031e2 <iterate_string_chunks>
    return err ? err :
 80034b2:	b928      	cbnz	r0, 80034c0 <_cbor_value_copy_string+0x24>
 80034b4:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	bf08      	it	eq
 80034bc:	f04f 4000 	moveq.w	r0, #2147483648	; 0x80000000
                 copied_all ? CborNoError : CborErrorOutOfMemory;
}
 80034c0:	b004      	add	sp, #16
 80034c2:	bd10      	pop	{r4, pc}
    CborError err = iterate_string_chunks(value, (char*)buffer, buflen, &copied_all, next,
 80034c4:	4c00      	ldr	r4, [pc, #0]	; (80034c8 <_cbor_value_copy_string+0x2c>)
 80034c6:	e7ee      	b.n	80034a6 <_cbor_value_copy_string+0xa>
 80034c8:	08002fb5 	.word	0x08002fb5

080034cc <advance_recursive>:
{
 80034cc:	b530      	push	{r4, r5, lr}
    if (is_fixed_type(it->type))
 80034ce:	7b83      	ldrb	r3, [r0, #14]
{
 80034d0:	b085      	sub	sp, #20
 80034d2:	4604      	mov	r4, r0
    if (is_fixed_type(it->type))
 80034d4:	4618      	mov	r0, r3
{
 80034d6:	460d      	mov	r5, r1
    if (is_fixed_type(it->type))
 80034d8:	f7ff fd62 	bl	8002fa0 <is_fixed_type>
 80034dc:	4601      	mov	r1, r0
 80034de:	b120      	cbz	r0, 80034ea <advance_recursive+0x1e>
        return advance_internal(it);
 80034e0:	4620      	mov	r0, r4
 80034e2:	f7ff fe50 	bl	8003186 <advance_internal>
}
 80034e6:	b005      	add	sp, #20
 80034e8:	bd30      	pop	{r4, r5, pc}
 80034ea:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80034ee:	2b80      	cmp	r3, #128	; 0x80
 80034f0:	d009      	beq.n	8003506 <advance_recursive+0x3a>
        size_t len = SIZE_MAX;
 80034f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80034f6:	aa04      	add	r2, sp, #16
 80034f8:	f842 3d10 	str.w	r3, [r2, #-16]!
        return _cbor_value_copy_string(it, NULL, &len, it);
 80034fc:	4620      	mov	r0, r4
 80034fe:	4623      	mov	r3, r4
 8003500:	f7ff ffcc 	bl	800349c <_cbor_value_copy_string>
 8003504:	e7ef      	b.n	80034e6 <advance_recursive+0x1a>
    if (nestingLevel == CBOR_PARSER_MAX_RECURSIONS)
 8003506:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800350a:	d014      	beq.n	8003536 <advance_recursive+0x6a>
    err = cbor_value_enter_container(it, &recursed);
 800350c:	4669      	mov	r1, sp
 800350e:	4620      	mov	r0, r4
 8003510:	f7ff ff5f 	bl	80033d2 <cbor_value_enter_container>
    if (err)
 8003514:	2800      	cmp	r0, #0
 8003516:	d1e6      	bne.n	80034e6 <advance_recursive+0x1a>
        err = advance_recursive(&recursed, nestingLevel + 1);
 8003518:	3501      	adds	r5, #1
    while (!cbor_value_at_end(&recursed)) {
 800351a:	9b02      	ldr	r3, [sp, #8]
 800351c:	b923      	cbnz	r3, 8003528 <advance_recursive+0x5c>
    return cbor_value_leave_container(it, &recursed);
 800351e:	4669      	mov	r1, sp
 8003520:	4620      	mov	r0, r4
 8003522:	f7ff ffa3 	bl	800346c <cbor_value_leave_container>
 8003526:	e7de      	b.n	80034e6 <advance_recursive+0x1a>
        err = advance_recursive(&recursed, nestingLevel + 1);
 8003528:	4629      	mov	r1, r5
 800352a:	4668      	mov	r0, sp
 800352c:	f7ff ffce 	bl	80034cc <advance_recursive>
        if (err)
 8003530:	2800      	cmp	r0, #0
 8003532:	d0f2      	beq.n	800351a <advance_recursive+0x4e>
 8003534:	e7d7      	b.n	80034e6 <advance_recursive+0x1a>
        return CborErrorNestingTooDeep;
 8003536:	f240 4001 	movw	r0, #1025	; 0x401
 800353a:	e7d4      	b.n	80034e6 <advance_recursive+0x1a>

0800353c <cbor_value_advance>:
{
 800353c:	b508      	push	{r3, lr}
    assert(it->type != CborInvalidType);
 800353e:	7b82      	ldrb	r2, [r0, #14]
 8003540:	2aff      	cmp	r2, #255	; 0xff
 8003542:	d101      	bne.n	8003548 <cbor_value_advance+0xc>
 8003544:	f7ff fe46 	bl	80031d4 <cbor_value_advance.part.13>
    if (!it->remaining)
 8003548:	6883      	ldr	r3, [r0, #8]
 800354a:	b123      	cbz	r3, 8003556 <cbor_value_advance+0x1a>
}
 800354c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return advance_recursive(it, 0);
 8003550:	2100      	movs	r1, #0
 8003552:	f7ff bfbb 	b.w	80034cc <advance_recursive>
}
 8003556:	2003      	movs	r0, #3
 8003558:	bd08      	pop	{r3, pc}

0800355a <cbor_value_calculate_string_length>:
    *len = SIZE_MAX;
 800355a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800355e:	600b      	str	r3, [r1, #0]
    return _cbor_value_copy_string(value, NULL, len, NULL);
 8003560:	2300      	movs	r3, #0
{
 8003562:	460a      	mov	r2, r1
    return _cbor_value_copy_string(value, NULL, len, NULL);
 8003564:	4619      	mov	r1, r3
 8003566:	f7ff bf99 	b.w	800349c <_cbor_value_copy_string>

0800356a <hal_bsp_hw_id_len>:

int
hal_bsp_hw_id_len(void)
{
    return STM32_HW_ID_LEN;
}
 800356a:	200c      	movs	r0, #12
 800356c:	4770      	bx	lr
	...

08003570 <hal_bsp_hw_id>:
int
hal_bsp_hw_id(uint8_t *id, int max_len)
{
    int cnt;

    cnt = min(STM32_HW_ID_LEN, max_len);
 8003570:	290c      	cmp	r1, #12
 8003572:	bfa8      	it	ge
 8003574:	210c      	movge	r1, #12
{
 8003576:	b510      	push	{r4, lr}
    cnt = min(STM32_HW_ID_LEN, max_len);
 8003578:	460c      	mov	r4, r1
    memcpy(id, (void *)UID_BASE, cnt);
 800357a:	460a      	mov	r2, r1
 800357c:	4902      	ldr	r1, [pc, #8]	; (8003588 <hal_bsp_hw_id+0x18>)
 800357e:	f001 fef5 	bl	800536c <memcpy>

    return cnt;
}
 8003582:	4620      	mov	r0, r4
 8003584:	bd10      	pop	{r4, pc}
 8003586:	bf00      	nop
 8003588:	1ffff7e8 	.word	0x1ffff7e8

0800358c <sensor_mgr_insert>:
    SLIST_REMOVE(&sensor_mgr.mgr_sensor_list, sensor, sensor, s_next);
}

static void
sensor_mgr_insert(struct sensor *sensor)
{
 800358c:	4911      	ldr	r1, [pc, #68]	; (80035d4 <sensor_mgr_insert+0x48>)
 800358e:	b570      	push	{r4, r5, r6, lr}
    struct sensor *cursor, *prev;

    prev = cursor = NULL;
    if (!sensor->s_poll_rate) {
 8003590:	6a03      	ldr	r3, [r0, #32]
 8003592:	6b0c      	ldr	r4, [r1, #48]	; 0x30
        SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
 8003594:	4622      	mov	r2, r4
    if (!sensor->s_poll_rate) {
 8003596:	b17b      	cbz	r3, 80035b8 <sensor_mgr_insert+0x2c>
            prev = cursor;
        }
        goto insert;
    }

    prev = cursor = NULL;
 8003598:	2300      	movs	r3, #0
    SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
 800359a:	b17a      	cbz	r2, 80035bc <sensor_mgr_insert+0x30>
        if (!cursor->s_poll_rate) {
 800359c:	6a15      	ldr	r5, [r2, #32]
 800359e:	b16d      	cbz	r5, 80035bc <sensor_mgr_insert+0x30>
            break;
        }

        if (OS_TIME_TICK_LT(sensor->s_next_run, cursor->s_next_run)) {
 80035a0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80035a2:	6a56      	ldr	r6, [r2, #36]	; 0x24
 80035a4:	1bad      	subs	r5, r5, r6
 80035a6:	2d00      	cmp	r5, #0
 80035a8:	db08      	blt.n	80035bc <sensor_mgr_insert+0x30>
    SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
 80035aa:	4613      	mov	r3, r2
 80035ac:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80035b0:	e7f3      	b.n	800359a <sensor_mgr_insert+0xe>
        SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
 80035b2:	4613      	mov	r3, r2
 80035b4:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80035b8:	2a00      	cmp	r2, #0
 80035ba:	d1fa      	bne.n	80035b2 <sensor_mgr_insert+0x26>

        prev = cursor;
    }

insert:
    if (prev == NULL) {
 80035bc:	b91b      	cbnz	r3, 80035c6 <sensor_mgr_insert+0x3a>
        SLIST_INSERT_HEAD(&sensor_mgr.mgr_sensor_list, sensor, s_next);
 80035be:	f8c0 4080 	str.w	r4, [r0, #128]	; 0x80
 80035c2:	6308      	str	r0, [r1, #48]	; 0x30
    } else {
        SLIST_INSERT_AFTER(prev, sensor, s_next);
    }
}
 80035c4:	bd70      	pop	{r4, r5, r6, pc}
        SLIST_INSERT_AFTER(prev, sensor, s_next);
 80035c6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80035ca:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
 80035ce:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
}
 80035d2:	e7f7      	b.n	80035c4 <sensor_mgr_insert+0x38>
 80035d4:	20003a38 	.word	0x20003a38

080035d8 <sensor_mgr_match_bytype>:
 *
 * @return 1 if matches, 0 if it doesn't match.
 */
int
sensor_mgr_match_bytype(struct sensor *sensor, void *arg)
{
 80035d8:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
     * sensor, and type is the bitmask we're searching for. We also look at
     * the mask as the driver might be configured to work in a mode where only
     * some of the sensors are supported but not all. Compare the three,
     * and if there is a match, return 1. If it is not supported, return 0.
     */
    return (*type & sensor->s_types & sensor->s_mask) ? 1 : 0;
 80035dc:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
 80035e0:	e9d0 4506 	ldrd	r4, r5, [r0, #24]
 80035e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80035e8:	ea02 0b04 	and.w	fp, r2, r4
 80035ec:	ea03 0c05 	and.w	ip, r3, r5
 80035f0:	ea0b 0200 	and.w	r2, fp, r0
 80035f4:	ea0c 0301 	and.w	r3, ip, r1
 80035f8:	4313      	orrs	r3, r2
}
 80035fa:	bf14      	ite	ne
 80035fc:	2001      	movne	r0, #1
 80035fe:	2000      	moveq	r0, #0
 8003600:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}

08003604 <sensor_read_data_func>:
    struct sensor_listener *listener;
    struct sensor_read_ctx *ctx;

    ctx = (struct sensor_read_ctx *) arg;

    if ((uint8_t)(uintptr_t)(ctx->user_arg) != SENSOR_IGN_LISTENER) {
 8003604:	790b      	ldrb	r3, [r1, #4]
{
 8003606:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800360a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
    if ((uint8_t)(uintptr_t)(ctx->user_arg) != SENSOR_IGN_LISTENER) {
 800360e:	2b01      	cmp	r3, #1
{
 8003610:	4605      	mov	r5, r0
 8003612:	4688      	mov	r8, r1
 8003614:	4691      	mov	r9, r2
    if ((uint8_t)(uintptr_t)(ctx->user_arg) != SENSOR_IGN_LISTENER) {
 8003616:	d106      	bne.n	8003626 <sensor_read_data_func+0x22>
            }
        }
    }

    /* Call data function */
    if (ctx->user_func != NULL) {
 8003618:	f8d8 3000 	ldr.w	r3, [r8]
 800361c:	b9c3      	cbnz	r3, 8003650 <sensor_read_data_func+0x4c>
        return (ctx->user_func(sensor, ctx->user_arg, data, type));
    }

    return (0);
}
 800361e:	4618      	mov	r0, r3
 8003620:	b003      	add	sp, #12
 8003622:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        SLIST_FOREACH(listener, &sensor->s_listener_list, sl_next) {
 8003626:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
 8003628:	2c00      	cmp	r4, #0
 800362a:	d0f5      	beq.n	8003618 <sensor_read_data_func+0x14>
            if (listener->sl_sensor_type & type) {
 800362c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8003630:	ea02 0006 	and.w	r0, r2, r6
 8003634:	ea03 0107 	and.w	r1, r3, r7
 8003638:	ea50 0301 	orrs.w	r3, r0, r1
 800363c:	d006      	beq.n	800364c <sensor_read_data_func+0x48>
                listener->sl_func(sensor, listener->sl_arg, data, type);
 800363e:	e9cd 6700 	strd	r6, r7, [sp]
 8003642:	464a      	mov	r2, r9
 8003644:	68a3      	ldr	r3, [r4, #8]
 8003646:	68e1      	ldr	r1, [r4, #12]
 8003648:	4628      	mov	r0, r5
 800364a:	4798      	blx	r3
        SLIST_FOREACH(listener, &sensor->s_listener_list, sl_next) {
 800364c:	6924      	ldr	r4, [r4, #16]
 800364e:	e7eb      	b.n	8003628 <sensor_read_data_func+0x24>
        return (ctx->user_func(sensor, ctx->user_arg, data, type));
 8003650:	464a      	mov	r2, r9
 8003652:	4628      	mov	r0, r5
 8003654:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8003658:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
}
 800365c:	b003      	add	sp, #12
 800365e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return (ctx->user_func(sensor, ctx->user_arg, data, type));
 8003662:	4718      	bx	r3

08003664 <sensor_mgr_match_bydevname>:
{
 8003664:	b508      	push	{r3, lr}
    if (!strcmp(sensor->s_dev->od_name, devname)) {
 8003666:	6803      	ldr	r3, [r0, #0]
 8003668:	69d8      	ldr	r0, [r3, #28]
 800366a:	f001 fea3 	bl	80053b4 <strcmp>
}
 800366e:	fab0 f080 	clz	r0, r0
 8003672:	0940      	lsrs	r0, r0, #5
 8003674:	bd08      	pop	{r3, pc}
	...

08003678 <sensor_base_ts_update_event>:
{
 8003678:	b570      	push	{r4, r5, r6, lr}
 800367a:	b086      	sub	sp, #24
    ticks = os_time_get();
 800367c:	f001 fbe0 	bl	8004e40 <os_time_get>
    rc = os_gettimeofday(&ostv, &ostz);
 8003680:	ae02      	add	r6, sp, #8
    ticks = os_time_get();
 8003682:	4604      	mov	r4, r0
    rc = os_gettimeofday(&ostv, &ostz);
 8003684:	a901      	add	r1, sp, #4
 8003686:	4630      	mov	r0, r6
 8003688:	f001 fc30 	bl	8004eec <os_gettimeofday>
    if (rc) {
 800368c:	b148      	cbz	r0, 80036a2 <sensor_base_ts_update_event+0x2a>
        ticks += OS_TICKS_PER_SEC * 600;
 800368e:	f504 2412 	add.w	r4, r4, #598016	; 0x92000
 8003692:	f504 64f8 	add.w	r4, r4, #1984	; 0x7c0
    os_callout_reset(&st_up_osco, ticks);
 8003696:	4621      	mov	r1, r4
 8003698:	4809      	ldr	r0, [pc, #36]	; (80036c0 <sensor_base_ts_update_event+0x48>)
 800369a:	f000 fb97 	bl	8003dcc <os_callout_reset>
}
 800369e:	b006      	add	sp, #24
 80036a0:	bd70      	pop	{r4, r5, r6, pc}
    sensor_base_ts.st_ostv = ostv;
 80036a2:	4d08      	ldr	r5, [pc, #32]	; (80036c4 <sensor_base_ts_update_event+0x4c>)
 80036a4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80036a8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    sensor_base_ts.st_ostz = ostz;
 80036ac:	9b01      	ldr	r3, [sp, #4]
    ticks += OS_TICKS_PER_SEC * 2000;
 80036ae:	f504 14f4 	add.w	r4, r4, #1998848	; 0x1e8000
    sensor_base_ts.st_ostz = ostz;
 80036b2:	612b      	str	r3, [r5, #16]
    sensor_base_ts.st_cputime = os_cputime_get32();
 80036b4:	f000 fc0a 	bl	8003ecc <os_cputime_get32>
    ticks += OS_TICKS_PER_SEC * 2000;
 80036b8:	f504 6490 	add.w	r4, r4, #1152	; 0x480
    sensor_base_ts.st_cputime = os_cputime_get32();
 80036bc:	6168      	str	r0, [r5, #20]
 80036be:	e7ea      	b.n	8003696 <sensor_base_ts_update_event+0x1e>
 80036c0:	20003a6c 	.word	0x20003a6c
 80036c4:	20003a90 	.word	0x20003a90

080036c8 <sensor_mgr_lock>:
{
 80036c8:	b508      	push	{r3, lr}
    rc = os_mutex_pend(&sensor_mgr.mgr_lock, OS_TIMEOUT_NEVER);
 80036ca:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80036ce:	4804      	ldr	r0, [pc, #16]	; (80036e0 <sensor_mgr_lock+0x18>)
 80036d0:	f001 f936 	bl	8004940 <os_mutex_pend>
    if (rc == 0 || rc == OS_NOT_STARTED) {
 80036d4:	b110      	cbz	r0, 80036dc <sensor_mgr_lock+0x14>
        return (0);
 80036d6:	2809      	cmp	r0, #9
 80036d8:	bf08      	it	eq
 80036da:	2000      	moveq	r0, #0
}
 80036dc:	bd08      	pop	{r3, pc}
 80036de:	bf00      	nop
 80036e0:	20003a38 	.word	0x20003a38

080036e4 <sensor_mgr_unlock>:
    (void) os_mutex_release(&sensor_mgr.mgr_lock);
 80036e4:	4801      	ldr	r0, [pc, #4]	; (80036ec <sensor_mgr_unlock+0x8>)
 80036e6:	f001 b8db 	b.w	80048a0 <os_mutex_release>
 80036ea:	bf00      	nop
 80036ec:	20003a38 	.word	0x20003a38

080036f0 <sensor_mgr_find_next>:
{
 80036f0:	b570      	push	{r4, r5, r6, lr}
 80036f2:	4605      	mov	r5, r0
 80036f4:	460e      	mov	r6, r1
 80036f6:	4614      	mov	r4, r2
    rc = sensor_mgr_lock();
 80036f8:	f7ff ffe6 	bl	80036c8 <sensor_mgr_lock>
    if (rc != 0) {
 80036fc:	b978      	cbnz	r0, 800371e <sensor_mgr_find_next+0x2e>
    if (cursor == NULL) {
 80036fe:	b95c      	cbnz	r4, 8003718 <sensor_mgr_find_next+0x28>
        cursor = SLIST_FIRST(&sensor_mgr.mgr_sensor_list);
 8003700:	4b08      	ldr	r3, [pc, #32]	; (8003724 <sensor_mgr_find_next+0x34>)
 8003702:	6b1c      	ldr	r4, [r3, #48]	; 0x30
    while (cursor != NULL) {
 8003704:	b91c      	cbnz	r4, 800370e <sensor_mgr_find_next+0x1e>
    sensor_mgr_unlock();
 8003706:	f7ff ffed 	bl	80036e4 <sensor_mgr_unlock>
}
 800370a:	4620      	mov	r0, r4
 800370c:	bd70      	pop	{r4, r5, r6, pc}
        if (compare_func(cursor, arg)) {
 800370e:	4631      	mov	r1, r6
 8003710:	4620      	mov	r0, r4
 8003712:	47a8      	blx	r5
 8003714:	2800      	cmp	r0, #0
 8003716:	d1f6      	bne.n	8003706 <sensor_mgr_find_next+0x16>
        cursor = SLIST_NEXT(cursor, s_next);
 8003718:	f8d4 4080 	ldr.w	r4, [r4, #128]	; 0x80
 800371c:	e7f2      	b.n	8003704 <sensor_mgr_find_next+0x14>
    cursor = NULL;
 800371e:	2400      	movs	r4, #0
    return (cursor);
 8003720:	e7f3      	b.n	800370a <sensor_mgr_find_next+0x1a>
 8003722:	bf00      	nop
 8003724:	20003a38 	.word	0x20003a38

08003728 <sensor_mgr_find_next_bydevname>:
    return (sensor_mgr_find_next(sensor_mgr_match_bydevname, (char *)devname,
 8003728:	460a      	mov	r2, r1
 800372a:	4601      	mov	r1, r0
 800372c:	4801      	ldr	r0, [pc, #4]	; (8003734 <sensor_mgr_find_next_bydevname+0xc>)
 800372e:	f7ff bfdf 	b.w	80036f0 <sensor_mgr_find_next>
 8003732:	bf00      	nop
 8003734:	08003665 	.word	0x08003665

08003738 <sensor_pkg_init>:
{
 8003738:	b5f0      	push	{r4, r5, r6, r7, lr}
 800373a:	b089      	sub	sp, #36	; 0x24
    sensor_mgr_evq_set(os_eventq_dflt_get());
 800373c:	f000 fd20 	bl	8004180 <os_eventq_dflt_get>
    sensor_mgr.mgr_eventq = evq;
 8003740:	4d1b      	ldr	r5, [pc, #108]	; (80037b0 <sensor_pkg_init+0x78>)
    rc = os_mempool_init(&sensor_notify_evt_pool,
 8003742:	4b1c      	ldr	r3, [pc, #112]	; (80037b4 <sensor_pkg_init+0x7c>)
    sensor_mgr.mgr_eventq = evq;
 8003744:	62e8      	str	r0, [r5, #44]	; 0x2c
    rc = os_mempool_init(&sensor_notify_evt_pool,
 8003746:	9300      	str	r3, [sp, #0]
 8003748:	2218      	movs	r2, #24
 800374a:	4b1b      	ldr	r3, [pc, #108]	; (80037b8 <sensor_pkg_init+0x80>)
 800374c:	2105      	movs	r1, #5
 800374e:	481b      	ldr	r0, [pc, #108]	; (80037bc <sensor_pkg_init+0x84>)
 8003750:	f000 ffd8 	bl	8004704 <os_mempool_init>
    assert(rc == OS_OK);
 8003754:	4607      	mov	r7, r0
 8003756:	b128      	cbz	r0, 8003764 <sensor_pkg_init+0x2c>
 8003758:	2300      	movs	r3, #0
 800375a:	461a      	mov	r2, r3
 800375c:	4619      	mov	r1, r3
 800375e:	4618      	mov	r0, r3
 8003760:	f000 f9a8 	bl	8003ab4 <__assert_func>
    os_callout_init(&sensor_mgr.mgr_wakeup_callout, sensor_mgr_evq_get(),
 8003764:	4603      	mov	r3, r0
    sensor_base_ts.st_ostv = ostv;
 8003766:	4c16      	ldr	r4, [pc, #88]	; (80037c0 <sensor_pkg_init+0x88>)
    os_callout_init(&sensor_mgr.mgr_wakeup_callout, sensor_mgr_evq_get(),
 8003768:	4a16      	ldr	r2, [pc, #88]	; (80037c4 <sensor_pkg_init+0x8c>)
 800376a:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 800376c:	f105 000c 	add.w	r0, r5, #12
    os_gettimeofday(&ostv, &ostz);
 8003770:	ae04      	add	r6, sp, #16
    os_callout_init(&sensor_mgr.mgr_wakeup_callout, sensor_mgr_evq_get(),
 8003772:	f000 faff 	bl	8003d74 <os_callout_init>
    os_gettimeofday(&ostv, &ostz);
 8003776:	a903      	add	r1, sp, #12
 8003778:	4630      	mov	r0, r6
 800377a:	f001 fbb7 	bl	8004eec <os_gettimeofday>
    sensor_base_ts.st_ostv = ostv;
 800377e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003782:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    sensor_base_ts.st_ostz = ostz;
 8003786:	9b03      	ldr	r3, [sp, #12]
 8003788:	6123      	str	r3, [r4, #16]
    sensor_base_ts.st_cputime = os_cputime_get32();
 800378a:	f000 fb9f 	bl	8003ecc <os_cputime_get32>
    os_callout_init(&st_up_osco, sensor_mgr_evq_get(),
 800378e:	463b      	mov	r3, r7
 8003790:	4a0d      	ldr	r2, [pc, #52]	; (80037c8 <sensor_pkg_init+0x90>)
    sensor_base_ts.st_cputime = os_cputime_get32();
 8003792:	6160      	str	r0, [r4, #20]
    os_callout_init(&st_up_osco, sensor_mgr_evq_get(),
 8003794:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8003796:	480d      	ldr	r0, [pc, #52]	; (80037cc <sensor_pkg_init+0x94>)
 8003798:	f000 faec 	bl	8003d74 <os_callout_init>
    os_callout_reset(&st_up_osco, OS_TICKS_PER_SEC);
 800379c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80037a0:	480a      	ldr	r0, [pc, #40]	; (80037cc <sensor_pkg_init+0x94>)
 80037a2:	f000 fb13 	bl	8003dcc <os_callout_reset>
    os_mutex_init(&sensor_mgr.mgr_lock);
 80037a6:	4628      	mov	r0, r5
 80037a8:	f001 f870 	bl	800488c <os_mutex_init>
}
 80037ac:	b009      	add	sp, #36	; 0x24
 80037ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037b0:	20003a38 	.word	0x20003a38
 80037b4:	0800dca9 	.word	0x0800dca9
 80037b8:	200007b8 	.word	0x200007b8
 80037bc:	20000830 	.word	0x20000830
 80037c0:	20003a90 	.word	0x20003a90
 80037c4:	080039cd 	.word	0x080039cd
 80037c8:	08003679 	.word	0x08003679
 80037cc:	20003a6c 	.word	0x20003a6c

080037d0 <sensor_lock>:
{
 80037d0:	b508      	push	{r3, lr}
    rc = os_mutex_pend(&sensor->s_lock, OS_TIMEOUT_NEVER);
 80037d2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80037d6:	3004      	adds	r0, #4
 80037d8:	f001 f8b2 	bl	8004940 <os_mutex_pend>
    if (rc == 0 || rc == OS_NOT_STARTED) {
 80037dc:	b110      	cbz	r0, 80037e4 <sensor_lock+0x14>
        return (0);
 80037de:	2809      	cmp	r0, #9
 80037e0:	bf08      	it	eq
 80037e2:	2000      	moveq	r0, #0
}
 80037e4:	bd08      	pop	{r3, pc}
	...

080037e8 <sensor_update_nextrun>:
{
 80037e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80037ea:	4604      	mov	r4, r0
 80037ec:	460d      	mov	r5, r1
    os_time_ms_to_ticks(sensor->s_poll_rate, &sensor_ticks);
 80037ee:	6a00      	ldr	r0, [r0, #32]
 80037f0:	a901      	add	r1, sp, #4
 80037f2:	f001 fb99 	bl	8004f28 <os_time_ms_to_ticks>
    sensor_lock(sensor);
 80037f6:	4620      	mov	r0, r4
 80037f8:	f7ff ffea 	bl	80037d0 <sensor_lock>
    SLIST_REMOVE(&sensor_mgr.mgr_sensor_list, sensor, sensor, s_next);
 80037fc:	4a0d      	ldr	r2, [pc, #52]	; (8003834 <sensor_update_nextrun+0x4c>)
 80037fe:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003800:	429c      	cmp	r4, r3
 8003802:	d10e      	bne.n	8003822 <sensor_update_nextrun+0x3a>
 8003804:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8003808:	6313      	str	r3, [r2, #48]	; 0x30
    sensor->s_next_run = sensor_ticks + now;
 800380a:	9901      	ldr	r1, [sp, #4]
    sensor_mgr_insert(sensor);
 800380c:	4620      	mov	r0, r4
    sensor->s_next_run = sensor_ticks + now;
 800380e:	4429      	add	r1, r5
 8003810:	6261      	str	r1, [r4, #36]	; 0x24
    sensor_mgr_insert(sensor);
 8003812:	f7ff febb 	bl	800358c <sensor_mgr_insert>
    os_mutex_release(&sensor->s_lock);
 8003816:	1d20      	adds	r0, r4, #4
 8003818:	f001 f842 	bl	80048a0 <os_mutex_release>
}
 800381c:	b003      	add	sp, #12
 800381e:	bd30      	pop	{r4, r5, pc}
    SLIST_REMOVE(&sensor_mgr.mgr_sensor_list, sensor, sensor, s_next);
 8003820:	4613      	mov	r3, r2
 8003822:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8003826:	4294      	cmp	r4, r2
 8003828:	d1fa      	bne.n	8003820 <sensor_update_nextrun+0x38>
 800382a:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800382e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8003832:	e7ea      	b.n	800380a <sensor_update_nextrun+0x22>
 8003834:	20003a38 	.word	0x20003a38

08003838 <sensor_set_poll_rate_ms>:
{
 8003838:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800383a:	4605      	mov	r5, r0
    os_callout_stop(&sensor_mgr.mgr_wakeup_callout);
 800383c:	481e      	ldr	r0, [pc, #120]	; (80038b8 <sensor_set_poll_rate_ms+0x80>)
{
 800383e:	460c      	mov	r4, r1
    os_callout_stop(&sensor_mgr.mgr_wakeup_callout);
 8003840:	f000 faa6 	bl	8003d90 <os_callout_stop>
    sensor = sensor_mgr_find_next_bydevname(devname, NULL);
 8003844:	4628      	mov	r0, r5
 8003846:	2100      	movs	r1, #0
 8003848:	f7ff ff6e 	bl	8003728 <sensor_mgr_find_next_bydevname>
    if (!sensor) {
 800384c:	4605      	mov	r5, r0
 800384e:	b380      	cbz	r0, 80038b2 <sensor_set_poll_rate_ms+0x7a>
    sensor_lock(sensor);
 8003850:	f7ff ffbe 	bl	80037d0 <sensor_lock>
    now = os_time_get();
 8003854:	f001 faf4 	bl	8004e40 <os_time_get>
 8003858:	4607      	mov	r7, r0
    os_time_ms_to_ticks(poll_rate, &next_wakeup);
 800385a:	a901      	add	r1, sp, #4
 800385c:	4620      	mov	r0, r4
 800385e:	f001 fb63 	bl	8004f28 <os_time_ms_to_ticks>
    sensor_lock(sensor);
 8003862:	4628      	mov	r0, r5
 8003864:	f7ff ffb4 	bl	80037d0 <sensor_lock>
    sensor->s_poll_rate = poll_rate;
 8003868:	622c      	str	r4, [r5, #32]
    os_mutex_release(&sensor->s_lock);
 800386a:	1d2c      	adds	r4, r5, #4
 800386c:	4620      	mov	r0, r4
 800386e:	f001 f817 	bl	80048a0 <os_mutex_release>
    head = SLIST_FIRST(&sensor_mgr.mgr_sensor_list);
 8003872:	4e12      	ldr	r6, [pc, #72]	; (80038bc <sensor_set_poll_rate_ms+0x84>)
    sensor_update_nextrun(sensor, now);
 8003874:	4639      	mov	r1, r7
 8003876:	4628      	mov	r0, r5
 8003878:	f7ff ffb6 	bl	80037e8 <sensor_update_nextrun>
    os_mutex_release(&sensor->s_lock);
 800387c:	4620      	mov	r0, r4
 800387e:	f001 f80f 	bl	80048a0 <os_mutex_release>
    sensor_mgr_lock();
 8003882:	f7ff ff21 	bl	80036c8 <sensor_mgr_lock>
    head = SLIST_FIRST(&sensor_mgr.mgr_sensor_list);
 8003886:	6b35      	ldr	r5, [r6, #48]	; 0x30
    sensor_lock(sensor);
 8003888:	4628      	mov	r0, r5
 800388a:	f7ff ffa1 	bl	80037d0 <sensor_lock>
    delta = (int32_t)(sensor->s_next_run - now);
 800388e:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    os_mutex_release(&sensor->s_lock);
 8003890:	1d28      	adds	r0, r5, #4
    delta = (int32_t)(sensor->s_next_run - now);
 8003892:	1be4      	subs	r4, r4, r7
        sensor_ticks = 0;
 8003894:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
    os_mutex_release(&sensor->s_lock);
 8003898:	f001 f802 	bl	80048a0 <os_mutex_release>
    *min_nextrun = sensor_calc_nextrun_delta(head, now);
 800389c:	9401      	str	r4, [sp, #4]
    sensor_mgr_unlock();
 800389e:	f7ff ff21 	bl	80036e4 <sensor_mgr_unlock>
    os_callout_reset(&sensor_mgr.mgr_wakeup_callout, next_wakeup);
 80038a2:	9901      	ldr	r1, [sp, #4]
 80038a4:	f106 000c 	add.w	r0, r6, #12
 80038a8:	f000 fa90 	bl	8003dcc <os_callout_reset>
    return 0;
 80038ac:	2000      	movs	r0, #0
}
 80038ae:	b003      	add	sp, #12
 80038b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return rc;
 80038b2:	f06f 0001 	mvn.w	r0, #1
 80038b6:	e7fa      	b.n	80038ae <sensor_set_poll_rate_ms+0x76>
 80038b8:	20003a44 	.word	0x20003a44
 80038bc:	20003a38 	.word	0x20003a38

080038c0 <sensor_mgr_register>:
{
 80038c0:	b538      	push	{r3, r4, r5, lr}
 80038c2:	4605      	mov	r5, r0
    rc = sensor_mgr_lock();
 80038c4:	f7ff ff00 	bl	80036c8 <sensor_mgr_lock>
    if (rc != 0) {
 80038c8:	4604      	mov	r4, r0
 80038ca:	b960      	cbnz	r0, 80038e6 <sensor_mgr_register+0x26>
    rc = sensor_lock(sensor);
 80038cc:	4628      	mov	r0, r5
 80038ce:	f7ff ff7f 	bl	80037d0 <sensor_lock>
    if (rc != 0) {
 80038d2:	4604      	mov	r4, r0
 80038d4:	b938      	cbnz	r0, 80038e6 <sensor_mgr_register+0x26>
    sensor_mgr_insert(sensor);
 80038d6:	4628      	mov	r0, r5
 80038d8:	f7ff fe58 	bl	800358c <sensor_mgr_insert>
    os_mutex_release(&sensor->s_lock);
 80038dc:	1d28      	adds	r0, r5, #4
 80038de:	f000 ffdf 	bl	80048a0 <os_mutex_release>
    sensor_mgr_unlock();
 80038e2:	f7ff feff 	bl	80036e4 <sensor_mgr_unlock>
}
 80038e6:	4620      	mov	r0, r4
 80038e8:	bd38      	pop	{r3, r4, r5, pc}

080038ea <sensor_init>:
{
 80038ea:	b538      	push	{r3, r4, r5, lr}
 80038ec:	4604      	mov	r4, r0
 80038ee:	460d      	mov	r5, r1
    memset(sensor, 0, sizeof(*sensor));
 80038f0:	2288      	movs	r2, #136	; 0x88
 80038f2:	2100      	movs	r1, #0
 80038f4:	f001 fd47 	bl	8005386 <memset>
    rc = os_mutex_init(&sensor->s_lock);
 80038f8:	1d20      	adds	r0, r4, #4
 80038fa:	f000 ffc7 	bl	800488c <os_mutex_init>
    if (rc != 0) {
 80038fe:	b900      	cbnz	r0, 8003902 <sensor_init+0x18>
    sensor->s_dev = dev;
 8003900:	6025      	str	r5, [r4, #0]
}
 8003902:	bd38      	pop	{r3, r4, r5, pc}

08003904 <sensor_register_listener>:
{
 8003904:	b570      	push	{r4, r5, r6, lr}
 8003906:	4604      	mov	r4, r0
 8003908:	460e      	mov	r6, r1
    rc = sensor_lock(sensor);
 800390a:	f7ff ff61 	bl	80037d0 <sensor_lock>
    if (rc != 0) {
 800390e:	4605      	mov	r5, r0
 8003910:	b928      	cbnz	r0, 800391e <sensor_register_listener+0x1a>
    SLIST_INSERT_HEAD(&sensor->s_listener_list, listener, sl_next);
 8003912:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    os_mutex_release(&sensor->s_lock);
 8003914:	1d20      	adds	r0, r4, #4
    SLIST_INSERT_HEAD(&sensor->s_listener_list, listener, sl_next);
 8003916:	6133      	str	r3, [r6, #16]
 8003918:	66e6      	str	r6, [r4, #108]	; 0x6c
    os_mutex_release(&sensor->s_lock);
 800391a:	f000 ffc1 	bl	80048a0 <os_mutex_release>
}
 800391e:	4628      	mov	r0, r5
 8003920:	bd70      	pop	{r4, r5, r6, pc}
	...

08003924 <sensor_read>:
 * @return 0 on success, non-zero on failure.
 */
int
sensor_read(struct sensor *sensor, sensor_type_t type,
        sensor_data_func_t data_func, void *arg, uint32_t timeout)
{
 8003924:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8003928:	b088      	sub	sp, #32
 800392a:	4604      	mov	r4, r0
 800392c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    struct sensor_read_ctx src;
    int rc;

    rc = sensor_lock(sensor);
 8003930:	f7ff ff4e 	bl	80037d0 <sensor_lock>
    if (rc) {
 8003934:	4605      	mov	r5, r0
 8003936:	2800      	cmp	r0, #0
 8003938:	d137      	bne.n	80039aa <sensor_read+0x86>
        goto err;
    }

    src.user_func = data_func;
 800393a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    src.user_arg = arg;

    if (!sensor_mgr_match_bytype(sensor, (void *)&type)) {
 800393c:	a904      	add	r1, sp, #16
    src.user_func = data_func;
 800393e:	9306      	str	r3, [sp, #24]
    src.user_arg = arg;
 8003940:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    if (!sensor_mgr_match_bytype(sensor, (void *)&type)) {
 8003942:	4620      	mov	r0, r4
    src.user_arg = arg;
 8003944:	9307      	str	r3, [sp, #28]
    if (!sensor_mgr_match_bytype(sensor, (void *)&type)) {
 8003946:	f7ff fe47 	bl	80035d8 <sensor_mgr_match_bytype>
 800394a:	2800      	cmp	r0, #0
 800394c:	d034      	beq.n	80039b8 <sensor_read+0x94>
    curr_ts_ticks = os_cputime_get32();
 800394e:	f000 fabd 	bl	8003ecc <os_cputime_get32>
    ts = os_cputime_ticks_to_usecs(curr_ts_ticks -
 8003952:	4b1b      	ldr	r3, [pc, #108]	; (80039c0 <sensor_read+0x9c>)
    sensor_base_ts.st_cputime = sensor->s_sts.st_cputime = curr_ts_ticks;
 8003954:	6460      	str	r0, [r4, #68]	; 0x44
    ts = os_cputime_ticks_to_usecs(curr_ts_ticks -
 8003956:	6959      	ldr	r1, [r3, #20]
    sensor_base_ts.st_ostv.tv_sec  = sensor_base_ts.st_ostv.tv_sec + (ts +
 8003958:	689a      	ldr	r2, [r3, #8]
    sensor_base_ts.st_cputime = sensor->s_sts.st_cputime = curr_ts_ticks;
 800395a:	6158      	str	r0, [r3, #20]
    sensor_base_ts.st_ostv.tv_sec  = sensor_base_ts.st_ostv.tv_sec + (ts +
 800395c:	1a52      	subs	r2, r2, r1
        sensor_base_ts.st_ostv.tv_usec)/1000000;
 800395e:	4919      	ldr	r1, [pc, #100]	; (80039c4 <sensor_read+0xa0>)
    sensor_base_ts.st_ostv.tv_sec  = sensor_base_ts.st_ostv.tv_sec + (ts +
 8003960:	4410      	add	r0, r2
        sensor_base_ts.st_ostv.tv_usec)/1000000;
 8003962:	fbb0 f2f1 	udiv	r2, r0, r1
    sensor_base_ts.st_ostv.tv_sec  = sensor_base_ts.st_ostv.tv_sec + (ts +
 8003966:	e9d3 6700 	ldrd	r6, r7, [r3]
        (sensor_base_ts.st_ostv.tv_usec + ts)%1000000;
 800396a:	fb01 0012 	mls	r0, r1, r2, r0
    sensor_base_ts.st_ostv.tv_sec  = sensor_base_ts.st_ostv.tv_sec + (ts +
 800396e:	eb16 0b02 	adds.w	fp, r6, r2
        goto err;
    }

    sensor_up_timestamp(sensor);

    rc = sensor->s_funcs->sd_read(sensor, type, sensor_read_data_func, &src,
 8003972:	9a10      	ldr	r2, [sp, #64]	; 0x40
    sensor_base_ts.st_ostv.tv_sec  = sensor_base_ts.st_ostv.tv_sec + (ts +
 8003974:	f147 0c00 	adc.w	ip, r7, #0
 8003978:	e9c3 bc00 	strd	fp, ip, [r3]
    sensor_base_ts.st_ostv.tv_usec  =
 800397c:	6098      	str	r0, [r3, #8]
    rc = sensor->s_funcs->sd_read(sensor, type, sensor_read_data_func, &src,
 800397e:	9202      	str	r2, [sp, #8]
 8003980:	aa06      	add	r2, sp, #24
 8003982:	9201      	str	r2, [sp, #4]
 8003984:	4a10      	ldr	r2, [pc, #64]	; (80039c8 <sensor_read+0xa4>)
 8003986:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003988:	9200      	str	r2, [sp, #0]
    sensor->s_sts.st_ostv.tv_usec = sensor_base_ts.st_ostv.tv_usec;
 800398a:	63a0      	str	r0, [r4, #56]	; 0x38
    rc = sensor->s_funcs->sd_read(sensor, type, sensor_read_data_func, &src,
 800398c:	6819      	ldr	r1, [r3, #0]
    sensor->s_sts.st_ostv.tv_sec = sensor_base_ts.st_ostv.tv_sec;
 800398e:	e9c4 bc0c 	strd	fp, ip, [r4, #48]	; 0x30
    rc = sensor->s_funcs->sd_read(sensor, type, sensor_read_data_func, &src,
 8003992:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003996:	4620      	mov	r0, r4
 8003998:	4788      	blx	r1
                                  timeout);
    if (rc) {
 800399a:	4605      	mov	r5, r0
 800399c:	b128      	cbz	r0, 80039aa <sensor_read+0x86>
        if (sensor->s_err_fn != NULL) {
 800399e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80039a0:	b11b      	cbz	r3, 80039aa <sensor_read+0x86>
            sensor->s_err_fn(sensor, sensor->s_err_arg, rc);
 80039a2:	4602      	mov	r2, r0
 80039a4:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80039a6:	4620      	mov	r0, r4
 80039a8:	4798      	blx	r3
    os_mutex_release(&sensor->s_lock);
 80039aa:	1d20      	adds	r0, r4, #4
 80039ac:	f000 ff78 	bl	80048a0 <os_mutex_release>
    }

err:
    sensor_unlock(sensor);
    return (rc);
}
 80039b0:	4628      	mov	r0, r5
 80039b2:	b008      	add	sp, #32
 80039b4:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
        rc = SYS_ENOENT;
 80039b8:	f06f 0503 	mvn.w	r5, #3
 80039bc:	e7f5      	b.n	80039aa <sensor_read+0x86>
 80039be:	bf00      	nop
 80039c0:	20003a90 	.word	0x20003a90
 80039c4:	000f4240 	.word	0x000f4240
 80039c8:	08003605 	.word	0x08003605

080039cc <sensor_mgr_wakeup_event>:
{
 80039cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80039d0:	b085      	sub	sp, #20
    now = os_time_get();
 80039d2:	f001 fa35 	bl	8004e40 <os_time_get>
        sensor_read(sensor, type, NULL, NULL, OS_TIMEOUT_NEVER);
 80039d6:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    now = os_time_get();
 80039da:	4607      	mov	r7, r0
    sensor_mgr_lock();
 80039dc:	f7ff fe74 	bl	80036c8 <sensor_mgr_lock>
    head = SLIST_FIRST(&sensor_mgr.mgr_sensor_list);
 80039e0:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 8003ab0 <sensor_mgr_wakeup_event+0xe4>
    sensor_mgr_lock();
 80039e4:	f7ff fe70 	bl	80036c8 <sensor_mgr_lock>
    head = SLIST_FIRST(&sensor_mgr.mgr_sensor_list);
 80039e8:	f8d9 4030 	ldr.w	r4, [r9, #48]	; 0x30
    sensor_lock(sensor);
 80039ec:	4620      	mov	r0, r4
    os_mutex_release(&sensor->s_lock);
 80039ee:	1d26      	adds	r6, r4, #4
    sensor_lock(sensor);
 80039f0:	f7ff feee 	bl	80037d0 <sensor_lock>
    os_mutex_release(&sensor->s_lock);
 80039f4:	4630      	mov	r0, r6
    delta = (int32_t)(sensor->s_next_run - now);
 80039f6:	6a65      	ldr	r5, [r4, #36]	; 0x24
    os_mutex_release(&sensor->s_lock);
 80039f8:	f000 ff52 	bl	80048a0 <os_mutex_release>
    sensor_mgr_unlock();
 80039fc:	f7ff fe72 	bl	80036e4 <sensor_mgr_unlock>
        sensor_lock(cursor);
 8003a00:	4620      	mov	r0, r4
 8003a02:	f7ff fee5 	bl	80037d0 <sensor_lock>
        if (!cursor->s_poll_rate) {
 8003a06:	6a23      	ldr	r3, [r4, #32]
    delta = (int32_t)(sensor->s_next_run - now);
 8003a08:	1bed      	subs	r5, r5, r7
        sensor_ticks = 0;
 8003a0a:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
        if (!cursor->s_poll_rate) {
 8003a0e:	b93b      	cbnz	r3, 8003a20 <sensor_mgr_wakeup_event+0x54>
    os_mutex_release(&sensor->s_lock);
 8003a10:	4630      	mov	r0, r6
 8003a12:	f000 ff45 	bl	80048a0 <os_mutex_release>
}
 8003a16:	b005      	add	sp, #20
 8003a18:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
            sensor_mgr_unlock();
 8003a1c:	f7ff be62 	b.w	80036e4 <sensor_mgr_unlock>
        if (next_wakeup > 0) {
 8003a20:	2d00      	cmp	r5, #0
 8003a22:	d13a      	bne.n	8003a9a <sensor_mgr_wakeup_event+0xce>
        if (sensor_type_traits_empty(cursor)) {
 8003a24:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8003a26:	b9bb      	cbnz	r3, 8003a58 <sensor_mgr_wakeup_event+0x8c>
        sensor_read(sensor, type, NULL, NULL, OS_TIMEOUT_NEVER);
 8003a28:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
 8003a2c:	e9cd 3801 	strd	r3, r8, [sp, #4]
 8003a30:	9300      	str	r3, [sp, #0]
 8003a32:	4602      	mov	r2, r0
 8003a34:	460b      	mov	r3, r1
 8003a36:	4620      	mov	r0, r4
 8003a38:	f7ff ff74 	bl	8003924 <sensor_read>
        sensor_lock(sensor);
 8003a3c:	4620      	mov	r0, r4
 8003a3e:	f7ff fec7 	bl	80037d0 <sensor_lock>
    os_mutex_release(&sensor->s_lock);
 8003a42:	4630      	mov	r0, r6
 8003a44:	f000 ff2c 	bl	80048a0 <os_mutex_release>
        sensor_update_nextrun(cursor, now);
 8003a48:	4620      	mov	r0, r4
 8003a4a:	4639      	mov	r1, r7
 8003a4c:	f7ff fecc 	bl	80037e8 <sensor_update_nextrun>
    os_mutex_release(&sensor->s_lock);
 8003a50:	4630      	mov	r0, r6
 8003a52:	f000 ff25 	bl	80048a0 <os_mutex_release>
 8003a56:	e7c5      	b.n	80039e4 <sensor_mgr_wakeup_event+0x18>
    sensor_lock(sensor);
 8003a58:	4620      	mov	r0, r4
 8003a5a:	f7ff feb9 	bl	80037d0 <sensor_lock>
    SLIST_FOREACH(stt, &sensor->s_type_traits_list, stt_next) {
 8003a5e:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 8003a60:	2d00      	cmp	r5, #0
 8003a62:	d0ee      	beq.n	8003a42 <sensor_mgr_wakeup_event+0x76>
    if (!stt || !stt->stt_polls_left) {
 8003a64:	8aab      	ldrh	r3, [r5, #20]
 8003a66:	b9ab      	cbnz	r3, 8003a94 <sensor_mgr_wakeup_event+0xc8>
        sensor_read(sensor, type, NULL, NULL, OS_TIMEOUT_NEVER);
 8003a68:	e9cd 3801 	strd	r3, r8, [sp, #4]
 8003a6c:	9300      	str	r3, [sp, #0]
 8003a6e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003a72:	4620      	mov	r0, r4
 8003a74:	f7ff ff56 	bl	8003924 <sensor_read>
        sensor_lock(sensor);
 8003a78:	4620      	mov	r0, r4
 8003a7a:	f7ff fea9 	bl	80037d0 <sensor_lock>
            if (!stt->stt_polls_left && stt->stt_poll_n) {
 8003a7e:	8aab      	ldrh	r3, [r5, #20]
 8003a80:	b91b      	cbnz	r3, 8003a8a <sensor_mgr_wakeup_event+0xbe>
 8003a82:	8a6b      	ldrh	r3, [r5, #18]
 8003a84:	b10b      	cbz	r3, 8003a8a <sensor_mgr_wakeup_event+0xbe>
                stt->stt_polls_left--;
 8003a86:	3b01      	subs	r3, #1
 8003a88:	82ab      	strh	r3, [r5, #20]
    os_mutex_release(&sensor->s_lock);
 8003a8a:	4630      	mov	r0, r6
 8003a8c:	f000 ff08 	bl	80048a0 <os_mutex_release>
    SLIST_FOREACH(stt, &sensor->s_type_traits_list, stt_next) {
 8003a90:	6a2d      	ldr	r5, [r5, #32]
 8003a92:	e7e5      	b.n	8003a60 <sensor_mgr_wakeup_event+0x94>
        stt->stt_polls_left--;
 8003a94:	3b01      	subs	r3, #1
 8003a96:	82ab      	strh	r3, [r5, #20]
 8003a98:	e7fa      	b.n	8003a90 <sensor_mgr_wakeup_event+0xc4>
    sensor_mgr_unlock();
 8003a9a:	f7ff fe23 	bl	80036e4 <sensor_mgr_unlock>
    os_callout_reset(&sensor_mgr.mgr_wakeup_callout, next_wakeup);
 8003a9e:	4629      	mov	r1, r5
 8003aa0:	4802      	ldr	r0, [pc, #8]	; (8003aac <sensor_mgr_wakeup_event+0xe0>)
}
 8003aa2:	b005      	add	sp, #20
 8003aa4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    os_callout_reset(&sensor_mgr.mgr_wakeup_callout, next_wakeup);
 8003aa8:	f000 b990 	b.w	8003dcc <os_callout_reset>
 8003aac:	20003a44 	.word	0x20003a44
 8003ab0:	20003a38 	.word	0x20003a38

08003ab4 <__assert_func>:
}
#endif

void
__assert_func(const char *file, int line, const char *func, const char *e)
{
 8003ab4:	4605      	mov	r5, r0
 8003ab6:	b508      	push	{r3, lr}
 8003ab8:	4674      	mov	r4, lr
 8003aba:	460e      	mov	r6, r1
    int sr;

    OS_ENTER_CRITICAL(sr);
 8003abc:	f001 fa44 	bl	8004f48 <os_arch_save_sr>
    (void)sr;
    console_blocking_mode();
 8003ac0:	f7fe fb8e 	bl	80021e0 <console_blocking_mode>
    OS_PRINT_ASSERT(file, line, func, e);
 8003ac4:	b97d      	cbnz	r5, 8003ae6 <__assert_func+0x32>
 8003ac6:	4621      	mov	r1, r4
 8003ac8:	480a      	ldr	r0, [pc, #40]	; (8003af4 <__assert_func+0x40>)
 8003aca:	f7fe fbaf 	bl	800222c <console_printf>

    if (hal_debugger_connected()) {
 8003ace:	f003 fe45 	bl	800775c <hal_debugger_connected>
 8003ad2:	b100      	cbz	r0, 8003ad6 <__assert_func+0x22>
       /*
        * If debugger is attached, breakpoint before the trap.
        */
       asm("bkpt");
 8003ad4:	be00      	bkpt	0x0000
    }
    SCB->ICSR = SCB_ICSR_NMIPENDSET_Msk;
 8003ad6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003ada:	4b07      	ldr	r3, [pc, #28]	; (8003af8 <__assert_func+0x44>)
 8003adc:	605a      	str	r2, [r3, #4]
    asm("isb");
 8003ade:	f3bf 8f6f 	isb	sy
    hal_system_reset();
 8003ae2:	f003 fe29 	bl	8007738 <hal_system_reset>
    OS_PRINT_ASSERT(file, line, func, e);
 8003ae6:	4633      	mov	r3, r6
 8003ae8:	462a      	mov	r2, r5
 8003aea:	4621      	mov	r1, r4
 8003aec:	4803      	ldr	r0, [pc, #12]	; (8003afc <__assert_func+0x48>)
 8003aee:	f7fe fb9d 	bl	800222c <console_printf>
 8003af2:	e7ec      	b.n	8003ace <__assert_func+0x1a>
 8003af4:	0800dcbb 	.word	0x0800dcbb
 8003af8:	e000ed00 	.word	0xe000ed00
 8003afc:	0800dcca 	.word	0x0800dcca

08003b00 <os_default_irq>:
}

void
os_default_irq(struct trap_frame *tf)
{
 8003b00:	4604      	mov	r4, r0
    uint32_t *orig_sp;
#endif

    console_blocking_mode();
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
      SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk, (uint32_t)tf->ef);
 8003b02:	4d1d      	ldr	r5, [pc, #116]	; (8003b78 <os_default_irq+0x78>)
{
 8003b04:	b507      	push	{r0, r1, r2, lr}
    console_blocking_mode();
 8003b06:	f7fe fb6b 	bl	80021e0 <console_blocking_mode>
      SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk, (uint32_t)tf->ef);
 8003b0a:	6869      	ldr	r1, [r5, #4]
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
 8003b0c:	6822      	ldr	r2, [r4, #0]
 8003b0e:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8003b12:	481a      	ldr	r0, [pc, #104]	; (8003b7c <os_default_irq+0x7c>)
 8003b14:	f7fe fb8a 	bl	800222c <console_printf>
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
      tf->ef->r0, tf->ef->r1, tf->ef->r2, tf->ef->r3);
 8003b18:	6821      	ldr	r1, [r4, #0]
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
 8003b1a:	4819      	ldr	r0, [pc, #100]	; (8003b80 <os_default_irq+0x80>)
 8003b1c:	68cb      	ldr	r3, [r1, #12]
 8003b1e:	9300      	str	r3, [sp, #0]
 8003b20:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
 8003b24:	6809      	ldr	r1, [r1, #0]
 8003b26:	f7fe fb81 	bl	800222c <console_printf>
    console_printf(" r4:0x%08lx  r5:0x%08lx  r6:0x%08lx  r7:0x%08lx\n",
 8003b2a:	6923      	ldr	r3, [r4, #16]
 8003b2c:	6861      	ldr	r1, [r4, #4]
 8003b2e:	9300      	str	r3, [sp, #0]
 8003b30:	4814      	ldr	r0, [pc, #80]	; (8003b84 <os_default_irq+0x84>)
 8003b32:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8003b36:	f7fe fb79 	bl	800222c <console_printf>
      tf->r4, tf->r5, tf->r6, tf->r7);
    console_printf(" r8:0x%08lx  r9:0x%08lx r10:0x%08lx r11:0x%08lx\n",
 8003b3a:	6a23      	ldr	r3, [r4, #32]
 8003b3c:	6961      	ldr	r1, [r4, #20]
 8003b3e:	9300      	str	r3, [sp, #0]
 8003b40:	4811      	ldr	r0, [pc, #68]	; (8003b88 <os_default_irq+0x88>)
 8003b42:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8003b46:	f7fe fb71 	bl	800222c <console_printf>
      tf->r8, tf->r9, tf->r10, tf->r11);
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
      tf->ef->r12, tf->ef->lr, tf->ef->pc, tf->ef->psr);
 8003b4a:	6821      	ldr	r1, [r4, #0]
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
 8003b4c:	480f      	ldr	r0, [pc, #60]	; (8003b8c <os_default_irq+0x8c>)
 8003b4e:	69cb      	ldr	r3, [r1, #28]
 8003b50:	9300      	str	r3, [sp, #0]
 8003b52:	e9d1 2305 	ldrd	r2, r3, [r1, #20]
 8003b56:	6909      	ldr	r1, [r1, #16]
 8003b58:	f7fe fb68 	bl	800222c <console_printf>
    console_printf("ICSR:0x%08lx HFSR:0x%08lx CFSR:0x%08lx\n",
 8003b5c:	6869      	ldr	r1, [r5, #4]
 8003b5e:	480c      	ldr	r0, [pc, #48]	; (8003b90 <os_default_irq+0x90>)
 8003b60:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8003b62:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003b64:	f7fe fb62 	bl	800222c <console_printf>
      SCB->ICSR, SCB->HFSR, SCB->CFSR);
    console_printf("BFAR:0x%08lx MMFAR:0x%08lx\n", SCB->BFAR, SCB->MMFAR);
 8003b68:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8003b6a:	480a      	ldr	r0, [pc, #40]	; (8003b94 <os_default_irq+0x94>)
 8003b6c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8003b6e:	f7fe fb5d 	bl	800222c <console_printf>
            : "r0"
        );
    }
#endif

    hal_system_reset();
 8003b72:	f003 fde1 	bl	8007738 <hal_system_reset>
 8003b76:	bf00      	nop
 8003b78:	e000ed00 	.word	0xe000ed00
 8003b7c:	0800dce1 	.word	0x0800dce1
 8003b80:	0800dd12 	.word	0x0800dd12
 8003b84:	0800dd43 	.word	0x0800dd43
 8003b88:	0800dd74 	.word	0x0800dd74
 8003b8c:	0800dda5 	.word	0x0800dda5
 8003b90:	0800ddd6 	.word	0x0800ddd6
 8003b94:	0800ddfe 	.word	0x0800ddfe

08003b98 <os_idle_task>:
 *
 * @param arg unused
 */
void
os_idle_task(void *arg)
{
 8003b98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    os_time_t sanity_itvl_ticks;

    sanity_itvl_ticks = (MYNEWT_VAL(SANITY_INTERVAL) * OS_TICKS_PER_SEC) / 1000;
    sanity_last = 0;

    hal_watchdog_tickle();
 8003b9c:	f004 f978 	bl	8007e90 <hal_watchdog_tickle>
    sanity_last = 0;
 8003ba0:	2400      	movs	r4, #0
        cticks = os_callout_wakeup_ticks(now);
        iticks = min(sticks, cticks);
        /* Wakeup in time to run sanity as well from the idle context,
         * as the idle task does not schedule itself.
         */
        iticks = min(iticks, ((sanity_last + sanity_itvl_ticks) - now));
 8003ba2:	f643 2798 	movw	r7, #15000	; 0x3a98
        ++g_os_idle_ctr;
 8003ba6:	4d1b      	ldr	r5, [pc, #108]	; (8003c14 <os_idle_task+0x7c>)
 8003ba8:	f8df 806c 	ldr.w	r8, [pc, #108]	; 8003c18 <os_idle_task+0x80>
 8003bac:	682b      	ldr	r3, [r5, #0]
 8003bae:	3301      	adds	r3, #1
 8003bb0:	602b      	str	r3, [r5, #0]
        now = os_time_get();
 8003bb2:	f001 f945 	bl	8004e40 <os_time_get>
        if (OS_TIME_TICK_GT(now, sanity_last + sanity_itvl_ticks)) {
 8003bb6:	f5a0 536a 	sub.w	r3, r0, #14976	; 0x3a80
 8003bba:	3b18      	subs	r3, #24
 8003bbc:	1b1b      	subs	r3, r3, r4
 8003bbe:	2b00      	cmp	r3, #0
        now = os_time_get();
 8003bc0:	4606      	mov	r6, r0
        if (OS_TIME_TICK_GT(now, sanity_last + sanity_itvl_ticks)) {
 8003bc2:	dd04      	ble.n	8003bce <os_idle_task+0x36>
            os_sanity_run();
 8003bc4:	f000 ff5c 	bl	8004a80 <os_sanity_run>
            sanity_last = now;
 8003bc8:	4634      	mov	r4, r6
            hal_watchdog_tickle();
 8003bca:	f004 f961 	bl	8007e90 <hal_watchdog_tickle>
        OS_ENTER_CRITICAL(sr);
 8003bce:	f001 f9bb 	bl	8004f48 <os_arch_save_sr>
 8003bd2:	4606      	mov	r6, r0
        now = os_time_get();
 8003bd4:	f001 f934 	bl	8004e40 <os_time_get>
 8003bd8:	4682      	mov	sl, r0
        sticks = os_sched_wakeup_ticks(now);
 8003bda:	f001 f867 	bl	8004cac <os_sched_wakeup_ticks>
 8003bde:	4681      	mov	r9, r0
        cticks = os_callout_wakeup_ticks(now);
 8003be0:	4650      	mov	r0, sl
 8003be2:	f000 f957 	bl	8003e94 <os_callout_wakeup_ticks>
        iticks = min(sticks, cticks);
 8003be6:	4581      	cmp	r9, r0
 8003be8:	bf28      	it	cs
 8003bea:	4681      	movcs	r9, r0
        iticks = min(iticks, ((sanity_last + sanity_itvl_ticks) - now));
 8003bec:	19e3      	adds	r3, r4, r7
 8003bee:	eba3 000a 	sub.w	r0, r3, sl
 8003bf2:	4548      	cmp	r0, r9
 8003bf4:	bf28      	it	cs
 8003bf6:	4648      	movcs	r0, r9

        if (iticks < MIN_IDLE_TICKS) {
 8003bf8:	2863      	cmp	r0, #99	; 0x63
 8003bfa:	d908      	bls.n	8003c0e <os_idle_task+0x76>
 8003bfc:	4540      	cmp	r0, r8
 8003bfe:	bf28      	it	cs
 8003c00:	4640      	movcs	r0, r8
        /* Tell the architecture specific support to put the processor to sleep
         * for 'n' ticks.
         */

        os_trace_idle();
        os_tick_idle(iticks);
 8003c02:	f003 fb23 	bl	800724c <os_tick_idle>
        OS_EXIT_CRITICAL(sr);
 8003c06:	4630      	mov	r0, r6
 8003c08:	f001 f9a4 	bl	8004f54 <os_arch_restore_sr>
        ++g_os_idle_ctr;
 8003c0c:	e7ce      	b.n	8003bac <os_idle_task+0x14>
            iticks = 0;
 8003c0e:	2000      	movs	r0, #0
 8003c10:	e7f7      	b.n	8003c02 <os_idle_task+0x6a>
 8003c12:	bf00      	nop
 8003c14:	20003af8 	.word	0x20003af8
 8003c18:	000927c0 	.word	0x000927c0

08003c1c <os_main>:
os_main(void *arg)
{
    int (*fn)(int argc, char **argv) = arg;

#if !MYNEWT_VAL(SELFTEST)
    fn(0, NULL);
 8003c1c:	2100      	movs	r1, #0
{
 8003c1e:	b508      	push	{r3, lr}
 8003c20:	4603      	mov	r3, r0
    fn(0, NULL);
 8003c22:	4608      	mov	r0, r1
 8003c24:	4798      	blx	r3
    (void)fn;
    while (1) {
        os_eventq_run(os_eventq_dflt_get());
    }
#endif
    assert(0);
 8003c26:	2300      	movs	r3, #0
 8003c28:	461a      	mov	r2, r3
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f7ff ff41 	bl	8003ab4 <__assert_func>
	...

08003c34 <os_started>:
}
 8003c34:	4b01      	ldr	r3, [pc, #4]	; (8003c3c <os_started+0x8>)
 8003c36:	6818      	ldr	r0, [r3, #0]
 8003c38:	4770      	bx	lr
 8003c3a:	bf00      	nop
 8003c3c:	20003afc 	.word	0x20003afc

08003c40 <os_init_idle_task>:
}
#endif

void
os_init_idle_task(void)
{
 8003c40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    int rc;

    rc = os_task_init(&g_idle_task, "idle", os_idle_task, NULL,
 8003c42:	2340      	movs	r3, #64	; 0x40
 8003c44:	9303      	str	r3, [sp, #12]
 8003c46:	4b10      	ldr	r3, [pc, #64]	; (8003c88 <os_init_idle_task+0x48>)
 8003c48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c4c:	9302      	str	r3, [sp, #8]
 8003c4e:	23ff      	movs	r3, #255	; 0xff
 8003c50:	490e      	ldr	r1, [pc, #56]	; (8003c8c <os_init_idle_task+0x4c>)
 8003c52:	e9cd 3200 	strd	r3, r2, [sp]
 8003c56:	480e      	ldr	r0, [pc, #56]	; (8003c90 <os_init_idle_task+0x50>)
 8003c58:	2300      	movs	r3, #0
 8003c5a:	4a0e      	ldr	r2, [pc, #56]	; (8003c94 <os_init_idle_task+0x54>)
 8003c5c:	f001 f858 	bl	8004d10 <os_task_init>
            OS_IDLE_PRIO, OS_WAIT_FOREVER, g_idle_task_stack,
            OS_STACK_ALIGN(OS_IDLE_STACK_SIZE));
    assert(rc == 0);
 8003c60:	b128      	cbz	r0, 8003c6e <os_init_idle_task+0x2e>
 8003c62:	2300      	movs	r3, #0
 8003c64:	461a      	mov	r2, r3
 8003c66:	4619      	mov	r1, r3
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f7ff ff23 	bl	8003ab4 <__assert_func>

    /* Initialize sanity */
    rc = os_sanity_init();
 8003c6e:	f000 ff2f 	bl	8004ad0 <os_sanity_init>
    assert(rc == 0);
 8003c72:	2800      	cmp	r0, #0
 8003c74:	d1f5      	bne.n	8003c62 <os_init_idle_task+0x22>

    rc = hal_watchdog_init(MYNEWT_VAL(WATCHDOG_INTERVAL));
 8003c76:	f247 5030 	movw	r0, #30000	; 0x7530
 8003c7a:	f004 f8e5 	bl	8007e48 <hal_watchdog_init>
    assert(rc == 0);
 8003c7e:	2800      	cmp	r0, #0
 8003c80:	d1ef      	bne.n	8003c62 <os_init_idle_task+0x22>

#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
    os_cputime_timer_init(&os_wdog_monitor, os_wdog_monitor_tmo, NULL);
    os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
}
 8003c82:	b005      	add	sp, #20
 8003c84:	f85d fb04 	ldr.w	pc, [sp], #4
 8003c88:	20000850 	.word	0x20000850
 8003c8c:	0800de1f 	.word	0x0800de1f
 8003c90:	20003aa8 	.word	0x20003aa8
 8003c94:	08003b99 	.word	0x08003b99

08003c98 <os_init>:

void
os_init(int (*main_fn)(int argc, char **arg))
{
 8003c98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
#if MYNEWT_VAL(RTT)
    memset(&_SEGGER_RTT, 0, sizeof(_SEGGER_RTT));
    SEGGER_RTT_Init();
#endif

    TAILQ_INIT(&g_callout_list);
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	4a1c      	ldr	r2, [pc, #112]	; (8003d10 <os_init+0x78>)
{
 8003c9e:	4604      	mov	r4, r0
    TAILQ_INIT(&g_callout_list);
 8003ca0:	e9c2 3200 	strd	r3, r2, [r2]
    STAILQ_INIT(&g_os_task_list);
 8003ca4:	4a1b      	ldr	r2, [pc, #108]	; (8003d14 <os_init+0x7c>)
 8003ca6:	e9c2 3200 	strd	r3, r2, [r2]
    os_eventq_init(os_eventq_dflt_get());
 8003caa:	f000 fa69 	bl	8004180 <os_eventq_dflt_get>
 8003cae:	f000 f9cd 	bl	800404c <os_eventq_init>

    /* Initialize device list. */
    os_dev_reset();
 8003cb2:	f000 f9c3 	bl	800403c <os_dev_reset>

    err = os_arch_os_init();
 8003cb6:	f001 f97b 	bl	8004fb0 <os_arch_os_init>
    assert(err == OS_OK);
 8003cba:	b128      	cbz	r0, 8003cc8 <os_init+0x30>
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f7ff fef6 	bl	8003ab4 <__assert_func>

    if (main_fn) {
 8003cc8:	b194      	cbz	r4, 8003cf0 <os_init+0x58>
        err = os_task_init(&os_main_task, "main", os_main, main_fn,
 8003cca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003cce:	9303      	str	r3, [sp, #12]
 8003cd0:	4b11      	ldr	r3, [pc, #68]	; (8003d18 <os_init+0x80>)
 8003cd2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003cd6:	9302      	str	r3, [sp, #8]
 8003cd8:	237f      	movs	r3, #127	; 0x7f
 8003cda:	4910      	ldr	r1, [pc, #64]	; (8003d1c <os_init+0x84>)
 8003cdc:	e9cd 3200 	strd	r3, r2, [sp]
 8003ce0:	480f      	ldr	r0, [pc, #60]	; (8003d20 <os_init+0x88>)
 8003ce2:	4623      	mov	r3, r4
 8003ce4:	4a0f      	ldr	r2, [pc, #60]	; (8003d24 <os_init+0x8c>)
 8003ce6:	f001 f813 	bl	8004d10 <os_task_init>
                           OS_MAIN_TASK_PRIO, OS_WAIT_FOREVER, os_main_stack,
                           OS_STACK_ALIGN(OS_MAIN_STACK_SIZE));
        assert(err == 0);
 8003cea:	f010 0fff 	tst.w	r0, #255	; 0xff
 8003cee:	d1e5      	bne.n	8003cbc <os_init+0x24>
    }
    /* Call bsp related OS initializations */
    hal_bsp_init();
 8003cf0:	f003 f910 	bl	8006f14 <hal_bsp_init>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_PRIMARY);
 8003cf4:	2001      	movs	r0, #1
 8003cf6:	f000 f941 	bl	8003f7c <os_dev_initialize_all>
    assert(err == OS_OK);
 8003cfa:	f010 0fff 	tst.w	r0, #255	; 0xff
 8003cfe:	d1dd      	bne.n	8003cbc <os_init+0x24>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_SECONDARY);
 8003d00:	2002      	movs	r0, #2
 8003d02:	f000 f93b 	bl	8003f7c <os_dev_initialize_all>
    assert(err == OS_OK);
 8003d06:	f010 0fff 	tst.w	r0, #255	; 0xff
 8003d0a:	d1d7      	bne.n	8003cbc <os_init+0x24>
}
 8003d0c:	b004      	add	sp, #16
 8003d0e:	bd10      	pop	{r4, pc}
 8003d10:	20003b00 	.word	0x20003b00
 8003d14:	20003b24 	.word	0x20003b24
 8003d18:	20000950 	.word	0x20000950
 8003d1c:	0800de1a 	.word	0x0800de1a
 8003d20:	20001950 	.word	0x20001950
 8003d24:	08003c1d 	.word	0x08003c1d

08003d28 <os_start>:

void
os_start(void)
{
 8003d28:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_SCHEDULING)
    os_error_t err;

    /* Enable the watchdog prior to starting the OS */
    hal_watchdog_enable();
 8003d2a:	f004 f8a5 	bl	8007e78 <hal_watchdog_enable>

    err = os_arch_os_start();
 8003d2e:	f001 f9a3 	bl	8005078 <os_arch_os_start>
    assert(err == OS_OK);
 8003d32:	b128      	cbz	r0, 8003d40 <os_start+0x18>
 8003d34:	2300      	movs	r3, #0
 8003d36:	461a      	mov	r2, r3
 8003d38:	4619      	mov	r1, r3
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f7ff feba 	bl	8003ab4 <__assert_func>
#else
    assert(0);
#endif
}
 8003d40:	bd08      	pop	{r3, pc}
	...

08003d44 <os_pkg_init>:
    hal_system_reset();
}

void
os_pkg_init(void)
{
 8003d44:	b508      	push	{r3, lr}
    os_error_t err;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
 8003d46:	4b0a      	ldr	r3, [pc, #40]	; (8003d70 <os_pkg_init+0x2c>)
 8003d48:	781b      	ldrb	r3, [r3, #0]
 8003d4a:	b92b      	cbnz	r3, 8003d58 <os_pkg_init+0x14>
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	461a      	mov	r2, r3
 8003d50:	4619      	mov	r1, r3
 8003d52:	4618      	mov	r0, r3
 8003d54:	f7ff feae 	bl	8003ab4 <__assert_func>

    err = os_dev_initialize_all(OS_DEV_INIT_KERNEL);
 8003d58:	2003      	movs	r0, #3
 8003d5a:	f000 f90f 	bl	8003f7c <os_dev_initialize_all>
    assert(err == OS_OK);
 8003d5e:	f010 0fff 	tst.w	r0, #255	; 0xff
 8003d62:	d1f3      	bne.n	8003d4c <os_pkg_init+0x8>

    os_mempool_module_init();
 8003d64:	f000 fd16 	bl	8004794 <os_mempool_module_init>
    os_msys_init();
}
 8003d68:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    os_msys_init();
 8003d6c:	f000 bd5e 	b.w	800482c <os_msys_init>
 8003d70:	20003a30 	.word	0x20003a30

08003d74 <os_callout_init>:

struct os_callout_list g_callout_list;

void os_callout_init(struct os_callout *c, struct os_eventq *evq,
                     os_event_fn *ev_cb, void *ev_arg)
{
 8003d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d76:	4604      	mov	r4, r0
 8003d78:	460d      	mov	r5, r1
 8003d7a:	4617      	mov	r7, r2
 8003d7c:	461e      	mov	r6, r3
    os_trace_api_u32x2(OS_TRACE_ID_CALLOUT_INIT, (uint32_t)c, (uint32_t)evq);

    memset(c, 0, sizeof(*c));
 8003d7e:	2220      	movs	r2, #32
 8003d80:	2100      	movs	r1, #0
 8003d82:	f001 fb00 	bl	8005386 <memset>
    c->c_ev.ev_cb = ev_cb;
    c->c_ev.ev_arg = ev_arg;
 8003d86:	e9c4 7601 	strd	r7, r6, [r4, #4]
    c->c_evq = evq;
 8003d8a:	6125      	str	r5, [r4, #16]

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_INIT);
}
 8003d8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003d90 <os_callout_stop>:

void
os_callout_stop(struct os_callout *c)
{
 8003d90:	b538      	push	{r3, r4, r5, lr}
 8003d92:	4604      	mov	r4, r0
    os_sr_t sr;

    os_trace_api_u32(OS_TRACE_ID_CALLOUT_STOP, (uint32_t)c);

    OS_ENTER_CRITICAL(sr);
 8003d94:	f001 f8d8 	bl	8004f48 <os_arch_save_sr>

    if (os_callout_queued(c)) {
 8003d98:	69e2      	ldr	r2, [r4, #28]
    OS_ENTER_CRITICAL(sr);
 8003d9a:	4605      	mov	r5, r0
    if (os_callout_queued(c)) {
 8003d9c:	b132      	cbz	r2, 8003dac <os_callout_stop+0x1c>
        TAILQ_REMOVE(&g_callout_list, c, c_next);
 8003d9e:	69a3      	ldr	r3, [r4, #24]
 8003da0:	b173      	cbz	r3, 8003dc0 <os_callout_stop+0x30>
 8003da2:	61da      	str	r2, [r3, #28]
 8003da4:	69e2      	ldr	r2, [r4, #28]
 8003da6:	6013      	str	r3, [r2, #0]
        c->c_next.tqe_prev = NULL;
 8003da8:	2300      	movs	r3, #0
 8003daa:	61e3      	str	r3, [r4, #28]
    }

    if (c->c_evq) {
 8003dac:	6920      	ldr	r0, [r4, #16]
 8003dae:	b110      	cbz	r0, 8003db6 <os_callout_stop+0x26>
        os_eventq_remove(c->c_evq, &c->c_ev);
 8003db0:	4621      	mov	r1, r4
 8003db2:	f000 f9c6 	bl	8004142 <os_eventq_remove>
    }

    OS_EXIT_CRITICAL(sr);
 8003db6:	4628      	mov	r0, r5

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_STOP);
}
 8003db8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    OS_EXIT_CRITICAL(sr);
 8003dbc:	f001 b8ca 	b.w	8004f54 <os_arch_restore_sr>
        TAILQ_REMOVE(&g_callout_list, c, c_next);
 8003dc0:	4901      	ldr	r1, [pc, #4]	; (8003dc8 <os_callout_stop+0x38>)
 8003dc2:	604a      	str	r2, [r1, #4]
 8003dc4:	e7ee      	b.n	8003da4 <os_callout_stop+0x14>
 8003dc6:	bf00      	nop
 8003dc8:	20003b00 	.word	0x20003b00

08003dcc <os_callout_reset>:
    struct os_callout *entry;
    os_sr_t sr;
    int ret;

    /* Ensure this callout has been initialized. */
    assert(c->c_evq != NULL);
 8003dcc:	6903      	ldr	r3, [r0, #16]
{
 8003dce:	b570      	push	{r4, r5, r6, lr}
 8003dd0:	4604      	mov	r4, r0
 8003dd2:	460d      	mov	r5, r1
    assert(c->c_evq != NULL);
 8003dd4:	b923      	cbnz	r3, 8003de0 <os_callout_reset+0x14>
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	4619      	mov	r1, r3
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f7ff fe6a 	bl	8003ab4 <__assert_func>

    os_trace_api_u32x2(OS_TRACE_ID_CALLOUT_RESET, (uint32_t)c, (uint32_t)ticks);

    if (ticks > INT32_MAX) {
 8003de0:	2900      	cmp	r1, #0
 8003de2:	db1c      	blt.n	8003e1e <os_callout_reset+0x52>
        ret = OS_EINVAL;
        goto err;
    }

    OS_ENTER_CRITICAL(sr);
 8003de4:	f001 f8b0 	bl	8004f48 <os_arch_save_sr>
 8003de8:	4606      	mov	r6, r0

    os_callout_stop(c);
 8003dea:	4620      	mov	r0, r4
 8003dec:	f7ff ffd0 	bl	8003d90 <os_callout_stop>

    if (ticks == 0) {
        ticks = 1;
 8003df0:	2d00      	cmp	r5, #0
 8003df2:	bf08      	it	eq
 8003df4:	2501      	moveq	r5, #1
    }

    c->c_ticks = os_time_get() + ticks;
 8003df6:	f001 f823 	bl	8004e40 <os_time_get>

    entry = NULL;
    TAILQ_FOREACH(entry, &g_callout_list, c_next) {
 8003dfa:	4a10      	ldr	r2, [pc, #64]	; (8003e3c <os_callout_reset+0x70>)
    c->c_ticks = os_time_get() + ticks;
 8003dfc:	4428      	add	r0, r5
    TAILQ_FOREACH(entry, &g_callout_list, c_next) {
 8003dfe:	6813      	ldr	r3, [r2, #0]
    c->c_ticks = os_time_get() + ticks;
 8003e00:	6160      	str	r0, [r4, #20]
    TAILQ_FOREACH(entry, &g_callout_list, c_next) {
 8003e02:	b933      	cbnz	r3, 8003e12 <os_callout_reset+0x46>
    }

    if (entry) {
        TAILQ_INSERT_BEFORE(entry, c, c_next);
    } else {
        TAILQ_INSERT_TAIL(&g_callout_list, c, c_next);
 8003e04:	61a3      	str	r3, [r4, #24]
 8003e06:	6853      	ldr	r3, [r2, #4]
 8003e08:	61e3      	str	r3, [r4, #28]
 8003e0a:	601c      	str	r4, [r3, #0]
 8003e0c:	3418      	adds	r4, #24
 8003e0e:	6054      	str	r4, [r2, #4]
 8003e10:	e00e      	b.n	8003e30 <os_callout_reset+0x64>
        if (OS_TIME_TICK_LT(c->c_ticks, entry->c_ticks)) {
 8003e12:	6959      	ldr	r1, [r3, #20]
 8003e14:	1a41      	subs	r1, r0, r1
 8003e16:	2900      	cmp	r1, #0
 8003e18:	db03      	blt.n	8003e22 <os_callout_reset+0x56>
    TAILQ_FOREACH(entry, &g_callout_list, c_next) {
 8003e1a:	699b      	ldr	r3, [r3, #24]
 8003e1c:	e7f1      	b.n	8003e02 <os_callout_reset+0x36>
        ret = OS_EINVAL;
 8003e1e:	2002      	movs	r0, #2

    ret = OS_OK;

err:
    os_trace_api_ret_u32(OS_TRACE_ID_CALLOUT_RESET, (uint32_t)ret);
    return ret;
 8003e20:	e00a      	b.n	8003e38 <os_callout_reset+0x6c>
        TAILQ_INSERT_BEFORE(entry, c, c_next);
 8003e22:	69da      	ldr	r2, [r3, #28]
 8003e24:	e9c4 3206 	strd	r3, r2, [r4, #24]
 8003e28:	69da      	ldr	r2, [r3, #28]
 8003e2a:	6014      	str	r4, [r2, #0]
 8003e2c:	3418      	adds	r4, #24
 8003e2e:	61dc      	str	r4, [r3, #28]
    OS_EXIT_CRITICAL(sr);
 8003e30:	4630      	mov	r0, r6
 8003e32:	f001 f88f 	bl	8004f54 <os_arch_restore_sr>
    ret = OS_OK;
 8003e36:	2000      	movs	r0, #0
}
 8003e38:	bd70      	pop	{r4, r5, r6, pc}
 8003e3a:	bf00      	nop
 8003e3c:	20003b00 	.word	0x20003b00

08003e40 <os_callout_tick>:
 * to run, it posts an event for each callout that's ready to run,
 * to the event queue provided to os_callout_init().
 */
void
os_callout_tick(void)
{
 8003e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    struct os_callout *c;
    uint32_t now;

    os_trace_api_void(OS_TRACE_ID_CALLOUT_TICK);

    now = os_time_get();
 8003e42:	f000 fffd 	bl	8004e40 <os_time_get>
 8003e46:	2700      	movs	r7, #0
 8003e48:	4606      	mov	r6, r0

    while (1) {
        OS_ENTER_CRITICAL(sr);
        c = TAILQ_FIRST(&g_callout_list);
 8003e4a:	4d11      	ldr	r5, [pc, #68]	; (8003e90 <os_callout_tick+0x50>)
        OS_ENTER_CRITICAL(sr);
 8003e4c:	f001 f87c 	bl	8004f48 <os_arch_save_sr>
        c = TAILQ_FIRST(&g_callout_list);
 8003e50:	682c      	ldr	r4, [r5, #0]
        if (c) {
 8003e52:	b154      	cbz	r4, 8003e6a <os_callout_tick+0x2a>
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
 8003e54:	6963      	ldr	r3, [r4, #20]
 8003e56:	1af3      	subs	r3, r6, r3
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	db11      	blt.n	8003e80 <os_callout_tick+0x40>
 8003e5c:	e9d4 3206 	ldrd	r3, r2, [r4, #24]
                TAILQ_REMOVE(&g_callout_list, c, c_next);
 8003e60:	b163      	cbz	r3, 8003e7c <os_callout_tick+0x3c>
 8003e62:	61da      	str	r2, [r3, #28]
 8003e64:	69e2      	ldr	r2, [r4, #28]
 8003e66:	6013      	str	r3, [r2, #0]
                c->c_next.tqe_prev = NULL;
 8003e68:	61e7      	str	r7, [r4, #28]
            } else {
                c = NULL;
            }
        }
        OS_EXIT_CRITICAL(sr);
 8003e6a:	f001 f873 	bl	8004f54 <os_arch_restore_sr>

        if (c) {
 8003e6e:	b16c      	cbz	r4, 8003e8c <os_callout_tick+0x4c>
            if (c->c_evq) {
 8003e70:	6920      	ldr	r0, [r4, #16]
 8003e72:	b138      	cbz	r0, 8003e84 <os_callout_tick+0x44>
                os_eventq_put(c->c_evq, &c->c_ev);
 8003e74:	4621      	mov	r1, r4
 8003e76:	f000 f8f1 	bl	800405c <os_eventq_put>
 8003e7a:	e7e7      	b.n	8003e4c <os_callout_tick+0xc>
                TAILQ_REMOVE(&g_callout_list, c, c_next);
 8003e7c:	606a      	str	r2, [r5, #4]
 8003e7e:	e7f1      	b.n	8003e64 <os_callout_tick+0x24>
 8003e80:	2400      	movs	r4, #0
 8003e82:	e7f2      	b.n	8003e6a <os_callout_tick+0x2a>
            } else {
                c->c_ev.ev_cb(&c->c_ev);
 8003e84:	6863      	ldr	r3, [r4, #4]
 8003e86:	4620      	mov	r0, r4
 8003e88:	4798      	blx	r3
 8003e8a:	e7df      	b.n	8003e4c <os_callout_tick+0xc>
            break;
        }
    }

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_TICK);
}
 8003e8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	20003b00 	.word	0x20003b00

08003e94 <os_callout_wakeup_ticks>:
 *
 * @return Number of ticks to first pending callout
 */
os_time_t
os_callout_wakeup_ticks(os_time_t now)
{
 8003e94:	b510      	push	{r4, lr}
 8003e96:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_callout *c;

    OS_ASSERT_CRITICAL();
 8003e98:	f001 f85f 	bl	8004f5a <os_arch_in_critical>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	b918      	cbnz	r0, 8003ea8 <os_callout_wakeup_ticks+0x14>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	4601      	mov	r1, r0
 8003ea4:	f7ff fe06 	bl	8003ab4 <__assert_func>

    c = TAILQ_FIRST(&g_callout_list);
 8003ea8:	4b05      	ldr	r3, [pc, #20]	; (8003ec0 <os_callout_wakeup_ticks+0x2c>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
    if (c != NULL) {
 8003eac:	b123      	cbz	r3, 8003eb8 <os_callout_wakeup_ticks+0x24>
        if (OS_TIME_TICK_GEQ(c->c_ticks, now)) {
 8003eae:	6958      	ldr	r0, [r3, #20]
 8003eb0:	1b00      	subs	r0, r0, r4
            rt = c->c_ticks - now;
        } else {
            rt = 0;     /* callout time is in the past */
 8003eb2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    } else {
        rt = OS_TIMEOUT_NEVER;
    }

    return (rt);
}
 8003eb6:	bd10      	pop	{r4, pc}
        rt = OS_TIMEOUT_NEVER;
 8003eb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ebc:	e7fb      	b.n	8003eb6 <os_callout_wakeup_ticks+0x22>
 8003ebe:	bf00      	nop
 8003ec0:	20003b00 	.word	0x20003b00

08003ec4 <os_cputime_init>:

    /* Set the ticks per microsecond. */
#if defined(OS_CPUTIME_FREQ_HIGH)
    g_os_cputime.ticks_per_usec = clock_freq / 1000000U;
#endif
    rc = hal_timer_config(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM), clock_freq);
 8003ec4:	4601      	mov	r1, r0
 8003ec6:	2000      	movs	r0, #0
 8003ec8:	f003 bd4e 	b.w	8007968 <hal_timer_config>

08003ecc <os_cputime_get32>:
uint32_t
os_cputime_get32(void)
{
    uint32_t cpu_time;

    cpu_time = hal_timer_read(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM));
 8003ecc:	2000      	movs	r0, #0
 8003ece:	f003 bd8d 	b.w	80079ec <hal_timer_read>

08003ed2 <os_dev_initialize>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_initialize(struct os_dev *dev)
{
 8003ed2:	b510      	push	{r4, lr}
    int rc;

    rc = dev->od_init(dev, dev->od_init_arg);
 8003ed4:	e9d0 3104 	ldrd	r3, r1, [r0, #16]
{
 8003ed8:	4604      	mov	r4, r0
    rc = dev->od_init(dev, dev->od_init_arg);
 8003eda:	4798      	blx	r3
 8003edc:	7ee3      	ldrb	r3, [r4, #27]
    if (rc != 0) {
 8003ede:	b120      	cbz	r0, 8003eea <os_dev_initialize+0x18>
        if (dev->od_flags & OS_DEV_F_INIT_CRITICAL) {
 8003ee0:	f013 0f08 	tst.w	r3, #8
            goto err;
        }
    } else {
        dev->od_flags |= OS_DEV_F_STATUS_READY;
    }
    return 0;
 8003ee4:	bf08      	it	eq
 8003ee6:	2000      	moveq	r0, #0
err:
    return rc;
}
 8003ee8:	bd10      	pop	{r4, pc}
        dev->od_flags |= OS_DEV_F_STATUS_READY;
 8003eea:	f043 0301 	orr.w	r3, r3, #1
 8003eee:	76e3      	strb	r3, [r4, #27]
 8003ef0:	e7fa      	b.n	8003ee8 <os_dev_initialize+0x16>
	...

08003ef4 <os_dev_create>:

int
os_dev_create(struct os_dev *dev, const char *name, uint8_t stage,
        uint8_t priority, os_dev_init_func_t od_init, void *arg)
{
 8003ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ef6:	4604      	mov	r4, r0
    dev->od_open_ref = 0;
 8003ef8:	2500      	movs	r5, #0
    dev->od_name = name;
 8003efa:	61c1      	str	r1, [r0, #28]
{
 8003efc:	461f      	mov	r7, r3
    dev->od_priority = priority;
 8003efe:	7663      	strb	r3, [r4, #25]
    dev->od_init = od_init;
 8003f00:	9b06      	ldr	r3, [sp, #24]
    dev->od_stage = stage;
 8003f02:	7622      	strb	r2, [r4, #24]
    dev->od_init = od_init;
 8003f04:	6103      	str	r3, [r0, #16]
    dev->od_init_arg = arg;
 8003f06:	9b07      	ldr	r3, [sp, #28]
{
 8003f08:	4616      	mov	r6, r2
    dev->od_init_arg = arg;
 8003f0a:	6143      	str	r3, [r0, #20]
    memset(&dev->od_handlers, 0, sizeof(dev->od_handlers));
 8003f0c:	2210      	movs	r2, #16
    dev->od_open_ref = 0;
 8003f0e:	8345      	strh	r5, [r0, #26]
    memset(&dev->od_handlers, 0, sizeof(dev->od_handlers));
 8003f10:	4629      	mov	r1, r5
 8003f12:	f001 fa38 	bl	8005386 <memset>
    if (STAILQ_FIRST(&g_os_dev_list) == NULL) {
 8003f16:	4a17      	ldr	r2, [pc, #92]	; (8003f74 <os_dev_create+0x80>)
 8003f18:	6810      	ldr	r0, [r2, #0]
 8003f1a:	4613      	mov	r3, r2
 8003f1c:	b960      	cbnz	r0, 8003f38 <os_dev_create+0x44>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
 8003f1e:	4623      	mov	r3, r4
 8003f20:	f843 0f20 	str.w	r0, [r3, #32]!
 8003f24:	e9c2 4300 	strd	r4, r3, [r2]
    rc = os_dev_add(dev);
    if (rc != 0) {
        goto err;
    }

    if (g_os_started) {
 8003f28:	4b13      	ldr	r3, [pc, #76]	; (8003f78 <os_dev_create+0x84>)
 8003f2a:	6818      	ldr	r0, [r3, #0]
 8003f2c:	b300      	cbz	r0, 8003f70 <os_dev_create+0x7c>
        rc = os_dev_initialize(dev);
 8003f2e:	4620      	mov	r0, r4
    }
err:
    return (rc);
}
 8003f30:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        rc = os_dev_initialize(dev);
 8003f34:	f7ff bfcd 	b.w	8003ed2 <os_dev_initialize>
    if (STAILQ_FIRST(&g_os_dev_list) == NULL) {
 8003f38:	4602      	mov	r2, r0
    prev_dev = NULL;
 8003f3a:	4629      	mov	r1, r5
        if (dev->od_stage < cur_dev->od_stage ||
 8003f3c:	7e15      	ldrb	r5, [r2, #24]
 8003f3e:	42ae      	cmp	r6, r5
 8003f40:	d30a      	bcc.n	8003f58 <os_dev_create+0x64>
 8003f42:	d102      	bne.n	8003f4a <os_dev_create+0x56>
            ((dev->od_stage == cur_dev->od_stage) &&
 8003f44:	7e55      	ldrb	r5, [r2, #25]
 8003f46:	42bd      	cmp	r5, r7
 8003f48:	d806      	bhi.n	8003f58 <os_dev_create+0x64>
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
 8003f4a:	6a15      	ldr	r5, [r2, #32]
 8003f4c:	4611      	mov	r1, r2
 8003f4e:	b90d      	cbnz	r5, 8003f54 <os_dev_create+0x60>
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
 8003f50:	6225      	str	r5, [r4, #32]
 8003f52:	e005      	b.n	8003f60 <os_dev_create+0x6c>
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
 8003f54:	462a      	mov	r2, r5
 8003f56:	e7f1      	b.n	8003f3c <os_dev_create+0x48>
    if (prev_dev) {
 8003f58:	b139      	cbz	r1, 8003f6a <os_dev_create+0x76>
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
 8003f5a:	6a0a      	ldr	r2, [r1, #32]
 8003f5c:	6222      	str	r2, [r4, #32]
 8003f5e:	b912      	cbnz	r2, 8003f66 <os_dev_create+0x72>
 8003f60:	f104 0220 	add.w	r2, r4, #32
 8003f64:	605a      	str	r2, [r3, #4]
 8003f66:	620c      	str	r4, [r1, #32]
 8003f68:	e7de      	b.n	8003f28 <os_dev_create+0x34>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
 8003f6a:	6220      	str	r0, [r4, #32]
 8003f6c:	601c      	str	r4, [r3, #0]
 8003f6e:	e7db      	b.n	8003f28 <os_dev_create+0x34>
}
 8003f70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f72:	bf00      	nop
 8003f74:	200019a0 	.word	0x200019a0
 8003f78:	20003afc 	.word	0x20003afc

08003f7c <os_dev_initialize_all>:

int
os_dev_initialize_all(uint8_t stage)
{
 8003f7c:	b538      	push	{r3, r4, r5, lr}
 8003f7e:	4605      	mov	r5, r0
    struct os_dev *dev;
    int rc = 0;

    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
 8003f80:	4b07      	ldr	r3, [pc, #28]	; (8003fa0 <os_dev_initialize_all+0x24>)
 8003f82:	681c      	ldr	r4, [r3, #0]
 8003f84:	b90c      	cbnz	r4, 8003f8a <os_dev_initialize_all+0xe>
 8003f86:	4620      	mov	r0, r4
                break;
            }
        }
    }

    return (rc);
 8003f88:	e009      	b.n	8003f9e <os_dev_initialize_all+0x22>
        if (dev->od_stage == stage) {
 8003f8a:	7e23      	ldrb	r3, [r4, #24]
 8003f8c:	42ab      	cmp	r3, r5
 8003f8e:	d001      	beq.n	8003f94 <os_dev_initialize_all+0x18>
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
 8003f90:	6a24      	ldr	r4, [r4, #32]
 8003f92:	e7f7      	b.n	8003f84 <os_dev_initialize_all+0x8>
            rc = os_dev_initialize(dev);
 8003f94:	4620      	mov	r0, r4
 8003f96:	f7ff ff9c 	bl	8003ed2 <os_dev_initialize>
            if (rc) {
 8003f9a:	2800      	cmp	r0, #0
 8003f9c:	d0f8      	beq.n	8003f90 <os_dev_initialize_all+0x14>
}
 8003f9e:	bd38      	pop	{r3, r4, r5, pc}
 8003fa0:	200019a0 	.word	0x200019a0

08003fa4 <os_dev_lookup>:
    return (rc);
}

struct os_dev *
os_dev_lookup(const char *name)
{
 8003fa4:	b538      	push	{r3, r4, r5, lr}
 8003fa6:	4605      	mov	r5, r0
    struct os_dev *dev;

    dev = NULL;
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
 8003fa8:	4b06      	ldr	r3, [pc, #24]	; (8003fc4 <os_dev_lookup+0x20>)
 8003faa:	681c      	ldr	r4, [r3, #0]
 8003fac:	b90c      	cbnz	r4, 8003fb2 <os_dev_lookup+0xe>
        if (!strcmp(dev->od_name, name)) {
            break;
        }
    }
    return (dev);
}
 8003fae:	4620      	mov	r0, r4
 8003fb0:	bd38      	pop	{r3, r4, r5, pc}
        if (!strcmp(dev->od_name, name)) {
 8003fb2:	4629      	mov	r1, r5
 8003fb4:	69e0      	ldr	r0, [r4, #28]
 8003fb6:	f001 f9fd 	bl	80053b4 <strcmp>
 8003fba:	2800      	cmp	r0, #0
 8003fbc:	d0f7      	beq.n	8003fae <os_dev_lookup+0xa>
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
 8003fbe:	6a24      	ldr	r4, [r4, #32]
 8003fc0:	e7f4      	b.n	8003fac <os_dev_lookup+0x8>
 8003fc2:	bf00      	nop
 8003fc4:	200019a0 	.word	0x200019a0

08003fc8 <os_dev_open>:

struct os_dev *
os_dev_open(const char *devname, uint32_t timo, void *arg)
{
 8003fc8:	b570      	push	{r4, r5, r6, lr}
 8003fca:	460d      	mov	r5, r1
 8003fcc:	4616      	mov	r6, r2
    struct os_dev *dev;
    os_sr_t sr;
    int rc;

    dev = os_dev_lookup(devname);
 8003fce:	f7ff ffe9 	bl	8003fa4 <os_dev_lookup>
    if (dev == NULL) {
 8003fd2:	4604      	mov	r4, r0
 8003fd4:	b910      	cbnz	r0, 8003fdc <os_dev_open+0x14>
        return (NULL);
 8003fd6:	2400      	movs	r4, #0
    OS_EXIT_CRITICAL(sr);

    return (dev);
err:
    return (NULL);
}
 8003fd8:	4620      	mov	r0, r4
 8003fda:	bd70      	pop	{r4, r5, r6, pc}
    if ((dev->od_flags & OS_DEV_F_STATUS_READY) == 0) {
 8003fdc:	7ec3      	ldrb	r3, [r0, #27]
 8003fde:	07db      	lsls	r3, r3, #31
 8003fe0:	d5f9      	bpl.n	8003fd6 <os_dev_open+0xe>
    if (dev->od_handlers.od_open) {
 8003fe2:	6803      	ldr	r3, [r0, #0]
 8003fe4:	b95b      	cbnz	r3, 8003ffe <os_dev_open+0x36>
    OS_ENTER_CRITICAL(sr);
 8003fe6:	f000 ffaf 	bl	8004f48 <os_arch_save_sr>
    ++dev->od_open_ref;
 8003fea:	7ea3      	ldrb	r3, [r4, #26]
 8003fec:	3301      	adds	r3, #1
 8003fee:	76a3      	strb	r3, [r4, #26]
    dev->od_flags |= OS_DEV_F_STATUS_OPEN;
 8003ff0:	7ee3      	ldrb	r3, [r4, #27]
 8003ff2:	f043 0302 	orr.w	r3, r3, #2
 8003ff6:	76e3      	strb	r3, [r4, #27]
    OS_EXIT_CRITICAL(sr);
 8003ff8:	f000 ffac 	bl	8004f54 <os_arch_restore_sr>
    return (dev);
 8003ffc:	e7ec      	b.n	8003fd8 <os_dev_open+0x10>
        rc = dev->od_handlers.od_open(dev, timo, arg);
 8003ffe:	4632      	mov	r2, r6
 8004000:	4629      	mov	r1, r5
 8004002:	4798      	blx	r3
        if (rc != 0) {
 8004004:	2800      	cmp	r0, #0
 8004006:	d0ee      	beq.n	8003fe6 <os_dev_open+0x1e>
 8004008:	e7e5      	b.n	8003fd6 <os_dev_open+0xe>

0800400a <os_dev_close>:
os_dev_close(struct os_dev *dev)
{
    int rc;
    os_sr_t sr;

    if (dev->od_handlers.od_close) {
 800400a:	68c3      	ldr	r3, [r0, #12]
{
 800400c:	b510      	push	{r4, lr}
 800400e:	4604      	mov	r4, r0
    if (dev->od_handlers.od_close) {
 8004010:	b953      	cbnz	r3, 8004028 <os_dev_close+0x1e>
        if (rc != 0) {
            goto err;
        }
    }

    OS_ENTER_CRITICAL(sr);
 8004012:	f000 ff99 	bl	8004f48 <os_arch_save_sr>
    if (--dev->od_open_ref == 0) {
 8004016:	7ea3      	ldrb	r3, [r4, #26]
 8004018:	3b01      	subs	r3, #1
 800401a:	b2db      	uxtb	r3, r3
 800401c:	76a3      	strb	r3, [r4, #26]
 800401e:	b13b      	cbz	r3, 8004030 <os_dev_close+0x26>
        dev->od_flags &= ~(OS_DEV_F_STATUS_OPEN | OS_DEV_F_STATUS_SUSPENDED);
    }
    OS_EXIT_CRITICAL(sr);
 8004020:	f000 ff98 	bl	8004f54 <os_arch_restore_sr>

    return (0);
 8004024:	2000      	movs	r0, #0
 8004026:	e002      	b.n	800402e <os_dev_close+0x24>
        rc = dev->od_handlers.od_close(dev);
 8004028:	4798      	blx	r3
        if (rc != 0) {
 800402a:	2800      	cmp	r0, #0
 800402c:	d0f1      	beq.n	8004012 <os_dev_close+0x8>
err:
    return (rc);
}
 800402e:	bd10      	pop	{r4, pc}
        dev->od_flags &= ~(OS_DEV_F_STATUS_OPEN | OS_DEV_F_STATUS_SUSPENDED);
 8004030:	7ee3      	ldrb	r3, [r4, #27]
 8004032:	f023 0306 	bic.w	r3, r3, #6
 8004036:	76e3      	strb	r3, [r4, #27]
 8004038:	e7f2      	b.n	8004020 <os_dev_close+0x16>
	...

0800403c <os_dev_reset>:
}

void
os_dev_reset(void)
{
    STAILQ_INIT(&g_os_dev_list);
 800403c:	2200      	movs	r2, #0
 800403e:	4b02      	ldr	r3, [pc, #8]	; (8004048 <os_dev_reset+0xc>)
 8004040:	e9c3 2300 	strd	r2, r3, [r3]
}
 8004044:	4770      	bx	lr
 8004046:	bf00      	nop
 8004048:	200019a0 	.word	0x200019a0

0800404c <os_eventq_init>:
static struct os_eventq os_eventq_main;

void
os_eventq_init(struct os_eventq *evq)
{
    memset(evq, 0, sizeof(*evq));
 800404c:	2200      	movs	r2, #0
    STAILQ_INIT(&evq->evq_list);
 800404e:	4603      	mov	r3, r0
    memset(evq, 0, sizeof(*evq));
 8004050:	6002      	str	r2, [r0, #0]
 8004052:	6042      	str	r2, [r0, #4]
    STAILQ_INIT(&evq->evq_list);
 8004054:	f843 2f08 	str.w	r2, [r3, #8]!
 8004058:	60c3      	str	r3, [r0, #12]
}
 800405a:	4770      	bx	lr

0800405c <os_eventq_put>:
    return evq->evq_list.stqh_last != NULL;
}

void
os_eventq_put(struct os_eventq *evq, struct os_event *ev)
{
 800405c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004060:	460d      	mov	r5, r1
 8004062:	4606      	mov	r6, r0
    int resched;
    os_sr_t sr;

    os_trace_api_u32x2(OS_TRACE_ID_EVENTQ_PUT, (uint32_t)evq, (uint32_t)ev);

    OS_ENTER_CRITICAL(sr);
 8004064:	f000 ff70 	bl	8004f48 <os_arch_save_sr>

    /* Do not queue if already queued */
    if (OS_EVENT_QUEUED(ev)) {
 8004068:	782c      	ldrb	r4, [r5, #0]
    OS_ENTER_CRITICAL(sr);
 800406a:	4680      	mov	r8, r0
    if (OS_EVENT_QUEUED(ev)) {
 800406c:	b11c      	cbz	r4, 8004076 <os_eventq_put+0x1a>
    if (resched) {
        os_sched(NULL);
    }

    os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
}
 800406e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        OS_EXIT_CRITICAL(sr);
 8004072:	f000 bf6f 	b.w	8004f54 <os_arch_restore_sr>
    ev->ev_queued = 1;
 8004076:	2701      	movs	r7, #1
 8004078:	702f      	strb	r7, [r5, #0]
    STAILQ_INSERT_TAIL(&evq->evq_list, ev, ev_next);
 800407a:	68f3      	ldr	r3, [r6, #12]
    if (evq->evq_task) {
 800407c:	6870      	ldr	r0, [r6, #4]
    STAILQ_INSERT_TAIL(&evq->evq_list, ev, ev_next);
 800407e:	60ec      	str	r4, [r5, #12]
 8004080:	601d      	str	r5, [r3, #0]
 8004082:	350c      	adds	r5, #12
 8004084:	60f5      	str	r5, [r6, #12]
    if (evq->evq_task) {
 8004086:	b180      	cbz	r0, 80040aa <os_eventq_put+0x4e>
        if (evq->evq_task->t_state == OS_TASK_SLEEP) {
 8004088:	7b03      	ldrb	r3, [r0, #12]
 800408a:	2b02      	cmp	r3, #2
 800408c:	d102      	bne.n	8004094 <os_eventq_put+0x38>
            os_sched_wakeup(evq->evq_task);
 800408e:	f000 fdbb 	bl	8004c08 <os_sched_wakeup>
            resched = 1;
 8004092:	463c      	mov	r4, r7
        evq->evq_task = NULL;
 8004094:	2300      	movs	r3, #0
 8004096:	6073      	str	r3, [r6, #4]
    OS_EXIT_CRITICAL(sr);
 8004098:	4640      	mov	r0, r8
 800409a:	f000 ff5b 	bl	8004f54 <os_arch_restore_sr>
    if (resched) {
 800409e:	b134      	cbz	r4, 80040ae <os_eventq_put+0x52>
}
 80040a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        os_sched(NULL);
 80040a4:	2000      	movs	r0, #0
 80040a6:	f000 bd63 	b.w	8004b70 <os_sched>
    resched = 0;
 80040aa:	4604      	mov	r4, r0
 80040ac:	e7f4      	b.n	8004098 <os_eventq_put+0x3c>
}
 80040ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080040b2 <os_eventq_get>:
    return ev;
}

struct os_event *
os_eventq_get(struct os_eventq *evq)
{
 80040b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040b4:	4604      	mov	r4, r0
    os_sr_t sr;
    struct os_task *t;

    os_trace_api_u32(OS_TRACE_ID_EVENTQ_GET, (uint32_t)evq);

    t = os_sched_get_current_task();
 80040b6:	f000 fd4f 	bl	8004b58 <os_sched_get_current_task>
    if (evq->evq_owner != t) {
 80040ba:	6823      	ldr	r3, [r4, #0]
    t = os_sched_get_current_task();
 80040bc:	4605      	mov	r5, r0
    if (evq->evq_owner != t) {
 80040be:	4283      	cmp	r3, r0
 80040c0:	d001      	beq.n	80040c6 <os_eventq_get+0x14>
        if (evq->evq_owner == NULL) {
 80040c2:	b9b3      	cbnz	r3, 80040f2 <os_eventq_get+0x40>
            evq->evq_owner = t;
 80040c4:	6020      	str	r0, [r4, #0]
             * by another.
             */
            assert(0);
        }
    }
    OS_ENTER_CRITICAL(sr);
 80040c6:	f000 ff3f 	bl	8004f48 <os_arch_save_sr>
 80040ca:	4607      	mov	r7, r0
pull_one:
    ev = STAILQ_FIRST(&evq->evq_list);
 80040cc:	68a6      	ldr	r6, [r4, #8]
    if (ev) {
 80040ce:	b1b6      	cbz	r6, 80040fe <os_eventq_get+0x4c>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
 80040d0:	68f3      	ldr	r3, [r6, #12]
 80040d2:	60a3      	str	r3, [r4, #8]
 80040d4:	b913      	cbnz	r3, 80040dc <os_eventq_get+0x2a>
 80040d6:	f104 0308 	add.w	r3, r4, #8
 80040da:	60e3      	str	r3, [r4, #12]
        ev->ev_queued = 0;
 80040dc:	2300      	movs	r3, #0
 80040de:	7033      	strb	r3, [r6, #0]
        t->t_flags &= ~OS_TASK_FLAG_EVQ_WAIT;
 80040e0:	7b6b      	ldrb	r3, [r5, #13]

        OS_ENTER_CRITICAL(sr);
        evq->evq_task = NULL;
        goto pull_one;
    }
    OS_EXIT_CRITICAL(sr);
 80040e2:	4638      	mov	r0, r7
        t->t_flags &= ~OS_TASK_FLAG_EVQ_WAIT;
 80040e4:	f023 0308 	bic.w	r3, r3, #8
 80040e8:	736b      	strb	r3, [r5, #13]
    OS_EXIT_CRITICAL(sr);
 80040ea:	f000 ff33 	bl	8004f54 <os_arch_restore_sr>
#if MYNEWT_VAL(OS_EVENTQ_DEBUG)
    evq->evq_prev = ev;
#endif

    return (ev);
}
 80040ee:	4630      	mov	r0, r6
 80040f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            assert(0);
 80040f2:	2300      	movs	r3, #0
 80040f4:	461a      	mov	r2, r3
 80040f6:	4619      	mov	r1, r3
 80040f8:	4618      	mov	r0, r3
 80040fa:	f7ff fcdb 	bl	8003ab4 <__assert_func>
        os_sched_sleep(evq->evq_task, OS_TIMEOUT_NEVER);
 80040fe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
        evq->evq_task = t;
 8004102:	6065      	str	r5, [r4, #4]
        os_sched_sleep(evq->evq_task, OS_TIMEOUT_NEVER);
 8004104:	4628      	mov	r0, r5
 8004106:	f000 fd45 	bl	8004b94 <os_sched_sleep>
        t->t_flags |= OS_TASK_FLAG_EVQ_WAIT;
 800410a:	7b6b      	ldrb	r3, [r5, #13]
        OS_EXIT_CRITICAL(sr);
 800410c:	4638      	mov	r0, r7
        t->t_flags |= OS_TASK_FLAG_EVQ_WAIT;
 800410e:	f043 0308 	orr.w	r3, r3, #8
 8004112:	736b      	strb	r3, [r5, #13]
        OS_EXIT_CRITICAL(sr);
 8004114:	f000 ff1e 	bl	8004f54 <os_arch_restore_sr>
        os_sched(NULL);
 8004118:	4630      	mov	r0, r6
 800411a:	f000 fd29 	bl	8004b70 <os_sched>
        OS_ENTER_CRITICAL(sr);
 800411e:	f000 ff13 	bl	8004f48 <os_arch_save_sr>
        evq->evq_task = NULL;
 8004122:	6066      	str	r6, [r4, #4]
        OS_ENTER_CRITICAL(sr);
 8004124:	4607      	mov	r7, r0
        goto pull_one;
 8004126:	e7d1      	b.n	80040cc <os_eventq_get+0x1a>

08004128 <os_eventq_run>:
}
#endif

void
os_eventq_run(struct os_eventq *evq)
{
 8004128:	b510      	push	{r4, lr}
#if MYNEWT_VAL(OS_EVENTQ_MONITOR)
    struct os_eventq_mon *mon;
    uint32_t ticks;
#endif

    ev = os_eventq_get(evq);
 800412a:	f7ff ffc2 	bl	80040b2 <os_eventq_get>
    assert(ev->ev_cb != NULL);
 800412e:	6843      	ldr	r3, [r0, #4]
 8004130:	b923      	cbnz	r3, 800413c <os_eventq_run+0x14>
 8004132:	461a      	mov	r2, r3
 8004134:	4619      	mov	r1, r3
 8004136:	4618      	mov	r0, r3
 8004138:	f7ff fcbc 	bl	8003ab4 <__assert_func>
        if (ticks > mon->em_max) {
            mon->em_max = ticks;
        }
    }
#endif
}
 800413c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ev->ev_cb(ev);
 8004140:	4718      	bx	r3

08004142 <os_eventq_remove>:
    return (ev);
}

void
os_eventq_remove(struct os_eventq *evq, struct os_event *ev)
{
 8004142:	b538      	push	{r3, r4, r5, lr}
 8004144:	460c      	mov	r4, r1
 8004146:	4605      	mov	r5, r0
    os_sr_t sr;

    os_trace_api_u32x2(OS_TRACE_ID_EVENTQ_REMOVE, (uint32_t)evq, (uint32_t)ev);

    OS_ENTER_CRITICAL(sr);
 8004148:	f000 fefe 	bl	8004f48 <os_arch_save_sr>
    if (OS_EVENT_QUEUED(ev)) {
 800414c:	7823      	ldrb	r3, [r4, #0]
 800414e:	b143      	cbz	r3, 8004162 <os_eventq_remove+0x20>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
 8004150:	68ab      	ldr	r3, [r5, #8]
 8004152:	68e2      	ldr	r2, [r4, #12]
 8004154:	42a3      	cmp	r3, r4
 8004156:	d10b      	bne.n	8004170 <os_eventq_remove+0x2e>
 8004158:	60aa      	str	r2, [r5, #8]
 800415a:	b912      	cbnz	r2, 8004162 <os_eventq_remove+0x20>
 800415c:	f105 0308 	add.w	r3, r5, #8
 8004160:	60eb      	str	r3, [r5, #12]
    }
    ev->ev_queued = 0;
 8004162:	2300      	movs	r3, #0
 8004164:	7023      	strb	r3, [r4, #0]
    OS_EXIT_CRITICAL(sr);

    os_trace_api_ret(OS_TRACE_ID_EVENTQ_REMOVE);
}
 8004166:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    OS_EXIT_CRITICAL(sr);
 800416a:	f000 bef3 	b.w	8004f54 <os_arch_restore_sr>
 800416e:	460b      	mov	r3, r1
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
 8004170:	68d9      	ldr	r1, [r3, #12]
 8004172:	42a1      	cmp	r1, r4
 8004174:	d1fb      	bne.n	800416e <os_eventq_remove+0x2c>
 8004176:	60da      	str	r2, [r3, #12]
 8004178:	2a00      	cmp	r2, #0
 800417a:	d1f2      	bne.n	8004162 <os_eventq_remove+0x20>
 800417c:	330c      	adds	r3, #12
 800417e:	e7ef      	b.n	8004160 <os_eventq_remove+0x1e>

08004180 <os_eventq_dflt_get>:

struct os_eventq *
os_eventq_dflt_get(void)
{
    return &os_eventq_main;
}
 8004180:	4800      	ldr	r0, [pc, #0]	; (8004184 <os_eventq_dflt_get+0x4>)
 8004182:	4770      	bx	lr
 8004184:	200019a8 	.word	0x200019a8

08004188 <_os_mbuf_trailingspace>:
{
    struct os_mbuf_pool *omp;

    omp = om->om_omp;

    return (&om->om_databuf[0] + omp->omp_databuf_len) -
 8004188:	6882      	ldr	r2, [r0, #8]
 800418a:	f100 0310 	add.w	r3, r0, #16
 800418e:	8812      	ldrh	r2, [r2, #0]
 8004190:	4413      	add	r3, r2
      (om->om_data + om->om_len);
 8004192:	88c2      	ldrh	r2, [r0, #6]
 8004194:	6800      	ldr	r0, [r0, #0]
 8004196:	4410      	add	r0, r2
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
 8004198:	1a18      	subs	r0, r3, r0
}
 800419a:	b280      	uxth	r0, r0
 800419c:	4770      	bx	lr

0800419e <_os_mbuf_copypkthdr>:
 * @param new_buf The new buffer to copy the packet header into
 * @param old_buf The old buffer to copy the packet header from
 */
static inline void
_os_mbuf_copypkthdr(struct os_mbuf *new_buf, struct os_mbuf *old_buf)
{
 800419e:	b538      	push	{r3, r4, r5, lr}
    assert(new_buf->om_len == 0);
 80041a0:	88c3      	ldrh	r3, [r0, #6]
{
 80041a2:	4604      	mov	r4, r0
 80041a4:	460d      	mov	r5, r1
    assert(new_buf->om_len == 0);
 80041a6:	b12b      	cbz	r3, 80041b4 <_os_mbuf_copypkthdr+0x16>
 80041a8:	2300      	movs	r3, #0
 80041aa:	461a      	mov	r2, r3
 80041ac:	4619      	mov	r1, r3
 80041ae:	4618      	mov	r0, r3
 80041b0:	f7ff fc80 	bl	8003ab4 <__assert_func>

    memcpy(&new_buf->om_databuf[0], &old_buf->om_databuf[0],
 80041b4:	f100 0310 	add.w	r3, r0, #16
 80041b8:	794a      	ldrb	r2, [r1, #5]
 80041ba:	4618      	mov	r0, r3
 80041bc:	3110      	adds	r1, #16
 80041be:	f001 f8d5 	bl	800536c <memcpy>
 80041c2:	4603      	mov	r3, r0
           old_buf->om_pkthdr_len);
    new_buf->om_pkthdr_len = old_buf->om_pkthdr_len;
 80041c4:	796a      	ldrb	r2, [r5, #5]
 80041c6:	7162      	strb	r2, [r4, #5]
    new_buf->om_data = new_buf->om_databuf + old_buf->om_pkthdr_len;
 80041c8:	796a      	ldrb	r2, [r5, #5]
 80041ca:	4413      	add	r3, r2
 80041cc:	6023      	str	r3, [r4, #0]
}
 80041ce:	bd38      	pop	{r3, r4, r5, pc}

080041d0 <os_mqueue_init>:
{
 80041d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    STAILQ_INIT(&mq->mq_head);
 80041d2:	2500      	movs	r5, #0
{
 80041d4:	4604      	mov	r4, r0
 80041d6:	460f      	mov	r7, r1
 80041d8:	4616      	mov	r6, r2
    STAILQ_INIT(&mq->mq_head);
 80041da:	e9c0 5000 	strd	r5, r0, [r0]
    memset(ev, 0, sizeof(*ev));
 80041de:	2210      	movs	r2, #16
 80041e0:	4629      	mov	r1, r5
 80041e2:	3008      	adds	r0, #8
 80041e4:	f001 f8cf 	bl	8005386 <memset>
    ev->ev_arg = arg;
 80041e8:	e9c4 7603 	strd	r7, r6, [r4, #12]
}
 80041ec:	4628      	mov	r0, r5
 80041ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080041f0 <os_mqueue_get>:
{
 80041f0:	b538      	push	{r3, r4, r5, lr}
 80041f2:	4605      	mov	r5, r0
    OS_ENTER_CRITICAL(sr);
 80041f4:	f000 fea8 	bl	8004f48 <os_arch_save_sr>
    mp = STAILQ_FIRST(&mq->mq_head);
 80041f8:	682c      	ldr	r4, [r5, #0]
    if (mp) {
 80041fa:	b144      	cbz	r4, 800420e <os_mqueue_get+0x1e>
        STAILQ_REMOVE_HEAD(&mq->mq_head, omp_next);
 80041fc:	6863      	ldr	r3, [r4, #4]
 80041fe:	602b      	str	r3, [r5, #0]
 8004200:	b903      	cbnz	r3, 8004204 <os_mqueue_get+0x14>
 8004202:	606d      	str	r5, [r5, #4]
    OS_EXIT_CRITICAL(sr);
 8004204:	f000 fea6 	bl	8004f54 <os_arch_restore_sr>
        m = OS_MBUF_PKTHDR_TO_MBUF(mp);
 8004208:	f1a4 0010 	sub.w	r0, r4, #16
}
 800420c:	bd38      	pop	{r3, r4, r5, pc}
    OS_EXIT_CRITICAL(sr);
 800420e:	f000 fea1 	bl	8004f54 <os_arch_restore_sr>
        m = NULL;
 8004212:	4620      	mov	r0, r4
 8004214:	e7fa      	b.n	800420c <os_mqueue_get+0x1c>

08004216 <os_mqueue_put>:
{
 8004216:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!OS_MBUF_IS_PKTHDR(m)) {
 8004218:	7953      	ldrb	r3, [r2, #5]
{
 800421a:	4606      	mov	r6, r0
    if (!OS_MBUF_IS_PKTHDR(m)) {
 800421c:	2b07      	cmp	r3, #7
{
 800421e:	460c      	mov	r4, r1
 8004220:	4615      	mov	r5, r2
    if (!OS_MBUF_IS_PKTHDR(m)) {
 8004222:	d913      	bls.n	800424c <os_mqueue_put+0x36>
    STAILQ_INSERT_TAIL(&mq->mq_head, mp, omp_next);
 8004224:	2700      	movs	r7, #0
    OS_ENTER_CRITICAL(sr);
 8004226:	f000 fe8f 	bl	8004f48 <os_arch_save_sr>
    STAILQ_INSERT_TAIL(&mq->mq_head, mp, omp_next);
 800422a:	6873      	ldr	r3, [r6, #4]
 800422c:	616f      	str	r7, [r5, #20]
    mp = OS_MBUF_PKTHDR(m);
 800422e:	f105 0210 	add.w	r2, r5, #16
    STAILQ_INSERT_TAIL(&mq->mq_head, mp, omp_next);
 8004232:	3514      	adds	r5, #20
 8004234:	601a      	str	r2, [r3, #0]
 8004236:	6075      	str	r5, [r6, #4]
    OS_EXIT_CRITICAL(sr);
 8004238:	f000 fe8c 	bl	8004f54 <os_arch_restore_sr>
    if (evq) {
 800423c:	b144      	cbz	r4, 8004250 <os_mqueue_put+0x3a>
        os_eventq_put(evq, &mq->mq_ev);
 800423e:	4620      	mov	r0, r4
 8004240:	f106 0108 	add.w	r1, r6, #8
 8004244:	f7ff ff0a 	bl	800405c <os_eventq_put>
    return (0);
 8004248:	4638      	mov	r0, r7
}
 800424a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return (rc);
 800424c:	2002      	movs	r0, #2
 800424e:	e7fc      	b.n	800424a <os_mqueue_put+0x34>
    return (0);
 8004250:	4620      	mov	r0, r4
 8004252:	e7fa      	b.n	800424a <os_mqueue_put+0x34>

08004254 <os_mbuf_pool_init>:
    omp->omp_databuf_len = buf_len - sizeof(struct os_mbuf);
 8004254:	3a10      	subs	r2, #16
 8004256:	8002      	strh	r2, [r0, #0]
    omp->omp_pool = mp;
 8004258:	6041      	str	r1, [r0, #4]
}
 800425a:	2000      	movs	r0, #0
 800425c:	4770      	bx	lr

0800425e <os_mbuf_get>:
{
 800425e:	b538      	push	{r3, r4, r5, lr}
    if (leadingspace > omp->omp_databuf_len) {
 8004260:	8803      	ldrh	r3, [r0, #0]
{
 8004262:	4604      	mov	r4, r0
    if (leadingspace > omp->omp_databuf_len) {
 8004264:	428b      	cmp	r3, r1
{
 8004266:	460d      	mov	r5, r1
    if (leadingspace > omp->omp_databuf_len) {
 8004268:	d30c      	bcc.n	8004284 <os_mbuf_get+0x26>
    om = os_memblock_get(omp->omp_pool);
 800426a:	6840      	ldr	r0, [r0, #4]
 800426c:	f000 fa53 	bl	8004716 <os_memblock_get>
    if (!om) {
 8004270:	b138      	cbz	r0, 8004282 <os_mbuf_get+0x24>
    SLIST_NEXT(om, om_next) = NULL;
 8004272:	2300      	movs	r3, #0
 8004274:	60c3      	str	r3, [r0, #12]
    om->om_flags = 0;
 8004276:	6043      	str	r3, [r0, #4]
    om->om_data = (&om->om_databuf[0] + leadingspace);
 8004278:	f100 0310 	add.w	r3, r0, #16
 800427c:	442b      	add	r3, r5
 800427e:	6003      	str	r3, [r0, #0]
    om->om_omp = omp;
 8004280:	6084      	str	r4, [r0, #8]
}
 8004282:	bd38      	pop	{r3, r4, r5, pc}
        om = NULL;
 8004284:	2000      	movs	r0, #0
    return om;
 8004286:	e7fc      	b.n	8004282 <os_mbuf_get+0x24>

08004288 <os_mbuf_get_pkthdr>:
{
 8004288:	b538      	push	{r3, r4, r5, lr}
    pkthdr_len = user_pkthdr_len + sizeof(struct os_mbuf_pkthdr);
 800428a:	f101 0508 	add.w	r5, r1, #8
    if ((pkthdr_len > omp->omp_databuf_len) || (pkthdr_len > 255)) {
 800428e:	8803      	ldrh	r3, [r0, #0]
    pkthdr_len = user_pkthdr_len + sizeof(struct os_mbuf_pkthdr);
 8004290:	b2ac      	uxth	r4, r5
    if ((pkthdr_len > omp->omp_databuf_len) || (pkthdr_len > 255)) {
 8004292:	42a3      	cmp	r3, r4
 8004294:	d30d      	bcc.n	80042b2 <os_mbuf_get_pkthdr+0x2a>
 8004296:	2cff      	cmp	r4, #255	; 0xff
 8004298:	d80b      	bhi.n	80042b2 <os_mbuf_get_pkthdr+0x2a>
    om = os_mbuf_get(omp, 0);
 800429a:	2100      	movs	r1, #0
 800429c:	f7ff ffdf 	bl	800425e <os_mbuf_get>
    if (om) {
 80042a0:	b130      	cbz	r0, 80042b0 <os_mbuf_get_pkthdr+0x28>
        om->om_data += pkthdr_len;
 80042a2:	6803      	ldr	r3, [r0, #0]
        om->om_pkthdr_len = pkthdr_len;
 80042a4:	7145      	strb	r5, [r0, #5]
        om->om_data += pkthdr_len;
 80042a6:	4423      	add	r3, r4
 80042a8:	6003      	str	r3, [r0, #0]
        pkthdr->omp_len = 0;
 80042aa:	2300      	movs	r3, #0
        pkthdr->omp_flags = 0;
 80042ac:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
 80042b0:	bd38      	pop	{r3, r4, r5, pc}
        om = NULL;
 80042b2:	2000      	movs	r0, #0
    return om;
 80042b4:	e7fc      	b.n	80042b0 <os_mbuf_get_pkthdr+0x28>

080042b6 <os_mbuf_free>:
{
 80042b6:	4601      	mov	r1, r0
    if (om->om_omp != NULL) {
 80042b8:	6880      	ldr	r0, [r0, #8]
{
 80042ba:	b508      	push	{r3, lr}
    if (om->om_omp != NULL) {
 80042bc:	b110      	cbz	r0, 80042c4 <os_mbuf_free+0xe>
        rc = os_memblock_put(om->om_omp->omp_pool, om);
 80042be:	6840      	ldr	r0, [r0, #4]
 80042c0:	f000 fa51 	bl	8004766 <os_memblock_put>
}
 80042c4:	bd08      	pop	{r3, pc}

080042c6 <os_mbuf_free_chain>:
{
 80042c6:	4603      	mov	r3, r0
 80042c8:	b510      	push	{r4, lr}
    while (om != NULL) {
 80042ca:	b90b      	cbnz	r3, 80042d0 <os_mbuf_free_chain+0xa>
    rc = 0;
 80042cc:	4618      	mov	r0, r3
    return (rc);
 80042ce:	e006      	b.n	80042de <os_mbuf_free_chain+0x18>
        rc = os_mbuf_free(om);
 80042d0:	4618      	mov	r0, r3
        next = SLIST_NEXT(om, om_next);
 80042d2:	68dc      	ldr	r4, [r3, #12]
        rc = os_mbuf_free(om);
 80042d4:	f7ff ffef 	bl	80042b6 <os_mbuf_free>
        om = next;
 80042d8:	4623      	mov	r3, r4
        if (rc != 0) {
 80042da:	2800      	cmp	r0, #0
 80042dc:	d0f5      	beq.n	80042ca <os_mbuf_free_chain+0x4>
}
 80042de:	bd10      	pop	{r4, pc}

080042e0 <os_mbuf_len>:
uint16_t
os_mbuf_len(const struct os_mbuf *om)
{
    uint16_t len;

    len = 0;
 80042e0:	2300      	movs	r3, #0
    while (om != NULL) {
 80042e2:	b908      	cbnz	r0, 80042e8 <os_mbuf_len+0x8>
        len += om->om_len;
        om = SLIST_NEXT(om, om_next);
    }

    return len;
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	4770      	bx	lr
        len += om->om_len;
 80042e8:	88c2      	ldrh	r2, [r0, #6]
        om = SLIST_NEXT(om, om_next);
 80042ea:	68c0      	ldr	r0, [r0, #12]
        len += om->om_len;
 80042ec:	4413      	add	r3, r2
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	e7f7      	b.n	80042e2 <os_mbuf_len+0x2>

080042f2 <os_mbuf_append>:

int
os_mbuf_append(struct os_mbuf *om, const void *data,  uint16_t len)
{
 80042f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042f6:	4688      	mov	r8, r1
 80042f8:	4616      	mov	r6, r2
    struct os_mbuf *new;
    int remainder;
    int space;
    int rc;

    if (om == NULL) {
 80042fa:	4607      	mov	r7, r0
 80042fc:	2800      	cmp	r0, #0
 80042fe:	d042      	beq.n	8004386 <os_mbuf_append+0x94>

    omp = om->om_omp;

    /* Scroll to last mbuf in the chain */
    last = om;
    while (SLIST_NEXT(last, om_next) != NULL) {
 8004300:	4605      	mov	r5, r0
    omp = om->om_omp;
 8004302:	f8d0 a008 	ldr.w	sl, [r0, #8]
    while (SLIST_NEXT(last, om_next) != NULL) {
 8004306:	68eb      	ldr	r3, [r5, #12]
 8004308:	bb23      	cbnz	r3, 8004354 <os_mbuf_append+0x62>
        last = SLIST_NEXT(last, om_next);
    }

    remainder = len;
    space = OS_MBUF_TRAILINGSPACE(last);
 800430a:	4628      	mov	r0, r5
    remainder = len;
 800430c:	4634      	mov	r4, r6
    space = OS_MBUF_TRAILINGSPACE(last);
 800430e:	f7ff ff3b 	bl	8004188 <_os_mbuf_trailingspace>

    /* If room in current mbuf, copy the first part of the data into the
     * remaining space in that mbuf.
     */
    if (space > 0) {
 8004312:	b178      	cbz	r0, 8004334 <os_mbuf_append+0x42>
 8004314:	42b0      	cmp	r0, r6
 8004316:	bfa8      	it	ge
 8004318:	4630      	movge	r0, r6
 800431a:	4604      	mov	r4, r0
        if (space > remainder) {
            space = remainder;
        }

        memcpy(OS_MBUF_DATA(last, uint8_t *) + last->om_len , data, space);
 800431c:	682b      	ldr	r3, [r5, #0]
 800431e:	88e8      	ldrh	r0, [r5, #6]
 8004320:	4622      	mov	r2, r4
 8004322:	4641      	mov	r1, r8
 8004324:	4418      	add	r0, r3
 8004326:	f001 f821 	bl	800536c <memcpy>

        last->om_len += space;
 800432a:	88eb      	ldrh	r3, [r5, #6]
        data += space;
 800432c:	44a0      	add	r8, r4
        last->om_len += space;
 800432e:	4423      	add	r3, r4
 8004330:	80eb      	strh	r3, [r5, #6]
        remainder -= space;
 8004332:	1b34      	subs	r4, r6, r4
    }

    /* Take the remaining data, and keep allocating new mbufs and copying
     * data into it, until data is exhausted.
     */
    while (remainder > 0) {
 8004334:	2c00      	cmp	r4, #0
 8004336:	dd05      	ble.n	8004344 <os_mbuf_append+0x52>
        new = os_mbuf_get(omp, 0);
 8004338:	2100      	movs	r1, #0
 800433a:	4650      	mov	r0, sl
 800433c:	f7ff ff8f 	bl	800425e <os_mbuf_get>
        if (!new) {
 8004340:	4681      	mov	r9, r0
 8004342:	b948      	cbnz	r0, 8004358 <os_mbuf_append+0x66>
        SLIST_NEXT(last, om_next) = new;
        last = new;
    }

    /* Adjust the packet header length in the buffer */
    if (OS_MBUF_IS_PKTHDR(om)) {
 8004344:	797b      	ldrb	r3, [r7, #5]
 8004346:	2b07      	cmp	r3, #7
 8004348:	d818      	bhi.n	800437c <os_mbuf_append+0x8a>
        OS_MBUF_PKTHDR(om)->omp_len += len - remainder;
    }

    if (remainder != 0) {
 800434a:	1c20      	adds	r0, r4, #0
 800434c:	bf18      	it	ne
 800434e:	2001      	movne	r0, #1


    return (0);
err:
    return (rc);
}
 8004350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004354:	461d      	mov	r5, r3
 8004356:	e7d6      	b.n	8004306 <os_mbuf_append+0x14>
        new->om_len = min(omp->omp_databuf_len, remainder);
 8004358:	f8ba 2000 	ldrh.w	r2, [sl]
        memcpy(OS_MBUF_DATA(new, void *), data, new->om_len);
 800435c:	4641      	mov	r1, r8
        new->om_len = min(omp->omp_databuf_len, remainder);
 800435e:	42a2      	cmp	r2, r4
 8004360:	bfa8      	it	ge
 8004362:	4622      	movge	r2, r4
 8004364:	80c2      	strh	r2, [r0, #6]
        memcpy(OS_MBUF_DATA(new, void *), data, new->om_len);
 8004366:	6800      	ldr	r0, [r0, #0]
 8004368:	f001 f800 	bl	800536c <memcpy>
        data += new->om_len;
 800436c:	f8b9 3006 	ldrh.w	r3, [r9, #6]
        SLIST_NEXT(last, om_next) = new;
 8004370:	f8c5 900c 	str.w	r9, [r5, #12]
        data += new->om_len;
 8004374:	4498      	add	r8, r3
        remainder -= new->om_len;
 8004376:	1ae4      	subs	r4, r4, r3
        SLIST_NEXT(last, om_next) = new;
 8004378:	464d      	mov	r5, r9
 800437a:	e7db      	b.n	8004334 <os_mbuf_append+0x42>
        OS_MBUF_PKTHDR(om)->omp_len += len - remainder;
 800437c:	8a3b      	ldrh	r3, [r7, #16]
 800437e:	441e      	add	r6, r3
 8004380:	1b36      	subs	r6, r6, r4
 8004382:	823e      	strh	r6, [r7, #16]
 8004384:	e7e1      	b.n	800434a <os_mbuf_append+0x58>
        rc = OS_EINVAL;
 8004386:	2002      	movs	r0, #2
 8004388:	e7e2      	b.n	8004350 <os_mbuf_append+0x5e>

0800438a <os_mbuf_dup>:
    return 0;
}

struct os_mbuf *
os_mbuf_dup(struct os_mbuf *om)
{
 800438a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    struct os_mbuf *copy;

    omp = om->om_omp;

    head = NULL;
    copy = NULL;
 800438e:	2500      	movs	r5, #0
{
 8004390:	4604      	mov	r4, r0
    head = NULL;
 8004392:	462e      	mov	r6, r5
    omp = om->om_omp;
 8004394:	6887      	ldr	r7, [r0, #8]
 8004396:	7963      	ldrb	r3, [r4, #5]
 8004398:	f104 0210 	add.w	r2, r4, #16
    if (OS_MBUF_IS_PKTHDR(om)) {
 800439c:	2b07      	cmp	r3, #7
 800439e:	bf98      	it	ls
 80043a0:	2300      	movls	r3, #0
 80043a2:	6821      	ldr	r1, [r4, #0]
        ((uint8_t *) &om->om_databuf[0] + startoff));
 80043a4:	4413      	add	r3, r2
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
 80043a6:	1ac9      	subs	r1, r1, r3

    for (; om != NULL; om = SLIST_NEXT(om, om_next)) {
        if (head) {
            SLIST_NEXT(copy, om_next) = os_mbuf_get(omp,
 80043a8:	b289      	uxth	r1, r1
 80043aa:	4638      	mov	r0, r7
        if (head) {
 80043ac:	b15e      	cbz	r6, 80043c6 <os_mbuf_dup+0x3c>
            SLIST_NEXT(copy, om_next) = os_mbuf_get(omp,
 80043ae:	f7ff ff56 	bl	800425e <os_mbuf_get>
 80043b2:	4680      	mov	r8, r0
 80043b4:	60e8      	str	r0, [r5, #12]
                    OS_MBUF_LEADINGSPACE(om));
            if (!SLIST_NEXT(copy, om_next)) {
 80043b6:	b998      	cbnz	r0, 80043e0 <os_mbuf_dup+0x56>
                os_mbuf_free_chain(head);
 80043b8:	4630      	mov	r0, r6
 80043ba:	f7ff ff84 	bl	80042c6 <os_mbuf_free_chain>
                om->om_len);
    }

    return (head);
err:
    return (NULL);
 80043be:	4646      	mov	r6, r8
}
 80043c0:	4630      	mov	r0, r6
 80043c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            head = os_mbuf_get(omp, OS_MBUF_LEADINGSPACE(om));
 80043c6:	f7ff ff4a 	bl	800425e <os_mbuf_get>
            if (!head) {
 80043ca:	4606      	mov	r6, r0
 80043cc:	2800      	cmp	r0, #0
 80043ce:	d0f7      	beq.n	80043c0 <os_mbuf_dup+0x36>
            if (OS_MBUF_IS_PKTHDR(om)) {
 80043d0:	7963      	ldrb	r3, [r4, #5]
 80043d2:	2b07      	cmp	r3, #7
 80043d4:	d902      	bls.n	80043dc <os_mbuf_dup+0x52>
                _os_mbuf_copypkthdr(head, om);
 80043d6:	4621      	mov	r1, r4
 80043d8:	f7ff fee1 	bl	800419e <_os_mbuf_copypkthdr>
 80043dc:	4635      	mov	r5, r6
 80043de:	e000      	b.n	80043e2 <os_mbuf_dup+0x58>
 80043e0:	4605      	mov	r5, r0
        copy->om_flags = om->om_flags;
 80043e2:	7923      	ldrb	r3, [r4, #4]
        memcpy(OS_MBUF_DATA(copy, uint8_t *), OS_MBUF_DATA(om, uint8_t *),
 80043e4:	6828      	ldr	r0, [r5, #0]
        copy->om_flags = om->om_flags;
 80043e6:	712b      	strb	r3, [r5, #4]
        copy->om_len = om->om_len;
 80043e8:	88e3      	ldrh	r3, [r4, #6]
        memcpy(OS_MBUF_DATA(copy, uint8_t *), OS_MBUF_DATA(om, uint8_t *),
 80043ea:	6821      	ldr	r1, [r4, #0]
        copy->om_len = om->om_len;
 80043ec:	80eb      	strh	r3, [r5, #6]
        memcpy(OS_MBUF_DATA(copy, uint8_t *), OS_MBUF_DATA(om, uint8_t *),
 80043ee:	88e2      	ldrh	r2, [r4, #6]
 80043f0:	f000 ffbc 	bl	800536c <memcpy>
    for (; om != NULL; om = SLIST_NEXT(om, om_next)) {
 80043f4:	68e4      	ldr	r4, [r4, #12]
 80043f6:	2c00      	cmp	r4, #0
 80043f8:	d1cd      	bne.n	8004396 <os_mbuf_dup+0xc>
 80043fa:	e7e1      	b.n	80043c0 <os_mbuf_dup+0x36>

080043fc <os_mbuf_off>:

struct os_mbuf *
os_mbuf_off(const struct os_mbuf *om, int off, uint16_t *out_off)
{
 80043fc:	b510      	push	{r4, lr}

    /* Cast away const. */
    cur = (struct os_mbuf *)om;

    while (1) {
        if (cur == NULL) {
 80043fe:	b120      	cbz	r0, 800440a <os_mbuf_off+0xe>
            return NULL;
        }

        next = SLIST_NEXT(cur, om_next);

        if (cur->om_len > off ||
 8004400:	88c4      	ldrh	r4, [r0, #6]
        next = SLIST_NEXT(cur, om_next);
 8004402:	68c3      	ldr	r3, [r0, #12]
        if (cur->om_len > off ||
 8004404:	428c      	cmp	r4, r1
 8004406:	dd01      	ble.n	800440c <os_mbuf_off+0x10>
            (cur->om_len == off && next == NULL)) {

            *out_off = off;
 8004408:	8011      	strh	r1, [r2, #0]
        }

        off -= cur->om_len;
        cur = next;
    }
}
 800440a:	bd10      	pop	{r4, pc}
        if (cur->om_len > off ||
 800440c:	d101      	bne.n	8004412 <os_mbuf_off+0x16>
            (cur->om_len == off && next == NULL)) {
 800440e:	2b00      	cmp	r3, #0
 8004410:	d0fa      	beq.n	8004408 <os_mbuf_off+0xc>
        off -= cur->om_len;
 8004412:	1b09      	subs	r1, r1, r4
        next = SLIST_NEXT(cur, om_next);
 8004414:	4618      	mov	r0, r3
        if (cur == NULL) {
 8004416:	e7f2      	b.n	80043fe <os_mbuf_off+0x2>

08004418 <os_mbuf_copydata>:

int
os_mbuf_copydata(const struct os_mbuf *m, int off, int len, void *dst)
{
 8004418:	b570      	push	{r4, r5, r6, lr}
 800441a:	4604      	mov	r4, r0
    unsigned int count;
    uint8_t *udst;

    if (!len) {
 800441c:	4616      	mov	r6, r2
 800441e:	b952      	cbnz	r2, 8004436 <os_mbuf_copydata+0x1e>
        return 0;
 8004420:	2000      	movs	r0, #0
        off = 0;
        m = SLIST_NEXT(m, om_next);
    }

    return (len > 0 ? -1 : 0);
}
 8004422:	bd70      	pop	{r4, r5, r6, pc}
        if (!m) {
 8004424:	b914      	cbnz	r4, 800442c <os_mbuf_copydata+0x14>
            return (-1);
 8004426:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800442a:	e7fa      	b.n	8004422 <os_mbuf_copydata+0xa>
        if (off < m->om_len)
 800442c:	88e2      	ldrh	r2, [r4, #6]
 800442e:	428a      	cmp	r2, r1
 8004430:	dc03      	bgt.n	800443a <os_mbuf_copydata+0x22>
        m = SLIST_NEXT(m, om_next);
 8004432:	68e4      	ldr	r4, [r4, #12]
        off -= m->om_len;
 8004434:	1a89      	subs	r1, r1, r2
    while (off > 0) {
 8004436:	2900      	cmp	r1, #0
 8004438:	dcf4      	bgt.n	8004424 <os_mbuf_copydata+0xc>
    while (len > 0 && m != NULL) {
 800443a:	2e00      	cmp	r6, #0
 800443c:	ddf0      	ble.n	8004420 <os_mbuf_copydata+0x8>
 800443e:	2c00      	cmp	r4, #0
 8004440:	d0f1      	beq.n	8004426 <os_mbuf_copydata+0xe>
        count = min(m->om_len - off, len);
 8004442:	88e5      	ldrh	r5, [r4, #6]
        memcpy(udst, m->om_data + off, count);
 8004444:	6820      	ldr	r0, [r4, #0]
        count = min(m->om_len - off, len);
 8004446:	1a6d      	subs	r5, r5, r1
 8004448:	42b5      	cmp	r5, r6
 800444a:	bfa8      	it	ge
 800444c:	4635      	movge	r5, r6
        memcpy(udst, m->om_data + off, count);
 800444e:	4401      	add	r1, r0
 8004450:	462a      	mov	r2, r5
 8004452:	4618      	mov	r0, r3
 8004454:	f000 ff8a 	bl	800536c <memcpy>
 8004458:	4603      	mov	r3, r0
        len -= count;
 800445a:	1b76      	subs	r6, r6, r5
        udst += count;
 800445c:	442b      	add	r3, r5
        m = SLIST_NEXT(m, om_next);
 800445e:	68e4      	ldr	r4, [r4, #12]
        off = 0;
 8004460:	2100      	movs	r1, #0
 8004462:	e7ea      	b.n	800443a <os_mbuf_copydata+0x22>

08004464 <os_mbuf_adj>:

void
os_mbuf_adj(struct os_mbuf *mp, int req_len)
{
 8004464:	b570      	push	{r4, r5, r6, lr}
    int len = req_len;
    struct os_mbuf *m;
    int count;

    if ((m = mp) == NULL)
 8004466:	4604      	mov	r4, r0
 8004468:	b368      	cbz	r0, 80044c6 <os_mbuf_adj+0x62>
        return;
    if (len >= 0) {
 800446a:	2900      	cmp	r1, #0
 800446c:	da17      	bge.n	800449e <os_mbuf_adj+0x3a>
         * If the adjustment only affects this mbuf, then just
         * adjust and return.  Otherwise, rescan and truncate
         * after the remaining size.
         */
        len = -len;
        count = 0;
 800446e:	2500      	movs	r5, #0
        len = -len;
 8004470:	424b      	negs	r3, r1
        for (;;) {
            count += m->om_len;
 8004472:	88c2      	ldrh	r2, [r0, #6]
            if (SLIST_NEXT(m, om_next) == (struct os_mbuf *)0)
 8004474:	68c6      	ldr	r6, [r0, #12]
            count += m->om_len;
 8004476:	4415      	add	r5, r2
            if (SLIST_NEXT(m, om_next) == (struct os_mbuf *)0)
 8004478:	bb36      	cbnz	r6, 80044c8 <os_mbuf_adj+0x64>
                break;
            m = SLIST_NEXT(m, om_next);
        }
        if (m->om_len >= len) {
 800447a:	429a      	cmp	r2, r3
 800447c:	7966      	ldrb	r6, [r4, #5]
 800447e:	db25      	blt.n	80044cc <os_mbuf_adj+0x68>
            m->om_len -= len;
 8004480:	b29b      	uxth	r3, r3
 8004482:	1ad2      	subs	r2, r2, r3
            if (OS_MBUF_IS_PKTHDR(mp))
 8004484:	2e07      	cmp	r6, #7
            m->om_len -= len;
 8004486:	80c2      	strh	r2, [r0, #6]
            if (OS_MBUF_IS_PKTHDR(mp))
 8004488:	d91d      	bls.n	80044c6 <os_mbuf_adj+0x62>
                OS_MBUF_PKTHDR(mp)->omp_len -= len;
 800448a:	8a22      	ldrh	r2, [r4, #16]
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	e019      	b.n	80044c4 <os_mbuf_adj+0x60>
                m->om_len -= len;
 8004490:	1ac0      	subs	r0, r0, r3
 8004492:	80d0      	strh	r0, [r2, #6]
                m->om_data += len;
 8004494:	6810      	ldr	r0, [r2, #0]
 8004496:	4403      	add	r3, r0
 8004498:	6013      	str	r3, [r2, #0]
                len = 0;
 800449a:	2300      	movs	r3, #0
 800449c:	e00c      	b.n	80044b8 <os_mbuf_adj+0x54>
 800449e:	4602      	mov	r2, r0
 80044a0:	460b      	mov	r3, r1
                m->om_len = 0;
 80044a2:	2500      	movs	r5, #0
        while (m != NULL && len > 0) {
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	dd07      	ble.n	80044b8 <os_mbuf_adj+0x54>
            if (m->om_len <= len) {
 80044a8:	88d0      	ldrh	r0, [r2, #6]
 80044aa:	4298      	cmp	r0, r3
 80044ac:	dcf0      	bgt.n	8004490 <os_mbuf_adj+0x2c>
                m->om_len = 0;
 80044ae:	80d5      	strh	r5, [r2, #6]
                m = SLIST_NEXT(m, om_next);
 80044b0:	68d2      	ldr	r2, [r2, #12]
                len -= m->om_len;
 80044b2:	1a1b      	subs	r3, r3, r0
        while (m != NULL && len > 0) {
 80044b4:	2a00      	cmp	r2, #0
 80044b6:	d1f5      	bne.n	80044a4 <os_mbuf_adj+0x40>
        if (OS_MBUF_IS_PKTHDR(mp))
 80044b8:	7962      	ldrb	r2, [r4, #5]
 80044ba:	2a07      	cmp	r2, #7
 80044bc:	d903      	bls.n	80044c6 <os_mbuf_adj+0x62>
            OS_MBUF_PKTHDR(mp)->omp_len -= (req_len - len);
 80044be:	8a22      	ldrh	r2, [r4, #16]
 80044c0:	1a51      	subs	r1, r2, r1
 80044c2:	440b      	add	r3, r1
                OS_MBUF_PKTHDR(mp)->omp_len -= len;
 80044c4:	8223      	strh	r3, [r4, #16]
                break;
            }
            count -= m->om_len;
        }
    }
}
 80044c6:	bd70      	pop	{r4, r5, r6, pc}
 80044c8:	4630      	mov	r0, r6
 80044ca:	e7d2      	b.n	8004472 <os_mbuf_adj+0xe>
        count -= len;
 80044cc:	4429      	add	r1, r5
 80044ce:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
        if (OS_MBUF_IS_PKTHDR(m))
 80044d2:	2e07      	cmp	r6, #7
            OS_MBUF_PKTHDR(m)->omp_len = count;
 80044d4:	bf88      	it	hi
 80044d6:	8221      	strhhi	r1, [r4, #16]
            if (m->om_len >= count) {
 80044d8:	88e3      	ldrh	r3, [r4, #6]
 80044da:	68e0      	ldr	r0, [r4, #12]
 80044dc:	428b      	cmp	r3, r1
 80044de:	db07      	blt.n	80044f0 <os_mbuf_adj+0x8c>
                m->om_len = count;
 80044e0:	80e1      	strh	r1, [r4, #6]
                if (SLIST_NEXT(m, om_next) != NULL) {
 80044e2:	2800      	cmp	r0, #0
 80044e4:	d0ef      	beq.n	80044c6 <os_mbuf_adj+0x62>
                    os_mbuf_free_chain(SLIST_NEXT(m, om_next));
 80044e6:	f7ff feee 	bl	80042c6 <os_mbuf_free_chain>
                    SLIST_NEXT(m, om_next) = NULL;
 80044ea:	2300      	movs	r3, #0
 80044ec:	60e3      	str	r3, [r4, #12]
 80044ee:	e7ea      	b.n	80044c6 <os_mbuf_adj+0x62>
            count -= m->om_len;
 80044f0:	1ac9      	subs	r1, r1, r3
        for (; m; m = SLIST_NEXT(m, om_next)) {
 80044f2:	4604      	mov	r4, r0
 80044f4:	2800      	cmp	r0, #0
 80044f6:	d1ef      	bne.n	80044d8 <os_mbuf_adj+0x74>
 80044f8:	e7e5      	b.n	80044c6 <os_mbuf_adj+0x62>

080044fa <os_mbuf_cmpf>:

int
os_mbuf_cmpf(const struct os_mbuf *om, int off, const void *data, int len)
{
 80044fa:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    uint16_t chunk_sz;
    uint16_t data_off;
    uint16_t om_off;
    int rc;

    if (len <= 0) {
 80044fe:	1e1e      	subs	r6, r3, #0
{
 8004500:	4617      	mov	r7, r2
    if (len <= 0) {
 8004502:	dd2b      	ble.n	800455c <os_mbuf_cmpf+0x62>
        return 0;
    }

    data_off = 0;
    om = os_mbuf_off(om, off, &om_off);
 8004504:	f10d 0206 	add.w	r2, sp, #6
 8004508:	f7ff ff78 	bl	80043fc <os_mbuf_off>
    data_off = 0;
 800450c:	2500      	movs	r5, #0
    om = os_mbuf_off(om, off, &om_off);
 800450e:	4604      	mov	r4, r0
        if (data_off == len) {
            return 0;
        }

        om = SLIST_NEXT(om, om_next);
        om_off = 0;
 8004510:	46a8      	mov	r8, r5
        if (om == NULL) {
 8004512:	b924      	cbnz	r4, 800451e <os_mbuf_cmpf+0x24>
            return INT_MAX;
 8004514:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

        if (om == NULL) {
            return INT_MAX;
        }
    }
}
 8004518:	b003      	add	sp, #12
 800451a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        chunk_sz = min(om->om_len - om_off, len - data_off);
 800451e:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8004522:	88e2      	ldrh	r2, [r4, #6]
 8004524:	1b73      	subs	r3, r6, r5
 8004526:	1a12      	subs	r2, r2, r0
 8004528:	429a      	cmp	r2, r3
 800452a:	bfa8      	it	ge
 800452c:	461a      	movge	r2, r3
 800452e:	fa1f f982 	uxth.w	r9, r2
        if (chunk_sz > 0) {
 8004532:	f1b9 0f00 	cmp.w	r9, #0
 8004536:	d007      	beq.n	8004548 <os_mbuf_cmpf+0x4e>
            rc = memcmp(om->om_data + om_off, data + data_off, chunk_sz);
 8004538:	6823      	ldr	r3, [r4, #0]
 800453a:	464a      	mov	r2, r9
 800453c:	1979      	adds	r1, r7, r5
 800453e:	4418      	add	r0, r3
 8004540:	f000 fef0 	bl	8005324 <memcmp>
            if (rc != 0) {
 8004544:	2800      	cmp	r0, #0
 8004546:	d1e7      	bne.n	8004518 <os_mbuf_cmpf+0x1e>
        data_off += chunk_sz;
 8004548:	444d      	add	r5, r9
 800454a:	b2ad      	uxth	r5, r5
        if (data_off == len) {
 800454c:	42b5      	cmp	r5, r6
 800454e:	d005      	beq.n	800455c <os_mbuf_cmpf+0x62>
        om = SLIST_NEXT(om, om_next);
 8004550:	68e4      	ldr	r4, [r4, #12]
        om_off = 0;
 8004552:	f8ad 8006 	strh.w	r8, [sp, #6]
        if (om == NULL) {
 8004556:	2c00      	cmp	r4, #0
 8004558:	d1db      	bne.n	8004512 <os_mbuf_cmpf+0x18>
 800455a:	e7db      	b.n	8004514 <os_mbuf_cmpf+0x1a>
        return 0;
 800455c:	2000      	movs	r0, #0
 800455e:	e7db      	b.n	8004518 <os_mbuf_cmpf+0x1e>

08004560 <os_mbuf_prepend>:
    }
}

struct os_mbuf *
os_mbuf_prepend(struct os_mbuf *om, int len)
{
 8004560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004562:	460d      	mov	r5, r1
 8004564:	4604      	mov	r4, r0
        /* The current head didn't have enough space; allocate a new head. */
        if (OS_MBUF_IS_PKTHDR(om)) {
            p = os_mbuf_get_pkthdr(om->om_omp,
                om->om_pkthdr_len - sizeof (struct os_mbuf_pkthdr));
        } else {
            p = os_mbuf_get(om->om_omp, 0);
 8004566:	2600      	movs	r6, #0
    if (OS_MBUF_IS_PKTHDR(om)) {
 8004568:	7961      	ldrb	r1, [r4, #5]
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
 800456a:	4623      	mov	r3, r4
    if (OS_MBUF_IS_PKTHDR(om)) {
 800456c:	2908      	cmp	r1, #8
 800456e:	bf2c      	ite	cs
 8004570:	4608      	movcs	r0, r1
 8004572:	2000      	movcc	r0, #0
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
 8004574:	f853 2b10 	ldr.w	r2, [r3], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
 8004578:	4403      	add	r3, r0
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	b29b      	uxth	r3, r3
 800457e:	42ab      	cmp	r3, r5
 8004580:	bfa8      	it	ge
 8004582:	462b      	movge	r3, r5
        om->om_len += leading;
 8004584:	88e0      	ldrh	r0, [r4, #6]
        om->om_data -= leading;
 8004586:	1ad2      	subs	r2, r2, r3
 8004588:	6022      	str	r2, [r4, #0]
        om->om_len += leading;
 800458a:	b29a      	uxth	r2, r3
        if (OS_MBUF_IS_PKTHDR(om)) {
 800458c:	2907      	cmp	r1, #7
        om->om_len += leading;
 800458e:	4410      	add	r0, r2
 8004590:	80e0      	strh	r0, [r4, #6]
            OS_MBUF_PKTHDR(om)->omp_len += leading;
 8004592:	bf82      	ittt	hi
 8004594:	8a20      	ldrhhi	r0, [r4, #16]
 8004596:	1812      	addhi	r2, r2, r0
 8004598:	8222      	strhhi	r2, [r4, #16]
        if (len == 0) {
 800459a:	1aed      	subs	r5, r5, r3
 800459c:	d00c      	beq.n	80045b8 <os_mbuf_prepend+0x58>
        if (OS_MBUF_IS_PKTHDR(om)) {
 800459e:	2907      	cmp	r1, #7
 80045a0:	68a0      	ldr	r0, [r4, #8]
 80045a2:	d90b      	bls.n	80045bc <os_mbuf_prepend+0x5c>
            p = os_mbuf_get_pkthdr(om->om_omp,
 80045a4:	3908      	subs	r1, #8
 80045a6:	b2c9      	uxtb	r1, r1
 80045a8:	f7ff fe6e 	bl	8004288 <os_mbuf_get_pkthdr>
            p = os_mbuf_get(om->om_omp, 0);
 80045ac:	4607      	mov	r7, r0
        }
        if (p == NULL) {
 80045ae:	b948      	cbnz	r0, 80045c4 <os_mbuf_prepend+0x64>
            os_mbuf_free_chain(om);
 80045b0:	4620      	mov	r0, r4
 80045b2:	f7ff fe88 	bl	80042c6 <os_mbuf_free_chain>
            om = NULL;
 80045b6:	463c      	mov	r4, r7
        SLIST_NEXT(p, om_next) = om;
        om = p;
    }

    return om;
}
 80045b8:	4620      	mov	r0, r4
 80045ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            p = os_mbuf_get(om->om_omp, 0);
 80045bc:	2100      	movs	r1, #0
 80045be:	f7ff fe4e 	bl	800425e <os_mbuf_get>
 80045c2:	e7f3      	b.n	80045ac <os_mbuf_prepend+0x4c>
        if (OS_MBUF_IS_PKTHDR(om)) {
 80045c4:	7963      	ldrb	r3, [r4, #5]
 80045c6:	2b07      	cmp	r3, #7
 80045c8:	d903      	bls.n	80045d2 <os_mbuf_prepend+0x72>
            _os_mbuf_copypkthdr(p, om);
 80045ca:	4621      	mov	r1, r4
 80045cc:	f7ff fde7 	bl	800419e <_os_mbuf_copypkthdr>
            om->om_pkthdr_len = 0;
 80045d0:	7166      	strb	r6, [r4, #5]
        p->om_data += OS_MBUF_TRAILINGSPACE(p);
 80045d2:	4638      	mov	r0, r7
 80045d4:	f7ff fdd8 	bl	8004188 <_os_mbuf_trailingspace>
 80045d8:	683b      	ldr	r3, [r7, #0]
        SLIST_NEXT(p, om_next) = om;
 80045da:	60fc      	str	r4, [r7, #12]
        p->om_data += OS_MBUF_TRAILINGSPACE(p);
 80045dc:	4418      	add	r0, r3
 80045de:	6038      	str	r0, [r7, #0]
        leading = min(len, OS_MBUF_LEADINGSPACE(om));
 80045e0:	463c      	mov	r4, r7
 80045e2:	e7c1      	b.n	8004568 <os_mbuf_prepend+0x8>

080045e4 <os_mbuf_copyinto>:
    return om;
}

int
os_mbuf_copyinto(struct os_mbuf *om, int off, const void *src, int len)
{
 80045e4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80045e8:	4691      	mov	r9, r2
    uint16_t cur_off;
    int copylen;
    int rc;

    /* Find the mbuf,offset pair for the start of the destination. */
    cur = os_mbuf_off(om, off, &cur_off);
 80045ea:	f10d 0206 	add.w	r2, sp, #6
{
 80045ee:	4607      	mov	r7, r0
 80045f0:	4688      	mov	r8, r1
 80045f2:	461c      	mov	r4, r3
    cur = os_mbuf_off(om, off, &cur_off);
 80045f4:	f7ff ff02 	bl	80043fc <os_mbuf_off>
    if (cur == NULL) {
 80045f8:	4606      	mov	r6, r0
 80045fa:	b370      	cbz	r0, 800465a <os_mbuf_copyinto+0x76>
        if (next == NULL) {
            break;
        }

        cur = next;
        cur_off = 0;
 80045fc:	f04f 0a00 	mov.w	sl, #0
        copylen = min(cur->om_len - cur_off, len);
 8004600:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8004604:	88f5      	ldrh	r5, [r6, #6]
 8004606:	1a2d      	subs	r5, r5, r0
 8004608:	42a5      	cmp	r5, r4
 800460a:	bfa8      	it	ge
 800460c:	4625      	movge	r5, r4
        if (copylen > 0) {
 800460e:	2d00      	cmp	r5, #0
 8004610:	dd07      	ble.n	8004622 <os_mbuf_copyinto+0x3e>
            memcpy(cur->om_data + cur_off, sptr, copylen);
 8004612:	6833      	ldr	r3, [r6, #0]
 8004614:	4649      	mov	r1, r9
 8004616:	462a      	mov	r2, r5
 8004618:	4418      	add	r0, r3
 800461a:	f000 fea7 	bl	800536c <memcpy>
            sptr += copylen;
 800461e:	44a9      	add	r9, r5
            len -= copylen;
 8004620:	1b64      	subs	r4, r4, r5
        if (len == 0) {
 8004622:	b91c      	cbnz	r4, 800462c <os_mbuf_copyinto+0x48>
            return 0;
 8004624:	2000      	movs	r0, #0
        OS_MBUF_PKTHDR(om)->omp_len =
            max(OS_MBUF_PKTHDR(om)->omp_len, off + len);
    }

    return 0;
}
 8004626:	b002      	add	sp, #8
 8004628:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        next = SLIST_NEXT(cur, om_next);
 800462c:	68f3      	ldr	r3, [r6, #12]
        if (next == NULL) {
 800462e:	b11b      	cbz	r3, 8004638 <os_mbuf_copyinto+0x54>
        cur_off = 0;
 8004630:	f8ad a006 	strh.w	sl, [sp, #6]
        copylen = min(cur->om_len - cur_off, len);
 8004634:	461e      	mov	r6, r3
 8004636:	e7e3      	b.n	8004600 <os_mbuf_copyinto+0x1c>
    rc = os_mbuf_append(cur, sptr, len);
 8004638:	b2a2      	uxth	r2, r4
 800463a:	4649      	mov	r1, r9
 800463c:	4630      	mov	r0, r6
 800463e:	f7ff fe58 	bl	80042f2 <os_mbuf_append>
    if (rc != 0) {
 8004642:	2800      	cmp	r0, #0
 8004644:	d1ef      	bne.n	8004626 <os_mbuf_copyinto+0x42>
    if (OS_MBUF_IS_PKTHDR(om)) {
 8004646:	797b      	ldrb	r3, [r7, #5]
 8004648:	2b07      	cmp	r3, #7
 800464a:	d9eb      	bls.n	8004624 <os_mbuf_copyinto+0x40>
            max(OS_MBUF_PKTHDR(om)->omp_len, off + len);
 800464c:	8a3b      	ldrh	r3, [r7, #16]
 800464e:	4444      	add	r4, r8
 8004650:	429c      	cmp	r4, r3
 8004652:	bfb8      	it	lt
 8004654:	461c      	movlt	r4, r3
        OS_MBUF_PKTHDR(om)->omp_len =
 8004656:	823c      	strh	r4, [r7, #16]
 8004658:	e7e5      	b.n	8004626 <os_mbuf_copyinto+0x42>
        return -1;
 800465a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800465e:	e7e2      	b.n	8004626 <os_mbuf_copyinto+0x42>

08004660 <os_mbuf_concat>:

void
os_mbuf_concat(struct os_mbuf *first, struct os_mbuf *second)
{
 8004660:	4603      	mov	r3, r0
 8004662:	b510      	push	{r4, lr}
    struct os_mbuf *cur;

    /* Point 'cur' to the last buffer in the first chain. */
    cur = first;
    while (1) {
        next = SLIST_NEXT(cur, om_next);
 8004664:	68da      	ldr	r2, [r3, #12]
        if (next == NULL) {
 8004666:	b96a      	cbnz	r2, 8004684 <os_mbuf_concat+0x24>

        cur = next;
    }

    /* Attach the second chain to the end of the first. */
    SLIST_NEXT(cur, om_next) = second;
 8004668:	60d9      	str	r1, [r3, #12]

    /* If the first chain has a packet header, calculate the length of the
     * second chain and add it to the header length.
     */
    if (OS_MBUF_IS_PKTHDR(first)) {
 800466a:	7943      	ldrb	r3, [r0, #5]
 800466c:	2b07      	cmp	r3, #7
 800466e:	d906      	bls.n	800467e <os_mbuf_concat+0x1e>
        if (OS_MBUF_IS_PKTHDR(second)) {
 8004670:	794a      	ldrb	r2, [r1, #5]
 8004672:	8a03      	ldrh	r3, [r0, #16]
 8004674:	2a07      	cmp	r2, #7
 8004676:	d907      	bls.n	8004688 <os_mbuf_concat+0x28>
            OS_MBUF_PKTHDR(first)->omp_len += OS_MBUF_PKTHDR(second)->omp_len;
 8004678:	8a0a      	ldrh	r2, [r1, #16]
 800467a:	4413      	add	r3, r2
 800467c:	8203      	strh	r3, [r0, #16]
                OS_MBUF_PKTHDR(first)->omp_len += cur->om_len;
            }
        }
    }

    second->om_pkthdr_len = 0;
 800467e:	2300      	movs	r3, #0
 8004680:	714b      	strb	r3, [r1, #5]
}
 8004682:	bd10      	pop	{r4, pc}
 8004684:	4613      	mov	r3, r2
 8004686:	e7ed      	b.n	8004664 <os_mbuf_concat+0x4>
 8004688:	460a      	mov	r2, r1
                OS_MBUF_PKTHDR(first)->omp_len += cur->om_len;
 800468a:	88d4      	ldrh	r4, [r2, #6]
            for (cur = second; cur != NULL; cur = SLIST_NEXT(cur, om_next)) {
 800468c:	68d2      	ldr	r2, [r2, #12]
                OS_MBUF_PKTHDR(first)->omp_len += cur->om_len;
 800468e:	4423      	add	r3, r4
 8004690:	b29b      	uxth	r3, r3
            for (cur = second; cur != NULL; cur = SLIST_NEXT(cur, om_next)) {
 8004692:	2a00      	cmp	r2, #0
 8004694:	d1f9      	bne.n	800468a <os_mbuf_concat+0x2a>
 8004696:	e7f1      	b.n	800467c <os_mbuf_concat+0x1c>

08004698 <os_mempool_init_internal>:

static os_error_t
os_mempool_init_internal(struct os_mempool *mp, uint16_t blocks,
                         uint32_t block_size, void *membuf, char *name,
                         uint8_t flags)
{
 8004698:	b570      	push	{r4, r5, r6, lr}
    int i;
    uint8_t *block_addr;
    struct os_memblock *block_ptr;

    /* Check for valid parameters */
    if (!mp || (block_size == 0)) {
 800469a:	b110      	cbz	r0, 80046a2 <os_mempool_init_internal+0xa>
 800469c:	b10a      	cbz	r2, 80046a2 <os_mempool_init_internal+0xa>
        return OS_INVALID_PARM;
    }

    if ((!membuf) && (blocks != 0)) {
 800469e:	b913      	cbnz	r3, 80046a6 <os_mempool_init_internal+0xe>
 80046a0:	b119      	cbz	r1, 80046aa <os_mempool_init_internal+0x12>
        return OS_INVALID_PARM;
 80046a2:	2003      	movs	r0, #3
 80046a4:	e023      	b.n	80046ee <os_mempool_init_internal+0x56>

    if (membuf != NULL) {
        /* Blocks need to be sized properly and memory buffer should be
         * aligned
         */
        if (((uint32_t)membuf & (OS_ALIGNMENT - 1)) != 0) {
 80046a6:	079d      	lsls	r5, r3, #30
 80046a8:	d127      	bne.n	80046fa <os_mempool_init_internal+0x62>

    /* Initialize the memory pool structure */
    mp->mp_block_size = block_size;
    mp->mp_num_free = blocks;
    mp->mp_min_free = blocks;
    mp->mp_flags = flags;
 80046aa:	f89d 4014 	ldrb.w	r4, [sp, #20]
    mp->mp_block_size = block_size;
 80046ae:	6002      	str	r2, [r0, #0]
    mp->mp_flags = flags;
 80046b0:	7284      	strb	r4, [r0, #10]
    mp->mp_num_blocks = blocks;
    mp->mp_membuf_addr = (uint32_t)membuf;
    mp->name = name;
 80046b2:	9c04      	ldr	r4, [sp, #16]
    mp->mp_num_free = blocks;
 80046b4:	80c1      	strh	r1, [r0, #6]
    mp->mp_min_free = blocks;
 80046b6:	8101      	strh	r1, [r0, #8]
    mp->mp_num_blocks = blocks;
 80046b8:	8081      	strh	r1, [r0, #4]
    mp->mp_membuf_addr = (uint32_t)membuf;
 80046ba:	60c3      	str	r3, [r0, #12]
    SLIST_FIRST(mp) = membuf;
 80046bc:	e9c0 3405 	strd	r3, r4, [r0, #20]

    if (blocks > 0) {
 80046c0:	b169      	cbz	r1, 80046de <os_mempool_init_internal+0x46>
        os_mempool_poison(mp, membuf);
        os_mempool_guard(mp, membuf);
        true_block_size = OS_MEMPOOL_TRUE_BLOCK_SIZE(mp);
 80046c2:	0794      	lsls	r4, r2, #30
{
 80046c4:	461d      	mov	r5, r3

        /* Chain the memory blocks to the free list */
        block_addr = (uint8_t *)membuf;
        block_ptr = (struct os_memblock *)block_addr;
        for (i = 1; i < blocks; i++) {
 80046c6:	f04f 0401 	mov.w	r4, #1
        true_block_size = OS_MEMPOOL_TRUE_BLOCK_SIZE(mp);
 80046ca:	bf1c      	itt	ne
 80046cc:	f022 0203 	bicne.w	r2, r2, #3
 80046d0:	3204      	addne	r2, #4
        for (i = 1; i < blocks; i++) {
 80046d2:	428c      	cmp	r4, r1
 80046d4:	db0c      	blt.n	80046f0 <os_mempool_init_internal+0x58>
            SLIST_NEXT(block_ptr, mb_next) = (struct os_memblock *)block_addr;
            block_ptr = (struct os_memblock *)block_addr;
        }

        /* Last one in the list should be NULL */
        SLIST_NEXT(block_ptr, mb_next) = NULL;
 80046d6:	3901      	subs	r1, #1
 80046d8:	434a      	muls	r2, r1
 80046da:	2100      	movs	r1, #0
 80046dc:	5099      	str	r1, [r3, r2]
    }

    STAILQ_INSERT_TAIL(&g_os_mempool_list, mp, mp_list);
 80046de:	2300      	movs	r3, #0
 80046e0:	4a07      	ldr	r2, [pc, #28]	; (8004700 <os_mempool_init_internal+0x68>)
 80046e2:	6103      	str	r3, [r0, #16]
 80046e4:	6851      	ldr	r1, [r2, #4]
 80046e6:	6008      	str	r0, [r1, #0]
 80046e8:	3010      	adds	r0, #16
 80046ea:	6050      	str	r0, [r2, #4]
 80046ec:	4618      	mov	r0, r3

    return OS_OK;
}
 80046ee:	bd70      	pop	{r4, r5, r6, pc}
            block_addr += true_block_size;
 80046f0:	18ae      	adds	r6, r5, r2
            SLIST_NEXT(block_ptr, mb_next) = (struct os_memblock *)block_addr;
 80046f2:	602e      	str	r6, [r5, #0]
        for (i = 1; i < blocks; i++) {
 80046f4:	3401      	adds	r4, #1
            block_addr += true_block_size;
 80046f6:	4635      	mov	r5, r6
 80046f8:	e7eb      	b.n	80046d2 <os_mempool_init_internal+0x3a>
            return OS_MEM_NOT_ALIGNED;
 80046fa:	2004      	movs	r0, #4
 80046fc:	e7f7      	b.n	80046ee <os_mempool_init_internal+0x56>
 80046fe:	bf00      	nop
 8004700:	20003b08 	.word	0x20003b08

08004704 <os_mempool_init>:

os_error_t
os_mempool_init(struct os_mempool *mp, uint16_t blocks, uint32_t block_size,
                void *membuf, char *name)
{
 8004704:	b513      	push	{r0, r1, r4, lr}
    return os_mempool_init_internal(mp, blocks, block_size, membuf, name, 0);
 8004706:	2400      	movs	r4, #0
 8004708:	9401      	str	r4, [sp, #4]
 800470a:	9c04      	ldr	r4, [sp, #16]
 800470c:	9400      	str	r4, [sp, #0]
 800470e:	f7ff ffc3 	bl	8004698 <os_mempool_init_internal>
}
 8004712:	b002      	add	sp, #8
 8004714:	bd10      	pop	{r4, pc}

08004716 <os_memblock_get>:
    return 1;
}

void *
os_memblock_get(struct os_mempool *mp)
{
 8004716:	b538      	push	{r3, r4, r5, lr}

    os_trace_api_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)mp);

    /* Check to make sure they passed in a memory pool (or something) */
    block = NULL;
    if (mp) {
 8004718:	4604      	mov	r4, r0
 800471a:	b198      	cbz	r0, 8004744 <os_memblock_get+0x2e>
        OS_ENTER_CRITICAL(sr);
 800471c:	f000 fc14 	bl	8004f48 <os_arch_save_sr>
        /* Check for any free */
        if (mp->mp_num_free) {
 8004720:	88e3      	ldrh	r3, [r4, #6]
 8004722:	b16b      	cbz	r3, 8004740 <os_memblock_get+0x2a>
            /* Get a free block */
            block = SLIST_FIRST(mp);
 8004724:	6965      	ldr	r5, [r4, #20]

            /* Set new free list head */
            SLIST_FIRST(mp) = SLIST_NEXT(block, mb_next);

            /* Decrement number free by 1 */
            mp->mp_num_free--;
 8004726:	3b01      	subs	r3, #1
            SLIST_FIRST(mp) = SLIST_NEXT(block, mb_next);
 8004728:	682a      	ldr	r2, [r5, #0]
            mp->mp_num_free--;
 800472a:	b29b      	uxth	r3, r3
            SLIST_FIRST(mp) = SLIST_NEXT(block, mb_next);
 800472c:	6162      	str	r2, [r4, #20]
            if (mp->mp_min_free > mp->mp_num_free) {
 800472e:	8922      	ldrh	r2, [r4, #8]
            mp->mp_num_free--;
 8004730:	80e3      	strh	r3, [r4, #6]
            if (mp->mp_min_free > mp->mp_num_free) {
 8004732:	429a      	cmp	r2, r3
 8004734:	d900      	bls.n	8004738 <os_memblock_get+0x22>
                mp->mp_min_free = mp->mp_num_free;
 8004736:	8123      	strh	r3, [r4, #8]
            }
        }
        OS_EXIT_CRITICAL(sr);
 8004738:	f000 fc0c 	bl	8004f54 <os_arch_restore_sr>
    }

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)block);

    return (void *)block;
}
 800473c:	4628      	mov	r0, r5
 800473e:	bd38      	pop	{r3, r4, r5, pc}
    block = NULL;
 8004740:	461d      	mov	r5, r3
 8004742:	e7f9      	b.n	8004738 <os_memblock_get+0x22>
 8004744:	4605      	mov	r5, r0
    return (void *)block;
 8004746:	e7f9      	b.n	800473c <os_memblock_get+0x26>

08004748 <os_memblock_put_from_cb>:

os_error_t
os_memblock_put_from_cb(struct os_mempool *mp, void *block_addr)
{
 8004748:	b538      	push	{r3, r4, r5, lr}
 800474a:	4604      	mov	r4, r0
 800474c:	460d      	mov	r5, r1

    os_mempool_guard_check(mp, block_addr);
    os_mempool_poison(mp, block_addr);

    block = (struct os_memblock *)block_addr;
    OS_ENTER_CRITICAL(sr);
 800474e:	f000 fbfb 	bl	8004f48 <os_arch_save_sr>

    /* Chain current free list pointer to this block; make this block head */
    SLIST_NEXT(block, mb_next) = SLIST_FIRST(mp);
 8004752:	6963      	ldr	r3, [r4, #20]
 8004754:	602b      	str	r3, [r5, #0]
    SLIST_FIRST(mp) = block;

    /* XXX: Should we check that the number free <= number blocks? */
    /* Increment number free */
    mp->mp_num_free++;
 8004756:	88e3      	ldrh	r3, [r4, #6]
    SLIST_FIRST(mp) = block;
 8004758:	6165      	str	r5, [r4, #20]
    mp->mp_num_free++;
 800475a:	3301      	adds	r3, #1
 800475c:	80e3      	strh	r3, [r4, #6]

    OS_EXIT_CRITICAL(sr);
 800475e:	f000 fbf9 	bl	8004f54 <os_arch_restore_sr>

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT_FROM_CB, (uint32_t)OS_OK);

    return OS_OK;
}
 8004762:	2000      	movs	r0, #0
 8004764:	bd38      	pop	{r3, r4, r5, pc}

08004766 <os_memblock_put>:

os_error_t
os_memblock_put(struct os_mempool *mp, void *block_addr)
{
 8004766:	b410      	push	{r4}
 8004768:	460a      	mov	r2, r1

    os_trace_api_u32x2(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)mp,
                       (uint32_t)block_addr);

    /* Make sure parameters are valid */
    if ((mp == NULL) || (block_addr == NULL)) {
 800476a:	4603      	mov	r3, r0
 800476c:	b170      	cbz	r0, 800478c <os_memblock_put+0x26>
 800476e:	b169      	cbz	r1, 800478c <os_memblock_put+0x26>
    }
#endif
    /* If this is an extended mempool with a put callback, call the callback
     * instead of freeing the block directly.
     */
    if (mp->mp_flags & OS_MEMPOOL_F_EXT) {
 8004770:	7a84      	ldrb	r4, [r0, #10]
 8004772:	07e4      	lsls	r4, r4, #31
 8004774:	d505      	bpl.n	8004782 <os_memblock_put+0x1c>
        mpe = (struct os_mempool_ext *)mp;
        if (mpe->mpe_put_cb != NULL) {
 8004776:	69c4      	ldr	r4, [r0, #28]
 8004778:	b11c      	cbz	r4, 8004782 <os_memblock_put+0x1c>
            ret = mpe->mpe_put_cb(mpe, block_addr, mpe->mpe_put_arg);
 800477a:	4623      	mov	r3, r4
 800477c:	6a02      	ldr	r2, [r0, #32]
    ret = os_memblock_put_from_cb(mp, block_addr);

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)ret);
    return ret;
}
 800477e:	bc10      	pop	{r4}
            ret = mpe->mpe_put_cb(mpe, block_addr, mpe->mpe_put_arg);
 8004780:	4718      	bx	r3
    ret = os_memblock_put_from_cb(mp, block_addr);
 8004782:	4611      	mov	r1, r2
 8004784:	4618      	mov	r0, r3
}
 8004786:	bc10      	pop	{r4}
    ret = os_memblock_put_from_cb(mp, block_addr);
 8004788:	f7ff bfde 	b.w	8004748 <os_memblock_put_from_cb>
}
 800478c:	2003      	movs	r0, #3
 800478e:	bc10      	pop	{r4}
 8004790:	4770      	bx	lr
	...

08004794 <os_mempool_module_init>:
}

void
os_mempool_module_init(void)
{
    STAILQ_INIT(&g_os_mempool_list);
 8004794:	2200      	movs	r2, #0
 8004796:	4b02      	ldr	r3, [pc, #8]	; (80047a0 <os_mempool_module_init+0xc>)
 8004798:	e9c3 2300 	strd	r2, r3, [r3]
}
 800479c:	4770      	bx	lr
 800479e:	bf00      	nop
 80047a0:	20003b08 	.word	0x20003b08

080047a4 <os_msys_find_pool>:
os_msys_find_pool(uint16_t dsize)
{
    struct os_mbuf_pool *pool;

    pool = NULL;
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
 80047a4:	4a07      	ldr	r2, [pc, #28]	; (80047c4 <os_msys_find_pool+0x20>)
{
 80047a6:	b510      	push	{r4, lr}
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
 80047a8:	6811      	ldr	r1, [r2, #0]
 80047aa:	460b      	mov	r3, r1
 80047ac:	b923      	cbnz	r3, 80047b8 <os_msys_find_pool+0x14>
            break;
        }
    }

    if (!pool) {
        pool = STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
 80047ae:	b109      	cbz	r1, 80047b4 <os_msys_find_pool+0x10>
 80047b0:	6853      	ldr	r3, [r2, #4]
 80047b2:	3b08      	subs	r3, #8
    }

    return (pool);
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	bd10      	pop	{r4, pc}
        if (dsize <= pool->omp_databuf_len) {
 80047b8:	881c      	ldrh	r4, [r3, #0]
 80047ba:	4284      	cmp	r4, r0
 80047bc:	d2fa      	bcs.n	80047b4 <os_msys_find_pool+0x10>
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	e7f4      	b.n	80047ac <os_msys_find_pool+0x8>
 80047c2:	bf00      	nop
 80047c4:	2000014c 	.word	0x2000014c

080047c8 <os_msys_register>:
{
 80047c8:	b530      	push	{r4, r5, lr}
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
 80047ca:	4b0c      	ldr	r3, [pc, #48]	; (80047fc <os_msys_register+0x34>)
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	b92a      	cbnz	r2, 80047dc <os_msys_register+0x14>
        STAILQ_INSERT_TAIL(&g_msys_pool_list, new_pool, omp_next);
 80047d0:	6082      	str	r2, [r0, #8]
 80047d2:	685a      	ldr	r2, [r3, #4]
 80047d4:	6010      	str	r0, [r2, #0]
 80047d6:	3008      	adds	r0, #8
 80047d8:	6058      	str	r0, [r3, #4]
    return (0);
 80047da:	e00c      	b.n	80047f6 <os_msys_register+0x2e>
        if (new_pool->omp_databuf_len > pool->omp_databuf_len) {
 80047dc:	8805      	ldrh	r5, [r0, #0]
 80047de:	8814      	ldrh	r4, [r2, #0]
 80047e0:	6891      	ldr	r1, [r2, #8]
 80047e2:	42a5      	cmp	r5, r4
 80047e4:	d801      	bhi.n	80047ea <os_msys_register+0x22>
 80047e6:	460a      	mov	r2, r1
 80047e8:	e7f1      	b.n	80047ce <os_msys_register+0x6>
        STAILQ_INSERT_AFTER(&g_msys_pool_list, pool, new_pool, omp_next);
 80047ea:	6081      	str	r1, [r0, #8]
 80047ec:	b911      	cbnz	r1, 80047f4 <os_msys_register+0x2c>
 80047ee:	f100 0108 	add.w	r1, r0, #8
 80047f2:	6059      	str	r1, [r3, #4]
 80047f4:	6090      	str	r0, [r2, #8]
}
 80047f6:	2000      	movs	r0, #0
 80047f8:	bd30      	pop	{r4, r5, pc}
 80047fa:	bf00      	nop
 80047fc:	2000014c 	.word	0x2000014c

08004800 <os_msys_reset>:
    STAILQ_INIT(&g_msys_pool_list);
 8004800:	2200      	movs	r2, #0
 8004802:	4b02      	ldr	r3, [pc, #8]	; (800480c <os_msys_reset+0xc>)
 8004804:	e9c3 2300 	strd	r2, r3, [r3]
}
 8004808:	4770      	bx	lr
 800480a:	bf00      	nop
 800480c:	2000014c 	.word	0x2000014c

08004810 <os_msys_get_pkthdr>:
    uint16_t total_pkthdr_len;
    struct os_mbuf *m;
    struct os_mbuf_pool *pool;

    total_pkthdr_len =  user_hdr_len + sizeof(struct os_mbuf_pkthdr);
    pool = os_msys_find_pool(dsize + total_pkthdr_len);
 8004810:	3008      	adds	r0, #8
 8004812:	4408      	add	r0, r1
{
 8004814:	b510      	push	{r4, lr}
    pool = os_msys_find_pool(dsize + total_pkthdr_len);
 8004816:	b280      	uxth	r0, r0
{
 8004818:	460c      	mov	r4, r1
    pool = os_msys_find_pool(dsize + total_pkthdr_len);
 800481a:	f7ff ffc3 	bl	80047a4 <os_msys_find_pool>
    if (!pool) {
 800481e:	b120      	cbz	r0, 800482a <os_msys_get_pkthdr+0x1a>
        goto err;
    }

    m = os_mbuf_get_pkthdr(pool, user_hdr_len);
 8004820:	b2e1      	uxtb	r1, r4
    return (m);
err:
    return (NULL);
}
 8004822:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    m = os_mbuf_get_pkthdr(pool, user_hdr_len);
 8004826:	f7ff bd2f 	b.w	8004288 <os_mbuf_get_pkthdr>
}
 800482a:	bd10      	pop	{r4, pc}

0800482c <os_msys_init>:
    SYSINIT_PANIC_ASSERT(rc == 0);
}

void
os_msys_init(void)
{
 800482c:	b513      	push	{r0, r1, r4, lr}
    int rc;

    os_msys_reset();
 800482e:	f7ff ffe7 	bl	8004800 <os_msys_reset>
    rc = mem_init_mbuf_pool(data, mempool, mbuf_pool, block_count, block_size,
 8004832:	4b11      	ldr	r3, [pc, #68]	; (8004878 <os_msys_init+0x4c>)
 8004834:	4a11      	ldr	r2, [pc, #68]	; (800487c <os_msys_init+0x50>)
 8004836:	9301      	str	r3, [sp, #4]
 8004838:	f44f 7392 	mov.w	r3, #292	; 0x124
 800483c:	4910      	ldr	r1, [pc, #64]	; (8004880 <os_msys_init+0x54>)
 800483e:	9300      	str	r3, [sp, #0]
 8004840:	4810      	ldr	r0, [pc, #64]	; (8004884 <os_msys_init+0x58>)
 8004842:	230c      	movs	r3, #12
 8004844:	f001 ffdb 	bl	80067fe <mem_init_mbuf_pool>
    SYSINIT_PANIC_ASSERT(rc == 0);
 8004848:	b138      	cbz	r0, 800485a <os_msys_init+0x2e>
 800484a:	2300      	movs	r3, #0
 800484c:	4a0e      	ldr	r2, [pc, #56]	; (8004888 <os_msys_init+0x5c>)
 800484e:	9300      	str	r3, [sp, #0]
 8004850:	6814      	ldr	r4, [r2, #0]
 8004852:	4619      	mov	r1, r3
 8004854:	461a      	mov	r2, r3
 8004856:	4618      	mov	r0, r3
 8004858:	47a0      	blx	r4
    rc = os_msys_register(mbuf_pool);
 800485a:	4808      	ldr	r0, [pc, #32]	; (800487c <os_msys_init+0x50>)
 800485c:	f7ff ffb4 	bl	80047c8 <os_msys_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
 8004860:	b138      	cbz	r0, 8004872 <os_msys_init+0x46>
 8004862:	2300      	movs	r3, #0
 8004864:	4a08      	ldr	r2, [pc, #32]	; (8004888 <os_msys_init+0x5c>)
 8004866:	9300      	str	r3, [sp, #0]
 8004868:	6814      	ldr	r4, [r2, #0]
 800486a:	4619      	mov	r1, r3
 800486c:	461a      	mov	r2, r3
 800486e:	4618      	mov	r0, r3
 8004870:	47a0      	blx	r4
    os_msys_sc.sc_checkin_itvl =
        OS_TICKS_PER_SEC * MYNEWT_VAL(MSYS_SANITY_TIMEOUT) / 1000;
    rc = os_sanity_check_register(&os_msys_sc);
    SYSINIT_PANIC_ASSERT(rc == 0);
#endif
}
 8004872:	b002      	add	sp, #8
 8004874:	bd10      	pop	{r4, pc}
 8004876:	bf00      	nop
 8004878:	0800de24 	.word	0x0800de24
 800487c:	20002768 	.word	0x20002768
 8004880:	20002774 	.word	0x20002774
 8004884:	200019b8 	.word	0x200019b8
 8004888:	20000148 	.word	0x20000148

0800488c <os_mutex_init>:
os_error_t
os_mutex_init(struct os_mutex *mu)
{
    os_error_t ret;

    if (!mu) {
 800488c:	b130      	cbz	r0, 800489c <os_mutex_init+0x10>
    }

    os_trace_api_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)mu);

    /* Initialize to 0 */
    mu->mu_prio = 0;
 800488e:	2300      	movs	r3, #0
 8004890:	7143      	strb	r3, [r0, #5]
    mu->mu_level = 0;
 8004892:	80c3      	strh	r3, [r0, #6]
    mu->mu_owner = NULL;
 8004894:	6083      	str	r3, [r0, #8]
    SLIST_FIRST(&mu->mu_head) = NULL;
 8004896:	6003      	str	r3, [r0, #0]

    ret = OS_OK;
 8004898:	4618      	mov	r0, r3
 800489a:	4770      	bx	lr
        ret = OS_INVALID_PARM;
 800489c:	2003      	movs	r0, #3

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)ret);
    return ret;
}
 800489e:	4770      	bx	lr

080048a0 <os_mutex_release>:

os_error_t
os_mutex_release(struct os_mutex *mu)
{
 80048a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)mu);

    /* Check if OS is started */
    if (!g_os_started) {
 80048a2:	4b26      	ldr	r3, [pc, #152]	; (800493c <os_mutex_release+0x9c>)
{
 80048a4:	4604      	mov	r4, r0
    if (!g_os_started) {
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d041      	beq.n	8004930 <os_mutex_release+0x90>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
 80048ac:	2800      	cmp	r0, #0
 80048ae:	d041      	beq.n	8004934 <os_mutex_release+0x94>
        ret = OS_INVALID_PARM;
        goto done;
    }

    /* We better own this mutex! */
    current = os_sched_get_current_task();
 80048b0:	f000 f952 	bl	8004b58 <os_sched_get_current_task>
    if ((mu->mu_level == 0) || (mu->mu_owner != current)) {
 80048b4:	88e3      	ldrh	r3, [r4, #6]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d03e      	beq.n	8004938 <os_mutex_release+0x98>
 80048ba:	68a6      	ldr	r6, [r4, #8]
 80048bc:	4286      	cmp	r6, r0
 80048be:	d13b      	bne.n	8004938 <os_mutex_release+0x98>
        ret = OS_BAD_MUTEX;
        goto done;
    }

    /* Don't release if nested, just decrement nesting level */
    if (mu->mu_level != 1) {
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d003      	beq.n	80048cc <os_mutex_release+0x2c>
        --mu->mu_level;
 80048c4:	3b01      	subs	r3, #1
 80048c6:	80e3      	strh	r3, [r4, #6]
    /* Re-schedule if needed */
    if (resched) {
        os_sched(rdy);
    }

    ret = OS_OK;
 80048c8:	2000      	movs	r0, #0
 80048ca:	e032      	b.n	8004932 <os_mutex_release+0x92>
    OS_ENTER_CRITICAL(sr);
 80048cc:	f000 fb3c 	bl	8004f48 <os_arch_save_sr>
    --mu->mu_level;
 80048d0:	88e3      	ldrh	r3, [r4, #6]
    OS_ENTER_CRITICAL(sr);
 80048d2:	4607      	mov	r7, r0
    --mu->mu_level;
 80048d4:	3b01      	subs	r3, #1
 80048d6:	80e3      	strh	r3, [r4, #6]
    if (current->t_prio != mu->mu_prio) {
 80048d8:	7af2      	ldrb	r2, [r6, #11]
 80048da:	7963      	ldrb	r3, [r4, #5]
 80048dc:	429a      	cmp	r2, r3
 80048de:	d003      	beq.n	80048e8 <os_mutex_release+0x48>
        current->t_prio = mu->mu_prio;
 80048e0:	72f3      	strb	r3, [r6, #11]
        os_sched_resort(current);
 80048e2:	4630      	mov	r0, r6
 80048e4:	f000 fa02 	bl	8004cec <os_sched_resort>
    rdy = SLIST_FIRST(&mu->mu_head);
 80048e8:	6825      	ldr	r5, [r4, #0]
    if (rdy) {
 80048ea:	b16d      	cbz	r5, 8004908 <os_mutex_release+0x68>
        assert(rdy->t_obj);
 80048ec:	69eb      	ldr	r3, [r5, #28]
 80048ee:	b923      	cbnz	r3, 80048fa <os_mutex_release+0x5a>
 80048f0:	461a      	mov	r2, r3
 80048f2:	4619      	mov	r1, r3
 80048f4:	4618      	mov	r0, r3
 80048f6:	f7ff f8dd 	bl	8003ab4 <__assert_func>
        os_sched_wakeup(rdy);
 80048fa:	4628      	mov	r0, r5
 80048fc:	f000 f984 	bl	8004c08 <os_sched_wakeup>
        mu->mu_level = 1;
 8004900:	2301      	movs	r3, #1
 8004902:	80e3      	strh	r3, [r4, #6]
        mu->mu_prio = rdy->t_prio;
 8004904:	7aeb      	ldrb	r3, [r5, #11]
 8004906:	7163      	strb	r3, [r4, #5]
    mu->mu_owner = rdy;
 8004908:	60a5      	str	r5, [r4, #8]
    if (rdy) {
 800490a:	b115      	cbz	r5, 8004912 <os_mutex_release+0x72>
        rdy->t_lockcnt++;
 800490c:	7bab      	ldrb	r3, [r5, #14]
 800490e:	3301      	adds	r3, #1
 8004910:	73ab      	strb	r3, [r5, #14]
    --current->t_lockcnt;
 8004912:	7bb3      	ldrb	r3, [r6, #14]
 8004914:	3b01      	subs	r3, #1
 8004916:	73b3      	strb	r3, [r6, #14]
    rdy = os_sched_next_task();
 8004918:	f000 f9e2 	bl	8004ce0 <os_sched_next_task>
 800491c:	4604      	mov	r4, r0
    OS_EXIT_CRITICAL(sr);
 800491e:	4638      	mov	r0, r7
 8004920:	f000 fb18 	bl	8004f54 <os_arch_restore_sr>
    if (resched) {
 8004924:	42a6      	cmp	r6, r4
 8004926:	d0cf      	beq.n	80048c8 <os_mutex_release+0x28>
        os_sched(rdy);
 8004928:	4620      	mov	r0, r4
 800492a:	f000 f921 	bl	8004b70 <os_sched>
 800492e:	e7cb      	b.n	80048c8 <os_mutex_release+0x28>
        ret = OS_NOT_STARTED;
 8004930:	2009      	movs	r0, #9

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)ret);
    return ret;
}
 8004932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ret = OS_INVALID_PARM;
 8004934:	2003      	movs	r0, #3
 8004936:	e7fc      	b.n	8004932 <os_mutex_release+0x92>
        ret = OS_BAD_MUTEX;
 8004938:	2005      	movs	r0, #5
 800493a:	e7fa      	b.n	8004932 <os_mutex_release+0x92>
 800493c:	20003afc 	.word	0x20003afc

08004940 <os_mutex_pend>:
    struct os_task *last;

    os_trace_api_u32x2(OS_TRACE_ID_MUTEX_PEND, (uint32_t)mu, (uint32_t)timeout);

    /* OS must be started when calling this function */
    if (!g_os_started) {
 8004940:	4b35      	ldr	r3, [pc, #212]	; (8004a18 <os_mutex_pend+0xd8>)
{
 8004942:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (!g_os_started) {
 8004946:	681b      	ldr	r3, [r3, #0]
{
 8004948:	4606      	mov	r6, r0
 800494a:	4688      	mov	r8, r1
    if (!g_os_started) {
 800494c:	2b00      	cmp	r3, #0
 800494e:	d05e      	beq.n	8004a0e <os_mutex_pend+0xce>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
 8004950:	2800      	cmp	r0, #0
 8004952:	d05e      	beq.n	8004a12 <os_mutex_pend+0xd2>
        ret = OS_INVALID_PARM;
        goto done;
    }

    OS_ENTER_CRITICAL(sr);
 8004954:	f000 faf8 	bl	8004f48 <os_arch_save_sr>
 8004958:	4607      	mov	r7, r0

    /* Is this owned? */
    current = os_sched_get_current_task();
 800495a:	f000 f8fd 	bl	8004b58 <os_sched_get_current_task>
    if (mu->mu_level == 0) {
 800495e:	88f5      	ldrh	r5, [r6, #6]
    current = os_sched_get_current_task();
 8004960:	4604      	mov	r4, r0
    if (mu->mu_level == 0) {
 8004962:	b96d      	cbnz	r5, 8004980 <os_mutex_pend+0x40>
        mu->mu_owner = current;
 8004964:	60b0      	str	r0, [r6, #8]
        mu->mu_prio  = current->t_prio;
 8004966:	7ac3      	ldrb	r3, [r0, #11]
 8004968:	7173      	strb	r3, [r6, #5]
        current->t_lockcnt++;
 800496a:	7b83      	ldrb	r3, [r0, #14]
 800496c:	3301      	adds	r3, #1
 800496e:	7383      	strb	r3, [r0, #14]
        mu->mu_level = 1;
 8004970:	2301      	movs	r3, #1
 8004972:	80f3      	strh	r3, [r6, #6]
    }

    /* Are we owner? */
    if (mu->mu_owner == current) {
        ++mu->mu_level;
        OS_EXIT_CRITICAL(sr);
 8004974:	4638      	mov	r0, r7
 8004976:	f000 faed 	bl	8004f54 <os_arch_restore_sr>
        ret = OS_OK;
 800497a:	2000      	movs	r0, #0
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_PEND, (uint32_t)ret);
    return ret;
}
 800497c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (mu->mu_owner == current) {
 8004980:	68b0      	ldr	r0, [r6, #8]
 8004982:	42a0      	cmp	r0, r4
 8004984:	d102      	bne.n	800498c <os_mutex_pend+0x4c>
        ++mu->mu_level;
 8004986:	1c68      	adds	r0, r5, #1
 8004988:	80f0      	strh	r0, [r6, #6]
 800498a:	e7f3      	b.n	8004974 <os_mutex_pend+0x34>
    if (timeout == 0) {
 800498c:	f1b8 0f00 	cmp.w	r8, #0
 8004990:	d104      	bne.n	800499c <os_mutex_pend+0x5c>
        OS_EXIT_CRITICAL(sr);
 8004992:	4638      	mov	r0, r7
 8004994:	f000 fade 	bl	8004f54 <os_arch_restore_sr>
        ret = OS_TIMEOUT;
 8004998:	2006      	movs	r0, #6
        goto done;
 800499a:	e7ef      	b.n	800497c <os_mutex_pend+0x3c>
    if (mu->mu_owner->t_prio > current->t_prio) {
 800499c:	7ae3      	ldrb	r3, [r4, #11]
 800499e:	7ac2      	ldrb	r2, [r0, #11]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d902      	bls.n	80049aa <os_mutex_pend+0x6a>
        mu->mu_owner->t_prio = current->t_prio;
 80049a4:	72c3      	strb	r3, [r0, #11]
        os_sched_resort(mu->mu_owner);
 80049a6:	f000 f9a1 	bl	8004cec <os_sched_resort>
    if (!SLIST_EMPTY(&mu->mu_head)) {
 80049aa:	6831      	ldr	r1, [r6, #0]
 80049ac:	b361      	cbz	r1, 8004a08 <os_mutex_pend+0xc8>
            if (current->t_prio < entry->t_prio) {
 80049ae:	460a      	mov	r2, r1
    last = NULL;
 80049b0:	2300      	movs	r3, #0
            if (current->t_prio < entry->t_prio) {
 80049b2:	7ae5      	ldrb	r5, [r4, #11]
 80049b4:	7ad0      	ldrb	r0, [r2, #11]
 80049b6:	42a8      	cmp	r0, r5
 80049b8:	d824      	bhi.n	8004a04 <os_mutex_pend+0xc4>
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
 80049ba:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 80049bc:	4613      	mov	r3, r2
 80049be:	b9f8      	cbnz	r0, 8004a00 <os_mutex_pend+0xc0>
        SLIST_INSERT_AFTER(last, current, t_obj_list);
 80049c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80049c2:	64e2      	str	r2, [r4, #76]	; 0x4c
 80049c4:	64dc      	str	r4, [r3, #76]	; 0x4c
    current->t_flags |= OS_TASK_FLAG_MUTEX_WAIT;
 80049c6:	7b63      	ldrb	r3, [r4, #13]
    os_sched_sleep(current, timeout);
 80049c8:	4641      	mov	r1, r8
    current->t_flags |= OS_TASK_FLAG_MUTEX_WAIT;
 80049ca:	f043 0304 	orr.w	r3, r3, #4
 80049ce:	7363      	strb	r3, [r4, #13]
    current->t_obj = mu;
 80049d0:	61e6      	str	r6, [r4, #28]
    os_sched_sleep(current, timeout);
 80049d2:	4620      	mov	r0, r4
 80049d4:	f000 f8de 	bl	8004b94 <os_sched_sleep>
    OS_EXIT_CRITICAL(sr);
 80049d8:	4638      	mov	r0, r7
 80049da:	f000 fabb 	bl	8004f54 <os_arch_restore_sr>
    os_sched(NULL);
 80049de:	2000      	movs	r0, #0
 80049e0:	f000 f8c6 	bl	8004b70 <os_sched>
    OS_ENTER_CRITICAL(sr);
 80049e4:	f000 fab0 	bl	8004f48 <os_arch_save_sr>
    current->t_flags &= ~OS_TASK_FLAG_MUTEX_WAIT;
 80049e8:	7b63      	ldrb	r3, [r4, #13]
 80049ea:	f023 0304 	bic.w	r3, r3, #4
 80049ee:	7363      	strb	r3, [r4, #13]
    OS_EXIT_CRITICAL(sr);
 80049f0:	f000 fab0 	bl	8004f54 <os_arch_restore_sr>
    if (mu->mu_owner == current) {
 80049f4:	68b0      	ldr	r0, [r6, #8]
        ret = OS_TIMEOUT;
 80049f6:	42a0      	cmp	r0, r4
 80049f8:	bf14      	ite	ne
 80049fa:	2006      	movne	r0, #6
 80049fc:	2000      	moveq	r0, #0
 80049fe:	e7bd      	b.n	800497c <os_mutex_pend+0x3c>
 8004a00:	4602      	mov	r2, r0
 8004a02:	e7d7      	b.n	80049b4 <os_mutex_pend+0x74>
    if (last) {
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d1db      	bne.n	80049c0 <os_mutex_pend+0x80>
        SLIST_INSERT_HEAD(&mu->mu_head, current, t_obj_list);
 8004a08:	64e1      	str	r1, [r4, #76]	; 0x4c
 8004a0a:	6034      	str	r4, [r6, #0]
 8004a0c:	e7db      	b.n	80049c6 <os_mutex_pend+0x86>
        ret = OS_NOT_STARTED;
 8004a0e:	2009      	movs	r0, #9
 8004a10:	e7b4      	b.n	800497c <os_mutex_pend+0x3c>
        ret = OS_INVALID_PARM;
 8004a12:	2003      	movs	r0, #3
 8004a14:	e7b2      	b.n	800497c <os_mutex_pend+0x3c>
 8004a16:	bf00      	nop
 8004a18:	20003afc 	.word	0x20003afc

08004a1c <os_sanity_check_list_lock>:
 *
 * @return 0 on success, error code on failure.
 */
static int
os_sanity_check_list_lock(void)
{
 8004a1c:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
 8004a1e:	4b04      	ldr	r3, [pc, #16]	; (8004a30 <os_sanity_check_list_lock+0x14>)
 8004a20:	6818      	ldr	r0, [r3, #0]
 8004a22:	b120      	cbz	r0, 8004a2e <os_sanity_check_list_lock+0x12>
        return (0);
    }

    rc = os_mutex_pend(&g_os_sanity_check_mu, OS_WAIT_FOREVER);
 8004a24:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004a28:	4802      	ldr	r0, [pc, #8]	; (8004a34 <os_sanity_check_list_lock+0x18>)
 8004a2a:	f7ff ff89 	bl	8004940 <os_mutex_pend>
    }

    return (0);
err:
    return (rc);
}
 8004a2e:	bd08      	pop	{r3, pc}
 8004a30:	20003afc 	.word	0x20003afc
 8004a34:	20003b10 	.word	0x20003b10

08004a38 <os_sanity_check_list_unlock>:
 *
 * @return 0 on success, error code on failure
 */
static int
os_sanity_check_list_unlock(void)
{
 8004a38:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
 8004a3a:	4b03      	ldr	r3, [pc, #12]	; (8004a48 <os_sanity_check_list_unlock+0x10>)
 8004a3c:	6818      	ldr	r0, [r3, #0]
 8004a3e:	b110      	cbz	r0, 8004a46 <os_sanity_check_list_unlock+0xe>
        return (0);
    }

    rc = os_mutex_release(&g_os_sanity_check_mu);
 8004a40:	4802      	ldr	r0, [pc, #8]	; (8004a4c <os_sanity_check_list_unlock+0x14>)
 8004a42:	f7ff ff2d 	bl	80048a0 <os_mutex_release>
    }

    return (0);
err:
    return (rc);
}
 8004a46:	bd08      	pop	{r3, pc}
 8004a48:	20003afc 	.word	0x20003afc
 8004a4c:	20003b10 	.word	0x20003b10

08004a50 <os_sanity_check_init>:
{
 8004a50:	b508      	push	{r3, lr}
    memset(sc, 0, sizeof(*sc));
 8004a52:	2214      	movs	r2, #20
 8004a54:	2100      	movs	r1, #0
 8004a56:	f000 fc96 	bl	8005386 <memset>
}
 8004a5a:	2000      	movs	r0, #0
 8004a5c:	bd08      	pop	{r3, pc}
	...

08004a60 <os_sanity_check_register>:
}


int
os_sanity_check_register(struct os_sanity_check *sc)
{
 8004a60:	b510      	push	{r4, lr}
 8004a62:	4604      	mov	r4, r0
    int rc;

    rc = os_sanity_check_list_lock();
 8004a64:	f7ff ffda 	bl	8004a1c <os_sanity_check_list_lock>
    if (rc != OS_OK) {
 8004a68:	b938      	cbnz	r0, 8004a7a <os_sanity_check_register+0x1a>
        goto err;
    }

    SLIST_INSERT_HEAD(&g_os_sanity_check_list, sc, sc_next);
 8004a6a:	4b04      	ldr	r3, [pc, #16]	; (8004a7c <os_sanity_check_register+0x1c>)
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	601c      	str	r4, [r3, #0]
 8004a70:	6122      	str	r2, [r4, #16]
    }

    return (0);
err:
    return (rc);
}
 8004a72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    rc = os_sanity_check_list_unlock();
 8004a76:	f7ff bfdf 	b.w	8004a38 <os_sanity_check_list_unlock>
}
 8004a7a:	bd10      	pop	{r4, pc}
 8004a7c:	20002790 	.word	0x20002790

08004a80 <os_sanity_run>:
 * Goes through the sanity check list, and performs sanity checks.  If any of
 * these checks failed, or tasks have not checked in, it resets the processor.
 */
void
os_sanity_run(void)
{
 8004a80:	b510      	push	{r4, lr}
    struct os_sanity_check *sc;
    int rc;

    rc = os_sanity_check_list_lock();
 8004a82:	f7ff ffcb 	bl	8004a1c <os_sanity_check_list_lock>
    if (rc != 0) {
 8004a86:	b128      	cbz	r0, 8004a94 <os_sanity_run+0x14>
        assert(0);
 8004a88:	2300      	movs	r3, #0
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f7ff f810 	bl	8003ab4 <__assert_func>
    }

    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
 8004a94:	4b0d      	ldr	r3, [pc, #52]	; (8004acc <os_sanity_run+0x4c>)
 8004a96:	681c      	ldr	r4, [r3, #0]
 8004a98:	b924      	cbnz	r4, 8004aa4 <os_sanity_run+0x24>
                    sc->sc_checkin_last + sc->sc_checkin_itvl)) {
            assert(0);
        }
    }

    rc = os_sanity_check_list_unlock();
 8004a9a:	f7ff ffcd 	bl	8004a38 <os_sanity_check_list_unlock>
    if (rc != 0) {
 8004a9e:	2800      	cmp	r0, #0
 8004aa0:	d1f2      	bne.n	8004a88 <os_sanity_run+0x8>
        assert(0);
    }
}
 8004aa2:	bd10      	pop	{r4, pc}
        if (sc->sc_func) {
 8004aa4:	68a3      	ldr	r3, [r4, #8]
 8004aa6:	b143      	cbz	r3, 8004aba <os_sanity_run+0x3a>
            rc = sc->sc_func(sc, sc->sc_arg);
 8004aa8:	68e1      	ldr	r1, [r4, #12]
 8004aaa:	4620      	mov	r0, r4
 8004aac:	4798      	blx	r3
            if (rc == OS_OK) {
 8004aae:	b920      	cbnz	r0, 8004aba <os_sanity_run+0x3a>
                sc->sc_checkin_last = os_time_get();
 8004ab0:	f000 f9c6 	bl	8004e40 <os_time_get>
 8004ab4:	6020      	str	r0, [r4, #0]
    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
 8004ab6:	6924      	ldr	r4, [r4, #16]
 8004ab8:	e7ee      	b.n	8004a98 <os_sanity_run+0x18>
        if (OS_TIME_TICK_GT(os_time_get(),
 8004aba:	f000 f9c1 	bl	8004e40 <os_time_get>
 8004abe:	e9d4 3200 	ldrd	r3, r2, [r4]
 8004ac2:	4413      	add	r3, r2
 8004ac4:	1ac3      	subs	r3, r0, r3
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	ddf5      	ble.n	8004ab6 <os_sanity_run+0x36>
 8004aca:	e7dd      	b.n	8004a88 <os_sanity_run+0x8>
 8004acc:	20002790 	.word	0x20002790

08004ad0 <os_sanity_init>:

int
os_sanity_init(void)
{
 8004ad0:	b508      	push	{r3, lr}
    int rc;

    rc = os_mutex_init(&g_os_sanity_check_mu);
 8004ad2:	4802      	ldr	r0, [pc, #8]	; (8004adc <os_sanity_init+0xc>)
 8004ad4:	f7ff feda 	bl	800488c <os_mutex_init>
    }

    return (0);
err:
    return (rc);
}
 8004ad8:	bd08      	pop	{r3, pc}
 8004ada:	bf00      	nop
 8004adc:	20003b10 	.word	0x20003b10

08004ae0 <os_sched_insert>:
 * @return int  OS_OK: task was inserted into run list
 *              OS_EINVAL: Task was not in ready state.
 */
os_error_t
os_sched_insert(struct os_task *t)
{
 8004ae0:	b538      	push	{r3, r4, r5, lr}
    struct os_task *entry;
    os_sr_t sr;
    os_error_t rc;

    if (t->t_state != OS_TASK_READY) {
 8004ae2:	7b03      	ldrb	r3, [r0, #12]
{
 8004ae4:	4604      	mov	r4, r0
    if (t->t_state != OS_TASK_READY) {
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d111      	bne.n	8004b0e <os_sched_insert+0x2e>
        rc = OS_EINVAL;
        goto err;
    }

    entry = NULL;
    OS_ENTER_CRITICAL(sr);
 8004aea:	f000 fa2d 	bl	8004f48 <os_arch_save_sr>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
 8004aee:	4a0e      	ldr	r2, [pc, #56]	; (8004b28 <os_sched_insert+0x48>)
 8004af0:	6813      	ldr	r3, [r2, #0]
 8004af2:	b933      	cbnz	r3, 8004b02 <os_sched_insert+0x22>
        }
    }
    if (entry) {
        TAILQ_INSERT_BEFORE(entry, (struct os_task *) t, t_os_list);
    } else {
        TAILQ_INSERT_TAIL(&g_os_run_list, (struct os_task *) t, t_os_list);
 8004af4:	6463      	str	r3, [r4, #68]	; 0x44
 8004af6:	6853      	ldr	r3, [r2, #4]
 8004af8:	64a3      	str	r3, [r4, #72]	; 0x48
 8004afa:	601c      	str	r4, [r3, #0]
 8004afc:	3444      	adds	r4, #68	; 0x44
 8004afe:	6054      	str	r4, [r2, #4]
 8004b00:	e00e      	b.n	8004b20 <os_sched_insert+0x40>
        if (t->t_prio < entry->t_prio) {
 8004b02:	7ae5      	ldrb	r5, [r4, #11]
 8004b04:	7ad9      	ldrb	r1, [r3, #11]
 8004b06:	428d      	cmp	r5, r1
 8004b08:	d303      	bcc.n	8004b12 <os_sched_insert+0x32>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
 8004b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b0c:	e7f1      	b.n	8004af2 <os_sched_insert+0x12>
    }
    OS_EXIT_CRITICAL(sr);

    return (0);
err:
    return (rc);
 8004b0e:	2002      	movs	r0, #2
 8004b10:	e009      	b.n	8004b26 <os_sched_insert+0x46>
        TAILQ_INSERT_BEFORE(entry, (struct os_task *) t, t_os_list);
 8004b12:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b14:	e9c4 3211 	strd	r3, r2, [r4, #68]	; 0x44
 8004b18:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b1a:	6014      	str	r4, [r2, #0]
 8004b1c:	3444      	adds	r4, #68	; 0x44
 8004b1e:	649c      	str	r4, [r3, #72]	; 0x48
    OS_EXIT_CRITICAL(sr);
 8004b20:	f000 fa18 	bl	8004f54 <os_arch_restore_sr>
 8004b24:	2000      	movs	r0, #0
}
 8004b26:	bd38      	pop	{r3, r4, r5, pc}
 8004b28:	20000154 	.word	0x20000154

08004b2c <os_sched_ctx_sw_hook>:
    top = g_current_task->t_stacktop - g_current_task->t_stacksize;
    for (i = 0; i < MYNEWT_VAL(OS_CTX_SW_STACK_GUARD); i++) {
        assert(top[i] == OS_STACK_PATTERN);
    }
#endif
    next_t->t_ctx_sw_cnt++;
 8004b2c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
{
 8004b2e:	b510      	push	{r4, lr}
    next_t->t_ctx_sw_cnt++;
 8004b30:	3301      	adds	r3, #1
 8004b32:	63c3      	str	r3, [r0, #60]	; 0x3c
    g_current_task->t_run_time += g_os_time - g_os_last_ctx_sw_time;
 8004b34:	4b05      	ldr	r3, [pc, #20]	; (8004b4c <os_sched_ctx_sw_hook+0x20>)
 8004b36:	4a06      	ldr	r2, [pc, #24]	; (8004b50 <os_sched_ctx_sw_hook+0x24>)
 8004b38:	6818      	ldr	r0, [r3, #0]
 8004b3a:	4b06      	ldr	r3, [pc, #24]	; (8004b54 <os_sched_ctx_sw_hook+0x28>)
 8004b3c:	6814      	ldr	r4, [r2, #0]
 8004b3e:	6819      	ldr	r1, [r3, #0]
 8004b40:	6b83      	ldr	r3, [r0, #56]	; 0x38
    g_os_last_ctx_sw_time = g_os_time;
 8004b42:	6011      	str	r1, [r2, #0]
    g_current_task->t_run_time += g_os_time - g_os_last_ctx_sw_time;
 8004b44:	1b1b      	subs	r3, r3, r4
 8004b46:	440b      	add	r3, r1
 8004b48:	6383      	str	r3, [r0, #56]	; 0x38
}
 8004b4a:	bd10      	pop	{r4, pc}
 8004b4c:	20003b1c 	.word	0x20003b1c
 8004b50:	20003b20 	.word	0x20003b20
 8004b54:	20003b30 	.word	0x20003b30

08004b58 <os_sched_get_current_task>:

struct os_task *
os_sched_get_current_task(void)
{
    return (g_current_task);
}
 8004b58:	4b01      	ldr	r3, [pc, #4]	; (8004b60 <os_sched_get_current_task+0x8>)
 8004b5a:	6818      	ldr	r0, [r3, #0]
 8004b5c:	4770      	bx	lr
 8004b5e:	bf00      	nop
 8004b60:	20003b1c 	.word	0x20003b1c

08004b64 <os_sched_set_current_task>:
 * @param t Pointer to currently running task.
 */
void
os_sched_set_current_task(struct os_task *t)
{
    g_current_task = t;
 8004b64:	4b01      	ldr	r3, [pc, #4]	; (8004b6c <os_sched_set_current_task+0x8>)
 8004b66:	6018      	str	r0, [r3, #0]
}
 8004b68:	4770      	bx	lr
 8004b6a:	bf00      	nop
 8004b6c:	20003b1c 	.word	0x20003b1c

08004b70 <os_sched>:

void
os_sched(struct os_task *next_t)
{
 8004b70:	b538      	push	{r3, r4, r5, lr}
 8004b72:	4604      	mov	r4, r0
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
 8004b74:	f000 f9e8 	bl	8004f48 <os_arch_save_sr>
 8004b78:	4605      	mov	r5, r0

    if (!next_t) {
 8004b7a:	b90c      	cbnz	r4, 8004b80 <os_sched+0x10>
 * @return struct os_task*
 */
struct os_task *
os_sched_next_task(void)
{
    return (TAILQ_FIRST(&g_os_run_list));
 8004b7c:	4b04      	ldr	r3, [pc, #16]	; (8004b90 <os_sched+0x20>)
 8004b7e:	681c      	ldr	r4, [r3, #0]
    os_arch_ctx_sw(next_t);
 8004b80:	4620      	mov	r0, r4
 8004b82:	f000 f9d7 	bl	8004f34 <os_arch_ctx_sw>
    OS_EXIT_CRITICAL(sr);
 8004b86:	4628      	mov	r0, r5
}
 8004b88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    OS_EXIT_CRITICAL(sr);
 8004b8c:	f000 b9e2 	b.w	8004f54 <os_arch_restore_sr>
 8004b90:	20000154 	.word	0x20000154

08004b94 <os_sched_sleep>:
{
 8004b94:	b570      	push	{r4, r5, r6, lr}
 8004b96:	e9d0 3211 	ldrd	r3, r2, [r0, #68]	; 0x44
 8004b9a:	4604      	mov	r4, r0
 8004b9c:	460e      	mov	r6, r1
    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
 8004b9e:	b1cb      	cbz	r3, 8004bd4 <os_sched_sleep+0x40>
 8004ba0:	649a      	str	r2, [r3, #72]	; 0x48
 8004ba2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8004ba4:	f104 0544 	add.w	r5, r4, #68	; 0x44
 8004ba8:	6013      	str	r3, [r2, #0]
    t->t_state = OS_TASK_SLEEP;
 8004baa:	2302      	movs	r3, #2
 8004bac:	7323      	strb	r3, [r4, #12]
    t->t_next_wakeup = os_time_get() + nticks;
 8004bae:	f000 f947 	bl	8004e40 <os_time_get>
 8004bb2:	4430      	add	r0, r6
    if (nticks == OS_TIMEOUT_NEVER) {
 8004bb4:	3601      	adds	r6, #1
    t->t_next_wakeup = os_time_get() + nticks;
 8004bb6:	6360      	str	r0, [r4, #52]	; 0x34
 8004bb8:	4a11      	ldr	r2, [pc, #68]	; (8004c00 <os_sched_sleep+0x6c>)
    if (nticks == OS_TIMEOUT_NEVER) {
 8004bba:	d10e      	bne.n	8004bda <os_sched_sleep+0x46>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
 8004bbc:	7b63      	ldrb	r3, [r4, #13]
 8004bbe:	f043 0301 	orr.w	r3, r3, #1
 8004bc2:	7363      	strb	r3, [r4, #13]
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
 8004bc4:	2300      	movs	r3, #0
            TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
 8004bc6:	6463      	str	r3, [r4, #68]	; 0x44
 8004bc8:	6853      	ldr	r3, [r2, #4]
 8004bca:	64a3      	str	r3, [r4, #72]	; 0x48
 8004bcc:	601c      	str	r4, [r3, #0]
 8004bce:	6055      	str	r5, [r2, #4]
}
 8004bd0:	2000      	movs	r0, #0
 8004bd2:	bd70      	pop	{r4, r5, r6, pc}
    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
 8004bd4:	490b      	ldr	r1, [pc, #44]	; (8004c04 <os_sched_sleep+0x70>)
 8004bd6:	604a      	str	r2, [r1, #4]
 8004bd8:	e7e3      	b.n	8004ba2 <os_sched_sleep+0xe>
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
 8004bda:	6813      	ldr	r3, [r2, #0]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d0f2      	beq.n	8004bc6 <os_sched_sleep+0x32>
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
 8004be0:	7b59      	ldrb	r1, [r3, #13]
 8004be2:	07c9      	lsls	r1, r1, #31
 8004be4:	d405      	bmi.n	8004bf2 <os_sched_sleep+0x5e>
                    OS_TIME_TICK_GT(entry->t_next_wakeup, t->t_next_wakeup)) {
 8004be6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004be8:	1a09      	subs	r1, r1, r0
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
 8004bea:	2900      	cmp	r1, #0
 8004bec:	dc01      	bgt.n	8004bf2 <os_sched_sleep+0x5e>
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
 8004bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bf0:	e7f4      	b.n	8004bdc <os_sched_sleep+0x48>
            TAILQ_INSERT_BEFORE(entry, t, t_os_list);
 8004bf2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004bf4:	e9c4 3211 	strd	r3, r2, [r4, #68]	; 0x44
 8004bf8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004bfa:	6014      	str	r4, [r2, #0]
 8004bfc:	649d      	str	r5, [r3, #72]	; 0x48
    return (0);
 8004bfe:	e7e7      	b.n	8004bd0 <os_sched_sleep+0x3c>
 8004c00:	2000015c 	.word	0x2000015c
 8004c04:	20000154 	.word	0x20000154

08004c08 <os_sched_wakeup>:
{
 8004c08:	b508      	push	{r3, lr}
    assert(t->t_state == OS_TASK_SLEEP);
 8004c0a:	7b03      	ldrb	r3, [r0, #12]
 8004c0c:	2b02      	cmp	r3, #2
 8004c0e:	d005      	beq.n	8004c1c <os_sched_wakeup+0x14>
 8004c10:	2300      	movs	r3, #0
 8004c12:	461a      	mov	r2, r3
 8004c14:	4619      	mov	r1, r3
 8004c16:	4618      	mov	r0, r3
 8004c18:	f7fe ff4c 	bl	8003ab4 <__assert_func>
    if (t->t_obj) {
 8004c1c:	69c2      	ldr	r2, [r0, #28]
 8004c1e:	b14a      	cbz	r2, 8004c34 <os_sched_wakeup+0x2c>
        assert(!SLIST_EMPTY(&os_obj->obj_head));
 8004c20:	6813      	ldr	r3, [r2, #0]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d0f4      	beq.n	8004c10 <os_sched_wakeup+0x8>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
 8004c26:	4283      	cmp	r3, r0
 8004c28:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8004c2a:	d116      	bne.n	8004c5a <os_sched_wakeup+0x52>
 8004c2c:	6011      	str	r1, [r2, #0]
        SLIST_NEXT(t, t_obj_list) = NULL;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	64c3      	str	r3, [r0, #76]	; 0x4c
        t->t_obj = NULL;
 8004c32:	61c3      	str	r3, [r0, #28]
    t->t_state = OS_TASK_READY;
 8004c34:	2301      	movs	r3, #1
 8004c36:	7303      	strb	r3, [r0, #12]
    t->t_next_wakeup = 0;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	6343      	str	r3, [r0, #52]	; 0x34
    t->t_flags &= ~OS_TASK_FLAG_NO_TIMEOUT;
 8004c3c:	7b43      	ldrb	r3, [r0, #13]
 8004c3e:	f023 0301 	bic.w	r3, r3, #1
 8004c42:	7343      	strb	r3, [r0, #13]
 8004c44:	e9d0 3211 	ldrd	r3, r2, [r0, #68]	; 0x44
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
 8004c48:	b163      	cbz	r3, 8004c64 <os_sched_wakeup+0x5c>
 8004c4a:	649a      	str	r2, [r3, #72]	; 0x48
 8004c4c:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8004c4e:	6013      	str	r3, [r2, #0]
    os_sched_insert(t);
 8004c50:	f7ff ff46 	bl	8004ae0 <os_sched_insert>
}
 8004c54:	2000      	movs	r0, #0
 8004c56:	bd08      	pop	{r3, pc}
 8004c58:	4613      	mov	r3, r2
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
 8004c5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004c5c:	4282      	cmp	r2, r0
 8004c5e:	d1fb      	bne.n	8004c58 <os_sched_wakeup+0x50>
 8004c60:	64d9      	str	r1, [r3, #76]	; 0x4c
 8004c62:	e7e4      	b.n	8004c2e <os_sched_wakeup+0x26>
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
 8004c64:	4901      	ldr	r1, [pc, #4]	; (8004c6c <os_sched_wakeup+0x64>)
 8004c66:	604a      	str	r2, [r1, #4]
 8004c68:	e7f0      	b.n	8004c4c <os_sched_wakeup+0x44>
 8004c6a:	bf00      	nop
 8004c6c:	2000015c 	.word	0x2000015c

08004c70 <os_sched_os_timer_exp>:
{
 8004c70:	b570      	push	{r4, r5, r6, lr}
    now = os_time_get();
 8004c72:	f000 f8e5 	bl	8004e40 <os_time_get>
 8004c76:	4605      	mov	r5, r0
    OS_ENTER_CRITICAL(sr);
 8004c78:	f000 f966 	bl	8004f48 <os_arch_save_sr>
    t = TAILQ_FIRST(&g_os_sleep_list);
 8004c7c:	4b0a      	ldr	r3, [pc, #40]	; (8004ca8 <os_sched_os_timer_exp+0x38>)
    OS_ENTER_CRITICAL(sr);
 8004c7e:	4604      	mov	r4, r0
    t = TAILQ_FIRST(&g_os_sleep_list);
 8004c80:	6818      	ldr	r0, [r3, #0]
    while (t) {
 8004c82:	b920      	cbnz	r0, 8004c8e <os_sched_os_timer_exp+0x1e>
    OS_EXIT_CRITICAL(sr);
 8004c84:	4620      	mov	r0, r4
}
 8004c86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    OS_EXIT_CRITICAL(sr);
 8004c8a:	f000 b963 	b.w	8004f54 <os_arch_restore_sr>
        if (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT) {
 8004c8e:	7b43      	ldrb	r3, [r0, #13]
 8004c90:	07db      	lsls	r3, r3, #31
 8004c92:	d4f7      	bmi.n	8004c84 <os_sched_os_timer_exp+0x14>
        if (OS_TIME_TICK_GEQ(now, t->t_next_wakeup)) {
 8004c94:	6b43      	ldr	r3, [r0, #52]	; 0x34
        next = TAILQ_NEXT(t, t_os_list);
 8004c96:	6c46      	ldr	r6, [r0, #68]	; 0x44
        if (OS_TIME_TICK_GEQ(now, t->t_next_wakeup)) {
 8004c98:	1aeb      	subs	r3, r5, r3
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	dbf2      	blt.n	8004c84 <os_sched_os_timer_exp+0x14>
            os_sched_wakeup(t);
 8004c9e:	f7ff ffb3 	bl	8004c08 <os_sched_wakeup>
        t = next;
 8004ca2:	4630      	mov	r0, r6
 8004ca4:	e7ed      	b.n	8004c82 <os_sched_os_timer_exp+0x12>
 8004ca6:	bf00      	nop
 8004ca8:	2000015c 	.word	0x2000015c

08004cac <os_sched_wakeup_ticks>:
{
 8004cac:	b510      	push	{r4, lr}
 8004cae:	4604      	mov	r4, r0
    OS_ASSERT_CRITICAL();
 8004cb0:	f000 f953 	bl	8004f5a <os_arch_in_critical>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	b918      	cbnz	r0, 8004cc0 <os_sched_wakeup_ticks+0x14>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	4601      	mov	r1, r0
 8004cbc:	f7fe fefa 	bl	8003ab4 <__assert_func>
    t = TAILQ_FIRST(&g_os_sleep_list);
 8004cc0:	4b06      	ldr	r3, [pc, #24]	; (8004cdc <os_sched_wakeup_ticks+0x30>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
    if (t == NULL || (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT)) {
 8004cc4:	b13b      	cbz	r3, 8004cd6 <os_sched_wakeup_ticks+0x2a>
 8004cc6:	7b5a      	ldrb	r2, [r3, #13]
 8004cc8:	07d2      	lsls	r2, r2, #31
 8004cca:	d404      	bmi.n	8004cd6 <os_sched_wakeup_ticks+0x2a>
    } else if (OS_TIME_TICK_GEQ(t->t_next_wakeup, now)) {
 8004ccc:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004cce:	1b00      	subs	r0, r0, r4
        rt = 0;     /* wakeup time was in the past */
 8004cd0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 8004cd4:	bd10      	pop	{r4, pc}
        rt = OS_TIMEOUT_NEVER;
 8004cd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004cda:	e7fb      	b.n	8004cd4 <os_sched_wakeup_ticks+0x28>
 8004cdc:	2000015c 	.word	0x2000015c

08004ce0 <os_sched_next_task>:
}
 8004ce0:	4b01      	ldr	r3, [pc, #4]	; (8004ce8 <os_sched_next_task+0x8>)
 8004ce2:	6818      	ldr	r0, [r3, #0]
 8004ce4:	4770      	bx	lr
 8004ce6:	bf00      	nop
 8004ce8:	20000154 	.word	0x20000154

08004cec <os_sched_resort>:
 * are not disabled here.
 */
void
os_sched_resort(struct os_task *t)
{
    if (t->t_state == OS_TASK_READY) {
 8004cec:	7b03      	ldrb	r3, [r0, #12]
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d10a      	bne.n	8004d08 <os_sched_resort+0x1c>
 8004cf2:	e9d0 3211 	ldrd	r3, r2, [r0, #68]	; 0x44
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
 8004cf6:	b123      	cbz	r3, 8004d02 <os_sched_resort+0x16>
 8004cf8:	649a      	str	r2, [r3, #72]	; 0x48
 8004cfa:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8004cfc:	6013      	str	r3, [r2, #0]
        os_sched_insert(t);
 8004cfe:	f7ff beef 	b.w	8004ae0 <os_sched_insert>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
 8004d02:	4902      	ldr	r1, [pc, #8]	; (8004d0c <os_sched_resort+0x20>)
 8004d04:	604a      	str	r2, [r1, #4]
 8004d06:	e7f8      	b.n	8004cfa <os_sched_resort+0xe>
    }
}
 8004d08:	4770      	bx	lr
 8004d0a:	bf00      	nop
 8004d0c:	20000154 	.word	0x20000154

08004d10 <os_task_init>:

int
os_task_init(struct os_task *t, const char *name, os_task_func_t func,
        void *arg, uint8_t prio, os_time_t sanity_itvl,
        os_stack_t *stack_bottom, uint16_t stack_size)
{
 8004d10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d14:	4604      	mov	r4, r0
 8004d16:	e9dd 9709 	ldrd	r9, r7, [sp, #36]	; 0x24
 8004d1a:	461d      	mov	r5, r3
 8004d1c:	4692      	mov	sl, r2
 8004d1e:	460e      	mov	r6, r1
    struct os_sanity_check *sc;
    int rc;
    struct os_task *task;

    memset(t, 0, sizeof(*t));
 8004d20:	2250      	movs	r2, #80	; 0x50
 8004d22:	2100      	movs	r1, #0
{
 8004d24:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    memset(t, 0, sizeof(*t));
 8004d28:	f000 fb2d 	bl	8005386 <memset>

    t->t_func = func;
    t->t_arg = arg;
 8004d2c:	e9c4 a505 	strd	sl, r5, [r4, #20]
    OS_ENTER_CRITICAL(sr);
 8004d30:	f000 f90a 	bl	8004f48 <os_arch_save_sr>
    rc = g_task_id;
 8004d34:	4b2c      	ldr	r3, [pc, #176]	; (8004de8 <os_task_init+0xd8>)
 8004d36:	781d      	ldrb	r5, [r3, #0]
    g_task_id++;
 8004d38:	1c6a      	adds	r2, r5, #1
 8004d3a:	701a      	strb	r2, [r3, #0]
    OS_EXIT_CRITICAL(sr);
 8004d3c:	f000 f90a 	bl	8004f54 <os_arch_restore_sr>

    t->t_taskid = os_task_next_id();
    t->t_prio = prio;
 8004d40:	f89d 3020 	ldrb.w	r3, [sp, #32]

    t->t_state = OS_TASK_READY;
    t->t_name = name;
 8004d44:	6126      	str	r6, [r4, #16]
    t->t_prio = prio;
 8004d46:	72e3      	strb	r3, [r4, #11]
    t->t_state = OS_TASK_READY;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	7323      	strb	r3, [r4, #12]
    t->t_next_wakeup = 0;
 8004d4c:	2300      	movs	r3, #0

    rc = os_sanity_check_init(&t->t_sanity_check);
 8004d4e:	f104 0620 	add.w	r6, r4, #32
    t->t_taskid = os_task_next_id();
 8004d52:	72a5      	strb	r5, [r4, #10]
    t->t_next_wakeup = 0;
 8004d54:	6363      	str	r3, [r4, #52]	; 0x34
    rc = os_sanity_check_init(&t->t_sanity_check);
 8004d56:	4630      	mov	r0, r6
 8004d58:	f7ff fe7a 	bl	8004a50 <os_sanity_check_init>
    if (rc != OS_OK) {
 8004d5c:	4605      	mov	r5, r0
 8004d5e:	2800      	cmp	r0, #0
 8004d60:	d13f      	bne.n	8004de2 <os_task_init+0xd2>
        goto err;
    }

    if (sanity_itvl != OS_WAIT_FOREVER) {
 8004d62:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 8004d66:	d121      	bne.n	8004dac <os_task_init+0x9c>
        stack_bottom[i] = OS_STACK_PATTERN;
 8004d68:	4b20      	ldr	r3, [pc, #128]	; (8004dec <os_task_init+0xdc>)
    for (i = 0; i < size; i++) {
 8004d6a:	45a8      	cmp	r8, r5
 8004d6c:	dc29      	bgt.n	8004dc2 <os_task_init+0xb2>
            goto err;
        }
    }

    _clear_stack(stack_bottom, stack_size);
    t->t_stacktop = &stack_bottom[stack_size];
 8004d6e:	eb07 0188 	add.w	r1, r7, r8, lsl #2
 8004d72:	6061      	str	r1, [r4, #4]
    t->t_stacksize = stack_size;
 8004d74:	f8a4 8008 	strh.w	r8, [r4, #8]
    t->t_stackptr = os_arch_task_stack_init(t, t->t_stacktop,
 8004d78:	4642      	mov	r2, r8
 8004d7a:	4620      	mov	r0, r4
 8004d7c:	f000 f8f2 	bl	8004f64 <os_arch_task_stack_init>
            t->t_stacksize);

    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
 8004d80:	4b1b      	ldr	r3, [pc, #108]	; (8004df0 <os_task_init+0xe0>)
    t->t_stackptr = os_arch_task_stack_init(t, t->t_stacktop,
 8004d82:	6020      	str	r0, [r4, #0]
    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
 8004d84:	681d      	ldr	r5, [r3, #0]
 8004d86:	bb05      	cbnz	r5, 8004dca <os_task_init+0xba>
        assert(t->t_prio != task->t_prio);
    }

    /* insert this task into the task list */
    STAILQ_INSERT_TAIL(&g_os_task_list, t, t_os_task_list);
 8004d88:	685a      	ldr	r2, [r3, #4]
 8004d8a:	6425      	str	r5, [r4, #64]	; 0x40

    /* insert this task into the scheduler list */
    rc = os_sched_insert(t);
 8004d8c:	4620      	mov	r0, r4
    STAILQ_INSERT_TAIL(&g_os_task_list, t, t_os_task_list);
 8004d8e:	6014      	str	r4, [r2, #0]
 8004d90:	f104 0240 	add.w	r2, r4, #64	; 0x40
 8004d94:	605a      	str	r2, [r3, #4]
    rc = os_sched_insert(t);
 8004d96:	f7ff fea3 	bl	8004ae0 <os_sched_insert>
    if (rc != OS_OK) {
 8004d9a:	4606      	mov	r6, r0
 8004d9c:	b970      	cbnz	r0, 8004dbc <os_task_init+0xac>
    os_trace_task_info(t);

    /* Allow a preemption in case the new task has a higher priority than the
     * current one.
     */
    if (os_started()) {
 8004d9e:	f7fe ff49 	bl	8003c34 <os_started>
 8004da2:	b1f0      	cbz	r0, 8004de2 <os_task_init+0xd2>
        os_sched(NULL);
 8004da4:	4628      	mov	r0, r5
 8004da6:	f7ff fee3 	bl	8004b70 <os_sched>
 8004daa:	e007      	b.n	8004dbc <os_task_init+0xac>
        rc = os_sanity_check_register(sc);
 8004dac:	4630      	mov	r0, r6
        sc->sc_checkin_itvl = sanity_itvl;
 8004dae:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
        rc = os_sanity_check_register(sc);
 8004db2:	f7ff fe55 	bl	8004a60 <os_sanity_check_register>
        if (rc != OS_OK) {
 8004db6:	4606      	mov	r6, r0
 8004db8:	2800      	cmp	r0, #0
 8004dba:	d0d5      	beq.n	8004d68 <os_task_init+0x58>
    }

    return (0);
err:
    return (rc);
}
 8004dbc:	4630      	mov	r0, r6
 8004dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        stack_bottom[i] = OS_STACK_PATTERN;
 8004dc2:	f847 3025 	str.w	r3, [r7, r5, lsl #2]
    for (i = 0; i < size; i++) {
 8004dc6:	3501      	adds	r5, #1
 8004dc8:	e7cf      	b.n	8004d6a <os_task_init+0x5a>
        assert(t->t_prio != task->t_prio);
 8004dca:	7ae1      	ldrb	r1, [r4, #11]
 8004dcc:	7aea      	ldrb	r2, [r5, #11]
 8004dce:	4291      	cmp	r1, r2
 8004dd0:	d105      	bne.n	8004dde <os_task_init+0xce>
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	4619      	mov	r1, r3
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f7fe fe6b 	bl	8003ab4 <__assert_func>
    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
 8004dde:	6c2d      	ldr	r5, [r5, #64]	; 0x40
 8004de0:	e7d1      	b.n	8004d86 <os_task_init+0x76>
    return (0);
 8004de2:	462e      	mov	r6, r5
 8004de4:	e7ea      	b.n	8004dbc <os_task_init+0xac>
 8004de6:	bf00      	nop
 8004de8:	20003b2c 	.word	0x20003b2c
 8004dec:	deadbeef 	.word	0xdeadbeef
 8004df0:	20003b24 	.word	0x20003b24

08004df4 <os_deltatime>:
} basetod;

static void
os_deltatime(os_time_t delta, const struct os_timeval *base,
    struct os_timeval *result)
{
 8004df4:	e92d 4870 	stmdb	sp!, {r4, r5, r6, fp, lr}
    struct os_timeval tvdelta;

    tvdelta.tv_sec = delta / OS_TICKS_PER_SEC;
    tvdelta.tv_usec = (delta % OS_TICKS_PER_SEC) * OS_USEC_PER_TICK;
    os_timeradd(base, &tvdelta, result);
 8004df8:	e9d1 4500 	ldrd	r4, r5, [r1]
    tvdelta.tv_sec = delta / OS_TICKS_PER_SEC;
 8004dfc:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8004e00:	fbb0 f3f6 	udiv	r3, r0, r6
    tvdelta.tv_usec = (delta % OS_TICKS_PER_SEC) * OS_USEC_PER_TICK;
 8004e04:	fb06 0013 	mls	r0, r6, r3, r0
    os_timeradd(base, &tvdelta, result);
 8004e08:	eb14 0b03 	adds.w	fp, r4, r3
 8004e0c:	688b      	ldr	r3, [r1, #8]
 8004e0e:	f145 0c00 	adc.w	ip, r5, #0
 8004e12:	fb06 3000 	mla	r0, r6, r0, r3
 8004e16:	4b09      	ldr	r3, [pc, #36]	; (8004e3c <os_deltatime+0x48>)
 8004e18:	e9c2 bc00 	strd	fp, ip, [r2]
 8004e1c:	4298      	cmp	r0, r3
 8004e1e:	6090      	str	r0, [r2, #8]
 8004e20:	dd0a      	ble.n	8004e38 <os_deltatime+0x44>
 8004e22:	f11b 0401 	adds.w	r4, fp, #1
 8004e26:	f14c 0500 	adc.w	r5, ip, #0
 8004e2a:	f5a0 2074 	sub.w	r0, r0, #999424	; 0xf4000
 8004e2e:	e9c2 4500 	strd	r4, r5, [r2]
 8004e32:	f5a0 7010 	sub.w	r0, r0, #576	; 0x240
 8004e36:	6090      	str	r0, [r2, #8]
}
 8004e38:	e8bd 8870 	ldmia.w	sp!, {r4, r5, r6, fp, pc}
 8004e3c:	000f423f 	.word	0x000f423f

08004e40 <os_time_get>:

os_time_t
os_time_get(void)
{
    return (g_os_time);
}
 8004e40:	4b01      	ldr	r3, [pc, #4]	; (8004e48 <os_time_get+0x8>)
 8004e42:	6818      	ldr	r0, [r3, #0]
 8004e44:	4770      	bx	lr
 8004e46:	bf00      	nop
 8004e48:	20003b30 	.word	0x20003b30

08004e4c <os_time_advance>:
    OS_EXIT_CRITICAL(sr);
}

void
os_time_advance(int ticks)
{
 8004e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    assert(ticks >= 0);
 8004e4e:	1e04      	subs	r4, r0, #0
 8004e50:	da05      	bge.n	8004e5e <os_time_advance+0x12>
 8004e52:	2300      	movs	r3, #0
 8004e54:	461a      	mov	r2, r3
 8004e56:	4619      	mov	r1, r3
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f7fe fe2b 	bl	8003ab4 <__assert_func>

    if (ticks > 0) {
 8004e5e:	d006      	beq.n	8004e6e <os_time_advance+0x22>
        if (!os_started()) {
 8004e60:	f7fe fee8 	bl	8003c34 <os_started>
 8004e64:	4d15      	ldr	r5, [pc, #84]	; (8004ebc <os_time_advance+0x70>)
 8004e66:	b918      	cbnz	r0, 8004e70 <os_time_advance+0x24>
            g_os_time += ticks;
 8004e68:	6828      	ldr	r0, [r5, #0]
 8004e6a:	4420      	add	r0, r4
 8004e6c:	6028      	str	r0, [r5, #0]
            os_callout_tick();
            os_sched_os_timer_exp();
            os_sched(NULL);
        }
    }
}
 8004e6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    OS_ENTER_CRITICAL(sr);
 8004e70:	f000 f86a 	bl	8004f48 <os_arch_save_sr>
    prev_os_time = g_os_time;
 8004e74:	682b      	ldr	r3, [r5, #0]
    OS_ENTER_CRITICAL(sr);
 8004e76:	4607      	mov	r7, r0
    g_os_time += ticks;
 8004e78:	18e0      	adds	r0, r4, r3
    if ((prev_os_time ^ g_os_time) >> 31) {
 8004e7a:	ea93 0f00 	teq	r3, r0
    g_os_time += ticks;
 8004e7e:	6028      	str	r0, [r5, #0]
    if ((prev_os_time ^ g_os_time) >> 31) {
 8004e80:	d510      	bpl.n	8004ea4 <os_time_advance+0x58>
        delta = g_os_time - basetod.ostime;
 8004e82:	4e0f      	ldr	r6, [pc, #60]	; (8004ec0 <os_time_advance+0x74>)
 8004e84:	4632      	mov	r2, r6
 8004e86:	f852 4b08 	ldr.w	r4, [r2], #8
 8004e8a:	1b04      	subs	r4, r0, r4
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
 8004e8c:	4611      	mov	r1, r2
 8004e8e:	4620      	mov	r0, r4
 8004e90:	f7ff ffb0 	bl	8004df4 <os_deltatime>
        os_deltatime(delta, &basetod.utctime, &basetod.utctime);
 8004e94:	f106 0218 	add.w	r2, r6, #24
 8004e98:	4611      	mov	r1, r2
 8004e9a:	4620      	mov	r0, r4
 8004e9c:	f7ff ffaa 	bl	8004df4 <os_deltatime>
        basetod.ostime = g_os_time;
 8004ea0:	682b      	ldr	r3, [r5, #0]
 8004ea2:	6033      	str	r3, [r6, #0]
    OS_EXIT_CRITICAL(sr);
 8004ea4:	4638      	mov	r0, r7
 8004ea6:	f000 f855 	bl	8004f54 <os_arch_restore_sr>
            os_callout_tick();
 8004eaa:	f7fe ffc9 	bl	8003e40 <os_callout_tick>
            os_sched_os_timer_exp();
 8004eae:	f7ff fedf 	bl	8004c70 <os_sched_os_timer_exp>
}
 8004eb2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            os_sched(NULL);
 8004eb6:	2000      	movs	r0, #0
 8004eb8:	f7ff be5a 	b.w	8004b70 <os_sched>
 8004ebc:	20003b30 	.word	0x20003b30
 8004ec0:	20002798 	.word	0x20002798

08004ec4 <os_time_delay>:

void
os_time_delay(os_time_t osticks)
{
 8004ec4:	b538      	push	{r3, r4, r5, lr}
    os_sr_t sr;

    if (osticks > 0) {
 8004ec6:	4604      	mov	r4, r0
 8004ec8:	b178      	cbz	r0, 8004eea <os_time_delay+0x26>
        OS_ENTER_CRITICAL(sr);
 8004eca:	f000 f83d 	bl	8004f48 <os_arch_save_sr>
 8004ece:	4605      	mov	r5, r0
        os_sched_sleep(os_sched_get_current_task(), (os_time_t)osticks);
 8004ed0:	f7ff fe42 	bl	8004b58 <os_sched_get_current_task>
 8004ed4:	4621      	mov	r1, r4
 8004ed6:	f7ff fe5d 	bl	8004b94 <os_sched_sleep>
        OS_EXIT_CRITICAL(sr);
 8004eda:	4628      	mov	r0, r5
 8004edc:	f000 f83a 	bl	8004f54 <os_arch_restore_sr>
        os_sched(NULL);
    }
}
 8004ee0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        os_sched(NULL);
 8004ee4:	2000      	movs	r0, #0
 8004ee6:	f7ff be43 	b.w	8004b70 <os_sched>
}
 8004eea:	bd38      	pop	{r3, r4, r5, pc}

08004eec <os_gettimeofday>:
    return (0);
}

int
os_gettimeofday(struct os_timeval *tv, struct os_timezone *tz)
{
 8004eec:	b570      	push	{r4, r5, r6, lr}
 8004eee:	4605      	mov	r5, r0
 8004ef0:	460c      	mov	r4, r1
    os_sr_t sr;
    os_time_t delta;

    OS_ENTER_CRITICAL(sr);
 8004ef2:	f000 f829 	bl	8004f48 <os_arch_save_sr>
 8004ef6:	4606      	mov	r6, r0
    if (tv != NULL) {
 8004ef8:	b145      	cbz	r5, 8004f0c <os_gettimeofday+0x20>
    return (g_os_time);
 8004efa:	4b09      	ldr	r3, [pc, #36]	; (8004f20 <os_gettimeofday+0x34>)
        delta = os_time_get() - basetod.ostime;
 8004efc:	4909      	ldr	r1, [pc, #36]	; (8004f24 <os_gettimeofday+0x38>)
 8004efe:	6818      	ldr	r0, [r3, #0]
 8004f00:	f851 3b18 	ldr.w	r3, [r1], #24
        os_deltatime(delta, &basetod.utctime, tv);
 8004f04:	462a      	mov	r2, r5
 8004f06:	1ac0      	subs	r0, r0, r3
 8004f08:	f7ff ff74 	bl	8004df4 <os_deltatime>
    }

    if (tz != NULL) {
 8004f0c:	b114      	cbz	r4, 8004f14 <os_gettimeofday+0x28>
        *tz = basetod.timezone;
 8004f0e:	4b05      	ldr	r3, [pc, #20]	; (8004f24 <os_gettimeofday+0x38>)
 8004f10:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004f12:	6020      	str	r0, [r4, #0]
    }
    OS_EXIT_CRITICAL(sr);
 8004f14:	4630      	mov	r0, r6
 8004f16:	f000 f81d 	bl	8004f54 <os_arch_restore_sr>

    return (0);
}
 8004f1a:	2000      	movs	r0, #0
 8004f1c:	bd70      	pop	{r4, r5, r6, pc}
 8004f1e:	bf00      	nop
 8004f20:	20003b30 	.word	0x20003b30
 8004f24:	20002798 	.word	0x20002798

08004f28 <os_time_ms_to_ticks>:
os_time_ms_to_ticks(uint32_t ms, os_time_t *out_ticks)
{
    uint64_t ticks;

#if OS_TICKS_PER_SEC == 1000
    *out_ticks = ms;
 8004f28:	6008      	str	r0, [r1, #0]
        return OS_EINVAL;
    }

    *out_ticks = ticks;
    return 0;
}
 8004f2a:	2000      	movs	r0, #0
 8004f2c:	4770      	bx	lr

08004f2e <timer_handler>:
uint32_t os_flags = OS_RUN_PRIV;

void
timer_handler(void)
{
    os_time_advance(1);
 8004f2e:	2001      	movs	r0, #1
 8004f30:	f7ff bf8c 	b.w	8004e4c <os_time_advance>

08004f34 <os_arch_ctx_sw>:
}

void
os_arch_ctx_sw(struct os_task *t)
{
 8004f34:	b508      	push	{r3, lr}
    os_sched_ctx_sw_hook(t);
 8004f36:	f7ff fdf9 	bl	8004b2c <os_sched_ctx_sw_hook>

    /* Set PendSV interrupt pending bit to force context switch */
    SCB->ICSR = SCB_ICSR_PENDSVSET_Msk;
 8004f3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f3e:	4b01      	ldr	r3, [pc, #4]	; (8004f44 <os_arch_ctx_sw+0x10>)
 8004f40:	605a      	str	r2, [r3, #4]
}
 8004f42:	bd08      	pop	{r3, pc}
 8004f44:	e000ed00 	.word	0xe000ed00

08004f48 <os_arch_save_sr>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f48:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8004f4c:	b672      	cpsid	i
    uint32_t isr_ctx;

    isr_ctx = __get_PRIMASK();
    __disable_irq();
    return (isr_ctx & 1);
}
 8004f4e:	f000 0001 	and.w	r0, r0, #1
 8004f52:	4770      	bx	lr

08004f54 <os_arch_restore_sr>:

void
os_arch_restore_sr(os_sr_t isr_ctx)
{
    if (!isr_ctx) {
 8004f54:	b900      	cbnz	r0, 8004f58 <os_arch_restore_sr+0x4>
  __ASM volatile ("cpsie i" : : : "memory");
 8004f56:	b662      	cpsie	i
        __enable_irq();
    }
}
 8004f58:	4770      	bx	lr

08004f5a <os_arch_in_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f5a:	f3ef 8010 	mrs	r0, PRIMASK
{
    uint32_t isr_ctx;

    isr_ctx = __get_PRIMASK();
    return (isr_ctx & 1);
}
 8004f5e:	f000 0001 	and.w	r0, r0, #1
 8004f62:	4770      	bx	lr

08004f64 <os_arch_task_stack_init>:
    /* Get stack frame pointer */
    s = (os_stack_t *) ((uint8_t *) stack_top - sizeof(*sf));

    /* Zero out R1-R3, R12, LR */
    for (i = 9; i < 14; ++i) {
        s[i] = 0;
 8004f64:	2300      	movs	r3, #0
{
 8004f66:	b570      	push	{r4, r5, r6, lr}
    s = (os_stack_t *) ((uint8_t *) stack_top - sizeof(*sf));
 8004f68:	f1a1 0540 	sub.w	r5, r1, #64	; 0x40
{
 8004f6c:	4606      	mov	r6, r0
        s[i] = 0;
 8004f6e:	e941 3307 	strd	r3, r3, [r1, #-28]
 8004f72:	e941 3305 	strd	r3, r3, [r1, #-20]
 8004f76:	f841 3c0c 	str.w	r3, [r1, #-12]
    }

    /* Set registers R4 - R11 on stack. */
    os_arch_init_task_stack(s);
 8004f7a:	4628      	mov	r0, r5
{
 8004f7c:	460c      	mov	r4, r1
    os_arch_init_task_stack(s);
 8004f7e:	f000 f8af 	bl	80050e0 <os_arch_init_task_stack>

    /* Set remaining portions of stack frame */
    sf = (struct stack_frame *) s;
    sf->xpsr = INITIAL_xPSR;
 8004f82:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004f86:	f844 3c04 	str.w	r3, [r4, #-4]
    sf->pc = (uint32_t)t->t_func;
 8004f8a:	6973      	ldr	r3, [r6, #20]
    sf->r0 = (uint32_t)t->t_arg;

    return (s);
}
 8004f8c:	4628      	mov	r0, r5
    sf->pc = (uint32_t)t->t_func;
 8004f8e:	f844 3c08 	str.w	r3, [r4, #-8]
    sf->r0 = (uint32_t)t->t_arg;
 8004f92:	69b3      	ldr	r3, [r6, #24]
 8004f94:	f844 3c20 	str.w	r3, [r4, #-32]
}
 8004f98:	bd70      	pop	{r4, r5, r6, pc}
	...

08004f9c <os_arch_init>:
os_arch_init(void)
{
    /*
     * Trap on divide-by-zero.
     */
    SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
 8004f9c:	4a03      	ldr	r2, [pc, #12]	; (8004fac <os_arch_init+0x10>)
 8004f9e:	6953      	ldr	r3, [r2, #20]
 8004fa0:	f043 0310 	orr.w	r3, r3, #16
 8004fa4:	6153      	str	r3, [r2, #20]
    os_init_idle_task();
 8004fa6:	f7fe be4b 	b.w	8003c40 <os_init_idle_task>
 8004faa:	bf00      	nop
 8004fac:	e000ed00 	.word	0xe000ed00

08004fb0 <os_arch_os_init>:
    SVC_Call(os_arch_init);
}

os_error_t
os_arch_os_init(void)
{
 8004fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004fb2:	f3ef 8405 	mrs	r4, IPSR
    os_error_t err;
    int i;

    /* Cannot be called within an ISR */
    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
 8004fb6:	2c00      	cmp	r4, #0
 8004fb8:	d134      	bne.n	8005024 <os_arch_os_init+0x74>
        err = OS_OK;

        /* Drop priority for all interrupts */
        for (i = 0; i < sizeof(NVIC->IP); i++) {
            NVIC->IP[i] = -1;
 8004fba:	26ff      	movs	r6, #255	; 0xff
 8004fbc:	4f1a      	ldr	r7, [pc, #104]	; (8005028 <os_arch_os_init+0x78>)
 8004fbe:	193d      	adds	r5, r7, r4
        for (i = 0; i < sizeof(NVIC->IP); i++) {
 8004fc0:	3401      	adds	r4, #1
 8004fc2:	2cf0      	cmp	r4, #240	; 0xf0
            NVIC->IP[i] = -1;
 8004fc4:	f885 6300 	strb.w	r6, [r5, #768]	; 0x300
        for (i = 0; i < sizeof(NVIC->IP); i++) {
 8004fc8:	d1f9      	bne.n	8004fbe <os_arch_os_init+0xe>
  \param [in]   IRQn      Interrupt number
  \param [in]   vector    Address of interrupt handler function
 */
__STATIC_INLINE void __NVIC_SetVector(IRQn_Type IRQn, uint32_t vector)
{
  uint32_t vectors = (uint32_t )SCB->VTOR;
 8004fca:	4c18      	ldr	r4, [pc, #96]	; (800502c <os_arch_os_init+0x7c>)
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 8004fcc:	4e18      	ldr	r6, [pc, #96]	; (8005030 <os_arch_os_init+0x80>)
  uint32_t vectors = (uint32_t )SCB->VTOR;
 8004fce:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 8004fd0:	62ee      	str	r6, [r5, #44]	; 0x2c
  uint32_t vectors = (uint32_t )SCB->VTOR;
 8004fd2:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 8004fd4:	4e17      	ldr	r6, [pc, #92]	; (8005034 <os_arch_os_init+0x84>)
 8004fd6:	63ae      	str	r6, [r5, #56]	; 0x38
  uint32_t vectors = (uint32_t )SCB->VTOR;
 8004fd8:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 8004fda:	4e17      	ldr	r6, [pc, #92]	; (8005038 <os_arch_os_init+0x88>)
 8004fdc:	63ee      	str	r6, [r5, #60]	; 0x3c
  uint32_t vectors = (uint32_t )SCB->VTOR;
 8004fde:	68a6      	ldr	r6, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 8004fe0:	4d16      	ldr	r5, [pc, #88]	; (800503c <os_arch_os_init+0x8c>)
 8004fe2:	60b5      	str	r5, [r6, #8]
  uint32_t vectors = (uint32_t )SCB->VTOR;
 8004fe4:	68a6      	ldr	r6, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 8004fe6:	60f5      	str	r5, [r6, #12]
  uint32_t vectors = (uint32_t )SCB->VTOR;
 8004fe8:	68a6      	ldr	r6, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 8004fea:	6135      	str	r5, [r6, #16]
  uint32_t vectors = (uint32_t )SCB->VTOR;
 8004fec:	68a6      	ldr	r6, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 8004fee:	6175      	str	r5, [r6, #20]
  uint32_t vectors = (uint32_t )SCB->VTOR;
 8004ff0:	68a6      	ldr	r6, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 8004ff2:	61b5      	str	r5, [r6, #24]
 8004ff4:	2640      	movs	r6, #64	; 0x40
  uint32_t vectors = (uint32_t )SCB->VTOR;
 8004ff6:	68a7      	ldr	r7, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 8004ff8:	51bd      	str	r5, [r7, r6]
 8004ffa:	3604      	adds	r6, #4
        NVIC_SetVector(NonMaskableInt_IRQn, (uint32_t)os_default_irq_asm);
        NVIC_SetVector(-13, (uint32_t)os_default_irq_asm);
        NVIC_SetVector(MemoryManagement_IRQn, (uint32_t)os_default_irq_asm);
        NVIC_SetVector(BusFault_IRQn, (uint32_t)os_default_irq_asm);
        NVIC_SetVector(UsageFault_IRQn, (uint32_t)os_default_irq_asm);
        for (i = 0; i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
 8004ffc:	2eec      	cmp	r6, #236	; 0xec
 8004ffe:	d1fa      	bne.n	8004ff6 <os_arch_os_init+0x46>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005000:	25f0      	movs	r5, #240	; 0xf0
 8005002:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
 8005006:	2510      	movs	r5, #16
 8005008:	77e5      	strb	r5, [r4, #31]
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 800500a:	f3ef 8414 	mrs	r4, CONTROL

        /* Set the SVC interrupt to priority 0 (highest configurable) */
        NVIC_SetPriority(SVC_IRQ_NUMBER, SVC_PRIO);

        /* Check if privileged or not */
        if ((__get_CONTROL() & 1) == 0) {
 800500e:	f014 0401 	ands.w	r4, r4, #1
 8005012:	d103      	bne.n	800501c <os_arch_os_init+0x6c>
            os_arch_init();
 8005014:	f7ff ffc2 	bl	8004f9c <os_arch_init>
        err = OS_OK;
 8005018:	2000      	movs	r0, #0
            svc_os_arch_init();
        }
    }

    return err;
}
 800501a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SVC_Call(os_arch_init);
 800501c:	f8df c020 	ldr.w	ip, [pc, #32]	; 8005040 <os_arch_os_init+0x90>
 8005020:	df00      	svc	0
 8005022:	e7f9      	b.n	8005018 <os_arch_os_init+0x68>
    err = OS_ERR_IN_ISR;
 8005024:	2007      	movs	r0, #7
 8005026:	e7f8      	b.n	800501a <os_arch_os_init+0x6a>
 8005028:	e000e100 	.word	0xe000e100
 800502c:	e000ed00 	.word	0xe000ed00
 8005030:	080050e7 	.word	0x080050e7
 8005034:	0800512d 	.word	0x0800512d
 8005038:	08005157 	.word	0x08005157
 800503c:	08005163 	.word	0x08005163
 8005040:	08004f9d 	.word	0x08004f9d

08005044 <os_arch_start>:

uint32_t
os_arch_start(void)
{
 8005044:	b510      	push	{r4, lr}
    struct os_task *t;

    /* Get the highest priority ready to run to set the current task */
    t = os_sched_next_task();
 8005046:	f7ff fe4b 	bl	8004ce0 <os_sched_next_task>
 800504a:	4604      	mov	r4, r0
    os_sched_set_current_task(t);
 800504c:	f7ff fd8a 	bl	8004b64 <os_sched_set_current_task>

    /* Adjust PSP so it looks like this task just took an exception */
    __set_PSP((uint32_t)t->t_stackptr + offsetof(struct stack_frame, r0));
 8005050:	6823      	ldr	r3, [r4, #0]
 8005052:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8005054:	f383 8809 	msr	PSP, r3

    /* Intitialize and start system clock timer */
    os_tick_init(OS_TICKS_PER_SEC, OS_TICK_PRIO);
 8005058:	210e      	movs	r1, #14
 800505a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800505e:	f002 f903 	bl	8007268 <os_tick_init>

    /* Mark the OS as started, right before we run our first task */
    g_os_started = 1;
 8005062:	2201      	movs	r2, #1
 8005064:	4b03      	ldr	r3, [pc, #12]	; (8005074 <os_arch_start+0x30>)

    /* Perform context switch */
    os_arch_ctx_sw(t);
 8005066:	4620      	mov	r0, r4
    g_os_started = 1;
 8005068:	601a      	str	r2, [r3, #0]
    os_arch_ctx_sw(t);
 800506a:	f7ff ff63 	bl	8004f34 <os_arch_ctx_sw>

    return (uint32_t)(t->t_arg);
}
 800506e:	69a0      	ldr	r0, [r4, #24]
 8005070:	bd10      	pop	{r4, pc}
 8005072:	bf00      	nop
 8005074:	20003afc 	.word	0x20003afc

08005078 <os_arch_os_start>:
     * privileged or un-privileged mode.
     *
     * We switch to using "empty" part of idle task's stack until
     * the svc_os_arch_start() executes SVC, and we will never return.
     */
    os_set_env(g_idle_task.t_stackptr - 1);
 8005078:	4811      	ldr	r0, [pc, #68]	; (80050c0 <os_arch_os_start+0x48>)
{
 800507a:	b510      	push	{r4, lr}
    os_set_env(g_idle_task.t_stackptr - 1);
 800507c:	6800      	ldr	r0, [r0, #0]
 800507e:	3804      	subs	r0, #4
 8005080:	f000 f824 	bl	80050cc <os_set_env>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005084:	f3ef 8405 	mrs	r4, IPSR

    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
 8005088:	b9bc      	cbnz	r4, 80050ba <os_arch_os_start+0x42>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 800508a:	f3ef 8414 	mrs	r4, CONTROL
         * The following switch statement is really just a sanity check to
         * insure that the os initialization routine was called prior to the
         * os start routine.
         */
        err = OS_OK;
        switch (__get_CONTROL() & 0x03) {
 800508e:	f004 0403 	and.w	r4, r4, #3
 8005092:	2c02      	cmp	r4, #2
 8005094:	d003      	beq.n	800509e <os_arch_os_start+0x26>
 8005096:	2c03      	cmp	r4, #3
 8005098:	d00a      	beq.n	80050b0 <os_arch_os_start+0x38>
            /*
             * We are running in Privileged Thread mode w/SP = PSP but we
             * are supposed to be un-privileged.
             */
            if ((os_flags & 1) == OS_RUN_UNPRIV) {
                err = OS_ERR_PRIV;
 800509a:	2008      	movs	r0, #8
 800509c:	e007      	b.n	80050ae <os_arch_os_start+0x36>
            if ((os_flags & 1) == OS_RUN_UNPRIV) {
 800509e:	4c09      	ldr	r4, [pc, #36]	; (80050c4 <os_arch_os_start+0x4c>)
 80050a0:	6824      	ldr	r4, [r4, #0]
 80050a2:	07e4      	lsls	r4, r4, #31
 80050a4:	d4f9      	bmi.n	800509a <os_arch_os_start+0x22>
    SVC_Call(os_arch_start);
 80050a6:	f8df c020 	ldr.w	ip, [pc, #32]	; 80050c8 <os_arch_os_start+0x50>
 80050aa:	df00      	svc	0
 80050ac:	2000      	movs	r0, #0
            svc_os_arch_start();
        }
    }

    return err;
}
 80050ae:	bd10      	pop	{r4, pc}
            if  ((os_flags & 1) == OS_RUN_PRIV) {
 80050b0:	4c04      	ldr	r4, [pc, #16]	; (80050c4 <os_arch_os_start+0x4c>)
 80050b2:	6824      	ldr	r4, [r4, #0]
 80050b4:	07e4      	lsls	r4, r4, #31
 80050b6:	d5f0      	bpl.n	800509a <os_arch_os_start+0x22>
 80050b8:	e7f5      	b.n	80050a6 <os_arch_os_start+0x2e>
    err = OS_ERR_IN_ISR;
 80050ba:	2007      	movs	r0, #7
 80050bc:	e7f7      	b.n	80050ae <os_arch_os_start+0x36>
 80050be:	bf00      	nop
 80050c0:	20003aa8 	.word	0x20003aa8
 80050c4:	200027c8 	.word	0x200027c8
 80050c8:	08005045 	.word	0x08005045

080050cc <os_set_env>:
        .global os_set_env
os_set_env:
        .fnstart
        .cantunwind

        MSR     PSP,R0
 80050cc:	f380 8809 	msr	PSP, r0
        LDR     R0,=os_flags
 80050d0:	482b      	ldr	r0, [pc, #172]	; (8005180 <os_default_irq_asm+0x1e>)
        LDRB    R0,[R0]
 80050d2:	7800      	ldrb	r0, [r0, #0]
        ADDS    R0, R0, #2
 80050d4:	3002      	adds	r0, #2
        MSR     CONTROL,R0
 80050d6:	f380 8814 	msr	CONTROL, r0
        ISB
 80050da:	f3bf 8f6f 	isb	sy
        BX      LR
 80050de:	4770      	bx	lr

080050e0 <os_arch_init_task_stack>:
        .type   os_arch_init_task_stack, %function
        .global os_arch_init_task_stack
os_arch_init_task_stack:
        .fnstart

        STMIA   R0,{R4-R11}
 80050e0:	e880 0ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp}
        BX      LR
 80050e4:	4770      	bx	lr

080050e6 <SVC_Handler>:
        .global SVC_Handler
SVC_Handler:
        .fnstart
        .cantunwind

        MRS     R0,PSP                  /* Read PSP */
 80050e6:	f3ef 8009 	mrs	r0, PSP
        LDR     R1,[R0,#24]             /* Read Saved PC from Stack */
 80050ea:	6981      	ldr	r1, [r0, #24]
        LDRB    R1,[R1,#-2]             /* Load SVC Number */
 80050ec:	f811 1c02 	ldrb.w	r1, [r1, #-2]
        CBNZ    R1,SVC_User
 80050f0:	b951      	cbnz	r1, 8005108 <SVC_User>

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
 80050f2:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
 80050f6:	b510      	push	{r4, lr}
        BLX     R12                     /* Call SVC Function */
 80050f8:	47e0      	blx	ip
        POP     {R4,LR}                 /* Restore EXC_RETURN */
 80050fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

        MRS     R12,PSP                 /* Read PSP */
 80050fe:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R2}             /* Store return values */
 8005102:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
        BX      LR                      /* Return from interrupt */
 8005106:	4770      	bx	lr

08005108 <SVC_User>:

        /*------------------- User SVC ------------------------------*/
SVC_User:
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
 8005108:	b510      	push	{r4, lr}
        LDR     R2,=SVC_Count
 800510a:	4a1e      	ldr	r2, [pc, #120]	; (8005184 <os_default_irq_asm+0x22>)
        LDR     R2,[R2]
 800510c:	6812      	ldr	r2, [r2, #0]
        CMP     R1,R2
 800510e:	4291      	cmp	r1, r2
        BHI     SVC_Done                /* Overflow */
 8005110:	d809      	bhi.n	8005126 <SVC_Done>

        LDR     R4,=SVC_Table-4
 8005112:	4c1d      	ldr	r4, [pc, #116]	; (8005188 <os_default_irq_asm+0x26>)
        LDR     R4,[R4,R1,LSL #2]       /* Load SVC Function Address */
 8005114:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
 8005118:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        BLX     R4                      /* Call SVC Function */
 800511c:	47a0      	blx	r4

        MRS     R12,PSP
 800511e:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R3}             /* Function return values */
 8005122:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

08005126 <SVC_Done>:
SVC_Done:
        POP     {R4,LR}                 /* Restore EXC_RETURN */
 8005126:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR                      /* Return from interrupt */
 800512a:	4770      	bx	lr

0800512c <PendSV_Handler>:
        .global PendSV_Handler
PendSV_Handler:
        .fnstart
        .cantunwind

        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
 800512c:	4b17      	ldr	r3, [pc, #92]	; (800518c <os_default_irq_asm+0x2a>)
        LDR     R2,[R3]                 /* Store in R2 */
 800512e:	681a      	ldr	r2, [r3, #0]
        LDR     R3,=g_current_task      /* Get current task */
 8005130:	4b17      	ldr	r3, [pc, #92]	; (8005190 <os_default_irq_asm+0x2e>)
        LDR     R1,[R3]                 /* Current task in R1 */
 8005132:	6819      	ldr	r1, [r3, #0]
        CMP     R1,R2
 8005134:	4291      	cmp	r1, r2
        IT      EQ
 8005136:	bf08      	it	eq
        BXEQ    LR                      /* RETI, no task switch */
 8005138:	4770      	bxeq	lr

        MRS     R12,PSP                 /* Read PSP */
 800513a:	f3ef 8c09 	mrs	ip, PSP
        STMDB   R12!,{R4-R11}           /* Save Old context */
 800513e:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
        STR     R12,[R1,#0]             /* Update stack pointer in current task */
 8005142:	f8c1 c000 	str.w	ip, [r1]
        STR     R2,[R3]                 /* g_current_task = highest ready */
 8005146:	601a      	str	r2, [r3, #0]

        LDR     R12,[R2,#0]             /* get stack pointer of task we will start */
 8005148:	f8d2 c000 	ldr.w	ip, [r2]
        LDMIA   R12!,{R4-R11}           /* Restore New Context */
 800514c:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
        MSR     PSP,R12                 /* Write PSP */
 8005150:	f38c 8809 	msr	PSP, ip
        MOV     R0, R2
        BL      os_trace_task_start_exec
        POP     {R4,LR}
#endif

        BX      LR                      /* Return to Thread Mode */
 8005154:	4770      	bx	lr

08005156 <SysTick_Handler>:
        .global SysTick_Handler
SysTick_Handler:
        .fnstart
        .cantunwind

        PUSH    {R4,LR}                 /* Save EXC_RETURN */
 8005156:	b510      	push	{r4, lr}
        BL      timer_handler
 8005158:	f7ff fee9 	bl	8004f2e <timer_handler>
        POP     {R4,LR}                 /* Restore EXC_RETURN */
 800515c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR
 8005160:	4770      	bx	lr

08005162 <os_default_irq_asm>:

        /*
         * LR = 0xfffffff9 if we were using MSP as SP
         * LR = 0xfffffffd if we were using PSP as SP
         */
        TST     LR,#4
 8005162:	f01e 0f04 	tst.w	lr, #4
        ITE     EQ
 8005166:	bf0c      	ite	eq
        MRSEQ   R3,MSP
 8005168:	f3ef 8308 	mrseq	r3, MSP
        MRSNE   R3,PSP
 800516c:	f3ef 8309 	mrsne	r3, PSP
        PUSH    {R3-R11,LR}
 8005170:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        MOV     R0, SP
 8005174:	4668      	mov	r0, sp
        BL      os_default_irq
 8005176:	f7fe fcc3 	bl	8003b00 <os_default_irq>
        POP     {R3-R11,LR}                 /* Restore EXC_RETURN */
 800517a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        BX      LR
 800517e:	4770      	bx	lr
        LDR     R0,=os_flags
 8005180:	200027c8 	.word	0x200027c8
        LDR     R2,=SVC_Count
 8005184:	00000000 	.word	0x00000000
        LDR     R4,=SVC_Table-4
 8005188:	fffffffc 	.word	0xfffffffc
        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
 800518c:	20000154 	.word	0x20000154
        LDR     R3,=g_current_task      /* Get current task */
 8005190:	20003b1c 	.word	0x20003b1c

08005194 <malloc_lock_nop>:
    },
    &__malloc_head,
    &__malloc_head
};

static bool malloc_lock_nop() {return true;}
 8005194:	2001      	movs	r0, #1
 8005196:	4770      	bx	lr

08005198 <malloc_unlock_nop>:
static void malloc_unlock_nop() {}
 8005198:	4770      	bx	lr
	...

0800519c <__free_block>:

    return (void *)(&fp->a + 1);
}

static struct free_arena_header *__free_block(struct free_arena_header *ah)
{
 800519c:	b510      	push	{r4, lr}
    struct free_arena_header *pah, *nah;
    assert(ah); ////
 800519e:	4603      	mov	r3, r0
 80051a0:	b928      	cbnz	r0, 80051ae <__free_block+0x12>
 80051a2:	2300      	movs	r3, #0
 80051a4:	461a      	mov	r2, r3
 80051a6:	4619      	mov	r1, r3
 80051a8:	4618      	mov	r0, r3
 80051aa:	f7fe fc83 	bl	8003ab4 <__assert_func>

    pah = ah->a.prev;
    nah = ah->a.next;
 80051ae:	e9d0 2002 	ldrd	r2, r0, [r0, #8]
    if (pah->a.type == ARENA_TYPE_FREE &&
 80051b2:	6801      	ldr	r1, [r0, #0]
 80051b4:	2901      	cmp	r1, #1
 80051b6:	d11b      	bne.n	80051f0 <__free_block+0x54>
        (char *)pah + pah->a.size == (char *)ah) {
 80051b8:	6841      	ldr	r1, [r0, #4]
 80051ba:	1844      	adds	r4, r0, r1
    if (pah->a.type == ARENA_TYPE_FREE &&
 80051bc:	42a3      	cmp	r3, r4
 80051be:	d117      	bne.n	80051f0 <__free_block+0x54>
        /* Coalesce into the previous block */
        pah->a.size += ah->a.size;
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	440b      	add	r3, r1
        pah->a.next = nah;
 80051c4:	e9c0 3201 	strd	r3, r2, [r0, #4]
        nah->a.prev = pah;
 80051c8:	60d0      	str	r0, [r2, #12]
        ah->next_free->prev_free = ah;
    }

    /* In either of the previous cases, we might be able to merge
       with the subsequent block... */
    if (nah->a.type == ARENA_TYPE_FREE &&
 80051ca:	6813      	ldr	r3, [r2, #0]
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d10e      	bne.n	80051ee <__free_block+0x52>
        (char *)ah + ah->a.size == (char *)nah) {
 80051d0:	6841      	ldr	r1, [r0, #4]
 80051d2:	1843      	adds	r3, r0, r1
    if (nah->a.type == ARENA_TYPE_FREE &&
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d10a      	bne.n	80051ee <__free_block+0x52>
        ah->a.size += nah->a.size;
 80051d8:	6853      	ldr	r3, [r2, #4]
 80051da:	440b      	add	r3, r1
 80051dc:	6043      	str	r3, [r0, #4]
    an = ah->next_free;
 80051de:	e9d2 3104 	ldrd	r3, r1, [r2, #16]
    ap->next_free = an;
 80051e2:	610b      	str	r3, [r1, #16]
    an->prev_free = ap;
 80051e4:	6159      	str	r1, [r3, #20]
    an = ah->a.next;
 80051e6:	e9d2 3102 	ldrd	r3, r1, [r2, #8]
    ap->a.next = an;
 80051ea:	608b      	str	r3, [r1, #8]
    an->a.prev = ap;
 80051ec:	60d9      	str	r1, [r3, #12]
        remove_from_chains(nah);
    }

    /* Return the block that contains the called block */
    return ah;
}
 80051ee:	bd10      	pop	{r4, pc}
        ah->a.type = ARENA_TYPE_FREE;
 80051f0:	2101      	movs	r1, #1
 80051f2:	6019      	str	r1, [r3, #0]
        ah->next_free = __malloc_head.next_free;
 80051f4:	4905      	ldr	r1, [pc, #20]	; (800520c <__free_block+0x70>)
 80051f6:	6908      	ldr	r0, [r1, #16]
        ah->prev_free = &__malloc_head;
 80051f8:	e9c3 0104 	strd	r0, r1, [r3, #16]
        __malloc_head.next_free = ah;
 80051fc:	610b      	str	r3, [r1, #16]
        assert(ah->next_free); ////
 80051fe:	6919      	ldr	r1, [r3, #16]
 8005200:	2900      	cmp	r1, #0
 8005202:	d0ce      	beq.n	80051a2 <__free_block+0x6>
        ah->next_free->prev_free = ah;
 8005204:	614b      	str	r3, [r1, #20]
 8005206:	4618      	mov	r0, r3
 8005208:	e7df      	b.n	80051ca <__free_block+0x2e>
 800520a:	bf00      	nop
 800520c:	20000164 	.word	0x20000164

08005210 <add_malloc_block>:
void add_malloc_block(void *buf, size_t size)
{
    struct free_arena_header *fp = buf;
    struct free_arena_header *pah;

    if (size < sizeof(struct free_arena_header))
 8005210:	2917      	cmp	r1, #23
{
 8005212:	b510      	push	{r4, lr}
 8005214:	4604      	mov	r4, r0
    if (size < sizeof(struct free_arena_header))
 8005216:	d91b      	bls.n	8005250 <add_malloc_block+0x40>
        return; // Too small.

    /* Insert the block into the management chains.  We need to set
       up the size and the main block list pointer, the rest of
       the work is logically identical to free(). */
    fp->a.type = ARENA_TYPE_FREE;
 8005218:	2301      	movs	r3, #1
    fp->a.size = size;
 800521a:	e9c0 3100 	strd	r3, r1, [r0]

    if (!malloc_lock())
 800521e:	4b0d      	ldr	r3, [pc, #52]	; (8005254 <add_malloc_block+0x44>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4798      	blx	r3
 8005224:	b1a0      	cbz	r0, 8005250 <add_malloc_block+0x40>

    /* We need to insert this into the main block list in the proper
       place -- this list is required to be sorted.  Since we most likely
       get memory assignments in ascending order, search backwards for
       the proper place. */
    for (pah = __malloc_head.a.prev; pah->a.type != ARENA_TYPE_HEAD;
 8005226:	4b0c      	ldr	r3, [pc, #48]	; (8005258 <add_malloc_block+0x48>)
         pah = pah->a.prev) {
 8005228:	68db      	ldr	r3, [r3, #12]
    for (pah = __malloc_head.a.prev; pah->a.type != ARENA_TYPE_HEAD;
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	2a02      	cmp	r2, #2
 800522e:	d001      	beq.n	8005234 <add_malloc_block+0x24>
        if (pah < fp)
 8005230:	429c      	cmp	r4, r3
 8005232:	d9f9      	bls.n	8005228 <add_malloc_block+0x18>
            break;
    }

    /* Now pah points to the node that should be the predecessor of
       the new node */
    fp->a.next = pah->a.next;
 8005234:	689a      	ldr	r2, [r3, #8]
    fp->a.prev = pah;
    pah->a.next = fp;
    fp->a.next->a.prev = fp;

    /* Insert into the free chain and coalesce with adjacent blocks */
    fp = __free_block(fp);
 8005236:	4620      	mov	r0, r4
    fp->a.prev = pah;
 8005238:	e9c4 2302 	strd	r2, r3, [r4, #8]
    pah->a.next = fp;
 800523c:	609c      	str	r4, [r3, #8]
    fp->a.next->a.prev = fp;
 800523e:	68a3      	ldr	r3, [r4, #8]
 8005240:	60dc      	str	r4, [r3, #12]
    fp = __free_block(fp);
 8005242:	f7ff ffab 	bl	800519c <__free_block>

    malloc_unlock();
}
 8005246:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    malloc_unlock();
 800524a:	4b04      	ldr	r3, [pc, #16]	; (800525c <add_malloc_block+0x4c>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4718      	bx	r3
}
 8005250:	bd10      	pop	{r4, pc}
 8005252:	bf00      	nop
 8005254:	2000017c 	.word	0x2000017c
 8005258:	20000164 	.word	0x20000164
 800525c:	20000180 	.word	0x20000180

08005260 <malloc>:
{
 8005260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size == 0 || size > (SIZE_MAX - sizeof(struct arena_header))) {
 8005262:	1e43      	subs	r3, r0, #1
 8005264:	3312      	adds	r3, #18
 8005266:	d902      	bls.n	800526e <malloc+0xe>
        return NULL;
 8005268:	2400      	movs	r4, #0
}
 800526a:	4620      	mov	r0, r4
 800526c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (!malloc_lock())
 800526e:	4b1f      	ldr	r3, [pc, #124]	; (80052ec <malloc+0x8c>)
    size = (size + 2 * sizeof(struct arena_header) - 1) & ARENA_SIZE_MASK;
 8005270:	301f      	adds	r0, #31
    if (!malloc_lock())
 8005272:	681b      	ldr	r3, [r3, #0]
    size = (size + 2 * sizeof(struct arena_header) - 1) & ARENA_SIZE_MASK;
 8005274:	f020 040f 	bic.w	r4, r0, #15
    if (!malloc_lock())
 8005278:	4798      	blx	r3
 800527a:	2800      	cmp	r0, #0
 800527c:	d0f4      	beq.n	8005268 <malloc+0x8>
    for (fp = __malloc_head.next_free; fp->a.type != ARENA_TYPE_HEAD;
 800527e:	4d1c      	ldr	r5, [pc, #112]	; (80052f0 <malloc+0x90>)
 8005280:	6928      	ldr	r0, [r5, #16]
 8005282:	6803      	ldr	r3, [r0, #0]
 8005284:	2b02      	cmp	r3, #2
 8005286:	d106      	bne.n	8005296 <malloc+0x36>
        more_mem = _sbrk(size);
 8005288:	4620      	mov	r0, r4
 800528a:	f002 fe07 	bl	8007e9c <_sbrk>
        if (more_mem != (void *)-1) {
 800528e:	1c43      	adds	r3, r0, #1
 8005290:	d128      	bne.n	80052e4 <malloc+0x84>
 8005292:	2400      	movs	r4, #0
 8005294:	e01b      	b.n	80052ce <malloc+0x6e>
        if (fp->a.size >= size) {
 8005296:	6841      	ldr	r1, [r0, #4]
 8005298:	6902      	ldr	r2, [r0, #16]
 800529a:	42a1      	cmp	r1, r4
 800529c:	d320      	bcc.n	80052e0 <malloc+0x80>
    if (fsize >= size + 2 * sizeof(struct arena_header)) {
 800529e:	f104 0320 	add.w	r3, r4, #32
 80052a2:	4299      	cmp	r1, r3
 80052a4:	6945      	ldr	r5, [r0, #20]
 80052a6:	d316      	bcc.n	80052d6 <malloc+0x76>
        nfp->a.type = ARENA_TYPE_FREE;
 80052a8:	2701      	movs	r7, #1
        nfp = (struct free_arena_header *)((char *)fp + size);
 80052aa:	1903      	adds	r3, r0, r4
        nfp->a.size = fsize - size;
 80052ac:	1b09      	subs	r1, r1, r4
        na = fp->a.next;
 80052ae:	6886      	ldr	r6, [r0, #8]
        nfp->a.type = ARENA_TYPE_FREE;
 80052b0:	5107      	str	r7, [r0, r4]
        nfp->a.size = fsize - size;
 80052b2:	6059      	str	r1, [r3, #4]
        fp->a.type = ARENA_TYPE_USED;
 80052b4:	2100      	movs	r1, #0
        fp->a.size = size;
 80052b6:	e9c0 1400 	strd	r1, r4, [r0]
        nfp->a.next = na;
 80052ba:	e9c3 6002 	strd	r6, r0, [r3, #8]
        na->a.prev = nfp;
 80052be:	60f3      	str	r3, [r6, #12]
        fp->a.next = nfp;
 80052c0:	6083      	str	r3, [r0, #8]
        nfp->prev_free = fpp = fp->prev_free;
 80052c2:	e9c3 2504 	strd	r2, r5, [r3, #16]
        fpn->prev_free = nfp;
 80052c6:	6153      	str	r3, [r2, #20]
        fpp->next_free = nfp;
 80052c8:	612b      	str	r3, [r5, #16]
    return (void *)(&fp->a + 1);
 80052ca:	f100 0410 	add.w	r4, r0, #16
    malloc_unlock();
 80052ce:	4b09      	ldr	r3, [pc, #36]	; (80052f4 <malloc+0x94>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4798      	blx	r3
    return result;
 80052d4:	e7c9      	b.n	800526a <malloc+0xa>
        fp->a.type = ARENA_TYPE_USED; /* Allocate the whole block */
 80052d6:	2300      	movs	r3, #0
 80052d8:	6003      	str	r3, [r0, #0]
    ap->next_free = an;
 80052da:	612a      	str	r2, [r5, #16]
    an->prev_free = ap;
 80052dc:	6155      	str	r5, [r2, #20]
 80052de:	e7f4      	b.n	80052ca <malloc+0x6a>
 80052e0:	4610      	mov	r0, r2
 80052e2:	e7ce      	b.n	8005282 <malloc+0x22>
            add_malloc_block(more_mem, size);
 80052e4:	4621      	mov	r1, r4
 80052e6:	f7ff ff93 	bl	8005210 <add_malloc_block>
            goto retry_alloc;
 80052ea:	e7c9      	b.n	8005280 <malloc+0x20>
 80052ec:	2000017c 	.word	0x2000017c
 80052f0:	20000164 	.word	0x20000164
 80052f4:	20000180 	.word	0x20000180

080052f8 <free>:

void free(void *ptr)
{
 80052f8:	b510      	push	{r4, lr}
    struct free_arena_header *ah;

    if (!ptr)
 80052fa:	4604      	mov	r4, r0
 80052fc:	b160      	cbz	r0, 8005318 <free+0x20>

#ifdef DEBUG_MALLOC
    assert(ah->a.type == ARENA_TYPE_USED);
#endif

    if (!malloc_lock())
 80052fe:	4b07      	ldr	r3, [pc, #28]	; (800531c <free+0x24>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4798      	blx	r3
 8005304:	b140      	cbz	r0, 8005318 <free+0x20>
        return;

    /* Merge into adjacent free blocks */
    ah = __free_block(ah);
 8005306:	f1a4 0010 	sub.w	r0, r4, #16
 800530a:	f7ff ff47 	bl	800519c <__free_block>
    malloc_unlock();
}
 800530e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    malloc_unlock();
 8005312:	4b03      	ldr	r3, [pc, #12]	; (8005320 <free+0x28>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4718      	bx	r3
}
 8005318:	bd10      	pop	{r4, pc}
 800531a:	bf00      	nop
 800531c:	2000017c 	.word	0x2000017c
 8005320:	20000180 	.word	0x20000180

08005324 <memcmp>:
int memcmp(const void *s1, const void *s2, size_t n)
{
    int d = 0;

#if defined(ARCH_cortex_m3) || defined(ARCH_cortex_m4) || defined(ARCH_cortex_m7)
    asm (".syntax unified                   \n"
 8005324:	b470      	push	{r4, r5, r6}
 8005326:	f04f 0500 	mov.w	r5, #0
 800532a:	f022 0603 	bic.w	r6, r2, #3
 800532e:	e005      	b.n	800533c <test1>

08005330 <loop1>:
 8005330:	5943      	ldr	r3, [r0, r5]
 8005332:	594c      	ldr	r4, [r1, r5]
 8005334:	42a3      	cmp	r3, r4
 8005336:	d104      	bne.n	8005342 <res1>
 8005338:	f105 0504 	add.w	r5, r5, #4

0800533c <test1>:
 800533c:	42b5      	cmp	r5, r6
 800533e:	d1f7      	bne.n	8005330 <loop1>
 8005340:	e00d      	b.n	800535e <test2>

08005342 <res1>:
 8005342:	ba1b      	rev	r3, r3
 8005344:	ba24      	rev	r4, r4
 8005346:	1b1b      	subs	r3, r3, r4
 8005348:	bf8c      	ite	hi
 800534a:	2301      	movhi	r3, #1
 800534c:	f04f 33ff 	movls.w	r3, #4294967295	; 0xffffffff
 8005350:	e009      	b.n	8005366 <done>

08005352 <loop2>:
 8005352:	5d43      	ldrb	r3, [r0, r5]
 8005354:	5d4c      	ldrb	r4, [r1, r5]
 8005356:	1b1b      	subs	r3, r3, r4
 8005358:	d105      	bne.n	8005366 <done>
 800535a:	f105 0501 	add.w	r5, r5, #1

0800535e <test2>:
 800535e:	4295      	cmp	r5, r2
 8005360:	d1f7      	bne.n	8005352 <loop2>
 8005362:	f04f 0300 	mov.w	r3, #0

08005366 <done>:
 8005366:	4618      	mov	r0, r3
 8005368:	bc70      	pop	{r4, r5, r6}
			break;
	}
#endif

	return d;
}
 800536a:	4770      	bx	lr

0800536c <memcpy>:
#if defined(__ARM_FEATURE_UNALIGNED)
        /*
         * We can speed up a bit by moving 32-bit words if unaligned access is
         * supported (e.g. Cortex-M3/4/7/33).
         */
        asm (".syntax unified           \n"
 800536c:	e001      	b.n	8005372 <test1>

0800536e <loop1>:
 800536e:	588b      	ldr	r3, [r1, r2]
 8005370:	5083      	str	r3, [r0, r2]

08005372 <test1>:
 8005372:	3a04      	subs	r2, #4
 8005374:	d5fb      	bpl.n	800536e <loop1>
 8005376:	f102 0204 	add.w	r2, r2, #4
             "       bpl  loop1         \n"
             "       add  r2, #4        \n"
            );
#endif

        asm (".syntax unified           \n"
 800537a:	e001      	b.n	8005380 <test2>

0800537c <loop2>:
 800537c:	5c8b      	ldrb	r3, [r1, r2]
 800537e:	5483      	strb	r3, [r0, r2]

08005380 <test2>:
 8005380:	3a01      	subs	r2, #1
 8005382:	d5fb      	bpl.n	800537c <loop2>
		*q++ = *p++;
	}
#endif

	return dst;
}
 8005384:	4770      	bx	lr

08005386 <memset>:
#include <string.h>
#include <stdint.h>

void *memset(void *dst, int c, size_t n)
{
	char *q = dst;
 8005386:	4603      	mov	r3, r0
 8005388:	4402      	add	r2, r0
	asm volatile ("cld ; rep ; stosq ; movl %3,%%ecx ; rep ; stosb"
		      :"+c" (nq), "+D" (q)
		      : "a" ((unsigned char)c * 0x0101010101010101U),
			"r" ((uint32_t) n & 7));
#else
	while (n--) {
 800538a:	4293      	cmp	r3, r2
 800538c:	d100      	bne.n	8005390 <memset+0xa>
		*q++ = c;
	}
#endif

	return dst;
}
 800538e:	4770      	bx	lr
		*q++ = c;
 8005390:	f803 1b01 	strb.w	r1, [r3], #1
 8005394:	e7f9      	b.n	800538a <memset+0x4>

08005396 <sprintf>:
#include <stdio.h>
#include <unistd.h>
#include <stdint.h>

int sprintf(char *buffer, const char *format, ...)
{
 8005396:	b40e      	push	{r1, r2, r3}
 8005398:	b503      	push	{r0, r1, lr}
 800539a:	ab03      	add	r3, sp, #12
 800539c:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list ap;
	int rv;

	va_start(ap, format);
	rv = vsnprintf(buffer, SIZE_MAX/2, format, ap);
 80053a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
	va_start(ap, format);
 80053a4:	9301      	str	r3, [sp, #4]
	rv = vsnprintf(buffer, SIZE_MAX/2, format, ap);
 80053a6:	f000 fa65 	bl	8005874 <vsnprintf>
	va_end(ap);

	return rv;
}
 80053aa:	b002      	add	sp, #8
 80053ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80053b0:	b003      	add	sp, #12
 80053b2:	4770      	bx	lr

080053b4 <strcmp>:
	const unsigned char *c2 = (const unsigned char *)s2;
	unsigned char ch;
	int d = 0;

	while (1) {
		d = (int)(ch = *c1++) - (int)*c2++;
 80053b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80053b8:	f811 3b01 	ldrb.w	r3, [r1], #1
		if (d || !ch)
 80053bc:	1ad3      	subs	r3, r2, r3
 80053be:	d101      	bne.n	80053c4 <strcmp+0x10>
 80053c0:	2a00      	cmp	r2, #0
 80053c2:	d1f7      	bne.n	80053b4 <strcmp>
			break;
	}

	return d;
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	4770      	bx	lr

080053c8 <strlen>:
 */

#include <string.h>

size_t strlen(const char *s)
{
 80053c8:	4603      	mov	r3, r0
	const char *ss = s;
	while (*ss)
 80053ca:	781a      	ldrb	r2, [r3, #0]
 80053cc:	1c59      	adds	r1, r3, #1
 80053ce:	b90a      	cbnz	r2, 80053d4 <strlen+0xc>
		ss++;
	return ss - s;
}
 80053d0:	1a18      	subs	r0, r3, r0
 80053d2:	4770      	bx	lr
 80053d4:	460b      	mov	r3, r1
 80053d6:	e7f8      	b.n	80053ca <strlen+0x2>

080053d8 <strncpy>:
 */

#include <string.h>

char *strncpy(char *dst, const char *src, size_t n)
{
 80053d8:	b510      	push	{r4, lr}
 80053da:	4604      	mov	r4, r0
	char *q = dst;
	const char *p = src;
	char ch;

	while (n) {
 80053dc:	b132      	cbz	r2, 80053ec <strncpy+0x14>
		n--;
		*q++ = ch = *p++;
 80053de:	f811 3b01 	ldrb.w	r3, [r1], #1
		n--;
 80053e2:	3a01      	subs	r2, #1
		*q++ = ch = *p++;
 80053e4:	f800 3b01 	strb.w	r3, [r0], #1
		if (!ch)
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d1f7      	bne.n	80053dc <strncpy+0x4>
			break;
	}

	/* The specs say strncpy() fills the entire buffer with NUL.  Sigh. */
	memset(q, 0, n);
 80053ec:	2100      	movs	r1, #0
 80053ee:	f7ff ffca 	bl	8005386 <memset>

	return dst;
}
 80053f2:	4620      	mov	r0, r4
 80053f4:	bd10      	pop	{r4, pc}

080053f6 <ui2a>:
    char base;  /**<  number base (e.g.: 8, 10, 16) */
    char *bf;           /**<  Buffer to output */
};

static void ui2a(unsigned long long int num, struct param *p)
{
 80053f6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053fa:	4680      	mov	r8, r0
 80053fc:	4689      	mov	r9, r1
 80053fe:	4693      	mov	fp, r2
    int n = 0;
    unsigned long long int d = 1;
    char *bf = p->bf;
    while (num / d >= p->base)
 8005400:	2700      	movs	r7, #0
    unsigned long long int d = 1;
 8005402:	2401      	movs	r4, #1
 8005404:	2500      	movs	r5, #0
    char *bf = p->bf;
 8005406:	f8d2 a004 	ldr.w	sl, [r2, #4]
    while (num / d >= p->base)
 800540a:	78d6      	ldrb	r6, [r2, #3]
 800540c:	4622      	mov	r2, r4
 800540e:	462b      	mov	r3, r5
 8005410:	4640      	mov	r0, r8
 8005412:	4649      	mov	r1, r9
 8005414:	f007 feba 	bl	800d18c <__aeabi_uldivmod>
 8005418:	42b9      	cmp	r1, r7
 800541a:	bf08      	it	eq
 800541c:	42b0      	cmpeq	r0, r6
 800541e:	d20a      	bcs.n	8005436 <ui2a+0x40>
    int n = 0;
 8005420:	2300      	movs	r3, #0
 8005422:	9301      	str	r3, [sp, #4]
        d *= p->base;
    while (d != 0) {
 8005424:	ea54 0305 	orrs.w	r3, r4, r5
 8005428:	d10d      	bne.n	8005446 <ui2a+0x50>
        if (n || dgt > 0 || d == 0) {
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
            ++n;
        }
    }
    *bf = 0;
 800542a:	2300      	movs	r3, #0
 800542c:	f88a 3000 	strb.w	r3, [sl]
}
 8005430:	b003      	add	sp, #12
 8005432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        d *= p->base;
 8005436:	fb04 f307 	mul.w	r3, r4, r7
 800543a:	fb06 3305 	mla	r3, r6, r5, r3
 800543e:	fba4 4506 	umull	r4, r5, r4, r6
 8005442:	441d      	add	r5, r3
 8005444:	e7e2      	b.n	800540c <ui2a+0x16>
 8005446:	4622      	mov	r2, r4
 8005448:	462b      	mov	r3, r5
 800544a:	4640      	mov	r0, r8
 800544c:	4649      	mov	r1, r9
 800544e:	f007 fe9d 	bl	800d18c <__aeabi_uldivmod>
 8005452:	4606      	mov	r6, r0
 8005454:	460f      	mov	r7, r1
        d /= p->base;
 8005456:	4620      	mov	r0, r4
 8005458:	4629      	mov	r1, r5
 800545a:	4690      	mov	r8, r2
 800545c:	4699      	mov	r9, r3
 800545e:	f89b 2003 	ldrb.w	r2, [fp, #3]
 8005462:	2300      	movs	r3, #0
 8005464:	f007 fe92 	bl	800d18c <__aeabi_uldivmod>
        if (n || dgt > 0 || d == 0) {
 8005468:	9b01      	ldr	r3, [sp, #4]
        d /= p->base;
 800546a:	4604      	mov	r4, r0
 800546c:	460d      	mov	r5, r1
        if (n || dgt > 0 || d == 0) {
 800546e:	b93b      	cbnz	r3, 8005480 <ui2a+0x8a>
 8005470:	ea56 0307 	orrs.w	r3, r6, r7
 8005474:	d104      	bne.n	8005480 <ui2a+0x8a>
 8005476:	ea54 0305 	orrs.w	r3, r4, r5
 800547a:	d1d3      	bne.n	8005424 <ui2a+0x2e>
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
 800547c:	2330      	movs	r3, #48	; 0x30
 800547e:	e00a      	b.n	8005496 <ui2a+0xa0>
 8005480:	2f00      	cmp	r7, #0
 8005482:	bf08      	it	eq
 8005484:	2e0a      	cmpeq	r6, #10
 8005486:	d3f9      	bcc.n	800547c <ui2a+0x86>
 8005488:	f89b 3002 	ldrb.w	r3, [fp, #2]
 800548c:	f013 0f04 	tst.w	r3, #4
 8005490:	bf14      	ite	ne
 8005492:	2337      	movne	r3, #55	; 0x37
 8005494:	2357      	moveq	r3, #87	; 0x57
 8005496:	441e      	add	r6, r3
            ++n;
 8005498:	9b01      	ldr	r3, [sp, #4]
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
 800549a:	f88a 6000 	strb.w	r6, [sl]
            ++n;
 800549e:	3301      	adds	r3, #1
 80054a0:	9301      	str	r3, [sp, #4]
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
 80054a2:	f10a 0a01 	add.w	sl, sl, #1
 80054a6:	e7bd      	b.n	8005424 <ui2a+0x2e>

080054a8 <putf>:
    *nump = num;
    return ch;
}

static int putf(FILE *putp, char c)
{
 80054a8:	b507      	push	{r0, r1, r2, lr}
    return stream->vmt->read(stream, (char*)buf, size*nmemb) / size;
}

__extern_inline size_t fwrite(const void *buf, size_t size, size_t nmemb, FILE *stream)
{
    if (stream->vmt->write == NULL) return 0;
 80054aa:	6803      	ldr	r3, [r0, #0]
	return fwrite(s, 1, strlen(s), stdout) + fwrite("\n", 1, 1, stdout);
}

__extern_inline int fputc(int c, FILE *f)
{
	unsigned char ch = c;
 80054ac:	f88d 1007 	strb.w	r1, [sp, #7]
    if (stream->vmt->write == NULL) return 0;
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	b91b      	cbnz	r3, 80054bc <putf+0x14>
    if (fputc(c, putp) == EOF)
        return 0;
 80054b4:	2000      	movs	r0, #0
    else
        return 1;
}
 80054b6:	b003      	add	sp, #12
 80054b8:	f85d fb04 	ldr.w	pc, [sp], #4
    return stream->vmt->write(stream, (char*)buf, size*nmemb) / size;
 80054bc:	2201      	movs	r2, #1
 80054be:	f10d 0107 	add.w	r1, sp, #7
 80054c2:	4798      	blx	r3
	return fwrite(&ch, 1, 1, f) == 1 ? ch : EOF;
 80054c4:	2801      	cmp	r0, #1
 80054c6:	d1f5      	bne.n	80054b4 <putf+0xc>
 80054c8:	e7f5      	b.n	80054b6 <putf+0xe>
	...

080054cc <putchw>:

static unsigned putchw(FILE *putp, struct param *p)
{
 80054cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054d0:	4607      	mov	r7, r0
 80054d2:	460e      	mov	r6, r1
    unsigned written = 0;
    char ch;
    int n = p->width;
 80054d4:	780c      	ldrb	r4, [r1, #0]
    char *bf = p->bf;
 80054d6:	684b      	ldr	r3, [r1, #4]

    /* Number of filling characters */
    while (*bf++ && n > 0)
 80054d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80054dc:	b10a      	cbz	r2, 80054e2 <putchw+0x16>
 80054de:	2c00      	cmp	r4, #0
 80054e0:	d152      	bne.n	8005588 <putchw+0xbc>
        n--;
    if (p->sign)
        n--;
    if (p->alt && p->base == 16)
 80054e2:	f241 0202 	movw	r2, #4098	; 0x1002
    if (p->sign)
 80054e6:	78b3      	ldrb	r3, [r6, #2]
 80054e8:	07d9      	lsls	r1, r3, #31
    if (p->alt && p->base == 16)
 80054ea:	8873      	ldrh	r3, [r6, #2]
        n--;
 80054ec:	bf48      	it	mi
 80054ee:	f104 34ff 	addmi.w	r4, r4, #4294967295	; 0xffffffff
    if (p->alt && p->base == 16)
 80054f2:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d147      	bne.n	800558c <putchw+0xc0>
        n -= 2;
 80054fc:	3c02      	subs	r4, #2
    else if (p->alt && p->base == 8)
        n--;

    /* Unless left-aligned, fill with space, before alternate or sign */
    if (!p->lz && !p->left) {
 80054fe:	6833      	ldr	r3, [r6, #0]
 8005500:	4d38      	ldr	r5, [pc, #224]	; (80055e4 <putchw+0x118>)
 8005502:	401d      	ands	r5, r3
 8005504:	2d00      	cmp	r5, #0
 8005506:	d150      	bne.n	80055aa <putchw+0xde>
 8005508:	46a0      	mov	r8, r4
        while (n-- > 0)
 800550a:	f1b8 0f00 	cmp.w	r8, #0
 800550e:	dc44      	bgt.n	800559a <putchw+0xce>
 8005510:	1e63      	subs	r3, r4, #1
 8005512:	2c00      	cmp	r4, #0
 8005514:	bfb4      	ite	lt
 8005516:	461c      	movlt	r4, r3
 8005518:	1b1c      	subge	r4, r3, r4
            written += putf(putp, ' ');
    }

    /* print sign */
    if (p->sign)
 800551a:	78b3      	ldrb	r3, [r6, #2]
 800551c:	07da      	lsls	r2, r3, #31
 800551e:	d504      	bpl.n	800552a <putchw+0x5e>
        written += putf(putp, '-');
 8005520:	212d      	movs	r1, #45	; 0x2d
 8005522:	4638      	mov	r0, r7
 8005524:	f7ff ffc0 	bl	80054a8 <putf>
 8005528:	4405      	add	r5, r0

    /* Alternate */
    if (p->alt && p->base == 16) {
 800552a:	f241 0202 	movw	r2, #4098	; 0x1002
 800552e:	8873      	ldrh	r3, [r6, #2]
 8005530:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
 8005534:	b29b      	uxth	r3, r3
 8005536:	4293      	cmp	r3, r2
 8005538:	d139      	bne.n	80055ae <putchw+0xe2>
        written += putf(putp, '0');
 800553a:	2130      	movs	r1, #48	; 0x30
 800553c:	4638      	mov	r0, r7
 800553e:	f7ff ffb3 	bl	80054a8 <putf>
        written += putf(putp, (p->uc ? 'X' : 'x'));
 8005542:	78b3      	ldrb	r3, [r6, #2]
        written += putf(putp, '0');
 8005544:	4405      	add	r5, r0
        written += putf(putp, (p->uc ? 'X' : 'x'));
 8005546:	f013 0f04 	tst.w	r3, #4
 800554a:	bf14      	ite	ne
 800554c:	2158      	movne	r1, #88	; 0x58
 800554e:	2178      	moveq	r1, #120	; 0x78
    } else if (p->alt && p->base == 8) {
        written += putf(putp, '0');
 8005550:	4638      	mov	r0, r7
 8005552:	f7ff ffa9 	bl	80054a8 <putf>
 8005556:	4405      	add	r5, r0
    }

    /* Fill with zeros, after alternate or sign */
    if (p->lz) {
 8005558:	7873      	ldrb	r3, [r6, #1]
 800555a:	b143      	cbz	r3, 800556e <putchw+0xa2>
 800555c:	46a0      	mov	r8, r4
        while (n-- > 0)
 800555e:	f1b8 0f00 	cmp.w	r8, #0
 8005562:	dc2a      	bgt.n	80055ba <putchw+0xee>
 8005564:	1e63      	subs	r3, r4, #1
 8005566:	2c00      	cmp	r4, #0
 8005568:	bfb4      	ite	lt
 800556a:	461c      	movlt	r4, r3
 800556c:	1b1c      	subge	r4, r3, r4
            written += putf(putp, '0');
    }

    /* Put actual buffer */
    bf = p->bf;
 800556e:	f8d6 8004 	ldr.w	r8, [r6, #4]
    while ((ch = *bf++))
 8005572:	f818 1b01 	ldrb.w	r1, [r8], #1
 8005576:	bb41      	cbnz	r1, 80055ca <putchw+0xfe>
        written += putf(putp, ch);

    /* If left-aligned, pad the end with spaces. */
    if (p->left) {
 8005578:	78b3      	ldrb	r3, [r6, #2]
 800557a:	071b      	lsls	r3, r3, #28
 800557c:	d501      	bpl.n	8005582 <putchw+0xb6>
        while (n-- > 0)
 800557e:	2c00      	cmp	r4, #0
 8005580:	dc28      	bgt.n	80055d4 <putchw+0x108>
            written += putf(putp, ' ');
    }
    
    return written;
}
 8005582:	4628      	mov	r0, r5
 8005584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        n--;
 8005588:	3c01      	subs	r4, #1
 800558a:	e7a5      	b.n	80054d8 <putchw+0xc>
    else if (p->alt && p->base == 8)
 800558c:	f640 0202 	movw	r2, #2050	; 0x802
 8005590:	4293      	cmp	r3, r2
        n--;
 8005592:	bf08      	it	eq
 8005594:	f104 34ff 	addeq.w	r4, r4, #4294967295	; 0xffffffff
 8005598:	e7b1      	b.n	80054fe <putchw+0x32>
            written += putf(putp, ' ');
 800559a:	2120      	movs	r1, #32
 800559c:	4638      	mov	r0, r7
 800559e:	f7ff ff83 	bl	80054a8 <putf>
 80055a2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80055a6:	4405      	add	r5, r0
 80055a8:	e7af      	b.n	800550a <putchw+0x3e>
    unsigned written = 0;
 80055aa:	2500      	movs	r5, #0
 80055ac:	e7b5      	b.n	800551a <putchw+0x4e>
    } else if (p->alt && p->base == 8) {
 80055ae:	f640 0202 	movw	r2, #2050	; 0x802
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d1d0      	bne.n	8005558 <putchw+0x8c>
        written += putf(putp, '0');
 80055b6:	2130      	movs	r1, #48	; 0x30
 80055b8:	e7ca      	b.n	8005550 <putchw+0x84>
            written += putf(putp, '0');
 80055ba:	2130      	movs	r1, #48	; 0x30
 80055bc:	4638      	mov	r0, r7
 80055be:	f7ff ff73 	bl	80054a8 <putf>
 80055c2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80055c6:	4405      	add	r5, r0
 80055c8:	e7c9      	b.n	800555e <putchw+0x92>
        written += putf(putp, ch);
 80055ca:	4638      	mov	r0, r7
 80055cc:	f7ff ff6c 	bl	80054a8 <putf>
 80055d0:	4405      	add	r5, r0
 80055d2:	e7ce      	b.n	8005572 <putchw+0xa6>
            written += putf(putp, ' ');
 80055d4:	2120      	movs	r1, #32
 80055d6:	4638      	mov	r0, r7
 80055d8:	f7ff ff66 	bl	80054a8 <putf>
 80055dc:	3c01      	subs	r4, #1
 80055de:	4405      	add	r5, r0
 80055e0:	e7cd      	b.n	800557e <putchw+0xb2>
 80055e2:	bf00      	nop
 80055e4:	0008ff00 	.word	0x0008ff00

080055e8 <tfp_format>:

    return val;
}

size_t tfp_format(FILE *putp, const char *fmt, va_list va)
{
 80055e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    size_t written = 0;
 80055ec:	2600      	movs	r6, #0
{
 80055ee:	4607      	mov	r7, r0
 80055f0:	4614      	mov	r4, r2
    while ((ch = *(fmt++))) {
        if (ch != '%') {
            written += putf(putp, ch);
        } else {
            /* Init parameter struct */
            p.lz = 0;
 80055f2:	46b0      	mov	r8, r6
{
 80055f4:	b089      	sub	sp, #36	; 0x24
    p.bf = bf;
 80055f6:	ad02      	add	r5, sp, #8
 80055f8:	9501      	str	r5, [sp, #4]
    while ((ch = *(fmt++))) {
 80055fa:	f101 0901 	add.w	r9, r1, #1
 80055fe:	7809      	ldrb	r1, [r1, #0]
 8005600:	b919      	cbnz	r1, 800560a <tfp_format+0x22>
        }
    }
 abort:;
 
 return written;
}
 8005602:	4630      	mov	r0, r6
 8005604:	b009      	add	sp, #36	; 0x24
 8005606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (ch != '%') {
 800560a:	2925      	cmp	r1, #37	; 0x25
 800560c:	d003      	beq.n	8005616 <tfp_format+0x2e>
                written += putf(putp, ch);
 800560e:	4638      	mov	r0, r7
 8005610:	f7ff ff4a 	bl	80054a8 <putf>
 8005614:	e0ff      	b.n	8005816 <tfp_format+0x22e>
            p.alt = 0;
 8005616:	f89d 3002 	ldrb.w	r3, [sp, #2]
    while ((ch = *(fmt++))) {
 800561a:	4648      	mov	r0, r9
            p.uc = 0;
 800561c:	f003 03f4 	and.w	r3, r3, #244	; 0xf4
 8005620:	f368 0382 	bfi	r3, r8, #2, #1
 8005624:	f88d 3002 	strb.w	r3, [sp, #2]
            while ((ch = *(fmt++))) {
 8005628:	2300      	movs	r3, #0
 800562a:	461a      	mov	r2, r3
            p.lz = 0;
 800562c:	f88d 8001 	strb.w	r8, [sp, #1]
            p.width = 0;
 8005630:	f88d 8000 	strb.w	r8, [sp]
            while ((ch = *(fmt++))) {
 8005634:	f819 1b01 	ldrb.w	r1, [r9], #1
 8005638:	b949      	cbnz	r1, 800564e <tfp_format+0x66>
 800563a:	b10b      	cbz	r3, 8005640 <tfp_format+0x58>
 800563c:	f88d 2001 	strb.w	r2, [sp, #1]
            } else if (ch >= '0' && ch <= '9') {
 8005640:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8005644:	2b09      	cmp	r3, #9
 8005646:	d834      	bhi.n	80056b2 <tfp_format+0xca>
    int num = 0;
 8005648:	2200      	movs	r2, #0
        num = num * base + digit;
 800564a:	200a      	movs	r0, #10
 800564c:	e056      	b.n	80056fc <tfp_format+0x114>
                switch (ch) {
 800564e:	292d      	cmp	r1, #45	; 0x2d
 8005650:	d010      	beq.n	8005674 <tfp_format+0x8c>
 8005652:	2930      	cmp	r1, #48	; 0x30
 8005654:	d008      	beq.n	8005668 <tfp_format+0x80>
 8005656:	2923      	cmp	r1, #35	; 0x23
 8005658:	d118      	bne.n	800568c <tfp_format+0xa4>
                    p.alt = 1;
 800565a:	f89d 1002 	ldrb.w	r1, [sp, #2]
 800565e:	f041 0102 	orr.w	r1, r1, #2
 8005662:	f88d 1002 	strb.w	r1, [sp, #2]
                    continue;
 8005666:	e003      	b.n	8005670 <tfp_format+0x88>
                    if (!p.left) {
 8005668:	f89d 1002 	ldrb.w	r1, [sp, #2]
 800566c:	0709      	lsls	r1, r1, #28
 800566e:	d50a      	bpl.n	8005686 <tfp_format+0x9e>
                    p.lz = 0;
 8005670:	4648      	mov	r0, r9
 8005672:	e7df      	b.n	8005634 <tfp_format+0x4c>
                    p.left = 1;
 8005674:	f89d 3002 	ldrb.w	r3, [sp, #2]
                    p.lz = 0;
 8005678:	2200      	movs	r2, #0
                    p.left = 1;
 800567a:	f043 0308 	orr.w	r3, r3, #8
 800567e:	f88d 3002 	strb.w	r3, [sp, #2]
                    continue;
 8005682:	2301      	movs	r3, #1
 8005684:	e7f4      	b.n	8005670 <tfp_format+0x88>
 8005686:	2301      	movs	r3, #1
                        p.lz = 1;
 8005688:	461a      	mov	r2, r3
 800568a:	e7f1      	b.n	8005670 <tfp_format+0x88>
 800568c:	b10b      	cbz	r3, 8005692 <tfp_format+0xaa>
 800568e:	f88d 2001 	strb.w	r2, [sp, #1]
            if (ch == '*') {
 8005692:	292a      	cmp	r1, #42	; 0x2a
 8005694:	d1d4      	bne.n	8005640 <tfp_format+0x58>
            val = va_arg(*va, int);
 8005696:	6823      	ldr	r3, [r4, #0]
 8005698:	1d22      	adds	r2, r4, #4
                if (i > UCHAR_MAX) {
 800569a:	2bff      	cmp	r3, #255	; 0xff
 800569c:	dd03      	ble.n	80056a6 <tfp_format+0xbe>
                    p.width = UCHAR_MAX;
 800569e:	23ff      	movs	r3, #255	; 0xff
                    p.width = i;
 80056a0:	f88d 3000 	strb.w	r3, [sp]
 80056a4:	e001      	b.n	80056aa <tfp_format+0xc2>
                } else if (i > 0) {
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	dcfa      	bgt.n	80056a0 <tfp_format+0xb8>
            val = va_arg(*va, int);
 80056aa:	4614      	mov	r4, r2
                ch = *(fmt++);
 80056ac:	7841      	ldrb	r1, [r0, #1]
 80056ae:	f100 0902 	add.w	r9, r0, #2
            if (ch == 'l') {
 80056b2:	296c      	cmp	r1, #108	; 0x6c
 80056b4:	d13b      	bne.n	800572e <tfp_format+0x146>
                ch = *(fmt++);
 80056b6:	f899 1000 	ldrb.w	r1, [r9]
                if (ch == 'l') {
 80056ba:	296c      	cmp	r1, #108	; 0x6c
                lng = 1;
 80056bc:	bf13      	iteet	ne
 80056be:	2301      	movne	r3, #1
                    lng = 2;
 80056c0:	2302      	moveq	r3, #2
                    ch = *(fmt++);
 80056c2:	f899 1001 	ldrbeq.w	r1, [r9, #1]
                ch = *(fmt++);
 80056c6:	f109 0901 	addne.w	r9, r9, #1
                    ch = *(fmt++);
 80056ca:	bf08      	it	eq
 80056cc:	f109 0902 	addeq.w	r9, r9, #2
            if (ch == 'z') {
 80056d0:	297a      	cmp	r1, #122	; 0x7a
                ch = *(fmt++);
 80056d2:	bf04      	itt	eq
 80056d4:	f899 1000 	ldrbeq.w	r1, [r9]
 80056d8:	f109 0901 	addeq.w	r9, r9, #1
            switch (ch) {
 80056dc:	2969      	cmp	r1, #105	; 0x69
 80056de:	d02c      	beq.n	800573a <tfp_format+0x152>
 80056e0:	d83a      	bhi.n	8005758 <tfp_format+0x170>
 80056e2:	2958      	cmp	r1, #88	; 0x58
 80056e4:	d064      	beq.n	80057b0 <tfp_format+0x1c8>
 80056e6:	d824      	bhi.n	8005732 <tfp_format+0x14a>
 80056e8:	2900      	cmp	r1, #0
 80056ea:	d08a      	beq.n	8005602 <tfp_format+0x1a>
 80056ec:	2925      	cmp	r1, #37	; 0x25
 80056ee:	d08e      	beq.n	800560e <tfp_format+0x26>
                v = va_arg(va, void *);
 80056f0:	4649      	mov	r1, r9
 80056f2:	e782      	b.n	80055fa <tfp_format+0x12>
        num = num * base + digit;
 80056f4:	fb00 3202 	mla	r2, r0, r2, r3
        ch = *p++;
 80056f8:	f819 1b01 	ldrb.w	r1, [r9], #1
    if (ch >= '0' && ch <= '9')
 80056fc:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8005700:	fa5f fc83 	uxtb.w	ip, r3
 8005704:	f1bc 0f09 	cmp.w	ip, #9
 8005708:	d9f4      	bls.n	80056f4 <tfp_format+0x10c>
    else if (ch >= 'a' && ch <= 'f')
 800570a:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
 800570e:	2b05      	cmp	r3, #5
 8005710:	d806      	bhi.n	8005720 <tfp_format+0x138>
        return ch - 'a' + 10;
 8005712:	f1a1 0357 	sub.w	r3, r1, #87	; 0x57
        if (digit > base)
 8005716:	2b0a      	cmp	r3, #10
 8005718:	ddec      	ble.n	80056f4 <tfp_format+0x10c>
    *nump = num;
 800571a:	f88d 2000 	strb.w	r2, [sp]
 800571e:	e7c8      	b.n	80056b2 <tfp_format+0xca>
    else if (ch >= 'A' && ch <= 'F')
 8005720:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
 8005724:	2b05      	cmp	r3, #5
 8005726:	d8f8      	bhi.n	800571a <tfp_format+0x132>
        return ch - 'A' + 10;
 8005728:	f1a1 0337 	sub.w	r3, r1, #55	; 0x37
 800572c:	e7f3      	b.n	8005716 <tfp_format+0x12e>
            lng = 0;
 800572e:	2300      	movs	r3, #0
 8005730:	e7ce      	b.n	80056d0 <tfp_format+0xe8>
            switch (ch) {
 8005732:	2963      	cmp	r1, #99	; 0x63
 8005734:	d077      	beq.n	8005826 <tfp_format+0x23e>
 8005736:	2964      	cmp	r1, #100	; 0x64
 8005738:	d1da      	bne.n	80056f0 <tfp_format+0x108>
                p.base = 10;
 800573a:	220a      	movs	r2, #10
 800573c:	f88d 2003 	strb.w	r2, [sp, #3]
    switch (lng) {
 8005740:	2b00      	cmp	r3, #0
 8005742:	d051      	beq.n	80057e8 <tfp_format+0x200>
 8005744:	2b01      	cmp	r3, #1
 8005746:	d04f      	beq.n	80057e8 <tfp_format+0x200>
            val = va_arg(*va, long long);
 8005748:	3407      	adds	r4, #7
 800574a:	f024 0307 	bic.w	r3, r4, #7
 800574e:	f103 0408 	add.w	r4, r3, #8
 8005752:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005756:	e04a      	b.n	80057ee <tfp_format+0x206>
            switch (ch) {
 8005758:	2973      	cmp	r1, #115	; 0x73
 800575a:	d06c      	beq.n	8005836 <tfp_format+0x24e>
 800575c:	d824      	bhi.n	80057a8 <tfp_format+0x1c0>
 800575e:	296f      	cmp	r1, #111	; 0x6f
 8005760:	d05b      	beq.n	800581a <tfp_format+0x232>
 8005762:	2970      	cmp	r1, #112	; 0x70
 8005764:	d1c4      	bne.n	80056f0 <tfp_format+0x108>
                p.base = 16;
 8005766:	2310      	movs	r3, #16
                ui2a((uintptr_t)v, &p);
 8005768:	466a      	mov	r2, sp
                v = va_arg(va, void *);
 800576a:	6820      	ldr	r0, [r4, #0]
                ui2a((uintptr_t)v, &p);
 800576c:	2100      	movs	r1, #0
                p.base = 16;
 800576e:	f88d 3003 	strb.w	r3, [sp, #3]
                ui2a((uintptr_t)v, &p);
 8005772:	f7ff fe40 	bl	80053f6 <ui2a>
                p.width = 2 * sizeof(void*);
 8005776:	f44f 7384 	mov.w	r3, #264	; 0x108
                written += putf(putp, '0');
 800577a:	2130      	movs	r1, #48	; 0x30
 800577c:	4638      	mov	r0, r7
                p.width = 2 * sizeof(void*);
 800577e:	f8ad 3000 	strh.w	r3, [sp]
                written += putf(putp, '0');
 8005782:	f7ff fe91 	bl	80054a8 <putf>
                written += putf(putp, 'x');
 8005786:	2178      	movs	r1, #120	; 0x78
                written += putf(putp, '0');
 8005788:	4683      	mov	fp, r0
                written += putf(putp, 'x');
 800578a:	4638      	mov	r0, r7
 800578c:	f7ff fe8c 	bl	80054a8 <putf>
                v = va_arg(va, void *);
 8005790:	f104 0a04 	add.w	sl, r4, #4
                written += putchw(putp, &p);
 8005794:	4669      	mov	r1, sp
                written += putf(putp, 'x');
 8005796:	4604      	mov	r4, r0
                written += putchw(putp, &p);
 8005798:	4638      	mov	r0, r7
 800579a:	f7ff fe97 	bl	80054cc <putchw>
 800579e:	4406      	add	r6, r0
 80057a0:	445e      	add	r6, fp
 80057a2:	4426      	add	r6, r4
                p.bf = va_arg(va, char *);
 80057a4:	4654      	mov	r4, sl
                break;
 80057a6:	e7a3      	b.n	80056f0 <tfp_format+0x108>
            switch (ch) {
 80057a8:	2975      	cmp	r1, #117	; 0x75
 80057aa:	d019      	beq.n	80057e0 <tfp_format+0x1f8>
 80057ac:	2978      	cmp	r1, #120	; 0x78
 80057ae:	d19f      	bne.n	80056f0 <tfp_format+0x108>
                p.base = 16;
 80057b0:	2210      	movs	r2, #16
 80057b2:	f88d 2003 	strb.w	r2, [sp, #3]
                p.uc = (ch == 'X');
 80057b6:	f1a1 0258 	sub.w	r2, r1, #88	; 0x58
 80057ba:	4251      	negs	r1, r2
 80057bc:	4151      	adcs	r1, r2
 80057be:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80057c2:	f361 0282 	bfi	r2, r1, #2, #1
 80057c6:	f88d 2002 	strb.w	r2, [sp, #2]
    switch (lng) {
 80057ca:	b343      	cbz	r3, 800581e <tfp_format+0x236>
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d026      	beq.n	800581e <tfp_format+0x236>
            val = va_arg(*va, unsigned long long);
 80057d0:	3407      	adds	r4, #7
 80057d2:	f024 0307 	bic.w	r3, r4, #7
 80057d6:	f103 0408 	add.w	r4, r3, #8
 80057da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80057de:	e013      	b.n	8005808 <tfp_format+0x220>
                p.base = 10;
 80057e0:	220a      	movs	r2, #10
                p.base = 8;
 80057e2:	f88d 2003 	strb.w	r2, [sp, #3]
 80057e6:	e7f0      	b.n	80057ca <tfp_format+0x1e2>
            val = va_arg(*va, long);
 80057e8:	6820      	ldr	r0, [r4, #0]
 80057ea:	3404      	adds	r4, #4
 80057ec:	17c1      	asrs	r1, r0, #31
    if (num < 0) {
 80057ee:	2800      	cmp	r0, #0
 80057f0:	f171 0300 	sbcs.w	r3, r1, #0
 80057f4:	da08      	bge.n	8005808 <tfp_format+0x220>
        p->sign = 1;
 80057f6:	f89d 3002 	ldrb.w	r3, [sp, #2]
        num = -num;
 80057fa:	4240      	negs	r0, r0
        p->sign = 1;
 80057fc:	f043 0301 	orr.w	r3, r3, #1
        num = -num;
 8005800:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
        p->sign = 1;
 8005804:	f88d 3002 	strb.w	r3, [sp, #2]
                ui2a(intarg(lng, 0, &va), &p);
 8005808:	466a      	mov	r2, sp
 800580a:	f7ff fdf4 	bl	80053f6 <ui2a>
                written += putchw(putp, &p);
 800580e:	4669      	mov	r1, sp
 8005810:	4638      	mov	r0, r7
 8005812:	f7ff fe5b 	bl	80054cc <putchw>
                written += putf(putp, ch);
 8005816:	4406      	add	r6, r0
                break;
 8005818:	e76a      	b.n	80056f0 <tfp_format+0x108>
                p.base = 8;
 800581a:	2208      	movs	r2, #8
 800581c:	e7e1      	b.n	80057e2 <tfp_format+0x1fa>
            val = va_arg(*va, unsigned long);
 800581e:	6820      	ldr	r0, [r4, #0]
 8005820:	2100      	movs	r1, #0
 8005822:	3404      	adds	r4, #4
 8005824:	e7f0      	b.n	8005808 <tfp_format+0x220>
                written += putf(putp, (char)(va_arg(va, int)));
 8005826:	7821      	ldrb	r1, [r4, #0]
 8005828:	4638      	mov	r0, r7
 800582a:	f7ff fe3d 	bl	80054a8 <putf>
 800582e:	f104 0a04 	add.w	sl, r4, #4
 8005832:	4406      	add	r6, r0
 8005834:	e7b6      	b.n	80057a4 <tfp_format+0x1bc>
                p.bf = va_arg(va, char *);
 8005836:	6823      	ldr	r3, [r4, #0]
                written += putchw(putp, &p);
 8005838:	4669      	mov	r1, sp
 800583a:	4638      	mov	r0, r7
                p.bf = va_arg(va, char *);
 800583c:	9301      	str	r3, [sp, #4]
                written += putchw(putp, &p);
 800583e:	f7ff fe45 	bl	80054cc <putchw>
                p.bf = va_arg(va, char *);
 8005842:	f104 0a04 	add.w	sl, r4, #4
                written += putchw(putp, &p);
 8005846:	4406      	add	r6, r0
                p.bf = bf;
 8005848:	9501      	str	r5, [sp, #4]
 800584a:	e7ab      	b.n	80057a4 <tfp_format+0x1bc>

0800584c <vfprintf>:

int vfprintf(FILE *f, const char *fmt, va_list va)
{
    return tfp_format(f, fmt, va);
 800584c:	f7ff becc 	b.w	80055e8 <tfp_format>

08005850 <printf>:
    va_end(va);
    return rv;
}

int printf(const char *fmt, ...)
{
 8005850:	b40f      	push	{r0, r1, r2, r3}
 8005852:	b507      	push	{r0, r1, r2, lr}
    return tfp_format(f, fmt, va);
 8005854:	4b06      	ldr	r3, [pc, #24]	; (8005870 <printf+0x20>)
{
 8005856:	aa04      	add	r2, sp, #16
 8005858:	f852 1b04 	ldr.w	r1, [r2], #4
    return tfp_format(f, fmt, va);
 800585c:	6818      	ldr	r0, [r3, #0]
    va_list va;
    va_start(va, fmt);
 800585e:	9201      	str	r2, [sp, #4]
    return tfp_format(f, fmt, va);
 8005860:	f7ff fec2 	bl	80055e8 <tfp_format>
    int rv = vfprintf(stdout, fmt, va);
    va_end(va);
    return rv;
}
 8005864:	b003      	add	sp, #12
 8005866:	f85d eb04 	ldr.w	lr, [sp], #4
 800586a:	b004      	add	sp, #16
 800586c:	4770      	bx	lr
 800586e:	bf00      	nop
 8005870:	0800de34 	.word	0x0800de34

08005874 <vsnprintf>:

int vsnprintf(char *str, size_t size, const char *fmt, va_list va)
{
 8005874:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005876:	4616      	mov	r6, r2
 8005878:	461f      	mov	r7, r3
 800587a:	460d      	mov	r5, r1
 800587c:	b085      	sub	sp, #20
    struct MemFile state;
    FILE *f = fmemopen_w(&state, str, size);
 800587e:	460a      	mov	r2, r1
{
 8005880:	4604      	mov	r4, r0
    FILE *f = fmemopen_w(&state, str, size);
 8005882:	4601      	mov	r1, r0
 8005884:	4668      	mov	r0, sp
 8005886:	f000 f831 	bl	80058ec <fmemopen_w>
    tfp_format(f, fmt, va);
 800588a:	463a      	mov	r2, r7
 800588c:	4631      	mov	r1, r6
 800588e:	f7ff feab 	bl	80055e8 <tfp_format>
    if (size > 0) {
 8005892:	b14d      	cbz	r5, 80058a8 <vsnprintf+0x34>
        if (state.bytes_written < size) {
 8005894:	9b02      	ldr	r3, [sp, #8]
 8005896:	42ab      	cmp	r3, r5
 8005898:	f04f 0300 	mov.w	r3, #0
            *(state.buffer) = '\0';
 800589c:	bf35      	itete	cc
 800589e:	9a01      	ldrcc	r2, [sp, #4]
        } else {
            str[size - 1] = '\0';
 80058a0:	1964      	addcs	r4, r4, r5
            *(state.buffer) = '\0';
 80058a2:	7013      	strbcc	r3, [r2, #0]
            str[size - 1] = '\0';
 80058a4:	f804 3c01 	strbcs.w	r3, [r4, #-1]
        }
    }
    return state.bytes_written;
}
 80058a8:	9802      	ldr	r0, [sp, #8]
 80058aa:	b005      	add	sp, #20
 80058ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080058b0 <vprintf>:
#include <stdio.h>
#include <stdarg.h>

int vprintf(const char *format, va_list ap)
{
	return vfprintf(stdout, format, ap);
 80058b0:	4b02      	ldr	r3, [pc, #8]	; (80058bc <vprintf+0xc>)
 80058b2:	460a      	mov	r2, r1
 80058b4:	4601      	mov	r1, r0
 80058b6:	6818      	ldr	r0, [r3, #0]
 80058b8:	f7ff bfc8 	b.w	800584c <vfprintf>
 80058bc:	0800de34 	.word	0x0800de34

080058c0 <memfile_write>:
#include <stdio.h>

size_t memfile_write(FILE *instance, const char *bp, size_t n)
{
 80058c0:	4603      	mov	r3, r0
    struct MemFile *f = (struct MemFile*)instance;
    size_t i = 0;
 80058c2:	2000      	movs	r0, #0
{
 80058c4:	b530      	push	{r4, r5, lr}
    
    while (n--)
 80058c6:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
 80058ca:	d200      	bcs.n	80058ce <memfile_write+0xe>
            i++;
        }
    }
    
    return i;
}
 80058cc:	bd30      	pop	{r4, r5, pc}
        f->bytes_written++;
 80058ce:	689c      	ldr	r4, [r3, #8]
        if (f->bytes_written <= f->size)
 80058d0:	68dd      	ldr	r5, [r3, #12]
        f->bytes_written++;
 80058d2:	3401      	adds	r4, #1
        if (f->bytes_written <= f->size)
 80058d4:	42ac      	cmp	r4, r5
        f->bytes_written++;
 80058d6:	609c      	str	r4, [r3, #8]
        if (f->bytes_written <= f->size)
 80058d8:	d8f5      	bhi.n	80058c6 <memfile_write+0x6>
            *f->buffer++ = *bp++;
 80058da:	685c      	ldr	r4, [r3, #4]
            i++;
 80058dc:	3001      	adds	r0, #1
            *f->buffer++ = *bp++;
 80058de:	1c65      	adds	r5, r4, #1
 80058e0:	605d      	str	r5, [r3, #4]
 80058e2:	780d      	ldrb	r5, [r1, #0]
 80058e4:	3101      	adds	r1, #1
 80058e6:	7025      	strb	r5, [r4, #0]
 80058e8:	e7ed      	b.n	80058c6 <memfile_write+0x6>
	...

080058ec <fmemopen_w>:
    &memfile_write,
    NULL
};

FILE *fmemopen_w(struct MemFile* storage, char *buffer, size_t size)
{
 80058ec:	b510      	push	{r4, lr}
    storage->file.vmt = &MemFile_methods;
 80058ee:	4c03      	ldr	r4, [pc, #12]	; (80058fc <fmemopen_w+0x10>)
    storage->buffer = buffer;
 80058f0:	e9c0 4100 	strd	r4, r1, [r0]
    storage->bytes_written = 0;
 80058f4:	2100      	movs	r1, #0
    storage->size = size;
 80058f6:	e9c0 1202 	strd	r1, r2, [r0, #8]
    return (FILE*)storage;
}
 80058fa:	bd10      	pop	{r4, pc}
 80058fc:	0800de2c 	.word	0x0800de2c

08005900 <stdin_read>:

static size_t
stdin_read(FILE *fp, char *bp, size_t n)
{
    return 0;
}
 8005900:	2000      	movs	r0, #0
 8005902:	4770      	bx	lr

08005904 <stdout_write>:

static size_t
stdout_write(FILE *fp, const char *bp, size_t n)
{
 8005904:	b510      	push	{r4, lr}
 8005906:	4614      	mov	r4, r2
 8005908:	4608      	mov	r0, r1
    console_write(bp, n);
 800590a:	4611      	mov	r1, r2
 800590c:	f7fc fc5a 	bl	80021c4 <console_write>
    return n;
}
 8005910:	4620      	mov	r0, r4
 8005912:	bd10      	pop	{r4, pc}

08005914 <hmac_prng_init>:
static struct tc_hmac_prng_struct prng;  //  TinyCrypt HMAC PRNG.
static uint8_t hw_id[12];  //  Hardware ID is 12 bytes for STM32
static int hw_id_len;      //  Actual length of hardware ID
static uint8_t seed[32];   //  Seed must be >= 32 bytes long

void hmac_prng_init(void) {
 8005914:	b530      	push	{r4, r5, lr}
#define ENTROPY
#ifdef ENTROPY
    //  Use the internal temperature sensor as a source of entropy (noise) for the generator.
    int rawtemp;
    //  Open the temp_stm32 internal temperature sensor driver.  Assumes already started with "stm32f1_adc_create();  temp_stm32_create();""
    struct temp_stm32 *dev = (struct temp_stm32 *) os_dev_open(TEMP_STM32_DEVICE, OS_TIMEOUT_NEVER, NULL);  assert(dev);
 8005916:	2200      	movs	r2, #0
void hmac_prng_init(void) {
 8005918:	b085      	sub	sp, #20
    struct temp_stm32 *dev = (struct temp_stm32 *) os_dev_open(TEMP_STM32_DEVICE, OS_TIMEOUT_NEVER, NULL);  assert(dev);
 800591a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800591e:	4826      	ldr	r0, [pc, #152]	; (80059b8 <hmac_prng_init+0xa4>)
 8005920:	f7fe fb52 	bl	8003fc8 <os_dev_open>
 8005924:	4604      	mov	r4, r0
 8005926:	b928      	cbnz	r0, 8005934 <hmac_prng_init+0x20>
 8005928:	2300      	movs	r3, #0
 800592a:	461a      	mov	r2, r3
 800592c:	4619      	mov	r1, r3
 800592e:	4618      	mov	r0, r3
 8005930:	f7fe f8c0 	bl	8003ab4 <__assert_func>

    //  Fetch 32 bytes of temperature noise into the seed array.
    rc = temp_stm32_get_raw_temperature(dev, sizeof(seed) * 2, &rawtemp, seed); assert(rc == 0);
 8005934:	4b21      	ldr	r3, [pc, #132]	; (80059bc <hmac_prng_init+0xa8>)
 8005936:	aa03      	add	r2, sp, #12
 8005938:	2140      	movs	r1, #64	; 0x40
 800593a:	f000 faaf 	bl	8005e9c <temp_stm32_get_raw_temperature>
 800593e:	4605      	mov	r5, r0
 8005940:	2800      	cmp	r0, #0
 8005942:	d1f1      	bne.n	8005928 <hmac_prng_init+0x14>
    os_dev_close((struct os_dev *) dev);  //  Close the driver.
 8005944:	4620      	mov	r0, r4
 8005946:	f7fe fb60 	bl	800400a <os_dev_close>
#endif  //  ENTROPY

    //  Fetch the hardware ID.  This is unique across all microcontrollers.  
    hw_id_len = hal_bsp_hw_id_len();     //  Fetch the length, i.e. 12
 800594a:	f7fd fe0e 	bl	800356a <hal_bsp_hw_id_len>
 800594e:	4c1c      	ldr	r4, [pc, #112]	; (80059c0 <hmac_prng_init+0xac>)
    assert(hw_id_len >= sizeof(hw_id));  //  Hardware ID too short.
 8005950:	280b      	cmp	r0, #11
    hw_id_len = hal_bsp_hw_id_len();     //  Fetch the length, i.e. 12
 8005952:	6020      	str	r0, [r4, #0]
    assert(hw_id_len >= sizeof(hw_id));  //  Hardware ID too short.
 8005954:	d9e8      	bls.n	8005928 <hmac_prng_init+0x14>
    hw_id_len = hal_bsp_hw_id(hw_id, sizeof(hw_id));  assert(hw_id_len > 0);  //  Get the hardware ID.
 8005956:	210c      	movs	r1, #12
 8005958:	481a      	ldr	r0, [pc, #104]	; (80059c4 <hmac_prng_init+0xb0>)
 800595a:	f7fd fe09 	bl	8003570 <hal_bsp_hw_id>
 800595e:	2800      	cmp	r0, #0
 8005960:	6020      	str	r0, [r4, #0]
 8005962:	dde1      	ble.n	8005928 <hmac_prng_init+0x14>

    //  Personalise the random number generator with the hardware ID.
    //  TinyCrypt uses the hardware ID to prevent generating similar random numbers across microcontrollers.
    console_printf("RND personalise with hw id "); console_dump(hw_id, hw_id_len); console_printf("\n"); console_flush(); ////
 8005964:	4818      	ldr	r0, [pc, #96]	; (80059c8 <hmac_prng_init+0xb4>)
 8005966:	f7fc fc61 	bl	800222c <console_printf>
 800596a:	6821      	ldr	r1, [r4, #0]
 800596c:	4815      	ldr	r0, [pc, #84]	; (80059c4 <hmac_prng_init+0xb0>)
 800596e:	f7fc fbf5 	bl	800215c <console_dump>
 8005972:	4816      	ldr	r0, [pc, #88]	; (80059cc <hmac_prng_init+0xb8>)
 8005974:	f7fc fc5a 	bl	800222c <console_printf>
 8005978:	f7fc fb7e 	bl	8002078 <console_flush>
    rc = tc_hmac_prng_init(&prng, hw_id, hw_id_len);  assert(rc);
 800597c:	6822      	ldr	r2, [r4, #0]
 800597e:	4911      	ldr	r1, [pc, #68]	; (80059c4 <hmac_prng_init+0xb0>)
 8005980:	4813      	ldr	r0, [pc, #76]	; (80059d0 <hmac_prng_init+0xbc>)
 8005982:	f000 fff3 	bl	800696c <tc_hmac_prng_init>
 8005986:	2800      	cmp	r0, #0
 8005988:	d0ce      	beq.n	8005928 <hmac_prng_init+0x14>

#ifdef ENTROPY
    console_printf("RND seed with temp entropy "); console_dump(seed, sizeof(seed)); console_printf("\n"); console_flush(); ////
 800598a:	4812      	ldr	r0, [pc, #72]	; (80059d4 <hmac_prng_init+0xc0>)
 800598c:	f7fc fc4e 	bl	800222c <console_printf>
 8005990:	2120      	movs	r1, #32
 8005992:	480a      	ldr	r0, [pc, #40]	; (80059bc <hmac_prng_init+0xa8>)
 8005994:	f7fc fbe2 	bl	800215c <console_dump>
 8005998:	480c      	ldr	r0, [pc, #48]	; (80059cc <hmac_prng_init+0xb8>)
 800599a:	f7fc fc47 	bl	800222c <console_printf>
 800599e:	f7fc fb6b 	bl	8002078 <console_flush>
#else
    console_printf("NO ENTROPY\n");
#endif  //  ENTROPY

    //  Use the temperature entropy data to seed the generator.  Seed must be >= 32 bytes long.
    rc = tc_hmac_prng_reseed(&prng, seed, sizeof(seed), NULL, 0);
 80059a2:	9500      	str	r5, [sp, #0]
 80059a4:	462b      	mov	r3, r5
 80059a6:	2220      	movs	r2, #32
 80059a8:	4904      	ldr	r1, [pc, #16]	; (80059bc <hmac_prng_init+0xa8>)
 80059aa:	4809      	ldr	r0, [pc, #36]	; (80059d0 <hmac_prng_init+0xbc>)
 80059ac:	f001 f802 	bl	80069b4 <tc_hmac_prng_reseed>
    assert(rc);
 80059b0:	2800      	cmp	r0, #0
 80059b2:	d0b9      	beq.n	8005928 <hmac_prng_init+0x14>
}
 80059b4:	b005      	add	sp, #20
 80059b6:	bd30      	pop	{r4, r5, pc}
 80059b8:	0800de38 	.word	0x0800de38
 80059bc:	20002918 	.word	0x20002918
 80059c0:	200027d8 	.word	0x200027d8
 80059c4:	200027cc 	.word	0x200027cc
 80059c8:	0800de45 	.word	0x0800de45
 80059cc:	0800e41f 	.word	0x0800e41f
 80059d0:	200027e0 	.word	0x200027e0
 80059d4:	0800de61 	.word	0x0800de61

080059d8 <hmac_prng_generate>:

int hmac_prng_generate(uint8_t *rnd, unsigned int rndlen) {
 80059d8:	b508      	push	{r3, lr}
    //  Generate a random number of length rndlen bytes and save to rnd.  Return 0 if successful.
    int rc;
    //  Call TinyCrypt to generate the random number.
    rc = tc_hmac_prng_generate(rnd, rndlen, &prng);  assert(rc);
 80059da:	4a05      	ldr	r2, [pc, #20]	; (80059f0 <hmac_prng_generate+0x18>)
 80059dc:	f001 f805 	bl	80069ea <tc_hmac_prng_generate>
 80059e0:	4603      	mov	r3, r0
 80059e2:	b918      	cbnz	r0, 80059ec <hmac_prng_generate+0x14>
 80059e4:	4602      	mov	r2, r0
 80059e6:	4601      	mov	r1, r0
 80059e8:	f7fe f864 	bl	8003ab4 <__assert_func>
    return 0;
}
 80059ec:	2000      	movs	r0, #0
 80059ee:	bd08      	pop	{r3, pc}
 80059f0:	200027e0 	.word	0x200027e0

080059f4 <rust_sysinit>:
#include <sysinit/sysinit.h>  //  Contains all app settings consolidated from "apps/my_sensor_app/syscfg.yml" and "targets/bluepill_my_sensor/syscfg.yml"

///  Initialise the Mynewt system.  Start the Mynewt drivers and libraries.  Equivalent to `sysinit()` macro in C.
void rust_sysinit() {
 80059f4:	b508      	push	{r3, lr}
    sysinit();
 80059f6:	f7fd f987 	bl	8002d08 <sysinit_start>
 80059fa:	f000 ff19 	bl	8006830 <sysinit_app>
}
 80059fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    sysinit();
 8005a02:	f7fd b987 	b.w	8002d14 <sysinit_end>

08005a06 <get_temp_raw_data>:
#include <sensor/temperature.h>
#include <custom_sensor/custom_sensor.h>

///  Interpret `sensor_data` as a `sensor_temp_raw_data` struct that contains raw temp.
///  Copy the sensor data into `dest`.  Return 0 if successful.
int get_temp_raw_data(void *sensor_data, struct sensor_temp_raw_data *dest) {
 8005a06:	b508      	push	{r3, lr}
    assert(sensor_data); assert(dest);
 8005a08:	b928      	cbnz	r0, 8005a16 <get_temp_raw_data+0x10>
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	461a      	mov	r2, r3
 8005a0e:	4619      	mov	r1, r3
 8005a10:	4618      	mov	r0, r3
 8005a12:	f7fe f84f 	bl	8003ab4 <__assert_func>
 8005a16:	2900      	cmp	r1, #0
 8005a18:	d0f7      	beq.n	8005a0a <get_temp_raw_data+0x4>
    struct sensor_temp_raw_data *src = (struct sensor_temp_raw_data *) sensor_data;
    memcpy(dest, src, sizeof(struct sensor_temp_raw_data));
 8005a1a:	6803      	ldr	r3, [r0, #0]
 8005a1c:	600b      	str	r3, [r1, #0]
 8005a1e:	7903      	ldrb	r3, [r0, #4]
    return 0;
}
 8005a20:	2000      	movs	r0, #0
    memcpy(dest, src, sizeof(struct sensor_temp_raw_data));
 8005a22:	710b      	strb	r3, [r1, #4]
}
 8005a24:	bd08      	pop	{r3, pc}

08005a26 <get_temp_data>:

///  Interpret `sensor_data` as a `sensor_temp_data` struct that contains computed temp.
///  Copy the sensor data into `dest`.  Return 0 if successful.
int get_temp_data(void *sensor_data, struct sensor_temp_data *dest) {
 8005a26:	b508      	push	{r3, lr}
    assert(sensor_data); assert(dest);
 8005a28:	b928      	cbnz	r0, 8005a36 <get_temp_data+0x10>
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	4619      	mov	r1, r3
 8005a30:	4618      	mov	r0, r3
 8005a32:	f7fe f83f 	bl	8003ab4 <__assert_func>
 8005a36:	2900      	cmp	r1, #0
 8005a38:	d0f7      	beq.n	8005a2a <get_temp_data+0x4>
    struct sensor_temp_data *src = (struct sensor_temp_data *) sensor_data;
    memcpy(dest, src, sizeof(struct sensor_temp_data));
 8005a3a:	6803      	ldr	r3, [r0, #0]
 8005a3c:	600b      	str	r3, [r1, #0]
 8005a3e:	7903      	ldrb	r3, [r0, #4]
    return 0;
}
 8005a40:	2000      	movs	r0, #0
    memcpy(dest, src, sizeof(struct sensor_temp_data));
 8005a42:	710b      	strb	r3, [r1, #4]
}
 8005a44:	bd08      	pop	{r3, pc}

08005a46 <sensor_get_device>:

///  Return the Mynewt device for the Mynewt sensor.
struct os_dev *sensor_get_device(struct sensor *s) {
 8005a46:	b508      	push	{r3, lr}
    assert(s);
 8005a48:	4603      	mov	r3, r0
 8005a4a:	b918      	cbnz	r0, 8005a54 <sensor_get_device+0xe>
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	4601      	mov	r1, r0
 8005a50:	f7fe f830 	bl	8003ab4 <__assert_func>
    struct os_dev *device = SENSOR_GET_DEVICE(s);
    return device;
}
 8005a54:	6800      	ldr	r0, [r0, #0]
 8005a56:	bd08      	pop	{r3, pc}

08005a58 <device_get_name>:

///  Return the name for the Mynewt device.  Assumes name is non-null.
const char *device_get_name(struct os_dev *device) {
 8005a58:	b508      	push	{r3, lr}
    assert(device);
 8005a5a:	b928      	cbnz	r0, 8005a68 <device_get_name+0x10>
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	461a      	mov	r2, r3
 8005a60:	4619      	mov	r1, r3
 8005a62:	4618      	mov	r0, r3
 8005a64:	f7fe f826 	bl	8003ab4 <__assert_func>
    const char *name = device->od_name;
 8005a68:	69c0      	ldr	r0, [r0, #28]
    assert(name);
 8005a6a:	2800      	cmp	r0, #0
 8005a6c:	d0f6      	beq.n	8005a5c <device_get_name+0x4>
    return name;
}
 8005a6e:	bd08      	pop	{r3, pc}

08005a70 <null_sensor>:

///  Return the NULL sensor.
struct sensor *null_sensor(void) { return NULL; }
 8005a70:	2000      	movs	r0, #0
 8005a72:	4770      	bx	lr

08005a74 <is_null_sensor>:

///  Return non-zero if sensor is NULL.
int is_null_sensor(struct sensor *p) { return p ? 0 : 1; }
 8005a74:	fab0 f080 	clz	r0, r0
 8005a78:	0940      	lsrs	r0, r0, #5
 8005a7a:	4770      	bx	lr

08005a7c <is_null_sensor_data>:

///  Return non-zero if sensor data is NULL.
int is_null_sensor_data(void *p) { return p ? 0 : 1; }
 8005a7c:	fab0 f080 	clz	r0, r0
 8005a80:	0940      	lsrs	r0, r0, #5
 8005a82:	4770      	bx	lr

08005a84 <cbor_cnt_writer>:
};

static inline int
cbor_cnt_writer(struct cbor_encoder_writer *arg, const char *data, int len) {
    struct CborCntWriter *cb = (struct CborCntWriter *) arg;
    cb->enc.bytes_written += len;
 8005a84:	6843      	ldr	r3, [r0, #4]
 8005a86:	441a      	add	r2, r3
 8005a88:	6042      	str	r2, [r0, #4]
    return CborNoError;
}
 8005a8a:	2000      	movs	r0, #0
 8005a8c:	4770      	bx	lr
	...

08005a90 <handle_coap_response>:
    return oc_sensor_coap_ready;
}

static void handle_coap_response(oc_client_response_t *data) {
    //  Handle CoAP response.
    console_printf("handle_coap\n");
 8005a90:	4801      	ldr	r0, [pc, #4]	; (8005a98 <handle_coap_response+0x8>)
 8005a92:	f7fc bbcb 	b.w	800222c <console_printf>
 8005a96:	bf00      	nop
 8005a98:	0800de7d 	.word	0x0800de7d

08005a9c <json_rep_finalize.part.2>:

struct json_encoder coap_json_encoder;  //  Note: We don't support concurrent encoding of JSON messages.
struct json_value coap_json_value;
static struct os_mbuf *coap_json_mbuf;  //  The mbuf that contains the outgoing CoAP payload.

int json_write_mbuf(void *buf, char *data, int len) {
 8005a9c:	b508      	push	{r3, lr}
    //  Write the JSON to the mbuf for the outgoing CoAP message.
    if (oc_content_format != APPLICATION_JSON) { return 0; }  //  Exit if we are encoding CBOR, not JSON.
    assert(coap_json_mbuf);
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	4619      	mov	r1, r3
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	f7fe f805 	bl	8003ab4 <__assert_func>
	...

08005aac <json_write_mbuf>:
    if (oc_content_format != APPLICATION_JSON) { return 0; }  //  Exit if we are encoding CBOR, not JSON.
 8005aac:	480b      	ldr	r0, [pc, #44]	; (8005adc <json_write_mbuf+0x30>)
int json_write_mbuf(void *buf, char *data, int len) {
 8005aae:	b508      	push	{r3, lr}
    if (oc_content_format != APPLICATION_JSON) { return 0; }  //  Exit if we are encoding CBOR, not JSON.
 8005ab0:	6800      	ldr	r0, [r0, #0]
 8005ab2:	2832      	cmp	r0, #50	; 0x32
 8005ab4:	d110      	bne.n	8005ad8 <json_write_mbuf+0x2c>
    assert(coap_json_mbuf);
 8005ab6:	480a      	ldr	r0, [pc, #40]	; (8005ae0 <json_write_mbuf+0x34>)
 8005ab8:	6800      	ldr	r0, [r0, #0]
 8005aba:	b908      	cbnz	r0, 8005ac0 <json_write_mbuf+0x14>
 8005abc:	f7ff ffee 	bl	8005a9c <json_rep_finalize.part.2>
    assert(data);
 8005ac0:	b929      	cbnz	r1, 8005ace <json_write_mbuf+0x22>
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	4619      	mov	r1, r3
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f7fd fff3 	bl	8003ab4 <__assert_func>
    //  console_printf("json "); console_buffer(data, len); console_printf("\n");  ////
    int rc = os_mbuf_append(coap_json_mbuf, data, len);  assert(rc == 0);
 8005ace:	b292      	uxth	r2, r2
 8005ad0:	f7fe fc0f 	bl	80042f2 <os_mbuf_append>
 8005ad4:	2800      	cmp	r0, #0
 8005ad6:	d1f4      	bne.n	8005ac2 <json_write_mbuf+0x16>
    if (rc) { return -1; }
    return 0;
}
 8005ad8:	2000      	movs	r0, #0
 8005ada:	bd08      	pop	{r3, pc}
 8005adc:	200029b8 	.word	0x200029b8
 8005ae0:	20002940 	.word	0x20002940

08005ae4 <init_sensor_coap>:
void init_sensor_coap(void) {
 8005ae4:	b508      	push	{r3, lr}
    os_error_t rc = os_sem_init(&oc_sem, 1);  //  Init to 1 token, so only 1 caller will be allowed.
 8005ae6:	2101      	movs	r1, #1
 8005ae8:	4806      	ldr	r0, [pc, #24]	; (8005b04 <init_sensor_coap+0x20>)
 8005aea:	f003 fce6 	bl	80094ba <os_sem_init>
    assert(rc == OS_OK);
 8005aee:	b128      	cbz	r0, 8005afc <init_sensor_coap+0x18>
 8005af0:	2300      	movs	r3, #0
 8005af2:	461a      	mov	r2, r3
 8005af4:	4619      	mov	r1, r3
 8005af6:	4618      	mov	r0, r3
 8005af8:	f7fd ffdc 	bl	8003ab4 <__assert_func>
    oc_sensor_coap_ready = true;
 8005afc:	2201      	movs	r2, #1
 8005afe:	4b02      	ldr	r3, [pc, #8]	; (8005b08 <init_sensor_coap+0x24>)
 8005b00:	701a      	strb	r2, [r3, #0]
}
 8005b02:	bd08      	pop	{r3, pc}
 8005b04:	200029bc 	.word	0x200029bc
 8005b08:	200029c4 	.word	0x200029c4

08005b0c <json_rep_reset>:
#endif  //  MYNEWT_VAL(COAP_CBOR_ENCODING) && MYNEWT_VAL(COAP_JSON_ENCODING)
}

void json_rep_reset(void) {
    //  Close the current JSON CoAP payload.  Erase the JSON encoder.
    coap_json_mbuf = NULL;
 8005b0c:	2100      	movs	r1, #0
void json_rep_reset(void) {
 8005b0e:	b508      	push	{r3, lr}
    coap_json_mbuf = NULL;
 8005b10:	4b05      	ldr	r3, [pc, #20]	; (8005b28 <json_rep_reset+0x1c>)
    memset(&coap_json_encoder, 0, sizeof(coap_json_encoder));  //  Erase the encoder.
 8005b12:	2248      	movs	r2, #72	; 0x48
    coap_json_mbuf = NULL;
 8005b14:	6019      	str	r1, [r3, #0]
    memset(&coap_json_encoder, 0, sizeof(coap_json_encoder));  //  Erase the encoder.
 8005b16:	4b05      	ldr	r3, [pc, #20]	; (8005b2c <json_rep_reset+0x20>)
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f7ff fc34 	bl	8005386 <memset>
    coap_json_encoder.je_write = json_write_mbuf;
 8005b1e:	4a04      	ldr	r2, [pc, #16]	; (8005b30 <json_rep_reset+0x24>)
 8005b20:	f840 2c04 	str.w	r2, [r0, #-4]
}
 8005b24:	bd08      	pop	{r3, pc}
 8005b26:	bf00      	nop
 8005b28:	20002940 	.word	0x20002940
 8005b2c:	20003b3c 	.word	0x20003b3c
 8005b30:	08005aad 	.word	0x08005aad

08005b34 <json_rep_new>:
void json_rep_new(struct os_mbuf *m) {
 8005b34:	b510      	push	{r4, lr}
    assert(m);
 8005b36:	4604      	mov	r4, r0
 8005b38:	b908      	cbnz	r0, 8005b3e <json_rep_new+0xa>
 8005b3a:	f7ff ffaf 	bl	8005a9c <json_rep_finalize.part.2>
    json_rep_reset();  //  Erase the JSON encoder.
 8005b3e:	f7ff ffe5 	bl	8005b0c <json_rep_reset>

static inline void
cbor_cnt_writer_init(struct CborCntWriter *cb) {
    cb->enc.bytes_written = 0;
 8005b42:	2200      	movs	r2, #0
    coap_json_mbuf = m;
 8005b44:	4b05      	ldr	r3, [pc, #20]	; (8005b5c <json_rep_new+0x28>)
 8005b46:	4906      	ldr	r1, [pc, #24]	; (8005b60 <json_rep_new+0x2c>)
 8005b48:	601c      	str	r4, [r3, #0]
    cb->enc.write = &cbor_cnt_writer;
 8005b4a:	4b06      	ldr	r3, [pc, #24]	; (8005b64 <json_rep_new+0x30>)
    cbor_encoder_init(&g_encoder, &cnt_writer.enc, 0);
 8005b4c:	4806      	ldr	r0, [pc, #24]	; (8005b68 <json_rep_new+0x34>)
}
 8005b4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    cb->enc.bytes_written = 0;
 8005b52:	604a      	str	r2, [r1, #4]
    cb->enc.write = &cbor_cnt_writer;
 8005b54:	600b      	str	r3, [r1, #0]
    cbor_encoder_init(&g_encoder, &cnt_writer.enc, 0);
 8005b56:	f7fd b9dc 	b.w	8002f12 <cbor_encoder_init>
 8005b5a:	bf00      	nop
 8005b5c:	20002940 	.word	0x20002940
 8005b60:	20002938 	.word	0x20002938
 8005b64:	08005a85 	.word	0x08005a85
 8005b68:	20003a20 	.word	0x20003a20

08005b6c <init_sensor_post>:
    assert(oc_sensor_coap_ready);  assert(server);  assert(uri);
 8005b6c:	4b3f      	ldr	r3, [pc, #252]	; (8005c6c <init_sensor_post+0x100>)
{
 8005b6e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    assert(oc_sensor_coap_ready);  assert(server);  assert(uri);
 8005b72:	781f      	ldrb	r7, [r3, #0]
{
 8005b74:	4680      	mov	r8, r0
 8005b76:	460c      	mov	r4, r1
 8005b78:	4691      	mov	r9, r2
    assert(oc_sensor_coap_ready);  assert(server);  assert(uri);
 8005b7a:	b92f      	cbnz	r7, 8005b88 <init_sensor_post+0x1c>
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	461a      	mov	r2, r3
 8005b80:	4619      	mov	r1, r3
 8005b82:	4618      	mov	r0, r3
 8005b84:	f7fd ff96 	bl	8003ab4 <__assert_func>
 8005b88:	2800      	cmp	r0, #0
 8005b8a:	d0f7      	beq.n	8005b7c <init_sensor_post+0x10>
 8005b8c:	2900      	cmp	r1, #0
 8005b8e:	d0f5      	beq.n	8005b7c <init_sensor_post+0x10>
    assert(coap_content_format != 0);  //  CoAP Content Format not specified
 8005b90:	2a00      	cmp	r2, #0
 8005b92:	d0f3      	beq.n	8005b7c <init_sensor_post+0x10>
    os_error_t rc = os_sem_pend(&oc_sem, OS_TIMEOUT_NEVER);  //  Allow only 1 task to be creating a sensor request at any time.
 8005b94:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005b98:	4835      	ldr	r0, [pc, #212]	; (8005c70 <init_sensor_post+0x104>)
 8005b9a:	f003 fcc9 	bl	8009530 <os_sem_pend>
    assert(rc == OS_OK);
 8005b9e:	4605      	mov	r5, r0
 8005ba0:	2800      	cmp	r0, #0
 8005ba2:	d1eb      	bne.n	8005b7c <init_sensor_post+0x10>
    cb = oc_ri_alloc_client_cb(uri, server, OC_POST, handler, qos);
 8005ba4:	2301      	movs	r3, #1
    oc_content_format = coap_content_format;
 8005ba6:	4e33      	ldr	r6, [pc, #204]	; (8005c74 <init_sensor_post+0x108>)
    cb = oc_ri_alloc_client_cb(uri, server, OC_POST, handler, qos);
 8005ba8:	9300      	str	r3, [sp, #0]
 8005baa:	4620      	mov	r0, r4
 8005bac:	4b32      	ldr	r3, [pc, #200]	; (8005c78 <init_sensor_post+0x10c>)
 8005bae:	2202      	movs	r2, #2
 8005bb0:	4641      	mov	r1, r8
    oc_content_format = coap_content_format;
 8005bb2:	f8c6 9000 	str.w	r9, [r6]
    cb = oc_ri_alloc_client_cb(uri, server, OC_POST, handler, qos);
 8005bb6:	f000 fac5 	bl	8006144 <oc_ri_alloc_client_cb>
    if (!cb) {
 8005bba:	4604      	mov	r4, r0
 8005bbc:	b948      	cbnz	r0, 8005bd2 <init_sensor_post+0x66>
        rc = os_sem_release(&oc_sem);  //  Failed.  Release the semaphore.
 8005bbe:	482c      	ldr	r0, [pc, #176]	; (8005c70 <init_sensor_post+0x104>)
 8005bc0:	f003 fc84 	bl	80094cc <os_sem_release>
        assert(rc == OS_OK);
 8005bc4:	2800      	cmp	r0, #0
 8005bc6:	d1d9      	bne.n	8005b7c <init_sensor_post+0x10>
        return false;
 8005bc8:	2700      	movs	r7, #0
}
 8005bca:	4638      	mov	r0, r7
 8005bcc:	b003      	add	sp, #12
 8005bce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    oc_c_rsp = os_msys_get_pkthdr(0, 0);
 8005bd2:	4629      	mov	r1, r5
 8005bd4:	4628      	mov	r0, r5
 8005bd6:	f7fe fe1b 	bl	8004810 <os_msys_get_pkthdr>
 8005bda:	4d28      	ldr	r5, [pc, #160]	; (8005c7c <init_sensor_post+0x110>)
 8005bdc:	6028      	str	r0, [r5, #0]
    if (!oc_c_rsp) {
 8005bde:	2800      	cmp	r0, #0
 8005be0:	d0f2      	beq.n	8005bc8 <init_sensor_post+0x5c>
    oc_c_message = oc_allocate_mbuf(&cb->server.endpoint);
 8005be2:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8005be6:	f000 fa1d 	bl	8006024 <oc_allocate_mbuf>
 8005bea:	4b25      	ldr	r3, [pc, #148]	; (8005c80 <init_sensor_post+0x114>)
 8005bec:	4680      	mov	r8, r0
 8005bee:	6018      	str	r0, [r3, #0]
    if (!oc_c_message) {
 8005bf0:	2800      	cmp	r0, #0
 8005bf2:	d034      	beq.n	8005c5e <init_sensor_post+0xf2>
    if (oc_content_format == APPLICATION_JSON) { 
 8005bf4:	6833      	ldr	r3, [r6, #0]
 8005bf6:	2b32      	cmp	r3, #50	; 0x32
 8005bf8:	d12b      	bne.n	8005c52 <init_sensor_post+0xe6>
        json_rep_new(oc_c_rsp); 
 8005bfa:	6828      	ldr	r0, [r5, #0]
 8005bfc:	f7ff ff9a 	bl	8005b34 <json_rep_new>
    coap_init_message(oc_c_request, type, cb->method, cb->mid);
 8005c00:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005c02:	f894 2061 	ldrb.w	r2, [r4, #97]	; 0x61
 8005c06:	2101      	movs	r1, #1
 8005c08:	481e      	ldr	r0, [pc, #120]	; (8005c84 <init_sensor_post+0x118>)
 8005c0a:	f000 fb8b 	bl	8006324 <coap_init_message>
    coap_set_header_accept(oc_c_request, oc_content_format);  //  Either JSON or CBOR.
 8005c0e:	6831      	ldr	r1, [r6, #0]
 8005c10:	481c      	ldr	r0, [pc, #112]	; (8005c84 <init_sensor_post+0x118>)
 8005c12:	f000 fd64 	bl	80066de <coap_set_header_accept>
    coap_set_token(oc_c_request, cb->token, cb->token_len);
 8005c16:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8005c1a:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 8005c1e:	4819      	ldr	r0, [pc, #100]	; (8005c84 <init_sensor_post+0x118>)
 8005c20:	f000 fd4b 	bl	80066ba <coap_set_token>
    coap_set_header_uri_path(oc_c_request, oc_string(cb->uri));
 8005c24:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005c26:	4817      	ldr	r0, [pc, #92]	; (8005c84 <init_sensor_post+0x118>)
 8005c28:	f000 fd60 	bl	80066ec <coap_set_header_uri_path>
    if (cb->observe_seq != -1) {
 8005c2c:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005c2e:	1c4b      	adds	r3, r1, #1
 8005c30:	d002      	beq.n	8005c38 <init_sensor_post+0xcc>
        coap_set_header_observe(oc_c_request, cb->observe_seq);
 8005c32:	4814      	ldr	r0, [pc, #80]	; (8005c84 <init_sensor_post+0x118>)
 8005c34:	f000 fd6b 	bl	800670e <coap_set_header_observe>
    if (cb->observe_seq == -1 && cb->qos == LOW_QOS) {
 8005c38:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005c3a:	3301      	adds	r3, #1
 8005c3c:	d1c5      	bne.n	8005bca <init_sensor_post+0x5e>
 8005c3e:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	d1c1      	bne.n	8005bca <init_sensor_post+0x5e>
        os_callout_reset(&cb->callout,
 8005c46:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8005c4a:	1d20      	adds	r0, r4, #4
 8005c4c:	f7fe f8be 	bl	8003dcc <os_callout_reset>
 8005c50:	e7bb      	b.n	8005bca <init_sensor_post+0x5e>
    else if (oc_content_format == APPLICATION_CBOR) { 
 8005c52:	2b3c      	cmp	r3, #60	; 0x3c
 8005c54:	d192      	bne.n	8005b7c <init_sensor_post+0x10>
        oc_rep_new(oc_c_rsp); 
 8005c56:	6828      	ldr	r0, [r5, #0]
 8005c58:	f7fc ff28 	bl	8002aac <oc_rep_new>
 8005c5c:	e7d0      	b.n	8005c00 <init_sensor_post+0x94>
    os_mbuf_free_chain(oc_c_rsp);
 8005c5e:	6828      	ldr	r0, [r5, #0]
 8005c60:	f7fe fb31 	bl	80042c6 <os_mbuf_free_chain>
    return false;
 8005c64:	4647      	mov	r7, r8
    oc_c_rsp = NULL;
 8005c66:	f8c5 8000 	str.w	r8, [r5]
 8005c6a:	e7ae      	b.n	8005bca <init_sensor_post+0x5e>
 8005c6c:	200029c4 	.word	0x200029c4
 8005c70:	200029bc 	.word	0x200029bc
 8005c74:	200029b8 	.word	0x200029b8
 8005c78:	08005a91 	.word	0x08005a91
 8005c7c:	200029b4 	.word	0x200029b4
 8005c80:	20002944 	.word	0x20002944
 8005c84:	20002948 	.word	0x20002948

08005c88 <json_rep_finalize>:

int json_rep_finalize(void) {
 8005c88:	b538      	push	{r3, r4, r5, lr}
    //  Finalise the payload and return the payload size.
    assert(coap_json_mbuf);
 8005c8a:	4c0e      	ldr	r4, [pc, #56]	; (8005cc4 <json_rep_finalize+0x3c>)
 8005c8c:	6823      	ldr	r3, [r4, #0]
 8005c8e:	b90b      	cbnz	r3, 8005c94 <json_rep_finalize+0xc>
 8005c90:	f7ff ff04 	bl	8005a9c <json_rep_finalize.part.2>
    int size = OS_MBUF_PKTLEN(coap_json_mbuf);
 8005c94:	8a1d      	ldrh	r5, [r3, #16]
#define DUMP_COAP
#ifdef DUMP_COAP
    console_printf("NET payload size %d\n", size); struct os_mbuf *m = coap_json_mbuf;
 8005c96:	480c      	ldr	r0, [pc, #48]	; (8005cc8 <json_rep_finalize+0x40>)
 8005c98:	4629      	mov	r1, r5
 8005c9a:	f7fc fac7 	bl	800222c <console_printf>
 8005c9e:	6824      	ldr	r4, [r4, #0]
    while (m) {
 8005ca0:	b934      	cbnz	r4, 8005cb0 <json_rep_finalize+0x28>
        console_buffer((const char *) (m->om_databuf + m->om_pkthdr_len), m->om_len);
        m = m->om_next.sle_next;
    } console_printf("\n");
 8005ca2:	480a      	ldr	r0, [pc, #40]	; (8005ccc <json_rep_finalize+0x44>)
 8005ca4:	f7fc fac2 	bl	800222c <console_printf>
#endif  //  DUMP_COAP

    json_rep_reset();
 8005ca8:	f7ff ff30 	bl	8005b0c <json_rep_reset>
    return size;
}
 8005cac:	4628      	mov	r0, r5
 8005cae:	bd38      	pop	{r3, r4, r5, pc}
        console_buffer((const char *) (m->om_databuf + m->om_pkthdr_len), m->om_len);
 8005cb0:	7963      	ldrb	r3, [r4, #5]
 8005cb2:	f104 0010 	add.w	r0, r4, #16
 8005cb6:	88e1      	ldrh	r1, [r4, #6]
 8005cb8:	4418      	add	r0, r3
 8005cba:	f7fc fa0b 	bl	80020d4 <console_buffer>
        m = m->om_next.sle_next;
 8005cbe:	68e4      	ldr	r4, [r4, #12]
 8005cc0:	e7ee      	b.n	8005ca0 <json_rep_finalize+0x18>
 8005cc2:	bf00      	nop
 8005cc4:	20002940 	.word	0x20002940
 8005cc8:	0800de8a 	.word	0x0800de8a
 8005ccc:	0800e41f 	.word	0x0800e41f

08005cd0 <do_sensor_post>:
{
 8005cd0:	b538      	push	{r3, r4, r5, lr}
    assert(oc_content_format);
 8005cd2:	4c20      	ldr	r4, [pc, #128]	; (8005d54 <do_sensor_post+0x84>)
 8005cd4:	6822      	ldr	r2, [r4, #0]
 8005cd6:	b92a      	cbnz	r2, 8005ce4 <do_sensor_post+0x14>
 8005cd8:	2300      	movs	r3, #0
 8005cda:	461a      	mov	r2, r3
 8005cdc:	4619      	mov	r1, r3
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f7fd fee8 	bl	8003ab4 <__assert_func>
        (oc_content_format == APPLICATION_JSON) ? json_rep_finalize() :
 8005ce4:	2a32      	cmp	r2, #50	; 0x32
 8005ce6:	4d1c      	ldr	r5, [pc, #112]	; (8005d58 <do_sensor_post+0x88>)
 8005ce8:	d126      	bne.n	8005d38 <do_sensor_post+0x68>
 8005cea:	f7ff ffcd 	bl	8005c88 <json_rep_finalize>
    if (response_length) {
 8005cee:	b340      	cbz	r0, 8005d42 <do_sensor_post+0x72>
        oc_c_request->payload_m = oc_c_rsp;
 8005cf0:	4b1a      	ldr	r3, [pc, #104]	; (8005d5c <do_sensor_post+0x8c>)
 8005cf2:	682a      	ldr	r2, [r5, #0]
        oc_c_request->payload_len = response_length;
 8005cf4:	f8a3 0062 	strh.w	r0, [r3, #98]	; 0x62
        oc_c_request->payload_m = oc_c_rsp;
 8005cf8:	669a      	str	r2, [r3, #104]	; 0x68
        coap_set_header_content_format(oc_c_request, oc_content_format);  //  Either JSON or CBOR.
 8005cfa:	6821      	ldr	r1, [r4, #0]
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f000 fce7 	bl	80066d0 <coap_set_header_content_format>
    oc_c_rsp = NULL;
 8005d02:	2300      	movs	r3, #0
    if (oc_c_message) {
 8005d04:	4c16      	ldr	r4, [pc, #88]	; (8005d60 <do_sensor_post+0x90>)
    oc_c_rsp = NULL;
 8005d06:	602b      	str	r3, [r5, #0]
    if (oc_c_message) {
 8005d08:	6821      	ldr	r1, [r4, #0]
 8005d0a:	b309      	cbz	r1, 8005d50 <do_sensor_post+0x80>
        if (!coap_serialize_message(oc_c_request, oc_c_message)) {
 8005d0c:	4813      	ldr	r0, [pc, #76]	; (8005d5c <do_sensor_post+0x8c>)
 8005d0e:	f000 fb17 	bl	8006340 <coap_serialize_message>
 8005d12:	4601      	mov	r1, r0
            coap_send_message(oc_c_message, 0);
 8005d14:	6820      	ldr	r0, [r4, #0]
        if (!coap_serialize_message(oc_c_request, oc_c_message)) {
 8005d16:	b9c1      	cbnz	r1, 8005d4a <do_sensor_post+0x7a>
            coap_send_message(oc_c_message, 0);
 8005d18:	f000 fcc2 	bl	80066a0 <coap_send_message>
        oc_ri_remove_client_cb_by_mid(oc_c_request->mid);
 8005d1c:	4b0f      	ldr	r3, [pc, #60]	; (8005d5c <do_sensor_post+0x8c>)
 8005d1e:	8898      	ldrh	r0, [r3, #4]
 8005d20:	f000 fa04 	bl	800612c <oc_ri_remove_client_cb_by_mid>
        oc_c_message = NULL;
 8005d24:	2300      	movs	r3, #0
 8005d26:	6023      	str	r3, [r4, #0]
        ret = true;
 8005d28:	2401      	movs	r4, #1
    os_error_t rc = os_sem_release(&oc_sem);  //  Request completed.  Release the semaphore for another request.
 8005d2a:	480e      	ldr	r0, [pc, #56]	; (8005d64 <do_sensor_post+0x94>)
 8005d2c:	f003 fbce 	bl	80094cc <os_sem_release>
    assert(rc == OS_OK);
 8005d30:	2800      	cmp	r0, #0
 8005d32:	d1d1      	bne.n	8005cd8 <do_sensor_post+0x8>
}
 8005d34:	4620      	mov	r0, r4
 8005d36:	bd38      	pop	{r3, r4, r5, pc}
        (oc_content_format == APPLICATION_CBOR) ? oc_rep_finalize() :
 8005d38:	2a3c      	cmp	r2, #60	; 0x3c
 8005d3a:	d102      	bne.n	8005d42 <do_sensor_post+0x72>
 8005d3c:	f7fc fed8 	bl	8002af0 <oc_rep_finalize>
 8005d40:	e7d5      	b.n	8005cee <do_sensor_post+0x1e>
        os_mbuf_free_chain(oc_c_rsp);
 8005d42:	6828      	ldr	r0, [r5, #0]
 8005d44:	f7fe fabf 	bl	80042c6 <os_mbuf_free_chain>
 8005d48:	e7db      	b.n	8005d02 <do_sensor_post+0x32>
            os_mbuf_free_chain(oc_c_message);
 8005d4a:	f7fe fabc 	bl	80042c6 <os_mbuf_free_chain>
 8005d4e:	e7e5      	b.n	8005d1c <do_sensor_post+0x4c>
    bool ret = false;
 8005d50:	460c      	mov	r4, r1
 8005d52:	e7ea      	b.n	8005d2a <do_sensor_post+0x5a>
 8005d54:	200029b8 	.word	0x200029b8
 8005d58:	200029b4 	.word	0x200029b4
 8005d5c:	20002948 	.word	0x20002948
 8005d60:	20002944 	.word	0x20002944
 8005d64:	200029bc 	.word	0x200029bc

08005d68 <temp_stm32_sensor_get_config>:

static int temp_stm32_sensor_get_config(struct sensor *sensor, sensor_type_t type,
    struct sensor_cfg *cfg) {
    //  Return the type of the sensor value returned by the sensor.
    int rc;
    if (!(type & TEMP_SENSOR_TYPE)) {
 8005d68:	2100      	movs	r1, #0
 8005d6a:	f002 6080 	and.w	r0, r2, #67108864	; 0x4000000
 8005d6e:	ea50 0301 	orrs.w	r3, r0, r1
        rc = SYS_EINVAL;
        goto err;
    }
    cfg->sc_valtype = TEMP_SENSOR_VALUE_TYPE;  //  We return float (computed values) or int (raw values).
 8005d72:	bf1f      	itttt	ne
 8005d74:	2201      	movne	r2, #1
 8005d76:	9b00      	ldrne	r3, [sp, #0]
    return (0);
 8005d78:	2000      	movne	r0, #0
    cfg->sc_valtype = TEMP_SENSOR_VALUE_TYPE;  //  We return float (computed values) or int (raw values).
 8005d7a:	701a      	strbne	r2, [r3, #0]
err:
    return (rc);
 8005d7c:	bf08      	it	eq
 8005d7e:	f06f 0001 	mvneq.w	r0, #1
}
 8005d82:	4770      	bx	lr

08005d84 <temp_stm32_close>:
static int temp_stm32_close(struct os_dev *dev0) {
 8005d84:	b510      	push	{r4, lr}
 8005d86:	4604      	mov	r4, r0
    if (dev->adc) {
 8005d88:	f8d0 00cc 	ldr.w	r0, [r0, #204]	; 0xcc
 8005d8c:	b120      	cbz	r0, 8005d98 <temp_stm32_close+0x14>
        os_dev_close((struct os_dev *) dev->adc);
 8005d8e:	f7fe f93c 	bl	800400a <os_dev_close>
        dev->adc = NULL;
 8005d92:	2300      	movs	r3, #0
 8005d94:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
}
 8005d98:	2000      	movs	r0, #0
 8005d9a:	bd10      	pop	{r4, pc}

08005d9c <temp_stm32_open>:
static int temp_stm32_open(struct os_dev *dev0, uint32_t timeout, void *arg) {
 8005d9c:	b510      	push	{r4, lr}
    dev = (struct temp_stm32 *) dev0;  assert(dev);  
 8005d9e:	4604      	mov	r4, r0
 8005da0:	b928      	cbnz	r0, 8005dae <temp_stm32_open+0x12>
    assert(rc == 0);
 8005da2:	2300      	movs	r3, #0
 8005da4:	461a      	mov	r2, r3
 8005da6:	4619      	mov	r1, r3
 8005da8:	4618      	mov	r0, r3
 8005daa:	f7fd fe83 	bl	8003ab4 <__assert_func>
    cfg = &dev->cfg; assert(cfg); assert(cfg->adc_channel);  assert(cfg->adc_channel_cfg);  assert(cfg->adc_dev_name);
 8005dae:	f890 30bc 	ldrb.w	r3, [r0, #188]	; 0xbc
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d0f5      	beq.n	8005da2 <temp_stm32_open+0x6>
 8005db6:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d0f1      	beq.n	8005da2 <temp_stm32_open+0x6>
 8005dbe:	f8d0 00b8 	ldr.w	r0, [r0, #184]	; 0xb8
 8005dc2:	2800      	cmp	r0, #0
 8005dc4:	d0ed      	beq.n	8005da2 <temp_stm32_open+0x6>
    dev->adc = (struct adc_dev *) os_dev_open(cfg->adc_dev_name, timeout, cfg->adc_open_arg);
 8005dc6:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
 8005dca:	f7fe f8fd 	bl	8003fc8 <os_dev_open>
 8005dce:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
    assert(dev->adc);
 8005dd2:	2800      	cmp	r0, #0
 8005dd4:	d0e5      	beq.n	8005da2 <temp_stm32_open+0x6>
    console_printf("ADC open ch 16\n");  ////
 8005dd6:	480a      	ldr	r0, [pc, #40]	; (8005e00 <temp_stm32_open+0x64>)
 8005dd8:	f7fc fa28 	bl	800222c <console_printf>
    rc = adc_chan_config(dev->adc, cfg->adc_channel, cfg->adc_channel_cfg);
 8005ddc:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 8005de0:	f894 10bc 	ldrb.w	r1, [r4, #188]	; 0xbc
 8005de4:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
 8005de8:	f001 f8ee 	bl	8006fc8 <adc_chan_config>
    if (rc) { 
 8005dec:	b130      	cbz	r0, 8005dfc <temp_stm32_open+0x60>
        if (dev->adc) { os_dev_close((struct os_dev *) dev->adc); }
 8005dee:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
 8005df2:	2800      	cmp	r0, #0
 8005df4:	d0d5      	beq.n	8005da2 <temp_stm32_open+0x6>
 8005df6:	f7fe f908 	bl	800400a <os_dev_close>
 8005dfa:	e7d2      	b.n	8005da2 <temp_stm32_open+0x6>
}
 8005dfc:	bd10      	pop	{r4, pc}
 8005dfe:	bf00      	nop
 8005e00:	0800dee7 	.word	0x0800dee7

08005e04 <temp_stm32_default_cfg>:
int temp_stm32_default_cfg(struct temp_stm32_cfg *cfg) {
 8005e04:	4603      	mov	r3, r0
    cfg->adc_dev_name    = STM32F1_ADC1_DEVICE;     //  For STM32F1: adc1
 8005e06:	4a08      	ldr	r2, [pc, #32]	; (8005e28 <temp_stm32_default_cfg+0x24>)
    memset(cfg, 0, sizeof(struct temp_stm32_cfg));  //  Zero the entire object.
 8005e08:	2000      	movs	r0, #0
    cfg->adc_dev_name    = STM32F1_ADC1_DEVICE;     //  For STM32F1: adc1
 8005e0a:	609a      	str	r2, [r3, #8]
    cfg->adc_channel     = ADC_CHANNEL_TEMPSENSOR;  //  For STM32F1: 16
 8005e0c:	2210      	movs	r2, #16
int temp_stm32_default_cfg(struct temp_stm32_cfg *cfg) {
 8005e0e:	b530      	push	{r4, r5, lr}
    cfg->bc_s_mask       = SENSOR_TYPE_ALL;         //  Return all sensor values, i.e. temperature.
 8005e10:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005e14:	2500      	movs	r5, #0
    memset(cfg, 0, sizeof(struct temp_stm32_cfg));  //  Zero the entire object.
 8005e16:	60d8      	str	r0, [r3, #12]
    cfg->adc_channel     = ADC_CHANNEL_TEMPSENSOR;  //  For STM32F1: 16
 8005e18:	731a      	strb	r2, [r3, #12]
    cfg->adc_channel_cfg = &temp_channel_config;    //  Configure the temperature channel.
 8005e1a:	4a04      	ldr	r2, [pc, #16]	; (8005e2c <temp_stm32_default_cfg+0x28>)
    cfg->bc_s_mask       = SENSOR_TYPE_ALL;         //  Return all sensor values, i.e. temperature.
 8005e1c:	e9c3 4500 	strd	r4, r5, [r3]
    cfg->adc_open_arg    = NULL;
 8005e20:	6118      	str	r0, [r3, #16]
    cfg->adc_channel_cfg = &temp_channel_config;    //  Configure the temperature channel.
 8005e22:	615a      	str	r2, [r3, #20]
}
 8005e24:	bd30      	pop	{r4, r5, pc}
 8005e26:	bf00      	nop
 8005e28:	0800dec8 	.word	0x0800dec8
 8005e2c:	20000190 	.word	0x20000190

08005e30 <temp_stm32_init>:
int temp_stm32_init(struct os_dev *dev0, void *arg) {
 8005e30:	b570      	push	{r4, r5, r6, lr}
 8005e32:	4604      	mov	r4, r0
    if (!arg || !dev0) { rc = SYS_ENODEV; goto err; }
 8005e34:	460d      	mov	r5, r1
 8005e36:	b341      	cbz	r1, 8005e8a <temp_stm32_init+0x5a>
 8005e38:	b338      	cbz	r0, 8005e8a <temp_stm32_init+0x5a>
    dev->adc = NULL;
 8005e3a:	2300      	movs	r3, #0
    rc = temp_stm32_default_cfg(&dev->cfg);
 8005e3c:	30b0      	adds	r0, #176	; 0xb0
    dev->adc = NULL;
 8005e3e:	61c3      	str	r3, [r0, #28]
    rc = temp_stm32_default_cfg(&dev->cfg);
 8005e40:	f7ff ffe0 	bl	8005e04 <temp_stm32_default_cfg>
    if (rc) { goto err; }
 8005e44:	bb00      	cbnz	r0, 8005e88 <temp_stm32_init+0x58>
    sensor = &dev->sensor;
 8005e46:	f104 0628 	add.w	r6, r4, #40	; 0x28
    rc = sensor_init(sensor, dev0);
 8005e4a:	4621      	mov	r1, r4
 8005e4c:	4630      	mov	r0, r6
 8005e4e:	f7fd fd4c 	bl	80038ea <sensor_init>
    if (rc != 0) { goto err; }
 8005e52:	b9c8      	cbnz	r0, 8005e88 <temp_stm32_init+0x58>
 */
static inline int
sensor_set_driver(struct sensor *sensor, sensor_type_t type,
        struct sensor_driver *driver)
{
    sensor->s_funcs = driver;
 8005e54:	4b0e      	ldr	r3, [pc, #56]	; (8005e90 <temp_stm32_init+0x60>)
    sensor->s_types = type;
 8005e56:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    sensor->s_funcs = driver;
 8005e5a:	6523      	str	r3, [r4, #80]	; 0x50
    sensor->s_types = type;
 8005e5c:	2300      	movs	r3, #0
 * @param s_itf The interface type to set
 */
static inline int
sensor_set_interface(struct sensor *sensor, struct sensor_itf *s_itf)
{
    memcpy(&sensor->s_itf, s_itf, sizeof(*s_itf));
 8005e5e:	4629      	mov	r1, r5
    sensor->s_types = type;
 8005e60:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
    memcpy(&sensor->s_itf, s_itf, sizeof(*s_itf));
 8005e64:	f104 0370 	add.w	r3, r4, #112	; 0x70
 8005e68:	f105 0214 	add.w	r2, r5, #20
 8005e6c:	f851 0b04 	ldr.w	r0, [r1], #4
 8005e70:	4291      	cmp	r1, r2
 8005e72:	f843 0b04 	str.w	r0, [r3], #4
 8005e76:	d1f9      	bne.n	8005e6c <temp_stm32_init+0x3c>
    rc = sensor_mgr_register(sensor);
 8005e78:	4630      	mov	r0, r6
 8005e7a:	f7fd fd21 	bl	80038c0 <sensor_mgr_register>
    if (rc != 0) { goto err; }
 8005e7e:	b918      	cbnz	r0, 8005e88 <temp_stm32_init+0x58>
    OS_DEV_SETHANDLERS(dev0, temp_stm32_open, temp_stm32_close);
 8005e80:	4b04      	ldr	r3, [pc, #16]	; (8005e94 <temp_stm32_init+0x64>)
 8005e82:	6023      	str	r3, [r4, #0]
 8005e84:	4b04      	ldr	r3, [pc, #16]	; (8005e98 <temp_stm32_init+0x68>)
 8005e86:	60e3      	str	r3, [r4, #12]
}
 8005e88:	bd70      	pop	{r4, r5, r6, pc}
    if (!arg || !dev0) { rc = SYS_ENODEV; goto err; }
 8005e8a:	f06f 0008 	mvn.w	r0, #8
 8005e8e:	e7fb      	b.n	8005e88 <temp_stm32_init+0x58>
 8005e90:	0800dea0 	.word	0x0800dea0
 8005e94:	08005d9d 	.word	0x08005d9d
 8005e98:	08005d85 	.word	0x08005d85

08005e9c <temp_stm32_get_raw_temperature>:
int temp_stm32_get_raw_temperature(struct temp_stm32 *dev, int num_readings, int *temp_sum, uint8_t *temp_diff) {
 8005e9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ea0:	4680      	mov	r8, r0
    console_printf("STM read int temp sensor\n");  ////
 8005ea2:	4820      	ldr	r0, [pc, #128]	; (8005f24 <temp_stm32_get_raw_temperature+0x88>)
int temp_stm32_get_raw_temperature(struct temp_stm32 *dev, int num_readings, int *temp_sum, uint8_t *temp_diff) {
 8005ea4:	4699      	mov	r9, r3
 8005ea6:	468a      	mov	sl, r1
 8005ea8:	4617      	mov	r7, r2
    console_printf("STM read int temp sensor\n");  ////
 8005eaa:	f7fc f9bf 	bl	800222c <console_printf>
    assert(dev->adc);  assert(temp_sum);
 8005eae:	f8d8 30cc 	ldr.w	r3, [r8, #204]	; 0xcc
 8005eb2:	b92b      	cbnz	r3, 8005ec0 <temp_stm32_get_raw_temperature+0x24>
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	461a      	mov	r2, r3
 8005eb8:	4619      	mov	r1, r3
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f7fd fdfa 	bl	8003ab4 <__assert_func>
 8005ec0:	2f00      	cmp	r7, #0
 8005ec2:	d0f7      	beq.n	8005eb4 <temp_stm32_get_raw_temperature+0x18>
    *temp_sum = 0;
 8005ec4:	2400      	movs	r4, #0
        rawtemp = -1;
 8005ec6:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
    int lasttemp = 0;      //  Previous raw temperature
 8005eca:	4625      	mov	r5, r4
    for (i = 0; i < num_readings; i++) {  //  For each sample to be read...
 8005ecc:	4626      	mov	r6, r4
    *temp_sum = 0;
 8005ece:	603c      	str	r4, [r7, #0]
    for (i = 0; i < num_readings; i++) {  //  For each sample to be read...
 8005ed0:	4556      	cmp	r6, sl
 8005ed2:	db03      	blt.n	8005edc <temp_stm32_get_raw_temperature+0x40>
}
 8005ed4:	2000      	movs	r0, #0
 8005ed6:	b003      	add	sp, #12
 8005ed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rc = adc_read_channel(dev->adc, ADC_CHANNEL_TEMPSENSOR, &rawtemp);
 8005edc:	f8d8 00cc 	ldr.w	r0, [r8, #204]	; 0xcc
        rawtemp = -1;
 8005ee0:	f8cd b004 	str.w	fp, [sp, #4]
 * @return 0 on success, non-zero error code on failure
 */
static inline int
adc_read_channel(struct adc_dev *dev, uint8_t ch, int *result)
{
    return (dev->ad_funcs->af_read_channel(dev, ch, result));
 8005ee4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8005ee6:	aa01      	add	r2, sp, #4
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	2110      	movs	r1, #16
 8005eec:	4798      	blx	r3
        assert(rc == 0);
 8005eee:	2800      	cmp	r0, #0
 8005ef0:	d1e0      	bne.n	8005eb4 <temp_stm32_get_raw_temperature+0x18>
        assert(rawtemp > 0);  //  If equals 0, it means we haven't sampled any values.  Check the above note.
 8005ef2:	9b01      	ldr	r3, [sp, #4]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	dddd      	ble.n	8005eb4 <temp_stm32_get_raw_temperature+0x18>
        uint8_t diff = (rawtemp - lasttemp) & 0xf;  //  Delta between this and last reading, keeping lower 4 bits.
 8005ef8:	1b5d      	subs	r5, r3, r5
        if (i % 2 == 1) {
 8005efa:	07f2      	lsls	r2, r6, #31
        uint8_t diff = (rawtemp - lasttemp) & 0xf;  //  Delta between this and last reading, keeping lower 4 bits.
 8005efc:	f005 050f 	and.w	r5, r5, #15
        if (i % 2 == 1) {
 8005f00:	d508      	bpl.n	8005f14 <temp_stm32_get_raw_temperature+0x78>
            if (temp_diff) { temp_diff[i2] = b; }  //  Save the combined delta into temp_diff as entropy.
 8005f02:	f1b9 0f00 	cmp.w	r9, #0
 8005f06:	d005      	beq.n	8005f14 <temp_stm32_get_raw_temperature+0x78>
 8005f08:	f3c6 0247 	ubfx	r2, r6, #1, #8
            uint8_t b = diff + (lastdiff << 4);    //  Combine current delta (4 bits) and previous delta (4 bits) to make 8 bits.
 8005f0c:	eb05 1404 	add.w	r4, r5, r4, lsl #4
            if (temp_diff) { temp_diff[i2] = b; }  //  Save the combined delta into temp_diff as entropy.
 8005f10:	f809 4002 	strb.w	r4, [r9, r2]
        *temp_sum += rawtemp;  //  Accumulate the raw temperature.
 8005f14:	683a      	ldr	r2, [r7, #0]
        lastdiff = diff;
 8005f16:	462c      	mov	r4, r5
        *temp_sum += rawtemp;  //  Accumulate the raw temperature.
 8005f18:	441a      	add	r2, r3
 8005f1a:	603a      	str	r2, [r7, #0]
    for (i = 0; i < num_readings; i++) {  //  For each sample to be read...
 8005f1c:	3601      	adds	r6, #1
        lastdiff = diff;
 8005f1e:	461d      	mov	r5, r3
 8005f20:	e7d6      	b.n	8005ed0 <temp_stm32_get_raw_temperature+0x34>
 8005f22:	bf00      	nop
 8005f24:	0800decd 	.word	0x0800decd

08005f28 <temp_stm32_sensor_read>:
    if (!(type & TEMP_SENSOR_TYPE)) { rc = SYS_EINVAL; goto err; }
 8005f28:	2100      	movs	r1, #0
    sensor_data_func_t data_func, void *data_arg, uint32_t timeout) {
 8005f2a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f2c:	4607      	mov	r7, r0
    if (!(type & TEMP_SENSOR_TYPE)) { rc = SYS_EINVAL; goto err; }
 8005f2e:	f002 6080 	and.w	r0, r2, #67108864	; 0x4000000
    sensor_data_func_t data_func, void *data_arg, uint32_t timeout) {
 8005f32:	b087      	sub	sp, #28
    if (!(type & TEMP_SENSOR_TYPE)) { rc = SYS_EINVAL; goto err; }
 8005f34:	ea50 0301 	orrs.w	r3, r0, r1
    sensor_data_func_t data_func, void *data_arg, uint32_t timeout) {
 8005f38:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    if (!(type & TEMP_SENSOR_TYPE)) { rc = SYS_EINVAL; goto err; }
 8005f3a:	d032      	beq.n	8005fa2 <temp_stm32_sensor_read+0x7a>
    dev = (struct temp_stm32 *) SENSOR_GET_DEVICE(sensor); assert(dev);
 8005f3c:	683d      	ldr	r5, [r7, #0]
 8005f3e:	b92d      	cbnz	r5, 8005f4c <temp_stm32_sensor_read+0x24>
 8005f40:	462b      	mov	r3, r5
 8005f42:	462a      	mov	r2, r5
 8005f44:	4629      	mov	r1, r5
 8005f46:	4628      	mov	r0, r5
 8005f48:	f7fd fdb4 	bl	8003ab4 <__assert_func>
        rc = temp_stm32_open((struct os_dev *) dev, 0, NULL);
 8005f4c:	2200      	movs	r2, #0
    rawtemp = -1;
 8005f4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
        rc = temp_stm32_open((struct os_dev *) dev, 0, NULL);
 8005f52:	4611      	mov	r1, r2
 8005f54:	4628      	mov	r0, r5
    rawtemp = -1;
 8005f56:	9303      	str	r3, [sp, #12]
        rc = temp_stm32_open((struct os_dev *) dev, 0, NULL);
 8005f58:	f7ff ff20 	bl	8005d9c <temp_stm32_open>
        if (rc) { goto err; }
 8005f5c:	4604      	mov	r4, r0
 8005f5e:	b9e8      	cbnz	r0, 8005f9c <temp_stm32_sensor_read+0x74>
        rc = temp_stm32_get_raw_temperature(dev, 1, &rawtemp, NULL);
 8005f60:	4603      	mov	r3, r0
 8005f62:	aa03      	add	r2, sp, #12
 8005f64:	2101      	movs	r1, #1
 8005f66:	4628      	mov	r0, r5
 8005f68:	f7ff ff98 	bl	8005e9c <temp_stm32_get_raw_temperature>
 8005f6c:	4604      	mov	r4, r0
        temp_stm32_close((struct os_dev *) dev);
 8005f6e:	4628      	mov	r0, r5
 8005f70:	f7ff ff08 	bl	8005d84 <temp_stm32_close>
    if (rc) { goto err; }  //  console_printf("rawtemp: %d\n", rawtemp);  ////
 8005f74:	b994      	cbnz	r4, 8005f9c <temp_stm32_sensor_read+0x74>
    temp_data->strd_temp_raw = rawtemp;  //  rawtemp must be between 0 and 4,095 (based on 12-bit ADC)
 8005f76:	9b03      	ldr	r3, [sp, #12]
 8005f78:	9304      	str	r3, [sp, #16]
    temp_data->strd_temp_raw_is_valid = 1;
 8005f7a:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8005f7e:	f043 0301 	orr.w	r3, r3, #1
 8005f82:	f88d 3014 	strb.w	r3, [sp, #20]
    if (data_func) {  //  Call the Listener Function to process the sensor data.
 8005f86:	b14e      	cbz	r6, 8005f9c <temp_stm32_sensor_read+0x74>
        rc = data_func(sensor, data_arg, temp_data, TEMP_SENSOR_TYPE);
 8005f88:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005f90:	e9cd 2300 	strd	r2, r3, [sp]
 8005f94:	4638      	mov	r0, r7
 8005f96:	aa04      	add	r2, sp, #16
 8005f98:	47b0      	blx	r6
 8005f9a:	4604      	mov	r4, r0
}
 8005f9c:	4620      	mov	r0, r4
 8005f9e:	b007      	add	sp, #28
 8005fa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!(type & TEMP_SENSOR_TYPE)) { rc = SYS_EINVAL; goto err; }
 8005fa2:	f06f 0401 	mvn.w	r4, #1
 8005fa6:	e7f9      	b.n	8005f9c <temp_stm32_sensor_read+0x74>

08005fa8 <temp_stm32_config>:
 * @param Sensor device temp_stm32 structure
 * @param Sensor device temp_stm32_cfg config
 *
 * @return 0 on success, and non-zero error code on failure
 */
int temp_stm32_config(struct temp_stm32 *dev, struct temp_stm32_cfg *cfg) {
 8005fa8:	b508      	push	{r3, lr}
    struct sensor_itf *itf;
    int rc;
    itf = SENSOR_GET_ITF(&(dev->sensor)); assert(itf);
 8005faa:	f110 0370 	adds.w	r3, r0, #112	; 0x70
 8005fae:	d104      	bne.n	8005fba <temp_stm32_config+0x12>
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	4619      	mov	r1, r3
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f7fd fd7d 	bl	8003ab4 <__assert_func>
    rc = sensor_set_type_mask(&(dev->sensor),  cfg->bc_s_mask);
 8005fba:	e9d1 2300 	ldrd	r2, r3, [r1]
    sensor->s_mask = mask;
 8005fbe:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
    if (rc) { goto err; }

    dev->cfg.bc_s_mask = cfg->bc_s_mask;
 8005fc2:	e9d1 2300 	ldrd	r2, r3, [r1]
 8005fc6:	e9c0 232c 	strd	r2, r3, [r0, #176]	; 0xb0
    return 0;
err:
    return (rc);
}
 8005fca:	2000      	movs	r0, #0
 8005fcc:	bd08      	pop	{r3, pc}
	...

08005fd0 <oc_buffer_tx>:
    assert(rc == 0);
}

static void
oc_buffer_tx(struct os_event *ev)
{
 8005fd0:	b538      	push	{r3, r4, r5, lr}
    struct os_mbuf *m;

    while ((m = os_mqueue_get(&oc_outq)) != NULL) {
        STAILQ_NEXT(OS_MBUF_PKTHDR(m), omp_next) = NULL;
 8005fd2:	2500      	movs	r5, #0
    while ((m = os_mqueue_get(&oc_outq)) != NULL) {
 8005fd4:	4c08      	ldr	r4, [pc, #32]	; (8005ff8 <oc_buffer_tx+0x28>)
 8005fd6:	4620      	mov	r0, r4
 8005fd8:	f7fe f90a 	bl	80041f0 <os_mqueue_get>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	b900      	cbnz	r0, 8005fe2 <oc_buffer_tx+0x12>
            }
#ifdef OC_CLIENT
        }
#endif
    }
}
 8005fe0:	bd38      	pop	{r3, r4, r5, pc}
        STAILQ_NEXT(OS_MBUF_PKTHDR(m), omp_next) = NULL;
 8005fe2:	615d      	str	r5, [r3, #20]
        if (OC_MBUF_ENDPOINT(m)->ep.oe_flags & OC_ENDPOINT_MULTICAST) {
 8005fe4:	7e1b      	ldrb	r3, [r3, #24]
 8005fe6:	071b      	lsls	r3, r3, #28
 8005fe8:	d502      	bpl.n	8005ff0 <oc_buffer_tx+0x20>
            oc_send_multicast_message(m);
 8005fea:	f000 fbc5 	bl	8006778 <oc_send_multicast_message>
 8005fee:	e7f2      	b.n	8005fd6 <oc_buffer_tx+0x6>
                oc_send_buffer(m);
 8005ff0:	f000 fbb4 	bl	800675c <oc_send_buffer>
 8005ff4:	e7ef      	b.n	8005fd6 <oc_buffer_tx+0x6>
 8005ff6:	bf00      	nop
 8005ff8:	200029e0 	.word	0x200029e0

08005ffc <oc_buffer_rx>:

static void
oc_buffer_rx(struct os_event *ev)
{
 8005ffc:	b513      	push	{r0, r1, r4, lr}
    struct os_mbuf *m;
#if defined(OC_SECURITY)
    uint8_t b;
#endif

    while ((m = os_mqueue_get(&oc_inq)) != NULL) {
 8005ffe:	4c08      	ldr	r4, [pc, #32]	; (8006020 <oc_buffer_rx+0x24>)
 8006000:	4620      	mov	r0, r4
 8006002:	f7fe f8f5 	bl	80041f0 <os_mqueue_get>
 8006006:	9001      	str	r0, [sp, #4]
 8006008:	b908      	cbnz	r0, 800600e <oc_buffer_rx+0x12>
#endif
        if (m) {
            os_mbuf_free_chain(m);
        }
    }
}
 800600a:	b002      	add	sp, #8
 800600c:	bd10      	pop	{r4, pc}
        coap_receive(&m);
 800600e:	a801      	add	r0, sp, #4
 8006010:	f000 fc3c 	bl	800688c <__wrap_coap_receive>
        if (m) {
 8006014:	9801      	ldr	r0, [sp, #4]
 8006016:	2800      	cmp	r0, #0
 8006018:	d0f2      	beq.n	8006000 <oc_buffer_rx+0x4>
            os_mbuf_free_chain(m);
 800601a:	f7fe f954 	bl	80042c6 <os_mbuf_free_chain>
 800601e:	e7ef      	b.n	8006000 <oc_buffer_rx+0x4>
 8006020:	200029c8 	.word	0x200029c8

08006024 <oc_allocate_mbuf>:
};

static inline int
oc_endpoint_size(struct oc_endpoint *oe)
{
    assert(oc_transports[oe->ep.oe_type]);
 8006024:	7803      	ldrb	r3, [r0, #0]
 8006026:	4a0e      	ldr	r2, [pc, #56]	; (8006060 <oc_allocate_mbuf+0x3c>)
 8006028:	f003 0307 	and.w	r3, r3, #7
 800602c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
{
 8006030:	b570      	push	{r4, r5, r6, lr}
 8006032:	4605      	mov	r5, r0
 8006034:	b923      	cbnz	r3, 8006040 <oc_allocate_mbuf+0x1c>
 8006036:	461a      	mov	r2, r3
 8006038:	4619      	mov	r1, r3
 800603a:	4618      	mov	r0, r3
 800603c:	f7fd fd3a 	bl	8003ab4 <__assert_func>
    return oc_transports[oe->ep.oe_type]->ot_ep_size(oe);
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	4798      	blx	r3
    m = os_msys_get_pkthdr(0, ep_size);
 8006044:	b281      	uxth	r1, r0
 8006046:	4606      	mov	r6, r0
 8006048:	2000      	movs	r0, #0
 800604a:	f7fe fbe1 	bl	8004810 <os_msys_get_pkthdr>
    if (!m) {
 800604e:	4604      	mov	r4, r0
 8006050:	b120      	cbz	r0, 800605c <oc_allocate_mbuf+0x38>
    memcpy(OC_MBUF_ENDPOINT(m), oe, ep_size);
 8006052:	4632      	mov	r2, r6
 8006054:	4629      	mov	r1, r5
 8006056:	3018      	adds	r0, #24
 8006058:	f7ff f988 	bl	800536c <memcpy>
}
 800605c:	4620      	mov	r0, r4
 800605e:	bd70      	pop	{r4, r5, r6, pc}
 8006060:	20003b98 	.word	0x20003b98

08006064 <oc_send_message>:
{
 8006064:	b510      	push	{r4, lr}
 8006066:	4604      	mov	r4, r0
    rc = os_mqueue_put(&oc_outq, oc_evq_get(), m);
 8006068:	f000 fb58 	bl	800671c <oc_evq_get>
 800606c:	4622      	mov	r2, r4
 800606e:	4601      	mov	r1, r0
 8006070:	4805      	ldr	r0, [pc, #20]	; (8006088 <oc_send_message+0x24>)
 8006072:	f7fe f8d0 	bl	8004216 <os_mqueue_put>
    assert(rc == 0);
 8006076:	b128      	cbz	r0, 8006084 <oc_send_message+0x20>
 8006078:	2300      	movs	r3, #0
 800607a:	461a      	mov	r2, r3
 800607c:	4619      	mov	r1, r3
 800607e:	4618      	mov	r0, r3
 8006080:	f7fd fd18 	bl	8003ab4 <__assert_func>
}
 8006084:	bd10      	pop	{r4, pc}
 8006086:	bf00      	nop
 8006088:	200029e0 	.word	0x200029e0

0800608c <oc_buffer_init>:

void
oc_buffer_init(void)
{
 800608c:	b508      	push	{r3, lr}
    os_mqueue_init(&oc_inq, oc_buffer_rx, NULL);
 800608e:	2200      	movs	r2, #0
 8006090:	4905      	ldr	r1, [pc, #20]	; (80060a8 <oc_buffer_init+0x1c>)
 8006092:	4806      	ldr	r0, [pc, #24]	; (80060ac <oc_buffer_init+0x20>)
 8006094:	f7fe f89c 	bl	80041d0 <os_mqueue_init>
    os_mqueue_init(&oc_outq, oc_buffer_tx, NULL);
}
 8006098:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    os_mqueue_init(&oc_outq, oc_buffer_tx, NULL);
 800609c:	2200      	movs	r2, #0
 800609e:	4904      	ldr	r1, [pc, #16]	; (80060b0 <oc_buffer_init+0x24>)
 80060a0:	4804      	ldr	r0, [pc, #16]	; (80060b4 <oc_buffer_init+0x28>)
 80060a2:	f7fe b895 	b.w	80041d0 <os_mqueue_init>
 80060a6:	bf00      	nop
 80060a8:	08005ffd 	.word	0x08005ffd
 80060ac:	200029c8 	.word	0x200029c8
 80060b0:	08005fd1 	.word	0x08005fd1
 80060b4:	200029e0 	.word	0x200029e0

080060b8 <free_client_cb>:
}

#ifdef OC_CLIENT
static void
free_client_cb(oc_client_cb_t *cb)
{
 80060b8:	b510      	push	{r4, lr}
 80060ba:	4604      	mov	r4, r0
    os_callout_stop(&cb->callout);
 80060bc:	3004      	adds	r0, #4
 80060be:	f7fd fe67 	bl	8003d90 <os_callout_stop>
    oc_free_string(&cb->uri);
 80060c2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80060c6:	f7fc fdeb 	bl	8002ca0 <oc_free_string>
    SLIST_REMOVE(&oc_client_cbs, cb, oc_client_cb, next);
 80060ca:	4a09      	ldr	r2, [pc, #36]	; (80060f0 <free_client_cb+0x38>)
 80060cc:	6813      	ldr	r3, [r2, #0]
 80060ce:	42a3      	cmp	r3, r4
 80060d0:	d108      	bne.n	80060e4 <free_client_cb+0x2c>
 80060d2:	6823      	ldr	r3, [r4, #0]
 80060d4:	6013      	str	r3, [r2, #0]
    os_memblock_put(&oc_client_cb_pool, cb);
 80060d6:	4621      	mov	r1, r4
}
 80060d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    os_memblock_put(&oc_client_cb_pool, cb);
 80060dc:	4805      	ldr	r0, [pc, #20]	; (80060f4 <free_client_cb+0x3c>)
 80060de:	f7fe bb42 	b.w	8004766 <os_memblock_put>
 80060e2:	4613      	mov	r3, r2
    SLIST_REMOVE(&oc_client_cbs, cb, oc_client_cb, next);
 80060e4:	681a      	ldr	r2, [r3, #0]
 80060e6:	42a2      	cmp	r2, r4
 80060e8:	d1fb      	bne.n	80060e2 <free_client_cb+0x2a>
 80060ea:	6822      	ldr	r2, [r4, #0]
 80060ec:	601a      	str	r2, [r3, #0]
 80060ee:	e7f2      	b.n	80060d6 <free_client_cb+0x1e>
 80060f0:	20002adc 	.word	0x20002adc
 80060f4:	20002ac0 	.word	0x20002ac0

080060f8 <oc_ri_remove_cb>:
{
    struct oc_client_cb *cb;

    cb = ev->ev_arg;

    free_client_cb(cb);
 80060f8:	6880      	ldr	r0, [r0, #8]
 80060fa:	f7ff bfdd 	b.w	80060b8 <free_client_cb>
	...

08006100 <oc_ri_mem_init>:
{
 8006100:	b507      	push	{r0, r1, r2, lr}
    os_mempool_init(&oc_client_cb_pool, MAX_NUM_CONCURRENT_REQUESTS,
 8006102:	4b07      	ldr	r3, [pc, #28]	; (8006120 <oc_ri_mem_init+0x20>)
 8006104:	2264      	movs	r2, #100	; 0x64
 8006106:	9300      	str	r3, [sp, #0]
 8006108:	2102      	movs	r1, #2
 800610a:	4b06      	ldr	r3, [pc, #24]	; (8006124 <oc_ri_mem_init+0x24>)
 800610c:	4806      	ldr	r0, [pc, #24]	; (8006128 <oc_ri_mem_init+0x28>)
 800610e:	f7fe faf9 	bl	8004704 <os_mempool_init>
    oc_rep_init();
 8006112:	f7fc fd8f 	bl	8002c34 <oc_rep_init>
}
 8006116:	b003      	add	sp, #12
 8006118:	f85d eb04 	ldr.w	lr, [sp], #4
    oc_buffer_init();
 800611c:	f7ff bfb6 	b.w	800608c <oc_buffer_init>
 8006120:	0800def7 	.word	0x0800def7
 8006124:	200029f8 	.word	0x200029f8
 8006128:	20002ac0 	.word	0x20002ac0

0800612c <oc_ri_remove_client_cb_by_mid>:
    SLIST_FOREACH(cb, &oc_client_cbs, next) {
 800612c:	4b04      	ldr	r3, [pc, #16]	; (8006140 <oc_ri_remove_client_cb_by_mid+0x14>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	b903      	cbnz	r3, 8006134 <oc_ri_remove_client_cb_by_mid+0x8>
 8006132:	4770      	bx	lr
        if (cb->mid == mid) {
 8006134:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 8006136:	4282      	cmp	r2, r0
 8006138:	d1f9      	bne.n	800612e <oc_ri_remove_client_cb_by_mid+0x2>
        free_client_cb(cb);
 800613a:	4618      	mov	r0, r3
 800613c:	f7ff bfbc 	b.w	80060b8 <free_client_cb>
 8006140:	20002adc 	.word	0x20002adc

08006144 <oc_ri_alloc_client_cb>:
}

oc_client_cb_t *
oc_ri_alloc_client_cb(const char *uri, oc_server_handle_t *server,
                      oc_method_t method, void *handler, oc_qos_t qos)
{
 8006144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006148:	4680      	mov	r8, r0
    oc_client_cb_t *cb;

    cb = os_memblock_get(&oc_client_cb_pool);
 800614a:	4824      	ldr	r0, [pc, #144]	; (80061dc <oc_ri_alloc_client_cb+0x98>)
{
 800614c:	460d      	mov	r5, r1
 800614e:	4617      	mov	r7, r2
 8006150:	461e      	mov	r6, r3
    cb = os_memblock_get(&oc_client_cb_pool);
 8006152:	f7fe fae0 	bl	8004716 <os_memblock_get>
    if (!cb) {
 8006156:	4604      	mov	r4, r0
 8006158:	b3b0      	cbz	r0, 80061c8 <oc_ri_alloc_client_cb+0x84>
        return NULL;
    }
    cb->mid = coap_get_mid();
 800615a:	f000 f8db 	bl	8006314 <coap_get_mid>
    oc_new_string(&cb->uri, uri);
 800615e:	4641      	mov	r1, r8
    cb->mid = coap_get_mid();
 8006160:	86e0      	strh	r0, [r4, #54]	; 0x36
    oc_new_string(&cb->uri, uri);
 8006162:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006166:	f7fc fd77 	bl	8002c58 <oc_new_string>
    cb->method = method;
    cb->qos = qos;
 800616a:	f89d 3018 	ldrb.w	r3, [sp, #24]
    cb->handler = handler;
 800616e:	6526      	str	r6, [r4, #80]	; 0x50
    cb->qos = qos;
 8006170:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    cb->token_len = 8;
 8006174:	2308      	movs	r3, #8
    int i = 0;
 8006176:	2600      	movs	r6, #0
    cb->method = method;
 8006178:	f884 7061 	strb.w	r7, [r4, #97]	; 0x61
    cb->token_len = 8;
 800617c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    uint16_t r;
    while (i < cb->token_len) {
 8006180:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8006184:	42b3      	cmp	r3, r6
 8006186:	dc22      	bgt.n	80061ce <oc_ri_alloc_client_cb+0x8a>
        r = oc_random_rand();
        memcpy(cb->token + i, &r, sizeof(r));
        i += sizeof(r);
    }
    cb->discovery = false;
 8006188:	2300      	movs	r3, #0
 800618a:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
    cb->timestamp = oc_clock_time();
 800618e:	f000 fb2f 	bl	80067f0 <oc_clock_time>
    cb->observe_seq = -1;
 8006192:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    memcpy(&cb->server, server, sizeof(oc_server_handle_t));
 8006196:	4629      	mov	r1, r5
    cb->observe_seq = -1;
 8006198:	65a3      	str	r3, [r4, #88]	; 0x58
    cb->timestamp = oc_clock_time();
 800619a:	65e0      	str	r0, [r4, #92]	; 0x5c
    memcpy(&cb->server, server, sizeof(oc_server_handle_t));
 800619c:	f104 0338 	add.w	r3, r4, #56	; 0x38
 80061a0:	f105 0218 	add.w	r2, r5, #24
 80061a4:	f851 0b04 	ldr.w	r0, [r1], #4
 80061a8:	4291      	cmp	r1, r2
 80061aa:	f843 0b04 	str.w	r0, [r3], #4
 80061ae:	d1f9      	bne.n	80061a4 <oc_ri_alloc_client_cb+0x60>

    os_callout_init(&cb->callout, oc_evq_get(), oc_ri_remove_cb, cb);
 80061b0:	f000 fab4 	bl	800671c <oc_evq_get>
 80061b4:	4623      	mov	r3, r4
 80061b6:	4a0a      	ldr	r2, [pc, #40]	; (80061e0 <oc_ri_alloc_client_cb+0x9c>)
 80061b8:	4601      	mov	r1, r0
 80061ba:	1d20      	adds	r0, r4, #4
 80061bc:	f7fd fdda 	bl	8003d74 <os_callout_init>

    SLIST_INSERT_HEAD(&oc_client_cbs, cb, next);
 80061c0:	4b08      	ldr	r3, [pc, #32]	; (80061e4 <oc_ri_alloc_client_cb+0xa0>)
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	601c      	str	r4, [r3, #0]
 80061c6:	6022      	str	r2, [r4, #0]
    return cb;
}
 80061c8:	4620      	mov	r0, r4
 80061ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        r = oc_random_rand();
 80061ce:	f000 fb11 	bl	80067f4 <oc_random_rand>
        memcpy(cb->token + i, &r, sizeof(r));
 80061d2:	19a3      	adds	r3, r4, r6
 80061d4:	8598      	strh	r0, [r3, #44]	; 0x2c
        i += sizeof(r);
 80061d6:	3602      	adds	r6, #2
 80061d8:	e7d2      	b.n	8006180 <oc_ri_alloc_client_cb+0x3c>
 80061da:	bf00      	nop
 80061dc:	20002ac0 	.word	0x20002ac0
 80061e0:	080060f9 	.word	0x080060f9
 80061e4:	20002adc 	.word	0x20002adc

080061e8 <coap_append_opt_hdr>:
}
/*---------------------------------------------------------------------------*/
static uint8_t
coap_option_nibble(unsigned int value)
{
    if (value < 13) {
 80061e8:	290c      	cmp	r1, #12
}
/*---------------------------------------------------------------------------*/

static int
coap_append_opt_hdr(struct os_mbuf *m, unsigned int delta, size_t length)
{
 80061ea:	b513      	push	{r0, r1, r4, lr}
    if (value < 13) {
 80061ec:	d82d      	bhi.n	800624a <coap_append_opt_hdr+0x62>
        return value;
 80061ee:	b2cb      	uxtb	r3, r1
    uint8_t buffer[4];
    size_t written = 0;

    buffer[0] = coap_option_nibble(delta) << 4 | coap_option_nibble(length);
 80061f0:	011b      	lsls	r3, r3, #4
    if (value < 13) {
 80061f2:	2a0c      	cmp	r2, #12
    buffer[0] = coap_option_nibble(delta) << 4 | coap_option_nibble(length);
 80061f4:	b25b      	sxtb	r3, r3
    if (value < 13) {
 80061f6:	d82e      	bhi.n	8006256 <coap_append_opt_hdr+0x6e>
        return value;
 80061f8:	b2d4      	uxtb	r4, r2
    buffer[0] = coap_option_nibble(delta) << 4 | coap_option_nibble(length);
 80061fa:	4323      	orrs	r3, r4

    if (delta > 268) {
 80061fc:	f5b1 7f86 	cmp.w	r1, #268	; 0x10c
    buffer[0] = coap_option_nibble(delta) << 4 | coap_option_nibble(length);
 8006200:	f88d 3004 	strb.w	r3, [sp, #4]
    if (delta > 268) {
 8006204:	d92d      	bls.n	8006262 <coap_append_opt_hdr+0x7a>
        buffer[++written] = ((delta - 269) >> 8) & 0xff;
 8006206:	f46f 7486 	mvn.w	r4, #268	; 0x10c
 800620a:	190b      	adds	r3, r1, r4
 800620c:	0a1b      	lsrs	r3, r3, #8
 800620e:	f88d 3005 	strb.w	r3, [sp, #5]
        buffer[++written] = (delta - 269) & 0xff;
 8006212:	2302      	movs	r3, #2
 8006214:	390d      	subs	r1, #13
 8006216:	f88d 1006 	strb.w	r1, [sp, #6]
    } else if (delta > 12) {
        buffer[++written] = (delta - 13);
    }

    if (length > 268) {
 800621a:	f5b2 7f86 	cmp.w	r2, #268	; 0x10c
 800621e:	d928      	bls.n	8006272 <coap_append_opt_hdr+0x8a>
        buffer[++written] = ((length - 269) >> 8) & 0xff;
 8006220:	a902      	add	r1, sp, #8
 8006222:	18cc      	adds	r4, r1, r3
 8006224:	f46f 7186 	mvn.w	r1, #268	; 0x10c
 8006228:	1851      	adds	r1, r2, r1
 800622a:	0a09      	lsrs	r1, r1, #8
 800622c:	f804 1c03 	strb.w	r1, [r4, #-3]
        buffer[++written] = (length - 269) & 0xff;
 8006230:	3302      	adds	r3, #2
    } else if (length > 12) {
        buffer[++written] = (length - 13);
 8006232:	a902      	add	r1, sp, #8
 8006234:	4419      	add	r1, r3
 8006236:	3a0d      	subs	r2, #13
 8006238:	f801 2c04 	strb.w	r2, [r1, #-4]
    }

    return os_mbuf_append(m, buffer, written + 1);
 800623c:	1c5a      	adds	r2, r3, #1
 800623e:	b292      	uxth	r2, r2
 8006240:	a901      	add	r1, sp, #4
 8006242:	f7fe f856 	bl	80042f2 <os_mbuf_append>
}
 8006246:	b002      	add	sp, #8
 8006248:	bd10      	pop	{r4, pc}
    } else if (value <= 0xFF + 13) {
 800624a:	f5b1 7f86 	cmp.w	r1, #268	; 0x10c
        return 14;
 800624e:	bf94      	ite	ls
 8006250:	230d      	movls	r3, #13
 8006252:	230e      	movhi	r3, #14
 8006254:	e7cc      	b.n	80061f0 <coap_append_opt_hdr+0x8>
    } else if (value <= 0xFF + 13) {
 8006256:	f5b2 7f86 	cmp.w	r2, #268	; 0x10c
        return 14;
 800625a:	bf94      	ite	ls
 800625c:	240d      	movls	r4, #13
 800625e:	240e      	movhi	r4, #14
 8006260:	e7cb      	b.n	80061fa <coap_append_opt_hdr+0x12>
    } else if (delta > 12) {
 8006262:	290c      	cmp	r1, #12
        buffer[++written] = (delta - 13);
 8006264:	bf83      	ittte	hi
 8006266:	390d      	subhi	r1, #13
 8006268:	f88d 1005 	strbhi.w	r1, [sp, #5]
 800626c:	2301      	movhi	r3, #1
    size_t written = 0;
 800626e:	2300      	movls	r3, #0
 8006270:	e7d3      	b.n	800621a <coap_append_opt_hdr+0x32>
    } else if (length > 12) {
 8006272:	2a0c      	cmp	r2, #12
 8006274:	d9e2      	bls.n	800623c <coap_append_opt_hdr+0x54>
        buffer[++written] = (length - 13);
 8006276:	3301      	adds	r3, #1
 8006278:	e7db      	b.n	8006232 <coap_append_opt_hdr+0x4a>

0800627a <coap_append_int_opt>:

/*---------------------------------------------------------------------------*/
static int
coap_append_int_opt(struct os_mbuf *m, unsigned int number,
                    unsigned int current_number, uint32_t value)
{
 800627a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800627e:	461c      	mov	r4, r3
    int rc;

    if (0xFF000000 & value) {
        ++i;
    }
    if (0xFFFF0000 & value) {
 8006280:	ea4f 4a14 	mov.w	sl, r4, lsr #16
    if (0xFF000000 & value) {
 8006284:	f013 437f 	ands.w	r3, r3, #4278190080	; 0xff000000
    if (0xFFFF0000 & value) {
 8006288:	ea4f 4a0a 	mov.w	sl, sl, lsl #16
{
 800628c:	4680      	mov	r8, r0
 800628e:	b085      	sub	sp, #20
 8006290:	4610      	mov	r0, r2
    if (0xFF000000 & value) {
 8006292:	bf14      	ite	ne
 8006294:	2701      	movne	r7, #1
 8006296:	2700      	moveq	r7, #0
    if (0xFFFF0000 & value) {
 8006298:	f1ba 0f00 	cmp.w	sl, #0
 800629c:	d027      	beq.n	80062ee <coap_append_int_opt+0x74>
        ++i;
 800629e:	1c7d      	adds	r5, r7, #1
    }
    if (0xFFFFFF00 & value) {
 80062a0:	f034 0bff 	bics.w	fp, r4, #255	; 0xff
 80062a4:	d025      	beq.n	80062f2 <coap_append_int_opt+0x78>
        ++i;
 80062a6:	1c6e      	adds	r6, r5, #1
    }
    if (0xFFFFFFFF & value) {
        ++i;
 80062a8:	f106 0901 	add.w	r9, r6, #1
    }
    OC_LOG(DEBUG, "OPTION %u (delta %u, len %zu)\n",
                 number, number - current_number, i);

    rc = coap_append_opt_hdr(m, number - current_number, i);
 80062ac:	1a09      	subs	r1, r1, r0
 80062ae:	464a      	mov	r2, r9
 80062b0:	4640      	mov	r0, r8
 80062b2:	9301      	str	r3, [sp, #4]
 80062b4:	f7ff ff98 	bl	80061e8 <coap_append_opt_hdr>
    if (rc) {
 80062b8:	bb40      	cbnz	r0, 800630c <coap_append_int_opt+0x92>
        return rc;
    }

    i = 0;
    if (0xFF000000 & value) {
 80062ba:	9b01      	ldr	r3, [sp, #4]
 80062bc:	b113      	cbz	r3, 80062c4 <coap_append_int_opt+0x4a>
        buffer[i++] = (uint8_t)(value >> 24);
 80062be:	0e23      	lsrs	r3, r4, #24
 80062c0:	f88d 300c 	strb.w	r3, [sp, #12]
    }
    if (0xFFFF0000 & value) {
 80062c4:	f1ba 0f00 	cmp.w	sl, #0
 80062c8:	d004      	beq.n	80062d4 <coap_append_int_opt+0x5a>
        buffer[i++] = (uint8_t)(value >> 16);
 80062ca:	ab04      	add	r3, sp, #16
 80062cc:	441f      	add	r7, r3
 80062ce:	0c23      	lsrs	r3, r4, #16
 80062d0:	f807 3c04 	strb.w	r3, [r7, #-4]
    }
    if (0xFFFFFF00 & value) {
 80062d4:	f1bb 0f00 	cmp.w	fp, #0
 80062d8:	d010      	beq.n	80062fc <coap_append_int_opt+0x82>
        buffer[i++] = (uint8_t)(value >> 8);
 80062da:	ab04      	add	r3, sp, #16
 80062dc:	441d      	add	r5, r3
 80062de:	0a23      	lsrs	r3, r4, #8
 80062e0:	f805 3c04 	strb.w	r3, [r5, #-4]
    }
    if (0xFFFFFFFF & value) {
        buffer[i++] = (uint8_t)(value);
 80062e4:	ab04      	add	r3, sp, #16
 80062e6:	441e      	add	r6, r3
 80062e8:	f806 4c04 	strb.w	r4, [r6, #-4]
 80062ec:	e008      	b.n	8006300 <coap_append_int_opt+0x86>
    size_t i = 0;
 80062ee:	463d      	mov	r5, r7
 80062f0:	e7d6      	b.n	80062a0 <coap_append_int_opt+0x26>
 80062f2:	462e      	mov	r6, r5
    if (0xFFFFFFFF & value) {
 80062f4:	2c00      	cmp	r4, #0
 80062f6:	d1d7      	bne.n	80062a8 <coap_append_int_opt+0x2e>
 80062f8:	46a9      	mov	r9, r5
 80062fa:	e7d7      	b.n	80062ac <coap_append_int_opt+0x32>
    if (0xFFFFFFFF & value) {
 80062fc:	2c00      	cmp	r4, #0
 80062fe:	d1f1      	bne.n	80062e4 <coap_append_int_opt+0x6a>
    }
    return os_mbuf_append(m, buffer, i);
 8006300:	fa1f f289 	uxth.w	r2, r9
 8006304:	a903      	add	r1, sp, #12
 8006306:	4640      	mov	r0, r8
 8006308:	f7fd fff3 	bl	80042f2 <os_mbuf_append>
}
 800630c:	b005      	add	sp, #20
 800630e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08006314 <coap_get_mid>:
}
/*---------------------------------------------------------------------------*/
uint16_t
coap_get_mid(void)
{
    return ++current_mid;
 8006314:	4b02      	ldr	r3, [pc, #8]	; (8006320 <coap_get_mid+0xc>)
 8006316:	8818      	ldrh	r0, [r3, #0]
 8006318:	3001      	adds	r0, #1
 800631a:	b280      	uxth	r0, r0
 800631c:	8018      	strh	r0, [r3, #0]
}
 800631e:	4770      	bx	lr
 8006320:	20002ae0 	.word	0x20002ae0

08006324 <coap_init_message>:
/*---------------------------------------------------------------------------*/
void
coap_init_message(coap_packet_t *pkt, coap_message_type_t type,
                  uint8_t code, uint16_t mid)
{
 8006324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006326:	4604      	mov	r4, r0
 8006328:	460f      	mov	r7, r1
 800632a:	4616      	mov	r6, r2
 800632c:	461d      	mov	r5, r3
    /* Important thing */
    memset(pkt, 0, sizeof(coap_packet_t));
 800632e:	226c      	movs	r2, #108	; 0x6c
 8006330:	2100      	movs	r1, #0
 8006332:	f7ff f828 	bl	8005386 <memset>

    pkt->type = type;
 8006336:	7067      	strb	r7, [r4, #1]
    pkt->code = code;
 8006338:	70a6      	strb	r6, [r4, #2]
    pkt->mid = mid;
 800633a:	80a5      	strh	r5, [r4, #4]
}
 800633c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006340 <coap_serialize_message>:
    uint32_t u32;
    int tcp_hdr;
    int len, data_len;

    /* Initialize */
    pkt->version = 1;
 8006340:	2301      	movs	r3, #1
{
 8006342:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    pkt->version = 1;
 8006346:	7003      	strb	r3, [r0, #0]
 * Whether transport uses TCP-style headers or not.
 */
static inline int
oc_endpoint_use_tcp(struct oc_endpoint *oe)
{
    return oc_transports[oe->ep.oe_type]->ot_flags & OC_TRANSPORT_USE_TCP;
 8006348:	7e0b      	ldrb	r3, [r1, #24]
 800634a:	4abb      	ldr	r2, [pc, #748]	; (8006638 <coap_serialize_message+0x2f8>)
 800634c:	f003 0307 	and.w	r3, r3, #7
 8006350:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
{
 8006354:	460d      	mov	r5, r1
 8006356:	f893 9000 	ldrb.w	r9, [r3]

    /*
     * Move data pointer, leave enough space to insert coap header and
     * token before options.
     */
    m->om_data += (sizeof(struct coap_tcp_hdr32) + pkt->token_len);
 800635a:	7983      	ldrb	r3, [r0, #6]
{
 800635c:	4604      	mov	r4, r0
    m->om_data += (sizeof(struct coap_tcp_hdr32) + pkt->token_len);
 800635e:	1d9a      	adds	r2, r3, #6
 8006360:	680b      	ldr	r3, [r1, #0]
 8006362:	4413      	add	r3, r2
 8006364:	600b      	str	r3, [r1, #0]
    COAP_SERIALIZE_BYTE_OPT(pkt, m, COAP_OPTION_ETAG, etag, "ETag");
    COAP_SERIALIZE_INT_OPT(pkt, m, COAP_OPTION_IF_NONE_MATCH,
        content_format - pkt-> content_format /* hack to get a zero field */,
                           "If-None-Match");
#endif
    COAP_SERIALIZE_INT_OPT(pkt, m, COAP_OPTION_OBSERVE, observe, "Observe");
 8006366:	7bc1      	ldrb	r1, [r0, #15]
 8006368:	f011 0140 	ands.w	r1, r1, #64	; 0x40
 800636c:	d009      	beq.n	8006382 <coap_serialize_message+0x42>
 800636e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8006370:	2200      	movs	r2, #0
 8006372:	2106      	movs	r1, #6
 8006374:	4628      	mov	r0, r5
 8006376:	f7ff ff80 	bl	800627a <coap_append_int_opt>
 800637a:	2800      	cmp	r0, #0
 800637c:	f040 80f4 	bne.w	8006568 <coap_serialize_message+0x228>
 8006380:	2106      	movs	r1, #6
    COAP_SERIALIZE_INT_OPT(pkt, m, COAP_OPTION_URI_PORT, uri_port,
                              "Uri-Port");
    COAP_SERIALIZE_STRING_OPT(pkt, m, COAP_OPTION_LOCATION_PATH,
                              location_path, '/', "Location-Path");
#endif
    COAP_SERIALIZE_STRING_OPT(pkt, m, COAP_OPTION_URI_PATH, uri_path, '/',
 8006382:	7c23      	ldrb	r3, [r4, #16]
 8006384:	0718      	lsls	r0, r3, #28
 8006386:	d50a      	bpl.n	800639e <coap_serialize_message+0x5e>
 8006388:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
        for (j = 0; j <= length + 1; ++j) {
 800638a:	2600      	movs	r6, #0
    uint8_t *part_start = array;
 800638c:	463b      	mov	r3, r7
    COAP_SERIALIZE_STRING_OPT(pkt, m, COAP_OPTION_URI_PATH, uri_path, '/',
 800638e:	f8b4 a02a 	ldrh.w	sl, [r4, #42]	; 0x2a
        for (j = 0; j <= length + 1; ++j) {
 8006392:	f10a 0b01 	add.w	fp, sl, #1
 8006396:	455e      	cmp	r6, fp
 8006398:	f240 80a2 	bls.w	80064e0 <coap_serialize_message+0x1a0>
    COAP_SERIALIZE_STRING_OPT(pkt, m, COAP_OPTION_URI_PATH, uri_path, '/',
 800639c:	210b      	movs	r1, #11
                              "Uri-Path");

    COAP_SERIALIZE_INT_OPT(pkt, m, COAP_OPTION_CONTENT_FORMAT, content_format,
 800639e:	7c23      	ldrb	r3, [r4, #16]
 80063a0:	06da      	lsls	r2, r3, #27
 80063a2:	d509      	bpl.n	80063b8 <coap_serialize_message+0x78>
 80063a4:	460a      	mov	r2, r1
 80063a6:	8b23      	ldrh	r3, [r4, #24]
 80063a8:	210c      	movs	r1, #12
 80063aa:	4628      	mov	r0, r5
 80063ac:	f7ff ff65 	bl	800627a <coap_append_int_opt>
 80063b0:	2800      	cmp	r0, #0
 80063b2:	f040 80d9 	bne.w	8006568 <coap_serialize_message+0x228>
 80063b6:	210c      	movs	r1, #12
                           "Content-Format");
#if 0
    COAP_SERIALIZE_INT_OPT(pkt, m, COAP_OPTION_MAX_AGE, max_age, "Max-Age");
#endif
    COAP_SERIALIZE_STRING_OPT(pkt, m, COAP_OPTION_URI_QUERY, uri_query, '&',
 80063b8:	f994 3010 	ldrsb.w	r3, [r4, #16]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	da0a      	bge.n	80063d6 <coap_serialize_message+0x96>
 80063c0:	6de7      	ldr	r7, [r4, #92]	; 0x5c
        for (j = 0; j <= length + 1; ++j) {
 80063c2:	2600      	movs	r6, #0
    uint8_t *part_start = array;
 80063c4:	463b      	mov	r3, r7
    COAP_SERIALIZE_STRING_OPT(pkt, m, COAP_OPTION_URI_QUERY, uri_query, '&',
 80063c6:	f8b4 a058 	ldrh.w	sl, [r4, #88]	; 0x58
        for (j = 0; j <= length + 1; ++j) {
 80063ca:	f10a 0b01 	add.w	fp, sl, #1
 80063ce:	455e      	cmp	r6, fp
 80063d0:	f240 80a4 	bls.w	800651c <coap_serialize_message+0x1dc>
    COAP_SERIALIZE_STRING_OPT(pkt, m, COAP_OPTION_URI_QUERY, uri_query, '&',
 80063d4:	210f      	movs	r1, #15
                              "Uri-Query");
    COAP_SERIALIZE_INT_OPT(pkt, m, COAP_OPTION_ACCEPT, accept, "Accept");
 80063d6:	7c63      	ldrb	r3, [r4, #17]
 80063d8:	079b      	lsls	r3, r3, #30
 80063da:	d509      	bpl.n	80063f0 <coap_serialize_message+0xb0>
 80063dc:	460a      	mov	r2, r1
 80063de:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80063e0:	2111      	movs	r1, #17
 80063e2:	4628      	mov	r0, r5
 80063e4:	f7ff ff49 	bl	800627a <coap_append_int_opt>
 80063e8:	2800      	cmp	r0, #0
 80063ea:	f040 80bd 	bne.w	8006568 <coap_serialize_message+0x228>
 80063ee:	2111      	movs	r1, #17
#if 0
    COAP_SERIALIZE_STRING_OPT(pkt, m, COAP_OPTION_LOCATION_QUERY,
                              location_query, '&', "Location-Query");
#endif
    COAP_SERIALIZE_BLOCK_OPT(pkt, m, COAP_OPTION_BLOCK2, block2, "Block2");
 80063f0:	f994 3011 	ldrsb.w	r3, [r4, #17]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	da1a      	bge.n	800642e <coap_serialize_message+0xee>
 80063f8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80063fa:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80063fe:	0112      	lsls	r2, r2, #4
 8006400:	b10b      	cbz	r3, 8006406 <coap_serialize_message+0xc6>
 8006402:	f042 0208 	orr.w	r2, r2, #8
 8006406:	2600      	movs	r6, #0
 8006408:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
 800640a:	0900      	lsrs	r0, r0, #4
    } while (value);
 800640c:	0840      	lsrs	r0, r0, #1
 800640e:	b2b3      	uxth	r3, r6
 8006410:	f106 0601 	add.w	r6, r6, #1
 8006414:	d1fa      	bne.n	800640c <coap_serialize_message+0xcc>
    COAP_SERIALIZE_BLOCK_OPT(pkt, m, COAP_OPTION_BLOCK2, block2, "Block2");
 8006416:	f003 030f 	and.w	r3, r3, #15
 800641a:	4313      	orrs	r3, r2
 800641c:	4628      	mov	r0, r5
 800641e:	460a      	mov	r2, r1
 8006420:	2117      	movs	r1, #23
 8006422:	f7ff ff2a 	bl	800627a <coap_append_int_opt>
 8006426:	2800      	cmp	r0, #0
 8006428:	f040 809e 	bne.w	8006568 <coap_serialize_message+0x228>
 800642c:	2117      	movs	r1, #23
    COAP_SERIALIZE_BLOCK_OPT(pkt, m, COAP_OPTION_BLOCK1, block1, "Block1");
 800642e:	7ca3      	ldrb	r3, [r4, #18]
 8006430:	071f      	lsls	r7, r3, #28
 8006432:	d51a      	bpl.n	800646a <coap_serialize_message+0x12a>
 8006434:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8006436:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800643a:	0112      	lsls	r2, r2, #4
 800643c:	b10b      	cbz	r3, 8006442 <coap_serialize_message+0x102>
 800643e:	f042 0208 	orr.w	r2, r2, #8
 8006442:	2600      	movs	r6, #0
 8006444:	f8b4 004a 	ldrh.w	r0, [r4, #74]	; 0x4a
 8006448:	0900      	lsrs	r0, r0, #4
    } while (value);
 800644a:	0840      	lsrs	r0, r0, #1
 800644c:	b2b3      	uxth	r3, r6
 800644e:	f106 0601 	add.w	r6, r6, #1
 8006452:	d1fa      	bne.n	800644a <coap_serialize_message+0x10a>
    COAP_SERIALIZE_BLOCK_OPT(pkt, m, COAP_OPTION_BLOCK1, block1, "Block1");
 8006454:	f003 030f 	and.w	r3, r3, #15
 8006458:	4313      	orrs	r3, r2
 800645a:	4628      	mov	r0, r5
 800645c:	460a      	mov	r2, r1
 800645e:	211b      	movs	r1, #27
 8006460:	f7ff ff0b 	bl	800627a <coap_append_int_opt>
 8006464:	2800      	cmp	r0, #0
 8006466:	d17f      	bne.n	8006568 <coap_serialize_message+0x228>
 8006468:	211b      	movs	r1, #27
    COAP_SERIALIZE_INT_OPT(pkt, m, COAP_OPTION_SIZE2, size2, "Size2");
 800646a:	7ca3      	ldrb	r3, [r4, #18]
 800646c:	06de      	lsls	r6, r3, #27
 800646e:	d508      	bpl.n	8006482 <coap_serialize_message+0x142>
 8006470:	460a      	mov	r2, r1
 8006472:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006474:	211c      	movs	r1, #28
 8006476:	4628      	mov	r0, r5
 8006478:	f7ff feff 	bl	800627a <coap_append_int_opt>
 800647c:	2800      	cmp	r0, #0
 800647e:	d173      	bne.n	8006568 <coap_serialize_message+0x228>
 8006480:	211c      	movs	r1, #28
    COAP_SERIALIZE_STRING_OPT(pkt, m, COAP_OPTION_PROXY_URI, proxy_uri, '\0',
                              "Proxy-Uri");
    COAP_SERIALIZE_STRING_OPT(pkt, m, COAP_OPTION_PROXY_SCHEME, proxy_scheme,
                              '\0', "Proxy-Scheme");
#endif
    COAP_SERIALIZE_INT_OPT(pkt, m, COAP_OPTION_SIZE1, size1, "Size1");
 8006482:	7da3      	ldrb	r3, [r4, #22]
 8006484:	06d8      	lsls	r0, r3, #27
 8006486:	d467      	bmi.n	8006558 <coap_serialize_message+0x218>

    /* Payload marker */
    if (pkt->payload_len) {
 8006488:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800648c:	b133      	cbz	r3, 800649c <coap_serialize_message+0x15c>
        if (os_mbuf_append(m, "\xff", 1)) {
 800648e:	2201      	movs	r2, #1
 8006490:	496a      	ldr	r1, [pc, #424]	; (800663c <coap_serialize_message+0x2fc>)
 8006492:	4628      	mov	r0, r5
 8006494:	f7fd ff2d 	bl	80042f2 <os_mbuf_append>
 8006498:	2800      	cmp	r0, #0
 800649a:	d165      	bne.n	8006568 <coap_serialize_message+0x228>
    data_len = OS_MBUF_PKTLEN(m) + pkt->payload_len;

    /*
     * Set header fields, aka CoAP header alignment nightmare.
     */
    if (!tcp_hdr) {
 800649c:	f019 0f01 	tst.w	r9, #1
 80064a0:	79a1      	ldrb	r1, [r4, #6]
 80064a2:	f104 0707 	add.w	r7, r4, #7
 80064a6:	d166      	bne.n	8006576 <coap_serialize_message+0x236>
        len = sizeof(struct coap_udp_hdr) + pkt->token_len;
        os_mbuf_prepend(m, len);
 80064a8:	3104      	adds	r1, #4
 80064aa:	4628      	mov	r0, r5
 80064ac:	f7fe f858 	bl	8004560 <os_mbuf_prepend>
        cuh = (struct coap_udp_hdr *)m->om_data;
 80064b0:	6828      	ldr	r0, [r5, #0]
        cuh->version = pkt->version;
 80064b2:	7822      	ldrb	r2, [r4, #0]
 80064b4:	7803      	ldrb	r3, [r0, #0]
 80064b6:	f362 1387 	bfi	r3, r2, #6, #2
        cuh->type = pkt->type;
 80064ba:	7862      	ldrb	r2, [r4, #1]
 80064bc:	f362 1305 	bfi	r3, r2, #4, #2
 80064c0:	7003      	strb	r3, [r0, #0]
        cuh->token_len = pkt->token_len;
 80064c2:	79a2      	ldrb	r2, [r4, #6]
 80064c4:	f362 0303 	bfi	r3, r2, #0, #4
 80064c8:	7003      	strb	r3, [r0, #0]
        cuh->code = pkt->code;
 80064ca:	78a3      	ldrb	r3, [r4, #2]
 80064cc:	7043      	strb	r3, [r0, #1]
        u16 = htons(pkt->mid);
 80064ce:	88a2      	ldrh	r2, [r4, #4]
 80064d0:	0213      	lsls	r3, r2, #8
 80064d2:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
        memcpy(&cuh->id, &u16, sizeof(u16));
 80064d6:	8043      	strh	r3, [r0, #2]
            cth16->type = COAP_TCP_TYPE16;
            cth16->token_len = pkt->token_len;
            u16 = htons(data_len - COAP_TCP_LENGTH16_OFF);
            memcpy(&cth16->data_len, &u16, sizeof(u16));
            cth16->code = pkt->code;
            memcpy(cth16 + 1, pkt->token, pkt->token_len);
 80064d8:	79a2      	ldrb	r2, [r4, #6]
 80064da:	4639      	mov	r1, r7
 80064dc:	3004      	adds	r0, #4
 80064de:	e065      	b.n	80065ac <coap_serialize_message+0x26c>
            if (array[j] == split_char || j == length) {
 80064e0:	5dba      	ldrb	r2, [r7, r6]
 80064e2:	eb07 0806 	add.w	r8, r7, r6
 80064e6:	2a2f      	cmp	r2, #47	; 0x2f
 80064e8:	d001      	beq.n	80064ee <coap_serialize_message+0x1ae>
 80064ea:	45b2      	cmp	sl, r6
 80064ec:	d114      	bne.n	8006518 <coap_serialize_message+0x1d8>
                blk = part_end - part_start;
 80064ee:	eba8 0803 	sub.w	r8, r8, r3
                rc = coap_append_opt_hdr(m, number - current_number, blk);
 80064f2:	4642      	mov	r2, r8
 80064f4:	f1c1 010b 	rsb	r1, r1, #11
 80064f8:	4628      	mov	r0, r5
                blk = part_end - part_start;
 80064fa:	9301      	str	r3, [sp, #4]
                rc = coap_append_opt_hdr(m, number - current_number, blk);
 80064fc:	f7ff fe74 	bl	80061e8 <coap_append_opt_hdr>
                if (rc) {
 8006500:	bb90      	cbnz	r0, 8006568 <coap_serialize_message+0x228>
                rc = os_mbuf_append(m, part_start, blk);
 8006502:	9b01      	ldr	r3, [sp, #4]
 8006504:	fa1f f288 	uxth.w	r2, r8
 8006508:	4619      	mov	r1, r3
 800650a:	4628      	mov	r0, r5
 800650c:	f7fd fef1 	bl	80042f2 <os_mbuf_append>
                if (rc) {
 8006510:	bb50      	cbnz	r0, 8006568 <coap_serialize_message+0x228>
                current_number = number;
 8006512:	210b      	movs	r1, #11
                ++j; /* skip the splitter */
 8006514:	3601      	adds	r6, #1
                part_start = array + j;
 8006516:	19bb      	adds	r3, r7, r6
        for (j = 0; j <= length + 1; ++j) {
 8006518:	3601      	adds	r6, #1
 800651a:	e73c      	b.n	8006396 <coap_serialize_message+0x56>
            if (array[j] == split_char || j == length) {
 800651c:	5dba      	ldrb	r2, [r7, r6]
 800651e:	eb07 0806 	add.w	r8, r7, r6
 8006522:	2a26      	cmp	r2, #38	; 0x26
 8006524:	d001      	beq.n	800652a <coap_serialize_message+0x1ea>
 8006526:	45b2      	cmp	sl, r6
 8006528:	d114      	bne.n	8006554 <coap_serialize_message+0x214>
                blk = part_end - part_start;
 800652a:	eba8 0803 	sub.w	r8, r8, r3
                rc = coap_append_opt_hdr(m, number - current_number, blk);
 800652e:	4642      	mov	r2, r8
 8006530:	f1c1 010f 	rsb	r1, r1, #15
 8006534:	4628      	mov	r0, r5
                blk = part_end - part_start;
 8006536:	9301      	str	r3, [sp, #4]
                rc = coap_append_opt_hdr(m, number - current_number, blk);
 8006538:	f7ff fe56 	bl	80061e8 <coap_append_opt_hdr>
                if (rc) {
 800653c:	b9a0      	cbnz	r0, 8006568 <coap_serialize_message+0x228>
                rc = os_mbuf_append(m, part_start, blk);
 800653e:	9b01      	ldr	r3, [sp, #4]
 8006540:	fa1f f288 	uxth.w	r2, r8
 8006544:	4619      	mov	r1, r3
 8006546:	4628      	mov	r0, r5
 8006548:	f7fd fed3 	bl	80042f2 <os_mbuf_append>
                if (rc) {
 800654c:	b960      	cbnz	r0, 8006568 <coap_serialize_message+0x228>
                current_number = number;
 800654e:	210f      	movs	r1, #15
                ++j; /* skip the splitter */
 8006550:	3601      	adds	r6, #1
                part_start = array + j;
 8006552:	19bb      	adds	r3, r7, r6
        for (j = 0; j <= length + 1; ++j) {
 8006554:	3601      	adds	r6, #1
 8006556:	e73a      	b.n	80063ce <coap_serialize_message+0x8e>
    COAP_SERIALIZE_INT_OPT(pkt, m, COAP_OPTION_SIZE1, size1, "Size1");
 8006558:	460a      	mov	r2, r1
 800655a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800655c:	213c      	movs	r1, #60	; 0x3c
 800655e:	4628      	mov	r0, r5
 8006560:	f7ff fe8b 	bl	800627a <coap_append_int_opt>
 8006564:	2800      	cmp	r0, #0
 8006566:	d08f      	beq.n	8006488 <coap_serialize_message+0x148>
        OS_MBUF_PKTLEN(m), OS_MBUF_PKTLEN(m) - pkt->payload_len,
        pkt->payload_len);

    return 0;
err_mem:
    if (pkt->payload_m) {
 8006568:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800656a:	b108      	cbz	r0, 8006570 <coap_serialize_message+0x230>
        os_mbuf_free_chain(pkt->payload_m);
 800656c:	f7fd feab 	bl	80042c6 <os_mbuf_free_chain>
    }
    STATS_INC(coap_stats, oerr);
    return -1;
 8006570:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006574:	e090      	b.n	8006698 <coap_serialize_message+0x358>
    data_len = OS_MBUF_PKTLEN(m) + pkt->payload_len;
 8006576:	8a2e      	ldrh	r6, [r5, #16]
 8006578:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800657c:	441e      	add	r6, r3
        if (data_len < 13) {
 800657e:	2e0c      	cmp	r6, #12
 8006580:	dc24      	bgt.n	80065cc <coap_serialize_message+0x28c>
            os_mbuf_prepend(m, len);
 8006582:	3102      	adds	r1, #2
 8006584:	4628      	mov	r0, r5
 8006586:	f7fd ffeb 	bl	8004560 <os_mbuf_prepend>
            memcpy(cth0 + 1, pkt->token, pkt->token_len);
 800658a:	4639      	mov	r1, r7
            cth0 = (struct coap_tcp_hdr0 *)m->om_data;
 800658c:	6828      	ldr	r0, [r5, #0]
            cth0->data_len = data_len;
 800658e:	7803      	ldrb	r3, [r0, #0]
            memcpy(cth0 + 1, pkt->token, pkt->token_len);
 8006590:	3002      	adds	r0, #2
            cth0->data_len = data_len;
 8006592:	f366 1307 	bfi	r3, r6, #4, #4
 8006596:	f800 3c02 	strb.w	r3, [r0, #-2]
            cth0->token_len = pkt->token_len;
 800659a:	79a2      	ldrb	r2, [r4, #6]
 800659c:	b2db      	uxtb	r3, r3
 800659e:	f362 0303 	bfi	r3, r2, #0, #4
 80065a2:	f800 3c02 	strb.w	r3, [r0, #-2]
            cth0->code = pkt->code;
 80065a6:	78a3      	ldrb	r3, [r4, #2]
 80065a8:	f800 3c01 	strb.w	r3, [r0, #-1]
            memcpy(cth32 + 1, pkt->token, pkt->token_len);
 80065ac:	f7fe fede 	bl	800536c <memcpy>
    if (pkt->payload_m) {
 80065b0:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80065b2:	2800      	cmp	r0, #0
 80065b4:	d070      	beq.n	8006698 <coap_serialize_message+0x358>
        assert(pkt->payload_len <= OS_MBUF_PKTLEN(pkt->payload_m));
 80065b6:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 80065ba:	8a01      	ldrh	r1, [r0, #16]
 80065bc:	428b      	cmp	r3, r1
 80065be:	d962      	bls.n	8006686 <coap_serialize_message+0x346>
 80065c0:	2300      	movs	r3, #0
 80065c2:	461a      	mov	r2, r3
 80065c4:	4619      	mov	r1, r3
 80065c6:	4618      	mov	r0, r3
 80065c8:	f7fd fa74 	bl	8003ab4 <__assert_func>
        } else if (data_len < 269) {
 80065cc:	f5b6 7f86 	cmp.w	r6, #268	; 0x10c
 80065d0:	dc16      	bgt.n	8006600 <coap_serialize_message+0x2c0>
            os_mbuf_prepend(m, len);
 80065d2:	3103      	adds	r1, #3
 80065d4:	4628      	mov	r0, r5
 80065d6:	f7fd ffc3 	bl	8004560 <os_mbuf_prepend>
            cth8->type = COAP_TCP_TYPE8;
 80065da:	220d      	movs	r2, #13
            cth8 = (struct coap_tcp_hdr8 *)m->om_data;
 80065dc:	6828      	ldr	r0, [r5, #0]
            cth8->data_len = data_len - COAP_TCP_LENGTH8_OFF;
 80065de:	3e0d      	subs	r6, #13
            cth8->type = COAP_TCP_TYPE8;
 80065e0:	7803      	ldrb	r3, [r0, #0]
            memcpy(cth8 + 1, pkt->token, pkt->token_len);
 80065e2:	4639      	mov	r1, r7
            cth8->type = COAP_TCP_TYPE8;
 80065e4:	f362 1307 	bfi	r3, r2, #4, #4
 80065e8:	7003      	strb	r3, [r0, #0]
            cth8->token_len = pkt->token_len;
 80065ea:	79a2      	ldrb	r2, [r4, #6]
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	f362 0303 	bfi	r3, r2, #0, #4
 80065f2:	7003      	strb	r3, [r0, #0]
            cth8->data_len = data_len - COAP_TCP_LENGTH8_OFF;
 80065f4:	7046      	strb	r6, [r0, #1]
            cth8->code = pkt->code;
 80065f6:	78a3      	ldrb	r3, [r4, #2]
            memcpy(cth8 + 1, pkt->token, pkt->token_len);
 80065f8:	3003      	adds	r0, #3
            cth8->code = pkt->code;
 80065fa:	f800 3c01 	strb.w	r3, [r0, #-1]
 80065fe:	e7d5      	b.n	80065ac <coap_serialize_message+0x26c>
        } else if (data_len < 65805) {
 8006600:	4b0f      	ldr	r3, [pc, #60]	; (8006640 <coap_serialize_message+0x300>)
 8006602:	429e      	cmp	r6, r3
 8006604:	dc1e      	bgt.n	8006644 <coap_serialize_message+0x304>
            os_mbuf_prepend(m, len);
 8006606:	3104      	adds	r1, #4
 8006608:	4628      	mov	r0, r5
 800660a:	f7fd ffa9 	bl	8004560 <os_mbuf_prepend>
            cth16->type = COAP_TCP_TYPE16;
 800660e:	220e      	movs	r2, #14
            cth16 = (struct coap_tcp_hdr16 *)m->om_data;
 8006610:	6828      	ldr	r0, [r5, #0]
            cth16->type = COAP_TCP_TYPE16;
 8006612:	7803      	ldrb	r3, [r0, #0]
 8006614:	f362 1307 	bfi	r3, r2, #4, #4
 8006618:	7003      	strb	r3, [r0, #0]
            cth16->token_len = pkt->token_len;
 800661a:	79a2      	ldrb	r2, [r4, #6]
 800661c:	f362 0303 	bfi	r3, r2, #0, #4
            u16 = htons(data_len - COAP_TCP_LENGTH16_OFF);
 8006620:	f46f 7286 	mvn.w	r2, #268	; 0x10c
 8006624:	4416      	add	r6, r2
            cth16->token_len = pkt->token_len;
 8006626:	7003      	strb	r3, [r0, #0]
            u16 = htons(data_len - COAP_TCP_LENGTH16_OFF);
 8006628:	0233      	lsls	r3, r6, #8
 800662a:	ea43 2626 	orr.w	r6, r3, r6, asr #8
            memcpy(&cth16->data_len, &u16, sizeof(u16));
 800662e:	f8a0 6001 	strh.w	r6, [r0, #1]
            cth16->code = pkt->code;
 8006632:	78a3      	ldrb	r3, [r4, #2]
 8006634:	70c3      	strb	r3, [r0, #3]
 8006636:	e74f      	b.n	80064d8 <coap_serialize_message+0x198>
 8006638:	20003b98 	.word	0x20003b98
 800663c:	0800df01 	.word	0x0800df01
 8006640:	0001010c 	.word	0x0001010c
            os_mbuf_prepend(m, len);
 8006644:	3106      	adds	r1, #6
 8006646:	4628      	mov	r0, r5
 8006648:	f7fd ff8a 	bl	8004560 <os_mbuf_prepend>
            cth32 = (struct coap_tcp_hdr32 *)m->om_data;
 800664c:	6828      	ldr	r0, [r5, #0]
            u32 = htonl(data_len - COAP_TCP_LENGTH32_OFF);
 800664e:	f5a6 3680 	sub.w	r6, r6, #65536	; 0x10000
            cth32->type = COAP_TCP_TYPE32;
 8006652:	7803      	ldrb	r3, [r0, #0]
            memcpy(cth32 + 1, pkt->token, pkt->token_len);
 8006654:	4639      	mov	r1, r7
            cth32->type = COAP_TCP_TYPE32;
 8006656:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 800665a:	7003      	strb	r3, [r0, #0]
            cth32->token_len = pkt->token_len;
 800665c:	79a2      	ldrb	r2, [r4, #6]
            memcpy(cth32 + 1, pkt->token, pkt->token_len);
 800665e:	3006      	adds	r0, #6
            cth32->token_len = pkt->token_len;
 8006660:	f362 0303 	bfi	r3, r2, #0, #4
 8006664:	f800 3c06 	strb.w	r3, [r0, #-6]
            u32 = htonl(data_len - COAP_TCP_LENGTH32_OFF);
 8006668:	f46f 7386 	mvn.w	r3, #268	; 0x10c
 800666c:	441e      	add	r6, r3
 800666e:	0233      	lsls	r3, r6, #8
 8006670:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006674:	ea43 6606 	orr.w	r6, r3, r6, lsl #24
            memcpy(&cth32->data_len, &u32, sizeof(u32));
 8006678:	f840 6c05 	str.w	r6, [r0, #-5]
            cth32->code = pkt->code;
 800667c:	78a3      	ldrb	r3, [r4, #2]
 800667e:	f800 3c01 	strb.w	r3, [r0, #-1]
            memcpy(cth32 + 1, pkt->token, pkt->token_len);
 8006682:	79a2      	ldrb	r2, [r4, #6]
 8006684:	e792      	b.n	80065ac <coap_serialize_message+0x26c>
        if (pkt->payload_len < OS_MBUF_PKTLEN(pkt->payload_m)) {
 8006686:	d202      	bcs.n	800668e <coap_serialize_message+0x34e>
            os_mbuf_adj(pkt->payload_m,
 8006688:	1ac9      	subs	r1, r1, r3
 800668a:	f7fd feeb 	bl	8004464 <os_mbuf_adj>
        os_mbuf_concat(m, pkt->payload_m);
 800668e:	4628      	mov	r0, r5
 8006690:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8006692:	f7fd ffe5 	bl	8004660 <os_mbuf_concat>
    return 0;
 8006696:	2000      	movs	r0, #0
}
 8006698:	b003      	add	sp, #12
 800669a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800669e:	bf00      	nop

080066a0 <coap_send_message>:
/*---------------------------------------------------------------------------*/
void
coap_send_message(struct os_mbuf *m, int dup)
{
 80066a0:	b508      	push	{r3, lr}
 80066a2:	4603      	mov	r3, r0
    OC_LOG(INFO, "coap_send_message(): (%u) %s\n", OS_MBUF_PKTLEN(m),
      dup ? "dup" : "");

    STATS_INC(coap_stats, oframe);

    if (dup) {
 80066a4:	b119      	cbz	r1, 80066ae <coap_send_message+0xe>
        m = os_mbuf_dup(m);
 80066a6:	f7fd fe70 	bl	800438a <os_mbuf_dup>
        if (!m) {
 80066aa:	4603      	mov	r3, r0
 80066ac:	b120      	cbz	r0, 80066b8 <coap_send_message+0x18>
            STATS_INC(coap_stats, oerr);
            return;
        }
    }
    oc_send_message(m);
 80066ae:	4618      	mov	r0, r3
}
 80066b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    oc_send_message(m);
 80066b4:	f7ff bcd6 	b.w	8006064 <oc_send_message>
}
 80066b8:	bd08      	pop	{r3, pc}

080066ba <coap_set_token>:
}
/*---------------------------------------------------------------------------*/
int
coap_set_token(coap_packet_t *pkt, const uint8_t *token, size_t token_len)
{
    pkt->token_len = MIN(COAP_TOKEN_LEN, token_len);
 80066ba:	2a08      	cmp	r2, #8
 80066bc:	bf28      	it	cs
 80066be:	2208      	movcs	r2, #8
{
 80066c0:	b510      	push	{r4, lr}
    pkt->token_len = MIN(COAP_TOKEN_LEN, token_len);
 80066c2:	4614      	mov	r4, r2
 80066c4:	7182      	strb	r2, [r0, #6]
    memcpy(pkt->token, token, pkt->token_len);
 80066c6:	3007      	adds	r0, #7
 80066c8:	f7fe fe50 	bl	800536c <memcpy>

    return pkt->token_len;
}
 80066cc:	4620      	mov	r0, r4
 80066ce:	bd10      	pop	{r4, pc}

080066d0 <coap_set_header_content_format>:
#endif
int
coap_set_header_content_format(coap_packet_t *pkt, unsigned int format)
{
    pkt->content_format = format;
    SET_OPTION(pkt, COAP_OPTION_CONTENT_FORMAT);
 80066d0:	7c03      	ldrb	r3, [r0, #16]
    pkt->content_format = format;
 80066d2:	8301      	strh	r1, [r0, #24]
    SET_OPTION(pkt, COAP_OPTION_CONTENT_FORMAT);
 80066d4:	f043 0310 	orr.w	r3, r3, #16
 80066d8:	7403      	strb	r3, [r0, #16]
    return 1;
}
 80066da:	2001      	movs	r0, #1
 80066dc:	4770      	bx	lr

080066de <coap_set_header_accept>:
#ifdef OC_CLIENT
int
coap_set_header_accept(coap_packet_t *pkt, unsigned int accept)
{
    pkt->accept = accept;
    SET_OPTION(pkt, COAP_OPTION_ACCEPT);
 80066de:	7c43      	ldrb	r3, [r0, #17]
    pkt->accept = accept;
 80066e0:	8681      	strh	r1, [r0, #52]	; 0x34
    SET_OPTION(pkt, COAP_OPTION_ACCEPT);
 80066e2:	f043 0302 	orr.w	r3, r3, #2
 80066e6:	7443      	strb	r3, [r0, #17]
    return 1;
}
 80066e8:	2001      	movs	r0, #1
 80066ea:	4770      	bx	lr

080066ec <coap_set_header_uri_path>:
    return maxlen;
}
#ifdef OC_CLIENT
int
coap_set_header_uri_path(coap_packet_t *pkt, const char *path)
{
 80066ec:	b510      	push	{r4, lr}
 80066ee:	4604      	mov	r4, r0
 80066f0:	4608      	mov	r0, r1
    while (path[0] == '/') {
 80066f2:	7803      	ldrb	r3, [r0, #0]
 80066f4:	3101      	adds	r1, #1
 80066f6:	2b2f      	cmp	r3, #47	; 0x2f
 80066f8:	d0fa      	beq.n	80066f0 <coap_set_header_uri_path+0x4>
        ++path;
    }
    pkt->uri_path = (char *)path;
 80066fa:	62e0      	str	r0, [r4, #44]	; 0x2c
    pkt->uri_path_len = strlen(path);
 80066fc:	f7fe fe64 	bl	80053c8 <strlen>

    SET_OPTION(pkt, COAP_OPTION_URI_PATH);
 8006700:	7c23      	ldrb	r3, [r4, #16]
    pkt->uri_path_len = strlen(path);
 8006702:	8560      	strh	r0, [r4, #42]	; 0x2a
    SET_OPTION(pkt, COAP_OPTION_URI_PATH);
 8006704:	f043 0308 	orr.w	r3, r3, #8
 8006708:	7423      	strb	r3, [r4, #16]
    return pkt->uri_path_len;
}
 800670a:	b280      	uxth	r0, r0
 800670c:	bd10      	pop	{r4, pc}

0800670e <coap_set_header_observe>:

int
coap_set_header_observe(coap_packet_t *pkt, uint32_t observe)
{
    pkt->observe = observe;
    SET_OPTION(pkt, COAP_OPTION_OBSERVE);
 800670e:	7bc3      	ldrb	r3, [r0, #15]
    pkt->observe = observe;
 8006710:	6301      	str	r1, [r0, #48]	; 0x30
    SET_OPTION(pkt, COAP_OPTION_OBSERVE);
 8006712:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006716:	73c3      	strb	r3, [r0, #15]
    return 1;
}
 8006718:	2001      	movs	r0, #1
 800671a:	4770      	bx	lr

0800671c <oc_evq_get>:

struct os_eventq *
oc_evq_get(void)
{
    return oc_evq;
}
 800671c:	4b01      	ldr	r3, [pc, #4]	; (8006724 <oc_evq_get+0x8>)
 800671e:	6818      	ldr	r0, [r3, #0]
 8006720:	4770      	bx	lr
 8006722:	bf00      	nop
 8006724:	20002ae4 	.word	0x20002ae4

08006728 <oc_transport_register>:

int8_t
oc_transport_register(const struct oc_transport *ot)
{
    int i;
    int first = -1;
 8006728:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff

    for (i = 0; i < OC_TRANSPORT_MAX; i++) {
 800672c:	2200      	movs	r2, #0
{
 800672e:	b530      	push	{r4, r5, lr}
        if (oc_transports[i] == ot) {
 8006730:	4909      	ldr	r1, [pc, #36]	; (8006758 <oc_transport_register+0x30>)
 8006732:	f851 4022 	ldr.w	r4, [r1, r2, lsl #2]
 8006736:	0095      	lsls	r5, r2, #2
 8006738:	4284      	cmp	r4, r0
 800673a:	d009      	beq.n	8006750 <oc_transport_register+0x28>
            return -1;
        }
        if (oc_transports[i] == NULL && first < 0) {
 800673c:	b91c      	cbnz	r4, 8006746 <oc_transport_register+0x1e>
 800673e:	1c5c      	adds	r4, r3, #1
            oc_transports[i] = ot;
 8006740:	bf04      	itt	eq
 8006742:	4613      	moveq	r3, r2
 8006744:	5068      	streq	r0, [r5, r1]
    for (i = 0; i < OC_TRANSPORT_MAX; i++) {
 8006746:	3201      	adds	r2, #1
 8006748:	2a08      	cmp	r2, #8
 800674a:	d1f2      	bne.n	8006732 <oc_transport_register+0xa>
            first = i;
        }
    }
    return first;
 800674c:	b258      	sxtb	r0, r3
}
 800674e:	bd30      	pop	{r4, r5, pc}
            return -1;
 8006750:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006754:	e7fb      	b.n	800674e <oc_transport_register+0x26>
 8006756:	bf00      	nop
 8006758:	20003b98 	.word	0x20003b98

0800675c <oc_send_buffer>:
    struct oc_endpoint *oe;
    const struct oc_transport *ot;

    oe = OC_MBUF_ENDPOINT(m);

    ot = oc_transports[oe->ep.oe_type];
 800675c:	7e03      	ldrb	r3, [r0, #24]
 800675e:	4a05      	ldr	r2, [pc, #20]	; (8006774 <oc_send_buffer+0x18>)
 8006760:	f003 0307 	and.w	r3, r3, #7
 8006764:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    if (ot) {
 8006768:	b10b      	cbz	r3, 800676e <oc_send_buffer+0x12>
        ot->ot_tx_ucast(m);
 800676a:	68db      	ldr	r3, [r3, #12]
 800676c:	4718      	bx	r3
    } else {
        OC_LOG(ERROR, "Unknown transport option %u\n", oe->ep.oe_type);
        os_mbuf_free_chain(m);
 800676e:	f7fd bdaa 	b.w	80042c6 <os_mbuf_free_chain>
 8006772:	bf00      	nop
 8006774:	20003b98 	.word	0x20003b98

08006778 <oc_send_multicast_message>:
/*
 * Send on all the transports.
 */
void
oc_send_multicast_message(struct os_mbuf *m)
{
 8006778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    const struct oc_transport *ot;
    const struct oc_transport *prev = NULL;
    struct os_mbuf *n;
    int i;

    for (i = 0; i < OC_TRANSPORT_MAX; i++) {
 800677c:	2500      	movs	r5, #0
{
 800677e:	4606      	mov	r6, r0
    const struct oc_transport *prev = NULL;
 8006780:	462c      	mov	r4, r5
        if (!oc_transports[i]) {
 8006782:	f8df 9040 	ldr.w	r9, [pc, #64]	; 80067c4 <oc_send_multicast_message+0x4c>
 8006786:	f859 7025 	ldr.w	r7, [r9, r5, lsl #2]
 800678a:	b16f      	cbz	r7, 80067a8 <oc_send_multicast_message+0x30>
            continue;
        }

        ot = oc_transports[i];
        if (prev) {
 800678c:	b15c      	cbz	r4, 80067a6 <oc_send_multicast_message+0x2e>
            n = os_mbuf_dup(m);
 800678e:	4630      	mov	r0, r6
 8006790:	f7fd fdfb 	bl	800438a <os_mbuf_dup>
 8006794:	4680      	mov	r8, r0
            prev->ot_tx_mcast(m);
 8006796:	6923      	ldr	r3, [r4, #16]
 8006798:	4630      	mov	r0, r6
 800679a:	4798      	blx	r3
            if (!n) {
 800679c:	f1b8 0f00 	cmp.w	r8, #0
 80067a0:	d10c      	bne.n	80067bc <oc_send_multicast_message+0x44>
        prev = ot;
    }
    if (prev) {
        prev->ot_tx_mcast(m);
    }
}
 80067a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067a6:	463c      	mov	r4, r7
    for (i = 0; i < OC_TRANSPORT_MAX; i++) {
 80067a8:	3501      	adds	r5, #1
 80067aa:	2d08      	cmp	r5, #8
 80067ac:	d1eb      	bne.n	8006786 <oc_send_multicast_message+0xe>
    if (prev) {
 80067ae:	2c00      	cmp	r4, #0
 80067b0:	d0f7      	beq.n	80067a2 <oc_send_multicast_message+0x2a>
        prev->ot_tx_mcast(m);
 80067b2:	6923      	ldr	r3, [r4, #16]
 80067b4:	4630      	mov	r0, r6
}
 80067b6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        prev->ot_tx_mcast(m);
 80067ba:	4718      	bx	r3
 80067bc:	463c      	mov	r4, r7
 80067be:	4646      	mov	r6, r8
 80067c0:	e7f2      	b.n	80067a8 <oc_send_multicast_message+0x30>
 80067c2:	bf00      	nop
 80067c4:	20003b98 	.word	0x20003b98

080067c8 <oc_init>:
    return rc;
}

void
oc_init(void)
{
 80067c8:	b508      	push	{r3, lr}
    SYSINIT_ASSERT_ACTIVE();
 80067ca:	4b07      	ldr	r3, [pc, #28]	; (80067e8 <oc_init+0x20>)
 80067cc:	781b      	ldrb	r3, [r3, #0]
 80067ce:	b923      	cbnz	r3, 80067da <oc_init+0x12>
 80067d0:	461a      	mov	r2, r3
 80067d2:	4619      	mov	r1, r3
 80067d4:	4618      	mov	r0, r3
 80067d6:	f7fd f96d 	bl	8003ab4 <__assert_func>
    oc_ri_mem_init();
 80067da:	f7ff fc91 	bl	8006100 <oc_ri_mem_init>
    oc_evq_set(os_eventq_dflt_get());
 80067de:	f7fd fccf 	bl	8004180 <os_eventq_dflt_get>
    oc_evq = evq;
 80067e2:	4b02      	ldr	r3, [pc, #8]	; (80067ec <oc_init+0x24>)
 80067e4:	6018      	str	r0, [r3, #0]
}
 80067e6:	bd08      	pop	{r3, pc}
 80067e8:	20003a30 	.word	0x20003a30
 80067ec:	20002ae4 	.word	0x20002ae4

080067f0 <oc_clock_time>:
{
    /* in mynewt clock is initialized elsewhere */
}
oc_clock_time_t oc_clock_time(void)
{
    return os_time_get();
 80067f0:	f7fe bb26 	b.w	8004e40 <os_time_get>

080067f4 <oc_random_rand>:
{
    srand(seed);
}

unsigned short oc_random_rand(void)
{
 80067f4:	b508      	push	{r3, lr}
}

#define RAND_MAX 0x7fffffff
__extern_inline int rand(void)
{
	return (int)lrand48();
 80067f6:	f002 fef1 	bl	80095dc <lrand48>
    return rand();
}
 80067fa:	b280      	uxth	r0, r0
 80067fc:	bd08      	pop	{r3, pc}

080067fe <mem_init_mbuf_pool>:

int
mem_init_mbuf_pool(void *mem, struct os_mempool *mempool,
                   struct os_mbuf_pool *mbuf_pool, int num_blocks,
                   int block_size, char *name)
{
 80067fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006800:	460c      	mov	r4, r1
    int rc;

    rc = os_mempool_init(mempool, num_blocks, block_size, mem, name);
 8006802:	b29e      	uxth	r6, r3
{
 8006804:	9d08      	ldr	r5, [sp, #32]
    rc = os_mempool_init(mempool, num_blocks, block_size, mem, name);
 8006806:	9b09      	ldr	r3, [sp, #36]	; 0x24
{
 8006808:	4617      	mov	r7, r2
    rc = os_mempool_init(mempool, num_blocks, block_size, mem, name);
 800680a:	9300      	str	r3, [sp, #0]
 800680c:	462a      	mov	r2, r5
 800680e:	4603      	mov	r3, r0
 8006810:	4631      	mov	r1, r6
 8006812:	4620      	mov	r0, r4
 8006814:	f7fd ff76 	bl	8004704 <os_mempool_init>
    if (rc != 0) {
 8006818:	b940      	cbnz	r0, 800682c <mem_init_mbuf_pool+0x2e>
        return rc;
    }

    rc = os_mbuf_pool_init(mbuf_pool, mempool, block_size, num_blocks);
 800681a:	4633      	mov	r3, r6
 800681c:	4621      	mov	r1, r4
 800681e:	4638      	mov	r0, r7
 8006820:	b2aa      	uxth	r2, r5
    if (rc != 0) {
        return rc;
    }

    return 0;
}
 8006822:	b003      	add	sp, #12
 8006824:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    rc = os_mbuf_pool_init(mbuf_pool, mempool, block_size, num_blocks);
 8006828:	f7fd bd14 	b.w	8004254 <os_mbuf_pool_init>
}
 800682c:	b003      	add	sp, #12
 800682e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006830 <sysinit_app>:
void init_sensor_coap(void);
void remote_sensor_create(void);

void
sysinit_app(void)
{
 8006830:	b508      	push	{r3, lr}
    /*** Stage 0 */
    /* 0.0: os_pkg_init (kernel/os) */
    os_pkg_init();
 8006832:	f7fd fa87 	bl	8003d44 <os_pkg_init>

    /*** Stage 2 */
    /* 2.0: flash_map_init (sys/flash_map) */
    flash_map_init();
 8006836:	f005 fbdb 	bl	800bff0 <flash_map_init>

    /*** Stage 20 */
    /* 20.0: console_pkg_init (libs/semihosting_console) */
    console_pkg_init();
 800683a:	f7fb fcd3 	bl	80021e4 <console_pkg_init>

    /*** Stage 100 */
    /* 100.0: mfg_init (sys/mfg) */
    mfg_init();
 800683e:	f005 fd05 	bl	800c24c <mfg_init>
    /* 100.1: modlog_init (sys/log/modlog) */
    modlog_init();
 8006842:	f005 fc2b 	bl	800c09c <modlog_init>

    /*** Stage 300 */
    /* 300.0: oc_init (net/oic) */
    oc_init();
 8006846:	f7ff ffbf 	bl	80067c8 <oc_init>

    /*** Stage 301 */
    /* 301.0: oc_register_gatt (net/oic) */
    oc_register_gatt();
 800684a:	f005 fb9b 	bl	800bf84 <oc_register_gatt>
    /* 301.1: oc_register_ip4 (net/oic) */
    oc_register_ip4();
 800684e:	f005 fb9a 	bl	800bf86 <oc_register_ip4>
    /* 301.2: oc_register_ip6 (net/oic) */
    oc_register_ip6();
 8006852:	f005 fb99 	bl	800bf88 <oc_register_ip6>
    /* 301.3: oc_register_lora (net/oic) */
    oc_register_lora();
 8006856:	f005 fb98 	bl	800bf8a <oc_register_lora>
    /* 301.4: oc_register_serial (net/oic) */
    oc_register_serial();
 800685a:	f005 fb97 	bl	800bf8c <oc_register_serial>

    /*** Stage 500 */
    /* 500.0: sensor_dev_create (hw/sensor/creator) */
    sensor_dev_create();
 800685e:	f002 fe2b 	bl	80094b8 <sensor_dev_create>

    /*** Stage 501 */
    /* 501.0: sensor_pkg_init (hw/sensor) */
    sensor_pkg_init();
 8006862:	f7fc ff69 	bl	8003738 <sensor_pkg_init>

    /*** Stage 610 */
    /* 610.0: stm32f1_adc_create (libs/adc_stm32f1) */
    stm32f1_adc_create();
 8006866:	f002 fef5 	bl	8009654 <stm32f1_adc_create>

    /*** Stage 620 */
    /* 620.0: temp_stm32_create (libs/temp_stm32) */
    temp_stm32_create();
 800686a:	f005 fb51 	bl	800bf10 <temp_stm32_create>

    /*** Stage 630 */
    /* 630.0: hmac_prng_init (libs/hmac_prng) */
    hmac_prng_init();
 800686e:	f7ff f851 	bl	8005914 <hmac_prng_init>

    /*** Stage 640 */
    /* 640.0: sensor_network_init (libs/sensor_network) */
    sensor_network_init();
 8006872:	f7fb fe75 	bl	8002560 <sensor_network_init>

    /*** Stage 650 */
    /* 650.0: esp8266_create (libs/esp8266) */
    esp8266_create();
 8006876:	f003 f8b1 	bl	80099dc <esp8266_create>
    /* 650.1: nrf24l01_create (libs/nrf24l01) */
    nrf24l01_create();
 800687a:	f004 f827 	bl	800a8cc <nrf24l01_create>

    /*** Stage 660 */
    /* 660.0: init_sensor_coap (libs/sensor_coap) */
    init_sensor_coap();
 800687e:	f7ff f931 	bl	8005ae4 <init_sensor_coap>

    /*** Stage 670 */
    /* 670.0: remote_sensor_create (libs/remote_sensor) */
    remote_sensor_create();
}
 8006882:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    remote_sensor_create();
 8006886:	f005 b903 	b.w	800ba90 <remote_sensor_create>
	...

0800688c <__wrap_coap_receive>:
}

///////////////////////////////////////////////////////////////////////////////
//  Other Functions

int __wrap_coap_receive(/* struct os_mbuf **mp */) {
 800688c:	b508      	push	{r3, lr}
    //  We override the default coap_receive() with an empty function so that we will 
    //  NOT link in any modules for receiving and parsing CoAP requests, to save ROM space.
    //  We only need to transmit CoAP requests.  The overriding is done via the Linker Flag
    //  "-Wl,-wrap,coap_receive" in apps/my_sensor_app/pkg.yml
    console_printf("coap_receive NOT IMPLEMENTED\n");
 800688e:	4803      	ldr	r0, [pc, #12]	; (800689c <__wrap_coap_receive+0x10>)
 8006890:	f7fb fccc 	bl	800222c <console_printf>
    return -1;
}
 8006894:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006898:	bd08      	pop	{r3, pc}
 800689a:	bf00      	nop
 800689c:	0800df03 	.word	0x0800df03

080068a0 <_fini>:
//  Other Functions

//  Dummy destructor for global C++ objects, since our program never terminates.  
//  From https://arobenko.gitbooks.io/bare_metal_cpp/content/compiler_output/static.html.
void* __dso_handle = NULL;
void _fini(void) { }
 80068a0:	4770      	bx	lr

080068a2 <update>:

/*
 * Assumes: prng != NULL, e != NULL, len >= 0.
 */
static void update(TCHmacPrng_t prng, const uint8_t *e, unsigned int len)
{
 80068a2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80068a6:	4604      	mov	r4, r0
	const uint8_t separator0 = 0x00;
 80068a8:	2300      	movs	r3, #0
	const uint8_t separator1 = 0x01;
 80068aa:	2701      	movs	r7, #1
{
 80068ac:	4688      	mov	r8, r1
 80068ae:	4691      	mov	r9, r2

	/* use current state, e and separator 0 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
 80068b0:	f504 7588 	add.w	r5, r4, #272	; 0x110
	const uint8_t separator0 = 0x00;
 80068b4:	f88d 3006 	strb.w	r3, [sp, #6]
	const uint8_t separator1 = 0x01;
 80068b8:	f88d 7007 	strb.w	r7, [sp, #7]
	(void)tc_hmac_init(&prng->h);
 80068bc:	f000 f93d 	bl	8006b3a <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
 80068c0:	4629      	mov	r1, r5
 80068c2:	2220      	movs	r2, #32
 80068c4:	4620      	mov	r0, r4
 80068c6:	f000 f945 	bl	8006b54 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator0, sizeof(separator0));
 80068ca:	463a      	mov	r2, r7
 80068cc:	f10d 0106 	add.w	r1, sp, #6
 80068d0:	4620      	mov	r0, r4
 80068d2:	f000 f93f 	bl	8006b54 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, e, len);
	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
 80068d6:	f104 06f0 	add.w	r6, r4, #240	; 0xf0
	(void)tc_hmac_update(&prng->h, e, len);
 80068da:	464a      	mov	r2, r9
 80068dc:	4641      	mov	r1, r8
 80068de:	4620      	mov	r0, r4
 80068e0:	f000 f938 	bl	8006b54 <tc_hmac_update>
	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
 80068e4:	4622      	mov	r2, r4
 80068e6:	2120      	movs	r1, #32
 80068e8:	4630      	mov	r0, r6
 80068ea:	f000 f939 	bl	8006b60 <tc_hmac_final>
	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
 80068ee:	4631      	mov	r1, r6
 80068f0:	2220      	movs	r2, #32
 80068f2:	4620      	mov	r0, r4
 80068f4:	f000 f8e3 	bl	8006abe <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
 80068f8:	4620      	mov	r0, r4
 80068fa:	f000 f91e 	bl	8006b3a <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
 80068fe:	4629      	mov	r1, r5
 8006900:	2220      	movs	r2, #32
 8006902:	4620      	mov	r0, r4
 8006904:	f000 f926 	bl	8006b54 <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
 8006908:	4622      	mov	r2, r4
 800690a:	2120      	movs	r1, #32
 800690c:	4628      	mov	r0, r5
 800690e:	f000 f927 	bl	8006b60 <tc_hmac_final>

	/* use current state, e and separator 1 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
 8006912:	4620      	mov	r0, r4
 8006914:	f000 f911 	bl	8006b3a <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
 8006918:	4629      	mov	r1, r5
 800691a:	2220      	movs	r2, #32
 800691c:	4620      	mov	r0, r4
 800691e:	f000 f919 	bl	8006b54 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator1, sizeof(separator1));
 8006922:	463a      	mov	r2, r7
 8006924:	f10d 0107 	add.w	r1, sp, #7
 8006928:	4620      	mov	r0, r4
 800692a:	f000 f913 	bl	8006b54 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, e, len);
 800692e:	464a      	mov	r2, r9
 8006930:	4641      	mov	r1, r8
 8006932:	4620      	mov	r0, r4
 8006934:	f000 f90e 	bl	8006b54 <tc_hmac_update>
	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
 8006938:	4622      	mov	r2, r4
 800693a:	2120      	movs	r1, #32
 800693c:	4630      	mov	r0, r6
 800693e:	f000 f90f 	bl	8006b60 <tc_hmac_final>
	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
 8006942:	4631      	mov	r1, r6
 8006944:	2220      	movs	r2, #32
 8006946:	4620      	mov	r0, r4
 8006948:	f000 f8b9 	bl	8006abe <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
 800694c:	4620      	mov	r0, r4
 800694e:	f000 f8f4 	bl	8006b3a <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
 8006952:	4629      	mov	r1, r5
 8006954:	2220      	movs	r2, #32
 8006956:	4620      	mov	r0, r4
 8006958:	f000 f8fc 	bl	8006b54 <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
 800695c:	4622      	mov	r2, r4
 800695e:	2120      	movs	r1, #32
 8006960:	4628      	mov	r0, r5
 8006962:	f000 f8fd 	bl	8006b60 <tc_hmac_final>
}
 8006966:	b003      	add	sp, #12
 8006968:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800696c <tc_hmac_prng_init>:

int tc_hmac_prng_init(TCHmacPrng_t prng,
		      const uint8_t *personalization,
		      unsigned int plen)
{
 800696c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800696e:	460c      	mov	r4, r1
 8006970:	4617      	mov	r7, r2

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
 8006972:	4605      	mov	r5, r0
 8006974:	b1d8      	cbz	r0, 80069ae <tc_hmac_prng_init+0x42>
	    personalization == (uint8_t *) 0 ||
 8006976:	b1d9      	cbz	r1, 80069b0 <tc_hmac_prng_init+0x44>
	    plen > MAX_PLEN) {
		return TC_CRYPTO_FAIL;
	}

	/* put the generator into a known state: */
	_set(prng->key, 0x00, sizeof(prng->key));
 8006978:	f100 06f0 	add.w	r6, r0, #240	; 0xf0
 800697c:	2220      	movs	r2, #32
 800697e:	2100      	movs	r1, #0
 8006980:	4630      	mov	r0, r6
 8006982:	f000 f87d 	bl	8006a80 <_set>
	_set(prng->v, 0x01, sizeof(prng->v));
 8006986:	2220      	movs	r2, #32
 8006988:	2101      	movs	r1, #1
 800698a:	f505 7088 	add.w	r0, r5, #272	; 0x110
 800698e:	f000 f877 	bl	8006a80 <_set>
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
 8006992:	2220      	movs	r2, #32
 8006994:	4631      	mov	r1, r6
 8006996:	4628      	mov	r0, r5
 8006998:	f000 f891 	bl	8006abe <tc_hmac_set_key>
	/* update assumes SOME key has been configured into HMAC */

	update(prng, personalization, plen);
 800699c:	4628      	mov	r0, r5
 800699e:	463a      	mov	r2, r7
 80069a0:	4621      	mov	r1, r4
 80069a2:	f7ff ff7e 	bl	80068a2 <update>

	/* force a reseed before allowing tc_hmac_prng_generate to succeed: */
	prng->countdown = 0;
 80069a6:	2300      	movs	r3, #0

	return TC_CRYPTO_SUCCESS;
 80069a8:	2001      	movs	r0, #1
	prng->countdown = 0;
 80069aa:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
}
 80069ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
 80069b0:	4608      	mov	r0, r1
 80069b2:	e7fc      	b.n	80069ae <tc_hmac_prng_init+0x42>

080069b4 <tc_hmac_prng_reseed>:
int tc_hmac_prng_reseed(TCHmacPrng_t prng,
			const uint8_t *seed,
			unsigned int seedlen,
			const uint8_t *additional_input,
			unsigned int additionallen)
{
 80069b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069b6:	9c06      	ldr	r4, [sp, #24]
 80069b8:	461f      	mov	r7, r3

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
 80069ba:	4605      	mov	r5, r0
 80069bc:	b188      	cbz	r0, 80069e2 <tc_hmac_prng_reseed+0x2e>
 80069be:	b181      	cbz	r1, 80069e2 <tc_hmac_prng_reseed+0x2e>
	    seed == (const uint8_t *) 0 ||
	    seedlen < MIN_SLEN ||
 80069c0:	2a1f      	cmp	r2, #31
 80069c2:	d90e      	bls.n	80069e2 <tc_hmac_prng_reseed+0x2e>
	    seedlen > MAX_SLEN) {
		return TC_CRYPTO_FAIL;
	}

	if (additional_input != (const uint8_t *) 0) {
 80069c4:	b12b      	cbz	r3, 80069d2 <tc_hmac_prng_reseed+0x1e>
		/*
		 * Abort if additional_input is provided but has inappropriate
		 * length
		 */
		if (additionallen == 0 ||
 80069c6:	b174      	cbz	r4, 80069e6 <tc_hmac_prng_reseed+0x32>
		    additionallen > MAX_ALEN) {
			return TC_CRYPTO_FAIL;
		} else {
		/* call update for the seed and additional_input */
		update(prng, seed, seedlen);
 80069c8:	f7ff ff6b 	bl	80068a2 <update>
		update(prng, additional_input, additionallen);
 80069cc:	4622      	mov	r2, r4
 80069ce:	4639      	mov	r1, r7
 80069d0:	4628      	mov	r0, r5
		}
	} else {
		/* call update only for the seed */
		update(prng, seed, seedlen);
 80069d2:	f7ff ff66 	bl	80068a2 <update>
	}

	/* ... and enable hmac_prng_generate */
	prng->countdown = MAX_GENS;
 80069d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff

	return TC_CRYPTO_SUCCESS;
 80069da:	2001      	movs	r0, #1
	prng->countdown = MAX_GENS;
 80069dc:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
}
 80069e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
 80069e2:	2000      	movs	r0, #0
 80069e4:	e7fc      	b.n	80069e0 <tc_hmac_prng_reseed+0x2c>
 80069e6:	4620      	mov	r0, r4
 80069e8:	e7fa      	b.n	80069e0 <tc_hmac_prng_reseed+0x2c>

080069ea <tc_hmac_prng_generate>:

int tc_hmac_prng_generate(uint8_t *out, unsigned int outlen, TCHmacPrng_t prng)
{
 80069ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069ee:	460d      	mov	r5, r1
 80069f0:	4614      	mov	r4, r2
	unsigned int bufferlen;

	/* input sanity check: */
	if (out == (uint8_t *) 0 ||
 80069f2:	4606      	mov	r6, r0
 80069f4:	b390      	cbz	r0, 8006a5c <tc_hmac_prng_generate+0x72>
 80069f6:	b38a      	cbz	r2, 8006a5c <tc_hmac_prng_generate+0x72>
	    prng == (TCHmacPrng_t) 0 ||
 80069f8:	1e4b      	subs	r3, r1, #1
 80069fa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80069fe:	d22d      	bcs.n	8006a5c <tc_hmac_prng_generate+0x72>
	    outlen == 0 ||
	    outlen > MAX_OUT) {
		return TC_CRYPTO_FAIL;
	} else if (prng->countdown == 0) {
 8006a00:	f8d2 3130 	ldr.w	r3, [r2, #304]	; 0x130
 8006a04:	b363      	cbz	r3, 8006a60 <tc_hmac_prng_generate+0x76>
		return TC_HMAC_PRNG_RESEED_REQ;
	}

	prng->countdown--;
 8006a06:	3b01      	subs	r3, #1
 8006a08:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

	while (outlen != 0) {
		/* operate HMAC in OFB mode to create "random" outputs */
		(void)tc_hmac_init(&prng->h);
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
 8006a0c:	f502 7788 	add.w	r7, r2, #272	; 0x110
		(void)tc_hmac_init(&prng->h);
 8006a10:	4620      	mov	r0, r4
 8006a12:	f000 f892 	bl	8006b3a <tc_hmac_init>
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
 8006a16:	2220      	movs	r2, #32
 8006a18:	4639      	mov	r1, r7
 8006a1a:	4620      	mov	r0, r4
 8006a1c:	f000 f89a 	bl	8006b54 <tc_hmac_update>
		(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
 8006a20:	4622      	mov	r2, r4
 8006a22:	2120      	movs	r1, #32
 8006a24:	4638      	mov	r0, r7
 8006a26:	f000 f89b 	bl	8006b60 <tc_hmac_final>

		bufferlen = (TC_SHA256_DIGEST_SIZE > outlen) ?
 8006a2a:	2d20      	cmp	r5, #32
 8006a2c:	46a8      	mov	r8, r5
 8006a2e:	bf28      	it	cs
 8006a30:	f04f 0820 	movcs.w	r8, #32
			outlen : TC_SHA256_DIGEST_SIZE;
		(void)_copy(out, bufferlen, prng->v, bufferlen);
 8006a34:	4630      	mov	r0, r6
 8006a36:	4643      	mov	r3, r8
 8006a38:	463a      	mov	r2, r7
 8006a3a:	4641      	mov	r1, r8
 8006a3c:	f000 f813 	bl	8006a66 <_copy>

		out += bufferlen;
		outlen = (outlen > TC_SHA256_DIGEST_SIZE) ?
			(outlen - TC_SHA256_DIGEST_SIZE) : 0;
 8006a40:	2d20      	cmp	r5, #32
 8006a42:	bf38      	it	cc
 8006a44:	2520      	movcc	r5, #32
	while (outlen != 0) {
 8006a46:	3d20      	subs	r5, #32
		out += bufferlen;
 8006a48:	4446      	add	r6, r8
	while (outlen != 0) {
 8006a4a:	d1e1      	bne.n	8006a10 <tc_hmac_prng_generate+0x26>
	}

	/* block future PRNG compromises from revealing past state */
	update(prng, prng->v, TC_SHA256_DIGEST_SIZE);
 8006a4c:	4620      	mov	r0, r4
 8006a4e:	2220      	movs	r2, #32
 8006a50:	4639      	mov	r1, r7
 8006a52:	f7ff ff26 	bl	80068a2 <update>

	return TC_CRYPTO_SUCCESS;
 8006a56:	2001      	movs	r0, #1
}
 8006a58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TC_CRYPTO_FAIL;
 8006a5c:	2000      	movs	r0, #0
 8006a5e:	e7fb      	b.n	8006a58 <tc_hmac_prng_generate+0x6e>
		return TC_HMAC_PRNG_RESEED_REQ;
 8006a60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a64:	e7f8      	b.n	8006a58 <tc_hmac_prng_generate+0x6e>

08006a66 <_copy>:
#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
	if (from_len <= to_len) {
 8006a66:	428b      	cmp	r3, r1
{
 8006a68:	b538      	push	{r3, r4, r5, lr}
 8006a6a:	4615      	mov	r5, r2
 8006a6c:	461c      	mov	r4, r3
	if (from_len <= to_len) {
 8006a6e:	d805      	bhi.n	8006a7c <_copy+0x16>
		(void)memcpy(to, from, from_len);
 8006a70:	461a      	mov	r2, r3
 8006a72:	4629      	mov	r1, r5
 8006a74:	f7fe fc7a 	bl	800536c <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
 8006a78:	4620      	mov	r0, r4
 8006a7a:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
 8006a7c:	2400      	movs	r4, #0
 8006a7e:	e7fb      	b.n	8006a78 <_copy+0x12>

08006a80 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
 8006a80:	f7fe bc81 	b.w	8005386 <memset>

08006a84 <rekey>:
{
	const uint8_t inner_pad = (uint8_t) 0x36;
	const uint8_t outer_pad = (uint8_t) 0x5c;
	unsigned int i;

	for (i = 0; i < key_size; ++i) {
 8006a84:	4603      	mov	r3, r0
{
 8006a86:	b510      	push	{r4, lr}
 8006a88:	3901      	subs	r1, #1
 8006a8a:	4402      	add	r2, r0
	for (i = 0; i < key_size; ++i) {
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d105      	bne.n	8006a9c <rekey+0x18>
		key[i] = inner_pad ^ new_key[i];
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
	}
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
 8006a90:	2136      	movs	r1, #54	; 0x36
 8006a92:	245c      	movs	r4, #92	; 0x5c
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
 8006a94:	1a1a      	subs	r2, r3, r0
 8006a96:	2a3f      	cmp	r2, #63	; 0x3f
 8006a98:	d90c      	bls.n	8006ab4 <rekey+0x30>
	}
}
 8006a9a:	bd10      	pop	{r4, pc}
		key[i] = inner_pad ^ new_key[i];
 8006a9c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006aa0:	f084 0436 	eor.w	r4, r4, #54	; 0x36
 8006aa4:	f803 4b01 	strb.w	r4, [r3], #1
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
 8006aa8:	780c      	ldrb	r4, [r1, #0]
 8006aaa:	f084 045c 	eor.w	r4, r4, #92	; 0x5c
 8006aae:	f883 403f 	strb.w	r4, [r3, #63]	; 0x3f
 8006ab2:	e7eb      	b.n	8006a8c <rekey+0x8>
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
 8006ab4:	f803 1b01 	strb.w	r1, [r3], #1
 8006ab8:	f883 403f 	strb.w	r4, [r3, #63]	; 0x3f
 8006abc:	e7ea      	b.n	8006a94 <rekey+0x10>

08006abe <tc_hmac_set_key>:

int tc_hmac_set_key(TCHmacState_t ctx, const uint8_t *key,
		    unsigned int key_size)
{
 8006abe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ac2:	b0bc      	sub	sp, #240	; 0xf0
 8006ac4:	460e      	mov	r6, r1
 8006ac6:	af00      	add	r7, sp, #0
 8006ac8:	4614      	mov	r4, r2

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0 ||
 8006aca:	4605      	mov	r5, r0
 8006acc:	b1e8      	cbz	r0, 8006b0a <tc_hmac_set_key+0x4c>
 8006ace:	b381      	cbz	r1, 8006b32 <tc_hmac_set_key+0x74>
	    key == (const uint8_t *) 0 ||
 8006ad0:	b38a      	cbz	r2, 8006b36 <tc_hmac_set_key+0x78>
	    key_size == 0) {
		return TC_CRYPTO_FAIL;
	}

	const uint8_t dummy_key[key_size];
 8006ad2:	1dd3      	adds	r3, r2, #7
 8006ad4:	f023 0307 	bic.w	r3, r3, #7
	struct tc_hmac_state_struct dummy_state;

	if (key_size <= TC_SHA256_BLOCK_SIZE) {
 8006ad8:	2a40      	cmp	r2, #64	; 0x40
	const uint8_t dummy_key[key_size];
 8006ada:	ebad 0d03 	sub.w	sp, sp, r3
 8006ade:	f100 0870 	add.w	r8, r0, #112	; 0x70
	if (key_size <= TC_SHA256_BLOCK_SIZE) {
 8006ae2:	d816      	bhi.n	8006b12 <tc_hmac_set_key+0x54>
		 * certain timing attacks. Without these dummy calls,
		 * adversaries would be able to learn whether the key_size is
		 * greater than TC_SHA256_BLOCK_SIZE by measuring the time
		 * consumed in this process.
		 */
		(void)tc_sha256_init(&dummy_state.hash_state);
 8006ae4:	4638      	mov	r0, r7
 8006ae6:	f000 f947 	bl	8006d78 <tc_sha256_init>
		(void)tc_sha256_update(&dummy_state.hash_state,
 8006aea:	4622      	mov	r2, r4
 8006aec:	4669      	mov	r1, sp
 8006aee:	4638      	mov	r0, r7
 8006af0:	f000 f96e 	bl	8006dd0 <tc_sha256_update>
				       dummy_key,
				       key_size);
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
 8006af4:	4639      	mov	r1, r7
 8006af6:	f107 0090 	add.w	r0, r7, #144	; 0x90
 8006afa:	f000 f995 	bl	8006e28 <tc_sha256_final>
				      &dummy_state.hash_state);

		/* Actual code for when key_size <= TC_SHA256_BLOCK_SIZE: */
		rekey(ctx->key, key, key_size);
 8006afe:	4622      	mov	r2, r4
 8006b00:	4631      	mov	r1, r6
	} else {
		(void)tc_sha256_init(&ctx->hash_state);
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
				      &ctx->hash_state);
		rekey(ctx->key,
 8006b02:	4640      	mov	r0, r8
 8006b04:	f7ff ffbe 	bl	8006a84 <rekey>
		      &ctx->key[TC_SHA256_DIGEST_SIZE],
		      TC_SHA256_DIGEST_SIZE);
	}

	return TC_CRYPTO_SUCCESS;
 8006b08:	2001      	movs	r0, #1
}
 8006b0a:	37f0      	adds	r7, #240	; 0xf0
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		(void)tc_sha256_init(&ctx->hash_state);
 8006b12:	f000 f931 	bl	8006d78 <tc_sha256_init>
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
 8006b16:	4622      	mov	r2, r4
 8006b18:	4631      	mov	r1, r6
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
 8006b1a:	f105 0490 	add.w	r4, r5, #144	; 0x90
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
 8006b1e:	4628      	mov	r0, r5
 8006b20:	f000 f956 	bl	8006dd0 <tc_sha256_update>
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
 8006b24:	4629      	mov	r1, r5
 8006b26:	4620      	mov	r0, r4
 8006b28:	f000 f97e 	bl	8006e28 <tc_sha256_final>
		rekey(ctx->key,
 8006b2c:	2220      	movs	r2, #32
 8006b2e:	4621      	mov	r1, r4
 8006b30:	e7e7      	b.n	8006b02 <tc_hmac_set_key+0x44>
		return TC_CRYPTO_FAIL;
 8006b32:	4608      	mov	r0, r1
 8006b34:	e7e9      	b.n	8006b0a <tc_hmac_set_key+0x4c>
 8006b36:	4610      	mov	r0, r2
 8006b38:	e7e7      	b.n	8006b0a <tc_hmac_set_key+0x4c>

08006b3a <tc_hmac_init>:

int tc_hmac_init(TCHmacState_t ctx)
{
 8006b3a:	b510      	push	{r4, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
 8006b3c:	4604      	mov	r4, r0
 8006b3e:	b140      	cbz	r0, 8006b52 <tc_hmac_init+0x18>
		return TC_CRYPTO_FAIL;
	}

  (void) tc_sha256_init(&ctx->hash_state);
 8006b40:	f000 f91a 	bl	8006d78 <tc_sha256_init>
  (void) tc_sha256_update(&ctx->hash_state, ctx->key, TC_SHA256_BLOCK_SIZE);
 8006b44:	2240      	movs	r2, #64	; 0x40
 8006b46:	f104 0170 	add.w	r1, r4, #112	; 0x70
 8006b4a:	4620      	mov	r0, r4
 8006b4c:	f000 f940 	bl	8006dd0 <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
 8006b50:	2001      	movs	r0, #1
}
 8006b52:	bd10      	pop	{r4, pc}

08006b54 <tc_hmac_update>:

int tc_hmac_update(TCHmacState_t ctx,
		   const void *data,
		   unsigned int data_length)
{
 8006b54:	b508      	push	{r3, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
 8006b56:	b110      	cbz	r0, 8006b5e <tc_hmac_update+0xa>
		return TC_CRYPTO_FAIL;
	}

	(void)tc_sha256_update(&ctx->hash_state, data, data_length);
 8006b58:	f000 f93a 	bl	8006dd0 <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
 8006b5c:	2001      	movs	r0, #1
}
 8006b5e:	bd08      	pop	{r3, pc}

08006b60 <tc_hmac_final>:

int tc_hmac_final(uint8_t *tag, unsigned int taglen, TCHmacState_t ctx)
{
 8006b60:	b570      	push	{r4, r5, r6, lr}
 8006b62:	460e      	mov	r6, r1
 8006b64:	4614      	mov	r4, r2

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
 8006b66:	4605      	mov	r5, r0
 8006b68:	b1f0      	cbz	r0, 8006ba8 <tc_hmac_final+0x48>
 8006b6a:	2920      	cmp	r1, #32
 8006b6c:	d11c      	bne.n	8006ba8 <tc_hmac_final+0x48>
	    taglen != TC_SHA256_DIGEST_SIZE ||
 8006b6e:	b1ea      	cbz	r2, 8006bac <tc_hmac_final+0x4c>
	    ctx == (TCHmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	(void) tc_sha256_final(tag, &ctx->hash_state);
 8006b70:	4611      	mov	r1, r2
 8006b72:	f000 f959 	bl	8006e28 <tc_sha256_final>

	(void)tc_sha256_init(&ctx->hash_state);
 8006b76:	4620      	mov	r0, r4
 8006b78:	f000 f8fe 	bl	8006d78 <tc_sha256_init>
	(void)tc_sha256_update(&ctx->hash_state,
 8006b7c:	2240      	movs	r2, #64	; 0x40
 8006b7e:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
 8006b82:	4620      	mov	r0, r4
 8006b84:	f000 f924 	bl	8006dd0 <tc_sha256_update>
			       &ctx->key[TC_SHA256_BLOCK_SIZE],
				TC_SHA256_BLOCK_SIZE);
	(void)tc_sha256_update(&ctx->hash_state, tag, TC_SHA256_DIGEST_SIZE);
 8006b88:	4632      	mov	r2, r6
 8006b8a:	4629      	mov	r1, r5
 8006b8c:	4620      	mov	r0, r4
 8006b8e:	f000 f91f 	bl	8006dd0 <tc_sha256_update>
	(void)tc_sha256_final(tag, &ctx->hash_state);
 8006b92:	4621      	mov	r1, r4
 8006b94:	4628      	mov	r0, r5
 8006b96:	f000 f947 	bl	8006e28 <tc_sha256_final>

	/* destroy the current state */
	_set(ctx, 0, sizeof(*ctx));
 8006b9a:	4620      	mov	r0, r4
 8006b9c:	22f0      	movs	r2, #240	; 0xf0
 8006b9e:	2100      	movs	r1, #0
 8006ba0:	f7ff ff6e 	bl	8006a80 <_set>

	return TC_CRYPTO_SUCCESS;
 8006ba4:	2001      	movs	r0, #1
}
 8006ba6:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
 8006ba8:	2000      	movs	r0, #0
 8006baa:	e7fc      	b.n	8006ba6 <tc_hmac_final+0x46>
 8006bac:	4610      	mov	r0, r2
 8006bae:	e7fa      	b.n	8006ba6 <tc_hmac_final+0x46>

08006bb0 <compress>:
	n |= ((unsigned int)(*((*c)++)));
	return n;
}

static void compress(unsigned int *iv, const uint8_t *data)
{
 8006bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	unsigned int work_space[16];
	unsigned int n;
	unsigned int i;

	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
 8006bb4:	2600      	movs	r6, #0
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
 8006bb6:	6803      	ldr	r3, [r0, #0]
{
 8006bb8:	b09d      	sub	sp, #116	; 0x74
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
 8006bba:	9304      	str	r3, [sp, #16]
 8006bbc:	6843      	ldr	r3, [r0, #4]

	for (i = 0; i < 16; ++i) {
		n = BigEndian(&data);
		t1 = work_space[i] = n;
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
 8006bbe:	f8df c1b4 	ldr.w	ip, [pc, #436]	; 8006d74 <compress+0x1c4>
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
 8006bc2:	9305      	str	r3, [sp, #20]
 8006bc4:	6883      	ldr	r3, [r0, #8]
{
 8006bc6:	4689      	mov	r9, r1
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
 8006bc8:	e9dd 1504 	ldrd	r1, r5, [sp, #16]
 8006bcc:	9306      	str	r3, [sp, #24]
 8006bce:	68c3      	ldr	r3, [r0, #12]
 8006bd0:	9307      	str	r3, [sp, #28]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
 8006bd2:	6903      	ldr	r3, [r0, #16]
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
 8006bd4:	e9dd b706 	ldrd	fp, r7, [sp, #24]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
 8006bd8:	9308      	str	r3, [sp, #32]
 8006bda:	6943      	ldr	r3, [r0, #20]
 8006bdc:	9309      	str	r3, [sp, #36]	; 0x24
 8006bde:	6983      	ldr	r3, [r0, #24]
 8006be0:	e9dd 2a08 	ldrd	r2, sl, [sp, #32]
 8006be4:	930a      	str	r3, [sp, #40]	; 0x28
 8006be6:	69c3      	ldr	r3, [r0, #28]
 8006be8:	930b      	str	r3, [sp, #44]	; 0x2c
 8006bea:	469e      	mov	lr, r3
 8006bec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bee:	9300      	str	r3, [sp, #0]
 8006bf0:	f859 3006 	ldr.w	r3, [r9, r6]
		t1 = work_space[i] = n;
 8006bf4:	ac0c      	add	r4, sp, #48	; 0x30
 8006bf6:	ba1b      	rev	r3, r3
 8006bf8:	51a3      	str	r3, [r4, r6]
	return (((a) >> n) | ((a) << (32 - n)));
 8006bfa:	ea4f 24f2 	mov.w	r4, r2, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
 8006bfe:	ea84 14b2 	eor.w	r4, r4, r2, ror #6
 8006c02:	ea84 6872 	eor.w	r8, r4, r2, ror #25
 8006c06:	f856 400c 	ldr.w	r4, [r6, ip]
 8006c0a:	3604      	adds	r6, #4
 8006c0c:	441c      	add	r4, r3
 8006c0e:	9b00      	ldr	r3, [sp, #0]
 8006c10:	4444      	add	r4, r8
 8006c12:	ea23 0302 	bic.w	r3, r3, r2
 8006c16:	ea02 080a 	and.w	r8, r2, sl
 8006c1a:	ea83 0308 	eor.w	r3, r3, r8
 8006c1e:	4423      	add	r3, r4
 8006c20:	4473      	add	r3, lr
		t2 = Sigma0(a) + Maj(a, b, c);
 8006c22:	ea85 040b 	eor.w	r4, r5, fp
	return (((a) >> n) | ((a) << (32 - n)));
 8006c26:	ea4f 3e71 	mov.w	lr, r1, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
 8006c2a:	ea8e 0eb1 	eor.w	lr, lr, r1, ror #2
 8006c2e:	400c      	ands	r4, r1
 8006c30:	ea05 080b 	and.w	r8, r5, fp
 8006c34:	ea84 0408 	eor.w	r4, r4, r8
 8006c38:	ea8e 5eb1 	eor.w	lr, lr, r1, ror #22
 8006c3c:	44a6      	add	lr, r4
	for (i = 0; i < 16; ++i) {
 8006c3e:	2e40      	cmp	r6, #64	; 0x40
		h = g; g = f; f = e; e = d + t1;
 8006c40:	eb03 0407 	add.w	r4, r3, r7
		d = c; c = b; b = a; a = t1 + t2;
 8006c44:	4473      	add	r3, lr
 8006c46:	465f      	mov	r7, fp
 8006c48:	f8dd e000 	ldr.w	lr, [sp]
	for (i = 0; i < 16; ++i) {
 8006c4c:	f040 8082 	bne.w	8006d54 <compress+0x1a4>
 8006c50:	f04f 0c10 	mov.w	ip, #16
	}

	for ( ; i < 64; ++i) {
		s0 = work_space[(i+1)&0x0f];
 8006c54:	f10c 0601 	add.w	r6, ip, #1
 8006c58:	af1c      	add	r7, sp, #112	; 0x70
 8006c5a:	9603      	str	r6, [sp, #12]
 8006c5c:	f006 060f 	and.w	r6, r6, #15
 8006c60:	eb07 0686 	add.w	r6, r7, r6, lsl #2
 8006c64:	f856 6c40 	ldr.w	r6, [r6, #-64]
		s0 = sigma0(s0);
		s1 = work_space[(i+14)&0x0f];
		s1 = sigma1(s1);

		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
 8006c68:	f00c 090f 	and.w	r9, ip, #15
	return (((a) >> n) | ((a) << (32 - n)));
 8006c6c:	ea4f 48b6 	mov.w	r8, r6, ror #18
		s0 = work_space[(i+1)&0x0f];
 8006c70:	9601      	str	r6, [sp, #4]
		s0 = sigma0(s0);
 8006c72:	ea88 18f6 	eor.w	r8, r8, r6, ror #7
		s1 = work_space[(i+14)&0x0f];
 8006c76:	f10c 060e 	add.w	r6, ip, #14
 8006c7a:	f006 060f 	and.w	r6, r6, #15
 8006c7e:	eb07 0686 	add.w	r6, r7, r6, lsl #2
 8006c82:	f856 6c40 	ldr.w	r6, [r6, #-64]
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
 8006c86:	eb07 0989 	add.w	r9, r7, r9, lsl #2
	return (((a) >> n) | ((a) << (32 - n)));
 8006c8a:	ea4f 4ef6 	mov.w	lr, r6, ror #19
		s1 = work_space[(i+14)&0x0f];
 8006c8e:	9602      	str	r6, [sp, #8]
		s1 = sigma1(s1);
 8006c90:	ea8e 4e76 	eor.w	lr, lr, r6, ror #17
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
 8006c94:	f10c 0609 	add.w	r6, ip, #9
 8006c98:	f006 060f 	and.w	r6, r6, #15
 8006c9c:	eb07 0686 	add.w	r6, r7, r6, lsl #2
 8006ca0:	f856 6c40 	ldr.w	r6, [r6, #-64]
 8006ca4:	f859 7c40 	ldr.w	r7, [r9, #-64]
 8006ca8:	443e      	add	r6, r7
		s0 = sigma0(s0);
 8006caa:	9f01      	ldr	r7, [sp, #4]
 8006cac:	ea88 08d7 	eor.w	r8, r8, r7, lsr #3
		s1 = sigma1(s1);
 8006cb0:	9f02      	ldr	r7, [sp, #8]
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
 8006cb2:	4446      	add	r6, r8
		s1 = sigma1(s1);
 8006cb4:	ea8e 2e97 	eor.w	lr, lr, r7, lsr #10
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
 8006cb8:	4476      	add	r6, lr
	return (((a) >> n) | ((a) << (32 - n)));
 8006cba:	ea4f 27f4 	mov.w	r7, r4, ror #11
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
 8006cbe:	f849 6c40 	str.w	r6, [r9, #-64]
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
 8006cc2:	ea04 0e02 	and.w	lr, r4, r2
 8006cc6:	ea87 17b4 	eor.w	r7, r7, r4, ror #6
 8006cca:	ea2a 0904 	bic.w	r9, sl, r4
 8006cce:	ea87 6774 	eor.w	r7, r7, r4, ror #25
 8006cd2:	ea89 090e 	eor.w	r9, r9, lr
 8006cd6:	44b9      	add	r9, r7
 8006cd8:	4f26      	ldr	r7, [pc, #152]	; (8006d74 <compress+0x1c4>)
 8006cda:	f857 702c 	ldr.w	r7, [r7, ip, lsl #2]
		t2 = Sigma0(a) + Maj(a, b, c);
 8006cde:	ea81 0c05 	eor.w	ip, r1, r5
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
 8006ce2:	44b9      	add	r9, r7
 8006ce4:	9f00      	ldr	r7, [sp, #0]
 8006ce6:	444e      	add	r6, r9
 8006ce8:	4437      	add	r7, r6
 8006cea:	46b8      	mov	r8, r7
		t2 = Sigma0(a) + Maj(a, b, c);
 8006cec:	ea0c 0c03 	and.w	ip, ip, r3
	return (((a) >> n) | ((a) << (32 - n)));
 8006cf0:	ea4f 3773 	mov.w	r7, r3, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
 8006cf4:	ea01 0605 	and.w	r6, r1, r5
 8006cf8:	ea8c 0606 	eor.w	r6, ip, r6
 8006cfc:	ea87 07b3 	eor.w	r7, r7, r3, ror #2
 8006d00:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8006d04:	ea87 57b3 	eor.w	r7, r7, r3, ror #22
 8006d08:	443e      	add	r6, r7
	for ( ; i < 64; ++i) {
 8006d0a:	f1bc 0f40 	cmp.w	ip, #64	; 0x40
		h = g; g = f; f = e; e = d + t1;
 8006d0e:	eb08 070b 	add.w	r7, r8, fp
		d = c; c = b; b = a; a = t1 + t2;
 8006d12:	eb06 0e08 	add.w	lr, r6, r8
 8006d16:	46ab      	mov	fp, r5
 8006d18:	f8cd a000 	str.w	sl, [sp]
	for ( ; i < 64; ++i) {
 8006d1c:	d122      	bne.n	8006d64 <compress+0x1b4>
	}

	iv[0] += a; iv[1] += b; iv[2] += c; iv[3] += d;
 8006d1e:	9e04      	ldr	r6, [sp, #16]
 8006d20:	4476      	add	r6, lr
 8006d22:	6006      	str	r6, [r0, #0]
 8006d24:	9e05      	ldr	r6, [sp, #20]
 8006d26:	441e      	add	r6, r3
 8006d28:	9b06      	ldr	r3, [sp, #24]
 8006d2a:	6046      	str	r6, [r0, #4]
 8006d2c:	440b      	add	r3, r1
 8006d2e:	6083      	str	r3, [r0, #8]
 8006d30:	9b07      	ldr	r3, [sp, #28]
 8006d32:	442b      	add	r3, r5
 8006d34:	60c3      	str	r3, [r0, #12]
	iv[4] += e; iv[5] += f; iv[6] += g; iv[7] += h;
 8006d36:	9b08      	ldr	r3, [sp, #32]
 8006d38:	443b      	add	r3, r7
 8006d3a:	6103      	str	r3, [r0, #16]
 8006d3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d3e:	4423      	add	r3, r4
 8006d40:	6143      	str	r3, [r0, #20]
 8006d42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d44:	4413      	add	r3, r2
 8006d46:	6183      	str	r3, [r0, #24]
 8006d48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d4a:	4453      	add	r3, sl
 8006d4c:	61c3      	str	r3, [r0, #28]
}
 8006d4e:	b01d      	add	sp, #116	; 0x74
 8006d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d54:	f8cd a000 	str.w	sl, [sp]
 8006d58:	46ab      	mov	fp, r5
 8006d5a:	4692      	mov	sl, r2
 8006d5c:	460d      	mov	r5, r1
		h = g; g = f; f = e; e = d + t1;
 8006d5e:	4622      	mov	r2, r4
		d = c; c = b; b = a; a = t1 + t2;
 8006d60:	4619      	mov	r1, r3
 8006d62:	e745      	b.n	8006bf0 <compress+0x40>
 8006d64:	4692      	mov	sl, r2
 8006d66:	460d      	mov	r5, r1
 8006d68:	4622      	mov	r2, r4
 8006d6a:	4619      	mov	r1, r3
		h = g; g = f; f = e; e = d + t1;
 8006d6c:	463c      	mov	r4, r7
		d = c; c = b; b = a; a = t1 + t2;
 8006d6e:	4673      	mov	r3, lr
 8006d70:	e770      	b.n	8006c54 <compress+0xa4>
 8006d72:	bf00      	nop
 8006d74:	0800df24 	.word	0x0800df24

08006d78 <tc_sha256_init>:
{
 8006d78:	b510      	push	{r4, lr}
	if (s == (TCSha256State_t) 0) {
 8006d7a:	4604      	mov	r4, r0
 8006d7c:	b1c8      	cbz	r0, 8006db2 <tc_sha256_init+0x3a>
	_set((uint8_t *) s, 0x00, sizeof(*s));
 8006d7e:	2270      	movs	r2, #112	; 0x70
 8006d80:	2100      	movs	r1, #0
 8006d82:	f7ff fe7d 	bl	8006a80 <_set>
	s->iv[1] = 0xbb67ae85;
 8006d86:	4b0b      	ldr	r3, [pc, #44]	; (8006db4 <tc_sha256_init+0x3c>)
 8006d88:	4a0b      	ldr	r2, [pc, #44]	; (8006db8 <tc_sha256_init+0x40>)
	s->iv[3] = 0xa54ff53a;
 8006d8a:	490c      	ldr	r1, [pc, #48]	; (8006dbc <tc_sha256_init+0x44>)
	s->iv[1] = 0xbb67ae85;
 8006d8c:	e9c4 2300 	strd	r2, r3, [r4]
	s->iv[3] = 0xa54ff53a;
 8006d90:	4b0b      	ldr	r3, [pc, #44]	; (8006dc0 <tc_sha256_init+0x48>)
	s->iv[5] = 0x9b05688c;
 8006d92:	480c      	ldr	r0, [pc, #48]	; (8006dc4 <tc_sha256_init+0x4c>)
	s->iv[3] = 0xa54ff53a;
 8006d94:	e9c4 1302 	strd	r1, r3, [r4, #8]
	s->iv[5] = 0x9b05688c;
 8006d98:	4b0b      	ldr	r3, [pc, #44]	; (8006dc8 <tc_sha256_init+0x50>)
 8006d9a:	e9c4 0304 	strd	r0, r3, [r4, #16]
	return TC_CRYPTO_SUCCESS;
 8006d9e:	2001      	movs	r0, #1
	s->iv[6] = 0x1f83d9ab;
 8006da0:	4b0a      	ldr	r3, [pc, #40]	; (8006dcc <tc_sha256_init+0x54>)
 8006da2:	61a3      	str	r3, [r4, #24]
	s->iv[7] = 0x5be0cd19;
 8006da4:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
 8006da8:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
 8006dac:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
 8006db0:	61e3      	str	r3, [r4, #28]
}
 8006db2:	bd10      	pop	{r4, pc}
 8006db4:	bb67ae85 	.word	0xbb67ae85
 8006db8:	6a09e667 	.word	0x6a09e667
 8006dbc:	3c6ef372 	.word	0x3c6ef372
 8006dc0:	a54ff53a 	.word	0xa54ff53a
 8006dc4:	510e527f 	.word	0x510e527f
 8006dc8:	9b05688c 	.word	0x9b05688c
 8006dcc:	1f83d9ab 	.word	0x1f83d9ab

08006dd0 <tc_sha256_update>:
{
 8006dd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dd4:	460c      	mov	r4, r1
	if (s == (TCSha256State_t) 0 ||
 8006dd6:	4605      	mov	r5, r0
 8006dd8:	b110      	cbz	r0, 8006de0 <tc_sha256_update+0x10>
 8006dda:	b319      	cbz	r1, 8006e24 <tc_sha256_update+0x54>
	} else if (datalen == 0) {
 8006ddc:	b912      	cbnz	r2, 8006de4 <tc_sha256_update+0x14>
		return TC_CRYPTO_SUCCESS;
 8006dde:	2001      	movs	r0, #1
}
 8006de0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			s->leftover_offset = 0;
 8006de4:	f04f 0800 	mov.w	r8, #0
 8006de8:	188e      	adds	r6, r1, r2
			compress(s->iv, s->leftover);
 8006dea:	f100 0728 	add.w	r7, r0, #40	; 0x28
	while (datalen-- > 0) {
 8006dee:	42a6      	cmp	r6, r4
 8006df0:	d0f5      	beq.n	8006dde <tc_sha256_update+0xe>
		s->leftover[s->leftover_offset++] = *(data++);
 8006df2:	6eab      	ldr	r3, [r5, #104]	; 0x68
 8006df4:	1c5a      	adds	r2, r3, #1
 8006df6:	66aa      	str	r2, [r5, #104]	; 0x68
 8006df8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006dfc:	442b      	add	r3, r5
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
 8006dfe:	2a3f      	cmp	r2, #63	; 0x3f
		s->leftover[s->leftover_offset++] = *(data++);
 8006e00:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
 8006e04:	d9f3      	bls.n	8006dee <tc_sha256_update+0x1e>
			compress(s->iv, s->leftover);
 8006e06:	4639      	mov	r1, r7
 8006e08:	4628      	mov	r0, r5
 8006e0a:	f7ff fed1 	bl	8006bb0 <compress>
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
 8006e0e:	e9d5 2308 	ldrd	r2, r3, [r5, #32]
 8006e12:	f512 7000 	adds.w	r0, r2, #512	; 0x200
 8006e16:	f143 0100 	adc.w	r1, r3, #0
			s->leftover_offset = 0;
 8006e1a:	f8c5 8068 	str.w	r8, [r5, #104]	; 0x68
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
 8006e1e:	e9c5 0108 	strd	r0, r1, [r5, #32]
 8006e22:	e7e4      	b.n	8006dee <tc_sha256_update+0x1e>
		return TC_CRYPTO_FAIL;
 8006e24:	4608      	mov	r0, r1
 8006e26:	e7db      	b.n	8006de0 <tc_sha256_update+0x10>

08006e28 <tc_sha256_final>:
{
 8006e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e2a:	460c      	mov	r4, r1
	if (digest == (uint8_t *) 0 ||
 8006e2c:	4605      	mov	r5, r0
 8006e2e:	2800      	cmp	r0, #0
 8006e30:	d05d      	beq.n	8006eee <tc_sha256_final+0xc6>
 8006e32:	2900      	cmp	r1, #0
 8006e34:	d05c      	beq.n	8006ef0 <tc_sha256_final+0xc8>
	s->bits_hashed += (s->leftover_offset << 3);
 8006e36:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 8006e3a:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8006e3c:	00c8      	lsls	r0, r1, #3
 8006e3e:	1816      	adds	r6, r2, r0
 8006e40:	f143 0700 	adc.w	r7, r3, #0
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
 8006e44:	2380      	movs	r3, #128	; 0x80
 8006e46:	1c48      	adds	r0, r1, #1
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
 8006e48:	2838      	cmp	r0, #56	; 0x38
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
 8006e4a:	4421      	add	r1, r4
	s->bits_hashed += (s->leftover_offset << 3);
 8006e4c:	e9c4 6708 	strd	r6, r7, [r4, #32]
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
 8006e50:	66a0      	str	r0, [r4, #104]	; 0x68
 8006e52:	f104 0628 	add.w	r6, r4, #40	; 0x28
 8006e56:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
 8006e5a:	d90b      	bls.n	8006e74 <tc_sha256_final+0x4c>
		_set(s->leftover + s->leftover_offset, 0x00,
 8006e5c:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
 8006e60:	2100      	movs	r1, #0
 8006e62:	4430      	add	r0, r6
 8006e64:	f7ff fe0c 	bl	8006a80 <_set>
		compress(s->iv, s->leftover);
 8006e68:	4631      	mov	r1, r6
 8006e6a:	4620      	mov	r0, r4
 8006e6c:	f7ff fea0 	bl	8006bb0 <compress>
		s->leftover_offset = 0;
 8006e70:	2300      	movs	r3, #0
 8006e72:	66a3      	str	r3, [r4, #104]	; 0x68
	_set(s->leftover + s->leftover_offset, 0x00,
 8006e74:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8006e76:	2100      	movs	r1, #0
 8006e78:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
 8006e7c:	4430      	add	r0, r6
 8006e7e:	f7ff fdff 	bl	8006a80 <_set>
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
 8006e82:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
	s->leftover[sizeof(s->leftover) - 2] = (uint8_t)(s->bits_hashed >> 8);
 8006e86:	0a11      	lsrs	r1, r2, #8
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
 8006e88:	f884 2067 	strb.w	r2, [r4, #103]	; 0x67
	s->leftover[sizeof(s->leftover) - 2] = (uint8_t)(s->bits_hashed >> 8);
 8006e8c:	f884 1066 	strb.w	r1, [r4, #102]	; 0x66
	s->leftover[sizeof(s->leftover) - 3] = (uint8_t)(s->bits_hashed >> 16);
 8006e90:	0c11      	lsrs	r1, r2, #16
	s->leftover[sizeof(s->leftover) - 4] = (uint8_t)(s->bits_hashed >> 24);
 8006e92:	0e12      	lsrs	r2, r2, #24
 8006e94:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
 8006e98:	0a1a      	lsrs	r2, r3, #8
	s->leftover[sizeof(s->leftover) - 5] = (uint8_t)(s->bits_hashed >> 32);
 8006e9a:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
 8006e9e:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
 8006ea2:	0c1a      	lsrs	r2, r3, #16
	s->leftover[sizeof(s->leftover) - 8] = (uint8_t)(s->bits_hashed >> 56);
 8006ea4:	0e1b      	lsrs	r3, r3, #24
	s->leftover[sizeof(s->leftover) - 3] = (uint8_t)(s->bits_hashed >> 16);
 8006ea6:	f884 1065 	strb.w	r1, [r4, #101]	; 0x65
	s->leftover[sizeof(s->leftover) - 8] = (uint8_t)(s->bits_hashed >> 56);
 8006eaa:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	compress(s->iv, s->leftover);
 8006eae:	4631      	mov	r1, r6
 8006eb0:	4620      	mov	r0, r4
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
 8006eb2:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
	compress(s->iv, s->leftover);
 8006eb6:	f7ff fe7b 	bl	8006bb0 <compress>
 8006eba:	1d2b      	adds	r3, r5, #4
 8006ebc:	1f21      	subs	r1, r4, #4
 8006ebe:	f105 0024 	add.w	r0, r5, #36	; 0x24
		unsigned int t = *((unsigned int *) &s->iv[i]);
 8006ec2:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8006ec6:	3304      	adds	r3, #4
		*digest++ = (uint8_t)(t >> 24);
 8006ec8:	0e15      	lsrs	r5, r2, #24
 8006eca:	f803 5c08 	strb.w	r5, [r3, #-8]
		*digest++ = (uint8_t)(t >> 16);
 8006ece:	0c15      	lsrs	r5, r2, #16
 8006ed0:	f803 5c07 	strb.w	r5, [r3, #-7]
		*digest++ = (uint8_t)(t >> 8);
 8006ed4:	0a15      	lsrs	r5, r2, #8
 8006ed6:	f803 5c06 	strb.w	r5, [r3, #-6]
		*digest++ = (uint8_t)(t);
 8006eda:	f803 2c05 	strb.w	r2, [r3, #-5]
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
 8006ede:	4283      	cmp	r3, r0
 8006ee0:	d1ef      	bne.n	8006ec2 <tc_sha256_final+0x9a>
	_set(s, 0, sizeof(*s));
 8006ee2:	4620      	mov	r0, r4
 8006ee4:	2270      	movs	r2, #112	; 0x70
 8006ee6:	2100      	movs	r1, #0
 8006ee8:	f7ff fdca 	bl	8006a80 <_set>
	return TC_CRYPTO_SUCCESS;
 8006eec:	2001      	movs	r0, #1
}
 8006eee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
 8006ef0:	4608      	mov	r0, r1
 8006ef2:	e7fc      	b.n	8006eee <tc_sha256_final+0xc6>

08006ef4 <LL_GPIO_AF_DisableRemap_USART2>:
  * @note  DISABLE: No remap (CTS/PA0, RTS/PA1, TX/PA2, RX/PA3, CK/PA4)
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_DisableRemap_USART2(void)
{
  CLEAR_BIT(AFIO->MAPR, AFIO_MAPR_USART2_REMAP);
 8006ef4:	4a02      	ldr	r2, [pc, #8]	; (8006f00 <LL_GPIO_AF_DisableRemap_USART2+0xc>)
 8006ef6:	6853      	ldr	r3, [r2, #4]
 8006ef8:	f023 0308 	bic.w	r3, r3, #8
 8006efc:	6053      	str	r3, [r2, #4]
}
 8006efe:	4770      	bx	lr
 8006f00:	40010000 	.word	0x40010000

08006f04 <hal_bsp_flash_dev>:
hal_bsp_flash_dev(uint8_t id)
{
    /*
     * Internal flash mapped to id 0.
     */
    if (id != 0) {
 8006f04:	2800      	cmp	r0, #0
        return NULL;
    }
    return &stm32_flash_dev;
}
 8006f06:	4802      	ldr	r0, [pc, #8]	; (8006f10 <hal_bsp_flash_dev+0xc>)
 8006f08:	bf18      	it	ne
 8006f0a:	2000      	movne	r0, #0
 8006f0c:	4770      	bx	lr
 8006f0e:	bf00      	nop
 8006f10:	0800e044 	.word	0x0800e044

08006f14 <hal_bsp_init>:
    }
}

void
hal_bsp_init(void)
{
 8006f14:	b530      	push	{r4, r5, lr}
 8006f16:	b093      	sub	sp, #76	; 0x4c
    RCC_ClkInitTypeDef clkinitstruct = { 0 };
 8006f18:	2214      	movs	r2, #20
 8006f1a:	2100      	movs	r1, #0
 8006f1c:	a803      	add	r0, sp, #12
 8006f1e:	f7fe fa32 	bl	8005386 <memset>
    RCC_OscInitTypeDef oscinitstruct = { 0 };
 8006f22:	2220      	movs	r2, #32
 8006f24:	2100      	movs	r1, #0
 8006f26:	a809      	add	r0, sp, #36	; 0x24
 8006f28:	f7fe fa2d 	bl	8005386 <memset>
    oscinitstruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006f2c:	2501      	movs	r5, #1
 8006f2e:	2310      	movs	r3, #16
    oscinitstruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8006f30:	2402      	movs	r4, #2
    oscinitstruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006f32:	e9cd 530c 	strd	r5, r3, [sp, #48]	; 0x30
    oscinitstruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8006f36:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
    if (HAL_RCC_OscConfig(&oscinitstruct) != HAL_OK) {
 8006f3a:	a808      	add	r0, sp, #32
    oscinitstruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8006f3c:	9408      	str	r4, [sp, #32]
    oscinitstruct.PLL.PLLState = RCC_PLL_ON;
 8006f3e:	940f      	str	r4, [sp, #60]	; 0x3c
    oscinitstruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8006f40:	9311      	str	r3, [sp, #68]	; 0x44
    if (HAL_RCC_OscConfig(&oscinitstruct) != HAL_OK) {
 8006f42:	f001 fcff 	bl	8008944 <HAL_RCC_OscConfig>
 8006f46:	b128      	cbz	r0, 8006f54 <hal_bsp_init+0x40>
        assert(0);
 8006f48:	2300      	movs	r3, #0
 8006f4a:	461a      	mov	r2, r3
 8006f4c:	4619      	mov	r1, r3
 8006f4e:	4618      	mov	r0, r3
 8006f50:	f7fc fdb0 	bl	8003ab4 <__assert_func>
    clkinitstruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK |
 8006f54:	230f      	movs	r3, #15
    clkinitstruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8006f56:	f44f 62a0 	mov.w	r2, #1280	; 0x500
    clkinitstruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006f5a:	e9cd 3403 	strd	r3, r4, [sp, #12]
    clkinitstruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8006f5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
    clkinitstruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006f62:	9005      	str	r0, [sp, #20]
    if (HAL_RCC_ClockConfig(&clkinitstruct, FLASH_LATENCY_2) != HAL_OK) {
 8006f64:	4621      	mov	r1, r4
 8006f66:	a803      	add	r0, sp, #12
    clkinitstruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8006f68:	e9cd 3206 	strd	r3, r2, [sp, #24]
    if (HAL_RCC_ClockConfig(&clkinitstruct, FLASH_LATENCY_2) != HAL_OK) {
 8006f6c:	f001 feb2 	bl	8008cd4 <HAL_RCC_ClockConfig>
 8006f70:	4603      	mov	r3, r0
 8006f72:	2800      	cmp	r0, #0
 8006f74:	d1e8      	bne.n	8006f48 <hal_bsp_init+0x34>
    (void)rc;

    clock_config();

#if MYNEWT_VAL(UART_0)
    rc = os_dev_create((struct os_dev *) &hal_uart0, "uart0",
 8006f76:	4a0e      	ldr	r2, [pc, #56]	; (8006fb0 <hal_bsp_init+0x9c>)
 8006f78:	490e      	ldr	r1, [pc, #56]	; (8006fb4 <hal_bsp_init+0xa0>)
 8006f7a:	9201      	str	r2, [sp, #4]
 8006f7c:	4a0e      	ldr	r2, [pc, #56]	; (8006fb8 <hal_bsp_init+0xa4>)
 8006f7e:	480f      	ldr	r0, [pc, #60]	; (8006fbc <hal_bsp_init+0xa8>)
 8006f80:	9200      	str	r2, [sp, #0]
 8006f82:	462a      	mov	r2, r5
 8006f84:	f7fc ffb6 	bl	8003ef4 <os_dev_create>
      OS_DEV_INIT_PRIMARY, 0, uart_hal_init, (void *)&uart_cfg[0]);
    assert(rc == 0);
 8006f88:	2800      	cmp	r0, #0
 8006f8a:	d1dd      	bne.n	8006f48 <hal_bsp_init+0x34>
#endif

#if MYNEWT_VAL(TIMER_0)
    hal_timer_init(0, TIM2);
 8006f8c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006f90:	f000 fc40 	bl	8007814 <hal_timer_init>
#if MYNEWT_VAL(TIMER_2)
    hal_timer_init(2, TIM4);
#endif

#if (MYNEWT_VAL(OS_CPUTIME_TIMER_NUM) >= 0)
    rc = os_cputime_init(MYNEWT_VAL(OS_CPUTIME_FREQ));
 8006f94:	480a      	ldr	r0, [pc, #40]	; (8006fc0 <hal_bsp_init+0xac>)
 8006f96:	f7fc ff95 	bl	8003ec4 <os_cputime_init>
    assert(rc == 0);
 8006f9a:	4602      	mov	r2, r0
 8006f9c:	2800      	cmp	r0, #0
 8006f9e:	d1d3      	bne.n	8006f48 <hal_bsp_init+0x34>
#endif

#if MYNEWT_VAL(SPI_0_MASTER)
    rc = hal_spi_init(0, &spi0_cfg, HAL_SPI_TYPE_MASTER);
 8006fa0:	4908      	ldr	r1, [pc, #32]	; (8006fc4 <hal_bsp_init+0xb0>)
 8006fa2:	f000 fa3d 	bl	8007420 <hal_spi_init>
    assert(rc == 0);
 8006fa6:	2800      	cmp	r0, #0
 8006fa8:	d1ce      	bne.n	8006f48 <hal_bsp_init+0x34>
#if MYNEWT_VAL(I2C_0)
    rc = hal_i2c_init(0, &i2c_cfg0);
    assert(rc == 0);
#endif

}
 8006faa:	b013      	add	sp, #76	; 0x4c
 8006fac:	bd30      	pop	{r4, r5, pc}
 8006fae:	bf00      	nop
 8006fb0:	0800e02c 	.word	0x0800e02c
 8006fb4:	0800e024 	.word	0x0800e024
 8006fb8:	08007111 	.word	0x08007111
 8006fbc:	20002ae8 	.word	0x20002ae8
 8006fc0:	000f4240 	.word	0x000f4240
 8006fc4:	2000019c 	.word	0x2000019c

08006fc8 <adc_chan_config>:
 * @return 0 on success, non-zero error code on failure.
 */
int
adc_chan_config(struct adc_dev *dev, uint8_t cnum, void *data)
{
    assert(dev->ad_funcs->af_configure_channel != NULL);
 8006fc8:	6b03      	ldr	r3, [r0, #48]	; 0x30
{
 8006fca:	b570      	push	{r4, r5, r6, lr}
    assert(dev->ad_funcs->af_configure_channel != NULL);
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	b923      	cbnz	r3, 8006fda <adc_chan_config+0x12>
 8006fd0:	461a      	mov	r2, r3
 8006fd2:	4619      	mov	r1, r3
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	f7fc fd6d 	bl	8003ab4 <__assert_func>

    if (cnum >= dev->ad_chan_count) {
 8006fda:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8006fdc:	42a1      	cmp	r1, r4
 8006fde:	da02      	bge.n	8006fe6 <adc_chan_config+0x1e>
        return (EINVAL);
    }

    return (dev->ad_funcs->af_configure_channel(dev, cnum, data));
}
 8006fe0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return (dev->ad_funcs->af_configure_channel(dev, cnum, data));
 8006fe4:	4718      	bx	r3
}
 8006fe6:	2016      	movs	r0, #22
 8006fe8:	bd70      	pop	{r4, r5, r6, pc}

08006fea <uart_hal_resume>:
    return OS_OK;
}

static int
uart_hal_resume(struct os_dev *odev)
{
 8006fea:	b513      	push	{r0, r1, r4, lr}
    struct uart_dev *dev = (struct uart_dev *)odev;
    struct uart_conf_port *ucp = &dev->ud_conf_port;
    int rc;

    rc = hal_uart_config(uart_hal_dev_get_id(dev), ucp->uc_speed,
 8006fec:	f890 1037 	ldrb.w	r1, [r0, #55]	; 0x37
 8006ff0:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8006ff4:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
    return (intptr_t)(dev->ud_priv) - 1;
 8006ff8:	6b84      	ldr	r4, [r0, #56]	; 0x38
    rc = hal_uart_config(uart_hal_dev_get_id(dev), ucp->uc_speed,
 8006ffa:	9101      	str	r1, [sp, #4]
 8006ffc:	f890 1036 	ldrb.w	r1, [r0, #54]	; 0x36
 8007000:	9100      	str	r1, [sp, #0]
 8007002:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8007004:	1e60      	subs	r0, r4, #1
 8007006:	f000 fdb1 	bl	8007b6c <hal_uart_config>
    if (rc) {
        return OS_EINVAL;
    }

    return OS_OK;
}
 800700a:	2800      	cmp	r0, #0
 800700c:	bf14      	ite	ne
 800700e:	2002      	movne	r0, #2
 8007010:	2000      	moveq	r0, #0
 8007012:	b002      	add	sp, #8
 8007014:	bd10      	pop	{r4, pc}

08007016 <uart_hal_close>:
    return (intptr_t)(dev->ud_priv) - 1;
 8007016:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8007018:	b508      	push	{r3, lr}
    rc = hal_uart_close(uart_hal_dev_get_id(dev));
 800701a:	3801      	subs	r0, #1
 800701c:	f000 ff00 	bl	8007e20 <hal_uart_close>
}
 8007020:	2800      	cmp	r0, #0
 8007022:	bf14      	ite	ne
 8007024:	2002      	movne	r0, #2
 8007026:	2000      	moveq	r0, #0
 8007028:	bd08      	pop	{r3, pc}

0800702a <uart_hal_open>:
{
 800702a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800702c:	4605      	mov	r5, r0
    assert(dev->ud_priv);
 800702e:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8007030:	4614      	mov	r4, r2
    assert(dev->ud_priv);
 8007032:	b920      	cbnz	r0, 800703e <uart_hal_open+0x14>
 8007034:	4603      	mov	r3, r0
 8007036:	4602      	mov	r2, r0
 8007038:	4601      	mov	r1, r0
 800703a:	f7fc fd3b 	bl	8003ab4 <__assert_func>
    if (!uc) {
 800703e:	b912      	cbnz	r2, 8007046 <uart_hal_open+0x1c>
        return OS_EINVAL;
 8007040:	2002      	movs	r0, #2
}
 8007042:	b003      	add	sp, #12
 8007044:	bd30      	pop	{r4, r5, pc}
    if (odev->od_flags & OS_DEV_F_STATUS_OPEN) {
 8007046:	7eeb      	ldrb	r3, [r5, #27]
 8007048:	079b      	lsls	r3, r3, #30
 800704a:	d425      	bmi.n	8007098 <uart_hal_open+0x6e>
    dev->ud_conf_port.uc_databits = uc->uc_databits;
 800704c:	7913      	ldrb	r3, [r2, #4]
    rc = hal_uart_init_cbs(uart_hal_dev_get_id(dev), uc->uc_tx_char, uc->uc_tx_done,
 800704e:	3801      	subs	r0, #1
    dev->ud_conf_port.uc_databits = uc->uc_databits;
 8007050:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
    dev->ud_conf_port.uc_flow_ctl = uc->uc_flow_ctl;
 8007054:	79d3      	ldrb	r3, [r2, #7]
 8007056:	f885 3037 	strb.w	r3, [r5, #55]	; 0x37
    dev->ud_conf_port.uc_parity = uc->uc_parity;
 800705a:	7993      	ldrb	r3, [r2, #6]
 800705c:	f885 3036 	strb.w	r3, [r5, #54]	; 0x36
    dev->ud_conf_port.uc_speed = uc->uc_speed;
 8007060:	6813      	ldr	r3, [r2, #0]
 8007062:	632b      	str	r3, [r5, #48]	; 0x30
    dev->ud_conf_port.uc_stopbits = uc->uc_stopbits;
 8007064:	7953      	ldrb	r3, [r2, #5]
 8007066:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
    rc = hal_uart_init_cbs(uart_hal_dev_get_id(dev), uc->uc_tx_char, uc->uc_tx_done,
 800706a:	6953      	ldr	r3, [r2, #20]
 800706c:	68a1      	ldr	r1, [r4, #8]
 800706e:	9300      	str	r3, [sp, #0]
 8007070:	e9d2 3203 	ldrd	r3, r2, [r2, #12]
 8007074:	f000 fd18 	bl	8007aa8 <hal_uart_init_cbs>
    if (rc) {
 8007078:	2800      	cmp	r0, #0
 800707a:	d1e1      	bne.n	8007040 <uart_hal_open+0x16>
    rc = hal_uart_config(uart_hal_dev_get_id(dev), uc->uc_speed, uc->uc_databits,
 800707c:	79e1      	ldrb	r1, [r4, #7]
    return (intptr_t)(dev->ud_priv) - 1;
 800707e:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    rc = hal_uart_config(uart_hal_dev_get_id(dev), uc->uc_speed, uc->uc_databits,
 8007080:	9101      	str	r1, [sp, #4]
 8007082:	79a1      	ldrb	r1, [r4, #6]
 8007084:	7963      	ldrb	r3, [r4, #5]
 8007086:	9100      	str	r1, [sp, #0]
 8007088:	7922      	ldrb	r2, [r4, #4]
 800708a:	6821      	ldr	r1, [r4, #0]
 800708c:	3801      	subs	r0, #1
 800708e:	f000 fd6d 	bl	8007b6c <hal_uart_config>
    if (rc) {
 8007092:	2800      	cmp	r0, #0
 8007094:	d0d5      	beq.n	8007042 <uart_hal_open+0x18>
 8007096:	e7d3      	b.n	8007040 <uart_hal_open+0x16>
        return OS_EBUSY;
 8007098:	200b      	movs	r0, #11
 800709a:	e7d2      	b.n	8007042 <uart_hal_open+0x18>

0800709c <uart_hal_blocking_tx.part.2>:
uart_hal_blocking_tx(struct uart_dev *dev, uint8_t byte)
 800709c:	b508      	push	{r3, lr}
    assert(dev->ud_priv);
 800709e:	2300      	movs	r3, #0
 80070a0:	461a      	mov	r2, r3
 80070a2:	4619      	mov	r1, r3
 80070a4:	4618      	mov	r0, r3
 80070a6:	f7fc fd05 	bl	8003ab4 <__assert_func>

080070aa <uart_hal_blocking_tx>:
 80070aa:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 80070ac:	b508      	push	{r3, lr}
    assert(dev->ud_priv);
 80070ae:	b908      	cbnz	r0, 80070b4 <uart_hal_blocking_tx+0xa>
 80070b0:	f7ff fff4 	bl	800709c <uart_hal_blocking_tx.part.2>
    hal_uart_blocking_tx(uart_hal_dev_get_id(dev), byte);
 80070b4:	3801      	subs	r0, #1
}
 80070b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    hal_uart_blocking_tx(uart_hal_dev_get_id(dev), byte);
 80070ba:	f000 bd43 	b.w	8007b44 <hal_uart_blocking_tx>

080070be <uart_hal_start_rx>:
    assert(dev->ud_priv);
 80070be:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 80070c0:	b508      	push	{r3, lr}
    assert(dev->ud_priv);
 80070c2:	b908      	cbnz	r0, 80070c8 <uart_hal_start_rx+0xa>
 80070c4:	f7ff ffea 	bl	800709c <uart_hal_blocking_tx.part.2>
    hal_uart_start_rx(uart_hal_dev_get_id(dev));
 80070c8:	3801      	subs	r0, #1
}
 80070ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    hal_uart_start_rx(uart_hal_dev_get_id(dev));
 80070ce:	f000 bd01 	b.w	8007ad4 <hal_uart_start_rx>

080070d2 <uart_hal_start_tx>:
    assert(dev->ud_priv);
 80070d2:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 80070d4:	b508      	push	{r3, lr}
    assert(dev->ud_priv);
 80070d6:	b908      	cbnz	r0, 80070dc <uart_hal_start_tx+0xa>
 80070d8:	f7ff ffe0 	bl	800709c <uart_hal_blocking_tx.part.2>
    hal_uart_start_tx(uart_hal_dev_get_id(dev));
 80070dc:	3801      	subs	r0, #1
}
 80070de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    hal_uart_start_tx(uart_hal_dev_get_id(dev));
 80070e2:	f000 bd15 	b.w	8007b10 <hal_uart_start_tx>

080070e6 <uart_hal_suspend>:
{
 80070e6:	b570      	push	{r4, r5, r6, lr}
 80070e8:	460c      	mov	r4, r1
 80070ea:	4605      	mov	r5, r0
 80070ec:	4616      	mov	r6, r2
    if (OS_TIME_TICK_GT(suspend_at, os_time_get()) || !force) {
 80070ee:	f7fd fea7 	bl	8004e40 <os_time_get>
 80070f2:	1a20      	subs	r0, r4, r0
 80070f4:	2800      	cmp	r0, #0
 80070f6:	dd01      	ble.n	80070fc <uart_hal_suspend+0x16>
        return OS_EINVAL;
 80070f8:	2002      	movs	r0, #2
}
 80070fa:	bd70      	pop	{r4, r5, r6, pc}
    if (OS_TIME_TICK_GT(suspend_at, os_time_get()) || !force) {
 80070fc:	2e00      	cmp	r6, #0
 80070fe:	d0fb      	beq.n	80070f8 <uart_hal_suspend+0x12>
    return (intptr_t)(dev->ud_priv) - 1;
 8007100:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    rc = hal_uart_close(uart_hal_dev_get_id(dev));
 8007102:	3801      	subs	r0, #1
 8007104:	f000 fe8c 	bl	8007e20 <hal_uart_close>
    if (rc) {
 8007108:	2800      	cmp	r0, #0
 800710a:	d0f6      	beq.n	80070fa <uart_hal_suspend+0x14>
 800710c:	e7f4      	b.n	80070f8 <uart_hal_suspend+0x12>
	...

08007110 <uart_hal_init>:
/*
 * Arg points to BSP specific UART configuration.
 */
int
uart_hal_init(struct os_dev *odev, void *arg)
{
 8007110:	b570      	push	{r4, r5, r6, lr}
    struct uart_dev *dev;
    char ch;

    dev = (struct uart_dev *)odev;

    ch = odev->od_name[strlen(odev->od_name) - 1];
 8007112:	69c5      	ldr	r5, [r0, #28]
{
 8007114:	4604      	mov	r4, r0
    ch = odev->od_name[strlen(odev->od_name) - 1];
 8007116:	4628      	mov	r0, r5
{
 8007118:	460e      	mov	r6, r1
    ch = odev->od_name[strlen(odev->od_name) - 1];
 800711a:	f7fe f955 	bl	80053c8 <strlen>
 800711e:	4428      	add	r0, r5
 8007120:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    if (!isdigit((int) ch)) {
 8007124:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8007128:	2809      	cmp	r0, #9
 800712a:	d814      	bhi.n	8007156 <uart_hal_init+0x46>
    dev->ud_priv = (void *)((intptr_t)(id + 1));
 800712c:	3b2f      	subs	r3, #47	; 0x2f
 800712e:	63a3      	str	r3, [r4, #56]	; 0x38
        return OS_EINVAL;
    }
    uart_hal_dev_set_id(dev, ch - '0');

    OS_DEV_SETHANDLERS(odev, uart_hal_open, uart_hal_close);
 8007130:	4b0a      	ldr	r3, [pc, #40]	; (800715c <uart_hal_init+0x4c>)

    dev->ud_funcs.uf_start_tx = uart_hal_start_tx;
    dev->ud_funcs.uf_start_rx = uart_hal_start_rx;
    dev->ud_funcs.uf_blocking_tx = uart_hal_blocking_tx;

    hal_uart_init(uart_hal_dev_get_id(dev), arg);
 8007132:	4631      	mov	r1, r6
    OS_DEV_SETHANDLERS(odev, uart_hal_open, uart_hal_close);
 8007134:	6023      	str	r3, [r4, #0]
 8007136:	4b0a      	ldr	r3, [pc, #40]	; (8007160 <uart_hal_init+0x50>)
 8007138:	60e3      	str	r3, [r4, #12]
    odev->od_handlers.od_suspend = uart_hal_suspend;
 800713a:	4b0a      	ldr	r3, [pc, #40]	; (8007164 <uart_hal_init+0x54>)
 800713c:	6063      	str	r3, [r4, #4]
    odev->od_handlers.od_resume = uart_hal_resume;
 800713e:	4b0a      	ldr	r3, [pc, #40]	; (8007168 <uart_hal_init+0x58>)
 8007140:	60a3      	str	r3, [r4, #8]
    dev->ud_funcs.uf_start_tx = uart_hal_start_tx;
 8007142:	4b0a      	ldr	r3, [pc, #40]	; (800716c <uart_hal_init+0x5c>)
 8007144:	6263      	str	r3, [r4, #36]	; 0x24
    dev->ud_funcs.uf_start_rx = uart_hal_start_rx;
 8007146:	4b0a      	ldr	r3, [pc, #40]	; (8007170 <uart_hal_init+0x60>)
 8007148:	62a3      	str	r3, [r4, #40]	; 0x28
    dev->ud_funcs.uf_blocking_tx = uart_hal_blocking_tx;
 800714a:	4b0a      	ldr	r3, [pc, #40]	; (8007174 <uart_hal_init+0x64>)
 800714c:	62e3      	str	r3, [r4, #44]	; 0x2c
    hal_uart_init(uart_hal_dev_get_id(dev), arg);
 800714e:	f000 fe59 	bl	8007e04 <hal_uart_init>

    return OS_OK;
 8007152:	2000      	movs	r0, #0
}
 8007154:	bd70      	pop	{r4, r5, r6, pc}
        return OS_EINVAL;
 8007156:	2002      	movs	r0, #2
 8007158:	e7fc      	b.n	8007154 <uart_hal_init+0x44>
 800715a:	bf00      	nop
 800715c:	0800702b 	.word	0x0800702b
 8007160:	08007017 	.word	0x08007017
 8007164:	080070e7 	.word	0x080070e7
 8007168:	08006feb 	.word	0x08006feb
 800716c:	080070d3 	.word	0x080070d3
 8007170:	080070bf 	.word	0x080070bf
 8007174:	080070ab 	.word	0x080070ab

08007178 <stm32_flash_sector_info>:
        uint32_t *address, uint32_t *sz)
{
    (void)dev;

#if FLASH_IS_LINEAR
    *address = dev->hf_base_addr + _FLASH_SECTOR_SIZE * idx;
 8007178:	6840      	ldr	r0, [r0, #4]
 800717a:	eb00 2181 	add.w	r1, r0, r1, lsl #10
 800717e:	6011      	str	r1, [r2, #0]
    *sz = _FLASH_SECTOR_SIZE;
 8007180:	f44f 6280 	mov.w	r2, #1024	; 0x400
    *address = stm32_flash_sectors[idx];
    *sz = stm32_flash_sectors[idx + 1] - stm32_flash_sectors[idx];
#endif

    return 0;
}
 8007184:	2000      	movs	r0, #0
    *sz = _FLASH_SECTOR_SIZE;
 8007186:	601a      	str	r2, [r3, #0]
}
 8007188:	4770      	bx	lr

0800718a <stm32_flash_init>:

static int
stm32_flash_init(const struct hal_flash *dev)
{
 800718a:	b508      	push	{r3, lr}
    (void)dev;
    STM32_HAL_FLASH_INIT();
 800718c:	f001 f95c 	bl	8008448 <HAL_FLASH_Unlock>
    return 0;
}
 8007190:	2000      	movs	r0, #0
 8007192:	bd08      	pop	{r3, pc}

08007194 <stm32_flash_erase_sector>:
    return stm32_mcu_flash_erase_sector(dev, sector_address);
 8007194:	f002 b8c8 	b.w	8009328 <stm32_mcu_flash_erase_sector>

08007198 <stm32_flash_read>:
{
 8007198:	b508      	push	{r3, lr}
 800719a:	4610      	mov	r0, r2
    memcpy(dst, (void *)address, num_bytes);
 800719c:	461a      	mov	r2, r3
 800719e:	f7fe f8e5 	bl	800536c <memcpy>
}
 80071a2:	2000      	movs	r0, #0
 80071a4:	bd08      	pop	{r3, pc}
	...

080071a8 <stm32_flash_write>:
{
 80071a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071ac:	4682      	mov	sl, r0
 80071ae:	b087      	sub	sp, #28
 80071b0:	4688      	mov	r8, r1
 80071b2:	4693      	mov	fp, r2
    if (!num_bytes) {
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d043      	beq.n	8007240 <stm32_flash_write+0x98>
    STM32_HAL_FLASH_CLEAR_ERRORS();
 80071b8:	2135      	movs	r1, #53	; 0x35
 80071ba:	4646      	mov	r6, r8
 80071bc:	461c      	mov	r4, r3
    for (i = 0; i < num_words; i++) {
 80071be:	2700      	movs	r7, #0
    num_words = ((num_bytes - 1) >> 1) + 1;
 80071c0:	1e5a      	subs	r2, r3, #1
 80071c2:	0852      	lsrs	r2, r2, #1
 80071c4:	3201      	adds	r2, #1
    align = dev->hf_align;
 80071c6:	6905      	ldr	r5, [r0, #16]
    num_words = ((num_bytes - 1) >> 1) + 1;
 80071c8:	9201      	str	r2, [sp, #4]
    STM32_HAL_FLASH_CLEAR_ERRORS();
 80071ca:	4a1f      	ldr	r2, [pc, #124]	; (8007248 <stm32_flash_write+0xa0>)
        if (num_bytes < align) {
 80071cc:	b2ed      	uxtb	r5, r5
    STM32_HAL_FLASH_CLEAR_ERRORS();
 80071ce:	60d1      	str	r1, [r2, #12]
 80071d0:	eb03 0208 	add.w	r2, r3, r8
 80071d4:	a904      	add	r1, sp, #16
 80071d6:	eb01 0282 	add.w	r2, r1, r2, lsl #2
            memset((uint32_t *)&val + num_bytes, dev->hf_erased_val, align - num_bytes);
 80071da:	eba5 0903 	sub.w	r9, r5, r3
 80071de:	9202      	str	r2, [sp, #8]
 80071e0:	eba9 0908 	sub.w	r9, r9, r8
 80071e4:	ebab 0108 	sub.w	r1, fp, r8
        if (num_bytes < align) {
 80071e8:	42a5      	cmp	r5, r4
 80071ea:	4431      	add	r1, r6
 80071ec:	d923      	bls.n	8007236 <stm32_flash_write+0x8e>
            memcpy(&val, &((uint8_t *)src)[i * align], num_bytes);
 80071ee:	4622      	mov	r2, r4
 80071f0:	a804      	add	r0, sp, #16
 80071f2:	f7fe f8bb 	bl	800536c <memcpy>
            memset((uint32_t *)&val + num_bytes, dev->hf_erased_val, align - num_bytes);
 80071f6:	9b02      	ldr	r3, [sp, #8]
 80071f8:	eb09 0206 	add.w	r2, r9, r6
 80071fc:	f89a 1014 	ldrb.w	r1, [sl, #20]
 8007200:	eba3 0086 	sub.w	r0, r3, r6, lsl #2
 8007204:	f7fe f8bf 	bl	8005386 <memset>
        rc = HAL_FLASH_Program(FLASH_PROGRAM_TYPE, address, val);
 8007208:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800720c:	4631      	mov	r1, r6
 800720e:	2001      	movs	r0, #1
 8007210:	f001 f956 	bl	80084c0 <HAL_FLASH_Program>
        if (rc != HAL_OK) {
 8007214:	b960      	cbnz	r0, 8007230 <stm32_flash_write+0x88>
        if (!(i % 32)) {
 8007216:	06fb      	lsls	r3, r7, #27
        address += align;
 8007218:	442e      	add	r6, r5
        num_bytes -= align;
 800721a:	eba4 0405 	sub.w	r4, r4, r5
        if (!(i % 32)) {
 800721e:	d103      	bne.n	8007228 <stm32_flash_write+0x80>
 8007220:	9003      	str	r0, [sp, #12]
            hal_watchdog_tickle();
 8007222:	f000 fe35 	bl	8007e90 <hal_watchdog_tickle>
 8007226:	9803      	ldr	r0, [sp, #12]
    for (i = 0; i < num_words; i++) {
 8007228:	9b01      	ldr	r3, [sp, #4]
 800722a:	3701      	adds	r7, #1
 800722c:	42bb      	cmp	r3, r7
 800722e:	d8d9      	bhi.n	80071e4 <stm32_flash_write+0x3c>
}
 8007230:	b007      	add	sp, #28
 8007232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            memcpy(&val, &((uint8_t *)src)[i * align], align);
 8007236:	462a      	mov	r2, r5
 8007238:	a804      	add	r0, sp, #16
 800723a:	f7fe f897 	bl	800536c <memcpy>
 800723e:	e7e3      	b.n	8007208 <stm32_flash_write+0x60>
        return -1;
 8007240:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007244:	e7f4      	b.n	8007230 <stm32_flash_write+0x88>
 8007246:	bf00      	nop
 8007248:	40022000 	.word	0x40022000

0800724c <os_tick_idle>:
/*
 * XXX implement tickless mode.
 */
void
os_tick_idle(os_time_t ticks)
{
 800724c:	b508      	push	{r3, lr}
    OS_ASSERT_CRITICAL();
 800724e:	f7fd fe84 	bl	8004f5a <os_arch_in_critical>
 8007252:	4603      	mov	r3, r0
 8007254:	b918      	cbnz	r0, 800725e <os_tick_idle+0x12>
 8007256:	4602      	mov	r2, r0
 8007258:	4601      	mov	r1, r0
 800725a:	f7fc fc2b 	bl	8003ab4 <__assert_func>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800725e:	f3bf 8f4f 	dsb	sy
    __DSB();
    __WFI();
 8007262:	bf30      	wfi
}
 8007264:	bd08      	pop	{r3, pc}
	...

08007268 <os_tick_init>:
void
os_tick_init(uint32_t os_ticks_per_sec, int prio)
{
    uint32_t reload_val;

    reload_val = ((uint64_t)SystemCoreClock / os_ticks_per_sec) - 1;
 8007268:	4b0a      	ldr	r3, [pc, #40]	; (8007294 <os_tick_init+0x2c>)

    /* Set the system time ticker up */
    SysTick->LOAD = reload_val;
    SysTick->VAL = 0;
 800726a:	2200      	movs	r2, #0
    reload_val = ((uint64_t)SystemCoreClock / os_ticks_per_sec) - 1;
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	0109      	lsls	r1, r1, #4
 8007270:	fbb3 f0f0 	udiv	r0, r3, r0
    SysTick->LOAD = reload_val;
 8007274:	4b08      	ldr	r3, [pc, #32]	; (8007298 <os_tick_init+0x30>)
    reload_val = ((uint64_t)SystemCoreClock / os_ticks_per_sec) - 1;
 8007276:	3801      	subs	r0, #1
    SysTick->LOAD = reload_val;
 8007278:	6058      	str	r0, [r3, #4]
    SysTick->VAL = 0;
 800727a:	609a      	str	r2, [r3, #8]
    SysTick->CTRL = 0x0007;
 800727c:	2207      	movs	r2, #7
 800727e:	b2c9      	uxtb	r1, r1
 8007280:	601a      	str	r2, [r3, #0]

    /*
     * Keep clocking debug even when CPU is sleeping, stopped or in standby.
     */
#if !MYNEWT_VAL(MCU_STM32F0)
    DBGMCU->CR |= (DBGMCU_CR_DBG_SLEEP | DBGMCU_CR_DBG_STOP | DBGMCU_CR_DBG_STANDBY);
 8007282:	4a06      	ldr	r2, [pc, #24]	; (800729c <os_tick_init+0x34>)
 8007284:	f883 1d13 	strb.w	r1, [r3, #3347]	; 0xd13
 8007288:	6853      	ldr	r3, [r2, #4]
 800728a:	f043 0307 	orr.w	r3, r3, #7
 800728e:	6053      	str	r3, [r2, #4]
#else
    DBGMCU->CR |= (DBGMCU_CR_DBG_STOP | DBGMCU_CR_DBG_STANDBY);
#endif
}
 8007290:	4770      	bx	lr
 8007292:	bf00      	nop
 8007294:	20000110 	.word	0x20000110
 8007298:	e000e010 	.word	0xe000e010
 800729c:	e0042000 	.word	0xe0042000

080072a0 <spi1_irq_handler>:
}

#if SPI_0_ENABLED
static void
spi1_irq_handler(void)
{
 80072a0:	b570      	push	{r4, r5, r6, lr}
    spi_stat.irq++;
 80072a2:	4d22      	ldr	r5, [pc, #136]	; (800732c <spi1_irq_handler+0x8c>)
    HAL_SPI_IRQHandler(&spi->handle);
 80072a4:	4c22      	ldr	r4, [pc, #136]	; (8007330 <spi1_irq_handler+0x90>)
    spi_stat.irq++;
 80072a6:	682b      	ldr	r3, [r5, #0]
    HAL_SPI_IRQHandler(&spi->handle);
 80072a8:	4620      	mov	r0, r4
    spi_stat.irq++;
 80072aa:	3301      	adds	r3, #1
 80072ac:	602b      	str	r3, [r5, #0]
    HAL_SPI_IRQHandler(&spi->handle);
 80072ae:	f001 ff85 	bl	80091bc <HAL_SPI_IRQHandler>
    err = spi->handle.ErrorCode;
 80072b2:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80072b4:	462b      	mov	r3, r5
    if (err) {
 80072b6:	b182      	cbz	r2, 80072da <spi1_irq_handler+0x3a>
        if (err & HAL_SPI_ERROR_OVR) {
 80072b8:	0756      	lsls	r6, r2, #29
            spi_stat.eovf++;
 80072ba:	bf42      	ittt	mi
 80072bc:	68e9      	ldrmi	r1, [r5, #12]
 80072be:	3101      	addmi	r1, #1
 80072c0:	60e9      	strmi	r1, [r5, #12]
        if (err & HAL_SPI_ERROR_MODF) {
 80072c2:	07d5      	lsls	r5, r2, #31
            spi_stat.emodf++;
 80072c4:	bf42      	ittt	mi
 80072c6:	6919      	ldrmi	r1, [r3, #16]
 80072c8:	3101      	addmi	r1, #1
 80072ca:	6119      	strmi	r1, [r3, #16]
        if (err & HAL_SPI_ERROR_FRE) {
 80072cc:	0710      	lsls	r0, r2, #28
            spi_stat.efre++;
 80072ce:	bf42      	ittt	mi
 80072d0:	695a      	ldrmi	r2, [r3, #20]
 80072d2:	3201      	addmi	r2, #1
 80072d4:	615a      	strmi	r2, [r3, #20]
        spi->handle.ErrorCode = 0;
 80072d6:	2300      	movs	r3, #0
 80072d8:	6563      	str	r3, [r4, #84]	; 0x54
    if (!spi->slave) {
 80072da:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 80072de:	07d9      	lsls	r1, r3, #31
 80072e0:	d40c      	bmi.n	80072fc <spi1_irq_handler+0x5c>
    if (spi->handle.TxXferCount == 0 && spi->handle.RxXferCount == 0) {
 80072e2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80072e4:	b29b      	uxth	r3, r3
 80072e6:	bb03      	cbnz	r3, 800732a <spi1_irq_handler+0x8a>
 80072e8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80072ea:	b29b      	uxth	r3, r3
 80072ec:	b9eb      	cbnz	r3, 800732a <spi1_irq_handler+0x8a>
            if (spi->txrx_cb_func) {
 80072ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80072f0:	b1db      	cbz	r3, 800732a <spi1_irq_handler+0x8a>
                spi->txrx_cb_func(spi->txrx_cb_arg, spi->handle.TxXferSize);
 80072f2:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
 80072f4:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    spi_irq_handler(stm32_hal_spis[0]);
}
 80072f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                spi->txrx_cb_func(spi->txrx_cb_arg, spi->handle.TxXferSize);
 80072fa:	4718      	bx	r3
    if (spi->tx_in_prog) {
 80072fc:	079a      	lsls	r2, r3, #30
 80072fe:	d510      	bpl.n	8007322 <spi1_irq_handler+0x82>
        if (spi->handle.TxXferCount == 0 && spi->handle.RxXferCount == 0) {
 8007300:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8007302:	b292      	uxth	r2, r2
 8007304:	b98a      	cbnz	r2, 800732a <spi1_irq_handler+0x8a>
 8007306:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8007308:	b292      	uxth	r2, r2
 800730a:	b972      	cbnz	r2, 800732a <spi1_irq_handler+0x8a>
            HAL_SPI_Transmit_IT_Custom(&spi->handle, spi->def_char, 2);
 800730c:	4909      	ldr	r1, [pc, #36]	; (8007334 <spi1_irq_handler+0x94>)
            spi->tx_in_prog = 0;
 800730e:	f362 0341 	bfi	r3, r2, #1, #1
            HAL_SPI_Transmit_IT_Custom(&spi->handle, spi->def_char, 2);
 8007312:	f1a1 0059 	sub.w	r0, r1, #89	; 0x59
 8007316:	2202      	movs	r2, #2
            spi->tx_in_prog = 0;
 8007318:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
            HAL_SPI_Transmit_IT_Custom(&spi->handle, spi->def_char, 2);
 800731c:	f000 fe86 	bl	800802c <HAL_SPI_Transmit_IT_Custom>
 8007320:	e7e5      	b.n	80072ee <spi1_irq_handler+0x4e>
        spi->handle.pTxBuffPtr = spi->def_char;
 8007322:	4b04      	ldr	r3, [pc, #16]	; (8007334 <spi1_irq_handler+0x94>)
 8007324:	6323      	str	r3, [r4, #48]	; 0x30
        spi->handle.TxXferCount = 2;
 8007326:	2302      	movs	r3, #2
 8007328:	86e3      	strh	r3, [r4, #54]	; 0x36
}
 800732a:	bd70      	pop	{r4, r5, r6, pc}
 800732c:	20002b24 	.word	0x20002b24
 8007330:	20003bb8 	.word	0x20003bb8
 8007334:	20003c11 	.word	0x20003c11

08007338 <spi_ss_isr>:
    spi_stat.ss_irq++;
 8007338:	4a2f      	ldr	r2, [pc, #188]	; (80073f8 <spi_ss_isr+0xc0>)
{
 800733a:	b538      	push	{r3, r4, r5, lr}
    spi_stat.ss_irq++;
 800733c:	6853      	ldr	r3, [r2, #4]
{
 800733e:	4604      	mov	r4, r0
    spi_stat.ss_irq++;
 8007340:	3301      	adds	r3, #1
 8007342:	6053      	str	r3, [r2, #4]
    ss = hal_gpio_read(spi->cfg->ss_pin);
 8007344:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8007346:	6818      	ldr	r0, [r3, #0]
 8007348:	f000 ffa4 	bl	8008294 <hal_gpio_read>
    if (ss == 0 && !spi->selected) {
 800734c:	b9d8      	cbnz	r0, 8007386 <spi_ss_isr+0x4e>
 800734e:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
 8007352:	0755      	lsls	r5, r2, #29
 8007354:	d416      	bmi.n	8007384 <spi_ss_isr+0x4c>
 8007356:	6823      	ldr	r3, [r4, #0]
        if (spi->tx_in_prog) {
 8007358:	f012 0f02 	tst.w	r2, #2
            __HAL_SPI_ENABLE_IT(&spi->handle,
 800735c:	685a      	ldr	r2, [r3, #4]
 800735e:	bf14      	ite	ne
 8007360:	f042 02e0 	orrne.w	r2, r2, #224	; 0xe0
            __HAL_SPI_ENABLE_IT(&spi->handle, SPI_IT_TXE | SPI_IT_ERR);
 8007364:	f042 02a0 	orreq.w	r2, r2, #160	; 0xa0
 8007368:	605a      	str	r2, [r3, #4]
        reg &= ~SPI_CR1_SSI;
 800736a:	f64f 62ff 	movw	r2, #65279	; 0xfeff
        reg = spi->handle.Instance->CR1;
 800736e:	6819      	ldr	r1, [r3, #0]
        reg &= ~SPI_CR1_SSI;
 8007370:	400a      	ands	r2, r1
        spi->handle.Instance->CR1 = reg;
 8007372:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007376:	601a      	str	r2, [r3, #0]
        spi->selected = 1;
 8007378:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 800737c:	f043 0304 	orr.w	r3, r3, #4
        spi->selected = 0;
 8007380:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
}
 8007384:	bd38      	pop	{r3, r4, r5, pc}
    if (ss == 1 && spi->selected) {
 8007386:	2801      	cmp	r0, #1
 8007388:	d1fc      	bne.n	8007384 <spi_ss_isr+0x4c>
 800738a:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 800738e:	0758      	lsls	r0, r3, #29
 8007390:	d5f8      	bpl.n	8007384 <spi_ss_isr+0x4c>
        if (spi->handle.Instance->SR & SPI_SR_RXNE && spi->handle.RxISR) {
 8007392:	6823      	ldr	r3, [r4, #0]
 8007394:	689b      	ldr	r3, [r3, #8]
 8007396:	07d9      	lsls	r1, r3, #31
 8007398:	d503      	bpl.n	80073a2 <spi_ss_isr+0x6a>
 800739a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800739c:	b10b      	cbz	r3, 80073a2 <spi_ss_isr+0x6a>
            spi->handle.RxISR(&spi->handle);
 800739e:	4620      	mov	r0, r4
 80073a0:	4798      	blx	r3
        reg &= ~SPI_CR1_SPE;
 80073a2:	f64f 73bf 	movw	r3, #65471	; 0xffbf
        reg = spi->handle.Instance->CR1;
 80073a6:	6822      	ldr	r2, [r4, #0]
 80073a8:	6811      	ldr	r1, [r2, #0]
        reg &= ~SPI_CR1_SPE;
 80073aa:	400b      	ands	r3, r1
        spi->handle.Instance->CR1 = reg;
 80073ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073b0:	6013      	str	r3, [r2, #0]
        __HAL_SPI_DISABLE_IT(&spi->handle, SPI_IT_RXNE|SPI_IT_TXE|SPI_IT_ERR);
 80073b2:	6853      	ldr	r3, [r2, #4]
 80073b4:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80073b8:	6053      	str	r3, [r2, #4]
        len = spi->handle.RxXferSize - spi->handle.RxXferCount;
 80073ba:	8fe5      	ldrh	r5, [r4, #62]	; 0x3e
 80073bc:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
        if (len) {
 80073be:	1b5d      	subs	r5, r3, r5
 80073c0:	d015      	beq.n	80073ee <spi_ss_isr+0xb6>
            spi->handle.State = HAL_SPI_STATE_READY;
 80073c2:	2301      	movs	r3, #1
            HAL_SPI_QueueTransmit(&spi->handle, spi->def_char, 2);
 80073c4:	2202      	movs	r2, #2
            spi->handle.State = HAL_SPI_STATE_READY;
 80073c6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
            HAL_SPI_QueueTransmit(&spi->handle, spi->def_char, 2);
 80073ca:	f104 0159 	add.w	r1, r4, #89	; 0x59
 80073ce:	4620      	mov	r0, r4
 80073d0:	f000 fe02 	bl	8007fd8 <HAL_SPI_QueueTransmit>
            if (spi->tx_in_prog) {
 80073d4:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 80073d8:	079a      	lsls	r2, r3, #30
 80073da:	d508      	bpl.n	80073ee <spi_ss_isr+0xb6>
                spi->tx_in_prog = 0;
 80073dc:	f36f 0341 	bfc	r3, #1, #1
 80073e0:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
                if (spi->txrx_cb_func) {
 80073e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80073e6:	b113      	cbz	r3, 80073ee <spi_ss_isr+0xb6>
                    spi->txrx_cb_func(spi->txrx_cb_arg, len);
 80073e8:	4629      	mov	r1, r5
 80073ea:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80073ec:	4798      	blx	r3
        spi->selected = 0;
 80073ee:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 80073f2:	f36f 0382 	bfc	r3, #2, #1
 80073f6:	e7c3      	b.n	8007380 <spi_ss_isr+0x48>
 80073f8:	20002b24 	.word	0x20002b24

080073fc <stm32_resolve_spi_irq_handler>:
}
#endif

uint32_t
stm32_resolve_spi_irq_handler(SPI_HandleTypeDef *hspi)
{
 80073fc:	b508      	push	{r3, lr}
    switch((uintptr_t)hspi->Instance) {
 80073fe:	6802      	ldr	r2, [r0, #0]
 8007400:	4b05      	ldr	r3, [pc, #20]	; (8007418 <stm32_resolve_spi_irq_handler+0x1c>)
 8007402:	429a      	cmp	r2, r3
 8007404:	d005      	beq.n	8007412 <stm32_resolve_spi_irq_handler+0x16>
#if SPI_5_ENABLED
    case (uintptr_t)SPI6:
        return (uint32_t)&spi6_irq_handler;
#endif
    default:
        assert(0);
 8007406:	2300      	movs	r3, #0
 8007408:	461a      	mov	r2, r3
 800740a:	4619      	mov	r1, r3
 800740c:	4618      	mov	r0, r3
 800740e:	f7fc fb51 	bl	8003ab4 <__assert_func>
    }
}
 8007412:	4802      	ldr	r0, [pc, #8]	; (800741c <stm32_resolve_spi_irq_handler+0x20>)
 8007414:	bd08      	pop	{r3, pc}
 8007416:	bf00      	nop
 8007418:	40013000 	.word	0x40013000
 800741c:	080072a1 	.word	0x080072a1

08007420 <hal_spi_init>:
    struct stm32_hal_spi *spi;
    int rc;

    /* Check for valid arguments */
    rc = -1;
    if (usercfg == NULL) {
 8007420:	b181      	cbz	r1, 8007444 <hal_spi_init+0x24>
        goto err;
    }

    if ((spi_type != HAL_SPI_TYPE_MASTER) && (spi_type != HAL_SPI_TYPE_SLAVE)) {
 8007422:	2a01      	cmp	r2, #1
 8007424:	d80e      	bhi.n	8007444 <hal_spi_init+0x24>

    /* Allow user to specify default init settings for the SPI.
     * This can be done in BSP, so that only the generic SPI settings
     * are passed to the user configure() call.
     */
    STM32_HAL_SPI_RESOLVE(spi_num, spi);
 8007426:	2805      	cmp	r0, #5
 8007428:	dc0c      	bgt.n	8007444 <hal_spi_init+0x24>
 800742a:	4b08      	ldr	r3, [pc, #32]	; (800744c <hal_spi_init+0x2c>)
 800742c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007430:	b143      	cbz	r3, 8007444 <hal_spi_init+0x24>

    spi->cfg = usercfg;
 8007432:	6619      	str	r1, [r3, #96]	; 0x60
    spi->slave = (spi_type == HAL_SPI_TYPE_SLAVE);
 8007434:	f893 1058 	ldrb.w	r1, [r3, #88]	; 0x58

    return (0);
 8007438:	2000      	movs	r0, #0
    spi->slave = (spi_type == HAL_SPI_TYPE_SLAVE);
 800743a:	f362 0100 	bfi	r1, r2, #0, #1
 800743e:	f883 1058 	strb.w	r1, [r3, #88]	; 0x58
    return (0);
 8007442:	4770      	bx	lr
err:
    return (rc);
 8007444:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8007448:	4770      	bx	lr
 800744a:	bf00      	nop
 800744c:	0800e078 	.word	0x0800e078

08007450 <hal_spi_enable>:
{
    struct stm32_hal_spi *spi;
    int rc;

    rc = 0;
    STM32_HAL_SPI_RESOLVE(spi_num, spi);
 8007450:	2805      	cmp	r0, #5
 8007452:	bfdf      	itttt	le
 8007454:	4b05      	ldrle	r3, [pc, #20]	; (800746c <hal_spi_enable+0x1c>)
 8007456:	f853 0020 	ldrle.w	r0, [r3, r0, lsl #2]
 800745a:	fab0 f080 	clzle	r0, r0
 800745e:	0940      	lsrle	r0, r0, #5
 8007460:	bfd4      	ite	le
 8007462:	4240      	negle	r0, r0
 8007464:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff

    /* XXX power up */
err:
    return rc;
}
 8007468:	4770      	bx	lr
 800746a:	bf00      	nop
 800746c:	0800e078 	.word	0x0800e078

08007470 <hal_spi_slave_set_def_tx_val>:
    struct stm32_hal_spi *spi;
    int rc;
    int sr;
    int i;

    STM32_HAL_SPI_RESOLVE(spi_num, spi);
 8007470:	2805      	cmp	r0, #5
{
 8007472:	b538      	push	{r3, r4, r5, lr}
    STM32_HAL_SPI_RESOLVE(spi_num, spi);
 8007474:	dc32      	bgt.n	80074dc <hal_spi_slave_set_def_tx_val+0x6c>
 8007476:	4b1b      	ldr	r3, [pc, #108]	; (80074e4 <hal_spi_slave_set_def_tx_val+0x74>)
 8007478:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800747c:	b370      	cbz	r0, 80074dc <hal_spi_slave_set_def_tx_val+0x6c>

    if (spi->slave) {
 800747e:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 8007482:	07db      	lsls	r3, r3, #31
 8007484:	d52a      	bpl.n	80074dc <hal_spi_slave_set_def_tx_val+0x6c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007486:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800748a:	b672      	cpsid	i
        rc = 0;
        __HAL_DISABLE_INTERRUPTS(sr);
        if (spi->handle.Init.DataSize == SPI_DATASIZE_8BIT) {
 800748c:	68c3      	ldr	r3, [r0, #12]
 800748e:	b1bb      	cbz	r3, 80074c0 <hal_spi_slave_set_def_tx_val+0x50>
            for (i = 0; i < 4; i++) {
                ((uint8_t *)spi->def_char)[i] = val;
            }
        } else {
            for (i = 0; i < 2; i++) {
                ((uint16_t *)spi->def_char)[i] = val;
 8007490:	f8a0 1059 	strh.w	r1, [r0, #89]	; 0x59
 8007494:	f8a0 105b 	strh.w	r1, [r0, #91]	; 0x5b
            }
        }
        if (!spi->tx_in_prog) {
 8007498:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 800749c:	f013 0502 	ands.w	r5, r3, #2
 80074a0:	d118      	bne.n	80074d4 <hal_spi_slave_set_def_tx_val+0x64>
            /*
             * Replaces the current default char in tx buffer register.
             */
            spi->handle.State = HAL_SPI_STATE_READY;
 80074a2:	2301      	movs	r3, #1
            rc = HAL_SPI_QueueTransmit(&spi->handle, spi->def_char, 2);
 80074a4:	2202      	movs	r2, #2
            spi->handle.State = HAL_SPI_STATE_READY;
 80074a6:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
            rc = HAL_SPI_QueueTransmit(&spi->handle, spi->def_char, 2);
 80074aa:	f100 0159 	add.w	r1, r0, #89	; 0x59
 80074ae:	f000 fd93 	bl	8007fd8 <HAL_SPI_QueueTransmit>
            assert(rc == 0);
 80074b2:	b178      	cbz	r0, 80074d4 <hal_spi_slave_set_def_tx_val+0x64>
 80074b4:	462b      	mov	r3, r5
 80074b6:	462a      	mov	r2, r5
 80074b8:	4629      	mov	r1, r5
 80074ba:	4628      	mov	r0, r5
 80074bc:	f7fc fafa 	bl	8003ab4 <__assert_func>
                ((uint8_t *)spi->def_char)[i] = val;
 80074c0:	b2c9      	uxtb	r1, r1
 80074c2:	f880 1059 	strb.w	r1, [r0, #89]	; 0x59
 80074c6:	f880 105a 	strb.w	r1, [r0, #90]	; 0x5a
 80074ca:	f880 105b 	strb.w	r1, [r0, #91]	; 0x5b
 80074ce:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c
 80074d2:	e7e1      	b.n	8007498 <hal_spi_slave_set_def_tx_val+0x28>
        }
        __HAL_ENABLE_INTERRUPTS(sr);
 80074d4:	b904      	cbnz	r4, 80074d8 <hal_spi_slave_set_def_tx_val+0x68>
  __ASM volatile ("cpsie i" : : : "memory");
 80074d6:	b662      	cpsie	i
 80074d8:	2000      	movs	r0, #0
    } else {
        rc = -1;
    }
err:
    return rc;
 80074da:	e001      	b.n	80074e0 <hal_spi_slave_set_def_tx_val+0x70>
    STM32_HAL_SPI_RESOLVE(spi_num, spi);
 80074dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80074e0:	bd38      	pop	{r3, r4, r5, pc}
 80074e2:	bf00      	nop
 80074e4:	0800e078 	.word	0x0800e078

080074e8 <hal_spi_config>:
{
 80074e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074ec:	460e      	mov	r6, r1
 80074ee:	b088      	sub	sp, #32
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074f0:	f3ef 8810 	mrs	r8, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80074f4:	b672      	cpsid	i
    STM32_HAL_SPI_RESOLVE(spi_num, spi);
 80074f6:	2805      	cmp	r0, #5
 80074f8:	dc76      	bgt.n	80075e8 <hal_spi_config+0x100>
 80074fa:	4b6e      	ldr	r3, [pc, #440]	; (80076b4 <hal_spi_config+0x1cc>)
 80074fc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d071      	beq.n	80075e8 <hal_spi_config+0x100>
    if (!spi->slave) {
 8007504:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
    cfg = spi->cfg;
 8007508:	6e1f      	ldr	r7, [r3, #96]	; 0x60
    if (!spi->slave) {
 800750a:	07d4      	lsls	r4, r2, #31
        spi->handle.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800750c:	bf55      	itete	pl
 800750e:	f44f 2280 	movpl.w	r2, #262144	; 0x40000
        spi->handle.Init.NSS = SPI_NSS_SOFT;
 8007512:	f44f 7200 	movmi.w	r2, #512	; 0x200
        spi->handle.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8007516:	619a      	strpl	r2, [r3, #24]
        spi->handle.Init.NSS = SPI_NSS_SOFT;
 8007518:	619a      	strmi	r2, [r3, #24]
        spi->handle.Init.Mode = SPI_MODE_MASTER;
 800751a:	bf54      	ite	pl
 800751c:	f44f 7282 	movpl.w	r2, #260	; 0x104
        spi->handle.Init.Mode = SPI_MODE_SLAVE;
 8007520:	2200      	movmi	r2, #0
 8007522:	605a      	str	r2, [r3, #4]
    gpio.Pull = GPIO_NOPULL;
 8007524:	2200      	movs	r2, #0
 8007526:	2302      	movs	r3, #2
 8007528:	e9cd 3205 	strd	r3, r2, [sp, #20]
    if (settings->baudrate <= 2000) {
 800752c:	684a      	ldr	r2, [r1, #4]
 800752e:	f5b2 6ffa 	cmp.w	r2, #2000	; 0x7d0
 8007532:	d905      	bls.n	8007540 <hal_spi_config+0x58>
        gpio_speed = GPIO_SPEED_FREQ_HIGH;
 8007534:	f243 03d4 	movw	r3, #12500	; 0x30d4
 8007538:	429a      	cmp	r2, r3
 800753a:	bf94      	ite	ls
 800753c:	2301      	movls	r3, #1
 800753e:	2303      	movhi	r3, #3
    switch (spi_num) {
 8007540:	2800      	cmp	r0, #0
 8007542:	d13c      	bne.n	80075be <hal_spi_config+0xd6>
        __HAL_RCC_SPI1_CLK_ENABLE();
 8007544:	4a5c      	ldr	r2, [pc, #368]	; (80076b8 <hal_spi_config+0x1d0>)
        spi->handle.Instance = SPI1;
 8007546:	4c5d      	ldr	r4, [pc, #372]	; (80076bc <hal_spi_config+0x1d4>)
        __HAL_RCC_SPI1_CLK_ENABLE();
 8007548:	6991      	ldr	r1, [r2, #24]
 800754a:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 800754e:	6191      	str	r1, [r2, #24]
 8007550:	6992      	ldr	r2, [r2, #24]
 8007552:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8007556:	9203      	str	r2, [sp, #12]
 8007558:	9a03      	ldr	r2, [sp, #12]
        spi->handle.Instance = SPI1;
 800755a:	4a59      	ldr	r2, [pc, #356]	; (80076c0 <hal_spi_config+0x1d8>)
 800755c:	6022      	str	r2, [r4, #0]
    if (!spi->slave) {
 800755e:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
 8007562:	07d1      	lsls	r1, r2, #31
 8007564:	d531      	bpl.n	80075ca <hal_spi_config+0xe2>
    rc = hal_gpio_init_stm(cfg->sck_pin, &gpio);
 8007566:	a904      	add	r1, sp, #16
 8007568:	6878      	ldr	r0, [r7, #4]
    gpio.Speed = gpio_speed;
 800756a:	9307      	str	r3, [sp, #28]
    rc = hal_gpio_init_stm(cfg->sck_pin, &gpio);
 800756c:	f000 fe28 	bl	80081c0 <hal_gpio_init_stm>
    if (rc != 0) {
 8007570:	4605      	mov	r5, r0
 8007572:	2800      	cmp	r0, #0
 8007574:	d13a      	bne.n	80075ec <hal_spi_config+0x104>
    if (!spi->slave) {
 8007576:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
    rc = hal_gpio_init_stm(cfg->mosi_pin, &gpio);
 800757a:	a904      	add	r1, sp, #16
    if (!spi->slave) {
 800757c:	f013 0301 	ands.w	r3, r3, #1
        gpio.Mode = GPIO_MODE_AF_OD;
 8007580:	bf18      	it	ne
 8007582:	2312      	movne	r3, #18
    rc = hal_gpio_init_stm(cfg->mosi_pin, &gpio);
 8007584:	68f8      	ldr	r0, [r7, #12]
        gpio.Pull = GPIO_NOPULL;
 8007586:	bf0c      	ite	eq
 8007588:	9306      	streq	r3, [sp, #24]
        gpio.Mode = GPIO_MODE_AF_OD;
 800758a:	9305      	strne	r3, [sp, #20]
    rc = hal_gpio_init_stm(cfg->mosi_pin, &gpio);
 800758c:	f000 fe18 	bl	80081c0 <hal_gpio_init_stm>
    if (rc != 0) {
 8007590:	4605      	mov	r5, r0
 8007592:	2800      	cmp	r0, #0
 8007594:	d12a      	bne.n	80075ec <hal_spi_config+0x104>
    if (!spi->slave) {
 8007596:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
    rc = hal_gpio_init_stm(cfg->miso_pin, &gpio);
 800759a:	a904      	add	r1, sp, #16
    if (!spi->slave) {
 800759c:	07da      	lsls	r2, r3, #31
        gpio.Mode = GPIO_MODE_AF_OD;
 800759e:	bf54      	ite	pl
 80075a0:	2312      	movpl	r3, #18
        gpio.Mode = GPIO_MODE_AF_PP;
 80075a2:	2302      	movmi	r3, #2
    rc = hal_gpio_init_stm(cfg->miso_pin, &gpio);
 80075a4:	68b8      	ldr	r0, [r7, #8]
        gpio.Mode = GPIO_MODE_AF_PP;
 80075a6:	9305      	str	r3, [sp, #20]
    rc = hal_gpio_init_stm(cfg->miso_pin, &gpio);
 80075a8:	f000 fe0a 	bl	80081c0 <hal_gpio_init_stm>
    if (rc != 0) {
 80075ac:	4605      	mov	r5, r0
 80075ae:	b9e8      	cbnz	r0, 80075ec <hal_spi_config+0x104>
    switch (settings->data_mode) {
 80075b0:	7833      	ldrb	r3, [r6, #0]
 80075b2:	2b03      	cmp	r3, #3
 80075b4:	d818      	bhi.n	80075e8 <hal_spi_config+0x100>
 80075b6:	e8df f003 	tbb	[pc, r3]
 80075ba:	1e10      	.short	0x1e10
 80075bc:	2622      	.short	0x2622
        assert(0);
 80075be:	2300      	movs	r3, #0
 80075c0:	461a      	mov	r2, r3
 80075c2:	4619      	mov	r1, r3
 80075c4:	4618      	mov	r0, r3
 80075c6:	f7fc fa75 	bl	8003ab4 <__assert_func>
        if (settings->data_mode == HAL_SPI_MODE2 ||
 80075ca:	7832      	ldrb	r2, [r6, #0]
 80075cc:	3a02      	subs	r2, #2
 80075ce:	2a01      	cmp	r2, #1
            gpio.Pull = GPIO_PULLUP;
 80075d0:	bf94      	ite	ls
 80075d2:	2201      	movls	r2, #1
            gpio.Pull = GPIO_PULLDOWN;
 80075d4:	2202      	movhi	r2, #2
 80075d6:	9206      	str	r2, [sp, #24]
 80075d8:	e7c5      	b.n	8007566 <hal_spi_config+0x7e>
        init->CLKPolarity = SPI_POLARITY_LOW;
 80075da:	2300      	movs	r3, #0
 80075dc:	6123      	str	r3, [r4, #16]
        init->CLKPhase = SPI_PHASE_2EDGE;
 80075de:	6163      	str	r3, [r4, #20]
    switch (settings->data_order) {
 80075e0:	7873      	ldrb	r3, [r6, #1]
 80075e2:	b19b      	cbz	r3, 800760c <hal_spi_config+0x124>
 80075e4:	2b01      	cmp	r3, #1
 80075e6:	d010      	beq.n	800760a <hal_spi_config+0x122>
    STM32_HAL_SPI_RESOLVE(spi_num, spi);
 80075e8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    __HAL_ENABLE_INTERRUPTS(sr);
 80075ec:	f1b8 0f00 	cmp.w	r8, #0
 80075f0:	d157      	bne.n	80076a2 <hal_spi_config+0x1ba>
  __ASM volatile ("cpsie i" : : : "memory");
 80075f2:	b662      	cpsie	i
 80075f4:	e055      	b.n	80076a2 <hal_spi_config+0x1ba>
        init->CLKPolarity = SPI_POLARITY_LOW;
 80075f6:	2300      	movs	r3, #0
        init->CLKPolarity = SPI_POLARITY_HIGH;
 80075f8:	6123      	str	r3, [r4, #16]
        init->CLKPhase = SPI_PHASE_2EDGE;
 80075fa:	2301      	movs	r3, #1
 80075fc:	e7ef      	b.n	80075de <hal_spi_config+0xf6>
        init->CLKPolarity = SPI_POLARITY_HIGH;
 80075fe:	2302      	movs	r3, #2
 8007600:	6123      	str	r3, [r4, #16]
        init->CLKPhase = SPI_PHASE_1EDGE;
 8007602:	2300      	movs	r3, #0
 8007604:	e7eb      	b.n	80075de <hal_spi_config+0xf6>
        init->CLKPolarity = SPI_POLARITY_HIGH;
 8007606:	2302      	movs	r3, #2
 8007608:	e7f6      	b.n	80075f8 <hal_spi_config+0x110>
        init->FirstBit = SPI_FIRSTBIT_LSB;
 800760a:	2380      	movs	r3, #128	; 0x80
 800760c:	6223      	str	r3, [r4, #32]
    switch (settings->word_size) {
 800760e:	78b3      	ldrb	r3, [r6, #2]
 8007610:	b11b      	cbz	r3, 800761a <hal_spi_config+0x132>
 8007612:	2b01      	cmp	r3, #1
 8007614:	d1e8      	bne.n	80075e8 <hal_spi_config+0x100>
        init->DataSize = SPI_DATASIZE_16BIT;
 8007616:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800761a:	60e3      	str	r3, [r4, #12]
    rc = stm32_spi_resolve_prescaler(spi_num, settings->baudrate * 1000, &prescaler);
 800761c:	6873      	ldr	r3, [r6, #4]
 800761e:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8007622:	435e      	muls	r6, r3
        apbfreq = HAL_RCC_GetPCLK2Freq();
 8007624:	f001 fc08 	bl	8008e38 <HAL_RCC_GetPCLK2Freq>
    if (baudrate == 0) {
 8007628:	b12e      	cbz	r6, 8007636 <hal_spi_config+0x14e>
        candidate_br = apbfreq >> (i + 1);
 800762a:	1c6b      	adds	r3, r5, #1
 800762c:	fa20 f203 	lsr.w	r2, r0, r3
        if (candidate_br <= baudrate) {
 8007630:	4296      	cmp	r6, r2
 8007632:	d33a      	bcc.n	80076aa <hal_spi_config+0x1c2>
            *prescaler = i << SPI_CR1_BR_Pos;
 8007634:	00ee      	lsls	r6, r5, #3
    init->Direction = SPI_DIRECTION_2LINES;
 8007636:	2300      	movs	r3, #0
    init->BaudRatePrescaler = prescaler;
 8007638:	61e6      	str	r6, [r4, #28]
    init->CRCPolynomial = 1;
 800763a:	2601      	movs	r6, #1
    init->Direction = SPI_DIRECTION_2LINES;
 800763c:	60a3      	str	r3, [r4, #8]
    init->CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800763e:	e9c4 3309 	strd	r3, r3, [r4, #36]	; 0x24
    switch (spi) {
 8007642:	6822      	ldr	r2, [r4, #0]
 8007644:	4b1e      	ldr	r3, [pc, #120]	; (80076c0 <hal_spi_config+0x1d8>)
    init->CRCPolynomial = 1;
 8007646:	62e6      	str	r6, [r4, #44]	; 0x2c
    switch (spi) {
 8007648:	429a      	cmp	r2, r3
 800764a:	d1b8      	bne.n	80075be <hal_spi_config+0xd6>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	4d1d      	ldr	r5, [pc, #116]	; (80076c4 <hal_spi_config+0x1dc>)
 8007650:	011b      	lsls	r3, r3, #4
 8007652:	b2db      	uxtb	r3, r3
 8007654:	f885 3323 	strb.w	r3, [r5, #803]	; 0x323
    NVIC_SetVector(irq, stm32_resolve_spi_irq_handler(&spi->handle));
 8007658:	4818      	ldr	r0, [pc, #96]	; (80076bc <hal_spi_config+0x1d4>)
 800765a:	f7ff fecf 	bl	80073fc <stm32_resolve_spi_irq_handler>
  uint32_t vectors = (uint32_t )SCB->VTOR;
 800765e:	4b1a      	ldr	r3, [pc, #104]	; (80076c8 <hal_spi_config+0x1e0>)
 8007660:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 8007662:	f8c3 00cc 	str.w	r0, [r3, #204]	; 0xcc
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007666:	2308      	movs	r3, #8
    rc = HAL_SPI_Init(&spi->handle);
 8007668:	4814      	ldr	r0, [pc, #80]	; (80076bc <hal_spi_config+0x1d4>)
 800766a:	606b      	str	r3, [r5, #4]
 800766c:	f001 fc69 	bl	8008f42 <HAL_SPI_Init>
    if (rc != 0) {
 8007670:	4605      	mov	r5, r0
 8007672:	2800      	cmp	r0, #0
 8007674:	d1ba      	bne.n	80075ec <hal_spi_config+0x104>
    if (spi->slave) {
 8007676:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 800767a:	07db      	lsls	r3, r3, #31
 800767c:	d50c      	bpl.n	8007698 <hal_spi_config+0x1b0>
        hal_spi_slave_set_def_tx_val(spi_num, 0);
 800767e:	4601      	mov	r1, r0
 8007680:	f7ff fef6 	bl	8007470 <hal_spi_slave_set_def_tx_val>
        rc = hal_gpio_irq_init(cfg->ss_pin, spi_ss_isr, spi, HAL_GPIO_TRIG_BOTH,
 8007684:	9600      	str	r6, [sp, #0]
 8007686:	2303      	movs	r3, #3
 8007688:	4a0c      	ldr	r2, [pc, #48]	; (80076bc <hal_spi_config+0x1d4>)
 800768a:	4910      	ldr	r1, [pc, #64]	; (80076cc <hal_spi_config+0x1e4>)
 800768c:	6838      	ldr	r0, [r7, #0]
 800768e:	f000 fe35 	bl	80082fc <hal_gpio_irq_init>
        spi_ss_isr(spi);
 8007692:	480a      	ldr	r0, [pc, #40]	; (80076bc <hal_spi_config+0x1d4>)
 8007694:	f7ff fe50 	bl	8007338 <spi_ss_isr>
    __HAL_ENABLE_INTERRUPTS(sr);
 8007698:	f1b8 0f00 	cmp.w	r8, #0
 800769c:	d101      	bne.n	80076a2 <hal_spi_config+0x1ba>
 800769e:	b662      	cpsie	i
    return (0);
 80076a0:	4645      	mov	r5, r8
}
 80076a2:	4628      	mov	r0, r5
 80076a4:	b008      	add	sp, #32
 80076a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    for (i = 0; i < 8; i++) {
 80076aa:	2b08      	cmp	r3, #8
 80076ac:	461d      	mov	r5, r3
 80076ae:	d1bc      	bne.n	800762a <hal_spi_config+0x142>
    *prescaler = SPI_BAUDRATEPRESCALER_256;
 80076b0:	2638      	movs	r6, #56	; 0x38
 80076b2:	e7c0      	b.n	8007636 <hal_spi_config+0x14e>
 80076b4:	0800e078 	.word	0x0800e078
 80076b8:	40021000 	.word	0x40021000
 80076bc:	20003bb8 	.word	0x20003bb8
 80076c0:	40013000 	.word	0x40013000
 80076c4:	e000e100 	.word	0xe000e100
 80076c8:	e000ed00 	.word	0xe000ed00
 80076cc:	08007339 	.word	0x08007339

080076d0 <hal_spi_tx_val>:
 *
 * @return uint16_t Value received on SPI interface from slave. Returns 0xFFFF
 * if called when the SPI is configured to be a slave
 */
uint16_t hal_spi_tx_val(int spi_num, uint16_t val)
{
 80076d0:	b510      	push	{r4, lr}
    struct stm32_hal_spi *spi;
    uint16_t retval;
    int len;
    int sr;

    STM32_HAL_SPI_RESOLVE(spi_num, spi);
 80076d2:	2805      	cmp	r0, #5
{
 80076d4:	b086      	sub	sp, #24
 80076d6:	f8ad 100e 	strh.w	r1, [sp, #14]
    STM32_HAL_SPI_RESOLVE(spi_num, spi);
 80076da:	dc0b      	bgt.n	80076f4 <hal_spi_tx_val+0x24>
 80076dc:	4b14      	ldr	r3, [pc, #80]	; (8007730 <hal_spi_tx_val+0x60>)
 80076de:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80076e2:	b138      	cbz	r0, 80076f4 <hal_spi_tx_val+0x24>
    if (spi->slave) {
 80076e4:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 80076e8:	07db      	lsls	r3, r3, #31
 80076ea:	d507      	bpl.n	80076fc <hal_spi_tx_val+0x2c>
        retval = -1;
 80076ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80076f0:	f8ad 3016 	strh.w	r3, [sp, #22]
        retval = 0xFFFF;
    }

err:
    return retval;
}
 80076f4:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 80076f8:	b006      	add	sp, #24
 80076fa:	bd10      	pop	{r4, pc}
    if (spi->handle.Init.DataSize == SPI_DATASIZE_8BIT) {
 80076fc:	68c3      	ldr	r3, [r0, #12]
        len = sizeof(uint16_t);
 80076fe:	2b00      	cmp	r3, #0
 8007700:	bf0c      	ite	eq
 8007702:	2301      	moveq	r3, #1
 8007704:	2302      	movne	r3, #2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007706:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800770a:	b672      	cpsid	i
    spi_stat.tx++;
 800770c:	4909      	ldr	r1, [pc, #36]	; (8007734 <hal_spi_tx_val+0x64>)
 800770e:	688a      	ldr	r2, [r1, #8]
 8007710:	3201      	adds	r2, #1
 8007712:	608a      	str	r2, [r1, #8]
    rc = HAL_SPI_TransmitReceive(&spi->handle,(uint8_t *)&val,
 8007714:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007718:	f10d 010e 	add.w	r1, sp, #14
 800771c:	9200      	str	r2, [sp, #0]
 800771e:	f10d 0216 	add.w	r2, sp, #22
 8007722:	f001 fc4b 	bl	8008fbc <HAL_SPI_TransmitReceive>
    __HAL_ENABLE_INTERRUPTS(sr);
 8007726:	b904      	cbnz	r4, 800772a <hal_spi_tx_val+0x5a>
  __ASM volatile ("cpsie i" : : : "memory");
 8007728:	b662      	cpsie	i
    if (rc != HAL_OK) {
 800772a:	2800      	cmp	r0, #0
 800772c:	d1de      	bne.n	80076ec <hal_spi_tx_val+0x1c>
err:
 800772e:	e7e1      	b.n	80076f4 <hal_spi_tx_val+0x24>
 8007730:	0800e078 	.word	0x0800e078
 8007734:	20002b24 	.word	0x20002b24

08007738 <hal_system_reset>:
  __ASM volatile ("dsb 0xF":::"memory");
 8007738:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800773c:	4905      	ldr	r1, [pc, #20]	; (8007754 <hal_system_reset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800773e:	4b06      	ldr	r3, [pc, #24]	; (8007758 <hal_system_reset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8007740:	68ca      	ldr	r2, [r1, #12]
 8007742:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8007746:	4313      	orrs	r3, r2
 8007748:	60cb      	str	r3, [r1, #12]
 800774a:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800774e:	bf00      	nop
 8007750:	e7fd      	b.n	800774e <hal_system_reset+0x16>
 8007752:	bf00      	nop
 8007754:	e000ed00 	.word	0xe000ed00
 8007758:	05fa0004 	.word	0x05fa0004

0800775c <hal_debugger_connected>:
int
hal_debugger_connected(void)
{
    /* FIXME */
    return 0;
}
 800775c:	2000      	movs	r0, #0
 800775e:	4770      	bx	lr

08007760 <HAL_GetTick>:

uint32_t
HAL_GetTick(void)
{
    return os_time_get();
 8007760:	f7fd bb6e 	b.w	8004e40 <os_time_get>

08007764 <HAL_InitTick>:

HAL_StatusTypeDef
HAL_InitTick (uint32_t TickPriority)
{
    return HAL_OK;
}
 8007764:	2000      	movs	r0, #0
 8007766:	4770      	bx	lr

08007768 <hal_timer_cnt>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007768:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800776c:	b672      	cpsid	i
{
    uint32_t cnt;
    int sr;

    __HAL_DISABLE_INTERRUPTS(sr);
    if (tmr->sht_regs->SR & TIM_SR_UIF) {
 800776e:	6803      	ldr	r3, [r0, #0]
 8007770:	691a      	ldr	r2, [r3, #16]
 8007772:	07d2      	lsls	r2, r2, #31
 8007774:	d507      	bpl.n	8007786 <hal_timer_cnt+0x1e>
        /*
         * Just overflowed
         */
        tmr->sht_oflow += STM32_OFLOW_VALUE;
 8007776:	6842      	ldr	r2, [r0, #4]
 8007778:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 800777c:	6042      	str	r2, [r0, #4]
        tmr->sht_regs->SR &= ~TIM_SR_UIF;
 800777e:	691a      	ldr	r2, [r3, #16]
 8007780:	f022 0201 	bic.w	r2, r2, #1
 8007784:	611a      	str	r2, [r3, #16]
    }
    cnt = tmr->sht_oflow + tmr->sht_regs->CNT;
 8007786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007788:	6840      	ldr	r0, [r0, #4]
 800778a:	4418      	add	r0, r3
    __HAL_ENABLE_INTERRUPTS(sr);
 800778c:	b901      	cbnz	r1, 8007790 <hal_timer_cnt+0x28>
  __ASM volatile ("cpsie i" : : : "memory");
 800778e:	b662      	cpsie	i

    return cnt;
}
 8007790:	4770      	bx	lr
	...

08007794 <stm32_tmr0_irq>:
{
 8007794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    sr = tmr->sht_regs->SR;
 8007798:	4c1d      	ldr	r4, [pc, #116]	; (8007810 <stm32_tmr0_irq+0x7c>)
 800779a:	6823      	ldr	r3, [r4, #0]
 800779c:	691b      	ldr	r3, [r3, #16]
    if (sr & TIM_SR_UIF) {
 800779e:	f013 0501 	ands.w	r5, r3, #1
        tmr->sht_oflow += STM32_OFLOW_VALUE;
 80077a2:	bf1f      	itttt	ne
 80077a4:	6862      	ldrne	r2, [r4, #4]
        clr |= TIM_SR_UIF;
 80077a6:	2501      	movne	r5, #1
        tmr->sht_oflow += STM32_OFLOW_VALUE;
 80077a8:	f502 3280 	addne.w	r2, r2, #65536	; 0x10000
 80077ac:	6062      	strne	r2, [r4, #4]
    if (sr & TIM_SR_CC1IF) {
 80077ae:	079b      	lsls	r3, r3, #30
 80077b0:	d529      	bpl.n	8007806 <stm32_tmr0_irq+0x72>
            ht->link.tqe_prev = NULL;
 80077b2:	f04f 0800 	mov.w	r8, #0
        cnt = hal_timer_cnt(tmr);
 80077b6:	4f16      	ldr	r7, [pc, #88]	; (8007810 <stm32_tmr0_irq+0x7c>)
        clr |= TIM_SR_CC1IF;
 80077b8:	f045 0502 	orr.w	r5, r5, #2
    while ((ht = TAILQ_FIRST(&tmr->sht_timers)) != NULL) {
 80077bc:	68a6      	ldr	r6, [r4, #8]
 80077be:	b136      	cbz	r6, 80077ce <stm32_tmr0_irq+0x3a>
        cnt = hal_timer_cnt(tmr);
 80077c0:	4638      	mov	r0, r7
 80077c2:	f7ff ffd1 	bl	8007768 <hal_timer_cnt>
        if (((int32_t)(cnt - ht->expiry)) >= 0) {
 80077c6:	68f3      	ldr	r3, [r6, #12]
 80077c8:	1ac0      	subs	r0, r0, r3
 80077ca:	2800      	cmp	r0, #0
 80077cc:	da0b      	bge.n	80077e6 <stm32_tmr0_irq+0x52>
    ht = TAILQ_FIRST(&tmr->sht_timers);
 80077ce:	68a2      	ldr	r2, [r4, #8]
 80077d0:	6820      	ldr	r0, [r4, #0]
    if (ht) {
 80077d2:	b9b2      	cbnz	r2, 8007802 <stm32_tmr0_irq+0x6e>
        TIM_CCxChannelCmd(tmr->sht_regs, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80077d4:	4611      	mov	r1, r2
 80077d6:	f001 fd9b 	bl	8009310 <TIM_CCxChannelCmd>
        tmr->sht_regs->DIER &= ~TIM_DIER_CC1IE;
 80077da:	6822      	ldr	r2, [r4, #0]
 80077dc:	68d3      	ldr	r3, [r2, #12]
 80077de:	f023 0302 	bic.w	r3, r3, #2
 80077e2:	60d3      	str	r3, [r2, #12]
 80077e4:	e00f      	b.n	8007806 <stm32_tmr0_irq+0x72>
 80077e6:	e9d6 3204 	ldrd	r3, r2, [r6, #16]
            TAILQ_REMOVE(&tmr->sht_timers, ht, link);
 80077ea:	b143      	cbz	r3, 80077fe <stm32_tmr0_irq+0x6a>
 80077ec:	615a      	str	r2, [r3, #20]
 80077ee:	6972      	ldr	r2, [r6, #20]
 80077f0:	6013      	str	r3, [r2, #0]
            ht->cb_func(ht->cb_arg);
 80077f2:	e9d6 3001 	ldrd	r3, r0, [r6, #4]
            ht->link.tqe_prev = NULL;
 80077f6:	f8c6 8014 	str.w	r8, [r6, #20]
            ht->cb_func(ht->cb_arg);
 80077fa:	4798      	blx	r3
 80077fc:	e7de      	b.n	80077bc <stm32_tmr0_irq+0x28>
            TAILQ_REMOVE(&tmr->sht_timers, ht, link);
 80077fe:	60e2      	str	r2, [r4, #12]
 8007800:	e7f5      	b.n	80077ee <stm32_tmr0_irq+0x5a>
        tmr->sht_regs->CCR1 = ht->expiry;
 8007802:	68d3      	ldr	r3, [r2, #12]
 8007804:	6343      	str	r3, [r0, #52]	; 0x34
    tmr->sht_regs->SR = ~clr;
 8007806:	43ed      	mvns	r5, r5
 8007808:	6823      	ldr	r3, [r4, #0]
 800780a:	611d      	str	r5, [r3, #16]
}
 800780c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007810:	20003c24 	.word	0x20003c24

08007814 <hal_timer_init>:
    if (num >= STM32_HAL_TIMER_MAX || !(tmr = stm32_tmr_devs[num]) ||
 8007814:	2802      	cmp	r0, #2
{
 8007816:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if (num >= STM32_HAL_TIMER_MAX || !(tmr = stm32_tmr_devs[num]) ||
 8007818:	dd04      	ble.n	8007824 <hal_timer_init+0x10>
        return -1;
 800781a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800781e:	b005      	add	sp, #20
 8007820:	f85d fb04 	ldr.w	pc, [sp], #4
    if (num >= STM32_HAL_TIMER_MAX || !(tmr = stm32_tmr_devs[num]) ||
 8007824:	4b49      	ldr	r3, [pc, #292]	; (800794c <hal_timer_init+0x138>)
 8007826:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d0f5      	beq.n	800781a <hal_timer_init+0x6>
 800782e:	2900      	cmp	r1, #0
 8007830:	d0f3      	beq.n	800781a <hal_timer_init+0x6>
    regs = tmr->sht_regs = (TIM_TypeDef *)cfg;
 8007832:	6019      	str	r1, [r3, #0]
    if (!IS_TIM_CC1_INSTANCE(regs)) {
 8007834:	4b46      	ldr	r3, [pc, #280]	; (8007950 <hal_timer_init+0x13c>)
 8007836:	4299      	cmp	r1, r3
 8007838:	d04c      	beq.n	80078d4 <hal_timer_init+0xc0>
 800783a:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 800783e:	d041      	beq.n	80078c4 <hal_timer_init+0xb0>
 8007840:	f5a3 3394 	sub.w	r3, r3, #75776	; 0x12800
 8007844:	4299      	cmp	r1, r3
 8007846:	d063      	beq.n	8007910 <hal_timer_init+0xfc>
 8007848:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800784c:	4299      	cmp	r1, r3
 800784e:	d1e4      	bne.n	800781a <hal_timer_init+0x6>
    switch (num) {
 8007850:	2800      	cmp	r0, #0
 8007852:	d139      	bne.n	80078c8 <hal_timer_init+0xb4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007854:	22f0      	movs	r2, #240	; 0xf0
 8007856:	4b3f      	ldr	r3, [pc, #252]	; (8007954 <hal_timer_init+0x140>)
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 8007858:	493f      	ldr	r1, [pc, #252]	; (8007958 <hal_timer_init+0x144>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800785a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
  uint32_t vectors = (uint32_t )SCB->VTOR;
 800785e:	4a3f      	ldr	r2, [pc, #252]	; (800795c <hal_timer_init+0x148>)
    return 0;
 8007860:	2000      	movs	r0, #0
 8007862:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 8007864:	f8c2 10b8 	str.w	r1, [r2, #184]	; 0xb8
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007868:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800786c:	601a      	str	r2, [r3, #0]
        __HAL_RCC_TIM4_CLK_ENABLE();
 800786e:	4b3c      	ldr	r3, [pc, #240]	; (8007960 <hal_timer_init+0x14c>)
 8007870:	69da      	ldr	r2, [r3, #28]
 8007872:	f042 0204 	orr.w	r2, r2, #4
 8007876:	61da      	str	r2, [r3, #28]
 8007878:	69db      	ldr	r3, [r3, #28]
        __HAL_DBGMCU_FREEZE_TIM4();
 800787a:	4a3a      	ldr	r2, [pc, #232]	; (8007964 <hal_timer_init+0x150>)
        __HAL_RCC_TIM4_CLK_ENABLE();
 800787c:	f003 0304 	and.w	r3, r3, #4
 8007880:	9303      	str	r3, [sp, #12]
 8007882:	9b03      	ldr	r3, [sp, #12]
        __HAL_DBGMCU_FREEZE_TIM4();
 8007884:	6853      	ldr	r3, [r2, #4]
 8007886:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800788a:	6053      	str	r3, [r2, #4]
 800788c:	e7c7      	b.n	800781e <hal_timer_init+0xa>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800788e:	22f0      	movs	r2, #240	; 0xf0
 8007890:	4b30      	ldr	r3, [pc, #192]	; (8007954 <hal_timer_init+0x140>)
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 8007892:	4931      	ldr	r1, [pc, #196]	; (8007958 <hal_timer_init+0x144>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007894:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  uint32_t vectors = (uint32_t )SCB->VTOR;
 8007898:	4a30      	ldr	r2, [pc, #192]	; (800795c <hal_timer_init+0x148>)
 800789a:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 800789c:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80078a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078a4:	601a      	str	r2, [r3, #0]
        __HAL_RCC_TIM2_CLK_ENABLE();
 80078a6:	4b2e      	ldr	r3, [pc, #184]	; (8007960 <hal_timer_init+0x14c>)
 80078a8:	69da      	ldr	r2, [r3, #28]
 80078aa:	f042 0201 	orr.w	r2, r2, #1
 80078ae:	61da      	str	r2, [r3, #28]
 80078b0:	69db      	ldr	r3, [r3, #28]
        __HAL_DBGMCU_FREEZE_TIM2();
 80078b2:	4a2c      	ldr	r2, [pc, #176]	; (8007964 <hal_timer_init+0x150>)
        __HAL_RCC_TIM2_CLK_ENABLE();
 80078b4:	f003 0301 	and.w	r3, r3, #1
 80078b8:	9301      	str	r3, [sp, #4]
 80078ba:	9b01      	ldr	r3, [sp, #4]
        __HAL_DBGMCU_FREEZE_TIM2();
 80078bc:	6853      	ldr	r3, [r2, #4]
 80078be:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80078c2:	e023      	b.n	800790c <hal_timer_init+0xf8>
    switch (num) {
 80078c4:	2800      	cmp	r0, #0
 80078c6:	d0e2      	beq.n	800788e <hal_timer_init+0x7a>
        assert(0);
 80078c8:	2300      	movs	r3, #0
 80078ca:	461a      	mov	r2, r3
 80078cc:	4619      	mov	r1, r3
 80078ce:	4618      	mov	r0, r3
 80078d0:	f7fc f8f0 	bl	8003ab4 <__assert_func>
    switch (num) {
 80078d4:	2800      	cmp	r0, #0
 80078d6:	d1f7      	bne.n	80078c8 <hal_timer_init+0xb4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80078d8:	22f0      	movs	r2, #240	; 0xf0
 80078da:	4b1e      	ldr	r3, [pc, #120]	; (8007954 <hal_timer_init+0x140>)
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 80078dc:	491e      	ldr	r1, [pc, #120]	; (8007958 <hal_timer_init+0x144>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80078de:	f883 2319 	strb.w	r2, [r3, #793]	; 0x319
  uint32_t vectors = (uint32_t )SCB->VTOR;
 80078e2:	4a1e      	ldr	r2, [pc, #120]	; (800795c <hal_timer_init+0x148>)
 80078e4:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 80078e6:	f8c2 10a4 	str.w	r1, [r2, #164]	; 0xa4
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80078ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80078ee:	601a      	str	r2, [r3, #0]
        __HAL_RCC_TIM1_CLK_ENABLE();
 80078f0:	4b1b      	ldr	r3, [pc, #108]	; (8007960 <hal_timer_init+0x14c>)
 80078f2:	699a      	ldr	r2, [r3, #24]
 80078f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80078f8:	619a      	str	r2, [r3, #24]
 80078fa:	699b      	ldr	r3, [r3, #24]
        __HAL_DBGMCU_FREEZE_TIM1();
 80078fc:	4a19      	ldr	r2, [pc, #100]	; (8007964 <hal_timer_init+0x150>)
        __HAL_RCC_TIM1_CLK_ENABLE();
 80078fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007902:	9300      	str	r3, [sp, #0]
 8007904:	9b00      	ldr	r3, [sp, #0]
        __HAL_DBGMCU_FREEZE_TIM1();
 8007906:	6853      	ldr	r3, [r2, #4]
 8007908:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
        __HAL_DBGMCU_FREEZE_TIM3();
 800790c:	6053      	str	r3, [r2, #4]
 800790e:	e786      	b.n	800781e <hal_timer_init+0xa>
    switch (num) {
 8007910:	2800      	cmp	r0, #0
 8007912:	d1d9      	bne.n	80078c8 <hal_timer_init+0xb4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007914:	22f0      	movs	r2, #240	; 0xf0
 8007916:	4b0f      	ldr	r3, [pc, #60]	; (8007954 <hal_timer_init+0x140>)
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 8007918:	490f      	ldr	r1, [pc, #60]	; (8007958 <hal_timer_init+0x144>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800791a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  uint32_t vectors = (uint32_t )SCB->VTOR;
 800791e:	4a0f      	ldr	r2, [pc, #60]	; (800795c <hal_timer_init+0x148>)
 8007920:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 8007922:	f8c2 10b4 	str.w	r1, [r2, #180]	; 0xb4
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007926:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800792a:	601a      	str	r2, [r3, #0]
        __HAL_RCC_TIM3_CLK_ENABLE();
 800792c:	4b0c      	ldr	r3, [pc, #48]	; (8007960 <hal_timer_init+0x14c>)
 800792e:	69da      	ldr	r2, [r3, #28]
 8007930:	f042 0202 	orr.w	r2, r2, #2
 8007934:	61da      	str	r2, [r3, #28]
 8007936:	69db      	ldr	r3, [r3, #28]
        __HAL_DBGMCU_FREEZE_TIM3();
 8007938:	4a0a      	ldr	r2, [pc, #40]	; (8007964 <hal_timer_init+0x150>)
        __HAL_RCC_TIM3_CLK_ENABLE();
 800793a:	f003 0302 	and.w	r3, r3, #2
 800793e:	9302      	str	r3, [sp, #8]
 8007940:	9b02      	ldr	r3, [sp, #8]
        __HAL_DBGMCU_FREEZE_TIM3();
 8007942:	6853      	ldr	r3, [r2, #4]
 8007944:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007948:	e7e0      	b.n	800790c <hal_timer_init+0xf8>
 800794a:	bf00      	nop
 800794c:	0800e090 	.word	0x0800e090
 8007950:	40012c00 	.word	0x40012c00
 8007954:	e000e100 	.word	0xe000e100
 8007958:	08007795 	.word	0x08007795
 800795c:	e000ed00 	.word	0xe000ed00
 8007960:	40021000 	.word	0x40021000
 8007964:	e0042000 	.word	0xe0042000

08007968 <hal_timer_config>:
{
 8007968:	b530      	push	{r4, r5, lr}
    if (num >= STM32_HAL_TIMER_MAX || !(tmr = stm32_tmr_devs[num])) {
 800796a:	2802      	cmp	r0, #2
{
 800796c:	b087      	sub	sp, #28
 800796e:	460d      	mov	r5, r1
    if (num >= STM32_HAL_TIMER_MAX || !(tmr = stm32_tmr_devs[num])) {
 8007970:	dd03      	ble.n	800797a <hal_timer_config+0x12>
        return -1;
 8007972:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8007976:	b007      	add	sp, #28
 8007978:	bd30      	pop	{r4, r5, pc}
    if (num >= STM32_HAL_TIMER_MAX || !(tmr = stm32_tmr_devs[num])) {
 800797a:	4b1a      	ldr	r3, [pc, #104]	; (80079e4 <hal_timer_config+0x7c>)
 800797c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 8007980:	2c00      	cmp	r4, #0
 8007982:	d0f6      	beq.n	8007972 <hal_timer_config+0xa>
    if (!IS_TIM_CC1_INSTANCE(tmr->sht_regs)) {
 8007984:	6820      	ldr	r0, [r4, #0]
 8007986:	4b18      	ldr	r3, [pc, #96]	; (80079e8 <hal_timer_config+0x80>)
 8007988:	4298      	cmp	r0, r3
 800798a:	d00a      	beq.n	80079a2 <hal_timer_config+0x3a>
 800798c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8007990:	d007      	beq.n	80079a2 <hal_timer_config+0x3a>
 8007992:	f5a3 3394 	sub.w	r3, r3, #75776	; 0x12800
 8007996:	4298      	cmp	r0, r3
 8007998:	d003      	beq.n	80079a2 <hal_timer_config+0x3a>
 800799a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800799e:	4298      	cmp	r0, r3
 80079a0:	d1e7      	bne.n	8007972 <hal_timer_config+0xa>
    prescaler = stm32_hal_timer_get_freq(tmr->sht_regs) / freq_hz;
 80079a2:	f001 fcdd 	bl	8009360 <stm32_hal_timer_get_freq>
 80079a6:	fbb0 f5f5 	udiv	r5, r0, r5
    if (prescaler > 0xffff) {
 80079aa:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 80079ae:	d2e0      	bcs.n	8007972 <hal_timer_config+0xa>
    memset(&init, 0, sizeof(init));
 80079b0:	2214      	movs	r2, #20
 80079b2:	2100      	movs	r1, #0
 80079b4:	a801      	add	r0, sp, #4
 80079b6:	f7fd fce6 	bl	8005386 <memset>
    init.Period = 0xffff;
 80079ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80079be:	9302      	str	r3, [sp, #8]
    tmr->sht_regs->CR1 = TIM_CR1_URS;
 80079c0:	2304      	movs	r3, #4
 80079c2:	6820      	ldr	r0, [r4, #0]
    init.Prescaler = prescaler;
 80079c4:	9500      	str	r5, [sp, #0]
    tmr->sht_regs->CR1 = TIM_CR1_URS;
 80079c6:	6003      	str	r3, [r0, #0]
    tmr->sht_regs->DIER = TIM_DIER_UIE;
 80079c8:	2301      	movs	r3, #1
    TIM_Base_SetConfig(tmr->sht_regs, &init);
 80079ca:	4669      	mov	r1, sp
    tmr->sht_regs->DIER = TIM_DIER_UIE;
 80079cc:	60c3      	str	r3, [r0, #12]
    TIM_Base_SetConfig(tmr->sht_regs, &init);
 80079ce:	f001 fc67 	bl	80092a0 <TIM_Base_SetConfig>
    tmr->sht_regs->SR = 0;
 80079d2:	2000      	movs	r0, #0
 80079d4:	6823      	ldr	r3, [r4, #0]
 80079d6:	6118      	str	r0, [r3, #16]
    tmr->sht_regs->CR1 |= TIM_CR1_CEN;
 80079d8:	681a      	ldr	r2, [r3, #0]
 80079da:	f042 0201 	orr.w	r2, r2, #1
 80079de:	601a      	str	r2, [r3, #0]
    return 0;
 80079e0:	e7c9      	b.n	8007976 <hal_timer_config+0xe>
 80079e2:	bf00      	nop
 80079e4:	0800e090 	.word	0x0800e090
 80079e8:	40012c00 	.word	0x40012c00

080079ec <hal_timer_read>:
uint32_t
hal_timer_read(int num)
{
    struct stm32_hal_tmr *tmr;

    if (num >= STM32_HAL_TIMER_MAX || !(tmr = stm32_tmr_devs[num])) {
 80079ec:	2802      	cmp	r0, #2
 80079ee:	dc05      	bgt.n	80079fc <hal_timer_read+0x10>
 80079f0:	4b04      	ldr	r3, [pc, #16]	; (8007a04 <hal_timer_read+0x18>)
 80079f2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80079f6:	b108      	cbz	r0, 80079fc <hal_timer_read+0x10>
        return -1;
    }
    return hal_timer_cnt(tmr);
 80079f8:	f7ff beb6 	b.w	8007768 <hal_timer_cnt>
}
 80079fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a00:	4770      	bx	lr
 8007a02:	bf00      	nop
 8007a04:	0800e090 	.word	0x0800e090

08007a08 <uart_irq_handler>:
    uint32_t cr1;
    int data;
    int rc;

    ui = &uart_irqs[num];
    ++ui->ui_cnt;
 8007a08:	4a21      	ldr	r2, [pc, #132]	; (8007a90 <uart_irq_handler+0x88>)
{
 8007a0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ++ui->ui_cnt;
 8007a0c:	eb02 01c0 	add.w	r1, r2, r0, lsl #3
 8007a10:	684b      	ldr	r3, [r1, #4]
    u = ui->ui_uart;
 8007a12:	f852 4030 	ldr.w	r4, [r2, r0, lsl #3]
    ++ui->ui_cnt;
 8007a16:	3301      	adds	r3, #1
    regs = u->u_regs;
 8007a18:	6825      	ldr	r5, [r4, #0]
    ++ui->ui_cnt;
 8007a1a:	604b      	str	r3, [r1, #4]

    isr = STATUS(regs);
 8007a1c:	682f      	ldr	r7, [r5, #0]
    if (isr & RXNE) {
 8007a1e:	06b8      	lsls	r0, r7, #26
 8007a20:	d510      	bpl.n	8007a44 <uart_irq_handler+0x3c>
        data = RXDR(regs);
 8007a22:	686e      	ldr	r6, [r5, #4]
        rc = u->u_rx_func(u->u_func_arg, data);
 8007a24:	68a3      	ldr	r3, [r4, #8]
 8007a26:	b2f6      	uxtb	r6, r6
 8007a28:	4631      	mov	r1, r6
 8007a2a:	6960      	ldr	r0, [r4, #20]
 8007a2c:	4798      	blx	r3
        if (rc < 0) {
 8007a2e:	2800      	cmp	r0, #0
 8007a30:	da08      	bge.n	8007a44 <uart_irq_handler+0x3c>
            regs->CR1 &= ~USART_CR1_RXNEIE;
 8007a32:	68eb      	ldr	r3, [r5, #12]
 8007a34:	f023 0320 	bic.w	r3, r3, #32
 8007a38:	60eb      	str	r3, [r5, #12]
            u->u_rx_data = data;
            u->u_rx_stall = 1;
 8007a3a:	7923      	ldrb	r3, [r4, #4]
            u->u_rx_data = data;
 8007a3c:	7166      	strb	r6, [r4, #5]
            u->u_rx_stall = 1;
 8007a3e:	f043 0302 	orr.w	r3, r3, #2
 8007a42:	7123      	strb	r3, [r4, #4]
        }
    }
    if (isr & (TXE | TC)) {
 8007a44:	f017 0fc0 	tst.w	r7, #192	; 0xc0
 8007a48:	d021      	beq.n	8007a8e <uart_irq_handler+0x86>
        cr1 = regs->CR1;
        if (isr & TXE) {
 8007a4a:	0639      	lsls	r1, r7, #24
        cr1 = regs->CR1;
 8007a4c:	68ee      	ldr	r6, [r5, #12]
        if (isr & TXE) {
 8007a4e:	d50e      	bpl.n	8007a6e <uart_irq_handler+0x66>
            data = u->u_tx_func(u->u_func_arg);
 8007a50:	68e3      	ldr	r3, [r4, #12]
 8007a52:	6960      	ldr	r0, [r4, #20]
 8007a54:	4798      	blx	r3
            if (data < 0) {
 8007a56:	2800      	cmp	r0, #0
                cr1 &= ~USART_CR1_TXEIE;
                cr1 |= USART_CR1_TCIE;
                u->u_tx_end = 1;
 8007a58:	bfbf      	itttt	lt
 8007a5a:	7923      	ldrblt	r3, [r4, #4]
                cr1 &= ~USART_CR1_TXEIE;
 8007a5c:	f026 0680 	biclt.w	r6, r6, #128	; 0x80
                u->u_tx_end = 1;
 8007a60:	f043 0304 	orrlt.w	r3, r3, #4
                cr1 |= USART_CR1_TCIE;
 8007a64:	f046 0640 	orrlt.w	r6, r6, #64	; 0x40
                u->u_tx_end = 1;
 8007a68:	bfb4      	ite	lt
 8007a6a:	7123      	strblt	r3, [r4, #4]
            } else {
                TXDR(regs) = data;
 8007a6c:	6068      	strge	r0, [r5, #4]
            }
        }
        if (u->u_tx_end == 1 && isr & TC) {
 8007a6e:	7923      	ldrb	r3, [r4, #4]
 8007a70:	075a      	lsls	r2, r3, #29
 8007a72:	d50b      	bpl.n	8007a8c <uart_irq_handler+0x84>
 8007a74:	067b      	lsls	r3, r7, #25
 8007a76:	d509      	bpl.n	8007a8c <uart_irq_handler+0x84>
            if (u->u_tx_done) {
 8007a78:	6923      	ldr	r3, [r4, #16]
 8007a7a:	b10b      	cbz	r3, 8007a80 <uart_irq_handler+0x78>
                u->u_tx_done(u->u_func_arg);
 8007a7c:	6960      	ldr	r0, [r4, #20]
 8007a7e:	4798      	blx	r3
            }
            u->u_tx_end = 0;
 8007a80:	7923      	ldrb	r3, [r4, #4]
            cr1 &= ~USART_CR1_TCIE;
 8007a82:	f026 0640 	bic.w	r6, r6, #64	; 0x40
            u->u_tx_end = 0;
 8007a86:	f36f 0382 	bfc	r3, #2, #1
 8007a8a:	7123      	strb	r3, [r4, #4]
        }
        regs->CR1 = cr1;
 8007a8c:	60ee      	str	r6, [r5, #12]
    /* clear overrun */
    if (isr & USART_ISR_ORE) {
        regs->ICR |= USART_ICR_ORECF;
    }
#endif
}
 8007a8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a90:	20002b3c 	.word	0x20002b3c

08007a94 <uart_irq1>:
}

static void
uart_irq1(void)
{
    uart_irq_handler(0);
 8007a94:	2000      	movs	r0, #0
 8007a96:	f7ff bfb7 	b.w	8007a08 <uart_irq_handler>

08007a9a <uart_irq2>:
}

static void
uart_irq2(void)
{
    uart_irq_handler(1);
 8007a9a:	2001      	movs	r0, #1
 8007a9c:	f7ff bfb4 	b.w	8007a08 <uart_irq_handler>

08007aa0 <uart_irq3>:

#ifdef USART3_BASE
static void
uart_irq3(void)
{
    uart_irq_handler(2);
 8007aa0:	2002      	movs	r0, #2
 8007aa2:	f7ff bfb1 	b.w	8007a08 <uart_irq_handler>
	...

08007aa8 <hal_uart_init_cbs>:
    if (port >= UART_CNT || u->u_open) {
 8007aa8:	2800      	cmp	r0, #0
{
 8007aaa:	b530      	push	{r4, r5, lr}
    if (port >= UART_CNT || u->u_open) {
 8007aac:	dc0d      	bgt.n	8007aca <hal_uart_init_cbs+0x22>
 8007aae:	251c      	movs	r5, #28
 8007ab0:	4c07      	ldr	r4, [pc, #28]	; (8007ad0 <hal_uart_init_cbs+0x28>)
 8007ab2:	fb05 4400 	mla	r4, r5, r0, r4
 8007ab6:	7920      	ldrb	r0, [r4, #4]
 8007ab8:	f010 0001 	ands.w	r0, r0, #1
 8007abc:	d105      	bne.n	8007aca <hal_uart_init_cbs+0x22>
    u->u_tx_func = tx_func;
 8007abe:	e9c4 3102 	strd	r3, r1, [r4, #8]
    u->u_func_arg = arg;
 8007ac2:	9b03      	ldr	r3, [sp, #12]
    u->u_tx_done = tx_done;
 8007ac4:	6122      	str	r2, [r4, #16]
    u->u_func_arg = arg;
 8007ac6:	6163      	str	r3, [r4, #20]
}
 8007ac8:	bd30      	pop	{r4, r5, pc}
        return -1;
 8007aca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ace:	e7fb      	b.n	8007ac8 <hal_uart_init_cbs+0x20>
 8007ad0:	20002b54 	.word	0x20002b54

08007ad4 <hal_uart_start_rx>:
{
 8007ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (u->u_rx_stall) {
 8007ad6:	251c      	movs	r5, #28
 8007ad8:	4345      	muls	r5, r0
 8007ada:	4e0c      	ldr	r6, [pc, #48]	; (8007b0c <hal_uart_start_rx+0x38>)
 8007adc:	1974      	adds	r4, r6, r5
 8007ade:	7923      	ldrb	r3, [r4, #4]
 8007ae0:	079b      	lsls	r3, r3, #30
 8007ae2:	d512      	bpl.n	8007b0a <hal_uart_start_rx+0x36>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ae4:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8007ae8:	b672      	cpsid	i
        rc = u->u_rx_func(u->u_func_arg, u->u_rx_data);
 8007aea:	68a3      	ldr	r3, [r4, #8]
 8007aec:	7961      	ldrb	r1, [r4, #5]
 8007aee:	6960      	ldr	r0, [r4, #20]
 8007af0:	4798      	blx	r3
        if (rc == 0) {
 8007af2:	b940      	cbnz	r0, 8007b06 <hal_uart_start_rx+0x32>
            u->u_rx_stall = 0;
 8007af4:	7923      	ldrb	r3, [r4, #4]
            u->u_regs->CR1 |= USART_CR1_RXNEIE;
 8007af6:	5972      	ldr	r2, [r6, r5]
            u->u_rx_stall = 0;
 8007af8:	f360 0341 	bfi	r3, r0, #1, #1
 8007afc:	7123      	strb	r3, [r4, #4]
            u->u_regs->CR1 |= USART_CR1_RXNEIE;
 8007afe:	68d3      	ldr	r3, [r2, #12]
 8007b00:	f043 0320 	orr.w	r3, r3, #32
 8007b04:	60d3      	str	r3, [r2, #12]
        __HAL_ENABLE_INTERRUPTS(sr);
 8007b06:	b907      	cbnz	r7, 8007b0a <hal_uart_start_rx+0x36>
  __ASM volatile ("cpsie i" : : : "memory");
 8007b08:	b662      	cpsie	i
}
 8007b0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b0c:	20002b54 	.word	0x20002b54

08007b10 <hal_uart_start_tx>:
{
 8007b10:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b12:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8007b16:	b672      	cpsid	i
    u->u_regs->CR1 &= ~USART_CR1_TCIE;
 8007b18:	231c      	movs	r3, #28
 8007b1a:	4358      	muls	r0, r3
 8007b1c:	4a08      	ldr	r2, [pc, #32]	; (8007b40 <hal_uart_start_tx+0x30>)
 8007b1e:	5813      	ldr	r3, [r2, r0]
 8007b20:	1811      	adds	r1, r2, r0
 8007b22:	68da      	ldr	r2, [r3, #12]
 8007b24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b28:	60da      	str	r2, [r3, #12]
    u->u_regs->CR1 |= USART_CR1_TXEIE;
 8007b2a:	68da      	ldr	r2, [r3, #12]
 8007b2c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007b30:	60da      	str	r2, [r3, #12]
    u->u_tx_end = 0;
 8007b32:	790b      	ldrb	r3, [r1, #4]
 8007b34:	f36f 0382 	bfc	r3, #2, #1
 8007b38:	710b      	strb	r3, [r1, #4]
    __HAL_ENABLE_INTERRUPTS(sr);
 8007b3a:	b904      	cbnz	r4, 8007b3e <hal_uart_start_tx+0x2e>
  __ASM volatile ("cpsie i" : : : "memory");
 8007b3c:	b662      	cpsie	i
}
 8007b3e:	bd10      	pop	{r4, pc}
 8007b40:	20002b54 	.word	0x20002b54

08007b44 <hal_uart_blocking_tx>:
    if (port >= UART_CNT || !u->u_open) {
 8007b44:	2800      	cmp	r0, #0
 8007b46:	dc0e      	bgt.n	8007b66 <hal_uart_blocking_tx+0x22>
 8007b48:	231c      	movs	r3, #28
 8007b4a:	4358      	muls	r0, r3
 8007b4c:	4a06      	ldr	r2, [pc, #24]	; (8007b68 <hal_uart_blocking_tx+0x24>)
 8007b4e:	1813      	adds	r3, r2, r0
 8007b50:	791b      	ldrb	r3, [r3, #4]
 8007b52:	07db      	lsls	r3, r3, #31
 8007b54:	d507      	bpl.n	8007b66 <hal_uart_blocking_tx+0x22>
    regs = u->u_regs;
 8007b56:	5813      	ldr	r3, [r2, r0]
    while (!(STATUS(regs) & TXE));
 8007b58:	681a      	ldr	r2, [r3, #0]
 8007b5a:	0610      	lsls	r0, r2, #24
 8007b5c:	d5fc      	bpl.n	8007b58 <hal_uart_blocking_tx+0x14>
    TXDR(regs) = data;
 8007b5e:	6059      	str	r1, [r3, #4]
    while (!(STATUS(regs) & TC));
 8007b60:	681a      	ldr	r2, [r3, #0]
 8007b62:	0652      	lsls	r2, r2, #25
 8007b64:	d5fc      	bpl.n	8007b60 <hal_uart_blocking_tx+0x1c>
}
 8007b66:	4770      	bx	lr
 8007b68:	20002b54 	.word	0x20002b54

08007b6c <hal_uart_config>:
}

int
hal_uart_config(int port, int32_t baudrate, uint8_t databits, uint8_t stopbits,
  enum hal_uart_parity parity, enum hal_uart_flow_ctl flow_ctl)
{
 8007b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t cr1, cr2, cr3;
#if MYNEWT_VAL(MCU_STM32F1)
    GPIO_InitTypeDef gpio;
#endif

    if (port >= UART_CNT) {
 8007b70:	1e06      	subs	r6, r0, #0
{
 8007b72:	b087      	sub	sp, #28
 8007b74:	460c      	mov	r4, r1
 8007b76:	4693      	mov	fp, r2
 8007b78:	469a      	mov	sl, r3
 8007b7a:	f89d 9040 	ldrb.w	r9, [sp, #64]	; 0x40
 8007b7e:	f89d 8044 	ldrb.w	r8, [sp, #68]	; 0x44
    if (port >= UART_CNT) {
 8007b82:	f300 8127 	bgt.w	8007dd4 <hal_uart_config+0x268>
        return -1;
    }

    u = &uarts[port];
    if (u->u_open) {
 8007b86:	231c      	movs	r3, #28
 8007b88:	4d94      	ldr	r5, [pc, #592]	; (8007ddc <hal_uart_config+0x270>)
 8007b8a:	fb03 5306 	mla	r3, r3, r6, r5
 8007b8e:	791a      	ldrb	r2, [r3, #4]
 8007b90:	07d0      	lsls	r0, r2, #31
 8007b92:	f100 811f 	bmi.w	8007dd4 <hal_uart_config+0x268>
        return -1;
    }
    cfg = u->u_cfg;
 8007b96:	699f      	ldr	r7, [r3, #24]
    assert(cfg);
 8007b98:	b92f      	cbnz	r7, 8007ba6 <hal_uart_config+0x3a>
        break;
    case 9:
        cr1 |= UART_WORDLENGTH_9B;
        break;
    default:
        assert(0);
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	461a      	mov	r2, r3
 8007b9e:	4619      	mov	r1, r3
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	f7fb ff87 	bl	8003ab4 <__assert_func>
    gpio.Mode = GPIO_MODE_AF_PP;
 8007ba6:	2302      	movs	r3, #2
    gpio.Pull = GPIO_PULLUP;
 8007ba8:	2103      	movs	r1, #3
    gpio.Mode = GPIO_MODE_AF_PP;
 8007baa:	9303      	str	r3, [sp, #12]
    gpio.Pull = GPIO_PULLUP;
 8007bac:	2301      	movs	r3, #1
 8007bae:	e9cd 3104 	strd	r3, r1, [sp, #16]
    hal_gpio_init_stm(cfg->suc_pin_tx, &gpio);
 8007bb2:	a902      	add	r1, sp, #8
 8007bb4:	f997 000c 	ldrsb.w	r0, [r7, #12]
 8007bb8:	f000 fb02 	bl	80081c0 <hal_gpio_init_stm>
    if (flow_ctl == HAL_UART_FLOW_CTL_RTS_CTS) {
 8007bbc:	f1b8 0f01 	cmp.w	r8, #1
 8007bc0:	d104      	bne.n	8007bcc <hal_uart_config+0x60>
        hal_gpio_init_stm(cfg->suc_pin_rts, &gpio);
 8007bc2:	a902      	add	r1, sp, #8
 8007bc4:	f997 000e 	ldrsb.w	r0, [r7, #14]
 8007bc8:	f000 fafa 	bl	80081c0 <hal_gpio_init_stm>
    gpio.Mode = GPIO_MODE_AF_INPUT;
 8007bcc:	2300      	movs	r3, #0
    hal_gpio_init_stm(cfg->suc_pin_rx, &gpio);
 8007bce:	a902      	add	r1, sp, #8
 8007bd0:	f997 000d 	ldrsb.w	r0, [r7, #13]
    gpio.Mode = GPIO_MODE_AF_INPUT;
 8007bd4:	9303      	str	r3, [sp, #12]
    hal_gpio_init_stm(cfg->suc_pin_rx, &gpio);
 8007bd6:	f000 faf3 	bl	80081c0 <hal_gpio_init_stm>
    if (flow_ctl == HAL_UART_FLOW_CTL_RTS_CTS) {
 8007bda:	f1b8 0f01 	cmp.w	r8, #1
 8007bde:	d104      	bne.n	8007bea <hal_uart_config+0x7e>
        hal_gpio_init_stm(cfg->suc_pin_cts, &gpio);
 8007be0:	a902      	add	r1, sp, #8
 8007be2:	f997 000f 	ldrsb.w	r0, [r7, #15]
 8007be6:	f000 faeb 	bl	80081c0 <hal_gpio_init_stm>
    if (cfg->suc_pin_remap_fn) {
 8007bea:	693b      	ldr	r3, [r7, #16]
 8007bec:	b103      	cbz	r3, 8007bf0 <hal_uart_config+0x84>
        cfg->suc_pin_remap_fn();
 8007bee:	4798      	blx	r3
    cr1 = cfg->suc_uart->CR1;
 8007bf0:	683a      	ldr	r2, [r7, #0]
    switch (databits) {
 8007bf2:	f1bb 0f08 	cmp.w	fp, #8
    cr1 = cfg->suc_uart->CR1;
 8007bf6:	68d3      	ldr	r3, [r2, #12]
    cr2 = cfg->suc_uart->CR2;
 8007bf8:	6910      	ldr	r0, [r2, #16]
    cr1 &= ~(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_RE);
 8007bfa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
    cr3 = cfg->suc_uart->CR3;
 8007bfe:	6951      	ldr	r1, [r2, #20]
    cr1 &= ~(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_RE);
 8007c00:	f023 0304 	bic.w	r3, r3, #4
    cr2 &= ~(USART_CR2_STOP);
 8007c04:	f420 5040 	bic.w	r0, r0, #12288	; 0x3000
    switch (databits) {
 8007c08:	d004      	beq.n	8007c14 <hal_uart_config+0xa8>
 8007c0a:	f1bb 0f09 	cmp.w	fp, #9
 8007c0e:	d1c4      	bne.n	8007b9a <hal_uart_config+0x2e>
        cr1 |= UART_WORDLENGTH_9B;
 8007c10:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
        return -1;
    }

    switch (stopbits) {
 8007c14:	f1ba 0f01 	cmp.w	sl, #1
 8007c18:	d005      	beq.n	8007c26 <hal_uart_config+0xba>
 8007c1a:	f1ba 0f02 	cmp.w	sl, #2
 8007c1e:	f040 80d9 	bne.w	8007dd4 <hal_uart_config+0x268>
    case 1:
        cr2 |= UART_STOPBITS_1;
        break;
    case 2:
        cr2 |= UART_STOPBITS_2;
 8007c22:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
        break;
    default:
        return -1;
    }

    switch (parity) {
 8007c26:	f1b9 0f01 	cmp.w	r9, #1
 8007c2a:	f000 80a2 	beq.w	8007d72 <hal_uart_config+0x206>
 8007c2e:	f1b9 0f02 	cmp.w	r9, #2
 8007c32:	f000 80a1 	beq.w	8007d78 <hal_uart_config+0x20c>
    case HAL_UART_PARITY_EVEN:
        cr1 |= UART_PARITY_EVEN;
        break;
    }

    switch (flow_ctl) {
 8007c36:	f1b8 0f01 	cmp.w	r8, #1
    cr3 &= ~(USART_CR3_RTSE | USART_CR3_CTSE);
 8007c3a:	f421 7c40 	bic.w	ip, r1, #768	; 0x300
    switch (flow_ctl) {
 8007c3e:	d109      	bne.n	8007c54 <hal_uart_config+0xe8>
    case HAL_UART_FLOW_CTL_NONE:
        cr3 |= UART_HWCONTROL_NONE;
        break;
    case HAL_UART_FLOW_CTL_RTS_CTS:
        cr3 |= UART_HWCONTROL_RTS_CTS;
        if (cfg->suc_pin_rts < 0 || cfg->suc_pin_cts < 0) {
 8007c40:	f997 100e 	ldrsb.w	r1, [r7, #14]
        cr3 |= UART_HWCONTROL_RTS_CTS;
 8007c44:	f44c 7c40 	orr.w	ip, ip, #768	; 0x300
        if (cfg->suc_pin_rts < 0 || cfg->suc_pin_cts < 0) {
 8007c48:	2900      	cmp	r1, #0
 8007c4a:	dba6      	blt.n	8007b9a <hal_uart_config+0x2e>
 8007c4c:	f997 100f 	ldrsb.w	r1, [r7, #15]
 8007c50:	2900      	cmp	r1, #0
 8007c52:	dba2      	blt.n	8007b9a <hal_uart_config+0x2e>
    cr1 |= (UART_MODE_RX | UART_MODE_TX | UART_OVERSAMPLING_16);
#else
    cr1 |= (UART_MODE_TX_RX | UART_OVERSAMPLING_16);
#endif

    *cfg->suc_rcc_reg |= cfg->suc_rcc_dev;
 8007c54:	f8d7 8004 	ldr.w	r8, [r7, #4]
    cr1 |= (UART_MODE_TX_RX | UART_OVERSAMPLING_16);
 8007c58:	f043 0e0c 	orr.w	lr, r3, #12
    *cfg->suc_rcc_reg |= cfg->suc_rcc_dev;
 8007c5c:	f8d8 1000 	ldr.w	r1, [r8]
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	00a4      	lsls	r4, r4, #2
 8007c64:	4319      	orrs	r1, r3
 8007c66:	f8c8 1000 	str.w	r1, [r8]
        hal_gpio_init_af(cfg->suc_pin_rts, cfg->suc_pin_af, 0, 0);
        hal_gpio_init_af(cfg->suc_pin_cts, cfg->suc_pin_af, 0, 0);
    }
#endif

    u->u_regs = cfg->suc_uart;
 8007c6a:	211c      	movs	r1, #28
 8007c6c:	4371      	muls	r1, r6
    u->u_regs->CR2 = cr2;
    u->u_regs->CR1 = cr1;
#ifdef USART6_BASE
    if (cfg->suc_uart == USART1 || cfg->suc_uart == USART6) {
#else
    if (cfg->suc_uart == USART1) {
 8007c6e:	4b5c      	ldr	r3, [pc, #368]	; (8007de0 <hal_uart_config+0x274>)
    u->u_regs = cfg->suc_uart;
 8007c70:	506a      	str	r2, [r5, r1]
    if (cfg->suc_uart == USART1) {
 8007c72:	429a      	cmp	r2, r3
    u->u_regs->CR3 = cr3;
 8007c74:	f8c2 c014 	str.w	ip, [r2, #20]
 8007c78:	9101      	str	r1, [sp, #4]
    u->u_regs->CR2 = cr2;
 8007c7a:	6110      	str	r0, [r2, #16]
    u->u_regs->CR1 = cr1;
 8007c7c:	f8c2 e00c 	str.w	lr, [r2, #12]
    if (cfg->suc_uart == USART1) {
 8007c80:	d17d      	bne.n	8007d7e <hal_uart_config+0x212>
#endif
#if MYNEWT_VAL(MCU_STM32F0)
        u->u_regs->BRR = BAUD(HAL_RCC_GetPCLK1Freq(), baudrate);
#else
        u->u_regs->BRR = BAUD(HAL_RCC_GetPCLK2Freq(), baudrate);
 8007c82:	f001 f8d9 	bl	8008e38 <HAL_RCC_GetPCLK2Freq>
 8007c86:	f04f 0819 	mov.w	r8, #25
 8007c8a:	4681      	mov	r9, r0
 8007c8c:	f001 f8d4 	bl	8008e38 <HAL_RCC_GetPCLK2Freq>
 8007c90:	fb08 f000 	mul.w	r0, r8, r0
 8007c94:	fbb0 fbf4 	udiv	fp, r0, r4
 8007c98:	f001 f8ce 	bl	8008e38 <HAL_RCC_GetPCLK2Freq>
 8007c9c:	9000      	str	r0, [sp, #0]
 8007c9e:	f001 f8cb 	bl	8008e38 <HAL_RCC_GetPCLK2Freq>
 8007ca2:	fb08 f000 	mul.w	r0, r8, r0
 8007ca6:	fbb0 faf4 	udiv	sl, r0, r4
 8007caa:	f001 f8c5 	bl	8008e38 <HAL_RCC_GetPCLK2Freq>
 8007cae:	9b00      	ldr	r3, [sp, #0]
 8007cb0:	9901      	ldr	r1, [sp, #4]
 8007cb2:	fb08 f303 	mul.w	r3, r8, r3
 8007cb6:	f855 c001 	ldr.w	ip, [r5, r1]
 8007cba:	fbb3 f3f4 	udiv	r3, r3, r4
 8007cbe:	2164      	movs	r1, #100	; 0x64
 8007cc0:	fbb3 f3f1 	udiv	r3, r3, r1
 8007cc4:	fb01 b313 	mls	r3, r1, r3, fp
#endif

    } else {
        u->u_regs->BRR = BAUD(HAL_RCC_GetPCLK1Freq(), baudrate);
 8007cc8:	fb08 f200 	mul.w	r2, r8, r0
 8007ccc:	fbb2 f2f4 	udiv	r2, r2, r4
 8007cd0:	fbb2 f2f1 	udiv	r2, r2, r1
 8007cd4:	fb08 f809 	mul.w	r8, r8, r9
 8007cd8:	fbb8 f4f4 	udiv	r4, r8, r4
 8007cdc:	fb01 a212 	mls	r2, r1, r2, sl
 8007ce0:	011b      	lsls	r3, r3, #4
 8007ce2:	0112      	lsls	r2, r2, #4
 8007ce4:	3332      	adds	r3, #50	; 0x32
 8007ce6:	3232      	adds	r2, #50	; 0x32
 8007ce8:	fbb3 f3f1 	udiv	r3, r3, r1
 8007cec:	fbb2 f2f1 	udiv	r2, r2, r1
 8007cf0:	fbb4 f1f1 	udiv	r1, r4, r1
 8007cf4:	f002 020f 	and.w	r2, r2, #15
 8007cf8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007cfc:	4313      	orrs	r3, r2
 8007cfe:	eb03 1101 	add.w	r1, r3, r1, lsl #4
    }

    (void)RXDR(u->u_regs);
 8007d02:	231c      	movs	r3, #28
 8007d04:	4373      	muls	r3, r6
 8007d06:	58ea      	ldr	r2, [r5, r3]
        u->u_regs->BRR = BAUD(HAL_RCC_GetPCLK1Freq(), baudrate);
 8007d08:	f8cc 1008 	str.w	r1, [ip, #8]
    (void)RXDR(u->u_regs);
 8007d0c:	6853      	ldr	r3, [r2, #4]
    (void)STATUS(u->u_regs);
 8007d0e:	6813      	ldr	r3, [r2, #0]
    hal_uart_set_nvic(cfg->suc_irqn, u);
 8007d10:	f997 3014 	ldrsb.w	r3, [r7, #20]
    switch (irqn) {
 8007d14:	2b26      	cmp	r3, #38	; 0x26
 8007d16:	d057      	beq.n	8007dc8 <hal_uart_config+0x25c>
 8007d18:	2b27      	cmp	r3, #39	; 0x27
 8007d1a:	d058      	beq.n	8007dce <hal_uart_config+0x262>
 8007d1c:	2b25      	cmp	r3, #37	; 0x25
 8007d1e:	f47f af3c 	bne.w	8007b9a <hal_uart_config+0x2e>
        isr = (uint32_t)&uart_irq1;
 8007d22:	4930      	ldr	r1, [pc, #192]	; (8007de4 <hal_uart_config+0x278>)
        ui = &uart_irqs[0];
 8007d24:	4830      	ldr	r0, [pc, #192]	; (8007de8 <hal_uart_config+0x27c>)
    u = &uarts[port];
 8007d26:	241c      	movs	r4, #28
 8007d28:	fb04 5406 	mla	r4, r4, r6, r5
        ui->ui_uart = uart;
 8007d2c:	6004      	str	r4, [r0, #0]
  uint32_t vectors = (uint32_t )SCB->VTOR;
 8007d2e:	482f      	ldr	r0, [pc, #188]	; (8007dec <hal_uart_config+0x280>)
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 8007d30:	f103 0410 	add.w	r4, r3, #16
  uint32_t vectors = (uint32_t )SCB->VTOR;
 8007d34:	6880      	ldr	r0, [r0, #8]
  if ((int32_t)(IRQn) >= 0)
 8007d36:	2b00      	cmp	r3, #0
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 8007d38:	f840 1024 	str.w	r1, [r0, r4, lsl #2]
  if ((int32_t)(IRQn) >= 0)
 8007d3c:	db08      	blt.n	8007d50 <hal_uart_config+0x1e4>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007d3e:	2101      	movs	r1, #1
 8007d40:	0958      	lsrs	r0, r3, #5
 8007d42:	f003 031f 	and.w	r3, r3, #31
 8007d46:	fa01 f303 	lsl.w	r3, r1, r3
 8007d4a:	4929      	ldr	r1, [pc, #164]	; (8007df0 <hal_uart_config+0x284>)
 8007d4c:	f841 3020 	str.w	r3, [r1, r0, lsl #2]

    u->u_regs->CR1 |= (USART_CR1_RXNEIE | USART_CR1_UE);
 8007d50:	68d3      	ldr	r3, [r2, #12]
    u->u_open = 1;

    return 0;
 8007d52:	2000      	movs	r0, #0
    u->u_regs->CR1 |= (USART_CR1_RXNEIE | USART_CR1_UE);
 8007d54:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007d58:	f043 0320 	orr.w	r3, r3, #32
 8007d5c:	60d3      	str	r3, [r2, #12]
    u->u_open = 1;
 8007d5e:	231c      	movs	r3, #28
 8007d60:	fb03 5506 	mla	r5, r3, r6, r5
 8007d64:	792b      	ldrb	r3, [r5, #4]
 8007d66:	f043 0301 	orr.w	r3, r3, #1
 8007d6a:	712b      	strb	r3, [r5, #4]
}
 8007d6c:	b007      	add	sp, #28
 8007d6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        cr1 |= UART_PARITY_ODD;
 8007d72:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
        break;
 8007d76:	e75e      	b.n	8007c36 <hal_uart_config+0xca>
        cr1 |= UART_PARITY_EVEN;
 8007d78:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
        break;
 8007d7c:	e75b      	b.n	8007c36 <hal_uart_config+0xca>
        u->u_regs->BRR = BAUD(HAL_RCC_GetPCLK1Freq(), baudrate);
 8007d7e:	f001 f84b 	bl	8008e18 <HAL_RCC_GetPCLK1Freq>
 8007d82:	f04f 0819 	mov.w	r8, #25
 8007d86:	4681      	mov	r9, r0
 8007d88:	f001 f846 	bl	8008e18 <HAL_RCC_GetPCLK1Freq>
 8007d8c:	fb08 f000 	mul.w	r0, r8, r0
 8007d90:	fbb0 f3f4 	udiv	r3, r0, r4
 8007d94:	9300      	str	r3, [sp, #0]
 8007d96:	f001 f83f 	bl	8008e18 <HAL_RCC_GetPCLK1Freq>
 8007d9a:	4683      	mov	fp, r0
 8007d9c:	f001 f83c 	bl	8008e18 <HAL_RCC_GetPCLK1Freq>
 8007da0:	fb08 f000 	mul.w	r0, r8, r0
 8007da4:	fbb0 faf4 	udiv	sl, r0, r4
 8007da8:	f001 f836 	bl	8008e18 <HAL_RCC_GetPCLK1Freq>
 8007dac:	fb08 f30b 	mul.w	r3, r8, fp
 8007db0:	9901      	ldr	r1, [sp, #4]
 8007db2:	fbb3 f3f4 	udiv	r3, r3, r4
 8007db6:	f855 c001 	ldr.w	ip, [r5, r1]
 8007dba:	2164      	movs	r1, #100	; 0x64
 8007dbc:	fbb3 f3f1 	udiv	r3, r3, r1
 8007dc0:	9a00      	ldr	r2, [sp, #0]
 8007dc2:	fb01 2313 	mls	r3, r1, r3, r2
 8007dc6:	e77f      	b.n	8007cc8 <hal_uart_config+0x15c>
        isr = (uint32_t)&uart_irq2;
 8007dc8:	490a      	ldr	r1, [pc, #40]	; (8007df4 <hal_uart_config+0x288>)
        ui = &uart_irqs[1];
 8007dca:	480b      	ldr	r0, [pc, #44]	; (8007df8 <hal_uart_config+0x28c>)
 8007dcc:	e7ab      	b.n	8007d26 <hal_uart_config+0x1ba>
        isr = (uint32_t)&uart_irq3;
 8007dce:	490b      	ldr	r1, [pc, #44]	; (8007dfc <hal_uart_config+0x290>)
        ui = &uart_irqs[2];
 8007dd0:	480b      	ldr	r0, [pc, #44]	; (8007e00 <hal_uart_config+0x294>)
 8007dd2:	e7a8      	b.n	8007d26 <hal_uart_config+0x1ba>
        return -1;
 8007dd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007dd8:	e7c8      	b.n	8007d6c <hal_uart_config+0x200>
 8007dda:	bf00      	nop
 8007ddc:	20002b54 	.word	0x20002b54
 8007de0:	40013800 	.word	0x40013800
 8007de4:	08007a95 	.word	0x08007a95
 8007de8:	20002b3c 	.word	0x20002b3c
 8007dec:	e000ed00 	.word	0xe000ed00
 8007df0:	e000e100 	.word	0xe000e100
 8007df4:	08007a9b 	.word	0x08007a9b
 8007df8:	20002b44 	.word	0x20002b44
 8007dfc:	08007aa1 	.word	0x08007aa1
 8007e00:	20002b4c 	.word	0x20002b4c

08007e04 <hal_uart_init>:
int
hal_uart_init(int port, void *arg)
{
    struct hal_uart *u;

    if (port >= UART_CNT) {
 8007e04:	2800      	cmp	r0, #0
        return -1;
    }
    u = &uarts[port];
    u->u_cfg = (const struct stm32_uart_cfg *)arg;
 8007e06:	bfdf      	itttt	le
 8007e08:	221c      	movle	r2, #28
 8007e0a:	4b04      	ldrle	r3, [pc, #16]	; (8007e1c <hal_uart_init+0x18>)
 8007e0c:	fb02 3000 	mlale	r0, r2, r0, r3
 8007e10:	6181      	strle	r1, [r0, #24]

    return 0;
 8007e12:	bfd4      	ite	le
 8007e14:	2000      	movle	r0, #0
        return -1;
 8007e16:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
}
 8007e1a:	4770      	bx	lr
 8007e1c:	20002b54 	.word	0x20002b54

08007e20 <hal_uart_close>:
int
hal_uart_close(int port)
{
    struct hal_uart *u;

    if (port >= UART_CNT) {
 8007e20:	2800      	cmp	r0, #0
 8007e22:	dc0b      	bgt.n	8007e3c <hal_uart_close+0x1c>
        return -1;
    }
    u = &uarts[port];

    u->u_open = 0;
 8007e24:	231c      	movs	r3, #28
 8007e26:	4358      	muls	r0, r3
 8007e28:	4a06      	ldr	r2, [pc, #24]	; (8007e44 <hal_uart_close+0x24>)
 8007e2a:	1813      	adds	r3, r2, r0
 8007e2c:	7919      	ldrb	r1, [r3, #4]
 8007e2e:	f36f 0100 	bfc	r1, #0, #1
 8007e32:	7119      	strb	r1, [r3, #4]
    u->u_regs->CR1 = 0;
 8007e34:	5813      	ldr	r3, [r2, r0]
 8007e36:	2000      	movs	r0, #0
 8007e38:	60d8      	str	r0, [r3, #12]

    return 0;
 8007e3a:	4770      	bx	lr
        return -1;
 8007e3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8007e40:	4770      	bx	lr
 8007e42:	bf00      	nop
 8007e44:	20002b54 	.word	0x20002b54

08007e48 <hal_watchdog_init>:
{
    uint32_t reload;

    /* Max prescaler is 256 */
    reload = 32768 / 256;
    reload = (reload * expire_msecs) / 1000;
 8007e48:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007e4c:	01c0      	lsls	r0, r0, #7
 8007e4e:	fbb0 f0f3 	udiv	r0, r0, r3

    /* Check to make sure we are not trying a reload value that is too large */
    if (reload > IWDG_RLR_RL) {
 8007e52:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
        return -1;
    }

    g_wdt_cfg.Instance = IWDG;
    g_wdt_cfg.Init.Prescaler = IWDG_PRESCALER_256;
 8007e56:	bf3f      	itttt	cc
 8007e58:	2206      	movcc	r2, #6
    g_wdt_cfg.Instance = IWDG;
 8007e5a:	4b05      	ldrcc	r3, [pc, #20]	; (8007e70 <hal_watchdog_init+0x28>)
    g_wdt_cfg.Init.Prescaler = IWDG_PRESCALER_256;
 8007e5c:	4905      	ldrcc	r1, [pc, #20]	; (8007e74 <hal_watchdog_init+0x2c>)
    g_wdt_cfg.Init.Reload = reload;
 8007e5e:	6098      	strcc	r0, [r3, #8]
    g_wdt_cfg.Init.Prescaler = IWDG_PRESCALER_256;
 8007e60:	bf3a      	itte	cc
 8007e62:	e9c3 1200 	strdcc	r1, r2, [r3]
    STM32_HAL_WATCHDOG_CUSTOM_INIT(&g_wdt_cfg);

    return 0;
 8007e66:	2000      	movcc	r0, #0
        return -1;
 8007e68:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
}
 8007e6c:	4770      	bx	lr
 8007e6e:	bf00      	nop
 8007e70:	20003c34 	.word	0x20003c34
 8007e74:	40003000 	.word	0x40003000

08007e78 <hal_watchdog_enable>:

void
hal_watchdog_enable(void)
{
    __HAL_DBGMCU_FREEZE_IWDG();
 8007e78:	4a03      	ldr	r2, [pc, #12]	; (8007e88 <hal_watchdog_enable+0x10>)
    HAL_IWDG_Init(&g_wdt_cfg);
 8007e7a:	4804      	ldr	r0, [pc, #16]	; (8007e8c <hal_watchdog_enable+0x14>)
    __HAL_DBGMCU_FREEZE_IWDG();
 8007e7c:	6853      	ldr	r3, [r2, #4]
 8007e7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e82:	6053      	str	r3, [r2, #4]
    HAL_IWDG_Init(&g_wdt_cfg);
 8007e84:	f000 bd37 	b.w	80088f6 <HAL_IWDG_Init>
 8007e88:	e0042000 	.word	0xe0042000
 8007e8c:	20003c34 	.word	0x20003c34

08007e90 <hal_watchdog_tickle>:
}

void
hal_watchdog_tickle(void)
{
    HAL_IWDG_Refresh(&g_wdt_cfg);
 8007e90:	4801      	ldr	r0, [pc, #4]	; (8007e98 <hal_watchdog_tickle+0x8>)
 8007e92:	f000 bd51 	b.w	8008938 <HAL_IWDG_Refresh>
 8007e96:	bf00      	nop
 8007e98:	20003c34 	.word	0x20003c34

08007e9c <_sbrk>:
extern char __HeapBase;
extern char __HeapLimit;

void *
_sbrk(int incr)
{
 8007e9c:	4a09      	ldr	r2, [pc, #36]	; (8007ec4 <_sbrk+0x28>)
    static char *brk = &__HeapBase;

    void *prev_brk;

    if (incr < 0) {
 8007e9e:	2800      	cmp	r0, #0
 8007ea0:	6813      	ldr	r3, [r2, #0]
 8007ea2:	da06      	bge.n	8007eb2 <_sbrk+0x16>
        /* Returning memory to the heap. */
        incr = -incr;
        if (brk - incr < &__HeapBase) {
 8007ea4:	4908      	ldr	r1, [pc, #32]	; (8007ec8 <_sbrk+0x2c>)
 8007ea6:	4418      	add	r0, r3
 8007ea8:	4288      	cmp	r0, r1
 8007eaa:	d308      	bcc.n	8007ebe <_sbrk+0x22>
        }
    } else {
        /* Allocating memory from the heap. */
        if (&__HeapLimit - brk >= incr) {
            prev_brk = brk;
            brk += incr;
 8007eac:	6010      	str	r0, [r2, #0]
            prev_brk = (void *)-1;
        }
    }

    return prev_brk;
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	4770      	bx	lr
        if (&__HeapLimit - brk >= incr) {
 8007eb2:	4906      	ldr	r1, [pc, #24]	; (8007ecc <_sbrk+0x30>)
 8007eb4:	1ac9      	subs	r1, r1, r3
 8007eb6:	4281      	cmp	r1, r0
 8007eb8:	db01      	blt.n	8007ebe <_sbrk+0x22>
            brk += incr;
 8007eba:	4418      	add	r0, r3
 8007ebc:	e7f6      	b.n	8007eac <_sbrk+0x10>
            prev_brk = (void *)-1;
 8007ebe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    return prev_brk;
 8007ec2:	e7f4      	b.n	8007eae <_sbrk+0x12>
 8007ec4:	200001b0 	.word	0x200001b0
 8007ec8:	20003c90 	.word	0x20003c90
 8007ecc:	20005000 	.word	0x20005000

08007ed0 <SPI_CheckFlag_BSY.constprop.4>:
  return HAL_OK;
}

#if !SPI_HAS_FIFO
static HAL_StatusTypeDef
SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
 8007ed0:	b538      	push	{r3, r4, r5, lr}
 8007ed2:	4604      	mov	r4, r0
 8007ed4:	460d      	mov	r5, r1
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State) {
 8007ed6:	6823      	ldr	r3, [r4, #0]
 8007ed8:	6898      	ldr	r0, [r3, #8]
 8007eda:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007ede:	d014      	beq.n	8007f0a <SPI_CheckFlag_BSY.constprop.4+0x3a>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8007ee0:	f7ff fc3e 	bl	8007760 <HAL_GetTick>
 8007ee4:	1b40      	subs	r0, r0, r5
 8007ee6:	2863      	cmp	r0, #99	; 0x63
 8007ee8:	d9f5      	bls.n	8007ed6 <SPI_CheckFlag_BSY.constprop.4+0x6>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007eea:	6822      	ldr	r2, [r4, #0]
{
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK) {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
 8007eec:	2003      	movs	r0, #3
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007eee:	6853      	ldr	r3, [r2, #4]
 8007ef0:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8007ef4:	6053      	str	r3, [r2, #4]
        hspi->State= HAL_SPI_STATE_READY;
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8007efc:	2300      	movs	r3, #0
 8007efe:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f02:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007f04:	f043 0320 	orr.w	r3, r3, #32
 8007f08:	6563      	str	r3, [r4, #84]	; 0x54
  }
  return HAL_OK;
}
 8007f0a:	bd38      	pop	{r3, r4, r5, pc}

08007f0c <SPI_CloseTx_ISR>:
#endif

static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
  uint32_t tickstart = 0U;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8007f0c:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 8007f10:	4b1e      	ldr	r3, [pc, #120]	; (8007f8c <SPI_CloseTx_ISR+0x80>)
{
 8007f12:	b513      	push	{r0, r1, r4, lr}
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8007f14:	681b      	ldr	r3, [r3, #0]
{
 8007f16:	4604      	mov	r4, r0
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8007f18:	fbb3 f2f2 	udiv	r2, r3, r2
 8007f1c:	2364      	movs	r3, #100	; 0x64
 8007f1e:	4353      	muls	r3, r2
 8007f20:	9300      	str	r3, [sp, #0]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007f22:	f7ff fc1d 	bl	8007760 <HAL_GetTick>
 8007f26:	4601      	mov	r1, r0
  (void)count;
 8007f28:	9b00      	ldr	r3, [sp, #0]
 8007f2a:	6823      	ldr	r3, [r4, #0]

#if !SPI_HAS_FIFO
  /* Wait until TXE flag is set */
  do
  {
    if(count-- == 0U)
 8007f2c:	9a00      	ldr	r2, [sp, #0]
 8007f2e:	1e50      	subs	r0, r2, #1
 8007f30:	9000      	str	r0, [sp, #0]
 8007f32:	bb12      	cbnz	r2, 8007f7a <SPI_CloseTx_ISR+0x6e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f34:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8007f36:	f042 0220 	orr.w	r2, r2, #32
 8007f3a:	6562      	str	r2, [r4, #84]	; 0x54
  }
  while((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
#endif

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8007f3c:	685a      	ldr	r2, [r3, #4]
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
  }
#else
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007f3e:	4620      	mov	r0, r4
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8007f40:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007f44:	605a      	str	r2, [r3, #4]
  if(SPI_CheckFlag_BSY(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007f46:	f7ff ffc3 	bl	8007ed0 <SPI_CheckFlag_BSY.constprop.4>
 8007f4a:	b118      	cbz	r0, 8007f54 <SPI_CloseTx_ISR+0x48>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f4c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007f4e:	f043 0320 	orr.w	r3, r3, #32
 8007f52:	6563      	str	r3, [r4, #84]	; 0x54
  }
#endif

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007f54:	2300      	movs	r3, #0
 8007f56:	9301      	str	r3, [sp, #4]
 8007f58:	6823      	ldr	r3, [r4, #0]

  hspi->State = HAL_SPI_STATE_READY;
  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
  {
    HAL_SPI_ErrorCallback(hspi);
 8007f5a:	4620      	mov	r0, r4
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007f5c:	68da      	ldr	r2, [r3, #12]
 8007f5e:	9201      	str	r2, [sp, #4]
 8007f60:	689b      	ldr	r3, [r3, #8]
 8007f62:	9301      	str	r3, [sp, #4]
 8007f64:	9b01      	ldr	r3, [sp, #4]
  hspi->State = HAL_SPI_STATE_READY;
 8007f66:	2301      	movs	r3, #1
 8007f68:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007f6c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007f6e:	b143      	cbz	r3, 8007f82 <SPI_CloseTx_ISR+0x76>
  }
  else
  {
    HAL_SPI_TxCpltCallback(hspi);
  }
}
 8007f70:	b002      	add	sp, #8
 8007f72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_SPI_ErrorCallback(hspi);
 8007f76:	f001 b91f 	b.w	80091b8 <HAL_SPI_ErrorCallback>
  while((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8007f7a:	689a      	ldr	r2, [r3, #8]
 8007f7c:	0792      	lsls	r2, r2, #30
 8007f7e:	d5d5      	bpl.n	8007f2c <SPI_CloseTx_ISR+0x20>
 8007f80:	e7dc      	b.n	8007f3c <SPI_CloseTx_ISR+0x30>
}
 8007f82:	b002      	add	sp, #8
 8007f84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_SPI_TxCpltCallback(hspi);
 8007f88:	f001 b915 	b.w	80091b6 <HAL_SPI_TxCpltCallback>
 8007f8c:	20000110 	.word	0x20000110

08007f90 <SPI_TxISR_8BIT>:
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
    hspi->pTxBuffPtr += sizeof(uint16_t);
    hspi->TxXferCount -= 2U;
  } else {
#endif
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 8007f90:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8007f92:	1c51      	adds	r1, r2, #1
 8007f94:	6301      	str	r1, [r0, #48]	; 0x30
 8007f96:	7812      	ldrb	r2, [r2, #0]
 8007f98:	6801      	ldr	r1, [r0, #0]
 8007f9a:	730a      	strb	r2, [r1, #12]
    hspi->TxXferCount--;
 8007f9c:	8ec2      	ldrh	r2, [r0, #54]	; 0x36
 8007f9e:	3a01      	subs	r2, #1
 8007fa0:	b292      	uxth	r2, r2
 8007fa2:	86c2      	strh	r2, [r0, #54]	; 0x36
#if SPI_HAS_FIFO
  }
#endif

  if(hspi->TxXferCount == 0U)
 8007fa4:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8007fa6:	b29b      	uxth	r3, r3
 8007fa8:	b90b      	cbnz	r3, 8007fae <SPI_TxISR_8BIT+0x1e>
  {
    SPI_CloseTx_ISR(hspi);
 8007faa:	f7ff bfaf 	b.w	8007f0c <SPI_CloseTx_ISR>
  }
}
 8007fae:	4770      	bx	lr

08007fb0 <SPI_TxISR_16BIT>:
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007fb0:	6b02      	ldr	r2, [r0, #48]	; 0x30
{
 8007fb2:	b410      	push	{r4}
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007fb4:	6801      	ldr	r1, [r0, #0]
 8007fb6:	f832 4b02 	ldrh.w	r4, [r2], #2
 8007fba:	60cc      	str	r4, [r1, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8007fbc:	6302      	str	r2, [r0, #48]	; 0x30
  hspi->TxXferCount--;
 8007fbe:	8ec2      	ldrh	r2, [r0, #54]	; 0x36
 8007fc0:	3a01      	subs	r2, #1
 8007fc2:	b292      	uxth	r2, r2
 8007fc4:	86c2      	strh	r2, [r0, #54]	; 0x36

  if(hspi->TxXferCount == 0U)
 8007fc6:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8007fc8:	b29b      	uxth	r3, r3
 8007fca:	b913      	cbnz	r3, 8007fd2 <SPI_TxISR_16BIT+0x22>
  {
    SPI_CloseTx_ISR(hspi);
  }
}
 8007fcc:	bc10      	pop	{r4}
    SPI_CloseTx_ISR(hspi);
 8007fce:	f7ff bf9d 	b.w	8007f0c <SPI_CloseTx_ISR>
}
 8007fd2:	bc10      	pop	{r4}
 8007fd4:	4770      	bx	lr
	...

08007fd8 <HAL_SPI_QueueTransmit>:
  __HAL_UNLOCK(hspi);
  return errorcode;
}

HAL_StatusTypeDef HAL_SPI_QueueTransmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8007fd8:	b510      	push	{r4, lr}
  HAL_StatusTypeDef errorcode = HAL_OK;

  if((pData == NULL) || (Size == 0))
 8007fda:	b1f9      	cbz	r1, 800801c <HAL_SPI_QueueTransmit+0x44>
 8007fdc:	b1f2      	cbz	r2, 800801c <HAL_SPI_QueueTransmit+0x44>
  {
    errorcode = HAL_ERROR;
    goto error;
  }

  if(hspi->State != HAL_SPI_STATE_READY)
 8007fde:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8007fe2:	2b01      	cmp	r3, #1
 8007fe4:	d11c      	bne.n	8008020 <HAL_SPI_QueueTransmit+0x48>
    errorcode = HAL_BUSY;
    goto error;
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007fe6:	2303      	movs	r3, #3
 8007fe8:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007fec:	2300      	movs	r3, #0
 8007fee:	6543      	str	r3, [r0, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
  hspi->TxXferSize  = Size;
  hspi->TxXferCount = Size;

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007ff0:	6383      	str	r3, [r0, #56]	; 0x38
  hspi->TxXferCount = Size;
 8007ff2:	86c2      	strh	r2, [r0, #54]	; 0x36
  hspi->RxXferSize  = 0U;
 8007ff4:	8783      	strh	r3, [r0, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007ff6:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8007ff8:	6403      	str	r3, [r0, #64]	; 0x40

  /* Set the function for IT treatment */
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT )
 8007ffa:	68c3      	ldr	r3, [r0, #12]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007ffc:	6301      	str	r1, [r0, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007ffe:	8682      	strh	r2, [r0, #52]	; 0x34
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT )
 8008000:	b153      	cbz	r3, 8008018 <HAL_SPI_QueueTransmit+0x40>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8008002:	4b08      	ldr	r3, [pc, #32]	; (8008024 <HAL_SPI_QueueTransmit+0x4c>)
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8008004:	6443      	str	r3, [r0, #68]	; 0x44
  /* Enable TXE interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE));
#endif

  /* MYNEWT: in slave mode write 1st byte to DR */
  if ((hspi->Instance->CR1 & SPI_CR1_MSTR) == 0) {
 8008006:	6803      	ldr	r3, [r0, #0]
 8008008:	681c      	ldr	r4, [r3, #0]
 800800a:	f014 0404 	ands.w	r4, r4, #4
 800800e:	d101      	bne.n	8008014 <HAL_SPI_QueueTransmit+0x3c>
      hspi->TxISR(hspi);
 8008010:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8008012:	4798      	blx	r3
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008014:	2000      	movs	r0, #0
 8008016:	e002      	b.n	800801e <HAL_SPI_QueueTransmit+0x46>
    hspi->TxISR = SPI_TxISR_8BIT;
 8008018:	4b03      	ldr	r3, [pc, #12]	; (8008028 <HAL_SPI_QueueTransmit+0x50>)
 800801a:	e7f3      	b.n	8008004 <HAL_SPI_QueueTransmit+0x2c>
    errorcode = HAL_ERROR;
 800801c:	2001      	movs	r0, #1
  }
#endif

error :
  return errorcode;
}
 800801e:	bd10      	pop	{r4, pc}
    errorcode = HAL_BUSY;
 8008020:	2002      	movs	r0, #2
 8008022:	e7fc      	b.n	800801e <HAL_SPI_QueueTransmit+0x46>
 8008024:	08007fb1 	.word	0x08007fb1
 8008028:	08007f91 	.word	0x08007f91

0800802c <HAL_SPI_Transmit_IT_Custom>:
  __HAL_LOCK(hspi);
 800802c:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8008030:	b510      	push	{r4, lr}
  __HAL_LOCK(hspi);
 8008032:	2b01      	cmp	r3, #1
{
 8008034:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8008036:	d015      	beq.n	8008064 <HAL_SPI_Transmit_IT_Custom+0x38>
 8008038:	2301      	movs	r3, #1
 800803a:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  errorcode = HAL_SPI_QueueTransmit(hspi, pData, Size);
 800803e:	f7ff ffcb 	bl	8007fd8 <HAL_SPI_QueueTransmit>
  if (errorcode) {
 8008042:	b958      	cbnz	r0, 800805c <HAL_SPI_Transmit_IT_Custom+0x30>
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE));
 8008044:	6823      	ldr	r3, [r4, #0]
 8008046:	685a      	ldr	r2, [r3, #4]
 8008048:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800804c:	605a      	str	r2, [r3, #4]
  if ((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE) {
 800804e:	681a      	ldr	r2, [r3, #0]
 8008050:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8008052:	bf5e      	ittt	pl
 8008054:	681a      	ldrpl	r2, [r3, #0]
 8008056:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 800805a:	601a      	strpl	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 800805c:	2300      	movs	r3, #0
 800805e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8008062:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hspi);
 8008064:	2002      	movs	r0, #2
 8008066:	e7fc      	b.n	8008062 <HAL_SPI_Transmit_IT_Custom+0x36>

08008068 <ext_irq_handler>:
static void
ext_irq_handler(int index)
{
    uint32_t mask;

    mask = 1 << index;
 8008068:	2301      	movs	r3, #1
    if (__HAL_GPIO_EXTI_GET_IT(mask) != RESET) {
 800806a:	4a07      	ldr	r2, [pc, #28]	; (8008088 <ext_irq_handler+0x20>)
    mask = 1 << index;
 800806c:	4083      	lsls	r3, r0
    if (__HAL_GPIO_EXTI_GET_IT(mask) != RESET) {
 800806e:	6951      	ldr	r1, [r2, #20]
 8008070:	4219      	tst	r1, r3
 8008072:	d007      	beq.n	8008084 <ext_irq_handler+0x1c>
        __HAL_GPIO_EXTI_CLEAR_IT(mask);
 8008074:	6153      	str	r3, [r2, #20]
        gpio_irq_handlers[index].isr(gpio_irq_handlers[index].arg);
 8008076:	4b05      	ldr	r3, [pc, #20]	; (800808c <ext_irq_handler+0x24>)
 8008078:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
 800807c:	6852      	ldr	r2, [r2, #4]
 800807e:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
 8008082:	4710      	bx	r2
    }
}
 8008084:	4770      	bx	lr
 8008086:	bf00      	nop
 8008088:	40010400 	.word	0x40010400
 800808c:	20002b70 	.word	0x20002b70

08008090 <ext_irq0>:
#if !MYNEWT_VAL(MCU_STM32L0) && !MYNEWT_VAL(MCU_STM32F0)
/* External interrupt 0 */
static void
ext_irq0(void)
{
    ++ext_irq_counts.irq0;
 8008090:	4a03      	ldr	r2, [pc, #12]	; (80080a0 <ext_irq0+0x10>)
    ext_irq_handler(0);
 8008092:	2000      	movs	r0, #0
    ++ext_irq_counts.irq0;
 8008094:	6813      	ldr	r3, [r2, #0]
 8008096:	3301      	adds	r3, #1
 8008098:	6013      	str	r3, [r2, #0]
    ext_irq_handler(0);
 800809a:	f7ff bfe5 	b.w	8008068 <ext_irq_handler>
 800809e:	bf00      	nop
 80080a0:	20003c40 	.word	0x20003c40

080080a4 <ext_irq1>:

/* External interrupt 1 */
static void
ext_irq1(void)
{
    ++ext_irq_counts.irq1;
 80080a4:	4a03      	ldr	r2, [pc, #12]	; (80080b4 <ext_irq1+0x10>)
    ext_irq_handler(1);
 80080a6:	2001      	movs	r0, #1
    ++ext_irq_counts.irq1;
 80080a8:	6853      	ldr	r3, [r2, #4]
 80080aa:	3301      	adds	r3, #1
 80080ac:	6053      	str	r3, [r2, #4]
    ext_irq_handler(1);
 80080ae:	f7ff bfdb 	b.w	8008068 <ext_irq_handler>
 80080b2:	bf00      	nop
 80080b4:	20003c40 	.word	0x20003c40

080080b8 <ext_irq2>:

/* External interrupt 2 */
static void
ext_irq2(void)
{
    ++ext_irq_counts.irq2;
 80080b8:	4a03      	ldr	r2, [pc, #12]	; (80080c8 <ext_irq2+0x10>)
    ext_irq_handler(2);
 80080ba:	2002      	movs	r0, #2
    ++ext_irq_counts.irq2;
 80080bc:	6893      	ldr	r3, [r2, #8]
 80080be:	3301      	adds	r3, #1
 80080c0:	6093      	str	r3, [r2, #8]
    ext_irq_handler(2);
 80080c2:	f7ff bfd1 	b.w	8008068 <ext_irq_handler>
 80080c6:	bf00      	nop
 80080c8:	20003c40 	.word	0x20003c40

080080cc <ext_irq3>:

/* External interrupt 3 */
static void
ext_irq3(void)
{
    ++ext_irq_counts.irq3;
 80080cc:	4a03      	ldr	r2, [pc, #12]	; (80080dc <ext_irq3+0x10>)
    ext_irq_handler(3);
 80080ce:	2003      	movs	r0, #3
    ++ext_irq_counts.irq3;
 80080d0:	68d3      	ldr	r3, [r2, #12]
 80080d2:	3301      	adds	r3, #1
 80080d4:	60d3      	str	r3, [r2, #12]
    ext_irq_handler(3);
 80080d6:	f7ff bfc7 	b.w	8008068 <ext_irq_handler>
 80080da:	bf00      	nop
 80080dc:	20003c40 	.word	0x20003c40

080080e0 <ext_irq4>:
 *
 */
static void
ext_irq4(void)
{
    ++ext_irq_counts.irq4;
 80080e0:	4a03      	ldr	r2, [pc, #12]	; (80080f0 <ext_irq4+0x10>)
    ext_irq_handler(4);
 80080e2:	2004      	movs	r0, #4
    ++ext_irq_counts.irq4;
 80080e4:	6913      	ldr	r3, [r2, #16]
 80080e6:	3301      	adds	r3, #1
 80080e8:	6113      	str	r3, [r2, #16]
    ext_irq_handler(4);
 80080ea:	f7ff bfbd 	b.w	8008068 <ext_irq_handler>
 80080ee:	bf00      	nop
 80080f0:	20003c40 	.word	0x20003c40

080080f4 <ext_irq9_5>:
static void
ext_irq9_5(void)
{
    int index;

    ++ext_irq_counts.irq9_5;
 80080f4:	4a0a      	ldr	r2, [pc, #40]	; (8008120 <ext_irq9_5+0x2c>)
{
 80080f6:	b508      	push	{r3, lr}
    ++ext_irq_counts.irq9_5;
 80080f8:	6953      	ldr	r3, [r2, #20]
    for (index = 5; index <= 9; ++index) {
        ext_irq_handler(index);
 80080fa:	2005      	movs	r0, #5
    ++ext_irq_counts.irq9_5;
 80080fc:	3301      	adds	r3, #1
 80080fe:	6153      	str	r3, [r2, #20]
        ext_irq_handler(index);
 8008100:	f7ff ffb2 	bl	8008068 <ext_irq_handler>
 8008104:	2006      	movs	r0, #6
 8008106:	f7ff ffaf 	bl	8008068 <ext_irq_handler>
 800810a:	2007      	movs	r0, #7
 800810c:	f7ff ffac 	bl	8008068 <ext_irq_handler>
 8008110:	2008      	movs	r0, #8
 8008112:	f7ff ffa9 	bl	8008068 <ext_irq_handler>
    }
}
 8008116:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        ext_irq_handler(index);
 800811a:	2009      	movs	r0, #9
 800811c:	f7ff bfa4 	b.w	8008068 <ext_irq_handler>
 8008120:	20003c40 	.word	0x20003c40

08008124 <ext_irq15_10>:
 *  External interrupt handler for irqs 15 through 10.
 *
 */
static void
ext_irq15_10(void)
{
 8008124:	b510      	push	{r4, lr}
    int index;

    ++ext_irq_counts.irq15_10;
    for (index = 10; index <= 15; ++index) {
 8008126:	240a      	movs	r4, #10
    ++ext_irq_counts.irq15_10;
 8008128:	4a05      	ldr	r2, [pc, #20]	; (8008140 <ext_irq15_10+0x1c>)
 800812a:	6993      	ldr	r3, [r2, #24]
 800812c:	3301      	adds	r3, #1
 800812e:	6193      	str	r3, [r2, #24]
        ext_irq_handler(index);
 8008130:	4620      	mov	r0, r4
    for (index = 10; index <= 15; ++index) {
 8008132:	3401      	adds	r4, #1
        ext_irq_handler(index);
 8008134:	f7ff ff98 	bl	8008068 <ext_irq_handler>
    for (index = 10; index <= 15; ++index) {
 8008138:	2c10      	cmp	r4, #16
 800813a:	d1f9      	bne.n	8008130 <ext_irq15_10+0xc>
    }
}
 800813c:	bd10      	pop	{r4, pc}
 800813e:	bf00      	nop
 8008140:	20003c40 	.word	0x20003c40

08008144 <hal_gpio_clk_enable>:
 * @param port_idx
 */
static void
hal_gpio_clk_enable(uint32_t port_idx)
{
    switch (port_idx) {
 8008144:	3801      	subs	r0, #1
{
 8008146:	b086      	sub	sp, #24
 8008148:	4b1c      	ldr	r3, [pc, #112]	; (80081bc <hal_gpio_clk_enable+0x78>)
    switch (port_idx) {
 800814a:	2803      	cmp	r0, #3
 800814c:	d803      	bhi.n	8008156 <hal_gpio_clk_enable+0x12>
 800814e:	e8df f000 	tbb	[pc, r0]
 8008152:	170d      	.short	0x170d
 8008154:	2b21      	.short	0x2b21
#if defined GPIOA_BASE
    case 0:
        __HAL_RCC_GPIOA_CLK_ENABLE();
 8008156:	699a      	ldr	r2, [r3, #24]
 8008158:	f042 0204 	orr.w	r2, r2, #4
 800815c:	619a      	str	r2, [r3, #24]
 800815e:	699b      	ldr	r3, [r3, #24]
 8008160:	f003 0304 	and.w	r3, r3, #4
 8008164:	9301      	str	r3, [sp, #4]
 8008166:	9b01      	ldr	r3, [sp, #4]
#endif
    default:
        assert(0);
        break;
    }
}
 8008168:	b006      	add	sp, #24
 800816a:	4770      	bx	lr
        __HAL_RCC_GPIOB_CLK_ENABLE();
 800816c:	699a      	ldr	r2, [r3, #24]
 800816e:	f042 0208 	orr.w	r2, r2, #8
 8008172:	619a      	str	r2, [r3, #24]
 8008174:	699b      	ldr	r3, [r3, #24]
 8008176:	f003 0308 	and.w	r3, r3, #8
 800817a:	9302      	str	r3, [sp, #8]
 800817c:	9b02      	ldr	r3, [sp, #8]
        break;
 800817e:	e7f3      	b.n	8008168 <hal_gpio_clk_enable+0x24>
        __HAL_RCC_GPIOC_CLK_ENABLE();
 8008180:	699a      	ldr	r2, [r3, #24]
 8008182:	f042 0210 	orr.w	r2, r2, #16
 8008186:	619a      	str	r2, [r3, #24]
 8008188:	699b      	ldr	r3, [r3, #24]
 800818a:	f003 0310 	and.w	r3, r3, #16
 800818e:	9303      	str	r3, [sp, #12]
 8008190:	9b03      	ldr	r3, [sp, #12]
        break;
 8008192:	e7e9      	b.n	8008168 <hal_gpio_clk_enable+0x24>
        __HAL_RCC_GPIOD_CLK_ENABLE();
 8008194:	699a      	ldr	r2, [r3, #24]
 8008196:	f042 0220 	orr.w	r2, r2, #32
 800819a:	619a      	str	r2, [r3, #24]
 800819c:	699b      	ldr	r3, [r3, #24]
 800819e:	f003 0320 	and.w	r3, r3, #32
 80081a2:	9304      	str	r3, [sp, #16]
 80081a4:	9b04      	ldr	r3, [sp, #16]
        break;
 80081a6:	e7df      	b.n	8008168 <hal_gpio_clk_enable+0x24>
        __HAL_RCC_GPIOE_CLK_ENABLE();
 80081a8:	699a      	ldr	r2, [r3, #24]
 80081aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80081ae:	619a      	str	r2, [r3, #24]
 80081b0:	699b      	ldr	r3, [r3, #24]
 80081b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081b6:	9305      	str	r3, [sp, #20]
 80081b8:	9b05      	ldr	r3, [sp, #20]
}
 80081ba:	e7d5      	b.n	8008168 <hal_gpio_clk_enable+0x24>
 80081bc:	40021000 	.word	0x40021000

080081c0 <hal_gpio_init_stm>:
 *
 * @return int
 */
int
hal_gpio_init_stm(int pin, GPIO_InitTypeDef *cfg)
{
 80081c0:	b510      	push	{r4, lr}
    int port;
    uint32_t mcu_pin_mask;

    /* Is this a valid pin? */
    port = MCU_GPIO_PIN_PORT(pin);
 80081c2:	f3c0 1403 	ubfx	r4, r0, #4, #4
    if (port >= HAL_GPIO_PORT_COUNT) {
 80081c6:	2c04      	cmp	r4, #4
 80081c8:	dc0f      	bgt.n	80081ea <hal_gpio_init_stm+0x2a>
        return -1;
    }

    mcu_pin_mask = GPIO_MASK(pin);
 80081ca:	2301      	movs	r3, #1
 80081cc:	f000 000f 	and.w	r0, r0, #15
 80081d0:	fa03 f000 	lsl.w	r0, r3, r0
    cfg->Pin = mcu_pin_mask;
 80081d4:	6008      	str	r0, [r1, #0]

    /* Enable the GPIO clock */
    hal_gpio_clk_enable(port);
 80081d6:	4620      	mov	r0, r4
 80081d8:	f7ff ffb4 	bl	8008144 <hal_gpio_clk_enable>

    /* Initialize pin as an input, setting proper mode */
    HAL_GPIO_Init(portmap[port], cfg);
 80081dc:	4b04      	ldr	r3, [pc, #16]	; (80081f0 <hal_gpio_init_stm+0x30>)
 80081de:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80081e2:	f000 fa2d 	bl	8008640 <HAL_GPIO_Init>

    return 0;
 80081e6:	2000      	movs	r0, #0
}
 80081e8:	bd10      	pop	{r4, pc}
        return -1;
 80081ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80081ee:	e7fb      	b.n	80081e8 <hal_gpio_init_stm+0x28>
 80081f0:	0800e09c 	.word	0x0800e09c

080081f4 <hal_gpio_deinit_stm>:
{
    int port;
    uint32_t mcu_pin_mask;

    /* Is this a valid pin? */
    port = MCU_GPIO_PIN_PORT(pin);
 80081f4:	f3c0 1203 	ubfx	r2, r0, #4, #4
    if (port >= HAL_GPIO_PORT_COUNT) {
 80081f8:	2a04      	cmp	r2, #4
{
 80081fa:	b508      	push	{r3, lr}
    if (port >= HAL_GPIO_PORT_COUNT) {
 80081fc:	dc0c      	bgt.n	8008218 <hal_gpio_deinit_stm+0x24>
        return -1;
    }

    mcu_pin_mask = GPIO_MASK(pin);
 80081fe:	f000 030f 	and.w	r3, r0, #15
 8008202:	2001      	movs	r0, #1
 8008204:	4098      	lsls	r0, r3
    cfg->Pin = mcu_pin_mask;

    /* Initialize pin as an input, setting proper mode */
    HAL_GPIO_DeInit(portmap[port], cfg->Pin);
 8008206:	4b06      	ldr	r3, [pc, #24]	; (8008220 <hal_gpio_deinit_stm+0x2c>)
    cfg->Pin = mcu_pin_mask;
 8008208:	6008      	str	r0, [r1, #0]
    HAL_GPIO_DeInit(portmap[port], cfg->Pin);
 800820a:	4601      	mov	r1, r0
 800820c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8008210:	f000 faf6 	bl	8008800 <HAL_GPIO_DeInit>

    return 0;
 8008214:	2000      	movs	r0, #0
}
 8008216:	bd08      	pop	{r3, pc}
        return -1;
 8008218:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800821c:	e7fb      	b.n	8008216 <hal_gpio_deinit_stm+0x22>
 800821e:	bf00      	nop
 8008220:	0800e09c 	.word	0x0800e09c

08008224 <hal_gpio_write>:
    int port;
    uint32_t mcu_pin_mask;
    GPIO_PinState state;

    port = MCU_GPIO_PIN_PORT(pin);
    mcu_pin_mask = GPIO_MASK(pin);
 8008224:	2301      	movs	r3, #1
 8008226:	f000 020f 	and.w	r2, r0, #15
 800822a:	4093      	lsls	r3, r2
        state = GPIO_PIN_SET;
    } else {
        state = GPIO_PIN_RESET;
    }

    HAL_GPIO_WritePin(portmap[port], mcu_pin_mask, state);
 800822c:	1c0a      	adds	r2, r1, #0
 800822e:	b299      	uxth	r1, r3
 8008230:	4b04      	ldr	r3, [pc, #16]	; (8008244 <hal_gpio_write+0x20>)
    port = MCU_GPIO_PIN_PORT(pin);
 8008232:	f3c0 1003 	ubfx	r0, r0, #4, #4
    HAL_GPIO_WritePin(portmap[port], mcu_pin_mask, state);
 8008236:	bf18      	it	ne
 8008238:	2201      	movne	r2, #1
 800823a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800823e:	f000 bb55 	b.w	80088ec <HAL_GPIO_WritePin>
 8008242:	bf00      	nop
 8008244:	0800e09c 	.word	0x0800e09c

08008248 <hal_gpio_init_out>:
{
 8008248:	b530      	push	{r4, r5, lr}
    port = MCU_GPIO_PIN_PORT(pin);
 800824a:	f3c0 1503 	ubfx	r5, r0, #4, #4
    if (port >= HAL_GPIO_PORT_COUNT) {
 800824e:	2d04      	cmp	r5, #4
{
 8008250:	b085      	sub	sp, #20
 8008252:	4604      	mov	r4, r0
    if (port >= HAL_GPIO_PORT_COUNT) {
 8008254:	dc19      	bgt.n	800828a <hal_gpio_init_out+0x42>
    hal_gpio_clk_enable(port);
 8008256:	4628      	mov	r0, r5
 8008258:	f7ff ff74 	bl	8008144 <hal_gpio_clk_enable>
    hal_gpio_write(pin, val);
 800825c:	4620      	mov	r0, r4
 800825e:	f7ff ffe1 	bl	8008224 <hal_gpio_write>
    cfg.Pin = GPIO_MASK(pin);
 8008262:	2301      	movs	r3, #1
 8008264:	f004 040f 	and.w	r4, r4, #15
 8008268:	fa03 f404 	lsl.w	r4, r3, r4
    cfg.Mode = GPIO_MODE_OUTPUT_PP;
 800826c:	e9cd 4300 	strd	r4, r3, [sp]
    cfg.Speed = GPIO_SPEED_FREQ_HIGH;
 8008270:	2400      	movs	r4, #0
 8008272:	2303      	movs	r3, #3
 8008274:	e9cd 4302 	strd	r4, r3, [sp, #8]
    HAL_GPIO_Init(portmap[port], &cfg);
 8008278:	4b05      	ldr	r3, [pc, #20]	; (8008290 <hal_gpio_init_out+0x48>)
 800827a:	4669      	mov	r1, sp
 800827c:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008280:	f000 f9de 	bl	8008640 <HAL_GPIO_Init>
    return 0;
 8008284:	4620      	mov	r0, r4
}
 8008286:	b005      	add	sp, #20
 8008288:	bd30      	pop	{r4, r5, pc}
        return -1;
 800828a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800828e:	e7fa      	b.n	8008286 <hal_gpio_init_out+0x3e>
 8008290:	0800e09c 	.word	0x0800e09c

08008294 <hal_gpio_read>:
{
    int port;
    uint32_t mcu_pin_mask;

    port = MCU_GPIO_PIN_PORT(pin);
    mcu_pin_mask = GPIO_MASK(pin);
 8008294:	2101      	movs	r1, #1
{
 8008296:	b508      	push	{r3, lr}
    mcu_pin_mask = GPIO_MASK(pin);
 8008298:	f000 030f 	and.w	r3, r0, #15
 800829c:	4099      	lsls	r1, r3
    return HAL_GPIO_ReadPin(portmap[port], mcu_pin_mask);
 800829e:	4b04      	ldr	r3, [pc, #16]	; (80082b0 <hal_gpio_read+0x1c>)
    port = MCU_GPIO_PIN_PORT(pin);
 80082a0:	f3c0 1003 	ubfx	r0, r0, #4, #4
    return HAL_GPIO_ReadPin(portmap[port], mcu_pin_mask);
 80082a4:	b289      	uxth	r1, r1
 80082a6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80082aa:	f000 fb19 	bl	80088e0 <HAL_GPIO_ReadPin>
}
 80082ae:	bd08      	pop	{r3, pc}
 80082b0:	0800e09c 	.word	0x0800e09c

080082b4 <hal_gpio_irq_enable>:
 *
 * @param pin
 */
void
hal_gpio_irq_enable(int pin)
{
 80082b4:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80082b6:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80082ba:	b672      	cpsid	i
    uint32_t ctx;
    uint32_t mask;

    mask = GPIO_MASK(pin);
 80082bc:	f000 030f 	and.w	r3, r0, #15
 80082c0:	2001      	movs	r0, #1

    __HAL_DISABLE_INTERRUPTS(ctx);
#if MYNEWT_VAL(MCU_STM32L4)
    EXTI->IMR1 |= mask;
#else
    EXTI->IMR |= mask;
 80082c2:	4a04      	ldr	r2, [pc, #16]	; (80082d4 <hal_gpio_irq_enable+0x20>)
    mask = GPIO_MASK(pin);
 80082c4:	4098      	lsls	r0, r3
    EXTI->IMR |= mask;
 80082c6:	6814      	ldr	r4, [r2, #0]
 80082c8:	4320      	orrs	r0, r4
 80082ca:	6010      	str	r0, [r2, #0]
#endif
    __HAL_ENABLE_INTERRUPTS(ctx);
 80082cc:	b901      	cbnz	r1, 80082d0 <hal_gpio_irq_enable+0x1c>
  __ASM volatile ("cpsie i" : : : "memory");
 80082ce:	b662      	cpsie	i
}
 80082d0:	bd10      	pop	{r4, pc}
 80082d2:	bf00      	nop
 80082d4:	40010400 	.word	0x40010400

080082d8 <hal_gpio_irq_disable>:
 *
 * @param pin
 */
void
hal_gpio_irq_disable(int pin)
{
 80082d8:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80082da:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80082de:	b672      	cpsid	i
    uint32_t ctx;
    uint32_t mask;

    mask = GPIO_MASK(pin);
 80082e0:	f000 020f 	and.w	r2, r0, #15
 80082e4:	2001      	movs	r0, #1
    __HAL_DISABLE_INTERRUPTS(ctx);
#if MYNEWT_VAL(MCU_STM32L4)
    EXTI->IMR1 |= mask;
#else
    EXTI->IMR &= ~mask;
 80082e6:	4904      	ldr	r1, [pc, #16]	; (80082f8 <hal_gpio_irq_disable+0x20>)
    mask = GPIO_MASK(pin);
 80082e8:	4090      	lsls	r0, r2
    EXTI->IMR &= ~mask;
 80082ea:	680b      	ldr	r3, [r1, #0]
 80082ec:	ea23 0000 	bic.w	r0, r3, r0
 80082f0:	6008      	str	r0, [r1, #0]
#endif
    __HAL_ENABLE_INTERRUPTS(ctx);
 80082f2:	b904      	cbnz	r4, 80082f6 <hal_gpio_irq_disable+0x1e>
  __ASM volatile ("cpsie i" : : : "memory");
 80082f4:	b662      	cpsie	i
}
 80082f6:	bd10      	pop	{r4, pc}
 80082f8:	40010400 	.word	0x40010400

080082fc <hal_gpio_irq_init>:
    switch (trig) {
 80082fc:	2b02      	cmp	r3, #2
{
 80082fe:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8008302:	4606      	mov	r6, r0
 8008304:	4688      	mov	r8, r1
 8008306:	4617      	mov	r7, r2
    switch (trig) {
 8008308:	d005      	beq.n	8008316 <hal_gpio_irq_init+0x1a>
 800830a:	2b03      	cmp	r3, #3
 800830c:	d026      	beq.n	800835c <hal_gpio_irq_init+0x60>
 800830e:	2b01      	cmp	r3, #1
 8008310:	d153      	bne.n	80083ba <hal_gpio_irq_init+0xbe>
        mode = GPIO_MODE_IT_RISING;
 8008312:	4d2b      	ldr	r5, [pc, #172]	; (80083c0 <hal_gpio_irq_init+0xc4>)
 8008314:	e000      	b.n	8008318 <hal_gpio_irq_init+0x1c>
        mode = GPIO_MODE_IT_FALLING;
 8008316:	4d2b      	ldr	r5, [pc, #172]	; (80083c4 <hal_gpio_irq_init+0xc8>)
        hal_gpio_irq_disable(pin);
 8008318:	4630      	mov	r0, r6
 800831a:	f7ff ffdd 	bl	80082d8 <hal_gpio_irq_disable>
        pin_mask = GPIO_MASK(pin);
 800831e:	2301      	movs	r3, #1
 8008320:	f006 040f 	and.w	r4, r6, #15
        __HAL_GPIO_EXTI_CLEAR_FLAG(pin_mask);
 8008324:	4a28      	ldr	r2, [pc, #160]	; (80083c8 <hal_gpio_irq_init+0xcc>)
        pin_mask = GPIO_MASK(pin);
 8008326:	40a3      	lsls	r3, r4
        __HAL_GPIO_EXTI_CLEAR_FLAG(pin_mask);
 8008328:	6153      	str	r3, [r2, #20]
        gpio_irq_handlers[index].isr = handler;
 800832a:	4b28      	ldr	r3, [pc, #160]	; (80083cc <hal_gpio_irq_init+0xd0>)
        rc = hal_gpio_init_stm(pin, &init_cfg);
 800832c:	4669      	mov	r1, sp
        gpio_irq_handlers[index].isr = handler;
 800832e:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
        gpio_irq_handlers[index].arg = arg;
 8008332:	f843 7034 	str.w	r7, [r3, r4, lsl #3]
        init_cfg.Pull = pull;
 8008336:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
        gpio_irq_handlers[index].isr = handler;
 800833a:	f8c2 8004 	str.w	r8, [r2, #4]
        rc = hal_gpio_init_stm(pin, &init_cfg);
 800833e:	4630      	mov	r0, r6
        init_cfg.Mode = mode;
 8008340:	9501      	str	r5, [sp, #4]
        init_cfg.Pull = pull;
 8008342:	9302      	str	r3, [sp, #8]
        rc = hal_gpio_init_stm(pin, &init_cfg);
 8008344:	f7ff ff3c 	bl	80081c0 <hal_gpio_init_stm>
        if (!rc) {
 8008348:	bb28      	cbnz	r0, 8008396 <hal_gpio_irq_init+0x9a>
    if (index <= 4) {
 800834a:	2c04      	cmp	r4, #4
 800834c:	dc08      	bgt.n	8008360 <hal_gpio_irq_init+0x64>
    switch (irqn) {
 800834e:	3c01      	subs	r4, #1
 8008350:	2c03      	cmp	r4, #3
 8008352:	d823      	bhi.n	800839c <hal_gpio_irq_init+0xa0>
 8008354:	e8df f004 	tbb	[pc, r4]
 8008358:	2e2b2825 	.word	0x2e2b2825
        mode = GPIO_MODE_IT_RISING_FALLING;
 800835c:	4d1c      	ldr	r5, [pc, #112]	; (80083d0 <hal_gpio_irq_init+0xd4>)
 800835e:	e7db      	b.n	8008318 <hal_gpio_irq_init+0x1c>
        isr = (uint32_t)&ext_irq15_10;
 8008360:	4b1c      	ldr	r3, [pc, #112]	; (80083d4 <hal_gpio_irq_init+0xd8>)
 8008362:	2c0a      	cmp	r4, #10
 8008364:	4a1c      	ldr	r2, [pc, #112]	; (80083d8 <hal_gpio_irq_init+0xdc>)
 8008366:	bfb2      	itee	lt
 8008368:	2317      	movlt	r3, #23
 800836a:	461a      	movge	r2, r3
 800836c:	2328      	movge	r3, #40	; 0x28
  uint32_t vectors = (uint32_t )SCB->VTOR;
 800836e:	4c1b      	ldr	r4, [pc, #108]	; (80083dc <hal_gpio_irq_init+0xe0>)
  return (uint32_t)(* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4));
 8008370:	f103 0110 	add.w	r1, r3, #16
  uint32_t vectors = (uint32_t )SCB->VTOR;
 8008374:	68a5      	ldr	r5, [r4, #8]
    if (NVIC_GetVector(irqn) != isr) {
 8008376:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 800837a:	42aa      	cmp	r2, r5
 800837c:	d00b      	beq.n	8008396 <hal_gpio_irq_init+0x9a>
  uint32_t vectors = (uint32_t )SCB->VTOR;
 800837e:	68a4      	ldr	r4, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 8008380:	f844 2021 	str.w	r2, [r4, r1, lsl #2]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008384:	2201      	movs	r2, #1
 8008386:	0959      	lsrs	r1, r3, #5
 8008388:	f003 031f 	and.w	r3, r3, #31
 800838c:	fa02 f303 	lsl.w	r3, r2, r3
 8008390:	4a13      	ldr	r2, [pc, #76]	; (80083e0 <hal_gpio_irq_init+0xe4>)
 8008392:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 8008396:	b004      	add	sp, #16
 8008398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        isr = (uint32_t)&ext_irq0;
 800839c:	4a11      	ldr	r2, [pc, #68]	; (80083e4 <hal_gpio_irq_init+0xe8>)
 800839e:	2306      	movs	r3, #6
 80083a0:	e7e5      	b.n	800836e <hal_gpio_irq_init+0x72>
        isr = (uint32_t)&ext_irq1;
 80083a2:	4a11      	ldr	r2, [pc, #68]	; (80083e8 <hal_gpio_irq_init+0xec>)
 80083a4:	2307      	movs	r3, #7
 80083a6:	e7e2      	b.n	800836e <hal_gpio_irq_init+0x72>
        isr = (uint32_t)&ext_irq2;
 80083a8:	4a10      	ldr	r2, [pc, #64]	; (80083ec <hal_gpio_irq_init+0xf0>)
 80083aa:	2308      	movs	r3, #8
 80083ac:	e7df      	b.n	800836e <hal_gpio_irq_init+0x72>
        isr = (uint32_t)&ext_irq3;
 80083ae:	4a10      	ldr	r2, [pc, #64]	; (80083f0 <hal_gpio_irq_init+0xf4>)
 80083b0:	2309      	movs	r3, #9
 80083b2:	e7dc      	b.n	800836e <hal_gpio_irq_init+0x72>
        isr = (uint32_t)&ext_irq4;
 80083b4:	4a0f      	ldr	r2, [pc, #60]	; (80083f4 <hal_gpio_irq_init+0xf8>)
 80083b6:	230a      	movs	r3, #10
 80083b8:	e7d9      	b.n	800836e <hal_gpio_irq_init+0x72>
        rc = -1;
 80083ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return rc;
 80083be:	e7ea      	b.n	8008396 <hal_gpio_irq_init+0x9a>
 80083c0:	10110000 	.word	0x10110000
 80083c4:	10210000 	.word	0x10210000
 80083c8:	40010400 	.word	0x40010400
 80083cc:	20002b70 	.word	0x20002b70
 80083d0:	10310000 	.word	0x10310000
 80083d4:	08008125 	.word	0x08008125
 80083d8:	080080f5 	.word	0x080080f5
 80083dc:	e000ed00 	.word	0xe000ed00
 80083e0:	e000e100 	.word	0xe000e100
 80083e4:	08008091 	.word	0x08008091
 80083e8:	080080a5 	.word	0x080080a5
 80083ec:	080080b9 	.word	0x080080b9
 80083f0:	080080cd 	.word	0x080080cd
 80083f4:	080080e1 	.word	0x080080e1

080083f8 <FLASH_SetErrorCode>:
  uint32_t flags = 0U;
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80083f8:	4a11      	ldr	r2, [pc, #68]	; (8008440 <FLASH_SetErrorCode+0x48>)
 80083fa:	68d3      	ldr	r3, [r2, #12]
 80083fc:	f013 0310 	ands.w	r3, r3, #16
 8008400:	d005      	beq.n	800840e <FLASH_SetErrorCode+0x16>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8008402:	4910      	ldr	r1, [pc, #64]	; (8008444 <FLASH_SetErrorCode+0x4c>)
 8008404:	69cb      	ldr	r3, [r1, #28]
 8008406:	f043 0302 	orr.w	r3, r3, #2
 800840a:	61cb      	str	r3, [r1, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 800840c:	2310      	movs	r3, #16
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800840e:	68d2      	ldr	r2, [r2, #12]
 8008410:	0750      	lsls	r0, r2, #29
 8008412:	d506      	bpl.n	8008422 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8008414:	490b      	ldr	r1, [pc, #44]	; (8008444 <FLASH_SetErrorCode+0x4c>)
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8008416:	f043 0304 	orr.w	r3, r3, #4
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800841a:	69ca      	ldr	r2, [r1, #28]
 800841c:	f042 0201 	orr.w	r2, r2, #1
 8008420:	61ca      	str	r2, [r1, #28]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8008422:	4a07      	ldr	r2, [pc, #28]	; (8008440 <FLASH_SetErrorCode+0x48>)
 8008424:	69d1      	ldr	r1, [r2, #28]
 8008426:	07c9      	lsls	r1, r1, #31
 8008428:	d508      	bpl.n	800843c <FLASH_SetErrorCode+0x44>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800842a:	4806      	ldr	r0, [pc, #24]	; (8008444 <FLASH_SetErrorCode+0x4c>)
 800842c:	69c1      	ldr	r1, [r0, #28]
 800842e:	f041 0104 	orr.w	r1, r1, #4
 8008432:	61c1      	str	r1, [r0, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8008434:	69d1      	ldr	r1, [r2, #28]
 8008436:	f021 0101 	bic.w	r1, r1, #1
 800843a:	61d1      	str	r1, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800843c:	60d3      	str	r3, [r2, #12]
}  
 800843e:	4770      	bx	lr
 8008440:	40022000 	.word	0x40022000
 8008444:	20003c60 	.word	0x20003c60

08008448 <HAL_FLASH_Unlock>:
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 8008448:	4b06      	ldr	r3, [pc, #24]	; (8008464 <HAL_FLASH_Unlock+0x1c>)
 800844a:	691a      	ldr	r2, [r3, #16]
 800844c:	0612      	lsls	r2, r2, #24
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800844e:	bf41      	itttt	mi
 8008450:	4a05      	ldrmi	r2, [pc, #20]	; (8008468 <HAL_FLASH_Unlock+0x20>)
  return HAL_OK; 
 8008452:	2000      	movmi	r0, #0
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8008454:	605a      	strmi	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8008456:	f102 3288 	addmi.w	r2, r2, #2290649224	; 0x88888888
 800845a:	bf4c      	ite	mi
 800845c:	605a      	strmi	r2, [r3, #4]
    return HAL_ERROR;
 800845e:	2001      	movpl	r0, #1
}
 8008460:	4770      	bx	lr
 8008462:	bf00      	nop
 8008464:	40022000 	.word	0x40022000
 8008468:	45670123 	.word	0x45670123

0800846c <FLASH_WaitForLastOperation>:
{
 800846c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800846e:	4606      	mov	r6, r0
  uint32_t tickstart = HAL_GetTick();
 8008470:	f7ff f976 	bl	8007760 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8008474:	4c11      	ldr	r4, [pc, #68]	; (80084bc <FLASH_WaitForLastOperation+0x50>)
  uint32_t tickstart = HAL_GetTick();
 8008476:	4607      	mov	r7, r0
 8008478:	4625      	mov	r5, r4
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800847a:	68e3      	ldr	r3, [r4, #12]
 800847c:	07d8      	lsls	r0, r3, #31
 800847e:	d412      	bmi.n	80084a6 <FLASH_WaitForLastOperation+0x3a>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8008480:	68e3      	ldr	r3, [r4, #12]
 8008482:	0699      	lsls	r1, r3, #26
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8008484:	bf44      	itt	mi
 8008486:	2320      	movmi	r3, #32
 8008488:	60e3      	strmi	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800848a:	68eb      	ldr	r3, [r5, #12]
 800848c:	06da      	lsls	r2, r3, #27
 800848e:	d406      	bmi.n	800849e <FLASH_WaitForLastOperation+0x32>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8008490:	69eb      	ldr	r3, [r5, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8008492:	07db      	lsls	r3, r3, #31
 8008494:	d403      	bmi.n	800849e <FLASH_WaitForLastOperation+0x32>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8008496:	68e8      	ldr	r0, [r5, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8008498:	f010 0004 	ands.w	r0, r0, #4
 800849c:	d007      	beq.n	80084ae <FLASH_WaitForLastOperation+0x42>
    FLASH_SetErrorCode();
 800849e:	f7ff ffab 	bl	80083f8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80084a2:	2001      	movs	r0, #1
 80084a4:	e003      	b.n	80084ae <FLASH_WaitForLastOperation+0x42>
    if (Timeout != HAL_MAX_DELAY)
 80084a6:	1c73      	adds	r3, r6, #1
 80084a8:	d0e7      	beq.n	800847a <FLASH_WaitForLastOperation+0xe>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80084aa:	b90e      	cbnz	r6, 80084b0 <FLASH_WaitForLastOperation+0x44>
        return HAL_TIMEOUT;
 80084ac:	2003      	movs	r0, #3
}
 80084ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80084b0:	f7ff f956 	bl	8007760 <HAL_GetTick>
 80084b4:	1bc0      	subs	r0, r0, r7
 80084b6:	42b0      	cmp	r0, r6
 80084b8:	d9df      	bls.n	800847a <FLASH_WaitForLastOperation+0xe>
 80084ba:	e7f7      	b.n	80084ac <FLASH_WaitForLastOperation+0x40>
 80084bc:	40022000 	.word	0x40022000

080084c0 <HAL_FLASH_Program>:
{
 80084c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_LOCK(&pFlash);
 80084c4:	4c24      	ldr	r4, [pc, #144]	; (8008558 <HAL_FLASH_Program+0x98>)
{
 80084c6:	461e      	mov	r6, r3
  __HAL_LOCK(&pFlash);
 80084c8:	7e23      	ldrb	r3, [r4, #24]
{
 80084ca:	4605      	mov	r5, r0
  __HAL_LOCK(&pFlash);
 80084cc:	2b01      	cmp	r3, #1
{
 80084ce:	460f      	mov	r7, r1
 80084d0:	4690      	mov	r8, r2
  __HAL_LOCK(&pFlash);
 80084d2:	d03f      	beq.n	8008554 <HAL_FLASH_Program+0x94>
 80084d4:	2301      	movs	r3, #1
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80084d6:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 80084da:	7623      	strb	r3, [r4, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80084dc:	f7ff ffc6 	bl	800846c <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 80084e0:	bba0      	cbnz	r0, 800854c <HAL_FLASH_Program+0x8c>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80084e2:	2d01      	cmp	r5, #1
 80084e4:	d003      	beq.n	80084ee <HAL_FLASH_Program+0x2e>
      nbiterations = 4U;
 80084e6:	2d02      	cmp	r5, #2
 80084e8:	bf0c      	ite	eq
 80084ea:	2502      	moveq	r5, #2
 80084ec:	2504      	movne	r5, #4
 80084ee:	f04f 0900 	mov.w	r9, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80084f2:	46cb      	mov	fp, r9
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80084f4:	f8df a064 	ldr.w	sl, [pc, #100]	; 800855c <HAL_FLASH_Program+0x9c>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80084f8:	ea4f 1309 	mov.w	r3, r9, lsl #4
 80084fc:	f1c3 0120 	rsb	r1, r3, #32
 8008500:	f1a3 0220 	sub.w	r2, r3, #32
 8008504:	fa06 f101 	lsl.w	r1, r6, r1
 8008508:	fa28 f303 	lsr.w	r3, r8, r3
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800850c:	f8c4 b01c 	str.w	fp, [r4, #28]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8008510:	430b      	orrs	r3, r1
 8008512:	fa26 f202 	lsr.w	r2, r6, r2
 8008516:	4313      	orrs	r3, r2
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8008518:	f8da 2010 	ldr.w	r2, [sl, #16]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800851c:	b29b      	uxth	r3, r3
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800851e:	f042 0201 	orr.w	r2, r2, #1
 8008522:	f8ca 2010 	str.w	r2, [sl, #16]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8008526:	f24c 3050 	movw	r0, #50000	; 0xc350
  *(__IO uint16_t*)Address = Data;
 800852a:	f827 3019 	strh.w	r3, [r7, r9, lsl #1]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800852e:	f7ff ff9d 	bl	800846c <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8008532:	f8da 3010 	ldr.w	r3, [sl, #16]
 8008536:	f023 0301 	bic.w	r3, r3, #1
 800853a:	f8ca 3010 	str.w	r3, [sl, #16]
      if (status != HAL_OK)
 800853e:	b928      	cbnz	r0, 800854c <HAL_FLASH_Program+0x8c>
 8008540:	f109 0901 	add.w	r9, r9, #1
    for (index = 0U; index < nbiterations; index++)
 8008544:	fa5f f389 	uxtb.w	r3, r9
 8008548:	429d      	cmp	r5, r3
 800854a:	d8d5      	bhi.n	80084f8 <HAL_FLASH_Program+0x38>
  __HAL_UNLOCK(&pFlash);
 800854c:	2300      	movs	r3, #0
 800854e:	7623      	strb	r3, [r4, #24]
}
 8008550:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_LOCK(&pFlash);
 8008554:	2002      	movs	r0, #2
 8008556:	e7fb      	b.n	8008550 <HAL_FLASH_Program+0x90>
 8008558:	20003c60 	.word	0x20003c60
 800855c:	40022000 	.word	0x40022000

08008560 <FLASH_MassErase.isra.0>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8008560:	2200      	movs	r2, #0
 8008562:	4b06      	ldr	r3, [pc, #24]	; (800857c <FLASH_MassErase.isra.0+0x1c>)
 8008564:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8008566:	4b06      	ldr	r3, [pc, #24]	; (8008580 <FLASH_MassErase.isra.0+0x20>)
 8008568:	691a      	ldr	r2, [r3, #16]
 800856a:	f042 0204 	orr.w	r2, r2, #4
 800856e:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8008570:	691a      	ldr	r2, [r3, #16]
 8008572:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008576:	611a      	str	r2, [r3, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8008578:	4770      	bx	lr
 800857a:	bf00      	nop
 800857c:	20003c60 	.word	0x20003c60
 8008580:	40022000 	.word	0x40022000

08008584 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8008584:	2200      	movs	r2, #0
 8008586:	4b06      	ldr	r3, [pc, #24]	; (80085a0 <FLASH_PageErase+0x1c>)
 8008588:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800858a:	4b06      	ldr	r3, [pc, #24]	; (80085a4 <FLASH_PageErase+0x20>)
 800858c:	691a      	ldr	r2, [r3, #16]
 800858e:	f042 0202 	orr.w	r2, r2, #2
 8008592:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8008594:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8008596:	691a      	ldr	r2, [r3, #16]
 8008598:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800859c:	611a      	str	r2, [r3, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800859e:	4770      	bx	lr
 80085a0:	20003c60 	.word	0x20003c60
 80085a4:	40022000 	.word	0x40022000

080085a8 <HAL_FLASHEx_Erase>:
{
 80085a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 80085ac:	4d22      	ldr	r5, [pc, #136]	; (8008638 <HAL_FLASHEx_Erase+0x90>)
{
 80085ae:	4607      	mov	r7, r0
  __HAL_LOCK(&pFlash);
 80085b0:	7e2b      	ldrb	r3, [r5, #24]
{
 80085b2:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 80085b4:	2b01      	cmp	r3, #1
 80085b6:	d03d      	beq.n	8008634 <HAL_FLASHEx_Erase+0x8c>
 80085b8:	2401      	movs	r4, #1
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80085ba:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(&pFlash);
 80085bc:	762c      	strb	r4, [r5, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80085be:	2b02      	cmp	r3, #2
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80085c0:	f24c 3050 	movw	r0, #50000	; 0xc350
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80085c4:	d113      	bne.n	80085ee <HAL_FLASHEx_Erase+0x46>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80085c6:	f7ff ff51 	bl	800846c <FLASH_WaitForLastOperation>
 80085ca:	b120      	cbz	r0, 80085d6 <HAL_FLASHEx_Erase+0x2e>
  HAL_StatusTypeDef status = HAL_ERROR;
 80085cc:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 80085ce:	2300      	movs	r3, #0
 80085d0:	762b      	strb	r3, [r5, #24]
}
 80085d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        FLASH_MassErase(FLASH_BANK_1);
 80085d6:	f7ff ffc3 	bl	8008560 <FLASH_MassErase.isra.0>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80085da:	f24c 3050 	movw	r0, #50000	; 0xc350
 80085de:	f7ff ff45 	bl	800846c <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80085e2:	4a16      	ldr	r2, [pc, #88]	; (800863c <HAL_FLASHEx_Erase+0x94>)
 80085e4:	6913      	ldr	r3, [r2, #16]
 80085e6:	f023 0304 	bic.w	r3, r3, #4
 80085ea:	6113      	str	r3, [r2, #16]
 80085ec:	e7ef      	b.n	80085ce <HAL_FLASHEx_Erase+0x26>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80085ee:	f7ff ff3d 	bl	800846c <FLASH_WaitForLastOperation>
 80085f2:	2800      	cmp	r0, #0
 80085f4:	d1ea      	bne.n	80085cc <HAL_FLASHEx_Erase+0x24>
        *PageError = 0xFFFFFFFFU;
 80085f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80085fa:	f8c8 3000 	str.w	r3, [r8]
  HAL_StatusTypeDef status = HAL_ERROR;
 80085fe:	4620      	mov	r0, r4
        for(address = pEraseInit->PageAddress;
 8008600:	68be      	ldr	r6, [r7, #8]
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8008602:	4c0e      	ldr	r4, [pc, #56]	; (800863c <HAL_FLASHEx_Erase+0x94>)
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8008604:	e9d7 3202 	ldrd	r3, r2, [r7, #8]
 8008608:	eb03 2382 	add.w	r3, r3, r2, lsl #10
        for(address = pEraseInit->PageAddress;
 800860c:	42b3      	cmp	r3, r6
 800860e:	d9de      	bls.n	80085ce <HAL_FLASHEx_Erase+0x26>
          FLASH_PageErase(address);
 8008610:	4630      	mov	r0, r6
 8008612:	f7ff ffb7 	bl	8008584 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008616:	f24c 3050 	movw	r0, #50000	; 0xc350
 800861a:	f7ff ff27 	bl	800846c <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800861e:	6923      	ldr	r3, [r4, #16]
 8008620:	f023 0302 	bic.w	r3, r3, #2
 8008624:	6123      	str	r3, [r4, #16]
          if (status != HAL_OK)
 8008626:	b110      	cbz	r0, 800862e <HAL_FLASHEx_Erase+0x86>
            *PageError = address;
 8008628:	f8c8 6000 	str.w	r6, [r8]
            break;
 800862c:	e7cf      	b.n	80085ce <HAL_FLASHEx_Erase+0x26>
            address += FLASH_PAGE_SIZE)
 800862e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8008632:	e7e7      	b.n	8008604 <HAL_FLASHEx_Erase+0x5c>
  __HAL_LOCK(&pFlash);
 8008634:	2002      	movs	r0, #2
 8008636:	e7cc      	b.n	80085d2 <HAL_FLASHEx_Erase+0x2a>
 8008638:	20003c60 	.word	0x20003c60
 800863c:	40022000 	.word	0x40022000

08008640 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008640:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8008644:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8008646:	4616      	mov	r6, r2
 8008648:	4b65      	ldr	r3, [pc, #404]	; (80087e0 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800864a:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 80087f0 <HAL_GPIO_Init+0x1b0>
 800864e:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 80087f4 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 8008652:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008656:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 8008658:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800865c:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8008660:	45a0      	cmp	r8, r4
 8008662:	d17e      	bne.n	8008762 <HAL_GPIO_Init+0x122>
      switch (GPIO_Init->Mode)
 8008664:	684d      	ldr	r5, [r1, #4]
 8008666:	2d12      	cmp	r5, #18
 8008668:	f000 80ae 	beq.w	80087c8 <HAL_GPIO_Init+0x188>
 800866c:	f200 8087 	bhi.w	800877e <HAL_GPIO_Init+0x13e>
 8008670:	2d02      	cmp	r5, #2
 8008672:	f000 80a6 	beq.w	80087c2 <HAL_GPIO_Init+0x182>
 8008676:	d87b      	bhi.n	8008770 <HAL_GPIO_Init+0x130>
 8008678:	2d00      	cmp	r5, #0
 800867a:	f000 808d 	beq.w	8008798 <HAL_GPIO_Init+0x158>
 800867e:	2d01      	cmp	r5, #1
 8008680:	f000 809d 	beq.w	80087be <HAL_GPIO_Init+0x17e>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 8008684:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8008688:	2cff      	cmp	r4, #255	; 0xff
 800868a:	bf93      	iteet	ls
 800868c:	4682      	movls	sl, r0
 800868e:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8008692:	3d08      	subhi	r5, #8
 8008694:	f8d0 b000 	ldrls.w	fp, [r0]
 8008698:	bf92      	itee	ls
 800869a:	00b5      	lslls	r5, r6, #2
 800869c:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 80086a0:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 80086a2:	fa09 f805 	lsl.w	r8, r9, r5
 80086a6:	ea2b 0808 	bic.w	r8, fp, r8
 80086aa:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80086ae:	bf88      	it	hi
 80086b0:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 80086b4:	ea48 0505 	orr.w	r5, r8, r5
 80086b8:	f8ca 5000 	str.w	r5, [sl]
      
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80086bc:	f8d1 a004 	ldr.w	sl, [r1, #4]
 80086c0:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 80086c4:	d04d      	beq.n	8008762 <HAL_GPIO_Init+0x122>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80086c6:	4f47      	ldr	r7, [pc, #284]	; (80087e4 <HAL_GPIO_Init+0x1a4>)
 80086c8:	f026 0803 	bic.w	r8, r6, #3
 80086cc:	69bd      	ldr	r5, [r7, #24]
 80086ce:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80086d2:	f045 0501 	orr.w	r5, r5, #1
 80086d6:	61bd      	str	r5, [r7, #24]
 80086d8:	69bd      	ldr	r5, [r7, #24]
 80086da:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 80086de:	f005 0501 	and.w	r5, r5, #1
 80086e2:	9501      	str	r5, [sp, #4]
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80086e4:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80086e8:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80086ea:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 80086ee:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80086f2:	fa09 f90b 	lsl.w	r9, r9, fp
 80086f6:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80086fa:	4d3b      	ldr	r5, [pc, #236]	; (80087e8 <HAL_GPIO_Init+0x1a8>)
 80086fc:	42a8      	cmp	r0, r5
 80086fe:	d068      	beq.n	80087d2 <HAL_GPIO_Init+0x192>
 8008700:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008704:	42a8      	cmp	r0, r5
 8008706:	d066      	beq.n	80087d6 <HAL_GPIO_Init+0x196>
 8008708:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800870c:	42a8      	cmp	r0, r5
 800870e:	d064      	beq.n	80087da <HAL_GPIO_Init+0x19a>
 8008710:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008714:	42a8      	cmp	r0, r5
 8008716:	bf0c      	ite	eq
 8008718:	2503      	moveq	r5, #3
 800871a:	2504      	movne	r5, #4
 800871c:	fa05 f50b 	lsl.w	r5, r5, fp
 8008720:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 8008724:	f8c8 5008 	str.w	r5, [r8, #8]
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 8008728:	681d      	ldr	r5, [r3, #0]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800872a:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent); 
 800872e:	bf14      	ite	ne
 8008730:	4325      	orrne	r5, r4
        } 
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
 8008732:	43a5      	biceq	r5, r4
 8008734:	601d      	str	r5, [r3, #0]
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 8008736:	685d      	ldr	r5, [r3, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008738:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent); 
 800873c:	bf14      	ite	ne
 800873e:	4325      	orrne	r5, r4
        } 
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
 8008740:	43a5      	biceq	r5, r4
 8008742:	605d      	str	r5, [r3, #4]
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 8008744:	689d      	ldr	r5, [r3, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008746:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent); 
 800874a:	bf14      	ite	ne
 800874c:	4325      	orrne	r5, r4
        } 
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
 800874e:	43a5      	biceq	r5, r4
 8008750:	609d      	str	r5, [r3, #8]
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 8008752:	68dd      	ldr	r5, [r3, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008754:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent); 
 8008758:	bf14      	ite	ne
 800875a:	432c      	orrne	r4, r5
        } 
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
 800875c:	ea25 0404 	biceq.w	r4, r5, r4
 8008760:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8008762:	3601      	adds	r6, #1
 8008764:	2e10      	cmp	r6, #16
 8008766:	f47f af74 	bne.w	8008652 <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 800876a:	b003      	add	sp, #12
 800876c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8008770:	2d03      	cmp	r5, #3
 8008772:	d022      	beq.n	80087ba <HAL_GPIO_Init+0x17a>
 8008774:	2d11      	cmp	r5, #17
 8008776:	d185      	bne.n	8008684 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8008778:	68ca      	ldr	r2, [r1, #12]
 800877a:	3204      	adds	r2, #4
          break;
 800877c:	e782      	b.n	8008684 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 800877e:	4f1b      	ldr	r7, [pc, #108]	; (80087ec <HAL_GPIO_Init+0x1ac>)
 8008780:	42bd      	cmp	r5, r7
 8008782:	d009      	beq.n	8008798 <HAL_GPIO_Init+0x158>
 8008784:	d812      	bhi.n	80087ac <HAL_GPIO_Init+0x16c>
 8008786:	f8df 9070 	ldr.w	r9, [pc, #112]	; 80087f8 <HAL_GPIO_Init+0x1b8>
 800878a:	454d      	cmp	r5, r9
 800878c:	d004      	beq.n	8008798 <HAL_GPIO_Init+0x158>
 800878e:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8008792:	454d      	cmp	r5, r9
 8008794:	f47f af76 	bne.w	8008684 <HAL_GPIO_Init+0x44>
          if(GPIO_Init->Pull == GPIO_NOPULL)
 8008798:	688a      	ldr	r2, [r1, #8]
 800879a:	b1c2      	cbz	r2, 80087ce <HAL_GPIO_Init+0x18e>
          else if(GPIO_Init->Pull == GPIO_PULLUP)
 800879c:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 800879e:	bf0c      	ite	eq
 80087a0:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 80087a4:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80087a8:	2208      	movs	r2, #8
 80087aa:	e76b      	b.n	8008684 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 80087ac:	4565      	cmp	r5, ip
 80087ae:	d0f3      	beq.n	8008798 <HAL_GPIO_Init+0x158>
 80087b0:	4575      	cmp	r5, lr
 80087b2:	d0f1      	beq.n	8008798 <HAL_GPIO_Init+0x158>
 80087b4:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80087fc <HAL_GPIO_Init+0x1bc>
 80087b8:	e7eb      	b.n	8008792 <HAL_GPIO_Init+0x152>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80087ba:	2200      	movs	r2, #0
 80087bc:	e762      	b.n	8008684 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80087be:	68ca      	ldr	r2, [r1, #12]
          break;
 80087c0:	e760      	b.n	8008684 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80087c2:	68ca      	ldr	r2, [r1, #12]
 80087c4:	3208      	adds	r2, #8
          break;
 80087c6:	e75d      	b.n	8008684 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80087c8:	68ca      	ldr	r2, [r1, #12]
 80087ca:	320c      	adds	r2, #12
          break;
 80087cc:	e75a      	b.n	8008684 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80087ce:	2204      	movs	r2, #4
 80087d0:	e758      	b.n	8008684 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80087d2:	2500      	movs	r5, #0
 80087d4:	e7a2      	b.n	800871c <HAL_GPIO_Init+0xdc>
 80087d6:	2501      	movs	r5, #1
 80087d8:	e7a0      	b.n	800871c <HAL_GPIO_Init+0xdc>
 80087da:	2502      	movs	r5, #2
 80087dc:	e79e      	b.n	800871c <HAL_GPIO_Init+0xdc>
 80087de:	bf00      	nop
 80087e0:	40010400 	.word	0x40010400
 80087e4:	40021000 	.word	0x40021000
 80087e8:	40010800 	.word	0x40010800
 80087ec:	10210000 	.word	0x10210000
 80087f0:	10310000 	.word	0x10310000
 80087f4:	10320000 	.word	0x10320000
 80087f8:	10110000 	.word	0x10110000
 80087fc:	10220000 	.word	0x10220000

08008800 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{ 
 8008800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 8008804:	2200      	movs	r2, #0

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1U << position);
 8008806:	f04f 0901 	mov.w	r9, #1
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
      
      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), GPIO_CRL_CNF0_0 << registeroffset);
 800880a:	f04f 0e0f 	mov.w	lr, #15
 800880e:	f04f 0a04 	mov.w	sl, #4
      {
        tmp = 0x0FU << (4U * (position & 0x03U));
        CLEAR_BIT(AFIO->EXTICR[position >> 2U], tmp);
          
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8008812:	4c30      	ldr	r4, [pc, #192]	; (80088d4 <HAL_GPIO_DeInit+0xd4>)
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8008814:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 80088dc <HAL_GPIO_DeInit+0xdc>
  while ((GPIO_Pin >> position) != 0U)
 8008818:	fa31 f302 	lsrs.w	r3, r1, r2
 800881c:	d101      	bne.n	8008822 <HAL_GPIO_DeInit+0x22>
      }
    }
    
    position++;
  }
}
 800881e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Pin) & (1U << position);
 8008822:	fa09 f302 	lsl.w	r3, r9, r2
    if (iocurrent)
 8008826:	400b      	ands	r3, r1
 8008828:	d04c      	beq.n	80088c4 <HAL_GPIO_DeInit+0xc4>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800882a:	2bff      	cmp	r3, #255	; 0xff
 800882c:	bf98      	it	ls
 800882e:	4607      	movls	r7, r0
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8008830:	ea6f 0303 	mvn.w	r3, r3
 8008834:	bf85      	ittet	hi
 8008836:	f102 4580 	addhi.w	r5, r2, #1073741824	; 0x40000000
 800883a:	3d08      	subhi	r5, #8
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800883c:	f8d0 c000 	ldrls.w	ip, [r0]
 8008840:	f8d0 c004 	ldrhi.w	ip, [r0, #4]
 8008844:	bf94      	ite	ls
 8008846:	0095      	lslls	r5, r2, #2
 8008848:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), GPIO_CRL_CNF0_0 << registeroffset);
 800884a:	fa0e f605 	lsl.w	r6, lr, r5
 800884e:	ea2c 0606 	bic.w	r6, ip, r6
 8008852:	fa0a f505 	lsl.w	r5, sl, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8008856:	bf88      	it	hi
 8008858:	1d07      	addhi	r7, r0, #4
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), GPIO_CRL_CNF0_0 << registeroffset);
 800885a:	432e      	orrs	r6, r5
 800885c:	603e      	str	r6, [r7, #0]
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 800885e:	68c5      	ldr	r5, [r0, #12]
      tmp &= 0x0FU << (4U * (position & 0x03U));
 8008860:	f002 0703 	and.w	r7, r2, #3
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8008864:	401d      	ands	r5, r3
 8008866:	60c5      	str	r5, [r0, #12]
 8008868:	f022 0503 	bic.w	r5, r2, #3
 800886c:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8008870:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
      tmp = AFIO->EXTICR[position >> 2U];
 8008874:	68ae      	ldr	r6, [r5, #8]
      tmp &= 0x0FU << (4U * (position & 0x03U));
 8008876:	00bf      	lsls	r7, r7, #2
 8008878:	fa0e f807 	lsl.w	r8, lr, r7
 800887c:	ea08 0c06 	and.w	ip, r8, r6
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8008880:	4e15      	ldr	r6, [pc, #84]	; (80088d8 <HAL_GPIO_DeInit+0xd8>)
 8008882:	42b0      	cmp	r0, r6
 8008884:	d020      	beq.n	80088c8 <HAL_GPIO_DeInit+0xc8>
 8008886:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800888a:	42b0      	cmp	r0, r6
 800888c:	d01e      	beq.n	80088cc <HAL_GPIO_DeInit+0xcc>
 800888e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8008892:	42b0      	cmp	r0, r6
 8008894:	d01c      	beq.n	80088d0 <HAL_GPIO_DeInit+0xd0>
 8008896:	4558      	cmp	r0, fp
 8008898:	bf0c      	ite	eq
 800889a:	2603      	moveq	r6, #3
 800889c:	2604      	movne	r6, #4
 800889e:	40be      	lsls	r6, r7
 80088a0:	4566      	cmp	r6, ip
 80088a2:	d10f      	bne.n	80088c4 <HAL_GPIO_DeInit+0xc4>
        CLEAR_BIT(AFIO->EXTICR[position >> 2U], tmp);
 80088a4:	68ae      	ldr	r6, [r5, #8]
 80088a6:	ea26 0608 	bic.w	r6, r6, r8
 80088aa:	60ae      	str	r6, [r5, #8]
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80088ac:	6825      	ldr	r5, [r4, #0]
 80088ae:	401d      	ands	r5, r3
 80088b0:	6025      	str	r5, [r4, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80088b2:	6865      	ldr	r5, [r4, #4]
 80088b4:	401d      	ands	r5, r3
 80088b6:	6065      	str	r5, [r4, #4]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80088b8:	68a5      	ldr	r5, [r4, #8]
 80088ba:	401d      	ands	r5, r3
 80088bc:	60a5      	str	r5, [r4, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80088be:	68e5      	ldr	r5, [r4, #12]
 80088c0:	402b      	ands	r3, r5
 80088c2:	60e3      	str	r3, [r4, #12]
    position++;
 80088c4:	3201      	adds	r2, #1
 80088c6:	e7a7      	b.n	8008818 <HAL_GPIO_DeInit+0x18>
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80088c8:	2600      	movs	r6, #0
 80088ca:	e7e8      	b.n	800889e <HAL_GPIO_DeInit+0x9e>
 80088cc:	2601      	movs	r6, #1
 80088ce:	e7e6      	b.n	800889e <HAL_GPIO_DeInit+0x9e>
 80088d0:	2602      	movs	r6, #2
 80088d2:	e7e4      	b.n	800889e <HAL_GPIO_DeInit+0x9e>
 80088d4:	40010400 	.word	0x40010400
 80088d8:	40010800 	.word	0x40010800
 80088dc:	40011400 	.word	0x40011400

080088e0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80088e0:	6883      	ldr	r3, [r0, #8]
 80088e2:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80088e4:	bf14      	ite	ne
 80088e6:	2001      	movne	r0, #1
 80088e8:	2000      	moveq	r0, #0
 80088ea:	4770      	bx	lr

080088ec <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80088ec:	b10a      	cbz	r2, 80088f2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80088ee:	6101      	str	r1, [r0, #16]
  }
}
 80088f0:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80088f2:	0409      	lsls	r1, r1, #16
 80088f4:	e7fb      	b.n	80088ee <HAL_GPIO_WritePin+0x2>

080088f6 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80088f6:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if(hiwdg == NULL)
 80088f8:	4604      	mov	r4, r0
 80088fa:	b1d8      	cbz	r0, 8008934 <HAL_IWDG_Init+0x3e>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automaticaly */
  __HAL_IWDG_START(hiwdg);
 80088fc:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8008900:	6803      	ldr	r3, [r0, #0]
 8008902:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing 0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8008904:	f245 5255 	movw	r2, #21845	; 0x5555
 8008908:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800890a:	6842      	ldr	r2, [r0, #4]
 800890c:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800890e:	6882      	ldr	r2, [r0, #8]
 8008910:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8008912:	f7fe ff25 	bl	8007760 <HAL_GetTick>
 8008916:	4605      	mov	r5, r0

  /* Wait for register to be updated */
  while(hiwdg->Instance->SR != RESET)
 8008918:	6823      	ldr	r3, [r4, #0]
 800891a:	68d8      	ldr	r0, [r3, #12]
 800891c:	b918      	cbnz	r0, 8008926 <HAL_IWDG_Init+0x30>
      return HAL_TIMEOUT;
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800891e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8008922:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 8008924:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > HAL_IWDG_DEFAULT_TIMEOUT)
 8008926:	f7fe ff1b 	bl	8007760 <HAL_GetTick>
 800892a:	1b40      	subs	r0, r0, r5
 800892c:	2830      	cmp	r0, #48	; 0x30
 800892e:	d9f3      	bls.n	8008918 <HAL_IWDG_Init+0x22>
      return HAL_TIMEOUT;
 8008930:	2003      	movs	r0, #3
 8008932:	e7f7      	b.n	8008924 <HAL_IWDG_Init+0x2e>
    return HAL_ERROR;
 8008934:	2001      	movs	r0, #1
 8008936:	e7f5      	b.n	8008924 <HAL_IWDG_Init+0x2e>

08008938 <HAL_IWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8008938:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800893c:	6803      	ldr	r3, [r0, #0]

  /* Return function status */
  return HAL_OK;
}
 800893e:	2000      	movs	r0, #0
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8008940:	601a      	str	r2, [r3, #0]
}
 8008942:	4770      	bx	lr

08008944 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008944:	6803      	ldr	r3, [r0, #0]
{
 8008946:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800894a:	07db      	lsls	r3, r3, #31
{
 800894c:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800894e:	d410      	bmi.n	8008972 <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008950:	682b      	ldr	r3, [r5, #0]
 8008952:	079f      	lsls	r7, r3, #30
 8008954:	d45e      	bmi.n	8008a14 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008956:	682b      	ldr	r3, [r5, #0]
 8008958:	0719      	lsls	r1, r3, #28
 800895a:	f100 8095 	bmi.w	8008a88 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800895e:	682b      	ldr	r3, [r5, #0]
 8008960:	075a      	lsls	r2, r3, #29
 8008962:	f100 80bf 	bmi.w	8008ae4 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008966:	69ea      	ldr	r2, [r5, #28]
 8008968:	2a00      	cmp	r2, #0
 800896a:	f040 812d 	bne.w	8008bc8 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 800896e:	2000      	movs	r0, #0
 8008970:	e014      	b.n	800899c <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8008972:	4c90      	ldr	r4, [pc, #576]	; (8008bb4 <HAL_RCC_OscConfig+0x270>)
 8008974:	6863      	ldr	r3, [r4, #4]
 8008976:	f003 030c 	and.w	r3, r3, #12
 800897a:	2b04      	cmp	r3, #4
 800897c:	d007      	beq.n	800898e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800897e:	6863      	ldr	r3, [r4, #4]
 8008980:	f003 030c 	and.w	r3, r3, #12
 8008984:	2b08      	cmp	r3, #8
 8008986:	d10c      	bne.n	80089a2 <HAL_RCC_OscConfig+0x5e>
 8008988:	6863      	ldr	r3, [r4, #4]
 800898a:	03de      	lsls	r6, r3, #15
 800898c:	d509      	bpl.n	80089a2 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800898e:	6823      	ldr	r3, [r4, #0]
 8008990:	039c      	lsls	r4, r3, #14
 8008992:	d5dd      	bpl.n	8008950 <HAL_RCC_OscConfig+0xc>
 8008994:	686b      	ldr	r3, [r5, #4]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d1da      	bne.n	8008950 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 800899a:	2001      	movs	r0, #1
}
 800899c:	b002      	add	sp, #8
 800899e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80089a2:	686b      	ldr	r3, [r5, #4]
 80089a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089a8:	d110      	bne.n	80089cc <HAL_RCC_OscConfig+0x88>
 80089aa:	6823      	ldr	r3, [r4, #0]
 80089ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80089b0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80089b2:	f7fe fed5 	bl	8007760 <HAL_GetTick>
 80089b6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80089b8:	6823      	ldr	r3, [r4, #0]
 80089ba:	0398      	lsls	r0, r3, #14
 80089bc:	d4c8      	bmi.n	8008950 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80089be:	f7fe fecf 	bl	8007760 <HAL_GetTick>
 80089c2:	1b80      	subs	r0, r0, r6
 80089c4:	2864      	cmp	r0, #100	; 0x64
 80089c6:	d9f7      	bls.n	80089b8 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 80089c8:	2003      	movs	r0, #3
 80089ca:	e7e7      	b.n	800899c <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80089cc:	b99b      	cbnz	r3, 80089f6 <HAL_RCC_OscConfig+0xb2>
 80089ce:	6823      	ldr	r3, [r4, #0]
 80089d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80089d4:	6023      	str	r3, [r4, #0]
 80089d6:	6823      	ldr	r3, [r4, #0]
 80089d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80089dc:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80089de:	f7fe febf 	bl	8007760 <HAL_GetTick>
 80089e2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80089e4:	6823      	ldr	r3, [r4, #0]
 80089e6:	0399      	lsls	r1, r3, #14
 80089e8:	d5b2      	bpl.n	8008950 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80089ea:	f7fe feb9 	bl	8007760 <HAL_GetTick>
 80089ee:	1b80      	subs	r0, r0, r6
 80089f0:	2864      	cmp	r0, #100	; 0x64
 80089f2:	d9f7      	bls.n	80089e4 <HAL_RCC_OscConfig+0xa0>
 80089f4:	e7e8      	b.n	80089c8 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80089f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80089fa:	6823      	ldr	r3, [r4, #0]
 80089fc:	d103      	bne.n	8008a06 <HAL_RCC_OscConfig+0xc2>
 80089fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008a02:	6023      	str	r3, [r4, #0]
 8008a04:	e7d1      	b.n	80089aa <HAL_RCC_OscConfig+0x66>
 8008a06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008a0a:	6023      	str	r3, [r4, #0]
 8008a0c:	6823      	ldr	r3, [r4, #0]
 8008a0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008a12:	e7cd      	b.n	80089b0 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8008a14:	4c67      	ldr	r4, [pc, #412]	; (8008bb4 <HAL_RCC_OscConfig+0x270>)
 8008a16:	6863      	ldr	r3, [r4, #4]
 8008a18:	f013 0f0c 	tst.w	r3, #12
 8008a1c:	d007      	beq.n	8008a2e <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8008a1e:	6863      	ldr	r3, [r4, #4]
 8008a20:	f003 030c 	and.w	r3, r3, #12
 8008a24:	2b08      	cmp	r3, #8
 8008a26:	d110      	bne.n	8008a4a <HAL_RCC_OscConfig+0x106>
 8008a28:	6863      	ldr	r3, [r4, #4]
 8008a2a:	03da      	lsls	r2, r3, #15
 8008a2c:	d40d      	bmi.n	8008a4a <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008a2e:	6823      	ldr	r3, [r4, #0]
 8008a30:	079b      	lsls	r3, r3, #30
 8008a32:	d502      	bpl.n	8008a3a <HAL_RCC_OscConfig+0xf6>
 8008a34:	692b      	ldr	r3, [r5, #16]
 8008a36:	2b01      	cmp	r3, #1
 8008a38:	d1af      	bne.n	800899a <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a3a:	6823      	ldr	r3, [r4, #0]
 8008a3c:	696a      	ldr	r2, [r5, #20]
 8008a3e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8008a42:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8008a46:	6023      	str	r3, [r4, #0]
 8008a48:	e785      	b.n	8008956 <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008a4a:	692a      	ldr	r2, [r5, #16]
 8008a4c:	4b5a      	ldr	r3, [pc, #360]	; (8008bb8 <HAL_RCC_OscConfig+0x274>)
 8008a4e:	b16a      	cbz	r2, 8008a6c <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8008a50:	2201      	movs	r2, #1
 8008a52:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8008a54:	f7fe fe84 	bl	8007760 <HAL_GetTick>
 8008a58:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008a5a:	6823      	ldr	r3, [r4, #0]
 8008a5c:	079f      	lsls	r7, r3, #30
 8008a5e:	d4ec      	bmi.n	8008a3a <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008a60:	f7fe fe7e 	bl	8007760 <HAL_GetTick>
 8008a64:	1b80      	subs	r0, r0, r6
 8008a66:	2802      	cmp	r0, #2
 8008a68:	d9f7      	bls.n	8008a5a <HAL_RCC_OscConfig+0x116>
 8008a6a:	e7ad      	b.n	80089c8 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8008a6c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8008a6e:	f7fe fe77 	bl	8007760 <HAL_GetTick>
 8008a72:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008a74:	6823      	ldr	r3, [r4, #0]
 8008a76:	0798      	lsls	r0, r3, #30
 8008a78:	f57f af6d 	bpl.w	8008956 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008a7c:	f7fe fe70 	bl	8007760 <HAL_GetTick>
 8008a80:	1b80      	subs	r0, r0, r6
 8008a82:	2802      	cmp	r0, #2
 8008a84:	d9f6      	bls.n	8008a74 <HAL_RCC_OscConfig+0x130>
 8008a86:	e79f      	b.n	80089c8 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008a88:	69aa      	ldr	r2, [r5, #24]
 8008a8a:	4c4a      	ldr	r4, [pc, #296]	; (8008bb4 <HAL_RCC_OscConfig+0x270>)
 8008a8c:	4b4b      	ldr	r3, [pc, #300]	; (8008bbc <HAL_RCC_OscConfig+0x278>)
 8008a8e:	b1da      	cbz	r2, 8008ac8 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8008a90:	2201      	movs	r2, #1
 8008a92:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8008a94:	f7fe fe64 	bl	8007760 <HAL_GetTick>
 8008a98:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008a9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a9c:	079b      	lsls	r3, r3, #30
 8008a9e:	d50d      	bpl.n	8008abc <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8008aa0:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8008aa4:	4b46      	ldr	r3, [pc, #280]	; (8008bc0 <HAL_RCC_OscConfig+0x27c>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	fbb3 f3f2 	udiv	r3, r3, r2
 8008aac:	9301      	str	r3, [sp, #4]
  do 
  {
    __NOP();
 8008aae:	bf00      	nop
  } 
  while (Delay --);
 8008ab0:	9b01      	ldr	r3, [sp, #4]
 8008ab2:	1e5a      	subs	r2, r3, #1
 8008ab4:	9201      	str	r2, [sp, #4]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d1f9      	bne.n	8008aae <HAL_RCC_OscConfig+0x16a>
 8008aba:	e750      	b.n	800895e <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008abc:	f7fe fe50 	bl	8007760 <HAL_GetTick>
 8008ac0:	1b80      	subs	r0, r0, r6
 8008ac2:	2802      	cmp	r0, #2
 8008ac4:	d9e9      	bls.n	8008a9a <HAL_RCC_OscConfig+0x156>
 8008ac6:	e77f      	b.n	80089c8 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8008ac8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8008aca:	f7fe fe49 	bl	8007760 <HAL_GetTick>
 8008ace:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008ad0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ad2:	079f      	lsls	r7, r3, #30
 8008ad4:	f57f af43 	bpl.w	800895e <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008ad8:	f7fe fe42 	bl	8007760 <HAL_GetTick>
 8008adc:	1b80      	subs	r0, r0, r6
 8008ade:	2802      	cmp	r0, #2
 8008ae0:	d9f6      	bls.n	8008ad0 <HAL_RCC_OscConfig+0x18c>
 8008ae2:	e771      	b.n	80089c8 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008ae4:	4c33      	ldr	r4, [pc, #204]	; (8008bb4 <HAL_RCC_OscConfig+0x270>)
 8008ae6:	69e3      	ldr	r3, [r4, #28]
 8008ae8:	00d8      	lsls	r0, r3, #3
 8008aea:	d424      	bmi.n	8008b36 <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8008aec:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8008aee:	69e3      	ldr	r3, [r4, #28]
 8008af0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008af4:	61e3      	str	r3, [r4, #28]
 8008af6:	69e3      	ldr	r3, [r4, #28]
 8008af8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008afc:	9300      	str	r3, [sp, #0]
 8008afe:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008b00:	4e30      	ldr	r6, [pc, #192]	; (8008bc4 <HAL_RCC_OscConfig+0x280>)
 8008b02:	6833      	ldr	r3, [r6, #0]
 8008b04:	05d9      	lsls	r1, r3, #23
 8008b06:	d518      	bpl.n	8008b3a <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008b08:	68eb      	ldr	r3, [r5, #12]
 8008b0a:	2b01      	cmp	r3, #1
 8008b0c:	d126      	bne.n	8008b5c <HAL_RCC_OscConfig+0x218>
 8008b0e:	6a23      	ldr	r3, [r4, #32]
 8008b10:	f043 0301 	orr.w	r3, r3, #1
 8008b14:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8008b16:	f7fe fe23 	bl	8007760 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008b1a:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8008b1e:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008b20:	6a23      	ldr	r3, [r4, #32]
 8008b22:	079b      	lsls	r3, r3, #30
 8008b24:	d53f      	bpl.n	8008ba6 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8008b26:	2f00      	cmp	r7, #0
 8008b28:	f43f af1d 	beq.w	8008966 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8008b2c:	69e3      	ldr	r3, [r4, #28]
 8008b2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008b32:	61e3      	str	r3, [r4, #28]
 8008b34:	e717      	b.n	8008966 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8008b36:	2700      	movs	r7, #0
 8008b38:	e7e2      	b.n	8008b00 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008b3a:	6833      	ldr	r3, [r6, #0]
 8008b3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b40:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8008b42:	f7fe fe0d 	bl	8007760 <HAL_GetTick>
 8008b46:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008b48:	6833      	ldr	r3, [r6, #0]
 8008b4a:	05da      	lsls	r2, r3, #23
 8008b4c:	d4dc      	bmi.n	8008b08 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008b4e:	f7fe fe07 	bl	8007760 <HAL_GetTick>
 8008b52:	eba0 0008 	sub.w	r0, r0, r8
 8008b56:	2864      	cmp	r0, #100	; 0x64
 8008b58:	d9f6      	bls.n	8008b48 <HAL_RCC_OscConfig+0x204>
 8008b5a:	e735      	b.n	80089c8 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008b5c:	b9ab      	cbnz	r3, 8008b8a <HAL_RCC_OscConfig+0x246>
 8008b5e:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008b60:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008b64:	f023 0301 	bic.w	r3, r3, #1
 8008b68:	6223      	str	r3, [r4, #32]
 8008b6a:	6a23      	ldr	r3, [r4, #32]
 8008b6c:	f023 0304 	bic.w	r3, r3, #4
 8008b70:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8008b72:	f7fe fdf5 	bl	8007760 <HAL_GetTick>
 8008b76:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008b78:	6a23      	ldr	r3, [r4, #32]
 8008b7a:	0798      	lsls	r0, r3, #30
 8008b7c:	d5d3      	bpl.n	8008b26 <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008b7e:	f7fe fdef 	bl	8007760 <HAL_GetTick>
 8008b82:	1b80      	subs	r0, r0, r6
 8008b84:	4540      	cmp	r0, r8
 8008b86:	d9f7      	bls.n	8008b78 <HAL_RCC_OscConfig+0x234>
 8008b88:	e71e      	b.n	80089c8 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008b8a:	2b05      	cmp	r3, #5
 8008b8c:	6a23      	ldr	r3, [r4, #32]
 8008b8e:	d103      	bne.n	8008b98 <HAL_RCC_OscConfig+0x254>
 8008b90:	f043 0304 	orr.w	r3, r3, #4
 8008b94:	6223      	str	r3, [r4, #32]
 8008b96:	e7ba      	b.n	8008b0e <HAL_RCC_OscConfig+0x1ca>
 8008b98:	f023 0301 	bic.w	r3, r3, #1
 8008b9c:	6223      	str	r3, [r4, #32]
 8008b9e:	6a23      	ldr	r3, [r4, #32]
 8008ba0:	f023 0304 	bic.w	r3, r3, #4
 8008ba4:	e7b6      	b.n	8008b14 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008ba6:	f7fe fddb 	bl	8007760 <HAL_GetTick>
 8008baa:	eba0 0008 	sub.w	r0, r0, r8
 8008bae:	42b0      	cmp	r0, r6
 8008bb0:	d9b6      	bls.n	8008b20 <HAL_RCC_OscConfig+0x1dc>
 8008bb2:	e709      	b.n	80089c8 <HAL_RCC_OscConfig+0x84>
 8008bb4:	40021000 	.word	0x40021000
 8008bb8:	42420000 	.word	0x42420000
 8008bbc:	42420480 	.word	0x42420480
 8008bc0:	20000110 	.word	0x20000110
 8008bc4:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008bc8:	4c22      	ldr	r4, [pc, #136]	; (8008c54 <HAL_RCC_OscConfig+0x310>)
 8008bca:	6863      	ldr	r3, [r4, #4]
 8008bcc:	f003 030c 	and.w	r3, r3, #12
 8008bd0:	2b08      	cmp	r3, #8
 8008bd2:	f43f aee2 	beq.w	800899a <HAL_RCC_OscConfig+0x56>
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	4e1f      	ldr	r6, [pc, #124]	; (8008c58 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008bda:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8008bdc:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008bde:	d12b      	bne.n	8008c38 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8008be0:	f7fe fdbe 	bl	8007760 <HAL_GetTick>
 8008be4:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008be6:	6823      	ldr	r3, [r4, #0]
 8008be8:	0199      	lsls	r1, r3, #6
 8008bea:	d41f      	bmi.n	8008c2c <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8008bec:	6a2b      	ldr	r3, [r5, #32]
 8008bee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008bf2:	d105      	bne.n	8008c00 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8008bf4:	6862      	ldr	r2, [r4, #4]
 8008bf6:	68a9      	ldr	r1, [r5, #8]
 8008bf8:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8008bfc:	430a      	orrs	r2, r1
 8008bfe:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008c00:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8008c02:	6862      	ldr	r2, [r4, #4]
 8008c04:	430b      	orrs	r3, r1
 8008c06:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8008c0a:	4313      	orrs	r3, r2
 8008c0c:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8008c0e:	2301      	movs	r3, #1
 8008c10:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8008c12:	f7fe fda5 	bl	8007760 <HAL_GetTick>
 8008c16:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008c18:	6823      	ldr	r3, [r4, #0]
 8008c1a:	019a      	lsls	r2, r3, #6
 8008c1c:	f53f aea7 	bmi.w	800896e <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008c20:	f7fe fd9e 	bl	8007760 <HAL_GetTick>
 8008c24:	1b40      	subs	r0, r0, r5
 8008c26:	2802      	cmp	r0, #2
 8008c28:	d9f6      	bls.n	8008c18 <HAL_RCC_OscConfig+0x2d4>
 8008c2a:	e6cd      	b.n	80089c8 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008c2c:	f7fe fd98 	bl	8007760 <HAL_GetTick>
 8008c30:	1bc0      	subs	r0, r0, r7
 8008c32:	2802      	cmp	r0, #2
 8008c34:	d9d7      	bls.n	8008be6 <HAL_RCC_OscConfig+0x2a2>
 8008c36:	e6c7      	b.n	80089c8 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8008c38:	f7fe fd92 	bl	8007760 <HAL_GetTick>
 8008c3c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008c3e:	6823      	ldr	r3, [r4, #0]
 8008c40:	019b      	lsls	r3, r3, #6
 8008c42:	f57f ae94 	bpl.w	800896e <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008c46:	f7fe fd8b 	bl	8007760 <HAL_GetTick>
 8008c4a:	1b40      	subs	r0, r0, r5
 8008c4c:	2802      	cmp	r0, #2
 8008c4e:	d9f6      	bls.n	8008c3e <HAL_RCC_OscConfig+0x2fa>
 8008c50:	e6ba      	b.n	80089c8 <HAL_RCC_OscConfig+0x84>
 8008c52:	bf00      	nop
 8008c54:	40021000 	.word	0x40021000
 8008c58:	42420060 	.word	0x42420060

08008c5c <HAL_RCC_GetSysClockFreq>:
{
 8008c5c:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8008c5e:	4b19      	ldr	r3, [pc, #100]	; (8008cc4 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8008c60:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8008c62:	ac02      	add	r4, sp, #8
 8008c64:	f103 0510 	add.w	r5, r3, #16
 8008c68:	4622      	mov	r2, r4
 8008c6a:	6818      	ldr	r0, [r3, #0]
 8008c6c:	6859      	ldr	r1, [r3, #4]
 8008c6e:	3308      	adds	r3, #8
 8008c70:	c203      	stmia	r2!, {r0, r1}
 8008c72:	42ab      	cmp	r3, r5
 8008c74:	4614      	mov	r4, r2
 8008c76:	d1f7      	bne.n	8008c68 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8008c78:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 8008c7c:	4912      	ldr	r1, [pc, #72]	; (8008cc8 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8008c7e:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8008c82:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8008c84:	f003 020c 	and.w	r2, r3, #12
 8008c88:	2a08      	cmp	r2, #8
 8008c8a:	d118      	bne.n	8008cbe <HAL_RCC_GetSysClockFreq+0x62>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008c8c:	f3c3 4283 	ubfx	r2, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008c90:	03db      	lsls	r3, r3, #15
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008c92:	bf48      	it	mi
 8008c94:	684b      	ldrmi	r3, [r1, #4]
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008c96:	a806      	add	r0, sp, #24
 8008c98:	4402      	add	r2, r0
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008c9a:	bf48      	it	mi
 8008c9c:	f3c3 4340 	ubfxmi	r3, r3, #17, #1
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008ca0:	f812 0c10 	ldrb.w	r0, [r2, #-16]
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008ca4:	bf41      	itttt	mi
 8008ca6:	aa06      	addmi	r2, sp, #24
 8008ca8:	189b      	addmi	r3, r3, r2
 8008caa:	f813 2c14 	ldrbmi.w	r2, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 8008cae:	4b07      	ldrmi	r3, [pc, #28]	; (8008ccc <HAL_RCC_GetSysClockFreq+0x70>)
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008cb0:	bf54      	ite	pl
 8008cb2:	4b07      	ldrpl	r3, [pc, #28]	; (8008cd0 <HAL_RCC_GetSysClockFreq+0x74>)
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 8008cb4:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008cb8:	4358      	muls	r0, r3
}
 8008cba:	b007      	add	sp, #28
 8008cbc:	bd30      	pop	{r4, r5, pc}
      sysclockfreq = HSE_VALUE;
 8008cbe:	4803      	ldr	r0, [pc, #12]	; (8008ccc <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8008cc0:	e7fb      	b.n	8008cba <HAL_RCC_GetSysClockFreq+0x5e>
 8008cc2:	bf00      	nop
 8008cc4:	0800e0b0 	.word	0x0800e0b0
 8008cc8:	40021000 	.word	0x40021000
 8008ccc:	007a1200 	.word	0x007a1200
 8008cd0:	003d0900 	.word	0x003d0900

08008cd4 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8008cd4:	4a4c      	ldr	r2, [pc, #304]	; (8008e08 <HAL_RCC_ClockConfig+0x134>)
{
 8008cd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8008cda:	6813      	ldr	r3, [r2, #0]
{
 8008cdc:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8008cde:	f003 0307 	and.w	r3, r3, #7
 8008ce2:	428b      	cmp	r3, r1
{
 8008ce4:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8008ce6:	d327      	bcc.n	8008d38 <HAL_RCC_ClockConfig+0x64>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008ce8:	682a      	ldr	r2, [r5, #0]
 8008cea:	0791      	lsls	r1, r2, #30
 8008cec:	d431      	bmi.n	8008d52 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008cee:	07d2      	lsls	r2, r2, #31
 8008cf0:	d437      	bmi.n	8008d62 <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8008cf2:	4a45      	ldr	r2, [pc, #276]	; (8008e08 <HAL_RCC_ClockConfig+0x134>)
 8008cf4:	6813      	ldr	r3, [r2, #0]
 8008cf6:	f003 0307 	and.w	r3, r3, #7
 8008cfa:	42b3      	cmp	r3, r6
 8008cfc:	d871      	bhi.n	8008de2 <HAL_RCC_ClockConfig+0x10e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008cfe:	682a      	ldr	r2, [r5, #0]
 8008d00:	4c42      	ldr	r4, [pc, #264]	; (8008e0c <HAL_RCC_ClockConfig+0x138>)
 8008d02:	f012 0f04 	tst.w	r2, #4
 8008d06:	d177      	bne.n	8008df8 <HAL_RCC_ClockConfig+0x124>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008d08:	0713      	lsls	r3, r2, #28
 8008d0a:	d506      	bpl.n	8008d1a <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008d0c:	6863      	ldr	r3, [r4, #4]
 8008d0e:	692a      	ldr	r2, [r5, #16]
 8008d10:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8008d14:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8008d18:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008d1a:	f7ff ff9f 	bl	8008c5c <HAL_RCC_GetSysClockFreq>
 8008d1e:	6863      	ldr	r3, [r4, #4]
 8008d20:	4a3b      	ldr	r2, [pc, #236]	; (8008e10 <HAL_RCC_ClockConfig+0x13c>)
 8008d22:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8008d26:	5cd3      	ldrb	r3, [r2, r3]
 8008d28:	40d8      	lsrs	r0, r3
 8008d2a:	4b3a      	ldr	r3, [pc, #232]	; (8008e14 <HAL_RCC_ClockConfig+0x140>)
 8008d2c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8008d2e:	200f      	movs	r0, #15
 8008d30:	f7fe fd18 	bl	8007764 <HAL_InitTick>
  return HAL_OK;
 8008d34:	2000      	movs	r0, #0
 8008d36:	e00a      	b.n	8008d4e <HAL_RCC_ClockConfig+0x7a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008d38:	6813      	ldr	r3, [r2, #0]
 8008d3a:	f023 0307 	bic.w	r3, r3, #7
 8008d3e:	430b      	orrs	r3, r1
 8008d40:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008d42:	6813      	ldr	r3, [r2, #0]
 8008d44:	f003 0307 	and.w	r3, r3, #7
 8008d48:	428b      	cmp	r3, r1
 8008d4a:	d0cd      	beq.n	8008ce8 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8008d4c:	2001      	movs	r0, #1
}
 8008d4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008d52:	492e      	ldr	r1, [pc, #184]	; (8008e0c <HAL_RCC_ClockConfig+0x138>)
 8008d54:	68a8      	ldr	r0, [r5, #8]
 8008d56:	684b      	ldr	r3, [r1, #4]
 8008d58:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008d5c:	4303      	orrs	r3, r0
 8008d5e:	604b      	str	r3, [r1, #4]
 8008d60:	e7c5      	b.n	8008cee <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008d62:	686a      	ldr	r2, [r5, #4]
 8008d64:	4c29      	ldr	r4, [pc, #164]	; (8008e0c <HAL_RCC_ClockConfig+0x138>)
 8008d66:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008d68:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008d6a:	d11b      	bne.n	8008da4 <HAL_RCC_ClockConfig+0xd0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008d6c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008d70:	d0ec      	beq.n	8008d4c <HAL_RCC_ClockConfig+0x78>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008d72:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008d74:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008d78:	f023 0303 	bic.w	r3, r3, #3
 8008d7c:	4313      	orrs	r3, r2
 8008d7e:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8008d80:	f7fe fcee 	bl	8007760 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008d84:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8008d86:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008d88:	2b01      	cmp	r3, #1
 8008d8a:	d113      	bne.n	8008db4 <HAL_RCC_ClockConfig+0xe0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8008d8c:	6863      	ldr	r3, [r4, #4]
 8008d8e:	f003 030c 	and.w	r3, r3, #12
 8008d92:	2b04      	cmp	r3, #4
 8008d94:	d0ad      	beq.n	8008cf2 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008d96:	f7fe fce3 	bl	8007760 <HAL_GetTick>
 8008d9a:	1bc0      	subs	r0, r0, r7
 8008d9c:	4540      	cmp	r0, r8
 8008d9e:	d9f5      	bls.n	8008d8c <HAL_RCC_ClockConfig+0xb8>
          return HAL_TIMEOUT;
 8008da0:	2003      	movs	r0, #3
 8008da2:	e7d4      	b.n	8008d4e <HAL_RCC_ClockConfig+0x7a>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008da4:	2a02      	cmp	r2, #2
 8008da6:	d102      	bne.n	8008dae <HAL_RCC_ClockConfig+0xda>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008da8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8008dac:	e7e0      	b.n	8008d70 <HAL_RCC_ClockConfig+0x9c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008dae:	f013 0f02 	tst.w	r3, #2
 8008db2:	e7dd      	b.n	8008d70 <HAL_RCC_ClockConfig+0x9c>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008db4:	2b02      	cmp	r3, #2
 8008db6:	d10f      	bne.n	8008dd8 <HAL_RCC_ClockConfig+0x104>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008db8:	6863      	ldr	r3, [r4, #4]
 8008dba:	f003 030c 	and.w	r3, r3, #12
 8008dbe:	2b08      	cmp	r3, #8
 8008dc0:	d097      	beq.n	8008cf2 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008dc2:	f7fe fccd 	bl	8007760 <HAL_GetTick>
 8008dc6:	1bc0      	subs	r0, r0, r7
 8008dc8:	4540      	cmp	r0, r8
 8008dca:	d9f5      	bls.n	8008db8 <HAL_RCC_ClockConfig+0xe4>
 8008dcc:	e7e8      	b.n	8008da0 <HAL_RCC_ClockConfig+0xcc>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008dce:	f7fe fcc7 	bl	8007760 <HAL_GetTick>
 8008dd2:	1bc0      	subs	r0, r0, r7
 8008dd4:	4540      	cmp	r0, r8
 8008dd6:	d8e3      	bhi.n	8008da0 <HAL_RCC_ClockConfig+0xcc>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8008dd8:	6863      	ldr	r3, [r4, #4]
 8008dda:	f013 0f0c 	tst.w	r3, #12
 8008dde:	d1f6      	bne.n	8008dce <HAL_RCC_ClockConfig+0xfa>
 8008de0:	e787      	b.n	8008cf2 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008de2:	6813      	ldr	r3, [r2, #0]
 8008de4:	f023 0307 	bic.w	r3, r3, #7
 8008de8:	4333      	orrs	r3, r6
 8008dea:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008dec:	6813      	ldr	r3, [r2, #0]
 8008dee:	f003 0307 	and.w	r3, r3, #7
 8008df2:	42b3      	cmp	r3, r6
 8008df4:	d1aa      	bne.n	8008d4c <HAL_RCC_ClockConfig+0x78>
 8008df6:	e782      	b.n	8008cfe <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008df8:	6863      	ldr	r3, [r4, #4]
 8008dfa:	68e9      	ldr	r1, [r5, #12]
 8008dfc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8008e00:	430b      	orrs	r3, r1
 8008e02:	6063      	str	r3, [r4, #4]
 8008e04:	e780      	b.n	8008d08 <HAL_RCC_ClockConfig+0x34>
 8008e06:	bf00      	nop
 8008e08:	40022000 	.word	0x40022000
 8008e0c:	40021000 	.word	0x40021000
 8008e10:	0800d490 	.word	0x0800d490
 8008e14:	20000110 	.word	0x20000110

08008e18 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008e18:	4b04      	ldr	r3, [pc, #16]	; (8008e2c <HAL_RCC_GetPCLK1Freq+0x14>)
 8008e1a:	4a05      	ldr	r2, [pc, #20]	; (8008e30 <HAL_RCC_GetPCLK1Freq+0x18>)
 8008e1c:	685b      	ldr	r3, [r3, #4]
 8008e1e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8008e22:	5cd3      	ldrb	r3, [r2, r3]
 8008e24:	4a03      	ldr	r2, [pc, #12]	; (8008e34 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8008e26:	6810      	ldr	r0, [r2, #0]
}    
 8008e28:	40d8      	lsrs	r0, r3
 8008e2a:	4770      	bx	lr
 8008e2c:	40021000 	.word	0x40021000
 8008e30:	0800d4a0 	.word	0x0800d4a0
 8008e34:	20000110 	.word	0x20000110

08008e38 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008e38:	4b04      	ldr	r3, [pc, #16]	; (8008e4c <HAL_RCC_GetPCLK2Freq+0x14>)
 8008e3a:	4a05      	ldr	r2, [pc, #20]	; (8008e50 <HAL_RCC_GetPCLK2Freq+0x18>)
 8008e3c:	685b      	ldr	r3, [r3, #4]
 8008e3e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8008e42:	5cd3      	ldrb	r3, [r2, r3]
 8008e44:	4a03      	ldr	r2, [pc, #12]	; (8008e54 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8008e46:	6810      	ldr	r0, [r2, #0]
} 
 8008e48:	40d8      	lsrs	r0, r3
 8008e4a:	4770      	bx	lr
 8008e4c:	40021000 	.word	0x40021000
 8008e50:	0800d4a0 	.word	0x0800d4a0
 8008e54:	20000110 	.word	0x20000110

08008e58 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008e58:	230f      	movs	r3, #15
 8008e5a:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008e5c:	4b0b      	ldr	r3, [pc, #44]	; (8008e8c <HAL_RCC_GetClockConfig+0x34>)
 8008e5e:	685a      	ldr	r2, [r3, #4]
 8008e60:	f002 0203 	and.w	r2, r2, #3
 8008e64:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8008e66:	685a      	ldr	r2, [r3, #4]
 8008e68:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8008e6c:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8008e6e:	685a      	ldr	r2, [r3, #4]
 8008e70:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8008e74:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8008e76:	685b      	ldr	r3, [r3, #4]
 8008e78:	08db      	lsrs	r3, r3, #3
 8008e7a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008e7e:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8008e80:	4b03      	ldr	r3, [pc, #12]	; (8008e90 <HAL_RCC_GetClockConfig+0x38>)
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f003 0307 	and.w	r3, r3, #7
 8008e88:	600b      	str	r3, [r1, #0]
}
 8008e8a:	4770      	bx	lr
 8008e8c:	40021000 	.word	0x40021000
 8008e90:	40022000 	.word	0x40022000

08008e94 <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 8008e94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e98:	4604      	mov	r4, r0
 8008e9a:	4688      	mov	r8, r1
 8008e9c:	4617      	mov	r7, r2
 8008e9e:	461d      	mov	r5, r3
 8008ea0:	9e06      	ldr	r6, [sp, #24]
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8008ea2:	6822      	ldr	r2, [r4, #0]
 8008ea4:	6893      	ldr	r3, [r2, #8]
 8008ea6:	ea38 0303 	bics.w	r3, r8, r3
 8008eaa:	bf0c      	ite	eq
 8008eac:	2301      	moveq	r3, #1
 8008eae:	2300      	movne	r3, #0
 8008eb0:	429f      	cmp	r7, r3
 8008eb2:	d101      	bne.n	8008eb8 <SPI_WaitFlagStateUntilTimeout+0x24>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8008eb4:	2000      	movs	r0, #0
 8008eb6:	e02b      	b.n	8008f10 <SPI_WaitFlagStateUntilTimeout+0x7c>
    if(Timeout != HAL_MAX_DELAY)
 8008eb8:	1c6b      	adds	r3, r5, #1
 8008eba:	d0f3      	beq.n	8008ea4 <SPI_WaitFlagStateUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8008ebc:	bb55      	cbnz	r5, 8008f14 <SPI_WaitFlagStateUntilTimeout+0x80>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008ebe:	6823      	ldr	r3, [r4, #0]
 8008ec0:	685a      	ldr	r2, [r3, #4]
 8008ec2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008ec6:	605a      	str	r2, [r3, #4]
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008ec8:	6862      	ldr	r2, [r4, #4]
 8008eca:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8008ece:	d10a      	bne.n	8008ee6 <SPI_WaitFlagStateUntilTimeout+0x52>
 8008ed0:	68a2      	ldr	r2, [r4, #8]
 8008ed2:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8008ed6:	d002      	beq.n	8008ede <SPI_WaitFlagStateUntilTimeout+0x4a>
 8008ed8:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8008edc:	d103      	bne.n	8008ee6 <SPI_WaitFlagStateUntilTimeout+0x52>
          __HAL_SPI_DISABLE(hspi);
 8008ede:	681a      	ldr	r2, [r3, #0]
 8008ee0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ee4:	601a      	str	r2, [r3, #0]
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008ee6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8008ee8:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8008eec:	d109      	bne.n	8008f02 <SPI_WaitFlagStateUntilTimeout+0x6e>
          SPI_RESET_CRC(hspi);
 8008eee:	681a      	ldr	r2, [r3, #0]
 8008ef0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008ef4:	0412      	lsls	r2, r2, #16
 8008ef6:	0c12      	lsrs	r2, r2, #16
 8008ef8:	601a      	str	r2, [r3, #0]
 8008efa:	681a      	ldr	r2, [r3, #0]
 8008efc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008f00:	601a      	str	r2, [r3, #0]
        hspi->State= HAL_SPI_STATE_READY;
 8008f02:	2301      	movs	r3, #1
 8008f04:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8008f08:	2300      	movs	r3, #0
 8008f0a:	2003      	movs	r0, #3
 8008f0c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8008f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8008f14:	f7fe fc24 	bl	8007760 <HAL_GetTick>
 8008f18:	1b80      	subs	r0, r0, r6
 8008f1a:	42a8      	cmp	r0, r5
 8008f1c:	d3c1      	bcc.n	8008ea2 <SPI_WaitFlagStateUntilTimeout+0xe>
 8008f1e:	e7ce      	b.n	8008ebe <SPI_WaitFlagStateUntilTimeout+0x2a>

08008f20 <SPI_CheckFlag_BSY>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008f20:	b513      	push	{r0, r1, r4, lr}
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008f22:	460b      	mov	r3, r1
 8008f24:	9200      	str	r2, [sp, #0]
 8008f26:	2180      	movs	r1, #128	; 0x80
 8008f28:	2200      	movs	r2, #0
{
 8008f2a:	4604      	mov	r4, r0
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008f2c:	f7ff ffb2 	bl	8008e94 <SPI_WaitFlagStateUntilTimeout>
 8008f30:	b120      	cbz	r0, 8008f3c <SPI_CheckFlag_BSY+0x1c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
 8008f32:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008f34:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8008f36:	f043 0320 	orr.w	r3, r3, #32
 8008f3a:	6563      	str	r3, [r4, #84]	; 0x54
  }
  return HAL_OK;
}
 8008f3c:	b002      	add	sp, #8
 8008f3e:	bd10      	pop	{r4, pc}

08008f40 <HAL_SPI_MspInit>:
}
 8008f40:	4770      	bx	lr

08008f42 <HAL_SPI_Init>:
{
 8008f42:	b510      	push	{r4, lr}
  if(hspi == NULL)
 8008f44:	4604      	mov	r4, r0
 8008f46:	2800      	cmp	r0, #0
 8008f48:	d036      	beq.n	8008fb8 <HAL_SPI_Init+0x76>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	6283      	str	r3, [r0, #40]	; 0x28
  if(hspi->State == HAL_SPI_STATE_RESET)
 8008f4e:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8008f52:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008f56:	b91b      	cbnz	r3, 8008f60 <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8008f58:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8008f5c:	f7ff fff0 	bl	8008f40 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8008f60:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8008f62:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8008f64:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8008f68:	680b      	ldr	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8008f6a:	69a2      	ldr	r2, [r4, #24]
  __HAL_SPI_DISABLE(hspi);
 8008f6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f70:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8008f72:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 8008f76:	4303      	orrs	r3, r0
 8008f78:	68e0      	ldr	r0, [r4, #12]
 8008f7a:	4303      	orrs	r3, r0
 8008f7c:	6920      	ldr	r0, [r4, #16]
 8008f7e:	4303      	orrs	r3, r0
 8008f80:	6960      	ldr	r0, [r4, #20]
 8008f82:	4303      	orrs	r3, r0
 8008f84:	69e0      	ldr	r0, [r4, #28]
 8008f86:	4303      	orrs	r3, r0
 8008f88:	6a20      	ldr	r0, [r4, #32]
 8008f8a:	4303      	orrs	r3, r0
 8008f8c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8008f8e:	4303      	orrs	r3, r0
 8008f90:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8008f94:	4303      	orrs	r3, r0
 8008f96:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8008f98:	0c12      	lsrs	r2, r2, #16
 8008f9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f9c:	f002 0204 	and.w	r2, r2, #4
 8008fa0:	431a      	orrs	r2, r3
 8008fa2:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008fa4:	69cb      	ldr	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008fa6:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008fa8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008fac:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8008fae:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008fb0:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008fb2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8008fb6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8008fb8:	2001      	movs	r0, #1
 8008fba:	e7fc      	b.n	8008fb6 <HAL_SPI_Init+0x74>

08008fbc <HAL_SPI_TransmitReceive>:
{
 8008fbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008fc0:	4699      	mov	r9, r3
  __HAL_LOCK(hspi);
 8008fc2:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8008fc6:	b085      	sub	sp, #20
  __HAL_LOCK(hspi);
 8008fc8:	2b01      	cmp	r3, #1
{
 8008fca:	4604      	mov	r4, r0
 8008fcc:	460d      	mov	r5, r1
 8008fce:	4616      	mov	r6, r2
 8008fd0:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  __HAL_LOCK(hspi);
 8008fd2:	f000 80ee 	beq.w	80091b2 <HAL_SPI_TransmitReceive+0x1f6>
 8008fd6:	2301      	movs	r3, #1
 8008fd8:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8008fdc:	f7fe fbc0 	bl	8007760 <HAL_GetTick>
  tmp  = hspi->State;
 8008fe0:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 8008fe4:	4680      	mov	r8, r0
  tmp  = hspi->State;
 8008fe6:	b2db      	uxtb	r3, r3
  if(!((tmp == HAL_SPI_STATE_READY) || \
 8008fe8:	2b01      	cmp	r3, #1
  tmp1 = hspi->Init.Mode;
 8008fea:	6861      	ldr	r1, [r4, #4]
  if(!((tmp == HAL_SPI_STATE_READY) || \
 8008fec:	d00a      	beq.n	8009004 <HAL_SPI_TransmitReceive+0x48>
 8008fee:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8008ff2:	f040 80dc 	bne.w	80091ae <HAL_SPI_TransmitReceive+0x1f2>
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8008ff6:	68a2      	ldr	r2, [r4, #8]
 8008ff8:	2a00      	cmp	r2, #0
 8008ffa:	f040 80d8 	bne.w	80091ae <HAL_SPI_TransmitReceive+0x1f2>
 8008ffe:	2b04      	cmp	r3, #4
 8009000:	f040 80d5 	bne.w	80091ae <HAL_SPI_TransmitReceive+0x1f2>
  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009004:	2d00      	cmp	r5, #0
 8009006:	d04e      	beq.n	80090a6 <HAL_SPI_TransmitReceive+0xea>
 8009008:	2e00      	cmp	r6, #0
 800900a:	d04c      	beq.n	80090a6 <HAL_SPI_TransmitReceive+0xea>
 800900c:	f1b9 0f00 	cmp.w	r9, #0
 8009010:	d049      	beq.n	80090a6 <HAL_SPI_TransmitReceive+0xea>
  if(hspi->State == HAL_SPI_STATE_READY)
 8009012:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009016:	63a6      	str	r6, [r4, #56]	; 0x38
  if(hspi->State == HAL_SPI_STATE_READY)
 8009018:	2b01      	cmp	r3, #1
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800901a:	bf04      	itt	eq
 800901c:	2305      	moveq	r3, #5
 800901e:	f884 3051 	strbeq.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009022:	2300      	movs	r3, #0
 8009024:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->TxISR       = NULL;
 8009026:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 800902a:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 800902c:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8009030:	f8a4 9036 	strh.w	r9, [r4, #54]	; 0x36
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8009034:	681a      	ldr	r2, [r3, #0]
  hspi->RxXferSize  = Size;
 8009036:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 800903a:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 800903c:	bf58      	it	pl
 800903e:	681a      	ldrpl	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009040:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 8009042:	bf58      	it	pl
 8009044:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
  hspi->TxXferSize  = Size;
 8009048:	f8a4 9034 	strh.w	r9, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 800904c:	bf58      	it	pl
 800904e:	601a      	strpl	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009050:	68e2      	ldr	r2, [r4, #12]
 8009052:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8009056:	d15d      	bne.n	8009114 <HAL_SPI_TransmitReceive+0x158>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8009058:	b119      	cbz	r1, 8009062 <HAL_SPI_TransmitReceive+0xa6>
 800905a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800905c:	b292      	uxth	r2, r2
 800905e:	2a01      	cmp	r2, #1
 8009060:	d106      	bne.n	8009070 <HAL_SPI_TransmitReceive+0xb4>
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8009062:	f835 2b02 	ldrh.w	r2, [r5], #2
 8009066:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8009068:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800906a:	3b01      	subs	r3, #1
 800906c:	b29b      	uxth	r3, r3
 800906e:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8009070:	f04f 0901 	mov.w	r9, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009074:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8009076:	b29b      	uxth	r3, r3
 8009078:	b9bb      	cbnz	r3, 80090aa <HAL_SPI_TransmitReceive+0xee>
 800907a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800907c:	b29b      	uxth	r3, r3
 800907e:	b9a3      	cbnz	r3, 80090aa <HAL_SPI_TransmitReceive+0xee>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8009080:	f8cd 8000 	str.w	r8, [sp]
 8009084:	463b      	mov	r3, r7
 8009086:	2201      	movs	r2, #1
 8009088:	2102      	movs	r1, #2
 800908a:	4620      	mov	r0, r4
 800908c:	f7ff ff02 	bl	8008e94 <SPI_WaitFlagStateUntilTimeout>
 8009090:	2800      	cmp	r0, #0
 8009092:	d135      	bne.n	8009100 <HAL_SPI_TransmitReceive+0x144>
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8009094:	4642      	mov	r2, r8
 8009096:	4639      	mov	r1, r7
 8009098:	4620      	mov	r0, r4
 800909a:	f7ff ff41 	bl	8008f20 <SPI_CheckFlag_BSY>
 800909e:	2800      	cmp	r0, #0
 80090a0:	d07a      	beq.n	8009198 <HAL_SPI_TransmitReceive+0x1dc>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80090a2:	2320      	movs	r3, #32
 80090a4:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 80090a6:	2001      	movs	r0, #1
 80090a8:	e02b      	b.n	8009102 <HAL_SPI_TransmitReceive+0x146>
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 80090aa:	f1b9 0f00 	cmp.w	r9, #0
 80090ae:	d00f      	beq.n	80090d0 <HAL_SPI_TransmitReceive+0x114>
 80090b0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80090b2:	b29b      	uxth	r3, r3
 80090b4:	b163      	cbz	r3, 80090d0 <HAL_SPI_TransmitReceive+0x114>
 80090b6:	6823      	ldr	r3, [r4, #0]
 80090b8:	689a      	ldr	r2, [r3, #8]
 80090ba:	0791      	lsls	r1, r2, #30
 80090bc:	d508      	bpl.n	80090d0 <HAL_SPI_TransmitReceive+0x114>
        txallowed = 0U;
 80090be:	f04f 0900 	mov.w	r9, #0
        hspi->Instance->DR = *((uint16_t *)pTxData);
 80090c2:	f835 2b02 	ldrh.w	r2, [r5], #2
 80090c6:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 80090c8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80090ca:	3b01      	subs	r3, #1
 80090cc:	b29b      	uxth	r3, r3
 80090ce:	86e3      	strh	r3, [r4, #54]	; 0x36
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 80090d0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80090d2:	b29b      	uxth	r3, r3
 80090d4:	b163      	cbz	r3, 80090f0 <HAL_SPI_TransmitReceive+0x134>
 80090d6:	6823      	ldr	r3, [r4, #0]
 80090d8:	689a      	ldr	r2, [r3, #8]
 80090da:	07d2      	lsls	r2, r2, #31
 80090dc:	d508      	bpl.n	80090f0 <HAL_SPI_TransmitReceive+0x134>
        txallowed = 1U;
 80090de:	f04f 0901 	mov.w	r9, #1
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 80090e2:	68db      	ldr	r3, [r3, #12]
 80090e4:	f826 3b02 	strh.w	r3, [r6], #2
        hspi->RxXferCount--;
 80090e8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80090ea:	3b01      	subs	r3, #1
 80090ec:	b29b      	uxth	r3, r3
 80090ee:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 80090f0:	1c78      	adds	r0, r7, #1
 80090f2:	d0bf      	beq.n	8009074 <HAL_SPI_TransmitReceive+0xb8>
 80090f4:	f7fe fb34 	bl	8007760 <HAL_GetTick>
 80090f8:	eba0 0008 	sub.w	r0, r0, r8
 80090fc:	4287      	cmp	r7, r0
 80090fe:	d8b9      	bhi.n	8009074 <HAL_SPI_TransmitReceive+0xb8>
        errorcode = HAL_TIMEOUT;
 8009100:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8009102:	2301      	movs	r3, #1
 8009104:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009108:	2300      	movs	r3, #0
 800910a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 800910e:	b005      	add	sp, #20
 8009110:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8009114:	b119      	cbz	r1, 800911e <HAL_SPI_TransmitReceive+0x162>
 8009116:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8009118:	b292      	uxth	r2, r2
 800911a:	2a01      	cmp	r2, #1
 800911c:	d106      	bne.n	800912c <HAL_SPI_TransmitReceive+0x170>
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
 800911e:	f815 2b01 	ldrb.w	r2, [r5], #1
 8009122:	731a      	strb	r2, [r3, #12]
      hspi->TxXferCount--;
 8009124:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8009126:	3b01      	subs	r3, #1
 8009128:	b29b      	uxth	r3, r3
 800912a:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 800912c:	f04f 0901 	mov.w	r9, #1
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009130:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8009132:	b29b      	uxth	r3, r3
 8009134:	b91b      	cbnz	r3, 800913e <HAL_SPI_TransmitReceive+0x182>
 8009136:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009138:	b29b      	uxth	r3, r3
 800913a:	2b00      	cmp	r3, #0
 800913c:	d0a0      	beq.n	8009080 <HAL_SPI_TransmitReceive+0xc4>
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 800913e:	f1b9 0f00 	cmp.w	r9, #0
 8009142:	d00f      	beq.n	8009164 <HAL_SPI_TransmitReceive+0x1a8>
 8009144:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8009146:	b29b      	uxth	r3, r3
 8009148:	b163      	cbz	r3, 8009164 <HAL_SPI_TransmitReceive+0x1a8>
 800914a:	6823      	ldr	r3, [r4, #0]
 800914c:	689a      	ldr	r2, [r3, #8]
 800914e:	0791      	lsls	r1, r2, #30
 8009150:	d508      	bpl.n	8009164 <HAL_SPI_TransmitReceive+0x1a8>
        txallowed = 0U;
 8009152:	f04f 0900 	mov.w	r9, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8009156:	782a      	ldrb	r2, [r5, #0]
 8009158:	3501      	adds	r5, #1
 800915a:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 800915c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800915e:	3b01      	subs	r3, #1
 8009160:	b29b      	uxth	r3, r3
 8009162:	86e3      	strh	r3, [r4, #54]	; 0x36
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8009164:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009166:	b29b      	uxth	r3, r3
 8009168:	b16b      	cbz	r3, 8009186 <HAL_SPI_TransmitReceive+0x1ca>
 800916a:	6823      	ldr	r3, [r4, #0]
 800916c:	689a      	ldr	r2, [r3, #8]
 800916e:	07d2      	lsls	r2, r2, #31
 8009170:	d509      	bpl.n	8009186 <HAL_SPI_TransmitReceive+0x1ca>
        txallowed = 1U;
 8009172:	f04f 0901 	mov.w	r9, #1
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 8009176:	68db      	ldr	r3, [r3, #12]
 8009178:	3601      	adds	r6, #1
 800917a:	f806 3c01 	strb.w	r3, [r6, #-1]
        hspi->RxXferCount--;
 800917e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009180:	3b01      	subs	r3, #1
 8009182:	b29b      	uxth	r3, r3
 8009184:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8009186:	1c7b      	adds	r3, r7, #1
 8009188:	d0d2      	beq.n	8009130 <HAL_SPI_TransmitReceive+0x174>
 800918a:	f7fe fae9 	bl	8007760 <HAL_GetTick>
 800918e:	eba0 0008 	sub.w	r0, r0, r8
 8009192:	4287      	cmp	r7, r0
 8009194:	d8cc      	bhi.n	8009130 <HAL_SPI_TransmitReceive+0x174>
 8009196:	e7b3      	b.n	8009100 <HAL_SPI_TransmitReceive+0x144>
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009198:	68a3      	ldr	r3, [r4, #8]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d1b1      	bne.n	8009102 <HAL_SPI_TransmitReceive+0x146>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800919e:	6823      	ldr	r3, [r4, #0]
 80091a0:	9003      	str	r0, [sp, #12]
 80091a2:	68da      	ldr	r2, [r3, #12]
 80091a4:	9203      	str	r2, [sp, #12]
 80091a6:	689b      	ldr	r3, [r3, #8]
 80091a8:	9303      	str	r3, [sp, #12]
 80091aa:	9b03      	ldr	r3, [sp, #12]
 80091ac:	e7a9      	b.n	8009102 <HAL_SPI_TransmitReceive+0x146>
    errorcode = HAL_BUSY;
 80091ae:	2002      	movs	r0, #2
 80091b0:	e7a7      	b.n	8009102 <HAL_SPI_TransmitReceive+0x146>
  __HAL_LOCK(hspi);
 80091b2:	2002      	movs	r0, #2
 80091b4:	e7ab      	b.n	800910e <HAL_SPI_TransmitReceive+0x152>

080091b6 <HAL_SPI_TxCpltCallback>:
 80091b6:	4770      	bx	lr

080091b8 <HAL_SPI_ErrorCallback>:
 80091b8:	4770      	bx	lr
	...

080091bc <HAL_SPI_IRQHandler>:
  uint32_t itsource = hspi->Instance->CR2;
 80091bc:	6803      	ldr	r3, [r0, #0]
{
 80091be:	b530      	push	{r4, r5, lr}
  uint32_t itsource = hspi->Instance->CR2;
 80091c0:	6859      	ldr	r1, [r3, #4]
  uint32_t itflag   = hspi->Instance->SR;
 80091c2:	689a      	ldr	r2, [r3, #8]
{
 80091c4:	b085      	sub	sp, #20
  if(((itflag & SPI_FLAG_OVR) == RESET) &&
 80091c6:	f002 0541 	and.w	r5, r2, #65	; 0x41
 80091ca:	2d01      	cmp	r5, #1
{
 80091cc:	4604      	mov	r4, r0
  if(((itflag & SPI_FLAG_OVR) == RESET) &&
 80091ce:	d106      	bne.n	80091de <HAL_SPI_IRQHandler+0x22>
     ((itflag & SPI_FLAG_RXNE) != RESET) && ((itsource & SPI_IT_RXNE) != RESET))
 80091d0:	064d      	lsls	r5, r1, #25
 80091d2:	d504      	bpl.n	80091de <HAL_SPI_IRQHandler+0x22>
    hspi->RxISR(hspi);
 80091d4:	6c03      	ldr	r3, [r0, #64]	; 0x40
}
 80091d6:	b005      	add	sp, #20
 80091d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    hspi->TxISR(hspi);
 80091dc:	4718      	bx	r3
  if(((itflag & SPI_FLAG_TXE) != RESET) && ((itsource & SPI_IT_TXE) != RESET))
 80091de:	0790      	lsls	r0, r2, #30
 80091e0:	d504      	bpl.n	80091ec <HAL_SPI_IRQHandler+0x30>
 80091e2:	060d      	lsls	r5, r1, #24
 80091e4:	d502      	bpl.n	80091ec <HAL_SPI_IRQHandler+0x30>
    hspi->TxISR(hspi);
 80091e6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80091e8:	4620      	mov	r0, r4
 80091ea:	e7f4      	b.n	80091d6 <HAL_SPI_IRQHandler+0x1a>
  if(((itflag & (SPI_FLAG_MODF | SPI_FLAG_OVR)) != RESET) && ((itsource & SPI_IT_ERR) != RESET))
 80091ec:	f012 0f60 	tst.w	r2, #96	; 0x60
 80091f0:	d045      	beq.n	800927e <HAL_SPI_IRQHandler+0xc2>
 80091f2:	0688      	lsls	r0, r1, #26
 80091f4:	d543      	bpl.n	800927e <HAL_SPI_IRQHandler+0xc2>
    if((itflag & SPI_FLAG_OVR) != RESET)
 80091f6:	0655      	lsls	r5, r2, #25
 80091f8:	d50e      	bpl.n	8009218 <HAL_SPI_IRQHandler+0x5c>
      if(hspi->State != HAL_SPI_STATE_BUSY_TX)
 80091fa:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 80091fe:	2500      	movs	r5, #0
 8009200:	2803      	cmp	r0, #3
 8009202:	d036      	beq.n	8009272 <HAL_SPI_IRQHandler+0xb6>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009204:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009206:	f040 0004 	orr.w	r0, r0, #4
 800920a:	6560      	str	r0, [r4, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800920c:	9501      	str	r5, [sp, #4]
 800920e:	68d8      	ldr	r0, [r3, #12]
 8009210:	9001      	str	r0, [sp, #4]
 8009212:	6898      	ldr	r0, [r3, #8]
 8009214:	9001      	str	r0, [sp, #4]
 8009216:	9801      	ldr	r0, [sp, #4]
    if((itflag & SPI_FLAG_MODF) != RESET)
 8009218:	0690      	lsls	r0, r2, #26
 800921a:	d50c      	bpl.n	8009236 <HAL_SPI_IRQHandler+0x7a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800921c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800921e:	f042 0201 	orr.w	r2, r2, #1
 8009222:	6562      	str	r2, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009224:	2200      	movs	r2, #0
 8009226:	9203      	str	r2, [sp, #12]
 8009228:	689a      	ldr	r2, [r3, #8]
 800922a:	9203      	str	r2, [sp, #12]
 800922c:	681a      	ldr	r2, [r3, #0]
 800922e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009232:	601a      	str	r2, [r3, #0]
 8009234:	9a03      	ldr	r2, [sp, #12]
    if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009236:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8009238:	b30a      	cbz	r2, 800927e <HAL_SPI_IRQHandler+0xc2>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800923a:	685a      	ldr	r2, [r3, #4]
 800923c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009240:	605a      	str	r2, [r3, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8009242:	2201      	movs	r2, #1
 8009244:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN))||(HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8009248:	078a      	lsls	r2, r1, #30
 800924a:	d01a      	beq.n	8009282 <HAL_SPI_IRQHandler+0xc6>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800924c:	685a      	ldr	r2, [r3, #4]
        if(hspi->hdmarx != NULL)
 800924e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8009250:	f022 0203 	bic.w	r2, r2, #3
 8009254:	605a      	str	r2, [r3, #4]
        if(hspi->hdmarx != NULL)
 8009256:	b118      	cbz	r0, 8009260 <HAL_SPI_IRQHandler+0xa4>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009258:	4b0c      	ldr	r3, [pc, #48]	; (800928c <HAL_SPI_IRQHandler+0xd0>)
 800925a:	6343      	str	r3, [r0, #52]	; 0x34
          HAL_DMA_Abort_IT(hspi->hdmarx);
 800925c:	f000 f8e4 	bl	8009428 <HAL_DMA_Abort_IT>
        if(hspi->hdmatx != NULL)
 8009260:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8009262:	b160      	cbz	r0, 800927e <HAL_SPI_IRQHandler+0xc2>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009264:	4b09      	ldr	r3, [pc, #36]	; (800928c <HAL_SPI_IRQHandler+0xd0>)
 8009266:	6343      	str	r3, [r0, #52]	; 0x34
}
 8009268:	b005      	add	sp, #20
 800926a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
          HAL_DMA_Abort_IT(hspi->hdmatx);
 800926e:	f000 b8db 	b.w	8009428 <HAL_DMA_Abort_IT>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009272:	9502      	str	r5, [sp, #8]
 8009274:	68da      	ldr	r2, [r3, #12]
 8009276:	9202      	str	r2, [sp, #8]
 8009278:	689b      	ldr	r3, [r3, #8]
 800927a:	9302      	str	r3, [sp, #8]
 800927c:	9b02      	ldr	r3, [sp, #8]
}
 800927e:	b005      	add	sp, #20
 8009280:	bd30      	pop	{r4, r5, pc}
        HAL_SPI_ErrorCallback(hspi);
 8009282:	4620      	mov	r0, r4
 8009284:	f7ff ff98 	bl	80091b8 <HAL_SPI_ErrorCallback>
 8009288:	e7f9      	b.n	800927e <HAL_SPI_IRQHandler+0xc2>
 800928a:	bf00      	nop
 800928c:	08009291 	.word	0x08009291

08009290 <SPI_DMAAbortOnError>:
{
 8009290:	b508      	push	{r3, lr}
  hspi->RxXferCount = 0U;
 8009292:	2300      	movs	r3, #0
  SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009294:	6a40      	ldr	r0, [r0, #36]	; 0x24
  hspi->RxXferCount = 0U;
 8009296:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8009298:	86c3      	strh	r3, [r0, #54]	; 0x36
  HAL_SPI_ErrorCallback(hspi);
 800929a:	f7ff ff8d 	bl	80091b8 <HAL_SPI_ErrorCallback>
}
 800929e:	bd08      	pop	{r3, pc}

080092a0 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80092a0:	4a1a      	ldr	r2, [pc, #104]	; (800930c <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 80092a2:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80092a4:	4290      	cmp	r0, r2
 80092a6:	d00a      	beq.n	80092be <TIM_Base_SetConfig+0x1e>
 80092a8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80092ac:	d007      	beq.n	80092be <TIM_Base_SetConfig+0x1e>
 80092ae:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80092b2:	4290      	cmp	r0, r2
 80092b4:	d003      	beq.n	80092be <TIM_Base_SetConfig+0x1e>
 80092b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80092ba:	4290      	cmp	r0, r2
 80092bc:	d115      	bne.n	80092ea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80092be:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80092c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80092c4:	4313      	orrs	r3, r2
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80092c6:	4a11      	ldr	r2, [pc, #68]	; (800930c <TIM_Base_SetConfig+0x6c>)
 80092c8:	4290      	cmp	r0, r2
 80092ca:	d00a      	beq.n	80092e2 <TIM_Base_SetConfig+0x42>
 80092cc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80092d0:	d007      	beq.n	80092e2 <TIM_Base_SetConfig+0x42>
 80092d2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80092d6:	4290      	cmp	r0, r2
 80092d8:	d003      	beq.n	80092e2 <TIM_Base_SetConfig+0x42>
 80092da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80092de:	4290      	cmp	r0, r2
 80092e0:	d103      	bne.n	80092ea <TIM_Base_SetConfig+0x4a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80092e2:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80092e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80092e8:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 80092ea:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 80092ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 80092f0:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80092f2:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80092f4:	688b      	ldr	r3, [r1, #8]
 80092f6:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80092f8:	680b      	ldr	r3, [r1, #0]
 80092fa:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80092fc:	4b03      	ldr	r3, [pc, #12]	; (800930c <TIM_Base_SetConfig+0x6c>)
 80092fe:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009300:	bf04      	itt	eq
 8009302:	690b      	ldreq	r3, [r1, #16]
 8009304:	6303      	streq	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8009306:	2301      	movs	r3, #1
 8009308:	6143      	str	r3, [r0, #20]
}
 800930a:	4770      	bx	lr
 800930c:	40012c00 	.word	0x40012c00

08009310 <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009310:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8009312:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009314:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << Channel;
 8009316:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8009318:	ea23 0304 	bic.w	r3, r3, r4
 800931c:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 800931e:	6a03      	ldr	r3, [r0, #32]
 8009320:	408a      	lsls	r2, r1
 8009322:	431a      	orrs	r2, r3
 8009324:	6202      	str	r2, [r0, #32]
}
 8009326:	bd10      	pop	{r4, pc}

08009328 <stm32_mcu_flash_erase_sector>:

#define _FLASH_SECTOR_SIZE MYNEWT_VAL(STM32_FLASH_SECTOR_SIZE)

int
stm32_mcu_flash_erase_sector(const struct hal_flash *dev, uint32_t sector_address)
{
 8009328:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    FLASH_EraseInitTypeDef eraseinit;
    uint32_t PageError;

    (void)PageError;

    if ((sector_address & ~(_FLASH_SECTOR_SIZE - 1)) == sector_address) {
 800932a:	f421 737f 	bic.w	r3, r1, #1020	; 0x3fc
 800932e:	f023 0303 	bic.w	r3, r3, #3
 8009332:	428b      	cmp	r3, r1
 8009334:	d110      	bne.n	8009358 <stm32_mcu_flash_erase_sector+0x30>
        eraseinit.TypeErase = FLASH_TYPEERASE_PAGES;
        eraseinit.Banks = FLASH_BANK_1;
 8009336:	2201      	movs	r2, #1
 8009338:	2100      	movs	r1, #0
        eraseinit.PageAddress = sector_address;
        eraseinit.NbPages = _FLASH_SECTOR_SIZE / FLASH_PAGE_SIZE;
        if (HAL_FLASHEx_Erase(&eraseinit, &PageError) == HAL_OK) {
 800933a:	a802      	add	r0, sp, #8
        eraseinit.Banks = FLASH_BANK_1;
 800933c:	e9cd 1202 	strd	r1, r2, [sp, #8]
        if (HAL_FLASHEx_Erase(&eraseinit, &PageError) == HAL_OK) {
 8009340:	a901      	add	r1, sp, #4
        eraseinit.NbPages = _FLASH_SECTOR_SIZE / FLASH_PAGE_SIZE;
 8009342:	e9cd 3204 	strd	r3, r2, [sp, #16]
        if (HAL_FLASHEx_Erase(&eraseinit, &PageError) == HAL_OK) {
 8009346:	f7ff f92f 	bl	80085a8 <HAL_FLASHEx_Erase>
 800934a:	3000      	adds	r0, #0
 800934c:	bf18      	it	ne
 800934e:	2001      	movne	r0, #1
 8009350:	4240      	negs	r0, r0
            return 0;
        }
    }

    return -1;
}
 8009352:	b007      	add	sp, #28
 8009354:	f85d fb04 	ldr.w	pc, [sp], #4
    return -1;
 8009358:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800935c:	e7f9      	b.n	8009352 <stm32_mcu_flash_erase_sector+0x2a>
	...

08009360 <stm32_hal_timer_get_freq>:
 * of a timer.
 */

uint32_t
stm32_hal_timer_get_freq(void *regs)
{
 8009360:	b510      	push	{r4, lr}
 8009362:	4604      	mov	r4, r0
 8009364:	b086      	sub	sp, #24
    RCC_ClkInitTypeDef clocks;
    uint32_t fl;
    uint32_t freq;

    HAL_RCC_GetClockConfig(&clocks, &fl);
 8009366:	4669      	mov	r1, sp
 8009368:	a801      	add	r0, sp, #4
 800936a:	f7ff fd75 	bl	8008e58 <HAL_RCC_GetClockConfig>

    /*
     * Assuming RCC_DCKCFGR->TIMPRE is 0.
     * There's just APB2 timers here.
     */
    switch ((uintptr_t)regs) {
 800936e:	4b0d      	ldr	r3, [pc, #52]	; (80093a4 <stm32_hal_timer_get_freq+0x44>)
 8009370:	429c      	cmp	r4, r3
 8009372:	d003      	beq.n	800937c <stm32_hal_timer_get_freq+0x1c>
 8009374:	d806      	bhi.n	8009384 <stm32_hal_timer_get_freq+0x24>
 8009376:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800937a:	d111      	bne.n	80093a0 <stm32_hal_timer_get_freq+0x40>
    case (uintptr_t)TIM3:
#endif
#ifdef TIM4
    case (uintptr_t)TIM4:
#endif
        freq = HAL_RCC_GetPCLK1Freq();
 800937c:	f7ff fd4c 	bl	8008e18 <HAL_RCC_GetPCLK1Freq>
        if (clocks.APB1CLKDivider) {
 8009380:	9b04      	ldr	r3, [sp, #16]
 8009382:	e009      	b.n	8009398 <stm32_hal_timer_get_freq+0x38>
    switch ((uintptr_t)regs) {
 8009384:	4b08      	ldr	r3, [pc, #32]	; (80093a8 <stm32_hal_timer_get_freq+0x48>)
 8009386:	429c      	cmp	r4, r3
 8009388:	d0f8      	beq.n	800937c <stm32_hal_timer_get_freq+0x1c>
 800938a:	f503 3392 	add.w	r3, r3, #74752	; 0x12400
 800938e:	429c      	cmp	r4, r3
 8009390:	d106      	bne.n	80093a0 <stm32_hal_timer_get_freq+0x40>
        freq = HAL_RCC_GetPCLK2Freq();
 8009392:	f7ff fd51 	bl	8008e38 <HAL_RCC_GetPCLK2Freq>
        if (clocks.APB2CLKDivider) {
 8009396:	9b05      	ldr	r3, [sp, #20]
        if (clocks.APB1CLKDivider) {
 8009398:	b103      	cbz	r3, 800939c <stm32_hal_timer_get_freq+0x3c>
            freq *= 2;
 800939a:	0040      	lsls	r0, r0, #1
        break;
    default:
        return 0;
    }
    return freq;
}
 800939c:	b006      	add	sp, #24
 800939e:	bd10      	pop	{r4, pc}
        return 0;
 80093a0:	2000      	movs	r0, #0
 80093a2:	e7fb      	b.n	800939c <stm32_hal_timer_get_freq+0x3c>
 80093a4:	40000400 	.word	0x40000400
 80093a8:	40000800 	.word	0x40000800

080093ac <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80093ac:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80093ae:	f890 4020 	ldrb.w	r4, [r0, #32]
 80093b2:	2c01      	cmp	r4, #1
 80093b4:	d035      	beq.n	8009422 <HAL_DMA_Start_IT+0x76>
 80093b6:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80093b8:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 80093bc:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 80093c0:	42a5      	cmp	r5, r4
 80093c2:	f04f 0600 	mov.w	r6, #0
 80093c6:	f04f 0402 	mov.w	r4, #2
 80093ca:	d128      	bne.n	800941e <HAL_DMA_Start_IT+0x72>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80093cc:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80093d0:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80093d2:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 80093d4:	6826      	ldr	r6, [r4, #0]
 80093d6:	f026 0601 	bic.w	r6, r6, #1
 80093da:	6026      	str	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80093dc:	e9d0 670f 	ldrd	r6, r7, [r0, #60]	; 0x3c
 80093e0:	40bd      	lsls	r5, r7
 80093e2:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80093e4:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80093e6:	6843      	ldr	r3, [r0, #4]
 80093e8:	6805      	ldr	r5, [r0, #0]
 80093ea:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 80093ec:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80093ee:	bf0b      	itete	eq
 80093f0:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80093f2:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 80093f4:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80093f6:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 80093f8:	b14b      	cbz	r3, 800940e <HAL_DMA_Start_IT+0x62>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80093fa:	6823      	ldr	r3, [r4, #0]
 80093fc:	f043 030e 	orr.w	r3, r3, #14
  HAL_StatusTypeDef status = HAL_OK;
 8009400:	2000      	movs	r0, #0
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8009402:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8009404:	682b      	ldr	r3, [r5, #0]
 8009406:	f043 0301 	orr.w	r3, r3, #1
 800940a:	602b      	str	r3, [r5, #0]
}
 800940c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800940e:	6823      	ldr	r3, [r4, #0]
 8009410:	f023 0304 	bic.w	r3, r3, #4
 8009414:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8009416:	6823      	ldr	r3, [r4, #0]
 8009418:	f043 030a 	orr.w	r3, r3, #10
 800941c:	e7f0      	b.n	8009400 <HAL_DMA_Start_IT+0x54>
    __HAL_UNLOCK(hdma); 
 800941e:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 8009422:	2002      	movs	r0, #2
 8009424:	e7f2      	b.n	800940c <HAL_DMA_Start_IT+0x60>
	...

08009428 <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8009428:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 800942c:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800942e:	2b02      	cmp	r3, #2
 8009430:	d003      	beq.n	800943a <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009432:	2304      	movs	r3, #4
 8009434:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8009436:	2001      	movs	r0, #1
}
 8009438:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800943a:	6803      	ldr	r3, [r0, #0]
 800943c:	681a      	ldr	r2, [r3, #0]
 800943e:	f022 020e 	bic.w	r2, r2, #14
 8009442:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8009444:	681a      	ldr	r2, [r3, #0]
 8009446:	f022 0201 	bic.w	r2, r2, #1
 800944a:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800944c:	4a18      	ldr	r2, [pc, #96]	; (80094b0 <HAL_DMA_Abort_IT+0x88>)
 800944e:	4293      	cmp	r3, r2
 8009450:	d01f      	beq.n	8009492 <HAL_DMA_Abort_IT+0x6a>
 8009452:	3214      	adds	r2, #20
 8009454:	4293      	cmp	r3, r2
 8009456:	d01e      	beq.n	8009496 <HAL_DMA_Abort_IT+0x6e>
 8009458:	3214      	adds	r2, #20
 800945a:	4293      	cmp	r3, r2
 800945c:	d01d      	beq.n	800949a <HAL_DMA_Abort_IT+0x72>
 800945e:	3214      	adds	r2, #20
 8009460:	4293      	cmp	r3, r2
 8009462:	d01d      	beq.n	80094a0 <HAL_DMA_Abort_IT+0x78>
 8009464:	3214      	adds	r2, #20
 8009466:	4293      	cmp	r3, r2
 8009468:	d01d      	beq.n	80094a6 <HAL_DMA_Abort_IT+0x7e>
 800946a:	3214      	adds	r2, #20
 800946c:	4293      	cmp	r3, r2
 800946e:	bf0c      	ite	eq
 8009470:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8009474:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8009478:	4a0e      	ldr	r2, [pc, #56]	; (80094b4 <HAL_DMA_Abort_IT+0x8c>)
    __HAL_UNLOCK(hdma);
 800947a:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800947c:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800947e:	2301      	movs	r3, #1
 8009480:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    if(hdma->XferAbortCallback != NULL)
 8009484:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 8009486:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 800948a:	b17b      	cbz	r3, 80094ac <HAL_DMA_Abort_IT+0x84>
      hdma->XferAbortCallback(hdma);
 800948c:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800948e:	4620      	mov	r0, r4
 8009490:	e7d2      	b.n	8009438 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8009492:	2301      	movs	r3, #1
 8009494:	e7f0      	b.n	8009478 <HAL_DMA_Abort_IT+0x50>
 8009496:	2310      	movs	r3, #16
 8009498:	e7ee      	b.n	8009478 <HAL_DMA_Abort_IT+0x50>
 800949a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800949e:	e7eb      	b.n	8009478 <HAL_DMA_Abort_IT+0x50>
 80094a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80094a4:	e7e8      	b.n	8009478 <HAL_DMA_Abort_IT+0x50>
 80094a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80094aa:	e7e5      	b.n	8009478 <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 80094ac:	4618      	mov	r0, r3
 80094ae:	e7c3      	b.n	8009438 <HAL_DMA_Abort_IT+0x10>
 80094b0:	40020008 	.word	0x40020008
 80094b4:	40020000 	.word	0x40020000

080094b8 <sensor_dev_create>:
    assert(rc == 0);

    rc = config_bme680_sensor();
    assert(rc == 0);
#endif
}
 80094b8:	4770      	bx	lr

080094ba <os_sem_init>:
{
    os_error_t ret;

    os_trace_api_u32x2(OS_TRACE_ID_SEM_INIT, (uint32_t)sem, (uint32_t)tokens);

    if (!sem) {
 80094ba:	b120      	cbz	r0, 80094c6 <os_sem_init+0xc>
        ret = OS_INVALID_PARM;
        goto done;
    }

    sem->sem_tokens = tokens;
    SLIST_FIRST(&sem->sem_head) = NULL;
 80094bc:	2300      	movs	r3, #0
    sem->sem_tokens = tokens;
 80094be:	80c1      	strh	r1, [r0, #6]
    SLIST_FIRST(&sem->sem_head) = NULL;
 80094c0:	6003      	str	r3, [r0, #0]

    ret = OS_OK;
 80094c2:	4618      	mov	r0, r3
 80094c4:	4770      	bx	lr
        ret = OS_INVALID_PARM;
 80094c6:	2003      	movs	r0, #3

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_INIT, (uint32_t)ret);
    return ret;
}
 80094c8:	4770      	bx	lr
	...

080094cc <os_sem_release>:

os_error_t
os_sem_release(struct os_sem *sem)
{
 80094cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_SEM_RELEASE, (uint32_t)sem);

    /* OS must be started to release semaphores */
    if (!g_os_started) {
 80094ce:	4b17      	ldr	r3, [pc, #92]	; (800952c <os_sem_release+0x60>)
{
 80094d0:	4604      	mov	r4, r0
    if (!g_os_started) {
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	b31b      	cbz	r3, 800951e <os_sem_release+0x52>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid semaphore */
    if (!sem) {
 80094d6:	b320      	cbz	r0, 8009522 <os_sem_release+0x56>
        goto done;
    }

    /* Get current task */
    resched = 0;
    current = os_sched_get_current_task();
 80094d8:	f7fb fb3e 	bl	8004b58 <os_sched_get_current_task>
 80094dc:	4607      	mov	r7, r0

    OS_ENTER_CRITICAL(sr);
 80094de:	f7fb fd33 	bl	8004f48 <os_arch_save_sr>

    /* Check if tasks are waiting for the semaphore */
    rdy = SLIST_FIRST(&sem->sem_head);
 80094e2:	6825      	ldr	r5, [r4, #0]
    OS_ENTER_CRITICAL(sr);
 80094e4:	4606      	mov	r6, r0
    if (rdy) {
 80094e6:	b1ad      	cbz	r5, 8009514 <os_sem_release+0x48>
        /* Clear flag that we are waiting on the semaphore; wake up task */
        rdy->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
 80094e8:	7b6b      	ldrb	r3, [r5, #13]
        os_sched_wakeup(rdy);
 80094ea:	4628      	mov	r0, r5
        rdy->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
 80094ec:	f023 0302 	bic.w	r3, r3, #2
 80094f0:	736b      	strb	r3, [r5, #13]
        os_sched_wakeup(rdy);
 80094f2:	f7fb fb89 	bl	8004c08 <os_sched_wakeup>

        /* Schedule if waiting task higher priority */
        if (current->t_prio > rdy->t_prio) {
 80094f6:	7aec      	ldrb	r4, [r5, #11]
 80094f8:	7af8      	ldrb	r0, [r7, #11]
 80094fa:	42a0      	cmp	r0, r4
 80094fc:	bf94      	ite	ls
 80094fe:	2400      	movls	r4, #0
 8009500:	2401      	movhi	r4, #1
    } else {
        /* Add to the number of tokens */
        sem->sem_tokens++;
    }

    OS_EXIT_CRITICAL(sr);
 8009502:	4630      	mov	r0, r6
 8009504:	f7fb fd26 	bl	8004f54 <os_arch_restore_sr>

    /* Re-schedule if needed */
    if (resched) {
 8009508:	b16c      	cbz	r4, 8009526 <os_sem_release+0x5a>
        os_sched(rdy);
 800950a:	4628      	mov	r0, r5
 800950c:	f7fb fb30 	bl	8004b70 <os_sched>
    }

    ret = OS_OK;
 8009510:	2000      	movs	r0, #0

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_RELEASE, (uint32_t)ret);
    return ret;
}
 8009512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        sem->sem_tokens++;
 8009514:	88e3      	ldrh	r3, [r4, #6]
 8009516:	3301      	adds	r3, #1
 8009518:	80e3      	strh	r3, [r4, #6]
    resched = 0;
 800951a:	462c      	mov	r4, r5
 800951c:	e7f1      	b.n	8009502 <os_sem_release+0x36>
        ret = OS_NOT_STARTED;
 800951e:	2009      	movs	r0, #9
 8009520:	e7f7      	b.n	8009512 <os_sem_release+0x46>
        ret = OS_INVALID_PARM;
 8009522:	2003      	movs	r0, #3
 8009524:	e7f5      	b.n	8009512 <os_sem_release+0x46>
    ret = OS_OK;
 8009526:	4620      	mov	r0, r4
 8009528:	e7f3      	b.n	8009512 <os_sem_release+0x46>
 800952a:	bf00      	nop
 800952c:	20003afc 	.word	0x20003afc

08009530 <os_sem_pend>:

os_error_t
os_sem_pend(struct os_sem *sem, os_time_t timeout)
{
 8009530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32x2(OS_TRACE_ID_SEM_PEND, (uint32_t)sem, (uint32_t)timeout);

    /* Check if OS is started */
    if (!g_os_started) {
 8009532:	4b29      	ldr	r3, [pc, #164]	; (80095d8 <os_sem_pend+0xa8>)
{
 8009534:	4604      	mov	r4, r0
    if (!g_os_started) {
 8009536:	681b      	ldr	r3, [r3, #0]
{
 8009538:	460e      	mov	r6, r1
    if (!g_os_started) {
 800953a:	2b00      	cmp	r3, #0
 800953c:	d047      	beq.n	80095ce <os_sem_pend+0x9e>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid semaphore */
    if (!sem) {
 800953e:	2800      	cmp	r0, #0
 8009540:	d047      	beq.n	80095d2 <os_sem_pend+0xa2>
        goto done;
    }

    /* Assume we dont have to put task to sleep; get current task */
    sched = 0;
    current = os_sched_get_current_task();
 8009542:	f7fb fb09 	bl	8004b58 <os_sched_get_current_task>
 8009546:	4605      	mov	r5, r0

    OS_ENTER_CRITICAL(sr);
 8009548:	f7fb fcfe 	bl	8004f48 <os_arch_save_sr>

    /*
     * If there is a token available, take it. If no token, either return
     * with error if timeout was 0 or put this task to sleep.
     */
    if (sem->sem_tokens != 0) {
 800954c:	88e3      	ldrh	r3, [r4, #6]
    OS_ENTER_CRITICAL(sr);
 800954e:	4607      	mov	r7, r0
    if (sem->sem_tokens != 0) {
 8009550:	b1cb      	cbz	r3, 8009586 <os_sem_pend+0x56>
        sem->sem_tokens--;
 8009552:	3b01      	subs	r3, #1
 8009554:	80e3      	strh	r3, [r4, #6]
        ret = OS_OK;
 8009556:	2400      	movs	r4, #0
    sched = 0;
 8009558:	4626      	mov	r6, r4
        /* We will put this task to sleep */
        sched = 1;
        os_sched_sleep(current, timeout);
    }

    OS_EXIT_CRITICAL(sr);
 800955a:	4638      	mov	r0, r7
 800955c:	f7fb fcfa 	bl	8004f54 <os_arch_restore_sr>

    if (sched) {
 8009560:	b17e      	cbz	r6, 8009582 <os_sem_pend+0x52>
        os_sched(NULL);
 8009562:	2000      	movs	r0, #0
 8009564:	f7fb fb04 	bl	8004b70 <os_sched>
        /* Check if we timed out or got the semaphore */
        if (current->t_flags & OS_TASK_FLAG_SEM_WAIT) {
 8009568:	7b6c      	ldrb	r4, [r5, #13]
 800956a:	f014 0402 	ands.w	r4, r4, #2
 800956e:	d008      	beq.n	8009582 <os_sem_pend+0x52>
            OS_ENTER_CRITICAL(sr);
 8009570:	f7fb fcea 	bl	8004f48 <os_arch_save_sr>
            current->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
 8009574:	7b6b      	ldrb	r3, [r5, #13]
            OS_EXIT_CRITICAL(sr);
            ret = OS_TIMEOUT;
 8009576:	2406      	movs	r4, #6
            current->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
 8009578:	f023 0302 	bic.w	r3, r3, #2
 800957c:	736b      	strb	r3, [r5, #13]
            OS_EXIT_CRITICAL(sr);
 800957e:	f7fb fce9 	bl	8004f54 <os_arch_restore_sr>
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_PEND, (uint32_t)ret);
    return ret;
}
 8009582:	4620      	mov	r0, r4
 8009584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if (timeout == 0) {
 8009586:	b306      	cbz	r6, 80095ca <os_sem_pend+0x9a>
        current->t_flags |= OS_TASK_FLAG_SEM_WAIT;
 8009588:	7b6a      	ldrb	r2, [r5, #13]
        current->t_obj = sem;
 800958a:	61ec      	str	r4, [r5, #28]
        current->t_flags |= OS_TASK_FLAG_SEM_WAIT;
 800958c:	f042 0202 	orr.w	r2, r2, #2
 8009590:	736a      	strb	r2, [r5, #13]
        if (!SLIST_EMPTY(&sem->sem_head)) {
 8009592:	6821      	ldr	r1, [r4, #0]
 8009594:	b1b1      	cbz	r1, 80095c4 <os_sem_pend+0x94>
                if (current->t_prio < entry->t_prio) {
 8009596:	460a      	mov	r2, r1
 8009598:	f895 c00b 	ldrb.w	ip, [r5, #11]
 800959c:	7ad0      	ldrb	r0, [r2, #11]
 800959e:	4560      	cmp	r0, ip
 80095a0:	d80e      	bhi.n	80095c0 <os_sem_pend+0x90>
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
 80095a2:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 80095a4:	4613      	mov	r3, r2
 80095a6:	b948      	cbnz	r0, 80095bc <os_sem_pend+0x8c>
            SLIST_INSERT_AFTER(last, current, t_obj_list);
 80095a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80095aa:	64ea      	str	r2, [r5, #76]	; 0x4c
 80095ac:	64dd      	str	r5, [r3, #76]	; 0x4c
        os_sched_sleep(current, timeout);
 80095ae:	4631      	mov	r1, r6
 80095b0:	4628      	mov	r0, r5
 80095b2:	f7fb faef 	bl	8004b94 <os_sched_sleep>
        ret = OS_OK;
 80095b6:	2400      	movs	r4, #0
        sched = 1;
 80095b8:	2601      	movs	r6, #1
 80095ba:	e7ce      	b.n	800955a <os_sem_pend+0x2a>
 80095bc:	4602      	mov	r2, r0
 80095be:	e7ed      	b.n	800959c <os_sem_pend+0x6c>
        if (last) {
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d1f1      	bne.n	80095a8 <os_sem_pend+0x78>
            SLIST_INSERT_HEAD(&sem->sem_head, current, t_obj_list);
 80095c4:	64e9      	str	r1, [r5, #76]	; 0x4c
 80095c6:	6025      	str	r5, [r4, #0]
 80095c8:	e7f1      	b.n	80095ae <os_sem_pend+0x7e>
        ret = OS_TIMEOUT;
 80095ca:	2406      	movs	r4, #6
 80095cc:	e7c5      	b.n	800955a <os_sem_pend+0x2a>
        ret = OS_NOT_STARTED;
 80095ce:	2409      	movs	r4, #9
 80095d0:	e7d7      	b.n	8009582 <os_sem_pend+0x52>
        ret = OS_INVALID_PARM;
 80095d2:	2403      	movs	r4, #3
 80095d4:	e7d5      	b.n	8009582 <os_sem_pend+0x52>
 80095d6:	bf00      	nop
 80095d8:	20003afc 	.word	0x20003afc

080095dc <lrand48>:
#include <stdint.h>

extern unsigned short __rand48_seed[3];	/* Common with mrand48.c, srand48.c */

long lrand48(void)
{
 80095dc:	b508      	push	{r3, lr}
	return (uint32_t) jrand48(__rand48_seed) >> 1;
 80095de:	4802      	ldr	r0, [pc, #8]	; (80095e8 <lrand48+0xc>)
 80095e0:	f000 f80c 	bl	80095fc <jrand48>
}
 80095e4:	0840      	lsrs	r0, r0, #1
 80095e6:	bd08      	pop	{r3, pc}
 80095e8:	20003c80 	.word	0x20003c80

080095ec <strcpy>:

#include <string.h>

char *strcpy(char *dst, const char *src)
{
	char *q = dst;
 80095ec:	4602      	mov	r2, r0
	const char *p = src;
	char ch;

	do {
		*q++ = ch = *p++;
 80095ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80095f2:	f802 3b01 	strb.w	r3, [r2], #1
	} while (ch);
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d1f9      	bne.n	80095ee <strcpy+0x2>

	return dst;
}
 80095fa:	4770      	bx	lr

080095fc <jrand48>:

#include <stdlib.h>
#include <stdint.h>

long jrand48(unsigned short xsubi[3])
{
 80095fc:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
	uint64_t x;

	/* The xsubi[] array is littleendian by spec */
	x = (uint64_t) (uint16_t) xsubi[0] +
	    ((uint64_t) (uint16_t) xsubi[1] << 16) +
 8009600:	8844      	ldrh	r4, [r0, #2]
	    ((uint64_t) (uint16_t) xsubi[2] << 32);
 8009602:	8885      	ldrh	r5, [r0, #4]
	    ((uint64_t) (uint16_t) xsubi[1] << 16) +
 8009604:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8009608:	ea4f 4b04 	mov.w	fp, r4, lsl #16
	    ((uint64_t) (uint16_t) xsubi[2] << 32);
 800960c:	2400      	movs	r4, #0
{
 800960e:	4601      	mov	r1, r0
	x = (uint64_t) (uint16_t) xsubi[0] +
 8009610:	eb1b 0204 	adds.w	r2, fp, r4
 8009614:	8804      	ldrh	r4, [r0, #0]

	x = (0x5deece66dULL * x) + 0xb;
 8009616:	f04f 0005 	mov.w	r0, #5
	x = (uint64_t) (uint16_t) xsubi[0] +
 800961a:	eb4c 0305 	adc.w	r3, ip, r5
 800961e:	2500      	movs	r5, #0
 8009620:	eb12 0b04 	adds.w	fp, r2, r4
	x = (0x5deece66dULL * x) + 0xb;
 8009624:	fb00 f00b 	mul.w	r0, r0, fp
 8009628:	4c09      	ldr	r4, [pc, #36]	; (8009650 <jrand48+0x54>)
	x = (uint64_t) (uint16_t) xsubi[0] +
 800962a:	eb43 0c05 	adc.w	ip, r3, r5
	x = (0x5deece66dULL * x) + 0xb;
 800962e:	fb04 000c 	mla	r0, r4, ip, r0
 8009632:	fbab 2304 	umull	r2, r3, fp, r4
 8009636:	f112 040b 	adds.w	r4, r2, #11
 800963a:	4403      	add	r3, r0
 800963c:	f143 0500 	adc.w	r5, r3, #0

	xsubi[0] = (unsigned short)(uint16_t) x;
	xsubi[1] = (unsigned short)(uint16_t) (x >> 16);
 8009640:	0c20      	lsrs	r0, r4, #16
 8009642:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
	xsubi[0] = (unsigned short)(uint16_t) x;
 8009646:	800c      	strh	r4, [r1, #0]
	xsubi[1] = (unsigned short)(uint16_t) (x >> 16);
 8009648:	8048      	strh	r0, [r1, #2]
	xsubi[2] = (unsigned short)(uint16_t) (x >> 32);
 800964a:	808d      	strh	r5, [r1, #4]

	return (long)(int32_t) (x >> 16);
}
 800964c:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
 8009650:	deece66d 	.word	0xdeece66d

08009654 <stm32f1_adc_create>:

///////////////////////////////////////////////////////////////////////////////
//  Generic Device Creator Code

//  Create the device instance and configure it. Called by sysinit() during startup, defined in pkg.yml.
void DEVICE_CREATE(void) {
 8009654:	b507      	push	{r0, r1, r2, lr}
    console_printf("ADC create " DEVICE_NAME "\n");
 8009656:	480b      	ldr	r0, [pc, #44]	; (8009684 <stm32f1_adc_create+0x30>)
 8009658:	f7f8 fde8 	bl	800222c <console_printf>

    int rc = os_dev_create((struct os_dev *) &DEVICE_INSTANCE, DEVICE_NAME,
 800965c:	4b0a      	ldr	r3, [pc, #40]	; (8009688 <stm32f1_adc_create+0x34>)
 800965e:	2201      	movs	r2, #1
 8009660:	9301      	str	r3, [sp, #4]
 8009662:	4b0a      	ldr	r3, [pc, #40]	; (800968c <stm32f1_adc_create+0x38>)
 8009664:	490a      	ldr	r1, [pc, #40]	; (8009690 <stm32f1_adc_create+0x3c>)
 8009666:	9300      	str	r3, [sp, #0]
 8009668:	480a      	ldr	r0, [pc, #40]	; (8009694 <stm32f1_adc_create+0x40>)
 800966a:	2300      	movs	r3, #0
 800966c:	f7fa fc42 	bl	8003ef4 <os_dev_create>
        OS_DEV_INIT_PRIMARY, 0,  //  For BSP: OS_DEV_INIT_KERNEL, OS_DEV_INIT_PRIO_DEFAULT,
        DEVICE_INIT, (void *) &DEVICE_ITF);
    assert(rc == 0);
 8009670:	b128      	cbz	r0, 800967e <stm32f1_adc_create+0x2a>
 8009672:	2300      	movs	r3, #0
 8009674:	461a      	mov	r2, r3
 8009676:	4619      	mov	r1, r3
 8009678:	4618      	mov	r0, r3
 800967a:	f7fa fa1b 	bl	8003ab4 <__assert_func>
}
 800967e:	b003      	add	sp, #12
 8009680:	f85d fb04 	ldr.w	pc, [sp], #4
 8009684:	0800e0c0 	.word	0x0800e0c0
 8009688:	200001b4 	.word	0x200001b4
 800968c:	080099a1 	.word	0x080099a1
 8009690:	0800dec8 	.word	0x0800dec8
 8009694:	20002c5c 	.word	0x20002c5c

08009698 <stm32f1_adc_size_buffer>:
 * @return Length of buffer in bytes
 */
static int
stm32f1_adc_size_buffer(struct adc_dev *dev, int chans, int samples)
{
    return (sizeof(uint32_t) * chans * samples);
 8009698:	0092      	lsls	r2, r2, #2
}
 800969a:	fb01 f002 	mul.w	r0, r1, r2
 800969e:	4770      	bx	lr

080096a0 <stm32f1_adc_release_buffer>:
{
 80096a0:	b508      	push	{r3, lr}
    assert(0);  //  Not implemented.
 80096a2:	2300      	movs	r3, #0
 80096a4:	461a      	mov	r2, r3
 80096a6:	4619      	mov	r1, r3
 80096a8:	4618      	mov	r0, r3
 80096aa:	f7fa fa03 	bl	8003ab4 <__assert_func>

080096ae <stm32f1_adc_set_buffer>:
{
 80096ae:	b508      	push	{r3, lr}
    assert(0);  //  Not implemented.
 80096b0:	2300      	movs	r3, #0
 80096b2:	461a      	mov	r2, r3
 80096b4:	4619      	mov	r1, r3
 80096b6:	4618      	mov	r0, r3
 80096b8:	f7fa f9fc 	bl	8003ab4 <__assert_func>

080096bc <stm32f1_resolve_adc_gpio.part.0>:
            switch(cnum) {
 80096bc:	3804      	subs	r0, #4
stm32f1_resolve_adc_gpio(ADC_HandleTypeDef *adc, uint8_t cnum,
 80096be:	b510      	push	{r4, lr}
 80096c0:	460b      	mov	r3, r1
            switch(cnum) {
 80096c2:	280b      	cmp	r0, #11
 80096c4:	d820      	bhi.n	8009708 <stm32f1_resolve_adc_gpio.part.0+0x4c>
 80096c6:	e8df f000 	tbb	[pc, r0]
 80096ca:	061d      	.short	0x061d
 80096cc:	17151311 	.word	0x17151311
 80096d0:	1f1f1f1f 	.word	0x1f1f1f1f
 80096d4:	1b19      	.short	0x1b19
                    pin = ADC12_CH5_PIN;
 80096d6:	2405      	movs	r4, #5
    *gpio = (GPIO_InitTypeDef) {
 80096d8:	2210      	movs	r2, #16
 80096da:	2100      	movs	r1, #0
 80096dc:	4618      	mov	r0, r3
 80096de:	f7fb fe52 	bl	8005386 <memset>
 80096e2:	2203      	movs	r2, #3
 80096e4:	6004      	str	r4, [r0, #0]
 80096e6:	6042      	str	r2, [r0, #4]
    return rc;
 80096e8:	2000      	movs	r0, #0
}
 80096ea:	bd10      	pop	{r4, pc}
                    pin = ADC12_CH6_PIN;
 80096ec:	2406      	movs	r4, #6
 80096ee:	e7f3      	b.n	80096d8 <stm32f1_resolve_adc_gpio.part.0+0x1c>
                    pin = ADC12_CH7_PIN;
 80096f0:	2407      	movs	r4, #7
 80096f2:	e7f1      	b.n	80096d8 <stm32f1_resolve_adc_gpio.part.0+0x1c>
                    pin = ADC12_CH8_PIN;
 80096f4:	2410      	movs	r4, #16
 80096f6:	e7ef      	b.n	80096d8 <stm32f1_resolve_adc_gpio.part.0+0x1c>
                    pin = ADC12_CH9_PIN;
 80096f8:	2411      	movs	r4, #17
 80096fa:	e7ed      	b.n	80096d8 <stm32f1_resolve_adc_gpio.part.0+0x1c>
                    pin = ADC12_CH14_PIN;
 80096fc:	2424      	movs	r4, #36	; 0x24
 80096fe:	e7eb      	b.n	80096d8 <stm32f1_resolve_adc_gpio.part.0+0x1c>
                    pin = ADC12_CH15_PIN;
 8009700:	2425      	movs	r4, #37	; 0x25
 8009702:	e7e9      	b.n	80096d8 <stm32f1_resolve_adc_gpio.part.0+0x1c>
                    pin = ADC12_CH4_PIN;
 8009704:	2404      	movs	r4, #4
 8009706:	e7e7      	b.n	80096d8 <stm32f1_resolve_adc_gpio.part.0+0x1c>
            return rc;
 8009708:	2002      	movs	r0, #2
 800970a:	e7ee      	b.n	80096ea <stm32f1_resolve_adc_gpio.part.0+0x2e>

0800970c <stm32f1_adc_configure_channel>:
{
 800970c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800970e:	460c      	mov	r4, r1
 8009710:	b085      	sub	sp, #20
    if (dev == NULL && !IS_ADC_CHANNEL(cnum)) {
 8009712:	4605      	mov	r5, r0
 8009714:	b918      	cbnz	r0, 800971e <stm32f1_adc_configure_channel+0x12>
 8009716:	2911      	cmp	r1, #17
 8009718:	d901      	bls.n	800971e <stm32f1_adc_configure_channel+0x12>
    return (rc);
 800971a:	2402      	movs	r4, #2
 800971c:	e02d      	b.n	800977a <stm32f1_adc_configure_channel+0x6e>
    cfg  = (struct stm32f1_adc_dev_cfg *)dev->ad_dev.od_init_arg;
 800971e:	696b      	ldr	r3, [r5, #20]
    if ((HAL_ADC_ConfigChannel(hadc, cfgdata)) != HAL_OK) {
 8009720:	4611      	mov	r1, r2
    hadc = cfg->sac_adc_handle;
 8009722:	695e      	ldr	r6, [r3, #20]
    chan_cfg = &((struct adc_chan_config *)cfg->sac_chans)[cnum];
 8009724:	685f      	ldr	r7, [r3, #4]
    if ((HAL_ADC_ConfigChannel(hadc, cfgdata)) != HAL_OK) {
 8009726:	4630      	mov	r0, r6
 8009728:	f003 f8ea 	bl	800c900 <HAL_ADC_ConfigChannel>
 800972c:	2800      	cmp	r0, #0
 800972e:	d1f4      	bne.n	800971a <stm32f1_adc_configure_channel+0xe>
    chan_cfg = &((struct adc_chan_config *)cfg->sac_chans)[cnum];
 8009730:	2306      	movs	r3, #6
 8009732:	4363      	muls	r3, r4
    dev->ad_chans[cnum].c_res = chan_cfg->c_res;
 8009734:	6b69      	ldr	r1, [r5, #52]	; 0x34
    chan_cfg = &((struct adc_chan_config *)cfg->sac_chans)[cnum];
 8009736:	eb07 0c03 	add.w	ip, r7, r3
    dev->ad_chans[cnum].c_res = chan_cfg->c_res;
 800973a:	f89c 5002 	ldrb.w	r5, [ip, #2]
 800973e:	18ca      	adds	r2, r1, r3
 8009740:	7095      	strb	r5, [r2, #2]
    dev->ad_chans[cnum].c_refmv = chan_cfg->c_refmv;
 8009742:	5afd      	ldrh	r5, [r7, r3]
 8009744:	52cd      	strh	r5, [r1, r3]
    dev->ad_chans[cnum].c_configured = 1;
 8009746:	2301      	movs	r3, #1
 8009748:	70d3      	strb	r3, [r2, #3]
    if (cnum == ADC_CHANNEL_TEMPSENSOR || cnum == ADC_CHANNEL_VREFINT) {
 800974a:	f1a4 0310 	sub.w	r3, r4, #16
 800974e:	2b01      	cmp	r3, #1
    dev->ad_chans[cnum].c_cnum = cnum;
 8009750:	7114      	strb	r4, [r2, #4]
    if (cnum == ADC_CHANNEL_TEMPSENSOR || cnum == ADC_CHANNEL_VREFINT) {
 8009752:	d915      	bls.n	8009780 <stm32f1_adc_configure_channel+0x74>
    switch (adc_addr) {
 8009754:	6833      	ldr	r3, [r6, #0]
 8009756:	4a0b      	ldr	r2, [pc, #44]	; (8009784 <stm32f1_adc_configure_channel+0x78>)
 8009758:	4293      	cmp	r3, r2
 800975a:	d003      	beq.n	8009764 <stm32f1_adc_configure_channel+0x58>
 800975c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009760:	4293      	cmp	r3, r2
 8009762:	d1da      	bne.n	800971a <stm32f1_adc_configure_channel+0xe>
 8009764:	4620      	mov	r0, r4
 8009766:	4669      	mov	r1, sp
 8009768:	f7ff ffa8 	bl	80096bc <stm32f1_resolve_adc_gpio.part.0>
    if (stm32f1_resolve_adc_gpio(hadc, cnum, &gpio_td)) {
 800976c:	4604      	mov	r4, r0
 800976e:	2800      	cmp	r0, #0
 8009770:	d1d3      	bne.n	800971a <stm32f1_adc_configure_channel+0xe>
    hal_gpio_init_stm(gpio_td.Pin, &gpio_td);
 8009772:	4669      	mov	r1, sp
 8009774:	9800      	ldr	r0, [sp, #0]
 8009776:	f7fe fd23 	bl	80081c0 <hal_gpio_init_stm>
}
 800977a:	4620      	mov	r0, r4
 800977c:	b005      	add	sp, #20
 800977e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return OS_OK;
 8009780:	4604      	mov	r4, r0
 8009782:	e7fa      	b.n	800977a <stm32f1_adc_configure_channel+0x6e>
 8009784:	40012400 	.word	0x40012400

08009788 <stm32f1_adc_open.part.4>:
stm32f1_adc_read_buffer(struct adc_dev *dev, void *buf, int buf_len, int off,
 8009788:	b508      	push	{r3, lr}
    assert(off < buf_len);
 800978a:	2300      	movs	r3, #0
 800978c:	461a      	mov	r2, r3
 800978e:	4619      	mov	r1, r3
 8009790:	4618      	mov	r0, r3
 8009792:	f7fa f98f 	bl	8003ab4 <__assert_func>

08009796 <stm32f1_adc_read_buffer>:
 8009796:	4293      	cmp	r3, r2
{
 8009798:	b508      	push	{r3, lr}
    assert(off < buf_len);
 800979a:	db01      	blt.n	80097a0 <stm32f1_adc_read_buffer+0xa>
 800979c:	f7ff fff4 	bl	8009788 <stm32f1_adc_open.part.4>
    *result = *((uint32_t *)buf + off);
 80097a0:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 80097a4:	9b02      	ldr	r3, [sp, #8]
}
 80097a6:	2000      	movs	r0, #0
    *result = *((uint32_t *)buf + off);
 80097a8:	601a      	str	r2, [r3, #0]
}
 80097aa:	bd08      	pop	{r3, pc}

080097ac <stm32f1_adc_read_channel>:
{
 80097ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097ae:	4616      	mov	r6, r2
    assert(dev != NULL && result != NULL);
 80097b0:	b100      	cbz	r0, 80097b4 <stm32f1_adc_read_channel+0x8>
 80097b2:	b90a      	cbnz	r2, 80097b8 <stm32f1_adc_read_channel+0xc>
 80097b4:	f7ff ffe8 	bl	8009788 <stm32f1_adc_open.part.4>
    hadc = cfg->sac_adc_handle;
 80097b8:	6943      	ldr	r3, [r0, #20]
 80097ba:	695c      	ldr	r4, [r3, #20]
    while (HAL_ADCEx_Calibration_Start(hadc) != HAL_OK);  // Calibrate AD converter.
 80097bc:	4620      	mov	r0, r4
 80097be:	f003 fb01 	bl	800cdc4 <HAL_ADCEx_Calibration_Start>
 80097c2:	4607      	mov	r7, r0
 80097c4:	2800      	cmp	r0, #0
 80097c6:	d1f9      	bne.n	80097bc <stm32f1_adc_read_channel+0x10>
    HAL_ADC_Start(hadc);
 80097c8:	4620      	mov	r0, r4
 80097ca:	f003 f94f 	bl	800ca6c <HAL_ADC_Start>
    HAL_StatusTypeDef rc = HAL_ADC_PollForConversion(hadc, 10 * 1000);  //  Wait up to 10 seconds.  TODO: Yield to task scheduler while waiting.
 80097ce:	f242 7110 	movw	r1, #10000	; 0x2710
 80097d2:	4620      	mov	r0, r4
 80097d4:	f002 ffb8 	bl	800c748 <HAL_ADC_PollForConversion>
    assert(rc == HAL_OK);
 80097d8:	4605      	mov	r5, r0
 80097da:	b128      	cbz	r0, 80097e8 <stm32f1_adc_read_channel+0x3c>
 80097dc:	463b      	mov	r3, r7
 80097de:	463a      	mov	r2, r7
 80097e0:	4639      	mov	r1, r7
 80097e2:	4638      	mov	r0, r7
 80097e4:	f7fa f966 	bl	8003ab4 <__assert_func>
    val = HAL_ADC_GetValue(hadc);
 80097e8:	4620      	mov	r0, r4
 80097ea:	f003 f84b 	bl	800c884 <HAL_ADC_GetValue>
    *result = val;
 80097ee:	6030      	str	r0, [r6, #0]
    HAL_ADC_Stop(hadc);
 80097f0:	4620      	mov	r0, r4
 80097f2:	f003 facd 	bl	800cd90 <HAL_ADC_Stop>
}
 80097f6:	4628      	mov	r0, r5
 80097f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080097fc <stm32f1_adc_sample>:
{
 80097fc:	b508      	push	{r3, lr}
    assert(dev);
 80097fe:	b908      	cbnz	r0, 8009804 <stm32f1_adc_sample+0x8>
 8009800:	f7ff ffc2 	bl	8009788 <stm32f1_adc_open.part.4>
    cfg  = (struct stm32f1_adc_dev_cfg *)dev->ad_dev.od_init_arg;
 8009804:	6943      	ldr	r3, [r0, #20]
    if (HAL_ADC_Start_DMA(hadc, cfg->primarybuf, cfg->buflen) != HAL_OK) {
 8009806:	691a      	ldr	r2, [r3, #16]
 8009808:	6899      	ldr	r1, [r3, #8]
 800980a:	6958      	ldr	r0, [r3, #20]
 800980c:	f003 f990 	bl	800cb30 <HAL_ADC_Start_DMA>
 8009810:	b120      	cbz	r0, 800981c <stm32f1_adc_sample+0x20>
    rc = OS_EINVAL;
 8009812:	2002      	movs	r0, #2
        ++stm32f1_adc_stats.adc_dma_start_error;
 8009814:	4a02      	ldr	r2, [pc, #8]	; (8009820 <stm32f1_adc_sample+0x24>)
 8009816:	8953      	ldrh	r3, [r2, #10]
 8009818:	3301      	adds	r3, #1
 800981a:	8153      	strh	r3, [r2, #10]
}
 800981c:	bd08      	pop	{r3, pc}
 800981e:	bf00      	nop
 8009820:	20002ca4 	.word	0x20002ca4

08009824 <stm32f1_adc_open>:
{
 8009824:	b530      	push	{r4, r5, lr}
 8009826:	460d      	mov	r5, r1
 8009828:	b089      	sub	sp, #36	; 0x24
    assert(odev);
 800982a:	4604      	mov	r4, r0
 800982c:	b908      	cbnz	r0, 8009832 <stm32f1_adc_open+0xe>
 800982e:	f7ff ffab 	bl	8009788 <stm32f1_adc_open.part.4>
    if (os_started()) {
 8009832:	f7fa f9ff 	bl	8003c34 <os_started>
 8009836:	b948      	cbnz	r0, 800984c <stm32f1_adc_open+0x28>
    if (odev->od_flags & OS_DEV_F_STATUS_OPEN) {
 8009838:	7ee3      	ldrb	r3, [r4, #27]
 800983a:	f013 0302 	ands.w	r3, r3, #2
 800983e:	d00e      	beq.n	800985e <stm32f1_adc_open+0x3a>
        os_mutex_release(&dev->ad_lock);
 8009840:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009844:	f7fb f82c 	bl	80048a0 <os_mutex_release>
        rc = OS_EBUSY;
 8009848:	200b      	movs	r0, #11
        goto err;
 800984a:	e006      	b.n	800985a <stm32f1_adc_open+0x36>
        rc = os_mutex_pend(&dev->ad_lock, wait);
 800984c:	4629      	mov	r1, r5
 800984e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009852:	f7fb f875 	bl	8004940 <os_mutex_pend>
        if (rc != OS_OK) {
 8009856:	2800      	cmp	r0, #0
 8009858:	d0ee      	beq.n	8009838 <stm32f1_adc_open+0x14>
}
 800985a:	b009      	add	sp, #36	; 0x24
 800985c:	bd30      	pop	{r4, r5, pc}
    hadc = adc_config->sac_adc_handle;
 800985e:	6962      	ldr	r2, [r4, #20]
 8009860:	6954      	ldr	r4, [r2, #20]
    assert(hadc);
 8009862:	b92c      	cbnz	r4, 8009870 <stm32f1_adc_open+0x4c>
 8009864:	2300      	movs	r3, #0
 8009866:	461a      	mov	r2, r3
 8009868:	4619      	mov	r1, r3
 800986a:	4618      	mov	r0, r3
            assert(0);
 800986c:	f7fa f922 	bl	8003ab4 <__assert_func>
    RCC_ClkInitTypeDef clkinitstruct = { 0 };
 8009870:	e9cd 3305 	strd	r3, r3, [sp, #20]
    clkinitstruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;  //  Value 2
 8009874:	2102      	movs	r1, #2
 8009876:	2309      	movs	r3, #9
 8009878:	e9cd 3103 	strd	r3, r1, [sp, #12]
    clkinitstruct.APB2CLKDivider = RCC_HCLK_DIV8;  //  Value 1536
 800987c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
    if (HAL_RCC_ClockConfig(&clkinitstruct, FLASH_LATENCY_2) != HAL_OK) { assert(0); }  //  Latency=2
 8009880:	a803      	add	r0, sp, #12
    clkinitstruct.APB2CLKDivider = RCC_HCLK_DIV8;  //  Value 1536
 8009882:	9307      	str	r3, [sp, #28]
    if (HAL_RCC_ClockConfig(&clkinitstruct, FLASH_LATENCY_2) != HAL_OK) { assert(0); }  //  Latency=2
 8009884:	f7ff fa26 	bl	8008cd4 <HAL_RCC_ClockConfig>
 8009888:	4603      	mov	r3, r0
 800988a:	2800      	cmp	r0, #0
 800988c:	d1ea      	bne.n	8009864 <stm32f1_adc_open+0x40>
    switch (adc_addr) {
 800988e:	4a12      	ldr	r2, [pc, #72]	; (80098d8 <stm32f1_adc_open+0xb4>)
 8009890:	6821      	ldr	r1, [r4, #0]
 8009892:	4291      	cmp	r1, r2
 8009894:	f502 426c 	add.w	r2, r2, #60416	; 0xec00
 8009898:	d005      	beq.n	80098a6 <stm32f1_adc_open+0x82>
 800989a:	4d10      	ldr	r5, [pc, #64]	; (80098dc <stm32f1_adc_open+0xb8>)
 800989c:	42a9      	cmp	r1, r5
 800989e:	d011      	beq.n	80098c4 <stm32f1_adc_open+0xa0>
            assert(0);
 80098a0:	4602      	mov	r2, r0
 80098a2:	4601      	mov	r1, r0
 80098a4:	e7e2      	b.n	800986c <stm32f1_adc_open+0x48>
            __HAL_RCC_ADC1_CLK_ENABLE();
 80098a6:	6993      	ldr	r3, [r2, #24]
 80098a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80098ac:	6193      	str	r3, [r2, #24]
 80098ae:	6993      	ldr	r3, [r2, #24]
 80098b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80098b4:	9301      	str	r3, [sp, #4]
 80098b6:	9b01      	ldr	r3, [sp, #4]
    if (HAL_ADC_Init(hadc) != HAL_OK) {
 80098b8:	4620      	mov	r0, r4
 80098ba:	f003 f9e9 	bl	800cc90 <HAL_ADC_Init>
 80098be:	2800      	cmp	r0, #0
 80098c0:	d0cb      	beq.n	800985a <stm32f1_adc_open+0x36>
 80098c2:	e7cf      	b.n	8009864 <stm32f1_adc_open+0x40>
            __HAL_RCC_ADC2_CLK_ENABLE();
 80098c4:	6993      	ldr	r3, [r2, #24]
 80098c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80098ca:	6193      	str	r3, [r2, #24]
 80098cc:	6993      	ldr	r3, [r2, #24]
 80098ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80098d2:	9302      	str	r3, [sp, #8]
 80098d4:	9b02      	ldr	r3, [sp, #8]
 80098d6:	e7ef      	b.n	80098b8 <stm32f1_adc_open+0x94>
 80098d8:	40012400 	.word	0x40012400
 80098dc:	40012800 	.word	0x40012800

080098e0 <stm32f1_adc_close>:
{
 80098e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    assert(dev);
 80098e2:	4604      	mov	r4, r0
 80098e4:	b920      	cbnz	r0, 80098f0 <stm32f1_adc_close+0x10>
 80098e6:	4603      	mov	r3, r0
 80098e8:	4602      	mov	r2, r0
 80098ea:	4601      	mov	r1, r0
            assert(0);
 80098ec:	f7fa f8e2 	bl	8003ab4 <__assert_func>
    cnum = dev->ad_chans->c_cnum;
 80098f0:	6b43      	ldr	r3, [r0, #52]	; 0x34
    switch (adc_addr) {
 80098f2:	4a1b      	ldr	r2, [pc, #108]	; (8009960 <stm32f1_adc_close+0x80>)
    cnum = dev->ad_chans->c_cnum;
 80098f4:	7918      	ldrb	r0, [r3, #4]
    hadc = cfg->sac_adc_handle;
 80098f6:	6963      	ldr	r3, [r4, #20]
    uintptr_t adc_addr = (uintptr_t)hadc->Instance;
 80098f8:	695b      	ldr	r3, [r3, #20]
 80098fa:	681b      	ldr	r3, [r3, #0]
    switch (adc_addr) {
 80098fc:	4293      	cmp	r3, r2
 80098fe:	f502 426c 	add.w	r2, r2, #60416	; 0xec00
 8009902:	d007      	beq.n	8009914 <stm32f1_adc_close+0x34>
 8009904:	4917      	ldr	r1, [pc, #92]	; (8009964 <stm32f1_adc_close+0x84>)
 8009906:	428b      	cmp	r3, r1
 8009908:	d025      	beq.n	8009956 <stm32f1_adc_close+0x76>
            assert(0);
 800990a:	2300      	movs	r3, #0
 800990c:	461a      	mov	r2, r3
 800990e:	4619      	mov	r1, r3
 8009910:	4618      	mov	r0, r3
 8009912:	e7eb      	b.n	80098ec <stm32f1_adc_close+0xc>
            __HAL_RCC_ADC1_CLK_DISABLE();
 8009914:	6991      	ldr	r1, [r2, #24]
 8009916:	f421 7100 	bic.w	r1, r1, #512	; 0x200
            __HAL_RCC_ADC2_CLK_DISABLE();
 800991a:	6191      	str	r1, [r2, #24]
    if (cnum != ADC_CHANNEL_TEMPSENSOR && cnum != ADC_CHANNEL_VREFINT) {
 800991c:	f1a0 0210 	sub.w	r2, r0, #16
 8009920:	2a01      	cmp	r2, #1
 8009922:	d90e      	bls.n	8009942 <stm32f1_adc_close+0x62>
    switch (adc_addr) {
 8009924:	4a0e      	ldr	r2, [pc, #56]	; (8009960 <stm32f1_adc_close+0x80>)
 8009926:	4293      	cmp	r3, r2
 8009928:	d003      	beq.n	8009932 <stm32f1_adc_close+0x52>
 800992a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800992e:	4293      	cmp	r3, r2
 8009930:	d107      	bne.n	8009942 <stm32f1_adc_close+0x62>
 8009932:	4669      	mov	r1, sp
 8009934:	f7ff fec2 	bl	80096bc <stm32f1_resolve_adc_gpio.part.0>
        if (stm32f1_resolve_adc_gpio(hadc, cnum, &gpio_td)) {
 8009938:	b918      	cbnz	r0, 8009942 <stm32f1_adc_close+0x62>
        if (hal_gpio_deinit_stm(gpio_td.Pin, &gpio_td)) {
 800993a:	4669      	mov	r1, sp
 800993c:	9800      	ldr	r0, [sp, #0]
 800993e:	f7fe fc59 	bl	80081f4 <hal_gpio_deinit_stm>
    if (os_started()) {
 8009942:	f7fa f977 	bl	8003c34 <os_started>
 8009946:	b118      	cbz	r0, 8009950 <stm32f1_adc_close+0x70>
        os_mutex_release(&dev->ad_lock);
 8009948:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800994c:	f7fa ffa8 	bl	80048a0 <os_mutex_release>
}
 8009950:	2000      	movs	r0, #0
 8009952:	b004      	add	sp, #16
 8009954:	bd10      	pop	{r4, pc}
            __HAL_RCC_ADC2_CLK_DISABLE();
 8009956:	6991      	ldr	r1, [r2, #24]
 8009958:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800995c:	e7dd      	b.n	800991a <stm32f1_adc_close+0x3a>
 800995e:	bf00      	nop
 8009960:	40012400 	.word	0x40012400
 8009964:	40012800 	.word	0x40012800

08009968 <HAL_ADC_ErrorCallback>:
    ++stm32f1_adc_stats.adc_error;
 8009968:	4b0c      	ldr	r3, [pc, #48]	; (800999c <HAL_ADC_ErrorCallback+0x34>)
 800996a:	885a      	ldrh	r2, [r3, #2]
 800996c:	3201      	adds	r2, #1
 800996e:	805a      	strh	r2, [r3, #2]
    if (hadc->ErrorCode & HAL_ADC_ERROR_DMA) {
 8009970:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8009972:	0752      	lsls	r2, r2, #29
 8009974:	d503      	bpl.n	800997e <HAL_ADC_ErrorCallback+0x16>
        ++stm32f1_adc_stats.adc_dma_xfer_failed;
 8009976:	889a      	ldrh	r2, [r3, #4]
 8009978:	3201      	adds	r2, #1
 800997a:	809a      	strh	r2, [r3, #4]
 800997c:	4770      	bx	lr
    } else if (hadc->ErrorCode & HAL_ADC_ERROR_OVR) {
 800997e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8009980:	0791      	lsls	r1, r2, #30
 8009982:	d503      	bpl.n	800998c <HAL_ADC_ErrorCallback+0x24>
        ++stm32f1_adc_stats.adc_dma_overrun;
 8009984:	899a      	ldrh	r2, [r3, #12]
 8009986:	3201      	adds	r2, #1
 8009988:	819a      	strh	r2, [r3, #12]
 800998a:	4770      	bx	lr
    } else if (hadc->ErrorCode & HAL_ADC_ERROR_INTERNAL) {
 800998c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800998e:	07d2      	lsls	r2, r2, #31
        ++stm32f1_adc_stats.adc_internal_error;
 8009990:	bf42      	ittt	mi
 8009992:	89da      	ldrhmi	r2, [r3, #14]
 8009994:	3201      	addmi	r2, #1
 8009996:	81da      	strhmi	r2, [r3, #14]
}
 8009998:	4770      	bx	lr
 800999a:	bf00      	nop
 800999c:	20002ca4 	.word	0x20002ca4

080099a0 <stm32f1_adc_dev_init>:
 * @param2 stm32f1 ADC device cfg ptr
 * @return OS_OK on success
 */
int
stm32f1_adc_dev_init(struct os_dev *odev, void *arg)
{
 80099a0:	b538      	push	{r3, r4, r5, lr}
 80099a2:	4604      	mov	r4, r0
    struct stm32f1_adc_dev_cfg *sac;
    struct adc_dev *dev;

    sac = (struct stm32f1_adc_dev_cfg *) arg;

    assert(sac != NULL);
 80099a4:	460d      	mov	r5, r1
 80099a6:	b921      	cbnz	r1, 80099b2 <stm32f1_adc_dev_init+0x12>
 80099a8:	460b      	mov	r3, r1
 80099aa:	460a      	mov	r2, r1
 80099ac:	4608      	mov	r0, r1
 80099ae:	f7fa f881 	bl	8003ab4 <__assert_func>

    dev = (struct adc_dev *)odev;

    os_mutex_init(&dev->ad_lock);
 80099b2:	3024      	adds	r0, #36	; 0x24
 80099b4:	f7fa ff6a 	bl	800488c <os_mutex_init>

    dev->ad_chans = (void *) sac->sac_chans;
 80099b8:	686b      	ldr	r3, [r5, #4]
    ADC_HandleTypeDef *hadc = cfg->sac_adc_handle;
    HAL_StatusTypeDef rc = HAL_ADC_Init(hadc);  ////  Added HAL initalisation, which was missing from the STM32F4 code.
    if (rc != HAL_OK) { return rc; }
#endif  //  NOTUSED
    return (OS_OK);
}
 80099ba:	2000      	movs	r0, #0
    dev->ad_chans = (void *) sac->sac_chans;
 80099bc:	6363      	str	r3, [r4, #52]	; 0x34
    dev->ad_chan_count = sac->sac_chan_count;
 80099be:	782b      	ldrb	r3, [r5, #0]
 80099c0:	63a3      	str	r3, [r4, #56]	; 0x38
    OS_DEV_SETHANDLERS(odev, stm32f1_adc_open, stm32f1_adc_close);
 80099c2:	4b03      	ldr	r3, [pc, #12]	; (80099d0 <stm32f1_adc_dev_init+0x30>)
 80099c4:	6023      	str	r3, [r4, #0]
 80099c6:	4b03      	ldr	r3, [pc, #12]	; (80099d4 <stm32f1_adc_dev_init+0x34>)
 80099c8:	60e3      	str	r3, [r4, #12]
    dev->ad_funcs = &stm32f1_adc_funcs;
 80099ca:	4b03      	ldr	r3, [pc, #12]	; (80099d8 <stm32f1_adc_dev_init+0x38>)
 80099cc:	6323      	str	r3, [r4, #48]	; 0x30
}
 80099ce:	bd38      	pop	{r3, r4, r5, pc}
 80099d0:	08009825 	.word	0x08009825
 80099d4:	080098e1 	.word	0x080098e1
 80099d8:	0800e0d4 	.word	0x0800e0d4

080099dc <esp8266_create>:
//  Generic Device Creator Code based on repos\apache-mynewt-core\hw\sensor\creator\src\sensor_creator.c

static int config_device(void);

//  Create the device instance and configure it.  Called by sysinit() during startup, defined in pkg.yml.
void DEVICE_CREATE(void) {
 80099dc:	b530      	push	{r4, r5, lr}
    console_printf("%screate " DEVICE_NAME "\n", _esp);
 80099de:	4b18      	ldr	r3, [pc, #96]	; (8009a40 <esp8266_create+0x64>)
void DEVICE_CREATE(void) {
 80099e0:	b0ab      	sub	sp, #172	; 0xac
    console_printf("%screate " DEVICE_NAME "\n", _esp);
 80099e2:	6819      	ldr	r1, [r3, #0]
 80099e4:	4817      	ldr	r0, [pc, #92]	; (8009a44 <esp8266_create+0x68>)
 80099e6:	f7f8 fc21 	bl	800222c <console_printf>

    //  Create the device.
    int rc = os_dev_create((struct os_dev *) &DEVICE_INSTANCE, DEVICE_NAME,
        OS_DEV_INIT_PRIMARY, 0,  //  For BSP: OS_DEV_INIT_KERNEL, OS_DEV_INIT_PRIO_DEFAULT,
        DEVICE_INIT, (void *) &DEVICE_ITF);
 80099ea:	4b17      	ldr	r3, [pc, #92]	; (8009a48 <esp8266_create+0x6c>)
 80099ec:	2201      	movs	r2, #1
 80099ee:	9301      	str	r3, [sp, #4]
 80099f0:	4b16      	ldr	r3, [pc, #88]	; (8009a4c <esp8266_create+0x70>)
 80099f2:	4917      	ldr	r1, [pc, #92]	; (8009a50 <esp8266_create+0x74>)
 80099f4:	9300      	str	r3, [sp, #0]
 80099f6:	4817      	ldr	r0, [pc, #92]	; (8009a54 <esp8266_create+0x78>)
 80099f8:	2300      	movs	r3, #0
 80099fa:	f7fa fa7b 	bl	8003ef4 <os_dev_create>
    assert(rc == 0);
 80099fe:	4602      	mov	r2, r0
 8009a00:	b128      	cbz	r0, 8009a0e <esp8266_create+0x32>
 8009a02:	2300      	movs	r3, #0
 8009a04:	461a      	mov	r2, r3
 8009a06:	4619      	mov	r1, r3
 8009a08:	4618      	mov	r0, r3
 8009a0a:	f7fa f853 	bl	8003ab4 <__assert_func>
    int rc;
    struct os_dev *dev;
    struct DEVICE_CFG cfg;

    //  Fetch the device.
    dev = (struct os_dev *) os_dev_open(DEVICE_NAME, OS_TIMEOUT_NEVER, NULL);
 8009a0e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009a12:	480f      	ldr	r0, [pc, #60]	; (8009a50 <esp8266_create+0x74>)
 8009a14:	f7fa fad8 	bl	8003fc8 <os_dev_open>
    assert(dev != NULL);
 8009a18:	4604      	mov	r4, r0
 8009a1a:	2800      	cmp	r0, #0
 8009a1c:	d0f1      	beq.n	8009a02 <esp8266_create+0x26>

    //  Get the default config for the device.
    rc = DEVICE_CFG_DEFAULT(&cfg);
 8009a1e:	a803      	add	r0, sp, #12
 8009a20:	f000 f8a0 	bl	8009b64 <esp8266_default_cfg>
    assert(rc == 0);
 8009a24:	2800      	cmp	r0, #0
 8009a26:	d1ec      	bne.n	8009a02 <esp8266_create+0x26>

    //  Apply the device config.
    rc = DEVICE_CFG_FUNC((struct DEVICE_DEV *)dev, &cfg);
 8009a28:	a903      	add	r1, sp, #12
 8009a2a:	4620      	mov	r0, r4
 8009a2c:	f000 f8a4 	bl	8009b78 <esp8266_config>
 8009a30:	4605      	mov	r5, r0
    os_dev_close(dev);
 8009a32:	4620      	mov	r0, r4
 8009a34:	f7fa fae9 	bl	800400a <os_dev_close>
    assert(rc == 0);
 8009a38:	2d00      	cmp	r5, #0
 8009a3a:	d1e2      	bne.n	8009a02 <esp8266_create+0x26>
}
 8009a3c:	b02b      	add	sp, #172	; 0xac
 8009a3e:	bd30      	pop	{r4, r5, pc}
 8009a40:	20000214 	.word	0x20000214
 8009a44:	0800e0f0 	.word	0x0800e0f0
 8009a48:	200001fc 	.word	0x200001fc
 8009a4c:	08009b31 	.word	0x08009b31
 8009a50:	0800e104 	.word	0x0800e104
 8009a54:	20002cb4 	.word	0x20002cb4

08009a58 <_ZL13esp8266_eventPv>:
        if (_cbs[i].callback) {
            _cbs[i].callback(_cbs[i].data);
        }
    }
#endif  //  TODO
}
 8009a58:	4770      	bx	lr

08009a5a <_ZL13esp8266_closeP6os_dev.part.2>:
static int register_transport(const char *network_device, void *server_endpoint, const char *host, uint16_t port, uint8_t server_endpoint_size) {
 8009a5a:	b508      	push	{r3, lr}
    assert(server_endpoint_size >= sizeof(struct esp8266_server));  //  Server Endpoint too small
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	461a      	mov	r2, r3
 8009a60:	4619      	mov	r1, r3
 8009a62:	4618      	mov	r0, r3
 8009a64:	f7fa f826 	bl	8003ab4 <__assert_func>

08009a68 <_ZL18register_transportPKcPvS0_th>:
static int register_transport(const char *network_device, void *server_endpoint, const char *host, uint16_t port, uint8_t server_endpoint_size) {
 8009a68:	b510      	push	{r4, lr}
 8009a6a:	f89d 4008 	ldrb.w	r4, [sp, #8]
    assert(server_endpoint_size >= sizeof(struct esp8266_server));  //  Server Endpoint too small
 8009a6e:	2c0f      	cmp	r4, #15
 8009a70:	d801      	bhi.n	8009a76 <_ZL18register_transportPKcPvS0_th+0xe>
 8009a72:	f7ff fff2 	bl	8009a5a <_ZL13esp8266_closeP6os_dev.part.2>
}
 8009a76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    int rc = esp8266_register_transport(network_device, (struct esp8266_server *) server_endpoint, host, port);
 8009a7a:	f000 b9c3 	b.w	8009e04 <esp8266_register_transport>
	...

08009a80 <_ZL13esp8266_closeP6os_dev>:
static int esp8266_close(struct os_dev *dev0) {
 8009a80:	b510      	push	{r4, lr}
 8009a82:	4604      	mov	r4, r0
    console_printf("]\n");  console_flush();  ////
 8009a84:	4804      	ldr	r0, [pc, #16]	; (8009a98 <_ZL13esp8266_closeP6os_dev+0x18>)
 8009a86:	f7f8 fbd1 	bl	800222c <console_printf>
 8009a8a:	f7f8 faf5 	bl	8002078 <console_flush>
    assert(dev0);
 8009a8e:	b90c      	cbnz	r4, 8009a94 <_ZL13esp8266_closeP6os_dev+0x14>
 8009a90:	f7ff ffe3 	bl	8009a5a <_ZL13esp8266_closeP6os_dev.part.2>
}
 8009a94:	2000      	movs	r0, #0
 8009a96:	bd10      	pop	{r4, pc}
 8009a98:	0800e127 	.word	0x0800e127

08009a9c <_ZL12esp8266_openP6os_devmPv>:
static int esp8266_open(struct os_dev *dev0, uint32_t timeout, void *arg) {
 8009a9c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!first_open) { console_printf("[\n"); return 0; }  ////
 8009a9e:	4b1d      	ldr	r3, [pc, #116]	; (8009b14 <_ZL12esp8266_openP6os_devmPv+0x78>)
static int esp8266_open(struct os_dev *dev0, uint32_t timeout, void *arg) {
 8009aa0:	4604      	mov	r4, r0
    if (!first_open) { console_printf("[\n"); return 0; }  ////
 8009aa2:	781a      	ldrb	r2, [r3, #0]
 8009aa4:	b92a      	cbnz	r2, 8009ab2 <_ZL12esp8266_openP6os_devmPv+0x16>
 8009aa6:	481c      	ldr	r0, [pc, #112]	; (8009b18 <_ZL12esp8266_openP6os_devmPv+0x7c>)
 8009aa8:	f7f8 fbc0 	bl	800222c <console_printf>
}
 8009aac:	2000      	movs	r0, #0
 8009aae:	b004      	add	sp, #16
 8009ab0:	bd70      	pop	{r4, r5, r6, pc}
    first_open = false;
 8009ab2:	2500      	movs	r5, #0
    console_printf("[\n");  ////
 8009ab4:	4818      	ldr	r0, [pc, #96]	; (8009b18 <_ZL12esp8266_openP6os_devmPv+0x7c>)
    first_open = false;
 8009ab6:	701d      	strb	r5, [r3, #0]
    console_printf("[\n");  ////
 8009ab8:	f7f8 fbb8 	bl	800222c <console_printf>
    assert(dev0);
 8009abc:	b92c      	cbnz	r4, 8009aca <_ZL12esp8266_openP6os_devmPv+0x2e>
 8009abe:	4623      	mov	r3, r4
 8009ac0:	4622      	mov	r2, r4
 8009ac2:	4621      	mov	r1, r4
 8009ac4:	4620      	mov	r0, r4
 8009ac6:	f7f9 fff5 	bl	8003ab4 <__assert_func>
    dev->controller = &controller;
 8009aca:	4e14      	ldr	r6, [pc, #80]	; (8009b1c <_ZL12esp8266_openP6os_devmPv+0x80>)
    memset(cfg->_cbs, 0, sizeof(cfg->_cbs));
 8009acc:	4629      	mov	r1, r5
    dev->controller = &controller;
 8009ace:	f8c4 60c0 	str.w	r6, [r4, #192]	; 0xc0
    memset(cfg->_ids, 0, sizeof(cfg->_ids));
 8009ad2:	f8a4 508b 	strh.w	r5, [r4, #139]	; 0x8b
    memset(cfg->_cbs, 0, sizeof(cfg->_cbs));
 8009ad6:	2210      	movs	r2, #16
 8009ad8:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
 8009adc:	f7fb fc53 	bl	8005386 <memset>
    drv(dev)->init(
 8009ae0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009ae4:	4a0e      	ldr	r2, [pc, #56]	; (8009b20 <_ZL12esp8266_openP6os_devmPv+0x84>)
 8009ae6:	9302      	str	r3, [sp, #8]
 8009ae8:	e9cd 3200 	strd	r3, r2, [sp]
 8009aec:	4630      	mov	r0, r6
 8009aee:	4b0d      	ldr	r3, [pc, #52]	; (8009b24 <_ZL12esp8266_openP6os_devmPv+0x88>)
 8009af0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8009af4:	9503      	str	r5, [sp, #12]
 8009af6:	490c      	ldr	r1, [pc, #48]	; (8009b28 <_ZL12esp8266_openP6os_devmPv+0x8c>)
 8009af8:	f000 f9ec 	bl	8009ed4 <_ZN7ESP82664initEPcmS0_mS0_mb>
    drv(dev)->configure(cfg->uart);         //  Configure the UART port.  0 means UART2.
 8009afc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009afe:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
 8009b02:	f000 fa13 	bl	8009f2c <_ZN7ESP82669configureEi>
    drv(dev)->attach(&esp8266_event, dev);  //  Set the callback for ESP8266 events.
 8009b06:	4622      	mov	r2, r4
 8009b08:	4908      	ldr	r1, [pc, #32]	; (8009b2c <_ZL12esp8266_openP6os_devmPv+0x90>)
 8009b0a:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
 8009b0e:	f000 fc16 	bl	800a33e <_ZN7ESP82666attachEPFvPvES0_>
 8009b12:	e7cb      	b.n	8009aac <_ZL12esp8266_openP6os_devmPv+0x10>
 8009b14:	20000210 	.word	0x20000210
 8009b18:	0800e10e 	.word	0x0800e10e
 8009b1c:	20002d78 	.word	0x20002d78
 8009b20:	200030e0 	.word	0x200030e0
 8009b24:	20002e50 	.word	0x20002e50
 8009b28:	20002f50 	.word	0x20002f50
 8009b2c:	08009a59 	.word	0x08009a59

08009b30 <esp8266_init>:
int esp8266_init(struct os_dev *dev0, void *arg) {
 8009b30:	b508      	push	{r3, lr}
    if (!arg || !dev0) { rc = SYS_ENODEV; goto err; }
 8009b32:	b171      	cbz	r1, 8009b52 <esp8266_init+0x22>
 8009b34:	b168      	cbz	r0, 8009b52 <esp8266_init+0x22>
    OS_DEV_SETHANDLERS(dev0, esp8266_open, esp8266_close);
 8009b36:	4b08      	ldr	r3, [pc, #32]	; (8009b58 <esp8266_init+0x28>)
 8009b38:	6003      	str	r3, [r0, #0]
 8009b3a:	4b08      	ldr	r3, [pc, #32]	; (8009b5c <esp8266_init+0x2c>)
 8009b3c:	60c3      	str	r3, [r0, #12]
    rc = sensor_network_register_interface(&network_iface);
 8009b3e:	4808      	ldr	r0, [pc, #32]	; (8009b60 <esp8266_init+0x30>)
 8009b40:	f7f8 fd6c 	bl	800261c <sensor_network_register_interface>
    assert(rc == 0);
 8009b44:	b138      	cbz	r0, 8009b56 <esp8266_init+0x26>
 8009b46:	2300      	movs	r3, #0
 8009b48:	461a      	mov	r2, r3
 8009b4a:	4619      	mov	r1, r3
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	f7f9 ffb1 	bl	8003ab4 <__assert_func>
    return rc;
 8009b52:	f06f 0008 	mvn.w	r0, #8
}
 8009b56:	bd08      	pop	{r3, pc}
 8009b58:	08009a9d 	.word	0x08009a9d
 8009b5c:	08009a81 	.word	0x08009a81
 8009b60:	0800e12c 	.word	0x0800e12c

08009b64 <esp8266_default_cfg>:
int esp8266_default_cfg(struct esp8266_cfg *cfg) {
 8009b64:	b510      	push	{r4, lr}
    memset(cfg, 0, sizeof(struct esp8266_cfg));  //  Zero the entire object.
 8009b66:	2298      	movs	r2, #152	; 0x98
int esp8266_default_cfg(struct esp8266_cfg *cfg) {
 8009b68:	4604      	mov	r4, r0
    memset(cfg, 0, sizeof(struct esp8266_cfg));  //  Zero the entire object.
 8009b6a:	2100      	movs	r1, #0
 8009b6c:	3004      	adds	r0, #4
 8009b6e:	f7fb fc0a 	bl	8005386 <memset>
    cfg->uart = 0;  //  Default to UART number 0, which is UART2.
 8009b72:	2000      	movs	r0, #0
 8009b74:	6020      	str	r0, [r4, #0]
}
 8009b76:	bd10      	pop	{r4, pc}

08009b78 <esp8266_config>:
}
 8009b78:	2000      	movs	r0, #0
 8009b7a:	4770      	bx	lr

08009b7c <esp8266_set_credentials>:
int esp8266_set_credentials(struct esp8266 *dev, const char *ssid, const char *pass, nsapi_security_t security) {
 8009b7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    memset(cfg(dev)->ap_ssid, 0, sizeof(cfg(dev)->ap_ssid));
 8009b80:	2621      	movs	r6, #33	; 0x21
 8009b82:	f100 0528 	add.w	r5, r0, #40	; 0x28
int esp8266_set_credentials(struct esp8266 *dev, const char *ssid, const char *pass, nsapi_security_t security) {
 8009b86:	4604      	mov	r4, r0
 8009b88:	4689      	mov	r9, r1
 8009b8a:	4690      	mov	r8, r2
    memset(cfg(dev)->ap_ssid, 0, sizeof(cfg(dev)->ap_ssid));
 8009b8c:	2100      	movs	r1, #0
 8009b8e:	4632      	mov	r2, r6
 8009b90:	4628      	mov	r0, r5
int esp8266_set_credentials(struct esp8266 *dev, const char *ssid, const char *pass, nsapi_security_t security) {
 8009b92:	461f      	mov	r7, r3
    memset(cfg(dev)->ap_ssid, 0, sizeof(cfg(dev)->ap_ssid));
 8009b94:	f7fb fbf7 	bl	8005386 <memset>
    strncpy(cfg(dev)->ap_ssid, ssid, sizeof(cfg(dev)->ap_ssid));
 8009b98:	4632      	mov	r2, r6
    memset(cfg(dev)->ap_pass, 0, sizeof(cfg(dev)->ap_pass));
 8009b9a:	2640      	movs	r6, #64	; 0x40
    strncpy(cfg(dev)->ap_ssid, ssid, sizeof(cfg(dev)->ap_ssid));
 8009b9c:	4649      	mov	r1, r9
 8009b9e:	4628      	mov	r0, r5
    memset(cfg(dev)->ap_pass, 0, sizeof(cfg(dev)->ap_pass));
 8009ba0:	f104 054b 	add.w	r5, r4, #75	; 0x4b
    strncpy(cfg(dev)->ap_ssid, ssid, sizeof(cfg(dev)->ap_ssid));
 8009ba4:	f7fb fc18 	bl	80053d8 <strncpy>
    memset(cfg(dev)->ap_pass, 0, sizeof(cfg(dev)->ap_pass));
 8009ba8:	4632      	mov	r2, r6
 8009baa:	2100      	movs	r1, #0
 8009bac:	4628      	mov	r0, r5
 8009bae:	f7fb fbea 	bl	8005386 <memset>
    strncpy(cfg(dev)->ap_pass, pass, sizeof(cfg(dev)->ap_pass));
 8009bb2:	4632      	mov	r2, r6
 8009bb4:	4641      	mov	r1, r8
 8009bb6:	4628      	mov	r0, r5
 8009bb8:	f7fb fc0e 	bl	80053d8 <strncpy>
    cfg(dev)->ap_sec = security;
 8009bbc:	f884 7049 	strb.w	r7, [r4, #73]	; 0x49
}
 8009bc0:	2000      	movs	r0, #0
 8009bc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08009bc8 <esp8266_connect>:
    if (!ssid) { ssid = WIFI_SSID; }
 8009bc8:	4b1e      	ldr	r3, [pc, #120]	; (8009c44 <esp8266_connect+0x7c>)
int esp8266_connect(struct esp8266 *dev, const char *ssid, const char *pass) {
 8009bca:	b510      	push	{r4, lr}
    if (!ssid) { ssid = WIFI_SSID; }
 8009bcc:	2900      	cmp	r1, #0
 8009bce:	bf08      	it	eq
 8009bd0:	4619      	moveq	r1, r3
    if (!pass) { pass = WIFI_PASSWORD; }
 8009bd2:	4b1d      	ldr	r3, [pc, #116]	; (8009c48 <esp8266_connect+0x80>)
    assert(dev);  assert(ssid);  assert(pass);
 8009bd4:	4604      	mov	r4, r0
    if (!pass) { pass = WIFI_PASSWORD; }
 8009bd6:	2a00      	cmp	r2, #0
 8009bd8:	bf08      	it	eq
 8009bda:	461a      	moveq	r2, r3
    assert(dev);  assert(ssid);  assert(pass);
 8009bdc:	b920      	cbnz	r0, 8009be8 <esp8266_connect+0x20>
 8009bde:	4603      	mov	r3, r0
 8009be0:	4602      	mov	r2, r0
 8009be2:	4601      	mov	r1, r0
 8009be4:	f7f9 ff66 	bl	8003ab4 <__assert_func>
    esp8266_set_credentials(dev, ssid, pass, NSAPI_SECURITY_UNKNOWN);  //  Save the credentials.
 8009be8:	23ff      	movs	r3, #255	; 0xff
 8009bea:	f7ff ffc7 	bl	8009b7c <esp8266_set_credentials>
    drv(dev)->setTimeout(ESP8266_CONNECT_TIMEOUT);
 8009bee:	f242 7110 	movw	r1, #10000	; 0x2710
 8009bf2:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
 8009bf6:	f000 fba0 	bl	800a33a <_ZN7ESP826610setTimeoutEm>
    if (!drv(dev)->startup(3)) { return NSAPI_ERROR_DEVICE_ERROR; }
 8009bfa:	2103      	movs	r1, #3
 8009bfc:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
 8009c00:	f000 fa26 	bl	800a050 <_ZN7ESP82667startupEi>
 8009c04:	b1c8      	cbz	r0, 8009c3a <esp8266_connect+0x72>
    if (!drv(dev)->dhcp(true, 1)) { return NSAPI_ERROR_DHCP_FAILURE; }
 8009c06:	2201      	movs	r2, #1
 8009c08:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
 8009c0c:	4611      	mov	r1, r2
 8009c0e:	f000 fa5f 	bl	800a0d0 <_ZN7ESP82664dhcpEbi>
 8009c12:	b908      	cbnz	r0, 8009c18 <esp8266_connect+0x50>
 8009c14:	480d      	ldr	r0, [pc, #52]	; (8009c4c <esp8266_connect+0x84>)
}
 8009c16:	bd10      	pop	{r4, pc}
    if (!drv(dev)->connect(cfg(dev)->ap_ssid, cfg(dev)->ap_pass)) { return NSAPI_ERROR_NO_CONNECTION; }
 8009c18:	f104 024b 	add.w	r2, r4, #75	; 0x4b
 8009c1c:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8009c20:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
 8009c24:	f000 fa6c 	bl	800a100 <_ZN7ESP82667connectEPKcS1_>
 8009c28:	b148      	cbz	r0, 8009c3e <esp8266_connect+0x76>
    if (!drv(dev)->getIPAddress()) { return NSAPI_ERROR_DHCP_FAILURE; }
 8009c2a:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
 8009c2e:	f000 fa99 	bl	800a164 <_ZN7ESP826612getIPAddressEv>
 8009c32:	2800      	cmp	r0, #0
 8009c34:	d0ee      	beq.n	8009c14 <esp8266_connect+0x4c>
    return NSAPI_ERROR_OK;
 8009c36:	2000      	movs	r0, #0
 8009c38:	e7ed      	b.n	8009c16 <esp8266_connect+0x4e>
    if (!drv(dev)->startup(3)) { return NSAPI_ERROR_DEVICE_ERROR; }
 8009c3a:	4805      	ldr	r0, [pc, #20]	; (8009c50 <esp8266_connect+0x88>)
 8009c3c:	e7eb      	b.n	8009c16 <esp8266_connect+0x4e>
    if (!drv(dev)->connect(cfg(dev)->ap_ssid, cfg(dev)->ap_pass)) { return NSAPI_ERROR_NO_CONNECTION; }
 8009c3e:	4805      	ldr	r0, [pc, #20]	; (8009c54 <esp8266_connect+0x8c>)
    return internal_connect(dev);  //  Connect with the saved credentials.
 8009c40:	e7e9      	b.n	8009c16 <esp8266_connect+0x4e>
 8009c42:	bf00      	nop
 8009c44:	0800e140 	.word	0x0800e140
 8009c48:	0800e111 	.word	0x0800e111
 8009c4c:	fffff43e 	.word	0xfffff43e
 8009c50:	fffff43c 	.word	0xfffff43c
 8009c54:	fffff444 	.word	0xfffff444

08009c58 <esp8266_socket_open>:
        return NSAPI_ERROR_DEVICE_ERROR;
    }
    return NSAPI_ERROR_OK;
}

int esp8266_socket_open(struct esp8266 *dev, void **handle, nsapi_protocol_t proto) {
 8009c58:	b530      	push	{r4, r5, lr}
    //  Allocate a socket.  Return 0 if successful.
    int id = -1;
    for (int i = 0; i < ESP8266_SOCKET_COUNT; i++) {
        if (!cfg(dev)->_ids[i]) {
 8009c5a:	f890 408b 	ldrb.w	r4, [r0, #139]	; 0x8b
 8009c5e:	b11c      	cbz	r4, 8009c68 <esp8266_socket_open+0x10>
 8009c60:	f890 308c 	ldrb.w	r3, [r0, #140]	; 0x8c
 8009c64:	b993      	cbnz	r3, 8009c8c <esp8266_socket_open+0x34>
    for (int i = 0; i < ESP8266_SOCKET_COUNT; i++) {
 8009c66:	2401      	movs	r4, #1
            id = i;
            cfg(dev)->_ids[i] = true;
 8009c68:	2501      	movs	r5, #1
 8009c6a:	1903      	adds	r3, r0, r4
 8009c6c:	f883 508b 	strb.w	r5, [r3, #139]	; 0x8b
    if (id == -1) { return NSAPI_ERROR_NO_SOCKET; }  //  No more sockets available.

    //  Init the socket.
    struct esp8266_socket *socket = &cfg(dev)->_sockets[id];
    if (!socket) { return NSAPI_ERROR_NO_SOCKET; }
    socket->id = id;
 8009c70:	0123      	lsls	r3, r4, #4
 8009c72:	18c5      	adds	r5, r0, r3
    socket->proto = proto;
 8009c74:	f885 2094 	strb.w	r2, [r5, #148]	; 0x94
    socket->connected = false;
 8009c78:	2200      	movs	r2, #0
    struct esp8266_socket *socket = &cfg(dev)->_sockets[id];
 8009c7a:	462b      	mov	r3, r5
    *handle = socket;
    return 0;
 8009c7c:	4610      	mov	r0, r2
    struct esp8266_socket *socket = &cfg(dev)->_sockets[id];
 8009c7e:	3390      	adds	r3, #144	; 0x90
    socket->id = id;
 8009c80:	f8c5 4090 	str.w	r4, [r5, #144]	; 0x90
    socket->connected = false;
 8009c84:	f885 2095 	strb.w	r2, [r5, #149]	; 0x95
    *handle = socket;
 8009c88:	600b      	str	r3, [r1, #0]
}
 8009c8a:	bd30      	pop	{r4, r5, pc}
    if (id == -1) { return NSAPI_ERROR_NO_SOCKET; }  //  No more sockets available.
 8009c8c:	4800      	ldr	r0, [pc, #0]	; (8009c90 <esp8266_socket_open+0x38>)
 8009c8e:	e7fc      	b.n	8009c8a <esp8266_socket_open+0x32>
 8009c90:	fffff443 	.word	0xfffff443

08009c94 <esp8266_socket_connect>:
    if (!drv(dev)->close(socket->id)) { err = NSAPI_ERROR_DEVICE_ERROR; }
    cfg(dev)->_ids[socket->id] = false;
    return err;
}

int esp8266_socket_connect(struct esp8266 *dev, void *handle, const char *host, uint16_t port) {
 8009c94:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009c98:	460c      	mov	r4, r1
 8009c9a:	4617      	mov	r7, r2
 8009c9c:	4698      	mov	r8, r3
 8009c9e:	4605      	mov	r5, r0
    //  Connect the socket to the host and port via UDP or TCP.  Return 0 if successful.
    //  Note: Host must point to a static string that will never change.
    struct esp8266_socket *socket = (struct esp8266_socket *)handle;
    drv(dev)->setTimeout(ESP8266_MISC_TIMEOUT);
 8009ca0:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8009ca4:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 8009ca8:	f000 fb47 	bl	800a33a <_ZN7ESP826610setTimeoutEm>
    const char *proto = (socket->proto == NSAPI_UDP) ? "UDP" : "TCP";
    if (!drv(dev)->open(proto, socket->id, host, port)) {
 8009cac:	480b      	ldr	r0, [pc, #44]	; (8009cdc <esp8266_socket_connect+0x48>)
    const char *proto = (socket->proto == NSAPI_UDP) ? "UDP" : "TCP";
 8009cae:	7926      	ldrb	r6, [r4, #4]
    if (!drv(dev)->open(proto, socket->id, host, port)) {
 8009cb0:	490b      	ldr	r1, [pc, #44]	; (8009ce0 <esp8266_socket_connect+0x4c>)
 8009cb2:	f8cd 8000 	str.w	r8, [sp]
 8009cb6:	2e01      	cmp	r6, #1
 8009cb8:	bf18      	it	ne
 8009cba:	4601      	movne	r1, r0
 8009cbc:	463b      	mov	r3, r7
 8009cbe:	6822      	ldr	r2, [r4, #0]
 8009cc0:	f8d5 00c0 	ldr.w	r0, [r5, #192]	; 0xc0
 8009cc4:	f000 fa6c 	bl	800a1a0 <_ZN7ESP82664openEPKciS1_i>
 8009cc8:	b128      	cbz	r0, 8009cd6 <esp8266_socket_connect+0x42>
        return NSAPI_ERROR_DEVICE_ERROR;
    }
    socket->connected = true;
 8009cca:	2301      	movs	r3, #1
    return 0;
 8009ccc:	2000      	movs	r0, #0
    socket->connected = true;
 8009cce:	7163      	strb	r3, [r4, #5]
}
 8009cd0:	b002      	add	sp, #8
 8009cd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return NSAPI_ERROR_DEVICE_ERROR;
 8009cd6:	4803      	ldr	r0, [pc, #12]	; (8009ce4 <esp8266_socket_connect+0x50>)
 8009cd8:	e7fa      	b.n	8009cd0 <esp8266_socket_connect+0x3c>
 8009cda:	bf00      	nop
 8009cdc:	0800e14c 	.word	0x0800e14c
 8009ce0:	0800e148 	.word	0x0800e148
 8009ce4:	fffff43c 	.word	0xfffff43c

08009ce8 <esp8266_socket_send_mbuf>:
        return NSAPI_ERROR_DEVICE_ERROR;
    }
    return size;
}

int esp8266_socket_send_mbuf(struct esp8266 *dev, void *handle, struct os_mbuf *m) {
 8009ce8:	b570      	push	{r4, r5, r6, lr}
 8009cea:	4605      	mov	r5, r0
 8009cec:	460e      	mov	r6, r1
 8009cee:	4614      	mov	r4, r2
    //  Send the chain of mbufs to the socket.  Return number of bytes sent.
    struct esp8266_socket *socket = (struct esp8266_socket *)handle;
    drv(dev)->setTimeout(ESP8266_SEND_TIMEOUT);
 8009cf0:	f242 7110 	movw	r1, #10000	; 0x2710
 8009cf4:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 8009cf8:	f000 fb1f 	bl	800a33a <_ZN7ESP826610setTimeoutEm>
    if (!drv(dev)->sendMBuf(socket->id, m)) {
 8009cfc:	4622      	mov	r2, r4
 8009cfe:	6831      	ldr	r1, [r6, #0]
 8009d00:	f8d5 00c0 	ldr.w	r0, [r5, #192]	; 0xc0
 8009d04:	f000 fa80 	bl	800a208 <_ZN7ESP82668sendMBufEiP7os_mbuf>
 8009d08:	b108      	cbz	r0, 8009d0e <esp8266_socket_send_mbuf+0x26>
        return NSAPI_ERROR_DEVICE_ERROR;
    }
    int size = OS_MBUF_PKTLEN(m);  //  Length of the mbuf chain.
 8009d0a:	8a20      	ldrh	r0, [r4, #16]
    return size;
}
 8009d0c:	bd70      	pop	{r4, r5, r6, pc}
        return NSAPI_ERROR_DEVICE_ERROR;
 8009d0e:	4801      	ldr	r0, [pc, #4]	; (8009d14 <esp8266_socket_send_mbuf+0x2c>)
 8009d10:	e7fc      	b.n	8009d0c <esp8266_socket_send_mbuf+0x24>
 8009d12:	bf00      	nop
 8009d14:	fffff43c 	.word	0xfffff43c

08009d18 <_ZL10oc_ep_sizePK11oc_endpoint>:
}

static uint8_t oc_ep_size(const struct oc_endpoint *oe) {
    //  Return the size of the endpoint.  OIC will allocate space to store this endpoint in the transmitted mbuf.
    return sizeof(struct esp8266_endpoint);
}
 8009d18:	200c      	movs	r0, #12
 8009d1a:	4770      	bx	lr

08009d1c <_ZL14oc_ep_has_connPK11oc_endpoint>:

static int oc_ep_has_conn(const struct oc_endpoint *oe) {
    //  Return true if the endpoint is connected.  We always return false.
    //  console_printf("oc_ep_has_conn\n");
    return 0;
}
 8009d1c:	2000      	movs	r0, #0
 8009d1e:	4770      	bx	lr

08009d20 <_ZL7oc_initv>:

static int oc_init(void) {
    //  Init the endpoint.
    //  console_printf("oc_init\n");
    return 0;
}
 8009d20:	2000      	movs	r0, #0
 8009d22:	4770      	bx	lr

08009d24 <_ZL11oc_shutdownv>:

static void oc_shutdown(void) {
    //  Shutdown the endpoint.
    //  console_printf("oc_shutdown\n");
}
 8009d24:	4770      	bx	lr
	...

08009d28 <_ZL9oc_ep_strPciPK11oc_endpoint>:
static char *oc_ep_str(char *ptr, int maxlen, const struct oc_endpoint *oe) {
 8009d28:	b510      	push	{r4, lr}
 8009d2a:	4604      	mov	r4, r0
    console_printf("ESP str\n");
 8009d2c:	4804      	ldr	r0, [pc, #16]	; (8009d40 <_ZL9oc_ep_strPciPK11oc_endpoint+0x18>)
 8009d2e:	f7f8 fa7d 	bl	800222c <console_printf>
    strcpy(ptr, "TODO:oc_ep_str");
 8009d32:	4904      	ldr	r1, [pc, #16]	; (8009d44 <_ZL9oc_ep_strPciPK11oc_endpoint+0x1c>)
 8009d34:	4620      	mov	r0, r4
 8009d36:	f7ff fc59 	bl	80095ec <strcpy>
}
 8009d3a:	4620      	mov	r0, r4
 8009d3c:	bd10      	pop	{r4, pc}
 8009d3e:	bf00      	nop
 8009d40:	0800e15e 	.word	0x0800e15e
 8009d44:	0800e167 	.word	0x0800e167

08009d48 <_ZL11oc_tx_ucastP7os_mbuf>:
static void oc_tx_ucast(struct os_mbuf *m) {
 8009d48:	b570      	push	{r4, r5, r6, lr}
    assert(m);  assert(OS_MBUF_USRHDR_LEN(m) >= sizeof(struct esp8266_endpoint));
 8009d4a:	4604      	mov	r4, r0
 8009d4c:	b928      	cbnz	r0, 8009d5a <_ZL11oc_tx_ucastP7os_mbuf+0x12>
 8009d4e:	2300      	movs	r3, #0
 8009d50:	461a      	mov	r2, r3
 8009d52:	4619      	mov	r1, r3
 8009d54:	4618      	mov	r0, r3
 8009d56:	f7f9 fead 	bl	8003ab4 <__assert_func>
 8009d5a:	7943      	ldrb	r3, [r0, #5]
 8009d5c:	3b08      	subs	r3, #8
 8009d5e:	2b0b      	cmp	r3, #11
 8009d60:	d9f5      	bls.n	8009d4e <_ZL11oc_tx_ucastP7os_mbuf+0x6>
    assert(endpoint);  assert(endpoint->host);  assert(endpoint->port);  //  Host and endpoint should be in the endpoint.
 8009d62:	f110 0f18 	cmn.w	r0, #24
 8009d66:	d0f2      	beq.n	8009d4e <_ZL11oc_tx_ucastP7os_mbuf+0x6>
 8009d68:	69c1      	ldr	r1, [r0, #28]
 8009d6a:	2900      	cmp	r1, #0
 8009d6c:	d0ef      	beq.n	8009d4e <_ZL11oc_tx_ucastP7os_mbuf+0x6>
 8009d6e:	8c02      	ldrh	r2, [r0, #32]
 8009d70:	2a00      	cmp	r2, #0
 8009d72:	d0ec      	beq.n	8009d4e <_ZL11oc_tx_ucastP7os_mbuf+0x6>
    assert(server);  assert(endpoint->host == server->endpoint.host);  assert(endpoint->port == server->endpoint.port);  //  We only support 1 server connection. Must match the message endpoint.
 8009d74:	4b16      	ldr	r3, [pc, #88]	; (8009dd0 <_ZL11oc_tx_ucastP7os_mbuf+0x88>)
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d0e8      	beq.n	8009d4e <_ZL11oc_tx_ucastP7os_mbuf+0x6>
 8009d7c:	6858      	ldr	r0, [r3, #4]
 8009d7e:	4281      	cmp	r1, r0
 8009d80:	d1e5      	bne.n	8009d4e <_ZL11oc_tx_ucastP7os_mbuf+0x6>
 8009d82:	891b      	ldrh	r3, [r3, #8]
 8009d84:	4293      	cmp	r3, r2
 8009d86:	d1e2      	bne.n	8009d4e <_ZL11oc_tx_ucastP7os_mbuf+0x6>
    assert(network_device);  assert(socket);
 8009d88:	4b12      	ldr	r3, [pc, #72]	; (8009dd4 <_ZL11oc_tx_ucastP7os_mbuf+0x8c>)
 8009d8a:	6818      	ldr	r0, [r3, #0]
 8009d8c:	2800      	cmp	r0, #0
 8009d8e:	d0de      	beq.n	8009d4e <_ZL11oc_tx_ucastP7os_mbuf+0x6>
 8009d90:	4d11      	ldr	r5, [pc, #68]	; (8009dd8 <_ZL11oc_tx_ucastP7os_mbuf+0x90>)
 8009d92:	682a      	ldr	r2, [r5, #0]
 8009d94:	2a00      	cmp	r2, #0
 8009d96:	d0da      	beq.n	8009d4e <_ZL11oc_tx_ucastP7os_mbuf+0x6>
        struct esp8266 *dev = (struct esp8266 *) os_dev_open(network_device, OS_TIMEOUT_NEVER, NULL);  //  ESP8266_DEVICE is "esp8266_0"
 8009d98:	2200      	movs	r2, #0
 8009d9a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009d9e:	f7fa f913 	bl	8003fc8 <os_dev_open>
        assert(dev != NULL);
 8009da2:	4606      	mov	r6, r0
 8009da4:	2800      	cmp	r0, #0
 8009da6:	d0d2      	beq.n	8009d4e <_ZL11oc_tx_ucastP7os_mbuf+0x6>
        console_printf("ESP send udp\n");
 8009da8:	480c      	ldr	r0, [pc, #48]	; (8009ddc <_ZL11oc_tx_ucastP7os_mbuf+0x94>)
 8009daa:	f7f8 fa3f 	bl	800222c <console_printf>
        rc = esp8266_socket_send_mbuf(dev, socket, m);  
 8009dae:	4622      	mov	r2, r4
 8009db0:	6829      	ldr	r1, [r5, #0]
 8009db2:	4630      	mov	r0, r6
 8009db4:	f7ff ff98 	bl	8009ce8 <esp8266_socket_send_mbuf>
        assert(rc > 0);
 8009db8:	2800      	cmp	r0, #0
 8009dba:	ddc8      	ble.n	8009d4e <_ZL11oc_tx_ucastP7os_mbuf+0x6>
        os_dev_close((struct os_dev *) dev);
 8009dbc:	4630      	mov	r0, r6
 8009dbe:	f7fa f924 	bl	800400a <os_dev_close>
    rc = os_mbuf_free_chain(m);  assert(rc == 0);
 8009dc2:	4620      	mov	r0, r4
 8009dc4:	f7fa fa7f 	bl	80042c6 <os_mbuf_free_chain>
 8009dc8:	2800      	cmp	r0, #0
 8009dca:	d1c0      	bne.n	8009d4e <_ZL11oc_tx_ucastP7os_mbuf+0x6>
}
 8009dcc:	bd70      	pop	{r4, r5, r6, pc}
 8009dce:	bf00      	nop
 8009dd0:	200031e4 	.word	0x200031e4
 8009dd4:	200031e0 	.word	0x200031e0
 8009dd8:	200031e8 	.word	0x200031e8
 8009ddc:	0800e150 	.word	0x0800e150

08009de0 <init_esp8266_server>:
int init_esp8266_server(struct esp8266_server *server, const char *host, uint16_t port) {
 8009de0:	b510      	push	{r4, lr}
    endpoint->ep.oe_type = transport_id;  //  Populate our transport ID so that OIC will call our functions.
 8009de2:	4c07      	ldr	r4, [pc, #28]	; (8009e00 <init_esp8266_server+0x20>)
 8009de4:	7803      	ldrb	r3, [r0, #0]
 8009de6:	7824      	ldrb	r4, [r4, #0]
 8009de8:	f364 0302 	bfi	r3, r4, #0, #3
    endpoint->ep.oe_flags = 0;
 8009dec:	f36f 03c7 	bfc	r3, #3, #5
 8009df0:	7003      	strb	r3, [r0, #0]
    if (host) { 
 8009df2:	b109      	cbz	r1, 8009df8 <init_esp8266_server+0x18>
        endpoint->host = host;
 8009df4:	6041      	str	r1, [r0, #4]
        endpoint->port = port;
 8009df6:	8102      	strh	r2, [r0, #8]
    server->handle = (struct oc_server_handle *) server;
 8009df8:	60c0      	str	r0, [r0, #12]
}
 8009dfa:	2000      	movs	r0, #0
 8009dfc:	bd10      	pop	{r4, pc}
 8009dfe:	bf00      	nop
 8009e00:	20000211 	.word	0x20000211

08009e04 <esp8266_register_transport>:
int esp8266_register_transport(const char *network_device0, struct esp8266_server *server0, const char *host, uint16_t port) {
 8009e04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e08:	460d      	mov	r5, r1
 8009e0a:	4616      	mov	r6, r2
 8009e0c:	4698      	mov	r8, r3
    assert(network_device0);  assert(server0);
 8009e0e:	4607      	mov	r7, r0
 8009e10:	b928      	cbnz	r0, 8009e1e <esp8266_register_transport+0x1a>
 8009e12:	2300      	movs	r3, #0
 8009e14:	461a      	mov	r2, r3
 8009e16:	4619      	mov	r1, r3
 8009e18:	4618      	mov	r0, r3
 8009e1a:	f7f9 fe4b 	bl	8003ab4 <__assert_func>
 8009e1e:	2900      	cmp	r1, #0
 8009e20:	d0f7      	beq.n	8009e12 <esp8266_register_transport+0xe>
        struct esp8266 *dev = (struct esp8266 *) os_dev_open(network_device0, OS_TIMEOUT_NEVER, NULL);  //  ESP8266_DEVICE is "esp8266_0"
 8009e22:	2200      	movs	r2, #0
 8009e24:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009e28:	f7fa f8ce 	bl	8003fc8 <os_dev_open>
        assert(dev != NULL);
 8009e2c:	4604      	mov	r4, r0
 8009e2e:	2800      	cmp	r0, #0
 8009e30:	d0ef      	beq.n	8009e12 <esp8266_register_transport+0xe>
        transport_id = oc_transport_register(&transport);
 8009e32:	4817      	ldr	r0, [pc, #92]	; (8009e90 <esp8266_register_transport+0x8c>)
 8009e34:	f7fc fc78 	bl	8006728 <oc_transport_register>
 8009e38:	4b16      	ldr	r3, [pc, #88]	; (8009e94 <esp8266_register_transport+0x90>)
        int rc = init_esp8266_server(server0, host, port);
 8009e3a:	4642      	mov	r2, r8
        transport_id = oc_transport_register(&transport);
 8009e3c:	7018      	strb	r0, [r3, #0]
        int rc = init_esp8266_server(server0, host, port);
 8009e3e:	4631      	mov	r1, r6
 8009e40:	4628      	mov	r0, r5
 8009e42:	f7ff ffcd 	bl	8009de0 <init_esp8266_server>
        assert(rc == 0);
 8009e46:	4602      	mov	r2, r0
 8009e48:	2800      	cmp	r0, #0
 8009e4a:	d1e2      	bne.n	8009e12 <esp8266_register_transport+0xe>
        rc = esp8266_connect(dev, NULL, NULL);  
 8009e4c:	4601      	mov	r1, r0
 8009e4e:	4620      	mov	r0, r4
 8009e50:	f7ff feba 	bl	8009bc8 <esp8266_connect>
        assert(rc == 0);
 8009e54:	2800      	cmp	r0, #0
 8009e56:	d1dc      	bne.n	8009e12 <esp8266_register_transport+0xe>
        rc = esp8266_socket_open(dev, &socket, NSAPI_UDP);
 8009e58:	4e0f      	ldr	r6, [pc, #60]	; (8009e98 <esp8266_register_transport+0x94>)
 8009e5a:	2201      	movs	r2, #1
 8009e5c:	4631      	mov	r1, r6
 8009e5e:	4620      	mov	r0, r4
 8009e60:	f7ff fefa 	bl	8009c58 <esp8266_socket_open>
        assert(rc == 0);
 8009e64:	2800      	cmp	r0, #0
 8009e66:	d1d4      	bne.n	8009e12 <esp8266_register_transport+0xe>
        rc = esp8266_socket_connect(dev, socket, server0->endpoint.host, server0->endpoint.port);
 8009e68:	6831      	ldr	r1, [r6, #0]
 8009e6a:	892b      	ldrh	r3, [r5, #8]
 8009e6c:	686a      	ldr	r2, [r5, #4]
 8009e6e:	4620      	mov	r0, r4
 8009e70:	f7ff ff10 	bl	8009c94 <esp8266_socket_connect>
        assert(rc == 0);
 8009e74:	4606      	mov	r6, r0
 8009e76:	2800      	cmp	r0, #0
 8009e78:	d1cb      	bne.n	8009e12 <esp8266_register_transport+0xe>
        network_device = network_device0;
 8009e7a:	4b08      	ldr	r3, [pc, #32]	; (8009e9c <esp8266_register_transport+0x98>)
        os_dev_close((struct os_dev *) dev);
 8009e7c:	4620      	mov	r0, r4
        network_device = network_device0;
 8009e7e:	601f      	str	r7, [r3, #0]
        server = server0;
 8009e80:	4b07      	ldr	r3, [pc, #28]	; (8009ea0 <esp8266_register_transport+0x9c>)
 8009e82:	601d      	str	r5, [r3, #0]
        os_dev_close((struct os_dev *) dev);
 8009e84:	f7fa f8c1 	bl	800400a <os_dev_close>
}
 8009e88:	4630      	mov	r0, r6
 8009e8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e8e:	bf00      	nop
 8009e90:	0800e178 	.word	0x0800e178
 8009e94:	20000211 	.word	0x20000211
 8009e98:	200031e8 	.word	0x200031e8
 8009e9c:	200031e0 	.word	0x200031e0
 8009ea0:	200031e4 	.word	0x200031e4

08009ea4 <_log>:
const char *_okfailed(int ok) {
    if (ok) { return " OK\n"; }
    return " FAILED\n";
}

void _log(const char *func, int ok) {
 8009ea4:	b508      	push	{r3, lr}
    console_printf("%s%s%s", _esp, func, _okfailed(ok));
 8009ea6:	4a07      	ldr	r2, [pc, #28]	; (8009ec4 <_log+0x20>)
 8009ea8:	4b07      	ldr	r3, [pc, #28]	; (8009ec8 <_log+0x24>)
 8009eaa:	2900      	cmp	r1, #0
 8009eac:	bf18      	it	ne
 8009eae:	4613      	movne	r3, r2
 8009eb0:	4906      	ldr	r1, [pc, #24]	; (8009ecc <_log+0x28>)
 8009eb2:	4602      	mov	r2, r0
 8009eb4:	6809      	ldr	r1, [r1, #0]
 8009eb6:	4806      	ldr	r0, [pc, #24]	; (8009ed0 <_log+0x2c>)
 8009eb8:	f7f8 f9b8 	bl	800222c <console_printf>
    console_flush();
}
 8009ebc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    console_flush();
 8009ec0:	f7f8 b8da 	b.w	8002078 <console_flush>
 8009ec4:	0800e1a3 	.word	0x0800e1a3
 8009ec8:	0800e1a8 	.word	0x0800e1a8
 8009ecc:	20000214 	.word	0x20000214
 8009ed0:	0800e19c 	.word	0x0800e19c

08009ed4 <_ZN7ESP82664initEPcmS0_mS0_mb>:

extern "C" int debug_vrecv;

void ESP8266::init(char *txbuf, uint32_t txbuf_size, char *rxbuf, uint32_t rxbuf_size, 
    char *parserbuf, uint32_t parserbuf_size, bool debug)
{
 8009ed4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    _uart = 0;
 8009ed6:	4605      	mov	r5, r0
 8009ed8:	2600      	movs	r6, #0
{
 8009eda:	4604      	mov	r4, r0
    _serial.init(txbuf, txbuf_size, rxbuf, rxbuf_size);
 8009edc:	9808      	ldr	r0, [sp, #32]
    _uart = 0;
 8009ede:	f845 6b04 	str.w	r6, [r5], #4
    _serial.init(txbuf, txbuf_size, rxbuf, rxbuf_size);
 8009ee2:	9000      	str	r0, [sp, #0]
 8009ee4:	9601      	str	r6, [sp, #4]
 8009ee6:	4628      	mov	r0, r5
 8009ee8:	f000 fbf2 	bl	800a6d0 <_ZN14BufferedSerial4initEPcmS0_mPKc>
    _parser.init(_serial, parserbuf, parserbuf_size);
 8009eec:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8009ef0:	9301      	str	r3, [sp, #4]
 8009ef2:	4b0d      	ldr	r3, [pc, #52]	; (8009f28 <_ZN7ESP82664initEPcmS0_mS0_mb+0x54>)
 8009ef4:	4629      	mov	r1, r5
 8009ef6:	9300      	str	r3, [sp, #0]
 8009ef8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009efc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009f00:	9602      	str	r6, [sp, #8]
 8009f02:	f000 fa20 	bl	800a346 <_ZN8ATParser4initER14BufferedSerialPciPKcib>
    _packets = 0;
 8009f06:	4623      	mov	r3, r4
 8009f08:	f843 6f8c 	str.w	r6, [r3, #140]!
    _packets_end = &_packets;
 8009f0c:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    _serial.baud(115200);
 8009f10:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8009f14:	4628      	mov	r0, r5
 8009f16:	f000 fc86 	bl	800a826 <_ZN14BufferedSerial4baudEm>
    * Allows echo to be on or off
    *
    * @param echo 1 for echo and 0 turns it off
    */
    void debugOn(uint8_t on) {
        dbg_on = (on) ? 1 : 0;
 8009f1a:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8009f1e:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
    _parser.debugOn(debug);
}
 8009f22:	b004      	add	sp, #16
 8009f24:	bd70      	pop	{r4, r5, r6, pc}
 8009f26:	bf00      	nop
 8009f28:	0800e41e 	.word	0x0800e41e

08009f2c <_ZN7ESP82669configureEi>:

void ESP8266::configure(int uart) {
    _uart = uart;
 8009f2c:	f840 1b04 	str.w	r1, [r0], #4
    _serial.configure(uart);
 8009f30:	f000 bbee 	b.w	800a710 <_ZN14BufferedSerial9configureEi>

08009f34 <_ZN7ESP82667setEchoEb>:
void packet_handler(void *arg) {
    assert(arg != NULL);
    ((ESP8266 *)arg)->_packet_handler();
}

bool ESP8266::setEcho(bool echoEnabled) {
 8009f34:	b570      	push	{r4, r5, r6, lr}
    //  Turn command echoing on or off.
    const char *_f = "setEcho";
    console_printf("%s%s %s...\n", _esp, _f, echoEnabled ? "on" : "off"); console_flush(); 
 8009f36:	460e      	mov	r6, r1
 8009f38:	4a19      	ldr	r2, [pc, #100]	; (8009fa0 <_ZN7ESP82667setEchoEb+0x6c>)
 8009f3a:	4b1a      	ldr	r3, [pc, #104]	; (8009fa4 <_ZN7ESP82667setEchoEb+0x70>)
bool ESP8266::setEcho(bool echoEnabled) {
 8009f3c:	4604      	mov	r4, r0
    console_printf("%s%s %s...\n", _esp, _f, echoEnabled ? "on" : "off"); console_flush(); 
 8009f3e:	2900      	cmp	r1, #0
 8009f40:	bf18      	it	ne
 8009f42:	4613      	movne	r3, r2
 8009f44:	4918      	ldr	r1, [pc, #96]	; (8009fa8 <_ZN7ESP82667setEchoEb+0x74>)
 8009f46:	4a19      	ldr	r2, [pc, #100]	; (8009fac <_ZN7ESP82667setEchoEb+0x78>)
 8009f48:	6809      	ldr	r1, [r1, #0]
 8009f4a:	4819      	ldr	r0, [pc, #100]	; (8009fb0 <_ZN7ESP82667setEchoEb+0x7c>)
 8009f4c:	f7f8 f96e 	bl	800222c <console_printf>
 8009f50:	4d18      	ldr	r5, [pc, #96]	; (8009fb4 <_ZN7ESP82667setEchoEb+0x80>)
 8009f52:	f7f8 f891 	bl	8002078 <console_flush>
 8009f56:	4b18      	ldr	r3, [pc, #96]	; (8009fb8 <_ZN7ESP82667setEchoEb+0x84>)
    for (int i = 0; i < 2; i++) {  //  Try twice in case of error...
        if (
            _parser.send(       //  Send echo on or off command.
 8009f58:	3450      	adds	r4, #80	; 0x50
 8009f5a:	2e00      	cmp	r6, #0
 8009f5c:	bf08      	it	eq
 8009f5e:	461d      	moveq	r5, r3
 8009f60:	4620      	mov	r0, r4
 8009f62:	4629      	mov	r1, r5
 8009f64:	f000 fb60 	bl	800a628 <_ZN8ATParser4sendEPKcz>
                echoEnabled 
                ? "\r\nATE1"
                : "\r\nATE0"
            ) &&
 8009f68:	b120      	cbz	r0, 8009f74 <_ZN7ESP82667setEchoEb+0x40>
            _parser.recv("OK")  //  Wait for OK response.
 8009f6a:	4914      	ldr	r1, [pc, #80]	; (8009fbc <_ZN7ESP82667setEchoEb+0x88>)
 8009f6c:	4620      	mov	r0, r4
 8009f6e:	f000 fb68 	bl	800a642 <_ZN8ATParser4recvEPKcz>
            ) &&
 8009f72:	b948      	cbnz	r0, 8009f88 <_ZN7ESP82667setEchoEb+0x54>
            _parser.send(       //  Send echo on or off command.
 8009f74:	4629      	mov	r1, r5
 8009f76:	4620      	mov	r0, r4
 8009f78:	f000 fb56 	bl	800a628 <_ZN8ATParser4sendEPKcz>
            ) &&
 8009f7c:	b150      	cbz	r0, 8009f94 <_ZN7ESP82667setEchoEb+0x60>
            _parser.recv("OK")  //  Wait for OK response.
 8009f7e:	490f      	ldr	r1, [pc, #60]	; (8009fbc <_ZN7ESP82667setEchoEb+0x88>)
 8009f80:	4620      	mov	r0, r4
 8009f82:	f000 fb5e 	bl	800a642 <_ZN8ATParser4recvEPKcz>
            ) &&
 8009f86:	b128      	cbz	r0, 8009f94 <_ZN7ESP82667setEchoEb+0x60>
        ) {
            _log(_f, true);
 8009f88:	4808      	ldr	r0, [pc, #32]	; (8009fac <_ZN7ESP82667setEchoEb+0x78>)
 8009f8a:	2101      	movs	r1, #1
 8009f8c:	f7ff ff8a 	bl	8009ea4 <_log>
 8009f90:	2001      	movs	r0, #1
            return true; 
        }
    }
    _log(_f, false);
    return false;
}
 8009f92:	bd70      	pop	{r4, r5, r6, pc}
    _log(_f, false);
 8009f94:	4805      	ldr	r0, [pc, #20]	; (8009fac <_ZN7ESP82667setEchoEb+0x78>)
 8009f96:	2100      	movs	r1, #0
 8009f98:	f7ff ff84 	bl	8009ea4 <_log>
    return false;
 8009f9c:	2000      	movs	r0, #0
 8009f9e:	e7f8      	b.n	8009f92 <_ZN7ESP82667setEchoEb+0x5e>
 8009fa0:	0800e2c4 	.word	0x0800e2c4
 8009fa4:	0800e2c7 	.word	0x0800e2c7
 8009fa8:	20000214 	.word	0x20000214
 8009fac:	0800e2cb 	.word	0x0800e2cb
 8009fb0:	0800e2d3 	.word	0x0800e2d3
 8009fb4:	0800e2df 	.word	0x0800e2df
 8009fb8:	0800e2e6 	.word	0x0800e2e6
 8009fbc:	0800e238 	.word	0x0800e238

08009fc0 <_ZN7ESP82665resetEv>:
bool ESP8266::reset(void)
{
    //  debug_vrecv = 1;  ////
    const char *_f = "reset";    
    bool ret = false;
    console_printf("%s%s...\n", _esp, _f); console_flush(); 
 8009fc0:	4b1c      	ldr	r3, [pc, #112]	; (800a034 <_ZN7ESP82665resetEv+0x74>)
{
 8009fc2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    console_printf("%s%s...\n", _esp, _f); console_flush(); 
 8009fc6:	4a1c      	ldr	r2, [pc, #112]	; (800a038 <_ZN7ESP82665resetEv+0x78>)
 8009fc8:	6819      	ldr	r1, [r3, #0]
{
 8009fca:	4607      	mov	r7, r0
    console_printf("%s%s...\n", _esp, _f); console_flush(); 
 8009fcc:	481b      	ldr	r0, [pc, #108]	; (800a03c <_ZN7ESP82665resetEv+0x7c>)
 8009fce:	f7f8 f92d 	bl	800222c <console_printf>
 8009fd2:	2602      	movs	r6, #2
 8009fd4:	f7f8 f850 	bl	8002078 <console_flush>
    for (int i = 0; i < 2; i++) {
        if (
            _parser.send("\r\nAT+RST")
 8009fd8:	f8df 8068 	ldr.w	r8, [pc, #104]	; 800a044 <_ZN7ESP82665resetEv+0x84>
            && _parser.recv("OK")  //  Wait for response.
 8009fdc:	f8df 9068 	ldr.w	r9, [pc, #104]	; 800a048 <_ZN7ESP82665resetEv+0x88>
#ifndef TOOO
            && _parser.recv("ready")  //  TODO: Wait for response: "ready" or "[System Ready, Vendor:www.ai-thinker.com]"
 8009fe0:	f8df a068 	ldr.w	sl, [pc, #104]	; 800a04c <_ZN7ESP82665resetEv+0x8c>
            _parser.send("\r\nAT+RST")
 8009fe4:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8009fe8:	4641      	mov	r1, r8
 8009fea:	4620      	mov	r0, r4
 8009fec:	f000 fb1c 	bl	800a628 <_ZN8ATParser4sendEPKcz>
            && _parser.recv("\r\n")   //  Wait for end of the line
 8009ff0:	b1d8      	cbz	r0, 800a02a <_ZN7ESP82665resetEv+0x6a>
            && _parser.recv("OK")  //  Wait for response.
 8009ff2:	4649      	mov	r1, r9
 8009ff4:	4620      	mov	r0, r4
 8009ff6:	f000 fb24 	bl	800a642 <_ZN8ATParser4recvEPKcz>
 8009ffa:	b1b0      	cbz	r0, 800a02a <_ZN7ESP82665resetEv+0x6a>
            && _parser.recv("ready")  //  TODO: Wait for response: "ready" or "[System Ready, Vendor:www.ai-thinker.com]"
 8009ffc:	4651      	mov	r1, sl
 8009ffe:	4620      	mov	r0, r4
 800a000:	f000 fb1f 	bl	800a642 <_ZN8ATParser4recvEPKcz>
 800a004:	b188      	cbz	r0, 800a02a <_ZN7ESP82665resetEv+0x6a>
            && _parser.recv("\r\n")   //  Wait for end of the line
 800a006:	490e      	ldr	r1, [pc, #56]	; (800a040 <_ZN7ESP82665resetEv+0x80>)
 800a008:	4620      	mov	r0, r4
 800a00a:	f000 fb1a 	bl	800a642 <_ZN8ATParser4recvEPKcz>
 800a00e:	4605      	mov	r5, r0
 800a010:	b158      	cbz	r0, 800a02a <_ZN7ESP82665resetEv+0x6a>
#else
            && _parser.recv("jump")  //  Wait for last line of response: "jump to run user1 @ 1000"
            && _parser.recv("\r\n")  //  Wait for end of the line
#endif  //  TODO
        ) {
            _parser.flush();  //  Discard the rest of the response before sending next command.
 800a012:	4620      	mov	r0, r4
 800a014:	f000 f9b1 	bl	800a37a <_ZN8ATParser5flushEv>
            ret = true;
            break;
        }
    }
    _log(_f, ret);
 800a018:	4629      	mov	r1, r5
 800a01a:	4807      	ldr	r0, [pc, #28]	; (800a038 <_ZN7ESP82665resetEv+0x78>)
 800a01c:	f7ff ff42 	bl	8009ea4 <_log>
    //  debug_vrecv = 0;  ////    
    return true;
}
 800a020:	2001      	movs	r0, #1
 800a022:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a026:	2601      	movs	r6, #1
 800a028:	e7dc      	b.n	8009fe4 <_ZN7ESP82665resetEv+0x24>
    for (int i = 0; i < 2; i++) {
 800a02a:	2e01      	cmp	r6, #1
 800a02c:	d1fb      	bne.n	800a026 <_ZN7ESP82665resetEv+0x66>
    bool ret = false;
 800a02e:	2500      	movs	r5, #0
 800a030:	e7f2      	b.n	800a018 <_ZN7ESP82665resetEv+0x58>
 800a032:	bf00      	nop
 800a034:	20000214 	.word	0x20000214
 800a038:	0800e23b 	.word	0x0800e23b
 800a03c:	0800e241 	.word	0x0800e241
 800a040:	0800e41e 	.word	0x0800e41e
 800a044:	0800e24a 	.word	0x0800e24a
 800a048:	0800e238 	.word	0x0800e238
 800a04c:	0800e253 	.word	0x0800e253

0800a050 <_ZN7ESP82667startupEi>:
    if(mode < 1 || mode > 3) {
 800a050:	1e4b      	subs	r3, r1, #1
 800a052:	2b02      	cmp	r3, #2
{
 800a054:	b570      	push	{r4, r5, r6, lr}
 800a056:	4606      	mov	r6, r0
 800a058:	460d      	mov	r5, r1
    if(mode < 1 || mode > 3) {
 800a05a:	d82c      	bhi.n	800a0b6 <_ZN7ESP82667startupEi+0x66>
        reset()            //  Restart the ESP8266 module.
 800a05c:	f7ff ffb0 	bl	8009fc0 <_ZN7ESP82665resetEv>
 800a060:	f106 0450 	add.w	r4, r6, #80	; 0x50
        && _parser.recv("OK");                 //  Wait for response.
 800a064:	b940      	cbnz	r0, 800a078 <_ZN7ESP82667startupEi+0x28>
 800a066:	2500      	movs	r5, #0
    _parser.oob("+IPD", packet_handler, this); //  Call the packet handler when network data is received.
 800a068:	4633      	mov	r3, r6
 800a06a:	4a14      	ldr	r2, [pc, #80]	; (800a0bc <_ZN7ESP82667startupEi+0x6c>)
 800a06c:	4914      	ldr	r1, [pc, #80]	; (800a0c0 <_ZN7ESP82667startupEi+0x70>)
 800a06e:	4620      	mov	r0, r4
 800a070:	f000 faf4 	bl	800a65c <_ZN8ATParser3oobEPKcPFvPvES2_>
}
 800a074:	4628      	mov	r0, r5
 800a076:	bd70      	pop	{r4, r5, r6, pc}
        && setEcho(false)  //  Disable command echo to speed up response processing.
 800a078:	2100      	movs	r1, #0
 800a07a:	4630      	mov	r0, r6
 800a07c:	f7ff ff5a 	bl	8009f34 <_ZN7ESP82667setEchoEb>
 800a080:	2800      	cmp	r0, #0
 800a082:	d0f0      	beq.n	800a066 <_ZN7ESP82667startupEi+0x16>
        && _parser.send("AT+CWMODE=%d", mode)  //  Set the mode to WiFi Client, WiFi Access Point, or both.
 800a084:	462a      	mov	r2, r5
 800a086:	490f      	ldr	r1, [pc, #60]	; (800a0c4 <_ZN7ESP82667startupEi+0x74>)
 800a088:	4620      	mov	r0, r4
 800a08a:	f000 facd 	bl	800a628 <_ZN8ATParser4sendEPKcz>
 800a08e:	2800      	cmp	r0, #0
 800a090:	d0e9      	beq.n	800a066 <_ZN7ESP82667startupEi+0x16>
        && _parser.recv("OK")                  //  Wait for response.
 800a092:	490d      	ldr	r1, [pc, #52]	; (800a0c8 <_ZN7ESP82667startupEi+0x78>)
 800a094:	4620      	mov	r0, r4
 800a096:	f000 fad4 	bl	800a642 <_ZN8ATParser4recvEPKcz>
 800a09a:	2800      	cmp	r0, #0
 800a09c:	d0e3      	beq.n	800a066 <_ZN7ESP82667startupEi+0x16>
        && _parser.send("AT+CIPMUX=1")         //  Allow multiple TCP/UDP connections.
 800a09e:	490b      	ldr	r1, [pc, #44]	; (800a0cc <_ZN7ESP82667startupEi+0x7c>)
 800a0a0:	4620      	mov	r0, r4
 800a0a2:	f000 fac1 	bl	800a628 <_ZN8ATParser4sendEPKcz>
 800a0a6:	2800      	cmp	r0, #0
 800a0a8:	d0dd      	beq.n	800a066 <_ZN7ESP82667startupEi+0x16>
        && _parser.recv("OK");                 //  Wait for response.
 800a0aa:	4907      	ldr	r1, [pc, #28]	; (800a0c8 <_ZN7ESP82667startupEi+0x78>)
 800a0ac:	4620      	mov	r0, r4
 800a0ae:	f000 fac8 	bl	800a642 <_ZN8ATParser4recvEPKcz>
 800a0b2:	4605      	mov	r5, r0
 800a0b4:	e7d8      	b.n	800a068 <_ZN7ESP82667startupEi+0x18>
        return false;
 800a0b6:	2500      	movs	r5, #0
 800a0b8:	e7dc      	b.n	800a074 <_ZN7ESP82667startupEi+0x24>
 800a0ba:	bf00      	nop
 800a0bc:	0800a325 	.word	0x0800a325
 800a0c0:	0800e306 	.word	0x0800e306
 800a0c4:	0800e2ed 	.word	0x0800e2ed
 800a0c8:	0800e238 	.word	0x0800e238
 800a0cc:	0800e2fa 	.word	0x0800e2fa

0800a0d0 <_ZN7ESP82664dhcpEbi>:

bool ESP8266::dhcp(bool enabled, int mode)
{
    //only 3 valid modes
    if(mode < 0 || mode > 2) {
 800a0d0:	2a02      	cmp	r2, #2
{
 800a0d2:	b510      	push	{r4, lr}
 800a0d4:	4613      	mov	r3, r2
    if(mode < 0 || mode > 2) {
 800a0d6:	d80d      	bhi.n	800a0f4 <_ZN7ESP82664dhcpEbi+0x24>
        return false;
    }

    return _parser.send("AT+CWDHCP=%d,%d", enabled?1:0, mode)
 800a0d8:	f100 0450 	add.w	r4, r0, #80	; 0x50
 800a0dc:	460a      	mov	r2, r1
 800a0de:	4620      	mov	r0, r4
 800a0e0:	4905      	ldr	r1, [pc, #20]	; (800a0f8 <_ZN7ESP82664dhcpEbi+0x28>)
 800a0e2:	f000 faa1 	bl	800a628 <_ZN8ATParser4sendEPKcz>
        && _parser.recv("OK");
 800a0e6:	b128      	cbz	r0, 800a0f4 <_ZN7ESP82664dhcpEbi+0x24>
 800a0e8:	4620      	mov	r0, r4
}
 800a0ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        && _parser.recv("OK");
 800a0ee:	4903      	ldr	r1, [pc, #12]	; (800a0fc <_ZN7ESP82664dhcpEbi+0x2c>)
 800a0f0:	f000 baa7 	b.w	800a642 <_ZN8ATParser4recvEPKcz>
}
 800a0f4:	2000      	movs	r0, #0
 800a0f6:	bd10      	pop	{r4, pc}
 800a0f8:	0800e1de 	.word	0x0800e1de
 800a0fc:	0800e238 	.word	0x0800e238

0800a100 <_ZN7ESP82667connectEPKcS1_>:

bool ESP8266::connect(const char *ap, const char *passPhrase)
{
 800a100:	b570      	push	{r4, r5, r6, lr}
 800a102:	4605      	mov	r5, r0
 800a104:	460c      	mov	r4, r1
 800a106:	4616      	mov	r6, r2
    const char *_f = "connect";
    console_printf("%s%s...\n", _esp, _f);  console_flush();
 800a108:	4b10      	ldr	r3, [pc, #64]	; (800a14c <_ZN7ESP82667connectEPKcS1_+0x4c>)
 800a10a:	4a11      	ldr	r2, [pc, #68]	; (800a150 <_ZN7ESP82667connectEPKcS1_+0x50>)
 800a10c:	6819      	ldr	r1, [r3, #0]
 800a10e:	4811      	ldr	r0, [pc, #68]	; (800a154 <_ZN7ESP82667connectEPKcS1_+0x54>)
    bool ret = _parser.send("AT+CWJAP=\"%s\",\"%s\"", ap, passPhrase)
 800a110:	3550      	adds	r5, #80	; 0x50
    console_printf("%s%s...\n", _esp, _f);  console_flush();
 800a112:	f7f8 f88b 	bl	800222c <console_printf>
 800a116:	f7f7 ffaf 	bl	8002078 <console_flush>
    bool ret = _parser.send("AT+CWJAP=\"%s\",\"%s\"", ap, passPhrase)
 800a11a:	4622      	mov	r2, r4
 800a11c:	4633      	mov	r3, r6
 800a11e:	490e      	ldr	r1, [pc, #56]	; (800a158 <_ZN7ESP82667connectEPKcS1_+0x58>)
 800a120:	4628      	mov	r0, r5
 800a122:	f000 fa81 	bl	800a628 <_ZN8ATParser4sendEPKcz>
        && _parser.recv("OK");
 800a126:	4604      	mov	r4, r0
 800a128:	b120      	cbz	r0, 800a134 <_ZN7ESP82667connectEPKcS1_+0x34>
 800a12a:	490c      	ldr	r1, [pc, #48]	; (800a15c <_ZN7ESP82667connectEPKcS1_+0x5c>)
 800a12c:	4628      	mov	r0, r5
 800a12e:	f000 fa88 	bl	800a642 <_ZN8ATParser4recvEPKcz>
 800a132:	4604      	mov	r4, r0
    _log(_f, ret);  
 800a134:	4621      	mov	r1, r4
 800a136:	4806      	ldr	r0, [pc, #24]	; (800a150 <_ZN7ESP82667connectEPKcS1_+0x50>)
 800a138:	f7ff feb4 	bl	8009ea4 <_log>
    if (!ret) { console_printf("*** Check WIFI_SSID and WIFI_PASSWORD in targets/bluepill_my_sensor/syscfg.yml\n"); }
 800a13c:	b914      	cbnz	r4, 800a144 <_ZN7ESP82667connectEPKcS1_+0x44>
 800a13e:	4808      	ldr	r0, [pc, #32]	; (800a160 <_ZN7ESP82667connectEPKcS1_+0x60>)
 800a140:	f7f8 f874 	bl	800222c <console_printf>
    console_flush();
 800a144:	f7f7 ff98 	bl	8002078 <console_flush>
    return ret;
}
 800a148:	4620      	mov	r0, r4
 800a14a:	bd70      	pop	{r4, r5, r6, pc}
 800a14c:	20000214 	.word	0x20000214
 800a150:	0800e259 	.word	0x0800e259
 800a154:	0800e241 	.word	0x0800e241
 800a158:	0800e261 	.word	0x0800e261
 800a15c:	0800e238 	.word	0x0800e238
 800a160:	0800e274 	.word	0x0800e274

0800a164 <_ZN7ESP826612getIPAddressEv>:
{
    return _parser.send("AT+CWQAP") && _parser.recv("OK");
}

const char *ESP8266::getIPAddress(void)
{
 800a164:	b538      	push	{r3, r4, r5, lr}
    if (!(_parser.send("AT+CIFSR")
 800a166:	f100 0550 	add.w	r5, r0, #80	; 0x50
{
 800a16a:	4604      	mov	r4, r0
    if (!(_parser.send("AT+CIFSR")
 800a16c:	4909      	ldr	r1, [pc, #36]	; (800a194 <_ZN7ESP826612getIPAddressEv+0x30>)
 800a16e:	4628      	mov	r0, r5
 800a170:	f000 fa5a 	bl	800a628 <_ZN8ATParser4sendEPKcz>
 800a174:	b158      	cbz	r0, 800a18e <_ZN7ESP826612getIPAddressEv+0x2a>
        && _parser.recv("+CIFSR:STAIP,\"%15[^\"]\"", _ip_buffer)
 800a176:	3494      	adds	r4, #148	; 0x94
 800a178:	4622      	mov	r2, r4
 800a17a:	4907      	ldr	r1, [pc, #28]	; (800a198 <_ZN7ESP826612getIPAddressEv+0x34>)
 800a17c:	4628      	mov	r0, r5
 800a17e:	f000 fa60 	bl	800a642 <_ZN8ATParser4recvEPKcz>
 800a182:	b120      	cbz	r0, 800a18e <_ZN7ESP826612getIPAddressEv+0x2a>
        && _parser.recv("OK"))) {
 800a184:	4905      	ldr	r1, [pc, #20]	; (800a19c <_ZN7ESP826612getIPAddressEv+0x38>)
 800a186:	4628      	mov	r0, r5
 800a188:	f000 fa5b 	bl	800a642 <_ZN8ATParser4recvEPKcz>
    if (!(_parser.send("AT+CIFSR")
 800a18c:	b900      	cbnz	r0, 800a190 <_ZN7ESP826612getIPAddressEv+0x2c>
        return 0;
 800a18e:	2400      	movs	r4, #0
    }

    return _ip_buffer;
}
 800a190:	4620      	mov	r0, r4
 800a192:	bd38      	pop	{r3, r4, r5, pc}
 800a194:	0800e1b6 	.word	0x0800e1b6
 800a198:	0800e1bf 	.word	0x0800e1bf
 800a19c:	0800e238 	.word	0x0800e238

0800a1a0 <_ZN7ESP82664openEPKciS1_i>:

bool ESP8266::open(const char *type, int id, const char* addr, int port)
{
    const char *_f = "open";
    //IDs only 0-4
    if(id > 4) {
 800a1a0:	2a04      	cmp	r2, #4
{
 800a1a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a1a4:	4605      	mov	r5, r0
 800a1a6:	460e      	mov	r6, r1
 800a1a8:	4614      	mov	r4, r2
 800a1aa:	461f      	mov	r7, r3
    if(id > 4) {
 800a1ac:	dc1f      	bgt.n	800a1ee <_ZN7ESP82664openEPKciS1_i+0x4e>
        return false;
    }
    console_printf("%s%s...\n", _esp, _f);  console_flush();
 800a1ae:	4b11      	ldr	r3, [pc, #68]	; (800a1f4 <_ZN7ESP82664openEPKciS1_i+0x54>)
 800a1b0:	4a11      	ldr	r2, [pc, #68]	; (800a1f8 <_ZN7ESP82664openEPKciS1_i+0x58>)
 800a1b2:	6819      	ldr	r1, [r3, #0]
 800a1b4:	4811      	ldr	r0, [pc, #68]	; (800a1fc <_ZN7ESP82664openEPKciS1_i+0x5c>)
 800a1b6:	f7f8 f839 	bl	800222c <console_printf>
 800a1ba:	f7f7 ff5d 	bl	8002078 <console_flush>
    bool ret = _parser.send("AT+CIPSTART=%d,\"%s\",\"%s\",%d", id, type, addr, port)
 800a1be:	9b08      	ldr	r3, [sp, #32]
 800a1c0:	3550      	adds	r5, #80	; 0x50
 800a1c2:	e9cd 7300 	strd	r7, r3, [sp]
 800a1c6:	4622      	mov	r2, r4
 800a1c8:	4633      	mov	r3, r6
 800a1ca:	490d      	ldr	r1, [pc, #52]	; (800a200 <_ZN7ESP82664openEPKciS1_i+0x60>)
 800a1cc:	4628      	mov	r0, r5
 800a1ce:	f000 fa2b 	bl	800a628 <_ZN8ATParser4sendEPKcz>
        && _parser.recv("OK");
 800a1d2:	4604      	mov	r4, r0
 800a1d4:	b120      	cbz	r0, 800a1e0 <_ZN7ESP82664openEPKciS1_i+0x40>
 800a1d6:	490b      	ldr	r1, [pc, #44]	; (800a204 <_ZN7ESP82664openEPKciS1_i+0x64>)
 800a1d8:	4628      	mov	r0, r5
 800a1da:	f000 fa32 	bl	800a642 <_ZN8ATParser4recvEPKcz>
 800a1de:	4604      	mov	r4, r0
    _log(_f, ret);
 800a1e0:	4621      	mov	r1, r4
 800a1e2:	4805      	ldr	r0, [pc, #20]	; (800a1f8 <_ZN7ESP82664openEPKciS1_i+0x58>)
 800a1e4:	f7ff fe5e 	bl	8009ea4 <_log>
    return ret;
}
 800a1e8:	4620      	mov	r0, r4
 800a1ea:	b003      	add	sp, #12
 800a1ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return false;
 800a1ee:	2400      	movs	r4, #0
 800a1f0:	e7fa      	b.n	800a1e8 <_ZN7ESP82664openEPKciS1_i+0x48>
 800a1f2:	bf00      	nop
 800a1f4:	20000214 	.word	0x20000214
 800a1f8:	0800e1ee 	.word	0x0800e1ee
 800a1fc:	0800e241 	.word	0x0800e241
 800a200:	0800e1f3 	.word	0x0800e1f3
 800a204:	0800e238 	.word	0x0800e238

0800a208 <_ZN7ESP82668sendMBufEiP7os_mbuf>:
    _log(_f, false);
    return false;
}

bool ESP8266::sendMBuf(int id,  struct os_mbuf *m0)
{
 800a208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a20c:	4604      	mov	r4, r0
 800a20e:	460f      	mov	r7, r1
    //  Send the chain of mbufs.
    uint32_t amount = OS_MBUF_PKTLEN(m0);  //  Length of the mbuf chain.
 800a210:	8a16      	ldrh	r6, [r2, #16]
    const char *_f = "send mbuf";
    console_printf("%s%s %u...\n", _esp, _f, (unsigned) amount);  console_flush();
 800a212:	4926      	ldr	r1, [pc, #152]	; (800a2ac <_ZN7ESP82668sendMBufEiP7os_mbuf+0xa4>)
 800a214:	4633      	mov	r3, r6
 800a216:	6809      	ldr	r1, [r1, #0]
{
 800a218:	4615      	mov	r5, r2
    console_printf("%s%s %u...\n", _esp, _f, (unsigned) amount);  console_flush();
 800a21a:	4825      	ldr	r0, [pc, #148]	; (800a2b0 <_ZN7ESP82668sendMBufEiP7os_mbuf+0xa8>)
 800a21c:	4a25      	ldr	r2, [pc, #148]	; (800a2b4 <_ZN7ESP82668sendMBufEiP7os_mbuf+0xac>)
    //  May take a second try if device is busy
    for (unsigned i = 0; i < 2; i++) {
        if (_parser.send("AT+CIPSEND=%d,%d", id, amount)
 800a21e:	3450      	adds	r4, #80	; 0x50
    console_printf("%s%s %u...\n", _esp, _f, (unsigned) amount);  console_flush();
 800a220:	f7f8 f804 	bl	800222c <console_printf>
 800a224:	f7f7 ff28 	bl	8002078 <console_flush>
        if (_parser.send("AT+CIPSEND=%d,%d", id, amount)
 800a228:	4633      	mov	r3, r6
 800a22a:	463a      	mov	r2, r7
 800a22c:	4922      	ldr	r1, [pc, #136]	; (800a2b8 <_ZN7ESP82668sendMBufEiP7os_mbuf+0xb0>)
 800a22e:	4620      	mov	r0, r4
 800a230:	f000 f9fa 	bl	800a628 <_ZN8ATParser4sendEPKcz>
            && _parser.recv(">")) {
 800a234:	b120      	cbz	r0, 800a240 <_ZN7ESP82668sendMBufEiP7os_mbuf+0x38>
 800a236:	4921      	ldr	r1, [pc, #132]	; (800a2bc <_ZN7ESP82668sendMBufEiP7os_mbuf+0xb4>)
 800a238:	4620      	mov	r0, r4
 800a23a:	f000 fa02 	bl	800a642 <_ZN8ATParser4recvEPKcz>
 800a23e:	b958      	cbnz	r0, 800a258 <_ZN7ESP82668sendMBufEiP7os_mbuf+0x50>
        if (_parser.send("AT+CIPSEND=%d,%d", id, amount)
 800a240:	4633      	mov	r3, r6
 800a242:	463a      	mov	r2, r7
 800a244:	491c      	ldr	r1, [pc, #112]	; (800a2b8 <_ZN7ESP82668sendMBufEiP7os_mbuf+0xb0>)
 800a246:	4620      	mov	r0, r4
 800a248:	f000 f9ee 	bl	800a628 <_ZN8ATParser4sendEPKcz>
            && _parser.recv(">")) {
 800a24c:	b340      	cbz	r0, 800a2a0 <_ZN7ESP82668sendMBufEiP7os_mbuf+0x98>
 800a24e:	491b      	ldr	r1, [pc, #108]	; (800a2bc <_ZN7ESP82668sendMBufEiP7os_mbuf+0xb4>)
 800a250:	4620      	mov	r0, r4
 800a252:	f000 f9f6 	bl	800a642 <_ZN8ATParser4recvEPKcz>
 800a256:	b318      	cbz	r0, 800a2a0 <_ZN7ESP82668sendMBufEiP7os_mbuf+0x98>
            struct os_mbuf *m = m0;
            bool failed = false;
            while (m) {  //  For each mbuf in the list...
                const char *data = OS_MBUF_DATA(m, const char *);  //  Fetch the data.
                int size = m->om_len;  //  Fetch the size.
                console_dump((const uint8_t *) data, size); console_printf("\n");
 800a258:	f8df 8068 	ldr.w	r8, [pc, #104]	; 800a2c4 <_ZN7ESP82668sendMBufEiP7os_mbuf+0xbc>
                const char *data = OS_MBUF_DATA(m, const char *);  //  Fetch the data.
 800a25c:	682e      	ldr	r6, [r5, #0]
                int size = m->om_len;  //  Fetch the size.
 800a25e:	88ef      	ldrh	r7, [r5, #6]
                console_dump((const uint8_t *) data, size); console_printf("\n");
 800a260:	4630      	mov	r0, r6
 800a262:	4639      	mov	r1, r7
 800a264:	f7f7 ff7a 	bl	800215c <console_dump>
 800a268:	4640      	mov	r0, r8
 800a26a:	f7f7 ffdf 	bl	800222c <console_printf>
                if (_parser.write(data, size) < 0) {   //  If the writing failed, retry.
 800a26e:	463a      	mov	r2, r7
 800a270:	4631      	mov	r1, r6
 800a272:	4620      	mov	r0, r4
 800a274:	f000 f88d 	bl	800a392 <_ZN8ATParser5writeEPKci>
 800a278:	2800      	cmp	r0, #0
 800a27a:	db11      	blt.n	800a2a0 <_ZN7ESP82668sendMBufEiP7os_mbuf+0x98>
                    failed = true;
                    break;
                }
                m = m->om_next.sle_next;   //  Fetch next mbuf in the list.
 800a27c:	68ed      	ldr	r5, [r5, #12]
            while (m) {  //  For each mbuf in the list...
 800a27e:	2d00      	cmp	r5, #0
 800a280:	d1ec      	bne.n	800a25c <_ZN7ESP82668sendMBufEiP7os_mbuf+0x54>
            }
            if (failed) { break; }
            if (!_parser.recv("SEND OK")) { break; }
 800a282:	4620      	mov	r0, r4
 800a284:	490e      	ldr	r1, [pc, #56]	; (800a2c0 <_ZN7ESP82668sendMBufEiP7os_mbuf+0xb8>)
 800a286:	f000 f9dc 	bl	800a642 <_ZN8ATParser4recvEPKcz>
 800a28a:	4604      	mov	r4, r0
 800a28c:	b140      	cbz	r0, 800a2a0 <_ZN7ESP82668sendMBufEiP7os_mbuf+0x98>
            _log(_f, true);  console_flush();
 800a28e:	2101      	movs	r1, #1
 800a290:	4808      	ldr	r0, [pc, #32]	; (800a2b4 <_ZN7ESP82668sendMBufEiP7os_mbuf+0xac>)
 800a292:	f7ff fe07 	bl	8009ea4 <_log>
 800a296:	f7f7 feef 	bl	8002078 <console_flush>
            return true;
        }
    }
    _log(_f, false);
    return false;
}
 800a29a:	4620      	mov	r0, r4
 800a29c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    _log(_f, false);
 800a2a0:	2100      	movs	r1, #0
 800a2a2:	4804      	ldr	r0, [pc, #16]	; (800a2b4 <_ZN7ESP82668sendMBufEiP7os_mbuf+0xac>)
 800a2a4:	f7ff fdfe 	bl	8009ea4 <_log>
    return false;
 800a2a8:	2400      	movs	r4, #0
 800a2aa:	e7f6      	b.n	800a29a <_ZN7ESP82668sendMBufEiP7os_mbuf+0x92>
 800a2ac:	20000214 	.word	0x20000214
 800a2b0:	0800e214 	.word	0x0800e214
 800a2b4:	0800e30b 	.word	0x0800e30b
 800a2b8:	0800e220 	.word	0x0800e220
 800a2bc:	0800e231 	.word	0x0800e231
 800a2c0:	0800e233 	.word	0x0800e233
 800a2c4:	0800e41f 	.word	0x0800e41f

0800a2c8 <_ZN7ESP826615_packet_handlerEv>:

void ESP8266::_packet_handler()
{
 800a2c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    int id;
    uint32_t amount;

    // parse out the packet
    if (!_parser.recv(",%d,%d:", &id, &amount)) {
 800a2ca:	f100 0750 	add.w	r7, r0, #80	; 0x50
{
 800a2ce:	4605      	mov	r5, r0
    if (!_parser.recv(",%d,%d:", &id, &amount)) {
 800a2d0:	ab01      	add	r3, sp, #4
 800a2d2:	466a      	mov	r2, sp
 800a2d4:	4912      	ldr	r1, [pc, #72]	; (800a320 <_ZN7ESP826615_packet_handlerEv+0x58>)
 800a2d6:	4638      	mov	r0, r7
 800a2d8:	f000 f9b3 	bl	800a642 <_ZN8ATParser4recvEPKcz>
 800a2dc:	b1e8      	cbz	r0, 800a31a <_ZN7ESP826615_packet_handlerEv+0x52>
        return;
    }

    struct packet *packet = (struct packet*)malloc(
 800a2de:	9e01      	ldr	r6, [sp, #4]
            sizeof(struct packet) + amount);
 800a2e0:	f106 000c 	add.w	r0, r6, #12
 800a2e4:	f7fa ffbc 	bl	8005260 <malloc>
    if (!packet) {
 800a2e8:	4604      	mov	r4, r0
 800a2ea:	b1b0      	cbz	r0, 800a31a <_ZN7ESP826615_packet_handlerEv+0x52>
        return;
    }

    packet->id = id;
 800a2ec:	9b00      	ldr	r3, [sp, #0]
    packet->len = amount;
    packet->next = 0;
 800a2ee:	4601      	mov	r1, r0
    packet->len = amount;
 800a2f0:	e9c0 3601 	strd	r3, r6, [r0, #4]
    packet->next = 0;
 800a2f4:	2300      	movs	r3, #0

    if (!(_parser.read((char*)(packet + 1), amount))) {
 800a2f6:	4632      	mov	r2, r6
    packet->next = 0;
 800a2f8:	f841 3b0c 	str.w	r3, [r1], #12
    if (!(_parser.read((char*)(packet + 1), amount))) {
 800a2fc:	4638      	mov	r0, r7
 800a2fe:	f000 f85b 	bl	800a3b8 <_ZN8ATParser4readEPci>
 800a302:	b928      	cbnz	r0, 800a310 <_ZN7ESP826615_packet_handlerEv+0x48>
        free(packet);
 800a304:	4620      	mov	r0, r4
    }

    // append to packet list
    *_packets_end = packet;
    _packets_end = &packet->next;
}
 800a306:	b003      	add	sp, #12
 800a308:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        free(packet);
 800a30c:	f7fa bff4 	b.w	80052f8 <free>
    *_packets_end = packet;
 800a310:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 800a314:	601c      	str	r4, [r3, #0]
    _packets_end = &packet->next;
 800a316:	f8c5 4090 	str.w	r4, [r5, #144]	; 0x90
}
 800a31a:	b003      	add	sp, #12
 800a31c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a31e:	bf00      	nop
 800a320:	0800e1d6 	.word	0x0800e1d6

0800a324 <_Z14packet_handlerPv>:
void packet_handler(void *arg) {
 800a324:	b508      	push	{r3, lr}
    assert(arg != NULL);
 800a326:	4603      	mov	r3, r0
 800a328:	b918      	cbnz	r0, 800a332 <_Z14packet_handlerPv+0xe>
 800a32a:	4602      	mov	r2, r0
 800a32c:	4601      	mov	r1, r0
 800a32e:	f7f9 fbc1 	bl	8003ab4 <__assert_func>
}
 800a332:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    ((ESP8266 *)arg)->_packet_handler();
 800a336:	f7ff bfc7 	b.w	800a2c8 <_ZN7ESP826615_packet_handlerEv>

0800a33a <_ZN7ESP826610setTimeoutEm>:
        _timeout = timeout;
 800a33a:	65c1      	str	r1, [r0, #92]	; 0x5c
}

void ESP8266::setTimeout(uint32_t timeout_ms)
{
    _parser.setTimeout(timeout_ms);
}
 800a33c:	4770      	bx	lr

0800a33e <_ZN7ESP82666attachEPFvPvES0_>:
    return _serial.writeable();
}

void ESP8266::attach(void (*func)(void *), void *arg)
{
    _serial.attach(func, arg);
 800a33e:	2300      	movs	r3, #0
 800a340:	3004      	adds	r0, #4
 800a342:	f000 ba6b 	b.w	800a81c <_ZN14BufferedSerial6attachEPFvPvES0_i>

0800a346 <_ZN8ATParser4initER14BufferedSerialPciPKcib>:
//  #define debug_if(dbg_on, format, arg) {}

extern "C" int debug_vrecv; int debug_vrecv = 0;  ////

void ATParser::init(BufferedSerial &serial, char *buffer, int buffer_size, const char *delimiter, int timeout, bool debug)
{
 800a346:	b510      	push	{r4, lr}
 800a348:	4604      	mov	r4, r0
 800a34a:	9802      	ldr	r0, [sp, #8]
    _serial = &serial;
    _buffer = buffer;
    _buffer_size = buffer_size; 
 800a34c:	60a3      	str	r3, [r4, #8]
 800a34e:	9b03      	ldr	r3, [sp, #12]
    _buffer = buffer;
 800a350:	e9c4 1200 	strd	r1, r2, [r4]
        _delimiter = delimiter;
 800a354:	e9c4 3003 	strd	r3, r0, [r4, #12]
        _delim_size = strlen(delimiter);
 800a358:	f7fb f836 	bl	80053c8 <strlen>
        dbg_on = (on) ? 1 : 0;
 800a35c:	f89d 3010 	ldrb.w	r3, [sp, #16]
        _delim_size = strlen(delimiter);
 800a360:	6160      	str	r0, [r4, #20]
        dbg_on = (on) ? 1 : 0;
 800a362:	7623      	strb	r3, [r4, #24]
    setTimeout(timeout);
    setDelimiter(delimiter);
    debugOn(debug);
    for (int k = 0; k < MAX_OOBS; k++) { _oobs[k].len = 0; }  //  Init the callbacks.
 800a364:	2300      	movs	r3, #0
 800a366:	61e3      	str	r3, [r4, #28]
 800a368:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 800a36a:	bd10      	pop	{r4, pc}

0800a36c <_ZN8ATParser4putcEc>:

// getc/putc handling with timeouts
int ATParser::putc(char c)
{
    //  TODO: Handle timeout.
    return _serial->putc(c);
 800a36c:	6800      	ldr	r0, [r0, #0]
 800a36e:	f000 ba6b 	b.w	800a848 <_ZN14BufferedSerial4putcEi>

0800a372 <_ZN8ATParser5fgetcEv>:
}

int ATParser::getc()
{
    //  Return the next received byte.  If no data, block until the timeout.
    return _serial->getc(_timeout);
 800a372:	68c1      	ldr	r1, [r0, #12]
 800a374:	6800      	ldr	r0, [r0, #0]
 800a376:	f000 b9d3 	b.w	800a720 <_ZN14BufferedSerial5fgetcEi>

0800a37a <_ZN8ATParser5flushEv>:
}

void ATParser::flush()
{
 800a37a:	b510      	push	{r4, lr}
 800a37c:	4604      	mov	r4, r0
    while (_serial->readable()) {
 800a37e:	6820      	ldr	r0, [r4, #0]
 800a380:	f000 f9c8 	bl	800a714 <_ZN14BufferedSerial8readableEv>
 800a384:	b120      	cbz	r0, 800a390 <_ZN8ATParser5flushEv+0x16>
        _serial->getc(0);  //  Do not wait for data to be available.
 800a386:	2100      	movs	r1, #0
 800a388:	6820      	ldr	r0, [r4, #0]
 800a38a:	f000 f9c9 	bl	800a720 <_ZN14BufferedSerial5fgetcEi>
    while (_serial->readable()) {
 800a38e:	e7f6      	b.n	800a37e <_ZN8ATParser5flushEv+0x4>
    }
}
 800a390:	bd10      	pop	{r4, pc}

0800a392 <_ZN8ATParser5writeEPKci>:


// read/write handling with timeouts
int ATParser::write(const char *data, int size)
{
 800a392:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a394:	4605      	mov	r5, r0
 800a396:	460e      	mov	r6, r1
 800a398:	4617      	mov	r7, r2
    int i = 0;
 800a39a:	2400      	movs	r4, #0
    for ( ; i < size; i++) {
 800a39c:	42bc      	cmp	r4, r7
 800a39e:	da09      	bge.n	800a3b4 <_ZN8ATParser5writeEPKci+0x22>
        if (putc(data[i]) < 0) {
 800a3a0:	5d31      	ldrb	r1, [r6, r4]
 800a3a2:	4628      	mov	r0, r5
 800a3a4:	f7ff ffe2 	bl	800a36c <_ZN8ATParser4putcEc>
 800a3a8:	2800      	cmp	r0, #0
 800a3aa:	db01      	blt.n	800a3b0 <_ZN8ATParser5writeEPKci+0x1e>
    for ( ; i < size; i++) {
 800a3ac:	3401      	adds	r4, #1
 800a3ae:	e7f5      	b.n	800a39c <_ZN8ATParser5writeEPKci+0xa>
            return -1;
 800a3b0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
        }
    }
    return i;
}
 800a3b4:	4620      	mov	r0, r4
 800a3b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a3b8 <_ZN8ATParser4readEPci>:

int ATParser::read(char *data, int size)
{
 800a3b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3ba:	4606      	mov	r6, r0
 800a3bc:	460d      	mov	r5, r1
 800a3be:	4617      	mov	r7, r2
    int i = 0;
 800a3c0:	2400      	movs	r4, #0
    for ( ; i < size; i++) {
 800a3c2:	42bc      	cmp	r4, r7
 800a3c4:	da09      	bge.n	800a3da <_ZN8ATParser4readEPci+0x22>
        int c = getc();
 800a3c6:	4630      	mov	r0, r6
 800a3c8:	f7ff ffd3 	bl	800a372 <_ZN8ATParser5fgetcEv>
        if (c < 0) {
 800a3cc:	2800      	cmp	r0, #0
 800a3ce:	db02      	blt.n	800a3d6 <_ZN8ATParser4readEPci+0x1e>
            return -1;
        }
        data[i] = c;
 800a3d0:	5528      	strb	r0, [r5, r4]
    for ( ; i < size; i++) {
 800a3d2:	3401      	adds	r4, #1
 800a3d4:	e7f5      	b.n	800a3c2 <_ZN8ATParser4readEPci+0xa>
            return -1;
 800a3d6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    }
    return i;
}
 800a3da:	4620      	mov	r0, r4
 800a3dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a3e0 <_ZN8ATParser5vsendEPKcSt9__va_list>:
}


// Command parsing with line handling
bool ATParser::vsend(const char *command, va_list args)
{
 800a3e0:	b538      	push	{r3, r4, r5, lr}
 800a3e2:	4605      	mov	r5, r0
    // Create and send command
    if (vsprintf(_buffer, command, args) < 0) {
 800a3e4:	6840      	ldr	r0, [r0, #4]
 800a3e6:	f002 fe7b 	bl	800d0e0 <vsprintf>
 800a3ea:	2800      	cmp	r0, #0
 800a3ec:	da01      	bge.n	800a3f2 <_ZN8ATParser5vsendEPKcSt9__va_list+0x12>
        return false;
 800a3ee:	2000      	movs	r0, #0
        }
    }

    debug_if(dbg_on, "AT> %s\r\n", _buffer);
    return true;
}
 800a3f0:	bd38      	pop	{r3, r4, r5, pc}
    for (int i = 0; _buffer[i]; i++) {
 800a3f2:	2400      	movs	r4, #0
 800a3f4:	686b      	ldr	r3, [r5, #4]
 800a3f6:	5d19      	ldrb	r1, [r3, r4]
 800a3f8:	b131      	cbz	r1, 800a408 <_ZN8ATParser5vsendEPKcSt9__va_list+0x28>
        if (putc(_buffer[i]) < 0) {
 800a3fa:	4628      	mov	r0, r5
 800a3fc:	f7ff ffb6 	bl	800a36c <_ZN8ATParser4putcEc>
 800a400:	2800      	cmp	r0, #0
 800a402:	dbf4      	blt.n	800a3ee <_ZN8ATParser5vsendEPKcSt9__va_list+0xe>
    for (int i = 0; _buffer[i]; i++) {
 800a404:	3401      	adds	r4, #1
 800a406:	e7f5      	b.n	800a3f4 <_ZN8ATParser5vsendEPKcSt9__va_list+0x14>
    for (int i = 0; _delimiter[i]; i++) {
 800a408:	460c      	mov	r4, r1
 800a40a:	692b      	ldr	r3, [r5, #16]
 800a40c:	5d19      	ldrb	r1, [r3, r4]
 800a40e:	b131      	cbz	r1, 800a41e <_ZN8ATParser5vsendEPKcSt9__va_list+0x3e>
        if (putc(_delimiter[i]) < 0) {
 800a410:	4628      	mov	r0, r5
 800a412:	f7ff ffab 	bl	800a36c <_ZN8ATParser4putcEc>
 800a416:	2800      	cmp	r0, #0
 800a418:	dbe9      	blt.n	800a3ee <_ZN8ATParser5vsendEPKcSt9__va_list+0xe>
    for (int i = 0; _delimiter[i]; i++) {
 800a41a:	3401      	adds	r4, #1
 800a41c:	e7f5      	b.n	800a40a <_ZN8ATParser5vsendEPKcSt9__va_list+0x2a>
    debug_if(dbg_on, "AT> %s\r\n", _buffer);
 800a41e:	6869      	ldr	r1, [r5, #4]
 800a420:	4802      	ldr	r0, [pc, #8]	; (800a42c <_ZN8ATParser5vsendEPKcSt9__va_list+0x4c>)
 800a422:	f7f7 ff03 	bl	800222c <console_printf>
 800a426:	2001      	movs	r0, #1
 800a428:	e7e2      	b.n	800a3f0 <_ZN8ATParser5vsendEPKcSt9__va_list+0x10>
 800a42a:	bf00      	nop
 800a42c:	0800e374 	.word	0x0800e374

0800a430 <_ZN8ATParser5vrecvEPKcSt9__va_list>:

bool ATParser::vrecv(const char *response, va_list args)
{
 800a430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a434:	4604      	mov	r4, r0
 800a436:	460d      	mov	r5, r1
 800a438:	b089      	sub	sp, #36	; 0x24
 800a43a:	9203      	str	r2, [sp, #12]
    // Iterate through each line in the expected response
    while (response[0]) {
 800a43c:	782b      	ldrb	r3, [r5, #0]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	f000 80e1 	beq.w	800a606 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x1d6>
 800a444:	462f      	mov	r7, r5
        // Since response is const, we need to copy it into our buffer to
        // add the line's null terminator and clobber value-matches with asterisks.
        //
        // We just use the beginning of the buffer to avoid unnecessary allocations.
        int i = 0;
        int offset = 0;
 800a446:	2600      	movs	r6, #0
 800a448:	eba7 0b05 	sub.w	fp, r7, r5
 800a44c:	6862      	ldr	r2, [r4, #4]

        while (response[i]) {
 800a44e:	f817 ab01 	ldrb.w	sl, [r7], #1
 800a452:	f106 0901 	add.w	r9, r6, #1
 800a456:	f8cd 9000 	str.w	r9, [sp]
 800a45a:	eb02 0806 	add.w	r8, r2, r6
 800a45e:	f1ba 0f00 	cmp.w	sl, #0
 800a462:	d01d      	beq.n	800a4a0 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x70>
            if (memcmp(&response[i+1-_delim_size], _delimiter, _delim_size) == 0) {
 800a464:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
 800a468:	1ab8      	subs	r0, r7, r2
 800a46a:	eba7 0b05 	sub.w	fp, r7, r5
 800a46e:	f7fa ff59 	bl	8005324 <memcmp>
 800a472:	b1a8      	cbz	r0, 800a4a0 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x70>
                i++;
                break;
            } else if (response[i] == '%' && response[i+1] != '%' && response[i+1] != '*') {
 800a474:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 800a478:	9b00      	ldr	r3, [sp, #0]
 800a47a:	d10e      	bne.n	800a49a <_ZN8ATParser5vrecvEPKcSt9__va_list+0x6a>
 800a47c:	783a      	ldrb	r2, [r7, #0]
 800a47e:	2a25      	cmp	r2, #37	; 0x25
 800a480:	d00b      	beq.n	800a49a <_ZN8ATParser5vrecvEPKcSt9__va_list+0x6a>
 800a482:	2a2a      	cmp	r2, #42	; 0x2a
 800a484:	d009      	beq.n	800a49a <_ZN8ATParser5vrecvEPKcSt9__va_list+0x6a>
                _buffer[offset++] = '%';
                _buffer[offset++] = '*';
 800a486:	f04f 012a 	mov.w	r1, #42	; 0x2a
                _buffer[offset++] = '%';
 800a48a:	f888 a000 	strb.w	sl, [r8]
                _buffer[offset++] = '*';
 800a48e:	6862      	ldr	r2, [r4, #4]
 800a490:	f106 0902 	add.w	r9, r6, #2
 800a494:	54d1      	strb	r1, [r2, r3]
{
 800a496:	464e      	mov	r6, r9
 800a498:	e7d6      	b.n	800a448 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x18>
                i++;
            } else {
                _buffer[offset++] = response[i++];
 800a49a:	f888 a000 	strb.w	sl, [r8]
 800a49e:	e7fa      	b.n	800a496 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x66>
        }

        // Scanf has very poor support for catching errors
        // fortunately, we can abuse the %n specifier to determine
        // if the entire string was matched.
        _buffer[offset++] = '%';
 800a4a0:	2325      	movs	r3, #37	; 0x25
        _buffer[offset++] = 'n';
 800a4a2:	226e      	movs	r2, #110	; 0x6e
        _buffer[offset++] = '%';
 800a4a4:	f888 3000 	strb.w	r3, [r8]
        _buffer[offset++] = 'n';
 800a4a8:	6863      	ldr	r3, [r4, #4]
        _buffer[offset++] = 0;
 800a4aa:	1cf7      	adds	r7, r6, #3
        _buffer[offset++] = 'n';
 800a4ac:	f803 2009 	strb.w	r2, [r3, r9]
        _buffer[offset++] = 0;
 800a4b0:	6863      	ldr	r3, [r4, #4]
        // format string that only stores the matched characters (%n).
        // The other reads in the actual matched values.
        //
        // We keep trying the match until we succeed or some other error
        // derails us.
        int j = 0, last_count = -1; char *last_scan = _buffer;
 800a4b2:	f04f 0800 	mov.w	r8, #0
        _buffer[offset++] = 0;
 800a4b6:	441e      	add	r6, r3
 800a4b8:	f04f 0300 	mov.w	r3, #0
 800a4bc:	70b3      	strb	r3, [r6, #2]
        int j = 0, last_count = -1; char *last_scan = _buffer;
 800a4be:	f8d4 9004 	ldr.w	r9, [r4, #4]

        while (true) {
            // Recieve next character
            int c = getc();
 800a4c2:	4620      	mov	r0, r4
 800a4c4:	f7ff ff55 	bl	800a372 <_ZN8ATParser5fgetcEv>
            if (c < 0) {
 800a4c8:	1e03      	subs	r3, r0, #0
 800a4ca:	9301      	str	r3, [sp, #4]
 800a4cc:	da0a      	bge.n	800a4e4 <_ZN8ATParser5vrecvEPKcSt9__va_list+0xb4>
                console_printf("AT response mismatch: found \"%s\"\n   expected \"%s\"\n", last_scan, _buffer);  console_flush();
 800a4ce:	6862      	ldr	r2, [r4, #4]
 800a4d0:	4649      	mov	r1, r9
 800a4d2:	484e      	ldr	r0, [pc, #312]	; (800a60c <_ZN8ATParser5vrecvEPKcSt9__va_list+0x1dc>)
 800a4d4:	f7f7 feaa 	bl	800222c <console_printf>
 800a4d8:	f7f7 fdce 	bl	8002078 <console_flush>
                return false;
 800a4dc:	2000      	movs	r0, #0
            }
        }
    }

    return true;
}
 800a4de:	b009      	add	sp, #36	; 0x24
 800a4e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            _buffer[offset + j] = 0;
 800a4e4:	f04f 0100 	mov.w	r1, #0
            for (int k = 0; k < MAX_OOBS; k++) {
 800a4e8:	f04f 0a00 	mov.w	sl, #0
            _buffer[offset + j++] = c;
 800a4ec:	6863      	ldr	r3, [r4, #4]
 800a4ee:	9a01      	ldr	r2, [sp, #4]
 800a4f0:	f108 0601 	add.w	r6, r8, #1
 800a4f4:	4443      	add	r3, r8
 800a4f6:	55da      	strb	r2, [r3, r7]
            _buffer[offset + j] = 0;
 800a4f8:	19bb      	adds	r3, r7, r6
 800a4fa:	9304      	str	r3, [sp, #16]
 800a4fc:	6863      	ldr	r3, [r4, #4]
 800a4fe:	19ba      	adds	r2, r7, r6
 800a500:	5499      	strb	r1, [r3, r2]
 800a502:	6863      	ldr	r3, [r4, #4]
 800a504:	19da      	adds	r2, r3, r7
 800a506:	9202      	str	r2, [sp, #8]
 800a508:	eb04 190a 	add.w	r9, r4, sl, lsl #4
                if (_oobs[k].len == 0) { continue; }  //  Skip empty callbacks.
 800a50c:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800a510:	b1e2      	cbz	r2, 800a54c <_ZN8ATParser5vrecvEPKcSt9__va_list+0x11c>
                if (
 800a512:	42b2      	cmp	r2, r6
 800a514:	d11a      	bne.n	800a54c <_ZN8ATParser5vrecvEPKcSt9__va_list+0x11c>
 800a516:	9305      	str	r3, [sp, #20]
                    memcmp(_oobs[k].prefix, _buffer+offset, _oobs[k].len) == 0
 800a518:	f8d9 3020 	ldr.w	r3, [r9, #32]
 800a51c:	4632      	mov	r2, r6
 800a51e:	4618      	mov	r0, r3
 800a520:	9902      	ldr	r1, [sp, #8]
 800a522:	9300      	str	r3, [sp, #0]
 800a524:	f7fa fefe 	bl	8005324 <memcmp>
                    j == (int) _oobs[k].len && 
 800a528:	9b05      	ldr	r3, [sp, #20]
 800a52a:	b978      	cbnz	r0, 800a54c <_ZN8ATParser5vrecvEPKcSt9__va_list+0x11c>
                    debug_if(dbg_on, "AT! %s\r\n", _oobs[k].prefix);
 800a52c:	9900      	ldr	r1, [sp, #0]
 800a52e:	4838      	ldr	r0, [pc, #224]	; (800a610 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x1e0>)
 800a530:	f7f7 fe7c 	bl	800222c <console_printf>
                    _oobs[k].cb(_oobs[k].arg);
 800a534:	e9d9 3009 	ldrd	r3, r0, [r9, #36]	; 0x24
 800a538:	4798      	blx	r3
                    return vrecv(response, args);
 800a53a:	9a03      	ldr	r2, [sp, #12]
 800a53c:	4629      	mov	r1, r5
 800a53e:	4620      	mov	r0, r4
 800a540:	f7ff ff76 	bl	800a430 <_ZN8ATParser5vrecvEPKcSt9__va_list>
 800a544:	e7cb      	b.n	800a4de <_ZN8ATParser5vrecvEPKcSt9__va_list+0xae>
 800a546:	f04f 0a01 	mov.w	sl, #1
 800a54a:	e7dd      	b.n	800a508 <_ZN8ATParser5vrecvEPKcSt9__va_list+0xd8>
            for (int k = 0; k < MAX_OOBS; k++) {
 800a54c:	f1ba 0f00 	cmp.w	sl, #0
 800a550:	d0f9      	beq.n	800a546 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x116>
            int count = -1;
 800a552:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a556:	aa08      	add	r2, sp, #32
 800a558:	f842 1d04 	str.w	r1, [r2, #-4]!
            sscanf(_buffer+offset, _buffer, &count);
 800a55c:	9802      	ldr	r0, [sp, #8]
 800a55e:	4619      	mov	r1, r3
 800a560:	f002 fd0c 	bl	800cf7c <sscanf>
            if (debug_vrecv && c == '\n' && last_scan[0] != '\n' && last_scan[0] != '\r') {
 800a564:	4a2b      	ldr	r2, [pc, #172]	; (800a614 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x1e4>)
            last_count = count; last_scan = _buffer + offset;
 800a566:	6863      	ldr	r3, [r4, #4]
            if (debug_vrecv && c == '\n' && last_scan[0] != '\n' && last_scan[0] != '\r') {
 800a568:	6812      	ldr	r2, [r2, #0]
            last_count = count; last_scan = _buffer + offset;
 800a56a:	eb03 0907 	add.w	r9, r3, r7
            if (debug_vrecv && c == '\n' && last_scan[0] != '\n' && last_scan[0] != '\r') {
 800a56e:	b172      	cbz	r2, 800a58e <_ZN8ATParser5vrecvEPKcSt9__va_list+0x15e>
 800a570:	9a01      	ldr	r2, [sp, #4]
 800a572:	2a0a      	cmp	r2, #10
 800a574:	d10b      	bne.n	800a58e <_ZN8ATParser5vrecvEPKcSt9__va_list+0x15e>
 800a576:	5ddb      	ldrb	r3, [r3, r7]
 800a578:	2b0a      	cmp	r3, #10
 800a57a:	d008      	beq.n	800a58e <_ZN8ATParser5vrecvEPKcSt9__va_list+0x15e>
 800a57c:	2b0d      	cmp	r3, #13
 800a57e:	d006      	beq.n	800a58e <_ZN8ATParser5vrecvEPKcSt9__va_list+0x15e>
            last_count = count; last_scan = _buffer + offset;
 800a580:	9907      	ldr	r1, [sp, #28]
                if (last_count > 0) { console_printf("  < %d / %s", last_count, last_scan); }
 800a582:	2900      	cmp	r1, #0
 800a584:	dd1e      	ble.n	800a5c4 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x194>
 800a586:	464a      	mov	r2, r9
 800a588:	4823      	ldr	r0, [pc, #140]	; (800a618 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x1e8>)
 800a58a:	f7f7 fe4f 	bl	800222c <console_printf>
            if (count == j) {
 800a58e:	9b07      	ldr	r3, [sp, #28]
 800a590:	f8d4 a004 	ldr.w	sl, [r4, #4]
 800a594:	42b3      	cmp	r3, r6
 800a596:	d11a      	bne.n	800a5ce <_ZN8ATParser5vrecvEPKcSt9__va_list+0x19e>
                debug_if(dbg_on, "AT= %s\r\n", _buffer+offset);
 800a598:	eb0a 0107 	add.w	r1, sl, r7
 800a59c:	481f      	ldr	r0, [pc, #124]	; (800a61c <_ZN8ATParser5vrecvEPKcSt9__va_list+0x1ec>)
 800a59e:	f7f7 fe45 	bl	800222c <console_printf>
                memcpy(_buffer, response, i);
 800a5a2:	4629      	mov	r1, r5
 800a5a4:	465a      	mov	r2, fp
 800a5a6:	6860      	ldr	r0, [r4, #4]
 800a5a8:	f7fa fee0 	bl	800536c <memcpy>
                _buffer[i] = 0;
 800a5ac:	f04f 0200 	mov.w	r2, #0
 800a5b0:	6863      	ldr	r3, [r4, #4]
                response += i;
 800a5b2:	445d      	add	r5, fp
                _buffer[i] = 0;
 800a5b4:	f803 200b 	strb.w	r2, [r3, fp]
                vsscanf(_buffer+offset, _buffer, args);
 800a5b8:	6861      	ldr	r1, [r4, #4]
 800a5ba:	9a03      	ldr	r2, [sp, #12]
 800a5bc:	19c8      	adds	r0, r1, r7
 800a5be:	f001 fe97 	bl	800c2f0 <vsscanf>
 800a5c2:	e73b      	b.n	800a43c <_ZN8ATParser5vrecvEPKcSt9__va_list+0xc>
                else { console_printf("  < %s", last_scan); }
 800a5c4:	4649      	mov	r1, r9
 800a5c6:	4816      	ldr	r0, [pc, #88]	; (800a620 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x1f0>)
 800a5c8:	f7f7 fe30 	bl	800222c <console_printf>
 800a5cc:	e7df      	b.n	800a58e <_ZN8ATParser5vrecvEPKcSt9__va_list+0x15e>
            if (j+1 >= _buffer_size - offset ||
 800a5ce:	68a3      	ldr	r3, [r4, #8]
 800a5d0:	f108 0802 	add.w	r8, r8, #2
 800a5d4:	1bdb      	subs	r3, r3, r7
 800a5d6:	4598      	cmp	r8, r3
 800a5d8:	da07      	bge.n	800a5ea <_ZN8ATParser5vrecvEPKcSt9__va_list+0x1ba>
                strcmp(&_buffer[offset + j-_delim_size], _delimiter) == 0) {
 800a5da:	6960      	ldr	r0, [r4, #20]
 800a5dc:	9b04      	ldr	r3, [sp, #16]
 800a5de:	6921      	ldr	r1, [r4, #16]
 800a5e0:	1a18      	subs	r0, r3, r0
 800a5e2:	4450      	add	r0, sl
 800a5e4:	f7fa fee6 	bl	80053b4 <strcmp>
            if (j+1 >= _buffer_size - offset ||
 800a5e8:	b958      	cbnz	r0, 800a602 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x1d2>
                if (_buffer[offset] != '\r' && _buffer[offset] != '\n') {  //  Skip blank lines.
 800a5ea:	f81a 3007 	ldrb.w	r3, [sl, r7]
 800a5ee:	eb0a 0107 	add.w	r1, sl, r7
 800a5f2:	2b0d      	cmp	r3, #13
 800a5f4:	d004      	beq.n	800a600 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x1d0>
 800a5f6:	2b0a      	cmp	r3, #10
 800a5f8:	d002      	beq.n	800a600 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x1d0>
                    debug_if(dbg_on, "AT< %s", _buffer+offset);
 800a5fa:	480a      	ldr	r0, [pc, #40]	; (800a624 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x1f4>)
 800a5fc:	f7f7 fe16 	bl	800222c <console_printf>
                j = 0;
 800a600:	2600      	movs	r6, #0
        }
 800a602:	46b0      	mov	r8, r6
 800a604:	e75d      	b.n	800a4c2 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x92>
    return true;
 800a606:	2001      	movs	r0, #1
 800a608:	e769      	b.n	800a4de <_ZN8ATParser5vrecvEPKcSt9__va_list+0xae>
 800a60a:	bf00      	nop
 800a60c:	0800e315 	.word	0x0800e315
 800a610:	0800e348 	.word	0x0800e348
 800a614:	200031ec 	.word	0x200031ec
 800a618:	0800e351 	.word	0x0800e351
 800a61c:	0800e364 	.word	0x0800e364
 800a620:	0800e35d 	.word	0x0800e35d
 800a624:	0800e36d 	.word	0x0800e36d

0800a628 <_ZN8ATParser4sendEPKcz>:
    va_end(args);
    return res;
}

bool ATParser::send(const char *command, ...)
{
 800a628:	b40e      	push	{r1, r2, r3}
 800a62a:	b503      	push	{r0, r1, lr}
 800a62c:	aa03      	add	r2, sp, #12
 800a62e:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list args;
    va_start(args, command);
 800a632:	9201      	str	r2, [sp, #4]
    bool res = vsend(command, args);
 800a634:	f7ff fed4 	bl	800a3e0 <_ZN8ATParser5vsendEPKcSt9__va_list>
    va_end(args);
    return res;
}
 800a638:	b002      	add	sp, #8
 800a63a:	f85d eb04 	ldr.w	lr, [sp], #4
 800a63e:	b003      	add	sp, #12
 800a640:	4770      	bx	lr

0800a642 <_ZN8ATParser4recvEPKcz>:

bool ATParser::recv(const char *response, ...)
{
 800a642:	b40e      	push	{r1, r2, r3}
 800a644:	b503      	push	{r0, r1, lr}
 800a646:	aa03      	add	r2, sp, #12
 800a648:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list args;
    va_start(args, response);
 800a64c:	9201      	str	r2, [sp, #4]
    bool res = vrecv(response, args);
 800a64e:	f7ff feef 	bl	800a430 <_ZN8ATParser5vrecvEPKcSt9__va_list>
    va_end(args);
    return res;
}
 800a652:	b002      	add	sp, #8
 800a654:	f85d eb04 	ldr.w	lr, [sp], #4
 800a658:	b003      	add	sp, #12
 800a65a:	4770      	bx	lr

0800a65c <_ZN8ATParser3oobEPKcPFvPvES2_>:

// oob registration
void ATParser::oob(const char *prefix, void (*func)(void *), void *arg)
{
 800a65c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a660:	4604      	mov	r4, r0
    for (int k = 0; k < MAX_OOBS; k++) { 
        if (_oobs[k].len == strlen(prefix) &&
 800a662:	4608      	mov	r0, r1
{
 800a664:	460e      	mov	r6, r1
 800a666:	4690      	mov	r8, r2
 800a668:	461f      	mov	r7, r3
        if (_oobs[k].len == strlen(prefix) &&
 800a66a:	f7fa fead 	bl	80053c8 <strlen>
 800a66e:	69e5      	ldr	r5, [r4, #28]
 800a670:	42a8      	cmp	r0, r5
 800a672:	d108      	bne.n	800a686 <_ZN8ATParser3oobEPKcPFvPvES2_+0x2a>
 800a674:	6a23      	ldr	r3, [r4, #32]
 800a676:	429e      	cmp	r6, r3
 800a678:	d105      	bne.n	800a686 <_ZN8ATParser3oobEPKcPFvPvES2_+0x2a>
            _oobs[k].prefix == prefix &&
 800a67a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a67c:	4598      	cmp	r8, r3
 800a67e:	d102      	bne.n	800a686 <_ZN8ATParser3oobEPKcPFvPvES2_+0x2a>
            _oobs[k].cb == func &&
 800a680:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a682:	429f      	cmp	r7, r3
 800a684:	d01a      	beq.n	800a6bc <_ZN8ATParser3oobEPKcPFvPvES2_+0x60>
            _oobs[k].arg == arg) { return; }  //  Skip duplicate callback.
        if (_oobs[k].len != 0) { continue; }  //  Find an empty callback. 
 800a686:	b19d      	cbz	r5, 800a6b0 <_ZN8ATParser3oobEPKcPFvPvES2_+0x54>
        if (_oobs[k].len == strlen(prefix) &&
 800a688:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a68a:	4283      	cmp	r3, r0
 800a68c:	d108      	bne.n	800a6a0 <_ZN8ATParser3oobEPKcPFvPvES2_+0x44>
 800a68e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800a690:	42b2      	cmp	r2, r6
 800a692:	d105      	bne.n	800a6a0 <_ZN8ATParser3oobEPKcPFvPvES2_+0x44>
            _oobs[k].prefix == prefix &&
 800a694:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800a696:	4542      	cmp	r2, r8
 800a698:	d102      	bne.n	800a6a0 <_ZN8ATParser3oobEPKcPFvPvES2_+0x44>
            _oobs[k].cb == func &&
 800a69a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800a69c:	42ba      	cmp	r2, r7
 800a69e:	d00d      	beq.n	800a6bc <_ZN8ATParser3oobEPKcPFvPvES2_+0x60>
        if (_oobs[k].len != 0) { continue; }  //  Find an empty callback. 
 800a6a0:	b12b      	cbz	r3, 800a6ae <_ZN8ATParser3oobEPKcPFvPvES2_+0x52>
        _oobs[k].prefix = prefix;
        _oobs[k].cb = func;
        _oobs[k].arg = arg;
        return;
    }
    assert(0);  //  Too many callbacks.
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	461a      	mov	r2, r3
 800a6a6:	4619      	mov	r1, r3
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	f7f9 fa03 	bl	8003ab4 <__assert_func>
    for (int k = 0; k < MAX_OOBS; k++) { 
 800a6ae:	2501      	movs	r5, #1
        _oobs[k].len = strlen(prefix);
 800a6b0:	eb04 1405 	add.w	r4, r4, r5, lsl #4
        _oobs[k].prefix = prefix;
 800a6b4:	e9c4 0607 	strd	r0, r6, [r4, #28]
        _oobs[k].arg = arg;
 800a6b8:	e9c4 8709 	strd	r8, r7, [r4, #36]	; 0x24
}
 800a6bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a6c0 <_ZL12uart_tx_donePv>:
    //  We wait 5 seconds for the current command to complete, 
    //  then trigger the next_cmd callout to switch to next ESP8266 command.
    int rc = os_callout_reset(&next_cmd_callout, OS_TICKS_PER_SEC * 5);
    assert(rc == 0);
#endif  //  TEST_UART
}
 800a6c0:	4770      	bx	lr

0800a6c2 <_ZL12uart_rx_charPvh.part.4>:
    //  Trigger callback if no more data to send.
    if (_cbs[TxIrq]) { _cbs[TxIrq](_cbs_arg[TxIrq]); }
    return -1;
}

void BufferedSerial::prime(void)
 800a6c2:	b508      	push	{r3, lr}
{
    if (!_initialised) {
        //  Configure the UART port on first use.
        _initialised = 1;
        int rc = setup_uart(this);
        assert(rc == 0);
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	461a      	mov	r2, r3
 800a6c8:	4619      	mov	r1, r3
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	f7f9 f9f2 	bl	8003ab4 <__assert_func>

0800a6d0 <_ZN14BufferedSerial4initEPcmS0_mPKc>:
{
 800a6d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _initialised = 0;
 800a6d2:	2500      	movs	r5, #0
{
 800a6d4:	4604      	mov	r4, r0
 800a6d6:	461f      	mov	r7, r3
 800a6d8:	9e06      	ldr	r6, [sp, #24]
    _initialised = 0;
 800a6da:	f880 5028 	strb.w	r5, [r0, #40]	; 0x28
    _rxbuf_size = rxbuf_size;
 800a6de:	e9c0 2608 	strd	r2, r6, [r0, #32]
    _baud = 0;
 800a6e2:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
    _txbuf.init(txbuf, txbuf_size);
 800a6e6:	f000 f8ea 	bl	800a8be <_ZN8MyBufferIcE4initEPcm>
    _rxbuf.init(rxbuf, rxbuf_size);
 800a6ea:	4639      	mov	r1, r7
 800a6ec:	f104 0010 	add.w	r0, r4, #16
 800a6f0:	4632      	mov	r2, r6
 800a6f2:	f000 f8e4 	bl	800a8be <_ZN8MyBufferIcE4initEPcm>
    os_error_t rc = os_sem_init(&_rx_sem, 0);  //  Init to 0 tokens, so caller will block until data is available.
 800a6f6:	4629      	mov	r1, r5
 800a6f8:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 800a6fc:	f7fe fedd 	bl	80094ba <os_sem_init>
    assert(rc == OS_OK);
 800a700:	b128      	cbz	r0, 800a70e <_ZN14BufferedSerial4initEPcmS0_mPKc+0x3e>
 800a702:	462b      	mov	r3, r5
 800a704:	462a      	mov	r2, r5
 800a706:	4629      	mov	r1, r5
 800a708:	4628      	mov	r0, r5
 800a70a:	f7f9 f9d3 	bl	8003ab4 <__assert_func>
}
 800a70e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a710 <_ZN14BufferedSerial9configureEi>:
    _uart = uart;
 800a710:	6441      	str	r1, [r0, #68]	; 0x44
}
 800a712:	4770      	bx	lr

0800a714 <_ZN14BufferedSerial8readableEv>:
}

template <class T>
inline uint32_t MyBuffer<T>::available(void)
{
    return (_wloc == _rloc) ? 0 : 1;
 800a714:	6942      	ldr	r2, [r0, #20]
 800a716:	6980      	ldr	r0, [r0, #24]
}
 800a718:	1a10      	subs	r0, r2, r0
 800a71a:	bf18      	it	ne
 800a71c:	2001      	movne	r0, #1
 800a71e:	4770      	bx	lr

0800a720 <_ZN14BufferedSerial5fgetcEi>:
{
 800a720:	b510      	push	{r4, lr}
 800a722:	4604      	mov	r4, r0
    os_sem_pend(&_rx_sem, timeout * OS_TICKS_PER_SEC / 1000);
 800a724:	302c      	adds	r0, #44	; 0x2c
 800a726:	f7fe ff03 	bl	8009530 <os_sem_pend>
 800a72a:	6962      	ldr	r2, [r4, #20]
 800a72c:	69a3      	ldr	r3, [r4, #24]
    if (_rxbuf.available()) { return _rxbuf.get(); }
 800a72e:	429a      	cmp	r2, r3
 800a730:	d00d      	beq.n	800a74e <_ZN14BufferedSerial5fgetcEi+0x2e>
    T data_pos = _buf[_rloc++];
 800a732:	69a3      	ldr	r3, [r4, #24]
 800a734:	6922      	ldr	r2, [r4, #16]
 800a736:	1c59      	adds	r1, r3, #1
 800a738:	61a1      	str	r1, [r4, #24]
 800a73a:	5cd0      	ldrb	r0, [r2, r3]
    _rloc %= (_size-1);
 800a73c:	69e3      	ldr	r3, [r4, #28]
 800a73e:	69a1      	ldr	r1, [r4, #24]
 800a740:	3b01      	subs	r3, #1
 800a742:	fbb1 f2f3 	udiv	r2, r1, r3
 800a746:	fb03 1312 	mls	r3, r3, r2, r1
 800a74a:	61a3      	str	r3, [r4, #24]
}
 800a74c:	bd10      	pop	{r4, pc}
    return -1;
 800a74e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a752:	e7fb      	b.n	800a74c <_ZN14BufferedSerial5fgetcEi+0x2c>

0800a754 <_ZN14BufferedSerial5txIrqEv>:
    return (_wloc == _rloc) ? 0 : 1;
 800a754:	6842      	ldr	r2, [r0, #4]
 800a756:	6883      	ldr	r3, [r0, #8]
{
 800a758:	b510      	push	{r4, lr}
    if(_txbuf.available()) {
 800a75a:	429a      	cmp	r2, r3
 800a75c:	d00e      	beq.n	800a77c <_ZN14BufferedSerial5txIrqEv+0x28>
    T data_pos = _buf[_rloc++];
 800a75e:	6883      	ldr	r3, [r0, #8]
 800a760:	6802      	ldr	r2, [r0, #0]
 800a762:	1c59      	adds	r1, r3, #1
 800a764:	6081      	str	r1, [r0, #8]
 800a766:	5cd3      	ldrb	r3, [r2, r3]
    _rloc %= (_size-1);
 800a768:	68c2      	ldr	r2, [r0, #12]
 800a76a:	6884      	ldr	r4, [r0, #8]
 800a76c:	3a01      	subs	r2, #1
 800a76e:	fbb4 f1f2 	udiv	r1, r4, r2
 800a772:	fb02 4211 	mls	r2, r2, r1, r4
 800a776:	6082      	str	r2, [r0, #8]
        return byte;
 800a778:	4618      	mov	r0, r3
}
 800a77a:	bd10      	pop	{r4, pc}
    if (_cbs[TxIrq]) { _cbs[TxIrq](_cbs_arg[TxIrq]); }
 800a77c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a77e:	b10b      	cbz	r3, 800a784 <_ZN14BufferedSerial5txIrqEv+0x30>
 800a780:	6c00      	ldr	r0, [r0, #64]	; 0x40
 800a782:	4798      	blx	r3
 800a784:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a788:	e7f7      	b.n	800a77a <_ZN14BufferedSerial5txIrqEv+0x26>

0800a78a <_ZL12uart_tx_charPv>:
static int uart_tx_char(void *arg) {    
 800a78a:	b508      	push	{r3, lr}
    assert(arg != NULL);
 800a78c:	b908      	cbnz	r0, 800a792 <_ZL12uart_tx_charPv+0x8>
 800a78e:	f7ff ff98 	bl	800a6c2 <_ZL12uart_rx_charPvh.part.4>
}
 800a792:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    int byte = serial->txIrq();
 800a796:	f7ff bfdd 	b.w	800a754 <_ZN14BufferedSerial5txIrqEv>
	...

0800a79c <_ZN14BufferedSerial5primeEv>:
{
 800a79c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if (!_initialised) {
 800a79e:	f890 1028 	ldrb.w	r1, [r0, #40]	; 0x28
{
 800a7a2:	4604      	mov	r4, r0
    if (!_initialised) {
 800a7a4:	b141      	cbz	r1, 800a7b8 <_ZN14BufferedSerial5primeEv+0x1c>
    }
    hal_uart_start_rx(_uart);  //  Start receiving UART data.
 800a7a6:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800a7a8:	f7fd f994 	bl	8007ad4 <hal_uart_start_rx>
    hal_uart_start_tx(_uart);  //  Start transmitting UART data.
 800a7ac:	6c60      	ldr	r0, [r4, #68]	; 0x44
}
 800a7ae:	b003      	add	sp, #12
 800a7b0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    hal_uart_start_tx(_uart);  //  Start transmitting UART data.
 800a7b4:	f7fd b9ac 	b.w	8007b10 <hal_uart_start_tx>
        _initialised = 1;
 800a7b8:	2701      	movs	r7, #1
    memset(rx_buf, 0, sizeof(rx_buf));
 800a7ba:	4b13      	ldr	r3, [pc, #76]	; (800a808 <_ZN14BufferedSerial5primeEv+0x6c>)
 800a7bc:	6c46      	ldr	r6, [r0, #68]	; 0x44
        _initialised = 1;
 800a7be:	f880 7028 	strb.w	r7, [r0, #40]	; 0x28
    uint32_t baud = serial->_baud;
 800a7c2:	6c85      	ldr	r5, [r0, #72]	; 0x48
    memset(rx_buf, 0, sizeof(rx_buf));
 800a7c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	f7fa fddc 	bl	8005386 <memset>
    rx_ptr = rx_buf;
 800a7ce:	4a0f      	ldr	r2, [pc, #60]	; (800a80c <_ZN14BufferedSerial5primeEv+0x70>)
    rc = hal_uart_init_cbs(uart,
 800a7d0:	4b0f      	ldr	r3, [pc, #60]	; (800a810 <_ZN14BufferedSerial5primeEv+0x74>)
    rx_ptr = rx_buf;
 800a7d2:	6010      	str	r0, [r2, #0]
    rc = hal_uart_init_cbs(uart,
 800a7d4:	490f      	ldr	r1, [pc, #60]	; (800a814 <_ZN14BufferedSerial5primeEv+0x78>)
 800a7d6:	9400      	str	r4, [sp, #0]
 800a7d8:	4a0f      	ldr	r2, [pc, #60]	; (800a818 <_ZN14BufferedSerial5primeEv+0x7c>)
 800a7da:	4630      	mov	r0, r6
 800a7dc:	f7fd f964 	bl	8007aa8 <hal_uart_init_cbs>
    if (rc != 0) { return rc; }
 800a7e0:	b978      	cbnz	r0, 800a802 <_ZN14BufferedSerial5primeEv+0x66>
    assert(baud != 0);
 800a7e2:	b925      	cbnz	r5, 800a7ee <_ZN14BufferedSerial5primeEv+0x52>
 800a7e4:	462b      	mov	r3, r5
 800a7e6:	462a      	mov	r2, r5
 800a7e8:	4629      	mov	r1, r5
 800a7ea:	f7f9 f963 	bl	8003ab4 <__assert_func>
    rc = hal_uart_config(uart,
 800a7ee:	e9cd 0000 	strd	r0, r0, [sp]
 800a7f2:	463b      	mov	r3, r7
 800a7f4:	2208      	movs	r2, #8
 800a7f6:	4629      	mov	r1, r5
 800a7f8:	4630      	mov	r0, r6
 800a7fa:	f7fd f9b7 	bl	8007b6c <hal_uart_config>
    if (rc != 0) { return rc; }
 800a7fe:	2800      	cmp	r0, #0
 800a800:	d0d1      	beq.n	800a7a6 <_ZN14BufferedSerial5primeEv+0xa>
 800a802:	f7ff ff5e 	bl	800a6c2 <_ZL12uart_rx_charPvh.part.4>
 800a806:	bf00      	nop
 800a808:	200031f0 	.word	0x200031f0
 800a80c:	200032f0 	.word	0x200032f0
 800a810:	0800a885 	.word	0x0800a885
 800a814:	0800a78b 	.word	0x0800a78b
 800a818:	0800a6c1 	.word	0x0800a6c1

0800a81c <_ZN14BufferedSerial6attachEPFvPvES0_i>:

void BufferedSerial::attach(void (*func)(void *), void *arg, IrqType type)
{
 800a81c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    _cbs[type] = func;
 800a820:	6359      	str	r1, [r3, #52]	; 0x34
    _cbs_arg[type] = arg;
 800a822:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800a824:	4770      	bx	lr

0800a826 <_ZN14BufferedSerial4baudEm>:

void BufferedSerial::baud(uint32_t baud0)
{
    _baud = baud0;
 800a826:	6481      	str	r1, [r0, #72]	; 0x48
}
 800a828:	4770      	bx	lr

0800a82a <_ZN8MyBufferIcE3putEc>:
    _buf[_wloc++] = data;
 800a82a:	6843      	ldr	r3, [r0, #4]
 800a82c:	6802      	ldr	r2, [r0, #0]
inline void MyBuffer<T>::put(T data)
 800a82e:	b510      	push	{r4, lr}
    _buf[_wloc++] = data;
 800a830:	1c5c      	adds	r4, r3, #1
 800a832:	6044      	str	r4, [r0, #4]
 800a834:	54d1      	strb	r1, [r2, r3]
    _wloc %= (_size-1);
 800a836:	68c3      	ldr	r3, [r0, #12]
 800a838:	6841      	ldr	r1, [r0, #4]
 800a83a:	3b01      	subs	r3, #1
 800a83c:	fbb1 f2f3 	udiv	r2, r1, r3
 800a840:	fb03 1312 	mls	r3, r3, r2, r1
 800a844:	6043      	str	r3, [r0, #4]
}
 800a846:	bd10      	pop	{r4, pc}

0800a848 <_ZN14BufferedSerial4putcEi>:
{
 800a848:	b538      	push	{r3, r4, r5, lr}
 800a84a:	4605      	mov	r5, r0
 800a84c:	460c      	mov	r4, r1
    _txbuf.put(c);
 800a84e:	b2c9      	uxtb	r1, r1
 800a850:	f7ff ffeb 	bl	800a82a <_ZN8MyBufferIcE3putEc>
    BufferedSerial::prime();
 800a854:	4628      	mov	r0, r5
 800a856:	f7ff ffa1 	bl	800a79c <_ZN14BufferedSerial5primeEv>
}
 800a85a:	4620      	mov	r0, r4
 800a85c:	bd38      	pop	{r3, r4, r5, pc}

0800a85e <_ZN14BufferedSerial5rxIrqEh>:
{
 800a85e:	b510      	push	{r4, lr}
 800a860:	4604      	mov	r4, r0
    _rxbuf.put(byte);  //  Add to TX buffer.
 800a862:	3010      	adds	r0, #16
 800a864:	f7ff ffe1 	bl	800a82a <_ZN8MyBufferIcE3putEc>
    os_error_t rc = os_sem_release(&_rx_sem);  //  Signal to semaphore that data is available.
 800a868:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 800a86c:	f7fe fe2e 	bl	80094cc <os_sem_release>
    assert(rc == OS_OK);
 800a870:	b108      	cbz	r0, 800a876 <_ZN14BufferedSerial5rxIrqEh+0x18>
 800a872:	f7ff ff26 	bl	800a6c2 <_ZL12uart_rx_charPvh.part.4>
    if (_cbs[RxIrq]) { _cbs[RxIrq](_cbs_arg[RxIrq]); }
 800a876:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a878:	b10b      	cbz	r3, 800a87e <_ZN14BufferedSerial5rxIrqEh+0x20>
 800a87a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800a87c:	4798      	blx	r3
}
 800a87e:	2000      	movs	r0, #0
 800a880:	bd10      	pop	{r4, pc}
	...

0800a884 <_ZL12uart_rx_charPvh>:
static int uart_rx_char(void *arg, uint8_t byte) {
 800a884:	b510      	push	{r4, lr}
    if (rx_ptr - rx_buf < (int) sizeof(rx_buf)) { *rx_ptr++ = byte; }  //  Save to rx buffer.
 800a886:	4c08      	ldr	r4, [pc, #32]	; (800a8a8 <_ZL12uart_rx_charPvh+0x24>)
 800a888:	4a08      	ldr	r2, [pc, #32]	; (800a8ac <_ZL12uart_rx_charPvh+0x28>)
 800a88a:	6823      	ldr	r3, [r4, #0]
 800a88c:	1a9a      	subs	r2, r3, r2
 800a88e:	2aff      	cmp	r2, #255	; 0xff
 800a890:	bfde      	ittt	le
 800a892:	1c5a      	addle	r2, r3, #1
 800a894:	6022      	strle	r2, [r4, #0]
 800a896:	7019      	strble	r1, [r3, #0]
    assert(arg != NULL);
 800a898:	b908      	cbnz	r0, 800a89e <_ZL12uart_rx_charPvh+0x1a>
 800a89a:	f7ff ff12 	bl	800a6c2 <_ZL12uart_rx_charPvh.part.4>
}
 800a89e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    int rc = serial->rxIrq(byte);
 800a8a2:	f7ff bfdc 	b.w	800a85e <_ZN14BufferedSerial5rxIrqEh>
 800a8a6:	bf00      	nop
 800a8a8:	200032f0 	.word	0x200032f0
 800a8ac:	200031f0 	.word	0x200031f0

0800a8b0 <_ZN8MyBufferIcE5clearEv>:
}

template <class T>
void MyBuffer<T>::clear(void)
{
    _wloc = 0;
 800a8b0:	2100      	movs	r1, #0
    _rloc = 0;
    memset(_buf, 0, _size);
 800a8b2:	68c2      	ldr	r2, [r0, #12]
    _wloc = 0;
 800a8b4:	6041      	str	r1, [r0, #4]
    _rloc = 0;
 800a8b6:	6081      	str	r1, [r0, #8]
    memset(_buf, 0, _size);
 800a8b8:	6800      	ldr	r0, [r0, #0]
 800a8ba:	f7fa bd64 	b.w	8005386 <memset>

0800a8be <_ZN8MyBufferIcE4initEPcm>:
void MyBuffer<T>::init(T *buffer, uint32_t size)
 800a8be:	b508      	push	{r3, lr}
    _buf = buffer;
 800a8c0:	6001      	str	r1, [r0, #0]
    _size = size;
 800a8c2:	60c2      	str	r2, [r0, #12]
    clear();    
 800a8c4:	f7ff fff4 	bl	800a8b0 <_ZN8MyBufferIcE5clearEv>
}
 800a8c8:	bd08      	pop	{r3, pc}
	...

0800a8cc <nrf24l01_create>:
#else
#define DEVICE_ITF_PTR NULL
#endif  //  DEVICE_ITF

//  Create the device instance and configure it.  Called by sysinit() during startup, defined in pkg.yml.
void DEVICE_CREATE(void) {
 800a8cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    console_printf("NRF create " DEVICE_NAME "\n");
 800a8ce:	4816      	ldr	r0, [pc, #88]	; (800a928 <nrf24l01_create+0x5c>)
 800a8d0:	f7f7 fcac 	bl	800222c <console_printf>
    int rc;

    ////  Get the default config for the device.
    rc = DEVICE_CFG_DEFAULT(&DEVICE_INSTANCE.cfg);
 800a8d4:	4815      	ldr	r0, [pc, #84]	; (800a92c <nrf24l01_create+0x60>)
 800a8d6:	f000 f955 	bl	800ab84 <nrf24l01_default_cfg>
    assert(rc == 0);
 800a8da:	4603      	mov	r3, r0
 800a8dc:	b128      	cbz	r0, 800a8ea <nrf24l01_create+0x1e>
 800a8de:	2300      	movs	r3, #0
 800a8e0:	461a      	mov	r2, r3
 800a8e2:	4619      	mov	r1, r3
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	f7f9 f8e5 	bl	8003ab4 <__assert_func>
    ////

    //  Create the device.
    rc = os_dev_create((struct os_dev *) &DEVICE_INSTANCE, DEVICE_NAME,
 800a8ea:	4a11      	ldr	r2, [pc, #68]	; (800a930 <nrf24l01_create+0x64>)
 800a8ec:	9001      	str	r0, [sp, #4]
 800a8ee:	9200      	str	r2, [sp, #0]
 800a8f0:	4910      	ldr	r1, [pc, #64]	; (800a934 <nrf24l01_create+0x68>)
 800a8f2:	2201      	movs	r2, #1
 800a8f4:	4810      	ldr	r0, [pc, #64]	; (800a938 <nrf24l01_create+0x6c>)
 800a8f6:	f7f9 fafd 	bl	8003ef4 <os_dev_create>
        OS_DEV_INIT_PRIMARY, 0,  //  For BSP: OS_DEV_INIT_KERNEL, OS_DEV_INIT_PRIO_DEFAULT,
        DEVICE_INIT, DEVICE_ITF_PTR);
    assert(rc == 0);
 800a8fa:	4602      	mov	r2, r0
 800a8fc:	2800      	cmp	r0, #0
 800a8fe:	d1ee      	bne.n	800a8de <nrf24l01_create+0x12>
    struct os_dev *dev0; ////
    struct DEVICE_DEV *dev; ////
    struct DEVICE_CFG *cfg; ////

    //  Fetch the device.
    dev0 = (struct os_dev *) os_dev_open(DEVICE_NAME, OS_TIMEOUT_NEVER, NULL);
 800a900:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a904:	480b      	ldr	r0, [pc, #44]	; (800a934 <nrf24l01_create+0x68>)
 800a906:	f7f9 fb5f 	bl	8003fc8 <os_dev_open>
    assert(dev0 != NULL);
 800a90a:	4604      	mov	r4, r0
 800a90c:	2800      	cmp	r0, #0
 800a90e:	d0e6      	beq.n	800a8de <nrf24l01_create+0x12>
    //  Get the default config for the device.
    ////rc = DEVICE_CFG_DEFAULT(&cfg);
    ////assert(rc == 0);

    //  Apply the device config.
    rc = DEVICE_CFG_FUNC(dev, cfg); ////
 800a910:	f100 0128 	add.w	r1, r0, #40	; 0x28
 800a914:	f000 f980 	bl	800ac18 <nrf24l01_config>
 800a918:	4605      	mov	r5, r0
    os_dev_close(dev0);
 800a91a:	4620      	mov	r0, r4
 800a91c:	f7f9 fb75 	bl	800400a <os_dev_close>
    assert(rc == 0);
 800a920:	2d00      	cmp	r5, #0
 800a922:	d1dc      	bne.n	800a8de <nrf24l01_create+0x12>
}
 800a924:	b003      	add	sp, #12
 800a926:	bd30      	pop	{r4, r5, pc}
 800a928:	0800e37d 	.word	0x0800e37d
 800a92c:	20003320 	.word	0x20003320
 800a930:	0800aab9 	.word	0x0800aab9
 800a934:	0800e394 	.word	0x0800e394
 800a938:	200032f8 	.word	0x200032f8

0800a93c <_ZL16default_callbackP8os_event>:
	os_eventq_put(os_eventq_dflt_get(), &nrf24l01_event);  //  This triggers the callback function.
}

static void default_callback(struct os_event *ev) {
    //  Default receive callback that does nothing.
    console_printf("%sno callback\n", _nrf);
 800a93c:	4b02      	ldr	r3, [pc, #8]	; (800a948 <_ZL16default_callbackP8os_event+0xc>)
 800a93e:	4803      	ldr	r0, [pc, #12]	; (800a94c <_ZL16default_callbackP8os_event+0x10>)
 800a940:	6819      	ldr	r1, [r3, #0]
 800a942:	f7f7 bc73 	b.w	800222c <console_printf>
 800a946:	bf00      	nop
 800a948:	2000021c 	.word	0x2000021c
 800a94c:	0800e424 	.word	0x0800e424

0800a950 <_ZL20nrf24l01_irq_handlerPv>:
static void nrf24l01_irq_handler(void *arg) {
 800a950:	b510      	push	{r4, lr}
	nrf24l01_event.ev_arg = arg;
 800a952:	4c04      	ldr	r4, [pc, #16]	; (800a964 <_ZL20nrf24l01_irq_handlerPv+0x14>)
 800a954:	60a0      	str	r0, [r4, #8]
	os_eventq_put(os_eventq_dflt_get(), &nrf24l01_event);  //  This triggers the callback function.
 800a956:	f7f9 fc13 	bl	8004180 <os_eventq_dflt_get>
 800a95a:	4621      	mov	r1, r4
}
 800a95c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	os_eventq_put(os_eventq_dflt_get(), &nrf24l01_event);  //  This triggers the callback function.
 800a960:	f7f9 bb7c 	b.w	800405c <os_eventq_put>
 800a964:	2000338c 	.word	0x2000338c

0800a968 <_ZL14nrf24l01_closeP6os_dev.part.1>:
static int nrf24l01_close(struct os_dev *dev0) {
 800a968:	b508      	push	{r3, lr}
    assert(dev0);
 800a96a:	2300      	movs	r3, #0
 800a96c:	461a      	mov	r2, r3
 800a96e:	4619      	mov	r1, r3
 800a970:	4618      	mov	r0, r3
 800a972:	f7f9 f89f 	bl	8003ab4 <__assert_func>
	...

0800a978 <_ZL14nrf24l01_closeP6os_dev>:
static int nrf24l01_close(struct os_dev *dev0) {
 800a978:	b510      	push	{r4, lr}
 800a97a:	4604      	mov	r4, r0
    console_printf("}\n");
 800a97c:	4803      	ldr	r0, [pc, #12]	; (800a98c <_ZL14nrf24l01_closeP6os_dev+0x14>)
 800a97e:	f7f7 fc55 	bl	800222c <console_printf>
    assert(dev0);
 800a982:	b90c      	cbnz	r4, 800a988 <_ZL14nrf24l01_closeP6os_dev+0x10>
 800a984:	f7ff fff0 	bl	800a968 <_ZL14nrf24l01_closeP6os_dev.part.1>
}
 800a988:	2000      	movs	r0, #0
 800a98a:	bd10      	pop	{r4, pc}
 800a98c:	0800e421 	.word	0x0800e421

0800a990 <_ZL18register_transportPKcPvS0_th>:
static int register_transport(const char *network_device, void *server_endpoint, const char *host, uint16_t port, uint8_t server_endpoint_size) {
 800a990:	b510      	push	{r4, lr}
 800a992:	f89d 4008 	ldrb.w	r4, [sp, #8]
    assert(server_endpoint_size >= sizeof(struct nrf24l01_server));  //  Server Endpoint too small
 800a996:	2c0f      	cmp	r4, #15
 800a998:	d801      	bhi.n	800a99e <_ZL18register_transportPKcPvS0_th+0xe>
 800a99a:	f7ff ffe5 	bl	800a968 <_ZL14nrf24l01_closeP6os_dev.part.1>
}
 800a99e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    int rc = nrf24l01_register_transport(network_device, (struct nrf24l01_server *) server_endpoint, host, port);
 800a9a2:	f001 b839 	b.w	800ba18 <nrf24l01_register_transport>
	...

0800a9a8 <_ZL13nrf24l01_openP6os_devmPv>:
static int nrf24l01_open(struct os_dev *dev0, uint32_t timeout, void *arg) {
 800a9a8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    assert(dev0);
 800a9ac:	4604      	mov	r4, r0
 800a9ae:	b920      	cbnz	r0, 800a9ba <_ZL13nrf24l01_openP6os_devmPv+0x12>
 800a9b0:	4603      	mov	r3, r0
 800a9b2:	4602      	mov	r2, r0
 800a9b4:	4601      	mov	r1, r0
 800a9b6:	f7f9 f87d 	bl	8003ab4 <__assert_func>
    console_printf("{\n");  ////
 800a9ba:	4837      	ldr	r0, [pc, #220]	; (800aa98 <_ZL13nrf24l01_openP6os_devmPv+0xf0>)
 800a9bc:	f7f7 fc36 	bl	800222c <console_printf>
    if (!dev->is_configured) { return 0; }
 800a9c0:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d057      	beq.n	800aa78 <_ZL13nrf24l01_openP6os_devmPv+0xd0>
    if (!first_open) { return 0; }
 800a9c8:	4b34      	ldr	r3, [pc, #208]	; (800aa9c <_ZL13nrf24l01_openP6os_devmPv+0xf4>)
 800a9ca:	781a      	ldrb	r2, [r3, #0]
 800a9cc:	2a00      	cmp	r2, #0
 800a9ce:	d053      	beq.n	800aa78 <_ZL13nrf24l01_openP6os_devmPv+0xd0>
    first_open = false;
 800a9d0:	2500      	movs	r5, #0
    console_printf( "%sfreq: %d MHz\r\n",         _nrf, drv(dev)->getRfFrequency() );
 800a9d2:	4e33      	ldr	r6, [pc, #204]	; (800aaa0 <_ZL13nrf24l01_openP6os_devmPv+0xf8>)
 800a9d4:	6f60      	ldr	r0, [r4, #116]	; 0x74
    first_open = false;
 800a9d6:	701d      	strb	r5, [r3, #0]
    console_printf( "%sfreq: %d MHz\r\n",         _nrf, drv(dev)->getRfFrequency() );
 800a9d8:	6837      	ldr	r7, [r6, #0]
 800a9da:	f000 fb13 	bl	800b004 <_ZN9nRF24L01P14getRfFrequencyEv>
 800a9de:	4639      	mov	r1, r7
 800a9e0:	4602      	mov	r2, r0
 800a9e2:	4830      	ldr	r0, [pc, #192]	; (800aaa4 <_ZL13nrf24l01_openP6os_devmPv+0xfc>)
 800a9e4:	f7f7 fc22 	bl	800222c <console_printf>
    console_printf( "%spwr: %d dBm\r\n",          _nrf, drv(dev)->getRfOutputPower() );
 800a9e8:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800a9ea:	6837      	ldr	r7, [r6, #0]
 800a9ec:	f000 fb48 	bl	800b080 <_ZN9nRF24L01P16getRfOutputPowerEv>
 800a9f0:	4639      	mov	r1, r7
 800a9f2:	4602      	mov	r2, r0
 800a9f4:	482c      	ldr	r0, [pc, #176]	; (800aaa8 <_ZL13nrf24l01_openP6os_devmPv+0x100>)
 800a9f6:	f7f7 fc19 	bl	800222c <console_printf>
    console_printf( "%sdata rate: %d kbps\r\n",   _nrf, drv(dev)->getAirDataRate() );
 800a9fa:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800a9fc:	6837      	ldr	r7, [r6, #0]
 800a9fe:	f000 fb97 	bl	800b130 <_ZN9nRF24L01P14getAirDataRateEv>
 800aa02:	4639      	mov	r1, r7
 800aa04:	4602      	mov	r2, r0
 800aa06:	4829      	ldr	r0, [pc, #164]	; (800aaac <_ZL13nrf24l01_openP6os_devmPv+0x104>)
 800aa08:	f7f7 fc10 	bl	800222c <console_printf>
        console_printf( "%sP%d tx size: %d bytes\r\n", _nrf, i, 
 800aa0c:	4f28      	ldr	r7, [pc, #160]	; (800aab0 <_ZL13nrf24l01_openP6os_devmPv+0x108>)
 800aa0e:	4629      	mov	r1, r5
 800aa10:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800aa12:	f8d6 8000 	ldr.w	r8, [r6]
 800aa16:	f000 fbdb 	bl	800b1d0 <_ZN9nRF24L01P15getTransferSizeEi>
 800aa1a:	462a      	mov	r2, r5
 800aa1c:	4603      	mov	r3, r0
 800aa1e:	4641      	mov	r1, r8
 800aa20:	4638      	mov	r0, r7
    for (int i = 0; i <= NRL24L01_MAX_RX_PIPES; i++) {
 800aa22:	3501      	adds	r5, #1
        console_printf( "%sP%d tx size: %d bytes\r\n", _nrf, i, 
 800aa24:	f7f7 fc02 	bl	800222c <console_printf>
    for (int i = 0; i <= NRL24L01_MAX_RX_PIPES; i++) {
 800aa28:	2d06      	cmp	r5, #6
 800aa2a:	d1f0      	bne.n	800aa0e <_ZL13nrf24l01_openP6os_devmPv+0x66>
    for (int i = 0; i <= NRL24L01_MAX_RX_PIPES; i++) {
 800aa2c:	2500      	movs	r5, #0
        console_printf( "%sP%d addr: 0x%010llX\r\n", _nrf, i, 
 800aa2e:	4f21      	ldr	r7, [pc, #132]	; (800aab4 <_ZL13nrf24l01_openP6os_devmPv+0x10c>)
 800aa30:	f8d6 8000 	ldr.w	r8, [r6]
 800aa34:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800aa36:	bb1d      	cbnz	r5, 800aa80 <_ZL13nrf24l01_openP6os_devmPv+0xd8>
 800aa38:	f000 fd32 	bl	800b4a0 <_ZN9nRF24L01P12getTxAddressEv>
 800aa3c:	e9cd 0100 	strd	r0, r1, [sp]
 800aa40:	462a      	mov	r2, r5
 800aa42:	4641      	mov	r1, r8
 800aa44:	4638      	mov	r0, r7
    for (int i = 0; i <= NRL24L01_MAX_RX_PIPES; i++) {
 800aa46:	3501      	adds	r5, #1
        console_printf( "%sP%d addr: 0x%010llX\r\n", _nrf, i, 
 800aa48:	f7f7 fbf0 	bl	800222c <console_printf>
    for (int i = 0; i <= NRL24L01_MAX_RX_PIPES; i++) {
 800aa4c:	2d06      	cmp	r5, #6
 800aa4e:	d1ef      	bne.n	800aa30 <_ZL13nrf24l01_openP6os_devmPv+0x88>
    drv(dev)->powerUp();
 800aa50:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800aa52:	f000 fa4f 	bl	800aef4 <_ZN9nRF24L01P7powerUpEv>
    if (is_collector_node()) {
 800aa56:	f7f7 fd27 	bl	80024a8 <is_collector_node>
 800aa5a:	b1a8      	cbz	r0, 800aa88 <_ZL13nrf24l01_openP6os_devmPv+0xe0>
        drv(dev)->setReceiveMode(); 
 800aa5c:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800aa5e:	f000 fa65 	bl	800af2c <_ZN9nRF24L01P14setReceiveModeEv>
    if (dev->cfg.irq_pin == MCU_GPIO_PIN_NONE) { drv(dev)->disableRxInterrupt(); }
 800aa62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800aa66:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800aa68:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800aa6a:	429a      	cmp	r2, r3
 800aa6c:	d110      	bne.n	800aa90 <_ZL13nrf24l01_openP6os_devmPv+0xe8>
 800aa6e:	f000 fab1 	bl	800afd4 <_ZN9nRF24L01P18disableRxInterruptEv>
    drv(dev)->enable();
 800aa72:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800aa74:	f000 f981 	bl	800ad7a <_ZN9nRF24L01P6enableEv>
}
 800aa78:	2000      	movs	r0, #0
 800aa7a:	b002      	add	sp, #8
 800aa7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        console_printf( "%sP%d addr: 0x%010llX\r\n", _nrf, i, 
 800aa80:	4629      	mov	r1, r5
 800aa82:	f000 fc97 	bl	800b3b4 <_ZN9nRF24L01P12getRxAddressEi>
 800aa86:	e7d9      	b.n	800aa3c <_ZL13nrf24l01_openP6os_devmPv+0x94>
        drv(dev)->setTransmitMode(); 
 800aa88:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800aa8a:	f000 fa6d 	bl	800af68 <_ZN9nRF24L01P15setTransmitModeEv>
 800aa8e:	e7e8      	b.n	800aa62 <_ZL13nrf24l01_openP6os_devmPv+0xba>
    else { drv(dev)->enableRxInterrupt(); }
 800aa90:	f000 fa88 	bl	800afa4 <_ZN9nRF24L01P17enableRxInterruptEv>
 800aa94:	e7ed      	b.n	800aa72 <_ZL13nrf24l01_openP6os_devmPv+0xca>
 800aa96:	bf00      	nop
 800aa98:	0800e3b4 	.word	0x0800e3b4
 800aa9c:	20000218 	.word	0x20000218
 800aaa0:	2000021c 	.word	0x2000021c
 800aaa4:	0800e3b7 	.word	0x0800e3b7
 800aaa8:	0800e3c8 	.word	0x0800e3c8
 800aaac:	0800e3d8 	.word	0x0800e3d8
 800aab0:	0800e3ef 	.word	0x0800e3ef
 800aab4:	0800e409 	.word	0x0800e409

0800aab8 <nrf24l01_init>:
int nrf24l01_init(struct os_dev *dev0, void *arg) {
 800aab8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aaba:	4604      	mov	r4, r0
    console_printf("%sinit\n", _nrf);
 800aabc:	4e27      	ldr	r6, [pc, #156]	; (800ab5c <nrf24l01_init+0xa4>)
 800aabe:	4828      	ldr	r0, [pc, #160]	; (800ab60 <nrf24l01_init+0xa8>)
 800aac0:	6831      	ldr	r1, [r6, #0]
 800aac2:	f7f7 fbb3 	bl	800222c <console_printf>
    if (!dev0) { rc = SYS_ENODEV; goto err; }
 800aac6:	2c00      	cmp	r4, #0
 800aac8:	d044      	beq.n	800ab54 <nrf24l01_init+0x9c>
    dev->is_configured = 0;
 800aaca:	2300      	movs	r3, #0
 800aacc:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
    dev->controller = &controller;
 800aad0:	4b24      	ldr	r3, [pc, #144]	; (800ab64 <nrf24l01_init+0xac>)
    rc = hal_spi_config(cfg->spi_num, &cfg->spi_settings);
 800aad2:	f104 0128 	add.w	r1, r4, #40	; 0x28
    dev->controller = &controller;
 800aad6:	6763      	str	r3, [r4, #116]	; 0x74
    rc = hal_spi_config(cfg->spi_num, &cfg->spi_settings);
 800aad8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800aada:	f7fc fd05 	bl	80074e8 <hal_spi_config>
    assert(rc == 0);
 800aade:	b128      	cbz	r0, 800aaec <nrf24l01_init+0x34>
 800aae0:	2300      	movs	r3, #0
 800aae2:	461a      	mov	r2, r3
 800aae4:	4619      	mov	r1, r3
 800aae6:	4618      	mov	r0, r3
 800aae8:	f7f8 ffe4 	bl	8003ab4 <__assert_func>
    rc = hal_spi_enable(cfg->spi_num);
 800aaec:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800aaee:	f7fc fcaf 	bl	8007450 <hal_spi_enable>
    assert(rc == 0);
 800aaf2:	2800      	cmp	r0, #0
 800aaf4:	d1f4      	bne.n	800aae0 <nrf24l01_init+0x28>
    rc = hal_gpio_init_out(cfg->cs_pin, 1);
 800aaf6:	2101      	movs	r1, #1
 800aaf8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800aafa:	f7fd fba5 	bl	8008248 <hal_gpio_init_out>
    assert(rc == 0);
 800aafe:	2800      	cmp	r0, #0
 800ab00:	d1ee      	bne.n	800aae0 <nrf24l01_init+0x28>
    rc = hal_gpio_init_out(cfg->ce_pin, 1);
 800ab02:	2101      	movs	r1, #1
 800ab04:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800ab06:	f7fd fb9f 	bl	8008248 <hal_gpio_init_out>
    assert(rc == 0);
 800ab0a:	4605      	mov	r5, r0
 800ab0c:	2800      	cmp	r0, #0
 800ab0e:	d1e7      	bne.n	800aae0 <nrf24l01_init+0x28>
    OS_DEV_SETHANDLERS(dev0, nrf24l01_open, nrf24l01_close);
 800ab10:	4b15      	ldr	r3, [pc, #84]	; (800ab68 <nrf24l01_init+0xb0>)
    if (cfg->irq_pin != MCU_GPIO_PIN_NONE) {
 800ab12:	6c22      	ldr	r2, [r4, #64]	; 0x40
    OS_DEV_SETHANDLERS(dev0, nrf24l01_open, nrf24l01_close);
 800ab14:	6023      	str	r3, [r4, #0]
 800ab16:	4b15      	ldr	r3, [pc, #84]	; (800ab6c <nrf24l01_init+0xb4>)
 800ab18:	60e3      	str	r3, [r4, #12]
    if (cfg->irq_pin != MCU_GPIO_PIN_NONE) {
 800ab1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ab1e:	429a      	cmp	r2, r3
 800ab20:	d011      	beq.n	800ab46 <nrf24l01_init+0x8e>
        console_printf("%senable irq\n", _nrf);
 800ab22:	6831      	ldr	r1, [r6, #0]
 800ab24:	4812      	ldr	r0, [pc, #72]	; (800ab70 <nrf24l01_init+0xb8>)
 800ab26:	f7f7 fb81 	bl	800222c <console_printf>
        nrf24l01_event.ev_cb = default_callback;
 800ab2a:	4b12      	ldr	r3, [pc, #72]	; (800ab74 <nrf24l01_init+0xbc>)
 800ab2c:	4a12      	ldr	r2, [pc, #72]	; (800ab78 <nrf24l01_init+0xc0>)
        hal_gpio_irq_init(cfg->irq_pin, nrf24l01_irq_handler, NULL,
 800ab2e:	4913      	ldr	r1, [pc, #76]	; (800ab7c <nrf24l01_init+0xc4>)
        nrf24l01_event.ev_cb = default_callback;
 800ab30:	605a      	str	r2, [r3, #4]
        hal_gpio_irq_init(cfg->irq_pin, nrf24l01_irq_handler, NULL,
 800ab32:	2301      	movs	r3, #1
 800ab34:	462a      	mov	r2, r5
 800ab36:	9300      	str	r3, [sp, #0]
 800ab38:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800ab3a:	2302      	movs	r3, #2
 800ab3c:	f7fd fbde 	bl	80082fc <hal_gpio_irq_init>
	    hal_gpio_irq_enable(cfg->irq_pin);
 800ab40:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800ab42:	f7fd fbb7 	bl	80082b4 <hal_gpio_irq_enable>
    rc = sensor_network_register_interface(&network_iface);
 800ab46:	480e      	ldr	r0, [pc, #56]	; (800ab80 <nrf24l01_init+0xc8>)
 800ab48:	f7f7 fd68 	bl	800261c <sensor_network_register_interface>
    assert(rc == 0);
 800ab4c:	2800      	cmp	r0, #0
 800ab4e:	d1c7      	bne.n	800aae0 <nrf24l01_init+0x28>
}
 800ab50:	b002      	add	sp, #8
 800ab52:	bd70      	pop	{r4, r5, r6, pc}
    return rc;
 800ab54:	f06f 0008 	mvn.w	r0, #8
 800ab58:	e7fa      	b.n	800ab50 <nrf24l01_init+0x98>
 800ab5a:	bf00      	nop
 800ab5c:	2000021c 	.word	0x2000021c
 800ab60:	0800e447 	.word	0x0800e447
 800ab64:	20003370 	.word	0x20003370
 800ab68:	0800a9a9 	.word	0x0800a9a9
 800ab6c:	0800a979 	.word	0x0800a979
 800ab70:	0800e44f 	.word	0x0800e44f
 800ab74:	2000338c 	.word	0x2000338c
 800ab78:	0800a93d 	.word	0x0800a93d
 800ab7c:	0800a951 	.word	0x0800a951
 800ab80:	0800e3a0 	.word	0x0800e3a0

0800ab84 <nrf24l01_default_cfg>:
int nrf24l01_default_cfg(struct nrf24l01_cfg *cfg) {
 800ab84:	b510      	push	{r4, lr}
    assert(cfg);  console_printf("%sdefcfg\n", _nrf);
 800ab86:	4604      	mov	r4, r0
 800ab88:	b920      	cbnz	r0, 800ab94 <nrf24l01_default_cfg+0x10>
 800ab8a:	4603      	mov	r3, r0
 800ab8c:	4602      	mov	r2, r0
 800ab8e:	4601      	mov	r1, r0
 800ab90:	f7f8 ff90 	bl	8003ab4 <__assert_func>
 800ab94:	4b1d      	ldr	r3, [pc, #116]	; (800ac0c <nrf24l01_default_cfg+0x88>)
 800ab96:	481e      	ldr	r0, [pc, #120]	; (800ac10 <nrf24l01_default_cfg+0x8c>)
 800ab98:	6819      	ldr	r1, [r3, #0]
 800ab9a:	f7f7 fb47 	bl	800222c <console_printf>
    memset(cfg, 0, sizeof(struct nrf24l01_cfg));  //  Zero the entire object.
 800ab9e:	2246      	movs	r2, #70	; 0x46
 800aba0:	2100      	movs	r1, #0
 800aba2:	1ca0      	adds	r0, r4, #2
 800aba4:	f7fa fbef 	bl	8005386 <memset>
    cfg->spi_settings.baudrate   = MYNEWT_VAL(NRF24L01_SPI_BAUDRATE);  //  Baudrate in kHz e.g. 200 kHz (slow, for testing)
 800aba8:	22c8      	movs	r2, #200	; 0xc8
    cfg->ce_pin     = MYNEWT_VAL(NRF24L01_CE_PIN);   //  e.g. PB0
 800abaa:	2012      	movs	r0, #18
    cfg->spi_settings.baudrate   = MYNEWT_VAL(NRF24L01_SPI_BAUDRATE);  //  Baudrate in kHz e.g. 200 kHz (slow, for testing)
 800abac:	6062      	str	r2, [r4, #4]
    cfg->ce_pin     = MYNEWT_VAL(NRF24L01_CE_PIN);   //  e.g. PB0
 800abae:	2210      	movs	r2, #16
 800abb0:	e9c4 0204 	strd	r0, r2, [r4, #16]
    cfg->freq           = MYNEWT_VAL(NRF24L01_FREQ);        //  e.g. 2,476 kHz (channel 76)
 800abb4:	f640 12ac 	movw	r2, #2476	; 0x9ac
    cfg->data_rate      = MYNEWT_VAL(NRF24L01_DATA_RATE);   //  e.g. 250 kbps, Slowest, longest range, but only supported by nRF24L01+
 800abb8:	f04f 0efa 	mov.w	lr, #250	; 0xfa
    cfg->freq           = MYNEWT_VAL(NRF24L01_FREQ);        //  e.g. 2,476 kHz (channel 76)
 800abbc:	61e2      	str	r2, [r4, #28]
    cfg->data_rate      = MYNEWT_VAL(NRF24L01_DATA_RATE);   //  e.g. 250 kbps, Slowest, longest range, but only supported by nRF24L01+
 800abbe:	2208      	movs	r2, #8
    cfg->spi_settings.data_mode  = HAL_SPI_MODE0;           //  Data mode of SPI driver: ClockPhase = 0, ClockPolarity = 0
 800abc0:	2300      	movs	r3, #0
    cfg->data_rate      = MYNEWT_VAL(NRF24L01_DATA_RATE);   //  e.g. 250 kbps, Slowest, longest range, but only supported by nRF24L01+
 800abc2:	e9c4 e209 	strd	lr, r2, [r4, #36]	; 0x24
    cfg->crc_width       = MYNEWT_VAL(NRF24L01_CRC_WIDTH);   //  e.g. 8 bits for CRC
 800abc6:	220c      	movs	r2, #12
    cfg->spi_settings.data_mode  = HAL_SPI_MODE0;           //  Data mode of SPI driver: ClockPhase = 0, ClockPolarity = 0
 800abc8:	8023      	strh	r3, [r4, #0]
    cfg->spi_settings.data_order = HAL_SPI_MSB_FIRST;       //  Data order
 800abca:	70a3      	strb	r3, [r4, #2]
    cfg->crc_width       = MYNEWT_VAL(NRF24L01_CRC_WIDTH);   //  e.g. 8 bits for CRC
 800abcc:	62e2      	str	r2, [r4, #44]	; 0x2c
    cfg->tx_size         = MYNEWT_VAL(NRF24L01_TX_SIZE);     //  e.g. 12 bytes. Each packet has this size
 800abce:	8623      	strh	r3, [r4, #48]	; 0x30
    if (is_collector_node()) {                                  //  If this is the Collector Node...
 800abd0:	f7f7 fc6a 	bl	80024a8 <is_collector_node>
 800abd4:	b168      	cbz	r0, 800abf2 <nrf24l01_default_cfg+0x6e>
        cfg->irq_pin            = MYNEWT_VAL(NRF24L01_IRQ_PIN); //  e.g. MCU_GPIO_PORTA(15) means Collector Node gets rx interrupts on PA15
 800abd6:	230f      	movs	r3, #15
 800abd8:	61a3      	str	r3, [r4, #24]
        cfg->tx_address         = get_collector_node_address(); //  Collector Node address
 800abda:	f7f7 fcaf 	bl	800253c <get_collector_node_address>
 800abde:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
        cfg->rx_addresses       = get_sensor_node_addresses();  //  Listen to all Sensor Nodes
 800abe2:	f7f7 fcb5 	bl	8002550 <get_sensor_node_addresses>
        cfg->rx_addresses_len   = SENSOR_NETWORK_SIZE;    //  Number of Sensor Nodes to listen
 800abe6:	2305      	movs	r3, #5
        cfg->rx_addresses       = get_sensor_node_addresses();  //  Listen to all Sensor Nodes
 800abe8:	6420      	str	r0, [r4, #64]	; 0x40
        cfg->rx_addresses_len   = 1;
 800abea:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 800abee:	2000      	movs	r0, #0
 800abf0:	bd10      	pop	{r4, pc}
        sensor_node_address = get_sensor_node_address();
 800abf2:	f7f7 fca7 	bl	8002544 <get_sensor_node_address>
        cfg->irq_pin            = MCU_GPIO_PIN_NONE;      //  Disable rx interrupts for Sensor Nodes
 800abf6:	f64f 72ff 	movw	r2, #65535	; 0xffff
        sensor_node_address = get_sensor_node_address();
 800abfa:	4b06      	ldr	r3, [pc, #24]	; (800ac14 <nrf24l01_default_cfg+0x90>)
        cfg->irq_pin            = MCU_GPIO_PIN_NONE;      //  Disable rx interrupts for Sensor Nodes
 800abfc:	61a2      	str	r2, [r4, #24]
        sensor_node_address = get_sensor_node_address();
 800abfe:	e9c3 0100 	strd	r0, r1, [r3]
        cfg->rx_addresses       = &sensor_node_address;   //  Listen to itself only. For handling acknowledgements in future
 800ac02:	6423      	str	r3, [r4, #64]	; 0x40
        cfg->tx_address         = sensor_node_address;    //  Sensor Node address
 800ac04:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
        cfg->rx_addresses_len   = 1;
 800ac08:	2301      	movs	r3, #1
 800ac0a:	e7ee      	b.n	800abea <nrf24l01_default_cfg+0x66>
 800ac0c:	2000021c 	.word	0x2000021c
 800ac10:	0800e43d 	.word	0x0800e43d
 800ac14:	200033a0 	.word	0x200033a0

0800ac18 <nrf24l01_config>:
int nrf24l01_config(struct nrf24l01 *dev, struct nrf24l01_cfg *cfg) {
 800ac18:	b530      	push	{r4, r5, lr}
 800ac1a:	4605      	mov	r5, r0
    console_printf("%sconfig\n", _nrf);
 800ac1c:	4b1b      	ldr	r3, [pc, #108]	; (800ac8c <nrf24l01_config+0x74>)
int nrf24l01_config(struct nrf24l01 *dev, struct nrf24l01_cfg *cfg) {
 800ac1e:	b08d      	sub	sp, #52	; 0x34
 800ac20:	460c      	mov	r4, r1
    console_printf("%sconfig\n", _nrf);
 800ac22:	481b      	ldr	r0, [pc, #108]	; (800ac90 <nrf24l01_config+0x78>)
 800ac24:	6819      	ldr	r1, [r3, #0]
 800ac26:	f7f7 fb01 	bl	800222c <console_printf>
    assert(dev);  assert(cfg);
 800ac2a:	b92d      	cbnz	r5, 800ac38 <nrf24l01_config+0x20>
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	461a      	mov	r2, r3
 800ac30:	4619      	mov	r1, r3
 800ac32:	4618      	mov	r0, r3
 800ac34:	f7f8 ff3e 	bl	8003ab4 <__assert_func>
 800ac38:	2c00      	cmp	r4, #0
 800ac3a:	d0f7      	beq.n	800ac2c <nrf24l01_config+0x14>
        cfg->tx_address,    cfg->rx_addresses,  cfg->rx_addresses_len);
 800ac3c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800ac40:	68a1      	ldr	r1, [r4, #8]
 800ac42:	930b      	str	r3, [sp, #44]	; 0x2c
 800ac44:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ac46:	6f68      	ldr	r0, [r5, #116]	; 0x74
 800ac48:	930a      	str	r3, [sp, #40]	; 0x28
 800ac4a:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 800ac4e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ac52:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 800ac56:	9307      	str	r3, [sp, #28]
 800ac58:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800ac5c:	9306      	str	r3, [sp, #24]
 800ac5e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ac60:	9305      	str	r3, [sp, #20]
 800ac62:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ac64:	9304      	str	r3, [sp, #16]
 800ac66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ac68:	9303      	str	r3, [sp, #12]
 800ac6a:	6a23      	ldr	r3, [r4, #32]
 800ac6c:	9302      	str	r3, [sp, #8]
 800ac6e:	69e3      	ldr	r3, [r4, #28]
 800ac70:	9301      	str	r3, [sp, #4]
 800ac72:	69a3      	ldr	r3, [r4, #24]
 800ac74:	9300      	str	r3, [sp, #0]
 800ac76:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 800ac7a:	f000 fd87 	bl	800b78c <_ZN9nRF24L01P4initEiiiiiiiiihhyPKyh>
    assert(rc == 0);
 800ac7e:	2800      	cmp	r0, #0
 800ac80:	d1d4      	bne.n	800ac2c <nrf24l01_config+0x14>
    dev->is_configured = 1;
 800ac82:	2301      	movs	r3, #1
 800ac84:	f885 3070 	strb.w	r3, [r5, #112]	; 0x70
}
 800ac88:	b00d      	add	sp, #52	; 0x34
 800ac8a:	bd30      	pop	{r4, r5, pc}
 800ac8c:	2000021c 	.word	0x2000021c
 800ac90:	0800e433 	.word	0x0800e433

0800ac94 <nrf24l01_send>:
int nrf24l01_send(struct nrf24l01 *dev, uint8_t *buf, uint8_t size) {
 800ac94:	b570      	push	{r4, r5, r6, lr}
 800ac96:	460d      	mov	r5, r1
 800ac98:	4614      	mov	r4, r2
    assert(dev);  assert(buf);  assert(size > 0);
 800ac9a:	4606      	mov	r6, r0
 800ac9c:	b928      	cbnz	r0, 800acaa <nrf24l01_send+0x16>
 800ac9e:	2300      	movs	r3, #0
 800aca0:	461a      	mov	r2, r3
 800aca2:	4619      	mov	r1, r3
 800aca4:	4618      	mov	r0, r3
 800aca6:	f7f8 ff05 	bl	8003ab4 <__assert_func>
 800acaa:	2900      	cmp	r1, #0
 800acac:	d0f7      	beq.n	800ac9e <nrf24l01_send+0xa>
 800acae:	2a00      	cmp	r2, #0
 800acb0:	d0f5      	beq.n	800ac9e <nrf24l01_send+0xa>
    console_printf("%s>> ", _nrf); console_dump(buf, size); console_printf("\n");
 800acb2:	4b0a      	ldr	r3, [pc, #40]	; (800acdc <nrf24l01_send+0x48>)
 800acb4:	480a      	ldr	r0, [pc, #40]	; (800ace0 <nrf24l01_send+0x4c>)
 800acb6:	6819      	ldr	r1, [r3, #0]
 800acb8:	f7f7 fab8 	bl	800222c <console_printf>
 800acbc:	4621      	mov	r1, r4
 800acbe:	4628      	mov	r0, r5
 800acc0:	f7f7 fa4c 	bl	800215c <console_dump>
 800acc4:	4807      	ldr	r0, [pc, #28]	; (800ace4 <nrf24l01_send+0x50>)
 800acc6:	f7f7 fab1 	bl	800222c <console_printf>
    int rc = drv(dev)->write(NRF24L01P_PIPE_P0 /* Ignored */, (char *) buf, size);
 800acca:	4623      	mov	r3, r4
 800accc:	462a      	mov	r2, r5
 800acce:	2100      	movs	r1, #0
 800acd0:	6f70      	ldr	r0, [r6, #116]	; 0x74
 800acd2:	f000 fcdb 	bl	800b68c <_ZN9nRF24L01P5writeEiPci>
    assert(rc == size);
 800acd6:	4284      	cmp	r4, r0
 800acd8:	d1e1      	bne.n	800ac9e <nrf24l01_send+0xa>
}
 800acda:	bd70      	pop	{r4, r5, r6, pc}
 800acdc:	2000021c 	.word	0x2000021c
 800ace0:	0800e45d 	.word	0x0800e45d
 800ace4:	0800e41f 	.word	0x0800e41f

0800ace8 <nrf24l01_receive>:
int nrf24l01_receive(struct nrf24l01 *dev, int pipe, uint8_t *buf, uint8_t size) {
 800ace8:	b570      	push	{r4, r5, r6, lr}
    assert(dev);  assert(pipe > 0);  assert(pipe <= 5);  assert(buf);  assert(size > 0);
 800acea:	b928      	cbnz	r0, 800acf8 <nrf24l01_receive+0x10>
 800acec:	2300      	movs	r3, #0
 800acee:	461a      	mov	r2, r3
 800acf0:	4619      	mov	r1, r3
 800acf2:	4618      	mov	r0, r3
 800acf4:	f7f8 fede 	bl	8003ab4 <__assert_func>
 800acf8:	1e4c      	subs	r4, r1, #1
 800acfa:	2c04      	cmp	r4, #4
 800acfc:	d8f6      	bhi.n	800acec <nrf24l01_receive+0x4>
 800acfe:	2a00      	cmp	r2, #0
 800ad00:	d0f4      	beq.n	800acec <nrf24l01_receive+0x4>
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d0f2      	beq.n	800acec <nrf24l01_receive+0x4>
    int rc = drv(dev)->read(pipe, (char *) buf, size);
 800ad06:	6f40      	ldr	r0, [r0, #116]	; 0x74
 800ad08:	f000 fc5c 	bl	800b5c4 <_ZN9nRF24L01P4readEiPci>
    assert(rc > 0);
 800ad0c:	2800      	cmp	r0, #0
 800ad0e:	dded      	ble.n	800acec <nrf24l01_receive+0x4>
}
 800ad10:	bd70      	pop	{r4, r5, r6, pc}

0800ad12 <nrf24l01_readable_pipe>:
int nrf24l01_readable_pipe(struct nrf24l01 *dev) {
 800ad12:	b508      	push	{r3, lr}
    assert(dev);
 800ad14:	4603      	mov	r3, r0
 800ad16:	b918      	cbnz	r0, 800ad20 <nrf24l01_readable_pipe+0xe>
 800ad18:	4602      	mov	r2, r0
 800ad1a:	4601      	mov	r1, r0
 800ad1c:	f7f8 feca 	bl	8003ab4 <__assert_func>
    int rc = drv(dev)->readablePipe();
 800ad20:	6f40      	ldr	r0, [r0, #116]	; 0x74
}
 800ad22:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    int rc = drv(dev)->readablePipe();
 800ad26:	f000 bc43 	b.w	800b5b0 <_ZN9nRF24L01P12readablePipeEv>
	...

0800ad2c <nrf24l01_set_rx_callback>:
int nrf24l01_set_rx_callback(struct nrf24l01 *dev, void (*callback)(struct os_event *ev)) {
 800ad2c:	b508      	push	{r3, lr}
    assert(callback);
 800ad2e:	460b      	mov	r3, r1
 800ad30:	b919      	cbnz	r1, 800ad3a <nrf24l01_set_rx_callback+0xe>
 800ad32:	460a      	mov	r2, r1
 800ad34:	4608      	mov	r0, r1
 800ad36:	f7f8 febd 	bl	8003ab4 <__assert_func>
    nrf24l01_event.ev_cb = callback;
 800ad3a:	4a02      	ldr	r2, [pc, #8]	; (800ad44 <nrf24l01_set_rx_callback+0x18>)
}
 800ad3c:	2000      	movs	r0, #0
    nrf24l01_event.ev_cb = callback;
 800ad3e:	6051      	str	r1, [r2, #4]
}
 800ad40:	bd08      	pop	{r3, pc}
 800ad42:	bf00      	nop
 800ad44:	2000338c 	.word	0x2000338c

0800ad48 <nrf24l01_flush_txrx>:
    assert(dev);
    drv(dev)->flushRx();
    return 0;
}

int nrf24l01_flush_txrx(struct nrf24l01 *dev) {
 800ad48:	b510      	push	{r4, lr}
    //  Flush the transmit and receive buffers.  Return 0 if successful.
    assert(dev);
 800ad4a:	4604      	mov	r4, r0
 800ad4c:	b920      	cbnz	r0, 800ad58 <nrf24l01_flush_txrx+0x10>
 800ad4e:	4603      	mov	r3, r0
 800ad50:	4602      	mov	r2, r0
 800ad52:	4601      	mov	r1, r0
 800ad54:	f7f8 feae 	bl	8003ab4 <__assert_func>
    drv(dev)->flushTx();
 800ad58:	6f40      	ldr	r0, [r0, #116]	; 0x74
 800ad5a:	f000 fcfd 	bl	800b758 <_ZN9nRF24L01P7flushTxEv>
    drv(dev)->flushRx();
 800ad5e:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800ad60:	f000 fce9 	bl	800b736 <_ZN9nRF24L01P7flushRxEv>
    return 0;
}
 800ad64:	2000      	movs	r0, #0
 800ad66:	bd10      	pop	{r4, pc}

0800ad68 <_GLOBAL__sub_I_nrf24l01_init>:
static nRF24L01P controller;    //  The single controller instance.  TODO: Support multiple instances.
 800ad68:	4801      	ldr	r0, [pc, #4]	; (800ad70 <_GLOBAL__sub_I_nrf24l01_init+0x8>)
 800ad6a:	f000 b803 	b.w	800ad74 <_ZN9nRF24L01PC1Ev>
 800ad6e:	bf00      	nop
 800ad70:	20003370 	.word	0x20003370

0800ad74 <_ZN9nRF24L01PC1Ev>:
/**
 * Methods
 */

nRF24L01P::nRF24L01P() {
    mode = _NRF24L01P_MODE_UNKNOWN;
 800ad74:	2200      	movs	r2, #0
 800ad76:	6142      	str	r2, [r0, #20]
}
 800ad78:	4770      	bx	lr

0800ad7a <_ZN9nRF24L01P6enableEv>:

    config |= _NRF24L01P_CONFIG_MASK_RX_DR;
    setRegister(_NRF24L01P_REG_CONFIG, config);
}

void nRF24L01P::enable(void) {
 800ad7a:	b510      	push	{r4, lr}

    ce_value = 1;
 800ad7c:	2401      	movs	r4, #1
 800ad7e:	6104      	str	r4, [r0, #16]
    hal_gpio_write(ce_pin, ce_value);  //  Set CE Pin to high.
 800ad80:	4621      	mov	r1, r4
 800ad82:	6880      	ldr	r0, [r0, #8]
 800ad84:	f7fd fa4e 	bl	8008224 <hal_gpio_write>
    os_time_delay(ticks);
 800ad88:	4620      	mov	r0, r4
    wait_us( _NRF24L01P_TIMING_Tpece2csn_us );

}
 800ad8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    os_time_delay(ticks);
 800ad8e:	f7fa b899 	b.w	8004ec4 <os_time_delay>

0800ad92 <_ZN9nRF24L01P7disableEv>:


void nRF24L01P::disable(void) {

    ce_value = 0;
 800ad92:	2100      	movs	r1, #0
 800ad94:	6101      	str	r1, [r0, #16]
    hal_gpio_write(ce_pin, ce_value);  //  Set CE Pin to low.
 800ad96:	6880      	ldr	r0, [r0, #8]
 800ad98:	f7fd ba44 	b.w	8008224 <hal_gpio_write>

0800ad9c <_ZN9nRF24L01P6selectEv>:
    return status;

}

void nRF24L01P::select(void) {
    hal_gpio_write(cs_pin, 0);  //  Select the module.
 800ad9c:	2100      	movs	r1, #0
 800ad9e:	6840      	ldr	r0, [r0, #4]
 800ada0:	f7fd ba40 	b.w	8008224 <hal_gpio_write>

0800ada4 <_ZN9nRF24L01P8deselectEv>:
}

void nRF24L01P::deselect(void) {
    hal_gpio_write(cs_pin, 1);  //  Deselect the module.
 800ada4:	2101      	movs	r1, #1
 800ada6:	6840      	ldr	r0, [r0, #4]
 800ada8:	f7fd ba3c 	b.w	8008224 <hal_gpio_write>

0800adac <_ZN9nRF24L01P8spiWriteEh>:
    //  Flush tx and rx.
    flushTx();
    flushRx();
}

uint8_t nRF24L01P::spiWrite(uint8_t val) {
 800adac:	b508      	push	{r3, lr}
    //  Write 8-bit val to the SPI port.  Return the result of the write.  
    //  Fail with an assertion error if SPI port was configured as slave.
    //  Need to provide this wrapper because hal_spi_tx_val() returns 16-bit 
    //  values that need to be truncated to 8 bits.
    uint16_t status = hal_spi_tx_val(spi_num, val);
 800adae:	6800      	ldr	r0, [r0, #0]
 800adb0:	f7fc fc8e 	bl	80076d0 <hal_spi_tx_val>
    assert(status != 0xffff);  //  SPI configured wrongly as slave.
 800adb4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800adb8:	4298      	cmp	r0, r3
 800adba:	d105      	bne.n	800adc8 <_ZN9nRF24L01P8spiWriteEh+0x1c>
 800adbc:	2300      	movs	r3, #0
 800adbe:	461a      	mov	r2, r3
 800adc0:	4619      	mov	r1, r3
 800adc2:	4618      	mov	r0, r3
 800adc4:	f7f8 fe76 	bl	8003ab4 <__assert_func>
    return status & 0xff;      //  Return only 8 bits.
}
 800adc8:	b2c0      	uxtb	r0, r0
 800adca:	bd08      	pop	{r3, pc}

0800adcc <_ZN9nRF24L01P11setRegisterEii>:
void nRF24L01P::setRegister(int regAddress, int regData) {
 800adcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adce:	4604      	mov	r4, r0
 800add0:	460d      	mov	r5, r1
 800add2:	4617      	mov	r7, r2
    int originalCe = ce_value;
 800add4:	6906      	ldr	r6, [r0, #16]
    disable();
 800add6:	f7ff ffdc 	bl	800ad92 <_ZN9nRF24L01P7disableEv>
    select();  //  Set CS Pin to low.
 800adda:	4620      	mov	r0, r4
 800addc:	f7ff ffde 	bl	800ad9c <_ZN9nRF24L01P6selectEv>
    int cn = (_NRF24L01P_SPI_CMD_WR_REG | (regAddress & _NRF24L01P_REG_ADDRESS_MASK));
 800ade0:	f005 011f 	and.w	r1, r5, #31
    spiWrite(cn);
 800ade4:	f041 0120 	orr.w	r1, r1, #32
 800ade8:	4620      	mov	r0, r4
 800adea:	f7ff ffdf 	bl	800adac <_ZN9nRF24L01P8spiWriteEh>
    spiWrite(regData & 0xFF);
 800adee:	b2f9      	uxtb	r1, r7
 800adf0:	4620      	mov	r0, r4
 800adf2:	f7ff ffdb 	bl	800adac <_ZN9nRF24L01P8spiWriteEh>
    deselect();  //  Set CS Pin to high.
 800adf6:	4620      	mov	r0, r4
 800adf8:	f7ff ffd4 	bl	800ada4 <_ZN9nRF24L01P8deselectEv>
    if (originalCe) { enable(); }   //  Set CE Pin to high.
 800adfc:	4620      	mov	r0, r4
 800adfe:	b136      	cbz	r6, 800ae0e <_ZN9nRF24L01P11setRegisterEii+0x42>
 800ae00:	f7ff ffbb 	bl	800ad7a <_ZN9nRF24L01P6enableEv>
}
 800ae04:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    os_time_delay(ticks);
 800ae08:	2001      	movs	r0, #1
 800ae0a:	f7fa b85b 	b.w	8004ec4 <os_time_delay>
    else { disable(); }             //  Set CE Pin to low.
 800ae0e:	f7ff ffc0 	bl	800ad92 <_ZN9nRF24L01P7disableEv>
 800ae12:	e7f7      	b.n	800ae04 <_ZN9nRF24L01P11setRegisterEii+0x38>

0800ae14 <_ZN9nRF24L01P14setRfFrequencyEi>:
void nRF24L01P::setRfFrequency(int frequency) {
 800ae14:	b508      	push	{r3, lr}
    if ( ( frequency < NRF24L01P_MIN_RF_FREQUENCY ) || ( frequency > NRF24L01P_MAX_RF_FREQUENCY ) ) {
 800ae16:	f5a1 6316 	sub.w	r3, r1, #2400	; 0x960
 800ae1a:	2b7d      	cmp	r3, #125	; 0x7d
void nRF24L01P::setRfFrequency(int frequency) {
 800ae1c:	460a      	mov	r2, r1
    if ( ( frequency < NRF24L01P_MIN_RF_FREQUENCY ) || ( frequency > NRF24L01P_MAX_RF_FREQUENCY ) ) {
 800ae1e:	d90c      	bls.n	800ae3a <_ZN9nRF24L01P14setRfFrequencyEi+0x26>
        error( "%sbad freq %d\r\n", _nrf, frequency );
 800ae20:	4b09      	ldr	r3, [pc, #36]	; (800ae48 <_ZN9nRF24L01P14setRfFrequencyEi+0x34>)
 800ae22:	480a      	ldr	r0, [pc, #40]	; (800ae4c <_ZN9nRF24L01P14setRfFrequencyEi+0x38>)
 800ae24:	6819      	ldr	r1, [r3, #0]
 800ae26:	f7f7 fa01 	bl	800222c <console_printf>
 800ae2a:	f7f7 f925 	bl	8002078 <console_flush>
 800ae2e:	2300      	movs	r3, #0
 800ae30:	461a      	mov	r2, r3
 800ae32:	4619      	mov	r1, r3
 800ae34:	4618      	mov	r0, r3
 800ae36:	f7f8 fe3d 	bl	8003ab4 <__assert_func>
    setRegister(_NRF24L01P_REG_RF_CH, channel);
 800ae3a:	461a      	mov	r2, r3
}
 800ae3c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setRegister(_NRF24L01P_REG_RF_CH, channel);
 800ae40:	2105      	movs	r1, #5
 800ae42:	f7ff bfc3 	b.w	800adcc <_ZN9nRF24L01P11setRegisterEii>
 800ae46:	bf00      	nop
 800ae48:	2000021c 	.word	0x2000021c
 800ae4c:	0800e4ec 	.word	0x0800e4ec

0800ae50 <_ZN9nRF24L01P15setTransferSizeEii>:
    if ( ( pipe < NRF24L01P_PIPE_P0 ) || ( pipe > NRF24L01P_PIPE_P5 ) ) {
 800ae50:	2a05      	cmp	r2, #5
void nRF24L01P::setTransferSize(int size, int pipe) {
 800ae52:	b508      	push	{r3, lr}
 800ae54:	4613      	mov	r3, r2
    if ( ( pipe < NRF24L01P_PIPE_P0 ) || ( pipe > NRF24L01P_PIPE_P5 ) ) {
 800ae56:	d90c      	bls.n	800ae72 <_ZN9nRF24L01P15setTransferSizeEii+0x22>
        error( "%sbad tx size %d\r\n", _nrf, size );
 800ae58:	4b0a      	ldr	r3, [pc, #40]	; (800ae84 <_ZN9nRF24L01P15setTransferSizeEii+0x34>)
 800ae5a:	480b      	ldr	r0, [pc, #44]	; (800ae88 <_ZN9nRF24L01P15setTransferSizeEii+0x38>)
 800ae5c:	6819      	ldr	r1, [r3, #0]
 800ae5e:	f7f7 f9e5 	bl	800222c <console_printf>
 800ae62:	f7f7 f909 	bl	8002078 <console_flush>
 800ae66:	2300      	movs	r3, #0
 800ae68:	461a      	mov	r2, r3
 800ae6a:	4619      	mov	r1, r3
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	f7f8 fe21 	bl	8003ab4 <__assert_func>
    if ( ( size < 0 ) || ( size > _NRF24L01P_RX_FIFO_SIZE ) ) {
 800ae72:	2920      	cmp	r1, #32
        error( "%sbad tx size %d\r\n", _nrf, size );
 800ae74:	460a      	mov	r2, r1
    if ( ( size < 0 ) || ( size > _NRF24L01P_RX_FIFO_SIZE ) ) {
 800ae76:	d8ef      	bhi.n	800ae58 <_ZN9nRF24L01P15setTransferSizeEii+0x8>
    setRegister(rxPwPxRegister, ( size & _NRF24L01P_RX_PW_Px_MASK ) );
 800ae78:	f103 0111 	add.w	r1, r3, #17
}
 800ae7c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setRegister(rxPwPxRegister, ( size & _NRF24L01P_RX_PW_Px_MASK ) );
 800ae80:	f7ff bfa4 	b.w	800adcc <_ZN9nRF24L01P11setRegisterEii>
 800ae84:	2000021c 	.word	0x2000021c
 800ae88:	0800e50c 	.word	0x0800e50c

0800ae8c <_ZN9nRF24L01P17disableAllRxPipesEv>:
void nRF24L01P::disableAllRxPipes(void) {
 800ae8c:	b510      	push	{r4, lr}
 800ae8e:	4604      	mov	r4, r0
    console_printf("%sdisable rx\n", _nrf); ////
 800ae90:	4b05      	ldr	r3, [pc, #20]	; (800aea8 <_ZN9nRF24L01P17disableAllRxPipesEv+0x1c>)
 800ae92:	4806      	ldr	r0, [pc, #24]	; (800aeac <_ZN9nRF24L01P17disableAllRxPipesEv+0x20>)
 800ae94:	6819      	ldr	r1, [r3, #0]
 800ae96:	f7f7 f9c9 	bl	800222c <console_printf>
    setRegister(_NRF24L01P_REG_EN_RXADDR, _NRF24L01P_EN_RXADDR_NONE);
 800ae9a:	4620      	mov	r0, r4
}
 800ae9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    setRegister(_NRF24L01P_REG_EN_RXADDR, _NRF24L01P_EN_RXADDR_NONE);
 800aea0:	2200      	movs	r2, #0
 800aea2:	2102      	movs	r1, #2
 800aea4:	f7ff bf92 	b.w	800adcc <_ZN9nRF24L01P11setRegisterEii>
 800aea8:	2000021c 	.word	0x2000021c
 800aeac:	0800e53b 	.word	0x0800e53b

0800aeb0 <_ZN9nRF24L01P22disableAutoAcknowledgeEv>:
    setRegister(_NRF24L01P_REG_EN_AA, _NRF24L01P_EN_AA_NONE);
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	2101      	movs	r1, #1
 800aeb4:	f7ff bf8a 	b.w	800adcc <_ZN9nRF24L01P11setRegisterEii>

0800aeb8 <_ZN9nRF24L01P21disableAutoRetransmitEv>:
void nRF24L01P::disableAutoRetransmit(void) {
 800aeb8:	b510      	push	{r4, lr}
    setRegister(_NRF24L01P_REG_SETUP_RETR, _NRF24L01P_SETUP_RETR_NONE);
 800aeba:	2200      	movs	r2, #0
 800aebc:	2104      	movs	r1, #4
void nRF24L01P::disableAutoRetransmit(void) {
 800aebe:	4604      	mov	r4, r0
    setRegister(_NRF24L01P_REG_SETUP_RETR, _NRF24L01P_SETUP_RETR_NONE);
 800aec0:	f7ff ff84 	bl	800adcc <_ZN9nRF24L01P11setRegisterEii>
    a_retr_enabled = false;
 800aec4:	2300      	movs	r3, #0
 800aec6:	7623      	strb	r3, [r4, #24]
}
 800aec8:	bd10      	pop	{r4, pc}

0800aeca <_ZN9nRF24L01P11getRegisterEi>:
int nRF24L01P::getRegister(int regAddress) {
 800aeca:	b538      	push	{r3, r4, r5, lr}
 800aecc:	4604      	mov	r4, r0
 800aece:	460d      	mov	r5, r1
    select();  //  Set CS Pin to low.
 800aed0:	f7ff ff64 	bl	800ad9c <_ZN9nRF24L01P6selectEv>
    spiWrite(cn);
 800aed4:	f005 011f 	and.w	r1, r5, #31
 800aed8:	4620      	mov	r0, r4
 800aeda:	f7ff ff67 	bl	800adac <_ZN9nRF24L01P8spiWriteEh>
    int dn = spiWrite(_NRF24L01P_SPI_CMD_NOP);
 800aede:	21ff      	movs	r1, #255	; 0xff
 800aee0:	4620      	mov	r0, r4
 800aee2:	f7ff ff63 	bl	800adac <_ZN9nRF24L01P8spiWriteEh>
 800aee6:	4605      	mov	r5, r0
    deselect();  //  Set CS Pin to high.
 800aee8:	4620      	mov	r0, r4
 800aeea:	f7ff ff5b 	bl	800ada4 <_ZN9nRF24L01P8deselectEv>
}
 800aeee:	4628      	mov	r0, r5
 800aef0:	bd38      	pop	{r3, r4, r5, pc}
	...

0800aef4 <_ZN9nRF24L01P7powerUpEv>:
void nRF24L01P::powerUp(void) {
 800aef4:	b510      	push	{r4, lr}
 800aef6:	4604      	mov	r4, r0
    console_printf("%spower up\n", _nrf); ////
 800aef8:	4b0a      	ldr	r3, [pc, #40]	; (800af24 <_ZN9nRF24L01P7powerUpEv+0x30>)
 800aefa:	480b      	ldr	r0, [pc, #44]	; (800af28 <_ZN9nRF24L01P7powerUpEv+0x34>)
 800aefc:	6819      	ldr	r1, [r3, #0]
 800aefe:	f7f7 f995 	bl	800222c <console_printf>
    int config = getRegister(_NRF24L01P_REG_CONFIG);
 800af02:	2100      	movs	r1, #0
 800af04:	4620      	mov	r0, r4
 800af06:	f7ff ffe0 	bl	800aeca <_ZN9nRF24L01P11getRegisterEi>
    setRegister(_NRF24L01P_REG_CONFIG, config);
 800af0a:	2100      	movs	r1, #0
 800af0c:	f040 0202 	orr.w	r2, r0, #2
 800af10:	4620      	mov	r0, r4
 800af12:	f7ff ff5b 	bl	800adcc <_ZN9nRF24L01P11setRegisterEii>
    os_time_delay(ticks);
 800af16:	2009      	movs	r0, #9
 800af18:	f7f9 ffd4 	bl	8004ec4 <os_time_delay>
    mode = _NRF24L01P_MODE_STANDBY;
 800af1c:	2302      	movs	r3, #2
 800af1e:	6163      	str	r3, [r4, #20]
}
 800af20:	bd10      	pop	{r4, pc}
 800af22:	bf00      	nop
 800af24:	2000021c 	.word	0x2000021c
 800af28:	0800e57a 	.word	0x0800e57a

0800af2c <_ZN9nRF24L01P14setReceiveModeEv>:
void nRF24L01P::setReceiveMode(void) {
 800af2c:	b510      	push	{r4, lr}
 800af2e:	4604      	mov	r4, r0
    console_printf("%srx mode\n", _nrf); ////
 800af30:	4b0b      	ldr	r3, [pc, #44]	; (800af60 <_ZN9nRF24L01P14setReceiveModeEv+0x34>)
 800af32:	480c      	ldr	r0, [pc, #48]	; (800af64 <_ZN9nRF24L01P14setReceiveModeEv+0x38>)
 800af34:	6819      	ldr	r1, [r3, #0]
 800af36:	f7f7 f979 	bl	800222c <console_printf>
    if ( _NRF24L01P_MODE_POWER_DOWN == mode ) { powerUp(); }
 800af3a:	6963      	ldr	r3, [r4, #20]
 800af3c:	2b01      	cmp	r3, #1
 800af3e:	d102      	bne.n	800af46 <_ZN9nRF24L01P14setReceiveModeEv+0x1a>
 800af40:	4620      	mov	r0, r4
 800af42:	f7ff ffd7 	bl	800aef4 <_ZN9nRF24L01P7powerUpEv>
    int config = getRegister(_NRF24L01P_REG_CONFIG);
 800af46:	2100      	movs	r1, #0
 800af48:	4620      	mov	r0, r4
 800af4a:	f7ff ffbe 	bl	800aeca <_ZN9nRF24L01P11getRegisterEi>
    setRegister(_NRF24L01P_REG_CONFIG, config);
 800af4e:	2100      	movs	r1, #0
 800af50:	f040 0201 	orr.w	r2, r0, #1
 800af54:	4620      	mov	r0, r4
 800af56:	f7ff ff39 	bl	800adcc <_ZN9nRF24L01P11setRegisterEii>
    mode = _NRF24L01P_MODE_RX;
 800af5a:	2303      	movs	r3, #3
 800af5c:	6163      	str	r3, [r4, #20]
}
 800af5e:	bd10      	pop	{r4, pc}
 800af60:	2000021c 	.word	0x2000021c
 800af64:	0800e4e1 	.word	0x0800e4e1

0800af68 <_ZN9nRF24L01P15setTransmitModeEv>:
void nRF24L01P::setTransmitMode(void) {
 800af68:	b510      	push	{r4, lr}
 800af6a:	4604      	mov	r4, r0
    console_printf("%stx mode\n", _nrf); ////
 800af6c:	4b0b      	ldr	r3, [pc, #44]	; (800af9c <_ZN9nRF24L01P15setTransmitModeEv+0x34>)
 800af6e:	480c      	ldr	r0, [pc, #48]	; (800afa0 <_ZN9nRF24L01P15setTransmitModeEv+0x38>)
 800af70:	6819      	ldr	r1, [r3, #0]
 800af72:	f7f7 f95b 	bl	800222c <console_printf>
    if ( _NRF24L01P_MODE_POWER_DOWN == mode ) { powerUp(); }
 800af76:	6963      	ldr	r3, [r4, #20]
 800af78:	2b01      	cmp	r3, #1
 800af7a:	d102      	bne.n	800af82 <_ZN9nRF24L01P15setTransmitModeEv+0x1a>
 800af7c:	4620      	mov	r0, r4
 800af7e:	f7ff ffb9 	bl	800aef4 <_ZN9nRF24L01P7powerUpEv>
    int config = getRegister(_NRF24L01P_REG_CONFIG);
 800af82:	2100      	movs	r1, #0
 800af84:	4620      	mov	r0, r4
 800af86:	f7ff ffa0 	bl	800aeca <_ZN9nRF24L01P11getRegisterEi>
    setRegister(_NRF24L01P_REG_CONFIG, config);
 800af8a:	2100      	movs	r1, #0
 800af8c:	f020 0201 	bic.w	r2, r0, #1
 800af90:	4620      	mov	r0, r4
 800af92:	f7ff ff1b 	bl	800adcc <_ZN9nRF24L01P11setRegisterEii>
    mode = _NRF24L01P_MODE_TX;
 800af96:	2304      	movs	r3, #4
 800af98:	6163      	str	r3, [r4, #20]
}
 800af9a:	bd10      	pop	{r4, pc}
 800af9c:	2000021c 	.word	0x2000021c
 800afa0:	0800e51f 	.word	0x0800e51f

0800afa4 <_ZN9nRF24L01P17enableRxInterruptEv>:
void nRF24L01P::enableRxInterrupt(void) {
 800afa4:	b510      	push	{r4, lr}
 800afa6:	4604      	mov	r4, r0
    console_printf("%senable int\n", _nrf); ////
 800afa8:	4b08      	ldr	r3, [pc, #32]	; (800afcc <_ZN9nRF24L01P17enableRxInterruptEv+0x28>)
 800afaa:	4809      	ldr	r0, [pc, #36]	; (800afd0 <_ZN9nRF24L01P17enableRxInterruptEv+0x2c>)
 800afac:	6819      	ldr	r1, [r3, #0]
 800afae:	f7f7 f93d 	bl	800222c <console_printf>
    int config = getRegister(_NRF24L01P_REG_CONFIG);
 800afb2:	2100      	movs	r1, #0
 800afb4:	4620      	mov	r0, r4
 800afb6:	f7ff ff88 	bl	800aeca <_ZN9nRF24L01P11getRegisterEi>
    setRegister(_NRF24L01P_REG_CONFIG, config);
 800afba:	2100      	movs	r1, #0
 800afbc:	f020 0240 	bic.w	r2, r0, #64	; 0x40
 800afc0:	4620      	mov	r0, r4
}
 800afc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    setRegister(_NRF24L01P_REG_CONFIG, config);
 800afc6:	f7ff bf01 	b.w	800adcc <_ZN9nRF24L01P11setRegisterEii>
 800afca:	bf00      	nop
 800afcc:	2000021c 	.word	0x2000021c
 800afd0:	0800e549 	.word	0x0800e549

0800afd4 <_ZN9nRF24L01P18disableRxInterruptEv>:
void nRF24L01P::disableRxInterrupt(void) {
 800afd4:	b510      	push	{r4, lr}
 800afd6:	4604      	mov	r4, r0
    console_printf("%sdisable int\n", _nrf); ////
 800afd8:	4b08      	ldr	r3, [pc, #32]	; (800affc <_ZN9nRF24L01P18disableRxInterruptEv+0x28>)
 800afda:	4809      	ldr	r0, [pc, #36]	; (800b000 <_ZN9nRF24L01P18disableRxInterruptEv+0x2c>)
 800afdc:	6819      	ldr	r1, [r3, #0]
 800afde:	f7f7 f925 	bl	800222c <console_printf>
    int config = getRegister(_NRF24L01P_REG_CONFIG);
 800afe2:	2100      	movs	r1, #0
 800afe4:	4620      	mov	r0, r4
 800afe6:	f7ff ff70 	bl	800aeca <_ZN9nRF24L01P11getRegisterEi>
    setRegister(_NRF24L01P_REG_CONFIG, config);
 800afea:	2100      	movs	r1, #0
 800afec:	f040 0240 	orr.w	r2, r0, #64	; 0x40
 800aff0:	4620      	mov	r0, r4
}
 800aff2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    setRegister(_NRF24L01P_REG_CONFIG, config);
 800aff6:	f7ff bee9 	b.w	800adcc <_ZN9nRF24L01P11setRegisterEii>
 800affa:	bf00      	nop
 800affc:	2000021c 	.word	0x2000021c
 800b000:	0800e557 	.word	0x0800e557

0800b004 <_ZN9nRF24L01P14getRfFrequencyEv>:
int nRF24L01P::getRfFrequency(void) {
 800b004:	b508      	push	{r3, lr}
    int channel = getRegister(_NRF24L01P_REG_RF_CH) & 0x7F;
 800b006:	2105      	movs	r1, #5
 800b008:	f7ff ff5f 	bl	800aeca <_ZN9nRF24L01P11getRegisterEi>
 800b00c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
}
 800b010:	f500 6016 	add.w	r0, r0, #2400	; 0x960
 800b014:	bd08      	pop	{r3, pc}
	...

0800b018 <_ZN9nRF24L01P16setRfOutputPowerEi>:
void nRF24L01P::setRfOutputPower(int power) {
 800b018:	b538      	push	{r3, r4, r5, lr}
 800b01a:	460c      	mov	r4, r1
    int rfSetup = getRegister(_NRF24L01P_REG_RF_SETUP) & ~_NRF24L01P_RF_SETUP_RF_PWR_MASK;
 800b01c:	2106      	movs	r1, #6
void nRF24L01P::setRfOutputPower(int power) {
 800b01e:	4605      	mov	r5, r0
    int rfSetup = getRegister(_NRF24L01P_REG_RF_SETUP) & ~_NRF24L01P_RF_SETUP_RF_PWR_MASK;
 800b020:	f7ff ff53 	bl	800aeca <_ZN9nRF24L01P11getRegisterEi>
    switch ( power ) {
 800b024:	f114 0f0c 	cmn.w	r4, #12
    int rfSetup = getRegister(_NRF24L01P_REG_RF_SETUP) & ~_NRF24L01P_RF_SETUP_RF_PWR_MASK;
 800b028:	f020 0206 	bic.w	r2, r0, #6
    switch ( power ) {
 800b02c:	d020      	beq.n	800b070 <_ZN9nRF24L01P16setRfOutputPowerEi+0x58>
 800b02e:	dc10      	bgt.n	800b052 <_ZN9nRF24L01P16setRfOutputPowerEi+0x3a>
 800b030:	f114 0f12 	cmn.w	r4, #18
 800b034:	d013      	beq.n	800b05e <_ZN9nRF24L01P16setRfOutputPowerEi+0x46>
            error( "%sbad power %d\r\n", _nrf, power );
 800b036:	4b10      	ldr	r3, [pc, #64]	; (800b078 <_ZN9nRF24L01P16setRfOutputPowerEi+0x60>)
 800b038:	4622      	mov	r2, r4
 800b03a:	6819      	ldr	r1, [r3, #0]
 800b03c:	480f      	ldr	r0, [pc, #60]	; (800b07c <_ZN9nRF24L01P16setRfOutputPowerEi+0x64>)
 800b03e:	f7f7 f8f5 	bl	800222c <console_printf>
 800b042:	f7f7 f819 	bl	8002078 <console_flush>
 800b046:	2300      	movs	r3, #0
 800b048:	461a      	mov	r2, r3
 800b04a:	4619      	mov	r1, r3
 800b04c:	4618      	mov	r0, r3
 800b04e:	f7f8 fd31 	bl	8003ab4 <__assert_func>
    switch ( power ) {
 800b052:	1da3      	adds	r3, r4, #6
 800b054:	d009      	beq.n	800b06a <_ZN9nRF24L01P16setRfOutputPowerEi+0x52>
 800b056:	2c00      	cmp	r4, #0
 800b058:	d1ed      	bne.n	800b036 <_ZN9nRF24L01P16setRfOutputPowerEi+0x1e>
            rfSetup |= _NRF24L01P_RF_SETUP_RF_PWR_0DBM;
 800b05a:	f042 0206 	orr.w	r2, r2, #6
    setRegister(_NRF24L01P_REG_RF_SETUP, rfSetup);
 800b05e:	4628      	mov	r0, r5
}
 800b060:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    setRegister(_NRF24L01P_REG_RF_SETUP, rfSetup);
 800b064:	2106      	movs	r1, #6
 800b066:	f7ff beb1 	b.w	800adcc <_ZN9nRF24L01P11setRegisterEii>
            rfSetup |= _NRF24L01P_RF_SETUP_RF_PWR_MINUS_6DBM;
 800b06a:	f042 0204 	orr.w	r2, r2, #4
            break;
 800b06e:	e7f6      	b.n	800b05e <_ZN9nRF24L01P16setRfOutputPowerEi+0x46>
            rfSetup |= _NRF24L01P_RF_SETUP_RF_PWR_MINUS_12DBM;
 800b070:	f042 0202 	orr.w	r2, r2, #2
            break;
 800b074:	e7f3      	b.n	800b05e <_ZN9nRF24L01P16setRfOutputPowerEi+0x46>
 800b076:	bf00      	nop
 800b078:	2000021c 	.word	0x2000021c
 800b07c:	0800e52a 	.word	0x0800e52a

0800b080 <_ZN9nRF24L01P16getRfOutputPowerEv>:
int nRF24L01P::getRfOutputPower(void) {
 800b080:	b508      	push	{r3, lr}
    int rfPwr = getRegister(_NRF24L01P_REG_RF_SETUP) & _NRF24L01P_RF_SETUP_RF_PWR_MASK;
 800b082:	2106      	movs	r1, #6
 800b084:	f7ff ff21 	bl	800aeca <_ZN9nRF24L01P11getRegisterEi>
 800b088:	f000 0206 	and.w	r2, r0, #6
    switch ( rfPwr ) {
 800b08c:	2a06      	cmp	r2, #6
 800b08e:	d80b      	bhi.n	800b0a8 <_ZN9nRF24L01P16getRfOutputPowerEv+0x28>
 800b090:	e8df f002 	tbb	[pc, r2]
 800b094:	0a190a07 	.word	0x0a190a07
 800b098:	0a04      	.short	0x0a04
 800b09a:	17          	.byte	0x17
 800b09b:	00          	.byte	0x00
            return NRF24L01P_TX_PWR_MINUS_6_DB;
 800b09c:	f06f 0005 	mvn.w	r0, #5
}
 800b0a0:	bd08      	pop	{r3, pc}
            return NRF24L01P_TX_PWR_MINUS_18_DB;
 800b0a2:	f06f 0011 	mvn.w	r0, #17
 800b0a6:	e7fb      	b.n	800b0a0 <_ZN9nRF24L01P16getRfOutputPowerEv+0x20>
            error( "%sbad power %d\r\n", _nrf, rfPwr );
 800b0a8:	4b08      	ldr	r3, [pc, #32]	; (800b0cc <_ZN9nRF24L01P16getRfOutputPowerEv+0x4c>)
 800b0aa:	4809      	ldr	r0, [pc, #36]	; (800b0d0 <_ZN9nRF24L01P16getRfOutputPowerEv+0x50>)
 800b0ac:	6819      	ldr	r1, [r3, #0]
 800b0ae:	f7f7 f8bd 	bl	800222c <console_printf>
 800b0b2:	f7f6 ffe1 	bl	8002078 <console_flush>
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	461a      	mov	r2, r3
 800b0ba:	4619      	mov	r1, r3
 800b0bc:	4618      	mov	r0, r3
 800b0be:	f7f8 fcf9 	bl	8003ab4 <__assert_func>
            return NRF24L01P_TX_PWR_ZERO_DB;
 800b0c2:	2000      	movs	r0, #0
 800b0c4:	e7ec      	b.n	800b0a0 <_ZN9nRF24L01P16getRfOutputPowerEv+0x20>
            return NRF24L01P_TX_PWR_MINUS_12_DB;
 800b0c6:	f06f 000b 	mvn.w	r0, #11
 800b0ca:	e7e9      	b.n	800b0a0 <_ZN9nRF24L01P16getRfOutputPowerEv+0x20>
 800b0cc:	2000021c 	.word	0x2000021c
 800b0d0:	0800e52a 	.word	0x0800e52a

0800b0d4 <_ZN9nRF24L01P14setAirDataRateEi>:
void nRF24L01P::setAirDataRate(int rate) {
 800b0d4:	b538      	push	{r3, r4, r5, lr}
 800b0d6:	460c      	mov	r4, r1
    int rfSetup = getRegister(_NRF24L01P_REG_RF_SETUP) & ~_NRF24L01P_RF_SETUP_RF_DR_MASK;
 800b0d8:	2106      	movs	r1, #6
void nRF24L01P::setAirDataRate(int rate) {
 800b0da:	4605      	mov	r5, r0
    int rfSetup = getRegister(_NRF24L01P_REG_RF_SETUP) & ~_NRF24L01P_RF_SETUP_RF_DR_MASK;
 800b0dc:	f7ff fef5 	bl	800aeca <_ZN9nRF24L01P11getRegisterEi>
    switch ( rate ) {
 800b0e0:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
    int rfSetup = getRegister(_NRF24L01P_REG_RF_SETUP) & ~_NRF24L01P_RF_SETUP_RF_DR_MASK;
 800b0e4:	f020 0228 	bic.w	r2, r0, #40	; 0x28
    switch ( rate ) {
 800b0e8:	d006      	beq.n	800b0f8 <_ZN9nRF24L01P14setAirDataRateEi+0x24>
 800b0ea:	f5b4 6ffa 	cmp.w	r4, #2000	; 0x7d0
 800b0ee:	d009      	beq.n	800b104 <_ZN9nRF24L01P14setAirDataRateEi+0x30>
 800b0f0:	2cfa      	cmp	r4, #250	; 0xfa
 800b0f2:	d10a      	bne.n	800b10a <_ZN9nRF24L01P14setAirDataRateEi+0x36>
            rfSetup |= _NRF24L01P_RF_SETUP_RF_DR_250KBPS;
 800b0f4:	f042 0220 	orr.w	r2, r2, #32
    setRegister(_NRF24L01P_REG_RF_SETUP, rfSetup);
 800b0f8:	4628      	mov	r0, r5
}
 800b0fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    setRegister(_NRF24L01P_REG_RF_SETUP, rfSetup);
 800b0fe:	2106      	movs	r1, #6
 800b100:	f7ff be64 	b.w	800adcc <_ZN9nRF24L01P11setRegisterEii>
            rfSetup |= _NRF24L01P_RF_SETUP_RF_DR_2MBPS;
 800b104:	f042 0208 	orr.w	r2, r2, #8
            break;
 800b108:	e7f6      	b.n	800b0f8 <_ZN9nRF24L01P14setAirDataRateEi+0x24>
            error( "%sbad data rate %d\r\n", _nrf, rate );
 800b10a:	4b07      	ldr	r3, [pc, #28]	; (800b128 <_ZN9nRF24L01P14setAirDataRateEi+0x54>)
 800b10c:	4622      	mov	r2, r4
 800b10e:	6819      	ldr	r1, [r3, #0]
 800b110:	4806      	ldr	r0, [pc, #24]	; (800b12c <_ZN9nRF24L01P14setAirDataRateEi+0x58>)
 800b112:	f7f7 f88b 	bl	800222c <console_printf>
 800b116:	f7f6 ffaf 	bl	8002078 <console_flush>
 800b11a:	2300      	movs	r3, #0
 800b11c:	461a      	mov	r2, r3
 800b11e:	4619      	mov	r1, r3
 800b120:	4618      	mov	r0, r3
 800b122:	f7f8 fcc7 	bl	8003ab4 <__assert_func>
 800b126:	bf00      	nop
 800b128:	2000021c 	.word	0x2000021c
 800b12c:	0800e4cc 	.word	0x0800e4cc

0800b130 <_ZN9nRF24L01P14getAirDataRateEv>:
int nRF24L01P::getAirDataRate(void) {
 800b130:	b508      	push	{r3, lr}
    int rfDataRate = getRegister(_NRF24L01P_REG_RF_SETUP) & _NRF24L01P_RF_SETUP_RF_DR_MASK;
 800b132:	2106      	movs	r1, #6
 800b134:	f7ff fec9 	bl	800aeca <_ZN9nRF24L01P11getRegisterEi>
 800b138:	f000 0228 	and.w	r2, r0, #40	; 0x28
    switch ( rfDataRate ) {
 800b13c:	2a08      	cmp	r2, #8
 800b13e:	d014      	beq.n	800b16a <_ZN9nRF24L01P14getAirDataRateEv+0x3a>
 800b140:	2a20      	cmp	r2, #32
 800b142:	d010      	beq.n	800b166 <_ZN9nRF24L01P14getAirDataRateEv+0x36>
 800b144:	b912      	cbnz	r2, 800b14c <_ZN9nRF24L01P14getAirDataRateEv+0x1c>
            return NRF24L01P_DATARATE_1_MBPS;
 800b146:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
}
 800b14a:	bd08      	pop	{r3, pc}
            error( "%sbad data rate %d\r\n", _nrf, rfDataRate );
 800b14c:	4b08      	ldr	r3, [pc, #32]	; (800b170 <_ZN9nRF24L01P14getAirDataRateEv+0x40>)
 800b14e:	4809      	ldr	r0, [pc, #36]	; (800b174 <_ZN9nRF24L01P14getAirDataRateEv+0x44>)
 800b150:	6819      	ldr	r1, [r3, #0]
 800b152:	f7f7 f86b 	bl	800222c <console_printf>
 800b156:	f7f6 ff8f 	bl	8002078 <console_flush>
 800b15a:	2300      	movs	r3, #0
 800b15c:	461a      	mov	r2, r3
 800b15e:	4619      	mov	r1, r3
 800b160:	4618      	mov	r0, r3
 800b162:	f7f8 fca7 	bl	8003ab4 <__assert_func>
            return NRF24L01P_DATARATE_250_KBPS;
 800b166:	20fa      	movs	r0, #250	; 0xfa
 800b168:	e7ef      	b.n	800b14a <_ZN9nRF24L01P14getAirDataRateEv+0x1a>
            return NRF24L01P_DATARATE_2_MBPS;
 800b16a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b16e:	e7ec      	b.n	800b14a <_ZN9nRF24L01P14getAirDataRateEv+0x1a>
 800b170:	2000021c 	.word	0x2000021c
 800b174:	0800e4cc 	.word	0x0800e4cc

0800b178 <_ZN9nRF24L01P11setCrcWidthEi>:
void nRF24L01P::setCrcWidth(int width) {
 800b178:	b538      	push	{r3, r4, r5, lr}
 800b17a:	460c      	mov	r4, r1
    int config = getRegister(_NRF24L01P_REG_CONFIG) & ~_NRF24L01P_CONFIG_CRC_MASK;
 800b17c:	2100      	movs	r1, #0
void nRF24L01P::setCrcWidth(int width) {
 800b17e:	4605      	mov	r5, r0
    int config = getRegister(_NRF24L01P_REG_CONFIG) & ~_NRF24L01P_CONFIG_CRC_MASK;
 800b180:	f7ff fea3 	bl	800aeca <_ZN9nRF24L01P11getRegisterEi>
    switch ( width ) {
 800b184:	2c08      	cmp	r4, #8
    int config = getRegister(_NRF24L01P_REG_CONFIG) & ~_NRF24L01P_CONFIG_CRC_MASK;
 800b186:	f020 020c 	bic.w	r2, r0, #12
    switch ( width ) {
 800b18a:	d008      	beq.n	800b19e <_ZN9nRF24L01P11setCrcWidthEi+0x26>
 800b18c:	2c10      	cmp	r4, #16
 800b18e:	d009      	beq.n	800b1a4 <_ZN9nRF24L01P11setCrcWidthEi+0x2c>
 800b190:	b95c      	cbnz	r4, 800b1aa <_ZN9nRF24L01P11setCrcWidthEi+0x32>
    setRegister(_NRF24L01P_REG_CONFIG, config);
 800b192:	4628      	mov	r0, r5
}
 800b194:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    setRegister(_NRF24L01P_REG_CONFIG, config);
 800b198:	2100      	movs	r1, #0
 800b19a:	f7ff be17 	b.w	800adcc <_ZN9nRF24L01P11setRegisterEii>
            config |= _NRF24L01P_CONFIG_CRC_8BIT;
 800b19e:	f042 0208 	orr.w	r2, r2, #8
            break;
 800b1a2:	e7f6      	b.n	800b192 <_ZN9nRF24L01P11setCrcWidthEi+0x1a>
            config |= _NRF24L01P_CONFIG_CRC_16BIT;
 800b1a4:	f042 020c 	orr.w	r2, r2, #12
            break;
 800b1a8:	e7f3      	b.n	800b192 <_ZN9nRF24L01P11setCrcWidthEi+0x1a>
            error( "%sbad crc width %d\r\n", _nrf, width );
 800b1aa:	4b07      	ldr	r3, [pc, #28]	; (800b1c8 <_ZN9nRF24L01P11setCrcWidthEi+0x50>)
 800b1ac:	4622      	mov	r2, r4
 800b1ae:	6819      	ldr	r1, [r3, #0]
 800b1b0:	4806      	ldr	r0, [pc, #24]	; (800b1cc <_ZN9nRF24L01P11setCrcWidthEi+0x54>)
 800b1b2:	f7f7 f83b 	bl	800222c <console_printf>
 800b1b6:	f7f6 ff5f 	bl	8002078 <console_flush>
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	461a      	mov	r2, r3
 800b1be:	4619      	mov	r1, r3
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	f7f8 fc77 	bl	8003ab4 <__assert_func>
 800b1c6:	bf00      	nop
 800b1c8:	2000021c 	.word	0x2000021c
 800b1cc:	0800e463 	.word	0x0800e463

0800b1d0 <_ZN9nRF24L01P15getTransferSizeEi>:
    if ( ( pipe < NRF24L01P_PIPE_P0 ) || ( pipe > NRF24L01P_PIPE_P5 ) ) {
 800b1d0:	2905      	cmp	r1, #5
int nRF24L01P::getTransferSize(int pipe) {
 800b1d2:	b508      	push	{r3, lr}
    if ( ( pipe < NRF24L01P_PIPE_P0 ) || ( pipe > NRF24L01P_PIPE_P5 ) ) {
 800b1d4:	d90d      	bls.n	800b1f2 <_ZN9nRF24L01P15getTransferSizeEi+0x22>
        error( "%sbad pipe %d\r\n", _nrf, pipe );
 800b1d6:	4b0a      	ldr	r3, [pc, #40]	; (800b200 <_ZN9nRF24L01P15getTransferSizeEi+0x30>)
 800b1d8:	460a      	mov	r2, r1
 800b1da:	480a      	ldr	r0, [pc, #40]	; (800b204 <_ZN9nRF24L01P15getTransferSizeEi+0x34>)
 800b1dc:	6819      	ldr	r1, [r3, #0]
 800b1de:	f7f7 f825 	bl	800222c <console_printf>
 800b1e2:	f7f6 ff49 	bl	8002078 <console_flush>
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	461a      	mov	r2, r3
 800b1ea:	4619      	mov	r1, r3
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	f7f8 fc61 	bl	8003ab4 <__assert_func>
    int size = getRegister(rxPwPxRegister);
 800b1f2:	3111      	adds	r1, #17
 800b1f4:	f7ff fe69 	bl	800aeca <_ZN9nRF24L01P11getRegisterEi>
}
 800b1f8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800b1fc:	bd08      	pop	{r3, pc}
 800b1fe:	bf00      	nop
 800b200:	2000021c 	.word	0x2000021c
 800b204:	0800e4fc 	.word	0x0800e4fc

0800b208 <_ZN9nRF24L01P21enableAutoAcknowledgeEi>:
    if ( ( pipe < NRF24L01P_PIPE_P0 ) || ( pipe > NRF24L01P_PIPE_P5 ) ) {
 800b208:	2905      	cmp	r1, #5
void nRF24L01P::enableAutoAcknowledge(int pipe) {
 800b20a:	b538      	push	{r3, r4, r5, lr}
 800b20c:	4605      	mov	r5, r0
 800b20e:	460c      	mov	r4, r1
    if ( ( pipe < NRF24L01P_PIPE_P0 ) || ( pipe > NRF24L01P_PIPE_P5 ) ) {
 800b210:	d90d      	bls.n	800b22e <_ZN9nRF24L01P21enableAutoAcknowledgeEi+0x26>
        error( "%sbad ack pipe %d\r\n", _nrf, pipe );
 800b212:	4b0d      	ldr	r3, [pc, #52]	; (800b248 <_ZN9nRF24L01P21enableAutoAcknowledgeEi+0x40>)
 800b214:	460a      	mov	r2, r1
 800b216:	480d      	ldr	r0, [pc, #52]	; (800b24c <_ZN9nRF24L01P21enableAutoAcknowledgeEi+0x44>)
 800b218:	6819      	ldr	r1, [r3, #0]
 800b21a:	f7f7 f807 	bl	800222c <console_printf>
 800b21e:	f7f6 ff2b 	bl	8002078 <console_flush>
 800b222:	2300      	movs	r3, #0
 800b224:	461a      	mov	r2, r3
 800b226:	4619      	mov	r1, r3
 800b228:	4618      	mov	r0, r3
 800b22a:	f7f8 fc43 	bl	8003ab4 <__assert_func>
    int enAA = getRegister(_NRF24L01P_REG_EN_AA);
 800b22e:	2101      	movs	r1, #1
 800b230:	f7ff fe4b 	bl	800aeca <_ZN9nRF24L01P11getRegisterEi>
    enAA |= ( 1 << (pipe - NRF24L01P_PIPE_P0) );
 800b234:	2101      	movs	r1, #1
 800b236:	fa01 f204 	lsl.w	r2, r1, r4
    setRegister(_NRF24L01P_REG_EN_AA, enAA);
 800b23a:	4302      	orrs	r2, r0
 800b23c:	4628      	mov	r0, r5
}
 800b23e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    setRegister(_NRF24L01P_REG_EN_AA, enAA);
 800b242:	f7ff bdc3 	b.w	800adcc <_ZN9nRF24L01P11setRegisterEii>
 800b246:	bf00      	nop
 800b248:	2000021c 	.word	0x2000021c
 800b24c:	0800e566 	.word	0x0800e566

0800b250 <_ZN9nRF24L01P12setRxAddressEyii>:
void nRF24L01P::setRxAddress(unsigned long long address, int width, int pipe) {
 800b250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b254:	e9dd 4606 	ldrd	r4, r6, [sp, #24]
    if ( ( pipe < NRF24L01P_PIPE_P0 ) || ( pipe > NRF24L01P_PIPE_P5 ) ) {
 800b258:	2e05      	cmp	r6, #5
void nRF24L01P::setRxAddress(unsigned long long address, int width, int pipe) {
 800b25a:	4605      	mov	r5, r0
 800b25c:	4617      	mov	r7, r2
 800b25e:	4698      	mov	r8, r3
    if ( ( pipe < NRF24L01P_PIPE_P0 ) || ( pipe > NRF24L01P_PIPE_P5 ) ) {
 800b260:	d90d      	bls.n	800b27e <_ZN9nRF24L01P12setRxAddressEyii+0x2e>
        error( "%sbad rx pipe %d\r\n", _nrf, pipe );
 800b262:	4632      	mov	r2, r6
                error( "%sbad rx pipe %d\r\n", _nrf, width );
 800b264:	4b28      	ldr	r3, [pc, #160]	; (800b308 <_ZN9nRF24L01P12setRxAddressEyii+0xb8>)
 800b266:	4829      	ldr	r0, [pc, #164]	; (800b30c <_ZN9nRF24L01P12setRxAddressEyii+0xbc>)
 800b268:	6819      	ldr	r1, [r3, #0]
 800b26a:	f7f6 ffdf 	bl	800222c <console_printf>
 800b26e:	f7f6 ff03 	bl	8002078 <console_flush>
 800b272:	2300      	movs	r3, #0
 800b274:	461a      	mov	r2, r3
 800b276:	4619      	mov	r1, r3
 800b278:	4618      	mov	r0, r3
 800b27a:	f7f8 fc1b 	bl	8003ab4 <__assert_func>
    if ( ( pipe == NRF24L01P_PIPE_P0 ) || ( pipe == NRF24L01P_PIPE_P1 ) ) {
 800b27e:	2e01      	cmp	r6, #1
 800b280:	d830      	bhi.n	800b2e4 <_ZN9nRF24L01P12setRxAddressEyii+0x94>
        int setupAw = getRegister(_NRF24L01P_REG_SETUP_AW) & ~_NRF24L01P_SETUP_AW_AW_MASK;
 800b282:	2103      	movs	r1, #3
 800b284:	f7ff fe21 	bl	800aeca <_ZN9nRF24L01P11getRegisterEi>
        switch ( width ) {
 800b288:	2c04      	cmp	r4, #4
        int setupAw = getRegister(_NRF24L01P_REG_SETUP_AW) & ~_NRF24L01P_SETUP_AW_AW_MASK;
 800b28a:	f020 0203 	bic.w	r2, r0, #3
        switch ( width ) {
 800b28e:	d021      	beq.n	800b2d4 <_ZN9nRF24L01P12setRxAddressEyii+0x84>
 800b290:	2c05      	cmp	r4, #5
 800b292:	d022      	beq.n	800b2da <_ZN9nRF24L01P12setRxAddressEyii+0x8a>
 800b294:	2c03      	cmp	r4, #3
 800b296:	d123      	bne.n	800b2e0 <_ZN9nRF24L01P12setRxAddressEyii+0x90>
                setupAw |= _NRF24L01P_SETUP_AW_AW_3BYTE;
 800b298:	f042 0201 	orr.w	r2, r2, #1
        setRegister(_NRF24L01P_REG_SETUP_AW, setupAw);
 800b29c:	2103      	movs	r1, #3
 800b29e:	4628      	mov	r0, r5
 800b2a0:	f7ff fd94 	bl	800adcc <_ZN9nRF24L01P11setRegisterEii>
    select();  //  Set CS Pin to low.
 800b2a4:	4628      	mov	r0, r5
 800b2a6:	f7ff fd79 	bl	800ad9c <_ZN9nRF24L01P6selectEv>
    int rxAddrPxRegister = _NRF24L01P_REG_RX_ADDR_P0 + ( pipe - NRF24L01P_PIPE_P0 );
 800b2aa:	f106 010a 	add.w	r1, r6, #10
    int cn = (_NRF24L01P_SPI_CMD_WR_REG | (rxAddrPxRegister & _NRF24L01P_REG_ADDRESS_MASK));
 800b2ae:	f041 0120 	orr.w	r1, r1, #32
    spiWrite(cn);
 800b2b2:	b2c9      	uxtb	r1, r1
 800b2b4:	4628      	mov	r0, r5
 800b2b6:	f7ff fd79 	bl	800adac <_ZN9nRF24L01P8spiWriteEh>
    while ( width-- > 0 ) {
 800b2ba:	2c00      	cmp	r4, #0
 800b2bc:	dd14      	ble.n	800b2e8 <_ZN9nRF24L01P12setRxAddressEyii+0x98>
        spiWrite((int) (address & 0xFF));
 800b2be:	b2f9      	uxtb	r1, r7
 800b2c0:	4628      	mov	r0, r5
        address >>= 8;
 800b2c2:	0a3f      	lsrs	r7, r7, #8
 800b2c4:	ea47 6708 	orr.w	r7, r7, r8, lsl #24
        spiWrite((int) (address & 0xFF));
 800b2c8:	f7ff fd70 	bl	800adac <_ZN9nRF24L01P8spiWriteEh>
        address >>= 8;
 800b2cc:	ea4f 2818 	mov.w	r8, r8, lsr #8
 800b2d0:	3c01      	subs	r4, #1
    while ( width-- > 0 ) {
 800b2d2:	e7f2      	b.n	800b2ba <_ZN9nRF24L01P12setRxAddressEyii+0x6a>
                setupAw |= _NRF24L01P_SETUP_AW_AW_4BYTE;
 800b2d4:	f042 0202 	orr.w	r2, r2, #2
                break;
 800b2d8:	e7e0      	b.n	800b29c <_ZN9nRF24L01P12setRxAddressEyii+0x4c>
                setupAw |= _NRF24L01P_SETUP_AW_AW_5BYTE;
 800b2da:	f042 0203 	orr.w	r2, r2, #3
                break;
 800b2de:	e7dd      	b.n	800b29c <_ZN9nRF24L01P12setRxAddressEyii+0x4c>
                error( "%sbad rx pipe %d\r\n", _nrf, width );
 800b2e0:	4622      	mov	r2, r4
 800b2e2:	e7bf      	b.n	800b264 <_ZN9nRF24L01P12setRxAddressEyii+0x14>
        width = 1;
 800b2e4:	2401      	movs	r4, #1
 800b2e6:	e7dd      	b.n	800b2a4 <_ZN9nRF24L01P12setRxAddressEyii+0x54>
    deselect();  //  Set CS Pin to high.
 800b2e8:	4628      	mov	r0, r5
 800b2ea:	f7ff fd5b 	bl	800ada4 <_ZN9nRF24L01P8deselectEv>
    int enRxAddr = getRegister(_NRF24L01P_REG_EN_RXADDR);
 800b2ee:	2102      	movs	r1, #2
 800b2f0:	4628      	mov	r0, r5
 800b2f2:	f7ff fdea 	bl	800aeca <_ZN9nRF24L01P11getRegisterEi>
    enRxAddr |= (1 << ( pipe - NRF24L01P_PIPE_P0 ) );
 800b2f6:	2201      	movs	r2, #1
 800b2f8:	40b2      	lsls	r2, r6
    setRegister(_NRF24L01P_REG_EN_RXADDR, enRxAddr);
 800b2fa:	4302      	orrs	r2, r0
 800b2fc:	2102      	movs	r1, #2
 800b2fe:	4628      	mov	r0, r5
}
 800b300:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    setRegister(_NRF24L01P_REG_EN_RXADDR, enRxAddr);
 800b304:	f7ff bd62 	b.w	800adcc <_ZN9nRF24L01P11setRegisterEii>
 800b308:	2000021c 	.word	0x2000021c
 800b30c:	0800e491 	.word	0x0800e491

0800b310 <_ZN9nRF24L01P12setTxAddressEyi>:
void nRF24L01P::setTxAddress(unsigned long long address, int width) {
 800b310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b314:	4605      	mov	r5, r0
    console_printf("%sset tx addr\n", _nrf); ////
 800b316:	f8df 8098 	ldr.w	r8, [pc, #152]	; 800b3b0 <_ZN9nRF24L01P12setTxAddressEyi+0xa0>
 800b31a:	4823      	ldr	r0, [pc, #140]	; (800b3a8 <_ZN9nRF24L01P12setTxAddressEyi+0x98>)
 800b31c:	f8d8 1000 	ldr.w	r1, [r8]
void nRF24L01P::setTxAddress(unsigned long long address, int width) {
 800b320:	4616      	mov	r6, r2
 800b322:	461f      	mov	r7, r3
 800b324:	9c06      	ldr	r4, [sp, #24]
    console_printf("%sset tx addr\n", _nrf); ////
 800b326:	f7f6 ff81 	bl	800222c <console_printf>
    int setupAw = getRegister(_NRF24L01P_REG_SETUP_AW) & ~_NRF24L01P_SETUP_AW_AW_MASK;
 800b32a:	2103      	movs	r1, #3
 800b32c:	4628      	mov	r0, r5
 800b32e:	f7ff fdcc 	bl	800aeca <_ZN9nRF24L01P11getRegisterEi>
    switch ( width ) {
 800b332:	2c04      	cmp	r4, #4
    int setupAw = getRegister(_NRF24L01P_REG_SETUP_AW) & ~_NRF24L01P_SETUP_AW_AW_MASK;
 800b334:	f020 0203 	bic.w	r2, r0, #3
    switch ( width ) {
 800b338:	d01c      	beq.n	800b374 <_ZN9nRF24L01P12setTxAddressEyi+0x64>
 800b33a:	2c05      	cmp	r4, #5
 800b33c:	d01d      	beq.n	800b37a <_ZN9nRF24L01P12setTxAddressEyi+0x6a>
 800b33e:	2c03      	cmp	r4, #3
 800b340:	d11e      	bne.n	800b380 <_ZN9nRF24L01P12setTxAddressEyi+0x70>
            setupAw |= _NRF24L01P_SETUP_AW_AW_3BYTE;
 800b342:	f042 0201 	orr.w	r2, r2, #1
    setRegister(_NRF24L01P_REG_SETUP_AW, setupAw);
 800b346:	2103      	movs	r1, #3
 800b348:	4628      	mov	r0, r5
 800b34a:	f7ff fd3f 	bl	800adcc <_ZN9nRF24L01P11setRegisterEii>
    select();  //  Set CS Pin to low.
 800b34e:	4628      	mov	r0, r5
 800b350:	f7ff fd24 	bl	800ad9c <_ZN9nRF24L01P6selectEv>
    spiWrite(cn);
 800b354:	2130      	movs	r1, #48	; 0x30
 800b356:	4628      	mov	r0, r5
 800b358:	f7ff fd28 	bl	800adac <_ZN9nRF24L01P8spiWriteEh>
    while ( width-- > 0 ) {
 800b35c:	2c00      	cmp	r4, #0
 800b35e:	dd1d      	ble.n	800b39c <_ZN9nRF24L01P12setTxAddressEyi+0x8c>
        spiWrite((int) (address & 0xFF));
 800b360:	b2f1      	uxtb	r1, r6
 800b362:	4628      	mov	r0, r5
        address >>= 8;
 800b364:	0a36      	lsrs	r6, r6, #8
 800b366:	ea46 6607 	orr.w	r6, r6, r7, lsl #24
        spiWrite((int) (address & 0xFF));
 800b36a:	f7ff fd1f 	bl	800adac <_ZN9nRF24L01P8spiWriteEh>
        address >>= 8;
 800b36e:	0a3f      	lsrs	r7, r7, #8
 800b370:	3c01      	subs	r4, #1
    while ( width-- > 0 ) {
 800b372:	e7f3      	b.n	800b35c <_ZN9nRF24L01P12setTxAddressEyi+0x4c>
            setupAw |= _NRF24L01P_SETUP_AW_AW_4BYTE;
 800b374:	f042 0202 	orr.w	r2, r2, #2
            break;
 800b378:	e7e5      	b.n	800b346 <_ZN9nRF24L01P12setTxAddressEyi+0x36>
            setupAw |= _NRF24L01P_SETUP_AW_AW_5BYTE;
 800b37a:	f042 0203 	orr.w	r2, r2, #3
            break;
 800b37e:	e7e2      	b.n	800b346 <_ZN9nRF24L01P12setTxAddressEyi+0x36>
            error( "%sbad tx addr width %d\r\n", _nrf, width );
 800b380:	4622      	mov	r2, r4
 800b382:	f8d8 1000 	ldr.w	r1, [r8]
 800b386:	4809      	ldr	r0, [pc, #36]	; (800b3ac <_ZN9nRF24L01P12setTxAddressEyi+0x9c>)
 800b388:	f7f6 ff50 	bl	800222c <console_printf>
 800b38c:	f7f6 fe74 	bl	8002078 <console_flush>
 800b390:	2300      	movs	r3, #0
 800b392:	461a      	mov	r2, r3
 800b394:	4619      	mov	r1, r3
 800b396:	4618      	mov	r0, r3
 800b398:	f7f8 fb8c 	bl	8003ab4 <__assert_func>
    deselect();  //  Set CS Pin to high.
 800b39c:	4628      	mov	r0, r5
}
 800b39e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    deselect();  //  Set CS Pin to high.
 800b3a2:	f7ff bcff 	b.w	800ada4 <_ZN9nRF24L01P8deselectEv>
 800b3a6:	bf00      	nop
 800b3a8:	0800e4a4 	.word	0x0800e4a4
 800b3ac:	0800e4b3 	.word	0x0800e4b3
 800b3b0:	2000021c 	.word	0x2000021c

0800b3b4 <_ZN9nRF24L01P12getRxAddressEi>:
    if ( ( pipe < NRF24L01P_PIPE_P0 ) || ( pipe > NRF24L01P_PIPE_P5 ) ) {
 800b3b4:	2905      	cmp	r1, #5
unsigned long long nRF24L01P::getRxAddress(int pipe) {
 800b3b6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3ba:	4606      	mov	r6, r0
 800b3bc:	460f      	mov	r7, r1
    if ( ( pipe < NRF24L01P_PIPE_P0 ) || ( pipe > NRF24L01P_PIPE_P5 ) ) {
 800b3be:	d90d      	bls.n	800b3dc <_ZN9nRF24L01P12getRxAddressEi+0x28>
        error( "%sbad rx pipe %d\r\n", _nrf, pipe );
 800b3c0:	4b34      	ldr	r3, [pc, #208]	; (800b494 <_ZN9nRF24L01P12getRxAddressEi+0xe0>)
 800b3c2:	460a      	mov	r2, r1
 800b3c4:	4834      	ldr	r0, [pc, #208]	; (800b498 <_ZN9nRF24L01P12getRxAddressEi+0xe4>)
 800b3c6:	6819      	ldr	r1, [r3, #0]
                error( "%sbad rx addr width %d\r\n", _nrf, setupAw );
 800b3c8:	f7f6 ff30 	bl	800222c <console_printf>
 800b3cc:	f7f6 fe54 	bl	8002078 <console_flush>
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	461a      	mov	r2, r3
 800b3d4:	4619      	mov	r1, r3
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	f7f8 fb6c 	bl	8003ab4 <__assert_func>
    if ( ( pipe == NRF24L01P_PIPE_P0 ) || ( pipe == NRF24L01P_PIPE_P1 ) ) {
 800b3dc:	2901      	cmp	r1, #1
 800b3de:	d855      	bhi.n	800b48c <_ZN9nRF24L01P12getRxAddressEi+0xd8>
        int setupAw = getRegister(_NRF24L01P_REG_SETUP_AW) & _NRF24L01P_SETUP_AW_AW_MASK;
 800b3e0:	2103      	movs	r1, #3
 800b3e2:	f7ff fd72 	bl	800aeca <_ZN9nRF24L01P11getRegisterEi>
 800b3e6:	f000 0003 	and.w	r0, r0, #3
        switch ( setupAw ) {
 800b3ea:	2802      	cmp	r0, #2
 800b3ec:	d006      	beq.n	800b3fc <_ZN9nRF24L01P12getRxAddressEi+0x48>
 800b3ee:	2803      	cmp	r0, #3
 800b3f0:	d044      	beq.n	800b47c <_ZN9nRF24L01P12getRxAddressEi+0xc8>
 800b3f2:	2801      	cmp	r0, #1
 800b3f4:	d145      	bne.n	800b482 <_ZN9nRF24L01P12getRxAddressEi+0xce>
                width = 3;
 800b3f6:	f04f 0b03 	mov.w	fp, #3
 800b3fa:	e001      	b.n	800b400 <_ZN9nRF24L01P12getRxAddressEi+0x4c>
                width = 4;
 800b3fc:	f04f 0b04 	mov.w	fp, #4
    select();  //  Set CS Pin to low.
 800b400:	4630      	mov	r0, r6
 800b402:	f7ff fccb 	bl	800ad9c <_ZN9nRF24L01P6selectEv>
    int rxAddrPxRegister = _NRF24L01P_REG_RX_ADDR_P0 + ( pipe - NRF24L01P_PIPE_P0 );
 800b406:	f107 010a 	add.w	r1, r7, #10
    spiWrite(cn);
 800b40a:	b2c9      	uxtb	r1, r1
 800b40c:	4630      	mov	r0, r6
 800b40e:	f7ff fccd 	bl	800adac <_ZN9nRF24L01P8spiWriteEh>
    for ( int i=0; i<width; i++ ) {
 800b412:	f04f 0a00 	mov.w	sl, #0
    unsigned long long address = 0;
 800b416:	2400      	movs	r4, #0
 800b418:	2500      	movs	r5, #0
        address |= ( ( (unsigned long long)( spiWrite(_NRF24L01P_SPI_CMD_NOP) & 0xFF ) ) << (i*8) );
 800b41a:	21ff      	movs	r1, #255	; 0xff
 800b41c:	4630      	mov	r0, r6
 800b41e:	f7ff fcc5 	bl	800adac <_ZN9nRF24L01P8spiWriteEh>
 800b422:	2300      	movs	r3, #0
 800b424:	b2c2      	uxtb	r2, r0
 800b426:	e9cd 2300 	strd	r2, r3, [sp]
 800b42a:	9800      	ldr	r0, [sp, #0]
 800b42c:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800b430:	f1a3 0120 	sub.w	r1, r3, #32
 800b434:	f1c3 0220 	rsb	r2, r3, #32
 800b438:	fa00 f901 	lsl.w	r9, r0, r1
 800b43c:	fa20 f202 	lsr.w	r2, r0, r2
    for ( int i=0; i<width; i++ ) {
 800b440:	f10a 0a01 	add.w	sl, sl, #1
        address |= ( ( (unsigned long long)( spiWrite(_NRF24L01P_SPI_CMD_NOP) & 0xFF ) ) << (i*8) );
 800b444:	ea49 0902 	orr.w	r9, r9, r2
 800b448:	fa00 f803 	lsl.w	r8, r0, r3
    for ( int i=0; i<width; i++ ) {
 800b44c:	45d3      	cmp	fp, sl
        address |= ( ( (unsigned long long)( spiWrite(_NRF24L01P_SPI_CMD_NOP) & 0xFF ) ) << (i*8) );
 800b44e:	ea44 0408 	orr.w	r4, r4, r8
 800b452:	ea45 0509 	orr.w	r5, r5, r9
    for ( int i=0; i<width; i++ ) {
 800b456:	d1e0      	bne.n	800b41a <_ZN9nRF24L01P12getRxAddressEi+0x66>
    deselect();  //  Set CS Pin to high.
 800b458:	4630      	mov	r0, r6
 800b45a:	f7ff fca3 	bl	800ada4 <_ZN9nRF24L01P8deselectEv>
    if ( !( ( pipe == NRF24L01P_PIPE_P0 ) || ( pipe == NRF24L01P_PIPE_P1 ) ) ) {
 800b45e:	2f01      	cmp	r7, #1
 800b460:	d907      	bls.n	800b472 <_ZN9nRF24L01P12getRxAddressEi+0xbe>
        address |= ( getRxAddress(NRF24L01P_PIPE_P1) & ~((unsigned long long) 0xFF) );
 800b462:	2101      	movs	r1, #1
 800b464:	4630      	mov	r0, r6
 800b466:	f7ff ffa5 	bl	800b3b4 <_ZN9nRF24L01P12getRxAddressEi>
 800b46a:	f020 02ff 	bic.w	r2, r0, #255	; 0xff
 800b46e:	4314      	orrs	r4, r2
 800b470:	430d      	orrs	r5, r1
}
 800b472:	4620      	mov	r0, r4
 800b474:	4629      	mov	r1, r5
 800b476:	b003      	add	sp, #12
 800b478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                width = 5;
 800b47c:	f04f 0b05 	mov.w	fp, #5
                break;
 800b480:	e7be      	b.n	800b400 <_ZN9nRF24L01P12getRxAddressEi+0x4c>
                error( "%sbad rx addr width %d\r\n", _nrf, setupAw );
 800b482:	4b04      	ldr	r3, [pc, #16]	; (800b494 <_ZN9nRF24L01P12getRxAddressEi+0xe0>)
 800b484:	2200      	movs	r2, #0
 800b486:	6819      	ldr	r1, [r3, #0]
 800b488:	4804      	ldr	r0, [pc, #16]	; (800b49c <_ZN9nRF24L01P12getRxAddressEi+0xe8>)
 800b48a:	e79d      	b.n	800b3c8 <_ZN9nRF24L01P12getRxAddressEi+0x14>
        width = 1;
 800b48c:	f04f 0b01 	mov.w	fp, #1
 800b490:	e7b6      	b.n	800b400 <_ZN9nRF24L01P12getRxAddressEi+0x4c>
 800b492:	bf00      	nop
 800b494:	2000021c 	.word	0x2000021c
 800b498:	0800e491 	.word	0x0800e491
 800b49c:	0800e478 	.word	0x0800e478

0800b4a0 <_ZN9nRF24L01P12getTxAddressEv>:
unsigned long long nRF24L01P::getTxAddress(void) {
 800b4a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int setupAw = getRegister(_NRF24L01P_REG_SETUP_AW) & _NRF24L01P_SETUP_AW_AW_MASK;
 800b4a4:	2103      	movs	r1, #3
unsigned long long nRF24L01P::getTxAddress(void) {
 800b4a6:	4606      	mov	r6, r0
    int setupAw = getRegister(_NRF24L01P_REG_SETUP_AW) & _NRF24L01P_SETUP_AW_AW_MASK;
 800b4a8:	f7ff fd0f 	bl	800aeca <_ZN9nRF24L01P11getRegisterEi>
 800b4ac:	f000 0003 	and.w	r0, r0, #3
    switch ( setupAw ) {
 800b4b0:	2802      	cmp	r0, #2
 800b4b2:	d006      	beq.n	800b4c2 <_ZN9nRF24L01P12getTxAddressEv+0x22>
 800b4b4:	2803      	cmp	r0, #3
 800b4b6:	d040      	beq.n	800b53a <_ZN9nRF24L01P12getTxAddressEv+0x9a>
 800b4b8:	2801      	cmp	r0, #1
 800b4ba:	d130      	bne.n	800b51e <_ZN9nRF24L01P12getTxAddressEv+0x7e>
            width = 3;
 800b4bc:	f04f 0a03 	mov.w	sl, #3
 800b4c0:	e001      	b.n	800b4c6 <_ZN9nRF24L01P12getTxAddressEv+0x26>
            width = 4;
 800b4c2:	f04f 0a04 	mov.w	sl, #4
    select();  //  Set CS Pin to low.
 800b4c6:	4630      	mov	r0, r6
 800b4c8:	f7ff fc68 	bl	800ad9c <_ZN9nRF24L01P6selectEv>
    spiWrite(cn);
 800b4cc:	2110      	movs	r1, #16
 800b4ce:	4630      	mov	r0, r6
 800b4d0:	f7ff fc6c 	bl	800adac <_ZN9nRF24L01P8spiWriteEh>
    for ( int i=0; i<width; i++ ) {
 800b4d4:	2700      	movs	r7, #0
    unsigned long long address = 0;
 800b4d6:	f04f 0800 	mov.w	r8, #0
 800b4da:	f04f 0900 	mov.w	r9, #0
        address |= ( ( (unsigned long long)( spiWrite(_NRF24L01P_SPI_CMD_NOP) & 0xFF ) ) << (i*8) );
 800b4de:	21ff      	movs	r1, #255	; 0xff
 800b4e0:	4630      	mov	r0, r6
 800b4e2:	f7ff fc63 	bl	800adac <_ZN9nRF24L01P8spiWriteEh>
 800b4e6:	00fb      	lsls	r3, r7, #3
 800b4e8:	fa5f fb80 	uxtb.w	fp, r0
 800b4ec:	f1a3 0120 	sub.w	r1, r3, #32
 800b4f0:	f1c3 0220 	rsb	r2, r3, #32
 800b4f4:	fa0b f501 	lsl.w	r5, fp, r1
 800b4f8:	fa2b f202 	lsr.w	r2, fp, r2
    for ( int i=0; i<width; i++ ) {
 800b4fc:	3701      	adds	r7, #1
        address |= ( ( (unsigned long long)( spiWrite(_NRF24L01P_SPI_CMD_NOP) & 0xFF ) ) << (i*8) );
 800b4fe:	4315      	orrs	r5, r2
 800b500:	fa0b f403 	lsl.w	r4, fp, r3
    for ( int i=0; i<width; i++ ) {
 800b504:	45ba      	cmp	sl, r7
        address |= ( ( (unsigned long long)( spiWrite(_NRF24L01P_SPI_CMD_NOP) & 0xFF ) ) << (i*8) );
 800b506:	ea48 0804 	orr.w	r8, r8, r4
 800b50a:	ea49 0905 	orr.w	r9, r9, r5
    for ( int i=0; i<width; i++ ) {
 800b50e:	d1e6      	bne.n	800b4de <_ZN9nRF24L01P12getTxAddressEv+0x3e>
    deselect();  //  Set CS Pin to high.
 800b510:	4630      	mov	r0, r6
 800b512:	f7ff fc47 	bl	800ada4 <_ZN9nRF24L01P8deselectEv>
}
 800b516:	4640      	mov	r0, r8
 800b518:	4649      	mov	r1, r9
 800b51a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            error( "%sbad tx addr width %d\r\n", _nrf, setupAw );
 800b51e:	4b08      	ldr	r3, [pc, #32]	; (800b540 <_ZN9nRF24L01P12getTxAddressEv+0xa0>)
 800b520:	2200      	movs	r2, #0
 800b522:	6819      	ldr	r1, [r3, #0]
 800b524:	4807      	ldr	r0, [pc, #28]	; (800b544 <_ZN9nRF24L01P12getTxAddressEv+0xa4>)
 800b526:	f7f6 fe81 	bl	800222c <console_printf>
 800b52a:	f7f6 fda5 	bl	8002078 <console_flush>
 800b52e:	2300      	movs	r3, #0
 800b530:	461a      	mov	r2, r3
 800b532:	4619      	mov	r1, r3
 800b534:	4618      	mov	r0, r3
 800b536:	f7f8 fabd 	bl	8003ab4 <__assert_func>
            width = 5;
 800b53a:	f04f 0a05 	mov.w	sl, #5
 800b53e:	e7c2      	b.n	800b4c6 <_ZN9nRF24L01P12getTxAddressEv+0x26>
 800b540:	2000021c 	.word	0x2000021c
 800b544:	0800e4b3 	.word	0x0800e4b3

0800b548 <_ZN9nRF24L01P17getStatusRegisterEv>:
int nRF24L01P::getStatusRegister(void) {
 800b548:	b538      	push	{r3, r4, r5, lr}
 800b54a:	4604      	mov	r4, r0
    select();  //  Set CS Pin to low.
 800b54c:	f7ff fc26 	bl	800ad9c <_ZN9nRF24L01P6selectEv>
    int status = spiWrite(_NRF24L01P_SPI_CMD_NOP);
 800b550:	21ff      	movs	r1, #255	; 0xff
 800b552:	4620      	mov	r0, r4
 800b554:	f7ff fc2a 	bl	800adac <_ZN9nRF24L01P8spiWriteEh>
 800b558:	4605      	mov	r5, r0
    deselect();  //  Set CS Pin to high.
 800b55a:	4620      	mov	r0, r4
 800b55c:	f7ff fc22 	bl	800ada4 <_ZN9nRF24L01P8deselectEv>
}
 800b560:	4628      	mov	r0, r5
 800b562:	bd38      	pop	{r3, r4, r5, pc}

0800b564 <_ZN9nRF24L01P8readableEi>:
    if ( ( pipe < NRF24L01P_PIPE_P0 ) || ( pipe > NRF24L01P_PIPE_P5 ) ) {
 800b564:	2905      	cmp	r1, #5
bool nRF24L01P::readable(int pipe) {
 800b566:	b510      	push	{r4, lr}
 800b568:	460c      	mov	r4, r1
    if ( ( pipe < NRF24L01P_PIPE_P0 ) || ( pipe > NRF24L01P_PIPE_P5 ) ) {
 800b56a:	d90d      	bls.n	800b588 <_ZN9nRF24L01P8readableEi+0x24>
        error( "%sbad readable pipe %d\r\n", _nrf, pipe );
 800b56c:	4b0e      	ldr	r3, [pc, #56]	; (800b5a8 <_ZN9nRF24L01P8readableEi+0x44>)
 800b56e:	460a      	mov	r2, r1
 800b570:	480e      	ldr	r0, [pc, #56]	; (800b5ac <_ZN9nRF24L01P8readableEi+0x48>)
 800b572:	6819      	ldr	r1, [r3, #0]
 800b574:	f7f6 fe5a 	bl	800222c <console_printf>
 800b578:	f7f6 fd7e 	bl	8002078 <console_flush>
 800b57c:	2300      	movs	r3, #0
 800b57e:	461a      	mov	r2, r3
 800b580:	4619      	mov	r1, r3
 800b582:	4618      	mov	r0, r3
 800b584:	f7f8 fa96 	bl	8003ab4 <__assert_func>
    int status = getStatusRegister();
 800b588:	f7ff ffde 	bl	800b548 <_ZN9nRF24L01P17getStatusRegisterEv>
    return ( ( status & _NRF24L01P_STATUS_RX_DR ) && ( ( ( status & _NRF24L01P_STATUS_RX_P_NO ) >> 1 ) == ( pipe & 0x7 ) ) );
 800b58c:	f010 0340 	ands.w	r3, r0, #64	; 0x40
 800b590:	d007      	beq.n	800b5a2 <_ZN9nRF24L01P8readableEi+0x3e>
 800b592:	ea84 0460 	eor.w	r4, r4, r0, asr #1
 800b596:	f014 0f07 	tst.w	r4, #7
 800b59a:	bf0c      	ite	eq
 800b59c:	2001      	moveq	r0, #1
 800b59e:	2000      	movne	r0, #0
}
 800b5a0:	bd10      	pop	{r4, pc}
    return ( ( status & _NRF24L01P_STATUS_RX_DR ) && ( ( ( status & _NRF24L01P_STATUS_RX_P_NO ) >> 1 ) == ( pipe & 0x7 ) ) );
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	e7fc      	b.n	800b5a0 <_ZN9nRF24L01P8readableEi+0x3c>
 800b5a6:	bf00      	nop
 800b5a8:	2000021c 	.word	0x2000021c
 800b5ac:	0800e586 	.word	0x0800e586

0800b5b0 <_ZN9nRF24L01P12readablePipeEv>:
int nRF24L01P::readablePipe(void) {
 800b5b0:	b508      	push	{r3, lr}
    int status = getStatusRegister();
 800b5b2:	f7ff ffc9 	bl	800b548 <_ZN9nRF24L01P17getStatusRegisterEv>
    if (! (status & _NRF24L01P_STATUS_RX_DR) ) { return -1; }  //  Nothing to read now.
 800b5b6:	0643      	lsls	r3, r0, #25
    return ( status & _NRF24L01P_STATUS_RX_P_NO ) >> 1;  //  Return the pipe number.
 800b5b8:	bf4c      	ite	mi
 800b5ba:	f3c0 0042 	ubfxmi	r0, r0, #1, #3
    if (! (status & _NRF24L01P_STATUS_RX_DR) ) { return -1; }  //  Nothing to read now.
 800b5be:	f04f 30ff 	movpl.w	r0, #4294967295	; 0xffffffff
}
 800b5c2:	bd08      	pop	{r3, pc}

0800b5c4 <_ZN9nRF24L01P4readEiPci>:
    if ( ( pipe < NRF24L01P_PIPE_P0 ) || ( pipe > NRF24L01P_PIPE_P5 ) ) {
 800b5c4:	2905      	cmp	r1, #5
int nRF24L01P::read(int pipe, char *data, int count) {
 800b5c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5c8:	4604      	mov	r4, r0
 800b5ca:	4617      	mov	r7, r2
 800b5cc:	461e      	mov	r6, r3
    if ( ( pipe < NRF24L01P_PIPE_P0 ) || ( pipe > NRF24L01P_PIPE_P5 ) ) {
 800b5ce:	d90d      	bls.n	800b5ec <_ZN9nRF24L01P4readEiPci+0x28>
        error( "%sbad rx pipe %d\r\n", _nrf, pipe );
 800b5d0:	4b2c      	ldr	r3, [pc, #176]	; (800b684 <_ZN9nRF24L01P4readEiPci+0xc0>)
 800b5d2:	460a      	mov	r2, r1
 800b5d4:	482c      	ldr	r0, [pc, #176]	; (800b688 <_ZN9nRF24L01P4readEiPci+0xc4>)
 800b5d6:	6819      	ldr	r1, [r3, #0]
 800b5d8:	f7f6 fe28 	bl	800222c <console_printf>
 800b5dc:	f7f6 fd4c 	bl	8002078 <console_flush>
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	461a      	mov	r2, r3
 800b5e4:	4619      	mov	r1, r3
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	f7f8 fa64 	bl	8003ab4 <__assert_func>
    if ( count <= 0 ) return 0;
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	dc02      	bgt.n	800b5f6 <_ZN9nRF24L01P4readEiPci+0x32>
 800b5f0:	2500      	movs	r5, #0
}
 800b5f2:	4628      	mov	r0, r5
 800b5f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ( readable(pipe) ) {
 800b5f6:	f7ff ffb5 	bl	800b564 <_ZN9nRF24L01P8readableEi>
 800b5fa:	2800      	cmp	r0, #0
 800b5fc:	d0f8      	beq.n	800b5f0 <_ZN9nRF24L01P4readEiPci+0x2c>
        select();  //  Set CS Pin to low.
 800b5fe:	4620      	mov	r0, r4
 800b600:	f7ff fbcc 	bl	800ad9c <_ZN9nRF24L01P6selectEv>
        spiWrite(_NRF24L01P_SPI_CMD_R_RX_PL_WID);
 800b604:	2160      	movs	r1, #96	; 0x60
 800b606:	4620      	mov	r0, r4
 800b608:	f7ff fbd0 	bl	800adac <_ZN9nRF24L01P8spiWriteEh>
        int rxPayloadWidth = spiWrite(_NRF24L01P_SPI_CMD_NOP);
 800b60c:	21ff      	movs	r1, #255	; 0xff
 800b60e:	4620      	mov	r0, r4
 800b610:	f7ff fbcc 	bl	800adac <_ZN9nRF24L01P8spiWriteEh>
 800b614:	4605      	mov	r5, r0
        deselect();  //  Set CS Pin to high.
 800b616:	4620      	mov	r0, r4
 800b618:	f7ff fbc4 	bl	800ada4 <_ZN9nRF24L01P8deselectEv>
        if ( ( rxPayloadWidth < 0 ) || ( rxPayloadWidth > _NRF24L01P_RX_FIFO_SIZE ) ) {
 800b61c:	2d20      	cmp	r5, #32
 800b61e:	d910      	bls.n	800b642 <_ZN9nRF24L01P4readEiPci+0x7e>
            select();  //  Set CS Pin to low.
 800b620:	4620      	mov	r0, r4
 800b622:	f7ff fbbb 	bl	800ad9c <_ZN9nRF24L01P6selectEv>
            spiWrite(_NRF24L01P_SPI_CMD_FLUSH_RX);
 800b626:	21e2      	movs	r1, #226	; 0xe2
 800b628:	4620      	mov	r0, r4
 800b62a:	f7ff fbbf 	bl	800adac <_ZN9nRF24L01P8spiWriteEh>
            spiWrite(_NRF24L01P_SPI_CMD_NOP);
 800b62e:	21ff      	movs	r1, #255	; 0xff
 800b630:	4620      	mov	r0, r4
 800b632:	f7ff fbbb 	bl	800adac <_ZN9nRF24L01P8spiWriteEh>
            deselect();  //  Set CS Pin to high.
 800b636:	4620      	mov	r0, r4
 800b638:	f7ff fbb4 	bl	800ada4 <_ZN9nRF24L01P8deselectEv>
    return -1;
 800b63c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800b640:	e7d7      	b.n	800b5f2 <_ZN9nRF24L01P4readEiPci+0x2e>
 800b642:	2e20      	cmp	r6, #32
 800b644:	bfa8      	it	ge
 800b646:	2620      	movge	r6, #32
            select();  //  Set CS Pin to low.
 800b648:	4620      	mov	r0, r4
 800b64a:	42b5      	cmp	r5, r6
 800b64c:	bfa8      	it	ge
 800b64e:	4635      	movge	r5, r6
 800b650:	f7ff fba4 	bl	800ad9c <_ZN9nRF24L01P6selectEv>
            spiWrite(_NRF24L01P_SPI_CMD_RD_RX_PAYLOAD);
 800b654:	2161      	movs	r1, #97	; 0x61
 800b656:	4620      	mov	r0, r4
 800b658:	f7ff fba8 	bl	800adac <_ZN9nRF24L01P8spiWriteEh>
 800b65c:	463e      	mov	r6, r7
            for ( int i = 0; i < count; i++ ) {
 800b65e:	1bf3      	subs	r3, r6, r7
 800b660:	42ab      	cmp	r3, r5
 800b662:	da06      	bge.n	800b672 <_ZN9nRF24L01P4readEiPci+0xae>
                *data++ = spiWrite(_NRF24L01P_SPI_CMD_NOP);
 800b664:	21ff      	movs	r1, #255	; 0xff
 800b666:	4620      	mov	r0, r4
 800b668:	f7ff fba0 	bl	800adac <_ZN9nRF24L01P8spiWriteEh>
 800b66c:	f806 0b01 	strb.w	r0, [r6], #1
            for ( int i = 0; i < count; i++ ) {
 800b670:	e7f5      	b.n	800b65e <_ZN9nRF24L01P4readEiPci+0x9a>
            deselect();  //  Set CS Pin to high.
 800b672:	4620      	mov	r0, r4
 800b674:	f7ff fb96 	bl	800ada4 <_ZN9nRF24L01P8deselectEv>
            setRegister(_NRF24L01P_REG_STATUS, _NRF24L01P_STATUS_RX_DR);
 800b678:	2240      	movs	r2, #64	; 0x40
 800b67a:	2107      	movs	r1, #7
 800b67c:	4620      	mov	r0, r4
 800b67e:	f7ff fba5 	bl	800adcc <_ZN9nRF24L01P11setRegisterEii>
            return count;
 800b682:	e7b6      	b.n	800b5f2 <_ZN9nRF24L01P4readEiPci+0x2e>
 800b684:	2000021c 	.word	0x2000021c
 800b688:	0800e491 	.word	0x0800e491

0800b68c <_ZN9nRF24L01P5writeEiPci>:
int nRF24L01P::write(int pipe, char *data, int count) {
 800b68c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b690:	461d      	mov	r5, r3
 800b692:	4604      	mov	r4, r0
 800b694:	4617      	mov	r7, r2
    int originalCe = ce_value;
 800b696:	f8d0 8010 	ldr.w	r8, [r0, #16]
    disable();  //  Set CE Pin to low.
 800b69a:	f7ff fb7a 	bl	800ad92 <_ZN9nRF24L01P7disableEv>
    if ( count <= 0 ) return 0;
 800b69e:	2d00      	cmp	r5, #0
 800b6a0:	dd47      	ble.n	800b732 <_ZN9nRF24L01P5writeEiPci+0xa6>
 800b6a2:	2d20      	cmp	r5, #32
    setRegister(_NRF24L01P_REG_STATUS, _NRF24L01P_STATUS_TX_DS);
 800b6a4:	f04f 0220 	mov.w	r2, #32
 800b6a8:	f04f 0107 	mov.w	r1, #7
 800b6ac:	4620      	mov	r0, r4
 800b6ae:	bfa8      	it	ge
 800b6b0:	2520      	movge	r5, #32
 800b6b2:	f7ff fb8b 	bl	800adcc <_ZN9nRF24L01P11setRegisterEii>
    select();  //  Set CS Pin to low.
 800b6b6:	4620      	mov	r0, r4
 800b6b8:	f7ff fb70 	bl	800ad9c <_ZN9nRF24L01P6selectEv>
    spiWrite(_NRF24L01P_SPI_CMD_WR_TX_PAYLOAD);
 800b6bc:	21a0      	movs	r1, #160	; 0xa0
 800b6be:	4620      	mov	r0, r4
 800b6c0:	f7ff fb74 	bl	800adac <_ZN9nRF24L01P8spiWriteEh>
 800b6c4:	463e      	mov	r6, r7
        spiWrite(*data++);
 800b6c6:	f816 1b01 	ldrb.w	r1, [r6], #1
 800b6ca:	4620      	mov	r0, r4
 800b6cc:	f7ff fb6e 	bl	800adac <_ZN9nRF24L01P8spiWriteEh>
    for ( int i = 0; i < count; i++ ) {
 800b6d0:	1bf3      	subs	r3, r6, r7
 800b6d2:	42ab      	cmp	r3, r5
 800b6d4:	dbf7      	blt.n	800b6c6 <_ZN9nRF24L01P5writeEiPci+0x3a>
    deselect();  //  Set CS Pin to high.
 800b6d6:	4620      	mov	r0, r4
 800b6d8:	f7ff fb64 	bl	800ada4 <_ZN9nRF24L01P8deselectEv>
    setTransmitMode();
 800b6dc:	4620      	mov	r0, r4
    int originalMode = mode;
 800b6de:	6966      	ldr	r6, [r4, #20]
    setTransmitMode();
 800b6e0:	f7ff fc42 	bl	800af68 <_ZN9nRF24L01P15setTransmitModeEv>
    enable();  //  Set CE Pin to high.
 800b6e4:	4620      	mov	r0, r4
 800b6e6:	f7ff fb48 	bl	800ad7a <_ZN9nRF24L01P6enableEv>
    os_time_delay(ticks);
 800b6ea:	2001      	movs	r0, #1
 800b6ec:	f7f9 fbea 	bl	8004ec4 <os_time_delay>
    disable();  //  Set CE Pin to low.
 800b6f0:	4620      	mov	r0, r4
 800b6f2:	f7ff fb4e 	bl	800ad92 <_ZN9nRF24L01P7disableEv>
    while ( !( getStatusRegister() & _NRF24L01P_STATUS_TX_DS ) ) {
 800b6f6:	4620      	mov	r0, r4
 800b6f8:	f7ff ff26 	bl	800b548 <_ZN9nRF24L01P17getStatusRegisterEv>
 800b6fc:	0683      	lsls	r3, r0, #26
 800b6fe:	d5fa      	bpl.n	800b6f6 <_ZN9nRF24L01P5writeEiPci+0x6a>
    setRegister(_NRF24L01P_REG_STATUS, _NRF24L01P_STATUS_TX_DS);
 800b700:	2220      	movs	r2, #32
 800b702:	2107      	movs	r1, #7
 800b704:	4620      	mov	r0, r4
 800b706:	f7ff fb61 	bl	800adcc <_ZN9nRF24L01P11setRegisterEii>
    if ( originalMode == _NRF24L01P_MODE_RX ) {
 800b70a:	2e03      	cmp	r6, #3
 800b70c:	d102      	bne.n	800b714 <_ZN9nRF24L01P5writeEiPci+0x88>
        setReceiveMode();
 800b70e:	4620      	mov	r0, r4
 800b710:	f7ff fc0c 	bl	800af2c <_ZN9nRF24L01P14setReceiveModeEv>
    if (originalCe) { enable(); }   //  Set CE Pin to high.
 800b714:	4620      	mov	r0, r4
 800b716:	f1b8 0f00 	cmp.w	r8, #0
 800b71a:	d007      	beq.n	800b72c <_ZN9nRF24L01P5writeEiPci+0xa0>
 800b71c:	f7ff fb2d 	bl	800ad7a <_ZN9nRF24L01P6enableEv>
    os_time_delay(ticks);
 800b720:	2001      	movs	r0, #1
 800b722:	f7f9 fbcf 	bl	8004ec4 <os_time_delay>
}
 800b726:	4628      	mov	r0, r5
 800b728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else { disable(); }             //  Set CE Pin to low.
 800b72c:	f7ff fb31 	bl	800ad92 <_ZN9nRF24L01P7disableEv>
 800b730:	e7f6      	b.n	800b720 <_ZN9nRF24L01P5writeEiPci+0x94>
    if ( count <= 0 ) return 0;
 800b732:	2500      	movs	r5, #0
 800b734:	e7f7      	b.n	800b726 <_ZN9nRF24L01P5writeEiPci+0x9a>

0800b736 <_ZN9nRF24L01P7flushRxEv>:
void nRF24L01P::flushRx(void) {
 800b736:	b510      	push	{r4, lr}
 800b738:	4604      	mov	r4, r0
    select();  //  Set CS Pin to low.
 800b73a:	f7ff fb2f 	bl	800ad9c <_ZN9nRF24L01P6selectEv>
    spiWrite(_NRF24L01P_SPI_CMD_FLUSH_RX);
 800b73e:	21e2      	movs	r1, #226	; 0xe2
 800b740:	4620      	mov	r0, r4
 800b742:	f7ff fb33 	bl	800adac <_ZN9nRF24L01P8spiWriteEh>
    spiWrite(_NRF24L01P_SPI_CMD_NOP);
 800b746:	4620      	mov	r0, r4
 800b748:	21ff      	movs	r1, #255	; 0xff
 800b74a:	f7ff fb2f 	bl	800adac <_ZN9nRF24L01P8spiWriteEh>
    deselect();  //  Set CS Pin to high.
 800b74e:	4620      	mov	r0, r4
}
 800b750:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    deselect();  //  Set CS Pin to high.
 800b754:	f7ff bb26 	b.w	800ada4 <_ZN9nRF24L01P8deselectEv>

0800b758 <_ZN9nRF24L01P7flushTxEv>:
void nRF24L01P::flushTx(void) {
 800b758:	b510      	push	{r4, lr}
 800b75a:	4604      	mov	r4, r0
    select();  //  Set CS Pin to low.
 800b75c:	f7ff fb1e 	bl	800ad9c <_ZN9nRF24L01P6selectEv>
    spiWrite(_NRF24L01P_SPI_CMD_FLUSH_TX);
 800b760:	21e1      	movs	r1, #225	; 0xe1
 800b762:	4620      	mov	r0, r4
 800b764:	f7ff fb22 	bl	800adac <_ZN9nRF24L01P8spiWriteEh>
    spiWrite(_NRF24L01P_SPI_CMD_NOP);
 800b768:	4620      	mov	r0, r4
 800b76a:	21ff      	movs	r1, #255	; 0xff
 800b76c:	f7ff fb1e 	bl	800adac <_ZN9nRF24L01P8spiWriteEh>
    deselect();  //  Set CS Pin to high.
 800b770:	4620      	mov	r0, r4
}
 800b772:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    deselect();  //  Set CS Pin to high.
 800b776:	f7ff bb15 	b.w	800ada4 <_ZN9nRF24L01P8deselectEv>

0800b77a <_ZN9nRF24L01P9flushTxRxEv>:
void nRF24L01P::flushTxRx(void) {
 800b77a:	b510      	push	{r4, lr}
 800b77c:	4604      	mov	r4, r0
    flushTx();
 800b77e:	f7ff ffeb 	bl	800b758 <_ZN9nRF24L01P7flushTxEv>
    flushRx();
 800b782:	4620      	mov	r0, r4
}
 800b784:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flushRx();
 800b788:	f7ff bfd5 	b.w	800b736 <_ZN9nRF24L01P7flushRxEv>

0800b78c <_ZN9nRF24L01P4initEiiiiiiiiihhyPKyh>:
    ) {
 800b78c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b790:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800b792:	4604      	mov	r4, r0
 800b794:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
 800b798:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 800b79c:	f89d 9054 	ldrb.w	r9, [sp, #84]	; 0x54
    assert(rx_addresses);  assert(rx_addresses_len <= 5);
 800b7a0:	b92e      	cbnz	r6, 800b7ae <_ZN9nRF24L01P4initEiiiiiiiiihhyPKyh+0x22>
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	461a      	mov	r2, r3
 800b7a6:	4619      	mov	r1, r3
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	f7f8 f983 	bl	8003ab4 <__assert_func>
 800b7ae:	f1b9 0f05 	cmp.w	r9, #5
 800b7b2:	d8f6      	bhi.n	800b7a2 <_ZN9nRF24L01P4initEiiiiiiiiihhyPKyh+0x16>
    mode = _NRF24L01P_MODE_UNKNOWN;
 800b7b4:	2700      	movs	r7, #0
    ce_pin = ce_pin0;
 800b7b6:	6083      	str	r3, [r0, #8]
    irq_pin = irq_pin0;
 800b7b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cs_pin = cs_pin0;
 800b7ba:	e9c0 1200 	strd	r1, r2, [r0]
    irq_pin = irq_pin0;
 800b7be:	60c3      	str	r3, [r0, #12]
    mode = _NRF24L01P_MODE_UNKNOWN;
 800b7c0:	6147      	str	r7, [r0, #20]
    os_time_delay(ticks);
 800b7c2:	20c4      	movs	r0, #196	; 0xc4
 800b7c4:	f7f9 fb7e 	bl	8004ec4 <os_time_delay>
    disable();   //  Set CE Pin to low.
 800b7c8:	4620      	mov	r0, r4
 800b7ca:	f7ff fae2 	bl	800ad92 <_ZN9nRF24L01P7disableEv>
    deselect();  //  Set CS Pin to high.
 800b7ce:	4620      	mov	r0, r4
 800b7d0:	f7ff fae8 	bl	800ada4 <_ZN9nRF24L01P8deselectEv>
    os_time_delay(ticks);
 800b7d4:	20c4      	movs	r0, #196	; 0xc4
 800b7d6:	f7f9 fb75 	bl	8004ec4 <os_time_delay>
    setRegister(_NRF24L01P_REG_CONFIG, 0);      // Power Down
 800b7da:	463a      	mov	r2, r7
 800b7dc:	4639      	mov	r1, r7
 800b7de:	4620      	mov	r0, r4
 800b7e0:	f7ff faf4 	bl	800adcc <_ZN9nRF24L01P11setRegisterEii>
    os_time_delay(ticks);
 800b7e4:	20c4      	movs	r0, #196	; 0xc4
 800b7e6:	f7f9 fb6d 	bl	8004ec4 <os_time_delay>
    setRegister(_NRF24L01P_REG_STATUS, _NRF24L01P_STATUS_MAX_RT|_NRF24L01P_STATUS_TX_DS|_NRF24L01P_STATUS_RX_DR);   // Clear any pending interrupts
 800b7ea:	2270      	movs	r2, #112	; 0x70
 800b7ec:	2107      	movs	r1, #7
 800b7ee:	4620      	mov	r0, r4
 800b7f0:	f7ff faec 	bl	800adcc <_ZN9nRF24L01P11setRegisterEii>
    disableAllRxPipes();
 800b7f4:	4620      	mov	r0, r4
 800b7f6:	f7ff fb49 	bl	800ae8c <_ZN9nRF24L01P17disableAllRxPipesEv>
    setRfFrequency(freq);
 800b7fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b7fc:	4620      	mov	r0, r4
 800b7fe:	f7ff fb09 	bl	800ae14 <_ZN9nRF24L01P14setRfFrequencyEi>
    setRfOutputPower(power);
 800b802:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b804:	4620      	mov	r0, r4
 800b806:	f7ff fc07 	bl	800b018 <_ZN9nRF24L01P16setRfOutputPowerEi>
    setAirDataRate(data_rate);
 800b80a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b80c:	4620      	mov	r0, r4
 800b80e:	f7ff fc61 	bl	800b0d4 <_ZN9nRF24L01P14setAirDataRateEi>
    setCrcWidth(crc_width);
 800b812:	990e      	ldr	r1, [sp, #56]	; 0x38
 800b814:	4620      	mov	r0, r4
 800b816:	f7ff fcaf 	bl	800b178 <_ZN9nRF24L01P11setCrcWidthEi>
    setTxAddress(tx_address, DEFAULT_NRF24L01P_ADDRESS_WIDTH);
 800b81a:	2305      	movs	r3, #5
 800b81c:	4620      	mov	r0, r4
 800b81e:	9300      	str	r3, [sp, #0]
 800b820:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800b824:	f7ff fd74 	bl	800b310 <_ZN9nRF24L01P12setTxAddressEyi>
    setTransferSize(tx_size, NRF24L01P_PIPE_P0);
 800b828:	463a      	mov	r2, r7
 800b82a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b82c:	4620      	mov	r0, r4
 800b82e:	f7ff fb0f 	bl	800ae50 <_ZN9nRF24L01P15setTransferSizeEii>
    if (auto_ack) { enableAutoAcknowledge(NRF24L01P_PIPE_P0); }
 800b832:	f1b8 0f00 	cmp.w	r8, #0
 800b836:	d021      	beq.n	800b87c <_ZN9nRF24L01P4initEiiiiiiiiihhyPKyh+0xf0>
 800b838:	4639      	mov	r1, r7
 800b83a:	4620      	mov	r0, r4
 800b83c:	f7ff fce4 	bl	800b208 <_ZN9nRF24L01P21enableAutoAcknowledgeEi>
    if (auto_retransmit) { assert(0); /* TODO: enableAutoRetransmit(4000, 3); */ }
 800b840:	2d00      	cmp	r5, #0
 800b842:	d1ae      	bne.n	800b7a2 <_ZN9nRF24L01P4initEiiiiiiiiihhyPKyh+0x16>
    else { disableAutoRetransmit(); }
 800b844:	4620      	mov	r0, r4
 800b846:	f7ff fb37 	bl	800aeb8 <_ZN9nRF24L01P21disableAutoRetransmitEv>
        setRxAddress(rx_addresses[i], DEFAULT_NRF24L01P_ADDRESS_WIDTH, pipe);
 800b84a:	2705      	movs	r7, #5
 800b84c:	3e08      	subs	r6, #8
    for (int i = 0; i < rx_addresses_len; i++) {
 800b84e:	45a9      	cmp	r9, r5
 800b850:	dd18      	ble.n	800b884 <_ZN9nRF24L01P4initEiiiiiiiiihhyPKyh+0xf8>
        int pipe = NRF24L01P_PIPE_P1 + i;  //  rx pipes start at 1.
 800b852:	3501      	adds	r5, #1
        setRxAddress(rx_addresses[i], DEFAULT_NRF24L01P_ADDRESS_WIDTH, pipe);
 800b854:	e9cd 7500 	strd	r7, r5, [sp]
 800b858:	4620      	mov	r0, r4
 800b85a:	e9f6 2302 	ldrd	r2, r3, [r6, #8]!
 800b85e:	f7ff fcf7 	bl	800b250 <_ZN9nRF24L01P12setRxAddressEyii>
        setTransferSize(tx_size, pipe);
 800b862:	462a      	mov	r2, r5
 800b864:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b866:	4620      	mov	r0, r4
 800b868:	f7ff faf2 	bl	800ae50 <_ZN9nRF24L01P15setTransferSizeEii>
        if (auto_ack) { enableAutoAcknowledge(pipe); }
 800b86c:	f1b8 0f00 	cmp.w	r8, #0
 800b870:	d0ed      	beq.n	800b84e <_ZN9nRF24L01P4initEiiiiiiiiihhyPKyh+0xc2>
 800b872:	4629      	mov	r1, r5
 800b874:	4620      	mov	r0, r4
 800b876:	f7ff fcc7 	bl	800b208 <_ZN9nRF24L01P21enableAutoAcknowledgeEi>
 800b87a:	e7e8      	b.n	800b84e <_ZN9nRF24L01P4initEiiiiiiiiihhyPKyh+0xc2>
    else { disableAutoAcknowledge(); }
 800b87c:	4620      	mov	r0, r4
 800b87e:	f7ff fb17 	bl	800aeb0 <_ZN9nRF24L01P22disableAutoAcknowledgeEv>
 800b882:	e7dd      	b.n	800b840 <_ZN9nRF24L01P4initEiiiiiiiiihhyPKyh+0xb4>
    flushTxRx();
 800b884:	4620      	mov	r0, r4
 800b886:	f7ff ff78 	bl	800b77a <_ZN9nRF24L01P9flushTxRxEv>
    mode = _NRF24L01P_MODE_POWER_DOWN;
 800b88a:	2301      	movs	r3, #1
}
 800b88c:	2000      	movs	r0, #0
    mode = _NRF24L01P_MODE_POWER_DOWN;
 800b88e:	6163      	str	r3, [r4, #20]
}
 800b890:	b003      	add	sp, #12
 800b892:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800b896 <_ZL10oc_ep_sizePK11oc_endpoint>:
}

static uint8_t oc_ep_size(const struct oc_endpoint *oe) {
    //  Return the size of the endpoint.  OIC will allocate space to store this endpoint in the transmitted mbuf.
    return sizeof(struct nrf24l01_endpoint);
}
 800b896:	200c      	movs	r0, #12
 800b898:	4770      	bx	lr

0800b89a <_ZL14oc_ep_has_connPK11oc_endpoint>:

static int oc_ep_has_conn(const struct oc_endpoint *oe) {
    //  Return true if the endpoint is connected.  We always return false.
    //  console_printf("oc_ep_has_conn\n");
    return 0;
}
 800b89a:	2000      	movs	r0, #0
 800b89c:	4770      	bx	lr

0800b89e <_ZL7oc_initv>:

static int oc_init(void) {
    //  Init the endpoint.
    //  console_printf("oc_init\n");
    return 0;
}
 800b89e:	2000      	movs	r0, #0
 800b8a0:	4770      	bx	lr

0800b8a2 <_ZL11oc_shutdownv>:

static void oc_shutdown(void) {
    //  Shutdown the endpoint.
    //  console_printf("oc_shutdown\n");
}
 800b8a2:	4770      	bx	lr

0800b8a4 <_ZL9oc_ep_strPciPK11oc_endpoint>:
static char *oc_ep_str(char *ptr, int maxlen, const struct oc_endpoint *oe) {
 800b8a4:	b510      	push	{r4, lr}
 800b8a6:	4604      	mov	r4, r0
    console_printf("nrfstr\n");
 800b8a8:	4804      	ldr	r0, [pc, #16]	; (800b8bc <_ZL9oc_ep_strPciPK11oc_endpoint+0x18>)
 800b8aa:	f7f6 fcbf 	bl	800222c <console_printf>
    strcpy(ptr, "TODO:oc_ep_str");
 800b8ae:	4904      	ldr	r1, [pc, #16]	; (800b8c0 <_ZL9oc_ep_strPciPK11oc_endpoint+0x1c>)
 800b8b0:	4620      	mov	r0, r4
 800b8b2:	f7fd fe9b 	bl	80095ec <strcpy>
}
 800b8b6:	4620      	mov	r0, r4
 800b8b8:	bd10      	pop	{r4, pc}
 800b8ba:	bf00      	nop
 800b8bc:	0800e5c9 	.word	0x0800e5c9
 800b8c0:	0800e167 	.word	0x0800e167

0800b8c4 <_ZL11oc_tx_ucastP7os_mbuf>:
static void oc_tx_ucast(struct os_mbuf *m) {
 800b8c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    assert(m);  assert(OS_MBUF_USRHDR_LEN(m) >= sizeof(struct nrf24l01_endpoint));
 800b8c8:	4605      	mov	r5, r0
 800b8ca:	b928      	cbnz	r0, 800b8d8 <_ZL11oc_tx_ucastP7os_mbuf+0x14>
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	461a      	mov	r2, r3
 800b8d0:	4619      	mov	r1, r3
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	f7f8 f8ee 	bl	8003ab4 <__assert_func>
 800b8d8:	7943      	ldrb	r3, [r0, #5]
 800b8da:	3b08      	subs	r3, #8
 800b8dc:	2b0b      	cmp	r3, #11
 800b8de:	d9f5      	bls.n	800b8cc <_ZL11oc_tx_ucastP7os_mbuf+0x8>
    assert(endpoint);  assert(endpoint->host);  assert(endpoint->port);  //  Host and endpoint should be in the endpoint.
 800b8e0:	f110 0f18 	cmn.w	r0, #24
 800b8e4:	d0f2      	beq.n	800b8cc <_ZL11oc_tx_ucastP7os_mbuf+0x8>
 800b8e6:	69c1      	ldr	r1, [r0, #28]
 800b8e8:	2900      	cmp	r1, #0
 800b8ea:	d0ef      	beq.n	800b8cc <_ZL11oc_tx_ucastP7os_mbuf+0x8>
 800b8ec:	8c02      	ldrh	r2, [r0, #32]
 800b8ee:	2a00      	cmp	r2, #0
 800b8f0:	d0ec      	beq.n	800b8cc <_ZL11oc_tx_ucastP7os_mbuf+0x8>
    assert(server);  assert(endpoint->host == server->endpoint.host);  assert(endpoint->port == server->endpoint.port);  //  We only support 1 server connection. Must match the message endpoint.
 800b8f2:	4b36      	ldr	r3, [pc, #216]	; (800b9cc <_ZL11oc_tx_ucastP7os_mbuf+0x108>)
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d0e8      	beq.n	800b8cc <_ZL11oc_tx_ucastP7os_mbuf+0x8>
 800b8fa:	6858      	ldr	r0, [r3, #4]
 800b8fc:	4281      	cmp	r1, r0
 800b8fe:	d1e5      	bne.n	800b8cc <_ZL11oc_tx_ucastP7os_mbuf+0x8>
 800b900:	891b      	ldrh	r3, [r3, #8]
 800b902:	4293      	cmp	r3, r2
 800b904:	d1e2      	bne.n	800b8cc <_ZL11oc_tx_ucastP7os_mbuf+0x8>
    assert(network_device);
 800b906:	4b32      	ldr	r3, [pc, #200]	; (800b9d0 <_ZL11oc_tx_ucastP7os_mbuf+0x10c>)
 800b908:	6818      	ldr	r0, [r3, #0]
 800b90a:	2800      	cmp	r0, #0
 800b90c:	d0de      	beq.n	800b8cc <_ZL11oc_tx_ucastP7os_mbuf+0x8>
        struct nrf24l01 *dev = (struct nrf24l01 *) os_dev_open(network_device, OS_TIMEOUT_NEVER, NULL);  //  network_device is "nrf24l01_0"
 800b90e:	2200      	movs	r2, #0
 800b910:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800b914:	f7f8 fb58 	bl	8003fc8 <os_dev_open>
        assert(dev != NULL);
 800b918:	4680      	mov	r8, r0
 800b91a:	2800      	cmp	r0, #0
 800b91c:	d0d6      	beq.n	800b8cc <_ZL11oc_tx_ucastP7os_mbuf+0x8>
        console_printf("%stx mbuf\n", _nrf);
 800b91e:	4f2d      	ldr	r7, [pc, #180]	; (800b9d4 <_ZL11oc_tx_ucastP7os_mbuf+0x110>)
 800b920:	482d      	ldr	r0, [pc, #180]	; (800b9d8 <_ZL11oc_tx_ucastP7os_mbuf+0x114>)
 800b922:	6839      	ldr	r1, [r7, #0]
 800b924:	f7f6 fc82 	bl	800222c <console_printf>
 800b928:	462c      	mov	r4, r5
 800b92a:	f04f 0902 	mov.w	r9, #2
    int mbuf_num = 0;
 800b92e:	2200      	movs	r2, #0
        console_printf("%s%s len %02d: ", _nrf, (mbuf_num == 0 ? "header" : "payload"), size);
 800b930:	f8df b0bc 	ldr.w	fp, [pc, #188]	; 800b9f0 <_ZL11oc_tx_ucastP7os_mbuf+0x12c>
 800b934:	4929      	ldr	r1, [pc, #164]	; (800b9dc <_ZL11oc_tx_ucastP7os_mbuf+0x118>)
        int size = m->om_len;  //  Fetch the size.
 800b936:	88e6      	ldrh	r6, [r4, #6]
        console_printf("%s%s len %02d: ", _nrf, (mbuf_num == 0 ? "header" : "payload"), size);
 800b938:	2a00      	cmp	r2, #0
 800b93a:	bf08      	it	eq
 800b93c:	4659      	moveq	r1, fp
        const char *data = OS_MBUF_DATA(m, const char *);  //  Fetch the data.
 800b93e:	f8d4 a000 	ldr.w	sl, [r4]
        console_printf("%s%s len %02d: ", _nrf, (mbuf_num == 0 ? "header" : "payload"), size);
 800b942:	460a      	mov	r2, r1
 800b944:	4633      	mov	r3, r6
 800b946:	6839      	ldr	r1, [r7, #0]
 800b948:	4825      	ldr	r0, [pc, #148]	; (800b9e0 <_ZL11oc_tx_ucastP7os_mbuf+0x11c>)
 800b94a:	f7f6 fc6f 	bl	800222c <console_printf>
        console_dump((const uint8_t *) data, size); console_printf("\n");
 800b94e:	4631      	mov	r1, r6
 800b950:	4650      	mov	r0, sl
 800b952:	f7f6 fc03 	bl	800215c <console_dump>
 800b956:	4823      	ldr	r0, [pc, #140]	; (800b9e4 <_ZL11oc_tx_ucastP7os_mbuf+0x120>)
 800b958:	f7f6 fc68 	bl	800222c <console_printf>
        if (mbuf_num == 1) {  //  If this is the second mbuf, i.e. the CoAP Payload, not the CoAP Header...
 800b95c:	f1b9 0f01 	cmp.w	r9, #1
 800b960:	d12a      	bne.n	800b9b8 <_ZL11oc_tx_ucastP7os_mbuf+0xf4>
            assert(size > 0);
 800b962:	2e00      	cmp	r6, #0
 800b964:	d0b2      	beq.n	800b8cc <_ZL11oc_tx_ucastP7os_mbuf+0x8>
            if (size <= 0 || size > MYNEWT_VAL(NRF24L01_TX_SIZE)) { rc = 0; break; }  //  Too small or too big, quit.
 800b966:	1e73      	subs	r3, r6, #1
 800b968:	2b0b      	cmp	r3, #11
 800b96a:	d82c      	bhi.n	800b9c6 <_ZL11oc_tx_ucastP7os_mbuf+0x102>
            memset(nrf24l01_tx_buffer, 0, MYNEWT_VAL(NRF24L01_TX_SIZE));
 800b96c:	2200      	movs	r2, #0
 800b96e:	4b1e      	ldr	r3, [pc, #120]	; (800b9e8 <_ZL11oc_tx_ucastP7os_mbuf+0x124>)
            memcpy(nrf24l01_tx_buffer, data, size);
 800b970:	4651      	mov	r1, sl
            memset(nrf24l01_tx_buffer, 0, MYNEWT_VAL(NRF24L01_TX_SIZE));
 800b972:	601a      	str	r2, [r3, #0]
 800b974:	605a      	str	r2, [r3, #4]
 800b976:	609a      	str	r2, [r3, #8]
            memcpy(nrf24l01_tx_buffer, data, size);
 800b978:	4618      	mov	r0, r3
 800b97a:	4632      	mov	r2, r6
 800b97c:	f7f9 fcf6 	bl	800536c <memcpy>
 800b980:	4603      	mov	r3, r0
            static uint8_t tx_count = 0;  nrf24l01_tx_buffer[MYNEWT_VAL(NRF24L01_TX_SIZE) - 1] = tx_count++;
 800b982:	491a      	ldr	r1, [pc, #104]	; (800b9ec <_ZL11oc_tx_ucastP7os_mbuf+0x128>)
 800b984:	780a      	ldrb	r2, [r1, #0]
 800b986:	1c50      	adds	r0, r2, #1
 800b988:	7008      	strb	r0, [r1, #0]
 800b98a:	72da      	strb	r2, [r3, #11]
            rc = nrf24l01_send(dev, nrf24l01_tx_buffer, MYNEWT_VAL(NRF24L01_TX_SIZE));
 800b98c:	4619      	mov	r1, r3
 800b98e:	220c      	movs	r2, #12
 800b990:	4640      	mov	r0, r8
 800b992:	f7ff f97f 	bl	800ac94 <nrf24l01_send>
            assert(rc != -1);
 800b996:	1c43      	adds	r3, r0, #1
            rc = nrf24l01_send(dev, nrf24l01_tx_buffer, MYNEWT_VAL(NRF24L01_TX_SIZE));
 800b998:	4604      	mov	r4, r0
            assert(rc != -1);
 800b99a:	d097      	beq.n	800b8cc <_ZL11oc_tx_ucastP7os_mbuf+0x8>
    console_flush();
 800b99c:	f7f6 fb6c 	bl	8002078 <console_flush>
        assert(rc > 0);
 800b9a0:	2c00      	cmp	r4, #0
 800b9a2:	dd93      	ble.n	800b8cc <_ZL11oc_tx_ucastP7os_mbuf+0x8>
        os_dev_close((struct os_dev *) dev);
 800b9a4:	4640      	mov	r0, r8
 800b9a6:	f7f8 fb30 	bl	800400a <os_dev_close>
    rc = os_mbuf_free_chain(m);  assert(rc == 0);
 800b9aa:	4628      	mov	r0, r5
 800b9ac:	f7f8 fc8b 	bl	80042c6 <os_mbuf_free_chain>
 800b9b0:	2800      	cmp	r0, #0
 800b9b2:	d18b      	bne.n	800b8cc <_ZL11oc_tx_ucastP7os_mbuf+0x8>
}
 800b9b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        mbuf_num++;
 800b9b8:	f04f 0901 	mov.w	r9, #1
        m = m->om_next.sle_next;   //  Fetch next mbuf in the list.
 800b9bc:	68e4      	ldr	r4, [r4, #12]
 800b9be:	464a      	mov	r2, r9
    while (m) {  //  For each mbuf in the list...
 800b9c0:	2c00      	cmp	r4, #0
 800b9c2:	d1b7      	bne.n	800b934 <_ZL11oc_tx_ucastP7os_mbuf+0x70>
 800b9c4:	e7ea      	b.n	800b99c <_ZL11oc_tx_ucastP7os_mbuf+0xd8>
    console_flush();
 800b9c6:	f7f6 fb57 	bl	8002078 <console_flush>
 800b9ca:	e77f      	b.n	800b8cc <_ZL11oc_tx_ucastP7os_mbuf+0x8>
 800b9cc:	200033b8 	.word	0x200033b8
 800b9d0:	200033a8 	.word	0x200033a8
 800b9d4:	2000021c 	.word	0x2000021c
 800b9d8:	0800e5ae 	.word	0x0800e5ae
 800b9dc:	0800e5a6 	.word	0x0800e5a6
 800b9e0:	0800e5b9 	.word	0x0800e5b9
 800b9e4:	0800e41f 	.word	0x0800e41f
 800b9e8:	200033ac 	.word	0x200033ac
 800b9ec:	200033bc 	.word	0x200033bc
 800b9f0:	0800e59f 	.word	0x0800e59f

0800b9f4 <init_nrf24l01_server>:
int init_nrf24l01_server(struct nrf24l01_server *server, const char *host, uint16_t port) {
 800b9f4:	b510      	push	{r4, lr}
    endpoint->ep.oe_type = transport_id;  //  Populate our transport ID so that OIC will call our functions.
 800b9f6:	4c07      	ldr	r4, [pc, #28]	; (800ba14 <init_nrf24l01_server+0x20>)
 800b9f8:	7803      	ldrb	r3, [r0, #0]
 800b9fa:	7824      	ldrb	r4, [r4, #0]
 800b9fc:	f364 0302 	bfi	r3, r4, #0, #3
    endpoint->ep.oe_flags = 0;
 800ba00:	f36f 03c7 	bfc	r3, #3, #5
 800ba04:	7003      	strb	r3, [r0, #0]
    if (host) { 
 800ba06:	b109      	cbz	r1, 800ba0c <init_nrf24l01_server+0x18>
        endpoint->host = host;
 800ba08:	6041      	str	r1, [r0, #4]
        endpoint->port = port;
 800ba0a:	8102      	strh	r2, [r0, #8]
    server->handle = (struct oc_server_handle *) server;
 800ba0c:	60c0      	str	r0, [r0, #12]
}
 800ba0e:	2000      	movs	r0, #0
 800ba10:	bd10      	pop	{r4, pc}
 800ba12:	bf00      	nop
 800ba14:	20000219 	.word	0x20000219

0800ba18 <nrf24l01_register_transport>:
int nrf24l01_register_transport(const char *network_device0, struct nrf24l01_server *server0, const char *host, uint16_t port) {
 800ba18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba1c:	460d      	mov	r5, r1
 800ba1e:	4616      	mov	r6, r2
 800ba20:	4698      	mov	r8, r3
    assert(network_device0);  assert(server0);
 800ba22:	4607      	mov	r7, r0
 800ba24:	b928      	cbnz	r0, 800ba32 <nrf24l01_register_transport+0x1a>
 800ba26:	2300      	movs	r3, #0
 800ba28:	461a      	mov	r2, r3
 800ba2a:	4619      	mov	r1, r3
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	f7f8 f841 	bl	8003ab4 <__assert_func>
 800ba32:	2900      	cmp	r1, #0
 800ba34:	d0f7      	beq.n	800ba26 <nrf24l01_register_transport+0xe>
        struct nrf24l01 *dev = (struct nrf24l01 *) os_dev_open(network_device0, OS_TIMEOUT_NEVER, NULL);  //  network_device0 is "nrf24l01_0"
 800ba36:	2200      	movs	r2, #0
 800ba38:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800ba3c:	f7f8 fac4 	bl	8003fc8 <os_dev_open>
        assert(dev != NULL);
 800ba40:	4604      	mov	r4, r0
 800ba42:	2800      	cmp	r0, #0
 800ba44:	d0ef      	beq.n	800ba26 <nrf24l01_register_transport+0xe>
        transport_id = oc_transport_register(&transport);
 800ba46:	480e      	ldr	r0, [pc, #56]	; (800ba80 <nrf24l01_register_transport+0x68>)
 800ba48:	f7fa fe6e 	bl	8006728 <oc_transport_register>
 800ba4c:	4b0d      	ldr	r3, [pc, #52]	; (800ba84 <nrf24l01_register_transport+0x6c>)
        int rc = init_nrf24l01_server(server0, host, port);
 800ba4e:	4642      	mov	r2, r8
        transport_id = oc_transport_register(&transport);
 800ba50:	7018      	strb	r0, [r3, #0]
        int rc = init_nrf24l01_server(server0, host, port);
 800ba52:	4631      	mov	r1, r6
 800ba54:	4628      	mov	r0, r5
 800ba56:	f7ff ffcd 	bl	800b9f4 <init_nrf24l01_server>
        assert(rc == 0);
 800ba5a:	2800      	cmp	r0, #0
 800ba5c:	d1e3      	bne.n	800ba26 <nrf24l01_register_transport+0xe>
        rc = nrf24l01_flush_txrx(dev);
 800ba5e:	4620      	mov	r0, r4
 800ba60:	f7ff f972 	bl	800ad48 <nrf24l01_flush_txrx>
        assert(rc == 0);
 800ba64:	4606      	mov	r6, r0
 800ba66:	2800      	cmp	r0, #0
 800ba68:	d1dd      	bne.n	800ba26 <nrf24l01_register_transport+0xe>
        network_device = network_device0;
 800ba6a:	4b07      	ldr	r3, [pc, #28]	; (800ba88 <nrf24l01_register_transport+0x70>)
        os_dev_close((struct os_dev *) dev);
 800ba6c:	4620      	mov	r0, r4
        network_device = network_device0;
 800ba6e:	601f      	str	r7, [r3, #0]
        server = server0;
 800ba70:	4b06      	ldr	r3, [pc, #24]	; (800ba8c <nrf24l01_register_transport+0x74>)
 800ba72:	601d      	str	r5, [r3, #0]
        os_dev_close((struct os_dev *) dev);
 800ba74:	f7f8 fac9 	bl	800400a <os_dev_close>
}
 800ba78:	4630      	mov	r0, r6
 800ba7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba7e:	bf00      	nop
 800ba80:	0800e5d4 	.word	0x0800e5d4
 800ba84:	20000219 	.word	0x20000219
 800ba88:	200033a8 	.word	0x200033a8
 800ba8c:	200033b8 	.word	0x200033b8

0800ba90 <remote_sensor_create>:
    os_dev_close(dev);
    return rc;
}

//  Create the device instance and configure it. Called by sysinit() during startup, defined in pkg.yml.
void DEVICE_CREATE(void) {
 800ba90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ba94:	b087      	sub	sp, #28
    if (!is_collector_node()) { return; }  //  Remote Sensors are applicable only for Collector Node.
 800ba96:	f7f6 fd07 	bl	80024a8 <is_collector_node>
 800ba9a:	2800      	cmp	r0, #0
 800ba9c:	d042      	beq.n	800bb24 <remote_sensor_create+0x94>
 800ba9e:	2400      	movs	r4, #0
    for (int i = 0; i < DEVICE_COUNT; i++) {
        console_printf("RSN listen %s\n", DEVICE_NAME[i]);  ////
 800baa0:	f8df 8094 	ldr.w	r8, [pc, #148]	; 800bb38 <remote_sensor_create+0xa8>

        //  Create the device.
        int rc = os_dev_create((struct os_dev *) &DEVICE_INSTANCE[i], DEVICE_NAME[i],
 800baa4:	4e21      	ldr	r6, [pc, #132]	; (800bb2c <remote_sensor_create+0x9c>)
 800baa6:	4f22      	ldr	r7, [pc, #136]	; (800bb30 <remote_sensor_create+0xa0>)
        console_printf("RSN listen %s\n", DEVICE_NAME[i]);  ////
 800baa8:	f7f6 fd56 	bl	8002558 <get_sensor_node_names>
 800baac:	5901      	ldr	r1, [r0, r4]
 800baae:	4640      	mov	r0, r8
 800bab0:	f7f6 fbbc 	bl	800222c <console_printf>
        int rc = os_dev_create((struct os_dev *) &DEVICE_INSTANCE[i], DEVICE_NAME[i],
 800bab4:	f7f6 fd50 	bl	8002558 <get_sensor_node_names>
 800bab8:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800babc:	443b      	add	r3, r7
 800babe:	9301      	str	r3, [sp, #4]
 800bac0:	4b1c      	ldr	r3, [pc, #112]	; (800bb34 <remote_sensor_create+0xa4>)
 800bac2:	2201      	movs	r2, #1
 800bac4:	9300      	str	r3, [sp, #0]
 800bac6:	5901      	ldr	r1, [r0, r4]
 800bac8:	2036      	movs	r0, #54	; 0x36
 800baca:	2300      	movs	r3, #0
 800bacc:	fb00 6004 	mla	r0, r0, r4, r6
 800bad0:	f7f8 fa10 	bl	8003ef4 <os_dev_create>
            OS_DEV_INIT_PRIMARY, 0, 
            DEVICE_INIT, (void *) &DEVICE_ITF[i]);
        assert(rc == 0);
 800bad4:	4605      	mov	r5, r0
 800bad6:	b128      	cbz	r0, 800bae4 <remote_sensor_create+0x54>
 800bad8:	2300      	movs	r3, #0
 800bada:	461a      	mov	r2, r3
 800badc:	4619      	mov	r1, r3
 800bade:	4618      	mov	r0, r3
 800bae0:	f7f7 ffe8 	bl	8003ab4 <__assert_func>

        //  Configure the device.
        rc = config_device(DEVICE_NAME[i]);
 800bae4:	f7f6 fd38 	bl	8002558 <get_sensor_node_names>
    dev = (struct os_dev *) os_dev_open(name, OS_TIMEOUT_NEVER, NULL);
 800bae8:	462a      	mov	r2, r5
 800baea:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800baee:	5900      	ldr	r0, [r0, r4]
 800baf0:	f7f8 fa6a 	bl	8003fc8 <os_dev_open>
    assert(dev != NULL);
 800baf4:	4605      	mov	r5, r0
 800baf6:	2800      	cmp	r0, #0
 800baf8:	d0ee      	beq.n	800bad8 <remote_sensor_create+0x48>
    rc = DEVICE_CFG_DEFAULT(&cfg);
 800bafa:	a802      	add	r0, sp, #8
 800bafc:	f000 f8f9 	bl	800bcf2 <remote_sensor_default_cfg>
    assert(rc == 0);
 800bb00:	2800      	cmp	r0, #0
 800bb02:	d1e9      	bne.n	800bad8 <remote_sensor_create+0x48>
    rc = DEVICE_CFG_FUNC((struct DEVICE_DEV *)dev, &cfg);
 800bb04:	a902      	add	r1, sp, #8
 800bb06:	4628      	mov	r0, r5
 800bb08:	f000 f8e0 	bl	800bccc <remote_sensor_config>
 800bb0c:	4681      	mov	r9, r0
    os_dev_close(dev);
 800bb0e:	4628      	mov	r0, r5
 800bb10:	f7f8 fa7b 	bl	800400a <os_dev_close>
        assert(rc == 0);
 800bb14:	f1b9 0f00 	cmp.w	r9, #0
 800bb18:	d1de      	bne.n	800bad8 <remote_sensor_create+0x48>
 800bb1a:	3404      	adds	r4, #4
    for (int i = 0; i < DEVICE_COUNT; i++) {
 800bb1c:	2c14      	cmp	r4, #20
 800bb1e:	d1c3      	bne.n	800baa8 <remote_sensor_create+0x18>
    }
#ifdef DEVICE_START
    //  Start the device after creation.
    DEVICE_START();
 800bb20:	f000 f9d6 	bl	800bed0 <remote_sensor_start>
#endif  //  DEVICE_START
}
 800bb24:	b007      	add	sp, #28
 800bb26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bb2a:	bf00      	nop
 800bb2c:	20003428 	.word	0x20003428
 800bb30:	200033c0 	.word	0x200033c0
 800bb34:	0800bd09 	.word	0x0800bd09
 800bb38:	0800e5fd 	.word	0x0800e5fd

0800bb3c <sensor_get_config_internal>:
err:
    return (rc);
}

static int sensor_get_config_internal(struct sensor *sensor, sensor_type_t type,
    struct sensor_cfg *cfg) {
 800bb3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb3e:	4614      	mov	r4, r2
 800bb40:	461d      	mov	r5, r3
    //  Return the type of the sensor value returned by the sensor.    
    const struct sensor_type_descriptor *st = sensor_types;
 800bb42:	4b0a      	ldr	r3, [pc, #40]	; (800bb6c <sensor_get_config_internal+0x30>)
    while (st->type) { 
 800bb44:	6859      	ldr	r1, [r3, #4]
 800bb46:	b911      	cbnz	r1, 800bb4e <sensor_get_config_internal+0x12>
            cfg->sc_valtype = st->valtype;
            return 0;
        }
        st++; 
    }
    return SYS_EINVAL;
 800bb48:	f06f 0001 	mvn.w	r0, #1
 800bb4c:	e00a      	b.n	800bb64 <sensor_get_config_internal+0x28>
        if (type & st->type) {
 800bb4e:	ea04 0601 	and.w	r6, r4, r1
 800bb52:	ea05 77e1 	and.w	r7, r5, r1, asr #31
 800bb56:	ea56 0207 	orrs.w	r2, r6, r7
 800bb5a:	d004      	beq.n	800bb66 <sensor_get_config_internal+0x2a>
            return 0;
 800bb5c:	2000      	movs	r0, #0
            cfg->sc_valtype = st->valtype;
 800bb5e:	689a      	ldr	r2, [r3, #8]
 800bb60:	9b05      	ldr	r3, [sp, #20]
 800bb62:	701a      	strb	r2, [r3, #0]
}
 800bb64:	bdf0      	pop	{r4, r5, r6, r7, pc}
        st++; 
 800bb66:	3310      	adds	r3, #16
 800bb68:	e7ec      	b.n	800bb44 <sensor_get_config_internal+0x8>
 800bb6a:	bf00      	nop
 800bb6c:	0800e634 	.word	0x0800e634

0800bb70 <sensor_close_internal>:
}

static int sensor_close_internal(struct os_dev *dev0) {
    //  Close the sensor.  Return 0 if successful.
    return 0;
}
 800bb70:	2000      	movs	r0, #0
 800bb72:	4770      	bx	lr

0800bb74 <sensor_read_internal>:
    sensor_data_func_t data_func, void *data_arg, uint32_t timeout) {
 800bb74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bb78:	4690      	mov	r8, r2
 800bb7a:	e9dd 540c 	ldrd	r5, r4, [sp, #48]	; 0x30
 800bb7e:	4699      	mov	r9, r3
    assert(sensor);
 800bb80:	4682      	mov	sl, r0
 800bb82:	b928      	cbnz	r0, 800bb90 <sensor_read_internal+0x1c>
 800bb84:	2300      	movs	r3, #0
 800bb86:	461a      	mov	r2, r3
 800bb88:	4619      	mov	r1, r3
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	f7f7 ff92 	bl	8003ab4 <__assert_func>
    if (!data_func) { return 0; }  //  If no Listener Function, then don't continue.
 800bb90:	b1e5      	cbz	r5, 800bbcc <sensor_read_internal+0x58>
    assert(data_arg);
 800bb92:	2c00      	cmp	r4, #0
 800bb94:	d0f6      	beq.n	800bb84 <sensor_read_internal+0x10>
    oc_rep_t *rep = (oc_rep_t *) src->user_arg;  //  Contains type and value.
 800bb96:	6861      	ldr	r1, [r4, #4]
    assert(rep);
 800bb98:	2900      	cmp	r1, #0
 800bb9a:	d0f3      	beq.n	800bb84 <sensor_read_internal+0x10>
    const struct sensor_type_descriptor *st = sensor_types;
 800bb9c:	4b10      	ldr	r3, [pc, #64]	; (800bbe0 <sensor_read_internal+0x6c>)
    while (st->type && type != st->type) { st++; }
 800bb9e:	685a      	ldr	r2, [r3, #4]
 800bba0:	4616      	mov	r6, r2
 800bba2:	17d7      	asrs	r7, r2, #31
 800bba4:	b11a      	cbz	r2, 800bbae <sensor_read_internal+0x3a>
 800bba6:	454f      	cmp	r7, r9
 800bba8:	bf08      	it	eq
 800bbaa:	4542      	cmpeq	r2, r8
 800bbac:	d112      	bne.n	800bbd4 <sensor_read_internal+0x60>
    if (type != st->type) { rc = SYS_EINVAL; goto err; }
 800bbae:	454f      	cmp	r7, r9
 800bbb0:	bf08      	it	eq
 800bbb2:	4546      	cmpeq	r6, r8
 800bbb4:	d110      	bne.n	800bbd8 <sensor_read_internal+0x64>
    void *d = st->save_func(&data, rep);  
 800bbb6:	68db      	ldr	r3, [r3, #12]
 800bbb8:	a802      	add	r0, sp, #8
 800bbba:	4798      	blx	r3
    rc = data_func(sensor, data_arg, d, type);
 800bbbc:	e9cd 6700 	strd	r6, r7, [sp]
 800bbc0:	4602      	mov	r2, r0
 800bbc2:	4621      	mov	r1, r4
 800bbc4:	4650      	mov	r0, sl
 800bbc6:	47a8      	blx	r5
    assert(rc == 0);
 800bbc8:	2800      	cmp	r0, #0
 800bbca:	d1db      	bne.n	800bb84 <sensor_read_internal+0x10>
    if (!data_func) { return 0; }  //  If no Listener Function, then don't continue.
 800bbcc:	2000      	movs	r0, #0
}
 800bbce:	b004      	add	sp, #16
 800bbd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    while (st->type && type != st->type) { st++; }
 800bbd4:	3310      	adds	r3, #16
 800bbd6:	e7e2      	b.n	800bb9e <sensor_read_internal+0x2a>
    return rc;
 800bbd8:	f06f 0001 	mvn.w	r0, #1
 800bbdc:	e7f7      	b.n	800bbce <sensor_read_internal+0x5a>
 800bbde:	bf00      	nop
 800bbe0:	0800e634 	.word	0x0800e634

0800bbe4 <save_humid.part.1>:

/////////////////////////////////////////////////////////
//  Remote Sensor Type #4: Save Sensor Value

#ifdef MYNEWT_VAL_REMOTE_SENSOR_TYPE_4__FIELD  //  If Remote Sensor Type #4 is configured...
    _SAVE_SENSOR_VALUE(
 800bbe4:	b508      	push	{r3, lr}
 800bbe6:	2300      	movs	r3, #0
 800bbe8:	461a      	mov	r2, r3
 800bbea:	4619      	mov	r1, r3
 800bbec:	4618      	mov	r0, r3
 800bbee:	f7f7 ff61 	bl	8003ab4 <__assert_func>

0800bbf2 <save_humid>:
 800bbf2:	780b      	ldrb	r3, [r1, #0]
 800bbf4:	b510      	push	{r4, lr}
 800bbf6:	2b02      	cmp	r3, #2
 800bbf8:	4604      	mov	r4, r0
 800bbfa:	d001      	beq.n	800bc00 <save_humid+0xe>
 800bbfc:	f7ff fff2 	bl	800bbe4 <save_humid.part.1>
 800bc00:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800bc04:	f001 fa72 	bl	800d0ec <__aeabi_d2f>
 800bc08:	7923      	ldrb	r3, [r4, #4]
 800bc0a:	6020      	str	r0, [r4, #0]
 800bc0c:	f043 0301 	orr.w	r3, r3, #1
 800bc10:	7123      	strb	r3, [r4, #4]
 800bc12:	4620      	mov	r0, r4
 800bc14:	bd10      	pop	{r4, pc}

0800bc16 <save_press>:
    _SAVE_SENSOR_VALUE(
 800bc16:	780b      	ldrb	r3, [r1, #0]
 800bc18:	b510      	push	{r4, lr}
 800bc1a:	2b02      	cmp	r3, #2
 800bc1c:	4604      	mov	r4, r0
 800bc1e:	d001      	beq.n	800bc24 <save_press+0xe>
 800bc20:	f7ff ffe0 	bl	800bbe4 <save_humid.part.1>
 800bc24:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800bc28:	f001 fa60 	bl	800d0ec <__aeabi_d2f>
 800bc2c:	7923      	ldrb	r3, [r4, #4]
 800bc2e:	6020      	str	r0, [r4, #0]
 800bc30:	f043 0301 	orr.w	r3, r3, #1
 800bc34:	7123      	strb	r3, [r4, #4]
 800bc36:	4620      	mov	r0, r4
 800bc38:	bd10      	pop	{r4, pc}

0800bc3a <save_temp>:
    _SAVE_SENSOR_VALUE(
 800bc3a:	780b      	ldrb	r3, [r1, #0]
 800bc3c:	b510      	push	{r4, lr}
 800bc3e:	2b02      	cmp	r3, #2
 800bc40:	4604      	mov	r4, r0
 800bc42:	d001      	beq.n	800bc48 <save_temp+0xe>
 800bc44:	f7ff ffce 	bl	800bbe4 <save_humid.part.1>
 800bc48:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800bc4c:	f001 fa4e 	bl	800d0ec <__aeabi_d2f>
 800bc50:	7923      	ldrb	r3, [r4, #4]
 800bc52:	6020      	str	r0, [r4, #0]
 800bc54:	f043 0301 	orr.w	r3, r3, #1
 800bc58:	7123      	strb	r3, [r4, #4]
 800bc5a:	4620      	mov	r0, r4
 800bc5c:	bd10      	pop	{r4, pc}

0800bc5e <save_temp_raw>:
    _SAVE_SENSOR_VALUE(
 800bc5e:	780a      	ldrb	r2, [r1, #0]
 800bc60:	b508      	push	{r3, lr}
 800bc62:	2a01      	cmp	r2, #1
 800bc64:	d001      	beq.n	800bc6a <save_temp_raw+0xc>
 800bc66:	f7ff ffbd 	bl	800bbe4 <save_humid.part.1>
 800bc6a:	690a      	ldr	r2, [r1, #16]
 800bc6c:	6002      	str	r2, [r0, #0]
 800bc6e:	7902      	ldrb	r2, [r0, #4]
 800bc70:	f042 0201 	orr.w	r2, r2, #1
 800bc74:	7102      	strb	r2, [r0, #4]
 800bc76:	bd08      	pop	{r3, pc}

0800bc78 <sensor_open_internal>:
static int sensor_open_internal(struct os_dev *dev0, uint32_t timeout, void *arg) {
 800bc78:	b508      	push	{r3, lr}
    dev = (struct remote_sensor *) dev0;  assert(dev);  
 800bc7a:	4603      	mov	r3, r0
 800bc7c:	b918      	cbnz	r0, 800bc86 <sensor_open_internal+0xe>
 800bc7e:	4602      	mov	r2, r0
 800bc80:	4601      	mov	r1, r0
 800bc82:	f7f7 ff17 	bl	8003ab4 <__assert_func>
}
 800bc86:	2000      	movs	r0, #0
 800bc88:	bd08      	pop	{r3, pc}
	...

0800bc8c <remote_sensor_lookup_type>:
sensor_type_t remote_sensor_lookup_type(const char *name) {
 800bc8c:	b570      	push	{r4, r5, r6, lr}
    assert(name);
 800bc8e:	4606      	mov	r6, r0
 800bc90:	b130      	cbz	r0, 800bca0 <remote_sensor_lookup_type+0x14>
 800bc92:	4d0d      	ldr	r5, [pc, #52]	; (800bcc8 <remote_sensor_lookup_type+0x3c>)
    while (st->type) {
 800bc94:	f855 4c0c 	ldr.w	r4, [r5, #-12]
 800bc98:	b944      	cbnz	r4, 800bcac <remote_sensor_lookup_type+0x20>
    return 0;
 800bc9a:	2000      	movs	r0, #0
 800bc9c:	2100      	movs	r1, #0
 800bc9e:	e011      	b.n	800bcc4 <remote_sensor_lookup_type+0x38>
    assert(name);
 800bca0:	2300      	movs	r3, #0
 800bca2:	461a      	mov	r2, r3
 800bca4:	4619      	mov	r1, r3
 800bca6:	4618      	mov	r0, r3
 800bca8:	f7f7 ff04 	bl	8003ab4 <__assert_func>
        assert(st->name);
 800bcac:	f855 1c10 	ldr.w	r1, [r5, #-16]
 800bcb0:	2900      	cmp	r1, #0
 800bcb2:	d0f5      	beq.n	800bca0 <remote_sensor_lookup_type+0x14>
        if (strcmp(name, st->name) == 0) { return st->type; }
 800bcb4:	4630      	mov	r0, r6
 800bcb6:	f7f9 fb7d 	bl	80053b4 <strcmp>
 800bcba:	3510      	adds	r5, #16
 800bcbc:	2800      	cmp	r0, #0
 800bcbe:	d1e9      	bne.n	800bc94 <remote_sensor_lookup_type+0x8>
 800bcc0:	4620      	mov	r0, r4
 800bcc2:	17e1      	asrs	r1, r4, #31
}
 800bcc4:	bd70      	pop	{r4, r5, r6, pc}
 800bcc6:	bf00      	nop
 800bcc8:	0800e644 	.word	0x0800e644

0800bccc <remote_sensor_config>:
int remote_sensor_config(struct remote_sensor *dev, struct remote_sensor_cfg *cfg) {
 800bccc:	b508      	push	{r3, lr}
    itf = SENSOR_GET_ITF(&(dev->sensor)); assert(itf);
 800bcce:	f110 0370 	adds.w	r3, r0, #112	; 0x70
 800bcd2:	d104      	bne.n	800bcde <remote_sensor_config+0x12>
 800bcd4:	461a      	mov	r2, r3
 800bcd6:	4619      	mov	r1, r3
 800bcd8:	4618      	mov	r0, r3
 800bcda:	f7f7 feeb 	bl	8003ab4 <__assert_func>
    rc = sensor_set_type_mask(&(dev->sensor),  cfg->bc_s_mask);
 800bcde:	e9d1 2300 	ldrd	r2, r3, [r1]
 800bce2:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
    dev->cfg.bc_s_mask = cfg->bc_s_mask;
 800bce6:	e9d1 2300 	ldrd	r2, r3, [r1]
 800bcea:	e9c0 232c 	strd	r2, r3, [r0, #176]	; 0xb0
}
 800bcee:	2000      	movs	r0, #0
 800bcf0:	bd08      	pop	{r3, pc}

0800bcf2 <remote_sensor_default_cfg>:
    memset(cfg, 0, sizeof(struct remote_sensor_cfg));  //  Zero the entire object.
 800bcf2:	2300      	movs	r3, #0
int remote_sensor_default_cfg(struct remote_sensor_cfg *cfg) {
 800bcf4:	b530      	push	{r4, r5, lr}
    cfg->bc_s_mask = SENSOR_TYPE_ALL;  //  Return all sensor values, i.e. temperature.
 800bcf6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800bcfa:	2500      	movs	r5, #0
    memset(cfg, 0, sizeof(struct remote_sensor_cfg));  //  Zero the entire object.
 800bcfc:	6083      	str	r3, [r0, #8]
 800bcfe:	60c3      	str	r3, [r0, #12]
    cfg->bc_s_mask = SENSOR_TYPE_ALL;  //  Return all sensor values, i.e. temperature.
 800bd00:	e9c0 4500 	strd	r4, r5, [r0]
}
 800bd04:	4618      	mov	r0, r3
 800bd06:	bd30      	pop	{r4, r5, pc}

0800bd08 <remote_sensor_init>:
int remote_sensor_init(struct os_dev *dev0, void *arg) {
 800bd08:	b570      	push	{r4, r5, r6, lr}
 800bd0a:	460d      	mov	r5, r1
    if (!dev0) { rc = SYS_ENODEV; goto err; }
 800bd0c:	4604      	mov	r4, r0
 800bd0e:	b348      	cbz	r0, 800bd64 <remote_sensor_init+0x5c>
    rc = remote_sensor_default_cfg(&dev->cfg);
 800bd10:	30b0      	adds	r0, #176	; 0xb0
 800bd12:	f7ff ffee 	bl	800bcf2 <remote_sensor_default_cfg>
    if (rc) { goto err; }
 800bd16:	bb08      	cbnz	r0, 800bd5c <remote_sensor_init+0x54>
    sensor = &dev->sensor;
 800bd18:	f104 0628 	add.w	r6, r4, #40	; 0x28
    rc = sensor_init(sensor, dev0);
 800bd1c:	4621      	mov	r1, r4
 800bd1e:	4630      	mov	r0, r6
 800bd20:	f7f7 fde3 	bl	80038ea <sensor_init>
    if (rc != 0) { goto err; }
 800bd24:	b9d0      	cbnz	r0, 800bd5c <remote_sensor_init+0x54>
    int all_types = 0;  const struct sensor_type_descriptor *st = sensor_types;
 800bd26:	4b11      	ldr	r3, [pc, #68]	; (800bd6c <remote_sensor_init+0x64>)
    while (st->type) { all_types |= st->type; st++; }
 800bd28:	685a      	ldr	r2, [r3, #4]
 800bd2a:	b9c2      	cbnz	r2, 800bd5e <remote_sensor_init+0x56>
    rc = sensor_set_driver(sensor, all_types, (struct sensor_driver *) &g_sensor_driver);
 800bd2c:	17c1      	asrs	r1, r0, #31
 800bd2e:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    memcpy(&sensor->s_itf, s_itf, sizeof(*s_itf));
 800bd32:	4629      	mov	r1, r5
    sensor->s_funcs = driver;
 800bd34:	4b0e      	ldr	r3, [pc, #56]	; (800bd70 <remote_sensor_init+0x68>)
    memcpy(&sensor->s_itf, s_itf, sizeof(*s_itf));
 800bd36:	f105 0214 	add.w	r2, r5, #20
    sensor->s_funcs = driver;
 800bd3a:	6523      	str	r3, [r4, #80]	; 0x50
    memcpy(&sensor->s_itf, s_itf, sizeof(*s_itf));
 800bd3c:	f104 0370 	add.w	r3, r4, #112	; 0x70
 800bd40:	f851 0b04 	ldr.w	r0, [r1], #4
 800bd44:	4291      	cmp	r1, r2
 800bd46:	f843 0b04 	str.w	r0, [r3], #4
 800bd4a:	d1f9      	bne.n	800bd40 <remote_sensor_init+0x38>
    rc = sensor_mgr_register(sensor);
 800bd4c:	4630      	mov	r0, r6
 800bd4e:	f7f7 fdb7 	bl	80038c0 <sensor_mgr_register>
    if (rc != 0) { goto err; }
 800bd52:	b918      	cbnz	r0, 800bd5c <remote_sensor_init+0x54>
    OS_DEV_SETHANDLERS(dev0, sensor_open_internal, sensor_close_internal);
 800bd54:	4b07      	ldr	r3, [pc, #28]	; (800bd74 <remote_sensor_init+0x6c>)
 800bd56:	6023      	str	r3, [r4, #0]
 800bd58:	4b07      	ldr	r3, [pc, #28]	; (800bd78 <remote_sensor_init+0x70>)
 800bd5a:	60e3      	str	r3, [r4, #12]
}
 800bd5c:	bd70      	pop	{r4, r5, r6, pc}
    while (st->type) { all_types |= st->type; st++; }
 800bd5e:	4310      	orrs	r0, r2
 800bd60:	3310      	adds	r3, #16
 800bd62:	e7e1      	b.n	800bd28 <remote_sensor_init+0x20>
    if (!dev0) { rc = SYS_ENODEV; goto err; }
 800bd64:	f06f 0008 	mvn.w	r0, #8
 800bd68:	e7f8      	b.n	800bd5c <remote_sensor_init+0x54>
 800bd6a:	bf00      	nop
 800bd6c:	0800e634 	.word	0x0800e634
 800bd70:	0800e60c 	.word	0x0800e60c
 800bd74:	0800bc79 	.word	0x0800bc79
 800bd78:	0800bb71 	.word	0x0800bb71

0800bd7c <receive_callback>:
        os_dev_close((struct os_dev *) dev);        
    }   //  Unlock the nRF24L01 driver for exclusive use.
    return 0;
}

static void receive_callback(struct os_event *ev) {
 800bd7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd80:	b089      	sub	sp, #36	; 0x24
    //  Callback that is triggered when we receive an nRF24L01 message.
    //  This callback is triggered by the nRF24L01 receive interrupt,
    //  which is forwarded to the Default Event Queue.
    //  console_printf("%srx interrupt\n", _nrf);
    const char **sensor_node_names = get_sensor_node_names();
 800bd82:	f7f6 fbe9 	bl	8002558 <get_sensor_node_names>
    assert(sensor_node_names);
 800bd86:	4681      	mov	r9, r0
 800bd88:	b928      	cbnz	r0, 800bd96 <receive_callback+0x1a>
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	461a      	mov	r2, r3
 800bd8e:	4619      	mov	r1, r3
 800bd90:	4618      	mov	r0, r3
 800bd92:	f7f7 fe8f 	bl	8003ab4 <__assert_func>
        int pipe = -1;
        int rxDataCnt = 0;
        const char *name = NULL;
        {   //  Lock the nRF24L01 driver for exclusive use.
            //  Find the nRF24L01 device by name "nrf24l01_0".
            struct nrf24l01 *dev = (struct nrf24l01 *) os_dev_open(NRF24L01_DEVICE, OS_TIMEOUT_NEVER, NULL);
 800bd96:	f04f 0a00 	mov.w	sl, #0
 800bd9a:	270a      	movs	r7, #10
        int rxDataCnt = 0;
 800bd9c:	46d0      	mov	r8, sl
            struct nrf24l01 *dev = (struct nrf24l01 *) os_dev_open(NRF24L01_DEVICE, OS_TIMEOUT_NEVER, NULL);
 800bd9e:	2200      	movs	r2, #0
 800bda0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800bda4:	4845      	ldr	r0, [pc, #276]	; (800bebc <receive_callback+0x140>)
 800bda6:	f7f8 f90f 	bl	8003fc8 <os_dev_open>
            assert(dev != NULL);
 800bdaa:	4606      	mov	r6, r0
 800bdac:	2800      	cmp	r0, #0
 800bdae:	d0ec      	beq.n	800bd8a <receive_callback+0xe>

            //  Get a pipe that has data to receive.
            pipe = nrf24l01_readable_pipe(dev);
 800bdb0:	f7fe ffaf 	bl	800ad12 <nrf24l01_readable_pipe>
            if (pipe > 0) {
 800bdb4:	1e04      	subs	r4, r0, #0
 800bdb6:	dd59      	ble.n	800be6c <receive_callback+0xf0>
                //  Read the data into the receive buffer
                rxDataCnt = nrf24l01_receive(dev, pipe, rxData, MYNEWT_VAL(NRF24L01_TX_SIZE));
 800bdb8:	230c      	movs	r3, #12
 800bdba:	4a41      	ldr	r2, [pc, #260]	; (800bec0 <receive_callback+0x144>)
 800bdbc:	4621      	mov	r1, r4
 800bdbe:	4630      	mov	r0, r6
 800bdc0:	f7fe ff92 	bl	800ace8 <nrf24l01_receive>
                assert(rxDataCnt > 0 && rxDataCnt <= MYNEWT_VAL(NRF24L01_TX_SIZE));
 800bdc4:	1e43      	subs	r3, r0, #1
 800bdc6:	2b0b      	cmp	r3, #11
                rxDataCnt = nrf24l01_receive(dev, pipe, rxData, MYNEWT_VAL(NRF24L01_TX_SIZE));
 800bdc8:	4683      	mov	fp, r0
                assert(rxDataCnt > 0 && rxDataCnt <= MYNEWT_VAL(NRF24L01_TX_SIZE));
 800bdca:	d8de      	bhi.n	800bd8a <receive_callback+0xe>
                //  Get the rx (sender) address for the pipe.
                name = sensor_node_names[pipe - 1];
 800bdcc:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 800bdd0:	3b01      	subs	r3, #1
 800bdd2:	f859 5023 	ldr.w	r5, [r9, r3, lsl #2]
            }
            //  Close the nRF24L01 device when we are done.
            os_dev_close((struct os_dev *) dev);
 800bdd6:	4630      	mov	r0, r6
 800bdd8:	f7f8 f917 	bl	800400a <os_dev_close>
        }   //  Unlock the nRF24L01 driver for exclusive use.

        //  If no data available, quit.
        if (pipe <= 0) { break; }
 800bddc:	2c00      	cmp	r4, #0
 800bdde:	dd42      	ble.n	800be66 <receive_callback+0xea>

        //  Process the received data.
        if (rxDataCnt > 0) { 
 800bde0:	f1bb 0f00 	cmp.w	fp, #0
 800bde4:	d03d      	beq.n	800be62 <receive_callback+0xe6>
            //  Display the receive buffer contents
            console_printf("%srx ", _nrf); console_dump((const uint8_t *) rxData, rxDataCnt); console_printf("\n"); 
 800bde6:	4e36      	ldr	r6, [pc, #216]	; (800bec0 <receive_callback+0x144>)
 800bde8:	4936      	ldr	r1, [pc, #216]	; (800bec4 <receive_callback+0x148>)
 800bdea:	4837      	ldr	r0, [pc, #220]	; (800bec8 <receive_callback+0x14c>)
 800bdec:	f7f6 fa1e 	bl	800222c <console_printf>
 800bdf0:	4659      	mov	r1, fp
 800bdf2:	4630      	mov	r0, r6
 800bdf4:	f7f6 f9b2 	bl	800215c <console_dump>
 800bdf8:	4834      	ldr	r0, [pc, #208]	; (800becc <receive_callback+0x150>)
 800bdfa:	f7f6 fa17 	bl	800222c <console_printf>
            int rc = process_coap_message(name, rxData, rxDataCnt);  //  Process the incoming message and trigger the Remote Sensor.
 800bdfe:	fa5f f48b 	uxtb.w	r4, fp
    //  that will send the sensor data into the Listener Function for the Remote Sensor.
    //  Payload contains {field1: val1, field2: val2, ...} in CBOR format.
    //  Last byte is sequence number.  Between the CoAP payload and the last byte, all bytes are 0 
    //  and should be discarded before decoding.  "name" is the Sensor Node Address like "b3b4b5b6f1".
    //  Return 0 if successful.
    assert(name);  assert(data);  assert(size0 > 0);
 800be02:	2d00      	cmp	r5, #0
 800be04:	d0c1      	beq.n	800bd8a <receive_callback+0xe>
    uint8_t size = size0;
    data[size - 1] = 0;  //  Erase sequence number.
 800be06:	44b3      	add	fp, r6
 800be08:	f80b ac01 	strb.w	sl, [fp, #-1]
    while (size > 0 && data[size - 1] == 0) { size--; }  //  Discard trailing zeroes.
 800be0c:	1933      	adds	r3, r6, r4
 800be0e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800be12:	b91b      	cbnz	r3, 800be1c <receive_callback+0xa0>
 800be14:	3c01      	subs	r4, #1
 800be16:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 800be1a:	d1f7      	bne.n	800be0c <receive_callback+0x90>
    //  Convert data buffer to mbuf, since oc_parse_rep() only accepts mbuf.
    int rc;
    struct os_mbuf *om;

    //  Get a packet header mbuf.
    om = os_msys_get_pkthdr(MYNEWT_VAL(NRF24L01_TX_SIZE), 4);
 800be1c:	2104      	movs	r1, #4
 800be1e:	200c      	movs	r0, #12
    oc_rep_t *rep = NULL;
 800be20:	f8cd 801c 	str.w	r8, [sp, #28]
    om = os_msys_get_pkthdr(MYNEWT_VAL(NRF24L01_TX_SIZE), 4);
 800be24:	f7f8 fcf4 	bl	8004810 <os_msys_get_pkthdr>
    assert(om);
 800be28:	4683      	mov	fp, r0
 800be2a:	2800      	cmp	r0, #0
 800be2c:	d0ad      	beq.n	800bd8a <receive_callback+0xe>
    if (!om) { return -1; }

    //  Copy data buffer into mbuf.
    rc = os_mbuf_copyinto(om, 0, data, size);
 800be2e:	4623      	mov	r3, r4
 800be30:	4a23      	ldr	r2, [pc, #140]	; (800bec0 <receive_callback+0x144>)
 800be32:	2100      	movs	r1, #0
 800be34:	f7f8 fbd6 	bl	80045e4 <os_mbuf_copyinto>
    if (rc) { rc = -2; goto exit; }  //  Out of mbufs.
 800be38:	4606      	mov	r6, r0
 800be3a:	b9d0      	cbnz	r0, 800be72 <receive_callback+0xf6>

    //  Parse the mbuf.
    rc = oc_parse_rep(om, 0, size, out_rep);
 800be3c:	4601      	mov	r1, r0
 800be3e:	ab07      	add	r3, sp, #28
 800be40:	4622      	mov	r2, r4
 800be42:	4658      	mov	r0, fp
 800be44:	f7f6 fe92 	bl	8002b6c <oc_parse_rep>
    assert(rc == 0);
 800be48:	2800      	cmp	r0, #0
 800be4a:	d19e      	bne.n	800bd8a <receive_callback+0xe>

exit:
    //  Free the mbuf.
    os_mbuf_free_chain(om);
 800be4c:	4658      	mov	r0, fp
 800be4e:	f7f8 fa3a 	bl	80042c6 <os_mbuf_free_chain>
    assert(rc == 0);
 800be52:	2e00      	cmp	r6, #0
 800be54:	d199      	bne.n	800bd8a <receive_callback+0xe>
    oc_rep_t *first_rep = rep;
 800be56:	9c07      	ldr	r4, [sp, #28]
    while(rep) {
 800be58:	9b07      	ldr	r3, [sp, #28]
 800be5a:	b96b      	cbnz	r3, 800be78 <receive_callback+0xfc>
    oc_free_rep(first_rep);
 800be5c:	4620      	mov	r0, r4
 800be5e:	f7f6 fe59 	bl	8002b14 <oc_free_rep>
    for (i = 0; i < NRL24L01_MAX_RX_PIPES * 2; i++) {
 800be62:	3f01      	subs	r7, #1
 800be64:	d19b      	bne.n	800bd9e <receive_callback+0x22>
}
 800be66:	b009      	add	sp, #36	; 0x24
 800be68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        const char *name = NULL;
 800be6c:	2500      	movs	r5, #0
        int rxDataCnt = 0;
 800be6e:	46ab      	mov	fp, r5
 800be70:	e7b1      	b.n	800bdd6 <receive_callback+0x5a>
    if (rc) { rc = -2; goto exit; }  //  Out of mbufs.
 800be72:	f06f 0601 	mvn.w	r6, #1
 800be76:	e7e9      	b.n	800be4c <receive_callback+0xd0>
        sensor_type_t type = remote_sensor_lookup_type(oc_string(rep->name));  
 800be78:	68d8      	ldr	r0, [r3, #12]
 800be7a:	f7ff ff07 	bl	800bc8c <remote_sensor_lookup_type>
 800be7e:	4602      	mov	r2, r0
 800be80:	460b      	mov	r3, r1
        assert(type);  //  Unknown field name
 800be82:	ea52 0103 	orrs.w	r1, r2, r3
 800be86:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800be8a:	f43f af7e 	beq.w	800bd8a <receive_callback+0xe>
        struct sensor *remote_sensor = sensor_mgr_find_next_bydevname(name, NULL);
 800be8e:	2100      	movs	r1, #0
 800be90:	4628      	mov	r0, r5
 800be92:	f7f7 fc49 	bl	8003728 <sensor_mgr_find_next_bydevname>
        assert(remote_sensor);  //  Sensor not found
 800be96:	2800      	cmp	r0, #0
 800be98:	f43f af77 	beq.w	800bd8a <receive_callback+0xe>
        rc = sensor_read(remote_sensor, type, NULL, rep, 0);
 800be9c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bea0:	9907      	ldr	r1, [sp, #28]
 800bea2:	f8cd 8008 	str.w	r8, [sp, #8]
 800bea6:	e9cd 8100 	strd	r8, r1, [sp]
 800beaa:	f7f7 fd3b 	bl	8003924 <sensor_read>
        assert(rc == 0);
 800beae:	2800      	cmp	r0, #0
 800beb0:	f47f af6b 	bne.w	800bd8a <receive_callback+0xe>
        rep = rep->next;
 800beb4:	9b07      	ldr	r3, [sp, #28]
 800beb6:	685b      	ldr	r3, [r3, #4]
 800beb8:	9307      	str	r3, [sp, #28]
 800beba:	e7cd      	b.n	800be58 <receive_callback+0xdc>
 800bebc:	0800e394 	.word	0x0800e394
 800bec0:	20003860 	.word	0x20003860
 800bec4:	0800e5f8 	.word	0x0800e5f8
 800bec8:	0800e68b 	.word	0x0800e68b
 800becc:	0800e41f 	.word	0x0800e41f

0800bed0 <remote_sensor_start>:
int remote_sensor_start(void) {
 800bed0:	b510      	push	{r4, lr}
    if (!is_collector_node()) { return 0; }  //  Only start for Collector Nodes, not Sensor Nodes.
 800bed2:	f7f6 fae9 	bl	80024a8 <is_collector_node>
 800bed6:	b1a8      	cbz	r0, 800bf04 <remote_sensor_start+0x34>
        struct nrf24l01 *dev = (struct nrf24l01 *) os_dev_open(NRF24L01_DEVICE, OS_TIMEOUT_NEVER, NULL);
 800bed8:	2200      	movs	r2, #0
 800beda:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800bede:	480a      	ldr	r0, [pc, #40]	; (800bf08 <remote_sensor_start+0x38>)
 800bee0:	f7f8 f872 	bl	8003fc8 <os_dev_open>
        assert(dev != NULL);
 800bee4:	4604      	mov	r4, r0
 800bee6:	b928      	cbnz	r0, 800bef4 <remote_sensor_start+0x24>
 800bee8:	2300      	movs	r3, #0
 800beea:	461a      	mov	r2, r3
 800beec:	4619      	mov	r1, r3
 800beee:	4618      	mov	r0, r3
 800bef0:	f7f7 fde0 	bl	8003ab4 <__assert_func>
        int rc = nrf24l01_set_rx_callback(dev, receive_callback);
 800bef4:	4905      	ldr	r1, [pc, #20]	; (800bf0c <remote_sensor_start+0x3c>)
 800bef6:	f7fe ff19 	bl	800ad2c <nrf24l01_set_rx_callback>
        assert(rc == 0);
 800befa:	2800      	cmp	r0, #0
 800befc:	d1f4      	bne.n	800bee8 <remote_sensor_start+0x18>
        os_dev_close((struct os_dev *) dev);        
 800befe:	4620      	mov	r0, r4
 800bf00:	f7f8 f883 	bl	800400a <os_dev_close>
}
 800bf04:	2000      	movs	r0, #0
 800bf06:	bd10      	pop	{r4, pc}
 800bf08:	0800e394 	.word	0x0800e394
 800bf0c:	0800bd7d 	.word	0x0800bd7d

0800bf10 <temp_stm32_create>:
    os_dev_close(dev);
    return rc;
}

//  Create the device instance and configure it. Called by sysinit() during startup, defined in pkg.yml.
void DEVICE_CREATE(void) {
 800bf10:	b530      	push	{r4, r5, lr}
    console_printf("TMP create " DEVICE_NAME "\n");
 800bf12:	4817      	ldr	r0, [pc, #92]	; (800bf70 <temp_stm32_create+0x60>)
void DEVICE_CREATE(void) {
 800bf14:	b089      	sub	sp, #36	; 0x24
    console_printf("TMP create " DEVICE_NAME "\n");
 800bf16:	f7f6 f989 	bl	800222c <console_printf>

    //  Create the device.
    int rc = os_dev_create((struct os_dev *) &DEVICE_INSTANCE, DEVICE_NAME,
 800bf1a:	4b16      	ldr	r3, [pc, #88]	; (800bf74 <temp_stm32_create+0x64>)
 800bf1c:	2201      	movs	r2, #1
 800bf1e:	9301      	str	r3, [sp, #4]
 800bf20:	4b15      	ldr	r3, [pc, #84]	; (800bf78 <temp_stm32_create+0x68>)
 800bf22:	4916      	ldr	r1, [pc, #88]	; (800bf7c <temp_stm32_create+0x6c>)
 800bf24:	9300      	str	r3, [sp, #0]
 800bf26:	4816      	ldr	r0, [pc, #88]	; (800bf80 <temp_stm32_create+0x70>)
 800bf28:	2300      	movs	r3, #0
 800bf2a:	f7f7 ffe3 	bl	8003ef4 <os_dev_create>
        OS_DEV_INIT_PRIMARY, 0, 
        DEVICE_INIT, (void *) &DEVICE_ITF);
    assert(rc == 0);
 800bf2e:	4602      	mov	r2, r0
 800bf30:	b128      	cbz	r0, 800bf3e <temp_stm32_create+0x2e>
 800bf32:	2300      	movs	r3, #0
 800bf34:	461a      	mov	r2, r3
 800bf36:	4619      	mov	r1, r3
 800bf38:	4618      	mov	r0, r3
 800bf3a:	f7f7 fdbb 	bl	8003ab4 <__assert_func>
    dev = (struct os_dev *) os_dev_open(DEVICE_NAME, OS_TIMEOUT_NEVER, NULL);
 800bf3e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800bf42:	480e      	ldr	r0, [pc, #56]	; (800bf7c <temp_stm32_create+0x6c>)
 800bf44:	f7f8 f840 	bl	8003fc8 <os_dev_open>
    assert(dev != NULL);
 800bf48:	4604      	mov	r4, r0
 800bf4a:	2800      	cmp	r0, #0
 800bf4c:	d0f1      	beq.n	800bf32 <temp_stm32_create+0x22>
    rc = DEVICE_CFG_DEFAULT(&cfg);
 800bf4e:	a802      	add	r0, sp, #8
 800bf50:	f7f9 ff58 	bl	8005e04 <temp_stm32_default_cfg>
    assert(rc == 0);
 800bf54:	2800      	cmp	r0, #0
 800bf56:	d1ec      	bne.n	800bf32 <temp_stm32_create+0x22>
    rc = DEVICE_CFG_FUNC((struct DEVICE_DEV *)dev, &cfg);
 800bf58:	a902      	add	r1, sp, #8
 800bf5a:	4620      	mov	r0, r4
 800bf5c:	f7fa f824 	bl	8005fa8 <temp_stm32_config>
 800bf60:	4605      	mov	r5, r0
    os_dev_close(dev);
 800bf62:	4620      	mov	r0, r4
 800bf64:	f7f8 f851 	bl	800400a <os_dev_close>

    //  Configure the device.
    rc = config_device();
    assert(rc == 0);
 800bf68:	2d00      	cmp	r5, #0
 800bf6a:	d1e2      	bne.n	800bf32 <temp_stm32_create+0x22>
}
 800bf6c:	b009      	add	sp, #36	; 0x24
 800bf6e:	bd30      	pop	{r4, r5, pc}
 800bf70:	0800e691 	.word	0x0800e691
 800bf74:	2000386c 	.word	0x2000386c
 800bf78:	08005e31 	.word	0x08005e31
 800bf7c:	0800de38 	.word	0x0800de38
 800bf80:	20003880 	.word	0x20003880

0800bf84 <oc_register_gatt>:
oc_register_gatt(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_GATT) == 1)
    oc_gatt_transport_id = oc_transport_register(&oc_gatt_transport);
#endif
}
 800bf84:	4770      	bx	lr

0800bf86 <oc_register_ip4>:
oc_register_ip4(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_IP) == 1) && (MYNEWT_VAL(OC_TRANSPORT_IPV4) == 1)
    oc_ip4_transport_id = oc_transport_register(&oc_ip4_transport);
#endif
}
 800bf86:	4770      	bx	lr

0800bf88 <oc_register_ip6>:
oc_register_ip6(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_IP) == 1) && (MYNEWT_VAL(OC_TRANSPORT_IPV6) == 1)
    oc_ip6_transport_id = oc_transport_register(&oc_ip6_transport);
#endif
}
 800bf88:	4770      	bx	lr

0800bf8a <oc_register_lora>:
oc_register_lora(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_LORA) == 1)
    oc_lora_transport_id = oc_transport_register(&oc_lora_transport);
#endif
}
 800bf8a:	4770      	bx	lr

0800bf8c <oc_register_serial>:
oc_register_serial(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_SERIAL) == 1)
    oc_serial_transport_id = oc_transport_register(&oc_serial_transport);
#endif
}
 800bf8c:	4770      	bx	lr
	...

0800bf90 <flash_area_open>:
flash_area_open(uint8_t id, const struct flash_area **fap)
{
    const struct flash_area *area;
    int i;

    if (flash_map == NULL) {
 800bf90:	4b0c      	ldr	r3, [pc, #48]	; (800bfc4 <flash_area_open+0x34>)
{
 800bf92:	b570      	push	{r4, r5, r6, lr}
    if (flash_map == NULL) {
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	b18b      	cbz	r3, 800bfbc <flash_area_open+0x2c>
        return SYS_EACCES;
    }

    for (i = 0; i < flash_map_entries; i++) {
 800bf98:	4a0b      	ldr	r2, [pc, #44]	; (800bfc8 <flash_area_open+0x38>)
 800bf9a:	6814      	ldr	r4, [r2, #0]
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	4294      	cmp	r4, r2
 800bfa0:	dc02      	bgt.n	800bfa8 <flash_area_open+0x18>
            *fap = area;
            return 0;
        }
    }

    return SYS_ENOENT;
 800bfa2:	f06f 0003 	mvn.w	r0, #3
 800bfa6:	e006      	b.n	800bfb6 <flash_area_open+0x26>
        area = flash_map + i;
 800bfa8:	461d      	mov	r5, r3
        if (area->fa_id == id) {
 800bfaa:	f813 6b0c 	ldrb.w	r6, [r3], #12
 800bfae:	4286      	cmp	r6, r0
 800bfb0:	d102      	bne.n	800bfb8 <flash_area_open+0x28>
            return 0;
 800bfb2:	2000      	movs	r0, #0
            *fap = area;
 800bfb4:	600d      	str	r5, [r1, #0]
}
 800bfb6:	bd70      	pop	{r4, r5, r6, pc}
    for (i = 0; i < flash_map_entries; i++) {
 800bfb8:	3201      	adds	r2, #1
 800bfba:	e7f0      	b.n	800bf9e <flash_area_open+0xe>
        return SYS_EACCES;
 800bfbc:	f06f 0006 	mvn.w	r0, #6
 800bfc0:	e7f9      	b.n	800bfb6 <flash_area_open+0x26>
 800bfc2:	bf00      	nop
 800bfc4:	20003c88 	.word	0x20003c88
 800bfc8:	20003c8c 	.word	0x20003c8c

0800bfcc <flash_area_read>:
}

int
flash_area_read(const struct flash_area *fa, uint32_t off, void *dst,
    uint32_t len)
{
 800bfcc:	b430      	push	{r4, r5}
    if (off > fa->fa_size || off + len > fa->fa_size) {
 800bfce:	6885      	ldr	r5, [r0, #8]
{
 800bfd0:	461c      	mov	r4, r3
    if (off > fa->fa_size || off + len > fa->fa_size) {
 800bfd2:	428d      	cmp	r5, r1
 800bfd4:	d308      	bcc.n	800bfe8 <flash_area_read+0x1c>
 800bfd6:	440c      	add	r4, r1
 800bfd8:	42a5      	cmp	r5, r4
 800bfda:	d305      	bcc.n	800bfe8 <flash_area_read+0x1c>
        return -1;
    }
    return hal_flash_read(fa->fa_device_id, fa->fa_off + off, dst, len);
 800bfdc:	6844      	ldr	r4, [r0, #4]
 800bfde:	7840      	ldrb	r0, [r0, #1]
 800bfe0:	4421      	add	r1, r4
}
 800bfe2:	bc30      	pop	{r4, r5}
    return hal_flash_read(fa->fa_device_id, fa->fa_off + off, dst, len);
 800bfe4:	f000 bb8c 	b.w	800c700 <hal_flash_read>
}
 800bfe8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bfec:	bc30      	pop	{r4, r5}
 800bfee:	4770      	bx	lr

0800bff0 <flash_map_init>:
    }
}

void
flash_map_init(void)
{
 800bff0:	b5f0      	push	{r4, r5, r6, r7, lr}

    int num_areas;
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
 800bff2:	4b24      	ldr	r3, [pc, #144]	; (800c084 <flash_map_init+0x94>)
{
 800bff4:	b089      	sub	sp, #36	; 0x24
    SYSINIT_ASSERT_ACTIVE();
 800bff6:	781b      	ldrb	r3, [r3, #0]
 800bff8:	b923      	cbnz	r3, 800c004 <flash_map_init+0x14>
 800bffa:	461a      	mov	r2, r3
 800bffc:	4619      	mov	r1, r3
 800bffe:	4618      	mov	r0, r3
 800c000:	f7f7 fd58 	bl	8003ab4 <__assert_func>

    rc = hal_flash_init();
 800c004:	f000 fb6a 	bl	800c6dc <hal_flash_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
 800c008:	b138      	cbz	r0, 800c01a <flash_map_init+0x2a>
 800c00a:	2300      	movs	r3, #0
 800c00c:	4a1e      	ldr	r2, [pc, #120]	; (800c088 <flash_map_init+0x98>)
 800c00e:	9300      	str	r3, [sp, #0]
 800c010:	6814      	ldr	r4, [r2, #0]
 800c012:	4619      	mov	r1, r3
 800c014:	461a      	mov	r2, r3
 800c016:	4618      	mov	r0, r3
 800c018:	47a0      	blx	r4
     *    In particular, a FLASH_AREA_BOOTLOADER entry is required for the boot
     *    MMR, as well as an entry for each extended MMR.
     * 2. If we fail to read the flash map from the MMRs, the system continues
     *    to use the default flash map.
     */
    flash_map = sysflash_map_dflt;
 800c01a:	4b1c      	ldr	r3, [pc, #112]	; (800c08c <flash_map_init+0x9c>)
 800c01c:	4e1c      	ldr	r6, [pc, #112]	; (800c090 <flash_map_init+0xa0>)
    flash_map_entries = sizeof sysflash_map_dflt / sizeof sysflash_map_dflt[0];
 800c01e:	4f1d      	ldr	r7, [pc, #116]	; (800c094 <flash_map_init+0xa4>)
    flash_map = sysflash_map_dflt;
 800c020:	6033      	str	r3, [r6, #0]
    flash_map_entries = sizeof sysflash_map_dflt / sizeof sysflash_map_dflt[0];
 800c022:	2306      	movs	r3, #6
 800c024:	603b      	str	r3, [r7, #0]
    mfg_init();
 800c026:	f000 f911 	bl	800c24c <mfg_init>
    mfg_open(&reader);
 800c02a:	a803      	add	r0, sp, #12
 800c02c:	f000 f93c 	bl	800c2a8 <mfg_open>
    *out_num_areas = 0;
 800c030:	2400      	movs	r4, #0
        fap->fa_id = meta_flash_area.area_id;
 800c032:	4d19      	ldr	r5, [pc, #100]	; (800c098 <flash_map_init+0xa8>)
        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_FLASH_AREA);
 800c034:	2102      	movs	r1, #2
 800c036:	a803      	add	r0, sp, #12
 800c038:	f000 f8f6 	bl	800c228 <mfg_seek_next_with_type>
        switch (rc) {
 800c03c:	f110 0f0f 	cmn.w	r0, #15
 800c040:	d019      	beq.n	800c076 <flash_map_init+0x86>
 800c042:	b9b0      	cbnz	r0, 800c072 <flash_map_init+0x82>
        rc = mfg_read_tlv_flash_area(&reader, &meta_flash_area);
 800c044:	a905      	add	r1, sp, #20
 800c046:	a803      	add	r0, sp, #12
 800c048:	f000 f8f9 	bl	800c23e <mfg_read_tlv_flash_area>
        if (rc != 0) {
 800c04c:	b988      	cbnz	r0, 800c072 <flash_map_init+0x82>
 800c04e:	230c      	movs	r3, #12
 800c050:	4363      	muls	r3, r4
        fap->fa_id = meta_flash_area.area_id;
 800c052:	f89d 2014 	ldrb.w	r2, [sp, #20]
        (*out_num_areas)++;
 800c056:	3401      	adds	r4, #1
        fap->fa_id = meta_flash_area.area_id;
 800c058:	555a      	strb	r2, [r3, r5]
        fap->fa_device_id = meta_flash_area.device_id;
 800c05a:	f89d 2015 	ldrb.w	r2, [sp, #21]
 800c05e:	442b      	add	r3, r5
 800c060:	705a      	strb	r2, [r3, #1]
        fap->fa_off = meta_flash_area.offset;
 800c062:	f8dd 2016 	ldr.w	r2, [sp, #22]
        if (*out_num_areas >= max_areas) {
 800c066:	2c0a      	cmp	r4, #10
        fap->fa_off = meta_flash_area.offset;
 800c068:	605a      	str	r2, [r3, #4]
        fap->fa_size = meta_flash_area.size;
 800c06a:	f8dd 201a 	ldr.w	r2, [sp, #26]
 800c06e:	609a      	str	r2, [r3, #8]
        if (*out_num_areas >= max_areas) {
 800c070:	d1e0      	bne.n	800c034 <flash_map_init+0x44>
                            mfg_areas, &num_areas);
    if (rc == 0 && num_areas > 0) {
        flash_map = mfg_areas;
        flash_map_entries = num_areas;
    }
}
 800c072:	b009      	add	sp, #36	; 0x24
 800c074:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (rc == 0 && num_areas > 0) {
 800c076:	2c00      	cmp	r4, #0
 800c078:	d0fb      	beq.n	800c072 <flash_map_init+0x82>
        flash_map = mfg_areas;
 800c07a:	4b07      	ldr	r3, [pc, #28]	; (800c098 <flash_map_init+0xa8>)
        flash_map_entries = num_areas;
 800c07c:	603c      	str	r4, [r7, #0]
        flash_map = mfg_areas;
 800c07e:	6033      	str	r3, [r6, #0]
}
 800c080:	e7f7      	b.n	800c072 <flash_map_init+0x82>
 800c082:	bf00      	nop
 800c084:	20003a30 	.word	0x20003a30
 800c088:	20000148 	.word	0x20000148
 800c08c:	0800e6ac 	.word	0x0800e6ac
 800c090:	20003c88 	.word	0x20003c88
 800c094:	20003c8c 	.word	0x20003c8c
 800c098:	20003950 	.word	0x20003950

0800c09c <modlog_init>:

#else /* LOG_FULL */

void
modlog_init(void)
{ }
 800c09c:	4770      	bx	lr
	...

0800c0a0 <mfg_read_next_mmr>:
 * Reads an MMR from the end of the specified flash area.  On success, the
 * global MMR list is populated with the result for subsequent reading.
 */
static int
mfg_read_next_mmr(uint8_t area_id)
{
 800c0a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    int rc;
    int i;

    /* Detect if this MMR has already been read. */
    for (i = 0; i < mfg_num_mmrs; i++) {
 800c0a2:	2300      	movs	r3, #0
{
 800c0a4:	4605      	mov	r5, r0
        if (mfg_mmrs[i].area_id == area_id) {
 800c0a6:	210c      	movs	r1, #12
    for (i = 0; i < mfg_num_mmrs; i++) {
 800c0a8:	4c23      	ldr	r4, [pc, #140]	; (800c138 <mfg_read_next_mmr+0x98>)
        if (mfg_mmrs[i].area_id == area_id) {
 800c0aa:	4a24      	ldr	r2, [pc, #144]	; (800c13c <mfg_read_next_mmr+0x9c>)
    for (i = 0; i < mfg_num_mmrs; i++) {
 800c0ac:	6826      	ldr	r6, [r4, #0]
{
 800c0ae:	b085      	sub	sp, #20
    for (i = 0; i < mfg_num_mmrs; i++) {
 800c0b0:	429e      	cmp	r6, r3
 800c0b2:	dc0a      	bgt.n	800c0ca <mfg_read_next_mmr+0x2a>
            return SYS_EALREADY;
        }
    }

    if (mfg_num_mmrs >= MYNEWT_VAL(MFG_MAX_MMRS)) {
 800c0b4:	2e02      	cmp	r6, #2
 800c0b6:	d03c      	beq.n	800c132 <mfg_read_next_mmr+0x92>
    rc = flash_area_open(area_id, &fap);
 800c0b8:	a901      	add	r1, sp, #4
 800c0ba:	4628      	mov	r0, r5
 800c0bc:	f7ff ff68 	bl	800bf90 <flash_area_open>
    if (rc != 0) {
 800c0c0:	b150      	cbz	r0, 800c0d8 <mfg_read_next_mmr+0x38>
        return SYS_EIO;
 800c0c2:	f06f 0004 	mvn.w	r0, #4
        return rc;
    }

    mfg_num_mmrs++;
    return 0;
}
 800c0c6:	b005      	add	sp, #20
 800c0c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (mfg_mmrs[i].area_id == area_id) {
 800c0ca:	fb01 f003 	mul.w	r0, r1, r3
 800c0ce:	5c80      	ldrb	r0, [r0, r2]
 800c0d0:	42a8      	cmp	r0, r5
 800c0d2:	d02b      	beq.n	800c12c <mfg_read_next_mmr+0x8c>
    for (i = 0; i < mfg_num_mmrs; i++) {
 800c0d4:	3301      	adds	r3, #1
 800c0d6:	e7eb      	b.n	800c0b0 <mfg_read_next_mmr+0x10>
    rc = flash_area_read(fap, fap->fa_size - sizeof ftr, &ftr, sizeof ftr);
 800c0d8:	2308      	movs	r3, #8
 800c0da:	9801      	ldr	r0, [sp, #4]
 800c0dc:	eb0d 0203 	add.w	r2, sp, r3
 800c0e0:	6881      	ldr	r1, [r0, #8]
 800c0e2:	3908      	subs	r1, #8
 800c0e4:	f7ff ff72 	bl	800bfcc <flash_area_read>
    if (rc != 0) {
 800c0e8:	2800      	cmp	r0, #0
 800c0ea:	d1ea      	bne.n	800c0c2 <mfg_read_next_mmr+0x22>
    if (ftr.magic != MFG_META_MAGIC) {
 800c0ec:	4b14      	ldr	r3, [pc, #80]	; (800c140 <mfg_read_next_mmr+0xa0>)
 800c0ee:	9a03      	ldr	r2, [sp, #12]
 800c0f0:	429a      	cmp	r2, r3
 800c0f2:	d115      	bne.n	800c120 <mfg_read_next_mmr+0x80>
    if (ftr.version != MFG_META_VERSION) {
 800c0f4:	f89d 300a 	ldrb.w	r3, [sp, #10]
 800c0f8:	2b02      	cmp	r3, #2
 800c0fa:	d114      	bne.n	800c126 <mfg_read_next_mmr+0x86>
    if (ftr.size > fap->fa_size) {
 800c0fc:	9b01      	ldr	r3, [sp, #4]
 800c0fe:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 800c102:	689b      	ldr	r3, [r3, #8]
 800c104:	4299      	cmp	r1, r3
 800c106:	d80b      	bhi.n	800c120 <mfg_read_next_mmr+0x80>
    *out_mmr = (struct mfg_mmr) {
 800c108:	220c      	movs	r2, #12
 800c10a:	4372      	muls	r2, r6
 800c10c:	4f0b      	ldr	r7, [pc, #44]	; (800c13c <mfg_read_next_mmr+0x9c>)
        .offset = fap->fa_size - ftr.size,
 800c10e:	1a5b      	subs	r3, r3, r1
    *out_mmr = (struct mfg_mmr) {
 800c110:	18be      	adds	r6, r7, r2
 800c112:	e9c6 3101 	strd	r3, r1, [r6, #4]
    mfg_num_mmrs++;
 800c116:	6823      	ldr	r3, [r4, #0]
    *out_mmr = (struct mfg_mmr) {
 800c118:	54bd      	strb	r5, [r7, r2]
    mfg_num_mmrs++;
 800c11a:	3301      	adds	r3, #1
 800c11c:	6023      	str	r3, [r4, #0]
 800c11e:	e7d2      	b.n	800c0c6 <mfg_read_next_mmr+0x26>
        return SYS_ENODEV;
 800c120:	f06f 0008 	mvn.w	r0, #8
 800c124:	e7cf      	b.n	800c0c6 <mfg_read_next_mmr+0x26>
        return SYS_ENOTSUP;
 800c126:	f06f 000b 	mvn.w	r0, #11
 800c12a:	e7cc      	b.n	800c0c6 <mfg_read_next_mmr+0x26>
            return SYS_EALREADY;
 800c12c:	f06f 000a 	mvn.w	r0, #10
 800c130:	e7c9      	b.n	800c0c6 <mfg_read_next_mmr+0x26>
        return SYS_ENOMEM;
 800c132:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c136:	e7c6      	b.n	800c0c6 <mfg_read_next_mmr+0x26>
 800c138:	200039e4 	.word	0x200039e4
 800c13c:	200039cc 	.word	0x200039cc
 800c140:	3bb2a269 	.word	0x3bb2a269

0800c144 <mfg_read_tlv_body>:
{
 800c144:	b573      	push	{r0, r1, r4, r5, r6, lr}
    assert(reader->mmr_idx < mfg_num_mmrs);
 800c146:	4b16      	ldr	r3, [pc, #88]	; (800c1a0 <mfg_read_tlv_body+0x5c>)
{
 800c148:	4616      	mov	r6, r2
    assert(reader->mmr_idx < mfg_num_mmrs);
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	7882      	ldrb	r2, [r0, #2]
{
 800c14e:	4604      	mov	r4, r0
    assert(reader->mmr_idx < mfg_num_mmrs);
 800c150:	429a      	cmp	r2, r3
{
 800c152:	460d      	mov	r5, r1
    assert(reader->mmr_idx < mfg_num_mmrs);
 800c154:	db05      	blt.n	800c162 <mfg_read_tlv_body+0x1e>
 800c156:	2300      	movs	r3, #0
 800c158:	461a      	mov	r2, r3
 800c15a:	4619      	mov	r1, r3
 800c15c:	4618      	mov	r0, r3
 800c15e:	f7f7 fca9 	bl	8003ab4 <__assert_func>
    rc = flash_area_open(mmr->area_id, fap);
 800c162:	230c      	movs	r3, #12
 800c164:	4353      	muls	r3, r2
 800c166:	4a0f      	ldr	r2, [pc, #60]	; (800c1a4 <mfg_read_tlv_body+0x60>)
 800c168:	a901      	add	r1, sp, #4
 800c16a:	5cd0      	ldrb	r0, [r2, r3]
 800c16c:	f7ff ff10 	bl	800bf90 <flash_area_open>
    if (rc != 0) {
 800c170:	4601      	mov	r1, r0
 800c172:	b118      	cbz	r0, 800c17c <mfg_read_tlv_body+0x38>
        return SYS_EIO;
 800c174:	f06f 0004 	mvn.w	r0, #4
}
 800c178:	b002      	add	sp, #8
 800c17a:	bd70      	pop	{r4, r5, r6, pc}
    memset(dst, 0, max_size);
 800c17c:	4632      	mov	r2, r6
 800c17e:	4628      	mov	r0, r5
 800c180:	f7f9 f901 	bl	8005386 <memset>
    read_sz = min(max_size, reader->cur_tlv.size);
 800c184:	7863      	ldrb	r3, [r4, #1]
    rc = flash_area_read(fap, reader->offset + MFG_META_TLV_SZ, dst, read_sz);
 800c186:	6861      	ldr	r1, [r4, #4]
 800c188:	42b3      	cmp	r3, r6
 800c18a:	bfa8      	it	ge
 800c18c:	4633      	movge	r3, r6
 800c18e:	462a      	mov	r2, r5
 800c190:	3102      	adds	r1, #2
 800c192:	9801      	ldr	r0, [sp, #4]
 800c194:	f7ff ff1a 	bl	800bfcc <flash_area_read>
    if (rc != 0) {
 800c198:	2800      	cmp	r0, #0
 800c19a:	d0ed      	beq.n	800c178 <mfg_read_tlv_body+0x34>
 800c19c:	e7ea      	b.n	800c174 <mfg_read_tlv_body+0x30>
 800c19e:	bf00      	nop
 800c1a0:	200039e4 	.word	0x200039e4
 800c1a4:	200039cc 	.word	0x200039cc

0800c1a8 <mfg_seek_next>:
{
 800c1a8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    if (reader->mmr_idx >= mfg_num_mmrs) {
 800c1ac:	4d1c      	ldr	r5, [pc, #112]	; (800c220 <mfg_seek_next+0x78>)
{
 800c1ae:	4604      	mov	r4, r0
 800c1b0:	462f      	mov	r7, r5
    rc = flash_area_open(mmr->area_id, &fap);
 800c1b2:	4e1c      	ldr	r6, [pc, #112]	; (800c224 <mfg_seek_next+0x7c>)
    if (reader->mmr_idx >= mfg_num_mmrs) {
 800c1b4:	78a2      	ldrb	r2, [r4, #2]
 800c1b6:	682b      	ldr	r3, [r5, #0]
 800c1b8:	429a      	cmp	r2, r3
 800c1ba:	db04      	blt.n	800c1c6 <mfg_seek_next+0x1e>
        return SYS_EINVAL;
 800c1bc:	f06f 0001 	mvn.w	r0, #1
}
 800c1c0:	b002      	add	sp, #8
 800c1c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    rc = flash_area_open(mmr->area_id, &fap);
 800c1c6:	230c      	movs	r3, #12
 800c1c8:	4353      	muls	r3, r2
 800c1ca:	a901      	add	r1, sp, #4
 800c1cc:	5cf0      	ldrb	r0, [r6, r3]
 800c1ce:	eb06 0803 	add.w	r8, r6, r3
 800c1d2:	f7ff fedd 	bl	800bf90 <flash_area_open>
    if (rc != 0) {
 800c1d6:	b9e8      	cbnz	r0, 800c214 <mfg_seek_next+0x6c>
    if (reader->offset == 0) {
 800c1d8:	6863      	ldr	r3, [r4, #4]
 800c1da:	b98b      	cbnz	r3, 800c200 <mfg_seek_next+0x58>
        reader->offset = mmr->offset;
 800c1dc:	f8d8 3004 	ldr.w	r3, [r8, #4]
    if (reader->offset >= fap->fa_size - MFG_META_FOOTER_SZ) {
 800c1e0:	9801      	ldr	r0, [sp, #4]
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
 800c1e2:	6063      	str	r3, [r4, #4]
    if (reader->offset >= fap->fa_size - MFG_META_FOOTER_SZ) {
 800c1e4:	6883      	ldr	r3, [r0, #8]
 800c1e6:	6861      	ldr	r1, [r4, #4]
 800c1e8:	3b08      	subs	r3, #8
 800c1ea:	4299      	cmp	r1, r3
 800c1ec:	d30c      	bcc.n	800c208 <mfg_seek_next+0x60>
        if (reader->mmr_idx + 1 >= mfg_num_mmrs) {
 800c1ee:	78a3      	ldrb	r3, [r4, #2]
 800c1f0:	683a      	ldr	r2, [r7, #0]
 800c1f2:	3301      	adds	r3, #1
 800c1f4:	4293      	cmp	r3, r2
 800c1f6:	da10      	bge.n	800c21a <mfg_seek_next+0x72>
            reader->offset = 0;
 800c1f8:	2200      	movs	r2, #0
            reader->mmr_idx++;
 800c1fa:	70a3      	strb	r3, [r4, #2]
            reader->offset = 0;
 800c1fc:	6062      	str	r2, [r4, #4]
 800c1fe:	e7d9      	b.n	800c1b4 <mfg_seek_next+0xc>
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
 800c200:	7862      	ldrb	r2, [r4, #1]
 800c202:	3302      	adds	r3, #2
 800c204:	4413      	add	r3, r2
 800c206:	e7eb      	b.n	800c1e0 <mfg_seek_next+0x38>
    rc = flash_area_read(fap, reader->offset, &reader->cur_tlv,
 800c208:	2302      	movs	r3, #2
 800c20a:	4622      	mov	r2, r4
 800c20c:	f7ff fede 	bl	800bfcc <flash_area_read>
    if (rc != 0) {
 800c210:	2800      	cmp	r0, #0
 800c212:	d0d5      	beq.n	800c1c0 <mfg_seek_next+0x18>
        rc = SYS_EIO;
 800c214:	f06f 0004 	mvn.w	r0, #4
 800c218:	e7d2      	b.n	800c1c0 <mfg_seek_next+0x18>
            rc = SYS_EDONE;
 800c21a:	f06f 000e 	mvn.w	r0, #14
 800c21e:	e7cf      	b.n	800c1c0 <mfg_seek_next+0x18>
 800c220:	200039e4 	.word	0x200039e4
 800c224:	200039cc 	.word	0x200039cc

0800c228 <mfg_seek_next_with_type>:
{
 800c228:	b538      	push	{r3, r4, r5, lr}
 800c22a:	4604      	mov	r4, r0
 800c22c:	460d      	mov	r5, r1
        rc = mfg_seek_next(reader);
 800c22e:	4620      	mov	r0, r4
 800c230:	f7ff ffba 	bl	800c1a8 <mfg_seek_next>
        if (rc != 0) {
 800c234:	b910      	cbnz	r0, 800c23c <mfg_seek_next_with_type+0x14>
        if (reader->cur_tlv.type == type) {
 800c236:	7823      	ldrb	r3, [r4, #0]
 800c238:	42ab      	cmp	r3, r5
 800c23a:	d1f8      	bne.n	800c22e <mfg_seek_next_with_type+0x6>
}
 800c23c:	bd38      	pop	{r3, r4, r5, pc}

0800c23e <mfg_read_tlv_flash_area>:
    return mfg_read_tlv_body(reader, out_mfa, sizeof *out_mfa);
 800c23e:	220a      	movs	r2, #10
 800c240:	f7ff bf80 	b.w	800c144 <mfg_read_tlv_body>

0800c244 <mfg_read_tlv_mmr_ref>:
    return mfg_read_tlv_body(reader, out_mr, sizeof *out_mr);
 800c244:	2201      	movs	r2, #1
 800c246:	f7ff bf7d 	b.w	800c144 <mfg_read_tlv_body>
	...

0800c24c <mfg_init>:
 * called before any TLVs can be read.  No-op if this function has already
 * executed successfully.
 */
void
mfg_init(void)
{
 800c24c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    int rc;

    if (mfg_initialized) {
 800c24e:	4b14      	ldr	r3, [pc, #80]	; (800c2a0 <mfg_init+0x54>)
 800c250:	7818      	ldrb	r0, [r3, #0]
 800c252:	bb08      	cbnz	r0, 800c298 <mfg_init+0x4c>
        return;
    }
    mfg_initialized = true;
 800c254:	2201      	movs	r2, #1
 800c256:	701a      	strb	r2, [r3, #0]

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
 800c258:	4b12      	ldr	r3, [pc, #72]	; (800c2a4 <mfg_init+0x58>)
 800c25a:	781b      	ldrb	r3, [r3, #0]
 800c25c:	b923      	cbnz	r3, 800c268 <mfg_init+0x1c>
 800c25e:	461a      	mov	r2, r3
 800c260:	4619      	mov	r1, r3
 800c262:	4618      	mov	r0, r3
 800c264:	f7f7 fc26 	bl	8003ab4 <__assert_func>

    /* Read the first MMR from the boot loader area. */
    rc = mfg_read_next_mmr(FLASH_AREA_BOOTLOADER);
 800c268:	f7ff ff1a 	bl	800c0a0 <mfg_read_next_mmr>
    if (rc != 0) {
 800c26c:	b9a0      	cbnz	r0, 800c298 <mfg_init+0x4c>
    mfg_open(&reader);
 800c26e:	a802      	add	r0, sp, #8
 800c270:	f000 f81a 	bl	800c2a8 <mfg_open>
        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_MMR_REF);
 800c274:	2104      	movs	r1, #4
 800c276:	a802      	add	r0, sp, #8
 800c278:	f7ff ffd6 	bl	800c228 <mfg_seek_next_with_type>
        switch (rc) {
 800c27c:	b960      	cbnz	r0, 800c298 <mfg_init+0x4c>
        rc = mfg_read_tlv_mmr_ref(&reader, &mmr_ref);
 800c27e:	a901      	add	r1, sp, #4
 800c280:	a802      	add	r0, sp, #8
 800c282:	f7ff ffdf 	bl	800c244 <mfg_read_tlv_mmr_ref>
        if (rc != 0) {
 800c286:	b938      	cbnz	r0, 800c298 <mfg_init+0x4c>
        rc = mfg_read_next_mmr(mmr_ref.area_id);
 800c288:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800c28c:	f7ff ff08 	bl	800c0a0 <mfg_read_next_mmr>
        if (rc != 0 && rc != SYS_EALREADY) {
 800c290:	2800      	cmp	r0, #0
 800c292:	d0ef      	beq.n	800c274 <mfg_init+0x28>
 800c294:	300b      	adds	r0, #11
 800c296:	d0ed      	beq.n	800c274 <mfg_init+0x28>

    return;

err:
    MFG_LOG(ERROR, "failed to read MMRs: rc=%d", rc);
}
 800c298:	b005      	add	sp, #20
 800c29a:	f85d fb04 	ldr.w	pc, [sp], #4
 800c29e:	bf00      	nop
 800c2a0:	200039c8 	.word	0x200039c8
 800c2a4:	20003a30 	.word	0x20003a30

0800c2a8 <mfg_open>:
{
 800c2a8:	b510      	push	{r4, lr}
 800c2aa:	4604      	mov	r4, r0
    mfg_init();
 800c2ac:	f7ff ffce 	bl	800c24c <mfg_init>
    *out_reader = (struct mfg_reader) { 0 };
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	e9c4 3300 	strd	r3, r3, [r4]
}
 800c2b6:	bd10      	pop	{r4, pc}

0800c2b8 <skipspace>:
	bail_eof,		/* Hit EOF */
	bail_err		/* Conversion mismatch */
};

static inline const char *skipspace(const char *p)
{
 800c2b8:	4602      	mov	r2, r0
	return __c < 0x20;
}

__extern_inline int isspace(int __c)
{
	return __c == ' ' || __c == '\n' || __c == '\t' || __c == '\r';
 800c2ba:	4906      	ldr	r1, [pc, #24]	; (800c2d4 <skipspace+0x1c>)
 800c2bc:	4610      	mov	r0, r2
 800c2be:	7803      	ldrb	r3, [r0, #0]
 800c2c0:	3201      	adds	r2, #1
 800c2c2:	3b09      	subs	r3, #9
 800c2c4:	b2db      	uxtb	r3, r3
 800c2c6:	2b17      	cmp	r3, #23
 800c2c8:	d803      	bhi.n	800c2d2 <skipspace+0x1a>
 800c2ca:	fa21 f303 	lsr.w	r3, r1, r3
 800c2ce:	07db      	lsls	r3, r3, #31
 800c2d0:	d4f4      	bmi.n	800c2bc <skipspace+0x4>
	while (isspace((unsigned char)*p))
		p++;
	return p;
}
 800c2d2:	4770      	bx	lr
 800c2d4:	00800013 	.word	0x00800013

0800c2d8 <set_bit>:

#undef set_bit
static inline void set_bit(unsigned long *bitmap, unsigned int bit)
{
	bitmap[bit / LONG_BIT] |= 1UL << (bit % LONG_BIT);
 800c2d8:	2301      	movs	r3, #1
 800c2da:	094a      	lsrs	r2, r1, #5
 800c2dc:	f001 011f 	and.w	r1, r1, #31
 800c2e0:	fa03 f101 	lsl.w	r1, r3, r1
 800c2e4:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 800c2e8:	430b      	orrs	r3, r1
 800c2ea:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
}
 800c2ee:	4770      	bx	lr

0800c2f0 <vsscanf>:
	enum bail bail = bail_none;
	int sign;
	int converted = 0;	/* Successful conversions */
	unsigned long matchmap[((1 << CHAR_BIT) + (LONG_BIT - 1)) / LONG_BIT];
	int matchinv = 0;	/* Is match map inverted? */
	unsigned char range_start = 0;
 800c2f0:	2300      	movs	r3, #0
{
 800c2f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int converted = 0;	/* Successful conversions */
 800c2f6:	469b      	mov	fp, r3
{
 800c2f8:	4615      	mov	r5, r2
	const char *q = buffer;
 800c2fa:	4606      	mov	r6, r0
	enum bail bail = bail_none;
 800c2fc:	461f      	mov	r7, r3
	char *sarg = NULL;	/* %s %c or %[ string argument */
 800c2fe:	4699      	mov	r9, r3
	enum flags flags = 0;
 800c300:	469a      	mov	sl, r3
	unsigned int width = UINT_MAX;
 800c302:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	int rank = rank_int;	/* Default rank */
 800c306:	46d8      	mov	r8, fp
{
 800c308:	b091      	sub	sp, #68	; 0x44
 800c30a:	9003      	str	r0, [sp, #12]
	unsigned char range_start = 0;
 800c30c:	9300      	str	r3, [sp, #0]
	int matchinv = 0;	/* Is match map inverted? */
 800c30e:	9302      	str	r3, [sp, #8]
	(void)sign;

	while ((ch = *p++) && !bail) {
 800c310:	1c4a      	adds	r2, r1, #1
 800c312:	9201      	str	r2, [sp, #4]
 800c314:	780a      	ldrb	r2, [r1, #0]
 800c316:	b102      	cbz	r2, 800c31a <vsscanf+0x2a>
 800c318:	b157      	cbz	r7, 800c330 <vsscanf+0x40>
				bail = bail_eof;
			break;
		}
	}

	if (bail == bail_eof && !converted)
 800c31a:	2f01      	cmp	r7, #1
 800c31c:	d104      	bne.n	800c328 <vsscanf+0x38>
		converted = -1;	/* Return EOF (-1) */
 800c31e:	f1bb 0f00 	cmp.w	fp, #0
 800c322:	bf08      	it	eq
 800c324:	f04f 3bff 	moveq.w	fp, #4294967295	; 0xffffffff

	return converted;
}
 800c328:	4658      	mov	r0, fp
 800c32a:	b011      	add	sp, #68	; 0x44
 800c32c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		switch (state) {
 800c330:	2b06      	cmp	r3, #6
 800c332:	d819      	bhi.n	800c368 <vsscanf+0x78>
 800c334:	e8df f013 	tbh	[pc, r3, lsl #1]
 800c338:	00230007 	.word	0x00230007
 800c33c:	003d0034 	.word	0x003d0034
 800c340:	0162015a 	.word	0x0162015a
 800c344:	016e      	.short	0x016e
			if (ch == '%') {
 800c346:	2a25      	cmp	r2, #37	; 0x25
 800c348:	f000 81a9 	beq.w	800c69e <vsscanf+0x3ae>
 800c34c:	f1a2 0109 	sub.w	r1, r2, #9
 800c350:	b2c9      	uxtb	r1, r1
 800c352:	2917      	cmp	r1, #23
 800c354:	d804      	bhi.n	800c360 <vsscanf+0x70>
 800c356:	48ae      	ldr	r0, [pc, #696]	; (800c610 <vsscanf+0x320>)
 800c358:	fa20 f101 	lsr.w	r1, r0, r1
 800c35c:	07c9      	lsls	r1, r1, #31
 800c35e:	d405      	bmi.n	800c36c <vsscanf+0x7c>
				if (*q == ch)
 800c360:	7831      	ldrb	r1, [r6, #0]
 800c362:	4291      	cmp	r1, r2
 800c364:	d009      	beq.n	800c37a <vsscanf+0x8a>
					bail = bail_err; /* Match failure */
 800c366:	2702      	movs	r7, #2
				state = st_match;
 800c368:	9901      	ldr	r1, [sp, #4]
 800c36a:	e7d1      	b.n	800c310 <vsscanf+0x20>
				q = skipspace(q);
 800c36c:	4630      	mov	r0, r6
 800c36e:	9304      	str	r3, [sp, #16]
 800c370:	f7ff ffa2 	bl	800c2b8 <skipspace>
 800c374:	4606      	mov	r6, r0
 800c376:	9b04      	ldr	r3, [sp, #16]
 800c378:	e7f6      	b.n	800c368 <vsscanf+0x78>
					q++;
 800c37a:	3601      	adds	r6, #1
 800c37c:	e7f4      	b.n	800c368 <vsscanf+0x78>
			switch (ch) {
 800c37e:	2a2a      	cmp	r2, #42	; 0x2a
 800c380:	d006      	beq.n	800c390 <vsscanf+0xa0>
 800c382:	d302      	bcc.n	800c38a <vsscanf+0x9a>
 800c384:	3a30      	subs	r2, #48	; 0x30
 800c386:	2a09      	cmp	r2, #9
 800c388:	d905      	bls.n	800c396 <vsscanf+0xa6>
 800c38a:	9101      	str	r1, [sp, #4]
				state = st_modifiers;
 800c38c:	2303      	movs	r3, #3
 800c38e:	e7eb      	b.n	800c368 <vsscanf+0x78>
				flags |= FL_SPLAT;
 800c390:	f04a 0a01 	orr.w	sl, sl, #1
				break;
 800c394:	e7e8      	b.n	800c368 <vsscanf+0x78>
				width = (ch - '0');
 800c396:	4614      	mov	r4, r2
				flags |= FL_WIDTH;
 800c398:	f04a 0a04 	orr.w	sl, sl, #4
				state = st_width;
 800c39c:	2302      	movs	r3, #2
				break;
 800c39e:	e7e3      	b.n	800c368 <vsscanf+0x78>
			if (ch >= '0' && ch <= '9') {
 800c3a0:	f1a2 0030 	sub.w	r0, r2, #48	; 0x30
 800c3a4:	2809      	cmp	r0, #9
 800c3a6:	d8f0      	bhi.n	800c38a <vsscanf+0x9a>
 800c3a8:	210a      	movs	r1, #10
 800c3aa:	fb01 2404 	mla	r4, r1, r4, r2
				width = width * 10 + (ch - '0');
 800c3ae:	3c30      	subs	r4, #48	; 0x30
 800c3b0:	e7da      	b.n	800c368 <vsscanf+0x78>
			switch (ch) {
 800c3b2:	2a6c      	cmp	r2, #108	; 0x6c
 800c3b4:	d015      	beq.n	800c3e2 <vsscanf+0xf2>
 800c3b6:	d808      	bhi.n	800c3ca <vsscanf+0xda>
 800c3b8:	2a68      	cmp	r2, #104	; 0x68
 800c3ba:	d00f      	beq.n	800c3dc <vsscanf+0xec>
 800c3bc:	2a6a      	cmp	r2, #106	; 0x6a
 800c3be:	d001      	beq.n	800c3c4 <vsscanf+0xd4>
 800c3c0:	2a4c      	cmp	r2, #76	; 0x4c
 800c3c2:	d111      	bne.n	800c3e8 <vsscanf+0xf8>
				rank = INTMAX_RANK;
 800c3c4:	f04f 0802 	mov.w	r8, #2
 800c3c8:	e7ce      	b.n	800c368 <vsscanf+0x78>
			switch (ch) {
 800c3ca:	2a74      	cmp	r2, #116	; 0x74
 800c3cc:	d003      	beq.n	800c3d6 <vsscanf+0xe6>
 800c3ce:	2a7a      	cmp	r2, #122	; 0x7a
 800c3d0:	d001      	beq.n	800c3d6 <vsscanf+0xe6>
 800c3d2:	2a71      	cmp	r2, #113	; 0x71
 800c3d4:	e7f5      	b.n	800c3c2 <vsscanf+0xd2>
				rank = SIZE_T_RANK;
 800c3d6:	f04f 0801 	mov.w	r8, #1
 800c3da:	e7c5      	b.n	800c368 <vsscanf+0x78>
				rank--;	/* Shorter rank */
 800c3dc:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
				break;
 800c3e0:	e7c2      	b.n	800c368 <vsscanf+0x78>
				rank++;	/* Longer rank */
 800c3e2:	f108 0801 	add.w	r8, r8, #1
				break;
 800c3e6:	e7bf      	b.n	800c368 <vsscanf+0x78>
 800c3e8:	f1b8 0f02 	cmp.w	r8, #2
 800c3ec:	f06f 0301 	mvn.w	r3, #1
 800c3f0:	bfa8      	it	ge
 800c3f2:	f04f 0802 	movge.w	r8, #2
 800c3f6:	4598      	cmp	r8, r3
 800c3f8:	bfb8      	it	lt
 800c3fa:	4698      	movlt	r8, r3
				switch (ch) {
 800c3fc:	2a69      	cmp	r2, #105	; 0x69
 800c3fe:	d052      	beq.n	800c4a6 <vsscanf+0x1b6>
 800c400:	d823      	bhi.n	800c44a <vsscanf+0x15a>
 800c402:	2a58      	cmp	r2, #88	; 0x58
 800c404:	d06a      	beq.n	800c4dc <vsscanf+0x1ec>
 800c406:	d806      	bhi.n	800c416 <vsscanf+0x126>
 800c408:	2a25      	cmp	r2, #37	; 0x25
 800c40a:	f000 80e9 	beq.w	800c5e0 <vsscanf+0x2f0>
 800c40e:	2a50      	cmp	r2, #80	; 0x50
 800c410:	d078      	beq.n	800c504 <vsscanf+0x214>
						bail = bail_err;
 800c412:	2702      	movs	r7, #2
 800c414:	e074      	b.n	800c500 <vsscanf+0x210>
				switch (ch) {
 800c416:	2a63      	cmp	r2, #99	; 0x63
 800c418:	f000 8092 	beq.w	800c540 <vsscanf+0x250>
 800c41c:	2a64      	cmp	r2, #100	; 0x64
 800c41e:	d05b      	beq.n	800c4d8 <vsscanf+0x1e8>
 800c420:	2a5b      	cmp	r2, #91	; 0x5b
 800c422:	d1f6      	bne.n	800c412 <vsscanf+0x122>
					memset(matchmap, 0, sizeof matchmap);
 800c424:	2220      	movs	r2, #32
						: va_arg(ap, char *);
 800c426:	f01a 0f01 	tst.w	sl, #1
					memset(matchmap, 0, sizeof matchmap);
 800c42a:	f04f 0100 	mov.w	r1, #0
 800c42e:	eb0d 0002 	add.w	r0, sp, r2
						: va_arg(ap, char *);
 800c432:	bf0a      	itet	eq
 800c434:	f8d5 9000 	ldreq.w	r9, [r5]
 800c438:	f04f 0900 	movne.w	r9, #0
 800c43c:	3504      	addeq	r5, #4
					memset(matchmap, 0, sizeof matchmap);
 800c43e:	f7f8 ffa2 	bl	8005386 <memset>
					matchinv = 0;
 800c442:	2300      	movs	r3, #0
 800c444:	9302      	str	r3, [sp, #8]
					state = st_match_init;
 800c446:	2304      	movs	r3, #4
					break;
 800c448:	e78e      	b.n	800c368 <vsscanf+0x78>
				switch (ch) {
 800c44a:	2a70      	cmp	r2, #112	; 0x70
 800c44c:	d05a      	beq.n	800c504 <vsscanf+0x214>
 800c44e:	d805      	bhi.n	800c45c <vsscanf+0x16c>
 800c450:	2a6e      	cmp	r2, #110	; 0x6e
 800c452:	d045      	beq.n	800c4e0 <vsscanf+0x1f0>
 800c454:	2a6f      	cmp	r2, #111	; 0x6f
 800c456:	d1dc      	bne.n	800c412 <vsscanf+0x122>
					base = 8;
 800c458:	2208      	movs	r2, #8
 800c45a:	e025      	b.n	800c4a8 <vsscanf+0x1b8>
				switch (ch) {
 800c45c:	2a75      	cmp	r2, #117	; 0x75
 800c45e:	d03b      	beq.n	800c4d8 <vsscanf+0x1e8>
 800c460:	2a78      	cmp	r2, #120	; 0x78
 800c462:	d03b      	beq.n	800c4dc <vsscanf+0x1ec>
 800c464:	2a73      	cmp	r2, #115	; 0x73
 800c466:	d1d4      	bne.n	800c412 <vsscanf+0x122>
					if (flags & FL_SPLAT) {
 800c468:	f01a 0f01 	tst.w	sl, #1
 800c46c:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800c470:	f000 808d 	beq.w	800c58e <vsscanf+0x29e>
 800c474:	4632      	mov	r2, r6
						while (width-- && (uc = *q) &&
 800c476:	1c63      	adds	r3, r4, #1
 800c478:	4616      	mov	r6, r2
 800c47a:	d041      	beq.n	800c500 <vsscanf+0x210>
 800c47c:	7813      	ldrb	r3, [r2, #0]
 800c47e:	3201      	adds	r2, #1
 800c480:	2b00      	cmp	r3, #0
 800c482:	f000 8114 	beq.w	800c6ae <vsscanf+0x3be>
 800c486:	3b09      	subs	r3, #9
 800c488:	b2db      	uxtb	r3, r3
 800c48a:	2b17      	cmp	r3, #23
 800c48c:	f104 31ff 	add.w	r1, r4, #4294967295	; 0xffffffff
 800c490:	d807      	bhi.n	800c4a2 <vsscanf+0x1b2>
 800c492:	485f      	ldr	r0, [pc, #380]	; (800c610 <vsscanf+0x320>)
 800c494:	fa20 f303 	lsr.w	r3, r0, r3
 800c498:	43db      	mvns	r3, r3
 800c49a:	f013 0301 	ands.w	r3, r3, #1
 800c49e:	f43f af63 	beq.w	800c368 <vsscanf+0x78>
							*sarg++ = *q++;
 800c4a2:	460c      	mov	r4, r1
 800c4a4:	e7e7      	b.n	800c476 <vsscanf+0x186>
					base = 0;
 800c4a6:	2200      	movs	r2, #0
					q = skipspace(q);
 800c4a8:	4630      	mov	r0, r6
 800c4aa:	9204      	str	r2, [sp, #16]
 800c4ac:	f7ff ff04 	bl	800c2b8 <skipspace>
					if (!*q) {
 800c4b0:	7803      	ldrb	r3, [r0, #0]
					q = skipspace(q);
 800c4b2:	4606      	mov	r6, r0
					if (!*q) {
 800c4b4:	9a04      	ldr	r2, [sp, #16]
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	f000 80f9 	beq.w	800c6ae <vsscanf+0x3be>
					val =
 800c4bc:	4623      	mov	r3, r4
 800c4be:	a907      	add	r1, sp, #28
 800c4c0:	f000 fd6a 	bl	800cf98 <strntoumax>
					if (qq == q) {
 800c4c4:	9b07      	ldr	r3, [sp, #28]
 800c4c6:	42b3      	cmp	r3, r6
 800c4c8:	d0a3      	beq.n	800c412 <vsscanf+0x122>
					if (!(flags & FL_SPLAT))
 800c4ca:	f01a 0f01 	tst.w	sl, #1
						converted++;
 800c4ce:	bf08      	it	eq
 800c4d0:	f10b 0b01 	addeq.w	fp, fp, #1
				      set_integer:
 800c4d4:	461e      	mov	r6, r3
 800c4d6:	e006      	b.n	800c4e6 <vsscanf+0x1f6>
					base = 10;
 800c4d8:	220a      	movs	r2, #10
					goto scan_int;
 800c4da:	e7e5      	b.n	800c4a8 <vsscanf+0x1b8>
					base = 16;
 800c4dc:	2210      	movs	r2, #16
					goto scan_int;
 800c4de:	e7e3      	b.n	800c4a8 <vsscanf+0x1b8>
					val = (q - buffer);
 800c4e0:	9b03      	ldr	r3, [sp, #12]
 800c4e2:	1af0      	subs	r0, r6, r3
 800c4e4:	17c1      	asrs	r1, r0, #31
					if (!(flags & FL_SPLAT)) {
 800c4e6:	f01a 0301 	ands.w	r3, sl, #1
 800c4ea:	d109      	bne.n	800c500 <vsscanf+0x210>
						switch (rank) {
 800c4ec:	f1b8 0f00 	cmp.w	r8, #0
 800c4f0:	d01e      	beq.n	800c530 <vsscanf+0x240>
 800c4f2:	dc0b      	bgt.n	800c50c <vsscanf+0x21c>
 800c4f4:	f118 0f02 	cmn.w	r8, #2
 800c4f8:	d013      	beq.n	800c522 <vsscanf+0x232>
 800c4fa:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 800c4fe:	d014      	beq.n	800c52a <vsscanf+0x23a>
				state = st_normal;
 800c500:	2300      	movs	r3, #0
 800c502:	e731      	b.n	800c368 <vsscanf+0x78>
					base = 0;
 800c504:	2200      	movs	r2, #0
					rank = rank_ptr;
 800c506:	f06f 4800 	mvn.w	r8, #2147483648	; 0x80000000
 800c50a:	e7cd      	b.n	800c4a8 <vsscanf+0x1b8>
						switch (rank) {
 800c50c:	f1b8 0f02 	cmp.w	r8, #2
 800c510:	d012      	beq.n	800c538 <vsscanf+0x248>
 800c512:	db03      	blt.n	800c51c <vsscanf+0x22c>
 800c514:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800c518:	4590      	cmp	r8, r2
 800c51a:	d1f1      	bne.n	800c500 <vsscanf+0x210>
							*va_arg(ap, void **) =
 800c51c:	682a      	ldr	r2, [r5, #0]
								(uintptr_t)val;
 800c51e:	6010      	str	r0, [r2, #0]
 800c520:	e001      	b.n	800c526 <vsscanf+0x236>
							*va_arg(ap,
 800c522:	682a      	ldr	r2, [r5, #0]
								= val;
 800c524:	7010      	strb	r0, [r2, #0]
							*va_arg(ap, void **) =
 800c526:	3504      	adds	r5, #4
							break;
 800c528:	e71e      	b.n	800c368 <vsscanf+0x78>
								*) = val;
 800c52a:	682a      	ldr	r2, [r5, #0]
 800c52c:	8010      	strh	r0, [r2, #0]
 800c52e:	e7fa      	b.n	800c526 <vsscanf+0x236>
							    = val;
 800c530:	682b      	ldr	r3, [r5, #0]
							*va_arg(ap,
 800c532:	3504      	adds	r5, #4
							    = val;
 800c534:	6018      	str	r0, [r3, #0]
 800c536:	e7e3      	b.n	800c500 <vsscanf+0x210>
								long *) = val;
 800c538:	682a      	ldr	r2, [r5, #0]
 800c53a:	e9c2 0100 	strd	r0, r1, [r2]
 800c53e:	e7f2      	b.n	800c526 <vsscanf+0x236>
					width = (flags & FL_WIDTH) ? width : 1;
 800c540:	f01a 0f04 	tst.w	sl, #4
 800c544:	bf08      	it	eq
 800c546:	2401      	moveq	r4, #1
					if (flags & FL_SPLAT) {
 800c548:	f01a 0f01 	tst.w	sl, #1
 800c54c:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800c550:	d008      	beq.n	800c564 <vsscanf+0x274>
						while (width--) {
 800c552:	1c63      	adds	r3, r4, #1
 800c554:	d0d4      	beq.n	800c500 <vsscanf+0x210>
							if (!*q) {
 800c556:	7833      	ldrb	r3, [r6, #0]
 800c558:	1e62      	subs	r2, r4, #1
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	f000 80a7 	beq.w	800c6ae <vsscanf+0x3be>
 800c560:	4614      	mov	r4, r2
 800c562:	e7f6      	b.n	800c552 <vsscanf+0x262>
 800c564:	4632      	mov	r2, r6
						sarg = va_arg(ap, char *);
 800c566:	f8d5 9000 	ldr.w	r9, [r5]
 800c56a:	1d29      	adds	r1, r5, #4
						while (width--) {
 800c56c:	1c60      	adds	r0, r4, #1
 800c56e:	4616      	mov	r6, r2
 800c570:	d103      	bne.n	800c57a <vsscanf+0x28a>
							converted++;
 800c572:	f10b 0b01 	add.w	fp, fp, #1
						sarg = va_arg(ap, char *);
 800c576:	460d      	mov	r5, r1
 800c578:	e7c2      	b.n	800c500 <vsscanf+0x210>
							if (!*q) {
 800c57a:	f812 3b01 	ldrb.w	r3, [r2], #1
 800c57e:	1e60      	subs	r0, r4, #1
 800c580:	2b00      	cmp	r3, #0
 800c582:	f000 8093 	beq.w	800c6ac <vsscanf+0x3bc>
							*sarg++ = *q++;
 800c586:	f809 3b01 	strb.w	r3, [r9], #1
 800c58a:	4604      	mov	r4, r0
 800c58c:	e7ee      	b.n	800c56c <vsscanf+0x27c>
						sp = sarg = va_arg(ap, char *);
 800c58e:	f8d5 9000 	ldr.w	r9, [r5]
 800c592:	4631      	mov	r1, r6
 800c594:	464a      	mov	r2, r9
					uc = 1;	/* Anything nonzero */
 800c596:	2701      	movs	r7, #1
						sp = sarg = va_arg(ap, char *);
 800c598:	f105 0c04 	add.w	ip, r5, #4
						while (width-- && (uc = *q) &&
 800c59c:	1c60      	adds	r0, r4, #1
 800c59e:	460e      	mov	r6, r1
 800c5a0:	d012      	beq.n	800c5c8 <vsscanf+0x2d8>
 800c5a2:	f811 7b01 	ldrb.w	r7, [r1], #1
 800c5a6:	b17f      	cbz	r7, 800c5c8 <vsscanf+0x2d8>
 800c5a8:	f1a7 0309 	sub.w	r3, r7, #9
 800c5ac:	b2db      	uxtb	r3, r3
 800c5ae:	2b17      	cmp	r3, #23
 800c5b0:	f104 35ff 	add.w	r5, r4, #4294967295	; 0xffffffff
 800c5b4:	d804      	bhi.n	800c5c0 <vsscanf+0x2d0>
 800c5b6:	4816      	ldr	r0, [pc, #88]	; (800c610 <vsscanf+0x320>)
 800c5b8:	fa20 f303 	lsr.w	r3, r0, r3
 800c5bc:	07db      	lsls	r3, r3, #31
 800c5be:	d403      	bmi.n	800c5c8 <vsscanf+0x2d8>
							*sp++ = uc;
 800c5c0:	f802 7b01 	strb.w	r7, [r2], #1
 800c5c4:	462c      	mov	r4, r5
 800c5c6:	e7e9      	b.n	800c59c <vsscanf+0x2ac>
						if (sarg != sp) {
 800c5c8:	454a      	cmp	r2, r9
							*sp = '\0';
 800c5ca:	bf18      	it	ne
 800c5cc:	2300      	movne	r3, #0
	enum bail bail = bail_none;
 800c5ce:	fab7 f787 	clz	r7, r7
							*sp = '\0';
 800c5d2:	bf1c      	itt	ne
 800c5d4:	7013      	strbne	r3, [r2, #0]
							converted++;
 800c5d6:	f10b 0b01 	addne.w	fp, fp, #1
	enum bail bail = bail_none;
 800c5da:	097f      	lsrs	r7, r7, #5
						sp = sarg = va_arg(ap, char *);
 800c5dc:	4665      	mov	r5, ip
 800c5de:	e78f      	b.n	800c500 <vsscanf+0x210>
					if (*q == '%')
 800c5e0:	7833      	ldrb	r3, [r6, #0]
 800c5e2:	2b25      	cmp	r3, #37	; 0x25
 800c5e4:	f47f af15 	bne.w	800c412 <vsscanf+0x122>
						q++;
 800c5e8:	3601      	adds	r6, #1
 800c5ea:	e789      	b.n	800c500 <vsscanf+0x210>
			if (ch == '^' && !(flags & FL_INV)) {
 800c5ec:	2a5e      	cmp	r2, #94	; 0x5e
 800c5ee:	d060      	beq.n	800c6b2 <vsscanf+0x3c2>
				set_bit(matchmap, (unsigned char)ch);
 800c5f0:	4611      	mov	r1, r2
 800c5f2:	a808      	add	r0, sp, #32
 800c5f4:	f7ff fe70 	bl	800c2d8 <set_bit>
				state = st_match;
 800c5f8:	2305      	movs	r3, #5
 800c5fa:	e6b5      	b.n	800c368 <vsscanf+0x78>
			if (ch == ']') {
 800c5fc:	2a5d      	cmp	r2, #93	; 0x5d
 800c5fe:	9304      	str	r3, [sp, #16]
 800c600:	d041      	beq.n	800c686 <vsscanf+0x396>
			} else if (ch == '-') {
 800c602:	2a2d      	cmp	r2, #45	; 0x2d
 800c604:	d058      	beq.n	800c6b8 <vsscanf+0x3c8>
				set_bit(matchmap, (unsigned char)ch);
 800c606:	4611      	mov	r1, r2
 800c608:	a808      	add	r0, sp, #32
 800c60a:	f7ff fe65 	bl	800c2d8 <set_bit>
 800c60e:	e6b2      	b.n	800c376 <vsscanf+0x86>
 800c610:	00800013 	.word	0x00800013
			if (ch == ']') {
 800c614:	2a5d      	cmp	r2, #93	; 0x5d
 800c616:	d129      	bne.n	800c66c <vsscanf+0x37c>
	bitmap[bit / LONG_BIT] |= 1UL << (bit % LONG_BIT);
 800c618:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c61a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c61e:	9209      	str	r2, [sp, #36]	; 0x24
 800c620:	46b4      	mov	ip, r6
			uc = 1;	/* Anything nonzero */
 800c622:	2201      	movs	r2, #1
			qq = q;
 800c624:	9607      	str	r6, [sp, #28]
 800c626:	4666      	mov	r6, ip
			while (width && (uc = *q)
 800c628:	b18c      	cbz	r4, 800c64e <vsscanf+0x35e>
 800c62a:	f81c 2b01 	ldrb.w	r2, [ip], #1
 800c62e:	b172      	cbz	r2, 800c64e <vsscanf+0x35e>
	return (int)(bitmap[bit / LONG_BIT] >> (bit % LONG_BIT)) & 1;
 800c630:	a910      	add	r1, sp, #64	; 0x40
 800c632:	0950      	lsrs	r0, r2, #5
 800c634:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 800c638:	f850 0c20 	ldr.w	r0, [r0, #-32]
 800c63c:	f002 011f 	and.w	r1, r2, #31
 800c640:	fa20 f101 	lsr.w	r1, r0, r1
			       && test_bit(matchmap, uc)^matchinv) {
 800c644:	9802      	ldr	r0, [sp, #8]
	return (int)(bitmap[bit / LONG_BIT] >> (bit % LONG_BIT)) & 1;
 800c646:	f001 0101 	and.w	r1, r1, #1
			       && test_bit(matchmap, uc)^matchinv) {
 800c64a:	4288      	cmp	r0, r1
 800c64c:	d11d      	bne.n	800c68a <vsscanf+0x39a>
			if (q != qq) {   ////  Previously: if (q != qq && sarg) {
 800c64e:	9907      	ldr	r1, [sp, #28]
 800c650:	42b1      	cmp	r1, r6
 800c652:	d022      	beq.n	800c69a <vsscanf+0x3aa>
				if (sarg) {  ////  Added: For "%*...[...]" format, don't bail out.
 800c654:	f1b9 0f00 	cmp.w	r9, #0
 800c658:	d004      	beq.n	800c664 <vsscanf+0x374>
					*sarg = '\0';
 800c65a:	2100      	movs	r1, #0
					converted++;
 800c65c:	f10b 0b01 	add.w	fp, fp, #1
					*sarg = '\0';
 800c660:	f889 1000 	strb.w	r1, [r9]
				bail = bail_eof;
 800c664:	2a00      	cmp	r2, #0
 800c666:	bf08      	it	eq
 800c668:	2701      	moveq	r7, #1
 800c66a:	e67d      	b.n	800c368 <vsscanf+0x78>
				for (i = range_start; i < (unsigned char)ch;
 800c66c:	9b00      	ldr	r3, [sp, #0]
 800c66e:	429a      	cmp	r2, r3
 800c670:	ddc2      	ble.n	800c5f8 <vsscanf+0x308>
					set_bit(matchmap, i);
 800c672:	4619      	mov	r1, r3
 800c674:	a808      	add	r0, sp, #32
 800c676:	9205      	str	r2, [sp, #20]
 800c678:	9304      	str	r3, [sp, #16]
 800c67a:	f7ff fe2d 	bl	800c2d8 <set_bit>
				     i++)
 800c67e:	9b04      	ldr	r3, [sp, #16]
 800c680:	9a05      	ldr	r2, [sp, #20]
 800c682:	3301      	adds	r3, #1
 800c684:	e7f3      	b.n	800c66e <vsscanf+0x37e>
				state = st_normal;  ////  Added: State should return to normal after matching.
 800c686:	2300      	movs	r3, #0
 800c688:	e7ca      	b.n	800c620 <vsscanf+0x330>
				if (sarg)
 800c68a:	f1b9 0f00 	cmp.w	r9, #0
 800c68e:	d0ca      	beq.n	800c626 <vsscanf+0x336>
					*sarg++ = uc;
 800c690:	f889 2000 	strb.w	r2, [r9]
 800c694:	f109 0901 	add.w	r9, r9, #1
 800c698:	e7c5      	b.n	800c626 <vsscanf+0x336>
				bail = bail_err;
 800c69a:	2702      	movs	r7, #2
 800c69c:	e7e2      	b.n	800c664 <vsscanf+0x374>
				flags = 0;
 800c69e:	f04f 0a00 	mov.w	sl, #0
				state = st_flags;
 800c6a2:	2301      	movs	r3, #1
				width = UINT_MAX;
 800c6a4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
				rank = rank_int;
 800c6a8:	46d0      	mov	r8, sl
 800c6aa:	e65d      	b.n	800c368 <vsscanf+0x78>
						sarg = va_arg(ap, char *);
 800c6ac:	460d      	mov	r5, r1
 800c6ae:	2701      	movs	r7, #1
 800c6b0:	e65a      	b.n	800c368 <vsscanf+0x78>
				matchinv = 1;
 800c6b2:	2201      	movs	r2, #1
 800c6b4:	9202      	str	r2, [sp, #8]
 800c6b6:	e657      	b.n	800c368 <vsscanf+0x78>
 800c6b8:	9200      	str	r2, [sp, #0]
				state = st_match_range;
 800c6ba:	2306      	movs	r3, #6
 800c6bc:	e654      	b.n	800c368 <vsscanf+0x78>
 800c6be:	bf00      	nop

0800c6c0 <hal_flash_check_addr>:
}

static int
hal_flash_check_addr(const struct hal_flash *hf, uint32_t addr)
{
    if (addr < hf->hf_base_addr || addr > hf->hf_base_addr + hf->hf_size) {
 800c6c0:	6843      	ldr	r3, [r0, #4]
 800c6c2:	428b      	cmp	r3, r1
 800c6c4:	d807      	bhi.n	800c6d6 <hal_flash_check_addr+0x16>
 800c6c6:	6882      	ldr	r2, [r0, #8]
 800c6c8:	4413      	add	r3, r2
 800c6ca:	428b      	cmp	r3, r1
        return SYS_EINVAL;
    }
    return 0;
 800c6cc:	bf34      	ite	cc
 800c6ce:	f06f 0001 	mvncc.w	r0, #1
 800c6d2:	2000      	movcs	r0, #0
 800c6d4:	4770      	bx	lr
        return SYS_EINVAL;
 800c6d6:	f06f 0001 	mvn.w	r0, #1
}
 800c6da:	4770      	bx	lr

0800c6dc <hal_flash_init>:
{
 800c6dc:	b538      	push	{r3, r4, r5, lr}
 800c6de:	2400      	movs	r4, #0
    int rc = 0;
 800c6e0:	4625      	mov	r5, r4
        hf = hal_bsp_flash_dev(i);
 800c6e2:	b2e0      	uxtb	r0, r4
 800c6e4:	f7fa fc0e 	bl	8006f04 <hal_bsp_flash_dev>
        if (!hf) {
 800c6e8:	b140      	cbz	r0, 800c6fc <hal_flash_init+0x20>
        if (hf->hf_itf->hff_init(hf)) {
 800c6ea:	6803      	ldr	r3, [r0, #0]
 800c6ec:	3401      	adds	r4, #1
 800c6ee:	695b      	ldr	r3, [r3, #20]
 800c6f0:	4798      	blx	r3
            rc = SYS_EIO;
 800c6f2:	2800      	cmp	r0, #0
 800c6f4:	bf18      	it	ne
 800c6f6:	f06f 0504 	mvnne.w	r5, #4
        hf = hal_bsp_flash_dev(i);
 800c6fa:	e7f2      	b.n	800c6e2 <hal_flash_init+0x6>
}
 800c6fc:	4628      	mov	r0, r5
 800c6fe:	bd38      	pop	{r3, r4, r5, pc}

0800c700 <hal_flash_read>:

int
hal_flash_read(uint8_t id, uint32_t address, void *dst, uint32_t num_bytes)
{
 800c700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c704:	460d      	mov	r5, r1
 800c706:	4690      	mov	r8, r2
 800c708:	461e      	mov	r6, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
 800c70a:	f7fa fbfb 	bl	8006f04 <hal_bsp_flash_dev>
    if (!hf) {
 800c70e:	4604      	mov	r4, r0
 800c710:	b1a8      	cbz	r0, 800c73e <hal_flash_read+0x3e>
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
 800c712:	4629      	mov	r1, r5
 800c714:	f7ff ffd4 	bl	800c6c0 <hal_flash_check_addr>
 800c718:	b988      	cbnz	r0, 800c73e <hal_flash_read+0x3e>
      hal_flash_check_addr(hf, address + num_bytes)) {
 800c71a:	19a9      	adds	r1, r5, r6
 800c71c:	4620      	mov	r0, r4
 800c71e:	f7ff ffcf 	bl	800c6c0 <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
 800c722:	b960      	cbnz	r0, 800c73e <hal_flash_read+0x3e>
        return SYS_EINVAL;
    }

    rc = hf->hf_itf->hff_read(hf, address, dst, num_bytes);
 800c724:	6823      	ldr	r3, [r4, #0]
 800c726:	4642      	mov	r2, r8
 800c728:	681f      	ldr	r7, [r3, #0]
 800c72a:	4629      	mov	r1, r5
 800c72c:	4633      	mov	r3, r6
 800c72e:	4620      	mov	r0, r4
 800c730:	47b8      	blx	r7
    if (rc != 0) {
 800c732:	2800      	cmp	r0, #0
        return SYS_EIO;
 800c734:	bf18      	it	ne
 800c736:	f06f 0004 	mvnne.w	r0, #4
    }

    return 0;
}
 800c73a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EINVAL;
 800c73e:	f06f 0001 	mvn.w	r0, #1
 800c742:	e7fa      	b.n	800c73a <hal_flash_read+0x3a>

0800c744 <HAL_ADC_MspInit>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_MspInit must be implemented in the user file.
   */ 
}
 800c744:	4770      	bx	lr
	...

0800c748 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800c748:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tickstart = 0U;
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800c74a:	2500      	movs	r5, #0
{
 800c74c:	4604      	mov	r4, r0
 800c74e:	460e      	mov	r6, r1
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800c750:	9501      	str	r5, [sp, #4]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800c752:	f7fb f805 	bl	8007760 <HAL_GetTick>
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800c756:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800c758:	4607      	mov	r7, r0
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800c75a:	689a      	ldr	r2, [r3, #8]
 800c75c:	05d2      	lsls	r2, r2, #23
 800c75e:	d508      	bpl.n	800c772 <HAL_ADC_PollForConversion+0x2a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
    
    return HAL_ERROR;
 800c760:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c762:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    __HAL_UNLOCK(hadc);
 800c764:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c768:	f043 0320 	orr.w	r3, r3, #32
 800c76c:	62a3      	str	r3, [r4, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
}
 800c76e:	b003      	add	sp, #12
 800c770:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800c772:	685a      	ldr	r2, [r3, #4]
 800c774:	05d5      	lsls	r5, r2, #23
 800c776:	d403      	bmi.n	800c780 <HAL_ADC_PollForConversion+0x38>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 800c778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800c77a:	f413 0f70 	tst.w	r3, #15728640	; 0xf00000
 800c77e:	d03b      	beq.n	800c7f8 <HAL_ADC_PollForConversion+0xb0>
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800c780:	4b3a      	ldr	r3, [pc, #232]	; (800c86c <HAL_ADC_PollForConversion+0x124>)
 800c782:	2002      	movs	r0, #2
 800c784:	681d      	ldr	r5, [r3, #0]
 800c786:	f000 fb85 	bl	800ce94 <HAL_RCCEx_GetPeriphCLKFreq>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800c78a:	6823      	ldr	r3, [r4, #0]
 800c78c:	4a38      	ldr	r2, [pc, #224]	; (800c870 <HAL_ADC_PollForConversion+0x128>)
 800c78e:	6919      	ldr	r1, [r3, #16]
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800c790:	fbb5 f0f0 	udiv	r0, r5, r0
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800c794:	4211      	tst	r1, r2
 800c796:	4a37      	ldr	r2, [pc, #220]	; (800c874 <HAL_ADC_PollForConversion+0x12c>)
 800c798:	d14f      	bne.n	800c83a <HAL_ADC_PollForConversion+0xf2>
 800c79a:	68dd      	ldr	r5, [r3, #12]
 800c79c:	4936      	ldr	r1, [pc, #216]	; (800c878 <HAL_ADC_PollForConversion+0x130>)
 800c79e:	420d      	tst	r5, r1
 800c7a0:	d14b      	bne.n	800c83a <HAL_ADC_PollForConversion+0xf2>
 800c7a2:	6919      	ldr	r1, [r3, #16]
 800c7a4:	4211      	tst	r1, r2
 800c7a6:	d159      	bne.n	800c85c <HAL_ADC_PollForConversion+0x114>
 800c7a8:	68da      	ldr	r2, [r3, #12]
 800c7aa:	4b34      	ldr	r3, [pc, #208]	; (800c87c <HAL_ADC_PollForConversion+0x134>)
 800c7ac:	421a      	tst	r2, r3
 800c7ae:	bf14      	ite	ne
 800c7b0:	2329      	movne	r3, #41	; 0x29
 800c7b2:	2314      	moveq	r3, #20
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800c7b4:	fb03 f500 	mul.w	r5, r3, r0
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800c7b8:	9b01      	ldr	r3, [sp, #4]
 800c7ba:	42ab      	cmp	r3, r5
 800c7bc:	d220      	bcs.n	800c800 <HAL_ADC_PollForConversion+0xb8>
      if(Timeout != HAL_MAX_DELAY)
 800c7be:	1c73      	adds	r3, r6, #1
 800c7c0:	d005      	beq.n	800c7ce <HAL_ADC_PollForConversion+0x86>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800c7c2:	b186      	cbz	r6, 800c7e6 <HAL_ADC_PollForConversion+0x9e>
 800c7c4:	f7fa ffcc 	bl	8007760 <HAL_GetTick>
 800c7c8:	1bc0      	subs	r0, r0, r7
 800c7ca:	42b0      	cmp	r0, r6
 800c7cc:	d80b      	bhi.n	800c7e6 <HAL_ADC_PollForConversion+0x9e>
      Conversion_Timeout_CPU_cycles ++;
 800c7ce:	9b01      	ldr	r3, [sp, #4]
 800c7d0:	3301      	adds	r3, #1
 800c7d2:	9301      	str	r3, [sp, #4]
 800c7d4:	e7f0      	b.n	800c7b8 <HAL_ADC_PollForConversion+0x70>
      if(Timeout != HAL_MAX_DELAY)
 800c7d6:	1c70      	adds	r0, r6, #1
 800c7d8:	d00f      	beq.n	800c7fa <HAL_ADC_PollForConversion+0xb2>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800c7da:	b126      	cbz	r6, 800c7e6 <HAL_ADC_PollForConversion+0x9e>
 800c7dc:	f7fa ffc0 	bl	8007760 <HAL_GetTick>
 800c7e0:	1bc0      	subs	r0, r0, r7
 800c7e2:	42b0      	cmp	r0, r6
 800c7e4:	d908      	bls.n	800c7f8 <HAL_ADC_PollForConversion+0xb0>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800c7e6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          return HAL_TIMEOUT;
 800c7e8:	2003      	movs	r0, #3
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800c7ea:	f043 0304 	orr.w	r3, r3, #4
 800c7ee:	62a3      	str	r3, [r4, #40]	; 0x28
          __HAL_UNLOCK(hadc);
 800c7f0:	2300      	movs	r3, #0
 800c7f2:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          return HAL_TIMEOUT;
 800c7f6:	e7ba      	b.n	800c76e <HAL_ADC_PollForConversion+0x26>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800c7f8:	6822      	ldr	r2, [r4, #0]
 800c7fa:	6813      	ldr	r3, [r2, #0]
 800c7fc:	0799      	lsls	r1, r3, #30
 800c7fe:	d5ea      	bpl.n	800c7d6 <HAL_ADC_PollForConversion+0x8e>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800c800:	f06f 0312 	mvn.w	r3, #18
 800c804:	6822      	ldr	r2, [r4, #0]
 800c806:	6013      	str	r3, [r2, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800c808:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c80a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c80e:	62a3      	str	r3, [r4, #40]	; 0x28
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800c810:	6893      	ldr	r3, [r2, #8]
 800c812:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800c816:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800c81a:	d125      	bne.n	800c868 <HAL_ADC_PollForConversion+0x120>
 800c81c:	68e3      	ldr	r3, [r4, #12]
 800c81e:	bb1b      	cbnz	r3, 800c868 <HAL_ADC_PollForConversion+0x120>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800c820:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c822:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c826:	62a3      	str	r3, [r4, #40]	; 0x28
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800c828:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800c82a:	f410 5080 	ands.w	r0, r0, #4096	; 0x1000
 800c82e:	d11b      	bne.n	800c868 <HAL_ADC_PollForConversion+0x120>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800c830:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c832:	f043 0301 	orr.w	r3, r3, #1
 800c836:	62a3      	str	r3, [r4, #40]	; 0x28
 800c838:	e799      	b.n	800c76e <HAL_ADC_PollForConversion+0x26>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800c83a:	6919      	ldr	r1, [r3, #16]
 800c83c:	4211      	tst	r1, r2
 800c83e:	d103      	bne.n	800c848 <HAL_ADC_PollForConversion+0x100>
 800c840:	68d9      	ldr	r1, [r3, #12]
 800c842:	4a0e      	ldr	r2, [pc, #56]	; (800c87c <HAL_ADC_PollForConversion+0x134>)
 800c844:	4211      	tst	r1, r2
 800c846:	d00b      	beq.n	800c860 <HAL_ADC_PollForConversion+0x118>
 800c848:	6919      	ldr	r1, [r3, #16]
 800c84a:	4a0d      	ldr	r2, [pc, #52]	; (800c880 <HAL_ADC_PollForConversion+0x138>)
 800c84c:	4211      	tst	r1, r2
 800c84e:	d109      	bne.n	800c864 <HAL_ADC_PollForConversion+0x11c>
 800c850:	68db      	ldr	r3, [r3, #12]
 800c852:	4213      	tst	r3, r2
 800c854:	bf14      	ite	ne
 800c856:	23fc      	movne	r3, #252	; 0xfc
 800c858:	2354      	moveq	r3, #84	; 0x54
 800c85a:	e7ab      	b.n	800c7b4 <HAL_ADC_PollForConversion+0x6c>
 800c85c:	2329      	movs	r3, #41	; 0x29
 800c85e:	e7a9      	b.n	800c7b4 <HAL_ADC_PollForConversion+0x6c>
 800c860:	2354      	movs	r3, #84	; 0x54
 800c862:	e7a7      	b.n	800c7b4 <HAL_ADC_PollForConversion+0x6c>
 800c864:	23fc      	movs	r3, #252	; 0xfc
 800c866:	e7a5      	b.n	800c7b4 <HAL_ADC_PollForConversion+0x6c>
  return HAL_OK;
 800c868:	2000      	movs	r0, #0
 800c86a:	e780      	b.n	800c76e <HAL_ADC_PollForConversion+0x26>
 800c86c:	20000110 	.word	0x20000110
 800c870:	24924924 	.word	0x24924924
 800c874:	12492492 	.word	0x12492492
 800c878:	00924924 	.word	0x00924924
 800c87c:	00492492 	.word	0x00492492
 800c880:	00249249 	.word	0x00249249

0800c884 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800c884:	6803      	ldr	r3, [r0, #0]
 800c886:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 800c888:	4770      	bx	lr

0800c88a <HAL_ADC_ConvCpltCallback>:
 800c88a:	4770      	bx	lr

0800c88c <ADC_DMAConvCplt>:
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800c88c:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 800c88e:	b510      	push	{r4, lr}
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800c890:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c892:	f012 0f50 	tst.w	r2, #80	; 0x50
 800c896:	d11b      	bne.n	800c8d0 <ADC_DMAConvCplt+0x44>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800c898:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c89a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c89e:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800c8a0:	681a      	ldr	r2, [r3, #0]
 800c8a2:	6892      	ldr	r2, [r2, #8]
 800c8a4:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 800c8a8:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 800c8ac:	d10c      	bne.n	800c8c8 <ADC_DMAConvCplt+0x3c>
 800c8ae:	68da      	ldr	r2, [r3, #12]
 800c8b0:	b952      	cbnz	r2, 800c8c8 <ADC_DMAConvCplt+0x3c>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800c8b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c8b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c8b8:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800c8ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c8bc:	04d2      	lsls	r2, r2, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800c8be:	bf5e      	ittt	pl
 800c8c0:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
 800c8c2:	f042 0201 	orrpl.w	r2, r2, #1
 800c8c6:	629a      	strpl	r2, [r3, #40]	; 0x28
      }
    }
    
    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc); 
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	f7ff ffde 	bl	800c88a <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800c8ce:	bd10      	pop	{r4, pc}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800c8d0:	6a1b      	ldr	r3, [r3, #32]
}
 800c8d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800c8d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8d8:	4718      	bx	r3

0800c8da <HAL_ADC_ConvHalfCpltCallback>:
 800c8da:	4770      	bx	lr

0800c8dc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800c8dc:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Half conversion callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 800c8de:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800c8e0:	f7ff fffb 	bl	800c8da <HAL_ADC_ConvHalfCpltCallback>
}
 800c8e4:	bd08      	pop	{r3, pc}

0800c8e6 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800c8e6:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 800c8e8:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800c8ea:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800c8ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c8f0:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800c8f2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800c8f4:	f043 0304 	orr.w	r3, r3, #4
 800c8f8:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
  HAL_ADC_ErrorCallback(hadc); 
 800c8fa:	f7fd f835 	bl	8009968 <HAL_ADC_ErrorCallback>
}
 800c8fe:	bd08      	pop	{r3, pc}

0800c900 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 800c900:	2300      	movs	r3, #0
{ 
 800c902:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 800c904:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800c906:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800c90a:	2b01      	cmp	r3, #1
 800c90c:	d06d      	beq.n	800c9ea <HAL_ADC_ConfigChannel+0xea>
 800c90e:	2301      	movs	r3, #1
  if (sConfig->Rank < 7U)
 800c910:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 800c912:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 800c916:	2d06      	cmp	r5, #6
 800c918:	6802      	ldr	r2, [r0, #0]
 800c91a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 800c91e:	680c      	ldr	r4, [r1, #0]
 800c920:	d823      	bhi.n	800c96a <HAL_ADC_ConfigChannel+0x6a>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800c922:	261f      	movs	r6, #31
 800c924:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800c926:	3b05      	subs	r3, #5
 800c928:	409e      	lsls	r6, r3
 800c92a:	ea25 0506 	bic.w	r5, r5, r6
 800c92e:	fa04 f303 	lsl.w	r3, r4, r3
 800c932:	432b      	orrs	r3, r5
 800c934:	6353      	str	r3, [r2, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800c936:	2c09      	cmp	r4, #9
 800c938:	688b      	ldr	r3, [r1, #8]
 800c93a:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 800c93e:	f04f 0107 	mov.w	r1, #7
 800c942:	d92a      	bls.n	800c99a <HAL_ADC_ConfigChannel+0x9a>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800c944:	68d6      	ldr	r6, [r2, #12]
 800c946:	3d1e      	subs	r5, #30
 800c948:	40a9      	lsls	r1, r5
 800c94a:	ea26 0101 	bic.w	r1, r6, r1
 800c94e:	40ab      	lsls	r3, r5
 800c950:	430b      	orrs	r3, r1
 800c952:	60d3      	str	r3, [r2, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800c954:	f1a4 0310 	sub.w	r3, r4, #16
 800c958:	2b01      	cmp	r3, #1
 800c95a:	d926      	bls.n	800c9aa <HAL_ADC_ConfigChannel+0xaa>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800c95c:	2300      	movs	r3, #0
  __HAL_UNLOCK(hadc);
 800c95e:	2200      	movs	r2, #0
 800c960:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
}
 800c964:	4618      	mov	r0, r3
 800c966:	b002      	add	sp, #8
 800c968:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 800c96a:	2d0c      	cmp	r5, #12
 800c96c:	f04f 051f 	mov.w	r5, #31
 800c970:	d809      	bhi.n	800c986 <HAL_ADC_ConfigChannel+0x86>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800c972:	6b16      	ldr	r6, [r2, #48]	; 0x30
 800c974:	3b23      	subs	r3, #35	; 0x23
 800c976:	409d      	lsls	r5, r3
 800c978:	ea26 0505 	bic.w	r5, r6, r5
 800c97c:	fa04 f303 	lsl.w	r3, r4, r3
 800c980:	432b      	orrs	r3, r5
 800c982:	6313      	str	r3, [r2, #48]	; 0x30
 800c984:	e7d7      	b.n	800c936 <HAL_ADC_ConfigChannel+0x36>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800c986:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 800c988:	3b41      	subs	r3, #65	; 0x41
 800c98a:	409d      	lsls	r5, r3
 800c98c:	ea26 0505 	bic.w	r5, r6, r5
 800c990:	fa04 f303 	lsl.w	r3, r4, r3
 800c994:	432b      	orrs	r3, r5
 800c996:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c998:	e7cd      	b.n	800c936 <HAL_ADC_ConfigChannel+0x36>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800c99a:	6916      	ldr	r6, [r2, #16]
 800c99c:	40a9      	lsls	r1, r5
 800c99e:	ea26 0101 	bic.w	r1, r6, r1
 800c9a2:	40ab      	lsls	r3, r5
 800c9a4:	430b      	orrs	r3, r1
 800c9a6:	6113      	str	r3, [r2, #16]
 800c9a8:	e7d4      	b.n	800c954 <HAL_ADC_ConfigChannel+0x54>
    if (hadc->Instance == ADC1)
 800c9aa:	4b11      	ldr	r3, [pc, #68]	; (800c9f0 <HAL_ADC_ConfigChannel+0xf0>)
 800c9ac:	429a      	cmp	r2, r3
 800c9ae:	d116      	bne.n	800c9de <HAL_ADC_ConfigChannel+0xde>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800c9b0:	6893      	ldr	r3, [r2, #8]
 800c9b2:	021b      	lsls	r3, r3, #8
 800c9b4:	d4d2      	bmi.n	800c95c <HAL_ADC_ConfigChannel+0x5c>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800c9b6:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800c9b8:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800c9ba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c9be:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800c9c0:	d1cc      	bne.n	800c95c <HAL_ADC_ConfigChannel+0x5c>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800c9c2:	4b0c      	ldr	r3, [pc, #48]	; (800c9f4 <HAL_ADC_ConfigChannel+0xf4>)
 800c9c4:	4a0c      	ldr	r2, [pc, #48]	; (800c9f8 <HAL_ADC_ConfigChannel+0xf8>)
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	fbb3 f2f2 	udiv	r2, r3, r2
 800c9cc:	230a      	movs	r3, #10
 800c9ce:	4353      	muls	r3, r2
            wait_loop_index--;
 800c9d0:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 800c9d2:	9b01      	ldr	r3, [sp, #4]
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d0c1      	beq.n	800c95c <HAL_ADC_ConfigChannel+0x5c>
            wait_loop_index--;
 800c9d8:	9b01      	ldr	r3, [sp, #4]
 800c9da:	3b01      	subs	r3, #1
 800c9dc:	e7f8      	b.n	800c9d0 <HAL_ADC_ConfigChannel+0xd0>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c9de:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800c9e0:	f043 0320 	orr.w	r3, r3, #32
 800c9e4:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 800c9e6:	2301      	movs	r3, #1
 800c9e8:	e7b9      	b.n	800c95e <HAL_ADC_ConfigChannel+0x5e>
  __HAL_LOCK(hadc);
 800c9ea:	2302      	movs	r3, #2
 800c9ec:	e7ba      	b.n	800c964 <HAL_ADC_ConfigChannel+0x64>
 800c9ee:	bf00      	nop
 800c9f0:	40012400 	.word	0x40012400
 800c9f4:	20000110 	.word	0x20000110
 800c9f8:	000f4240 	.word	0x000f4240

0800c9fc <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 800c9fc:	2300      	movs	r3, #0
{
 800c9fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 800ca00:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 800ca02:	6803      	ldr	r3, [r0, #0]
{
 800ca04:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 800ca06:	689a      	ldr	r2, [r3, #8]
 800ca08:	07d2      	lsls	r2, r2, #31
 800ca0a:	d502      	bpl.n	800ca12 <ADC_Enable+0x16>
  return HAL_OK;
 800ca0c:	2000      	movs	r0, #0
}
 800ca0e:	b002      	add	sp, #8
 800ca10:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 800ca12:	689a      	ldr	r2, [r3, #8]
 800ca14:	f042 0201 	orr.w	r2, r2, #1
 800ca18:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800ca1a:	4b12      	ldr	r3, [pc, #72]	; (800ca64 <ADC_Enable+0x68>)
 800ca1c:	4a12      	ldr	r2, [pc, #72]	; (800ca68 <ADC_Enable+0x6c>)
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 800ca24:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 800ca26:	9b01      	ldr	r3, [sp, #4]
 800ca28:	b9c3      	cbnz	r3, 800ca5c <ADC_Enable+0x60>
    tickstart = HAL_GetTick();
 800ca2a:	f7fa fe99 	bl	8007760 <HAL_GetTick>
 800ca2e:	4606      	mov	r6, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 800ca30:	6823      	ldr	r3, [r4, #0]
 800ca32:	689d      	ldr	r5, [r3, #8]
 800ca34:	f015 0501 	ands.w	r5, r5, #1
 800ca38:	d1e8      	bne.n	800ca0c <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800ca3a:	f7fa fe91 	bl	8007760 <HAL_GetTick>
 800ca3e:	1b80      	subs	r0, r0, r6
 800ca40:	2802      	cmp	r0, #2
 800ca42:	d9f5      	bls.n	800ca30 <ADC_Enable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ca44:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 800ca46:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ca4a:	f043 0310 	orr.w	r3, r3, #16
 800ca4e:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ca50:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 800ca52:	2001      	movs	r0, #1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ca54:	f043 0301 	orr.w	r3, r3, #1
 800ca58:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ca5a:	e7d8      	b.n	800ca0e <ADC_Enable+0x12>
      wait_loop_index--;
 800ca5c:	9b01      	ldr	r3, [sp, #4]
 800ca5e:	3b01      	subs	r3, #1
 800ca60:	e7e0      	b.n	800ca24 <ADC_Enable+0x28>
 800ca62:	bf00      	nop
 800ca64:	20000110 	.word	0x20000110
 800ca68:	000f4240 	.word	0x000f4240

0800ca6c <HAL_ADC_Start>:
  __HAL_LOCK(hadc);
 800ca6c:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 800ca70:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 800ca72:	2b01      	cmp	r3, #1
{
 800ca74:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 800ca76:	d054      	beq.n	800cb22 <HAL_ADC_Start+0xb6>
 800ca78:	2301      	movs	r3, #1
 800ca7a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 800ca7e:	f7ff ffbd 	bl	800c9fc <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 800ca82:	2800      	cmp	r0, #0
 800ca84:	d149      	bne.n	800cb1a <HAL_ADC_Start+0xae>
    ADC_STATE_CLR_SET(hadc->State,
 800ca86:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800ca88:	4a27      	ldr	r2, [pc, #156]	; (800cb28 <HAL_ADC_Start+0xbc>)
    ADC_STATE_CLR_SET(hadc->State,
 800ca8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ca8e:	f023 0301 	bic.w	r3, r3, #1
 800ca92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ca96:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800ca98:	6823      	ldr	r3, [r4, #0]
 800ca9a:	4293      	cmp	r3, r2
 800ca9c:	d104      	bne.n	800caa8 <HAL_ADC_Start+0x3c>
 800ca9e:	4923      	ldr	r1, [pc, #140]	; (800cb2c <HAL_ADC_Start+0xc0>)
 800caa0:	684a      	ldr	r2, [r1, #4]
 800caa2:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 800caa6:	d12e      	bne.n	800cb06 <HAL_ADC_Start+0x9a>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800caa8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800caaa:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800caae:	62a2      	str	r2, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800cab0:	685a      	ldr	r2, [r3, #4]
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800cab2:	0552      	lsls	r2, r2, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800cab4:	bf41      	itttt	mi
 800cab6:	6aa2      	ldrmi	r2, [r4, #40]	; 0x28
 800cab8:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 800cabc:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 800cac0:	62a2      	strmi	r2, [r4, #40]	; 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800cac2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800cac4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800cac8:	bf1c      	itt	ne
 800caca:	6ae2      	ldrne	r2, [r4, #44]	; 0x2c
 800cacc:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 800cad0:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 800cad2:	2200      	movs	r2, #0
 800cad4:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800cad8:	f06f 0202 	mvn.w	r2, #2
 800cadc:	601a      	str	r2, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800cade:	689a      	ldr	r2, [r3, #8]
 800cae0:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 800cae4:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 800cae8:	d113      	bne.n	800cb12 <HAL_ADC_Start+0xa6>
 800caea:	4a0f      	ldr	r2, [pc, #60]	; (800cb28 <HAL_ADC_Start+0xbc>)
 800caec:	4293      	cmp	r3, r2
 800caee:	d105      	bne.n	800cafc <HAL_ADC_Start+0x90>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800caf0:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 800caf4:	6852      	ldr	r2, [r2, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800caf6:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 800cafa:	d10a      	bne.n	800cb12 <HAL_ADC_Start+0xa6>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800cafc:	689a      	ldr	r2, [r3, #8]
 800cafe:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800cb02:	609a      	str	r2, [r3, #8]
}
 800cb04:	bd10      	pop	{r4, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800cb06:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800cb08:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800cb0c:	62a2      	str	r2, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800cb0e:	684a      	ldr	r2, [r1, #4]
 800cb10:	e7cf      	b.n	800cab2 <HAL_ADC_Start+0x46>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800cb12:	689a      	ldr	r2, [r3, #8]
 800cb14:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800cb18:	e7f3      	b.n	800cb02 <HAL_ADC_Start+0x96>
    __HAL_UNLOCK(hadc);
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 800cb20:	e7f0      	b.n	800cb04 <HAL_ADC_Start+0x98>
  __HAL_LOCK(hadc);
 800cb22:	2002      	movs	r0, #2
 800cb24:	e7ee      	b.n	800cb04 <HAL_ADC_Start+0x98>
 800cb26:	bf00      	nop
 800cb28:	40012800 	.word	0x40012800
 800cb2c:	40012400 	.word	0x40012400

0800cb30 <HAL_ADC_Start_DMA>:
{
 800cb30:	e92d 41d8 	stmdb	sp!, {r3, r4, r6, r7, r8, lr}
 800cb34:	4690      	mov	r8, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800cb36:	4b40      	ldr	r3, [pc, #256]	; (800cc38 <HAL_ADC_Start_DMA+0x108>)
 800cb38:	6802      	ldr	r2, [r0, #0]
{
 800cb3a:	4604      	mov	r4, r0
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800cb3c:	429a      	cmp	r2, r3
{
 800cb3e:	460f      	mov	r7, r1
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800cb40:	d002      	beq.n	800cb48 <HAL_ADC_Start_DMA+0x18>
 800cb42:	493e      	ldr	r1, [pc, #248]	; (800cc3c <HAL_ADC_Start_DMA+0x10c>)
 800cb44:	428a      	cmp	r2, r1
 800cb46:	d103      	bne.n	800cb50 <HAL_ADC_Start_DMA+0x20>
 800cb48:	685b      	ldr	r3, [r3, #4]
 800cb4a:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 800cb4e:	d16e      	bne.n	800cc2e <HAL_ADC_Start_DMA+0xfe>
    __HAL_LOCK(hadc);
 800cb50:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800cb54:	2b01      	cmp	r3, #1
 800cb56:	d06c      	beq.n	800cc32 <HAL_ADC_Start_DMA+0x102>
 800cb58:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 800cb5a:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
 800cb5c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    tmp_hal_status = ADC_Enable(hadc);
 800cb60:	f7ff ff4c 	bl	800c9fc <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 800cb64:	4606      	mov	r6, r0
 800cb66:	2800      	cmp	r0, #0
 800cb68:	d15d      	bne.n	800cc26 <HAL_ADC_Start_DMA+0xf6>
      ADC_STATE_CLR_SET(hadc->State,
 800cb6a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800cb6c:	6821      	ldr	r1, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 800cb6e:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800cb72:	4b32      	ldr	r3, [pc, #200]	; (800cc3c <HAL_ADC_Start_DMA+0x10c>)
      ADC_STATE_CLR_SET(hadc->State,
 800cb74:	f020 0001 	bic.w	r0, r0, #1
 800cb78:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800cb7c:	4299      	cmp	r1, r3
      ADC_STATE_CLR_SET(hadc->State,
 800cb7e:	62a0      	str	r0, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800cb80:	d104      	bne.n	800cb8c <HAL_ADC_Start_DMA+0x5c>
 800cb82:	4a2d      	ldr	r2, [pc, #180]	; (800cc38 <HAL_ADC_Start_DMA+0x108>)
 800cb84:	6853      	ldr	r3, [r2, #4]
 800cb86:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 800cb8a:	d13e      	bne.n	800cc0a <HAL_ADC_Start_DMA+0xda>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800cb8c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800cb8e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800cb92:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800cb94:	684b      	ldr	r3, [r1, #4]
 800cb96:	055a      	lsls	r2, r3, #21
 800cb98:	d505      	bpl.n	800cba6 <HAL_ADC_Start_DMA+0x76>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800cb9a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800cb9c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800cba0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800cba4:	62a3      	str	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800cba6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800cba8:	6a20      	ldr	r0, [r4, #32]
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800cbaa:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800cbae:	bf18      	it	ne
 800cbb0:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800cbb2:	463a      	mov	r2, r7
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800cbb4:	bf18      	it	ne
 800cbb6:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 800cbba:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 800cbbc:	2300      	movs	r3, #0
 800cbbe:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800cbc2:	4b1f      	ldr	r3, [pc, #124]	; (800cc40 <HAL_ADC_Start_DMA+0x110>)
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800cbc4:	314c      	adds	r1, #76	; 0x4c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800cbc6:	6283      	str	r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800cbc8:	4b1e      	ldr	r3, [pc, #120]	; (800cc44 <HAL_ADC_Start_DMA+0x114>)
 800cbca:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800cbcc:	4b1e      	ldr	r3, [pc, #120]	; (800cc48 <HAL_ADC_Start_DMA+0x118>)
 800cbce:	6303      	str	r3, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800cbd0:	f06f 0302 	mvn.w	r3, #2
 800cbd4:	f841 3c4c 	str.w	r3, [r1, #-76]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800cbd8:	f851 3c44 	ldr.w	r3, [r1, #-68]
 800cbdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cbe0:	f841 3c44 	str.w	r3, [r1, #-68]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800cbe4:	4643      	mov	r3, r8
 800cbe6:	f7fc fbe1 	bl	80093ac <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800cbea:	6823      	ldr	r3, [r4, #0]
 800cbec:	689a      	ldr	r2, [r3, #8]
 800cbee:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 800cbf2:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800cbf6:	689a      	ldr	r2, [r3, #8]
 800cbf8:	bf0c      	ite	eq
 800cbfa:	f442 02a0 	orreq.w	r2, r2, #5242880	; 0x500000
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800cbfe:	f442 1280 	orrne.w	r2, r2, #1048576	; 0x100000
 800cc02:	609a      	str	r2, [r3, #8]
}
 800cc04:	4630      	mov	r0, r6
 800cc06:	e8bd 81d8 	ldmia.w	sp!, {r3, r4, r6, r7, r8, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800cc0a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800cc0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cc10:	62a3      	str	r3, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800cc12:	6853      	ldr	r3, [r2, #4]
 800cc14:	055b      	lsls	r3, r3, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800cc16:	bf41      	itttt	mi
 800cc18:	6aa0      	ldrmi	r0, [r4, #40]	; 0x28
 800cc1a:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 800cc1e:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 800cc22:	62a0      	strmi	r0, [r4, #40]	; 0x28
 800cc24:	e7bf      	b.n	800cba6 <HAL_ADC_Start_DMA+0x76>
      __HAL_UNLOCK(hadc);
 800cc26:	2300      	movs	r3, #0
 800cc28:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 800cc2c:	e7ea      	b.n	800cc04 <HAL_ADC_Start_DMA+0xd4>
    tmp_hal_status = HAL_ERROR;
 800cc2e:	2601      	movs	r6, #1
 800cc30:	e7e8      	b.n	800cc04 <HAL_ADC_Start_DMA+0xd4>
    __HAL_LOCK(hadc);
 800cc32:	2602      	movs	r6, #2
 800cc34:	e7e6      	b.n	800cc04 <HAL_ADC_Start_DMA+0xd4>
 800cc36:	bf00      	nop
 800cc38:	40012400 	.word	0x40012400
 800cc3c:	40012800 	.word	0x40012800
 800cc40:	0800c88d 	.word	0x0800c88d
 800cc44:	0800c8dd 	.word	0x0800c8dd
 800cc48:	0800c8e7 	.word	0x0800c8e7

0800cc4c <ADC_ConversionStop_Disable>:
{
 800cc4c:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 800cc4e:	6803      	ldr	r3, [r0, #0]
{
 800cc50:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 800cc52:	689a      	ldr	r2, [r3, #8]
 800cc54:	07d2      	lsls	r2, r2, #31
 800cc56:	d401      	bmi.n	800cc5c <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 800cc58:	2000      	movs	r0, #0
}
 800cc5a:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 800cc5c:	689a      	ldr	r2, [r3, #8]
 800cc5e:	f022 0201 	bic.w	r2, r2, #1
 800cc62:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800cc64:	f7fa fd7c 	bl	8007760 <HAL_GetTick>
 800cc68:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 800cc6a:	6823      	ldr	r3, [r4, #0]
 800cc6c:	689b      	ldr	r3, [r3, #8]
 800cc6e:	07db      	lsls	r3, r3, #31
 800cc70:	d5f2      	bpl.n	800cc58 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800cc72:	f7fa fd75 	bl	8007760 <HAL_GetTick>
 800cc76:	1b40      	subs	r0, r0, r5
 800cc78:	2802      	cmp	r0, #2
 800cc7a:	d9f6      	bls.n	800cc6a <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800cc7c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800cc7e:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800cc80:	f043 0310 	orr.w	r3, r3, #16
 800cc84:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800cc86:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800cc88:	f043 0301 	orr.w	r3, r3, #1
 800cc8c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cc8e:	e7e4      	b.n	800cc5a <ADC_ConversionStop_Disable+0xe>

0800cc90 <HAL_ADC_Init>:
{
 800cc90:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 800cc92:	4604      	mov	r4, r0
 800cc94:	2800      	cmp	r0, #0
 800cc96:	d070      	beq.n	800cd7a <HAL_ADC_Init+0xea>
  if (hadc->State == HAL_ADC_STATE_RESET)
 800cc98:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800cc9a:	b923      	cbnz	r3, 800cca6 <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 800cc9c:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 800cc9e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 800cca2:	f7ff fd4f 	bl	800c744 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800cca6:	4620      	mov	r0, r4
 800cca8:	f7ff ffd0 	bl	800cc4c <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800ccac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ccae:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 800ccb2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800ccb4:	d163      	bne.n	800cd7e <HAL_ADC_Init+0xee>
 800ccb6:	2800      	cmp	r0, #0
 800ccb8:	d161      	bne.n	800cd7e <HAL_ADC_Init+0xee>
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 800ccba:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 800ccbc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 800ccc0:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 800ccc2:	f023 0302 	bic.w	r3, r3, #2
 800ccc6:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 800ccca:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800cccc:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 800ccce:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 800ccd0:	68e3      	ldr	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800ccd2:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 800ccd6:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800ccda:	d037      	beq.n	800cd4c <HAL_ADC_Init+0xbc>
 800ccdc:	2901      	cmp	r1, #1
 800ccde:	bf14      	ite	ne
 800cce0:	4606      	movne	r6, r0
 800cce2:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800cce6:	6965      	ldr	r5, [r4, #20]
 800cce8:	2d01      	cmp	r5, #1
 800ccea:	d106      	bne.n	800ccfa <HAL_ADC_Init+0x6a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800ccec:	bb83      	cbnz	r3, 800cd50 <HAL_ADC_Init+0xc0>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800ccee:	69a3      	ldr	r3, [r4, #24]
 800ccf0:	3b01      	subs	r3, #1
 800ccf2:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 800ccf6:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 800ccfa:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800ccfc:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 800cd00:	685d      	ldr	r5, [r3, #4]
 800cd02:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 800cd06:	ea45 0506 	orr.w	r5, r5, r6
 800cd0a:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 800cd0c:	689e      	ldr	r6, [r3, #8]
 800cd0e:	4d1e      	ldr	r5, [pc, #120]	; (800cd88 <HAL_ADC_Init+0xf8>)
 800cd10:	ea05 0506 	and.w	r5, r5, r6
 800cd14:	ea45 0502 	orr.w	r5, r5, r2
 800cd18:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800cd1a:	d001      	beq.n	800cd20 <HAL_ADC_Init+0x90>
 800cd1c:	2901      	cmp	r1, #1
 800cd1e:	d120      	bne.n	800cd62 <HAL_ADC_Init+0xd2>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800cd20:	6921      	ldr	r1, [r4, #16]
 800cd22:	3901      	subs	r1, #1
 800cd24:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 800cd26:	6add      	ldr	r5, [r3, #44]	; 0x2c
 800cd28:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 800cd2c:	4329      	orrs	r1, r5
 800cd2e:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800cd30:	6899      	ldr	r1, [r3, #8]
 800cd32:	4b16      	ldr	r3, [pc, #88]	; (800cd8c <HAL_ADC_Init+0xfc>)
 800cd34:	400b      	ands	r3, r1
 800cd36:	429a      	cmp	r2, r3
 800cd38:	d115      	bne.n	800cd66 <HAL_ADC_Init+0xd6>
      ADC_CLEAR_ERRORCODE(hadc);
 800cd3a:	2300      	movs	r3, #0
 800cd3c:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 800cd3e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800cd40:	f023 0303 	bic.w	r3, r3, #3
 800cd44:	f043 0301 	orr.w	r3, r3, #1
 800cd48:	62a3      	str	r3, [r4, #40]	; 0x28
}
 800cd4a:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800cd4c:	460e      	mov	r6, r1
 800cd4e:	e7ca      	b.n	800cce6 <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800cd50:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800cd52:	f043 0320 	orr.w	r3, r3, #32
 800cd56:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800cd58:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800cd5a:	f043 0301 	orr.w	r3, r3, #1
 800cd5e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cd60:	e7cb      	b.n	800ccfa <HAL_ADC_Init+0x6a>
  uint32_t tmp_sqr1 = 0U;
 800cd62:	2100      	movs	r1, #0
 800cd64:	e7df      	b.n	800cd26 <HAL_ADC_Init+0x96>
      ADC_STATE_CLR_SET(hadc->State,
 800cd66:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800cd68:	f023 0312 	bic.w	r3, r3, #18
 800cd6c:	f043 0310 	orr.w	r3, r3, #16
 800cd70:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800cd72:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800cd74:	f043 0301 	orr.w	r3, r3, #1
 800cd78:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 800cd7a:	2001      	movs	r0, #1
 800cd7c:	e7e5      	b.n	800cd4a <HAL_ADC_Init+0xba>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800cd7e:	f043 0310 	orr.w	r3, r3, #16
 800cd82:	62a3      	str	r3, [r4, #40]	; 0x28
 800cd84:	e7f9      	b.n	800cd7a <HAL_ADC_Init+0xea>
 800cd86:	bf00      	nop
 800cd88:	ffe1f7fd 	.word	0xffe1f7fd
 800cd8c:	ff1f0efe 	.word	0xff1f0efe

0800cd90 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 800cd90:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 800cd94:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 800cd96:	2b01      	cmp	r3, #1
{
 800cd98:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 800cd9a:	d011      	beq.n	800cdc0 <HAL_ADC_Stop+0x30>
 800cd9c:	2301      	movs	r3, #1
 800cd9e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800cda2:	f7ff ff53 	bl	800cc4c <ADC_ConversionStop_Disable>
  if (tmp_hal_status == HAL_OK)
 800cda6:	b938      	cbnz	r0, 800cdb8 <HAL_ADC_Stop+0x28>
    ADC_STATE_CLR_SET(hadc->State,
 800cda8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800cdaa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800cdae:	f023 0301 	bic.w	r3, r3, #1
 800cdb2:	f043 0301 	orr.w	r3, r3, #1
 800cdb6:	62a3      	str	r3, [r4, #40]	; 0x28
  __HAL_UNLOCK(hadc);
 800cdb8:	2300      	movs	r3, #0
 800cdba:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 800cdbe:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 800cdc0:	2002      	movs	r0, #2
 800cdc2:	e7fc      	b.n	800cdbe <HAL_ADC_Stop+0x2e>

0800cdc4 <HAL_ADCEx_Calibration_Start>:
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 800cdc4:	2300      	movs	r3, #0
{
 800cdc6:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 800cdc8:	9301      	str	r3, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800cdca:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 800cdce:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 800cdd0:	2b01      	cmp	r3, #1
 800cdd2:	d05a      	beq.n	800ce8a <HAL_ADCEx_Calibration_Start+0xc6>
 800cdd4:	2301      	movs	r3, #1
 800cdd6:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800cdda:	f7ff ff37 	bl	800cc4c <ADC_ConversionStop_Disable>
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800cdde:	4605      	mov	r5, r0
 800cde0:	2800      	cmp	r0, #0
 800cde2:	d132      	bne.n	800ce4a <HAL_ADCEx_Calibration_Start+0x86>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800cde4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800cde6:	2002      	movs	r0, #2
    ADC_STATE_CLR_SET(hadc->State,
 800cde8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800cdec:	f023 0302 	bic.w	r3, r3, #2
 800cdf0:	f043 0302 	orr.w	r3, r3, #2
 800cdf4:	62a3      	str	r3, [r4, #40]	; 0x28
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800cdf6:	4b26      	ldr	r3, [pc, #152]	; (800ce90 <HAL_ADCEx_Calibration_Start+0xcc>)
 800cdf8:	681e      	ldr	r6, [r3, #0]
 800cdfa:	f000 f84b 	bl	800ce94 <HAL_RCCEx_GetPeriphCLKFreq>
 800cdfe:	fbb6 f0f0 	udiv	r0, r6, r0
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 800ce02:	0040      	lsls	r0, r0, #1
    wait_loop_index = ((SystemCoreClock
 800ce04:	9001      	str	r0, [sp, #4]

    while(wait_loop_index != 0U)
 800ce06:	9b01      	ldr	r3, [sp, #4]
 800ce08:	bb1b      	cbnz	r3, 800ce52 <HAL_ADCEx_Calibration_Start+0x8e>
    {
      wait_loop_index--;
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 800ce0a:	4620      	mov	r0, r4
 800ce0c:	f7ff fdf6 	bl	800c9fc <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 800ce10:	6822      	ldr	r2, [r4, #0]
 800ce12:	6893      	ldr	r3, [r2, #8]
 800ce14:	f043 0308 	orr.w	r3, r3, #8
 800ce18:	6093      	str	r3, [r2, #8]
    
    tickstart = HAL_GetTick();  
 800ce1a:	f7fa fca1 	bl	8007760 <HAL_GetTick>
 800ce1e:	4606      	mov	r6, r0

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800ce20:	6823      	ldr	r3, [r4, #0]
 800ce22:	689a      	ldr	r2, [r3, #8]
 800ce24:	0712      	lsls	r2, r2, #28
 800ce26:	d418      	bmi.n	800ce5a <HAL_ADCEx_Calibration_Start+0x96>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 800ce28:	689a      	ldr	r2, [r3, #8]
 800ce2a:	f042 0204 	orr.w	r2, r2, #4
 800ce2e:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800ce30:	f7fa fc96 	bl	8007760 <HAL_GetTick>
 800ce34:	4606      	mov	r6, r0

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800ce36:	6823      	ldr	r3, [r4, #0]
 800ce38:	689b      	ldr	r3, [r3, #8]
 800ce3a:	075b      	lsls	r3, r3, #29
 800ce3c:	d41f      	bmi.n	800ce7e <HAL_ADCEx_Calibration_Start+0xba>
        return HAL_ERROR;
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800ce3e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ce40:	f023 0303 	bic.w	r3, r3, #3
 800ce44:	f043 0301 	orr.w	r3, r3, #1
 800ce48:	62a3      	str	r3, [r4, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800ce4a:	2300      	movs	r3, #0
 800ce4c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800ce50:	e012      	b.n	800ce78 <HAL_ADCEx_Calibration_Start+0xb4>
      wait_loop_index--;
 800ce52:	9b01      	ldr	r3, [sp, #4]
 800ce54:	3b01      	subs	r3, #1
 800ce56:	9301      	str	r3, [sp, #4]
 800ce58:	e7d5      	b.n	800ce06 <HAL_ADCEx_Calibration_Start+0x42>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800ce5a:	f7fa fc81 	bl	8007760 <HAL_GetTick>
 800ce5e:	1b80      	subs	r0, r0, r6
 800ce60:	280a      	cmp	r0, #10
 800ce62:	d9dd      	bls.n	800ce20 <HAL_ADCEx_Calibration_Start+0x5c>
        ADC_STATE_CLR_SET(hadc->State,
 800ce64:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        return HAL_ERROR;
 800ce66:	2501      	movs	r5, #1
        ADC_STATE_CLR_SET(hadc->State,
 800ce68:	f023 0312 	bic.w	r3, r3, #18
 800ce6c:	f043 0310 	orr.w	r3, r3, #16
 800ce70:	62a3      	str	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 800ce72:	2300      	movs	r3, #0
 800ce74:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 800ce78:	4628      	mov	r0, r5
 800ce7a:	b002      	add	sp, #8
 800ce7c:	bd70      	pop	{r4, r5, r6, pc}
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800ce7e:	f7fa fc6f 	bl	8007760 <HAL_GetTick>
 800ce82:	1b80      	subs	r0, r0, r6
 800ce84:	280a      	cmp	r0, #10
 800ce86:	d9d6      	bls.n	800ce36 <HAL_ADCEx_Calibration_Start+0x72>
 800ce88:	e7ec      	b.n	800ce64 <HAL_ADCEx_Calibration_Start+0xa0>
  __HAL_LOCK(hadc);
 800ce8a:	2502      	movs	r5, #2
 800ce8c:	e7f4      	b.n	800ce78 <HAL_ADCEx_Calibration_Start+0xb4>
 800ce8e:	bf00      	nop
 800ce90:	20000110 	.word	0x20000110

0800ce94 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800ce94:	b570      	push	{r4, r5, r6, lr}
 800ce96:	4604      	mov	r4, r0
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800ce98:	4b34      	ldr	r3, [pc, #208]	; (800cf6c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>)
{
 800ce9a:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800ce9c:	ad02      	add	r5, sp, #8
 800ce9e:	f103 0610 	add.w	r6, r3, #16
 800cea2:	462a      	mov	r2, r5
 800cea4:	6818      	ldr	r0, [r3, #0]
 800cea6:	6859      	ldr	r1, [r3, #4]
 800cea8:	3308      	adds	r3, #8
 800ceaa:	c203      	stmia	r2!, {r0, r1}
 800ceac:	42b3      	cmp	r3, r6
 800ceae:	4615      	mov	r5, r2
 800ceb0:	d1f7      	bne.n	800cea2 <HAL_RCCEx_GetPeriphCLKFreq+0xe>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800ceb2:	f240 2301 	movw	r3, #513	; 0x201
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 800ceb6:	2c02      	cmp	r4, #2
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800ceb8:	f8ad 3004 	strh.w	r3, [sp, #4]
  switch (PeriphClk)
 800cebc:	d047      	beq.n	800cf4e <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 800cebe:	2c10      	cmp	r4, #16
 800cec0:	d017      	beq.n	800cef2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 800cec2:	2c01      	cmp	r4, #1
 800cec4:	d14f      	bne.n	800cf66 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800cec6:	f240 3102 	movw	r1, #770	; 0x302
      temp_reg = RCC->BDCR;
 800ceca:	4a29      	ldr	r2, [pc, #164]	; (800cf70 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
 800cecc:	6a13      	ldr	r3, [r2, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800cece:	4019      	ands	r1, r3
 800ced0:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
 800ced4:	d044      	beq.n	800cf60 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
      {
        frequency = LSE_VALUE;
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800ced6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ceda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cede:	d12d      	bne.n	800cf3c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
      {
        frequency = LSI_VALUE;
 800cee0:	f649 4040 	movw	r0, #40000	; 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800cee4:	6a53      	ldr	r3, [r2, #36]	; 0x24
        frequency = LSI_VALUE;
 800cee6:	f013 0f02 	tst.w	r3, #2
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
      {
        frequency = HSE_VALUE / 128U;
 800ceea:	bf08      	it	eq
 800ceec:	2000      	moveq	r0, #0
    {
      break;
    }
  }
  return(frequency);
}
 800ceee:	b006      	add	sp, #24
 800cef0:	bd70      	pop	{r4, r5, r6, pc}
      temp_reg = RCC->CFGR;
 800cef2:	4b1f      	ldr	r3, [pc, #124]	; (800cf70 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
 800cef4:	6859      	ldr	r1, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLLON))
 800cef6:	6818      	ldr	r0, [r3, #0]
 800cef8:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 800cefc:	d0f7      	beq.n	800ceee <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800cefe:	f3c1 4283 	ubfx	r2, r1, #18, #4
 800cf02:	a806      	add	r0, sp, #24
 800cf04:	4402      	add	r2, r0
 800cf06:	f812 0c10 	ldrb.w	r0, [r2, #-16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800cf0a:	03ca      	lsls	r2, r1, #15
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800cf0c:	bf41      	itttt	mi
 800cf0e:	685a      	ldrmi	r2, [r3, #4]
 800cf10:	a906      	addmi	r1, sp, #24
 800cf12:	f3c2 4240 	ubfxmi	r2, r2, #17, #1
 800cf16:	1852      	addmi	r2, r2, r1
 800cf18:	bf44      	itt	mi
 800cf1a:	f812 1c14 	ldrbmi.w	r1, [r2, #-20]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800cf1e:	4a15      	ldrmi	r2, [pc, #84]	; (800cf74 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800cf20:	685b      	ldr	r3, [r3, #4]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800cf22:	bf4c      	ite	mi
 800cf24:	fbb2 f2f1 	udivmi	r2, r2, r1
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800cf28:	4a13      	ldrpl	r2, [pc, #76]	; (800cf78 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800cf2a:	025b      	lsls	r3, r3, #9
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800cf2c:	fb02 f000 	mul.w	r0, r2, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800cf30:	d4dd      	bmi.n	800ceee <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          frequency = (pllclk * 2) / 3;
 800cf32:	2303      	movs	r3, #3
 800cf34:	0040      	lsls	r0, r0, #1
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800cf36:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 800cf3a:	e7d8      	b.n	800ceee <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800cf3c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cf40:	d111      	bne.n	800cf66 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 800cf42:	6813      	ldr	r3, [r2, #0]
        frequency = HSE_VALUE / 128U;
 800cf44:	f24f 4024 	movw	r0, #62500	; 0xf424
 800cf48:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800cf4c:	e7cd      	b.n	800ceea <HAL_RCCEx_GetPeriphCLKFreq+0x56>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800cf4e:	f7fb ff73 	bl	8008e38 <HAL_RCC_GetPCLK2Freq>
 800cf52:	4b07      	ldr	r3, [pc, #28]	; (800cf70 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
 800cf54:	685b      	ldr	r3, [r3, #4]
 800cf56:	f3c3 3381 	ubfx	r3, r3, #14, #2
 800cf5a:	3301      	adds	r3, #1
 800cf5c:	005b      	lsls	r3, r3, #1
 800cf5e:	e7ea      	b.n	800cf36 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
        frequency = LSE_VALUE;
 800cf60:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800cf64:	e7c3      	b.n	800ceee <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        frequency = 0U;
 800cf66:	2000      	movs	r0, #0
 800cf68:	e7c1      	b.n	800ceee <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 800cf6a:	bf00      	nop
 800cf6c:	0800e6f4 	.word	0x0800e6f4
 800cf70:	40021000 	.word	0x40021000
 800cf74:	007a1200 	.word	0x007a1200
 800cf78:	003d0900 	.word	0x003d0900

0800cf7c <sscanf>:
 */

#include <stdio.h>

int sscanf(const char *str, const char *format, ...)
{
 800cf7c:	b40e      	push	{r1, r2, r3}
 800cf7e:	b503      	push	{r0, r1, lr}
 800cf80:	aa03      	add	r2, sp, #12
 800cf82:	f852 1b04 	ldr.w	r1, [r2], #4
	va_list ap;
	int rv;

	va_start(ap, format);
 800cf86:	9201      	str	r2, [sp, #4]
	rv = vsscanf(str, format, ap);
 800cf88:	f7ff f9b2 	bl	800c2f0 <vsscanf>
	va_end(ap);

	return rv;
}
 800cf8c:	b002      	add	sp, #8
 800cf8e:	f85d eb04 	ldr.w	lr, [sp], #4
 800cf92:	b003      	add	sp, #12
 800cf94:	4770      	bx	lr
	...

0800cf98 <strntoumax>:
		return -1;
	}
}

uintmax_t strntoumax(const char *nptr, char **endptr, int base, size_t n)
{
 800cf98:	468c      	mov	ip, r1
 800cf9a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf9e:	4e4f      	ldr	r6, [pc, #316]	; (800d0dc <strntoumax+0x144>)
 800cfa0:	4604      	mov	r4, r0
	int minus = 0;
	uintmax_t v = 0;
	int d;

	while (n && isspace((unsigned char)*nptr)) {
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	f000 8090 	beq.w	800d0c8 <strntoumax+0x130>
 800cfa8:	f810 5b01 	ldrb.w	r5, [r0], #1
 800cfac:	f1a5 0109 	sub.w	r1, r5, #9
 800cfb0:	b2c9      	uxtb	r1, r1
 800cfb2:	2917      	cmp	r1, #23
 800cfb4:	f200 8084 	bhi.w	800d0c0 <strntoumax+0x128>
 800cfb8:	fa26 f101 	lsr.w	r1, r6, r1
 800cfbc:	07cf      	lsls	r7, r1, #31
 800cfbe:	d41d      	bmi.n	800cffc <strntoumax+0x64>
	}

	/* Single optional + or - */
	if (n) {
		char c = *nptr;
		if (c == '-' || c == '+') {
 800cfc0:	2d2b      	cmp	r5, #43	; 0x2b
 800cfc2:	d11d      	bne.n	800d000 <strntoumax+0x68>
			minus = (c == '-');
 800cfc4:	f1a5 012d 	sub.w	r1, r5, #45	; 0x2d
 800cfc8:	424d      	negs	r5, r1
 800cfca:	414d      	adcs	r5, r1
			nptr++;
 800cfcc:	3401      	adds	r4, #1
			n--;
 800cfce:	3b01      	subs	r3, #1
		}
	}

	if (base == 0) {
 800cfd0:	bb0a      	cbnz	r2, 800d016 <strntoumax+0x7e>
		if (n >= 2 && nptr[0] == '0' &&
 800cfd2:	2b01      	cmp	r3, #1
 800cfd4:	d916      	bls.n	800d004 <strntoumax+0x6c>
 800cfd6:	7822      	ldrb	r2, [r4, #0]
 800cfd8:	2a30      	cmp	r2, #48	; 0x30
 800cfda:	d115      	bne.n	800d008 <strntoumax+0x70>
		    (nptr[1] == 'x' || nptr[1] == 'X')) {
 800cfdc:	7862      	ldrb	r2, [r4, #1]
 800cfde:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800cfe2:	2a58      	cmp	r2, #88	; 0x58
 800cfe4:	d110      	bne.n	800d008 <strntoumax+0x70>
			n -= 2;
			nptr += 2;
			base = 16;
 800cfe6:	2210      	movs	r2, #16
			n -= 2;
 800cfe8:	3b02      	subs	r3, #2
			nptr += 2;
 800cfea:	3402      	adds	r4, #2
 800cfec:	46a0      	mov	r8, r4
 800cfee:	4423      	add	r3, r4
			base = 16;
 800cff0:	f04f 0a00 	mov.w	sl, #0
 800cff4:	f04f 0b00 	mov.w	fp, #0
			nptr += 2;
		}
	}

	while (n && (d = digitval(*nptr)) >= 0 && d < base) {
		v = v * base + d;
 800cff8:	17d7      	asrs	r7, r2, #31
 800cffa:	e026      	b.n	800d04a <strntoumax+0xb2>
		n--;
 800cffc:	3b01      	subs	r3, #1
 800cffe:	e7cf      	b.n	800cfa0 <strntoumax+0x8>
	int minus = 0;
 800d000:	2500      	movs	r5, #0
 800d002:	e7e5      	b.n	800cfd0 <strntoumax+0x38>
		} else if (n >= 1 && nptr[0] == '0') {
 800d004:	2b00      	cmp	r3, #0
 800d006:	d04e      	beq.n	800d0a6 <strntoumax+0x10e>
 800d008:	7822      	ldrb	r2, [r4, #0]
 800d00a:	2a30      	cmp	r2, #48	; 0x30
 800d00c:	d13f      	bne.n	800d08e <strntoumax+0xf6>
			n--;
 800d00e:	3b01      	subs	r3, #1
			nptr++;
 800d010:	3401      	adds	r4, #1
			base = 8;
 800d012:	2208      	movs	r2, #8
 800d014:	e7ea      	b.n	800cfec <strntoumax+0x54>
	} else if (base == 16) {
 800d016:	2a10      	cmp	r2, #16
 800d018:	d1e8      	bne.n	800cfec <strntoumax+0x54>
		if (n >= 2 && nptr[0] == '0' &&
 800d01a:	2b01      	cmp	r3, #1
 800d01c:	d9e6      	bls.n	800cfec <strntoumax+0x54>
 800d01e:	7821      	ldrb	r1, [r4, #0]
 800d020:	2930      	cmp	r1, #48	; 0x30
 800d022:	d1e3      	bne.n	800cfec <strntoumax+0x54>
		    (nptr[1] == 'x' || nptr[1] == 'X')) {
 800d024:	7861      	ldrb	r1, [r4, #1]
 800d026:	f001 01df 	and.w	r1, r1, #223	; 0xdf
 800d02a:	2958      	cmp	r1, #88	; 0x58
 800d02c:	d1de      	bne.n	800cfec <strntoumax+0x54>
			n -= 2;
 800d02e:	3b02      	subs	r3, #2
			nptr += 2;
 800d030:	3402      	adds	r4, #2
 800d032:	e7db      	b.n	800cfec <strntoumax+0x54>
		v = v * base + d;
 800d034:	fb02 f40b 	mul.w	r4, r2, fp
 800d038:	fba2 010a 	umull	r0, r1, r2, sl
 800d03c:	fb0a 4407 	mla	r4, sl, r7, r4
 800d040:	eb10 0a0e 	adds.w	sl, r0, lr
 800d044:	4421      	add	r1, r4
 800d046:	eb41 7bee 	adc.w	fp, r1, lr, asr #31
	while (n && (d = digitval(*nptr)) >= 0 && d < base) {
 800d04a:	4598      	cmp	r8, r3
 800d04c:	4644      	mov	r4, r8
 800d04e:	d012      	beq.n	800d076 <strntoumax+0xde>
 800d050:	f818 9b01 	ldrb.w	r9, [r8], #1
	if (ch >= '0' && ch <= '9') {
 800d054:	f1a9 0e30 	sub.w	lr, r9, #48	; 0x30
 800d058:	f1be 0f09 	cmp.w	lr, #9
 800d05c:	d906      	bls.n	800d06c <strntoumax+0xd4>
	} else if (ch >= 'A' && ch <= 'Z') {
 800d05e:	f1a9 0e41 	sub.w	lr, r9, #65	; 0x41
 800d062:	f1be 0f19 	cmp.w	lr, #25
 800d066:	d816      	bhi.n	800d096 <strntoumax+0xfe>
		return ch - 'A' + 10;
 800d068:	f1a9 0e37 	sub.w	lr, r9, #55	; 0x37
	while (n && (d = digitval(*nptr)) >= 0 && d < base) {
 800d06c:	f1be 0f00 	cmp.w	lr, #0
 800d070:	db01      	blt.n	800d076 <strntoumax+0xde>
 800d072:	4572      	cmp	r2, lr
 800d074:	dcde      	bgt.n	800d034 <strntoumax+0x9c>
		n--;
		nptr++;
	}

	if (endptr)
 800d076:	f1bc 0f00 	cmp.w	ip, #0
 800d07a:	d11e      	bne.n	800d0ba <strntoumax+0x122>
		*endptr = (char *)nptr;

	return minus ? -v : v;
 800d07c:	b11d      	cbz	r5, 800d086 <strntoumax+0xee>
 800d07e:	f1da 0a00 	rsbs	sl, sl, #0
 800d082:	eb6b 0b4b 	sbc.w	fp, fp, fp, lsl #1
}
 800d086:	4650      	mov	r0, sl
 800d088:	4659      	mov	r1, fp
 800d08a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			base = 10;
 800d08e:	220a      	movs	r2, #10
 800d090:	e7ac      	b.n	800cfec <strntoumax+0x54>
	int minus = 0;
 800d092:	461d      	mov	r5, r3
 800d094:	e7aa      	b.n	800cfec <strntoumax+0x54>
	} else if (ch >= 'a' && ch <= 'z') {
 800d096:	f1a9 0e61 	sub.w	lr, r9, #97	; 0x61
 800d09a:	f1be 0f19 	cmp.w	lr, #25
 800d09e:	d8ea      	bhi.n	800d076 <strntoumax+0xde>
		return ch - 'a' + 10;
 800d0a0:	f1a9 0e57 	sub.w	lr, r9, #87	; 0x57
 800d0a4:	e7e2      	b.n	800d06c <strntoumax+0xd4>
 800d0a6:	f04f 0a00 	mov.w	sl, #0
 800d0aa:	f04f 0b00 	mov.w	fp, #0
 800d0ae:	e7e2      	b.n	800d076 <strntoumax+0xde>
	int minus = 0;
 800d0b0:	4615      	mov	r5, r2
	if (endptr)
 800d0b2:	f04f 0a00 	mov.w	sl, #0
 800d0b6:	f04f 0b00 	mov.w	fp, #0
		*endptr = (char *)nptr;
 800d0ba:	f8cc 4000 	str.w	r4, [ip]
 800d0be:	e7dd      	b.n	800d07c <strntoumax+0xe4>
		if (c == '-' || c == '+') {
 800d0c0:	2d2d      	cmp	r5, #45	; 0x2d
 800d0c2:	f43f af7f 	beq.w	800cfc4 <strntoumax+0x2c>
 800d0c6:	e77b      	b.n	800cfc0 <strntoumax+0x28>
	if (base == 0) {
 800d0c8:	2a00      	cmp	r2, #0
 800d0ca:	d1e2      	bne.n	800d092 <strntoumax+0xfa>
	if (endptr)
 800d0cc:	f1bc 0f00 	cmp.w	ip, #0
 800d0d0:	d1ee      	bne.n	800d0b0 <strntoumax+0x118>
 800d0d2:	f04f 0a00 	mov.w	sl, #0
 800d0d6:	f04f 0b00 	mov.w	fp, #0
 800d0da:	e7d4      	b.n	800d086 <strntoumax+0xee>
 800d0dc:	00800013 	.word	0x00800013

0800d0e0 <vsprintf>:
#include <unistd.h>
#include <stdint.h>

int vsprintf(char *buffer, const char *format, va_list ap)
{
	return vsnprintf(buffer, SIZE_MAX/2, format, ap);
 800d0e0:	4613      	mov	r3, r2
 800d0e2:	460a      	mov	r2, r1
 800d0e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d0e8:	f7f8 bbc4 	b.w	8005874 <vsnprintf>

0800d0ec <__aeabi_d2f>:
 800d0ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800d0f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800d0f4:	bf24      	itt	cs
 800d0f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800d0fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800d0fe:	d90d      	bls.n	800d11c <__aeabi_d2f+0x30>
 800d100:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800d104:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800d108:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800d10c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800d110:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800d114:	bf08      	it	eq
 800d116:	f020 0001 	biceq.w	r0, r0, #1
 800d11a:	4770      	bx	lr
 800d11c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800d120:	d121      	bne.n	800d166 <__aeabi_d2f+0x7a>
 800d122:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800d126:	bfbc      	itt	lt
 800d128:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800d12c:	4770      	bxlt	lr
 800d12e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800d132:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800d136:	f1c2 0218 	rsb	r2, r2, #24
 800d13a:	f1c2 0c20 	rsb	ip, r2, #32
 800d13e:	fa10 f30c 	lsls.w	r3, r0, ip
 800d142:	fa20 f002 	lsr.w	r0, r0, r2
 800d146:	bf18      	it	ne
 800d148:	f040 0001 	orrne.w	r0, r0, #1
 800d14c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800d150:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800d154:	fa03 fc0c 	lsl.w	ip, r3, ip
 800d158:	ea40 000c 	orr.w	r0, r0, ip
 800d15c:	fa23 f302 	lsr.w	r3, r3, r2
 800d160:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d164:	e7cc      	b.n	800d100 <__aeabi_d2f+0x14>
 800d166:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800d16a:	d107      	bne.n	800d17c <__aeabi_d2f+0x90>
 800d16c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800d170:	bf1e      	ittt	ne
 800d172:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800d176:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800d17a:	4770      	bxne	lr
 800d17c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800d180:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800d184:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800d188:	4770      	bx	lr
 800d18a:	bf00      	nop

0800d18c <__aeabi_uldivmod>:
 800d18c:	b953      	cbnz	r3, 800d1a4 <__aeabi_uldivmod+0x18>
 800d18e:	b94a      	cbnz	r2, 800d1a4 <__aeabi_uldivmod+0x18>
 800d190:	2900      	cmp	r1, #0
 800d192:	bf08      	it	eq
 800d194:	2800      	cmpeq	r0, #0
 800d196:	bf1c      	itt	ne
 800d198:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800d19c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800d1a0:	f000 b974 	b.w	800d48c <__aeabi_idiv0>
 800d1a4:	f1ad 0c08 	sub.w	ip, sp, #8
 800d1a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800d1ac:	f000 f806 	bl	800d1bc <__udivmoddi4>
 800d1b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 800d1b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d1b8:	b004      	add	sp, #16
 800d1ba:	4770      	bx	lr

0800d1bc <__udivmoddi4>:
 800d1bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d1c0:	468c      	mov	ip, r1
 800d1c2:	4604      	mov	r4, r0
 800d1c4:	9e08      	ldr	r6, [sp, #32]
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d14b      	bne.n	800d262 <__udivmoddi4+0xa6>
 800d1ca:	428a      	cmp	r2, r1
 800d1cc:	4615      	mov	r5, r2
 800d1ce:	d967      	bls.n	800d2a0 <__udivmoddi4+0xe4>
 800d1d0:	fab2 f282 	clz	r2, r2
 800d1d4:	b14a      	cbz	r2, 800d1ea <__udivmoddi4+0x2e>
 800d1d6:	f1c2 0720 	rsb	r7, r2, #32
 800d1da:	fa01 f302 	lsl.w	r3, r1, r2
 800d1de:	fa20 f707 	lsr.w	r7, r0, r7
 800d1e2:	4095      	lsls	r5, r2
 800d1e4:	ea47 0c03 	orr.w	ip, r7, r3
 800d1e8:	4094      	lsls	r4, r2
 800d1ea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800d1ee:	fbbc f7fe 	udiv	r7, ip, lr
 800d1f2:	fa1f f885 	uxth.w	r8, r5
 800d1f6:	fb0e c317 	mls	r3, lr, r7, ip
 800d1fa:	fb07 f908 	mul.w	r9, r7, r8
 800d1fe:	0c21      	lsrs	r1, r4, #16
 800d200:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800d204:	4599      	cmp	r9, r3
 800d206:	d909      	bls.n	800d21c <__udivmoddi4+0x60>
 800d208:	18eb      	adds	r3, r5, r3
 800d20a:	f107 31ff 	add.w	r1, r7, #4294967295	; 0xffffffff
 800d20e:	f080 811c 	bcs.w	800d44a <__udivmoddi4+0x28e>
 800d212:	4599      	cmp	r9, r3
 800d214:	f240 8119 	bls.w	800d44a <__udivmoddi4+0x28e>
 800d218:	3f02      	subs	r7, #2
 800d21a:	442b      	add	r3, r5
 800d21c:	eba3 0309 	sub.w	r3, r3, r9
 800d220:	fbb3 f0fe 	udiv	r0, r3, lr
 800d224:	fb0e 3310 	mls	r3, lr, r0, r3
 800d228:	fb00 f108 	mul.w	r1, r0, r8
 800d22c:	b2a4      	uxth	r4, r4
 800d22e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800d232:	42a1      	cmp	r1, r4
 800d234:	d909      	bls.n	800d24a <__udivmoddi4+0x8e>
 800d236:	192c      	adds	r4, r5, r4
 800d238:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800d23c:	f080 8107 	bcs.w	800d44e <__udivmoddi4+0x292>
 800d240:	42a1      	cmp	r1, r4
 800d242:	f240 8104 	bls.w	800d44e <__udivmoddi4+0x292>
 800d246:	3802      	subs	r0, #2
 800d248:	442c      	add	r4, r5
 800d24a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800d24e:	2700      	movs	r7, #0
 800d250:	1a64      	subs	r4, r4, r1
 800d252:	b11e      	cbz	r6, 800d25c <__udivmoddi4+0xa0>
 800d254:	2300      	movs	r3, #0
 800d256:	40d4      	lsrs	r4, r2
 800d258:	e9c6 4300 	strd	r4, r3, [r6]
 800d25c:	4639      	mov	r1, r7
 800d25e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d262:	428b      	cmp	r3, r1
 800d264:	d909      	bls.n	800d27a <__udivmoddi4+0xbe>
 800d266:	2e00      	cmp	r6, #0
 800d268:	f000 80ec 	beq.w	800d444 <__udivmoddi4+0x288>
 800d26c:	2700      	movs	r7, #0
 800d26e:	e9c6 0100 	strd	r0, r1, [r6]
 800d272:	4638      	mov	r0, r7
 800d274:	4639      	mov	r1, r7
 800d276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d27a:	fab3 f783 	clz	r7, r3
 800d27e:	2f00      	cmp	r7, #0
 800d280:	d148      	bne.n	800d314 <__udivmoddi4+0x158>
 800d282:	428b      	cmp	r3, r1
 800d284:	d302      	bcc.n	800d28c <__udivmoddi4+0xd0>
 800d286:	4282      	cmp	r2, r0
 800d288:	f200 80fb 	bhi.w	800d482 <__udivmoddi4+0x2c6>
 800d28c:	1a84      	subs	r4, r0, r2
 800d28e:	eb61 0303 	sbc.w	r3, r1, r3
 800d292:	2001      	movs	r0, #1
 800d294:	469c      	mov	ip, r3
 800d296:	2e00      	cmp	r6, #0
 800d298:	d0e0      	beq.n	800d25c <__udivmoddi4+0xa0>
 800d29a:	e9c6 4c00 	strd	r4, ip, [r6]
 800d29e:	e7dd      	b.n	800d25c <__udivmoddi4+0xa0>
 800d2a0:	b902      	cbnz	r2, 800d2a4 <__udivmoddi4+0xe8>
 800d2a2:	deff      	udf	#255	; 0xff
 800d2a4:	fab2 f282 	clz	r2, r2
 800d2a8:	2a00      	cmp	r2, #0
 800d2aa:	f040 808f 	bne.w	800d3cc <__udivmoddi4+0x210>
 800d2ae:	2701      	movs	r7, #1
 800d2b0:	1b49      	subs	r1, r1, r5
 800d2b2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800d2b6:	fa1f f985 	uxth.w	r9, r5
 800d2ba:	fbb1 fef8 	udiv	lr, r1, r8
 800d2be:	fb08 111e 	mls	r1, r8, lr, r1
 800d2c2:	fb09 f00e 	mul.w	r0, r9, lr
 800d2c6:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800d2ca:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 800d2ce:	4298      	cmp	r0, r3
 800d2d0:	d907      	bls.n	800d2e2 <__udivmoddi4+0x126>
 800d2d2:	18eb      	adds	r3, r5, r3
 800d2d4:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 800d2d8:	d202      	bcs.n	800d2e0 <__udivmoddi4+0x124>
 800d2da:	4298      	cmp	r0, r3
 800d2dc:	f200 80cd 	bhi.w	800d47a <__udivmoddi4+0x2be>
 800d2e0:	468e      	mov	lr, r1
 800d2e2:	1a1b      	subs	r3, r3, r0
 800d2e4:	fbb3 f0f8 	udiv	r0, r3, r8
 800d2e8:	fb08 3310 	mls	r3, r8, r0, r3
 800d2ec:	fb09 f900 	mul.w	r9, r9, r0
 800d2f0:	b2a4      	uxth	r4, r4
 800d2f2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800d2f6:	45a1      	cmp	r9, r4
 800d2f8:	d907      	bls.n	800d30a <__udivmoddi4+0x14e>
 800d2fa:	192c      	adds	r4, r5, r4
 800d2fc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800d300:	d202      	bcs.n	800d308 <__udivmoddi4+0x14c>
 800d302:	45a1      	cmp	r9, r4
 800d304:	f200 80b6 	bhi.w	800d474 <__udivmoddi4+0x2b8>
 800d308:	4618      	mov	r0, r3
 800d30a:	eba4 0409 	sub.w	r4, r4, r9
 800d30e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 800d312:	e79e      	b.n	800d252 <__udivmoddi4+0x96>
 800d314:	f1c7 0520 	rsb	r5, r7, #32
 800d318:	40bb      	lsls	r3, r7
 800d31a:	fa22 fc05 	lsr.w	ip, r2, r5
 800d31e:	ea4c 0c03 	orr.w	ip, ip, r3
 800d322:	fa21 f405 	lsr.w	r4, r1, r5
 800d326:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800d32a:	fbb4 f9fe 	udiv	r9, r4, lr
 800d32e:	fa1f f88c 	uxth.w	r8, ip
 800d332:	fb0e 4419 	mls	r4, lr, r9, r4
 800d336:	fa20 f305 	lsr.w	r3, r0, r5
 800d33a:	40b9      	lsls	r1, r7
 800d33c:	fb09 fa08 	mul.w	sl, r9, r8
 800d340:	4319      	orrs	r1, r3
 800d342:	0c0b      	lsrs	r3, r1, #16
 800d344:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800d348:	45a2      	cmp	sl, r4
 800d34a:	fa02 f207 	lsl.w	r2, r2, r7
 800d34e:	fa00 f307 	lsl.w	r3, r0, r7
 800d352:	d90b      	bls.n	800d36c <__udivmoddi4+0x1b0>
 800d354:	eb1c 0404 	adds.w	r4, ip, r4
 800d358:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800d35c:	f080 8088 	bcs.w	800d470 <__udivmoddi4+0x2b4>
 800d360:	45a2      	cmp	sl, r4
 800d362:	f240 8085 	bls.w	800d470 <__udivmoddi4+0x2b4>
 800d366:	f1a9 0902 	sub.w	r9, r9, #2
 800d36a:	4464      	add	r4, ip
 800d36c:	eba4 040a 	sub.w	r4, r4, sl
 800d370:	fbb4 f0fe 	udiv	r0, r4, lr
 800d374:	fb0e 4410 	mls	r4, lr, r0, r4
 800d378:	fb00 fa08 	mul.w	sl, r0, r8
 800d37c:	b289      	uxth	r1, r1
 800d37e:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 800d382:	45a2      	cmp	sl, r4
 800d384:	d908      	bls.n	800d398 <__udivmoddi4+0x1dc>
 800d386:	eb1c 0404 	adds.w	r4, ip, r4
 800d38a:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800d38e:	d26b      	bcs.n	800d468 <__udivmoddi4+0x2ac>
 800d390:	45a2      	cmp	sl, r4
 800d392:	d969      	bls.n	800d468 <__udivmoddi4+0x2ac>
 800d394:	3802      	subs	r0, #2
 800d396:	4464      	add	r4, ip
 800d398:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800d39c:	fba0 8902 	umull	r8, r9, r0, r2
 800d3a0:	eba4 040a 	sub.w	r4, r4, sl
 800d3a4:	454c      	cmp	r4, r9
 800d3a6:	4641      	mov	r1, r8
 800d3a8:	46ce      	mov	lr, r9
 800d3aa:	d354      	bcc.n	800d456 <__udivmoddi4+0x29a>
 800d3ac:	d051      	beq.n	800d452 <__udivmoddi4+0x296>
 800d3ae:	2e00      	cmp	r6, #0
 800d3b0:	d069      	beq.n	800d486 <__udivmoddi4+0x2ca>
 800d3b2:	1a5a      	subs	r2, r3, r1
 800d3b4:	eb64 040e 	sbc.w	r4, r4, lr
 800d3b8:	fa04 f505 	lsl.w	r5, r4, r5
 800d3bc:	fa22 f307 	lsr.w	r3, r2, r7
 800d3c0:	40fc      	lsrs	r4, r7
 800d3c2:	431d      	orrs	r5, r3
 800d3c4:	e9c6 5400 	strd	r5, r4, [r6]
 800d3c8:	2700      	movs	r7, #0
 800d3ca:	e747      	b.n	800d25c <__udivmoddi4+0xa0>
 800d3cc:	4095      	lsls	r5, r2
 800d3ce:	f1c2 0320 	rsb	r3, r2, #32
 800d3d2:	fa21 f003 	lsr.w	r0, r1, r3
 800d3d6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800d3da:	fbb0 f7f8 	udiv	r7, r0, r8
 800d3de:	fa1f f985 	uxth.w	r9, r5
 800d3e2:	fb08 0017 	mls	r0, r8, r7, r0
 800d3e6:	fa24 f303 	lsr.w	r3, r4, r3
 800d3ea:	4091      	lsls	r1, r2
 800d3ec:	fb07 fc09 	mul.w	ip, r7, r9
 800d3f0:	430b      	orrs	r3, r1
 800d3f2:	0c19      	lsrs	r1, r3, #16
 800d3f4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d3f8:	458c      	cmp	ip, r1
 800d3fa:	fa04 f402 	lsl.w	r4, r4, r2
 800d3fe:	d907      	bls.n	800d410 <__udivmoddi4+0x254>
 800d400:	1869      	adds	r1, r5, r1
 800d402:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800d406:	d231      	bcs.n	800d46c <__udivmoddi4+0x2b0>
 800d408:	458c      	cmp	ip, r1
 800d40a:	d92f      	bls.n	800d46c <__udivmoddi4+0x2b0>
 800d40c:	3f02      	subs	r7, #2
 800d40e:	4429      	add	r1, r5
 800d410:	eba1 010c 	sub.w	r1, r1, ip
 800d414:	fbb1 f0f8 	udiv	r0, r1, r8
 800d418:	fb08 1c10 	mls	ip, r8, r0, r1
 800d41c:	fb00 fe09 	mul.w	lr, r0, r9
 800d420:	b299      	uxth	r1, r3
 800d422:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800d426:	458e      	cmp	lr, r1
 800d428:	d907      	bls.n	800d43a <__udivmoddi4+0x27e>
 800d42a:	1869      	adds	r1, r5, r1
 800d42c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800d430:	d218      	bcs.n	800d464 <__udivmoddi4+0x2a8>
 800d432:	458e      	cmp	lr, r1
 800d434:	d916      	bls.n	800d464 <__udivmoddi4+0x2a8>
 800d436:	3802      	subs	r0, #2
 800d438:	4429      	add	r1, r5
 800d43a:	eba1 010e 	sub.w	r1, r1, lr
 800d43e:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800d442:	e73a      	b.n	800d2ba <__udivmoddi4+0xfe>
 800d444:	4637      	mov	r7, r6
 800d446:	4630      	mov	r0, r6
 800d448:	e708      	b.n	800d25c <__udivmoddi4+0xa0>
 800d44a:	460f      	mov	r7, r1
 800d44c:	e6e6      	b.n	800d21c <__udivmoddi4+0x60>
 800d44e:	4618      	mov	r0, r3
 800d450:	e6fb      	b.n	800d24a <__udivmoddi4+0x8e>
 800d452:	4543      	cmp	r3, r8
 800d454:	d2ab      	bcs.n	800d3ae <__udivmoddi4+0x1f2>
 800d456:	ebb8 0102 	subs.w	r1, r8, r2
 800d45a:	eb69 020c 	sbc.w	r2, r9, ip
 800d45e:	3801      	subs	r0, #1
 800d460:	4696      	mov	lr, r2
 800d462:	e7a4      	b.n	800d3ae <__udivmoddi4+0x1f2>
 800d464:	4618      	mov	r0, r3
 800d466:	e7e8      	b.n	800d43a <__udivmoddi4+0x27e>
 800d468:	4608      	mov	r0, r1
 800d46a:	e795      	b.n	800d398 <__udivmoddi4+0x1dc>
 800d46c:	4607      	mov	r7, r0
 800d46e:	e7cf      	b.n	800d410 <__udivmoddi4+0x254>
 800d470:	4681      	mov	r9, r0
 800d472:	e77b      	b.n	800d36c <__udivmoddi4+0x1b0>
 800d474:	3802      	subs	r0, #2
 800d476:	442c      	add	r4, r5
 800d478:	e747      	b.n	800d30a <__udivmoddi4+0x14e>
 800d47a:	f1ae 0e02 	sub.w	lr, lr, #2
 800d47e:	442b      	add	r3, r5
 800d480:	e72f      	b.n	800d2e2 <__udivmoddi4+0x126>
 800d482:	4638      	mov	r0, r7
 800d484:	e707      	b.n	800d296 <__udivmoddi4+0xda>
 800d486:	4637      	mov	r7, r6
 800d488:	e6e8      	b.n	800d25c <__udivmoddi4+0xa0>
 800d48a:	bf00      	nop

0800d48c <__aeabi_idiv0>:
 800d48c:	4770      	bx	lr
 800d48e:	bf00      	nop

0800d490 <AHBPrescTable>:
	...
 800d498:	0201 0403 0706 0908                         ........

0800d4a0 <APBPrescTable>:
 800d4a0:	0000 0000 0201 0403 7361 6573 7472 6f69     ........assertio
 800d4b0:	206e 6166 6c69 6465 203a 494c 5453 4e45     n failed: LISTEN
 800d4c0:	5245 495f 544e 5245 414e 2e4c 6c73 735f     ER_INTERNAL.sl_s
 800d4d0:	6e65 6f73 5f72 7974 6570 3d20 203d 7330     ensor_type == 0s
 800d4e0:	6372 6d2f 6e79 7765 2f74 6573 736e 726f     rc/mynewt/sensor
 800d4f0:	722e 0073 d4a8 0800 0037 0000 d4df 0800     .rs.....7.......
 800d500:	0014 0000 000f 0000 000e 0000 4d54 2050     ............TMP 
 800d510:	6f70 6c6c 0a20 6574 706d 735f 6d74 3233     poll .temp_stm32
 800d520:	305f 0000 0000 0000 7361 6573 7472 6f69     _0......assertio
 800d530:	206e 6166 6c69 6465 203a 2860 656c 7466     n failed: `(left
 800d540:	3d20 203d 6972 6867 2974 0a60 2020 656c      == right)`.  le
 800d550:	7466 203a 6060 0a2c 7220 6769 7468 203a     ft: ``,. right: 
 800d560:	6060 0000 d528 0800 002d 0000 d555 0800     ``..(...-...U...
 800d570:	000c 0000 d561 0800 0001 0000 7273 2f63     ....a.......src/
 800d580:	696c 7473 6e65 735f 6e65 6f73 2e72 7372     listen_sensor.rs
 800d590:	d57c 0800 0014 0000 0023 0000 0005 0000     |.......#.......
 800d5a0:	7361 6573 7472 6f69 206e 6166 6c69 6465     assertion failed
 800d5b0:	203a 6e75 6173 6566 7b20 2120 7369 6e5f     : unsafe { !is_n
 800d5c0:	6c75 5f6c 6573 736e 726f 6c28 7369 6574     ull_sensor(liste
 800d5d0:	5f6e 6573 736e 726f 2029 007d d5a0 0800     n_sensor) }.....
 800d5e0:	003b 0000 d57c 0800 0014 0000 0027 0000     ;...|.......'...
 800d5f0:	0005 0000 6572 6461 745f 6d65 6570 6172     ....read_tempera
 800d600:	7574 6572 610a 7373 7265 6974 6e6f 6620     ture.assertion f
 800d610:	6961 656c 3a64 7520 736e 6661 2065 207b     ailed: unsafe { 
 800d620:	6921 5f73 756e 6c6c 735f 6e65 6f73 2872     !is_null_sensor(
 800d630:	6573 736e 726f 2029 007d 0000 d605 0800     sensor) }.......
 800d640:	0034 0000 d57c 0800 0014 0000 004a 0000     4...|.......J...
 800d650:	0005 0000 7361 6573 7472 6f69 206e 6166     ....assertion fa
 800d660:	6c69 6465 203a 6166 736c 0065 d654 0800     iled: false.T...
 800d670:	0017 0000 d57c 0800 0014 0000 0055 0000     ....|.......U...
 800d680:	003c 0000 4d54 2050 656e 7774 726f 206b     <...TMP network 
 800d690:	6f6e 2074 6572 6461 0a79 7361 6573 7472     not ready.assert
 800d6a0:	6f69 206e 6166 6c69 6465 203a 6372 3d20     ion failed: rc =
 800d6b0:	203d 0030 d69a 0800 0019 0000 d57c 0800     = 0.........|...
 800d6c0:	0014 0000 0089 0000 000d 0000 d69a 0800     ................
 800d6d0:	0019 0000 d57c 0800 0014 0000 0079 0000     ....|.......y...
 800d6e0:	000d 0000 4d54 2050 696c 7473 6e65 7265     ....TMP listener
 800d6f0:	6720 746f 7220 7761 6d74 2070 740a 454e      got rawtmp .tNE
 800d700:	2054 7473 7261 0a74 656e 7774 726f 006b     T start.network.
 800d710:	6c20 6e69 2065 7830 7273 2f63 6573 646e      line 0xsrc/send
 800d720:	635f 616f 2e70 7372 d718 0800 0010 0000     _coap.rs........
 800d730:	002e 0000 0005 0000 7361 6573 7472 6f69     ........assertio
 800d740:	206e 6166 6c69 6465 203a 6e75 6173 6566     n failed: unsafe
 800d750:	7b20 2120 454e 5754 524f 5f4b 5349 525f      { !NETWORK_IS_R
 800d760:	4145 5944 7d20 0000 d738 0800 002e 0000     EADY }..8.......
 800d770:	d718 0800 0010 0000 003a 0000 0022 0000     ........:..."...
 800d780:	d718 0800 0010 0000 003f 0000 0035 0000     ........?...5...
 800d790:	d718 0800 0010 0000 0044 0000 0038 0000     ........D...8...
 800d7a0:	454e 2054 7266 6565 6d20 7562 2066 6425     NET free mbuf %d
 800d7b0:	730a 6e65 5f64 6573 736e 726f 645f 7461     .send_sensor_dat
 800d7c0:	0a61                                         a..

0800d7c3 <str.2>:
 800d7c3:	7273 2f63 6573 646e 635f 616f 2e70 7372     src/send_coap.rs
 800d7d3:	c300 00d7 1008 0000 8100 0000 1000 0000     ................
 800d7e3:	6100 7373 7265 6974 6e6f 6620 6961 656c     .assertion faile
 800d7f3:	3a64 6020 6c28 6665 2074 3d21 7220 6769     d: `(left != rig
 800d803:	7468 6029 200a 6c20 6665 3a74 6020 0000     ht)`.  left: `..
 800d813:	e400 00d7 2d08 0000 5500 00d5 0c08 0000     .....-...U......
 800d823:	6100 00d5 0108 0000 1800 00d7 1008 0000     .a..............
 800d833:	8100 0000 0500 0000 1800 00d7 1008 0000     ................
 800d843:	8300 0000 2f00 0000 6100 7373 7265 6974     ...../...asserti
 800d853:	6e6f 6620 6961 656c 3a64 7220 4c63 00d8     on failed: rcL..
 800d863:	1408 0000 1800 00d7 1008 0000 8800 0000     ................
 800d873:	4400 0000 4c00 00d8 1408 0000 1800 00d7     .D...L..........
 800d883:	1008 0000 9b00 0000 2c00 0000 4e00 5445     .........,...NET
 800d893:	7620 6569 2077 6f79 7275 7320 6e65 6f73      view your senso
 800d8a3:	2072 7461 0a20 7468 7074 3a73 2f2f 6c62     r at .https://bl
 800d8b3:	6575 702d 6c69 2d6c 6567 6c6f 636f 7461     ue-pill-geolocat
 800d8c3:	2e65 7061 7370 6f70 2e74 6f63 3f6d 6564     e.appspot.com?de
 800d8d3:	6976 6563 253d 0a73 4c00 00d8 1408 0000     vice=%s..L......
 800d8e3:	1800 00d7 1008 0000 b800 0000 3100 0000     .............1..
 800d8f3:	4c00 00d8 1408 0000 1800 00d7 1008 0000     .L..............
 800d903:	c300 0000 2f00 0000 4e00 4652 7320 6e65     ...../...NRF sen
 800d913:	2064 6f74 6320 6c6f 656c 7463 726f 203a     d to collector: 
 800d923:	6172 7477 706d 2520 0a64 6170 696e 2063     rawtmp %d.panic 
 800d933:	6e75 6e6b 776f 206e 6f6c 0a63 6170 696e     unknown loc.pani
 800d943:	2063 7461 0a20 0000 0000 0000 7300 6372     c at ........src
 800d953:	6c2f 6269 6f63 6572 6e2f 6d75 642f 6365     /libcore/num/dec
 800d963:	6632 746c 722f 7761 7066 722e 6973 646e     2flt/rawfp.rsind
 800d973:	7865 6f20 7475 6f20 2066 6f62 6e75 7364     ex out of bounds
 800d983:	203a 6874 2065 656c 206e 7369 0020 003e     : the len is .>.
 800d993:	0100 0000 0000 0000 0000 0000 2000 0000     ............. ..
 800d9a3:	0000 0000 0000 00c0 0000 0003 fb00 0018     ................
 800d9b3:	0008 0000 0100 0000 fd00 0018 2008 7562     ............. bu
 800d9c3:	2074 6874 2065 6e69 6564 2078 7369 0020     t the index is .
 800d9d3:	7000 00d9 2008 0000 c000 00d9 1208 0000     .p... ..........
 800d9e3:	7300 6372 6c2f 6269 6f63 6572 732f 696c     .src/libcore/sli
 800d9f3:	6563 6d2f 646f 722e 6973 646e 7865 2020     ce/mod.rsindex  
 800da03:	756f 2074 666f 7220 6e61 6567 6620 726f     out of range for
 800da13:	7320 696c 6563 6f20 2066 656c 676e 6874      slice of length
 800da23:	fc20 00d9 0608 0000 0200 00da 2208 0000      ............"..
 800da33:	e400 00d9 1808 0000 0900 000a 0500 0000     ................
 800da43:	7300 696c 6563 6920 646e 7865 7320 6174     .slice index sta
 800da53:	7472 2073 7461 2020 7562 2074 6e65 7364     rts at  but ends
 800da63:	6120 2074 4400 00da 1608 0000 5a00 00da      at .D.......Z..
 800da73:	0d08 0000 e400 00d9 1808 0000 0f00 000a     ................
 800da83:	0500 0000 3000 3078 3030 3031 3032 3033     .....0x000102030
 800da93:	3034 3035 3036 3037 3038 3139 3130 3131     4050607080910111
 800daa3:	3132 3133 3134 3135 3136 3137 3138 3239     2131415161718192
 800dab3:	3230 3231 3232 3233 3234 3235 3236 3237     0212223242526272
 800dac3:	3238 3339 3330 3331 3332 3333 3334 3335     8293031323334353
 800dad3:	3336 3337 3338 3439 3430 3431 3432 3433     6373839404142434
 800dae3:	3434 3435 3436 3437 3438 3539 3530 3531     4454647484950515
 800daf3:	3532 3533 3534 3535 3536 3537 3538 3639     2535455565758596
 800db03:	3630 3631 3632 3633 3634 3635 3636 3637     0616263646566676
 800db13:	3638 3739 3730 3731 3732 3733 3734 3735     8697071727374757
 800db23:	3736 3737 3738 3839 3830 3831 3832 3833     6777879808182838
 800db33:	3834 3835 3836 3837 3838 3939 3930 3931     4858687888990919
 800db43:	3932 3933 3934 3935 3936 3937 3938 2539     293949596979899%
 800db53:	3630 756c 0020                              06lu .

0800db59 <COAP_HOST>:
 800db59:	6f63 7061 742e 6568 6874 6e69 7367 692e     coap.thethings.i
 800db69:	006f                                        o.

0800db6b <COAP_URI>:
 800db6b:	3276 742f 6968 676e 2f73 5649 6952 4342     v2/things/IVRiBC
 800db7b:	5263 4836 7050 435f 5a63 4649 4f66 465a     cR6HPp_CcZIFfOZF
 800db8b:	7a78 695f 6e7a 3569 6378 4b5f 2d4f 676b     xz_izni5xc_KO-kg
 800db9b:	4153 5932 0038                              SA2Y8.

0800dba1 <COLLECTOR_NODE_HW_ID>:
 800dba1:	ff57 066a 7878 5054 2949 6724               W.j.xxTPI)$g

0800dbad <SENSOR_NODE_HW_IDS>:
 800dbad:	ff38 066d 574e 3634 5825 4308 0201 0403     8.m.NW46%X.C....
 800dbbd:	0605 0807 0a09 020b 0201 0403 0605 0807     ................
 800dbcd:	0a09 030b 0201 0403 0605 0807 0a09 040b     ................
 800dbdd:	0201 0403 0605 0807 0a09 050b 3025 7832     ............%02x
 800dbed:	2500 7273 6e61 6f64 206d 6564 6976 6563     .%srandom device
 800dbfd:	6920 2064 7325 000a 7325 7768 6469 0020      id %s..%shwid .
 800dc0d:	0000                                         ...

0800dc10 <sensor_network_encoding>:
 800dc10:	0032 0000 003c 0000 3025 3031 6c6c 0078     2...<...%010llx.
 800dc20:	6e20 646f 2065 2500 7373 6e65 6f73 2572      node .%ssensor%
 800dc30:	2373 6425 000a 7325 6f63 6c6c 6365 6f74     s#%d..%scollecto
 800dc40:	2572 0a73 2500 7373 6174 646e 6c61 6e6f     r%s..%sstandalon
 800dc50:	2565 0a73 4e00 5445 0020 7325 7325 2520     e%s..NET .%s%s %
 800dc60:	0a73 0000                                   s...

0800dc64 <sensor_network_shortname>:
 800dc64:	dc98 0800 dc9c 0800 0000 0000               ............

0800dc70 <sensor_node_addresses>:
 800dc70:	b6f1 b4b5 00b3 0000 b6cd b4b5 00b3 0000     ................
 800dc80:	b6a3 b4b5 00b3 0000 b60f b4b5 00b3 0000     ................
 800dc90:	b605 b4b5 00b3 0000 7673 0072 6f63 006c     ........svr.col.
 800dca0:	636f 725f 7065 6f5f 7300 6e65 6f73 5f72     oc_rep_o.sensor_
 800dcb0:	6f6e 6974 5f66 7665 7374 4100 7373 7265     notif_evts.Asser
 800dcc0:	2074 2040 7830 7825 000a 7341 6573 7472     t @ 0x%x..Assert
 800dcd0:	4020 3020 2578 2078 202d 7325 253a 0a64      @ 0x%x - %s:%d.
 800dce0:	5500 686e 6e61 6c64 6465 6920 746e 7265     .Unhandled inter
 800dcf0:	7572 7470 2820 6c25 2964 202c 7865 6563     rupt (%ld), exce
 800dd00:	7470 6f69 206e 7073 3020 2578 3830 786c     ption sp 0x%08lx
 800dd10:	000a 7220 3a30 7830 3025 6c38 2078 7220     .. r0:0x%08lx  r
 800dd20:	3a31 7830 3025 6c38 2078 7220 3a32 7830     1:0x%08lx  r2:0x
 800dd30:	3025 6c38 2078 7220 3a33 7830 3025 6c38     %08lx  r3:0x%08l
 800dd40:	0a78 2000 3472 303a 2578 3830 786c 2020     x.. r4:0x%08lx  
 800dd50:	3572 303a 2578 3830 786c 2020 3672 303a     r5:0x%08lx  r6:0
 800dd60:	2578 3830 786c 2020 3772 303a 2578 3830     x%08lx  r7:0x%08
 800dd70:	786c 000a 7220 3a38 7830 3025 6c38 2078     lx.. r8:0x%08lx 
 800dd80:	7220 3a39 7830 3025 6c38 2078 3172 3a30      r9:0x%08lx r10:
 800dd90:	7830 3025 6c38 2078 3172 3a31 7830 3025     0x%08lx r11:0x%0
 800dda0:	6c38 0a78 7200 3231 303a 2578 3830 786c     8lx..r12:0x%08lx
 800ddb0:	2020 726c 303a 2578 3830 786c 2020 6370       lr:0x%08lx  pc
 800ddc0:	303a 2578 3830 786c 7020 7273 303a 2578     :0x%08lx psr:0x%
 800ddd0:	3830 786c 000a 4349 5253 303a 2578 3830     08lx..ICSR:0x%08
 800dde0:	786c 4820 5346 3a52 7830 3025 6c38 2078     lx HFSR:0x%08lx 
 800ddf0:	4643 5253 303a 2578 3830 786c 000a 4642     CFSR:0x%08lx..BF
 800de00:	5241 303a 2578 3830 786c 4d20 464d 5241     AR:0x%08lx MMFAR
 800de10:	303a 2578 3830 786c 000a 616d 6e69 6900     :0x%08lx..main.i
 800de20:	6c64 0065 736d 7379 315f 0000               dle.msys_1..

0800de2c <MemFile_methods>:
 800de2c:	58c1 0800 0000 0000                         .X......

0800de34 <stdout>:
 800de34:	0184 2000 6574 706d 735f 6d74 3233 305f     ... temp_stm32_0
 800de44:	5200 444e 7020 7265 6f73 616e 696c 6573     .RND personalise
 800de54:	7720 7469 2068 7768 6920 2064 5200 444e      with hw id .RND
 800de64:	7320 6565 2064 6977 6874 7420 6d65 2070      seed with temp 
 800de74:	6e65 7274 706f 2079 6800 6e61 6c64 5f65     entropy .handle_
 800de84:	6f63 7061 000a 454e 2054 6170 6c79 616f     coap..NET payloa
 800de94:	2064 6973 657a 2520 0a64 0000               d size %d...

0800dea0 <g_temp_stm32_sensor_driver>:
 800dea0:	5f29 0800 5d69 0800 0000 0000 0000 0000     )_..i]..........
	...
 800dec8:	6461 3163 5300 4d54 7220 6165 2064 6e69     adc1.STM read in
 800ded8:	2074 6574 706d 7320 6e65 6f73 0a72 4100     t temp sensor..A
 800dee8:	4344 6f20 6570 206e 6863 3120 0a36 6f00     DC open ch 16..o
 800def8:	5f63 6c63 635f 7362 ff00 6300 616f 5f70     c_cl_cbs...coap_
 800df08:	6572 6563 7669 2065 4f4e 2054 4d49 4c50     receive NOT IMPL
 800df18:	4d45 4e45 4554 0a44 0000 0000               EMENTED.....

0800df24 <k256>:
 800df24:	2f98 428a 4491 7137 fbcf b5c0 dba5 e9b5     ./.B.D7q........
 800df34:	c25b 3956 11f1 59f1 82a4 923f 5ed5 ab1c     [.V9...Y..?..^..
 800df44:	aa98 d807 5b01 1283 85be 2431 7dc3 550c     .....[....1$.}.U
 800df54:	5d74 72be b1fe 80de 06a7 9bdc f174 c19b     t].r........t...
 800df64:	69c1 e49b 4786 efbe 9dc6 0fc1 a1cc 240c     .i...G.........$
 800df74:	2c6f 2de9 84aa 4a74 a9dc 5cb0 88da 76f9     o,.-..tJ...\...v
 800df84:	5152 983e c66d a831 27c8 b003 7fc7 bf59     RQ>.m.1..'....Y.
 800df94:	0bf3 c6e0 9147 d5a7 6351 06ca 2967 1429     ....G...Qc..g)).
 800dfa4:	0a85 27b7 2138 2e1b 6dfc 4d2c 0d13 5338     ...'8!...m,M..8S
 800dfb4:	7354 650a 0abb 766a c92e 81c2 2c85 9272     Ts.e..jv.....,r.
 800dfc4:	e8a1 a2bf 664b a81a 8b70 c24b 51a3 c76c     ....Kf..p.K..Ql.
 800dfd4:	e819 d192 0624 d699 3585 f40e a070 106a     ....$....5..p.j.
 800dfe4:	c116 19a4 6c08 1e37 774c 2748 bcb5 34b0     .....l7.LwH'...4
 800dff4:	0cb3 391c aa4a 4ed8 ca4f 5b9c 6ff3 682e     ...9J..NO..[.o.h
 800e004:	82ee 748f 636f 78a5 7814 84c8 0208 8cc7     ...toc.x.x......
 800e014:	fffa 90be 6ceb a450 a3f7 bef9 78f2 c671     .....lP......xq.
 800e024:	6175 7472 0030 0000                         uart0...

0800e02c <uart_cfg>:
 800e02c:	4400 4000 101c 4002 0000 0002 0302 ffff     .D.@...@........
 800e03c:	6ef5 0800 0026 0000                         .n..&...

0800e044 <stm32_flash_dev>:
 800e044:	e05c 0800 0000 0800 0000 0002 0080 0000     \...............
 800e054:	0002 0000 00ff 0000                         ........

0800e05c <stm32_flash_funcs>:
 800e05c:	7199 0800 71a9 0800 7195 0800 7179 0800     .q...q...q..yq..
 800e06c:	0000 0000 718b 0800 0000 0000               .....q......

0800e078 <stm32_hal_spis>:
 800e078:	3bb8 2000 0000 0000 0000 0000 0000 0000     .;. ............
	...

0800e090 <stm32_tmr_devs>:
 800e090:	3c24 2000 0000 0000 0000 0000               $<. ........

0800e09c <portmap>:
 800e09c:	0800 4001 0c00 4001 1000 4001 1400 4001     ...@...@...@...@
 800e0ac:	1800 4001 0302 0504 0706 0908 0b0a 0d0c     ...@............
 800e0bc:	0f0e 1010 4441 2043 7263 6165 6574 6120     ....ADC create a
 800e0cc:	6364 0a31 0000 0000                         dc1.....

0800e0d4 <stm32f1_adc_funcs>:
 800e0d4:	970d 0800 97fd 0800 97ad 0800 96af 0800     ................
 800e0e4:	96a1 0800 9797 0800 9699 0800 7325 7263     ............%scr
 800e0f4:	6165 6574 6520 7073 3238 3636 305f 000a     eate esp8266_0..
 800e104:	7365 3870 3632 5f36 0030 0a5b                esp8266_0.[..

0800e111 <_ZL13WIFI_PASSWORD>:
 800e111:	796d 705f 7361 7773 726f 5f64 7369 735f     my_password_is_s
 800e121:	6365 6572 0074 0a5d 0000                     ecret.]....

0800e12c <_ZL13network_iface>:
 800e12c:	0000 0000 e104 0800 0010 0000 9a69 0800     ............i...
 800e13c:	0000 0000                                   ....

0800e140 <_ZL9WIFI_SSID>:
 800e140:	796d 735f 6973 0064 4455 0050 4354 0050     my_ssid.UDP.TCP.
 800e150:	5345 2050 6573 646e 7520 7064 000a 5345     ESP send udp..ES
 800e160:	2050 7473 0a72 5400 444f 3a4f 636f 655f     P str..TODO:oc_e
 800e170:	5f70 7473 0072 0000                         p_str...

0800e178 <_ZL9transport>:
 800e178:	0000 0000 9d19 0800 9d1d 0800 9d49 0800     ............I...
	...
 800e190:	9d29 0800 9d21 0800 9d25 0800 7325 7325     )...!...%...%s%s
 800e1a0:	7325 2000 4b4f 000a 4620 4941 454c 0a44     %s. OK.. FAILED.
 800e1b0:	4500 5053 0020 5441 432b 4649 5253 2b00     .ESP .AT+CIFSR.+
 800e1c0:	4943 5346 3a52 5453 4941 2c50 2522 3531     CIFSR:STAIP,"%15
 800e1d0:	5e5b 5d22 0022 252c 2c64 6425 003a 5441     [^"]".,%d,%d:.AT
 800e1e0:	432b 4457 4348 3d50 6425 252c 0064 706f     +CWDHCP=%d,%d.op
 800e1f0:	6e65 4100 2b54 4943 5350 4154 5452 253d     en.AT+CIPSTART=%
 800e200:	2c64 2522 2273 222c 7325 2c22 6425 7300     d,"%s","%s",%d.s
 800e210:	6e65 0064 7325 7325 2520 2e75 2e2e 000a     end.%s%s %u.....
 800e220:	5441 432b 5049 4553 444e 253d 2c64 6425     AT+CIPSEND=%d,%d
 800e230:	3e00 5300 4e45 2044 4b4f 7200 7365 7465     .>.SEND OK.reset
 800e240:	2500 2573 2e73 2e2e 000a 0a0d 5441 522b     .%s%s.......AT+R
 800e250:	5453 7200 6165 7964 6300 6e6f 656e 7463     ST.ready.connect
 800e260:	4100 2b54 5743 414a 3d50 2522 2273 222c     .AT+CWJAP="%s","
 800e270:	7325 0022 2a2a 202a 6843 6365 206b 4957     %s".*** Check WI
 800e280:	4946 535f 4953 2044 6e61 2064 4957 4946     FI_SSID and WIFI
 800e290:	505f 5341 5753 524f 2044 6e69 7420 7261     _PASSWORD in tar
 800e2a0:	6567 7374 622f 756c 7065 6c69 5f6c 796d     gets/bluepill_my
 800e2b0:	735f 6e65 6f73 2f72 7973 6373 6766 792e     _sensor/syscfg.y
 800e2c0:	6c6d 000a 6e6f 6f00 6666 7300 7465 6345     ml..on.off.setEc
 800e2d0:	6f68 2500 2573 2073 7325 2e2e 0a2e 0d00     ho.%s%s %s......
 800e2e0:	410a 4554 0031 0a0d 5441 3045 4100 2b54     .ATE1...ATE0.AT+
 800e2f0:	5743 4f4d 4544 253d 0064 5441 432b 5049     CWMODE=%d.AT+CIP
 800e300:	554d 3d58 0031 492b 4450 7300 6e65 2064     MUX=1.+IPD.send 
 800e310:	626d 6675 4100 2054 6572 7073 6e6f 6573     mbuf.AT response
 800e320:	6d20 7369 616d 6374 3a68 6620 756f 646e      mismatch: found
 800e330:	2220 7325 0a22 2020 6520 7078 6365 6574      "%s".   expecte
 800e340:	2064 2522 2273 000a 5441 2021 7325 0a0d     d "%s"..AT! %s..
 800e350:	2000 3c20 2520 2064 202f 7325 2000 3c20     .  < %d / %s.  <
 800e360:	2520 0073 5441 203d 7325 0a0d 4100 3c54      %s.AT= %s...AT<
 800e370:	2520 0073 5441 203e 7325 0a0d 4e00 4652      %s.AT> %s...NRF
 800e380:	6320 6572 7461 2065 726e 3266 6c34 3130      create nrf24l01
 800e390:	305f 000a 726e 3266 6c34 3130 305f 0000     _0..nrf24l01_0..

0800e3a0 <_ZL13network_iface>:
 800e3a0:	0001 0000 e394 0800 0010 0000 a991 0800     ................
 800e3b0:	0000 0000 0a7b 2500 6673 6572 3a71 2520     ....{..%sfreq: %
 800e3c0:	2064 484d 0d7a 000a 7325 7770 3a72 2520     d MHz...%spwr: %
 800e3d0:	2064 4264 0d6d 000a 7325 6164 6174 7220     d dBm...%sdata r
 800e3e0:	7461 3a65 2520 2064 626b 7370 0a0d 2500     ate: %d kbps...%
 800e3f0:	5073 6425 7420 2078 6973 657a 203a 6425     sP%d tx size: %d
 800e400:	6220 7479 7365 0a0d 2500 5073 6425 6120      bytes...%sP%d a
 800e410:	6464 3a72 3020 2578 3130 6c30 586c 0a0d     ddr: 0x%010llX..
 800e420:	7d00 000a 7325 6f6e 6320 6c61 626c 6361     .}..%sno callbac
 800e430:	0a6b 2500 6373 6e6f 6966 0a67 2500 6473     k..%sconfig..%sd
 800e440:	6665 6663 0a67 2500 6973 696e 0a74 2500     efcfg..%sinit..%
 800e450:	6573 616e 6c62 2065 7269 0a71 2500 3e73     senable irq..%s>
 800e460:	203e 2500 6273 6461 6320 6372 7720 6469     > .%sbad crc wid
 800e470:	6874 2520 0d64 000a 7325 6162 2064 7872     th %d...%sbad rx
 800e480:	6120 6464 2072 6977 7464 2068 6425 0a0d      addr width %d..
 800e490:	2500 6273 6461 7220 2078 6970 6570 2520     .%sbad rx pipe %
 800e4a0:	0d64 000a 7325 6573 2074 7874 6120 6464     d...%sset tx add
 800e4b0:	0a72 2500 6273 6461 7420 2078 6461 7264     r..%sbad tx addr
 800e4c0:	7720 6469 6874 2520 0d64 000a 7325 6162      width %d...%sba
 800e4d0:	2064 6164 6174 7220 7461 2065 6425 0a0d     d data rate %d..
 800e4e0:	2500 7273 2078 6f6d 6564 000a 7325 6162     .%srx mode..%sba
 800e4f0:	2064 7266 7165 2520 0d64 000a 7325 6162     d freq %d...%sba
 800e500:	2064 6970 6570 2520 0d64 000a 7325 6162     d pipe %d...%sba
 800e510:	2064 7874 7320 7a69 2065 6425 0a0d 2500     d tx size %d...%
 800e520:	7473 2078 6f6d 6564 000a 7325 6162 2064     stx mode..%sbad 
 800e530:	6f70 6577 2072 6425 0a0d 2500 6473 7369     power %d...%sdis
 800e540:	6261 656c 7220 0a78 2500 6573 616e 6c62     able rx..%senabl
 800e550:	2065 6e69 0a74 2500 6473 7369 6261 656c     e int..%sdisable
 800e560:	6920 746e 000a 7325 6162 2064 6361 206b      int..%sbad ack 
 800e570:	6970 6570 2520 0d64 000a 7325 6f70 6577     pipe %d...%spowe
 800e580:	2072 7075 000a 7325 6162 2064 6572 6461     r up..%sbad read
 800e590:	6261 656c 7020 7069 2065 6425 0a0d 6800     able pipe %d...h
 800e5a0:	6165 6564 0072 6170 6c79 616f 0064 7325     eader.payload.%s
 800e5b0:	7874 6d20 7562 0a66 2500 2573 2073 656c     tx mbuf..%s%s le
 800e5c0:	206e 3025 6432 203a 6e00 6672 7473 0a72     n %02d: .nrfstr.
 800e5d0:	0000 0000                                   ....

0800e5d4 <_ZL9transport>:
 800e5d4:	0000 0000 b897 0800 b89b 0800 b8c5 0800     ................
	...
 800e5ec:	b8a5 0800 b89f 0800 b8a3 0800 524e 2046     ............NRF 
 800e5fc:	5200 4e53 6c20 7369 6574 206e 7325 000a     .RSN listen %s..

0800e60c <g_sensor_driver>:
 800e60c:	bb75 0800 bb3d 0800 0000 0000 0000 0000     u...=...........
	...

0800e634 <sensor_types>:
 800e634:	e25f 0800 0000 0400 0001 0000 bc5f 0800     _..........._...
 800e644:	e684 0800 0020 0000 0002 0000 bc3b 0800     .... .......;...
 800e654:	e687 0800 0040 0000 0002 0000 bc17 0800     ....@...........
 800e664:	e689 0800 0100 0000 0002 0000 bbf3 0800     ................
	...
 800e684:	6674 7000 6800 2500 7273 2078 5400 504d     tf.p.h.%srx .TMP
 800e694:	6320 6572 7461 2065 6574 706d 735f 6d74      create temp_stm
 800e6a4:	3233 305f 000a 0000                         32_0....

0800e6ac <sysflash_map_dflt>:
 800e6ac:	0000 0000 0000 0800 1000 0000 0001 0000     ................
 800e6bc:	1000 0800 f000 0000 0002 0000 4010 0801     .............@..
 800e6cc:	0000 0000 0003 0000 4020 0801 0000 0000     ........ @......
 800e6dc:	0010 0000 0000 0801 2000 0000 0011 0000     ......... ......
 800e6ec:	2000 0801 2000 0000 0302 0504 0706 0908     . ... ..........
 800e6fc:	0b0a 0d0c 0f0e 1010                         ........

/Users/Luppy/mynewt/stm32bluepill-mynewt-sensor/bin/targets/bluepill_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf:     file format elf32-littlearm

arm-none-eabi-objdump: section '.rodata' mentioned in a -j option, but not found in any input file
   text	   data	    bss	    dec	    hex	filename
  55036	    276	  15252	  70564	  113a4	/Users/Luppy/mynewt/stm32bluepill-mynewt-sensor/bin/targets/bluepill_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf
